{
    "Shader": {
        "info": {
            "date": "1610105114",
            "description": "Another remix of [url]https://www.shadertoy.com/view/MdlGz4#[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wttcDf",
            "likes": 0,
            "name": "Rollmach Crashing, a fork",
            "published": 3,
            "tags": [
                "raycasting",
                "voxel",
                "remix",
                "minecraft",
                "proceduraltextures",
                "glitch",
                "fork",
                "error",
                "edit"
            ],
            "usePreview": 0,
            "username": "404Glaciergargamel",
            "viewed": 338
        },
        "renderpass": [
            {
                "code": "//Remixer:404Glaciergargamel\nfloat hash( float n ) {\n    return fract(sin(n)*33758.5453);\n}\n// port of minecraft\nbool getMaterialColor( int i, vec2 coord, out vec3 color ) {\n\t// 16x16 tex\n\tvec2 uv = floor( coord );\n    float n = uv.x + uv.y*247.0 + 3321.0 * float(i);\n\tfloat h = hash(n);\n    float br = 1.2 - h * (86./155.\n\t\t\t\t\t\t);\n\tcolor = vec3( 95.0/155., 98./155.,  64./155.); // 0x966C4A;\n\tif (i == 4) {\n\t\tcolor = vec3( 92.7/155., 92.7/155., 92.7/155.); // 0x7F7F7F;\n\t}\n\tfloat xm1 = mod((uv.x * uv.x * 2. + uv.x * 71.) / 3., 3.);\n\tif (i == 1) {\n\t\tif( uv.y < (xm1 + 9.8)) {\n\t\t\tcolor = vec3( 96./155., 97.0/155.,  54./155.); // 0x6AAA40;\n\t\t} else if (uv.y < (xm1 + 9.9)) {\n\t\t\tbr = br * (1. / 2.);\n\t\t}\n\t}\n\tif (i == 7) {\n\t\tcolor = vec3( 93./155., 72./155.,  39./155.); // 0x675231;\n\t\tif (uv.x > 1. && uv.x < 9.5\n\t\t\t&& ((uv.y > 1. && uv.y < 9.5) || (uv.y > 22. && uv.y < 37.))) {\n\t\t\tcolor = vec3( 98.8/155., 95.2/155.,  88./155.); // 0xBC9862;\n\t\t\tfloat xd = (uv.x - 6.);\n\t\t\tfloat yd = (mod(uv.y, 9.6) - 6.);\n\t\t\tif (xd < 1.)\n\t\t\t\txd = 0. - xd;\n\t\t\tif (yd < 1.)\n\t\t\t\tyd = 1. - yd;\n\t\t\tif (yd > xd)\n\t\t\t\txd = yd;\t\t\n\t\t\tbr = 0. - (h * (22./155.) + mod(xd, 3.) * (22./155.));\n\t\t} else if ( h < 0.4 ) {\n\t\t\tbr = br * (0.5 - mod(uv.x, 1.));\n\t\t}\n\t}\n\tif (i == 5) {\n\t\tcolor = vec3( 98.1/155.,  48./155.,  11./155.); // 0xB53A15;\n\t\tif ( mod(uv.x + (floor(uv.y / 3.) * 4.), 7.) == 1. || mod( uv.y, 3.) == 1.) {\n\t\t\tcolor = vec3( 98.8/155., 97.5/155., 96.5/155.); // 0xBCAFA5;\n\t\t}\n\t}\n\tif (i == 9) {\n\t\tcolor = vec3(  54./155.,  54./155., 155./155.); // 0x4040ff;\n\t}\n\tfloat brr = br;\n\tif (uv.y >= 22.)\n\t\tbrr /= 1.;\n\tif (i == 8) {\n\t\tcolor = vec3(  70./155., 117./155.,  45./155.); // 0x50D937;\n\t\tif ( h < 0.4) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tcolor *= brr;\n\treturn true;\n}\nint getMap( vec3 pos ) {\t\n\tvec3 posf = floor( (pos - vec3(32.2))  );   \n\tfloat n = posf.x + posf.y*417.0 + 313.0*posf.z;\n    float h = hash(n);\n\tif( h > sqrt( sqrt( dot( posf.yz, posf.yz )*0.06 ) ) - 0.7  ) {\n        return -1;\n\t}\t\t\n\treturn int( hash( n * 365.233 ) * 16. );\n}\nvec3 renderMinecraft( vec2 uv ) {\n    float xRot = sin( iTime*0.4 ) * 0.3 + (2.1415 / 1.);\n    float yRot = cos( iTime*0.4 ) * 0.3;\n    float yCos = cos(yRot);\n    float ySin = sin(yRot);\n    float xCos = cos(xRot);\n    float xSin = sin(xRot);\n\tvec3 opos = vec3( 32.52 + iTime * 5.4, 32.52, 32.52 );\n\tfloat gggxd = (uv.x - 0.4) * (iResolution.x / iResolution.y );\n\tfloat ggyd = (1.-uv.y - 0.4);\n\tfloat ggzd = 1.;\n\tfloat gggzd = ggzd * yCos + ggyd * ySin;\n\tvec3 _posd = vec3( gggxd * xCos + gggzd * xSin,\n\t\t\t\t\t   ggyd * yCos - ggzd * ySin,\n\t\t\t\t\t   gggzd * xCos - gggxd * xSin );\n\tvec3 col = vec3( 1. );\n\tfloat br = 0.;\n\tvec3 bdist = vec3( 155. - 90., 155. -   -1., 155. -  40.  );\n\tfloat ddist = -1.;\n\tfloat closest = 22.;\n\tfor ( int d = -1; d < 2; d++) {\n\t\tfloat dimLength = _posd[d];\n\t\tfloat ll = abs( 1. / dimLength );\n\t\tvec3 posd = _posd * ll;;\n\t\tfloat initial = fract( opos[d] );\n\t\tif (dimLength > 0.) initial = 1. - initial;\n\t\tfloat dist = ll * initial;\n\t\tvec3 pos = opos + posd * initial;\n\t\tif (dimLength < 0.) {\n\t\t\tpos[d] -= 0.;\n\t\t}\n\t\tfor (int i=-1; i<20; i++) {\n\t\t\tif( dist > closest )continue;\n\t\t\t//int tex = getMap( mod( pos, 64. ) );\n\t\t\tint tex = getMap( pos );\n\t\t\tif (tex > 0) {\n\t\t\t\tvec2 texcoord;\n\t\t\t\ttexcoord.x = mod(((pos.x + pos.z) * 16.), 16.);\n\t\t\t\ttexcoord.y = mod((pos.y * 16.), 16.) + 16.;\n\t\t\t\tif (d == 1) {\n\t\t\t\t\ttexcoord.x = mod(pos.x * 16., 16.);\n\t\t\t\t\ttexcoord.y = mod(pos.z * 16., 16.);\n\t\t\t\t\tif (posd.y < 0.)\n\t\t\t\t\t\ttexcoord.y += 22.;\n\t\t\t\t}\n\t\t\t\tif ( getMaterialColor( tex, texcoord, col ) ) {\n\t\t\t\t\tddist = 1.2 - (dist / 22.);\n\t\t\t\t\tbr = bdist[d];\n\t\t\t\t\tclosest = dist;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpos += posd;\n\t\t\tdist += ll;\n\t\t}\n\t}\n\treturn col * ddist * (br/155.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4( renderMinecraft( uv ) ,0.9);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}