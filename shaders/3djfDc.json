{
    "Shader": {
        "info": {
            "date": "1591040230",
            "description": "Most ideas were taken from here: https://www.youtube.com/watch?v=dhuigO4A7RY&t=272s",
            "flags": 0,
            "hasliked": 0,
            "id": "3djfDc",
            "likes": 14,
            "name": "Starfield_",
            "published": 3,
            "tags": [
                "star",
                "space",
                "stars",
                "starfield"
            ],
            "usePreview": 0,
            "username": "kotfind",
            "viewed": 769
        },
        "renderpass": [
            {
                "code": "#define NUM_LAYERS 7.\n\nfloat rand(in vec2 p) {\n    return fract(sin(p.x * 317. + p.y * 137.) * 132.);\n}\n\nfloat star(in vec2 uv, in float rays) {\n\tfloat d = length(uv);\n    float m = .1/d;\n    \n    m += 1./exp(100. * abs(uv.x * uv.y)) * rays;\n    \n    m *= smoothstep(1.0, 0.2, d);\n    \n    return m;\n}\n\nvec3 starLayer(in vec2 uv) {\n\tfloat T = iTime * 1.8;\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n   \tvec3 col = vec3(0.);\n\n    for (float y = -1.; y <= 1.; ++y) {\n        for (float x = -1.; x <= 1.; ++x) {\n            vec2 offs = vec2(x, y);\n            float r = rand(id + offs);\n            float size = max(0.3, fract(r * 127.));\n            float rays = exp((size - 1.) * 50.) * 2.;\n            float blink = sin(T * r) * 0.5 + 0.5;\n            vec3 c = 2. * normalize(vec3(0.8, 0.4, 0.9)) * fract(vec3(r * 123., r * 987., r * 567.));\n            col += blink * c * size * star(gv - offs - vec2(r, fract(r * 275.)) + .5, rays);\n        }\n    }\n    \n    return col;\n}\n\nmat2 rot(in float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = (fragCoord - iResolution.xy*.5) / iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    float t = iTime*.08;\n    uv *= rot(t);\n    for (float i = 0.; i < 1.; i += 1./NUM_LAYERS) {\n        float depth = fract(i + t);\n        float scale = mix(20., 2., depth);\n        float fade = depth * smoothstep(1., .9, depth);\n    \tcol += fade * starLayer(uv * scale + 323. * i);\n    }\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}