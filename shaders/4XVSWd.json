{
    "Shader": {
        "info": {
            "date": "1720642611",
            "description": "a test of rng to make static on a per pixel basis",
            "flags": 0,
            "hasliked": 0,
            "id": "4XVSWd",
            "likes": 2,
            "name": "test_static_rng",
            "published": 3,
            "tags": [
                "learning"
            ],
            "usePreview": 0,
            "username": "tetrismegistus",
            "viewed": 97
        },
        "renderpass": [
            {
                "code": "#define hash_f_s(s)  ( float( hashi(uint(s)) ) / float( 0xffffffffU ) )\n#define hash_f()  ( float( seed = hashi(seed) ) / float( 0xffffffffU ) )\n#define hash_v2()  vec2(hash_f(),hash_f())\n#define hash_v3()  vec3(hash_f(),hash_f(),hash_f())\n#define hash_v4()  vec3(hash_f(),hash_f(),hash_f(),hash_f())\n\nuint seed;\nuint hashi(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{     \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;            \n    ivec2 i_coords = ivec2(fragCoord);    \n    float timeFractional = fract(iTime);\n    float timeIntegral = floor(iTime);        \n    int id = i_coords.x + i_coords.y * int(iResolution.x);\n    seed = 1235125u + uint(id) + uint(timeIntegral * 1000.0) + uint(timeFractional * 1000000.0);   \n    fragColor = vec4(vec3(hash_f()),  1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}