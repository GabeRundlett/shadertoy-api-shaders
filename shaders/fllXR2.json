{
    "Shader": {
        "info": {
            "date": "1626087655",
            "description": "a simple rainbow hue function, 124 ch\n",
            "flags": 0,
            "hasliked": 0,
            "id": "fllXR2",
            "likes": 1,
            "name": "Hue Rainbow",
            "published": 3,
            "tags": [
                "rainbow",
                "hue",
                "golf"
            ],
            "usePreview": 0,
            "username": "spalmer",
            "viewed": 339
        },
        "renderpass": [
            {
                "code": "/** /\n// my pathetic 124 chars\nvoid mainImage(out vec4 o, vec2 p)\n{\n\to = sqrt(max(2. - 6.*abs(fract(p.x * 2. / iResolution.x) - vec4(0,1,2,3) / 3.), 0.));\n\to.x = max(o.x, o.w);\n}\n/**/\n// someone probably did this before; I know I've seen similar stuff\n// just worked this out from prior code I had based on Mundhenk and Jos Stam,\n// but it's so different I think it's basically original code now.\n// I could swear I've seen this style of clipped bump before though...\n// and there's no way I'll win the golfing game  ;)\n\n/** /\n// FabriceNeyret2 from http://shadertoy.com/view/ltyXRm, 110 ch here\nvoid mainImage(out vec4 o, vec2 p)\n{\n    o = sqrt(max(abs(fract(p.x * 2. / iResolution.x + vec4(3,2,1,0) / 3.) * 6. - 3.) - 1., 0.));\n}\n/**/\n\n/**/\n// Xor from comment at http://shadertoy.com/view/7tGBWz only 98 ch\nvoid mainImage(out vec4 O,vec2 C) \n{\n    O = sqrt(abs(mod(C.x/iResolution.x*12. + vec4(0,4,2,0), 6.)-3.)-1.); // 98 ch w properish gamma\n}\n//    O=abs(mod(C.x/iResolution.x*12.+vec4(0,4,2,0),6.)-3.)-1.; // 92 chars\n/**/\n\n/** /\n//  iq (96 chars, wrong gamma though): \n// from comment at http://shadertoy.com/view/7tGBWz\nvoid mainImage(out vec4 O,vec2 C) \n{\n    O=abs(6.*fract(C.x*2./iResolution.x+vec4(0,2,1,0)/3.)-3.)-1.;\n}\n/**/\n\n/** /\n// Fabrice from that same page comment: (87 ch)\nvoid mainImage(out vec4 O,vec2 U) \n{\n    O = .6 + .6 * cos(12.6 * U.x/iResolution.x + vec4(0,23,21,0));\n}\n/**/\n\n// duh, found an older unlisted toy of mine that\n// has las-inspired code that seems shorter!  haha\n// at Hue Test https://shadertoy.com/view/3t3GDs\n/** /\n// earliest use of this method I can find is by las in 2011:\n// http://www.pouet.net/topic.php?which=7920&page=29&x=14&y=9\n\nvec3 hue(float h)\n{\n\tvec3 h3 = fract(h - vec3(0, 1, 2) / 3.);\n\treturn clamp(abs(h3 * 6. - 3.) - 1., 0., 1.);\n}\n// of course would need inlined into main and further golfed\nvoid mainImage(out vec4 o, vec2 p) { o = vec4(hue(p.x*2./iResolution.x), 1); }\n/**/\n\n/** /\n// Xor from comments, 119 ch\nvoid mainImage(out vec4 o, vec2 p)\n{\n    o = sqrt(max(2.-abs(12.*mod(p.x / iResolution.x,.5) - vec4(0,2,4,6)),0.));\n\to = max(o, o.wyzx);\n}\n/**/\n\n/** /\n// Xor sqrt-less version from comments, 106 ch, looks pretty good but is not linear in gamma,\n// seems scaled slightly differently.\n// also I don't trust the undefined behavior using ++o inside expression involving o\nvoid mainImage(out vec4 o, vec2 p)\n{\n\to = -abs(3.*fract(p.x / iResolution.y) - vec4(0,1,2,3));\n\to = max(++o, o.wyzx)*2.; // U.B.\n}\n/**/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}