{
    "Shader": {
        "info": {
            "date": "1611053830",
            "description": "attempt to use ideas from https://github.com/mds2/simple-polynomial-function-approximation to approximate cartesian->polar conversion\n\nSee also : https://www.shadertoy.com/view/WtGcWw",
            "flags": 0,
            "hasliked": 0,
            "id": "WlKcWD",
            "likes": 2,
            "name": "polynomial polar approximations",
            "published": 3,
            "tags": [
                "approximation",
                "polar",
                "polynomial"
            ],
            "usePreview": 0,
            "username": "mds2",
            "viewed": 294
        },
        "renderpass": [
            {
                "code": "#define TEST_ATAN 0\n#define TEST_FAST_1 0\n#define TEST_FAST_2 0\n#define TEST_FAST_3 0\n\nvec2 fast_polar_1(in vec2 pos) {\n  vec2 rel = abs(pos);\n  float l = length(rel);\n  rel = rel / l;\n  const mat2 poly = mat2(-0.05313198,  1.52184169,\n                         0.02548278, -0.47818779); // note : transposed\n  float angle = dot(vec2(1.0, rel.y), poly * vec2(1.0, rel.x));\n  if (pos.x * pos.y < 0.0) {\n    angle = 3.141592654 - angle;\n  }\n  if (pos.y < 0.0) {\n     angle = angle + 3.141592654;\n  }\n  \n  return vec2(l, angle);\n}\n\nvec2 fast_polar_2(in vec2 pos) {\n  vec2 rel = abs(pos);\n  float l = length(rel);\n  rel = rel / l;\n  const mat3 poly = mat3(-0.02615218,  1.52408152,  0.06801275,\n                         0.06062274, -1.67373931,  0.77403607,\n                         -0.03068766,  1.16883771, -0.74732226\n                    ); // note : transposed\n  float angle = dot(vec3(1.0, rel.y, rel.y * rel.y), poly * vec3(1.0, rel.x, rel.x * rel.x));\n  if (pos.x * pos.y < 0.0) {\n    angle = 3.141592654 - angle;\n  }\n  if (pos.y < 0.0) {\n     angle = angle + 3.141592654;\n  }\n  \n  return vec2(l, angle);\n}\n\nvec2 fast_polar_3(in vec2 pos) {\n  vec2 rel = abs(pos);\n  float l = length(rel);\n  rel = rel / l;\n  const mat4 poly = mat4(-0.01554769,  1.52800768,  0.17473044, -0.12072499,\n                         0.08148376, -3.49823103,  3.93686816, -1.51359643,\n                         -0.11363601,  6.09961648, -9.57827611,  4.39990684,\n                         0.04862359, -3.20708214,  5.6870433 , -2.79976505);\n  float angle = dot(vec4(1.0, rel.y, rel.y * rel.y * vec2(1.0, rel.y)),\n                    poly * \n                    vec4(1.0, rel.x, rel.x * rel.x * vec2(1.0, rel.x)));\n  if (pos.x * pos.y < 0.0) {\n    angle = 3.141592654 - angle;\n  }\n  if (pos.y < 0.0) {\n     angle = angle + 3.141592654;\n  }\n  \n  return vec2(l, angle);\n}\n\nvec2 polar(in vec2 pos) {\n  return vec2(length(pos), mod(atan(pos.y, pos.x), 2.0 * 3.141592654));\n}\n\nfloat grid_shade(in vec2 pos) {\n  vec2 p = pos * vec2(3.0, 20.0 / 3.141592654);\n  p = fract(p + 0.5);\n  p = abs(p - 0.5);\n  p = smoothstep(vec2(0.0), vec2(0.1), p);\n  return p.x * p.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    float val1 = grid_shade(polar(uv));\n    float val2 = grid_shade(fast_polar_2(uv));\n    float val3 = grid_shade(fast_polar_3(uv));\n    \n    vec3 col = vec3(val1, val2, val3);\n    \n#if TEST_ATAN || TEST_FAST_1 || TEST_FAST_2 || TEST_FAST_3\n    vec2 acc = uv;\n    vec2 acc_out = vec2(0.0);\n    for (int i = 0; i < 1000; ++i) {\n#if TEST_ATAN\n      acc_out += polar(acc);\n#endif\n#if TEST_FAST_1\n      acc_out += fast_polar_1(acc);\n#endif\n\n#if TEST_FAST_2\n      acc_out += fast_polar_2(acc);\n#endif\n\n\n#if TEST_FAST_3\n      acc_out += fast_polar_3(acc);\n#endif\n\n      acc.y += 0.001;\n    }\n\n    col.rg += normalize(acc_out);\n#endif\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}