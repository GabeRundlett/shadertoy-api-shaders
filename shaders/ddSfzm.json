{
    "Shader": {
        "info": {
            "date": "1691321255",
            "description": "All year long I'm going to just focus on truchet tiles and the likes!\n\ndont puke, it's truchets...in a warp",
            "flags": 0,
            "hasliked": 0,
            "id": "ddSfzm",
            "likes": 17,
            "name": "Year of Truchets #050",
            "published": 3,
            "tags": [
                "warp",
                "truchet"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 212
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #050\n    08/06/2023  @byt3_m3chanic\n    Truchet Core \\M/->.<-\\M/ 2023 \n    \n*/\n\n#define R iResolution\n#define T iTime\n#define M iMouse\n\n#define PI          3.14159265359\n#define PI2         6.28318530718\n\n#define MIN_DIST    1e-4\n#define MAX_DIST    50.\n\nfloat hash21( vec2 p ) { return fract(sin(dot(p,vec2(23.43,84.21))) *4832.3234); }\nmat2 rot(float a){ return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\n//@iq hue palettes \nvec3 hue(float t){ return .35 + .4*cos(PI2*t*(vec3(1.,.95,.65)+vec3(.05,.5,.95))); }\n\nfloat scale = 4.;\nvoid mainImage( out vec4 fragColor, in vec2 F )\n{\n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    vec2 vv = uv;\n    uv*=rot(T*.1+(M.x/R.x)*PI);\n\n    float y = .3*sin(T*.5), x = .3*cos(T*.5);\n    if(M.z>0.) {x=0.;y=0.;}\n    \n    uv *= rot(y+(M.y/R.y)*2.);\n    uv = vec2(log(length(uv)), atan(uv.y, uv.x))*.637;//.31825;//1.274;//.637;//.31825;//\n  \n    uv.x+=.35*sin(uv.y*PI+T);\n    uv.x+=T*.5;\n    \n    vec3 clb = hue(uv.x*.2);\n    vec3 cla = vec3(.8);\n    vec3 clx = mix(vec3(.1),vec3(.4),clamp(vv.y+.5,0.,1.));\n    vec3 C = clx;\n\n    float px = fwidth(uv.x)*4.;\n    \n    vec2 id=floor(uv*scale);\n    float ck=mod(id.x+id.y,2.)*2.-1.;\n\n    //mod for long slices\n    vec2 cd=vec2(mod(id.x,1.),mod(id.y,3.))*2.-1.;\n\n    uv=fract(uv*scale)-.5;\n    \n    float hs = hash21(id);\n    if(hs>.5) uv.x=-uv.x;\n    \n    float rd = fract(hs*37.39);\n    \n    vec2 p = length(uv-.5) < length(uv+.5) ? uv-.5 : uv+.5;\n    \n    float d = length(p)-.5;\n    \n    if(rd>.85) d = min(length(uv.x),length(uv.y));\n    //skip section logic\n    if(cd.x>.5 ) d = length(uv.y);\n    if(cd.y>.5 ) d = length(uv.x);\n\n    if(cd.y>.5 && cd.x>.5) {\n        d = 1.;\n    }\n    \n    C = mix(C,C*.45,smoothstep(.05+px,-px,abs(d)-.2));\n    C = mix(C,cla,smoothstep(px,-px,abs(d)-.14));\n    C = mix(C,clb,smoothstep(px,-px,abs(abs(d)-.14)-.075));\n\n    hs=hash21(vv);\n    if(hs<.5) C=mix(clamp(C+(hs*.1),vec3(0),vec3(1)),C,smoothstep(px,-px,abs(d)-.2));\n    // Gamma & Output\n    C = pow(C,vec3(.4545));\n    fragColor = vec4(C,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}