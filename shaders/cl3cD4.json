{
    "Shader": {
        "info": {
            "date": "1699180629",
            "description": "i think mod position can't be rotation single cell.",
            "flags": 0,
            "hasliked": 0,
            "id": "cl3cD4",
            "likes": 16,
            "name": " Rubik's mat sphere",
            "published": 3,
            "tags": [
                "rubik",
                "mat",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "chenxianming",
            "viewed": 1057
        },
        "renderpass": [
            {
                "code": "\n#define I iResolution\n#define S .25\n#define cc 3.\n#define sp .3\n#define T(s) fract(iTime * s) * PI * 4.\n#define T2(s) fract(iTime * s) * 5.\n#define tl( s ) fract( iTime * s )\n#define PI 3.1415926\n#define TAU 6.2831852\n#define rot( r ) mat2(cos(r), sin(r), -sin(r), cos(r) )\n\n\nfloat O( vec3 p ){\n    return length( p ) - .25;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat ct( vec3 p, vec3 p2 ){\n    return max(\n        sdCapsule( p, normalize( p2 ), vec3(0), .01 ),\n        max(\n            max(\n                abs( p.x ) - .5,\n                abs( p.y ) - .5\n            ),\n            abs( p.z ) - .5\n        )\n    );\n}\n\nfloat f( vec3 p, vec3 p2 ){\n    \n    return min(\n        O( p2 ),\n        ct( p, p2 )\n    );\n}\n\nvoid updateCR( inout vec3 a, inout vec3 b, inout vec3 c, float i ){\n    a.xy *= rot( T( S ) );\n    a.x += ( sp * 2. ) * i - ( sp * ( cc - 1. ) );\n    b.x += ( sp * 2. ) * i - ( sp * ( cc - 1. ) );\n\n    c.xz *= rot( T( S ) );\n    c.x += ( sp * 2. ) * i - ( sp * ( cc - 1. ) );\n}\n\nvoid updateXY( inout vec3 a, inout vec3 b, float j ){\n    a.xy *= rot( T( S ) );\n    b.y += ( sp * 2. ) * j - ( sp * ( cc - 1. ) );\n    a.y += ( sp * 2. ) * j - ( sp * ( cc - 1. ) );\n}\n\nvoid updateR( inout vec3 a, inout vec3 b, float h ){\n    a.z += ( sp * 2. ) * h - ( sp * ( cc - 1. ) );\n    b.xz *= rot( T( S ) );\n    b.z += ( sp * 2. ) * h - ( sp * ( cc - 1. ) );\n}\n\nfloat df( vec3 p ){\n\n    p.xz *= rot( T( S * .5 ) );\n    p.zy *= rot( T( S * .5 ) );\n\n  \n    float d = .1, i, id;\n        \n    for( ;i < cc; i++ ){\n    \n        vec3 p1 = p,\n             p1a = p,\n             p1b = p;\n        \n        updateCR( p1a, p1, p1b, i );\n    \n        for( float j = 0.;j <cc; j++ ){\n            vec3 p2 = p,\n                 p2a = p;\n            \n            updateXY( p2a, p2, j );\n\n            for( float h = 0.;h < cc; h++ ){\n                id++;\n                vec3 p3 = p,\n                     p3a = p;\n                \n                updateR( p3, p3a, h );\n                \n                \n                vec3 m3 = vec3( p1.x, p2.y, p3.z );\n                \n                if( h == 0. && ( tl( .5 ) < .75 && tl( .5 ) > .5 )  )\n                // if( h == 0. && tl( .5 ) < .5 )\n                    m3.x = p1a.x,\n                    m3.y = p2a.y;\n\n\n                if( j == 1. && ( tl( .5 ) > .75 && tl( .5 ) < 1. ) )\n                // if( j == 1. && tl( .5 ) > .5 )\n                    m3.x = p1b.x,\n                    m3.z = p3a.z;\n\n                \n                if( id != 14. )\n                    d = min(\n                        d,\n                        f( p, m3 )\n                    );\n                    \n            }\n        }\n    }\n        \n    return d;\n}\n\nvoid mainImage( out vec4 U, in vec2 V )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 u = ( V * 2. - I.xy ) / I.y;\n    \n    vec3 c, p, o = vec3( 0., 0., -2.5 ), r = vec3( u, 1. );\n    float t, d, i, dp, e = sqrt( 1e-4 );\n    for( ; i < 40.; i++ )\n        p = o + r * t,\n        d = df( p ),\n        dp = ( 1. - abs( d ) / e ),\n        c += ( dp > 0. ) ? .1 * ( i / 40. ) * dp / t : 0.,\n        t += max( abs( d ), e * .5 );\n\n\n    // Output to screen\n    U = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}