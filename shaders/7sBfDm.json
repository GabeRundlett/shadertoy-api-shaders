{
    "Shader": {
        "info": {
            "date": "1646415063",
            "description": "sRGB is [b]NOT[/b] the same as 2.2 gamma !  The error is significant for images with dark tones: compare the center row vs. top and bottom, simulating a wrong correction applied.  To visualize the difference independently of your display, enable line 37.",
            "flags": 0,
            "hasliked": 0,
            "id": "7sBfDm",
            "likes": 6,
            "name": "sRGB vs gamma encoding 3",
            "published": 3,
            "tags": [
                "gamma",
                "srgb",
                "srgbvspow"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 826
        },
        "renderpass": [
            {
                "code": "\nvec3 srgb_decode (vec3 e) {\n  return mix(e/12.92,pow((e+.055)/1.055,vec3(2.4)),lessThan(vec3(.04045),e));\n}\n\nvec3 srgb_encode (vec3 v) {\n  return mix(12.92*v,1.055*pow(v,vec3(.41666))-.055,lessThan(vec3(.0031308),v));\n}\n\nvoid mainImage (out vec4 d, vec2 f) {\n//#define HALFTONE(p) float(int(dot(floor(f),vec2(413,229)))%512<int((p)*512.))\n  vec2 grid = vec2(8,3);\n  vec2 res = iResolution.xy;\n  vec2 uv = grid*f/res.xy;\n  ivec2 c = ivec2(floor(uv));\n  uv = (fract(uv)*2.-1.)/grid*res.xy/res.xx*grid.x;\n\n  // Initially: all cells indentical image of diffuse+ambient shading on a sphere\n  uv*=1.1;\n  vec3 n = normalize(vec3(uv,sqrt(1.-dot(uv,uv))));\n  vec3 l = normalize(vec3(.2,.5,.4));\n  vec3 col = dot(uv,uv)>1. ? vec3(0) :\n    vec3(.1,.05,.05) + vec3(.9,.8,.7)*max(0.,dot(n,l));\n\n  // Each cell is one halving of light energy\n  float m = exp2(-float(c.x));\n  col*= m;\n\n  // Top: what happens when gamma signal is sent to sRGB display\n  if (c.y==2) col = srgb_decode(pow(col,vec3(1./2.2)));\n\n  // Botton: what happens when sRGB signal is sent to gamma display\n  if (c.y==0) col = pow(srgb_encode(col),vec3(2.2));\n\n  // If you don't trust your display, enable the following.\n  // Middle row will be the correctly displayed one.\n#if 0\n  vec4 colr = vec4(col,m);\n  colr = colr*14.+.1; if (colr.a>1.) colr=vec4(0);\n  col = colr.rgb;\n#endif\n\n  d.rgb = srgb_encode(col);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}