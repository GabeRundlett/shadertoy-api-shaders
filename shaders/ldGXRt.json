{
    "Shader": {
        "info": {
            "date": "1466038678",
            "description": "A small, quiet street at nighttime.\n\nAn experiment for me to attempt large-scale modelling and repetition.",
            "flags": 32,
            "hasliked": 0,
            "id": "ldGXRt",
            "likes": 15,
            "name": "Foggy Road",
            "published": 3,
            "tags": [
                "reflection",
                "sky",
                "raymarcher",
                "moon",
                "distance",
                "night",
                "modelling",
                "street"
            ],
            "usePreview": 0,
            "username": "jackdavenport",
            "viewed": 1297
        },
        "renderpass": [
            {
                "code": "#define BLUR_SAMPLES 16\n#define BLUR_SIZE .01\n#define BLOOM_INTENSITY 1.5\n\nvec3 blur(sampler2D sampler, vec2 uv, float sub) {\n \n    vec3 sum = vec3(0.);\n    float we = 1. / float(BLUR_SAMPLES);\n    float an = radians(360. / float(BLUR_SAMPLES));\n    for(int i = 0; i < BLUR_SAMPLES; i++) {\n        float s = sin(an * float(i)) * BLUR_SIZE;\n        float c = cos(an * float(i)) * BLUR_SIZE;\n        sum += (texture(sampler, uv+vec2(c,s)).xyz - sub) * we;\n    }\n    return clamp(sum,0.,1.);\n    \n}\n\nvec3 blend(vec3 a, vec3 b) {\n \n    return 1.-(1.-a)*(1.-b);\n    \n}   \n\nvoid mainImage(out vec4 f, in vec2 c) {\n \n    vec4 t = texture(iChannel0, c / iResolution.xy);\n    \n    //vec3 bloom = blur(iChannel0, c / iResolution.xy, .5) * BLOOM_INTENSITY;\n    //t.xyz = blend(t.xyz, bloom);\n    \n    t.xyz = pow(t.xyz, vec3(.8));\n    f = t;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_ITERATIONS 512\n#define MIN_DISTANCE  .001\n\n#define LIGHT_INT .43\n#define LIGHT_COL vec3(192.,192.,240.) / (255./LIGHT_INT)\n#define LIGHT_DIR normalize(vec3(25.,25.,55.))\n\nstruct Ray { vec3 ori; vec3 dir; };\nstruct Dst { float dst; int id;  };\nstruct Hit { vec3 p; int id; \t };\n\nDst dstFloor(vec3 p, float y) {\n \n    float d = texture(iChannel2, mod(p.xz,1.)).x * .01;\n    if(p.x > 1. && p.x < 9.) {\n        y -= .25;\n    }\n    return Dst(p.y - y - max(d,0.), 0);\n}\n\n// Source: https://iquilezles.org/articles/distfunctions\nDst sdCappedCylinder( vec3 p, vec2 h) {\n    \n  \tvec3 q  = p;\n    float c = 5.5;\n  \tq.z\t = mod(q.z,c)-.5*c;\n    \n  \tvec2 d = abs(vec2(length(q.xz),q.y)) - h;\n  \tfloat dst = min(max(d.x,d.y),0.0) + length(max(d,0.0));\n    \n    return Dst(dst,1);\n}\nDst sdBuilding(vec3 p, vec3 b) {\n    \n    vec3 q  = p;\n    float c = 3.25;\n    q.z    = mod(q.z,c)-.5*c;\n    \n    return Dst(length(max(abs(q)-b,0.0)), 2);\n    \n}\n\nDst dstUnion(Dst a, Dst b) {\n \n    if(a.dst < b.dst) return a;\n    return b;\n    \n}\n\nDst dstScene(vec3 p) {\n \n    Dst dst = dstFloor(p, 0.);\n    dst \t= dstUnion(dst, sdCappedCylinder(p, vec2(.2,5.)));\n    dst\t\t= dstUnion(dst, sdBuilding(p+vec3(4.,0.,0.),vec3(1.,2.5,1.)));\n    dst \t= dstUnion(dst, sdCappedCylinder(p-vec3(10.,0.,0.), vec2(.2,5.)));\n    dst\t\t= dstUnion(dst, sdBuilding(p-vec3(14.,0.,0.),vec3(1.,2.5,1.)));\n    \n    return dst;\n    \n}\n\nHit raymarch(Ray ray, int maxIter, float maxDst) {\n \n    vec3 p = ray.ori;\n    int id = -1;\n    \n    for(int i = 0; i < MAX_ITERATIONS; i++) {\n        \n        if(i >= maxIter || distance(p,ray.ori) >= maxDst) {\n\n            id = -1;\n            break;\n            \n        }\n        \n        Dst scn = dstScene(p);\n        p += ray.dir * scn.dst * .75;\n        \n        if(scn.dst < MIN_DISTANCE) {\n         \n            id = scn.id;\n            break;\n            \n        }\n        \n    }\n    \n    return Hit(p,id);\n    \n}\n\nvec3 getSky(vec3 dir) {\n \n    float rand = texture(iChannel1, dir.yx*iTime*.5).r;\n    vec3 stars = pow(texture(iChannel0, 6.*dir.xy).xxx,vec3(12.))*rand;\n    vec3 moon  = vec3(0.);\n    \n    if(max(pow(dot(dir,LIGHT_DIR),360.),0.) > .7) {\n        moon = vec3(2.)*texture(iChannel1,dir.xy*.5).xxx;\n    }\n    \n    return mix(vec3(1.),stars,pow(dir.y+.1,.1))+moon;\n    \n}\n\nvec3 calcFog(Ray ray, vec3 p, vec3 col) {\n \n    float fog = smoothstep(15., 45., distance(ray.ori,p));\n    fog *= 1.-smoothstep(0.,.25,ray.dir.y);\n    \n    return mix(col, vec3(1.)*LIGHT_COL, fog);\n    \n}\n\nvec3 calcNormal(vec3 p) {\n \n    vec2 eps = vec2(.001,0.);\n    vec3 n   = vec3(dstScene(p+eps.xyy).dst-dstScene(p-eps.xyy).dst,\n                    dstScene(p+eps.yxy).dst-dstScene(p-eps.yxy).dst,\n                    dstScene(p+eps.yyx).dst-dstScene(p-eps.yyx).dst);\n    return normalize(n);\n    \n}\n\nfloat calcFresnel(Ray ray, vec3 n, float power) {\n \n    return 1. - max(pow(-dot(ray.dir,n), power), 0.);\n    \n}\n\n// Source: https://www.shadertoy.com/view/Xds3zN\n// Modified by jackdavenport\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax, float softness )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<32; i++ )\n    {\n\t\tfloat h = dstScene( ro + rd*t ).dst;\n        res = min( res, softness*h/t );\n        t += clamp( h, 0.02, 0.40 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcLighting(vec3 col, vec3 p, vec3 n, vec3 r, float shine) {\n    \n    float d = max(dot(LIGHT_DIR,n), 0.);\n    float s = 0.;\n    \n    if(shine > 0.) {\n    \ts = max(pow(dot(LIGHT_DIR,r), shine), 0.);   \n    }\n    \n    d *= softshadow(p+LIGHT_DIR*.01,LIGHT_DIR,0.,256.,64.);\n    \n    return (col*LIGHT_COL*d)+(s*d*LIGHT_COL);\n    \n}\n\nvec3 shadeGround(Hit scn, vec3 n, vec3 r, vec3 t) {\n \n    return calcLighting(t, scn.p, n, r, mix(25.,45.,pow(t.x,3.)));\n    \n}\n\nvec3 shadePole(Hit scn, vec3 n, vec3 r) {\n \n    vec2 uv = mod(asin(n.xz) / 3.14159 + .5, 1.);\n    vec3 c  = texture(iChannel3, uv).xyz;\n    \n    return calcLighting(c, scn.p, n, r, 25.);\n    \n}\n\nvec3 shadeBuilding(Hit scn, vec3 n, vec3 r) {\n \n    vec3 c = vec3(1.);\n    return calcLighting(c, scn.p, n, r, 0.);\n    \n}\n\nvec3 getReflection(vec3 p, vec3 r) {\n    \n    Ray rr  = Ray(p+r*.01,r);\n    Hit rh  = raymarch(rr,128,256.);\n    vec3 rc = vec3(0.);\n    if(rh.id == 0) {\n    \tvec3 rn = calcNormal(rh.p);\n    \tvec3 rd = normalize(reflect(rr.dir,rn));\n    \trc = shadeGround(rh,rn,rd,texture(iChannel2,mod(p.xz,1.)).xyz);\n    } else if(rh.id == 1) {\n        vec3 rn = calcNormal(rh.p);\n        vec3 rd = normalize(reflect(rr.dir,rn));\n        rc = shadePole(rh,rn,rd);\n    } else if(rh.id == 2) {\n        vec3 rn = calcNormal(rh.p);\n        vec3 rd = normalize(reflect(rr.dir,rn));\n        rc = shadeBuilding(rh,rn,rd);\n\t} else {\n     \trc = getSky(r);   \n    }\n    \n    return calcFog(rr,rh.p,rc);\n    \n}\n\nvec3 shade(Ray ray) {\n \n    Hit scn  = raymarch(ray, MAX_ITERATIONS, 75.);\n    vec3 col = vec3(0.);\n    \n    if(scn.id == 0) {\n     \n        vec3 t = texture(iChannel2, mod(scn.p.xz,1.)).xyz;\n     \tvec3 n = calcNormal(scn.p);\n        vec3 r = normalize(reflect(ray.dir,n));\n        \n        col \t= shadeGround(scn,n,r,t);\n        vec3 rc = getReflection(scn.p, r);\n            \n      \tfloat f = calcFresnel(ray, n, .2);\n        col = mix(col, rc, f);\n        //col = vec3(f);\n        \n    } else if(scn.id == 1) {\n      \n        vec3 n = calcNormal(scn.p);\n        vec3 r = normalize(reflect(ray.dir,n));\n        \n        col \t= shadePole(scn,n,r);\n        vec3 rc = getReflection(scn.p, r);\n        \n        float f = calcFresnel(ray, n, .4);\n        col = mix(col, rc, f);\n        \n    } else if(scn.id == 2) {\n        \n        vec3 n = calcNormal(scn.p);\n        vec3 r = normalize(reflect(ray.dir,n));\n        \n        col = shadeBuilding(scn, n, r);\n        \n\t} else {\n     \n        col = getSky(ray.dir);\n        \n    }\n    \n    col = calcFog(ray, scn.p, col);\n    \n    float flare = max(pow(dot(ray.dir,LIGHT_DIR), 90.), 0.);\n    col += LIGHT_COL * flare * softshadow(ray.ori,LIGHT_DIR,0.,256.,16.);\n    \n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n    vec3 ori = vec3(-1., .4, -4.+iTime*.25);\n    vec3 dir = vec3(uv, 1.);\n    Ray  ray = Ray(ori,normalize(dir));\n    \n    if(iMouse.z > 0.) {\n    \tray.ori.xy += vec2(.5,1.)*((iMouse.xy/iResolution.xy)*2.-1.); \n        ray.ori.y\t= max(ray.ori.y, .1);\n    }\n    \n\tfragColor = vec4(shade(ray),1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}