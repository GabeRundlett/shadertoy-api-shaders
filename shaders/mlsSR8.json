{
    "Shader": {
        "info": {
            "date": "1674311656",
            "description": "mouse controls camera",
            "flags": 0,
            "hasliked": 0,
            "id": "mlsSR8",
            "likes": 28,
            "name": "waffle sphere maze 3",
            "published": 3,
            "tags": [
                "raymarching",
                "balls",
                "maze",
                "short",
                "marbles",
                "waffle"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/DlsXRn\n// variant of https://shadertoy.com/view/dlj3Dd\n\n#define rot(a)  mat2(cos(a+vec4(0,11,33,0)))                          // rotation \n#define H(p)    fract( 1e4*sin( dot( p , vec2(71,-97) )) )            // rand\n#define B(s)    length( F - .707*vec2( .5*s , fract(d*iTime) -.5) )   // ball SDF\n#define D(v)    max( 1. - v * R.y/20., 0.)                            // AA draw\n\nvoid C( vec2 U, vec2 D, inout float l, inout float x ) {\n    vec2 I = floor(U)      + D,              // cell Id\n         F = fract(U) - .5 - D;              // cell coordinates\n    float s = sign(H(I)-.5),                 // wall direction ( one of the 2 cell diagonals )\n          d = mod(I.x+I.y,2.) > 0. ? s : -s; // balls direction\n    F = ( F + s*vec2(-F.y,F) ) *.707;        // wall frame\n    x = min( x, abs(F.x) );                  // min distance to wall\n    \n    d *= sign( F.x );\n    l = min(l, min( B(s), B(-s) ) );         // min distance to balls on each wall side\n}\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.,s,m, r=8.,l,x; \n    vec3  R = iResolution, \n          D = normalize(vec3(U+U, -12.*R.y) - R),           // ray direction\n          p = vec3(0,0,40.+20.*cos(.2*iTime)), q,a,         // marching point along ray \n          M = iMouse.z > 0. ? 6.*iMouse.xyz/R -3.\n              :  vec3( 1,.5,0) * cos(.1*iTime + vec3(0,11,0)); \n    p.y += 7.; \n    for ( O=vec4(1); O.x > 0. && t > .001; O-=.01 ) {       // march scene\n        q = p, // t = 9.,\n        q.yz *= rot(-M.y),                                  // rotations\n        q.xz *= rot(-M.x-1.57), \n        t = length(q) - r;\n      if (abs(t)<.1) {                                      // optim: decorations only when close\n        a = abs(q), \n        m = max(a.x, max(a.y,a.z)), \n        q = m==a.x ? q.yzx : m==a.y ? q.xzy : q,        \n        U = vec2(atan(q.x,q.z),atan(q.y,q.z))*q.z*4./3.1416,\n        U *= 4.*r/m, \n        l=9.,x=9.; \n        C( U, vec2( 0 )  , l,x );                           // distance to balls and walls\n        C( U, vec2( 1,0) , l,x );                           // check neighbors when overlapping\n        C( U, vec2( 0,1) , l,x );\n        C( U, vec2(-1,0) , l,x );\n        C( U, vec2(0,-1) , l,x );\n        l /= 4.*r/7., x /= 4.*r/7., \n        s = min ( t+.1, max( t , x ) ),                     // walls trimmed by sphere\n        t = min(s, length(vec2(l*1.,t+.04))-.025 );         // balls\n      }\n        p += .5*t*D;                                        // step forward = dist to obj    \n      }\n\n   if (t!=s) O.gb = U-U;\n   O *= O*1.5; // O *= O*O*1.5;                             // color scheme\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}