{
    "Shader": {
        "info": {
            "date": "1491573170",
            "description": "quick experiment",
            "flags": 0,
            "hasliked": 0,
            "id": "MsScWz",
            "likes": 30,
            "name": "Recursive Voronoi",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "unconed",
            "viewed": 1070
        },
        "renderpass": [
            {
                "code": "// based on https://www.shadertoy.com/view/llG3zy\n\n#define LEVELS 4\n#define ANIMATE\n#define ANIMATE_D .5\n#define EPSILON .00001\n\nvec2 hash2(vec2 p)\n{\n    #if 1\n       // Dave Hoskin's hash as in https://www.shadertoy.com/view/4djSRW\n       vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n       p3 += dot(p3, p3.yzx+19.19);\n       vec2 o = fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n    #else\n       // Texture-based\n       vec2 o = texture( iChannel0, (p+0.5)/256.0, -100.0 ).xy;\n    #endif\n    #ifdef ANIMATE\n       o = 0.5 + ANIMATE_D*sin( iTime + o*6.2831853 );\n    #endif\n   return o;\n}\n\nvec3 voronoi( in vec2 x )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    vec2 mr, mp;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mp = n + g;\n        }\n    }\n\n    md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n\t\tvec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>EPSILON ) // skip the same cell\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec3( md, mp );\n}\n\nvec3 plot( vec2 p, float ss )\n{\n    float d = 8.0;\n    vec2 xy = p;\n    \n    vec3 albedo = vec3(0.0);\n    float r = 1.0;\n\n    for (int i = 0; i < LEVELS; ++i) {\n\t    vec3 c = voronoi(xy);\n        xy = xy * 2.0 + c.yz;\n        d = min(d, c.x * r);\n\n       \tfloat h = dot(c.yz, c.zy + 1.0) * r;\n        r *= .75;\n        vec3 cc = sin(vec3(h, h*2.0, h*3.0)) * .5 + .5;\n        albedo = mix(albedo, cc, .25);\n\t}\n    \n    float edge = clamp(1.1 - d * 32.0, 0.0, 1.0);\n    return vec3(albedo + edge);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sc = step(512., iResolution.y)*4. + 4.; // scale differently for fullscreen\n\tfloat ss = sc / iResolution.y; // size of 1 pixel\n    vec2 uv = (fragCoord.xy - iResolution.xy*.5) * ss;\n    fragColor = vec4(plot(uv, ss), 1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}