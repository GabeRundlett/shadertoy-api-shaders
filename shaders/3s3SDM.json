{
    "Shader": {
        "info": {
            "date": "1573806195",
            "description": "Inktober, but with shaders",
            "flags": 0,
            "hasliked": 0,
            "id": "3s3SDM",
            "likes": 2,
            "name": "shadetober #25 (tasty)",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "shadetober",
                "inktober2019"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 322
        },
        "renderpass": [
            {
                "code": "// modification of https://iquilezles.org/articles/menger\n\n#define MAX_DIST 4.\n\nmat3 roty(float a){\n    return mat3(\n        cos(a), 0., -sin(a),\n        0., 1., 0.,\n        sin(a), 0., cos(a)\n    );\n}\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nvec3 opRep( in vec3 p, in vec3 c)\n{\n    return mod(p+0.5*c,c)-0.5*c;\n}\n\nvec3 map(vec3 p) {\n    p = opRep(p, vec3(4.));\n    \n    float db = sdSphere(p, 3.2);\n    \n    float s = 1.;\n    float ssf = 3.;\n    for(int m = 0; m < 4; m++)\n    {\n        // this scales the space up and then shifts it to be\n        // in the -1, 1 range\n        vec3 a = mod(p * s, 2.) - 1.;\n        // store the overall scaling so on the next loop \n        // we can scale down relative to the previous\n        s *= ssf;\n        // todo what does this part do\n        vec3 r = ssf - ssf * abs(a);\n        \n        float cr = sdSphere(r, 3.2) / s;\n        db = max(db, -cr);\n    }\n    \n    //db = sdSphere(p, .4);\n    return vec3(db, 0., 0.);\n}\n\nvec3 grad(vec3 p) {\n    vec2 eps = vec2(.001, 0.);\n    vec3 infStep = vec3(map(p - eps.xyy).x, map(p - eps.yxy).x, map(p - eps.yyx).x);\n    return normalize(map(p).x - infStep);\n}\n\nfloat march(vec3 ro, vec3 rd) {\n    float t = 0.;\n    for(int i = 0; i < 100; i++) {\n        vec3 p = ro + rd * t;\n        vec3 d = map(p);\n        if (d.x < .001) {\n            return t;\n        }\n        t += d.x;\n        if (t > MAX_DIST) {\n        \treturn MAX_DIST;\n        }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2. - iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(cos(iTime * .1) * 2., 0., sin(iTime * .1) * 2.);\n    //vec3 ro = vec3(0., 0., 3.);\n    vec3 rd = normalize(vec3(uv.xy, -2.));\n    rd *= roty(iTime * .5);\n    rd = rd.yxz;\n    rd *= roty(iTime*.3);\n    vec3 lightPos = vec3(sin(iTime) * .1, cos(iTime) * .2, sin(iTime * 2.) * .3);\n    vec3 lightCol = vec3(1.,.7,0.1);\n        \n    float d = march(ro, rd);\n    if (d < MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 norm = grad(p);\n        vec3 lightDir = normalize(lightPos - p);\n        float incd = dot(norm, lightDir);\n        col = incd * lightCol * (1./(d*d));\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}