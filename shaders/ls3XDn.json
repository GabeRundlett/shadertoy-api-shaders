{
    "Shader": {
        "info": {
            "date": "1458667172",
            "description": "Recently discovered in Dnipropetrovsk. Perhaps a missing Imperial Egg?",
            "flags": 0,
            "hasliked": 0,
            "id": "ls3XDn",
            "likes": 10,
            "name": "Lost Egg",
            "published": 3,
            "tags": [
                "train",
                "egg",
                "faberge"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 1281
        },
        "renderpass": [
            {
                "code": "// \"Lost Egg\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  const vec3 e = vec3 (0.1, 0., 0.);\n  vec3 g;\n  float s;\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRnd2BoxDf (vec3 p, vec3 b, float r)\n{\n  vec3 d = abs (p) - b;\n  return max (length (max (d.xz, 0.)) - r, d.y);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat PrEllips2ShDf (vec3 p, vec2 r, float w)\n{\n  vec3 ra;\n  float s;\n  s = min (r.x, r.y);\n  ra = r.xyx;\n  return max ((s + w) * (length (p / (ra + w)) - 1.), -\n     (s - w) * (length (p / (ra - w)) - 1.));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 trainMat[3], trMat;\nvec3 trainPos[3], trPos, qHit, ltDir;\nvec2 sOpen;\nfloat tCur, dstFar, egRad, egLen, egOpen, wThk, szFac, tRun, tCyc, trVel,\n   trkRad, trkLin, trkWid;\nint idObj;\nbool sigStop;\n\nconst int idEng = 1, idCar = 2, idWheel = 3, idLamp = 4, idRail = 5,\n   idPlat = 6, idSig = 7, idBase = 8, idEg = 9, idCap = 10, idArm = 11,\n   idInt = 12;\n\nfloat BgShd (vec3 ro, vec3 rd)\n{\n  float c, f;\n  if (rd.y >= 0.) {\n    ro.xz += 2. * tCur;\n    c = 0.6 + 0.3 * pow (1. - rd.y, 8.);\n    f = Fbm2 (0.1 * (ro.xz + rd.xz * (100. - ro.y) / max (rd.y, 0.001)));\n    c = mix (c, 1., clamp (0.1 + 0.8 * f * rd.y, 0., 1.));\n  } else {\n    c = 0.1;\n  }\n  return c;\n}\n\nfloat EngDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float wRad, d, aw, a, sx;\n  wRad = 0.8;\n  q = p;  q -= vec3 (0., -0.2, 0.5);\n  d = PrCapsDf (q, 1., 2.);\n  d = max (d, - (q.z + 1.7));\n  q = p;  q.z = abs (q.z - 0.85);  q -= vec3 (0., -0.2, 1.8);\n  d = min (d, PrCylDf (q, 1.05, 0.05));\n  q = p;  q -= vec3 (0., -1.3, -0.25);\n  d = min (d, PrBoxDf (q, vec3 (1., 0.1, 3.2)));\n  q = p;  q -= vec3 (0., -1.4, 3.);\n  d = min (d, PrBoxDf (q, vec3 (1.1, 0.2, 0.07)));\n  q.x = abs (q.x);  q -= vec3 (0.6, 0., 0.1);\n  d = min (d, PrCylDf (q, 0.2, 0.1));\n  q = p;  q -= vec3 (0., 0.01, -1.75);\n  d = min (d, max (max (PrBoxDf (q, vec3 (1., 1.4, 0.6)),\n     - PrBoxDf (q - vec3 (0., 0., -0.2), vec3 (0.95, 1.3, 0.65))),\n     - PrBoxDf (q - vec3 (0., 0.7, 0.), vec3 (1.1, 0.4, 0.5))));\n  q.x = abs (q.x);  q -= vec3 (0.4, 1., 0.4);\n  d = max (d, - PrBoxDf (q, vec3 (0.35, 0.15, 0.3)));\n  q = p;  q -= vec3 (0., -2.4, -1.75);\n  d = min (d, max (PrCylDf (q, 4., 0.65), - (q.y - 3.75)));\n  q = p;  q -= vec3 (0., -0.5, -3.15);\n  d = min (d, PrBoxDf (q, vec3 (1., 0.7, 0.3)));\n  q = p;  q -= vec3 (0., -1.4, -3.5);\n  d = min (d, PrCylDf (q.xzy, 0.4, 0.03));\n  q = p;  q -= vec3 (0., 1.1, 2.15);\n  d = min (d, PrCylDf (q.xzy, 0.3, 0.5));\n  q = p;  q -= vec3 (0., 1.5, 2.15);\n  d = min (d, max (PrCylDf (q.xzy, 0.4, 0.15), - PrCylDf (q.xzy, 0.3, 0.2)));\n  q = p;  q -= vec3 (0., 0.8, 0.55);\n  d = min (d, PrCapsDf (q.xzy, 0.3, 0.2));\n  q = p;  q.x = abs (q.x);  q -= vec3 (1., -0.2, 0.85);\n  d = min (d, PrBoxDf (q, vec3 (0.05, 0.1, 1.8)));\n  q = p;  q.x = abs (q.x);  q -= vec3 (1., -0.2, -1.75);\n  d = min (d, min (d, PrBoxDf (q, vec3 (0.05, 0.1, 0.6))));\n  q = p;  q.x = abs (q.x);  q -= vec3 (1., -0.2, -3.15);\n  d = min (d, PrBoxDf (q, vec3 (0.05, 0.1, 0.3)));\n  if (d < dMin) { dMin = d;  idObj = idEng; }\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (trkWid - 0.12, -1.4, 1.1);\n  d = PrCylDf (q.zyx, wRad, 0.1);\n  if (d < dMin) {\n    d = min (max (min (d, PrCylDf (q.zyx - vec3 (0.,0., -0.07), wRad + 0.05, 0.03)),\n       - PrCylDf (q.zyx, wRad - 0.1, 0.12)), PrCylDf (q.zyx, 0.15, 0.10));\n    if (d < dMin) { dMin = d;  idObj = idWheel; }\n    q = p;  q.x = abs (q.x);  q -= vec3 (trkWid - 0.17, -1.4, 1.1 * sign (q.z));\n    aw = - (trVel / wRad) * tRun;\n    q.yz = q.yz * cos (aw) * vec2 (1., 1.) + q.zy * sin (aw) * vec2 (-1., 1.);  \n    a = floor ((atan (q.y, q.z) + pi) * 8. / (2. * pi) + 0.5) / 8.;\n    q.yz = q.yz * cos (2. * pi * a) * vec2 (1., 1.) +\n       q.zy * sin (2. * pi * a) * vec2 (-1., 1.);\n    q.z += 0.5 * wRad;\n    d = PrCylDf (q, 0.05, 0.5 * wRad);\n    q = p;\n    sx = sign (q.x);\n    q.x = abs (q.x);  q -= vec3 (trkWid + 0.08, -1.4, 0.);\n    aw -= 0.5 * pi * sx; \n    q.yz -= 0.3 * vec2 (cos (aw), - sin (aw));\n    d = min (d, PrCylDf (q, 0.04, 1.2));\n    q.z = abs (q.z);  q -= vec3 (-0.1, 0., 1.1);\n    d = min (d, PrCylDf (q.zyx, 0.06, 0.15));\n    q = p;  q.z = abs (q.z);  q -= vec3 (0., -1.4, 1.1);\n    d = min (d, PrCylDf (q.zyx, 0.1, trkWid - 0.1));\n    if (d < dMin) { dMin = d;  idObj = idWheel; }\n  }\n  q = p;  q -= vec3 (0., -0.2, 3.5);\n  d = PrCylDf (q, 0.2, 0.1);\n  if (d < dMin) { dMin = d;  idObj = idLamp; }\n  return dMin;\n}\n\nfloat CarDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float wRad, d;\n  wRad = 0.35;\n  q = p;\n  d = max (max (PrBoxDf (q, vec3 (1.3, 1.4, 2.8)),\n     - PrBoxDf (q, vec3 (1.2, 1.3, 2.7))), - PrBoxDf (q, vec3 (0.5, 1., 2.9)));\n  q.z = abs (q.z);  q -= vec3 (0., 0.6, 1.2);\n  d = max (d, - PrBoxDf (q, vec3 (1.4, 0.7, 1.1)));\n  q = p;  q.y -= -2.35;\n  d = min (d, max (PrCylDf (q, 4., 2.8), - (q.y - 3.75)));\n  q = p;  q.z = abs (q.z);  q -= vec3 (0., -0.2, 2.75);\n  d = min (d, PrCylDf (q.zyx, 0.05, 0.5));\n  q = p;  q.y -= -1.6;\n  d = min (d, PrBoxDf (q, vec3 (0.8, 0.3, 2.)));\n  q = p;  q.z = abs (q.z);  q -= vec3 (0., -1.4, 2.9);\n  d = min (d, PrCylDf (q.xzy, 0.4, 0.03));\n  q = p;  q.x = abs (q.x);  q -= vec3 (1.3, -0.2, 0.);\n  d = min (d, PrBoxDf (q, vec3 (0.05, 0.1, 2.8)));\n  if (d < dMin) { dMin = d;  idObj = idCar; }\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (trkWid - 0.12, -1.85, 1.1);\n  d = min (min (PrCylDf (q.zyx, wRad, 0.1),\n     PrCylDf (q.zyx - vec3 (0.,0., -0.07), wRad + 0.05, 0.03)),\n     PrCylDf (q.zyx, 0.15, 0.10));\n  q.x -= 0.1;\n  d = max (d, - (PrCylDf (q.zyx, 0.2, 0.05)));\n  q = p;  q.z = abs (q.z);  q -= vec3 (0., -1.85, 1.1);\n  d = min (d, PrCylDf (q.zyx, 0.1, trkWid - 0.15));\n  if (d < dMin) { dMin = d;  idObj = idWheel; }\n  return dMin;\n}\n\nfloat TrackDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float gHt, d;\n  gHt = 2.8;\n  q = p;\n  q.z -= 0.5 * trkLin * clamp (p.z / (0.5 * trkLin), -1., 1.);\n  q.x = abs (length (q.xz) - trkRad);\n  q -= vec3 (trkWid - 0.03, - gHt + 0.41, 0.);\n  d = length (max (abs (q.xy) - vec2 (0.09, 0.17), 0.));\n  if (d < dMin) { dMin = d;  idObj = idRail; }\n  q = p;  q -= vec3 (trkRad - trkWid - 2., - gHt + 0.6, 0.);\n  d = max (PrBoxDf (q, vec3 (trkWid, 0.4, 14.)), 0.5 * (abs (q.z) - 7.) + q.y);\n  if (d < dMin) { dMin = d;  idObj = idPlat;  qHit = q; }\n  q = p;  q -= vec3 (trkRad - trkWid - 2.5, 0.8, 6.);\n  d = PrCylDf (q.xzy, 0.15, 3.);\n  if (d < dMin) { dMin = d;  idObj = idRail; }\n  q.y -= 3.;  d = PrSphDf (q, 0.35);\n  if (d < dMin) { dMin = d;  idObj = idSig; } \n  q = p;  q.y -= - (gHt + 0.1);\n  d = max (PrRnd2BoxDf (q, vec3 (trkWid + 2.5, 0.1,\n     0.5 * trkLin + trkWid + 2.5), trkRad), - PrCylDf (q.xzy, 0.7 * trkRad, 0.2));\n  if (d < dMin) { dMin = d;  idObj = idBase;  qHit = q; } \n  return dMin;\n}\n\nfloat EgDf (vec3 p, float dMin)\n{\n  vec3 q, qq;\n  float d, dr, a;\n  q = p.xzy;\n  q.xy = q.xy * sOpen.x + q.yx * (2. * step (0., q.y) - 1.) * sOpen.y *\n     vec2 (-1., 1.);\n  q.y = abs (q.y) - 1.25 * (egRad + wThk) * sOpen.y;\n  a = 0.5 * (atan (q.z, - q.x) / pi + 1.);\n  dr = wThk *\n      (1. - (1. - SmoothBump (0.4, 0.6, 0.1, fract (3. * abs (q.y) / egLen))) *\n      (1. - SmoothBump (0.1, 0.2, 0.06, fract (10. * a))));\n  d = PrEllips2ShDf (q, vec2 (egRad + dr, egLen + dr), wThk);\n  if (sOpen.y != 0.) d = max (d, - q.y);\n  if (d < dMin) { dMin = d;  idObj = idEg;  qHit = q; }\n  qq = q;\n  q.y -= egLen - 0.3 * egRad;\n  d = max (PrCapsDf (q.xzy, 0.4 * egRad, 0.005 * egRad), 0.25 * egRad - q.y);\n  if (d < dMin) { dMin = d;  idObj = idCap;  qHit = qq; }\n  q = qq - vec3 (0.6 * egRad, 0.2, -0.2);\n  d = PrBoxDf (q, vec3 (0.4 * egRad, 0.05, 0.03));\n  if (d < dMin) { dMin = d;  idObj = idArm;  qHit = q; }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin, d;\n  dMin = dstFar;\n  dMin = EgDf (p, dMin);\n  dMin /= szFac;\n  p /= szFac;\n  dMin = EngDf (trainMat[0] * (p - trainPos[0]), dMin);\n  dMin = CarDf (trainMat[1] * (p - trainPos[1]), dMin);\n  dMin = CarDf (trainMat[2] * (p - trainPos[2]), dMin);\n  dMin = TrackDf (p, dMin);\n  dMin *= szFac;\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0002 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  int idObjT;\n  idObjT = idObj;\n  const vec3 e = vec3 (0.0001, -0.0001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  idObj = idObjT;\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  int idObjT;\n  idObjT = idObj;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 1., 20. * h / d));\n    d += min (0.06, 3. * h);\n    if (h < 0.001) break;\n  }\n  idObj = idObjT;\n  return 0.6 + 0.4 * sh;\n}\n\nbool ShTie ()\n{\n  vec2 s;\n  float nt, gap, a, b;\n  bool shTie;\n  shTie = false;\n  b = abs (qHit.z) - (0.5 * trkLin + 2.);\n  nt = 2.;\n  gap = trkLin / nt;\n  s = qHit.xz;\n  s.x = abs (s.x) - trkRad;  s.y = mod (s.y + 0.5 * gap, gap) - 0.5 * gap;\n  s = abs (s) - vec2 (trkWid + 0.5, 0.4);\n  if (max (s.x, s.y) < 0. && b < 0.) shTie = true;\n  nt = 12.;\n  s = qHit.zx;  s.x -= 0.5 * trkLin * sign (s.x);  s.y = abs (s.y);\n  a = floor ((atan (s.y, s.x) + pi) * nt / (2. * pi) + 0.5) / nt;\n  s.yx = Rot2D (s.yx, 2. * pi * a);\n  s.x += trkRad;  s = abs (s) - vec2 (trkWid + 0.5, 0.4);\n  if (max (s.x, s.y) < 0. && b > 0.) shTie = true;\n  return shTie;\n}\n\nfloat BrickSurfShd (vec2 p)\n{\n  vec2 q, iq;\n  q = p;\n  iq = floor (q);\n  if (2. * floor (iq.y / 2.) != iq.y) {\n    q.x += 0.5;  iq = floor (q);\n  }\n  q = smoothstep (0.015, 0.025, abs (fract (q + 0.5) - 0.5));\n  return 0.5 + 0.5 * q.x * q.y;\n}\n\nfloat BrickShd (vec3 p, vec3 n)\n{\n  return dot (vec3 (BrickSurfShd (p.zy), BrickSurfShd (p.xz), BrickSurfShd (p.xy)),\n     abs (n));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, vn, qh;\n  float dstHit, a, s, t, sh;\n  const vec4 colEg1 = vec4 (0.6, 0.6, 0., 0.5), colEg2 = vec4 (0.2, 0.4, 0.6, 0.2);\n  dstHit = ObjRay (ro, rd);\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    vn = ObjNf (ro);\n    qh.xz = qHit.xz / egRad;\n    qh.y = qHit.y / egLen;\n    if (idObj == idEg || idObj == idCap) {\n      a = 0.5 * (atan (qHit.z, - qHit.x) / pi + 1.);\n      s = dot (qh, qh);\n    }\n    if (idObj == idEg) {\n      if (s > wThk + 1.01) {\n        t = 1.1 * qh.y;\n        objCol = mix (colEg1, colEg2, step (t, SmoothBump (0.135, 0.165, 0.015,\n           fract (10. * a + 0.02 * cos (50. * t)))));\n      } else {\n        if (s > 1.01) {\n          vn = VaryNf (30. * qh.xzy, vn, 1.);\n          objCol = mix (vec4 (0.5, 0.1, 0.1, 0.5), vec4 (0.1, 0.4, 0.1, 0.2),\n             clamp (10. * Fbm2 (vec2 (40. * pi * a, 30. * qh.y)) - 9., 0., 1.));\n        } else idObj = idInt;\n      }\n    } else if (idObj == idCap) {\n      if (s > wThk + 1.) {\n        t = length (qh.xz) - 0.12;\n        t = 50. * t * t;\n        objCol = mix (colEg1, colEg2, step (t, SmoothBump (0.1, 0.2, 0.015,\n           fract (10. * a))));\n      } else idObj = idInt;\n    } else if (idObj == idArm) {\n      idObj = idInt;\n    } else if (idObj == idBase) {\n      if (vn.y > 0. && ShTie ()) objCol = vec4 (0.4, 0., 0., 1.);\n      else objCol = mix (vec4 (0., 0., 0.2, 0.2), vec4 (0.2, 0.2, 0., 0.5),\n         SmoothBump (0.5, 0.9, 0.1, Fbm2 (0.7 * qHit.xz)));\n    } else if (idObj == idEng || idObj == idCar) objCol = vec4 (0.7, 0.7, 0., 1.);\n    else if (idObj == idWheel) objCol = vec4 (0.9, 0.9, 0.9, 1.);\n    else if (idObj == idRail) objCol = vec4 (0.8, 0.8, 0.8, 1.);\n    else if (idObj == idPlat)\n       objCol = vec4 (vec3 (0.5, 0.1, 0.1) * BrickShd (1.5 * qHit, vn), 1.);\n    else if (idObj == idLamp) objCol = vec4 (1., 0.2, 0.2, -1.);\n    else if (idObj == idSig)\n       objCol = sigStop ? vec4 (1., 0., 0., -1.) : vec4 (0., 1., 0., -1.);\n    if (objCol.a >= 0.) {\n      if (idObj == idInt) {\n        vn = VaryNf (30. * qh.xzy, vn, 1.);\n        objCol = vec4 (0., 0.3, 0., 0.01);\n      }\n      sh = ObjSShadow (ro, ltDir);\n      col = objCol.rgb * (0.2 +\n         0.8 * sh * max (0., max (dot (vn, ltDir), 0.))) +\n         objCol.a * sh * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.);\n      if (idObj < idEg) {\n        rd = reflect (rd, vn);\n        col = mix (col, vec3 (0.8) * BgShd (ro, rd),\n            0.2 * (1. - pow (dot (rd, vn), 5.)));\n      }\n    } else col = objCol.rgb * 0.5 * (1. - dot (rd, vn));;\n    col = pow (clamp (col, 0., 1.), vec3 (0.7));\n  } else col = vec3 (0.1, 0., 0.);\n  return col;\n}\n\nvoid TrainCarPM (float s)\n{\n  float a, ca, sa;\n  s = mod (s, 2. * (pi * trkRad + trkLin));\n  if (s < trkLin) {\n    trPos = vec3 (trkRad, 0., s - 0.5 * trkLin);\n    ca = 1.;  sa = 0.;\n  } else if (s < trkLin + pi * trkRad) {\n    a = (s - trkLin) / trkRad;\n    ca = cos (a);  sa = sin (a);\n    trPos = vec3 (trkRad * ca, 0., 0.5 * trkLin + trkRad * sa);\n  } else if (s < 2. * trkLin + pi * trkRad) {\n    trPos = vec3 (- trkRad, 0., 1.5 * trkLin + pi * trkRad - s);\n    ca = -1.;  sa = 0.;\n  } else {\n    a = (s - (pi * trkRad + 2. * trkLin)) / trkRad + pi;\n    ca = cos (a);  sa = sin (a);\n    trPos = vec3 (trkRad * ca, 0., - 0.5 * trkLin + trkRad * sa);\n  }\n  trMat = mat3 (ca, 0., - sa, 0., 1., 0., sa, 0., ca);\n}\n\nvoid TrSetup ()\n{\n  float tPause, tHalt;\n  trkRad = 20.;\n  trkLin = 20.;\n  trkWid = 1.42;\n  trVel = 6.;\n  tCyc = 2. * (pi * trkRad + trkLin) / trVel;\n  tPause = 0.4 * tCyc;\n  tCyc += tPause;\n  tRun = mod (tCur, tCyc);\n  tHalt = trkLin / trVel;\n  sigStop = (tRun < tHalt + 0.8 * tPause);\n  if (tRun > tHalt + tPause) tRun = tRun - tPause;\n  else if (tRun > tHalt) tRun = tHalt;\n  TrainCarPM (trVel * tRun);\n  trainPos[0] = trPos;  trainMat[0] = trMat;\n  TrainCarPM (trVel * tRun - 7.);\n  trainPos[1] = trPos;  trainMat[1] = trMat;\n  TrainCarPM (trVel * tRun - 13.4);\n  trainPos[2] = trPos;  trainMat[2] = trMat;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, tc;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  szFac = 0.055;\n  dstFar = 20.;\n  TrSetup ();\n  egRad = 1.7;\n  egLen = 2.;\n  wThk = 0.04;\n  tc = mod (tCur / tCyc + 0.77, 1.);\n  egOpen = SmoothBump (0.08, 0.92, 0.05, tc);\n  sOpen = vec2 (cos (0.6 * egOpen), sin (0.6 * egOpen));\n  zmFac = 5. + 4. * egOpen;\n  el = pi * (0.15 + 0.03 * egOpen - 0.1 * SmoothBump (0.38, 0.62, 0.05, tc));\n  az = -0.5 * pi;\n  if (mPtr.z > 0.) {\n    el -= pi * mPtr.y;\n    az -= 2. * pi * mPtr.x;\n  }\n  ori = vec2 (clamp (el, -0.05 * pi, 0.4 * pi), clamp (az, - 1.5 * pi, pi));\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  ro = vec3 (0., 0., -10.) * vuMat;\n  rd = normalize (vec3 (uv, zmFac)) * vuMat;\n  ltDir = normalize (vec3 (1., 2., -1.)) * vuMat;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}