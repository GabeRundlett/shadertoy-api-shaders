{
    "Shader": {
        "info": {
            "date": "1539292550",
            "description": "Testing fractals.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xt3fWH",
            "likes": 1,
            "name": "Mandelbrot Set Rainbow ",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "Thorgrimar",
            "viewed": 311
        },
        "renderpass": [
            {
                "code": "\nvec3 col0 = vec3(0.839, 0., 0.223); //red\nvec3 col1 = vec3(0., 0.517, 0.839); // blue\nvec3 col2 = vec3(0.705, 1., 0.541); // green\nconst float third = 1./3.;\nvec3 colRange(float t) {\n    if (t <= third) {\n        return mix(col0, col1, t/third);\n    }\n    if (t <= third*2.) {\n        return mix(col1, col2, (t-third)/third);\n    }\n    return mix(col2, col0, (t-2.*third)/third);\n}\n\nconst float R2 = 1000.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pointZoomed = vec2(-0.743643887037151, 0.13185790420533);;\n    // Normalized pixel coordinates (from -1.0 to 1.0 for x)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.y *= iResolution.y/iResolution.x;\n    \n    float n;\n    vec2 zn;\n    float twoPown = 1.;\n    float maxIter = 100.;\n    float sqModulus;\n    \n    float maxX = 1.5/exp(mod(10.*iTime/100., 18.));\n    vec2 pointC = maxX * uv + pointZoomed;\n    vec3 col = vec3(0.);\n    bool isInSet = true;\n    \n    // points of the set known\n    float va = pointC.x - .25;\n    float p2 = va*va + pointC.y*pointC.y;\n    if ( pointC.x > sqrt(p2) - 2.*p2 + .25 || (pointC.x+1.)*(pointC.x+1.)+pointC.y*pointC.y > 1./16.){\n        \n        zn = vec2(0.);\n        n = 0. ;\n        for(int i=1; n<maxIter; i++) {\n            n += 1.;\n            twoPown = twoPown*2.;\n            zn = vec2(zn.x*zn.x - zn.y*zn.y, 2.*zn.x*zn.y) + pointC;\n            sqModulus = dot(zn, zn);\n            if (sqModulus > 1000000.) {\n                isInSet = false;\n                float V = log(sqModulus)/twoPown;\n        \t\tcol = colRange(mod(log(V)/10. - iTime, 1.));\n                break;\n            }\n        }\n    }\n        \n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}