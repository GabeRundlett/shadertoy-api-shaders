{
    "Shader": {
        "info": {
            "date": "1727199999",
            "description": "originals  fractal by gaz",
            "flags": 0,
            "hasliked": 0,
            "id": "M3ScD1",
            "likes": 0,
            "name": "ufo fractal fly",
            "published": 3,
            "tags": [
                "fractal",
                "ufo",
                "fly"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 57
        },
        "renderpass": [
            {
                "code": "#define PI (atan(1.)*4.)\n#define H(h)(tan((h)*6.3+vec3(0,23,21))*.5+.5)\n\n\n\n\n#define FAR 50.0\n#define RAYSTEP 99\n#define PHANTOM_MODE\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n#define time iTime\n#define resolution iResolution.xy\nvec3 trans(vec3 p, float interbal){\n    return mod(p, interbal) - interbal / 2.0;\n}\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\nvec2 pmod(vec2 p, float r) {\n    float a =  atan(p.x, p.y) + PI/r;\n    float n = PI * 2.0 / r;\n    a = floor(a/n)*n;\n    return p*rot(-a);\n}\n\n// Linear interpolation for scalarsd\nfloat lerp(float a, float b, float i) {\n\tif (i < 0.0) i += 1.0; // lerp(i = -0.2) == lerp(i = 0.8)dasd\n\treturn a * (1.0 - i) + b * i;\n}\n\n// Linear interpolation for vectors\nvec3 lerp(vec3 a, vec3 b, float i) {\n\tif (i < 0.0) i += 1.0; // lerp(i = -0.1) == lerp(i = 0.8)\n\treturn a * (1.0 - i) + b * i;\n}\n\nvec3 hsv( float h, float s, float v){\n\treturn ((clamp(abs(fract(h+vec3(0,2,1)/3.)*6.-3.)-1.,0.,1.)-1.)*s+1.)*v;\n}\n\nvec3 rotate(vec3 p, float angle, vec3 axis){\n    vec3 a = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float r = 1.0 - c;\n    mat3 m = mat3(\n        a.x * a.x * r + c,\n        a.y * a.x * r + a.z * s,\n        a.z * a.x * r - a.y * s,\n        a.x * a.y * r - a.z * s,\n        a.y * a.y * r + c,\n        a.z * a.y * r + a.x * s,\n        a.x * a.z * r + a.y * s,\n        a.y * a.z * r - a.x * s,\n        a.z * a.z * r + c\n    );\n    return m * p;\n}\n\nfloat random (in vec2 st) { \n\treturn fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nfloat sdPlane( vec3 p )\n{\n\tfloat d = p.y;\n\treturn d;\n}\nfloat sdRoad( vec3 p ){\n\tfloat d = p.y;\n\td = max(d, abs(sin(p.z * 0.3) * 0.8 + p.x) - 0.4);\n\treturn d;\n}\n\nfloat sdSphere(vec3 p, float r) {\n\tfloat d = length(p) - r;\n\treturn d;\n}\n\nfloat sdSphereMod( vec3 p, float r )\n{\n\tp = trans(p, 2.0);\n\treturn sdSphere(p, r);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n\tvec3 d = abs(p) - b;\n\treturn length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0);\n}\nfloat sdBoxMod( vec3 p, vec3 b )\n{\n\tp = trans(p, 6.0);\n\treturn sdBox( p, b );\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tvec2 q = vec2(length(p.xz)-t.x,p.y);\n\treturn length(q)-t.y;\n}\n\nfloat sdTorusMod( vec3 p, vec2 t){\n\tp.y = mod(p.y, 10.0) - 5.0;\n\treturn sdTorus(p, t);\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n\tconst vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n\tp = abs(p);\n\tp.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n\tvec2 d = vec2(\n\tlength(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n\tp.z-h.y );\n\treturn min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdHexPrismMod( vec3 p, vec2 h )\n{\n\tp.z = abs(mod(p.z, 8.0) - 4.0);\n\treturn sdHexPrism(p, h);\n}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n\tvec2 d = abs(vec2(length(p.xz),p.y)) - h;\n\treturn min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n//pixel effect\nvec2 pixelate( vec2 p, float pixelRes ){\n\tp = floor(p * min(resolution.x, resolution.y) / pixelRes) * pixelRes / min(resolution.x, resolution.y);\n\treturn p;\n}\n\nfloat map( vec3 p){\n\tfloat speed = 16.0;\n\tfloat dist = 1.0;\n\t\n\n\tdist = min(dist, sdSphere(p, 0.4));\n\tdist = min(dist, sdTorus(rotate(p, PI/4.0 * sin(time/2.0), vec3(sin(time)*0.5, 0.0, 1.0)), vec2(1.2, 0.1)));\n\t\n\t\n\t\n\treturn dist;\n}\n\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    vec2 p2 = (C.xy * 2. - resolution.xy ) / min(resolution.x, resolution.y);\n\t\n\t\n\t\n\tvec3 cameraPos = vec3(0.,0.,-10.);\n\tfloat screenZ = 2.0;\n\tvec3 rayDirection = normalize(vec3(p2, screenZ));\n\t\n\tvec3 bgColor = vec3(0.0);\n\tvec3 nearColor = vec3(0.3, 1.0, 0.9);\n\t\n\tfloat depth = 0.0;\n\tvec3 col = bgColor;\n\tfor (int i = 0; i < RAYSTEP; i++) {\n\t\tvec3 rayPos = cameraPos + rayDirection * depth;\n\t\tfloat dist = map(rayPos);\n\t\tfloat dAmount = clamp(depth/FAR, 0.0, 1.0);\n\n\t\t// transparent\n\t\tdist = max(abs(dist), 0.001);\n\t\t//col += lerp(nearColor, bgColor, clamp(depth / FAR - 0.0, 0.0, 1.0)) / float(RAYSTEP);\n\t\tcol += hsv(-dAmount + time, 0.3 + (1.0 - dAmount) * 0.2, mod(depth-time*0.5,5.0)/4.0) / float(RAYSTEP);\n\n\t\t// opaque\n\t\tif (dist < 0.001) {\n\t\t    col = lerp(nearColor, bgColor, clamp(depth / FAR - 0.0, 0.0, 1.0));\n\t\t    break;\n\t\t}\n\n\t\tdepth += dist;\n\t}\n\t\n\n\n\tfloat colorRes = 4.0;\n\tvec3 step_col = floor(col * colorRes) / colorRes;\n    vec3 p,r=iResolution,\n    d=normalize(vec3((C-.5*r.xy)/r.y,1));  \n    \n    float dist = 1.0;\n    dist = min(dist, sdSphere(p, 0.4));\n\tdist = min(dist, sdTorus(rotate(p, PI/4.0 * sin(time/2.0), vec3(sin(time)*0.5, 0.0, 1.0)), vec2(1.2, 0.1)));\n\t\n    for(float i=0.,s,e,g=0.;\n        ++i<90.;\n        O.xyz+=mix(vec3(1),H(log(s)*.3),.6)*.02*exp(-.3*i*i*e)\n    )\n    {\n    \n        p=g*d+col;\n        \n        \n        p.xy+= pixelate(p.xy,1.)\n        ;\n        p=asin(cos(p*PI/3.))/PI*3.;\n        s=3.;\n        for(int i;i++<6;)\n            p=abs(p-vec3(1.5,1,1.1))-vec3(1.1,1.3,1),\n            s*=e=2.2/clamp(dot(p,p),.5,2.3),\n            p=abs(p)*e;\n        g+=e=length(p.xz)/s;\n    }\n    O*=vec4(col,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}