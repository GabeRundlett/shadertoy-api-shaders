{
    "Shader": {
        "info": {
            "date": "1539274993",
            "description": "Monologue in the ending of blader runner.\nSubmitted as 4k demo at Cookie Demoparty in Paris 2018.\n\n4k sources : https://github.com/Kushulain/4k-Demo-Oven/tree/KushDemo\nGraphics based on Paulo Falcao's Basic Fractal : https://www.shadertoy.com/view/Mss3Wf\n",
            "flags": 40,
            "hasliked": 0,
            "id": "MttfDr",
            "likes": 29,
            "name": "Things you wouldn't believe",
            "published": 3,
            "tags": [
                "diffusion",
                "runner",
                "synthesis",
                "speech",
                "voice",
                "blade"
            ],
            "usePreview": 1,
            "username": "Kushulain",
            "viewed": 1026
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 colors = (texture(iChannel0, uv.xy));\n    \n    fragColor = colors;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//#define RunIf(A,B) if (gTime > A && gTime < A + 1.) {intensityStart=A;B}\n\n//formants :\nvec4 A = vec4(740.,1100.,2300.,3100.);\nvec4 E = vec4(471.,1300.,2900.,4300.);\nvec4 I = vec4(200.,2400.,3000.,3900.);\nvec4 O = vec4(400.,700.,2900.,4200.);\nvec4 U = vec4(200.,1200.,1800.,3100.);\nvec4 ON = vec4(160.,600.,2800.,4000.);\nvec4 OO = vec4(200.,800.,1900.,3900.);\nvec4 AE = vec4(560.,1700.,3000.,4300.);\nvec4 S = vec4(4000.,4100.,3200.,3200.);\nvec4 T = vec4(50.,80.,3500.,3200.);\nvec4 SH = vec4(1600.,2100.,3200.,4400.);\nvec4 F = vec4(0.,1500.,3300.,4000.);\nvec4 C = vec4(4800.,4080.,2700.,4080.);\nvec4 R = vec4(720.,570.,2300.,3100.);\nvec4 R2 = vec4(450.,1000.,0.,0.);\n\nfloat gfreq;\n\nvec4 currentNoiseFormants;\nfloat currentNoiseAmount;\n\nvec4 currentVowelFormants;\nfloat currentVowelAmount;\nvec4 currentVowelFormants2;\nfloat currentVowelAmount2;\n\nfloat freqOffset;\nfloat TAU = 6.2831;\n\nvec4 formantFilterFactor = vec4(0.0,0.4,0.8,1.5);\nfloat formantFilterValue = 1.0;\n\nfloat Sing(float v)\n{\n    return pow(sin(gfreq*TAU*(gTime+freqOffset)*v)*0.5+0.5,5.0);\n}\n\n//used to animate formant intensity like nasal consonants \"M\" or \"N\" \nvec4 FormantFilter(vec4 frm)\n{\n\treturn (formantFilterValue*formantFilterValue/(frm+formantFilterValue+0.01));\n}\n\nfloat FormantFilter(float frm)\n{\n\treturn (formantFilterValue*formantFilterValue/(frm+formantFilterValue+0.01));\n}\n\nfloat powerize(float f, float p)\n{\n    if (f>0.0)\n        return pow(f,p);\n    else\n        return -(pow(abs(f),p));\n}\n\nfloat Noise( float x )\n{\n    return fract( sin( 123523.9898 * x ) * 43758.5453 );\n}\n\n//not used : looks like my hardware don't want me to use it inside for loops\nfloat QFilter(float v, float position, float power)\n{\n    v = clamp(v,-1.,1.);\n    v -= position;\n    v *= v;\n\n    return pow((1.0-v),power);\n}\n\n\n//not used, generate many sin, with higher intensity near the ideal freq\nfloat BandNoise(float freqband)\n{\n    float result = 0.0;\n\n    float freqCount = 160.0;\n    for (float i=0.; i<freqCount; i++)\n    {\n        float stepf = (i/freqCount) + Noise((i)*0.0001)*0.253;\n        float volume = max(1.-10.*abs(stepf-freqband/5000.),0.0);//1.0-(i/120.0); // //QFilter(stepf,freqband/5000.0,20.0)\n        result += volume*sin(gTime*(stepf * 5000.0) * TAU);\n    }\n\n    return result * 0.5;\n}\n\n//generate *freqcount* sin around an ideal *freqband*\nfloat BandNoiseOpti(float freqband, float ltime)\n{\n    float result = 0.0;\n\n    float freqCount = 60.0;\n    for (float i=0.; i<freqCount; i++)\n    {\n        float stepf = freqband/5000. + 0.1*(i/freqCount) * (Noise((i)*0.0001)*2.0-1.0);\n        float volume = pow(max(0.0,1.0-(i/freqCount)),2.0);//1.0-(i/120.0); // //QFilter(stepf,freqband/5000.0,20.0)\n        result += volume*sin(ltime*(stepf * 5000.0) * TAU);\n    }\n\n    return result * 0.5;\n}\n\n//vowel, fundamental, 4 formant, bit of noise\nfloat Vowel(vec4 formants)\n{\n    float result;\n\n    float base;\n    \n    //kinda human voice\n    //base = pow(fract(gfreq*1.0*offsetTime)*2.0-1.0,2.0);\n    //base = pow(sin(gfreq*TAU*offsetTime)*2.0-1.0,2.0) * 0.05;\n    \n    ///machine voice\n    base = Sing(1.);\n    base = 0.3*base + base*Sing(0.5);\n    \n    //loat t = mod(offsetTime,1.0/gfreq);\n    result += base*0.4;\n\n\n    result += dot(vec4(.2),base*FormantFilter(formantFilterFactor)*(sin(gTime*(formants)*TAU)));\n    \n    result += 0.1*(0.2+base)*BandNoiseOpti(formants.x,gTime)*FormantFilter(formantFilterFactor.x);\n    result += 0.1*(0.2+base)*BandNoiseOpti(formants.y,gTime)*FormantFilter(formantFilterFactor.y);\n    //result += 0.1*(0.2+base)*BandNoiseOpti(formants.z,gTime)*FormantFilter(formantFilterFactor.z);\n    //result += 0.1*(0.2+base)*BandNoiseOpti(formants.w,gTime)*FormantFilter(formantFilterFactor.w);\n    \n    //result += 0.2*base*FormantFilter(formantFilterFactor.x)*(BandClearOpti((formants.x),gTime));\n    //result += 0.2*base*FormantFilter(formantFilterFactor.y)*(BandClearOpti((formants.y),gTime));\n    //result += 0.2*base*FormantFilter(formantFilterFactor.z)*(BandClearOpti((formants.z),gTime));\n    //result += 0.2*base*FormantFilter(formantFilterFactor.w)*(BandClearOpti((formants.w),gTime));\n    \n   \n    return result*1.0;\n}\n\n\n//noise formant (whisper)\nfloat Noise(vec4 formants)\n{\n    float result = BandNoiseOpti(formants.x,gTime);\n    result += BandNoiseOpti(formants.y,gTime);\n    result += BandNoiseOpti(formants.z,gTime);\n    result += BandNoiseOpti(formants.w,gTime);\n    return result * 0.01;\n}\n\nvoid N(vec4 formants,float amount)\n{\n    if (amount > 0.)\n    \tcurrentNoiseFormants = formants;\n    currentNoiseAmount += amount;\n}\n\nvoid V(vec4 formants,float amount)\n{\n    if (amount > 0.)\n    \tcurrentVowelFormants = formants;\n    currentVowelAmount += amount;\n}\n\nvoid V2(vec4 formants,float amount)\n{\n    if (amount > 0.)\n    \tcurrentVowelFormants2 = formants;\n    currentVowelAmount2 += amount;\n}\n\nfloat MakeSoundV()\n{\n    float result = 0.0;\n    float offsetTime = gTime + freqOffset;\n\n    float base = Sing(1.);\n    result += base*0.04;\n\n    result += result*Noise(gTime*0.1);\n\n    return result;\n}\n\n//nasal M consonant, no formants, only fundamental freq\nfloat M()\n{\n    return Sing(1.) * Sing(.5) * 0.2;\n}\n\n\n\nfloat MakeSoundP(float start)\n{\n    float result = 0.0;\n    float dur = 0.3;\n    float progress01 = (gTime-start)/dur;\n\n    if (progress01>0.0 && progress01<1.0)\n    {\n    \tfloat vol = exp(-progress01*5.0);// * clamp(t*1000.0,0.0,1.0);\n    \tfloat base = pow(fract(1.0*gfreq*gTime)*2.0-1.0,2.0);\n    \t//base *= (sin(freq*TAU*gTime*exp(-1.8-progress01*2.0)));\n\n        result = base*vol;\n        result *= Noise(gTime*0.001)*clamp((1.0-progress01*10.0),0.,1.);\n    }\n\n    //float kick = sin(t*220.0* exp(-t* .75));\n\n\n    return result * .1;\n}\n\n\nvoid MakeSoundT(float start)\n{\n\tN(T,4.0*t(start,start+0.005,start+0.04));\n}\n\nfloat inverseLerp(float start, float end, float value)\n{\n    return clamp((value - start) / (end - start), 0.0, 1.0);\n}\n\nfloat OffsetFreq(float start, float end)\n{\n    return clamp(smoothstep(intensityStart+start,intensityStart+end,gTime),0.,1.);\n}\n\nvec4 magicMix(vec4 fma, vec4 fmb, float v)\n{\n    return fma + 0.5*((fmb-fma) * v) * (v / (gTime+0.1));\n}\n\nfloat leadtime;\n\nfloat SynthLead(float _time, float end, float note)\n{\n    float results;\n    float count = 20.0;\n    float curNote = note;\n    \n    _time = max(0.,leadtime-_time);\n    end = clamp((end-leadtime)*0.5,0.,1.);\n    \n    for (float i=0.0; i<count; i+=1.0)\n    {\n        float progress = i/count;\n        float volume = 0.2*pow((1.-progress),clamp(50.0/(_time*_time),5.,500.));\n        results += volume * sin(((i+1.)*note)*leadtime*TAU);\n    }\n    \n    curNote = note;\n    \n    \n    float OOAmix = _time - atan(_time);\n    \n    float _filter = pow(sin(note*TAU*leadtime)*0.5+0.5,10./(leadtime));\n    //_filter = 0.5*pow(sin(pow(2.0,note)*200.0*TAU*gTime + OOAmix*540.*TAU)*0.5+0.5,90./(gTime*gTime));\n    //_filter += 0.5*pow(sin(pow(2.0,note)*800.0*TAU*gTime + OOAmix*360.*TAU)*0.5+0.5,90./(gTime*gTime));\n    //_filter += 0.1*pow(sin(pow(2.0,note)*200.0*TAU*gTime +smooth(_time*_time)*900.)*0.5+0.5,90./(gTime*gTime));\n    //results *= mix(_filter,1.0,min(1.,gTime));\n    //results = _filter;\n    //results *= mix(_filter,1., min(_time*0.1,1.0));\n    results = sin(results*min(_time,4.0));// + min(_time*0.1,1.0);\n    \n    vec4 formnts = A*_time;// + (I-OO)*OOAmix;\n    \n    //results = dot(vec4(.2),results*(sin((formnts)*TAU)));\n    \n    //results *= min(1.0,(_time*0.5));\n    \n    return results*0.5*end;// * (sin(gTime*20.0*TAU+sin(gTime)*10.0)*0.5+0.5);\n}\n\nfloat Lead(float _time)\n{\n    float results = 0.0;\n    float freqmul = pow(2.0,floor(_time/30.0)*0.5-2.);\n    leadtime =  mod(_time,30.);\n    \n    results += SynthLead(0.0,5.0,703.*freqmul);\n    \n    results += SynthLead(6.,10.,740.*freqmul);\n    \n    results += SynthLead(12.,16.,877.*freqmul);\n    \n    results += SynthLead(14.,20.,823.*freqmul);\n    \n    results += SynthLead(21.,26.,734.*freqmul);        \n        \n    return results;\n}\n\nfloat Bass(float _time)\n{\n    leadtime = _time;\n    float animate = sin(_time*.2)*2.0;\n\treturn (2.5+animate*1.2)*powerize(SynthLead(0.0,240.0,87.),animate+2.3);\n}\n\n\nfloat Speech(float _time)\n{\n\n    float voiceOutput = 0.0;\n    gfreq= 98.;\n    formantFilterValue = 1.0;\n    freqOffset = 0.;\n    gTime = _time;\n    //\n\n    if (true)\n    {\n\n        intensityStart = sentenceA;\n        \n        //i've\n        freqOffset -= 0.02*OffsetFreq(0.1,0.8);\n\n\n        freqOffset += 0.03*OffsetFreq(1.8,2.6);\n        freqOffset -= 0.03*OffsetFreq(1.5,3.0);\n\n        //people\n        intensityStart += 4.4;\n        freqOffset += 0.01*OffsetFreq(0.0,0.5);\n\n\n        //not be\n        intensityStart += 2.1;\n        freqOffset -= 0.02*OffsetFreq(0.0,1.5);\n\n        //lieve\n        intensityStart += 1.;\n        freqOffset -= 0.02*OffsetFreq(0.0,0.7);\n\n        \n        \n        intensityStart = sentenceB;\n        //tack\n        //intensityStart = 9.5;\n        freqOffset += 0.7*OffsetFreq(0.0,2.0);\n        \n        //ships\n        intensityStart += 0.4;\n        freqOffset -= 0.1*OffsetFreq(0.0,0.5);\n        \n        //shoulder\n        intensityStart += 3.2;\n        freqOffset += 0.06*OffsetFreq(0.0,0.5);\n        \n        //orion\n        intensityStart += 1.1;\n        freqOffset -= 0.1*OffsetFreq(0.0,1.8);\n        \n        \n        //\n        //\n        //intensityStart = 16.0;\n        //freqOffset += 0.2*OffsetFreq(0.0,7.0);\n        \n        intensityStart = sentenceC;\n        //i\n        intensityStart -= 0.2;\n        freqOffset += 0.2*OffsetFreq(0.0,0.8);\n        \n        //c beam\n        intensityStart += 1.5;\n        freqOffset += 0.2*OffsetFreq(0.0,0.5);\n        \n        //glitter\n        intensityStart += 0.7;\n        freqOffset -= 0.05*OffsetFreq(0.0,0.5);\n        \n        \n        //in the dark\n        intensityStart += 1.2;\n        freqOffset += 0.2*OffsetFreq(0.0,1.0);\n        \n        \n        //tannhauser gate\n        intensityStart += 2.3;\n        freqOffset -= 0.1*OffsetFreq(0.0,1.5);\n        \n\n    }\n\n    if (true)\n    {\n        float mixAO;\n        \n        intensityStart = sentenceA;\n        \n        \n        //i've\n        //intensityStart += 0.0;\n        mixAO = (gTime-intensityStart)*1.1;\n        V(magicMix(A,I,mixAO-0.3),t(0.0,0.4));\n        voiceOutput += MakeSoundV() * t(0.3,0.6);\n\n        //seen\n        intensityStart += 1.8;\n        N(S,t(0.,0.2));\n        V(I,t(0.2,0.4));\n        voiceOutput += M() * t(0.4,0.6);\n\n        //things\n        intensityStart += 0.8;\n        N(F,t(0.0,0.2));\n        V(I,t(0.15,0.2,0.4,0.5));\n        voiceOutput += M() * t(0.4,0.5);\n        N(S,t(0.6,0.7));\n\n        //you\n        intensityStart += 1.3;\n        V(I,t(0.0,0.20,0.4));\n        V2(OO,t(0.2,0.4,0.5));\n\n        //people\n        intensityStart += 0.5;\n        voiceOutput += MakeSoundP(intensityStart+0.24);\n        V(I,t(0.26,0.27,0.42,0.48));\n        voiceOutput += MakeSoundP(intensityStart+0.48);\n\n        formantFilterValue -= t(0.6,0.8,0.9,0.91) * 0.8;\n\n        V(magicMix(O,E,gTime-(intensityStart+0.7)),t(0.5,0.52,0.7,0.9));\n\n        //would\n        intensityStart += 2.1;\n        formantFilterValue -= t(0.2,0.4);\n        V(OO,t(0.1,0.4));\n\n        //not\n        V(O,t(0.4,0.45,0.5,0.6));\n\n        //believe\n        intensityStart += 0.6;\n        voiceOutput += 0.5*MakeSoundP(intensityStart+0.1);\n        formantFilterValue -= t(0.0,0.01,0.1,0.11);\n        formantFilterValue -= t(0.24,0.3,0.31,0.34);\n        V(I,t(0.0,0.5));\n        voiceOutput += MakeSoundV() * t(0.4,0.6,0.8);\n\n        \n        \n        \n        \n        intensityStart = sentenceB;\n        \n        //attack\n        intensityStart += 0.0;\n        V(magicMix(E,A,0.7+gTime-intensityStart),t(0.00,0.05,0.05,0.11));\n        V(magicMix(E,A,0.7+gTime-intensityStart),t(0.18,0.19,0.4,0.42));\n        intensityStart += 0.03;\n        N(I,t(0.175,0.18,0.18,0.19));\n        N(I,t(0.46,0.461,0.465,0.55));\n\n        //ships\n        intensityStart += 0.4;\n        N(SH,t(0.2,0.25,0.3,0.35));\n        V(I,t(0.25,0.35,0.40,0.45));\n        voiceOutput += MakeSoundP(intensityStart+0.5);\n        N(S,t(0.55,0.60,0.62,0.7));\n\n        //on\n        intensityStart += 1.0;\n        formantFilterValue -= t(0.1,0.2,0.39,0.41) * 0.99;\n        V(mix(O,A,0.3),t(0.0,0.1,0.3,0.4));\n\n\n        //fire\n        intensityStart += 0.3;\n        N(F,t(0.1,0.2,0.25,0.3));\n        V(A,t(0.25,0.3,0.4,0.5));\n        V(I,0.3*t(0.4,0.5));\n        V2(magicMix(E,A,(gTime-intensityStart-0.4)*1.3),t(0.4,0.5,0.6,0.8));\n\n        //off\n        intensityStart += 1.1;\n        V(mix(O,A,0.3),t(0.01,0.1,0.2,0.28));\n        N(F,t(0.2,0.25,0.25,0.4));\n\n        //the\n        intensityStart += 0.5;\n        MakeSoundT(0.05);\n        V(E,t(0.05,0.1,0.2,0.3));\n\n        //Shoulder\n        intensityStart += 0.2;\n        N(SH,t(0.0,0.1));\n        V(OO,t(0.05,0.15,0.22,0.3));\n        V2(magicMix(E,A,(gTime-intensityStart-0.4)*1.2),t(0.35,0.4,0.6,0.8));\n        //silence += t(0.32,0.33,0.35,0.38);\n        MakeSoundT(0.34);\n\n        //of\n        intensityStart += 1.2;\n        V(mix(O,A,0.3),t(0.01,0.1,0.15,0.25));\n        N(F,t(0.15,0.25,0.25,0.3));\n\n        //Orion\n        intensityStart += 0.3;\n        formantFilterValue -= t(0.45,0.7,0.9,1.0);\n        mixAO = (gTime-intensityStart)*3.3;\n        V(magicMix(O,A,mixAO*0.4),t(0.01,0.1,0.4,0.6));\n        mixAO = min(1.0,(mixAO-1.0));\n        V2(magicMix(I,E,mixAO*0.6),t(0.4,0.6,0.7,0.8));\n        \n        \n        \n        \n        \n        intensityStart = sentenceC;\n        \n        //i\n        V(magicMix(A,I,(gTime-intensityStart-0.3)*1.0),t(0.0,0.2,0.3,0.4));\n        //V(A,t(0.0,0.2,0.4);\n        //V(I,t(0.2,0.4,0.5);\n        \n        //watched\n        intensityStart += 0.3;\n        V(magicMix(OO,O,(gTime-intensityStart-0.2)*0.5),t(0.1,0.2,0.4,0.5));\n        MakeSoundT(0.5);\n        N(SH,t(0.5,0.6));\n        N(E,t(0.6,0.61,0.63));\n        //N(E,t(0.6,0.7);\n\n        //c beam\n        intensityStart += 1.2;\n        N(C,t(0.0,0.2,0.3));\n        \n        voiceOutput += 0.5*MakeSoundP(intensityStart+0.3);\n        formantFilterValue -= t(0.24,0.3,0.31,0.34);\n        formantFilterValue -= t(0.4,0.6,0.6,0.7);\n        V(I,t(0.1,0.5));\n        V2(S,t(0.5,0.7));\n        \n        //glitter\n        intensityStart += 0.7;\n        N(I,t(0.0,0.005,0.009,0.01));\n        V(I,t(0.05,0.2));\n        MakeSoundT(0.3);\n        V(magicMix(E,A,(gTime-intensityStart-0.4)*1.2),t(0.3,0.6));\n        \n        //in\n        intensityStart += 1.4;\n        formantFilterValue -= t(0.0,0.3,0.31);\n        V(I,t(0.0,0.3));\n        \n        \n        //the\n        intensityStart += 0.2;\n        //MakeSoundT(0.05);\n        V(E,t(0.05,0.1,0.2,0.3));\n       \n        //dark\n        intensityStart += 0.2;\n        //MakeSoundT(0.05);\n        V(magicMix(A,R,(gTime-intensityStart-0.1)*1.5),t(0.05,0.1,0.3,0.4));\n        N(E,t(0.46,0.461,0.47,0.49));\n        \n        //near\n        intensityStart += 0.9;\n        formantFilterValue -= t(0.0,0.01,0.15,0.21)*0.9;\n        V(magicMix(AE,A,(gTime-intensityStart-0.2)*.6),t(0.0,0.2,0.4,0.5));\n        \n        //the\n        intensityStart += 0.4;\n        MakeSoundT(0.05);\n        V(E,t(0.05,0.1,0.2,0.3));\n        \n        //tannhauser\n        intensityStart += 0.3;\n        MakeSoundT(0.05);\n        formantFilterValue -= t(0.18,0.2,0.3,0.31)*0.8;\n        V(AE,t(0.05,0.1,0.2,0.3));\n        N(O,t(0.2,0.3,0.3,0.4));\n        V2(O,t(0.3,0.4,0.4,0.5));\n        V(S,t(0.4,0.5,0.5,0.6));\n        V2(magicMix(E,A,(gTime-intensityStart-0.5)*1.2),t(0.5,0.6,0.6,0.8));\n        \n        //gate\n        intensityStart += 0.7;\n        N(E,t(0.0,0.01,0.07));\n        V(magicMix(AE,I,(gTime-intensityStart)*1.4),t(0.0,0.2,0.4));\n        MakeSoundT(0.4);\n        \n        \n        \n        intensityStart = sentenceD;\n        \n        //All\n        formantFilterValue -= t(0.0,0.6,0.61)*0.8;\n        V(O,t(0.0,0.01,0.4,0.6));\n        \n        //those\n        intensityStart += 1.0;\n        V(S,t(0.0,0.2,0.3));\n        V2(O,t(0.2,0.4));\n        V(S,t(0.4,0.5,0.6));\n        \n        //moments\n        intensityStart += 1.0;\n        voiceOutput += M() * t(0.0,0.8);\n        V(O,t(0.2,0.25,0.4,0.5));\n        V2(E,t(0.5,0.55,0.7,0.8));\n        MakeSoundT(0.9);\n        V(S,t(0.9,1.0,1.1));\n        \n       \t//will\n        intensityStart += 2.0;\n        formantFilterValue -= t(0.3,0.5,0.51);\n        V(magicMix(OO,I,(gTime-intensityStart)*0.9+0.6),t(0.1,0.2,0.4,0.5));\n        \n        //be\n        intensityStart += 0.4;\n        V(I,t(0.0,0.05,0.2,0.3));\n\n        //lost\n        intensityStart += 0.2;\n        V(mix(O,E,0.3),t(0.0,0.3));\n        V2(S,t(0.3,0.4));\n        MakeSoundT(0.5);\n        \n        //in\n        intensityStart += 1.6;\n        formantFilterValue -= t(0.0,0.3,0.31);\n        V(I,t(0.0,0.3));\n        \n        //time\n        intensityStart += 0.3;\n        MakeSoundT(0.0);\n        V(magicMix(A,I,(gTime-intensityStart-0.2)*0.8),t(0.0,0.1,0.2,0.45));\n        voiceOutput += M() * t(0.2,0.5,0.55);\n        N(mix(A,E,0.7),t(0.5,0.55,0.65)*0.3);\n        \n        \n        //like\n        intensityStart += 1.5;\n        V(magicMix(A,I,(gTime-intensityStart-0.2)*0.8),t(0.0,0.1,0.3,0.35));\n        N(I,2.0*t(0.36,0.361,0.361,0.5));\n        \n        \n        //tears\n        intensityStart += 2.;\n        MakeSoundT(0.0);\n        V(magicMix(I,R2,max(0.,(gTime-intensityStart+0.2)*.6)),t(0.0,0.2,0.4,0.5));\n        V2(S,t(0.4,0.5,0.5,0.6));\n        \n        \n        //in\n        intensityStart += 1.;\n        formantFilterValue -= t(0.0,0.4,0.41);\n        V(I,t(0.0,0.3));\n        \n        //the\n        intensityStart += 0.4;\n        //MakeSoundT(0.);\n        V(E,t(0.,0.05,0.2));\n        \n        //rain\n        intensityStart += 0.25;\n        formantFilterValue -= t(0.3,0.7,0.71);\n        V(magicMix(R2,AE,(gTime-intensityStart+1.9)*0.5),t(0.0,0.1,0.4));\n        V2(magicMix(AE,I,(gTime-intensityStart-0.0)*1.3),t(0.1,0.4,0.5,0.6));\n        voiceOutput += M() * t(0.5,0.6,0.8);\n        \n        \n        intensityStart = sentenceE;\n        //time\n        intensityStart += 0.0;\n        MakeSoundT(0.0);\n        V(magicMix(A,I,(gTime-intensityStart-0.2)*0.8),t(0.0,0.1,0.2,0.45));\n        voiceOutput += M() * t(0.2,0.5,0.55);\n        N(mix(A,E,0.7),t(0.5,0.55,0.65)*0.3);\n        \n        //to\n        intensityStart += 1.5;\n        MakeSoundT(0.0);\n        V(OO,t(0.0,0.2));\n        //N(OO,t(0.05,0.1,0.2,0.3));\n                                 \n        //die\n        //intensityStart += 0.5;\n        //formantFilterValue -= t(0.0,0.01,0.1,0.101);\n        //MakeSoundT(0.05);\n        //V(magicMix(A,I,max(0.,(gTime-intensityStart-0.1)*1.2)),t(0.0,0.1,0.7));\n        //N(magicMix(A,I,max(0.,(gTime-intensityStart-0.1)*1.2)),t(0.0,0.1,0.4,0.8));\n        //N(A,t(0.0,0.5,0.9)*0.6);\n        \n        intensityStart += 0.6;\n        N(I,2.*t(0.0,0.001,0.02,0.03));\n        V(OO,t(0.0,0.3));\n        N(I,2.*t(0.3,0.301,0.31,0.33));\n        V(I,t(0.3,0.5));\n        //die\n        //intensityStart = 40.4;\n        //voiceOutput += M() * t(0.0,0.05,0.1);\n        //MakeSoundT(0.02);\n        //V(magicMix(A,I,max(0.,(gTime-intensityStart-0.1)*1.2))) * t(0.0,0.05,0.4,0.7);\n        //N(mix(A,E,0.9),t(0.2,0.35,0.45)*0.6);\n        \n        \n    }\n    else\n    {\n        //voiceOutput += 5.0*MakeSoundV(freq) * t(0.0,0.1,0.6,0.7);\n    \t//voiceOutput += MakeSoundS(freq);\n    \t//voiceOutput += F(S);\n        //voiceOutput += BandNoise(1000.0);\n    }\n    \n\n\n    _time = mod(_time,1.0);\n\n    if (false)\n    {\n        if (_time < 0.05)\n            N(T,1.);\n        //else if (_time < 2.0)\n        //    N(E,1.);\n    }\n\n    voiceOutput += Noise(currentNoiseFormants) * currentNoiseAmount;\n    voiceOutput += Vowel(currentVowelFormants) * currentVowelAmount;\n    voiceOutput += Vowel(currentVowelFormants2) * currentVowelAmount2;\n    \n    \n    return voiceOutput;\n}\n\nvec2 test(float tt)\n{\n    return vec2(Bass(tt),Bass(tt));\n}\n\nvec2 mainSound( in int samp, float _time )\n{\n    //return test(_time);\n    //_time = fract(_time);\n    //_time = mod(_time,6.5);\n    //_time -= 5.0;\n    //_time += sentenceD;\n    //_time *= 0.91;\n    gTime = _time;\n\n    vec2 sOutput = vec2(0.0,0.0);\n\n    //gTime *= 0.9;\n    sOutput += vec2(0.5*Speech(_time*.9));\n    //gTime /= 0.9;\n    \n    vec2 music;// = Lead(_time);\n    \n    \n    float revCount = 50.0;\n    for (float i=0.; i<revCount; i++)\n    {\n        float reverbtime = _time + 0.08 * sin(0.01*_time + Noise(i)*TAU)*i;\n        //float reverbtime = _time*(1.+Noise(i)*0.01*i);\n        float resResult = (Bass(reverbtime) + Lead(reverbtime)) / (0.02*revCount*(i+1.));\n        if (i < 4.)\n            resResult += Speech(reverbtime*.9-0.1) / (1.+i*4.) * 3.;\n        \n        float pan = sin(i*2.)*0.5+0.5+sin(_time*0.5)*0.1;\n        music += vec2(resResult*pan,(1.0-pan)*resResult);\n    }    \n    //music += Bass(_time);\n             \n    float animate = sin(gTime*0.5-1.0)*2.0+2.5;\n    //sOutput += (animate+0.5)*0.2*vec2(powerize(vroo,animate),powerize(vroo,animate));\n    sOutput += 0.1*music;\n    \n    //_time = _time - 0.2;\n    //gTime = _time;\n    //sOutput += Speech(_time)*0.9;\n    //time = time - 0.1;\n    //gTime = time;\n    //sOutput += Speech(time)*0.2;\n    return sOutput;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "\n\n#define textThick 4.0\n\nfloat Xs[104] = float[](.7,.4,.3,.7,  //0:a\n                      .3,.4,.7,.1,   //1:b\n                      .6,.3,.3,.6,  //2:c\n                      .6,.5,.3,.7,   //3:d\n                      0.2,.9,.1,.7,   //4:e\n                      0.4,.3,.5,.6,  //5:f\n                      .3,.7,.6,.4,    //6:g\n                      .3,.3,.4,.7,    //7:h\n                      .4,.3,.5,.3,    //8:i\n                      .1,.5,.4,.2,    //9:j\n                      .2,.5,.2,.7,    //10:k\n                      .3,.5,.3,.6,    //11:l\n                      .3,.2,.6,.5,    //12:m\n                      .3,.3,.4,.7,    //13:n\n                      .7,.1,.4,.6,    //14:o\n                      .3,.6,.3,.4,    //15:p\n                      .4,.3,.6,.3,    //16:q\n                      .3,.3,.4,.6,    //17:r\n                      .6,.2,.7,.2,    //18:s\n                      .4,.5,.5,.7,    //19:t\n                      .3,.3,.6,.6,    //20:u\n                      .3,.4,.6,.7,    //21:v\n                      .1,.3,.4,.5,    //22:w\n                      .0,.7,.2,.7,    //23:x\n                      .4,.3,.7,.3,    //24:y\n                      .0,.7,.2,.7    //25:z\n                     );\nfloat Ys[104] = float[](.2,.8,.2,.7, //0:a\n                      1.,.0,.7,.2,  //1:b\n                      .6,.6,.2,.4,   //2:c\n                      1.,.0,.7,.2,  //3:d\n                      0.2,.7,.5,.2,   //4:e\n                      .0,1.,.6,.7,  //5:f\n                      .3,.7,-.1,.1,   //6:g\n                      1.,.1,.7,.3,   //7:h\n                      .7,.5,.7,.2,    //8:i\n                      .5,.7,.0,.2,    //9:j\n                      1.,.1,.4,.7,    //10:k\n                      .8,1.,.2,.2,    //11:l\n                      .2,.6,.6,.2,    //12:m\n                      .6,.1,.7,.2,    //13:n\n                      .6,.6,.2,.6,    //14:o\n                      .1,.4,.6,.0,    //15:p\n                      .1,.4,.6,.0,    //16:q\n                      .6,.1,.6,.5,    //17:r\n                      .6,.5,.4,.1,    //18:s\n                      1.,.1,.7,.7,    //19:t\n                      .6,.3,.3,.5,    //20:u\n                      .6,.1,.5,.4,    //21:v\n                      0.6,.1,.6,.3,    //22:w\n                      1.,.3,.3,.6,    //23:x\n                      .6,.3,.7,.0,    //24:y\n                      .7,.6,.3,.2    //25:z\n                     );\n\nint[] sentences = int[](8,26,21,4,26,\n                         18,4,4,13,26,\n                         19,7,8,13,6,18,26,\n                         24,14,20,26,\n                         15,4,14,15,11,4,26,\n                        22,14,20,11,3,26,\n                        13,14,19,26,\n                        1,4,11,8,4,21,4,  //45\n\n\t\t\t\t\t\t0,19,19,0,2,10,26,\n                         18,7,8,15,18,26,\n                         14,13,26,\n                         5,8,17,4,26,\n                         14,5,5,26,\n                         19,7,4,26,\n                         18,7,14,20,11,3,4,17,26,\n                         14,5,26,\n                         14,17,8,14,13,  //91  attack\n\n\t\t\t\t\t\t 8,26,\n                       \t 22,0,19,2,7,4,3,26,\n                       \t 2,26,1,4,0,12,18,26,\n                         6,11,8,19,19,4,17,26,\n                         8,13,26,\n                         19,7,4,26,\n                       3,0,17,10,26,\n                       13,4,0,17,26,\n                       19,7,4,26,\n                       19,0,13,13,7,0,20,18,4,17,26,\n                       6,0,19,4,  //153  c beam\n                       \n                       0,11,11,26,\n                       19,7,14,18,4,26,\n                       12,14,12,4,13,19,18,26,\n                       22,8,11,11,26,\n                       1,4,26,\n                       11,14,18,19,26,\n                       8,13,26,\n                       19,8,12,4,  //190  all those moment\n                        \n                       11,8,10,4,26,\n                        19,4,0,17,18,26,\n                        8,13,26,\n                        17,0,8,13,26,  //209 tears in rain\n                        \n                        19,8,12,4,26,\n                      19,14,26,\n                      //3,8,4 //220 time to die\n                      2,14,14,10,8,4 //220 time to cookie\n                       ); \n\nfloat DrawChar(int char, vec2 pos, float fkd)\n{\n    float results = 0.;\n    char *= 4;\n    vec2 lastPoint = mix(vec2(Xs[char],Ys[char]),vec2(Xs[char+1],Ys[char+1]),.1);\n    \n    for (float i=0.; i<50.; i++)\n    {\n        float smoothv = 0.25;\n        float progress = 3.*i/50.0+0.5;\n        float lineProgress = fract(progress);\n        int a=char+max(0,int(progress)-1),\n            b=char+int(progress),\n            c=char+min(3,int(progress)+1);\n        \n        vec2 iStart = mix(vec2(Xs[a],Ys[a]),vec2(Xs[b],Ys[b]),0.5*lineProgress+0.5+fkd);\n        vec2 iEnd =   mix(vec2(Xs[b],Ys[b]),vec2(Xs[c],Ys[c]),lineProgress*0.5+fkd);\n        vec2 charPos = mix(iStart,iEnd,lineProgress+fkd);\n        \n        //float thick = textThick * min(length(charPos-lastPoint),0.01);\n        //float thick = 0.01+0.01*textThick * abs(dot(normalize(charPos-lastPoint),vec2(0.7,0.7))); caligraphy\n        float val = length(pos-charPos)*25.0;\n        if (val<1.)\n        {\n        \tresults += val*10.-2.;\n        }\n        //results *= clamp(val*10.-9.,0.,1.);\n        //results += ((sin(20.*(length(pos-charPos)))));\n        \n        //if (results > 1.0)\n        //    return results;\n    //float pixelSize = uv.y/iResolution.y;\n        //if (length(pos-charPos) < thick+0.01)\n        //if (length(pos-charPos) < textThick * 0.02)\n        //{\n        \t//if (abs((float(i)/90.0)-iTime*0.1) < 0.1)\n            \t//return 1.0;\n        //}\n        \n        //float thickness = min(1.0,progress*3.0) * textThick * length(charPos-lastPoint) * 0.1;\n        \n        //results += max(0.0,(1.0 - length(pos-charPos) / thickness));\n        \n        lastPoint = charPos;\n    }\n    \n    return results;\n}\n\nfloat DisplaySentence(int start, int end, vec2 charPo, float fkd)\n{\n    float char;\n    \n    for (int i=start; i<end; i++)\n    {\n        if (sentences[i] != 26 && length(charPo-vec2(.5)) < 0.6)\n            char += DrawChar(sentences[i],charPo,fkd);\n        charPo.x -= 0.4;\n    }\n    \n    return char;\n}\n\nvec2 rot(vec2 uv,float a){\n\treturn vec2(uv.x*cos(a)-uv.y*sin(a),uv.y*cos(a)+uv.x*sin(a));\n}\n\nfloat GiveMeArt(vec2 uvin)\n{\n\tvec2 uv=iResolution.xy;\n    uv=-.5*(uv-2.0*uvin.xy)/uv.x;\n\tuv.y-=0.05;\n\tuv*=3.0;\n    float slowT = gTime * 0.205;\n\t//global rotation and zoom\n\tuv*=sin(slowT)*0.5+1.5;\n\t\n\t//mirror, rotate and scale 6 times...\n\tfloat s=0.3;\n\tfor(int i=0;i<8;i++){\n\t\tuv=abs(uv)-s;\n\t\tuv=rot(uv,slowT);\n\t\ts=s/(pow(sin(slowT*0.2)*0.5+0.5,2.0)*2.5);\n\t}\n    float c = (1.-abs(uv.x));\n    c = pow(max(0.,c),500.0)*iTimeDelta*6.0;\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float ratio = iResolution.x/iResolution.y;\n    vec2 uv = fragCoord/iResolution.x;\n    vec2 uv2 = fragCoord/iResolution.xy;\n    pixelSize = uv.y/iResolution.y;\n\n\t\n    gTime = iTime*0.9;\n    vec2 charPo = vec2((uv-vec2(.5,.0))*20.);\n    charPo.y -= 0.5;\n    float char = 0.0;\n    float intensityText = 0.0;\n    \n    if (charPo.y < 2.0)\n    {\n        \n\n            intensityStart = sentenceA;\n            intensityText = t(-2.,1.,9.,11.);\n            if (intensityText > 0.)\n            {\n                charPo.x += 9.5;\n                char += DisplaySentence(0,45,charPo,(1.-intensityText)*2.);\n            }\n            intensityStart = sentenceB;\n            intensityText = t(-2.,0.,6.,8.);\n\n            if (intensityText > 0.)\n            {\n                charPo.x += 9.5;\n                char += DisplaySentence(45,91,charPo,(1.-intensityText)*2.);\n            }\n            intensityStart = sentenceC;\n            intensityText = t(-1.,0.,9.,11.);\n\n            if (intensityText > 0.)\n            {\n                charPo.x += 5.;\n                char += DisplaySentence(129,153,charPo,(1.-intensityText)*2.);\n\n\n                charPo.x += 2.6;\n                charPo.y -= .5 * ratio;\n                char += DisplaySentence(91,129,charPo,(1.-intensityText)*2.);;\n            }\n            intensityStart = sentenceD;\n            intensityText = t(-2.,1.,13.,15.);\n\n            if (intensityText > 0.)\n            {\n                charPo.x += 8.;\n                charPo.y -= .5 * ratio;\n                char += DisplaySentence(153,191,charPo,(1.-intensityText)*2.);\n            }\n\n            intensityText = t(6.,8.,13.,15.);\n\n            if (intensityText > 0.)\n            {\n                charPo.x -= 4.;\n                charPo.y += 0.6* ratio;\n                char += DisplaySentence(191,210,charPo,(1.-intensityText)*2.);\n            }\n            intensityStart = sentenceE;\n            intensityText = t(-1.,1.,4.,6.);\n\n            if (intensityText > 0.)\n            {\n                charPo *= 0.8;\n                charPo.x += 3.0;\n                charPo.y -= 0.1* ratio;\n                char += DisplaySentence(210,224,charPo,(1.-intensityText)*2.);\n            }\n        \n        \n        \n    }\n    \n    //char = min(1.,char) * (1.-2.0*abs(0.5-uv2.x));\n    \n    vec2 filteredUV;\n    vec2 fuv;\n    vec4 smoke;\n    \n    uv *= .4;\n    //noise\n    for (float i=0.; i<5.; i+=1.)\n    {\n        uv -= iTime*0.01;\n        filteredUV = (uv/(pow(2.,i))) * 256. + 0.5;\n        fuv = fract(filteredUV);\n        filteredUV = floor(filteredUV) + fuv*fuv*(3.0-2.0*fuv);\n        smoke += texture(iChannel1,(filteredUV-0.5) / 256.0 ) * (1.0+i);\n        //smoke += texture(iChannel1, uv ) * (1.0+i);\n    }\n    \n    smoke *= 0.06;\n    \n    vec2 dir = (smoke.xy) * 2. - 1.;\n    float light = dot(dir,vec2(.7,.7));\n    vec3 smokeColor = clamp(texture(iChannel0,uv2 + 0.5*smoke.z*dir*iTimeDelta).rgb,0.0,1.0);\n\n    smokeColor *= mix(vec3(1.),mix(vec3(1.08,1.05,.95),vec3(.9,.9,1.05),smoke.w),iTimeDelta*60.)*(1.-iTimeDelta*2.0);\n    //smokeColor *= mix(vec3(1.05,.9,1.),vec3(.9,.9,1.),smoke.w) * 0.99;\n    smokeColor = min(smokeColor,.6);\n    \n    \n    float charp = 0.0;//DrawChar(2,fragCoord/iResolution.y,0.0);\n    \n    //float res = char;\n    \n    //if (uv.x > 0.2 && uv.x < 0.8)\n    //    res += 0.1;\n    //\n    //if (uv.x > 0.3 && uv.x < 0.7)\n    //    res += 0.1;\n    //\n    //if (uv.y > 0.25 && uv.y < 0.6)\n    //    res += 0.1;\n    \n    //float res = min(1.0,smokeResult+char);\n    vec3 res = smokeColor+vec3(char*iTimeDelta);\n    \n    res += clamp(GiveMeArt(fragCoord),0.,1.);\n    \n    //fragColor = smoke;\n    // Output to screen\n    fragColor = vec4(res+charp,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float sentenceA = 5.; //seen things\nfloat sentenceB = 20.; //attack ship - Orion //9.5\nfloat sentenceC = 32.; //C beam tanhauser 16.5\nfloat sentenceD = 45.; //All moment tears rain 27.\nfloat sentenceE = 60.; //time to die 41.\n\nfloat pixelSize;\n\nfloat intensityStart;\nfloat gTime;\n\nfloat t(float startA, float startB, float endA, float endB)\n{\n    startA += intensityStart;\n    startB += intensityStart;\n    endA += intensityStart;\n    endB += intensityStart;\n    return clamp(smoothstep(startA,startB,gTime),0.,1.) * clamp(smoothstep(endB,endA,gTime),0.,1.);\n}\n\nfloat t(float start, float mid, float end)\n{\n   return t(start,mid,mid,end);\n}\n\nfloat t(float start, float end)\n{\n   return t(start,start+0.1,end,end+0.1);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}