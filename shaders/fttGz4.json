{
    "Shader": {
        "info": {
            "date": "1635786272",
            "description": "A Persian carpet fractal pattern.",
            "flags": 0,
            "hasliked": 0,
            "id": "fttGz4",
            "likes": 3,
            "name": "Persian carpet fractal 8",
            "published": 3,
            "tags": [
                "fractal",
                "carpet",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 274
        },
        "renderpass": [
            {
                "code": "\n//change these constants to get different patterns!\n#define c2 1.5\n\n#define c1 vec4(1.0+c2,.5+c2,-1.5,0)\n\n//to do: drag and drop using https://www.shadertoy.com/view/WdGGWh\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((a+c1.xy)*scale)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    \n    \n\n    \n    vec3 col;  \n    float t1 = 4.5*3./2.;\n    float t = 45.87+iTime/2.;\n    vec2 uv = (fragCoord-iResolution.xy)/iResolution.y/t1/128.0/4.;\n    uv += vec2(t/2.0,t/3.0)/t1/128.0/8.;\n    //vec3 random1 = hash31(floor((iTime)/10.0+uv.x))*10.*.0;\n    float t2 = floor((t+4.)/20.0+uv.x);\n    //vec3 random2 = hash31(1.+t2);\n    \n    \n    float offset = -.05;\n    \n    for(int c=0;c<3;c++){\n        float scale = c1.z;\n        float t3 = float(c)+t2;\n\n        for(int i=0;i<3;i++)\n        {\n            vec3 col_prev = col;\n            float factor = -.7;\n            float factor1 = 8.;\n            \n            uv = triangle_wave(uv.yx+scale,scale)+triangle_wave(uv,scale);\n            //uv.y /= .9;\n            uv.x *= factor;\n            for(int j = 0; j < 3;j++){\n                uv = triangle_wave((uv*(1.+offset)),scale);\n            }\n            uv.x /= -factor;\n            \n            if(i>0) col = abs(col.yzx*col.x + col_prev*col.y)/(col.x-col.y);\n            \n            col[c] = fract((uv.x*(1.+col.x/factor1))-(uv.y*(col.y/factor1+1.)));\n        }\n    }\n    \n    fragColor = vec4(vec3(col),1.0);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}