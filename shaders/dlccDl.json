{
    "Shader": {
        "info": {
            "date": "1702185712",
            "description": "Shadow? No!",
            "flags": 0,
            "hasliked": 0,
            "id": "dlccDl",
            "likes": 1,
            "name": "Stylized Ray Marching",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf"
            ],
            "usePreview": 0,
            "username": "INCHMAN1900",
            "viewed": 142
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n#define STEPS 100\n#define R iResolution.xy\n\n//float cubeSDF(vec3 pos, vec3 center, float size) {\n//    vec3 q = abs(pos - round(pos)) - size;\n//    return length(max(q, 0.)) + min(max(q.x, max(q.y, q.z)), 0.0);\n//}\n\n//float sdCone(vec3 p, vec2 c, float h) {\n//    float q = length(p.xz);\n//    return max(dot(c.yx, vec2(q, p.y)), -h - p.y);\n//}\n\nfloat coneSDF(vec3 p, vec2 c, float h) {\n    p-=round(p);\n    float q = length(p.xz);\n    return max(dot(c.yx, vec2(q, p.y)), -h - p.y);\n}\n\nfloat sphereSDF(vec3 pos, float size) {\n    return distance(pos,round(pos))-size;\n}\n\nfloat boxSDF(vec3 pos, float size) {\n    vec3 q = abs(pos - round(pos)) - size;\n    return length(max(q, 0.)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nvec3 rayMarching(vec2 uv) {\n    vec3 cameraPos = vec3(0.,0., -10000.+iTime*.5);\n    vec3 f = normalize(-cameraPos);\n    vec3 r = normalize(cross(vec3(0.0, 1.0, 0.0), f));\n    vec3 u = normalize(cross(f, r));\n    vec3 rayDir = normalize(r * uv.x + u * uv.y + f);\n    vec3 cubePos = vec3(0., 1.5, 0.);\n    float traveled = 0.;\n    for(int i = 0; i < STEPS; i++) {\n        float dist = coneSDF(cameraPos + traveled * rayDir-cubePos, vec2(sin(PI*.25), cos(PI*.25)), .2);\n        //dist = sphereSDF(cameraPos + traveled * rayDir - cubePos, .2);\n        dist = boxSDF(cameraPos + traveled * rayDir - cubePos, .2);\n        if(dist < 0.0001) {\n            return vec3(fract(dot(dist,124.5192)), fract(dot(dist,1852.145)), fract(dot(dist,935.17)));\n        }\n        traveled += dist;\n        if (traveled > 1000.) {\n            break;\n        }\n    }\n    return vec3(0.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 u) {\n    vec2 uv = (u + u - R) / R.y;\n    fragColor = vec4(rayMarching(uv), 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}