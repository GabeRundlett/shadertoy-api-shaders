{
    "Shader": {
        "info": {
            "date": "1566943792",
            "description": "More flower fractals... kinda tried to recreate album art cover from Full of Hell... kinda",
            "flags": 0,
            "hasliked": 0,
            "id": "tlSXzG",
            "likes": 7,
            "name": "Amber Mote in the Black Vault",
            "published": 3,
            "tags": [
                "noise",
                "flower"
            ],
            "usePreview": 0,
            "username": "QuantumYeti",
            "viewed": 490
        },
        "renderpass": [
            {
                "code": "float effect1(vec2 coords, float numSegments, float angle)\n{\n    float distSq = dot(coords, coords);\n    float dist = sqrt(distSq);\n    float distP4 = distSq * distSq;\n    float distP8 = distP4 * distP4;\n    float center = smoothstep(0.30, 1.8, dist);\n    float v = clamp(1.0 - (distP4 * 1.0 - abs(sin(angle * numSegments))), 0.0, 1.0);\n    \n    return center * v;\n}\n\nfloat effect2(vec2 coords, float numSegments, float angle)\n{\n    return sin(angle * numSegments);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float aspectMax = max(iResolution.x, iResolution.y);\n    float aspectMin = min(iResolution.x, iResolution.y);\n    vec2 coords = (uv - 0.5) * vec2(aspectMax / aspectMin, 1.0);\n    coords += -0.13;\n    float distSq = dot(coords, coords);\n    float dist = sqrt(distSq);\n    float f = 0.0;\n    float gain = sin(iTime) * 0.4 + 1.33;\n    float pos = 1.0;\n    float jitScl = 4.0;\n    float jitScl2 = 2.0;\n    float jitStr = 0.15;\n    float jit1 = texture(iChannel0, uv * -jitScl * sin(iTime) * 0.03).r;\n    float jit2 = texture(iChannel0, uv * jitScl2).r;\n    float numSegments = 11.0;\n    int iterations = 3;\n    //fragColor = vec4(1, 1, 1, 1);\t\t// uncomment for monochrome\n    fragColor = texture(iChannel1, uv * sin(iTime) * 0.01);\t\t// uncomment for color changes\n    vec3 addColor = vec3(0, 0, 0);\n    \n    // Background petals1 \n    for (int i = 0; i < iterations; i++)\n    {\n        float amt = float(i + 1);\n        vec2 cs = coords * gain * amt;\n        float angle = atan(cs.y, cs.x);\n        angle += 0.4 * amt;\n        float e1 = effect1(cs + vec2(jit1, jit2) * jitStr, numSegments, angle);\n        \n        f += e1 * 1.5 * smoothstep(0.05, 0.41, e1); \n    }\n    \n    // Background petals2\n    for (int i = 0; i < 10; i++)\n    {\n        float amt = float(i + 1);\n        vec2 cs = coords * 2.3 * gain * amt;\n        float angle = atan(cs.y, cs.x);\n        angle += 0.4 * amt;\n        float e1 = effect1(cs + vec2(jit1, jit2) * jitStr, numSegments, angle);\n        \n        f += e1 * 1.5 * smoothstep(0.25, 0.31, e1); \n    }\n    \n    // Outlines\n    for (int i = 0; i < 1; i++)\n    {\n        float amt = float(i + 1);\n        vec2 cs = coords * 0.38 * gain * amt;\n        float angle = atan(cs.y, cs.x);\n        angle += 0.4 * amt;\n        float e2 = effect2(cs, 30.0, angle);\n        \n        f *= (f + f + f + f + f + e2) / 6.0;\n    }\n    \n    // Inner bud\n    for (int i = 0; i < 2; i++)\n    {\n        float amt = float(i + 1);\n        vec2 cs = coords * gain * amt * 5.0;\n        float angle = atan(cs.y, cs.x);\n        angle += 0.8 * amt;\n        float e1 = effect1(cs + vec2(jit1, jit2) * jitStr, 0.5, angle);\n        \n        f += e1 * 1.5 * smoothstep(0.05, 0.41, e1); \n        addColor += vec3(e1, e1 * 0.25, 0.0);\n    }\n    \n    if (f > 0.8) { f = 1.0; }\n    else if (f > 0.6) \t{ f = 0.8; }\n    else if (f > 0.4) \t{ f = 0.6; }\n    else if (f > 0.2) \t{ f = 0.4; }\n    else if (f > 0.001)\t{ f = 0.2; }\n    else \t\t\t\t{ f = 0.0; }\n    \n    vec3 addC1 = fragColor.rgb * addColor;\n    \n    fragColor.rgb += addC1 * 10.0;\n    fragColor *= f;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}