{
    "Shader": {
        "info": {
            "date": "1602249392",
            "description": "A+mouse: tune density   Z+mouse: camera distance\nB : change the background\nN : switch between different definition of multiplicative noise\nH : noise visualisation (tst)\nZ : zoom with mouse",
            "flags": 48,
            "hasliked": 0,
            "id": "tdKczh",
            "likes": 2,
            "name": "Playing with nebula",
            "published": 3,
            "tags": [
                "fractal",
                "noise",
                "nebula",
                "toy"
            ],
            "usePreview": 0,
            "username": "Leria",
            "viewed": 396
        },
        "renderpass": [
            {
                "code": "// ==============================================================\n// Model and render nebula. see techreport Url: [soon]\n// Erwan Leria, 2020\n// Free for any use, just let my name appears or a link to this shader\n// ==============================================================\n\n///////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////\n\n//Play with Nebula parameters !\nstruct Nebula\n{\n    vec3 pos;\n \tvec3 absorb_coef;\n    vec3 color;\n    float bubble_radius;\n};\n    \nNebula neb = Nebula(\n    \t\t\t\tvec3(0) , //neb.pos\n    \t\t\t\tvec3(2., 3., 2.) ,  //nebabsorb_coef\n                    vec3(.7, .4, .3),\t//neb.color\n                    2.36 //\tneb.bubble_radius\n                   );\n\nvec3 cam_pos = vec3(0,0,8);\n///////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////////////\n\n#define ANIM\t\t\t\t1    //animation 0 or 1\n#define RADIUS\t\t\t\t4.\nfloat DISPERSION_VELOCITY =\t8.4;\n\n\n// --- noise parameters  --------------------------------------------\n\nfloat LOD\t\t=\t5.; //Set noise max level of details in [1.,inf[ (max value recommended is 5. or 6.)\n\n//----> in LOD mode, you can\n//choose the nature of noise ADDITIVE 1 = additive noise || 0 = multiplicative\n\t#define ADDITIVE \t\t0\n\n#define STRETCH\t\t \t\t1        // stretching\nvec3 stretching  = vec3( 1, 1, 1 );  // anisotropy\n\n\n// --- dedicated noise utils ----------------------------------------\n\n#define GaussRand( rand1, rand2 ) \\\n    ( sqrt( - 2.*log(max(1e-5,rand1)) ) * vec2 ( cos( 6.28*(rand2) ),sin( 6.28*(rand2) ) ) )\n\n#define GaussNoise(p)  GaussRand( .5+.5*snoise(p), .5+.5*snoise(p+17.12) ).x\n\nfloat log_norm(float x, float mu, float sig)\n{\n    float ln_sqr = log((x+1e-5)-mu); //compute once the value\n    float r = (1./((x+1e-5 )*sig*2.51) )* ( exp( - (ln_sqr*ln_sqr)/(2.*sig*sig)  ) );\n \treturn (r<0.?0.:r) ;\n}\n\nfloat gaussian_distrib(float x, float mu, float s)\n{\n    float X = x-mu;\n    return (1./( s*2.51 )) * exp( - (X*X) / ( 2.*( s*s ) ) );\n}\n\n\n#define f(x) (.5+.5*cos(x))\n#define Pnoise(p) (2.* (clamp( noise(p)/.122 +.5 ,0.,1.)) )\n//#define Psnoise(p)   2.*(  snoise(p) + 1. )\n//#define Psnoise(p)   max(0., 1. + 1.*GaussNoise(p) )\n//#define Psnoise(p)   max(0., .8 + 1.8*snoise(p) )\n\nfloat Psnoise1(vec3 p) {return ( 2.*( exp( snoise(p)) ) );  }\nfloat Psnoise2(vec3 p) {return  max(0., log_norm(snoise(p*10.), 0., 10.));}\nfloat Psnoise3(vec3 p) {return  max(0., 1. + .4*GaussNoise(p) ); }\n\n\nint selected_psnoise = 3; //Psnoise_i selector\n\nfloat Psnoise(vec3 p)\n{\n     return selected_psnoise == 3 ? Psnoise3(p)\n          : selected_psnoise == 2 ? Psnoise2(p)\n          :                          Psnoise1(p);\n}\n\n#define  rnd(v)     fract(sin( v * vec2(12.9898, 78.233) ) * 43758.5453)\n#define srnd(v)   ( 2.* rnd(v) - 1. )\n#define Bnoise(x)   abs(noise(x))\n\nfloat fbm_add( vec3 p, float level ) { // in [-1,1]\n    \n    float f = 0.;\n    vec3 s = vec3(2.);\n#if STRETCH\n   \tp *= stretching*  vec3(   1./8. );\n    s = 2./pow(stretching,vec3(1./4.));\n#endif\n    \n    for(float l = 0. ; l < level ; l++)\n    {\n     \tf += (1./exp2(l))*snoise(p);   p = p*s;\n    }\n    return f;\n}\n\nfloat fbm_mul( vec3 p, float level ) { // in [0,inf[\n    \n    float f = 1.;\n    vec3 s = vec3(2.);\n#if STRETCH\n   \tp *= stretching;\n   \ts = 2./pow(stretching,vec3(1./4.));\n#endif\n\n   \tfor(float i = 0. ; i < level ; i++)\n    {   _i = i;                      // for flownoise\n        f *= Psnoise(p); p = p*s;\n    }\n    return f;\n}\n\nfloat fbm(vec3 p, float level)\n{ \n#if ADDITIVE\n    return fbm_add(p, level);\n#else\n   \treturn fbm_mul(p, level);\n#endif   \n}\n\n\n// --- camera and nebula geometry -------------------------- \nstruct Camera\n{\n \tvec3 pos; //position\n    vec3 target; //focal point = target point\n};\n\nstruct Matter\n{\n    vec3 pos; //position\n    float radius; // radius of bounding sphere of matter\n};\n\n///////////////////////////////////////////////\nMatter m;\nCamera cam;\n///////////////////////////////////////////////\n\nvoid set_camera(vec3 pos, vec3 target)\n{\n    cam.pos = pos;\n    cam.target = target;    \n}\n\nvoid set_matter(vec3 pos, float radius)   { m = Matter(pos, radius); }\nvoid init_matter()                        { set_matter(vec3(0,0,0), RADIUS); }\n\n// --- position of light source\nvec3 lightpos = vec3(0);\n\n\nfloat energy_t_r(vec3 p, float velocity, float typical_scale)\n{\n    float gas_dens = Psnoise(p*10.); //generation of a local dispersion = turbulence * rate\n    gas_dens +=  fbm(p*10., LOD);\n \treturn gas_dens*.5*(velocity*velocity*velocity)/typical_scale;   \n}\n\nfloat local_velocity( float disp_rate)\n{\n\treturn 1.60*( DISPERSION_VELOCITY ) * disp_rate;  // $TUNE, 1.60 is a precomputed value\n}\n\n// --- main part: render nebula ------------------------------------\n// bounding sphere + volume marching\n\nvoid ray_march_scene(Ray r, float k, inout vec3 c, inout vec3 transp_tot)\n{\n    float uniform_step = k;\n   \n    float param_t = intersect_sphere(r, neb.pos, RADIUS); // test bounding sphere\n    if(param_t == -1.) return; // the ray miss the nebula bounding sphere\n\n    \n    if(param_t < 0.) param_t = 0.; // jump to the sphere intersection (skip the void), but if we are already inside\n    vec3  p = ray_interpolation(r, param_t + 1e-5);        \n    \n    float vt = -1.;         //value of the previous voxel\n    \t\t\t\t\t\t//initializes the preintegration when >= 0         \n    \n    vec3 t_acc = vec3(1);\t// accumulated transparency\n    \n    if myKeyToggle(64+14) // key 'N' : switch multiplicative noise kind\n    {\n        selected_psnoise += 1;\n        if(selected_psnoise > 3) selected_psnoise = 1;\n    }\n            \n    for(int s=0; s < 120; s++)\n    {                 \n        vec3 center = p - neb.pos; //    \n        vec3 fromcam = cam.pos - p;\n        vec3 rgb_t = vec3(0);    // local transparency               \n               \n\n        //if we are no longer in the bounding sphere, stop marching the volume        \n\t\tif(length(fromcam) > length(cam.pos - neb.pos) + RADIUS) break;\n            // --- textured bubble model\n        float rad_bubl = neb.bubble_radius; // radius of bubble, also control the opening of the bubble                        \n\n        float size = length(p-neb.pos)/RADIUS;\n\n        float dr = fbm_add( p*5.2 - 124.17, LOD), //localy modify the radius of the bubble\n            de = noise( p - 98.12 ), //localy modify the thickness of the shell of the bubble\n\n            //mask of the bubble's shell\n            mask = smoothstep ( .2+0.2*de, .0, abs( ( length(p)-(rad_bubl))/rad_bubl  -2.8*dr )   ) ;\n\n        float dispersion_rate =  mask; \n\n        float velocity = local_velocity(dispersion_rate); //local velocity (sometimes called sigma_v)\n\n        // physical value of the microstructures of the cloud\n        float scale = 10.;\n\n        //kinetic energy transfer rate as a dust grain density coefficient (transfer function)\n        //Astron Astrophys Rev (2012) 20:55DOI 10.1007/s00159-012-0055-yREVIEW ARTICLETurbulent molecular cloudsPatrick HennebelleÂ·Edith Falgarone p.21 & a27            \n        float TAU_PRIME = energy_t_r(p, velocity, scale); \n\n        //////////// PREINTEGRATION //////////////////////// \n        #define PREINTEGRATION\t1\n        //preintegration formula :\n        //https://www.researchgate.net/publication/2878658_High-Quality_Pre-Integrated_Volume_Rendering_Using_Hardware-Accelerated_Pixel_Shading            \n        #define TAU(d0, d1)\t( (Psnoise(p*10.) + fbm(p*10., LOD)) * (INT_E(d1)-INT_E(d0))/(d1-d0) )\n\n        //primitive of the transfer function\n        #define INT_E(v)\t( (.5*(v*v*v*v))/(4.*scale) )   \n        /////////////////////////////////////////////////////\n\n        //ionization color on the rgb channels\n        vec3 colormap = clamp(vec3( size*size*50., (-(size-.5)*(size-.5)+1.)*7., 1./(size*size) )/10., 0., 1.);\n\n        //Scattering coefficient\n        vec3 sigma_s = neb.color*colormap;\n\n        //Absorption coefficient\n        vec3 sigma_a = neb.absorb_coef;\n\n        sigma_a *= exp( 10.*(myKeyParam(64+1)-.5) ); // key 'A'+mouse: tune overall opacity\n\n        //Attenuation coefficient\n        vec3 sigma_t = vec3(0);\n\n        if(vt == -1.) //if the value was not yet initialized, then initialize it doesn't use preintegration\n        {\n            sigma_t = (sigma_a+sigma_s)*TAU_PRIME;\n            vt = velocity+1e-5;  \n        }           \n\n        #if PREINTEGRATION\n        sigma_t = (sigma_a+sigma_s)*TAU(vt, velocity);\n        vt = velocity+1e-5;     \n        #else\n        sigma_t = (sigma_a+sigma_s)*TAU_PRIME;\n        #endif\n\n        rgb_t = exp(-sigma_t*k/32.);    // <<< local transparency                                \n        // note that Dl = k has no unit  -> * coef to adapt\n\n\n        float epsilon = k/10.;           // --- local lighting\n\n        vec3 L = normalize(p-lightpos);\n        // TAU_PRIME at neighbor location\n        #define nTAU(x,y,z) energy_t_r(p+epsilon*vec3(x,y,z), velocity , scale)\n\n        #if 1\n        vec3 N =   vec3( nTAU(1,0,0), nTAU(0,1,0), nTAU(0,0,1) )\n            - TAU_PRIME;\n        N = normalize(N+1e-5);\n        float dif = abs(dot(N, L));\n        #else\n        float dif = 0.002*abs( nTAU(L.x,L.y,L.z) - TAU_PRIME ) / epsilon; // directional derivative https://iquilezles.org/articles/derivative\n        #endif\n\n        L = p-lightpos;\n        float l = length(L), L0 = 7.; // L0: tunes where the const/rÂ² = 1  \n        float sun = 1.* L0*L0/(l*l);\n        float shadow =  exp(- 4.*max(0., l  - (rad_bubl) ) ) , // star illu: max at inner shell surface, then decay\n            reflec = dif;                   // isotropic\n        //reflec = .75* ( 1. + dif*dif ); // Rayleigh phase function\n\n\n        // --- add current voxel contribution to ray\n        c += t_acc* (sigma_s/(sigma_t+1e-5) * reflec * sun * shadow) *  (1.-rgb_t);\n        t_acc *= rgb_t;    // accumulating the transparency of each voxel\n\n        \n        p += r.dir*k; //step to the next voxel according to the length of the sampling\n\n     //   k = uniform_step; //uniform step\n    }\n    \n    //output the transparency\n    transp_tot = t_acc;\n\n}\n\t\n// --- main ------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    init_matter();                        // --- init object and camera geometries\n\n    float z = 8.2 / (1.+ 2.*myKeyParam(64+26)); // key 'Z'+mouse: camera dist to nebula\n    set_camera(cam_pos, neb.pos); \n    time = iTime;              // for flownoise\n\n    //centering screen coordinates\n    vec2 R = iResolution.xy, \n        uv = (2.*fragCoord - R ) / R.y,\n        M =  iMouse.xy/R;\n\n    if myKeyToggle(64+8)                  // --- key 'H' : test noise \n    {\n        fragColor = vec4( fbm(vec3( uv, 1 )*40., 4.) );\n        return;\n    }\n\n    float degree = 2.*PI * M.x - PI;      // --- camera rotation: mouse or auto-rotation\n    float degree2 = 2.*PI * M.y - PI;\n    if ( iMouse.z<=0. || myKeyParam(0)>0. ) degree = iTime/2., degree2 = 0.;\n\n    vec3 ray_dir = vec3(uv, -1.);\n\n    m.pos = normalize(vec3(-10, 20., m.pos.z));\n\n    // vec2 m = 2.*PI * iMouse.xy/R - PI;\n    vec3 C = cam.pos, \n        ray = normalize(ray_dir);\n    C.xz *= rot2(degree);   C.yz *= rot2(degree2);\n    ray.xz *= rot2(degree); ray.yz *= rot2(degree2);\n    cam.pos = C;\n\n    // --- launch rendering\n    vec3     color = vec3(0), \n        transp_tot = vec3(1), \n        sky = vec3(0);             // set background \n    sky =   .5* texture(iChannel0,fragCoord/R+vec2(degree,degree2)).rrr;\n    if myKeyToggle(64+2) sky = vec3(1); //from black 2 white\n    \n\t//ray march the nebula\n    ray_march_scene(Ray(C, ray), .1, color, transp_tot);  \n\n    //rendering the background according to the pixel transparency\n    color += transp_tot * sky;\n    \n    fragColor = vec4(pow(color, vec3(1./2.2)), 1.); //gamma colors rendered \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// === utils ==============================\n\n#define PI \t\t\t\t\t3.1415926\n\n\n// --- keyboard ---------------------------\n\n// KeyParam(ascii) gives value of tuner #ascii\n// KeyToggle(ascii) gives toggle state for key #ascii\n// KeyParam(0) tells whether any key is currently pressed (e.g. to prevent mouse-move object) \n#define myKeyParam(ascii)    texelFetch( iChannel0, ivec2(ascii,0), 0 ).a \n#define myKeyToggle(ascii) ( texelFetch( iChannel0, ivec2(ascii+256,0), 0 ).a > .5 )\n\n\n\n// --- base noise -------------------------\n//most of \"noise stuff\" comes from iq\n\nfloat time, _i;            // for flownoise\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n    r -= .5;\n#if 0                             // flownoise. _i = perlin cascade level\n  //float t = time*exp2(_i)/256.;\n    float t =_i < 4. ? 0. : time/6.;\n    r.xy *= mat2( cos( 6.*t + vec4(0,11,33,0) ) );\n    r.yz *= mat2( cos( 4.7*t + vec4(0,11,33,0) ) );\n#endif\n\treturn r;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\nvec3 hash( vec3 p ) // replace this by something better\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\tp  = -1.0 + 2.0*fract(sin(p)*43758.5453123);\n    return p;\n}\n\n/* 3d simplex noise */\nfloat snoise(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\nfloat cloud( in vec3 p )\n{\n\tvec3 q = p - vec3(0.0,0.1,1.0);\n\tfloat f;\n    f  = 0.50000*noise( q ); q = q*2.02;\n    f += 0.25000*noise( q ); q = q*2.03;\n    f += 0.12500*noise( q ); q = q*2.01;\n    f += 0.06250*noise( q ); q = q*2.02;\n    f += 0.03125*noise( q );\n\treturn clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );\n}\n\n\n\n// --- geometric transformations ----------\n\n//translation\n\nmat4 translate(vec3 k)\n{\n    mat4 mat = mat4(\n        vec4(1., vec3(0.)),\n        vec4(0., 1., vec2(0.)), \n        vec4(vec2(0.), 1., 0.),\n        vec4(k, 1.) );\n    \n    return mat;\n}\n\n\nmat2 rot2(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2( c, -s, s, c);\n}\n\n//rotation around the x axis\nmat3 rotateX(float degree)\n{\n    float rad = PI*degree/180.;\n \tmat3 rot = mat3(1., 0., 0.,\n                    0., cos(rad), -sin(rad),\n                    0., sin(rad), cos(rad));\n    return rot;\n}\n\n//rotation axis-angle\nmat4 rotation_matrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\n\n// --- ray utils --------------------------\n\nstruct Ray\n{\n    vec3 origin; // origin\n    vec3 dir;    // direction of the ray\n};\n\nvec3 ray_interpolation(Ray r, float t)    { return (r.origin + r.dir*t);    }\n\n// Sphere intersection  distance ( or -1. if miss the sphere )\nfloat intersect_sphere( Ray r, vec3 sphere, float rad )\n{\n\tvec3 oc = r.origin - sphere;\n\tfloat b = dot( oc, r.dir );\n\tfloat c = dot( oc, oc ) - rad*rad;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return -1.;\n\treturn -b - sqrt( h );\n}\n\n// Sphere SDF (for marching)\nfloat sdf_sphere(vec3 pXp0, float radius) { return (length(pXp0) - radius ); }\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// === keyboard and sliders management ================\n\nvoid mainImage( out vec4 O, vec2 U )\n{    vec2 R = iResolution.xy; \n \n    // --- .rgb: backbround sky. [ do we really need to recompute this at every frame ? ]\n    \n    O = texture(iChannel1,U/256.); \n  //O = vec4( pow( O.r, 20. ) );             // BW stars\n  //O = pow( O, vec4(20) );                  // color stars\n    O *= pow( max(O.r,max(O.g,O.b)), 100.);  // faint color stats\n    \n    // --- .a: could be used to implement parameter persistant states ( for mouse or keyboard tuning ).\n    if (U.y>.5) return;\n \n    if (iFrame==0) {                         // init values\n        O.a = .5;\n                    \n    } else {                                 // tuning\n        O.a = texelFetch(iChannel0, ivec2(U), 0).a;\n\n#define keyToggle(ascii)  ( texelFetch(iChannel3,ivec2(ascii,2),0).x > 0.)\n#define keyDown(ascii)    ( texelFetch(iChannel3,ivec2(ascii,1),0).x > 0.)\n#define keyClick(ascii)   ( texelFetch(iChannel3,ivec2(ascii,0),0).x > 0.)\n        \n        if (U.x<256.) {\n            if ( keyClick(U.x) && iMouse.z>0. )\n                O.a = iMouse.y/R.y; }        // tune value of parameter #ascii\n        else if(U.x<512.) \n            O.a = float(keyToggle(U.x-256.));// register the toggle on/off for #ascii\n       \n                                             // -> use KeyParam(ascii) to get it\n        if (U.x<1.) {                        //        KeyParam(0) tells where any key is used\n            O.a = 0.;\n            for (int i=0; i<256; i++) \n                if keyClick(i) { O.a = 1.; break; }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}