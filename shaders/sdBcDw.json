{
    "Shader": {
        "info": {
            "date": "1643788555",
            "description": "Wood tops",
            "flags": 32,
            "hasliked": 0,
            "id": "sdBcDw",
            "likes": 42,
            "name": "Spinning Tops",
            "published": 3,
            "tags": [
                "mechanics"
            ],
            "usePreview": 1,
            "username": "wyatt",
            "viewed": 678
        },
        "renderpass": [
            {
                "code": "vec3 wood (vec2 u) {\n    return texture(iChannel3,u).xyz;\n}\nvec3 stone (vec2 u) {\n    return texture(iChannel2,u).xyz;\n}\nvec3 woodN (vec2 u) {\n    float n = wood(u+vec2(0,1)/R).x;\n    float e = wood(u+vec2(1,0)/R).x;\n    float s = wood(u-vec2(0,1)/R).x;\n    float w = wood(u-vec2(1,0)/R).x;\n    return normalize(vec3(e-w,n-s,.5));\n}\nvec3 stoneN (vec2 u) {\n    float n = stone(u+vec2(0,1)/R).x;\n    float e = stone(u+vec2(1,0)/R).x;\n    float s = stone(u-vec2(0,1)/R).x;\n    float w = stone(u-vec2(1,0)/R).x;\n    return normalize(vec3(e-w,n-s,.2));\n}\nvoid drawTop (vec3 p, vec3 d, top b, inout vec3 normal, inout vec3 color, int i) {\n    vec3 n = vec3(0,1,0)*b.o;\n    float dn = dot(d,n);\n    float pn = dot(p-b.p,n);\n    float pd = dot(p-b.p,d);\n    float r = .05;\n    float q = quadratic(\n        1.-dn*dn,\n        2.*pd-2.*pn*dn,\n        dot(p-b.p,p-b.p)-pn*pn-r*r\n    ).x;\n    float qs = sphere(p,d,b.p,.4);\n    vec3 i1 = p + d*q;\n    float x1 = dot(i1-b.p,n);\n    if (x1>+.5) q = sphere(p,d,b.p+.5*n,r);\n    if (x1<-.5) q = sphere(p,d,b.p-.5*n,r);\n    normal = normalize(p+d*q-(b.p+n*clamp(x1,-.5,.5)));\n    if (q<0.||(qs<q&&qs>0.)) {\n        q = qs;\n        normal = normalize(p+d*q-b.p);\n        vec3 no = b.o*normal;\n        vec2 u = 2./pi*vec2(atan(length(no.xz),no.y),atan(no.z,no.x));\n    \n        color = .6*wood(u)*(.7+.6*sin(float(i)+vec3(1,2,3)));\n        vec3 wn = woodN(u);\n        normal = normal*wn.z+5.*wn.y*cross(normal,b.o[1])+1.*wn.x*cross(normal,b.o[0]);\n    } else color = vec3(0);\n}\nvoid scene (inout vec3 p, inout vec3 d, inout vec3 normal, inout vec3 color) {\n    float mi = 1e9;\n    top object;\n    forM(i) { // tops\n        top t = get(i);\n        float ii = iTop(p,d,t);\n        if (ii < mi && ii>0.) {\n            mi = ii;\n            object = t;\n            drawTop(p,d,t,normal,color,i);\n        }\n    }\n    { // floor\n        float ii = plane(p,d,vec3(0,-1.5,0),vec3(0,1,0));\n        if (ii < mi && ii>0.) {\n            mi = ii;\n            vec3 u = (p + d*mi);\n            float s = .6+.4*sign(sin(3.*u.x)*sin(3.*u.z));\n            color = s*wood(s+.6*u.xz);\n            vec3 wn =  woodN(s+.6*u.xz);\n            wn.z *= .2+s;\n            normal = normalize(wn).xzy;\n        }\n    }\n    { // wall\n        float ii = plane(p,d,vec3(0,0,1.5),vec3(0,0,1));\n        if (ii < mi && ii>0.) {\n            mi = ii;\n            vec3 u = (p + d*mi);\n            float s = .9-sin(2.*u.x);\n            normal = stoneN(-.3*u.yx);\n            color = .8*stone(-.3*u.yx);\n            if (s<0.) {\n                color = exp(-.1*abs(u.y))*sin(1.+.15*(u.y)*(1.+vec3(1,2,3)));\n                normal = woodN(u.xy);\n            }else if (s<.1) {\n                color = .3*wood(.2*u.yx);\n                normal = woodN(.2*u.yx);\n            }\n        }\n    }\n    \n    p = p + d*mi;\n    d = reflect(d,normal);\n    p += 1e-4*d;\n}\nMain {\n\n    vec3 p = vec3(0,1,-6.);\n    vec3 d = normalize(vec3((U-.5*R)/R.y,1));\n    d.yz *= ei(.6);\n    float an = .05+.1*sin(.5*iTime);\n    if (iMouse.z>0.) an = 3.1*(iMouse.x/R.x-.5);\n    d.xz *= ei(an);d=normalize(d);\n    Q = vec4(0);\n    vec3 normal, color;\n    for (float k = 1.; k < 4.; k++) {\n        scene(p,d,normal,color);\n        Q.xyz += .9*color/k;\n    }\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n    #define M 13\n    \n    #define N 100.\n    #define dt (1./N)\n\n\n#define R iResolution.xy\n#define A(U) texture(iChannel0,(U)/R)\n#define Main void mainImage(out vec4 Q, in vec2 U) \n#define ei(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define cell(u) ((u).x>=0.&&(u).y>=0.&&(u).x<1.&&(u).y<1.)\n#define pi 3.14159265359\n#define get(i) top(\\\n        A(vec2(i,0)+.5).xyz,\\\n        mat3(\\\n            A(vec2(i,1)+.5).xyz,\\\n            A(vec2(i,2)+.5).xyz,\\\n            A(vec2(i,3)+.5).xyz \\\n        ),\\\n        A(vec2(i,4)+.5).xyz,\\\n        A(vec2(i,5)+.5).xyz,\\\n        vec3(0),\\\n        vec3(0));\n#define set(i,b) \\\n    if (cell(U-.5-vec2(i,0))) Q.xyz = (b).p;\\\n    if (cell(U-.5-vec2(i,1))) Q.xyz = (b).o[0];\\\n    if (cell(U-.5-vec2(i,2))) Q.xyz = (b).o[1];\\\n    if (cell(U-.5-vec2(i,3))) Q.xyz = (b).o[2];\\\n    if (cell(U-.5-vec2(i,4))) Q.xyz = (b).v;\\\n    if (cell(U-.5-vec2(i,5))) Q.xyz = (b).s;\nstruct top {\n    vec3 p;\n    mat3 o;\n    vec3 v;\n    vec3 s;\n    vec3 f; // force\n    vec3 t; // torque\n};\nmat3 matrix (vec3 r) { \n   if (length(r)==0.) return mat3(1);\n   float a = length(r);\n   vec3 o = normalize(r);\n   float c = cos(a), t = 1.-c;\n   float s = sin(a);\n   return mat3(\n       t*o.x*o.x+c,t*o.x*o.y-o.z*s,t*o.x*o.z+o.y*s,\n       t*o.x*o.y+o.z*s,t*o.y*o.y+c,t*o.y*o.z-o.x*s,\n       t*o.x*o.z-o.y*s,t*o.y*o.z+o.x*s,t*o.z*o.z+c\n   \n   );\n\n}\nvec2 quadratic (float a, float b, float c) {\n    float d = b*b-4.*a*c;\n    if ( d < 0. ) return vec2(-1);\n    return .5/a*vec2(-b-sqrt(d),-b+sqrt(d));\n}\nfloat plane (vec3 p, vec3 d, vec3 c, vec3 n) {\n    return -dot(p-c,n)/dot(d,n);\n}\nfloat sphere (vec3 p, vec3 d, vec3 a, float r) {\n    return quadratic(1.,2.*dot(p-a,d),dot(p-a,p-a)-r*r).x;\n}\nfloat iTop (vec3 p, vec3 d, top b) {\n    vec3 n = vec3(0,1,0)*b.o;\n    float dn = dot(d,n);\n    float pn = dot(p-b.p,n);\n    float pd = dot(p-b.p,d);\n    float r = .05;\n    float q = quadratic(\n        1.-dn*dn,\n        2.*pd-2.*pn*dn,\n        dot(p-b.p,p-b.p)-pn*pn-r*r\n    ).x;\n    float qs = sphere(p,d,b.p,.4);\n    vec3 i1 = p + d*q;\n    float x1 = dot(i1-b.p,n);\n    if (x1>+.5) q = sphere(p,d,b.p+.5*n,r);\n    if (x1<-.5) q = sphere(p,d,b.p-.5*n,r);\n    if (q<0.||(qs<q&&qs>0.)) \n        q = qs;\n    return q;\n}\n\n\n#define forM(i) for (int i = 0; i < M+ min(iFrame,0); i++)\n\n#define Gravity(part) part.v.y -= dt*1e-1;\n\n#define Velocity(part,a) part.v+cross(part.s,a-part.p);\n\n#define Impulse(part,a,no,dv) \\\n    vec3 r = normalize(part.p-a);\\\n    vec3 im = no*(1.-.5*dot(no,dv)/length(dv));\\\n    if (length(dv)>0.)\\\n        im -= .5*dv*length(cross(normalize(dv),no)); \\\n    float l = length(im);\\\n    part.f += im*abs(dot(im/l,r));\\\n    part.t += cross(im/l,r);\n    \n#define Ground(part) \\\n{\\\n    vec3 n = vec3(0,1,0)*part.o;\\\n    vec3 a = part.p-.5*n;\\\n    vec3 b = part.p+.5*n;\\\n    vec3 c = part.p+vec3(0,-.4,0);\\\n    if (a.y<-1.45) {\\\n        vec3 dv = Velocity(part,a);\\\n        Impulse(part,a,vec3(0,1,0),dv);\\\n    }\\\n    if (b.y<-1.45) {\\\n        vec3 dv = Velocity(part,b);\\\n        Impulse(part,b,vec3(0,1,0),dv);\\\n    }\\\n    if (c.y<-1.5) {\\\n        vec3 dv = Velocity(part,c);\\\n        Impulse(part,c,vec3(0,1,0),dv);\\\n    }\\\n}\n#define Wall(part) \\\n{\\\n    vec3 n = vec3(0,1,0)*part.o;\\\n    vec3 a = part.p-.5*n;\\\n    vec3 b = part.p+.5*n;\\\n    vec3 c = part.p+vec3(0,-.4,0);\\\n    if (a.z>1.45) {\\\n        vec3 dv = Velocity(part,a);\\\n        Impulse(part,a,vec3(0,0,-1),dv);\\\n    }\\\n    if (b.z>1.45) {\\\n        vec3 dv = Velocity(part,b);\\\n        Impulse(part,b,vec3(0,0,-1),dv);\\\n    }\\\n    if (c.z>1.5) {\\\n        vec3 dv = Velocity(part,c);\\\n        Impulse(part,c,vec3(0,0,-1),dv);\\\n    }\\\n}\n\n#define Hit(part,other)   \\\nif (length(part.p-other.p)<1.) {\\\n    vec3 np = vec3(0,1,0)*part.o;\\\n    vec3 no = vec3(0,1,0)*other.o;\\\n    vec3 ap = part.p+np*.5;\\\n    vec3 bp = part.p-np*.5;\\\n    vec3 ao = other.p+no*.5;\\\n    vec3 bo = other.p-no*.5;\\\n    /* ball hit ball */\\\n    if (length(part.p-other.p)<=.8) { \\\n        vec3 a = .5*(part.p+other.p); \\\n        vec3 n = normalize(a-other.p); \\\n        vec3 dv = Velocity(part,a)-Velocity(other,a);\\\n        Impulse(part,a,n,dv); \\\n    }\\\n    /* my peg hit ball */\\\n    if (length(ap-other.p)<=.4) {\\\n        vec3 a = ap; \\\n        vec3 n = normalize(part.p-a); \\\n        vec3 dv = Velocity(part,a)-Velocity(other,a);\\\n        Impulse(part,a,n,dv); \\\n    }\\\n    if (length(bp-other.p)<=.4) {\\\n        vec3 a = bp; \\\n        vec3 n = normalize(part.p-a); \\\n        vec3 dv = Velocity(part,a)-Velocity(other,a);\\\n        Impulse(part,a,n,dv); \\\n    }\\\n    /* peg hit my ball */\\\n    if (length(ao-part.p)<=.4) {\\\n        vec3 a = ao; \\\n        vec3 n = normalize(a-other.p); \\\n        vec3 dv = Velocity(part,a)-Velocity(other,a);\\\n        Impulse(part,a,n,dv); \\\n    }\\\n    if (length(bo-part.p)<=.4) {\\\n        vec3 a = bo; \\\n        vec3 n = normalize(a-other.p); \\\n        vec3 dv = Velocity(part,a)-Velocity(other,a);\\\n        Impulse(part,a,n,dv); \\\n    }\\\n    /* peg hit peg */\\\n    if (length(ao-ap)<=.1) {\\\n        vec3 a = .5*(ap+ao); \\\n        vec3 n = normalize(a-ao); \\\n        vec3 dv = Velocity(part,a)-Velocity(other,a);\\\n        Impulse(part,a,n,dv); \\\n    }\\\n    if (length(ao-bp)<=.1) {\\\n        vec3 a = .5*(ap+bo); \\\n        vec3 n = normalize(a-bo); \\\n        vec3 dv = Velocity(part,a)-Velocity(other,a);\\\n        Impulse(part,a,n,dv); \\\n    }\\\n    if (length(bo-ap)<=.1) {\\\n        vec3 a = .5*(bp+ao); \\\n        vec3 n = normalize(a-ao); \\\n        vec3 dv = Velocity(part,a)-Velocity(other,a);\\\n        Impulse(part,a,n,dv); \\\n    }\\\n    if (length(bo-bp)<=.1) {\\\n        vec3 a = .5*(bp+bo); \\\n        vec3 n = normalize(a-bo); \\\n        vec3 dv = Velocity(part,a)-Velocity(other,a);\\\n        Impulse(part,a,n,dv); \\\n    }\\\n}\n\n    \n#define Renormalize(part) \\\n        part.o[0] = normalize(cross(part.o[1],part.o[2]));\\\n        part.o[1] = normalize(cross(part.o[2],part.o[0]));\\\n        part.o[2] = normalize(cross(part.o[0],part.o[1]));\\\n\n#define Physics(part) \\\n        part.v += dt*part.f;\\\n        part.s += dt*part.t;\\\n        part.p += dt*part.v;\\\n        part.o *= matrix(dt*part.s);\\\n        part.s *= 1.-0e-3*dt;\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "Main {\n    if (U.x>float(M)||U.y>6.) discard;\n    top tops[M];\n    for (int i = 0; i < M; i++)\n        tops[i] = get(i);\n        \n    \n    for (int time = 0; time < int(N/2.)+ min(iFrame,0); time++) {\n         {\n            forM(i) Gravity(tops[i])\n            forM(i) tops[i].f = vec3(0),\n                    tops[i].t = vec3(0);\n            forM(i) forM(j) if (i!=j) {\n                Hit(tops[i],tops[j]);\n            }\n            forM(i) {Ground(tops[i])}\n            forM(i) {Wall(tops[i])}\n            forM(i) {Physics(tops[i])}\n            forM(i) {Renormalize(tops[i])}\n        }\n    }\n    if (iFrame < 1) {\n        forM(i) {\n            vec3 o  = vec3(0,1,0);\n            tops[i].o = matrix(o);\n            tops[i].p  = vec3(1.7*sin(10.*float(i-M/2)),0,-.4*float(i));\n            tops[i].v  = vec3(0,-20.*dt*float(i-M/2),0);\n            tops[i].s  = 100.*dt*o*cos(float(i));\n            tops[i].o *= matrix(vec3(0,0,pi*.01));\n            tops[i].s *= matrix(vec3(0,0,pi*.01));\n        }\n    }\n    \n    for (int i = 0; i < M; i++) {\n        set(i,tops[i]);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}