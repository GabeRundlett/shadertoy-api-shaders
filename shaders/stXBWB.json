{
    "Shader": {
        "info": {
            "date": "1651383902",
            "description": "two different kinds of shake, one is a uniform random, the other is a gaussian random.\n\nWorks better with fonts or text.",
            "flags": 0,
            "hasliked": 0,
            "id": "stXBWB",
            "likes": 5,
            "name": "Gaussian vs Cartesian shake",
            "published": 3,
            "tags": [
                "noise",
                "random"
            ],
            "usePreview": 0,
            "username": "copperbotte",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "// random number generator **\n// taken from iq :)\nfloat seed;    //seed initialized in main\nfloat rnd() { return fract(sin(seed++)*43758.5453123); }\n\nbool hitStar(vec2 center, vec2 xy)\n{\n    xy -= center;\n    \n    float factor = 0.5;\n    float l = pow(pow(abs(xy.x), factor) + pow(abs(xy.y), factor), 1.0/factor);\n    \n    return l < 0.25;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Correct for aspect ratio, convert so 0 is the center\n    vec2 xy = uv * 2.0 - 1.0;\n    xy.x *= iResolution.x/iResolution.y;\n    \n    // Generate random seed\n    //float seedtime = iTime;\n    float seedtime = floor(float(iFrame) / (60.0/12.0))/12.0;\n    \n    seed = fract(seedtime);// + iResolution.y * uv.x + uv.y;\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    col *= 0.25;\n    \n    // Shake parameters\n    float jitterscale = 0.05;\n    float seperation = 0.5;\n    const int samples = 4;\n    \n    vec3 avg = vec3(0.0);\n    \n    for(int i=0; i<samples; ++i)\n    {\n        // Linear random jitter\n        vec2 jitter = vec2(rnd(), rnd()) * 2.0 - 1.0;\n        jitter *= jitterscale;\n        if(hitStar(vec2(-seperation, 0.0) + jitter, xy))\n            avg += vec3(1);\n\n        // Gaussian random jitter\n        vec2 xi = vec2(rnd(), rnd());\n        float r = sqrt(-log(1.0 - xi.x));\n        float theta = 2.0 * 3.141592 * xi.y;\n        jitter = vec2(cos(theta), sin(theta)) * r;\n\n        jitter *= jitterscale;\n        if(hitStar(vec2(seperation, 0.0) + jitter, xy))\n            avg += vec3(1);\n    }\n\n    col = mix(col, vec3(1), avg / float(samples));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}