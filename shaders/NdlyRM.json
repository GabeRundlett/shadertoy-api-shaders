{
    "Shader": {
        "info": {
            "date": "1641867866",
            "description": "wave collisions? you betcha!",
            "flags": 0,
            "hasliked": 0,
            "id": "NdlyRM",
            "likes": 0,
            "name": "eindacor_waves",
            "published": 3,
            "tags": [
                "waves"
            ],
            "usePreview": 0,
            "username": "Eindacor_DS",
            "viewed": 42
        },
        "renderpass": [
            {
                "code": "#define SHOW_SOURCES false\n\n// from https://www.shadertoy.com/view/4djSRW\nfloat hash(vec2 p)\n{\n\treturn fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat getWaveVal(vec2 source, vec2 uv, float wavelength, float waveReach, float time) {\n    float dist = distance(source, uv);\n\n    float waveVal = sin(dist / wavelength - time);\n    \n    float waveFalloffCoeff = 4.;\n    \n    waveVal *= smoothstep(waveReach + waveFalloffCoeff * wavelength, waveReach - waveFalloffCoeff * wavelength, dist);\n    \n    return waveVal;\n}\nfloat getHoldTransitionValue(float lower, float upper, float holdTime, float transitionTime, float time) {\n    float period = 2. * holdTime + 2. * transitionTime;\n    float halfPeriod = period / 2.;\n    float relativeTime = fract(time / halfPeriod);\n    float halfHoldTime = holdTime / 2.;\n    \n    float val = smoothstep(halfHoldTime, halfHoldTime + transitionTime, relativeTime * halfPeriod);\n    \n    if (int(time / halfPeriod) % 2 == 0) {\n        val = 1. - val;\n    }\n\n    return mix(lower, upper, val);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n    uv.x *= aspectRatio;\n    \n    uv -= vec2(.5 * aspectRatio, .5);\n    \n    float val = 0.;\n    vec3 color = vec3(0.);\n    \n    int numSources = 200;\n    float waveReach = .8f;\n    \n    float effectiveTime = iTime + 200.;\n    \n    for (int i=0; i<numSources; i++) {\n        float xSeed = hash(vec2(float(i)));\n        float ySeed = hash(vec2(float(100-i)));\n        \n        float wavelengthSeed = hash(vec2(xSeed, ySeed));\n        float wavelength = mix(.002, .8, wavelengthSeed);\n        \n        float timeScale = mix(1., 2., hash(vec2(float(-i))));\n        \n        float sourceScale = getHoldTransitionValue(1., 1., 0., 50., effectiveTime);\n        float waveReachScale = getHoldTransitionValue(1., 1., 0., 50., effectiveTime);\n        \n        vec2 source = (vec2(xSeed * aspectRatio, ySeed) * 2. - vec2(aspectRatio, 1.)) * .5;\n        \n        source *= sourceScale;\n        \n        if (SHOW_SOURCES && distance(uv, source) < .01) {\n            fragColor = vec4(1.);\n            return;\n        }\n        \n        vec3 randomColor = vec3(xSeed, ySeed, hash(vec2(ySeed, xSeed)));\n\n        float localVal = getWaveVal(source, uv, wavelength, waveReach * waveReachScale, effectiveTime * timeScale);\n        color += localVal * randomColor;\n        val += localVal;\n    }\n\n    // Output to screen\n    fragColor = vec4(clamp(color, vec3(0.), vec3(1.)), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}