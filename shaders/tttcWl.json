{
    "Shader": {
        "info": {
            "date": "1610264490",
            "description": "Looking mega poggers. Takes a SDF in Buffer A.",
            "flags": 32,
            "hasliked": 0,
            "id": "tttcWl",
            "likes": 21,
            "name": "Glossy Raymarching",
            "published": 3,
            "tags": [
                "fractal",
                "julia",
                "raymarch",
                "glossy"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 777
        },
        "renderpass": [
            {
                "code": "// ^^^ Switch Between Common, Buffer A, Buffer B, and Image ^^^\n// Common contains settings and common functions like Michael0884's RNG and constants like Pi.\n// Buffer A contains rendering and Temporal Sampling from LoicVDB.\n// Buffer B contains the other half of Temporal Sampling along with Image Export.\n// This is for drawing the shader.\n\n// Zi7ar21's Glossy Raymarching --- January 10th, 2020\n// Last modified January 10th, 2020 16:00 Mountain Time\n\n// This shader raymarches a 4D Julia fractal and uses normals to calculate\n// the reflection of a cubemap in iChannel0 of Buffer A.\n\n// Output to screen\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ^^^ Switch Between Common, Buffer A, Buffer B, and Image ^^^\n// This contains rendering and Temporal Sampling from LoicVDB.\n\n// Julia set distance estimator taken from:\n// https://github.com/JPBotelho/Raymarched-Fractals/blob/master/Content/DistanceFunc.cginc\nvec4 qsqr(vec4 a){return vec4(a.x*a.x-a.y*a.y-a.z*a.z-a.w*a.w, 2.0*a.x*a.y, 2.0*a.x*a.z, 2.0*a.x*a.w);}\nfloat distanceestimator(vec3 pos){\n\tvec4 z = vec4(pos, 0.0);\n    float md2 = 1.0;\n    float mz2 = dot(z, z);\n    for(int i = 0; i < 16; i++){\n        md2 *= 4.0*mz2;\n        z = qsqr(z)+vec4(-0.5, 0.5, 0.25, 0.0);\n        mz2 = dot(z,z);\n        if(mz2 > 4.0) break;}\n    return 0.25*sqrt(mz2/md2)*log(mz2);}\n\n/*float distanceestimator(vec3 rayposition){\n    return distance(rayposition, vec3(0.0))-0.5;\n}*/\n\n/*\nfloat smin(float x, float y, float w){\n    float h = max(w-abs(x-y), 0.0)/w;\n    return min(x, y)-h*h*h*w*(1.0/6.0);\n}\n\nfloat distanceestimator(vec3 rayposition){\n  vec2 circle = vec2(length(rayposition.xy)-0.25, rayposition.z);\n  float torus = length(circle)-0.125;\n  float sphere = distance(rayposition, vec3(0.35, 0.0, 0.0))-0.25;\n  return smin(torus, sphere, 0.1);\n}*/\n\n\nvec4 raymarch(vec3 raydirection, vec3 startingposition){\n    float distancetravelled;\n    float scenedistance;\n    vec3 rayposition = startingposition;\n    for(int i = 0; i < maximummarches; i++){\n        scenedistance = distanceestimator(rayposition);\n        rayposition += raydirection*scenedistance;\n        distancetravelled = distance(startingposition, rayposition);\n        if(scenedistance < collisiondistance){return vec4(rayposition, distancetravelled);}\n        if(distancetravelled > maximumdistance){break;}\n    }\n    return vec4(-1.0);\n}\n\n// Calculate Normals \nvec3 calcNormal(vec3 position){\n    float accuracy = collisiondistance;\n    vec2 normaldirection = vec2(accuracy, 0.0);\n    return normalize(vec3(distanceestimator(position+normaldirection.xyy)-distanceestimator(position-normaldirection.xyy),\n                          distanceestimator(position+normaldirection.yxy)-distanceestimator(position-normaldirection.yxy),\n                          distanceestimator(position+normaldirection.yyx)-distanceestimator(position-normaldirection.yyx)));\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // LoicVDB's Enhanced Temporal Sampling\n    vec4 oldFragColor = vec4(0.0);\n    if(iFrame != 0) oldFragColor = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    fragColor = oldFragColor;\n    if(iMouse.z > 0.0){fragColor = vec4(0.0);}\n\n    // Initalize Random Number Generator\n    INIT_RNG;\n\n    // Normalized Pixel Coordinates, the center of screen being 0.0, 0.0\n    vec2 uv = ((fragCoord+nrand2(0.5, vec2(0.0)))-0.5*iResolution.xy)/max(iResolution.x, iResolution.y);\n\n    // World Coordinates (The rotation can be replaced with a more proper rotation matrix)\n    vec2 rot = vec2(0.0, 0.0);\n    mat3 rotation = mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0);\n    vec3 raydirection = normalize(vec3(camerafov*(uv.x*rotation[0]+uv.y*rotation[1])+rotation[2]));\n    vec2 M = -3.14*(iMouse.xy*2.0/iResolution.xy-1.0);\n    rot3(raydirection, M.x, M.y);\n    vec3 pathposition = cameraposition;\n    rot3(pathposition, M.x, M.y);\n    vec4 raymarched = raymarch(raydirection, pathposition);\n    if(raymarched.w < -0.9){fragColor += vec4(texture(iChannel0, raydirection).rgb, 1.0); return;}\n    vec3 normal = calcNormal(raymarched.xyz);\n    vec3 reflection = reflect(raydirection, normal);\n    fragColor += vec4(texture(iChannel0, reflection).rgb, 1.0);\n    for(int i = 0; i < maxbounces; i++){\n        raymarched = raymarch(reflection, raymarched.xyz+reflection*collisiondistance);\n        if(raymarched.w < -0.9){fragColor += vec4(texture(iChannel0, reflection).rgb, 1.0); return;}\n        normal = calcNormal(raymarched.xyz);\n        reflection = reflect(reflection, normal);\n    }\n\n    fragColor += vec4(texture(iChannel0, reflection).rgb, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ^^^ Switch Between Common, Buffer A, Buffer B, and Image ^^^\n// This contains the other half of Temporal Sampling along with Image Export.\n// Click on the Image icon in the bottom right of the editor\n// to export a Full Precision 32-Bit Floating Point EXR.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec4 texel = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec3 color = (texel.a == 0.0 ? vec3(0.0) : texel.rgb/texel.a);\n    // Output Buffer\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ^^^ Switch Between Common, Buffer A, Buffer B, and Image ^^^\n// This contains settings and common functions like Michael0884's RNG and constants like Pi.\n\n// Change these parameters to your liking!\n\n// Maximum Marches, more allows you to use smaller collision distances.\n#define maximummarches 512\n// Collision Distance, a smaller value requires more marches but is also more precise.\n#define collisiondistance 0.00001\n// Maximum Distance, limit this to the furthest point in your scene to prevent unnecessary marching.\n#define maximumdistance 8.0\n// Position of the virtual Camera.\n#define cameraposition vec3(0.0, 0.0, -4.0)\n// Field of View of the virtual Camera.\n#define camerafov 1.0\n\n#define maxbounces 4\n\n#define rot(a) mat2(cos(a+vec4(0, 11, 33, 0)))\n#define rot3(V, a, b) V.zx *= rot(a), V.zy *= rot(b)\n\n// Pi is used for doing math with Radians where the Trigonometric functions are used, there is no point\n// in changing this. Full precsion floating point numbers can represent pi as 3.14159265, but it can't hurt\n// to add a few more digits in the case Shadertoy supports double precision in the future.\n#define pi 3.141592653589793\n#define twopi 3.141592653589793*2.0\n\n// High-Quality Random Numbers from Michael0884, proper demo: https://www.shadertoy.com/view/wltcRS\nuint ns;\n#define INIT_RNG ns = 185730U*uint(iFrame)+uint(fragCoord.x + fragCoord.y*iResolution.x);\n\n// https://www.pcg-random.org/\nvoid pcg(){\n    uint state = ns*747796405u+2891336453u;\n    uint word = ((state >> ((state >> 28u)+4u))^state)*277803737u;\n    ns = (word >> 22u)^word;\n}\n\nfloat rand(){pcg(); return float(ns)/float(0xffffffffu);}\nvec2 rand2(){return vec2(rand(), rand());}\n//vec3 rand3(){return vec3(rand(), rand(), rand());}\nvec4 rand4(){return vec4(rand(), rand(), rand(), rand());}\n\n// Normalized Random, also from Michael0884 https://www.shadertoy.com/view/WttyWX\n/*float ErfInv(float x){\n   float lnx = log((1.0-x)*(1.0+x));\n   float tt1 = 4.3308+0.5*lnx;\n   float tt2 = 6.8027*lnx;\n   return(sign(x)*sqrt(-tt1+sqrt(tt1*tt1-tt2)));\n}*/\n\n//float nrand(){return ErfInv(rand()*2.0-1.0);}\nvec2 nrand2(float sigma, vec2 mean){vec2 Z = rand2(); return mean+sigma*sqrt(-2.0*log(Z.x))*vec2(cos(twopi*Z.y),sin(twopi*Z.y));}\nvec3 nrand3(float sigma, vec3 mean){vec4 Z = rand4(); return mean+sigma*sqrt(-2.0*log(Z.xxy))*vec3(cos(twopi*Z.z), sin(twopi*Z.z), cos(twopi*Z.w));}\n//vec4 nrand4(float sigma, vec4 mean){vec4 Z = rand4(); return mean+sigma*sqrt(-2.0*log(Z.xxyy))*vec4(cos(twopi*Z.z), sin(twopi*Z.z), cos(twopi*Z.w), sin(twopi*Z.w));}\n\n// Keyboard Controls from yet another one of Michael0884's Shaders https://www.shadertoy.com/view/wttyDX\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_A     = 65;\nconst int KEY_B     = 66;\nconst int KEY_C     = 67;\nconst int KEY_D     = 68;\nconst int KEY_E     = 69;\nconst int KEY_F     = 70;\nconst int KEY_G     = 71;\nconst int KEY_H     = 72;\nconst int KEY_I     = 73;\nconst int KEY_J     = 74;\nconst int KEY_K     = 75;\nconst int KEY_L     = 76;\nconst int KEY_M     = 77;\nconst int KEY_N     = 78;\nconst int KEY_O     = 79;\nconst int KEY_P     = 80;\nconst int KEY_Q     = 81;\nconst int KEY_R     = 82;\nconst int KEY_S     = 83;\nconst int KEY_T     = 84;\nconst int KEY_U     = 85;\nconst int KEY_V     = 86;\nconst int KEY_W     = 87;\nconst int KEY_X     = 88;\nconst int KEY_Y     = 89;\nconst int KEY_Z     = 90;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}