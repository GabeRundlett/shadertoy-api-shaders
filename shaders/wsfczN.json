{
    "Shader": {
        "info": {
            "date": "1584306902",
            "description": "i overshadered this one ",
            "flags": 32,
            "hasliked": 0,
            "id": "wsfczN",
            "likes": 10,
            "name": "Day 87",
            "published": 3,
            "tags": [
                "mdmtjvm"
            ],
            "usePreview": 1,
            "username": "jeyko",
            "viewed": 505
        },
        "renderpass": [
            {
                "code": "// THX NUSAN, whom I learned refract/reflect logic thing and this shader is inspired by his stuff, check him out on ST\n\n// Fork of \"Day 86\" by jeyko. https://shadertoy.com/view/wslcz8\n// 2020-03-15 10:54:20\n\n// Fork of \"Day 85\" by jeyko. https://shadertoy.com/view/WdfczH\n// 2020-03-14 09:43:07\n\n// Fork of \"Day 84\" by jeyko. https://shadertoy.com/view/Wssczn\n// 2020-03-13 10:52:05\n\n// radial blur and chromatic abberation in this buffer\n// thx iq for pallette and hg-sdf for polarMod\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n    \n    //float m = pow(abs(sin(p.z*0.03)),10.);\n\n    // Radial blur\n    float steps = 20.;\n    float scale = 0.00 + pow(length(uv - 0.5)*1.2,2.)*0.;\n    //float chromAb = smoothstep(0.,1.,pow(length(uv - 0.5), 0.3))*1.1;\n    float chromAb = pow(length(uv - 0.5),1.4)*1.1;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.91;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;\n    \n    fragColor = radial*3.; \n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.5);\n    //1fragColor *= 18.;\n    fragColor = max(fragColor, 0.);\n    fragColor = pow(fragColor, vec4(0.4545 + dot(uvn,uvn)*0.1));\n    fragColor *= 1. - dot(uvn,uvn)*1.;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3 glow = vec3(0);\n#define dmin(a, b) a.x < b.x ? a : b\n#define PI acos(-1.)\n#define tau (2.*PI)\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n#define iTime (iTime + 3.6 + 5.)\n#define pal(a,b,c,d,e) ((a) + (b)*sin((c)*(d) + (e)))\n\nvec3 att = vec3(1);\n\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n#define pmod(p,x) mod(p,x) - 0.5*x\nvec4 valueNoise(float t, float sm){\n\treturn mix(texture(iChannel0,vec2(floor(t)/256.)),texture(iChannel0,vec2(floor(t) + 1.)/256.), smoothstep(0.,1.,pow(fract(t), sm)));\n}\n\nfloat iii;\nfloat sdRhombus(vec3 p, vec3 s){\n    p = abs(p) - s;\n    float d = max(p.z, max(p.x, p.y));\n    d = max(d, dot(p.yx + s.yx*0.5, normalize(vec2(1.))));\n    d = max(d, dot(p.yz + s.yz*0.5, normalize(vec2(1.))));\n    \n    return d;\n}\n\nvec2 guv;\nvec3 id;\nfloat speed = 0.5;\n\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e7);\n    \n\tvec3 modD = vec3(3.57);\n    \n    \n    p -= modD*0.5;\n    \n    vec3 q = p;\n    \n    id = floor(q/modD);\n    q = pmod(q,modD);\n    \n    \n    for(int i = 0; i < 9  ; i++){\n    \tiii = pModPolar(q.xz, 5.);\n    \tq.x -= 0.3 + sin(iTime)*0.0;\n        //q.y -= 0.2;\n        q.xy *= rot(0.5*PI);\n    }\n    \n    //q.x -= 0.1;\n    \n    q.x -= 0.38 - valueNoise(iTime +10., 2.).x*0.1;\n    q.y += 0.1 + valueNoise(iTime, 2.).x*0.2;\n    //q.xz *= rot(0.2);\n    q = abs(q);\n    \n    //float da=length(q) - 0.11;\n    float da=sdRhombus(q, vec3(0.12));\n    float db=max(q.x,max(q.z, q.y)) - 0.1;\n    d = dmin(d, vec2(da, 3.));\n    \n    d = dmin(d, vec2(db, 1.));\n    \n    \n    float dg = da;\n    //glow += exp(-d.x*30.)*att*vec3(0.6,0.3,0.1);\n    \n    vec3 gB = 0.02/(0.01 + db*db*db*db*200000.1)*vec3(0.9,0.1 + guv.x*0.2,0.1 );\n    \n    vec3 gA = 0.02/(0.01 + dg*dg*dg*dg*10000.1)*vec3(0.6,0.3,0.1 + guv*0.1);\n    \n    p += modD*0.5;\n    \n    \n    float lp = length(p + sin(p*50. + iTime)*0.5);\n    \n    float lpb = length(p );\n    \n    lpb = abs(lpb);\n    \n    \n    d = dmin(d, vec2(abs(length(p + + sin(p*80. + iTime)*0.0) - 0.12) + 0.006, 18.));\n    \n    \n    //vec3 cc = vec3(0.8,0.6,1.);\n    //vec3 cc = vec3(0.2,0.1,1.);\n    vec3 cc = vec3(0.17,0.14 + length(p)*0.9,1.);\n    \n    \n    cc = clamp(cc, 0., 1.);\n    //cc = pal(1.,1.,vec3(0.8,0.4,0.6),2.5,0.4 + iTime)*0.5;\n    \n    vec3 gC = exp(-lp*lp* (10. - 1.*pow(abs(sin(iTime)), 20.)))*cc*3.;\n    vec3 gD = exp(-lpb*lpb* (20. - 4.*pow(abs(sin(iTime)), 20.)))*cc*3.;\n    \n    float lgB = smoothstep(1.,0.,length(gA)*2.7);\n    \n    //float aaaa\n    \n    glow += gA * vec3(1,0.8 ,1);\n    glow += gB*lgB;\n    //glow += gC;\n    glow += gD;\n    \n    \n\td.x *= 0.9;\n    return d;\n}\nfloat dith;\n\nfloat side;\nint it; // do not do this lol\nvec2 march(vec3 ro, vec3 rd, inout vec3 p, inout float t, inout bool hit){\n\tvec2 d = map(p);\n\n    \n    if(d.x < 0.1)\n        ro += rd*0.15;\n    p = ro; t = 0.; hit = false;\n    for(it = 0; it < 60; it++){\n    \td = map(p);\n        d.x *= dith * side;\n        \n    \t//glow += exp(-d.x*20.);\n        if(d.x < 0.0001){\n        \thit = true;\n            break;\n        }\n        \n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n    \n    return d;\n}\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n    vec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0),dir ));\n\tvec3 up = normalize(cross(dir, right));\n    return normalize(dir + (right*uv.x + up*uv.y)*1.2);\n}\n\nvec3 getNormal(vec3 p){\n\tvec2 t= vec2(0.0001,0);  \n\treturn normalize(map(p).x - vec3(\n    \tmap(p - t.xyy).x,\n    \tmap(p - t.yxy).x,\n    \tmap(p - t.yyx).x\n    ));\n}\n\n#define mx (2.*iMouse.x/iResolution.x)\n#define my (0.6*iMouse.y/iResolution.x)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    //\n\t//uv *= 1. - dot(uv,uv)*0.2;\n    uv.xy *= rot(sin((iTime*0.7 - 3.6))*0.3);\n    uv *= 1. + dot(uv,uv)*1.5;\n    \n    guv = uv;\n    vec3 col = vec3(0);\n\n    dith = mix(0.94,1., texture(iChannel0, 20.*uv*256.).x);\n    vec3 ro = vec3(0);\n    \n    ro.y += sin(iTime*speed)*0.54;\n    ro.y -= 0.2 - my;\n    \n    float n = pow(valueNoise(iTime*1./2., 1.).x, 2.);\n    \n    \n    //ro.y += sin(n);\n    float nb = pow(valueNoise(iTime*1./6., 1.).x, 1.);\n    //float zoom = 1.4 + n*2.4;\n    float zoom = 2. + n*0.4;\n    n *= 1.;\n    ro.xz += vec2(sin( nb*6.14*1.5 + mx),cos( nb*6.14*1.5+ mx))*zoom;\n    \n    vec3 lookAt = vec3(0,0.  + sin(iTime)*0.2,0.);\n    //lookAt.y += -1. + valueNoise(iTime*1./2.).x;\n    vec3 rd = getRd(ro, lookAt, uv);\n    //rd.yz *= rot(iTime);\n    \n    vec3 p; float t = 0.; bool hit;\n    float tA = 0.; side = 1.; float tF;\n    \n    \n    float fres;\n    int ii;\n    for(int i = 0; i < 3   ; i ++){\n    \tvec2 d = march(ro, rd, p, t, hit);\n    \tvec3 n = getNormal(p)*side;\n        \n        vec3 ld = normalize(vec3(1));\n        \n        float diff = max(dot(n, ld), 0.);\n        fres = pow(1. - max(dot(n, -rd), 0.), 5.);\n        \n        #define aa(j) clamp(map(p + n/j).x*j, 0.,1.)\n        \n        if(i == 0){\n            tF = t;\n            ii = it;\n        }\n        tA = max(tA,t);\n        \n        \n        \n        if (hit){\n            \n            if(d.y == 3.){\n                //col *= 20.2;\n                \n                //glow *= (0.8 + fres - diff*0.1)*att ;\n                glow *= vec3(1.)*(0.8 + fres*1.5*vec3(1.,0.5,0.5) - diff*0.6 )*att ;\n\t\t\t\tcol += diff*0.01*pal(1.,1.,vec3(0.8,2.2,2.5),0.5,0.5 + dot(n, -rd) *4. + iTime)*att;\n                break;\n                \n            } else if (d.y == 1.){\n                ro = p + n*0.08;\n                side *= -1.;\n                rd = refract(rd, n,0.99);\n                att *= vec3(0.8,0.8,0.65);\n                //col += spec*0.05*vec3(1,0.1,1)*att;\n                col += min(pow(fres, 2.), 1.)*0.05*pal(1.,1.,vec3(0.8,2.2,2.5),0.5,0.5 + dot(n, -rd) *100. + iTime)*att;\n                \n                //col += fres*0.04*vec3(0.7,0.,0.2)*att;\n                //break;\n            \n            } else {\n            \tbreak;\n            }\n        }\n        \n        if(abs(id.x ) > 1. || abs(id.y ) > 1. || abs(id.z ) > 1.   )\n            break;\n    }\n        \n\t\n    \n    //col = mix(col, vec3(0.4,0.9,0.7)*0.1, pow(smoothstep(0.,1.,tA*0.053), 1.6)*att);\n    \n    //col -= glow*(0.00);\n    \n    col *= 5.5;\n    \n    float fii = float(ii);\n    //vec3 bgc =vec3(0.1 - fii*0.01,0.9 - tF*0.01,0.6+ fii*0.003)*0.19;\n    //vec3 bgc =vec3(2.9 - fii*0.01,0.9 - tF*0.02,0.2 + fii*0.005)*0.05;\n    vec3 bgc =vec3(2.9 - fii*0.01,1.9 - tF*0.02,1.8 - fii*0.01)*0.05;\n    bgc = clamp(bgc, 0.,3.);\n    col = mix(col, bgc, pow(smoothstep(0.,1.,tF*0.043 + length(p)*0.07 - fii*0.01), 1.));    \n\n    col -= fii*0.0001 + fii*0.0001*(smoothstep(0.,1.,length(p)*0.2)); // thx lsdlive\n    \n\t//col = 1. - col;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}