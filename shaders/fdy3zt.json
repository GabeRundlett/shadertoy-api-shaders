{
    "Shader": {
        "info": {
            "date": "1631908794",
            "description": "Waving Flag of Neutrality",
            "flags": 0,
            "hasliked": 0,
            "id": "fdy3zt",
            "likes": 1,
            "name": "Waving Flag of Neutrality",
            "published": 3,
            "tags": [
                "wavingflagofneutrality"
            ],
            "usePreview": 0,
            "username": "zovox",
            "viewed": 201
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n\nfloat saw(float x)\n{\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\n\nvec2 saw(vec2 x) { return vec2(saw(x.x), saw(x.y)); }\nvec3 saw(vec3 x) { return vec3(saw(x.x), saw(x.y), saw(x.z)); }\nvec4 saw(vec4 x) { return vec4(saw(x.x), saw(x.y), saw(x.z), saw(x.w)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy*2.0-1.0)*GR;\n    \n    //uv.xy += sin(length(uv.xy+PI)*E*GR+iTime)/PI/GR/E;\n\n    float outline = (abs(uv.x) > 1. || abs(uv.y) > 1.) ? 0. : 1.;\n\n    float magnitude;\n\n    if(uv.y > 0.) {\n        if(uv.x > 0.)\n            magnitude = 1.0-iTime;\n        else\n            magnitude = iTime;\n    }\n    else\n        magnitude = uv.x * .5 + .5+iTime;\n\n    magnitude = saw(magnitude)*outline;\n\n    // Output to screen\n    fragColor = vec4(vec3(magnitude)+(.5)*(1.-outline),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}