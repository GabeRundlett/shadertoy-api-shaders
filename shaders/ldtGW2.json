{
    "Shader": {
        "info": {
            "date": "1452296856",
            "description": "A cellular automata thing showing the \"Star Wars\" rule. The shader can be easily configured for any 3x3 kernel, Survive/Birth/History type cellular automata rule.",
            "flags": 32,
            "hasliked": 0,
            "id": "ldtGW2",
            "likes": 32,
            "name": "\"Star Wars\" Life Rule",
            "published": 3,
            "tags": [
                "automata",
                "life",
                "cell",
                "conway"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 1576
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0,uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "\n//See: http://psoup.math.wisc.edu/mcell/rullex_gene.html for more rules.\n\n//Rule format (Survive/Birth/History)\n\n//\"Star Wars\" rule 345/2/4\n#define RULE_S (n == 3 || n == 4 || n == 5)\n#define RULE_B (n == 2)\n#define RULE_H 4.0\n\n#define MOUSE_SIZE 16.0\n#define RANDOMIZE true\n\nfloat getCell(vec2 uv)\n{\n    return texture(iChannel0, fract(uv / iResolution.xy)).x;\n}\n\nint getNeighbors(vec2 uv)\n{\n    float n = floor(getCell(uv + vec2( 1, 0)))\n            + floor(getCell(uv + vec2(-1, 0)))\n        \t+ floor(getCell(uv + vec2( 0, 1)))\n        \t+ floor(getCell(uv + vec2( 0,-1)))\n            + floor(getCell(uv + vec2( 1, 1)))\n        \t+ floor(getCell(uv + vec2(-1, 1)))\n        \t+ floor(getCell(uv + vec2( 1,-1)))\n            + floor(getCell(uv + vec2(-1,-1)));\n    \n    return int(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord;\n    \n    float cell = getCell(uv);\n    \n    int n = getNeighbors(uv);\n    \n    if(!(cell == 1.0 && RULE_S))\n    {\n        if(cell == 0.0 && RULE_B)\n        {\n            cell = 1.0;\n        }\n        else\n        {\n            cell = max(0.0, cell - (1.0 / RULE_H));\n        }\n    }\n    \n    if(distance(uv, iMouse.xy) < MOUSE_SIZE || (iFrame == 0 && RANDOMIZE))\n    {\n        cell = floor(texture(iChannel1,fract(uv / iChannelResolution[1].xy)).r + 0.5);\n    }\n    \n    fragColor = vec4(cell,float(n)/8.0,0.0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}