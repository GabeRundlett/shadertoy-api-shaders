{
    "Shader": {
        "info": {
            "date": "1385786422",
            "description": "Simple metaball-style effect using raymarching with polynomial blending between rounded cube primitives.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldSGWR",
            "likes": 29,
            "name": "3D Metacubes",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "jaburns",
            "viewed": 1267
        },
        "renderpass": [
            {
                "code": "const int MAX_ITER = 50;\nconst float MAX_DIST = 30.0;\nconst float EPSILON = 0.01;\n\nvec3 rot (vec3 p, float x, float y, float z)\n{\t\n    vec3 a = normalize (vec3 (sin(2.0+x),sin(2.0+y),sin(2.0+z)));\n    float s = sin (iTime);\n    float c = cos (iTime);\n    float oc = 1.0 - c;\n    mat4 m = mat4 (oc*a.x*a.x + c,      oc*a.x*a.y - a.z*s,  oc*a.z*a.x + a.y*s,  0.0,\n                   oc*a.x*a.y + a.z*s,  oc*a.y*a.y + c,      oc*a.y*a.z - a.x*s,  0.0,\n                   oc*a.z*a.x - a.y*s,  oc*a.y*a.z + a.x*s,  oc*a.z*a.z + c,      0.0,\n                   0.0,                 0.0,                 0.0,                 1.0);\n    return (m*vec4(p,0.0)).xyz;\n}\n\nfloat ball (vec3 p, float x, float y, float z) {\n#if 1\n\tconst float BOX_SIZE = 0.7;\n\tconst float BOX_EDGE = 0.2;\n\treturn length(max(abs(rot(p-vec3(x,y,z),x,y,z))-vec3(BOX_SIZE),0.0))-BOX_EDGE;\n#else\n\treturn length(p-vec3(x,y,z))-1.5;\n#endif\n}\n\n\nfloat ballA (vec3 p) {\n\treturn ball (p, 3.0*sin(0.8*iTime),\n\t\t\t\t\t0.5,\n\t\t\t\t\t0.0);\n}\nfloat ballB (vec3 p) {\n\treturn ball (p, 0.5,\n\t\t\t\t    2.0*sin (0.2*iTime),\n\t\t\t\t\t3.0*cos (1.1*iTime));\n}\nfloat ballC (vec3 p) {\n\treturn ball (p, 0.1,\n\t\t\t\t\t3.0*cos (iTime),\n\t\t\t\t\t0.3);\n}\nfloat ballD (vec3 p) {\n\treturn ball (p, 2.0*cos (0.3*iTime),\n\t\t\t\t \t1.5*sin (2.0*iTime),\n\t\t\t\t   -0.2);\n}\n\nfloat blend (float a, float b) {\n\tconst float k = 1.0;\n    float h = clamp (0.5+0.5*(b-a)/k, 0.0, 1.0);\n    return mix(b,a,h) - k*h*(1.0-h);\n}\nfloat distfunc (vec3 p) {\n    return blend (blend (ballA (p), ballB (p)),\n\t\t          blend (ballC (p), ballD (p)));\n}\n\t\n\nvec3 colorfunc (vec3 p) {\n\tconst vec3 colorA = vec3(0.8,0.1,0.1);\n\tconst vec3 colorB = vec3(0.8,0.1,0.1);\n\tconst vec3 colorC = vec3(0.1,0.8,0.1);\n\tconst vec3 colorD = vec3(0.2,0.2,1.0);\n\treturn max(0.0,2.0-ballA(p))*colorA*0.5\n\t\t + max(0.0,2.0-ballB(p))*colorB*0.5\n\t\t + max(0.0,2.0-ballC(p))*colorC*0.5\n\t\t + max(0.0,2.0-ballD(p))*colorD*0.5;\n}\nvec3 bg (vec3 dir, bool colored) {\n\tvec3 cube = texture (iChannel0, dir).xyz;\n\tif (colored) return cube;\n\tfloat avg = (cube.x+cube.y+cube.z) * 0.333;\n\treturn vec3 (avg);\n}\n\nbool march (vec3 ro, vec3 rd, out vec3 pos)\n{\n\tfloat totalDist = 0.0;\n\tpos = ro;\n\tfloat dist = EPSILON;\n\t\n\tfor (int i = 0; i < MAX_ITER; i++) {\n\t\tif (dist < EPSILON || totalDist > MAX_DIST) break;\n\t\tdist = distfunc(pos);\n\t\ttotalDist += dist;\n\t\tpos += dist * rd;\n\t}\t\t\n\t\n\treturn dist < EPSILON;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 cameraOrigin = vec3 (0.0);\n\tif (iMouse.x < 0.01) {\n\t\tcameraOrigin = vec3(5.0*sin(iTime*0.4), 0.5, 5.0*cos(iTime*0.4));\n\t} else {\n\t\tvec2 mouse = 2.0 * iMouse.xy / iResolution.xy - vec2 (1.0);\n\t\tcameraOrigin = vec3(5.0*sin(3.14*mouse.x), 5.0*mouse.y, 5.0*cos(3.14*mouse.x));\n\t}\n\t\n\tconst vec3 cameraTarget = vec3(0.0,  0.5, 0.0);\n\tconst vec3 upDirection  = vec3(0.0, -1.0, 0.0);\n\t\n\tvec3 cameraDir   = normalize(cameraTarget - cameraOrigin);\t\n\tvec3 cameraRight = normalize(cross(upDirection, cameraOrigin));\n\tvec3 cameraUp    = cross(cameraDir, cameraRight);\n\t\n\tvec2 screenPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n\tscreenPos.x *= iResolution.x / iResolution.y;\n\tvec3 rayDir = normalize(cameraRight * screenPos.x + cameraUp * screenPos.y + cameraDir);\n\t\n\tvec3 pos;\n\tbool hit = march (cameraOrigin, rayDir, pos);\n\t\n\tvec3 color = vec3 (0.0);\n\t\n\tif (hit)\n\t{\t\t\t\n\t\tconst vec2 eps = vec2(0.0, EPSILON);\n\t\t\n\t\tvec3 normal = normalize(vec3(\n\t\t\tdistfunc(pos + eps.yxx) - distfunc(pos - eps.yxx),\n\t\t\tdistfunc(pos + eps.xyx) - distfunc(pos - eps.xyx),\n\t\t\tdistfunc(pos + eps.xxy) - distfunc(pos - eps.xxy)));\n\t\t\n\t\tvec3 newDir = reflect (rayDir, normal);\n\t\t\n\t\tvec3 pos2;\n\t\thit = march (pos+0.01*newDir, newDir, pos2);\n\t\t\n\t\tcolor = bg (newDir, false) * colorfunc (pos);\n\t\t\n\t\tif (hit)\n\t\t{\n\t\t//\tpos = pos2;\n\t\t//\trayDir = newDir;\n\t\t\t\n\t\t//\tnormal = normalize(vec3(\n\t\t//\t\tdistfunc(pos + eps.yxx) - distfunc(pos - eps.yxx),\n\t\t//\t\tdistfunc(pos + eps.xyx) - distfunc(pos - eps.xyx),\n\t\t//\t\tdistfunc(pos + eps.xxy) - distfunc(pos - eps.xxy)));\n\t\t//\tnewDir = reflect (rayDir, normal);\n\t\t\t\n\t\t//\tcolor += bg (newDir, false) * colorfunc (pos);\n\t\t//\tcolor *= 0.5;\n\t\t}\n\t\t\n\t\tcolor *= 2.0*(dot (normal, -rayDir));\n\t}\n\telse {\n\t\tcolor = bg (rayDir, true);\n\t}\n\t\n\tfragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}