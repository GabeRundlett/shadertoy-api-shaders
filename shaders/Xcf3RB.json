{
    "Shader": {
        "info": {
            "date": "1715501883",
            "description": "Given four points, there is a sphere passing through all four. Here we have five points, so five spheres.\n\nUse mouse for rotation & up and down to zoom.",
            "flags": 48,
            "hasliked": 0,
            "id": "Xcf3RB",
            "likes": 15,
            "name": "Spheres Through Five Points",
            "published": 3,
            "tags": [
                "spheres",
                "problem",
                "apollonius"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 153
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Spheres Through Five Points, mla, 2024.\n//\n// Given four points, there is a sphere passing through all four.\n// Here we have five points, so five spheres.\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// \"cross product\" in P3 (projective 3-space)\n// Four 4-vectors are linearly dependent (ie. if they represent\n// concurrent planes or coplanar points) if their 4x4 determinant\n// is zero. So, given three planes, a fourth, l, is concurrent if it\n// passes through p, the point of intersection of the three, ie. \n// if l.p = 0, but this is true iff the 4x4 determinant is zero, so\n// expanding the determinant gives the coordinates of p.\nvec4 cross3(vec4 p, vec4 q, vec4 r) {\n  mat4x3 m = transpose(mat3x4(p,q,r));\n#if 0\n  // det(a,b,c) = dot(a,cross(b,c)) so there is scope\n  // for optimization here\n  return vec4(determinant(mat3(m[1],m[2],m[3])),\n              -determinant(mat3(m[2],m[3],m[0])),\n              determinant(mat3(m[3],m[0],m[1])),\n              -determinant(mat3(m[0],m[1],m[2])));\n#else\n  // For example:\n  vec3 m01 = cross(m[0],m[1]);\n  vec3 m23 = cross(m[2],m[3]);\n  return vec4(dot(m[1],m23),-dot(m[0],m23),\n              dot(m[3],m01),-dot(m[2],m01));\n#endif\n}\n\nvec4 bisect(vec3 p) {\n  return vec4(2.0*p,-dot(p,p));\n}\n\n// returns xyz = center, w = radius\nvec4 sphereFromFourPoints0(vec3 a, vec3 b, vec3 c, vec3 d) {\n  // rebase with d as origin\n  a -= d; b -= d; c -= d;\n  vec4 s = cross3(bisect(a),bisect(b),bisect(c));\n  vec3 centre = s.xyz/s.w;\n  float r = length(centre);\n  return vec4(centre+d,r);\n}\n\n// Invert a 3x3 system - could optimize eg. with Cramer.\nvec4 sphereFromFourPoints(vec3 a, vec3 b, vec3 c, vec3 d) {\n  // rebase with d as origin\n  a -= d; b -= d; c -= d;\n  float a2 = dot(a,a), b2 = dot(b,b), c2 = dot(c,c);\n  float ab = dot(a,b), bc = dot(b,c), ac = dot(a,c);\n  vec3 p = 0.5*inverse(mat3(a2,ab,ac,ab,b2,bc,ac,bc,c2))*vec3(a2,b2,c2);\n  vec3 t = mat3(a,b,c)*p;\n  return vec4(t+d,length(t));\n}\n\nconst float PRADIUS = 0.1;\nconst int N = 5;\nvec3 points[N];\nvec4 spheres[N];\n\nvec4 getsphere(int i) {\n  assert(i >= 0);\n  assert(i < 2*N);\n  if (i < N) return vec4(points[i],PRADIUS);\n  else return spheres[i-N];\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = -(2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = -(2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  if (!key(CHAR_R)) {\n    //p.yz = rotate(p.yz,iTime * 0.125);\n    p.zx = rotate(p.zx,iTime * 0.2);\n  }\n  return p;\n}\n\nvec3 skycolor(vec3 r) {\n  //return vec3(1,1,0.5);\n  //return vec3(0.5,0.5,1);\n  //return pow(abs(r),vec3(2.0));\n  //return abs(transform(r));\n  return texture(iChannel0,r).rgb;\n}\n\nvec3 getcol(int i) {\n  if (i == 0) return vec3(1,0.75,0.75);\n  if (i == 1) return vec3(0.75,1,0.75);\n  if (i == 2) return vec3(0.75,0.75,1);\n  if (i == 3) return vec3(1,1,0.75);\n  if (i == 4) return vec3(0.75,1,1);\n  return vec3(1);\n}\n\nconst int MAXSTEPS = 20;\nfloat ambient = 0.2;\nfloat diffuse = 0.4;\nfloat specular = 0.6;\nfloat specularpow = 10.0;\nvec3 specularcolor = vec3(1);\n\nvec3 raycolor(vec3 p, vec3 r) {\n  vec3 att = vec3(1);\n  vec3 light = normalize(vec3(1,2,3));\n  vec3 col = vec3(0);\n  for (int step = 0; step < MAXSTEPS; step++) {\n    float t = 1e8;\n    int hitsphere = -1;\n    for (int i = 0; i < 2*N; i++) {\n      vec2 tt;\n      vec4 s = getsphere(i);\n      if (intersectsphere(p,r,s,tt)) {\n        if (tt[0] > 0.0) {\n          if (tt[0] < t) {\n            t = tt[0];\n            hitsphere = i;\n          }\n        } else if (i >= N && tt[1] > 0.0)\n          if (tt[1] < t) {\n            t = tt[1];\n            hitsphere = i;\n          }\n      }\n    }\n    if (hitsphere == -1) {\n      col += att*skycolor(r);\n      return col;\n    }\n    p += t*r;\n    vec3 n = normalize(p-getsphere(hitsphere).xyz); // Normal is just direction from sphere centre\n    if (hitsphere >= N) {\n      // Need to add some colour here\n      float s = pow(max(0.0,dot(reflect(light,n),vec3(r))),specularpow);\n      vec3 scol = getcol(hitsphere-N);\n      col += att*specular*s*specularcolor;\n      col += att*0.1*scol*(ambient+diffuse*max(0.0,dot(light,n)));\n      //return att*col;\n      att *= 0.8*scol;\n    } else {\n      //att *= 0.9;\n      r = reflect(r,n);\n    }\n    p += 1e-4*r; // try not to get trapped\n  }\n  return vec3(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  float AA = 2.0;\n  points[0] = vec3(sin(0.5*iTime),sin(0.309*iTime),sin(0.1414*iTime));\n  points[1] = vec3(1,1,1);\n  points[2] = vec3(1,-1,-1);\n  points[3] = vec3(-1,1,-1);\n  points[4] = vec3(-1,-1,1);\n#if 0\n  points[0] = vec3(1,0,1);\n  points[1] = vec3(0,0,0);\n  points[2] = vec3(0,1,0);\n  points[3] = vec3(expi(0.5*iTime)*vec2(1.1,1.5),0);\n  points[4] = vec3(0,expi(0.618*iTime+0.1)*vec2(1.6,1.2));\n#endif\n  for (int i = 0; i < N; i++) {\n    spheres[i] = sphereFromFourPoints(points[i],points[(i+1)%N],\n                                      points[(i+2)%N],points[(i+3)%N]);\n  }\n  float camera = 8.0*exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n  vec3 col;\n  for (float i = 0.0; i < AA; i++) {\n    for (float j = 0.0; j < AA; j++) {\n      vec3 p = vec3(0,0,camera);\n      p = transform(p);\n      vec2 uv = (2.0*(fragCoord+vec2(i,j)/AA)-iResolution.xy)/iResolution.y;\n      vec3 r = vec3(uv,-2);\n      r = transform(r);\n      r = normalize(r);\n      col += raycolor(p,r);\n    }\n  }\n  col /= AA*AA;\n  //assert(max(col.x,max(col.y,col.z)) <= 1.0);\n  col = clamp(col,0.0,1.0);\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n// Common\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI = 3.14159;\nbool alert = false;\nvoid assert(bool b) { if (!b) alert = true; }\n#define CHECK true\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )\n\nvec2 expi(float t) {\n  return vec2(cos(t),sin(t));\n}\n\nvec2 rotate(vec2 p, float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\n// Use this to check our work\nbool eq(float x, float y) {\n  return abs(x-y) < 1e-5;\n}\n\n// GLM compatibility\n#define xyz(a) (a.xyz)\n#define zxy(a) (a.zxy)\n#define yzx(a) (a.yzx)\n#define xy(a) (a.xy)\n#define yz(a) (a.yz)\n#define zx(a) (a.zx)\n\nbool intersectsphere(vec3 p, vec3 r, vec4 sphere, out vec2 t) {\n  vec3 centre = sphere.xyz;\n  float radius = sphere.w;\n  p -= centre; // Centre on sphere\n  float r2 = radius*radius;\n  // Want dot(p+t*r,p+t*r) = r2\n  // ie. p.p - r2 + 2tp.r + t^2 = 0\n  float k = -dot(p,r);\n  p += k*r; // Advance p so p.r = 0\n  float C = r2-dot(p,p);\n  if (C < 0.0) return false;\n  float D = sqrt(C);\n  t = vec2(-D,D)+k;\n  return true;\n}\n\n// const int KEY_SHIFT = 16;\nconst int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\n// const int KEY_LEFT = 37;\n// const int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_0 = 48;\n\n// const int CHAR_A = 65;\n// const int CHAR_B = 66;\n// const int CHAR_C = 67;\n// const int CHAR_D = 68;\n// const int CHAR_E = 69;\n// const int CHAR_F = 70;\n// const int CHAR_G = 71;\n// const int CHAR_H = 72;\n// const int CHAR_I = 73;\n// const int CHAR_J = 74;\n// const int CHAR_K = 75;\n// const int CHAR_L = 76;\n// const int CHAR_M = 77;\n// const int CHAR_N = 78;\n// const int CHAR_O = 79;\n// const int CHAR_P = 80;\n// const int CHAR_Q = 81;\nconst int CHAR_R = 82;\n// const int CHAR_S = 83;\n// const int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\n// const int CHAR_W = 87;\n// const int CHAR_X = 88;\n// const int CHAR_Y = 89;\n// const int CHAR_Z = 90;",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 t, vec2 uv) {\n  int i = int(uv.x); // Column number\n  int j = int(uv.y); // Row\n  if (iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (j == 0) {\n    // First row - key count\n    // Do key repeat here as well?\n    float w1 = keystate(i,0).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      // Don't count key changes when ALT pressed\n      if (keystate(KEY_ALT,0).x == 0.0 && w1 != 0.0) {\n        t.x++; t.y = iTime;\n      }\n    }\n    // Key repeat - only when shader is running!\n    // Should have longer pause after first key press.\n    if (t.w != 0.0 && keystate(KEY_ALT,0).x == 0.0 && iTime-t.y > 0.25) {\n      t.x++; t.y = iTime;\n    }\n  }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}