{
    "Shader": {
        "info": {
            "date": "1543177213",
            "description": "it lacked rainbow colours",
            "flags": 0,
            "hasliked": 0,
            "id": "XlVBRK",
            "likes": 13,
            "name": "Atari Rainbow 3D",
            "published": 3,
            "tags": [
                "raymarch",
                "logo",
                "rainbow",
                "atari",
                "extrude"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 700
        },
        "renderpass": [
            {
                "code": "// Atari logo - Raymarched by Del 25/11/2018\n\nfloat atari(vec2 p)\n{\n    p*=0.15;\n    vec2 b = vec2(0.08,0.5);\n    vec2 v1 = abs(p)-b;\n    float d1 = length(max(v1,vec2(0))) + min(max(v1.x,v1.y),0.0);\n\n    p.x = -abs(p.x);\n\tp+=vec2(0.25,0.0);\n\n    float c = smoothstep(0.0, 1.0, pow(clamp(-p.y, 0.0, 1.0), 1.2));\n    p.x +=  c;\n    b.x += c*0.1;\n    v1 = abs(p)-b;\n    float d2 = length(max(v1,vec2(0))) + min(max(v1.x,v1.y),0.0);\n    return min(d1,d2)*8.0;\n}\n\n\nmat2 rotate(float a)\n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n#define\tTAU 6.28318\n\n\nfloat map(vec3 p)\n{\n    float time2 = iTime-0.25;\n    float twist = 0.5+sin(fract(time2*0.55)*TAU)*0.5;\n    twist *= p.y * 0.125;\n    p.xz *= rotate(twist+fract(time2*0.2)*TAU);\n    \n\tfloat dist = atari(p.xy);\n    \n    float dep = 0.5;\n    vec2 e = vec2( dist, abs(p.z) - dep );\n    dist = min(max(e.x,e.y),0.0) + length(max(e,0.0));\n    dist -= 0.225;\t\t// rounding\n    return dist;\n}\n\n\n// Tetrahedral normal, to save a couple of \"map\" calls. Courtesy of IQ.\nvec3 normal( in vec3 p )\n{\n    // Note the slightly increased sampling distance, to alleviate\n    // artifacts due to hit point inaccuracies.\n    vec2 e = vec2(0.0025, -0.0025); \n    return normalize(\n        e.xyy * map(p + e.xyy) + \n        e.yyx * map(p + e.yyx) + \n        e.yxy * map(p + e.yxy) + \n        e.xxx * map(p + e.xxx));\n}\n\n// Smooth HSV to RGB conversion \nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\nvec3 render(vec2 uv)\n{\n    float time1 = iTime-1.15;\n\tvec3 ro = vec3(0.0, 0.0, -13.0);\n\tvec3 rd = normalize(vec3(uv, 1.95));\n\tvec3 p = vec3(0.0);\n\tfloat t = 0.;\n\tfor (int i = 0; i < 240; i++)\n    {\n\t\tp = ro + rd * t;\n\t\tfloat d = map(p);\n\t\tif (d < .001 || t > 30.) break;\n\t\tt += d *0.5;\n\t}\n    \n    vec3 c = vec3(0.35,0.35,0.45);\n    c*= 1.2-abs(uv.y);\n    \n    if (t<30.0)\n    {\n  \t   \tvec3 lightDir = normalize(vec3(10.0, 13.5, -13.0));\n\n        vec3 nor = normal(p);\n\n        float dif = max(dot(nor, lightDir), 0.0);\n        \n        float h = iTime*0.25-p.y*0.09;\n        vec3 c1 = hsv2rgb_smooth(vec3(h,1.0,1.3));\n        \n        float tf = 0.1;\n        c1 += reflect(vec3(p.x*tf, p.y*tf, 0.0), nor);\n        c1 *= dif;\n        \n        \n        vec3 ref = reflect(rd, nor);\n        float spe = max(dot(ref, lightDir), 0.0);\n        vec3 spec = vec3(2.0) * pow(spe, 16.);\n        c1 = c1 + spec;\n\t\tvec3 c2 = c + spec;\t\t\t// ghostly background + just spec\n\n \t\tfloat bl = sin(fract(time1/12.0) * TAU);\n        bl = smoothstep(0.0, 1.0, bl);\n        c = mix(c1,c2,bl);\n        \n    }\n\n    c *= 1.0 - 0.3*length(uv);\n\treturn c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n\tvec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec3 col = render(uv);\n\tfragColor = vec4(col, 1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}