{
    "Shader": {
        "info": {
            "date": "1574790192",
            "description": "n64 logo",
            "flags": 32,
            "hasliked": 0,
            "id": "wdySRt",
            "likes": 4,
            "name": "n64 logo",
            "published": 3,
            "tags": [
                "n64"
            ],
            "usePreview": 0,
            "username": "1337_shader",
            "viewed": 474
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    vec4 data = texture( iChannel0, p );\n    fragColor = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define MAX_STEPS 100.\n#define AA 1\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define time iTime\n#define seil(x) (ceil(x)-x)\n\n\n\n\n\n  \n\nvec4 er;\n\n\n\n\n\n   \n\n\nvec2 GetDist(in vec3 p ) {\n    \n     \n    \n     float se = 1.5;\n    \n   p /= se;\n    \n    vec3 q = p-vec3(0,1,0); \n \n   \n     // q.zy *= Rot(radians(90.));\n    q.zx *= Rot(radians(45.*iTime));\n    \n    \n   float nx = q.y;\n   q.y = q.x;\n    q.x = nx;\n    q.xy *= Rot(radians(-90.));\n\n  \n\n    \n   \n \n\n     vec4 orb;\n\n    float rep = 3.;\n\n  \n  \n    float d = re(q)*se;\n    float g = ge(q)*se;\n    float ce = oe(q)*se;\n    float ge = be(q)*se;\n    \n                             \n                             \n                             \n                             \n  float  de = min(g,min(d,min(ce,ge)));\n    \n    \n                           \n                             \nfloat index = mix(0.4,.0,step(0.001,d ));\n    index = mix(index,.6,1.-step(0.001,g));\n    index = mix(index,.3,1.-step(0.001,ce));\n    index = mix(index,.2,1.-step(0.001,ge));\n  \n    return vec2(de,index);\n  \n}\n \n\n\n\n\n\n\n\n\nfloat iter;\nvec2 RayMarch(in vec3 ro, in vec3 rd) {\n  float dO=0.;\n    float i;\n    float h;\n    vec2 dS;\n    \n   \n    for( iter=0.; iter<float(MAX_STEPS); iter++) {\n       vec3  p = ro + rd*dO;\n         dS = GetDist(p);\n        dO += dS.x;\n       \n\n        \n        if(dO>=MAX_DIST || abs(dS.x)<=SURF_DIST)  break;\n\n    }\n   \n\n    if(dO > MAX_STEPS){dS.y = -1.;}\n \n    \n    return vec2(clamp(dO,0.,MAX_STEPS),dS.y);\n}\n\n\n\n\n\n\n\n\n\n\n\n//---------------------------//\n  vec3 getcol(vec3 p, vec2 d1){\n                  vec3 col = vec3(0.0);\n        float d = d1.x;\n\n  \n     col = (1.-vec3(35./255.,64./255.,153./255.))/2.;\n      \n        \n      col;\n    \n      \n      if(d1.y == 0.4){ col = vec3(.996,.125,.082);}\n        if(d1.y == 0.6){ col = vec3(.008,.133,.663);}\n      if(d1.y == 0.3){col = vec3(1.,.753,.004);}\n      if(d1.y == .2){col = vec3(0.027,.576,.181);}\n      \n      \n  \n      \n      \n      \n    \n      \n        return vec3(col);\n    }\n\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n\nvec3 render(vec2 fragcoord,    vec2 u)\n{\n /*--------------------*/   \n     vec2 uv = fragcoord;\n\n  float time = iTime;\n    \n    vec3 ro = vec3(0, 4, -2.);\n    \n    \n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n  \n    \n    vec3 rd = R(uv, ro, vec3(0,1,0), 1.);\n\n   \n     float b = rd.y;\n     vec3 rd2 = rd;\n    \n    \n   \n\n \n vec4 g;\n\n   ///ro.x += iTime;\n // time = iTime;\n    /*------------------------------------------------------*/\nvec3 sky;\n \n \n   sky = vec3(71./255., 56./255., 207./255.);\n  \n    \n    \n   vec2 d1 = RayMarch(ro, rd );\n    float d = d1.x;\n    \n        float glow = iter;\n    \n\n    \n\n    \n   sky  = mix(sky,sky*0.7,glow/MAX_STEPS);\n  \n    \n\n    \n \n    /*---------------------*/\n  \n \n  \n  \t vec3 p = ro + d  *rd;  \n    \n     \n  \n    \n    \n    vec3 col =  getcol( p, d1); \n    \n  \n    vec3 ere = col;\n\n\n\n      \n   vec3 rgb;\n\n\n  \n \n \n\n  \n  \n    \n    \n    \n    \n    rgb = col;\n    \n     \n    \n  \n\n\n\n  \n   \n    \n rgb = rgb;\n    \n   \n\n \n    \n    \n\n\n\n    rgb = vec3(rgb);\n    \n    if  ( (d/MAX_STEPS) >=1. ) rgb = vec3(1.);\n    \n    \n    \n    \n return vec3(rgb); \n            \n   \n\n        }\n\n    \n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p;\n    vec2 u = fragCoord/iResolution.xy;  \n    vec3 tot = vec3(0.0);\n    #if AA>1\n    for( int jj=0; jj<AA; jj++ )\n    for( int ii=0; ii<AA; ii++ )\n    #else\n    int ii = AA, jj = AA;\n    #endif\n    {\n        vec2 q = fragCoord.xy+vec2(float(ii),float(jj))/float(AA);\n         p = (2.0*q-iResolution.xy)/iResolution.y;\n\n       \n      \n\n        tot += render( p, u);\n    }\n    \n    tot = tot/float(AA*AA);\n    //vec3 e =  render(fragCoord/iResolution.xy );\n\tfragColor = vec4( vec3(tot), 1. );\t\n\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define pi (acos(0.)*2.)\n\n\n    \n    \nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\n\n\n\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*((1.)-h);\n}\n    \n\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\nfloat qu( in vec3 v1, in vec3 v2, in vec3 v3, in vec3 v4, in vec3 p )\n{\n    #if 1\n    // handle ill formed quads\n    if( dot( cross( v2-v1, v4-v1 ), cross( v4-v3, v2-v3 )) < 0.0 )\n    {\n        vec3 tmp = v3;\n        v3 = v4;\n        v4 = tmp;\n    }\n    #endif\n\n    \n    vec3 v21 = v2 - v1; vec3 p1 = p - v1;\n    vec3 v32 = v3 - v2; vec3 p2 = p - v2;\n    vec3 v43 = v4 - v3; vec3 p3 = p - v3;\n    vec3 v14 = v1 - v4; vec3 p4 = p - v4;\n    vec3 nor = cross( v21, v14 );\n\n    return sqrt( (sign(dot(cross(v21,nor),p1)) + \n                  sign(dot(cross(v32,nor),p2)) + \n                  sign(dot(cross(v43,nor),p3)) + \n                  sign(dot(cross(v14,nor),p4))<3.0) \n                  ?\n                  min( min( dot2(v21*clamp(dot(v21,p1)/dot2(v21),0.0,1.0)-p1), \n                            dot2(v32*clamp(dot(v32,p2)/dot2(v32),0.0,1.0)-p2) ), \n                       min( dot2(v43*clamp(dot(v43,p3)/dot2(v43),0.0,1.0)-p3),\n                            dot2(v14*clamp(dot(v14,p4)/dot2(v14),0.0,1.0)-p4) ))\n                  :\n                  dot(nor,p1)*dot(nor,p1)/dot2(nor) );\n}\n\nfloat re(vec3 p)\n{\n\n\n\nvec3 red[] = vec3[](vec3(0.248853,0.550000,-0.251127),\nvec3(0.247488,0.550000,-0.551115),\nvec3(-0.251127,-0.000000,-0.248853),\nvec3(-0.252492,-0.000000,-0.548841),\nvec3(-0.248853,0.550000,0.251127),\nvec3(-0.247488,0.550000,0.551115),\nvec3(0.251127,0.000000,0.248852),\nvec3(0.252492,0.000000,0.548840),\nvec3(0.548840,-0.550000,-0.252492),\nvec3(0.248853,-0.550000,-0.251127),\nvec3(0.551115,0.000000,0.247488),\nvec3(0.251127,0.000000,0.248852),\nvec3(-0.548840,-0.550000,0.252492),\nvec3(-0.248853,-0.550000,0.251127),\nvec3(-0.551115,-0.000000,-0.247488),\nvec3(-0.251127,-0.000000,-0.248853));\nfloat de;\nfor(int i = 0; i < 16 ;i += 4)\n{\n\nvec3 a = red[i];\nvec3 b = red[i+1];\nvec3 c = red[i+2];\nvec3 d = red[i+3];\n\nfloat da = qu(a,b,c,d,p);\nif(i ==0){de = da;}\nelse{de = min(de,da);}\n\n}\n\n\nreturn de;\n}\n\n\n\nfloat ge(vec3 p)\n{\n\n\n\n\n    vec3 gre[] =vec3[](vec3(-0.252492,0.550000,-0.548841),\nvec3(-0.552480,0.550000,-0.547476),\nvec3(-0.252492,-0.000000,-0.548841),\nvec3(-0.552480,-0.000000,-0.547476),\n\n/*vec3(-0.252492,-0.550000,-0.548841),\nvec3(0.247488,0.550000,-0.551115),\nvec3(-0.252492,-0.000000,-0.548841),\nvec3(0.247488,0.000000,-0.551115),*/\n\nvec3(0.247488,0.000000,-0.551115),\nvec3(0.247488,0.550000,-0.551115),\nvec3(-0.252492,-0.000000,-0.548841),\nvec3(-0.252492,-0.550000,-0.548841),\n\nvec3(0.547476,0.550000,-0.552480),\nvec3(0.247488,0.550000,-0.551115),\nvec3(0.247488,0.000000,-0.551115),\nvec3(0.547476,0.000000,-0.552480),\n\nvec3(0.247488,-0.550000,-0.551115),\nvec3(0.547476,-0.550000,-0.552480),\nvec3(0.247488,0.000000,-0.551115),\nvec3(0.547476,0.000000,-0.552480),\n\nvec3(-0.552480,-0.550000,-0.547476),\nvec3(-0.252492,-0.550000,-0.548841),\nvec3(-0.252492,-0.000000,-0.548841),\nvec3(-0.552480,-0.000000,-0.547476),\n\nvec3(-0.251127,-0.550000,-0.248853),\nvec3(-0.551115,-0.550000,-0.247488),\nvec3(-0.251127,-0.000000,-0.248853),\nvec3(-0.551115,-0.000000,-0.247488),\n\n/*vec3(-0.251127,-0.550000,-0.248853),\nvec3(0.248853,0.550000,-0.251127),\nvec3(-0.251127,-0.000000,-0.248853),\nvec3(0.248853,0.000000,-0.251127),*/\n\nvec3(0.248853,0.000000,-0.251127),\nvec3(0.248853,0.550000,-0.251127),\nvec3(-0.251127,-0.000000,-0.248853),\nvec3(-0.251127,-0.550000,-0.248853),\n\nvec3(0.248853,0.550000,-0.251127),\nvec3(0.548840,0.550000,-0.252492),\nvec3(0.248853,0.000000,-0.251127),\nvec3(0.548840,0.000000,-0.252492),\n\nvec3(0.551115,0.550000,0.247488),\nvec3(0.251127,0.550000,0.248852),\nvec3(0.248853,0.000000,-0.251127),\nvec3(0.548840,0.000000,-0.252492),\n\nvec3(-0.551115,0.550000,-0.247488),\nvec3(-0.251127,0.550000,-0.248853),\nvec3(-0.248853,-0.000000,0.251127),\nvec3(-0.548840,-0.000000,0.252492),\n\nvec3(-0.248853,0.550000,0.251127),\nvec3(-0.548840,0.550000,0.252492),\nvec3(-0.248853,-0.000000,0.251127),\nvec3(-0.548840,-0.000000,0.252492),\n\n/*vec3(0.251127,-0.550000,0.248852),\nvec3(-0.248853,0.550000,0.251127),\nvec3(0.251127,0.000000,0.248852),\nvec3(-0.248853,-0.000000,0.251127),*/\n\nvec3(-0.248853,-0.000000,0.251127),\nvec3(-0.248853,0.550000,0.251127),\nvec3(0.251127,0.000000,0.248852),\n\nvec3(0.251127,-0.550000,0.248852),\n\nvec3(0.251127,-0.550000,0.248852),\nvec3(0.551115,-0.550000,0.247488),\nvec3(0.251127,0.000000,0.248852),\nvec3(0.551115,0.000000,0.247488),\n\nvec3(0.252492,0.550000,0.548840),\nvec3(0.552480,0.550000,0.547476),\nvec3(0.252492,0.000000,0.548840),\nvec3(0.552480,0.000000,0.547476),\n\nvec3(0.552480,-0.550000,0.547476),\nvec3(0.252492,-0.550000,0.548840),\nvec3(0.252492,0.000000,0.548840),\nvec3(0.552480,0.000000,0.547476),\n\n/*vec3(0.252492,-0.550000,0.548840),\nvec3(-0.247488,0.550000,0.551115),\nvec3(0.252492,0.000000,0.548840),\nvec3(-0.247488,-0.000000,0.551115),*/\n\nvec3(-0.247488,-0.000000,0.551115),\nvec3(-0.247488,0.550000,0.551115),\nvec3(0.252492,0.000000,0.548840),\nvec3(0.252492,-0.550000,0.548840),\n\nvec3(-0.547476,0.550000,0.552479),\nvec3(-0.247488,0.550000,0.551115),\nvec3(-0.247488,-0.000000,0.551115),\nvec3(-0.547476,-0.000000,0.552479),\n\nvec3(-0.247488,-0.550000,0.551115),\nvec3(-0.547476,-0.550000,0.552479),\nvec3(-0.247488,-0.000000,0.551115),\nvec3(-0.547476,-0.000000,0.552479));\n\n\nfloat de;\nfor(int i = 0; i < 72;i += 4)\n{\n\nvec3 a = gre[i];\nvec3 b = gre[i+1];\nvec3 c = gre[i+2];\nvec3 d = gre[i+3];\n\nfloat da = qu(a,b,c,d,p);\nif(i ==0){de = da;}\nelse{de = min(de,da);}\n\n}\n\n\nreturn de;\n}\n\nfloat be(vec3 p)\n{\n\n/*\n={ vec3(0.551115,0.550000,0.247488),\nvec3(0.552480,0.550000,0.547476),\nvec3(0.551115,0.000000,0.247488),\nvec3(0.552480,0.000000,0.547476),*/\n\n\nvec3 blue[] =vec3[]( vec3(0.551115,0.550000,0.247488),\nvec3(0.552480,0.550000,0.547476),\nvec3(0.551115,0.000000,0.247488),\nvec3(0.552480,0.000000,0.547476),\n\n\n\nvec3(0.552480,-0.550000,0.547476),\nvec3(0.551115,-0.550000,0.247488),\nvec3(0.551115,0.000000,0.247488),\nvec3(0.552480,0.000000,0.547476),\n\n/*vec3(0.551115,0.550000,0.247488),\nvec3(0.548840,-0.550000,-0.252492),\nvec3(0.548840,0.000000,-0.252492),\nvec3(0.551115,0.000000,0.247488),*/\n\nvec3(0.551115,0.000000,0.247488),\nvec3(0.548840,-0.550000,-0.252492),\nvec3(0.548840,0.000000,-0.252492),\n\nvec3(0.551115,0.550000,0.247488),\n\nvec3(0.547476,0.550000,-0.552480),\nvec3(0.548840,0.550000,-0.252492),\nvec3(0.548840,0.000000,-0.252492),\nvec3(0.547476,0.000000,-0.552480),\n\nvec3(0.548840,-0.550000,-0.252492),\nvec3(0.547476,-0.550000,-0.552480),\nvec3(0.548840,0.000000,-0.252492),\nvec3(0.547476,0.000000,-0.552480),\n\nvec3(-0.251127,-0.550000,-0.248853),\nvec3(-0.252492,-0.550000,-0.548841),\nvec3(0.248853,0.000000,-0.251127),\nvec3(0.247488,0.000000,-0.551115),\n\nvec3(0.247488,-0.550000,-0.551115),\nvec3(0.248853,-0.550000,-0.251127),\nvec3(0.248853,0.000000,-0.251127),\nvec3(0.247488,0.000000,-0.551115),\n\nvec3(-0.551115,0.550000,-0.247488),\nvec3(-0.552480,0.550000,-0.547476),\nvec3(-0.551115,-0.000000,-0.247488),\nvec3(-0.552480,-0.000000,-0.547476),\n/*vec3(-0.551115,0.550000,-0.247488),\nvec3(-0.548840,-0.550000,0.252492),\nvec3(-0.551115,-0.000000,-0.247488),\nvec3(-0.548840,-0.000000,0.252492),*/\n\nvec3(-0.548840,-0.000000,0.252492),\nvec3(-0.548840,-0.550000,0.252492),\nvec3(-0.551115,-0.000000,-0.247488),\nvec3(-0.551115,0.550000,-0.247488),\n\nvec3(-0.548840,-0.550000,0.252492),\nvec3(-0.547476,-0.550000,0.552479),\nvec3(-0.548840,-0.000000,0.252492),\nvec3(-0.547476,0.000000,0.552479),\n\nvec3(-0.547476,0.550000,0.552479),\nvec3(-0.548840,0.550000,0.252492),\nvec3(-0.548840,-0.000000,0.252492),\nvec3(-0.547476,-0.000000,0.552479),\n\nvec3(-0.552480,-0.550000,-0.547476),\nvec3(-0.551115,-0.550000,-0.247488),\nvec3(-0.551115,-0.000000,-0.247488),\nvec3(-0.552480,-0.000000,-0.547476),\n\nvec3(0.251127,-0.550000,0.248852),\nvec3(0.252492,-0.550000,0.548840),\nvec3(-0.248853,-0.000000,0.251127),\nvec3(-0.247488,-0.000000,0.551115),\n\nvec3(0.252492,0.550000,0.548840),\nvec3(0.251127,0.550000,0.248852),\nvec3(0.251127,0.000000,0.248852),\nvec3(0.252492,0.000000,0.548840),\n\n/*vec3(0.251127,0.550000,0.248852),\nvec3(0.248853,-0.550000,-0.251127),\nvec3(0.251127,0.000000,0.248852),\nvec3(0.248853,0.000000,-0.251127),*/\n\nvec3(0.248853,0.000000,-0.251127),\nvec3(0.248853,-0.550000,-0.251127),\nvec3(0.251127,0.000000,0.248852),\n\nvec3(0.251127,0.550000,0.248852),\n\nvec3(-0.247488,-0.550000,0.551115),\nvec3(-0.248853,-0.550000,0.251127),\nvec3(-0.248853,-0.000000,0.251127),\nvec3(-0.247488,-0.000000,0.551115),\n\n/*vec3(-0.251127,0.550000,-0.248853),\nvec3(-0.248853,-0.550000,0.251127),\nvec3(-0.251127,-0.000000,-0.248853),\nvec3(-0.248853,-0.000000,0.251127),*/\n\nvec3(-0.248853,-0.000000,0.251127),\nvec3(-0.248853,-0.550000,0.251127),\nvec3(-0.251127,-0.000000,-0.248853),\n\nvec3(-0.251127,0.550000,-0.248853),\n\nvec3(-0.252492,0.550000,-0.548841),\nvec3(-0.251127,0.550000,-0.248853),\nvec3(-0.251127,-0.000000,-0.248853),\nvec3(-0.252492,-0.000000,-0.548841));\n\n\nfloat de;\nfor(int i = 0; i < 72;i += 4)\n{\n\n\nvec3 a = blue[i];\nvec3 b = blue[i+1];\nvec3 c = blue[i+2];\nvec3 d = blue[i+3];\n\nfloat da = qu(a,b,c,d,p);\nif(i ==0){de = da;}\nelse{de = min(de,da);}\n\n}\n\nreturn de;\n}\n\n\nfloat oe(vec3 p)\n{\n\n\n/*\n{vec3(0.251127,-0.550000,0.248852),\nvec3(0.552480,-0.550000,0.547476),\nvec3(0.252492,-0.550000,0.548840),\nvec3(0.551115,-0.550000,0.247488), \n*/\nvec3 ore[] = vec3[](vec3(0.551115,-0.550000,0.247488),\nvec3(0.552480,-0.550000,0.547476),\nvec3(0.252492,-0.550000,0.548840),\n\nvec3(0.251127,-0.550000,0.248852),\n\nvec3(-0.552480,-0.550000,-0.547476),\nvec3(-0.551115,-0.550000,-0.247488),\nvec3(-0.252492,-0.550000,-0.548841),\nvec3(-0.251127,-0.550000,-0.248853),\nvec3(0.547476,0.550000,-0.552480),\nvec3(0.548840,0.550000,-0.252492),\nvec3(0.247488,0.550000,-0.551115),\nvec3(0.248853,0.550000,-0.251127),\nvec3(-0.252492,0.550000,-0.548841),\nvec3(-0.251127,0.550000,-0.248853),\nvec3(-0.552480,0.550000,-0.547476),\nvec3(-0.551115,0.550000,-0.247488),\nvec3(-0.248853,0.550000,0.251127),\nvec3(-0.247488,0.550000,0.551115),\nvec3(-0.548840,0.550000,0.252492),\nvec3(-0.547476,0.550000,0.552479),\nvec3(0.551115,0.550000,0.247488),\nvec3(0.552480,0.550000,0.547476),\nvec3(0.251127,0.550000,0.248852),\nvec3(0.252492,0.550000,0.548840),\nvec3(0.548840,-0.550000,-0.252492),\nvec3(0.547476,-0.550000,-0.552480),\nvec3(0.248853,-0.550000,-0.251127),\nvec3(0.247488,-0.550000,-0.551115),\nvec3(-0.548840,-0.550000,0.252492),\nvec3(-0.547476,-0.550000,0.552479),\nvec3(-0.248853,-0.550000,0.251127),\nvec3(-0.247488,-0.550000,0.551115));\n\n\nfloat de;\nfor(int i = 0; i < 32;i += 4)\n{\n\nvec3 a = ore[i];\nvec3 b = ore[i+1];\nvec3 c = ore[i+2];\nvec3 d = ore[i+3];\n\nfloat da = qu(a,b,c,d,p);\nif(i ==0){de = da;}\nelse{de = min(de,da);}\n\n}\n\nreturn de;\n}\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}