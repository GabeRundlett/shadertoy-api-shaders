{
    "Shader": {
        "info": {
            "date": "1666660383",
            "description": "Fork of  \"Binary Search for SDFs\" by iq (https://www.shadertoy.com/view/wlGcWG)\n\nI came up with this approach ~5 years ago, and unfortunetly not recalling all the nuances, but overall idea is described in the comments. ",
            "flags": 0,
            "hasliked": 0,
            "id": "cdsGRs",
            "likes": 21,
            "name": "Opportunistic raymarching",
            "published": 3,
            "tags": [
                "3d",
                "raycasting",
                "raycast",
                "sdf",
                "intersection"
            ],
            "usePreview": 1,
            "username": "Pidhorskyi",
            "viewed": 573
        },
        "renderpass": [
            {
                "code": "// stanislav pidhorskyi - 2022\n// inigo quilez - iq/2018-2022\n\n// A modification of original shader by iq: https://www.shadertoy.com/view/wlGcWG\n// Modification: replaced `raycast_bs` with `raycast_opp`.\n//\n// Opportunistic raymarching for SDFs.\n\n// Antialiasing level. Make it 1 if you have a slow machine\n#define AA 1\n\n\nvec3 map( vec3 p );\n\n// Opportunistic raymarching. To the best of my knowlage this does not guarantee to produce correct results,\n// but works in practice.\nvec4 raycast_opp( in vec3 ro, in vec3 rd, float tmin, float tmax)\n{\n    float t = tmin;\n    \n    const float max_overshoot_coeff = 0.9;           // max overshooting coeff\n    float overshoot_coeff = max_overshoot_coeff;     // current overshooting coeff\n    float angle = 1.000;                             // angle estimate\n    float prev_h = 1.e8;                             // previous sdf value\n        \n    float gap = 0.;                                  // difference between actual sdf value and expected one\n    float prev_gap = -1.;\n    float _prev_h = 1.e8;\n    float _o = 1.e8;\n    bool did_overshoot = false;\n\n\n    vec2  info = vec2(0.0);\n    float num = 0.0;\n    for( int i=0; i<256; i++ )\n    {\n        float angle_amplification = (1. / angle - 1.) / (1.0 / angle + 1.0);  // amplify overshooting based on estimeted angle\n        float step_increase = overshoot_coeff * prev_h * angle_amplification;\n            \n        vec3  r = map( ro+rd*(t + step_increase));\n        num += 1.0;\n\t    float h = r.x;\n        \n        prev_gap = gap;\n        gap = step_increase - h;\n        if (gap >= 0.)                                                        // Ops, we did overshoot\n        {\n            if (h > 0.001*t)                                                 \n            {\n                overshoot_coeff = gap / 2. / (prev_h * angle_amplification);\n             \tdid_overshoot = true;\n            }\n            else\n            {\n                overshoot_coeff /= 2.;                                       \n            }\n            _prev_h = h;\n            _o = step_increase;\n            continue;                                                         // backtrack and refine\n        }\n        else if (prev_gap >= 0. && did_overshoot)                             // The previous step was overshooted, still need to refine\n        {\n            prev_h = h;\n            h = _prev_h;\n            t += _o + h;\n            angle = (prev_h - h) / (prev_h + _o - step_increase);             // update angle estimate\n            did_overshoot = false;    \n            continue;                                                         // backtrack and refine\n        }\n        did_overshoot = false;\n        \n        angle = mix(angle, (prev_h - h) / (prev_h + step_increase), 0.5);     // update estimate (slowly)\n\n        t += step_increase;\n        prev_h = h;    \n        overshoot_coeff = mix(overshoot_coeff, max_overshoot_coeff, 0.5);     // recover overshoot_coeff (slowly)\n            \n        info = r.yz;\n        if( h<(0.001*t)||t>tmax ) break;\n        t += h;\n    }\n    return (t<tmax) ? vec4(t,info,num) : vec4(-1.0);\n}\n\n// traditional SDF raymarching\nvec4 raycast_rm( in vec3 ro, in vec3 rd, float tmin, float tmax )\n{\n    float t = tmin;\n    vec2  info = vec2(0.0);\n    float num = 0.0;\n    for( int i=0; i<256; i++ )\n    {\n        vec3  r = map( ro+rd*t );\n        num += 1.0;\n\t    float h = r.x;\n        info = r.yz;\n        if( h<(0.001*t)||t>tmax ) break;\n        t += h;\n    }\n    return (t<tmax) ? vec4(t,info,num) : vec4(-1.0);\n}\n\nvec3 map( vec3 p )\n{\n\tfloat scale = 1.0;\n    float orb = 10000.0;\n    for( int i=0; i<6; i++ )\n\t{\n\t\tp = -1.0 + 2.0*fract(0.5*p+0.5);\n        p -= sign(p)*0.04;\n        float r2 = dot(p,p);\n\t\tfloat k = 0.95/r2;\n\t\tp     *= k;\n\t\tscale *= k;\n        orb = min( orb, r2);\n\t}\n    float d1 = sqrt( min( min( dot(p.xy,p.xy), dot(p.yz,p.yz) ), dot(p.zx,p.zx) ) ) - 0.02;\n    float d2 = abs(p.y);\n    float dmi = d2;\n    float adr = 0.7*floor((0.5*p.y+0.5)*8.0);\n    if( d1<d2 )\n    {\n        dmi = d1;\n        adr = 0.0;\n    }\n    return vec3( 0.5*dmi/scale, adr, orb );\n}\n\nvec3 calcNormal( in vec3 pos, in float t )\n{\n    float precis = 0.0001 * t * 0.57;\n    vec2 e = vec2(1.0,-1.0)*precis;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n                      e.xxx*map( pos + e.xxx ).x );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat ao = 0.0;\n    for( int i=0; i<16; i++ )\n    {\n        vec3 w = normalize(sin(float(i)+vec3(0,1,2)));\n\t\tw *= sign( dot(w,nor) );\n        float h = float(i)/15.0;\n        ao += clamp( map( pos + nor*0.01 + w*h*0.15 ).x*2.0, 0.0, 1.0 );\n    }\n    return clamp( ao, 0.0, 1.0 );\n}\n\nvec3 palette( float h )\n{\n    vec3 col =    vec3(0.0,0.3,1.0);\n    col = mix(col,vec3(1.0,0.8,0.0),smoothstep(0.33-0.2,0.33+0.2,h));\n    col = mix(col,vec3(1.0,0.0,0.0),smoothstep(0.66-0.2,0.66+0.2,h));\n    col.y += 0.5*(1.0-smoothstep(0.0,0.2,abs(h-0.33)));\n    col *= 0.5 + 0.5*h;\n    return col;\n}\n\nfloat print( in float sdf, inout vec2 p, in int str[13])\n{\n    if( p.y<0.0|| p.y>1.0 ) return sdf;\n    float d = 1e20;\n    for( int i=0; i<str.length(); i++ )\n    {\n        int c = str[i];\n        if( c==0 ) break;\n        if( p.x>0.0 && p.x<1.0 )\n        {\n            vec2 q = p/16.0;\n            d = min(d,textureGrad( iChannel0, vec2(c,15-c/16)/16.0+q, dFdx(q), dFdy(q) ).w);\n        }\n        p.x -= 0.5;\n    }\n    return min(d,sdf);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool showCost = cos(iTime*6.283185/11.0)>=0.0;\n    \n    // supersampling loop\n    vec3 tot = vec3(0.0);\n    #if AA>1\n    for( int jj=0; jj<AA; jj++ )\n    for( int ii=0; ii<AA; ii++ )\n    #else\n    int ii = 0, jj = 0;\n    #endif\n    {\n        vec2 q = fragCoord+vec2(float(ii),float(jj))/float(AA);\n\n        // camera\n        vec3 ro = vec3( 2.8*cos(0.1+0.033*iTime), 0.5 + 0.20*cos(0.037*iTime), 2.8*cos(0.5+0.035*iTime) );\n        vec3 ta = vec3( 1.9*cos(1.2+0.041*iTime), 0.5 + 0.10*cos(0.027*iTime), 1.9*cos(2.0+0.038*iTime) );\n        float roll = 0.2*cos(0.02*iTime);\n        vec3 cw = normalize(ta-ro);\n        vec3 cp = vec3(sin(roll), cos(roll),0.0);\n        vec3 cu = normalize(cross(cw,cp));\n        vec3 cv = normalize(cross(cu,cw));\n        \n        // render split screen\n        vec2 res = vec2(iResolution.x/2.0,iResolution.y);\n        float ori = (q.x<res.x)?0.0:res.x;\n        vec2 p = (2.0*vec2(q.x-ori,q.y)-res)/res.y;\n        vec3 col = vec3(0.0);\n        if( !showCost || p.y>-0.9 ) \n        {\n            vec3 rd = normalize( p.x*cu + p.y*cv + 2.0*cw );\n            vec4 h = (q.x<res.x) ? raycast_rm( ro, rd, 0.01, 20.0 ): \n                                   raycast_opp( ro, rd, 0.01, 20.0 );\n                                   \n            if( !showCost )\n            {\n                float t = h.x;\n                if( t>0.0 )\n                {\n                    vec3  pos = ro + t*rd;\n                    vec3  nor = calcNormal( pos, t );\n                    float fre = clamp(1.0+dot(rd,nor),0.0,1.0);\n                    float occ = pow( clamp(h.z*2.0,0.0,1.0), 1.2 );\n                          occ = 1.5*(0.1+0.9*occ)*calcAO(pos,nor);        \n                    vec3  lin = vec3(0.8,0.8,1.0)*(2.0+fre*fre*vec3(1.8,1.0,1.0))*occ*(1.0-0.5*abs(nor.y));\n\n                    col = 0.5 + 0.5*cos( 6.2831*h.y*1.7 + vec3(0.0,2.0,3.0)+0.5 );\n                    col  = col*lin;\n                    col += 0.6*pow(1.0-fre,32.0)*occ*vec3(0.5,1.0,1.5);        \n                    col *= exp(-0.3*t);\n                }\n            }\n            else\n            {\n                if( h.w>0.0 )\n                {\n                   col = palette(clamp(h.w/128.0,0.0,1.0));\n                }\n\n                col *= exp2(-0.4*h.x);\n            }\n            col *= 0.6 + 0.4*smoothstep(-0.8,-0.5,p.y);\n            col *= 2.0;\n            col = mix(col,vec3(1.0),1.0-smoothstep( 0.003,0.004,abs(q.x-res.x)/iResolution.x ));\n        }\n        // render pallette\n        else\n        {\n            col = palette( q.x/iResolution.x );\n            col = mix(col,vec3(1.0),1.0-smoothstep( 0.003,0.004,abs(p.y+0.9)/2.0*iResolution.y/iResolution.x ));\n        }\n        col = sqrt(col);\n\n        tot += col;\n    }\n    tot = tot/float(AA*AA);\n\n\n    // draw text\n    {\n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        float text = 1e20;\n        const float text_scale = 7.0;\n        if( fragCoord.x<iResolution.x/2.0 )\n        {\n            vec2 q = (p-vec2(-1.78,-0.85))*text_scale;\n            text = print(text,q,int[13]( 84,114, 97,100,105,116,105,111,110, 97,108,0, 0));\n            text = print(text,q,int[13]( 32,114, 97,121,109, 97, 99,104,105,110,103,0, 0));\n        }\n        else\n        {\n            vec2 q = (p-vec2( 0.0,-0.85))*text_scale;\n            text = print(text,q,int[13]( 79, 112, 112, 111, 114, 116, 117, 110, 105, 115, 116, 105, 99 ));\n            text = print(text,q,int[13]( 32,114, 97,121,109, 97, 99,104,105,110,103,0, 0));\n        }\n\n        if( showCost )\n        {\n            vec2 q;\n            q = (p-vec2(-1.77,-0.993))*14.0; text = print(text,q,int[13]( 48,0,0,0,0,0,0,0,0,0,0,0,0));\n            q = (p-vec2(-0.27,-0.993))*14.0; text = print(text,q,int[13]( 32,105,116,101,114, 97,116,105,111,110,115,0,0));\n            q = (p-vec2( 1.62,-0.993))*14.0; text = print(text,q,int[13]( 49,50,56,0,0,0,0,0,0,0,0,0,0));\n        }\n        tot = mix(tot,vec3(0.0),1.0-smoothstep( 0.06,0.08,text-0.5));\n        tot = mix(tot,vec3(1.0),1.0-smoothstep(-0.01,0.01,text-0.5));\n    }\n    \n\tfragColor = vec4( tot, 1.0 );\t\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}