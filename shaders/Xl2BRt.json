{
    "Shader": {
        "info": {
            "date": "1516846960",
            "description": "part 2",
            "flags": 32,
            "hasliked": 0,
            "id": "Xl2BRt",
            "likes": 3,
            "name": "thizz 2",
            "published": 3,
            "tags": [
                "feedback",
                "shaderclub"
            ],
            "usePreview": 0,
            "username": "jrsa",
            "viewed": 679
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n        \n    // buffer A is drawn into using the blur shader (which \n    // reads from buffer A, drawn by feedback shader, which reads from buffer B...)\n\n    vec4 bufferA = texture(iChannel0, uv);\n    fragColor = bufferA;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// box blur\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 src = fragCoord / iResolution.xy;\n    \n    vec2 offs = vec2(1. / iResolution.x, 1. / iResolution.y);\n    \n    // distance of neighborhood texels (effectively half of the blur kernel width)\n    float width = 0.5;\n    vec2 tc4 = src;\n    vec2 tc1 = src + vec2(0.0, -offs.t * width);\n    vec2 tc3 = src + vec2(-offs.s * width, 0.0);\n    vec2 tc5 = src + vec2(offs.s * width, 0.0);\n    vec2 tc7 = src + vec2(0.0, offs.t * width);\n\n    vec2 tc0 = src + vec2(-offs.s * width, -offs.t * width);\n    vec2 tc2 = src + vec2(offs.s * width, -offs.t * width);\n    vec2 tc6 = src + vec2(-offs.s * width, offs.t * width);\n    vec2 tc8 = src + vec2(offs.s * width, offs.t * width);\n    \n    // texels come from iChannel0 (assigned to buffer B)\n    vec4 col0 = texture(iChannel0, tc0);\n    vec4 col1 = texture(iChannel0, tc1);\n    vec4 col2 = texture(iChannel0, tc2);\n    vec4 col3 = texture(iChannel0, tc3);\n    vec4 col4 = texture(iChannel0, tc4);\n    vec4 col5 = texture(iChannel0, tc5);\n    vec4 col6 = texture(iChannel0, tc6);\n    vec4 col7 = texture(iChannel0, tc7);\n    vec4 col8 = texture(iChannel0, tc8);\n        \n    fragColor = (col4 + col2 + col0 + col6 + col8) * 0.19;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "precision highp float;\n\nvec3 rgb2hsv(vec3 c) {\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 tc = fragCoord / iResolution.xy;\n    vec4 imageIn = texture(iChannel1, tc);\n    \n    vec4 feedbackIn = texture(iChannel0, tc);\n    \n    vec3 s = rgb2hsv(feedbackIn.rgb);\n    \n    // length of the saturation and value components as a 2d vector\n    float d = length(s.bg);\n    \n    // length of the hue and value components as a 2d vector\n    float e = length(s.rg);\n    \n    // this texture fetch will be smeared according to the color of the input\n    float prelookAmount = 2.1;\n    vec2 prelookDisplace = vec2(-d * prelookAmount, -e * prelookAmount);\n    vec4 prelook = texture(iChannel0, tc + prelookDisplace);\n    /*\n    d += (prelook.b * 2.0);\n    d -= length(prelook) * 2.0;\n    e += distance(s.gr, rgb2hsv(prelook.rgb).rg) * 2.0;\n    */\n    // texture fetch that will be used as the result\n    // it is displaced by input from the first (prelook) texture read\n    float displaceAmount = -1.0 / 420.0;\n    vec2 displace = vec2(d * displaceAmount, e * displaceAmount);\n        \n    vec4 result = texture(iChannel0, tc + displace);\n\n    // one white gain, and one blue\n    // this compensates for loss in the rest of the feedback loop\n    result += 0.087;\n    result += 0.187 * vec4(0.1, 0.1, sin(iTime), 1.0);\n    \n    // the prelook value is subtracted from the result for a crude, \n    // spatial filtering effect similar to a sharpen filter\n    result -= (prelook * 0.16);\n    \n    // thanks mikebecause\n    if(iFrame <= 10 || iMouse.z > 0.0){\n        fragColor = imageIn;\n    } else {\n        fragColor = result;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}