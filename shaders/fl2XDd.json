{
    "Shader": {
        "info": {
            "date": "1628896055",
            "description": "Shader I made during the Novoke pre-party shader jam. ",
            "flags": 0,
            "hasliked": 0,
            "id": "fl2XDd",
            "likes": 12,
            "name": "Tater @ Nevoke pre-jam",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "audioreactive",
                "jam",
                "livecode"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 554
        },
        "renderpass": [
            {
                "code": "#define STEPS 128.0\n#define MDIST 250.0\n#define pi 3.1415926535\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define pmod(p,x) (mod(p,x)-0.5*(x))\n#define lr 90.0\nvec3 gl = vec3(0);\nvec3 gl2 = vec3(0);\nvec2 path(float t){\n  return vec2(sin(t),cos(t));\n}\n\n\nvec2 map(vec3 p){\n  vec2 a = vec2(9999);\n  vec2 b = vec2(9999);\n  float t = mod(iTime,1000.0);\n  vec3 po = p;\n  \n  float ffti = pow(fract(t*2.0),2.0)+floor(t*2.0)+t*0.5;\n  ffti/=2.8;\n  float fft = texelFetch( iChannel0, ivec2(10,0), 0 ).x*0.008;\n  float fft2 = texelFetch( iChannel0, ivec2(200,0), 0 ).x*0.003;\n  \n  p.yz*=rot(-ffti*0.35);\n  float th = atan(p.y,p.z);\n  th*=80.0;\n  float r = length(p.yz)-lr;\n  p.y = r;\n  p.z = th;\n  \n  \n  //INNER SPIRAL\n  p.xy-=path(p.z*0.2)*4.0;\n  vec3 p2 = p;\n  p.xy*=rot(-p.z);\n  p.x = abs(p.x)-1.0;\n  b.x = length(p.xy)-0.5;\n  \n  b.y = 1.0;\n  a=(a.x<b.x)?a:b;\n  p = p2;\n  \n  \n  //MIDDLE SPIRAL\n  p.xy-=path(p.z*0.2)*min(3.0+fft*250.0,6.0);\n  vec3 p3 = p;\n  p.xy*=rot(sin(p.z));\n  p.xy = abs(p.xy)-1.4;\n  vec2 d2 = abs(p.xy)-1.0;\n  float cut = max(d2.x,d2.y);\n  p = p3;\n  b.x = length(p.xy)-1.0;\n  b.x = max(-cut,b.x);\n  \n  b.y = 2.0;\n  a=(a.x<b.x)?a:b;\n  \n  \n  //OUTER SPIRAL\n  p.xy-=path(p.z*0.2)*min(3.0+fft*250.0,6.0);\n  b.x = length(p.xy)-1.0;\n  gl2 +=0.1/(0.01+b.x*b.x)*vec3(0,0.1,1.0);\n  \n  b.y = 3.0;\n  a=(a.x<b.x)?a:b;\n  \n  \n  //OUTER BOXS TUBES\n  p = po; p.y = r;p.z = th;\n  p.xy*=rot(sin(p.z*0.0035)+sin(t));\n  p.xy = abs(p.xy)-20.0;\n  \n  for(float i = 0.0; i<4.0; i++){\n    p.xy = abs(p.xy)-1.5;\n    p.xy*=rot(p.z*0.1-t*2.0);\n  }\n  vec2 d = abs(p.xy)-1.0;\n  b.x = max(d.x,d.y);\n \n  b.y = 4.0;\n  a=(a.x<b.x)?a:b;\n  \n  \n  //LASERS\n  p = po; p.y = r;p.z = th;\n  p.xy = abs(p.xy)-20.0;\n  p.xy*=rot(pi/4.0);\n  p.xy = abs(p.xy)-5.0;;\n  b.x = length(p.xy);\n  gl+=0.1/(0.01+b.x*b.x)*vec3(0.0,1.0,0.5)*max(sin(p.z*0.05+t*10.0)*0.5+0.4,0.0);\n  \n  b.y = 0.0;\n  a=(a.x<b.x)?a:b;\n  \n  \n  //MIDDLE BALL THINGS\n  p = po;p.y = r;p.z = th;\n  p.xy*=rot(-t*5.0);\n  p.z = pmod(p.z,20.0);\n  p.yz*=rot(t*4.0);\n  p.yx*=rot(t*4.0);\n  p.xy = abs(p.xy)-1.5-fft2*300.0;\n  b.x = length(p)-0.5-fft*60.0;\n  gl+=(0.0004/(0.01+b.x*b.x))*vec3(0,1,1);\n  \n  b.y = 7.0;\n  a=(a.x<b.x)?a:b;\n  \n  \n  //BOX THINGYS\n  p = po;\n  p.y = r;\n  p.z-=5.0;\n  p.xy*=rot(-t*0.75);\n  p.xy*=rot(ffti);\n  p.xy = abs(p.xy)-6.0-fft2*1200.0;\n  //p.xy*=rot(pi/4.0);\n  \n  //p.xy = abs(p.xy);\n  p.xy*=rot(pi/4.0);\n  vec3 d3 = abs(p)-vec3(4.0,0.75,0.75);\n  b.x = max(d3.x,max(d3.y,d3.z));\n  \n  b.y = 9.0;\n  a=(a.x<b.x)?a:b;\n  return a;\n}\n//Anti-unroll normals (not live coded) \n#define ZERO (min(iFrame,0))\nvec3 norm(vec3 p){\n    \n   \n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+e*0.001).x;\n    }\n    return normalize(n);\n \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n  float t = mod(iTime,1000.0);\n  uv*=rot(t*0.75);\n  vec3 col = vec3(0);\n  \n  vec3 ro = vec3(0,lr,0);\n  vec3 rd = normalize(vec3(uv,0.6));\n  \n  float shad, dO;\n  vec2 d;\n  vec3 p = ro;\n  bool hit = false;\n  float bnc = 0.0;\n  for(float i = 0.0; i<STEPS; i++){\n    p = ro+rd*dO;\n    d = map(p);\n    if(d.x>1.0)d.x = sqrt(d.x);\n    \n    \n    if(d.x<0.01){\n      if(d.y==7.0&&bnc==0.0){\n        vec3 n = norm(p);\n        ro = p+n*0.5;\n        rd = n;\n        dO = 0.0;\n        bnc = 1.0;\n      }\n      else{\n        if(d.y == 3.0){\n          d.x = 0.1;\n        }\n        else{\n          shad = i/STEPS;\n          hit = true;\n          break;\n        }\n    }\n    }\n    if(dO>MDIST){\n      p = ro+rd*MDIST;\n      break;\n    }\n    dO+=d.x*0.6;\n  }\n  vec3 al;\n  if(hit){\n    \n    vec3 n = norm(p);\n    vec3 ld = normalize(vec3(0.25,0.25,-1.0));\n    vec3 h = normalize(ld-rd);\n    float spec = pow(max(dot(n,h),0.0),20.0);\n    \n    shad = 1.0-shad;\n    shad = pow(shad,1.2);\n    col = vec3(shad);\n    if(d.y ==4.0) d.y = floor(mod(p.z*0.3,3.0))+1.0;\n    \n    if(d.y==1.0) al = mix(vec3(0.0,0.2,1.0),vec3(0,1.0,0.2),0.0);\n    if(d.y==2.0) al = vec3(0,0.5,0.5)*1.5;\n    if(d.y==3.0) al = mix(vec3(0.0,0.2,1.0),vec3(0,1.0,0.4),1.0);\n    if(d.y==7.0) al = vec3(0,1.0,1.0);\n    if(d.y==9.0) al = vec3(0.5,0.9,0);\n    col*=al;\n    col+=spec*0.3;\n  }\n  col = mix(col,vec3(0.05,0,0.15),dO/MDIST);\n  col+=gl*0.6;\n  col+=gl2*0.05;\n  col = pow(col,vec3(0.75));\n\tfragColor = vec4(col,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}