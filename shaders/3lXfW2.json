{
    "Shader": {
        "info": {
            "date": "1597880388",
            "description": "teste para ray marching",
            "flags": 16,
            "hasliked": 0,
            "id": "3lXfW2",
            "likes": 0,
            "name": "RayMarchacer",
            "published": 3,
            "tags": [
                "vicentedev"
            ],
            "usePreview": 0,
            "username": "DarkCat5501",
            "viewed": 258
        },
        "renderpass": [
            {
                "code": "#define MIN_DIST 0.001\n#define MAX_DIST 100.0\n#define MAX_STEPS 50\n#define MAX_REFLECION 3\n// key is javascript keycode: http://www.webonweboff.com/tips/js/event_key_codes.aspx\nstruct Ray{\n\tvec3 ro,rd;\n};\n\nfloat  remap01(float a,float b,float c)\n{\n    return (c-a)/b-a;\n}\nbool ReadKey( int key, bool toggle )\n{\n\tfloat keyVal = texture( iChannel0, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ) ).x;\n\treturn (keyVal>.5)?true:false;\n}\nmat2 Rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n \treturn mat2(c,-s,s,c);\n}\nfloat smin(float a,float b,float c)\n{\n    float h = clamp(.5+.5*(b-a)/c,0.,1.);\n    return mix(b,a,h) - c*h*(1.-h);\n}\nfloat Dtorus(vec3 pos,float r1,float r2)\n{\n    //pos.yz*=Rot(iTime);\n    float x = length(pos.xz)-r1;\n    float y =  pos.y;\n    float d = length(vec2(x,y))-r2;\n\treturn d;\n}\nfloat Dbox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat DRoundBox(vec3 p,vec3 s,float r)\n{\n    float d = length(p-vec3(clamp(p.x,-s.x+r,s.x-r),clamp(p.y,-s.y+r,s.y-r),clamp(p.z,-s.z+r,s.z-r)))-r;\n    return d;\n}\n\nfloat Dcylinder(vec3 p,vec3 a,vec3 b,float r)\n{\n\tvec3 ap = p-a;\n    vec3 ab = b-a;\n    float t = dot(ab,ap) / dot(ab,ab);\n    vec3 c = a + ab * t;\n    float d = length(p - c)-r;\n    float y = (abs(t*.5)-.5) * length(ab);\n    float i = min(max(d,y),0.0);\n    float e  = length(max(vec2(d,y),0.0));\n    return e+i;\n}\nfloat Dcapsule(vec3 p,vec3 a,vec3 b,float r)\n{\n\tvec3 ap = p-a;\n    vec3 ab = b-a;\n    float t = dot(ab,ap) / dot(ab,ab);\n    t = clamp(t,0.,1.);\n    vec3 c = a + ab * t;\n    return length(p - c)-r;\n\n}\nfloat Dsphere(vec3 pos,float r)\n{\n    vec3 m_pos = pos;\n    m_pos.xz *= Rot(iTime);\n\treturn length(m_pos) - r;\n}\nfloat Dplane(vec3 pos,vec3 normal,float h)\n{\n\treturn dot(pos,normalize(normal))-h;\n}\n\nfloat clouds(vec4 noise,vec3 pos,vec3 size)\n{\n\treturn 0.0;\n}\n\nfloat GetDist(vec3 p)\n{\n    //p.x = mod(p.x,3.0);\n    //p.y = mod(p.y,3.0);\n    //p.z = mod(p.z,3.0);\n    //vec3 pshe = p-vec3(1.5,1.5,1.5);\n       \n        \n    //float dsphere= Dsphere(pshe,0.6);\n    //float dtorus = Dtorus(p-vec3(0.0),1.,0.3);\n    //float dplane = Dplane(p,vec3(0,1,0),-1.0);\n    \n    vec3 boxpos = abs(p)-vec3(10.0,2.0,2.0);\n    \n    \n    \n    \n    \n    float dbox = Dbox(boxpos,vec3(0.5,0.5,0.5));\n    //float dcap = Dcapsule(boxpos,vec3(0.0,0.0,-2.0),vec3(0.0,0.0,2.0),0.3);\n    \n    //float d = smin(dsphere,dplane,2.9);\n    //d = max(-dcap,d);\n    \n    float d = DRoundBox(p-vec3(0.0,2.0,1.0),vec3(0.5),0.1);\n    //d= min(d,dplane);\n    d = min(d,dbox);\n    return d;\n}\n\nvec3 GetNormal(vec3 p)\n{\n    vec2 e = vec2(.01, 0);\n    float d = GetDist(p);\n    vec3 n = vec3(\n    \td-GetDist(p-e.xyy),\n        d-GetDist(p-e.yxy),\n        d-GetDist(p-e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat RayMarcher(vec3 pos,vec3 dir)\n{\n\tvec3 m_pos = pos;\n    float dist=0.0;\n    for(int i=0;i<MAX_STEPS;i++)\n    {\n        float d = GetDist(m_pos);\n        m_pos += dir*d;\n        dist+=d;\n        if( d<=MIN_DIST || abs(dist)>=MAX_DIST)break;\n        \n    }\n\treturn clamp(dist,0.0,MAX_DIST);\n}\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 sphere_colision(vec3 pos,float r,Ray ray)\n{\n    vec3 spro = vec3(pos-ray.ro);\n    float t = dot(spro,ray.rd);\n    vec3 p = ray.ro+ray.rd*t;\n    \n    float y = length(pos-p);\n    if(y>r) return vec3(1)*MAX_DIST;\n    float x = sqrt(r*r-y*y);\n    float t1 = t-x;\n    float t2 = t+x;\n    return vec3(t1,t,t2);\n}\n\nfloat RayTracer(vec3 ro,vec3 rd)\n{\n    Ray ray = Ray(ro,rd);\n    vec3 sphere = sphere_colision(vec3(0,0,0),1.,ray);\n    \n    \n    float d = sphere.x;\n\treturn d;\n}\n\nfloat GetLight(vec3 p,vec3 lightPos)\n{\n   \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dt = dot(n, l);\n    float dif = clamp(dt,0.0,1.0)*1.0;\n    \n    \n    //float d = RayMarcher(p+n*MIN_DIST*3., l);\n    \n    //dif = dif - (float(d<length(lightPos-p)))*0.9*dif;\n    return dif;\n}\nfloat Reflect(vec3 p,vec3 dir)\n{\n    vec3 pp = p;\n    vec3 l = dir;\n    float d=0.0;\n    \n   \tfor(int i=0;i<MAX_REFLECION;i++){\n        \n        if(d>MAX_DIST)break;\n    \tvec3 n = GetNormal(pp);\n    \tl = reflect(l,n);\n    \tvec3 ponto = pp+n*MIN_DIST*3.;\n  \t\tfloat dS =  RayMarcher(ponto,l);\n       \tpp = ponto+l*dS;\n    \td+=dS;\n    }\n    \n    return d;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy-.5*iResolution.xy)/iResolution.xy;\n\n    vec3 cam_pos= vec3(0.0,2.5,-7.0);\n    cam_pos.yz *= Rot(-mouse.y*3.14);\n    cam_pos.xz *= Rot(-mouse.x*6.28);\n    vec3 cam_dir = R(uv,cam_pos,vec3(0,0,0),0.7);\n    float dm = RayMarcher(cam_pos,cam_dir);\n    float dt = RayTracer(cam_pos,cam_dir);\n    float d= min(dt,dm);\n    vec3 pm = cam_pos+cam_dir*dm;\n    vec3 pt = cam_pos+cam_dir*dt;\n    \n   \tvec3 col = GetNormal(pm);\n    \n    col = pow(col, vec3(0.9545));//correção de gama\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}