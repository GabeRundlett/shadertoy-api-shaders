{
    "Shader": {
        "info": {
            "date": "1461337947",
            "description": "Creating a simple tiled texture. Merging the left and right edges together and then doing the top and bottom on a second pass.\nMost of Shadertoy's textures are tile-able anyway.",
            "flags": 32,
            "hasliked": 0,
            "id": "XstXWB",
            "likes": 5,
            "name": "Tiling a Texture",
            "published": 3,
            "tags": [
                "texture",
                "tiling"
            ],
            "usePreview": 0,
            "username": "Dave_Hoskins",
            "viewed": 1604
        },
        "renderpass": [
            {
                "code": "// This just shows the final result tiled.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 xy = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, (xy * (mod(floor(iTime*.5), 4.0)+1.0)));\n      \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define HASHSCALE1 .1031\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat noise(vec2 xz)\n{\n\tvec2 f = fract(xz);\n\txz = floor(xz);\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\treturn\tmix(mix(hash12(xz), hash12(xz + vec2(1.0, 0.0)), u.x),\n\tmix(hash12(xz + vec2(0.0, 1.0)), hash12(xz + vec2(1.0, 1.0)), u.x), u.y);\n}\nfloat FBM(vec2 p)\n{\n    float a = .65;\n    float o = 0.0;\n\n    for (int i = 0; i < 8; i++)\n    {\n        float v = noise(p);\n            \n        v = pow(1.0-abs(v-.5)*2., 2.4);\n        o += v * a;\n        a *= .5;\n        p *= 2.2;\n        \n    }\n    return min(o, 1.);\n}\n//=============================================================\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n\tvec2 xy = fragCoord.xy / iResolution.xy;\n    vec3 col = vec3(FBM(3200.+xy+floor(iTime*.125)));\n    col.z = smoothstep(0.2,.4, col.x)*.7 ;\n    fragColour = vec4(col, 1.);\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// .0 - .5\n#define MERGE_START .3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 xy = fragCoord.xy / iResolution.xy;\n    \n\tfragColor = mix(texture(iChannel0, xy),\n                    texture(iChannel0, vec2(1.-xy.x, xy.y)),\n                  \tsmoothstep(MERGE_START, .5, abs(xy.x-.5))*.5);        \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// .0 - .5\n#define MERGE_START .3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    \n    fragColor = mix(texture(iChannel0, xy),\n                    texture(iChannel0, vec2(xy.x,1.-xy.y)),\n                    smoothstep(MERGE_START, .5, abs(xy.y-.5))*.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}