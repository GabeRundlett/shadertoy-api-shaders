{
    "Shader": {
        "info": {
            "date": "1562358726",
            "description": "Raytracing of a sphere, and sampling of the environment map to produce the diffuse brdf.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtfXR7",
            "likes": 0,
            "name": "Diffuse BRDF Envmap Sampling",
            "published": 3,
            "tags": [
                "raytracingbrdfenvmapsampling"
            ],
            "usePreview": 0,
            "username": "rodousse",
            "viewed": 685
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n//Number of samples to sample the envmap (max 4096)\n#define SAMPLES 500.0\n//Material roughness\n#define ROUGHNESS 1.0\n//Exposure of the scene\n#define EXPOSURE 3.0\n//Display background with the following opacity \n#define BACKGROUND_VISIBLE 0.5\n//distance of the camera from the sphere\n#define CAM_DISTANCE 3.0\n\n\nvec3 cam = vec3(0.0,0.0,5.0);\nvec4 sphere = vec4(0.0,0.0,0.0f,1.0);\nvec3 diffuse = vec3(1.0,1.0,1.0);\nvec3 spec = vec3(1.0, 1.0,1.0);\nvec3 background = vec3(.3); \n\nfloat fresnel(float v)\n{\n    return pow(1.0-cos(v), 5.0);\n}\n\nvec3 fd(float thetaI, float thetaO, float thetaH, vec3 ray)\n{\n    vec3 col = vec3(texture(iChannel0, ray));\n    float fd90 = 0.5+pow(cos(thetaH), 2.0)*ROUGHNESS;\n    // Disney diffuse component\n    // http://simon-kallweit.me/rendercompo2015/report/#disneybrdf\n    float fresC = (fd90-1.0); \n    return diffuse * (EXPOSURE *col/PI)*(1.0+fresC*fresnel(thetaO))*(1.0+fresC*fresnel(thetaI));\n}\n\n// Diffuse BRDF\nvec3 DBRDF(vec3 normal, vec3 view, vec2 uv)\n{\n    vec3 diff = vec3(0.0);\n    int samples = 0;\n    float dim = sqrt(SAMPLES);\n    int dimI = int(dim);\n    float thetaO = dot(normal,view);\n    for(int i = 0; i < dimI; i++)\n    {\n        for(int j = 0; j < dimI; j++)\n        {\n            vec2 texUV = vec2(float(i)/dim,float(j)/dim);\n            vec3 ray = vec3(texture(iChannel1, texUV));\n            ray = (ray-vec3(0.5))*2.0;\n            if(length(ray) <= 1.0)\n            {\n                ray = normalize(normalize(ray) + normal);\n                float thetaH = dot(normalize(ray+view), normal);\n                float thetaI = dot(normal, ray);\n                diff += fd(thetaI, thetaO, thetaH, ray);\n                samples++;\n            }\n        }\n    }\n\treturn (diff / float(samples));\n}\n\nfloat hitSphere(vec3 dir, vec3 center, float radius)\n{\n    float a = dot(dir, dir);\n    float b = dot(2.0*dir, cam-center);\n    float c = dot(cam-center, cam-center) - pow(radius, 2.0);\n    \n    float sDelta = sqrt(pow(b, 2.0) - (4.0*a*c));\n    float t = (-b - sDelta)/(2.0 * a);\n    float t1 = (-b + sDelta)/(2.0 * a);\n\treturn max(min(t,t1),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cuv = (uv - vec2(0.5)) * 2.0 * vec2(1.0, iResolution.y/iResolution.x);\n    \n    \n    cam = CAM_DISTANCE * vec3(cos(iTime), 0.0, sin(iTime));\n    \n    vec3 forward = normalize(vec3(sphere)-cam);\n    vec3 up = vec3(0.0,1.0,0.0);\n    vec3 right = normalize(cross(forward, up));\n    \n    \n    vec3 dir = (right * cuv.x);\n    dir += (up * cuv.y);\n    dir += forward;\n    dir = normalize(dir);\n    \n    float t = hitSphere(dir, sphere.xyz, sphere.w);\n    vec3 normal = normalize((cam + t*dir) - sphere.xyz);\n    vec3 colSphere = DBRDF( normal, -dir, uv);\n    vec3 colBack = mix(background, vec3(texture(iChannel0, dir)), BACKGROUND_VISIBLE);\n\tvec3 col = mix(colBack, colSphere, clamp(t,0.0,1.0));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}