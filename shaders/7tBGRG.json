{
    "Shader": {
        "info": {
            "date": "1624097428",
            "description": "Acheivement : Knowing orbital camera :) ",
            "flags": 32,
            "hasliked": 0,
            "id": "7tBGRG",
            "likes": 4,
            "name": "大龙猫 - Quicky#055",
            "published": 3,
            "tags": [
                "quicky"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 253
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Output to screen\n    fragColor = vec4(texture(iChannel0,fragCoord/iResolution.xy));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define fGlobalTime iTime\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\nfloat box(vec3 p,vec3 b){\n    vec3 q=  abs(p)-b;\n     return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));\n  }\n  float diam(vec3 p,float s){\n     p = abs(p);\n     return (p.x+p.y+p.z-s)/sqrt(1./3.);    \n   }\nvec2 sdf(vec3 p){\n  vec3 pp = p;\n  vec2 h;\n  p.x = abs(p.x)-1.5;\n  p.zy *=rot(p.x*.785*.1);\n\n  pp.xy *=rot(pp.z*.01);\n  \n  p= abs(p)-.5-pow(fract(fGlobalTime*2.),2.)*2.;\n  for(float i=0.;i<4.;i++){\n    p = abs(p)-.2;\n    p.xz*=rot(.785*i);\n    }\n  h.x = box(p,vec3(1.));\n  h.x = abs(h.x)-.05;\n  h.x = .8*max(h.x,dot(p,vec3(0.,1.,-0.+sin(floor(fGlobalTime*8.+p.z*.785)))-.1));\n  h.x = min(h.x,diam(pp,2.1));\n  h.y =1.;\n    \n  vec2 t;\n    pp.y = abs(pp.y);\n    t.x= dot(pp,normalize(vec3(.0,-1.,0.)))+5.+texture(iChannel1,pp.xz*.005+fGlobalTime*.1).r*2.;\n    t.y =2.;\n    h = t.x < h.x ? t:h;\n  return h;\n}\n#define q(s) s*sdf(p+s).x\nvec2 nv=vec2(-.01,.01);\nvec3 norm(vec3 p){return normalize(q(nv.xyy)+q(nv.yxy)+q(nv.yyx)+q(nv.xxx));}\nvec3 pal(float t){return .5+.5*cos(6.28*(1.*t+vec3(.0,.4,.6)));}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\nvec2 puv = uv;\n  \n  vec3 ro=vec3(0.+sin(fGlobalTime)*10.,sin(fGlobalTime)*5.,+cos(fGlobalTime)*8.);\n  vec3 rt = vec3(0.,0.+sin(fGlobalTime*.4)*1.,0.);\n  vec3 z = normalize(rt-ro);\n  vec3 x = cross(z,vec3(0.,1.,0.));\n  vec3 y = cross(z,x);\n  \n  \n  \n  vec3 rd=normalize(vec3(uv,1.));\n  rd = normalize(mat3(x,y,z)*vec3(uv,1.));\n  vec3 rp=ro;\n  vec3 light= vec3(1.,2.,-3.);\n  float i=0.;\n  vec3 col = vec3(.1);\n\tvec3 acc = vec3(0.);\n  for(i=0.;i<=69.;i++){\n      vec2 d= sdf(rp);\n    if(d.y == 1.){\n    acc +=vec3(1.)*exp(fract(fGlobalTime*4.)*50.*-abs(d.x))/9.;\n      d.x = max(0.05,abs(d.x));\n    }\n      rp+=d.x*rd;\n      if(d.x<=0.001){\n        vec3 n = norm(rp);\n        col = vec3(1.,1.0,1.0)*max(0.,dot(normalize(light-rp),n));\n           break;\n        }\n  }\n  puv *=1.+sin(fGlobalTime)*.1;\n  puv = (puv* vec2(iResolution.y / iResolution.x, 1))+.5;\n  vec4 pcol = texture(iChannel0,puv);\n  col = mix(col,pcol.rgb*pal(pcol.a+floor(fGlobalTime*4.)/4.),pcol.a);\n  col+=acc; \n\n \n    fragColor  = vec4(col,i/(69.*1.2));\n    \n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}