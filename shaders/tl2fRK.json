{
    "Shader": {
        "info": {
            "date": "1599400396",
            "description": "An interactive visualization of https://en.wikipedia.org/wiki/Euclidean_algorithm\n\nInspired by https://youtu.be/V2BybLCmUzs?t=1475\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tl2fRK",
            "likes": 7,
            "name": "Interactive Euclidian Algorithm",
            "published": 3,
            "tags": [
                "numbers",
                "algorithm",
                "prime",
                "euclidian",
                "fractions"
            ],
            "usePreview": 0,
            "username": "qwert33",
            "viewed": 325
        },
        "renderpass": [
            {
                "code": "#define TAU 6.28318530718\n\n// returns number of iterations in the euclidean algorithm (find the greatest common divisor)\n// between the numbers in s\n// such that the values are below the given point p.\n// returns a negative number when the point p lies on a boundary point between two multiples.\nint euclideanIterations(ivec2 p, ivec2 s) {\n    //s = ivec2(max(s.x, s.y), min(s.x, s.y));\n    int i = 0;\n    int m;  // maintained to be s.x % s.y\n    if (p.x > s.x || p.y > s.y) return i;\n    while (s.y > 1 && i < 1000) {  // i < 1000 is a safety feature. we should never hit it but it may prevent driver crashes when developing.\n        m = s.x % s.y;\n        if ((p.x - m) % s.y == 0) return -1;\n        s = ivec2(s.y, m);\n        if (p.y > s.x || p.x > s.y) break;\n        ++i;\n        \n        // We do things almost identically twice so we know whether we are in a horizontal or vertical modulo.\n        m = s.x % s.y;\n        if ((p.y - m) % s.y == 0) return -2;\n        s = ivec2(s.y, m);\n        if (p.x > s.x || p.y > s.y) break;\n        ++i;\n    }\n    return i;\n}\n\n// https://gka.github.io/palettes/#/5|s|003f5c,bc5090,ffa600|ffffe0,ff005e,93003a|1|0\nint palette[] = int[](\n    0x003f5c,0x4b4671,0x7c4a7e,0xa74e8a,0xc75e78,0xdb784d,0xed8f26,0xffa600\n);\nvec3 hex_to_color(int hex) {\n    return vec3(\n        float((hex >> 16) & 0xff),\n        float((hex >>  8) & 0xff),\n        float((hex >>  0) & 0xff)\n    ) / 255.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    \n    \n    ivec2 sides = ivec2(iMouse.xy);\n    if (iMouse.w < 0.1) {\n        float r = .9 * min(iResolution.x, iResolution.y);\n        float t = TAU/4. * (.5+.5*sin(.07*iTime));\n        \n        sides = ivec2(\n            iResolution.y * cos(t) / sin(t),\n            iResolution.y\n        );\n        if (float(sides.x) > iResolution.x) {\n            sides = ivec2(\n                iResolution.x,\n                iResolution.x * (sin(t) / cos(t))\n            );\n        }\n    }\n    \n    ivec2 p = ivec2(fragCoord);\n    \n    if (p.x < sides.x && p.y < sides.y) {\n        int i = euclideanIterations(p, sides);\n        if (i < 0) {\n            col = vec3(0.);\n        } else if (i < palette.length()) {\n            col = hex_to_color(palette[i]);  // TODO: optimize doing hex_to_color before runtime\n        } else {\n            col = vec3(1.-pow(2., .5*float(-i - 2 + palette.length())), 0., 0.0);\n        }\n    } else {\n        col = .2*vec3(0.3, .3, 0.3);\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}