{
    "Shader": {
        "info": {
            "date": "1449363386",
            "description": "optimisation of hexagonal truchet",
            "flags": 0,
            "hasliked": 0,
            "id": "Xdt3D8",
            "likes": 33,
            "name": "hexagonal truchet ( 352 )",
            "published": 3,
            "tags": [
                "truchet",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 2516
        },
        "renderpass": [
            {
                "code": "// inspired from https://www.shadertoy.com/view/4d2GzV#\n// and https://www.shadertoy.com/view/4dS3Dc\n// still longer than the 2D version :-) https://www.shadertoy.com/view/lst3R7\n\n/**/  // 352 chars   golfed version\n\nvoid mainImage( out vec4 o,  vec2 p ) { o*=0.;\n\t\n\tvec2  R = iResolution.xy, h,f; \n\t\t\n    p = (p - .5*R)*10./R.y - 9.*sin(.1*iTime+vec2(1.6,0));  // demo referential\n\n    // NB: M^-1.H(M.p) converts back and forth to hex grid, which is mostly a tilted square grid\n    h = p+ vec2(.58,.15)*p.y;\n\tf = fract(h);  h -= f;\n\tfloat v = fract((h.x + h.y)/3.);\n    v<.6 ?   v<.3 ?  h  :  ++h  :  h += step(f.yx,f) ; \n\tp -=   h- vec2(.5, .13)*h.y;                     // -1/2, sqrt(3)/2\n    \n\tv = sign( cos(1e5*cos(h.x+9.*h.y)) ),            // rnd (tile) = -1 or 1\n        \n#define L  length( p - v*vec2(                       // dist to neighbor 1,3,5 or 2,4,6\n     o -= o-- \n             -.2 / abs(.5 -  min(min(L-1, 0  )),     // closest neigthborh (even or odd set, dep. s)\n\t\t\t\t\t                 L.5, .87))),    // 1/2, sqrt(3)/2\n\t\t\t\t                     L.5,-.87))));\n}\n/**/\n\n\n\n/*    // 408 chars\n\nvec2 H(vec2 p) {                   // closestHexCenters(p)\n\tvec2  f = fract(p);  p -= f;\n\tfloat v = fract((p.x + p.y)/3.);\n    return  v<.6 ?   v<.3 ?  p  :  ++p  :  p + step(f.yx,f) ; \n}\n\nvoid mainImage( out vec4 o,  vec2 p ) {\n\t\n\tvec2  R = iResolution.xy, h; \n    float Z = 10./R.y;\n\t\t\n    p = (p - .5*R)*Z - 9.*sin(.1*iTime+vec2(1.6,0));  // demo referential\n\n    // NB: M^-1.H(M.p) converts back and forth to hex grid, which is mostly a tilted square grid\n\th = H( p+ vec2(.58,.15)*p.y ); // closestHex( mat2(1,0, .58, 1.15)*p ); // 1/sqrt(3), 2/sqrt(3)\n\tp -=   h- vec2(.5, .13)*h.y;   // p -= mat2(1,0,-.5, .87) * h;          // -1/2, sqrt(3)/2\n    \n\tfloat // s = sign( texture(iChannel0, fract(h/9.)).x -.5 ), \n          // s = sign( fract(1e5*cos(h.x+9.*h.y)) -.5 ), \n             s = sign( cos(1e5*cos(h.x+9.*h.y)) ),   // rnd (tile) = -1 or 1\n        \n#define L(x,y)  length( p - s*vec2(x,y) )            // dist to neighbor 1,3,5 or 2,4,6\n//#define L(a)  length( p - s*sin(a+vec2(1.57,0)) )  // variant L(0), L(2.1), L(-2.1)\n\t      l = min(min(L(-1, 0  ),                    // closest neigthborh (even or odd set, dep. s)\n\t\t\t\t\t  L(.5, .87)),                   // 1/2, sqrt(3)/2\n\t\t\t\t      L(.5,-.87));\n\n    o -=o-- -.2 / abs(l-.5);\n // o -=o- smoothstep(.1+Z, .1, abs(l-.5));              // precise anti-aliasing\n // o -=o- cos(l*25.1);                                  // nice variant 1 by Shane\n // o -=o- vec4(sqrt(2.*cos(vec3(1, 3, 3)*l*6.28)), 1.); // nice variant 2 by Shane\n}\n\n\n/**/\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}