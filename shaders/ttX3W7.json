{
    "Shader": {
        "info": {
            "date": "1556492880",
            "description": "Putting back up some old shaders. Increase the Rays variable for a smoother ride.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttX3W7",
            "likes": 25,
            "name": "Shiny Toy",
            "published": 3,
            "tags": [
                "pathtracing"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 800
        },
        "renderpass": [
            {
                "code": "// Shiny Toy Car by eiffie\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// V2 Sedan Version: simplified car, added quadcop, bushs and the speed, lighting fix. \n\n// Just putting back some old shaders.\n// I removed this while being poisoned with heavy metals by the illuminati!\n// True story. Who knew the world is actually run by psychopathic pedophiles?\n// If it happens to you: cilantro and get out of 5 eyes controlled countries.\nconst int Rays=3, RaySteps=48, maxBounces=6;//up the Rays value for less fuzz\nconst float fov = 4.5,blurAmount = 0.005,maxDepth=11.0,HitDistance=0.001;\nconst vec3 sunColor=vec3(1.0,0.9,0.8),sunDir=vec3(0.35,0.5,-0.35),skyColor=vec3(0.13,0.14,0.15);\nconst vec2 ve=vec2(0.0001,0.0);\nint obj=0;\nfloat tim;\nmat2 rmx;\n#define tex iChannel0\n#define time iTime*0.5\n#define size iResolution\n\nstruct material {vec3 color;float difExp,spec,specExp;};\n\nfloat smin(float a,float b,float k){return -log(exp(-k*a)+exp(-k*b))/k;}//from iq\n#define TAO 6.283\nvoid Rotate(inout vec2 v, float angle) {v*=mat2(cos(angle),sin(angle),-sin(angle),cos(angle));}\nvoid Kaleido(inout vec2 v,float power){Rotate(v,floor(0.5+atan(v.x,-v.y)*power/TAO)*TAO/power);}\n\nfloat DE(in vec3 p0){//carcar\n p0.z+=tim;\n vec3 p=p0+vec3(0.0,1.24,0.0);\n float r=length(p.yz);\n float d= length(max(vec3(abs(p.x)-0.35,r-1.92,-p.y+1.4),0.0))-0.05;\n d=max(d,p.z-1.0);\n p=p0+vec3(0.0,-0.22,0.39);\n p.xz=abs(p.xz)-vec2(0.5300,0.9600);p.x=abs(p.x);\n r=length(p.yz);\n d=smin(d,length(max(vec3(p.x-0.08,r-0.25,-p.y-0.08),0.0))-0.04,8.0);\n d=max(d,-max(p.x-0.165,r-0.24));\n float d2=length(vec2(max(p.x-0.13,0.0),r-0.2))-0.02;\n float d3=length(vec2(max(p.x-0.11,0.0),r-0.18))-0.02;\n if(p0.z<0.0)p.yz=p.yz*rmx;\n else p.yz=rmx*p.yz;\n Kaleido(p.yz,9.0);\n d3=min(d3,length(max(abs(p.xyz)-vec3(0.07,0.0,0.17),0.0))-0.01);\n d=min(min(p0.y,d),min(d2,d3));\n if(obj<0){\n  if(d==d2)obj=1;\n  else if(d==d3)obj=2;\n  else if(d==p0.y)obj=3;\n  else obj=0;\n }\n return d;\n}\n\nmaterial getMaterial( in vec3 p0, inout vec3 nor )\n{//return material properties\n vec3 dif=vec3(0.0);\n if(obj==0){//body\n  if(abs(p0.y-0.6)>0.1 || abs(p0.x)>0.43 || p0.z+tim<-0.9900)dif=vec3(0.9,0.9,0.4);\n  return material(dif,pow(2.0,10.0),1.0,pow(2.0,14.0));\n }else if(obj==1){//tire\n  return material(dif,4.0,0.75,32.0);\n }else if(obj==2){//rim\n  return material(vec3(0.8),pow(2.0,16.0),1.0,2048.0);\n }else {//ground\n  p0.x+=(sin(p0.z*0.1)+sin(p0.z*0.13))*0.5;\n  if(abs(abs(p0.x-1.0)-2.5)<0.05 || (abs(p0.x-1.0)<0.05 && fract(p0.z*0.25)<0.25))dif=vec3(1.0);\n  else if(abs(p0.x-1.0)<3.25-texture(tex,p0.xz*0.5).r*0.2)dif=vec3(0.25);\n  else dif=vec3(0.6,0.5,0.3);\n  vec3 col=min(10.0,abs(p0.x))*0.01*texture(tex,p0.xz*0.05).rgb;\n  nor=normalize(nor+col);\n  dif+=col;\n  return material(dif,3.0,0.5,1024.0);\n }\n}\n\nfloat DEQCop(vec2 z){\n vec2 p=abs(z)-vec2(2.0);\n p*=rmx;\n float d=max(abs(p.x)-1.5,abs(p.y)-0.1);\n p=abs(z*mat2(0.707,-0.707,0.707,0.707));\n d=min(d,length(p)-1.0);\n d=min(d,max(p.x-3.0,p.y-0.1));\n d=min(d,max(p.x-0.1,p.y-3.0));\n return step(0.0,d)*0.75+0.25;\n}\n\nvec3 getBackground( in vec3 ro, vec3 rd, vec3 qcop  ){\n vec2 pt=vec2(rd.x+rd.z*0.6,rd.y*2.0)/iResolution.xy*64.0;\n if(rd.y<texture(tex,pt).r*0.02)return vec3(0.05,0.1,0.025)+max(0.0,rd.y)*vec3(8.0,4.0,0.0);\n vec3 clouds=texture(tex,pt*0.1).rgb*0.05+texture(tex,pt*0.3).rgb*0.025;\n float t=1.0;\n if(ro!=qcop){\n  t=(qcop.y-ro.y)/rd.y;\n  if(t>0.0){\n   pt=ro.xz+rd.xz*t-qcop.xz;\n   t=DEQCop(pt);\n  }else t=1.0;\n }\n\n return t*(clouds+skyColor+rd*0.05+sunColor*(pow(max(0.0,dot(rd,sunDir)),2.0)*0.5+pow(max(0.0,dot(rd,sunDir)),80.0)));\n}\n\nfloat BBox(vec3 p, vec3 rd, vec3 bs)\n{\n vec3 t0=(-bs-p)/rd,t1=(bs-p)/rd;\n vec3 n=min(t0,t1),f=max(t0,t1);\n float tmin=max(n.x,max(n.y,n.z)),tmax=min(f.x,min(f.y,f.z));\n if(tmin<=tmax) return tmin;\n return maxDepth;\n}\n\n//random seed and generator\nvec2 randv2;\nvec2 rand2(){// implementation derived from one found at: lumina.sourceforge.net/Tutorials/Noise.html\n randv2+=vec2(1.0,1.0);\n return vec2(fract(sin(dot(randv2.xy ,vec2(12.9898,78.233))) * 4375.5453),\n  fract(cos(dot(randv2.xy ,vec2(4.898,7.23))) * 2342.631));\n}\n \nvec3 powDir(vec3 nor, vec3  dir, float power) //modified from syntopia's code\n{//creates a biased random sample without penetrating the surface (approx Schlick's)\n float ddn=max(0.01,abs(dot(dir,nor)));\n vec2 r=rand2()*vec2(TAO,1.0);\n vec3 nr=(ddn<0.99)?nor:((abs(nor.x)<0.5)?vec3(1.0,0.0,0.0):vec3(0.0,1.0,0.0));\n vec3 sdir=normalize(cross(dir,nr));\n r.y=pow(r.y,1.0/power);\n vec3 ro= normalize(sqrt(1.0-r.y*r.y)*(cos(r.x)*sdir + sin(r.x)*cross(dir,sdir)*ddn) + r.y*dir);\n return (dot(ro,nor)<0.0)?reflect(ro,nor):ro;\n}\n\nvec3 scene(vec3 ro, vec3 rd) \n{// find color of scene\n vec3 fcol=vec3(1.333),qcop=ro;\n float d,t=min(ro.y/-rd.y,BBox(ro-vec3(0.0,0.22,-tim-0.33),rd,vec3(0.8,0.51,1.75)));//bounding\n int iHitCount=0;\n for(int i=0; i<RaySteps; i++ ){// march loop\n  if(t>=maxDepth)continue;\n  t+=d=DE(ro+t*rd);//march\n  if(abs(d)<HitDistance*t){//hit\n   obj=-1;//turn on material mapping\n   t+=d=DE(ro+t*rd);//move closer while coloring\n   ro+=rd*t;// advance ray position to hit point\n   vec3 nor = normalize(vec3(-DE(ro-ve.xyy)+DE(ro+ve.xyy),\n    -DE(ro-ve.yxy)+DE(ro+ve.yxy),\n    -DE(ro-ve.yyx)+DE(ro+ve.yyx)));// get the surface normal\n   material m=getMaterial( ro, nor );//and material\n   vec3 refl=reflect(rd,nor);//setting up for a new ray direction and defaulting to a reflection\n   rd=powDir(nor,refl,m.difExp);//redirect the ray\n   m.color+=mix(vec3(-0.2,0.0,0.2),vec3(0.2,0.0,-0.2),0.25+0.75*dot(rd,nor));\n   //the next line calcs the amount of energy left in the ray based on how it bounced (diffuse vs specular) \n   fcol*=mix(m.color,vec3(1.0),min(pow(max(0.0,dot(rd,refl)),m.specExp)*m.spec,1.0));\n   t=max(d*5.0,HitDistance);//hopefully pushs thru the surface\n   if(iHitCount++>maxBounces || dot(fcol,fcol)<0.01)t=maxDepth;\n  }\n }\n if(rd.y<0.0){//one more ground hit for good luck\n  obj=3;\n  t=ro.y/-rd.y;//calc the intersection\n  ro+=rd*t;// advance ray position to hit point\n  vec3 nor = vec3(0.0,1.0,0.0);\n  material m=getMaterial( ro, nor );\n  vec3 refl=reflect(rd,nor);//setting up for a new ray direction and defaulting to a reflection\n  rd=powDir(nor,refl,m.difExp);//redirect the ray\n  m.color+=mix(vec3(-0.2,0.0,0.2),vec3(0.2,0.0,-0.2),0.25+0.75*dot(rd,nor));\n  fcol*=mix(m.color,vec3(1.0),min(pow(max(0.0,dot(rd,refl)),m.specExp)*m.spec,1.0)); \n }\n return fcol*getBackground(ro,rd,qcop);//light the scene\n} \n\nmat3 lookat(vec3 fw,vec3 up){\n fw=normalize(fw);vec3 rt=normalize(cross(fw,normalize(up)));return mat3(rt,cross(rt,fw),fw);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n randv2=fract(cos((fragCoord.xy+fragCoord.yx*vec2(100.0,100.0))+vec2(time)*10.0)*1000.0);\n vec3 clr=vec3(0.0);\n for(int iRay=0;iRay<Rays;iRay++){\n  float tim3=time+0.02*float(iRay)/float(Rays);\n  tim=tim3*tim3;//14.4;\n  float tim2=tim3*0.15;\n  float ct=cos(tim*1.25),st=sin(tim*1.25);\n  vec3 ro=vec3(cos(tim2)*vec2(sin(tim2*6.4),cos(tim2*6.4)),sin(tim2))*(6.0+3.0*sin(tim2*3.0));\n  ro.y=ro.y*0.2+2.5;\n  float focusDistance=max(length(ro)-0.1,0.01);\n  mat3 rotCam=lookat(-ro+texture(tex,vec2(tim2,tim2*1.3)).rgb*0.06+vec3(cos(tim2*0.75),sin(tim2*0.4),sin(tim2*0.6))*0.5,vec3(0.0,1.0+cos(tim2*25.0)*0.125,0.125*sin(tim2*25.0)));\n  ro.z-=tim;\n  rmx=mat2(ct,st,-st,ct);\n  vec2 pxl=(-size.xy+2.0*(fragCoord.xy+rand2()))/size.y;\n  vec3 er = normalize( vec3( pxl.xy, fov ) );\n  vec3 go = blurAmount*focusDistance*vec3( -1.0 + 2.0*rand2(), 0.0 );\n  vec3 gd = normalize( er*focusDistance - go );gd.z=0.0;\n  clr+=scene(ro+rotCam*go,normalize(rotCam*(er+gd)));\n }\n clr/=vec3(Rays);\n fragColor = vec4(sqrt(clr)*1.4-0.25,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}