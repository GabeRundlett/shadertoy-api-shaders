{
    "Shader": {
        "info": {
            "date": "1561212206",
            "description": "combining several layers of jittered dots in grids.\nLeft: dots Ã© splats are constant size in screen space.\nTop: splat texture around points (sparse convolution).",
            "flags": 0,
            "hasliked": 0,
            "id": "tt23WK",
            "likes": 11,
            "name": "infinite zoom",
            "published": 3,
            "tags": [
                "zoom",
                "sampling",
                "screenspace"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 880
        },
        "renderpass": [
            {
                "code": "bool    CONST=false; // 0: splats follow zoom  1: splats of constant size\nbool    TEXT=false;  // 0: dots            1: texture splats\n#define N     3      // neighborhood\nvec2 R;\n\n#define hash2(p) fract(sin( (p) * mat2(127.1,311.7,  269.5,183.3))*43758.5453123)\n#define hash3(p) fract(sin( (p) * mat3(127.1,311.7,74.7,  269.5,183.3,246.1, 113.5,271.9,124.6))*43758.5453123)\n\nvec4 points(vec2 U) {\n    vec2 C = floor(U), X = fract(U), D,P;\n    vec4 v = vec4(0);\n    float r, w = fwidth(length(U))*R.y/360.;\n    for (int k=0; k<N*N; k++) {     // visit neighbor cells\n        D = vec2(k%N-N/2,k/N-N/2);\n        P = D+hash2(C+D) -X;        // distance to local dot\n\n        r = CONST \n            ? 3.*w  // splats of constant size\n            :.2;             // splats follow zoom\n\n        v += TEXT                   // add splat\n               ?   smoothstep(4.*r,0.,length(P))\n                   * texture(iChannel0,.5+.05*P/r)\n               : vec4(smoothstep(r,0.,length(P)));\n    }\n    // only if we want to compensate big start size by inv weigth\n    if (CONST) w *= 3./.2, v /= w*w;\n    return v;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    R = iResolution.xy;\n    if (U.x==R.x/2.-.5) { O = vec4(1,0,0,1); return; } // red separator\n    U = 10.* ( 2.*U - R ) / R.y;\n    CONST = U.x < 0.;\n    TEXT  = U.y > 0.;\n    O = vec4(0);    \n    \n    float scale = fract(iTime/2.);  // as long as seeds are intical\n    U *= exp2(floor(scale))/exp2(scale);\n#if 0                               // 2 layers\n    O = mix( points(U), points(2.*U), fract(scale) );\n#else                               // many layers\n    for (float i=-1.; i<=2.; i++)\n        O += points( exp2(i)*U ) * smoothstep(1.,0.,abs(scale-i)/2.);\n#endif\n    \n    O = pow( O, vec4(1./2.2) );     // to sRGB\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}