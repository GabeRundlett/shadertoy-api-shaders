{
    "Shader": {
        "info": {
            "date": "1550199295",
            "description": " Based on this video by 3Blue1Brown: https://youtu.be/brU5yLm9DZM\n",
            "flags": 0,
            "hasliked": 0,
            "id": "wsB3D3",
            "likes": 19,
            "name": "Colliding Blocks Calculate Pi",
            "published": 3,
            "tags": [
                "math",
                "pi",
                "physics",
                "block"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 748
        },
        "renderpass": [
            {
                "code": "//Constants\nfloat pi = atan(1.0)*4.0;\n\n//System Parameters\nfloat timescale = 0.1;\n\n//m1 = 100^(n-1) where n = # of pi digits \n//Precision issues show up at 4 digits (100^3).\nfloat m1 = 10000.0; \nfloat m2 = 1.0;\n\nfloat m1size = 0.6;\nfloat m2size = 0.2;\n\nfloat m1pos = 0.80;\nfloat m2pos = 0.60;\n\n//Rendering\nvec4 gridcol1 = vec4(0.2);\nvec4 gridcol2 = vec4(0.4);\nfloat gridsize = 10.0;\n\nvec4 m1col = vec4(0.5,0.5,0.9,0);\nvec4 m2col = vec4(0.8,0.6,0.4,0);\n\nvec4 textcol = vec4(1);\nvec2 textsize = vec2(0.2);\n\nvec2 shadowoffs = vec2(0.03);\n\n//Cartesian coordinates to polar coordinates.\nvec2 cart2pol(vec2 uv)\n{\n\treturn vec2(length(uv), atan(uv.y, uv.x));\n}\n\n//Polar coordinates to cartesian coordinates.\nvec2 pol2cart(vec2 ra)\n{\n    return ra.x * vec2(cos(ra.y), sin(ra.y));\n}\n\n//Repeat (mod) x in range -r/2 to +r/2\nfloat rep(float x, float r)\n{\n\treturn mod(x + r/2.0, r) - r/2.0;   \n}\n\n//Print integer v\nfloat PrintInt(vec2 p, float v, vec2 uv, vec2 size)\n{\n    uv -= p;\n    v = abs(floor(v));\n    vec2 t = floor(uv / size);\n    float ox = (1.0 - (size.x/size.y))/2.;\n    uv = mod(uv, size) / size.y;\n    uv.x += ox;\n    float dl = max(1.0,1.0 + floor(log(v) / log(10.0)));\n    if(t.y == 0.0 && t.x >= 0.0 && t.x < dl)\n    {\n        float d = mod(floor(v / pow(10.0, dl - t.x - 1.0)), 10.0);\n        \n        return texture(iChannel0, ((uv + vec2(d,12))/16.0), -100.0).r;\n    }\n    return 0.0;\n}\n\n//Simulate a reflecting ray of light by repeating/mirroring UVs.\n//Returns the x position of m1 (x) and m2 (y) at time t.\n//Count = the # of collisions at time t.\nvec2 simulate(float t, out float count)\n{\n    vec2 uv = vec2(m1pos - t, m2pos - m2size);\n    uv *= sqrt(vec2(m1, m2)); \n    \n    //The angle pf the line to mirror the UVs about.\n    float refang = atan(sqrt(m2), sqrt(m1));\n    \n    vec2 pol = cart2pol(uv);\n    count = floor(pol.y / refang); //Number of collisions.\n    \n    pol.y = rep(pol.y, refang*2.0); //Polar repeat UVs by refang/2.\n    vec2 uvr = pol2cart(pol);\n    uvr.y = abs(uvr.y); //Mirror repetitions about center.\n    \n    uvr /= sqrt(vec2(m1, m2));\n    \n    return uvr + m2size; \n}\n\nfloat dfSquare(vec2 pos, float size, vec2 uv)\n{\n    uv = abs(uv - pos);\n\treturn (size/2.0) - max(uv.x, uv.y); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 res = iResolution.xy/iResolution.y;\n    float ps = 1.0 / iResolution.y;\n    \n    float count = 0.0;\n    vec2 p1p2 = simulate(iTime*timescale, count);\n    \n    vec2 m1uv = vec2(p1p2.x + m1size/2.0, m1size/2.0);\n    vec2 m2uv = vec2(p1p2.y - m2size/2.0, m2size/2.0);\n    \n    vec2 grid = abs(fract(uv*gridsize)-0.5);\n    \n    //Grid background\n    vec4 col = mix(gridcol1,\n                   gridcol2,\n                   smoothstep(0.5-ps*gridsize,0.5, max(grid.x, grid.y))\n                   );\n    \n    //Shadows\n    col *= mix(1.0, \n               0.5, \n               smoothstep(0.0, ps, dfSquare(m1uv-shadowoffs, m1size, uv))\n             );\n    \n    col *= mix(1.0, \n               0.5, \n               smoothstep(0.0, ps, dfSquare(m2uv-shadowoffs, m2size, uv))\n             );\n    \n    col *= mix(1.0, \n               0.5, \n               PrintInt(vec2(0, res.y - textsize.y)-shadowoffs, count, uv, textsize)\n             ); \n    \n    col *= texture(iChannel1,uv,0.5).rrrr * 0.2 + 0.8;\n    \n    //Blocks/Text\n    col = mix(col, \n              m1col * (texture(iChannel1,uv-m1uv,0.5).rrrr * 0.2 + 0.8), \n              smoothstep(0.0, ps, dfSquare(m1uv, m1size, uv))\n             );\n    \n    col = mix(col, \n              m2col * (texture(iChannel1,uv-m2uv,0.5).rrrr * 0.2 + 0.8), \n              smoothstep(0.0, ps, dfSquare(m2uv, m2size, uv))\n             );\n    \n    col = mix(col, \n              textcol, \n              PrintInt(vec2(0, res.y - textsize.y), count, uv, textsize)\n             ); \n    \n    fragColor = vec4(col);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}