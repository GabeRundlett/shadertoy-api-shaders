{
    "Shader": {
        "info": {
            "date": "1446946486",
            "description": "A spirograph plotter using the discard bug as a crude backbuffer.\nA framerate of 60 fps is assumed for the lines to be drawn properly (an iFrameTime input would be useful).",
            "flags": 0,
            "hasliked": 0,
            "id": "4l2SWc",
            "likes": 21,
            "name": "Spirograph Plotter",
            "published": 3,
            "tags": [
                "graph",
                "plot",
                "spirograph",
                "discard"
            ],
            "usePreview": 0,
            "username": "Flyguy",
            "viewed": 2202
        },
        "renderpass": [
            {
                "code": "#define polar(l,a) (l*vec2(cos(a),sin(a)))\n\nfloat tau = atan(1.0)*8.0;\n\nfloat timeScale = 1.0;\n\nfloat distLine(vec2 p0,vec2 p1,vec2 uv)\n{\n\tvec2 dir = normalize(p1 - p0);\n\tuv = (uv - p0) * mat2(dir.x, dir.y,-dir.y, dir.x);\n\treturn distance(uv, clamp(uv, vec2(0), vec2(distance(p0, p1), 0)));   \n}\n\n//Spirograph function (change these numbers to get different patterns)\nvec2 spirograph(float t)\n{\n    return polar(0.30, t * 1.0) \n         + polar(0.08, t *-4.0)\n         + polar(0.06, t *-8.0)\n         + polar(0.05, t * 16.0)\n         + polar(0.02, t * 24.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float frameTime = (1.0 / 60.0) * timeScale;\n\n    vec2 aspect = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y - aspect/2.0;\n    \n    float lineRad = 1.0 / iResolution.y;\n    \n    float curTime = iTime * timeScale;\n    float lastTime = curTime - frameTime;\n    \n    float dist = distLine(spirograph(curTime), spirograph(lastTime), uv);\n    \n    vec3 col = vec3(0.0);\n    \n    //Click to reset\n    if(iMouse.w > 0.0)\n    {\n\t\tcol = vec3(0.0);\n    }\n    else\n    {\n        if(dist < lineRad)\n        { \n            col = vec3(1.0);\n        }\n        else\n        {\n            discard;\n        }        \n    }\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}