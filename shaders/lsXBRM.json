{
    "Shader": {
        "info": {
            "date": "1495342282",
            "description": "looks pretty cool",
            "flags": 32,
            "hasliked": 0,
            "id": "lsXBRM",
            "likes": 2,
            "name": "Neat Julia",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "julia"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 564
        },
        "renderpass": [
            {
                "code": "const float pi = 3.1415926535;\nvec2 cSqr(vec2 c){return vec2(c.x * c.x - c.y * c.y, 2. * c.y * c.x);}\nvec2 cMult(vec2 a, vec2 b){return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);}\nvec2 f(vec2 z){return cMult(z, cMult(z, (cSqr(cSqr(z)))));}\n\nfloat julia(vec2 xy){\n    vec2 z = xy;\n    vec2 c = vec2(-.71, -.49);\n    c += iMouse.xy/iResolution.xy;\n    float t = 1.6 + .05 * sin(iTime);\n    //c.x += .001 * cos(t);\n    //c.y += .001 * sin(t);\n    for(int n = 0; n < 50; n++){\n        z = f(z);\n        z += c;\n        if(dot(z, z) > 16.){\n        \treturn float(n);\n        }\n    }\n    return 50.0;\n}\n\nvec3 lab2rgb(vec3 lab){\n\n  float y = (lab[0] + 16.0) / 116.0;\n  float x = lab[1] / 500.0 + y;\n  float z = y - lab[2] / 200.0;\n  float r;\n  float g;\n  float b;\n\n  x = 0.95047 * ((x * x * x > 0.008856) ? x * x * x : (x - 16.0/116.0) / 7.787);\n  y = 1.00000 * ((y * y * y > 0.008856) ? y * y * y : (y - 16.0/116.0) / 7.787);\n  z = 1.08883 * ((z * z * z > 0.008856) ? z * z * z : (z - 16.0/116.0) / 7.787);\n\n  r = x *  3.2406 + y * -1.5372 + z * -0.4986;\n  g = x * -0.9689 + y *  1.8758 + z *  0.0415;\n  b = x *  0.0557 + y * -0.2040 + z *  1.0570;\n\n  r = (r > 0.0031308) ? (1.055 * pow(r, 1.0/2.4) - 0.055) : 12.92 * r;\n  g = (g > 0.0031308) ? (1.055 * pow(g, 1.0/2.4) - 0.055) : 12.92 * g;\n  b = (b > 0.0031308) ? (1.055 * pow(b, 1.0/2.4) - 0.055) : 12.92 * b;\n\n  return vec3(max(0.0, min(1.0, r)), max(0.0, min(1.0, g)), max(0.0, min(1.0, b)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = 2. * fragCoord.xy / iResolution.y - vec2(iResolution.x / iResolution.y, 1.);\n    xy *= 1.2;\n    float j = julia(xy);\n    if(j == 50.0) {\n        fragColor = texture(iChannel0, fragCoord.xy/iResolution.xy);\n    }\n    else fragColor = vec4(0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int numWaves = 5;\nconst float numStripes = 2.0;\nconst float numFreqs = 8.0;\nconst float meanFreq = 2.0;\nconst float stdDev = 3.0;\nconst float period = 4.0;\nconst float pi = 4.0 * atan(1.0);\nconst float pi2 = 2.0 * pi;\nconst float ln2 = log(2.0);\nconst float mean = meanFreq * .69314718;\n\nfloat wavething(int n, float x){\n    float l = ln2 * float(n) + log(x);\n    l -= mean;\n    return exp(-l * l / stdDev) / 2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = exp2(-fract(iTime / period));\n    float sum1 = 0.0;\n    for(int n = 0; n < int(numFreqs); n++){\n        sum1 += wavething(n, scale);\n    }\n    vec2 m = iMouse.xy == vec2(0) ? vec2(0) : (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n    if(iMouse.xy == vec2(0.0)) m = vec2(0.0);\n    vec2 xy = pi2 * numStripes\n        * ((2.0 * fragCoord - iResolution.xy) / iResolution.y - m);\n    \n    float sum2 = 0.0;\n    for(int n = 0; n < numWaves; n++){\n        float theta = pi * float(n) / float(numWaves);\n        vec2 waveVec = vec2(cos(theta), sin(theta));\n        float phase = dot(xy, waveVec);\n        for(int k = 0; k < int(numFreqs); k++){\n            sum2 += cos(phase * scale * exp2(float(k))) * wavething(k, scale);\n        }\n    }\n    fragColor = vec4(sum2 / sum1);\n    float r = length(xy);\n    fragColor.x *= .5 + .5 * sin(-iTime * .25 + r);\n    fragColor.y *= .5 + .5 * cos(iTime * .25 + r);\n    xy = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    fragColor.rgb += 32.0*pow(length(xy), 8.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}