{
    "Shader": {
        "info": {
            "date": "1627299682",
            "description": "I'm happy with how it turned out. I had to figure out a signed dist function for cube edges. I also had a lot of trouble (with rotations and things) getting the cube on the screen. I eventually \"resorted\" to raymarching and it worked pretty well!",
            "flags": 0,
            "hasliked": 0,
            "id": "7tBXRw",
            "likes": 5,
            "name": "space cube w twinkling stars",
            "published": 3,
            "tags": [
                "raymarch",
                "cube",
                "art",
                "signeddistance"
            ],
            "usePreview": 0,
            "username": "xertrov",
            "viewed": 318
        },
        "renderpass": [
            {
                "code": "#define u_resolution iResolution\n#define u_mouse iMouse\n#define u_time iTime\n#define gl_FragColor fragColor\n\n#define PI 3.141592653589\n#define TAU 6.28318530718\n\n#define S(a, b, t)smoothstep(a, b, t)\n\n#define BLACK vec3(0.0)\n#define WHITE vec3(1.0)\n\n#define GROW_SHRINK 0.3\n#define ROTATE_IDLE 0.2\n#define BASE_TWINKLE 99.0\n#define STAR_RARITY 0.95\n// set to 5k+ for a hyperspace bungee; curious noise patterns at 2000.\n#define BG_SCALE 100.0\n\n/* lib/util stuff */\n\nfloat N21b(vec2 p) {  // from an art of code video i think\n  vec3 a = fract(vec3(p.xyx) * vec3(213.897, 653.453, 253.098));\n  a += dot(a, a.yzx + 79.76);\n  return fract((a.x + a.y) * a.z);\n}\n\n\nfloat sdBox(in vec3 p, in vec3 b) {\n  vec3 d = abs(p) - b;\n  return length(max(d, 0.0)) + min(max(d.z, max(d.x, d.y)), 0.0);\n}\n\n\nvec2 best2(vec3 p) {\n  vec2 r = p.x > p.y ? vec2(p.x, p.y) : vec2(p.y, p.x);\n  if (p.z > r.x) { return vec2(p.z, r.x);}\n  if (p.z > r.y) { return vec2(r.x, p.z);}\n  return r;\n}\n\nfloat minOf(vec2 v) {\n  return min(v.x, v.y);\n}\n\nvec2 sinCos(in vec2 ab) {\n  return vec2(sin(ab.x), cos(ab.y));\n}\n\n// roll from XY to XZ or YZ (0 no roll, 1=XZ, 2=YZ)\nmat3 rot3XY(float angle, int roll) {\n  float s = sin(angle), c = cos(angle);\n  mat3 r = mat3(c, - s, 0.0, s, c, 0.0, 0.0, 0.0, 1.0);\n  if (roll == 1) {\n    r = mat3(r[0].xzy, r[2].xzy, r[1].xzy);\n  } else if (roll == 2) {\n    r = mat3(r[2].zxy, r[0].zxy, r[1].zxy);\n  }\n  return r;\n}\n\n\nvec3 rainbow(vec2 uv, float time) {\n  return sin(vec3(time) + uv.xyx * vec3(1.0, 1.0, 1.0) + vec3(0, 2, 4)) * 0.49 + 0.5;\n}\n\n/* meat */\n\nfloat sdBoxEdge(in vec3 p, in vec3 b) {\n  return length(best2(abs(p) - b));  // rly elegant\n}\n\nvec4 getIDGV(vec2 uv, float scale) {\n  vec2 id = floor(uv * scale);\n  vec2 gv = fract(uv * scale) - 0.5;\n  return vec4(id, gv);\n}\n\nfloat mkNoise(vec2 uv, float t, float minDS) {\n  float scale = fwidth(uv.x) * 100.0 * BG_SCALE;\n  vec4 idgv = getIDGV(uv, scale);\n  vec2 id = idgv.xy;\n  vec2 gv = idgv.zw;\n  float n = N21b(id);\n  float transFreq = BASE_TWINKLE * n + 0.01;\n  t -= 3877.627 * n;\n  float transProgress = fract(t * transFreq);\n  float transId = floor(t * transFreq);\n  float lastIdOffset = N21b(vec2(n, transId - 1.0));\n  float idOffset = N21b(vec2(n, transId));\n  float nextIdOffset = N21b(vec2(n, transId + 1.0));\n  float noiseThresh = STAR_RARITY;\n  float noise = S(1.0, 0.0, transProgress) * S(noiseThresh, 1.0, N21b(id + lastIdOffset));\n  noise += S(noiseThresh, 1.0, N21b(id + idOffset));\n  noise += S(0.0, 1.0, transProgress) * S(noiseThresh, 1.0, N21b(id + nextIdOffset));\n  return S(0.0, 0.2, minOf(0.5 - abs(gv))) * (noise * S(0.1, 2.0, minDS));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (gl_FragCoord.xy - .5 * u_resolution.xy) / u_resolution.y;\n  vec2 mouse = (u_mouse.xy - 0.5 * u_resolution.xy) / u_resolution.y;\n  float t = u_time / 9.0;\n  vec3 col = BLACK;\n  uv *= 4.0;\n\n  float fw = max(fwidth(uv.x), fwidth(uv.y));\n\n  float grow_shrink = GROW_SHRINK * sin(t * PI) * 0.1 + 0.9;\n\n  vec3 s = vec3(1.0, 1.0, 1.0) * grow_shrink;\n  vec3 p = vec3(uv, - 4.0);\n\n  mat3 boxTrans = rot3XY(mouse.x * TAU / 2.0, 1) * rot3XY(mouse.y * TAU / 2.0, 2);\n  boxTrans *= rot3XY(t * 13.0 / 17.0 * ROTATE_IDLE + PI / 3.0, 0) * rot3XY(t * 13.0 / 11.0 * ROTATE_IDLE - 17.0 * PI / 7.0, 2);\n\n  // raymarch over the orthogonal scene\n  vec2 sc = sinCos(vec2(t));\n  vec3 rd = normalize(vec3(0.0, 0.0, 1.0));\n  float d = 0.0, dS = 999.0, minDS = 999.0, edgeDist;\n  float steps = 0.0;\n  for(int i = 0; i < 1000; i ++ ) {\n    steps ++ ;\n    edgeDist = sdBoxEdge(p * boxTrans, s) - 0.01;\n    dS = edgeDist;\n    //dS = min(edgeDist, sdBox(p*boxTrans, s));\n    minDS = min(minDS, dS);\n    p = p + dS * rd;\n    d += dS;\n    if (dS < 0.0001 || d > 100.0)break;\n  }\n\n  float noise = mkNoise(uv * grow_shrink, t, minDS);\n  col += noise;\n  col += S(0.01, 0.0, minDS) * WHITE;\n  col += S(0.023, 0.005, minDS) * rainbow(uv, u_time + 2.0);\n\n  gl_FragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}