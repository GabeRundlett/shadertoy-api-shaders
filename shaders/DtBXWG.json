{
    "Shader": {
        "info": {
            "date": "1676482402",
            "description": "It's very slow! Click the screen to play with it.\n\nInfluenced by: \nhttp://www.karlsims.com/rd.html\nhttps://www.shadertoy.com/view/MlByzR",
            "flags": 32,
            "hasliked": 0,
            "id": "DtBXWG",
            "likes": 25,
            "name": "Reaction Diffusion ðŸª±",
            "published": 3,
            "tags": [
                "worms",
                "reactiondiffusion"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 px )\n{\n    float k = 1. / res.y;\n\n    // Uncomment to zoom (tracks mouse incorrectly)\n    float sc = 0.6;\n    //px = sc * (px - 0.5 * res) + 0.5 * res;\n    \n    vec4 col1 = tex(ch0, px);\n    vec4 col2 = tex(ch0, px - vec2(5));\n  \n    // Messy color stuff\n    vec4 col = vec4(3. * col1.g - 1.2 * col2.r);\n    if (col.g > 0.)\n        col.rgb *= 0.8 + 0.2 * cos(2.*pi*(col.g + vec3(0,1,2)/3.));\n    col = tanh(vec4(3.5, 1, 1, 1) * col);\n    float ab = 2. * abs(col.g-col2.g);\n    col = clamp(col, 0., 1.);\n    col += vec4(pow(ab, 5.));\n    \n    col = mix(col, vec4(1), 0.25 * (1.-col.r));\n\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define ch0 iChannel0\n\n#define Dir(a) vec2(cos(a), sin(a))\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define res iResolution.xy\n\n#define pi 3.14159\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec4 tex(sampler2D ch, in vec2 q) {\n    ivec2 p = ivec2(q);\n    ivec2 r = ivec2(vec2(textureSize(ch, 0)));\n    p = (p+r) % r;\n    return texelFetch(ch, p, 0 );\n}\n\nvec4 calc(sampler2D ch, vec2 px, vec2 rs, float t) {\n    float dt = 2.; // Delta t (large values break)\n    \n    vec4 c0 = tex(ch, px);\n    vec4 av = vec4(0);  // Average neighbor value\n    vec4 mx = vec4(0);  // Max neighbor value (unused)\n     \n    float n = 3.;\n    for (float i = -n; i <= n; i++)\n    for (float j = -n; j <= n; j++) {\n        if (vec2(i, j) != vec2(0)) {\n            vec4 cell = tex(ch, px + vec2(i, j));\n            av += cell;\n            mx = max(mx, cell);\n        }\n    }\n    av /= (2.*n+1.)*(2.*n+1.) - 1.;\n    \n    vec4 lap = av - c0; // Laplacian function (maybe)\n    //c0 += 0.008 * abs(av-mx);// mix(c0, 2. * abs(av-mx), 0.1); \n    \n    float A = c0.r;\n    float B = c0.g;\n    \n    float da = 0.65; // Diffusion rates\n    float db = 0.25;\n    float f = .075;  // Feed rate\n    float k = .062;  // Kill rate\n    \n    // (should be db*lap.g*B !!)\n    vec4 c = vec4(0);\n    c.r = A + (da*lap.r*A - A*B*B + f*(1.-A)) * dt;\n    c.g = B + (db*lap.g*A + A*B*B - (k+f)*B ) * dt;\n    return c;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 px )\n{\n    vec4 c = calc(ch0, px, res, iTime);\n    \n    if (iFrame < 1) {\n        c.r = 1.;\n        c.g = 0.;\n        c.g = step(length(px - 0.5 * res), 100.);\n        \n        c.r += h21(px + mod(iDate[3], 1000.)) - 0.5;\n    }\n    \n    if (iMouse.z >0. && length(iMouse.xy - px) < 32.)\n        c.g = 1.;\n\n    c = clamp(c, 0., 1.);\n    fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 px )\n{\n    vec4 c = calc(ch0, px, res, iTime);\n    c = clamp(c, 0., 1.);\n    fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 px )\n{\n    vec4 c = calc(ch0, px, res, iTime);\n    c = clamp(c, 0., 1.);\n    fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 px )\n{\n    vec4 c = calc(ch0, px, res, iTime);\n    c = clamp(c, 0., 1.);\n    fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}