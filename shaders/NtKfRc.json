{
    "Shader": {
        "info": {
            "date": "1664954284",
            "description": "ellipse",
            "flags": 0,
            "hasliked": 0,
            "id": "NtKfRc",
            "likes": 5,
            "name": "Ellipses Ordered and Noisy",
            "published": 3,
            "tags": [
                "ellipse"
            ],
            "usePreview": 0,
            "username": "rubioh",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "# define PI 3.14159265359\nvec2 hash(vec2 x){\n    vec2 p  = vec2(\n                dot(x, vec2(3451.4327, 2744.749)),\n                dot(x, vec2(2453.4327, 3218.127)));\n    return fract( sin(p)*3745.4);\n}\n\n/*\nfloat make_ellipse2(vec2 uv, vec2 ab, float amp, float angle){\n    \n    float width = .05;\n    float ca = cos(angle);\n    float sa = sin(angle);\n    float a2 = ab.x*ab.x;\n    float b2 = ab.y*ab.y;\n    float a2b2 = a2*b2;\n\n    float linear_term = 2.*ca*sa*(b2 - a2)*uv.x*uv.y/a2b2;\n    float quadratic_x = (sa*sa*a2 + ca*ca*b2)*uv.x*uv.x/a2b2;\n    float quadratic_y = (ca*ca*a2 + sa*sa*b2)*uv.y*uv.y/a2b2;\n    float n = (1.-smoothstep(-0.005, 0., quadratic_x+linear_term+quadratic_y - amp -width))*\n              smoothstep(0., 0.005, quadratic_x+linear_term+quadratic_y  - amp);\n    return n;\n}\n*/\n\nfloat make_ellipse(vec2 U, vec2 ab, float amp, float a) {\n\n    vec2 A = vec2( cos(a), sin(a) ), A2 = A*A,\n        B2 = ab*ab,\n         C = A*U;\n\n    float a2b2 = B2.x*B2.y,\n             c = 2.* C.x*C.y* (B2.y-B2.x) / a2b2;\n             \n    vec2 Q = mat2(A2.y,A2.x, A2) * B2  * U*U / a2b2;\n\n    return smoothstep( 10./iResolution.y, 0., abs( Q.x+ Q.y + c - amp ) );\n}\n\n\nmat2 rotation_matrix(float angle){\n    return mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( 2.*fragCoord.xy - iResolution.xy ) / iResolution.y;\n    uv /= 1.5;\n    \n    // N ellipse\n    float N = 11.;\n    \n    // Time varying pixel color\n    vec3 col;\n    vec3 tmp_color = vec3(1., 1., 1.);\n    vec2 ab = vec2(.3+.2*cos(iTime), .2);\n    \n    \n    for (int i=0; i<int(N); i++){\n        vec2 st = uv;\n        float angle = (2.*PI*float(i)/N)+iTime+.1;\n        mat2 rot = rotation_matrix(angle);\n        \n        vec2 tmp_ab = mix(ab, vec2(.2, .2)+0.05*hash(vec2(float(i), angle)), smoothstep(0.4,0.6, cos(iTime*.1)));\n        \n        st += rot*mix(vec2(.1, .1), vec2(0., 0.)+0.05*hash(vec2(angle, float(i))), smoothstep(0.3,0.7, abs(cos(iTime*.1))));\n        col += vec3(1.,0.,0.)*make_ellipse(st, tmp_ab, .3+.3*cos(iTime*2.), angle);\n    }\n    \n        for (int i=0; i<int(N); i++){\n        vec2 st = uv;\n        float angle = (2.*PI*float(i)/N)+iTime;\n        mat2 rot = rotation_matrix(angle);\n        \n        vec2 tmp_ab = mix(ab, vec2(.2, .2)+0.05*hash(vec2(float(i), angle)), smoothstep(0.4,0.6, cos(iTime*.1)));\n        \n        st += rot*mix(vec2(.1, .1), vec2(0., 0.)+0.05*hash(vec2(angle, float(i))), smoothstep(0.3,0.7, abs(cos(iTime*.1))));\n        col += vec3(0.,1.,0.)*make_ellipse(st, tmp_ab, .3+.3*cos(iTime*2.), angle);\n    }\n    \n        for (int i=0; i<int(N); i++){\n        vec2 st = uv;\n        float angle = (2.*PI*float(i)/N)+iTime-.1;\n        mat2 rot = rotation_matrix(angle);\n        \n        vec2 tmp_ab = mix(ab, vec2(.2, .2)+0.05*hash(vec2(float(i), angle)), smoothstep(0.4,0.6, cos(iTime*.1)));\n        \n        st += rot*mix(vec2(.1, .1), vec2(0., 0.)+0.05*hash(vec2(angle, float(i))), smoothstep(0.3,0.7, abs(cos(iTime*.1))));\n        col += vec3(0.,0.,1.)*make_ellipse(st, tmp_ab, .3+.3*cos(iTime*2.), angle);\n    }\n    // Output to screen\n        \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}