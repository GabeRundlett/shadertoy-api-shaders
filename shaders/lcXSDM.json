{
    "Shader": {
        "info": {
            "date": "1705480425",
            "description": "miss summer\n\nclick and drag to rotate/scale the ground plane",
            "flags": 32,
            "hasliked": 0,
            "id": "lcXSDM",
            "likes": 40,
            "name": "Missing Summer",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "glow",
                "toon",
                "stylized"
            ],
            "usePreview": 0,
            "username": "cmzw",
            "viewed": 845
        },
        "renderpass": [
            {
                "code": "#define CHROMATIC_ABERRATION\n#define STRENGTH .002\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 uv = I / iResolution.xy;\n    O = texture(iChannel0, uv);\n    \n    #ifdef CHROMATIC_ABERRATION\n    float r,g,b;\n    \n    r = texture(iChannel0, uv-vec2(-STRENGTH,0.)).r;\n    g = texture(iChannel0, uv).g;\n    b = texture(iChannel0, uv-vec2(STRENGTH,0.)).b;\n    \n    O = vec4(r,g,b,0.);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 r(vec2 p, float a) { return p*mat2(cos(a), sin(a), -sin(a), cos(a)); }\n\n// https://projects.blender.org/blender/blender/src/branch/main/source/blender/gpu/shaders/material/gpu_shader_material_map_range.glsl#L137\nfloat map(float v, float fromMin, float fromMax, float toMin, float toMax)\n{\n    return toMin + ((v - fromMin) / (fromMax - fromMin)) * (toMax - toMin);\n}\n\n// https://easings.net/\nfloat sineInOut(float t) { return -0.5 * (cos(3.14159 * t) - 1.0); }\n\n// https://github.com/RodZill4/material-maker/blob/master/addons/material_maker/nodes/fast_blur_shader.mmg\nvec4 blur(vec2 uv, sampler2D sampler, vec2 scale, float sigma) {\n\tvec4 O = vec4(0.0);\n\tfloat samples = sigma * 4.0; \n\tint LOD = max(0, int(log2(float(samples)))-3);\n\tint sLOD = 1 << LOD;\n\tint s = max(1, int(samples/float(sLOD)));\n\tfloat sum = 0.0;\n\tfor (int i = 0; i < s*s; i++) {\n\t\tvec2 d = vec2(float(i%s), float(i/s))*float(sLOD) - 0.5*float(samples);\n\t\tvec2 dd = d / sigma;\n\t\tfloat g = exp(-.5*dot(dd,dd))/(6.28318*sigma*sigma);\n\t\tO += g * textureLod(sampler, uv + 1./scale * d, float(LOD));\n\t\tsum += g;\n\t}\n\treturn O / sum;\n}\n\n// https://www.shadertoy.com/view/WdjSW3\nvec3 Tonemap_ACES(vec3 x) {\n    // Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return (x * (a * x + b)) / (x * (c * x + d) + e);\n}\n\n// https://iquilezles.org/articles/smin/\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0)/k;\n    return min( a, b ) - h*h*k*(0.25);\n}\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n// https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n// https://www.shadertoy.com/view/4djSRW\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n// https://www.shadertoy.com/view/ldl3W8\nvec3 voronoi( in vec2 x, float s )\n{\n    vec2 ip = floor(x);\n    vec2 fp = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash22( ip + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - fp;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash22( ip + g );\n        vec2 r = g + o - fp;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        \n        md = smin( md, dot( 0.5*(mr+r), normalize(r-mr) ) , s);\n    }\n\n    return vec3( md, mr );\n}\n\n\n// https://www.shadertoy.com/view/Xd23Dh\nfloat voronoise( in vec2 p )\n{\n\tfloat k = 1.0+63.0*pow(1.0-1.0,6.0);\n\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n\tvec2 a = vec2(0.0,0.0);\n    for( int y=-2; y<=2; y++ )\n    for( int x=-2; x<=2; x++ )\n    {\n        vec2  g = vec2( x, y );\n\t\tvec3  o = hash32( i + g )*vec3(1.0);\n\t\tvec2  d = g - f + o.xy;\n\t\tfloat w = pow( 1.0-smoothstep(0.0,1.414,length(d)), k );\n\t\ta += vec2(o.z*w,w);\n    }\n\t\n    return a.x/a.y;\n}\n\n// https://www.shadertoy.com/view/ldB3zc\nvec4 voronoi_smooth( in vec2 x, float w, float offset)\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n\tvec4 m = vec4( 8.0, 0.0, 0.0, 0.0 );\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n        vec2 o = hash22( n + g );\n\t\t\n\t\t// animate\n        o = 0.5 + 0.5*sin( offset + 6.2831*o );\n\n        // distance to cell\t\t\n\t\tfloat d = length(g - f + o);\n\t\t\n        // cell color\n\t\tvec3 col = 0.5 + 0.5*sin( hash11(dot(n+g,vec2(7.0,113.0)))*2.5 + 3.5 + vec3(2.0,3.0,0.0));\n        // in linear space\n        col = col*col;\n        \n        // do the smooth min for colors and distances\t\t\n\t\tfloat h = smoothstep( -1.0, 1.0, (m.x-d)/w );\n\t    m.x   = mix( m.x,     d, h ) - h*(1.0-h)*w/(1.0+3.0*w); // distance\n\t\t//m.yzw = mix( m.yzw, col, h ) - h*(1.0-h)*w/(1.0+3.0*w); // color\n    }\n\t\n\treturn m;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define VIGNETTE\n#define COLOR_CORRECTION\n\n#define AA 2\n#define WIDTH 3.\n\nvec2 f(vec2 p)\n{\n    float f0 = voronoi(p*.8, .25).x;\n    float f1 = -p.y + voronoise(vec2(1., p.x)*2. );\n    float f01 = smoothstep( .05,.0, smin(f0, -f1, .5) );\n    return vec2(f1, min( f01,smoothstep(.5, .48, f1*.9)));\n}\n\nvec2 disp(vec2 p, float b, float e)\n{\n    vec2 s = iResolution.xy; vec2 eps = vec2(0,e);\n    vec4 sx = blur(p+eps.xy,iChannel0,s,b) - blur(p-eps.xy,iChannel0,s,b);\n    vec4 sy = blur(p+eps.yx,iChannel0,s,b) - blur(p-eps.yx,iChannel0,s,b);\n    return vec2(sx.x,sy.x);\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec3 tot = vec3(0);\n    vec2 stepsize = WIDTH/iResolution.xy/float(AA);\n    vec2 p = (2.*I - iResolution.xy) / iResolution.y;\n    \n    for (int x = 0; x < AA; ++x)\n\tfor (int y = 0; y < AA; ++y)\n    {   \n        vec2 uv = p;\n        uv += (vec2(float(x), float(y))+vec2(.5))*stepsize - vec2(1., 1.7);\n                \n        float w = fract(iTime*.19);\n        float t = 1.3 * (sineInOut(w * 2.) * 5. - 2.);\n        \n        vec2 m = iMouse.xy/iResolution.xy;\n        float mr = -.18; float mz = 1.;\n        \n        if (iMouse.z > 0.)\n        {\n            mr += m.x * 6.28 + 3.14;\n            mz = m.y * 1.5 +.5;\n        }\n        \n        vec2 ps = r(((uv+vec2(0.5, 1.)) * mz/abs(uv.y))*vec2(3., 5.),mr);\n        float rx = ps.x; float g = ps.y - 1.;\n        ps -= vec2(0, t);\n        \n        vec2 d = disp(ps*.015 + vec2(1.,iTime*.07), 1., .01)*.3;\n        vec2 fb = f(ps + d);\n        float ft = f(ps + d - vec2(.01, -.13)).y;\n                \n        vec3 b = mix(vec3(.7,.47,.28), vec3(.3,.21,.147), smoothstep(-4.,0.,g));\n        \n        vec3 c = mix(vec3(.55,.4,.27)*.9, vec3(.25,.35,.45), smoothstep(-3.5,-1.,g));\n        c = mix(c, vec3(.025,.37,.29), smoothstep(-3.2, 1.0, g));\n        c = mix(c, vec3(0,.11,.15), smoothstep(-2.5,1.3,g));\n        c = mix(c, vec3(0), smoothstep(-4.,7.,g));\n        \n        float vs = voronoi_smooth(ps * 1.7, .8, iTime * 5.).x;\n        c = mix(c, c*2.,smoothstep(0., 3., vs)*1.6);\n       \n        float fw = smoothstep(.1, 1., w);\n        float ret = map(fw, 0., 1., -4., -2.);\n        float re = -.6 - ret + g - voronoise(vec2(1., rx) *2.);\n        \n        re = smoothstep(.0, .5, re+.6) * max(map(fw, .0,.4, 1.2,0.),0.);\n        \n        b = mix(b, b*.68, re);\n        b = mix(b, c, step(fb.x,0.));\n        b = mix(b, c*.75, fb.y);\n        b = max(b, ft*1.2);\n        \n        tot += b;\n    }\n    tot = tot/float(AA*AA);\n\n    #ifdef VIGNETTE\n    tot = mix(tot, vec3(0), smoothstep(0.1,2.2,length(p*.8)));\n    #endif\n    \n    #ifdef COLOR_CORRECTION\n    tot = tot * vec3(1.2,.95,1.);\n    tot = pow(tot, vec3(1.1,1.02,.94))*2.;\n    #endif\n    \n    O = vec4(Tonemap_ACES(tot),0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define BLOOM\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 uv = I / iResolution.xy;\n    vec4 o = texture(iChannel0, uv);\n    \n    #ifdef BLOOM\n    o += texture(iChannel0, uv)*.15;\n    o = max(o, blur(uv, iChannel0, iResolution.xy, 5.)*1.13);\n    #endif\n\n    O = o;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}