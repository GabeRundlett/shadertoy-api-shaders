{
    "Shader": {
        "info": {
            "date": "1727709289",
            "description": "originals form glslsandbox",
            "flags": 0,
            "hasliked": 0,
            "id": "XXBcDK",
            "likes": 1,
            "name": "tricolor rotate",
            "published": 3,
            "tags": [
                "color",
                "rotate",
                "rainbow"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 37
        },
        "renderpass": [
            {
                "code": "uniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n#define time iTime\n#define resolution iResolution.xy\nconst vec3 black  = vec3(0.0, 0.0, 0.0);\nconst vec3 white  = vec3(1.0, 1.0, 1.0);\nconst vec3 beige  = vec3(1.0, 0.8, 0.8);\nconst vec3 orange = vec3(1.0, 0.5, 0.0);\nconst vec3 brown  = vec3(0.5, 0.0, 0.0);\nconst vec3 red    = vec3(1.0, 0.0, 0.0);\nconst vec3 yellow = vec3(1.0 ,1.0, 0.0);\nconst vec3 green  = vec3(0.0, 1.0, 0.0);\nconst vec3 water  = vec3(0.0, 1.0, 1.0);\nconst vec3 blue   = vec3(0.0, 0.0, 1.0);\nconst vec3 purple = vec3(0.5, 0.0, 0.5);\nconst vec3 indigo = vec3(0.1, 0.1, 0.5);\n\nvec3 hsv2rgb(  vec3 c )\n{\n vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid rainbow(vec2 p, vec2 offset, float size, inout vec3 i) {\n    float l = length(p - offset);\n    if (l < size  ) {\n        if (l > (size * 9.0/10.0)  ) {\n            i = red;\n        } else if (l > (size * 8.0/10.0)  ) {\n            i = orange;\n        } else if (l > (size * 7.0/10.0)  ) {\n            i = yellow;\n        } else if (l > (size * 6.0/10.0)  ) {\n            i = green;\n        } else if (l > (size * 5.0/10.0)  ) {\n            i = blue;\n        } else if (l > (size * 4.0/10.0)  ) {\n            i = indigo;\n        } else if (l > (size * 3.0/10.0)  ) {\n            i = purple;\n        }\n    }\n}\n#define TWO_PI 6.28318530718\n// --------[ Original ShaderToy begins here ]---------- //\n#define PI  3.1415\n#define TAU 2.0*PI\n#define zero vec2(0.,0.)\n\n#define K .05\n#define RECUR 45.\n#define BASE_SIZE 1.0\nfloat det(vec2 a,vec2 b) {\n    return (a.x * b.y) - (a.t * b.x);\n}\nvec2 intersect(vec2 a, vec2 b,vec2 p,vec2 q) {\n       vec2 xdiff = vec2(a.x-b.x,p.x-q.x);\n       vec2 ydiff = vec2(a.y-b.y,p.y-q.y);\n      \n       float div = det(xdiff,ydiff);\n       \n       vec2 d = vec2(det(a,b),det(p,q));\n       return vec2(det(d,xdiff),det(d,ydiff))/div ;\n       \n    }\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\nvec2 coord(float a,float r) {\n    return vec2(cos(a),sin(a))*r;\n}\nmat2 r(float a){\n    float c=cos(a),s=sin(a);\n    return mat2(c,s,-s,c);\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nmat3 rotX(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(\n        1, 0, 0,\n        0, c, -s,\n        0, s, c\n    );\n}\n\nmat3 rotY(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat3(\n        c, 0, -s,\n        0, 1, 0,\n        s, 0, c\n    );\n}\n\nfloat random(vec2 pos) {\n    return fract(sin(dot(pos.xy, vec2(13.9898, 78.233))) * 43758.5453123);\n}\n#define NUM_OCTAVES 6\nfloat noise(vec2 pos) {\n    vec2 i = floor(pos);\n    vec2 f = fract(pos);\n    float a = random(i + vec2(0.0, 0.0));\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 pos) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.5));\n    for (int i = 0; i < NUM_OCTAVES; i++) {\n        float dir = mod(float(i), 2.0) > 0.5 ? 1.0 : -1.0;\n        v += a * noise(pos - 0.05 * dir * time);\n\n        pos = rot * pos * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n vec2 uv =( fragCoord.xy-.5* iResolution.xy)/iResolution.y;\n    uv*=2.;\n    uv +=vec2(cos(iTime),sin(iTime))*.1;\n    uv*=r(3.*sin(atan(uv.x,uv.y)*.45));\n    vec2 id = floor(uv);\n    uv=fract(uv)-.5;\n    float d = 0.;\n    vec3 col = vec3(0.);\n    float q = 6.+cos(floor(iTime)+pow(fract(iTime),2.))*2.;\n    float stepT = TAU/q;\n   \n   float D =1./20.;\n   \n   float loop_start;\n   float loop_end;\n   float stp;\n   if(mod(id.x,2.)==0.){\n      uv.x = -uv.x;\n      \n   } \n   if(mod(id.y,2.) == 0.){\n   uv.y = -uv.y;\n   }\n   vec2 p = (gl_FragCoord.xy * 3.0 - resolution.xy) / min(resolution.x, resolution.y);\n   p -= vec2(12.0, 0.0);\n\n    float t2 = 0.0, d3;\n\n    float time2 = 1.0;\n\n    vec2 q2 = vec2(0.0);\n    q2.x = fbm(p + 0.00 * time2);\n    q2.y = fbm(p + vec2(1.0));\n    vec2 r = vec2(0.0);\n    r.x = fbm(p + 1.0 * q2 + vec2(1.7, 1.2) + 0.15 * time2);\n    r.y = fbm(p + 1.0 * q2 + vec2(8.3, 2.8) + 0.126 * time2);\n    float f = fbm(p + r);\n    \n    // DS: hornidev\n    vec3 color = mix(\n        vec3(1.0, 1.0, 2.0),\n        vec3(1.0, 1.0, 1.0),\n        clamp((f * f) * 5.5, 1.2, 15.5)\n    );\n\n    color = mix(\n        color,\n        vec3(1.0, 1.0, 1.0),\n        clamp(length(q), 2.0, 2.0)\n    );\n\n    color = mix(\n        color,\n        vec3(0.3, 0.2, 1.0),\n        clamp(length(r.x), 0.0, 5.0)\n    );\n\n    color = (f * f * f * 1.0 + 0.5 * 1.7 * 0.0 + 0.9 * f) * color;\n   for(float j=0.;j<1.;j+=1./RECUR){\n        float i=0.;\n        for(int ii=0;ii<100;++ii) {\n         if (i>TAU) break;\n         d += smoothstep(0.018,0.003,\n         sdSegment(uv,coord(i,BASE_SIZE), coord(i+stepT,BASE_SIZE)  ));\n         i+=stepT;\n      }\n      vec2 ipoint = intersect(zero,coord(0.+K,BASE_SIZE),coord(stepT,BASE_SIZE),coord(0.,BASE_SIZE));\n      float dst = length(ipoint);\n      uv*=1./dst;\n;\n    col += d*(palette(j + mod(iTime*.2,2.),vec3(.5),vec3(.5),vec3(1.),vec3(0.50, 0.10, 0.33))/RECUR);\n     \n    }\n    \n    \n    float angle = atan(st.y,st.x) / TWO_PI;\n    float d2 = length(st*vec2(0.50,1.6))-0.5;\n    float e = length(st*vec2(1.40,0.6))-0.5;\t\n    d2 = 1.0-smoothstep(0.0,0.1,abs(d2));\n    e = 1.0-smoothstep(0.0,0.1,abs(e));\n    e = step(0.6,e);\n    d2 = step(0.6,d);\n    vec3 color2 = hsv2rgb(vec3(1.6*time+angle,1.0,1.0))*d2;\n\t color += hsv2rgb(vec3(1.8*time-angle,1.0,1.0))*e;\n   vec3 destColor = white;\n    vec2 p3 = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n    \n    rainbow (p3, vec2( 0.0, 0.0), 0.5, destColor);\n    \n    fragColor+=vec4(color,1.);\n    fragColor*= vec4(destColor*col*color2, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}