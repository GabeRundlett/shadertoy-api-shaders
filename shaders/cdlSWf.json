{
    "Shader": {
        "info": {
            "date": "1669655479",
            "description": "CC0: Cracked heirloom\nTinkering with distored toruses and a favorite shader \nTrippy Triangle by Tater: https://www.shadertoy.com/view/fslcDS\n",
            "flags": 0,
            "hasliked": 0,
            "id": "cdlSWf",
            "likes": 44,
            "name": "Cracked heirloom",
            "published": 3,
            "tags": [
                "voronoi",
                "raymarch"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 657
        },
        "renderpass": [
            {
                "code": "// CC0: Cracked heirloom\n//  Tinkering with distored toruses and a favorite shader \n//  Trippy Triangle by Tater: https://www.shadertoy.com/view/fslcDS\n\n#define GLOW\n\n#define TIME            iTime\n#define RESOLUTION      iResolution\n\n#define PI              3.141592654\n#define PI_2            (0.5*PI)\n#define TAU             (2.0*PI)\n\n#define TOLERANCE       0.0001\n#define MAX_RAY_LENGTH  12.0\n#define MAX_RAY_MARCHES 60\n#define MAX_SHADOW_MARCHES 30\n#define NORM_OFF        0.001\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define H13(n) fract((n)*vec3(12.9898,78.233,45.6114)*43758.5453123)\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: MIT, author: Pascal Gilcher, found: https://www.shadertoy.com/view/flSXRV\nfloat atan_approx(float y, float x) {\n  float cosatan2 = x / (abs(x) + abs(y));\n  float t = PI_2 - cosatan2 * PI_2;\n  return y < 0.0 ? -t : t;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat hex(vec2 p, float r) {\n  const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n  p = abs(p);\n  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n  return length(p)*sign(p.y);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nfloat pabs(float a, float k) {\n  return -pmin(a, -a, k);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat hexTorus(vec3 p, vec3 d) {\n  vec2 q = vec2(length(p.xz) - d.x, p.y);\n  float a = atan_approx(p.x, p.z);\n  const float off = PI*0.875;\n  a = abs(a);\n  float b = a;\n  b -= off;\n  b = -pabs(b, 1.0);\n  b += off;\n  a *= b;\n  mat2 r = ROT(-4.0*a/6.0);\n  return hex(r*q, d.y)-d.z;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/spherefunctions/\nfloat sphered(vec3 ro, vec3 rd, vec4 sph, float dbuffer) {\n    float ndbuffer = dbuffer/sph.w;\n    vec3  rc = (ro - sph.xyz)/sph.w;\n  \n    float b = dot(rd,rc);\n    float c = dot(rc,rc) - 1.0;\n    float h = b*b - c;\n    if( h<0.0 ) return 0.0;\n    h = sqrt( h );\n    float t1 = -b - h;\n    float t2 = -b + h;\n\n    if( t2<0.0 || t1>ndbuffer ) return 0.0;\n    t1 = max( t1, 0.0 );\n    t2 = min( t2, ndbuffer );\n\n    float i1 = -(c*t1 + b*t1*t1 + t1*t1*t1/3.0);\n    float i2 = -(c*t2 + b*t2*t2 + t2*t2*t2/3.0);\n    return (i2-i1)*(3.0/4.0);\n}\n\nvec2 vor(vec2 v, vec3 p, vec3 s){\n  p = abs(fract(p-s)-0.5);\n  float a = max(p.x,max(p.y,p.z));\n  float b = min(v.x,a);\n  float c = max(v.x,min(v.y,a));\n  return vec2(b,c);\n}\n\n// https://www.shadertoy.com/view/7sByWR\nfloat vorMap(vec3 p){\n  const vec3 v0 = H13(0.96);\n  const vec3 v1 = H13(0.55);\n  const vec3 v2 = H13(0.718);\n  const vec3 v3 = H13(0.3);\n  const mat2 r0 = ROT(1.2);\n  const mat2 r1 = ROT(2.0);\n  const mat2 r2 = ROT(2.7);\n  vec2 v = vec2(5.0);\n  v = vor(v,p,v0);\n  p.xy*=r0;\n  v = vor(v,p,v1);\n  p.yz*=r1;\n  v = vor(v,p,v2);\n  p.zx*=r2;\n  v = vor(v,p,v3);\n  return v.y-v.x; \n}\n\nfloat df(vec3 p) {\n  vec3 p0 = p.zxy;\n  float d0 = hexTorus(p0, vec3(2.0, 0.65, 0.025));\n  float d1 = p.x+1.0;\n  vec2 pp = p.yz;\n  pp.y = -abs(pp.y);\n  const vec2 nn = normalize(vec2(1.5, 1.));\n  float vf = 0.025*dot(pp, nn);\n  float d2 = vorMap(p)-vf;\n  float d = d0;\n  d = pmax(d, -d2, 0.0125);\n  d = min(d, d1);\n\n  return d;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float t = 0.0;\n  const float tol = TOLERANCE;\n  vec2 dti = vec2(1e10,0.0);\n  int i = 0;\n  for (i = 0; i < MAX_RAY_MARCHES; ++i) {\n    float d = df(ro + rd*t);\n    if (d<dti.x) { dti=vec2(d,t); }\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) {\n      break;\n    }\n    t += d;\n  }\n  if(i==MAX_RAY_MARCHES) { t=dti.y; };\n  return t;\n}\n\n\nfloat softShadow(vec3 ps, vec3 ld, float mint, float k) {\n  float res = 0.0;\n  float t = mint*7.0;\n  for (int i=0; i<MAX_SHADOW_MARCHES; ++i) {\n    vec3 p = ps + ld*t;\n    float d = df(p);\n    if (d < 0.0) return 0.0;\n    res += 0.05*inversesqrt((d));\n    if (res > 1.0) {\n      return 0.0;\n    };\n    t += max(d, mint);\n  }\n  return clamp(1.0-res, 0.0, 1.0);\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n  const vec3 lightPos = vec3(5.0, 3.0, 1.0)*2.;\n  const float i = 100.0; \n  const float h = 0.55;\n  const vec3 dcol = HSV2RGB(vec3(h, 0.25, i));\n  const vec3 scol = HSV2RGB(vec3(h, 0.25, i));\n  \n  float t = rayMarch(ro, rd);\n  vec3 col = vec3(0.0);\n\n#ifdef GLOW\n  float gf = 0.5+0.5*cos(TAU*TIME/10.0);\n  float gr = mix(0.62, 0.57, gf);\n  float gd = sphered(ro, rd, vec4(vec3(0.19, 2.0-0.025, 0.0), gr), t);\n  vec3 gcol = hsv2rgb(vec3(h, mix(0.75, 0.9, gf), mix(60.0, 2.0, gf)));\n#endif\n\n  vec3 p = ro+rd*t;\n  vec3 n = normal(p);\n  vec3 r = reflect(rd, n);\n  vec3 ld = normalize(lightPos - p);\n  float ll2 = dot(lightPos - p, lightPos - p);\n  float sd = softShadow(p, ld, 0.025, 2.0);\n  float dif = max(dot(ld, n), 0.0);\n  float spe = pow(max(dot(ld, r), 0.0), 10.0);\n  if (t < MAX_RAY_LENGTH) {\n    col = dcol;\n    col *= mix(0.1, 1.0, dif);\n    col *= mix(0.2, 1.0, sd);\n    col += spe*sd*scol;\n    col /= ll2;\n  }\n#ifdef GLOW\n  col += gcol*gd;\n#endif  \n\n  return col;\n}\n\nvec3 effect(vec2 p) {\n  const vec3 ro = vec3(5.0, 0.0, 0.01);\n  const vec3 la = vec3(0.0, 0.0, 0.0);\n  const vec3 up = normalize(vec3(0.0, 1.0, 0.0));\n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(up, ww ));\n  vec3 vv = (cross(ww,uu));\n  const float fov = tan(TAU/6.);\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n\n  vec3 col = render(ro, rd);\n  \n  return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n  col = effect(p);\n  col *= smoothstep(1.75, 1.0-0.5, length(pp));\n  col = aces_approx(col); \n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}