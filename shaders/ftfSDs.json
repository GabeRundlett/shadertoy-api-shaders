{
    "Shader": {
        "info": {
            "date": "1626774982",
            "description": "ghost+zoom",
            "flags": 32,
            "hasliked": 0,
            "id": "ftfSDs",
            "likes": 2,
            "name": "Fork Fork ghost shaderatla 957",
            "published": 3,
            "tags": [
                "zoom"
            ],
            "usePreview": 0,
            "username": "shaderatlasv",
            "viewed": 244
        },
        "renderpass": [
            {
                "code": "#define ZOOM_ITER 40\n#define ZOOM_CENTER vec2(0.5,0.5)\n#define ZOOM_AMP 0.02\n#define ZOOM_OUTSIDE_AMP 0.15\n#define ZOOM_OUTSIDE_OFFSET 0.2\n#define CHROMA_MIX 0.2\n#define HUGE 9E16\n#define PI 3.14159265\n#define saturate(i) clamp(i,0.,1.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  float len = length( uv - ZOOM_CENTER );\n\n  vec3 tex = vec3( 0.0 );\n\n  for ( int i = 0; i < ZOOM_ITER; i ++ ) {\n    float fi = ( float( i ) + 0.5 ) / float( ZOOM_ITER );\n    vec3 blurA = saturate( vec3(\n      1.0 - 4.0 * abs( 1.0 / 4.0 - fi ),\n      1.0 - 4.0 * abs( 2.0 / 4.0 - fi ),\n      1.0 - 4.0 * abs( 3.0 / 4.0 - fi )\n    ) ) * 4.0;\n    vec3 blurB = vec3(\n        1.0 - 2.0 * abs( 1.0 / 2.0 - fi )\n    ) * 2.0;\n    vec3 blur = mix( blurA, blurB, CHROMA_MIX ) / float( ZOOM_ITER );\n    float scaleAmp = ( ZOOM_OUTSIDE_AMP * len + ZOOM_AMP ) * fi + ZOOM_OUTSIDE_OFFSET * len;\n    vec2 uvt = ( 1.0 - scaleAmp ) * ( uv - ZOOM_CENTER ) + ZOOM_CENTER;\n    tex += blur * texture( iChannel0, uvt ).xyz;\n  }\n\n  // fragColor = vec4( tex, 1.0 );\n  fragColor = texture(iChannel0, uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 scaleFromCenter(vec2 coord, float scale) {\n  if (scale > 1.0 || scale < 0.0) { return coord; }\n  vec2 scaleCenter = vec2(0.5);\n  return (coord - scaleCenter) * scale + scaleCenter;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord/iResolution.xy;\n  \n    float scale = 1.0 - mod(iTime * 1.3, 0.8) + 0.4;\n    if (scale < 0.0) {\n    fragColor = texture(iChannel0, st);\n    return;\n    }\n    vec2 newCoord = scaleFromCenter(st, scale);\n    float colorScale = scale * 0.5;\n    vec4 resultColor = texture(iChannel0, st) * (1.0 - colorScale + 0.2);\n    vec4 newCoordColor = texture(iChannel0, newCoord) * (colorScale - 0.2);\n    vec4 result = (resultColor + newCoordColor);\n    fragColor = result;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 appendFilter(vec4 textureColor) {\n    mediump float blueColor = textureColor.b * 63.0;\n    mediump vec2 quad1;\n    quad1.y = floor(floor(blueColor) / 8.0);\n    quad1.x = floor(blueColor) - (quad1.y * 8.0);\n    mediump vec2 quad2;\n    quad2.y = floor(ceil(blueColor) / 8.0);\n    quad2.x = ceil(blueColor) - (quad2.y * 8.0);\n    highp vec2 texPos1;\n    texPos1.x = (quad1.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);\n    texPos1.y = (quad1.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);\n    highp vec2 texPos2;\n    texPos2.x = (quad2.x * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.r);\n    texPos2.y = (quad2.y * 0.125) + 0.5/512.0 + ((0.125 - 1.0/512.0) * textureColor.g);\n    lowp vec4 newColor1 = texture(iChannel1, texPos1);\n    lowp vec4 newColor2 = texture(iChannel1, texPos2);\n    lowp vec4 newColor = mix(newColor1, newColor2, fract(blueColor));\n\n    return mix(textureColor, vec4(newColor.rgb, textureColor.w), 0.7);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = appendFilter(texture(iChannel0, uv));\n} \n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}