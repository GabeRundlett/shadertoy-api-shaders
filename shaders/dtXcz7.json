{
    "Shader": {
        "info": {
            "date": "1690523019",
            "description": "A zellij tile pattern.\nClick and drag to move around.",
            "flags": 40,
            "hasliked": 0,
            "id": "dtXcz7",
            "likes": 6,
            "name": "Zellij pattern 16 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "zellige"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "vec2 f1(vec2 a){\n    return\n        fract(a+fract(a*2.+.5)/2.)\n        //fract(a+fract(a*2.+.5)/2.)\n        //fract(a-fract(a*4.)/2.)\n        //min(abs(fract(a)-.5),abs(fract(a*2.)-.5))\n        //fract(a-.5+mod(floor(a.x*2.),2.)/2.)\n        //abs(fract(a)-fract(-a/2.)/2.)\n        //abs(fract(a)-abs(.5-fract(a)))\n    ;\n}\n\nvec2 triangle_wave1(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n        //-vec2(1.,0.5)\n        //vec2(1.-sign(a.x)/2.,0.5+sign(a.x)/2.)\n    ,\n    a1 = a+a2;\n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    return\n        triangle_wave1(a)\n        //triangle_wave1(a-triangle_wave1(a+.5)/1.5)\n        //triangle_wave1(a+.5*floor(a.x))\n    ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 2.;\n    vec2 draggedPos = texelFetch(iChannel0, ivec2(1,0), 0).xy;\n\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    uv -= draggedPos/iResolution.y/t1/2.0;\n    //if(iMouse.z>.5)\n    //uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec2 t2 = vec2(0.);\n    for(int k = 0; k < 5; k++){\n        //if(uv.x<uv.y && k%5 == 0) {uv = -uv;}\n\n    \n        //uv.x += float(int(uv.x*2.)<<2)/8.;\n        //k += int(uv.y>uv.x);\n\n        //if(uv.y>0.) uv.x += .5;\n        //else uv.y += .5;\n        \n        uv =\n            abs(.5+uv+t2)/1.5\n            //abs(.5*sign(t2.x-t2.y)+uv+t2)/1.5\n            //(uv+t2)/1.5\n            //abs(.5+uv*mod(floor(-uv.x*4.),2.)+t2)/1.5\n        ;\n        //uv += sign(uv-uv.yx)/2.+.5;\n        if(uv.y>uv.x)\n            uv = uv.yx\n            //uv.x += .5\n            //uv.y -= .5\n        ;\n        //else k += 1;\n\n        t2 =\n            triangle_wave(uv+.5)\n            //-triangle_wave(uv-.5*sign(uv.x-.5)-sign(t2.x-.5))\n            //-triangle_wave(uv-.5)*sign(.5-uv.x)\n        ;\n        //if(t2.y>t2.x) t2 = t2.yx;\n        uv =\n            t2-triangle_wave(uv.yx)\n            //t2+triangle_wave(uv.yx-floor(.5+t2.y+t2.x))\n        ;\n        \n        //uv += (uv-ceil(uv));\n        //if(t2.y<uv.x)\n        //if(uv.x<uv.y) uv.x /= 1.5;\n        //if(t2.y>t2.x) t2 -= .5;\n\n        {t2 =\n            -t2.yx\n            //t2.yx*(1.+mod(floor(uv.y),2.)/2.)\n        ;\n        uv=-uv.yx;}\n\n        \n        col =\n            vec3(col.zx,max(abs(uv.x-uv.y)*sign(t2.x-t2.y),0.))\n            //abs(vec3(col.zx,max(uv.y-uv.x,-col.y)))\n        ;\n        //if(uv.x<uv.y && k%2 == 0) {uv = -uv;break;}\n\n        //if(uv.x>uv.y) col=col.yzx;\n        //uv /= 1.+mod(uv.y,2.);\n        //if(uv.x>t2.x-.25) uv.x /= 1.5;\n    }\n    fragColor = vec4(col*4.,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod(float a, float b){\n    //a += floor(a/b)/8.;\n    a /= (1. + floor(mod(a*8.,2.)))/4.;\n    return\n        mod((floor(a)+mod(floor(a*2.),b))/2.,b)\n        //floor(mod((floor(a)/4.+mod(floor(a*2.)/4.,b))/2.,b))\n        //mod((floor(a)+mod(floor(a/2.),b*2.))/2.,b)\n        //mod(mod(floor(a+4.),floor(a/16.+4.)),b)\n    ;\n}\n\nvec2 song(float t){\n  float tempo = 2.;\n  t /= tempo;\n  float s1 =\n      8.\n  ;\n  float p1 = 1. + floor(mod((1.+t/4.)/2.,2.));\n  t *= p1/2.;\n  \n  float a=\n      8.*pow(fract(-t*p1),2.),\n      //pow((1.-log(fract(t*p1)*2.)),2.),\n  nb = t*tempo*pow(2.,(2.+fmod(t*2.,s1)+1. + fmod(floor(t/s1),2.))*2./5.+6.5);\n  return\n      vec2(a,nb)\n  ;\n}\n\nvec2 mainSound(int samp, float t){\n  vec2 s =\n      song(t)\n   ;\n  \n  float a=\n      s.x\n  ,\n  nb =\n      s.y;\n  return\n      (abs(.5-abs(vec2(fract(nb/2.),fract(nb)))))*a\n      \n      //(abs(a/8.-abs(.5-vec2(fract((a/8.+nb)*.998/2.),fract(a/8.+nb)))*a))\n      \n      //abs(a/16.-(abs(.5-abs(vec2(fract(nb/2.),fract(nb)))))*a)\n  ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//from https://www.shadertoy.com/view/dtGGzK\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = iMouse; //current mouse pos\n        \n        //if mouse button up\n        if (m.z < 0.0 && mp.z >= 0.0){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}