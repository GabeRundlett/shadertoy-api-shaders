{
    "Shader": {
        "info": {
            "date": "1475015275",
            "description": "Evil Explosion",
            "flags": 0,
            "hasliked": 0,
            "id": "llV3Dw",
            "likes": 7,
            "name": "Evil Explosion",
            "published": 3,
            "tags": [
                "evilexplosion"
            ],
            "usePreview": 0,
            "username": "vox",
            "viewed": 863
        },
        "renderpass": [
            {
                "code": "//Do not redistribute.\n\n//-----------------CONSTANTS MACROS-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n\n//-----------------UTILITY MACROS-----------------\n\n#define time ((sin(float(__LINE__))/PI/GR+1.0/GR)*iTime+1000.0)\n#define sphereN(uv) (clamp(1.0-length(uv*2.0-1.0), 0.0, 1.0))\n#define clip(x) (smoothstep(0.25, .75, x))\n#define TIMES_DETAILED (1.0)\n#define angle(uv) (atan(uv.y, uv.x))\n#define angle_percent(uv) ((angle(uv)/PI+1.0)/2.0)\n\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n\n\n//-----------------LOGO COLOR/POSITION/SIZE MACROS-----------------\n\n#define WHITE (vec4(vec3(255.0,255.0,255.0)/255.0, 1.0))\n#define BROWN (vec4(vec3(165.0,42.0,42.0)/255.0, 1.0))\n#define SKIN (vec4((sin(time+seedling)*.25+.5)*WHITE.rgb+(cos(time-seedling)*.25+.75)*BROWN.rgb, 1.0))\n#define CLOTHING (vec4((flux(time+seedling)+(sin(-time/GR/PI-seedling)*.25+.5))*(sin(-time/E/PI)*.125+.875), 1.0))\n#define RED (vec4(vec3(255.0,0.0,0.0)/255.0, 1.0))\n#define GREEN (vec4(vec3(0.0,255.0,0.0)/255.0, 1.0))\n#define BLUE (vec4(vec3(0.0,0.0,255.0)/255.0, 1.0))\n#define YELLOW (vec4(vec3(255.0,255.0,0.0)/255.0, 1.0))\n\n#define female_size (1.0/GR)\n#define female_target (vec2(-sqrt(2.0)/GR/2.0, sqrt(2.0)/GR-female_size/GR))\n#define male_size (1.0/GR)\n#define male_target (vec2(-female_target.x, female_target.y))\n\nfloat saw(float x)\n{\n    x /= PI;\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\nvec2 saw(vec2 x)\n{\n    return vec2(saw(x.x), saw(x.y));\n}\n\nvec3 saw(vec3 x)\n{\n    return vec3(saw(x.x), saw(x.y), saw(x.z));\n}\n\n//-----------------SEEDLINGS-----------------------\nfloat seedling = 0.0;\nvec2 offset = vec2(0.0);\nfloat last_height = 0.0;\nfloat scale = 1.0;\nfloat extraTurns = 0.0;\nfloat aspect = 1.0;\n\n//-----------------AUDIO ALGORITHM-----------------\n\nfloat lowAverage()\n{\n    const int iters = 32;\n    float product = 1.0;\n    float sum = 0.0;\n    \n    float smallest = 0.0;\n    \n    for(int i = 0; i < iters; i++)\n    {\n        float sound = texture(iChannel0, vec2(float(i)/float(iters), 0.5)).r;\n        smallest = \n        \n        product *= sound;\n        sum += sound;\n    }\n    return max(sum/float(iters), pow(product, 1.0/float(iters)));\n}\n\n//-----------------SIMPLEX ALGORITHM-----------------\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nfloat simplex3d(vec3 p) {\n    const float F3 =  0.3333333;\n    const float G3 =  0.1666667;\n    \n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n    \n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n    \n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n    \n    vec4 w, d;\n    \n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n    \n    w = max(0.6 - w, 0.0);\n    \n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n    \n    w *= w;\n    w *= w;\n    d *= w;\n    \n    return dot(d, vec4(52.0));\n}\n\n//-----------------LOGO RENDERING CODE-----------------\n\nfloat getEyes(vec2 uv)\n{\n    vec2 p = uv;\n\n    p.y += 1.0/PI;\n\n    p.x *= GR;\n\n    vec4 a = vec4(-1.0/GR, 1.0/GR, 0, 0);\n    vec4 b = vec4(1.0/GR, 1.0/GR, 0, 0);\n\n    p.y += cos(uv.x*8.0)/PI;\n\n    float distA = length(p.xy-a.xy);\n    float distB = length(p.xy-b.xy);\n\n    float fade_lengthA = .20;\n    float fade_lengthB = .20;\n\n    float color = clamp((1.0-distA/fade_lengthA)*distB, 0.0, 1.0)\n        \t\t  +clamp((1.0-distB/fade_lengthB)*distA, 0.0, 1.0);\n    return color;\n}\n\nfloat getTeeth(vec2 uv)\n{\n    vec2 p = uv;\n    p.x *= PI;\n    p.y *= PI*(cos(p.x/PI/PI));\n    p.y += 1.5*cos(p.x)+1.0;\n    p.y *= (sin(time*PI+seedling))+2.0;\n\n    float r = p.x*p.x+p.y*p.y;\n    \n    float xy = sin(p.x*PI*10.0)+cos(p.y*3.0+PI);\n\n    return clamp(clamp((3.0/(r*r*r)-p.y*p.y), 0.0, 1.0)*xy, 0.0, 1.0);\n}\n\nvec4 demon(vec2 uv)\n{\n    float eyes = getEyes(uv);\n    float teeth = getTeeth(uv);\n    \n    vec3 col = clamp(eyes+flux(seedling)*eyes+teeth, 0.0, 1.0);\n    \n    return vec4(col, clamp(length(col), 0.0, 1.0));\n}\n\n\n//-----------------ITERATED FUNCTION SYSTEM-----------------\n\nvec2 mobius(vec2 uv)\n{\n    float r = length(uv);\n    uv = normalize(uv)/log(r+1.0);\n    \n    float turns = 4.0*extraTurns;\n    float theta = atan(uv.y, uv.x);\n    \n    uv = vec2((theta*turns), (turns/(length(uv))-time*PI));\n    \n    seedling += floor(uv.x/PI)+floor(uv.y/PI);\n    \n    return vec2(saw(uv));\n}\n\nvec2 iterate(vec2 uv, vec2 dxdy, out float magnification)\n{\n    uv += offset;\n    \n    vec2 a = uv+vec2(0.0, \t\t0.0);\n    vec2 b = uv+vec2(dxdy.x, \t0.0);\n    vec2 c = uv+vec2(dxdy.x, \tdxdy.y);\n    vec2 d = uv+vec2(0.0, \t\tdxdy.y);//((fragCoord.xy + vec2(0.0, 1.0)) / iResolution.xy * 2.0 - 1.0) * aspect;\n\n    vec2 ma = mobius(a);\n    vec2 mb = mobius(b);\n    vec2 mc = mobius(c);\n    vec2 md = mobius(d);\n    \n    float da = length(mb-ma);\n    float db = length(mc-mb);\n    float dc = length(md-mc);\n    float dd = length(ma-md);\n    \n\tfloat stretch = max(max(max(da/dxdy.x,db/dxdy.y),dc/dxdy.x),dd/dxdy.y);\n    \n    magnification = stretch;\n    \n    return mobius(uv);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float scale = E;\n    uv = uv*scale-scale/2.0;\n    \n    float aspect = iResolution.x/iResolution.y;\n    \n    uv.x *= aspect;\n    \n    vec2 uv0 = uv;\n    \n\tconst int max_iterations = 4;\n    int target = max_iterations;//-int(saw(spounge)*float(max_iterations)/2.0);\n    \n    float antispeckle = 1.0; \n    float magnification = 1.0;\n  \n\tvec4 color = vec4(0.0);\n    float border = 1.0;\n    \n    seedling = 0.0;\n    \n        \n    offset = sin(vec2(time+seedling,\n                      -time-seedling))*(.5/E);\n    \n    color += demon(uv);\n    border *= (1.0-color.a);//*antispeckle;\n    \n    for(int i = 0; i < max_iterations; i++)\n    {\n        float iteration = float(i)/float(max_iterations);\n        \n        seedling = float(i);\n        extraTurns = float(i*i+1);\n        \n        uv = (iterate(uv0, .5/iResolution.xy, magnification)*2.0-1.0);\n        uv = uv*(saw(time+seedling)+1.0);\n        \n    \tuv = rotatePoint(vec3(uv, 0.0), vec3(0.0, 0.0, -1.0), sin(seedling+time)*PI).xy;\n\n        color += demon(uv)*border*antispeckle;\n        \n        border *= smoothstep(1.0-1.0/GR/E/PI, 1.0, 1.0-color.a);//*antispeckle;\n        \n        float weight = smoothstep(0.0, 0.25, magnification);\n        antispeckle *= 1.0/magnification;\n    }\n    \n    //fragColor = vec4(everything(uv*2.0-1.0, o).a);\n    //fragColor = everything(uv*2.0-1.0, o);\n    \n    fragColor = vec4(uv, 0.0, 1.0);\n    fragColor = color;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}