{
    "Shader": {
        "info": {
            "date": "1593926369",
            "description": "Great effect for modern websites",
            "flags": 0,
            "hasliked": 0,
            "id": "3lByRm",
            "likes": 4,
            "name": "Blurred div over video",
            "published": 3,
            "tags": [
                "video",
                "blur",
                "div",
                "content"
            ],
            "usePreview": 0,
            "username": "Pairtial",
            "viewed": 366
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvv = fragCoord/fragCoord;\n    //change uv.x > to uv.x < to invert the portion of the div\n    if(uv.x > (iResolution.y/iResolution.x)/(iResolution.x/iResolution.y)+(iResolution.y/iResolution.x)/(iResolution.x/iResolution.y)){\n        fragColor = vec4(texture( iChannel0, uv).xyz, 1.0);\n        return;\n    }\n\n    // Define the bluring radius/strength (direction independant)\n    vec2 radius = vec2(40.0);\n    // Calculate the value at the corners so that the matrix can be easily inverted\n    float max = sqrt(radius.x * radius.x + radius.y * radius.y);\n    // Define the variable which will hold the blured values\n    vec3 blur = vec3(0.0);\n\n    // Define the variable which will be used to normalize the image\n    float sum = 0.0;\n    // The kernel is dynamically created based on the bluring radius\n    for(float u = -radius.x; u<=radius.x; u++){\n        for(float v = -radius.y; v<=radius.y; v++){\n            // The pixel weight used by the kernel is defined as: the distance from the kernel origin (0,0)\n            // to the current kernel position, subtracted from the maximum possible distance. This leads\n            // to a gradient from 0% relative weight on the edges to 100% relative weight at the origin of the kernel\n            float weight = max - sqrt(u * u + v * v);\n            // The weight is then exponentialized which seams to sleightly maintain more of the origianl detail\n            //weight = pow(weight, 2.0);\n            // The weight is then multiplied by the texture being sampled and added to the overall blurred values\n            blur += weight * texture( iChannel0, uv + (vec2(u, v)/iResolution.xy)).xyz;\n            // The weight is then added for normalizing purposes\n            sum += weight;\n        }\n    }\n    // Finally the blurred image is normalized\n    blur /= sum;\n\n    // Output to screen\n    fragColor = vec4(blur , 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}