{
    "Shader": {
        "info": {
            "date": "1715433637",
            "description": "Just found this ghost effect I did a long time ago. I was going to use it in a haunted house type of thing.\nIt simply uses a noise cloud to alpha draw a black cut out from the video.\n\n\n",
            "flags": 32,
            "hasliked": 0,
            "id": "NdSXWR",
            "likes": 31,
            "name": "Shadow Ghost",
            "published": 3,
            "tags": [
                "ghost"
            ],
            "usePreview": 0,
            "username": "Dave_Hoskins",
            "viewed": 311
        },
        "renderpass": [
            {
                "code": "// By Dave Hoskins...\n\n\nvoid mainImage( out vec4 colour, in vec2 coor )\n{\n    vec3 ghost = texelFetch(iChannel0, ivec2(coor), 0).xyz;\n    colour = vec4(1.0-ghost, 1.0);\n    // To use in a video I would suggest removing this 1- and using subtractive mode. ðŸ˜€\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n//------------------------------------------------\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//------------------------------------------------\n\nfloat noise( in vec2 x )\n{\n    const vec2 add = vec2(1.0,0.0);\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(1.5-f)*2.0;\n    \n    float res = mix(mix( hash12(p), hash12(p + add.xy),f.x),\n                    mix( hash12(p + add.yx), hash12(p + add.xx),f.x),f.y);\n    return res;\n}\n\n//------------------------------------------------\nfloat plasma(vec2 uv)\n{\n\n    float a = .8;\n    float h = 0.0;\n    \n    \n    uv*= 5.0;\n    uv.y -= iTime+100.;\n    \n    for (int i = 0; i < 7; i++)\n    {\n        h += noise(uv) * a;\n        a *= .6;\n        uv *= 2.1;\n        uv += noise(uv*3.8+(iTime*1.5))*.2;\n    }\n\treturn min(pow(h, 8.)*.3, 1.0);       \n}\n\n\n//------------------------------------------------\nvoid mainImage( out vec4 colour, in vec2 coor )\n{\n    \n  \tvec2 q = coor / iResolution.xy;\n    \n\tvec3 bg = vec3(0);\n    vec3 fg = texture(iChannel0, q, 0.).xyz;\n\t\n    float maxrb = max( fg.r, fg.b );\n    float k = clamp( (fg.g-maxrb)*4.0, 0.0, 1.0 );\n    \n    \n    fg = mix(vec3(.4), bg, k);\n    \n    vec3 old = vec3(0); // Just to make sure it's not full of junk...\n    if (iFrame > 1) old = texture(iChannel1, q, 0.0).xyz;\n    \n    fg = clamp(fg, 0.0, 1.0);\n    //fg *= pow(20.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 4.3);\n    fg = mix (old, fg, plasma(q)*.05);\n    //fg = vec3(plasma(q)); //test\n    colour = vec4(fg, 1.0);\n\n\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}