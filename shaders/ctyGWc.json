{
    "Shader": {
        "info": {
            "date": "1684747100",
            "description": "Random background with noise rotation / mesh warp / wave warp\nBased on wdyczG",
            "flags": 0,
            "hasliked": 0,
            "id": "ctyGWc",
            "likes": 8,
            "name": "Fam Blue Noise Field",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "fffam",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "#define S(a,b,t) smoothstep(a,b,t)\n\n\n// Generate noise with fractional content of sine wave\n// See https://thebookofshaders.com/10/\n// Created by inigo quilez - iq/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\nvec2 hash( vec2 p )\n{\n    p = vec2( dot(p,vec2(2127.1,81.17)), dot(p,vec2(1269.5,283.37)) );\n\treturn fract(sin(p)*43758.5453);\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    float n = mix( mix( dot( -1.0+2.0*hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                        dot( -1.0+2.0*hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                   mix( dot( -1.0+2.0*hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                        dot( -1.0+2.0*hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n\treturn 0.5 + 0.5*n;\n}\n\nmat2 Rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragmentColor, in vec2 fragmentCoord )\n{\n    vec2 uv = fragmentCoord/iResolution.xy;\n    vec2 tuv = uv;\n    tuv -= .5;\n\n    // Rotate with Noise\n    float degree = noise(vec2(iTime*.1, tuv.x*tuv.y));\n    float ratio = iResolution.x / iResolution.y;\n    tuv.y *= 1./ratio;\n    tuv *= Rot(radians((degree-.5)*720.+180.));\n\ttuv.y *= ratio;\n    \n    // Wave warp with sin\n    float frequency = 5.;\n    float amplitude = 30.;\n    float speed = iTime * 2.;\n    tuv.x += sin(tuv.y*frequency+speed)/amplitude;\n   \ttuv.y += sin(tuv.x*frequency*1.5+speed)/(amplitude*.5);\n\n    vec3 color1 = vec3(10.0/255.0, 20.0/255.00, 90.0/255.00); //  \t10  20  90\n    vec3 color2 = vec3(57.0/255.0, 78.0/255.00, 239.0/255.00); //    57  78  239\n    vec3 color3 = vec3(72.0/255.0, 211.0/255.00, 205.0/255.00); //    72  211 205\n    vec3 color4 = vec3(38.0/255.0, 58.0/255.00, 196.0/255.00); //    38  58  196\n    \n    vec3 layer1 = mix(color1, color2, S(-.3, .2, (tuv*Rot(radians(-5.))).x));\n    vec3 layer2 = mix(color3, color4, S(-.3, .2, (tuv*Rot(radians(-5.))).x));   \n    vec3 mixed = mix(layer1, layer2, S(.5, -.3, tuv.y));\n    fragmentColor = vec4(mixed,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}