{
    "Shader": {
        "info": {
            "date": "1499902089",
            "description": "see also http://lyc.deviantart.com/art/heptagram-690562466",
            "flags": 0,
            "hasliked": 0,
            "id": "XdjBzw",
            "likes": 3,
            "name": "heptagon",
            "published": 3,
            "tags": [
                "geometry"
            ],
            "usePreview": 0,
            "username": "lycium",
            "viewed": 190
        },
        "renderpass": [
            {
                "code": "#define float2 vec2\n\nfloat linedist(const float2 p, const float2 p1, const float2 p2)\n{\n\tfloat2 s = p2 - p1;\n\treturn abs(s.y * p.x - s.x * p.y + p2.x * p1.y - p2.y * p1.x);// / length(s);\n}\n\nint heptagram(const float2 p, float time)\n{\n\tconst float width = 0.0625f, width2 = width * 0.333f;\n\tconst float circle_r = 1.0f;\n\n\tfloat r2_0 = dot(p, p);\n\n    if (r2_0 >= (circle_r + width2) * (circle_r + width2)) return 0; // clip outside circle\n\n\tif ((r2_0 >= (circle_r - width2) * (circle_r - width2)) &&\n\t\t(r2_0 <  (circle_r + width2) * (circle_r + width2))) return 1; // outer ring\n\n\tconst int num_sides = 7, line_offset = 3; // heptagon\n\t//const int num_sides = 5, line_offset = 2; // pentagon\n\tconst float da = 6.283185307179586476925286766559f / float(num_sides);\n\tconst float rx = cos(da);\n\tconst float ry = sin(da);\n\n\tfloat2 p_a = vec2(cos(time), sin(time));\n\tfloat2 p_b = vec2(cos(time + da * float(line_offset)), sin(time + da * float(line_offset)));\n\n\tconst float inf_dist = 1000000.0f;\n\tfloat min_dist = inf_dist;\n\tint solid = 0;\n\tfor (int i = 0; i < num_sides; ++i)\n\t{\n\t\tfloat2 p_a_next = vec2(p_a.x *  rx + p_a.y * ry, p_a.y * rx - p_a.x * ry);\n\t\tfloat2 p_b_next = vec2(p_b.x *  rx + p_b.y * ry, p_b.y * rx - p_b.x * ry);\n\n\t\tfloat last_dist = linedist(p, p_a, p_b);\n\t\tmin_dist = min(min_dist, last_dist);\n\n\t\tif (last_dist < width && solid == 0)\n\t\t\tsolid = (last_dist > width * 0.5f) ? 1 : 2;\n\n\t\tp_a = p_a_next;\n\t\tp_b = p_b_next;\n\t}\n\n\tif (r2_0 < circle_r * circle_r * 0.75f) return solid;\n\telse return (min_dist > width * 0.5) ? ((min_dist < width) ? 1 : 0) : 2;\n}\n\nvec3 heptagram_colours(vec2 p, float time)\n{\n    const vec3 inner = vec3(0.15, 0.001, 0.0001);\n    const vec3 solid = vec3(1.0, 1.0, 1.0);\n\n    int hept = heptagram(p, time);\n    return\n        (hept == 0) ? inner :\n    \t(hept == 1) ? vec3(0) : solid;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float time = 3.1415926535f / 2.0f - iTime * 6.283185307179586476925286766559f * 0.0125f * 0.25f;\n\n    float aspect = iResolution.y / iResolution.x;\n\tvec2 pixel_scale = vec2(1.0 / iResolution.x, aspect / iResolution.y) * 4.0;\n\n   \tvec3 s = vec3(0.0);\n    const float samples = 34.0;\n    const float norm = 1.0 / samples;\n\tfor (float z = 0.0; z < samples; z += 1.0)\n    {\n        float r = sqrt(z * norm) * 1.16;\n\t\tfloat a = z * norm * 21.0 * 6.283185307179586476925286766559;\n        vec2 aa = vec2(cos(a), sin(a)) * r;\n        vec2 p = (fragCoord - iResolution.xy * 0.5 + aa) * pixel_scale;\n\n\t\ts += heptagram_colours(p, time);\n    }\n    s *= norm;\n\n\tfloat r = max(1.055f * pow(s.r, 0.416666667f) - 0.055f, 0.0f);\n\tfloat g = max(1.055f * pow(s.g, 0.416666667f) - 0.055f, 0.0f);\n\tfloat b = max(1.055f * pow(s.b, 0.416666667f) - 0.055f, 0.0f);\n    fragColor = vec4(r, g, b, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}