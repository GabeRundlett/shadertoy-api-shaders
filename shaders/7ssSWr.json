{
    "Shader": {
        "info": {
            "date": "1620925213",
            "description": "A mash-up of two album covers I like",
            "flags": 0,
            "hasliked": 0,
            "id": "7ssSWr",
            "likes": 4,
            "name": "Electric pillars",
            "published": 3,
            "tags": [
                "3d",
                "electricpillars"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 296
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.141592653\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nfloat _sph(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat _cyl(vec3 p, vec2 s)\n{\n    return max(length(p.xz)-s.x, abs(p.y)-s.y);\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y,l.z));\n}\n\nfloat map(vec3 p)\n{\n    float rad = .1;\n    vec3 ppi = p;\n    ppi.x = abs(ppi.x);\n    float pillars = _cyl(ppi-vec3(.9,0.75,0.), vec2(rad,3.));\n    \n    vec3 pb = p-vec3(0.,-1.75,0.);\n    pb.x = abs(pb.x);\n    pb.xy*= r2d(PI/2.);\n    float branches = 10.;\n    for (float i = 0.; i < 3.; ++i)\n    {\n        vec3 pbb = pb+vec3(i*.7,0.,0.);\n        pbb.z = abs(pbb.z);\n        float branche = _cyl(pbb, vec2(rad, 1.75));\n        \n        pbb.yz*= r2d(PI/2.);\n        branche = min(branche, _cyl(pbb-vec3(-0.1,-0.5,1.75), vec2(.1)));\n        //branche = max(branche, );\n        vec3 pc = pbb-vec3(-2.,-20.,1.75);\n        pc.xy *= r2d(.1);\n        branche = min(branche, _cyl(pc, vec2(0.025,20.)));\n        branches = min(branches, branche);\n\n    }\n    \n    return min(min(pillars, branches), _cube(p-vec3(0.,5.,50.), vec3(5.)));\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 2.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec3 _normal(float d, vec3 p)\n{\n    vec2 e = vec2(0.01,0.);\n    return normalize(vec3(d)-vec3(map(p+e.xyy), map(p+e.yxy), map(p+e.yyx)));\n}\n\nvec2 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        float d = map(p);\n        if (d < 0.001)\n            return vec2(d, distance(p, ro));\n        p += rd*d;\n    }\n    return vec2(-1.);\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col;\n    float a = sin(iTime*.5)*.75;\n    vec3 ro = vec3(-5.*sin(a),3.,-5.*cos(a));\n    vec3 ta = vec3(0.,0.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    \n    float sep = -(uv.x-uv.y)+.25;\n    \n    vec3 yellow = mix(vec3(.1), vec3(1.000,0.804,0.102), 1.-sat(sep*400.));\n    vec3 black = mix( vec3(1.),vec3(.1), 1.-sat(sep*400.));\n    \n    \n    col = mix(.5, 1., texture(iChannel0, rd*vec3(1.,-1.,1.)).x)*yellow;\n    \n    vec2 res = trace(ro, rd, 128);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = _normal(res.x,p); \n        col = n*.5+.5;\n        \n        col = black+vec3(1.000,0.349,0.000)*sat(dot(n, vec3(-1.)))*-sign(sep);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr(uv);\n    if (true)// Not so cheap antialiasing\n    {\n        vec2 off = vec2(1., -1.)/(iResolution.x*2.);\n        off *= r2d(.8); // This seems to have better results than axis aligned grid\n        vec3 acc = col;\n        acc += rdr(uv+off.xx);\n        acc += rdr(uv+off.xy);\n        acc += rdr(uv+off.yy);\n        acc += rdr(uv+off.yx);\n        col = acc/5.;\n        \n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}