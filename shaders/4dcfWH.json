{
    "Shader": {
        "info": {
            "date": "1524834863",
            "description": "This was an interesting experiment using a lattice blending filter. If you add random coordinates to the mouse coordinate you get this sparkling, almost aurora like effect.",
            "flags": 32,
            "hasliked": 0,
            "id": "4dcfWH",
            "likes": 1,
            "name": "Sparkly Sky",
            "published": 3,
            "tags": [
                "mouse",
                "filter",
                "random"
            ],
            "usePreview": 0,
            "username": "microwerx",
            "viewed": 635
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float maxPixelCoordinate = max(iResolution.x, iResolution.y);\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 ms = iMouse.xy / iResolution.xy;\n    \n    float dist = length(ms - uv);\n    if (dist > 0.05) dist = 1.0;\n\n    // Time varying pixel color\n    vec3 col = (1.0 - dist) * (0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    fragColor = 1.414*texture(iChannel1, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float rand1(vec2 co)\n{\n   return fract(sin(dot(co.xy,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nhighp float rand2(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    // Normalized pixel coordinates (from 0 to 1)\n    float maxPixelCoordinate = max(iResolution.x, iResolution.y);\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 ms = iMouse.xy / iResolution.xy;\n    \n    ms += vec2(rand2(floor(iTime) + uv), rand2(floor(iTime + 1.0) + uv));\n    \n    float dist = length(ms - uv);\n    if (dist > 0.05) dist = 1.0;\n\n    // Time varying pixel color\n    vec3 col = (1.0 - dist) * (0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)));\n\n    // Output to screen\n    fragColor = vec4(rand2(iTime + uv) * col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 duv = 1.0 / iResolution.xy;\n    \n    vec3 left = texture(iChannel1, uv - vec2(duv.s, 0.0)).rgb;\n    vec3 right = texture(iChannel1, uv + vec2(duv.s, 0.0)).rgb;\n    vec3 down = texture(iChannel1, uv - vec2(0.0, duv.t)).rgb;\n    vec3 up = texture(iChannel1, uv + vec2(0.0, duv.t)).rgb;\n    vec3 ll = texture(iChannel1, uv + vec2(-duv.s, -duv.t)).rgb;\n    vec3 lc = texture(iChannel1, uv + vec2(0.0, -duv.t)).rgb;\n    vec3 lr = texture(iChannel1, uv + vec2(duv.s, -duv.t)).rgb;\n    vec3 center = texture(iChannel0, uv + vec2(0.0, -duv.t)).rgb;\n    \n    fragColor = vec4(0.33 * (center + ll + lc + lr), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}