{
    "Shader": {
        "info": {
            "date": "1649262062",
            "description": "I am obviously a beginner, but i am thankful if you point out things i could have done differently , i am sure there is a ton that can be optimized :)\n\nMostly made this after following BigWIngs tutorials (Art of code on youtube).",
            "flags": 0,
            "hasliked": 0,
            "id": "7tBczW",
            "likes": 8,
            "name": "Colourful atoms. (Voronoi)",
            "published": 3,
            "tags": [
                "voronoi",
                "hue",
                "atom",
                "atoms"
            ],
            "usePreview": 0,
            "username": "fyisic123",
            "viewed": 384
        },
        "renderpass": [
            {
                "code": "#define hue(v) ( .6 + .6 * cos( 2.*PI*(v) + vec3(0,-2.*PI/3.,2.*PI/3.) ) )\n#define PI 3.14159265359\n\nvec2 hash22(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat getBall(vec2 p, float size, float Pulse)\n{\n    float c = smoothstep(size * 0.2, 0. , length(p)) ; // inner\n    c += smoothstep(size, 0. , length(p)) * Pulse;\n    c += pow(smoothstep(size,  0. , length(p)), 3.);\n    c += smoothstep(0.1 * size, 0.0 * size , abs(length(p)-(size))) ; // Ring\n    return c;\n}\n\nvec2 getCosSin(float p)\n{\n    return vec2(cos(p), sin(p));\n    \n}\n\nvec2 getOrbitOffset(float orbSpeed, float orbPhase, float dist)\n{\n    float o = orbSpeed + orbPhase;\n    return vec2(cos(o), sin(o)) * dist; \n}\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord.xy - .5 * iResolution.xy)/iResolution.y;\n    float uvDist = length(uv);\n    uv *= pow(length(uv), -0.2);\n    uv *= 4. + (1.25 * sin(iTime * 0.5));\n    uv *= Rot(iTime*0.4);\n    uv += vec2(iTime*0.75,0.0);\n    vec2 gv = fract(uv) -.5;\n    vec2 ID = floor(uv);\n        \n    vec3 col = vec3(0);            \n    \n            \n    float nDist = 333.;\n    \n    for(int x=-1; x <= 1; x++)\n    {\n        for(int y=-1; y <= 1; y++)\n        {\n            vec2 offs = vec2(x,y);\n            vec2 cID = hash22(ID + offs);\n            float nID = cID.x + cID.y * 0.5;\n            float nVariant = nID * 10000.;\n            float erratic = abs(sin(iTime * 0.25 + nVariant));\n            float movSpeed = iTime + (PI *erratic);\n            vec2 mov = getCosSin(nVariant + movSpeed);\n            vec2 pos = gv - offs -  mov * .5;\n            \n\n            float orbitPhase =  100. * (nID);\n            \n                \n            float orbitSpeed = iTime * 3.0;\n            if (nID > 0.5)\n                orbitSpeed *= -1.;\n            vec3 h = hue(cID.x + cID.y);\n            float erraticScale = 0.1 + (0.9 * erratic);\n            float orbitScale = 0.1 * erraticScale;\n            \n            \n\n            float p = 0.;\n            float orbitDist = 0.2 * erraticScale;\n            p += getBall(pos + getOrbitOffset(orbitSpeed, orbitPhase, orbitDist), orbitScale, 0.);                                    \n            p += getBall(pos + getOrbitOffset(orbitSpeed, orbitPhase + radians(180.), orbitDist), orbitScale, 0.);                                    \n            p += getBall(pos + getOrbitOffset(-orbitSpeed, orbitPhase, 0.2*erraticScale), orbitScale,0.);                                    \n            p += getBall(pos + getOrbitOffset(-orbitSpeed, orbitPhase + radians(180.), orbitDist), orbitScale,0.);                                                \n            p += getBall(pos + getOrbitOffset(orbitSpeed * 2., orbitPhase + radians(0.), orbitDist), orbitScale*.75, 0.);                                    \n            p += getBall(pos + getOrbitOffset(-orbitSpeed * 2., orbitPhase + radians(180.), orbitDist), orbitScale*.75, 0.);                                    \n            p += getBall(pos + getOrbitOffset(orbitSpeed * 4., orbitPhase + radians(0.), orbitDist), orbitScale*.5, 0.);                                    \n            p += getBall(pos + getOrbitOffset(-orbitSpeed * 4., orbitPhase + radians(180.), orbitDist), orbitScale*.5, 0.);                                    \n            \n            \n            float centerPulse = smoothstep(0.2, 0., length(sin((iTime * (1.0 + (2.0 *nID)) ) + nVariant)));\n            centerPulse += 0.3 * abs(sin(iTime*4.));\n            \n            p += getBall(pos , 0.2 * erraticScale, centerPulse);\n            col += h * p;\n            col = mix(col, vec3(1.), min(max(0., p - 1.), 1.0)) * pow(erraticScale,0.05);\n            \n            float dist = pow(length(pos), erraticScale );\n          \n            if(dist < nDist)\n            {\n                nDist = dist;\n            }\n        }\n    }\n    \n    \n    col += hue(pow(nDist  , 3.)+ (iTime * 0.5)) * pow(nDist, 8.) * 0.25;\n \n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}