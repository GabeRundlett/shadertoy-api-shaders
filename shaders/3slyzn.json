{
    "Shader": {
        "info": {
            "date": "1584008732",
            "description": "Traverse a fractal landscape with smooth transitions to avoid aliasing (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "3slyzn",
            "likes": 8,
            "name": "Mandalay Canyon",
            "published": 3,
            "tags": [
                "fractal",
                "raymarch",
                "landscape"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 510
        },
        "renderpass": [
            {
                "code": "// \"Mandalay Canyon\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// Traverse a fractal landscape with smooth transitions to avoid aliasing (mouseable).\n\n// More info in \"Mandalay Fractal\" (https://www.shadertoy.com/view/wstXD8)\n\n#define VAR_ZERO min (iFrame, 0)\n\nvec3 HsvToRgb (vec3 c);\nfloat Minv3 (vec3 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\n\nvec3 ltDir, pFold;\nfloat dstFar, mScale, tDisc;\nconst float pi = 3.14159;\n\nconst float itMax = 12.;\n\nfloat PPFoldD (vec3 p)\n{\n  vec3 s;\n  p.y = max (p.y, p.z);\n  s = vec3 (p.x, max (abs (p.x - pFold.x) - pFold.x, p.y - 4. * pFold.x),\n     max (p.x - 2. * pFold.x - pFold.y, p.y - pFold.z));\n  return Minv3 (s);\n}\n\nvec3 PPFold (vec3 p)\n{\n  return vec3 (PPFoldD (p), PPFoldD (p.yzx), PPFoldD (p.zxy));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec4 p4;\n  float pp;\n  p.xz = mod (p.xz + 1., 2.) - 1.;\n  p4 = vec4 (p, 1.);\n  for (float j = 0.; j < itMax; j ++) {\n    p4.xyz = 2. * clamp (p4.xyz, -1., 1.) - p4.xyz;\n    p4.xyz = - sign (p4.xyz) * PPFold (abs (p4.xyz));\n    pp = dot (p4.xyz, p4.xyz);\n    p4 = mScale * p4 / clamp (pp, 0.25, 1.) + vec4 (p, 1.);\n  }\n  return length (p4.xyz) / p4.w;\n}\n\nfloat ObjCf (vec3 p)\n{\n  vec4 p4;\n  float pp, ppMin, cn;\n  p.xz = mod (p.xz + 1., 2.) - 1.;\n  p4 = vec4 (p, 1.);\n  cn = 0.;\n  ppMin = 1.;\n  for (float j = 0.; j < itMax; j ++) {\n    p4.xyz = 2. * clamp (p4.xyz, -1., 1.) - p4.xyz;\n    p4.xyz = - sign (p4.xyz) * PPFold (abs (p4.xyz));\n    pp = dot (p4.xyz, p4.xyz);\n    p4 = mScale * p4 / clamp (pp, 0.25, 1.) + vec4 (p, 1.);\n    if (pp < ppMin) {\n      cn = j;\n      ppMin = pp;\n    }\n  }\n  return cn;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, h, s, sLo, sHi, eps;\n  eps = 0.0005;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    h = ObjDf (ro + s * rd);\n    if (h < eps || s > dstFar) {\n      sHi = s;\n      break;\n    }\n    sLo = s;\n    s += h;\n  }\n  if (h < eps) {\n    for (int j = VAR_ZERO; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      if (ObjDf (ro + s * rd) > eps) sLo = s;\n      else sHi = s;\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0001, -0.0001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.01, 0.1);\n    if (sh < 0.05) break;\n  }\n  return 0.4 + 0.6 * sh;\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (float j = float (VAR_ZERO) + 1.; j < 4.; j ++) {\n    d = 0.02 * j;\n    ao += max (0., d - ObjDf (ro + d * rd));\n  }\n  return 0.4 + 0.6 * clamp (1. - 5. * ao, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj, sh, ao;\n  pFold = HsvToRgb (vec3 (0., 0.2, 1.));\n  mScale = 3.;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    ao = ObjAO (ro, vn);\n    sh = min (ObjSShadow (ro, ltDir), ao);\n    col = HsvToRgb (vec3 (mod (0.02 * tDisc + 0.06 * ObjCf (ro), 1.), 0.5, 1.));\n    col = col * (0.2 * ao + 0.8 * sh * max (dot (vn, ltDir), 0.)) +\n       0.4 * step (0.95, sh) * pow (max (0., dot (ltDir, reflect (rd, vn))), 4.);\n  } else col = vec3 (0.4, 0.4, 0.5);\n  return pow (clamp (col, 0., 1.), vec3 (0.9));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, col[2];\n  vec2 canvas, uv;\n  float tCur, tStep, el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  zmFac = 1.2;\n  tCur = mod (tCur, 2400.) + 30. * floor (dateCur.w / 7200.) + 11.1;\n  dstFar = 10.;\n  ltDir = normalize (vec3 (0.3, 1.5, -1.));\n  tStep = 2.;\n  if (mPtr.z > 0.) {\n    az = 0.;\n    el = -0.05 * pi;\n    az += 2. * pi * mPtr.x;\n    el += 0.3 * pi * mPtr.y;\n    el = clamp (el, -0.49 * pi, 0.1 * pi);\n  }\n  for (int k = VAR_ZERO; k <= 1; k ++) {\n    tDisc = tStep * (float (k) + floor (tCur / tStep));\n    if (mPtr.z <= 0.) {\n      az = 0.;\n      el = -0.05 * pi;\n      az += 0.1 * pi * cos (0.013 * 2. * pi * tDisc);\n      el += 0.06 * pi * cos (0.01 * 2. * pi * tDisc);\n    }\n    rd = StdVuMat (el, az) * normalize (vec3 (uv, zmFac));\n    ro = vec3 (1., 4.1, 0.07 * tDisc);\n    col[k] = ShowScene (ro, rd);\n  }\n  fragColor = vec4 (mix (col[0], col[1], smoothstep (0.1, 0.9, fract (tCur / tStep))), 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}