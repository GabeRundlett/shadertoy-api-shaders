{
    "Shader": {
        "info": {
            "date": "1648711267",
            "description": "test",
            "flags": 36,
            "hasliked": 0,
            "id": "7tXyW2",
            "likes": 3,
            "name": "test348295764839275432",
            "published": 3,
            "tags": [
                "3d",
                "particles",
                "musicvisualizer",
                "trails",
                "multipass"
            ],
            "usePreview": 0,
            "username": "neotenomie",
            "viewed": 520
        },
        "renderpass": [
            {
                "code": "// Homecomputer by nimitz 2016 (twitter: @stormoid)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n//Code is in the other tabs:\n//Buf A = Velocity and position handling\n//Buf B = Rendering\n//Buf C = Soundcloud filtering and propagation\n\n#define time iTime\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy / iResolution.xy;\n\tvec3 col = texture(iChannel0, q).rgb;\n    col *= sin(gl_FragCoord.y*350.+time)*0.04+1.;//Scanlines\n    col *= sin(gl_FragCoord.x*350.+time)*0.04+1.;\n    col *= pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1)*0.35+0.65; //Vign\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Homecomputer by nimitz 2016 (twitter: @stormoid)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n//Velocity handling\n\n#define time iTime\n\nvec3 hash3(vec3 p)\n{\n    p = fract(p * vec3(443.8975,397.2973, 491.1871));\n    p += dot(p.zxy, p.yxz+19.1);\n    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z))-0.5;\n}\n\nvec3 update(in vec3 vel, vec3 pos, in float id)\n{\n    vec4 sndNFO = texture(iChannel2, vec2(0.75, 0.25));\n    float R = 1.5;\n    const float r = .5;\n    float t= time*2.+id*8.;\n    float d= 5.;\n    \n    float x = ((R-r)*cos(t-time*0.1) + d*cos((R-r)/r*t));\n    float y = ((R-r)*sin(t) - d*sin((R-r)/r*t));\n    \n    vel = mix(vel, vec3(x*1.2,y,sin(time*12.6+id*50. + sndNFO.z*10.)*7.)*5. +hash3(vel*10.+time*0.2)*7., 1.);\n    \n    //vel.z += sin(time*sndNFO.z)*50.;\n    //vel.z += sin(time + sndNFO.z*70.)*10.;\n    //vel.z += sin(time)*30.*sndNFO.x;\n    \n    return vel;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = q-0.5;\n    p.x *= iResolution.x/iResolution.y;\n    \n    vec2 mo = iMouse.xy/iResolution.xy-0.5;\n    \n    float dt = iTimeDelta;\n    \n    vec4 col= vec4(0);\n    \n    vec2 w = 1./iResolution.xy;\n    \n    vec3 pos = texture(iChannel0, vec2(q.x,100.*w)).xyz;\n    vec3 velo = texture(iChannel0, vec2(q.x,0.0)).xyz;\n    velo = update(velo, pos, q.x);\n    \n    if (fragCoord.y < 30.)\n    {\n    \tcol.rgb = velo;\n    }\n    else\n    {\n        pos += velo*0.002;\n        col.rgb = pos;\n    }\n\t\n    if (iFrame < 5) \n    {\n        if (fragCoord.y < 30.)\n        \tcol = ((texture(iChannel1, q*1.9))-.5)*vec4(0.,0.,0.,0.);\n        else\n        {\n            col = vec4(.0,-.7,0,0);\n        }\n    }\n    \n    \n    if (mod(float(iFrame), 300.) == 0. && fragCoord.y > 30.)\n    {\n        col = vec4(.0,-.2, -0.,0);\n    }\n    \n    col.a = q.x;\n    \n\tfragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Homecomputer by nimitz 2016 (twitter: @stormoid)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n//Rendering\n\n/*\n\tThis buffer renders each particles\n\tmultiple times per frame to allow particles\n\tto move more than one pixel per frame while still\n\tleaving a solid trail.\n*/\n\n#define time iTime\nconst int numParticles = 100;\nconst int stepsPerFrame = 9;\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\nfloat mag(vec3 p){return dot(p,p);}\n\nvec4 drawParticles(in vec3 ro, in vec3 rd, in float ints)\n{\n    vec4 rez = vec4(0);\n    vec2 w = 1./iResolution.xy;\n    \n    for (int i = 0; i < numParticles; i++)\n    {\n        vec3 pos = texture(iChannel0, vec2(i,100.0)*w).rgb;\n        vec3 vel = texture(iChannel0, vec2(i,0.0)*w).rgb;\n        \n        float st = sin(time*0.6);\n        \n        for(int j = 0; j < stepsPerFrame; j++)\n        {\n            float d = mag((ro + rd*dot(pos.xyz - ro, rd)) - pos.xyz);\n            d *= 1000.;\n            d = 2./(pow(d,1.+ sin(time*0.6)*0.15)+1.5);\n            d *= (st+4.)*.8;\n\n            rez.rgb += d*(sin(vec3(.7,2.0,2.5)+float(i)*.015 + time*0.3 + vec3(5,1,6))*0.45+0.55)*0.005;\n            \n            pos.xyz += vel*0.002*1.5;\n        }\n    }\n    \n    return rez;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\t\n    vec2 q = fragCoord.xy/iResolution.xy;\n\tvec2 p = fragCoord.xy/iResolution.xy-0.5;\n\tp.x*=iResolution.x/iResolution.y;\n\t\n\tvec3 ro = vec3(0.,0.,2.7);\n    vec3 rd = normalize(vec3(p,-.5));\n    \n    vec3 sndNFO = texture(iChannel2, vec2(0.65, 0.1)).zwx + vec3(-.5, -0.1, -0.0);\n    \n    vec4 cola = drawParticles(ro, rd, sndNFO.y)*10.;\n    if (mod(time+q.x*.15+q.y*0.15,28.) < 14.)cola = vec4(.9,.95,1.,1.)-cola*.9; //Invert colors\n    \n    vec2 mv = vec2(pow(sndNFO.z,2.)*0.05,sndNFO.x*.95);\n    mv *= mm2(time*1.);\n    \n    vec4 colb = texture(iChannel1, q+mv);\n    //vec4 colb = texture(iChannel1, q);\n    \n    vec4 col = mix(cola, colb, 0.91);\n    if (iFrame < 5) col = vec4(0);\n    \n\tfragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Homecomputer by nimitz 2016 (twitter: @stormoid)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n/*\n \tThe goal of this Buffer is to prepare\n\tthe sound data so that it can be used \n\tby the other buffers\n\n\tData output:\n\tx = fft\n\ty = waveform\n\tz = filtered waveform\n\tw = filtered fft summed over many bands\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.xy;\n    float fft  = texture( iChannel1, vec2(q.x,0.25) ).x;\n\tfloat nwave = texture( iChannel1, vec2(q.x,0.75) ).x;\n    \n    float owave = texture( iChannel0, vec2(q.x,0.25) ).z;\n    float offt  = texture( iChannel0, vec2(q.x,0.25) ).w;\n    \n    \n    float fwave = mix(nwave,owave, 0.85);\n    \n    \n    /*\n        get fft sum over many bands, this will allow\n\t\tto ge tthe current \"intensity\" of a track\n\t*/\n    float nfft = 0.;\n    for (float i = 0.; i < 1.; i += 0.05)\n    {\n        nfft += texture( iChannel1, vec2(i,0.25) ).x; \n    }\n    nfft = clamp(nfft/30.,0.,1.);\n    \n    float ffts = mix(nfft, offt, 0.8);\n    \n    if (iFrame < 5) \n    {\n        fft = 0.;\n        fwave= .5;\n        ffts = 0.;\n    }\n    \n    fragColor = vec4(fft, nwave, fwave, ffts);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}