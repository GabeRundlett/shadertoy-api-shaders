{
    "Shader": {
        "info": {
            "date": "1529725349",
            "description": "It is not finished. It is more like something that will never be finished. Haha! Just making some tests with this shader using Mandelbrot.",
            "flags": 0,
            "hasliked": 0,
            "id": "XdyfRK",
            "likes": 2,
            "name": "Mandelbrot Twist",
            "published": 3,
            "tags": [
                "notags"
            ],
            "usePreview": 0,
            "username": "pedrolb",
            "viewed": 626
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 0.1 * (fragCoord - iResolution.xy / 2.0) / iResolution.xy;\n    uv *= vec2(iResolution.x / iResolution.y, 1.0);\n    uv += vec2(-0.01, 0.0);\n    \n    float iterations = 0.0;\n    float iterations_g = 0.0;\n    float iterations_b = 0.0;\n    \n    float max_iterations = 100.;\n    vec2 z = vec2(0.0, 0.0);\n    \n    // Twist Matrix\n    mat2x2 twist_mat = mat2x2(\n        vec2(cos(10.0 * length(uv * 4.0) * length(uv * 4.0)), - sin(10.0 * length(uv * 4.0) * length(uv * 4.0))),\n        vec2(sin(10.0 * length(uv * 4.0) * length(uv * 4.0)), cos(10.0 * length(uv) * length(uv * 4.0)))\n    );\n    \n    // Rot Matrix\n    mat2x2 rot_mat = mat2x2(\n        vec2(cos(iTime), - sin(iTime)),\n        vec2(sin(iTime), cos(iTime))\n    );\n    \n    // for red and blue\n    for(float i = 0.0; i < max_iterations; i++)\n    {        \n        z = i * twist_mat * inverse(rot_mat) * vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) +  uv;\n        \n        if(length(z) > 2.0)\n            break;            \n        \n        \n        iterations += 1.0;\n    }\n    \n    // for green\n    for(float i = 0.0; i < max_iterations; i++)\n    {        \n        z = i * twist_mat * inverse(rot_mat) * inverse(rot_mat) * vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) +  uv;\n        \n        if(length(z) > 2.0)\n            break;            \n        \n        \n        iterations_g += 1.0;\n    }\n    \n    // for blue\n    for(float i = 0.0; i < max_iterations; i++)\n    {        \n        z = i * twist_mat * inverse(rot_mat) * inverse(rot_mat) * inverse(rot_mat) * vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) +  uv;\n        \n        if(length(z) > 2.0)\n            break;            \n        \n        \n        iterations_b += 1.0;\n    }\n    \n    vec3 col = vec3(iterations / max_iterations, iterations_g / max_iterations, iterations_b / max_iterations);\n        \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}