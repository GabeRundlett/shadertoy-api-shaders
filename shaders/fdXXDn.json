{
    "Shader": {
        "info": {
            "date": "1648692699",
            "description": "Random doodling with rotation.",
            "flags": 32,
            "hasliked": 0,
            "id": "fdXXDn",
            "likes": 10,
            "name": "Shaderdoodle II",
            "published": 3,
            "tags": [
                "doodle",
                "rotation",
                "parametric"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 194
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    float unit = 3.0 / iResolution.y;\n\n    float curTime = float(iFrame) * dt;\n\n    vec2 linkOrigin = vec2(0.0);\n    for (int link=0; link < LINKS; link++) {\n        vec3 curLink = getLink(link);\n        float curAngle = curLink.y * curTime + curLink.x;\n        vec2 linkEnd = linkOrigin + vec2(cos(curAngle), sin(curAngle)) * curLink.z;\n        fragColor.rgb += smoothstep(unit, 0.0, sdLine(uv, linkOrigin, linkEnd));\n        linkOrigin = linkEnd;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    float unit = 2.0 / iResolution.y;\n\n    float curTime = float(iFrame) * dt;\n    float prevTime = curTime - dt;\n\n    vec2 prevPos = vec2(0.0);\n    vec2 curPos = vec2(0.0);\n    for (int link=0; link < LINKS; link++) {\n        vec3 curLink = getLink(link);\n\n        float prevAngle = curLink.y * prevTime + curLink.x;\n        prevPos += vec2(cos(prevAngle), sin(prevAngle)) * curLink.z;\n\n        float curAngle = curLink.y * curTime + curLink.x;\n        curPos += vec2(cos(curAngle), sin(curAngle)) * curLink.z;\n    }\n\n    fragColor.rgb = mix(fragColor.rgb, hue2rgb(fract(0.25 * iTime)), smoothstep(unit, 0.0, sdLine(uv, prevPos, curPos) - 0.001));\n    fragColor.rgb *= 0.99;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define hue2rgb(t) clamp(abs(6.0 * fract(vec3(t, t - 1.0 / 3.0, t - 2.0 / 3.0)) - 3.0) - 1.0, 0.0, 1.0)\n\n#define LINKS 50\n#define dt 0.02\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 Hash13(in float x) {\n   vec3 p3 = fract(x * vec3(0.1031, 0.1030, 0.0973));\n   p3 += dot(p3, p3.yzx + 33.33);\n   return fract((p3.xxy + p3.yzz) * p3.zyx); \n}\n\nvec3 getLink(in int n) {\n    float i = float(n);\n    vec3 link = Hash13(i + 10.0);\n    link.x = link.x * 2.0 - 1.0;\n    link.y *= i * i * 0.01 * sign(Hash13(i + 13.0).x - 0.5);\n    //link.y = 0.25 * i * sign(Hash13(i + 13.0).x - 0.5);\n    link.z *= 0.1;\n    return link;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}