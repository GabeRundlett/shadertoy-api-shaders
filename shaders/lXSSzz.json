{
    "Shader": {
        "info": {
            "date": "1710191067",
            "description": "Zoom in into a Mandelbrot set",
            "flags": 0,
            "hasliked": 0,
            "id": "lXSSzz",
            "likes": 2,
            "name": "The Mandelbrot set zoom in",
            "published": 3,
            "tags": [
                "2d",
                "mandelbrotset"
            ],
            "usePreview": 0,
            "username": "Salwin",
            "viewed": 123
        },
        "renderpass": [
            {
                "code": "vec2 complexPower(vec2 com)\n{\n   vec2 w = vec2(0.,0.);\n   w.x = com.x*com.x - com.y * com.y;\n   w.y = 2. * com.x*com.y;\n   return w;\n}\n\nvec3 gradient(float c)\n{\nvec3 c1 = vec3(0.9,sin(iTime),cos(iTime/2.));\nvec3 c2 = vec3(0.0,0.,0.);\n\nvec3 color = vec3(0.);\n\ncolor += c1*c;\ncolor += c2*(1.-c);\n\nreturn color;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0 - iResolution.xy)/iResolution.y;\n    \n    float przyb = 1./pow(1.3,iTime);\n    int iteracje = int(10.*iTime);\n    uv*=przyb;\n    uv += vec2(-0.761574,-0.0847596); // punkt przyblizenia\n\n    vec2 orUv = uv;\n    \n    float itera = 0.;\n    \n    vec3 col = vec3(0.);\n    \n    for(int i = 0; i<iteracje;i++)\n    {\n        uv = complexPower(uv);\n        uv += orUv;\n        itera += 1.;\n        if(uv.x>2.||uv.y>2.) break;\n    }\n\n\n    // Output to screen\n    fragColor = vec4(gradient(itera/float(iteracje)),itera/float(iteracje));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}