{
    "Shader": {
        "info": {
            "date": "1512593949",
            "description": "I needed a Maze function",
            "flags": 0,
            "hasliked": 0,
            "id": "4tXfzX",
            "likes": 1,
            "name": "Dumb maze",
            "published": 3,
            "tags": [
                "2d",
                "maze",
                "1bit"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 484
        },
        "renderpass": [
            {
                "code": "// this could be swap for a more eficient version,  I guess\n\n// from https://www.shadertoy.com/view/MtlczH\n#define SEED 1.123456789\n#define HASHM mat3(40.15384,31.973157,31.179219,10.72341,13.123009,41.441023,-311.61923,10.41234,178.127121)\n\nfloat hash(vec3 p) {\n\tp = fract((vec3(p.x, p.y, p.z) + SEED * 1e-3) * HASHM);\n    p += dot(p, p.yzx + 41.19);\n    return fract((p.x + p.y) * p.z);\n}\n\n\nfloat maze(vec2 pos, float mazeRes, float closeness)\n{\n  vec2 cellCoord = floor(mazeRes * pos);\n  vec2 muv = (mazeRes * pos) - cellCoord;\n\n  float north = hash(cellCoord.xyy + vec3(0.,1.,0.));\n  float east = hash(cellCoord.xyy + vec3(1.,0.,0.));\n  float south = hash(cellCoord.xyy + vec3(0.,-1.,0.));\n  float west = hash(cellCoord.xyy + vec3(-1.,0.,0.));\n\n  float f = step(muv.y,.6) * step(north, closeness) * step(abs(muv.x - .5),.1);\n  f +=  step(.4,muv.y) * step(south, closeness) * step(abs(muv.x - .5),.1);\n  f +=  step(muv.x,.6) * step(east, closeness) * step(abs(muv.y - .5),.1);\n  f +=  step(.4,muv.x) * step(west, closeness) * step(abs(muv.y - .5),.1);\n  return f;\n}\n\nfloat mazeSimple(vec2 pos, float mazeRes, float closeness)\n{\n \tvec2 cellCoord = floor(mazeRes * pos);\n  \tvec2 muv = (mazeRes * pos) - cellCoord;\n\n    float f = hash(cellCoord.xyy);\n    f = step(f, .5);\n    f = f * step(muv.x,.1) + (1. - f) * step(muv.y,.1);\n    \n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float mazeResolution = 12.;\n    float mazeCloseness = .6;\n    \n    float maze1 = mazeSimple(uv,mazeResolution,mazeCloseness);\n    float maze2 = maze(uv,mazeResolution,mazeCloseness);\n    \n\tfloat f = mix(maze1,maze2,step(uv.x,.5));\n    fragColor = vec4(f);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}