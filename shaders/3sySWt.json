{
    "Shader": {
        "info": {
            "date": "1575254718",
            "description": "made some slime by accident while listening to slime tom's music. watch the recording here https://www.twitch.tv/videos/515979354",
            "flags": 0,
            "hasliked": 0,
            "id": "3sySWt",
            "likes": 9,
            "name": "Twitch: Slime on Slime",
            "published": 3,
            "tags": [
                "slime",
                "twitch",
                "livecode"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 518
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)\nfloat hash(vec2 k) {\n  int x = FK(k.x);int y = FK(k.y);\n  return float((x*x-y)*(y*y+x)-x)/2.14e9;\n}\n\nfloat hash3(vec3 k) {\n  float h1 = hash(k.xy);\n  return hash(vec2(h1, k.z));\n}\n\nvec3 hash33(vec3 k) {\n  float h1 = hash3(k);\n  float h2 = hash3(k*h1);\n  float h3 = hash3(k*h2);\n  return vec3(h1, h2, h3);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nvec3 sphercoord(vec2 p) {\n  float l1 = acos(p.x);\n  float l2 = acos(-1.)*p.y;\n  return vec3(cos(l1), sin(l1)*sin(l2), sin(l1)*cos(l2));\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(p,ax)*ax, p, cos(ro)) + sin(ro)*cross(p,ax);\n}\n\nfloat comp(vec3 p, vec3 ro, float t) {\n  vec3 ax = sphercoord(ro.xy);\n  p = erot(p, ax, ro.z*acos(-1.));\n  p.z += t;\n  float scale = 4. + hash(ro.xz)*0.5+0.5;\n  p = (fract(p/scale)-0.5)*scale;\n  return length(p) - 0.8;\n}\n\nfloat scene(vec3 p) {\n  float rad = 3.-abs(p.z);\n  float dist = 10000.;\n  for (int i = 0; i < 5; i++) {\n    vec3 rot = hash33(vec3(float(i+1), cos(float(i)), sin(float(i))));\n    float d = comp(p, rot, iTime/2.);\n    dist = smin(dist, d, 1.);\n  }\n  return mix(dist, rad, mix(0.3,0.8+sin(iTime)*0.2, sign(p.z)*0.5+0.5));\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p)-mat3(0.1);\n  return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nfloat drawdist = 40.;\nvec3 trace(vec3 init, vec3 cam, int itcout, inout bool hit) {\n  vec3 p = init;\n  hit = false;\n  for (int i = 0; i < itcout; i++) {\n    float dist = scene(p)*1.1;\n    if (abs(dist) < 0.001) { hit = true; p+= dist*cam; break;}\n    if (distance(p, init) > drawdist) { break; }\n    p += dist*cam;\n  }\n  return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  \n  uv.x += sin(uv.x*5.+iTime)*0.03;\n  uv.x += sin(uv.y*3.+0.9*iTime)*0.03;\n  uv.y += sin(uv.x*7.-0.7*iTime)*0.01;\n  uv.y += sin(uv.y*4.+0.6*iTime)*0.01;\n\n  \n  vec3 slimecol = vec3(0.05,0.4,0.05);\n  float bt = floor(iTime*0.8);\n  float beat = mod(bt, 4.);\n  if (beat ==1.) slimecol = slimecol.yxz;\n  if (beat ==2.) slimecol = vec3(0.05,0.2,0.4);\n  if (beat ==3.) slimecol = slimecol.yxy;\n  \n  vec3 cam = normalize(vec3(0.8,uv));\n  bool hit = false;\n  vec3 col = vec3(1);\n  vec3 totalball = vec3(1);\n  vec3 p; vec3 n;\n  vec3 init = vec3(0,0,sin(iTime*0.37)*1.4);\n  cam = erot(cam, vec3(0,1,0), -0.2);\n  init = erot(init, vec3(0,1,0), -0.2);\n  cam = erot(cam, vec3(1,0,0), hash(vec2(bt,bt))*0.2);\n  init = erot(init, vec3(1,0,0), hash(vec2(bt,bt))*0.2);\n  init += vec3(mod(iTime,100.)*3.+beat*8.,0.,0.);\n  vec3 firtn;\n  float fog;\n  for (int i = 0; i < 3; i++) {\n    p = trace(init, cam, 300/(i+1), hit);\n    if (!hit) break;\n    n = norm(p);\n    if (i ==0) firtn = n;\n    float fresnel = pow(1.-abs(dot(cam, n))*0.98,2.);\n    if (i==0) { fog = pow(distance(p, init)/drawdist, 2.); }\n    col *= fresnel*mix(slimecol,vec3(1),0.4);\n    cam = reflect(cam, n);\n    hit = false;\n    init = p+n*.01;\n  }\n  col = mix(col, vec3(1), fog);\n\n  fragColor.xyz = sqrt(1.-(1.-slimecol*(sin(firtn*4.)*0.3+0.7))*(1.-col));\n  fragColor.xyz = smoothstep(vec3(0),vec3(1),fragColor.xyz);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}