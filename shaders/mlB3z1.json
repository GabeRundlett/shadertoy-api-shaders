{
    "Shader": {
        "info": {
            "date": "1672844425",
            "description": "grid",
            "flags": 0,
            "hasliked": 0,
            "id": "mlB3z1",
            "likes": 0,
            "name": "Anti-aliased grid 2023",
            "published": 3,
            "tags": [
                "grid"
            ],
            "usePreview": 0,
            "username": "darkeclipz",
            "viewed": 391
        },
        "renderpass": [
            {
                "code": "mat2 rot(float angle) \n{\n    float c = cos(angle), s = sin(angle);\n    return mat2(c,s,-s,c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    // Rotate the grid to show aliasing.\n    uv *= rot(0.2*iTime);\n    \n    // Time varying pixel color\n    vec3 col = vec3(1);\n    \n    // Scale the grid so we have more lines.\n    float gridSize = 4.;\n    \n    // Grid lines size independent of the scale of uv.\n    float gridLineSize = fwidth(uv.x) * gridSize;\n    \n    // Domain repetition and offsetting.\n    vec2 repeatedUV = abs(fract(gridSize * uv) - 0.5);\n    \n    // Smoothstep to get the grid lines.\n    vec2 grid = smoothstep(gridLineSize, 0.0, repeatedUV);\n    \n    // Add the grid line colors to the output color.\n    vec3 gridLineColor = vec3(0.8);\n    col = mix(gridLineColor, col, clamp(grid.x + grid.y, 0.0, 1.0));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}