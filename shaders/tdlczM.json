{
    "Shader": {
        "info": {
            "date": "1584479828",
            "description": "Playing with an updated marching/lighting setup",
            "flags": 0,
            "hasliked": 0,
            "id": "tdlczM",
            "likes": 3,
            "name": "Metagrid",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "haptix",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "float pi = acos(-1.);\nfloat glo = 0.;\n\nmat3 rotateY(float rad)\n{\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat3(\n        c, 0., s,\n        0., 1., 0.,\n        -s, 0., c\n    );\n}\n\nmat3 rotateZ(float rad)\n{\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat3(\n        c, s, 0.,\n        -s, c, 0.,\n        0., 0., 1.\n    );\n}\n\nfloat sphere(vec3 pos, float radius)\n{\n    return length(pos) - radius;\n}\n\nfloat map(vec3 p)\n{   \n   \tp = rotateZ(.15 * iTime) * rotateY(.17 * iTime) * p;\n    p += -.4 * vec3(cos(abs(p.x)*15. + 1.3*iTime),\n                    sin(p.y*15. + iTime),\n                    cos(abs(p.z)*15. + 1.5*iTime) * sin(p.x*p.y*12. + 1.7*iTime) * 2.2);\n    float m = sphere(p, .4*sin(.43*iTime) + .6);\n    glo += .18 / (.18 + m*m);\n    return m;\n}\n\nfloat tr(vec3 ro, vec3 rd)\n{\n\tfloat  h,t = .1;\n\tfor(int i = 0; i < 256; i++)\n\t{\n\t\th = map(ro + rd*t) * .1;\n\t\tif(h < .001 || t > 120.)\n\t\t\tbreak;\n\t\tt += h;\n  \t}\n\treturn t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 ro = vec3(0., 0., -2.5);\n\tvec3 camTarget = vec3(0.);\n\tvec3 up = vec3(0., 1., 0.);\n\tvec3 camDir = normalize(camTarget - ro);\n\tvec3 camRight = normalize(cross(up, ro));\n\tvec3 camUp = normalize(cross(camDir, camRight));\n    vec3 lightPos = vec3(-2., -2., -15.);\n  \n\tvec2 screenPos = -1. + 2. * gl_FragCoord.xy / iResolution.xy;\n\tscreenPos.x *= iResolution.x / iResolution.y;\n\n\tvec2 eps = vec2(0., .05);\n\tvec3 rd = normalize(camRight*screenPos.x + camUp*screenPos.y + camDir);\n  \n\tfloat t = tr(ro, rd);\n\n    vec3 colRot = sin(vec3(.151, .227, .317) * iTime) + 1.2;\n    \n    if (t < 120.)\n    {\n        vec3 hit = ro + rd*t;\n        vec3 lightDir = normalize(lightPos - hit);\n        \n        vec3 norm = normalize(map(hit) - vec3(map(hit - eps.yxx),\n                              map(hit - eps.xyx),\n                              map(hit - eps.xxy)));\n        \n        \n        float diff = max(.2, dot(lightDir, norm));\n        float spec = pow(max(dot(rd, reflect(norm, lightDir)), 0.), 50.);\n        float ao = clamp(map(t + norm*.5) / .5, 0., 1.);\n\n        vec3 col =  .2*colRot * .2*ao;\n        col += .3 * diff * colRot.yzx;\n        col += .5 * spec * vec3(1., 1., 1.);\n\n        col += glo*.0105 * colRot.yxz;\n        fragColor = vec4(col, 1.);        \n    }\n    else\n    \tfragColor = vec4(glo*.0105*colRot.yzx, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}