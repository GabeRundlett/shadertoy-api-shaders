{
    "Shader": {
        "info": {
            "date": "1575775266",
            "description": "Same as the previous \"ancient\" shader but I wanted to try the trick where you color based on how many steps your march took (which I saw here https://github.com/electricsquare/raymarching-workshop)",
            "flags": 32,
            "hasliked": 0,
            "id": "Wtd3z4",
            "likes": 8,
            "name": "shadetober #23 (ancient.b)",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "shadetober",
                "inktober2019"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 390
        },
        "renderpass": [
            {
                "code": "// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n    \nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\n//Value Noise (copied from https://www.shadertoy.com/view/ldKGzK)\nfloat hash( float n ) { return fract(sin(n) * 753.5453123); }\nfloat value_noise( in vec3 x )\n{\n  vec3 p = floor(x);\n  vec3 f = fract(x);\n  f = f * f * (3.0 - 2.0 * f);\n\n  float n = p.x + p.y * 157.0 + 113.0 * p.z;\n  return mix(mix(mix( hash(n +  0.0), hash(n +  1.0), f.x),\n                 mix( hash(n + 157.0), hash(n + 158.0), f.x), f.y),\n             mix(mix( hash(n + 113.0), hash(n + 114.0), f.x),\n                 mix( hash(n + 270.0), hash(n + 271.0), f.x), f.y), f.z);\n}\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\n\nfloat fbm3(vec3 p) {\n  float n = 0.0;\n  n = value_noise(p);\n\n  float a = 0.5;\n  for (int i = 0; i < 10; i++) {\n    n += a * value_noise(p);\n    p = p * 2.0;\n    a = a * 0.5;\n  }\n  return n;\n}\n\nfloat map(vec3 p) {\n    float jerkyTime = texture(iChannel0, vec2(0.)).r;\n    float displacement = noise((p*2.+vec3(0., jerkyTime, sin(jerkyTime)))*2.) * .2;\n    float gobbler = fbm3(p) * .1;\n    return sdSphere(p, .5) - displacement - gobbler;\n}\n\nvec3 grad(vec3 p) {\n    vec2 eps = vec2(.001, 0.);\n    return normalize(map(p) - vec3(map(p - eps.xyy), map(p - eps.yxy), map(p - eps.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2. - iResolution.xy)/iResolution.y;\n    // Time varying pixel color\n    vec3 col = (1.-vec3(length(uv)) * .7) * .4;\n    vec3 ro = vec3(0.,0.,1.2);\n    vec3 rd = normalize(vec3(uv.xy, -1.));\n    \n    vec3 ld = vec3(.2,.2,.2);\n    \n    float t = 0.;\n    int ii = 0;\n    for (int i = 0; i < 100; i++) {\n        ii++;\n        vec3 p = ro + rd * t;\n        float h = map(p);\n        if (h < .001) {\n            break;\n        }\n        t += h;\n        if(t > 10.) {break;}\n    }\n    col = vec3(float(ii)/100.,0.,0.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.141\n\nfloat smoothSquare(float x, float delta) {\n    return (1./PI) * atan(sin(PI*2. * x * .5) / delta) + .5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float prev = texture(iChannel0, vec2(0.)).r;\n    vec3 col = vec3(prev + iTimeDelta * smoothSquare(iTime, .1) * 4.);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}