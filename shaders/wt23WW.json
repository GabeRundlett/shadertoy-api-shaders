{
    "Shader": {
        "info": {
            "date": "1559659827",
            "description": "yeah",
            "flags": 0,
            "hasliked": 0,
            "id": "wt23WW",
            "likes": 1,
            "name": "Distance circle",
            "published": 3,
            "tags": [
                "bl"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 412
        },
        "renderpass": [
            {
                "code": "#define squv *= iResolution.x/iResolution.y;\n\nfloat map( float a, float a1, float a2, float b1, float b2 ) {\n    return (a - a1) / (a2 - a1) * (b2 - b1) + b1;\n}\n\nfloat dcircle( vec2 p, vec2 o, float r ) {\n    \n    //float rcos = dot(p-o, vec2(1.,0.));\n    \n    //float rd = acos(rcos);\n    \n    vec2 n = normalize(p-o);\n    vec2 nr = n * r;\n    \n    return distance(nr+o, p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mo = iMouse.xy / iResolution.xy;\n    \n    mo.x squv uv.x squv\n\n    // Time varying pixel color\n    ///vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col = vec3(pow(sin(dcircle( uv, vec2(0.5), distance(mo, vec2(0.5) ) )*64.+iTime)/2.+0.5, 0.07));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}