{
    "Shader": {
        "info": {
            "date": "1706865720",
            "description": "primitives",
            "flags": 0,
            "hasliked": 0,
            "id": "XcSSD3",
            "likes": 1,
            "name": "primitives001",
            "published": 3,
            "tags": [
                "primitives"
            ],
            "usePreview": 0,
            "username": "kenshin",
            "viewed": 144
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST  100.\n#define MAX_STEPS 100\n#define MIN_DIST  .000001\n\nmat2 rot2d(float r)\n{\n    float c = cos(r);\n    float s = sin(r);\n    return mat2(c, -s, s, c);\n}\n\n\nvec3 getRayDirection(vec2 uv, vec3 ro, vec3 lookAt, float zoom)\n{\n    vec3 f = normalize(lookAt - ro);\n    vec3 r = normalize(cross(vec3(0, 1, 0), f));\n    vec3 u = cross(f, r);\n    vec3 c = ro + zoom * f;\n    vec3 p = c + uv.x * r + uv.y * u;\n    return normalize(p - ro);\n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdPlane(vec3 p, vec3 n, float h)\n{\n    return dot(p, n) - h;\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    float e = length(max(q, .0));\n    float i = min(max(q.x, max(q.y, q.z)), .0);\n    return e + i;\n}\n\nfloat sdTorus(vec3 p, vec2 rs)\n{\n    float x = length(p.xz) - rs.x;\n    float y = p.y;\n    return length(vec2(x, y)) - rs.y;\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r)\n{\n\n    vec3 ab = b - a;\n    vec3 ap = p - a;\n    float t = clamp(dot(ab, ap) / dot(ab, ab), .0, 1.);\n    vec3 c = a + ab * t;\n    return length(p - c) - r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 ab = b - a;\n    vec3 ap = p - a;\n    float t = dot(ab, ap) / dot(ab, ab);\n    vec3 c = a + t * ab;\n    // + <- [0 -0.5 0] -> +\n    t = abs((t - .5)) - .5;\n    float x = length(p - c) - r;\n    float y = t * length(ab);\n    float e = length(max(vec2(x, y), .0));\n    float i = min(max(x, y), .0);\n    return e + i;\n}\n\nfloat sdScene(vec3 p)\n{\n    float s = sdSphere(p, 1.);\n    float e = sdPlane(p, vec3(0, 1, 0), -1.);\n    float b = sdBox(p - vec3(0, 0, 3), vec3(1.));\n    float t = sdTorus(p - vec3(0, 0, -3), vec2(1.2, .2));\n    float c = sdCapsule(p, vec3(3, 0.1, -5), vec3(3, 0.1, 3), .3);\n    float r = sdCylinder(p, vec3(-3, 1, -5), vec3(-3, 1, 8), .3);\n    float d = min(s, e);\n    d = min(d, b);\n    d = min(d, t);\n    d = min(d, c);\n    d = min(d, r);\n    return d;\n}\n\nvec3 getNormal(vec3 p)\n{\n    float s = sdScene(p);\n    vec2 e = vec2(.001, .0);\n    vec3 n = s - vec3(\n        sdScene(p - e.xyy),\n        sdScene(p - e.yxy),\n        sdScene(p - e.yyx)\n    );\n    return normalize(n);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd)\n{\n    float t = .0;\n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + t * rd;\n        float dist = sdScene(p);\n        t += dist;\n        if(dist < MIN_DIST || t > MAX_DIST) break;\n    }\n    return t;\n}\n\nvec3 getLight(vec3 p)\n{\n    vec3 lPos = vec3(2., 6., -.4);\n    return normalize(lPos - p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy * 2. - iResolution.xy) / iResolution.y;\n    vec2 mouse = iMouse.xy / iResolution.xy; \n    vec3 ro = vec3(0, 8, -6);\n    ro.xz *= rot2d(-mouse.x * 6.28318);\n    ro.yz *= rot2d(-mouse.y * 3.14159 + 1.);\n    vec3 rd = getRayDirection(uv, ro, vec3(0, 1, 0), 2.5);\n    vec3 col = vec3(.0);\n    float t = rayMarch(ro, rd);\n    if(t < MAX_DIST)\n    {\n        vec3 p = ro + t * rd;\n        vec3 n = getNormal(p);\n        vec3 l = getLight(p);\n        float diff = max(dot(n, l), .0);\n        col = vec3(diff);\n    }\n    // Output to screen\n    col = pow(col, vec3(.4545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}