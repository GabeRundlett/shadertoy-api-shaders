{
    "Shader": {
        "info": {
            "date": "1572597306",
            "description": "Inktober, but with shaders",
            "flags": 0,
            "hasliked": 0,
            "id": "WsdSzM",
            "likes": 3,
            "name": "shadetober #20 (tread)",
            "published": 3,
            "tags": [
                "inktober",
                "shadertober",
                "shadetober",
                "inktober2019"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 356
        },
        "renderpass": [
            {
                "code": "float sdRhombus( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p);\n    float h = clamp((-2.0*dot(q,b)+dot(b,b))/dot(b,b),-1.0,1.0);\n    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( q.x*b.y + q.y*b.x - b.x*b.y );\n}\n\nfloat expImpulse( float k, float x )\n{\n    float h = k*x;\n    return h*exp(1.0-h);\n}\n\nfloat map (in vec2 p) {\n    float dist = 10.;\n    \n    const float spacer = .01;\n    const vec2 rhwid = vec2(.1,.2);\n    \n    const vec2 xoffs = vec2(rhwid.x + spacer, 0.);\n    for (int i = 0; i < 20; i++) {\n    vec2 yoffs = vec2(0., (rhwid.y + spacer) * float(i));\n        if (i % 2 == 0) {\n        \tdist = min(dist, sdRhombus(p + yoffs + xoffs, rhwid));\n\t\t\tdist = min(dist, sdRhombus(p + yoffs - xoffs, rhwid));\n        } else {\n        \tdist = min(dist, sdRhombus(p + yoffs, rhwid));\n        \tdist = min(dist, sdRhombus(p + yoffs + xoffs * 2., rhwid));\n\t\t\tdist = min(dist, sdRhombus(p + yoffs - xoffs * 2., rhwid));\n        }\n    }\n    \n    return dist;\n}\n\nmat2 rot(float a) {\n    return mat2(\n        cos(a), sin(a),\n        -sin(a), cos(a)\n        );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (\n        fragCoord * 2.)/iResolution.y;\n    uv.y -= 2.;\n    uv.x += .5;\n\n    // Time varying pixel color\n    vec3 col = vec3(1.,.8,0.);\n    const vec3 GRAY = vec3(.1);\n    \n    for (int i = 0; i < 7; i++) {\n        uv.x -= .6;\n        \n        vec2 uv_r = rot(.1) * uv;\n        if (map(uv_r) < .0 && abs(uv_r.x) < .25) {\n            float pulse = expImpulse(1., fract(iTime - .1 * float(i) + uv_r.y * .1));\n            col = mix(col, GRAY, 1.-pulse);\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}