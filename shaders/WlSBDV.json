{
    "Shader": {
        "info": {
            "date": "1599991833",
            "description": "Based on : https://www.math.ucdavis.edu/~gravner/papers/cca.pdf\n\nThe delay is so you have time to put it in full screen :D\n\nTry changing the value of N!\nMy implementation is probably flawed in some way since some N values don't yield any good results",
            "flags": 32,
            "hasliked": 0,
            "id": "WlSBDV",
            "likes": 5,
            "name": "Cyclic Cellular Automata Test",
            "published": 3,
            "tags": [
                "cellularautomata",
                "cca"
            ],
            "usePreview": 0,
            "username": "clepirelli",
            "viewed": 610
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    uint thisN = decodeN(iChannel0, uv);\n    \n    float Nscale = 1.0 / float(N);\n    \n    fragColor = vec4(pow(pal(float(thisN) * Nscale).xyz, vec3(1./2.2)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 originalUV = uv;\n    \n    if(iFrame % (100/SPEEDPERCENTAGE) != 0)  //slow down the simulation a bit\n    {\n    \tfragColor = texture(iChannel0, originalUV);\n        return;\n    }\n    \n    float aspectRatio = iResolution.y/iResolution.x;\n    uv.y *= aspectRatio;\n    \n    vec2 pixel = vec2(1.0)/iResolution.xy;\n    \n    vec2 mouseUV = iMouse.xy/iResolution.xy;\n    mouseUV.y *= iResolution.y/iResolution.x;\n    \n    bool timerFinished = iTime < 2.0;\n    if(timerFinished)\n    {\n        #if RANDOM\n        uint imageN = uint(rand(uv*iDate.z) * float(N));\n        #else\n        vec3 textureColor = texture(iChannel1, uv).rgb;\n        float luminance = textureColor.r *.2126 + textureColor.g *.7152 + textureColor.b * .0722;\n        uint imageN = uint(luminance * float(N));\n       \t#endif\n\t\tfragColor = encodeN(imageN);\n    } else \n    {\n    \tuint myN = decodeN(iChannel0, originalUV);\n        \n    \tfor(int i = -1; i<= 1; i++)\n    \tfor(int j = -1; j<= 1; j++)\n    \t{\n            vec2 pixelOffset = vec2(float(i) * pixel.x, float(j) * pixel.y);\n            vec2 coordinates = mod(originalUV + pixelOffset, vec2(1.0));\n            \n    \t    uint neighborN = decodeN(iChannel0, coordinates);\n    \t    \n            if((neighborN - myN) % N == 1U)\n            {\n                myN = neighborN;\n                break;\n            }\n    \t}\n        \n        fragColor = encodeN(myN);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\n#define N  27U\n\n\n#define PALETTE 1\n#define RANDOM 1\n\n//doesn't do anything after 100, it's just to speed things down\n#define SPEEDPERCENTAGE 33\n\n//from iq : https://www.shadertoy.com/view/ll2GD3\n\nvec3 pal(in float t)\n{\n#if PALETTE == 0\n    return vec3(t);\n#else\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(1.0,1.0,1.0);\n    vec3 d =vec3(0.0,0.33,0.67);\n    return a + b*cos( 6.28318*(c*t+d) );\n#endif\n    \n}\n\nfloat rand(vec2 value){\n    return fract(sin(dot(value,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nuint decodeN(in sampler2D channel, in vec2 uv)\n{\n\treturn uint(texture(channel, uv).r);\n}\n\nvec4 encodeN(in uint n)\n{\n\treturn vec4(float(n), .0, .0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}