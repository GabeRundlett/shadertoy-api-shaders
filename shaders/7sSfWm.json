{
    "Shader": {
        "info": {
            "date": "1646399643",
            "description": "Created by https://www.shadertoy.com/user/Ultraviolet\nModified for use with https://github.com/robclouth/ppxxll",
            "flags": 32,
            "hasliked": 0,
            "id": "7sSfWm",
            "likes": 4,
            "name": "Table Tracer [ppxxll]",
            "published": 3,
            "tags": [
                "2d",
                "tracing",
                "caustic",
                "epicycloid"
            ],
            "usePreview": 0,
            "username": "robclouth",
            "viewed": 270
        },
        "renderpass": [
            {
                "code": "//@author Ultraviolet\n//@title Table Tracer\n//@description Inspired by 'modular multiplication table' diagrams.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord -iResolution.xy*.5)/iResolution.y*2.;\n    \n    vec4 state = texelFetch(iChannel0, ivec2(0), 0);\n    \n    vec2 m;\n    if(iFrame == 0)\n        m = vec2(0.,2.2);\n    else\n        m = state.yz;\n    \n    \n    if(iMouse.z > 0.5)\n    {\n      //  m = vec2(200., 1.+floor(iMouse.y/iResolution.y*10.)+1./floor(1.+iMouse.x/iResolution.x*10.));\n    }\n    \n    \n    if(fragCoord == vec2(0.5)) {\n        fragColor = state;\n        if(iFrame == 0) {\n            fragColor = vec4(0.,m,0.);\n        }\n        fragColor.x += 1.;\n        \n        if(fragColor.yz != m)\n            fragColor.x = 0.;\n        \n        fragColor.yz = m;\n        return;\n    }\n    \n    if(state.x > MAX_FRAME) {\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        return;\n    }\n    \n    fragColor = vec4(0.);\n    \n    Circle c = Circle(vec2(0.), .9);\n        \n        \n    for(float k=0.; k<MAX_ITER_PER_FRAME; k++)\n    {\n        float theta = hash12(vec2(state.x/MAX_FRAME, k/MAX_ITER_PER_FRAME));\n        \n        vec4 rand = hash44(vec4(fragCoord/iResolution.xy, state.x/MAX_FRAME, k/MAX_ITER_PER_FRAME));\n        \n        //theta = rand.x;\n        \n        float div = fract(m.y);\n        if(div > 1e-5)\n            theta /= div;\n        \n        vec2 p0 = getPt(c, theta);\n        vec2 p1 = getPt(c, theta*m.y);\n        \n        //float d = sdSegment(p+rand.yz/iResolution.y, p0,p1);\n        float d = sdLine(p+rand.yz/iResolution.y*2., p0,p1);\n        \n        /*\n        float f = fract(theta * m.x);\n        float strength = pow(abs((f - 0.5) * 2.), 10.);\n        \n        fragColor += smoothstep(1.,0.,d*iResolution.y) * vec4(hsv2rgb_smooth(vec3(length(p1-p0)/3., 0.8, strength)), 1.);\n        /*/\n        \n        fragColor += smoothstep(1.,0.,d*iResolution.y) * vec4(hsv2rgb_smooth(vec3(length(p1-p0)/(2.8*c.rad), .8, .8)), 1.);\n        //*/\n        \n    }\n    \n    fragColor /= MAX_ITER_PER_FRAME;\n    if(state.x > 1.)\n        fragColor += texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define MAX_ITER_PER_FRAME  500.\n#define MAX_FRAME  500.\n\n#define PI\t3.14159265359\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash14(vec4 p4)\n{\n\tp4  = fract(p4 * .1031);\n    p4 += dot(p4, p4.wzyx + 31.32);\n    return fract((p4.x + p4.y) * p4.z + p4.w);\n}\n\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    return length((p - a) - dot(p - a, b-a)/dot(b - a, b-a) * (b-a));\n}\n\nstruct Circle\n{\n    vec2 ctr;\n    float rad;\n};\n    \nstruct Ray\n{\n    vec2 org;\n    vec2 dir;\n};\n\nstruct Segment\n{\n    vec2 A;\n    vec2 B;\n};\n    \nstruct Bezier3\n{\n    vec2 A;\n    vec2 B;\n    vec2 C;\n};\n    \nstruct Bezier4\n{\n    vec2 A;\n    vec2 B;\n    vec2 C;\n    vec2 D;\n};\n    \nstruct Grid\n{\n    float inter;\n};\n\nbool intersect(Circle c, Ray r, out vec2 t)\n{\n    float A = dot(r.dir, r.dir);\n    float B = dot(r.dir, -c.ctr+r.org);\n    float C = dot(c.ctr, c.ctr) +dot(r.org, r.org) -2.*dot(c.ctr, r.org) - c.rad*c.rad;\n    \n    float delta = B*B-A*C;\n    \n    if(delta < 0.0)\n    \treturn false;\n\n    t = (vec2(-B) + vec2(sqrt(delta))*vec2(-1.,1.))/A;\n    return true;\n}\n\nbool intersect(Ray r0, Ray r1, out vec2 t)\n{\n    t = inverse(mat2(r0.dir, -r1.dir))*(r1.org-r0.org);\n    return true;\n}\n\nvec2 getPt(Ray r, float t)\n{\n    return r.org + t*r.dir;\n}\n\nvec2 getPt(Circle c, float t)\n{\n    return c.ctr + c.rad*vec2(cos(t*PI*2.), sin(t*PI*2.));\n}\n\nvec2 getPt(Segment c, float t)\n{\n    return mix(c.A, c.B, t);\n}\n\nvec2 getPt(Bezier3 c, float t)\n{\n    return mix(mix(c.A, c.B, t), mix(c.B, c.C, t), t);\n}\n\nvec2 getPt(Bezier4 c, float t)\n{\n    return mix(mix(mix(c.A, c.B, t), mix(c.B, c.C, t), t), mix(mix(c.B, c.C, t), mix(c.C, c.D, t), t), t);\n}\n\nfloat dist(Ray r, vec2 p)\n{\n    return abs(dot(r.dir.yx*vec2(-1., 1.), p-r.org)/dot(r.dir, r.dir));\n    \n    \n    float t = dot(r.dir, p-r.org);\n    t = max(t, 0.);\n    return length(getPt(r, t) - p);\n}\n\nfloat dist(vec2 p0, vec2 p1)\n{\n    return length(p1-p0);\n}\n\nfloat dist(Circle c, vec2 p)\n{\n    return abs(length(c.ctr-p)-c.rad);\n}\n\nfloat dist(Segment s, vec2 p)\n{\n\tvec2 pa = p-s.A, ba = s.B-s.A;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n    \n}\n\nfloat dist(Grid g, vec2 p)\n{\n    vec2 d = mod(p,g.inter);\n    d = min(d, g.inter-d);\n    return min(d.x, d.y);\n    \n    //bvec2 l = greaterThan(mod(p,g.inter*2.),vec2(g.inter));\n    //return all(l)||all(not(l)) ? 1. : 0.;\n}\n\nstruct HalfPlane\n{\n    vec2 org;\n    vec2 dir;\n};\n\nstruct HalfPlane2\n{\n    vec2 org;\n    vec2 dir0;\n    vec2 dir1;\n};\n\nfloat dist(HalfPlane r, vec2 p)\n{\n    return (dot(r.dir, p-r.org)/dot(r.dir, r.dir));\n}\n\nfloat dist(HalfPlane2 r, vec2 p)\n{\n    float d0 = dist(HalfPlane(r.org, r.dir0.yx*vec2(-1.,1.)), p);\n    float d1 = dist(HalfPlane(r.org, r.dir1.yx*vec2(-1.,1.)), p);\n    \n    /*\n    if(dot(r.dir0+r.dir1, p-r.org)<0.)\n        return dist(r.org, p);\n\t//*/\n    \n    return max(min(d0, d1), min(-d0, -d1));\n}\n\n// Solve cubic equation for roots\nvec3 solveCubic(float a, float b, float c)\n{\n    float p = b - a*a / 3.0, p3 = p*p*p;\n    float q = a * (2.0*a*a - 9.0*b) / 27.0 + c;\n    float d = q*q + 4.0*p3 / 27.0;\n    float offset = -a / 3.0;\n    if(d >= 0.0) { \n        float z = sqrt(d);\n        vec2 x = (vec2(z, -z) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        return vec3(offset + uv.x + uv.y);\n    }\n    float v = acos(-sqrt(-27.0 / p3) * q / 2.0) / 3.0;\n    float m = cos(v), n = sin(v)*1.732050808;\n    return vec3(m + m, -n - m, n - m) * sqrt(-p / 3.0) + offset;\n}\n\nfloat dist(Bezier3 B, vec2 p)\n{\n    vec2 a = B.B - B.A, b = B.A - B.B * 2.0 + B.C, c = a * 2.0, d = B.A - p;\n    vec3 k = vec3(3.*dot(a,b),2.*dot(a,a)+dot(d,b),dot(d,a)) / dot(b,b);      \n    vec3 t = clamp(solveCubic(k.x, k.y, k.z), 0.0, 1.0);\n    vec2 pos = B.A + (c + b*t.x)*t.x;\n    float dis = length(pos - p);\n    pos = B.A + (c + b*t.y)*t.y;\n    dis = min(dis, length(pos - p));\n    pos = B.A + (c + b*t.z)*t.z;\n    dis = min(dis, length(pos - p));\n    return dis;\n}\n\nfloat dist(Bezier4 BB, vec2 p)\n{\n    vec2 A = BB.A, B = BB.D;\n    \n    float ppt;\n    float At = .0;\n    float Bt = 1.;\n    \n    vec2 pp;\n    \n    float dis = dist(pp, p);\n    \n    for(int i=0; i<5; ++i)\n    {\n        ppt = (At+Bt)*.5;\n        pp = getPt(BB, ppt);\n        \n        if(dist(Segment(A, pp), p) < dist(Segment(pp, B), p))\n        {\n            Bt = ppt;\n        \tB = getPt(BB, Bt);\n        }\n        else\n        {\n            At = ppt;\n        \tA = getPt(BB, At);\n        }\n            \n    }\n    \n    return min(dist(Segment(A, pp), p), dist(Segment(B, pp), p));\n}\n\n\n#define DRAW(O,P,C,W, CC)\tCC=mix(CC,C,mix(1.,0.,clamp(dist(O,P)*iResolution.y/2. -  W, -1., 1.)*.5+.5))\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}