{
    "Shader": {
        "info": {
            "date": "1611376840",
            "description": "Bear drawn by ellipse.",
            "flags": 0,
            "hasliked": 0,
            "id": "WlycR3",
            "likes": 6,
            "name": "Ellipse Bear",
            "published": 3,
            "tags": [
                "sdf",
                "ellipse"
            ],
            "usePreview": 0,
            "username": "IWBTShyGuy",
            "viewed": 276
        },
        "renderpass": [
            {
                "code": "// Copyright Â© 2021 IWBTShyGuy\n// Attribution 4.0 International (CC BY 4.0)\n\nconst vec4 NEON = vec4(174, 37, 137, 255) / 255.0;\nconst float THICK_BASE = 0.03;\nconst float THICK_AMP = 0.01;\n\nconst float EAR_ROT = 0.3;\nconst vec2 RIGHT_EAR_POS = vec2(0.2, 0.45);\nconst vec2 LEFT_EAR_POS = vec2(-0.2, 0.45);\nconst vec2 EAR_SPEC = vec2(0.2, 0.3);\n\nconst vec2 FACE_SPEC = vec2(0.7, 0.6);\n\nconst vec2 FACE_INNER_POS = vec2(0.0, -0.15);\nconst vec2 FACE_INNER_SPEC = vec2(0.4, 0.3);\n\nconst vec2 NOSE_POS = vec2(0.0, -0.1);\nconst vec2 NOSE_SPEC = vec2(0.1, 0.09);\n\nconst vec2 RIGHT_EYE_POS = vec2(0.2, 0.25);\nconst vec2 LEFT_EYE_POS = vec2(-0.2, 0.25);\nconst vec2 EYE_SPEC = vec2(0.04, 0.03);\n\nconst vec2 RIGHT_MOUTH_POS = vec2(0.1, -0.25);\nconst vec2 LEFT_MOUTH_POS = vec2(-0.1, -0.25);\nconst vec2 MOUTH_SPEC = vec2(0.1, 0.05);\n\nmat2 rot(float t) {\n    return mat2(cos(t), sin(t), -sin(t), cos(t));\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdEllipse(in vec2 p, in vec2 ab) {\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\nfloat drawEllipse(in vec2 p, in vec2 ab) {\n    float thick = THICK_BASE + THICK_AMP * cos(iTime);\n    float r = abs(sdEllipse(p, ab));\n    r = clamp(r / thick, 0.0, 1.0);\n    return clamp(1.0 - r, 0.0, 1.0);\n}\n\nfloat fillEllipse(in vec2 p, in vec2 ab) {\n    return clamp(-sign(sdEllipse(p, ab)), 0.0, 1.0);\n}\n\nfloat basisfunc(in float t) {\n    t = fract(t);\n    float s0 = 1.0 - floor(clamp(3.0 - 3.0 * t, 0.0, 1.0));\n    float s1 = 1.0 - floor(clamp(4.0 - 3.0 * t, 0.0, 1.0));\n    float r0 = smoothstep(0.0, 1.0, 3.0 * t);\n    float r1 = smoothstep(0.0, 1.0, 4.0 - 3.0 * t);\n    return s0 * r0 + s1 * r1;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0, 0, 0, 1);\n    float r;\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    r = drawEllipse(rot(EAR_ROT) * uv - RIGHT_EAR_POS, EAR_SPEC);\n    fragColor = max(vec4(r, r, r, 1), fragColor);\n    r = drawEllipse(rot(-EAR_ROT) * uv - LEFT_EAR_POS, EAR_SPEC);\n    fragColor = max(vec4(r, r, r, 1), fragColor);\n    r = fillEllipse(uv, FACE_SPEC);\n    fragColor = min(vec4(1.0 - r, 1.0 - r, 1.0 - r, 1), fragColor);\n    r = drawEllipse(uv, FACE_SPEC);\n    fragColor = max(vec4(r, r, r, 1), fragColor);\n    r = drawEllipse(uv - FACE_INNER_POS, FACE_INNER_SPEC);\n    fragColor = max(vec4(r, r, r, 1), fragColor);\n    r = drawEllipse(uv - NOSE_POS, NOSE_SPEC);\n    fragColor = max(vec4(r, r, r, 1), fragColor);\n    r = fillEllipse(uv - RIGHT_EYE_POS, EYE_SPEC);\n    fragColor = max(vec4(r, r, r, 1), fragColor);\n    r = drawEllipse(uv - RIGHT_EYE_POS, EYE_SPEC);\n    fragColor = max(vec4(r, r, r, 1), fragColor);\n    r = fillEllipse(uv - LEFT_EYE_POS, EYE_SPEC);\n    fragColor = max(vec4(r, r, r, 1), fragColor);\n    r = drawEllipse(uv - LEFT_EYE_POS, EYE_SPEC);\n    fragColor = max(vec4(r, r, r, 1), fragColor);\n    r = drawEllipse(uv - RIGHT_MOUTH_POS, MOUTH_SPEC);\n    r *= clamp(-sign(uv.y - RIGHT_MOUTH_POS.y), 0.0, 1.0);\n    fragColor = max(vec4(r, r, r, 1), fragColor);\n    r = drawEllipse(uv - LEFT_MOUTH_POS, MOUTH_SPEC);\n    r *= clamp(-sign(uv.y - LEFT_MOUTH_POS.y), 0.0, 1.0);\n    fragColor = max(vec4(r, r, r, 1), fragColor);\n    fragColor *= NEON;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}