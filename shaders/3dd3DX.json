{
    "Shader": {
        "info": {
            "date": "1569409895",
            "description": "Based on https://www.youtube.com/watch?v=GtQdIYUtAHg",
            "flags": 8,
            "hasliked": 0,
            "id": "3dd3DX",
            "likes": 11,
            "name": "Bytebeat w/ display",
            "published": 3,
            "tags": [
                "music",
                "experimental",
                "bytebeat"
            ],
            "usePreview": 0,
            "username": "id523",
            "viewed": 664
        },
        "renderpass": [
            {
                "code": "const float gridSizeY = 256.;\nconst float gridSizeX = 48.;\n\nconst float waveSize = 256.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0., 0., 0., 1.);\n    \n    vec2 gridPos = (fragCoord - vec2(iResolution.x*.5, 0))/iResolution.y;\n    gridPos *= vec2(gridSizeX, gridSizeY);\n    gridPos.x += iTime * vSampleRate / gridSizeY;\n    gridPos = floor(gridPos);\n    float grid = beatF(int(gridPos.y) + int(gridSizeY * gridPos.x)) * step(0., gridPos.x);\n   \n    \n    vec2 wavePos = fragCoord/iResolution.xy;\n    int waveSplPos = int(waveSize * (wavePos.x + floor(iTime * vSampleRate / waveSize)));\n    float waveSpl1 = beatF(waveSplPos);\n    float waveSpl2 = beatF(waveSplPos - 1);\n    float waveSplMin = min(waveSpl1, waveSpl2 + 1./waveSize);\n    float waveSplMax = max(waveSpl1, waveSpl2 - 1./waveSize);\n    float waveBlur = 1.5/iResolution.y;\n    float wave = smoothstep(-waveBlur, waveBlur, wavePos.y - waveSplMin + 1./waveSize);\n    wave *= smoothstep(-waveBlur, waveBlur, waveSplMax - wavePos.y + 1./waveSize);\n    \n    float cursor = step(0.5, 1.-abs(fragCoord.x - iResolution.x*.5));\n\n    fragColor += grid * vec4(0.8, 0.3, 0.0, 0.0);\n    fragColor += wave * vec4(0.0, 0.7, 0.0, 0.0);\n    fragColor += cursor * vec4(0.1, 0.3, 1.0, 0.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float vSampleRate = 8000.;\n\n// Ported and modified from this equation in JavaScript:\n// w=t>>9,k=32,m=2048,a=1-t/m%1,d=(14*t*t^t)%m*a,y=[3,3,4.7,2][p=w/k&3]*t/4,h=\"IQNNNN!!]]!Q!IW]WQNN??!!W]WQNNN?\".charCodeAt(w/2&15|p/3<<4)/33*t-t,s=y*.98%80+y%80+(w>>7&&a*((5*t%m*a&128)*(0x53232323>>w/4&1)+(d&127)*(0xa444c444>>w/4&1)*1.5+(d*w&1)+(h%k+h*1.99%k+h*.49%k+h*.97%k-64)*(4-a-a))),s*s>>14?127:s\n// https://youtu.be/tCRPUv8V22o?t=314\nconst float bass[4] = float[](3.,3.,4.8,2.);\nconst float melody[32] = float[](40.,48.,45.,45.,45.,45.,0.,0.,60.,60.,0.,48.,0.,40.,54.,60.,54.,48.,45.,45.,30.,30.,0.,0.,54.,60.,54.,48.,45.,45.,45.,30.);\nint chaosTheory(int t) {\n    float ft = float(t);\n    int w = t>>9;\n    float a=1.-fract(ft/2048.);\n    float d=float((14*t*t^t)%2048)*a;\n    int p = w/32&3;\n    float y=bass[p]*ft/4.;\n    float h=melody[w/2&15|p/3<<4]/33.*ft;\n    float s=mod(y*.98,80.)+mod(y,80.);\n    if (w >= 128) {\n        float b = 0.;\n    \tb += float((int(float(5*t%2048)*a)&128)*(0x53232323>>w/4&1));\n        b += float((int(d)&127)*(0xa444c444>>w/4&1))*1.5;\n        b += (mod(h,32.)+mod(h*1.99,32.)+mod(h*.49,32.)+mod(h*.97,32.)-64.)*(4.-a-a);\n        s += a*b;\n    }\n    return int(clamp(s+112., 0., 255.));\n}\n\nfloat beatF(int t) {\n    int s = \n        //t*((t>>12|t>>8)&63&t>>4)\n        //(t*(t>>5|t>>8))>>(t>>16&7)\n        //t*((t>>9|t>>13)&25&t>>6)\n        //(t>>6|t|t>>(t>>16&15))*10+((t>>11)&7)\n        //(t|t>>9|t>>7)*t&(t>>11|t>>9)\n        //t*5&(t>>7)|t*3&(t>>10)\n        //(t&t%255)-(t*3&t>>13&t>>6)\n        chaosTheory(t)\n    ;\n    return float(s&255)/255.;\n}\n\nvec2 mainSound( in int samp, float time ) {\n    return vec2(.2*(beatF(int(time*vSampleRate))*2.-1.));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// See Common",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}