{
    "Shader": {
        "info": {
            "date": "1548283909",
            "description": "I stream shader creation every Wednesday at 9pm UK time, over at [url]https://twitch.tv/lunasorcery[/url]\nCome and watch a show!\n\nOr watch the VOD for this shader here: [url]https://www.twitch.tv/videos/368710013[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "3s2GRW",
            "likes": 20,
            "name": "[twitch] Circular Motion",
            "published": 3,
            "tags": [
                "twitch"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 707
        },
        "renderpass": [
            {
                "code": "/*\n\tThis shader was created live on stream!\n\tYou can watch the VOD here: https://www.twitch.tv/videos/368710013\n\n\tI use the Bonzomatic tool by Gargaj/Conspiracy:\n\thttps://github.com/Gargaj/Bonzomatic\n\n\tWednesdays around 9pm UK time I stream at https://twitch.tv/lunasorcery\n\tCome and watch a show!\n\n\t~yx\n*/\n\n#define iTime iTime*.2\n#define pi (acos(-1.))\n\nconst float SPEED = 2.0;\n\nfloat tick(float t)\n{\n    t = smoothstep(0.,1.,t);\n    t = smoothstep(0.,1.,t);\n    t = smoothstep(0.,1.,t);\n    return t;\n}\n\nvec2 rotate(vec2 a, float b)\n{\n    float c =cos(b);\n    float s =sin(b);\n    return vec2(\n        a.x*c-a.y*s,\n        a.x*s+a.y*c\n    );\n}\n\nfloat noise(float a)\n{\n    return fract(sin(a*12.4312)*432.432423);\n}\n\nfloat shape(vec2 p)\n{\n    return length(p)-.25;\n}\n\nfloat scene(vec2 p, float time)\n{\n    float fmode = (noise(floor(time)) * 4.);\n    int mode = int(fmode);\n\n    float t = tick(fract(time));\n    t *= fract(fmode)<.5?-1.:1.;\n\n    vec2 np = floor(p-.5);\n    p = mod(p-.5,1.)-.5;\n\n    if(mode==0)\n        p.x += t;\n    if(mode==1)\n        p.y += t;\n    if(mode==2)\n        p.x += t*(mod(np.y,2.)<1.?1.:-1.);\n    if(mode==3)\n        p.y += t*(mod(np.x,2.)<1.?1.:-1.);\n\n    p = mod(p-.5,1.)-.5;\n\n    return shape(p);\n}\n\n// shamelessly stolen from https://www.shadertoy.com/view/MdsyDX\nvec3 aberrationColor(float f)\n{\n    f = f * 3.0 - 1.5;\n    return clamp(vec3(-f, 1.0 - abs(f), f),0.,1.);\n}\n\nvec4 chroma(float a)\n{\n    return vec4(aberrationColor(a),1);\n}\n\nvec4 fxor(vec4 a, vec4 b)\n{\n    return mix(a,1.-a,b);\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy-.5;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 screenuv = uv;\n    uv *= 4.;\n\n    uv/=dot(uv,uv);\n\n    uv *= .25;\n    out_color = vec4(0);\n    for(int j=0;j<3;++j){\n        vec4 tempColor = vec4(0);\n        uv = rotate(uv, pi/8.);\n        float steps = 50.;\n        float e = abs(dFdx(uv).x);\n        for(float i=0.;i<steps;++i)\n        {\n            float time = (iTime+(i/steps )/60.)*SPEED-length(screenuv)*.1+(float(j)*4./3.);\n            tempColor += chroma(i/steps ) * (smoothstep(-e,e, -scene(uv, time)) / steps);\n        }\n        uv *= 3.0;\n        out_color = fxor(out_color, tempColor*3.);\n    }\n    out_color *= 2.5;\n    out_color *= min(1.,length(screenuv)*2.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}