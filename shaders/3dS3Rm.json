{
    "Shader": {
        "info": {
            "date": "1548384335",
            "description": "making animation of two moving ball goes from x-coordinated and y-coordinated, scaling polygon, spinning triangle, and rotate rectangle\n\n\n\nThanks to beefburito",
            "flags": 0,
            "hasliked": 0,
            "id": "3dS3Rm",
            "likes": 0,
            "name": "CGK_4 v1.1",
            "published": 3,
            "tags": [
                "triangle",
                "circle",
                "rectangle",
                "ball",
                "polygon",
                "move",
                "ez",
                "cgk4"
            ],
            "usePreview": 0,
            "username": "dennyraymond",
            "viewed": 405
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n//POLYGON FUNCTION\nfloat polygon(vec2 uv, vec2 pos, float size, float blur, int sides){\n    uv = uv-pos;\n    //Angle and radius of polygon\n    float angle = atan(uv.x,uv.y)+PI;\n    float rad = TWO_PI/float(sides);\n    float dist = cos(floor(0.5+angle/rad)*rad-angle)*length(uv);\n    float poly = smoothstep(size, size-blur, dist);\n    \n    return poly;\n}\n\n//goes x-coordinate\nvec4 twoMoveBall1 (vec4 try, vec2 uv){\n\n    vec2 translate = vec2(cos(iTime),0.0);\n    uv += translate*0.35;\n    float Circle = polygon(uv, vec2(-0.355,-0.4), 0.05, 0.001, 100);\n    \n    vec3 giveColor = vec3(1.0,0.0,0.0) * Circle;\n    try = vec4(giveColor,1.0);\n    \n    return try;\n    \n}\n\n//goes y-coordinate function\nvec4 twoMoveBall2 (vec4 try,vec2 uv){\n\n    vec2 translate = vec2(0.0,cos(iTime));\n    uv += translate*0.35;\n    float Circle = polygon(uv, vec2(-0.7,-0.05), 0.05, 0.001, 100);\n    \n    vec3 giveColor = vec3(0.8,0.65,0.3) * Circle;\n    try = vec4(giveColor,1.0);\n    \n    return try;\n    \n}\n//rotate rectangle function\nvec4 moveRectangle(vec4 try,vec2 uv){\n\n    vec2 translate = vec2(cos(iTime),sin(iTime));\n    uv += translate*0.35;\n    float rectangle = polygon(uv, vec2(0.0,0.0), 0.1, 0.001, 4);\n    \n    vec3 giveColor = vec3(1.0,1.0,0.0) * rectangle;\n    try = vec4(giveColor,1.0);\n    \n    return try;\n    \n}\n//spinning function\nmat2 spinspin(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvec4 spinningTriangle(vec4 try,vec2 uv){\n\n    uv = spinspin(sin(iTime*2.0))*uv;\n    float triangle = polygon(uv, vec2(0.0,0.0), 0.05, 0.001, 3);\n    \n    vec3 giveColor = vec3(0.0,1.0,0.0) * triangle;\n    try = vec4(giveColor,1.0);\n    \n    return try;\n    \n}\n//scaling function\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.,_scale.y);\n}\n\nvec4 polygonScale(vec4 try,vec2 uv){\n\n    uv = scale(vec2(sin(iTime)*1.0)+1.0)*uv;\n    float poly = polygon(uv, vec2(0.0,0.0), 0.05, 0.001, 6);\n    \n    vec3 giveColor = vec3(0.0,0.0,1.0) * poly;\n    try = vec4(giveColor,1.0);\n    \n    return try;\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv -= 0.5; // move center\n    uv.x *= iResolution.x/iResolution.y;\n    float x = uv.x;\n    vec3 col = vec3(0);\n    vec2 uv2 = fragCoord.xy/iResolution.xy;\n    \n    //show all the shapes\n    fragColor= twoMoveBall1(fragColor, uv);\n    fragColor+= twoMoveBall2(fragColor, uv);\n    fragColor+= moveRectangle(fragColor, uv);\n    fragColor+= spinningTriangle(fragColor, uv);\n    fragColor+= polygonScale(fragColor, uv);\n    \n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}