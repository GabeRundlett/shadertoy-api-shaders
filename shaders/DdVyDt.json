{
    "Shader": {
        "info": {
            "date": "1696748357",
            "description": "移轴模糊与光圈模糊，通过mask与全屏图像模糊算法配合，获得对应效果。\n",
            "flags": 0,
            "hasliked": 0,
            "id": "DdVyDt",
            "likes": 0,
            "name": "TiltShiftBlur-IrisBlur-test",
            "published": 3,
            "tags": [
                "tiltshiftblur",
                "irirblur"
            ],
            "usePreview": 0,
            "username": "nomkcode_g",
            "viewed": 207
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 accumulator = vec3(0.0);\n    vec3 divisor = vec3(0.0);\n    \n    float r = 1.0;\n    // 移轴模糊和光圈模糊的偏移\n    //float my = 1.0-2.0*iMouse.y/iResolution.y;\n    vec2 mxy = 1.0-2.0*iMouse.xy/iResolution.xy;\n\n    // 移轴模糊和光圈模糊的角度\n    //vec2 angle = vec2(0.0, _Radius * saturate(TiltShiftMask(uv, my)));\n    vec2 angle = vec2(0.0, _Radius * saturate(IrisMask(uv, mxy)));\n    for (int j = 0; j < _Iteration; j ++)\n    {\n        r += 1.0 / r;\n        angle = angle * _Rot;\n        vec3 bokeh = texture(iChannel0, uv + (r-1.0)*angle/vec2(iResolution.x, iResolution.y)).rgb;\n        accumulator += bokeh * bokeh;\n        divisor += bokeh;\n    }\n    vec3 col = accumulator / divisor;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 _Rot = mat2(cos(2.39996323), sin(2.39996323), -sin(2.39996323), cos(2.39996323));\nfloat _Offset = 0.0;\nfloat _Area = 1.0;\nfloat _Spread = 1.2f;\nint _Iteration = 32;\nfloat _Radius = 2.0;\n\n\nfloat TiltShiftMask(vec2 uv, float offset)\n{\n    float centerY = uv.y * 2.0 - 1.0 + offset;\n    return pow(abs(centerY * _Area), _Spread);\n}\n\nfloat IrisMask(vec2 uv, vec2 offset)\n{\n    vec2 center = uv * 2.0 - 1.0 + offset;\n    return dot(center, center)*_Area;\n}\n\nfloat saturate(float r)\n{\n    if(r<0.0){\n        return 0.0;\n    }\n    if(r>1.0){\n        return 1.0;\n    }\n    return r;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}