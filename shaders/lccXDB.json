{
    "Shader": {
        "info": {
            "date": "1715945831",
            "description": "Simple boilerplate for raytracing with camera/ray structs and a sphere intersection function.",
            "flags": 0,
            "hasliked": 0,
            "id": "lccXDB",
            "likes": 1,
            "name": "Simple Raytracing Boilerplate",
            "published": 3,
            "tags": [
                "raytracing",
                "template"
            ],
            "usePreview": 0,
            "username": "Bingle",
            "viewed": 166
        },
        "renderpass": [
            {
                "code": "// Raytracing Boilerplate by Bingle\n/* Axis orientation (from default camera view):\n\n             ^ +Y\n             |\n             |\n     +X      |\n     <-------+\n              \\\n               \\| +Z\n              ‾‾\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    cam camera = cam(vec3(sin(iTime),0,2),vec3(0,0,-1),vec3(0,1,0),0.5);\n    \n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    ray r = getCamRay(camera,uv);\n    \n    // Simple sphere example\n    float dist = sphere_intersect(vec3(0.0),1.0,r);\n    \n    if (dist>0.0){\n        vec3 pos = at(r,dist);\n        vec3 norm = normalize(pos);\n        vec3 outgoing = reflect(r.dir,norm);\n        \n        col = texture(iChannel0,outgoing).rgb;\n    }else{\n        col = 0.5 + 0.5*r.dir;\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct cam{\n    vec3 pos;\n    vec3 dir;\n    vec3 up;\n    float viewDist;\n};\n\nstruct ray{\n    vec3 pos;\n    vec3 dir;\n};\n\n// Takes UV coords -0.5 to 0.5 (or in whatever centered range really) and returns a ray\nray getCamRay(cam c,vec2 uv){\n    vec3 side = cross(c.dir,c.up);\n    vec3 up = cross(side,c.dir);\n    \n    return ray(c.pos,normalize(c.dir*c.viewDist + side*uv.x + up*uv.y));\n}\n\n// Returns the point at distance t along ray r\nvec3 at(ray r,float t){\n    return r.pos + r.dir*t;\n}\n\n// Taken from: https://raytracing.github.io/books/RayTracingInOneWeekend.html\n// Could be optimized more, but works well for testing\nfloat sphere_intersect(vec3 center, float radius,ray r){\n    vec3 oc = r.pos - center;\n    \n    float a = dot(r.dir,r.dir);\n    float b = 2.0 * dot(oc,r.dir);\n    float c = dot(oc,oc) - radius*radius;\n    \n    float desc = (b*b) - 4.0*a*c;\n    \n    if (desc<0.0){\n        return -1.0;\n    }else{\n        return (-b - sqrt(desc)) / (2.0*a);\n    }\n}\n\nfloat plane_intersect(vec4 plane, ray r){\n    return dot(plane,vec4(r.pos,1.0))/dot(plane.xyz,r.dir);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}