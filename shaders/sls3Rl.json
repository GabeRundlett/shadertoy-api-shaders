{
    "Shader": {
        "info": {
            "date": "1622661983",
            "description": "visual experiment",
            "flags": 0,
            "hasliked": 0,
            "id": "sls3Rl",
            "likes": 3,
            "name": "Hypno circle",
            "published": 3,
            "tags": [
                "circle"
            ],
            "usePreview": 0,
            "username": "avin",
            "viewed": 314
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589\n\n#define SF 1./min(iResolution.x,iResolution.y)*.5\n#define SS(l,s) smoothstep(SF,-SF,l-s)\n\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\n#define tx(b) texture(iChannel0, b)\n#define snd(x) texture(iChannel0, vec2(x,.1)).r\n\n#define MOD3 vec3(.1031, .11369, .13787)\n\nvec3 hash33(vec3 p3)\n{\n    p3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz + 19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y) * p3.z, (p3.x + p3.z) * p3.y, (p3.y + p3.z) * p3.x));\n}\n\nfloat snoise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n\n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n\n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n    vec3 i1 = e * (1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n\n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n\n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n\n    return dot(vec4(31.316), n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 ouv = fragCoord/iResolution.xy;\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.x; \n    \n    float l = length(uv);\n    \n    float size = .15;\n    float width = .005;\n    \n    float v = SS(l,  size) * SS(size -width, l);\n    \n    // float v = (.1 / smoothstep(l, l-.1, size));\n    \n    float a = sin(atan(uv.y, uv.x)*3.);\n    \n    float sv = tx(vec2(0.5,0.75)).r;\n    float mf = abs(snoise(vec3(a*.01,a, iTime)))*.1;\n    float v2 = SS(l - mf - width,  size) * SS(size-width*2. - mf, l);\n    float v22 = SS(l - mf - width,  size); // + SS(size-width*10. - mf, l);\n    float vs = 1.025;\n    float v3 = SS(l*vs - mf - width,  size) * SS(size-width*2. - mf, l*vs);\n    \n    vec3 col = vec3(0.0 + SS(abs(fract((uv.x + uv.y)*iResolution.x*.1)-.5), .15)*.1);\n    \n    col = mix(col, vec3(.25).rgb, v2);\n    col = mix(col, vec3(.0).rgb, v3);\n    col = mix(col, vec3(.7).rgb, v22-v2);\n    col = mix(col, vec3(1.), v);            \n        \n    // vignetting\t\n\tcol *= 0.5 + 0.5*pow( 16.0*ouv.x*ouv.y*(1.0-ouv.x)*(1.0-ouv.y), 0.1 );\n    col = clamp(col,0.0,1.0);\n    col = col*0.6 + 0.4*col*col*(3.0-2.0*col) + vec3(0.0,0.0,0.04);\n    \n        \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}