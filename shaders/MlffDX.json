{
    "Shader": {
        "info": {
            "date": "1513613695",
            "description": "heavy soldering action... would be awful in real life!! ;-)\nwatch in [url]https://shaderoo.org[/url] to zoom in/out. also a geometry version available (download as .obj)",
            "flags": 0,
            "hasliked": 0,
            "id": "MlffDX",
            "likes": 79,
            "name": "soldering fun",
            "published": 3,
            "tags": [
                "truchet",
                "copper",
                "atomium",
                "sodering",
                "tin"
            ],
            "usePreview": 1,
            "username": "flockaroo",
            "viewed": 3213
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// atomium soldering fun\n\n// same in shaderoo (+zoom in/out):\n//    https://www.shaderoo.org/?shader=xI6vZz\n// also check out geometry version in shaderoo (download as .obj):\n//    https://www.shaderoo.org/?shader=bGKarn\n\n// non periodic tilings on a sphere, startig from an icosahedron\n\n// golden ratio - used for icosahedron\n#define PI2 6.28318531\n#define G (.5+sqrt(5./4.))\n\n#define XCHGV3(a,b) { vec3 d=a; a=b; b=d; }\n\nvoid sortXYZ(inout vec3 p1, inout vec3 p2, inout vec3 p3)\n{\n    #define W(p) (p.x+p.y*.01+p.z*.0001)\n    if(W(p3)>W(p2)) XCHGV3(p3,p2);\n    if(W(p2)>W(p1)) XCHGV3(p2,p1);\n    if(W(p3)>W(p2)) XCHGV3(p3,p2);\n    if(W(p2)>W(p1)) XCHGV3(p2,p1);\n}\n\n// get closest icosahedron triangle by geometric categorizion\n// using icosa symmetry, so dont have to check for every icosa point\nvoid getIcosaTri(vec3 pos, out vec3 p1, out vec3 p2, out vec3 p3)\n{\n    mat2 rot=mat2(0.809016994374947, 0.587785252292473, -0.587785252292473, 0.809016994374947);\n    \n    float ph = atan(pos.y,pos.x);  ph=(ph<0.)?PI2+ph:ph;\n    \n    float dang=PI2/5.;\n    float seg=ph/dang;\n    float fseg=floor(seg);\n    \n    // 3 topmost points of segment + lower point of seg (p4t)\n    vec3 p1t=vec3(0,0,1.);\n    vec3 p2t=vec3(cos(fseg*dang-vec2(0,PI2/4.))*.894427190999916,.447213595499958);\n    vec3 p4t=vec3(rot*p2t.xy,-p2t.z);\n    vec3 p3t=vec3(rot*p4t.xy, p2t.z);\n\n    if (dot(pos,cross(p2t,p4t))<0. || dot(pos,cross(p4t,p3t))<0.) {\n        // xchg p2 and p3 (because bottom is mirrored in z)\n        p1t=vec3(0,0,-1.);\n        p3t=vec3((seg-fseg<.5)?p2t.xy*rot:rot*p2t.xy,-p2t.z);\n        p4t=vec3(rot*p3t.xy,-p3t.z);\n        p2t=vec3(rot*p4t.xy, p3t.z);\n    }\n\n    // mix top or below\n    bool top=(dot(pos,cross(p2t,p3t))>0.);\n    p1=top?p1t:p4t; \n    p2=top?p2t:p3t; \n    p3=top?p3t:p2t;\n}\n\n// get closest icosahedron triangle by geometric categorizion\nvoid getIcosaTri2(vec3 pos, out vec3 p1, out vec3 p2, out vec3 p3)\n{\n    float ph = atan(pos.y,pos.x);  ph=(ph<0.)?PI2+ph:ph;\n    vec2 csth0=vec2(.447213595499958,.894427190999916);\n    \n    float dang=PI2/5.;\n    vec2 ang=floor(ph/dang)*dang-vec2(0,PI2/4.);\n    //vec2 r=cos(.5*dang-vec2(0,PI2/4.));\n    //mat2 rot=mat2(r.x,r.y,-r.y,r.x);\n    mat2 rot=mat2(0.809016994374947, 0.587785252292473, -0.587785252292473, 0.809016994374947);\n    \n    // 3 topmost points of segment + lower point of seg (p4t)\n    vec3 p1t=vec3(0,0,1.);\n    vec3 p2t=vec3(cos(ang),         1)*csth0.yyx;\n    vec3 p3t=vec3(cos(ang+dang),    1)*csth0.yyx;\n    vec3 p4t=vec3(cos(ang+dang*.5),-1)*csth0.yyx;\n\n    if (dot(pos,cross(p2t,p4t))<0. || dot(pos,cross(p4t,p3t))<0.) {\n        // xchg p2 and p3 (because bottom is mirrored in z)\n        ang=(floor(ph/dang-.5)+.5)*dang-vec2(0,PI2/4.);\n        p1t=vec3(0,0,-1.);\n        p3t=vec3(cos(ang),        -1)*csth0.yyx;\n        p2t=vec3(cos(ang+dang   ),-1)*csth0.yyx;\n        p4t=vec3(cos(ang+dang*.5), 1)*csth0.yyx;\n    }\n\n    // mix top or below\n    bool top=(dot(pos,cross(p2t,p3t))>0.);\n    p1=top?p1t:p4t; \n    p2=top?p2t:p3t; \n    p3=top?p3t:p2t;\n}\n\n// get closest icosahedron triangle\nvoid getIcosaTriOld(vec3 pos, out vec3 p1, out vec3 p2, out vec3 p3)\n{\n    float dot1 = -1000.0;\n    float dot2 = -1000.0;\n    float dot3 = -1000.0;\n    for(int s1=0;s1<2;s1++)\n    {\n    \tfor(int s2=0;s2<2;s2++)\n        {\n    \t\tfor(int perm=0;perm<3;perm++)\n            {\n                vec3 p0 = normalize(vec3(G,1,0))*vec3(s1*2-1,s2*2-1,0);\n                if     (perm>1) p0 = p0.yzx;\n                else if(perm>0) p0 = p0.zxy;\n                float dot0 = dot(pos,p0);\n                if(dot0>dot1){\n                    dot3=dot2; p3=p2;\n                    dot2=dot1; p2=p1; \n                    dot1=dot0; p1=p0;\n                }\n                else if(dot0>dot2){\n                    dot3=dot2; p3=p2;\n                    dot2=dot0; p2=p0; \n                }\n                else if(dot0>dot3){\n                    dot3=dot0; p3=p0;\n                }\n            }\n        }\n    }\n}\n\n// check if pos hits triangle\nbool thruTriangle(vec3 pos, vec3 v1, vec3 v2, vec3 v3)\n{\n    vec3 n = cross(v2-v1,v3-v1);\n    // calc where pos hits triangle plane\n    pos = pos*dot(v1,n)/dot(pos,n);\n    v1-=pos; v2-=pos; v3-=pos;\n \tvec3 c1=cross(v1,v2);\n    vec3 c2=cross(v2,v3);\n    vec3 c3=cross(v3,v1);\n    // check if the cross products of all the pos-edge-vectors show into the same direction\n    return dot(c1,c2)>0. && dot(c2,c3)>0. && dot(c3,c1)>0. ;\n}\n\n// subdivide 1 triangle into 4 triangles and give back closest triangle\nvoid getTriSubDiv(vec3 pos, inout vec3 p1, inout vec3 p2, inout vec3 p3)\n{\n    vec3 p4 = normalize(p1+p2);\n    vec3 p5 = normalize(p2+p3);\n    vec3 p6 = normalize(p3+p1);\n\n    // faster, but works only if triangle has postive umlaufsinn\n    if     (dot(pos,cross(p4,p5))<0.) { p1=p4; p2=p2; p3=p5; }\n    else if(dot(pos,cross(p5,p6))<0.) { p1=p6; p2=p5; p3=p3; }\n    else if(dot(pos,cross(p6,p4))<0.) { p1=p1; p2=p4; p3=p6; }\n    else                              { p1=p4; p2=p5; p3=p6; }\n\n    /*if     (sign(dot(pos,cross(p4,p5)))==sign(dot(p2,cross(p4,p5)))) { p1=p4; p2=p2; p3=p5; }\n    else if(sign(dot(pos,cross(p5,p6)))==sign(dot(p3,cross(p5,p6)))) { p1=p6; p2=p5; p3=p3; }\n    else if(sign(dot(pos,cross(p6,p4)))==sign(dot(p1,cross(p6,p4)))) { p1=p1; p2=p4; p3=p6; }\n    else                              { p1=p4; p2=p5; p3=p6; }*/\n\n    /*if     (thruTriangle(pos,p1,p4,p6)) { p1=p1; p2=p4; p3=p6; }\n    else if(thruTriangle(pos,p6,p5,p3)) { p1=p6; p2=p5; p3=p3; }\n    else if(thruTriangle(pos,p6,p4,p5)) { p1=p6; p2=p4; p3=p5; }\n    else if(thruTriangle(pos,p4,p2,p5)) { p1=p4; p2=p2; p3=p5; }*/\n}\n\n// get some 3d rand values by multiplying 2d rand in xy, yz, zx plane\nvec4 getRand(vec3 pos)\n{\n    vec4 r = vec4(1.0);\n    r*=textureLod(iChannel0,pos.xy,0.)*2.-1.;\n    r*=textureLod(iChannel0,pos.xz,0.)*2.-1.;\n    r*=textureLod(iChannel0,pos.zy,0.)*2.-1.;\n    return r;\n}\n\n// distancefield of torus around arbitrary axis z\n// similar to https://iquilezles.org/articles/distfunctions\nfloat distTorus(vec3 pos, float r1, float r2, vec3 z)\n{\n    float pz = dot(pos,normalize(z));\n    return length(vec2(length(pos-z*pz)-r1,pz))-r2;\n}\n\nfloat getRand01Sph(vec3 pos)\n{\n    return textureLod(iChannel0,pos.xy*123.+pos.z,0.).x;\n}\n\nfloat distSphere(vec3 pos, float r)\n{\n\treturn length(pos)-r;\n}\n\nfloat calcAngle(vec3 v1, vec3 v2)\n{\n    return acos(dot(v1,v2)/length(v1)/length(v2));\n}\n\n// iq's smin\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - pow(abs(k*h*(1.0-h)),.93);\n}\n\n// distance to 2 torus segments in a triangle\n// each torus segment spans from the middle of one side to the middle of another side\nfloat distTruchet(vec3 pos, vec3 p1, vec3 p2, vec3 p3,float r, bool smth)\n{\n    float d = 10000.0;\n    float rnd=getRand01Sph(p1+p2+p3);\n\n    // random rotation of triangle-edges\n    // no mirroring\n    if      (rnd>.333) { vec3 d=p1; p1=p2; p2=p3; p3=d; }\n    else if (rnd>.666) { vec3 d=p1; p1=p3; p3=p2; p2=d; }\n    \n    vec3 p4=pos-normalize(p1+p2);\n    vec3 p5=pos-normalize(p2+p3);\n    vec3 p6=pos-normalize(p3+p1);\n    vec3 d1=p5-p4;\n    vec3 d2=p6-p4;\n    \n\td=min(d, length( p4 - d1*(dot(p4,d1)/dot(d1,d1)) )-r );\n\td=min(d, length( p4 - d2*(dot(p4,d2)/dot(d2,d2)) )-r );\n\t//d=min(d, length(cross(p4,normalize(p5-p4)))-r );\n\t//d=min(d, length(cross(p4,normalize(p6-p4)))-r );\n\t\n\tif(smth)\n\t{\n        float rnd = .01*(getRand(pos*.3).x);\n\n        d=smin(d,length(p4)-2.2*r,.0065+rnd);\n        d=smin(d,length(p5)-2.2*r,.0065+rnd);\n        d=smin(d,length(p6)-2.2*r,.0065+rnd);\n\t}\n\telse\n\t{\n        d=min(d,length(p4)-2.2*r);\n        d=min(d,length(p5)-2.2*r);\n        d=min(d,length(p6)-2.2*r);\n\t}\n    return d;\n}\n\n// final distance funtion\nfloat dist(vec3 pos, bool smth)\n{\n    pos+=.00015*getRand(pos*1.3).xyz*4.;\n    pos+=.00006*getRand(pos*3.).xyz*4.;\n    pos+=.00040*getRand(pos*.5).xyz*4.;\n    vec3 p1,p2,p3;\n    float d = 10000.;\n    \n    // sphere in the middle\n\td=min(d,distSphere(pos,.9));\n    \n    // start with an icosahedron subdivided once\n    getIcosaTri(pos, p1, p2, p3);\n    getTriSubDiv(pos, p1, p2, p3);\n    // always sort by X, then Y, then Z - to get a unique order of the edges\n    //sortXYZ(p1,p2,p3);\n    float r0=.02;\n    d=min(d,distTruchet(pos, p1,p2,p3,r0,smth));\n    \n    float sc = 1.;\n    // subdivide again for another detail\n    getTriSubDiv(pos,p1,p2,p3);\n    //sortXYZ(p1,p2,p3);\n\tsc = 1./.97;\n    d=min(d,distTruchet(pos*sc, p1,p2,p3,r0/2.,smth)/sc);\n    \n    // subdivide again for another detail\n\tgetTriSubDiv(pos,p1,p2,p3);\n    //sortXYZ(p1,p2,p3);\n    sc = 1./.96;\n    d=min(d,distTruchet(pos*sc, p1,p2,p3,r0/4.,smth)/sc);\n    \n    return d;\n}\n\nfloat dist(vec3 pos)\n{\n    return dist(pos,true);\n}\n\nvec3 getGrad(vec3 pos, float eps)\n{\n    vec2 d=vec2(eps,0);\n    float d0=dist(pos);\n    return vec3(dist(pos+d.xyy)-d0,\n                dist(pos+d.yxy)-d0,\n                dist(pos+d.yyx)-d0)/eps;\n                \n}\n\n// march it...\nvec4 march(inout vec3 pos, vec3 dir)\n{\n    // cull the sphere\n    if(length(pos-dir*dot(dir,pos))>1.05) \n    \treturn vec4(0,0,0,1);\n    \n    float eps=0.001;\n    float bg=1.0;\n    for(int cnt=0;cnt<64;cnt++)\n    {\n        float d = dist(pos);\n        pos+=d*dir;\n        if(d<eps) { bg=0.0; break; }\n    }\n    vec3 n = getGrad(pos,.001);\n    return vec4(n,bg); // .w=1 => background\n}\n\nmat3 rotX(float ang)\n{\n    float c=cos(ang), s=sin(ang);\n    return mat3(1,0,0, 0,c,s, 0,-s,c);\n}\n\nmat3 rotZ(float ang)\n{\n    float c=cos(ang), s=sin(ang);\n    return mat3(c,s,0, -s,c,0, 0,0,1);\n}\n\nvec4 getRand(vec2 coord)\n{\n    vec4 c=vec4(0);\n    c+=texture(iChannel0,coord+.003*iTime);\n    c+=texture(iChannel0,coord/2.+.003*iTime)*2.;\n    c+=texture(iChannel0,coord/4.+.003*iTime)*4.;\n    c+=texture(iChannel0,coord/8.+.003*iTime)*8.;\n    return c/(1.+2.+4.+8.);\n}\n\n#define FloorZ -5.\n// envoronment just a sky and some floor grid...\nvec4 myenv(vec3 pos, vec3 dir, float period)\n{\n    vec3 colHor=vec3(.3,.4,.5)+.25;\n    //vec3 colSky=mix(vec3(1.5,.75,0.)*1.7,vec3(.8,.9,1)*1.2,clamp(7.*dir.z,0.,1.));\n    vec3 colSky=vec3(.8,.9,1)*1.2;\n    vec3 skyPos=pos+dir/abs(dir.z)*(20.-pos.z);\n    float cloudPat=(1.+.4*(getRand(skyPos.xy*.001).x-.5));\n    colSky*=mix(1.,cloudPat,step(0.,dir.z));\n    vec3 colFloor=vec3(.5,.6,.7);\n    vec3 colScale=vec3(1,1,1);\n    vec3 floorPos=pos-dir/dir.z*(pos.z-FloorZ);\n    vec2 s;\n    float scale=1.;\n    s=sin(floorPos.xy*PI2*.5*period);\n    scale*=(1.-.3*exp(-s.x*s.x/.01))*(1.-.3*exp(-s.y*s.y/.01));\n    s=sin(floorPos.xy*PI2*.5/10.*period);\n    scale*=(1.-.5*exp(-s.x*s.x/.001))*(1.-.5*exp(-s.y*s.y/.001));\n    //colFloor=mix(colFloor,colScale,1.-scale);\n    colFloor*=(1.+.4*(getRand(floorPos.xy*.001).x-.5));\n    vec3 col=mix(colSky,colFloor,1.-smoothstep(-.01,.01,dir.z));\n    col=mix(colHor,col,clamp(abs(dir.z*6.)-.1,0.,1.));\n    //return vec4(mix(vec3(.3,.4,.35),vec3(.8,1,.9),dir.z)*1.2+.4,1);\n    return vec4(col*1.1+.0*dir,1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // screen coord -1..1\n    vec2 sc = (fragCoord.xy/iResolution.xy)*2.-1.;\n    // viewer position\n    vec3 pos = vec3(0,-1.8,0);\n    #ifdef SHADEROO\n    pos.y+=iMouseData.z*.001;\n    #endif\n    // pixel view direction\n    vec3 dir = normalize(2.*normalize(-pos)+vec3(sc.x,0,sc.y*iResolution.y/iResolution.x));\n    // rotate view around x,z\n    float phi = iMouse.x/iResolution.x*7.;\n    float th  = iMouse.y/iResolution.y*7.;\n    if (iMouse.x==0.) { phi=iTime*.25; th=.27*.25*iTime; }\n    mat3 rx = rotX(th);\n    mat3 rz = rotZ(phi);\n    pos = rz*(rx*pos);\n    dir = rz*(rx*dir);\n    vec3 pos0 = pos;\n    \n    // march it...\n   \tvec4 n=march(pos,dir);\n   \tfloat actMat = clamp((dist(pos,false)-dist(pos,true))*5000.,0.,1.);\n    float bg=n.w;\n        \n    // reflection dir\n    vec3 R = pos-2.0*dot(pos,n.xyz)*n.xyz;\n    //R = -((R*rz)*rx).yzx;\n    R = normalize((pos-pos0)-2.0*dot((pos-pos0),n.xyz)*n.xyz);\n    //R = R*rz*rx;\n    \n    // calc some ambient occlusion\n    float ao=1.;\n    #if 0\n    // calc simple ao by stepping along radius\n    ao*=dist(pos*1.02)/.02;\n    ao*=dist(pos*1.05)/.05;\n    ao*=dist(pos*1.1)/.1;\n    #else\n    vec3 R2=normalize(3.*R.xyz+n.xyz);\n    // calc ao by stepping along normal\n    ao*=dist(pos+R2*.02)/.02;\n    ao*=dist(pos+R2*.05)/.05;\n    ao*=dist(pos+R2*.10)/.10;\n    #endif\n    // adjust contrast of ao\n    ao=pow(clamp(ao,0.,1.),.4);\n    ao=ao*.9+.1;\n    \n    vec3 c = mix(vec3(1),vec3(1.2,.65,.5)*1.2,clamp(dot(n.xyz,R),0.,1.));\n    c=mix(c,vec3(1.4),actMat);\n    // simply add some parts of the normal to the color\n    // gives impression of 3 lights from different dir with different color temperature\n    c += n.xyz*vec3(.05,.0,.05);\n\n    //  reflection of cubemap\n    //c *= mix(vec3(.3,.4,.35),vec3(.8,1,.9),R.z)*1.2+.4;\n    c *= myenv(pos,R,1.).xyz;\n    //c *= texture(iChannel1,R).xyz*1.5+.4;\n    \n    // add some depth darkening\n\t//c*=clamp(-dot(dir,pos)*.7+.7, .2, 1.);\n    \n    // apply ambient occlusion\n    c*=ao;\n    \n    // apply background\n    if(bg>=.5) c=vec3(.5,.6,.75);\n    //if(bg>=.5) c=myenv(pos,dir,1.).xyz;\n    \n    // vignetting\n    float vign = (1.1-.5*dot(sc.xy,sc.xy));\n    \n\tfragColor = vec4(c*vign,1);\n\t//fragColor = vec4(R,1);\n\t/*fragColor = vec4(R2,1);\n\tif (fragCoord.x>iResolution.x*.5)\n\tfragColor = vec4(n.xyz,1);*/\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}