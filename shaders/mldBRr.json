{
    "Shader": {
        "info": {
            "date": "1700904078",
            "description": "Any four numbers are the x-coordinates of a regular tetrahedron:\nAkiva Weinberger on Twitter: [url]https://x.com/akivaw/status/1727824794266251606?s=20[/url]\n\nMouse sets two of the x-coordinates (shader assumes the numbers add to zero).\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mldBRr",
            "likes": 21,
            "name": "Tetrahedron from x-coordinates",
            "published": 3,
            "tags": [
                "projection",
                "tetrahedron"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Tetrahedron from x-coordinates, mla, 2023\n//\n// Any four numbers are the x-coordinates of a regular tetrahedron:\n// Akiva Weinberger on Twitter: https://x.com/akivaw/status/1727824794266251606?s=20\n//\n// Or, any four numbers are the x-coordinates of the orthogonal projection, possibly\n// combined with scaling, of a regular tetrahedron.\n//\n// This shader makes the simplifying assumption that the four numbers (x,y,z,w) add to\n// zero - adding in an extra translation is an exercise left for reader.\n//\n// Mouse sets two of the coordinates.\n\n// In 4-space, the standard tetrahedron has vertices (1,0,0,0), (0,1,0,0), (0,0,1,0)\n// and (0,0,0,1), living in the affine subspace x+y+z+w = 1. Given two\n// orthogonal vectors q,r in the parallel subspace through origin we can project\n// any point s in the affine subspace to the 2-d point (s·q,s·r), so eg. the\n// projection of (1,0,0,0) has x-coordinate q.x, so using axis vector q = (x,y,z,w) \n// (the desired x-coordinates) gives the desired projection (with scaling, since\n// |q| may not be 1), just needing a y-vector r for the full projection,\n// which must be orthogonal to q and of the same length.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  float lwidth0 = 0.002, lwidth1 = 0.01;\n  float scale = 2.0;\n  vec2 z = scale*(2.0*fragCoord - iResolution.xy)/iResolution.y;\n  float px = fwidth(z.x);\n\n  vec4 T = vec4(0.1,-1,0.5,0); // The required x-coords. Also the x-vector for projection.\n  if (iMouse.x > 0.0) T.xy = scale*(2.0*iMouse.xy - iResolution.xy)/iResolution.y;\n  T.w -= dot(T,vec4(1));\n\n  // We need an orthonormal basis for subspace, this will do nicely:\n  mat3x4 XYZ = 0.5*mat3x4( 1,-1, 1, -1,\n                          -1, 1, 1, -1,\n                           1, 1,-1, -1);\n  // And now an orthogonal basis with transformed T as x-vector\n  vec3 P = T*XYZ;  // Convert to XYZ coords\n  vec3 Q = normalize(cross(P,vec3(1,0,0))); // Let's hope q3 != (1,0,0)\n  vec3 R = normalize(cross(P,Q));\n  mat2x3 QR = mat2x3(Q,R);\n  vec2 rot = expi(iTime);\n  vec3 Q1 = QR*rot; // Rotate\n  vec3 R1 = QR*mat2(0,1,-1,0)*rot;\n  mat3 PQR = mat3(P,length(P)*Q1,length(P)*R1); // Basis vectors should be equal length\n  // Transform basis PQR back to R4.\n  // Transpose is coordinates of the desired tetrahedron.\n  mat4x3 ABCD = transpose(XYZ*PQR); // Row 0 is just T, so could simplify\n  // #define xy xz // For the other view\n  vec2 A = ABCD[0].xy, B = ABCD[1].xy, C = ABCD[2].xy, D = ABCD[3].xy;\n  \n  vec3 col = vec3(0);\n\n  float d = 1e8;\n  // The lines for the x-coordinates\n  d = min(d,abs(z.x-T.x));\n  d = min(d,abs(z.x-T.y));\n  d = min(d,abs(z.x-T.z));\n  d = min(d,abs(z.x-T.w));\n  col = mix(vec3(1),col,0.8+0.2*smoothstep(0.0,px,d-lwidth0));\n\n  // The tetrahedron\n  d = 1e8;\n  d = min(d,segment(z,A,B));\n  d = min(d,segment(z,A,C));\n  d = min(d,segment(z,A,D));\n  d = min(d,segment(z,B,C));\n  d = min(d,segment(z,B,D));\n  d = min(d,segment(z,C,D));\n  col = mix(vec3(1,0.75,0),col,smoothstep(0.0,px,d-lwidth1));\n\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nvec2 expi(float t) {\n  return vec2(cos(t),sin(t));\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}