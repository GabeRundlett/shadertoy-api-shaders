{
    "Shader": {
        "info": {
            "date": "1615862530",
            "description": "Trying to do a 3D truchet tiling, and succeeding! The trick is to make sure there is a node in the middle of each cell edge/face/I don't know what a 4 dimensional face is called.",
            "flags": 0,
            "hasliked": 0,
            "id": "7dX3DH",
            "likes": 8,
            "name": "3D Truchet Try",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "grid",
                "truchet",
                "tiling"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 Hash33(in vec3 p) {\n\tp = fract(p * vec3(0.1031, 0.103, 0.0973));\n    p += dot(p, p.yxz + 33.33);\n    return fract((p.xxy + p.yxx) * p.zyx);\n}\n\nfloat sdTorus(in vec3 p, in float r, in float t) {\n    return length(vec2(length(p.xz) - r, p.y)) - t;\n}\n\nfloat mapScene(in vec3 p) {\n    float c = 5.0, h = 0.5 * c; // Cell size and half that\n    vec3 cell = floor(p / c + 0.5) * c;\n    p -= cell;\n\n    p *= sign(Hash33(cell) - 0.5); // Flip randomly\n    float d = sdTorus(p + vec3(h, 0.0, -h), h, 0.25);\n    d = min(d, sdTorus(p.xzy - vec3(h, 0.0, h), h, 0.25));\n    d = min(d, sdTorus(p.yxz + vec3(h, 0.0, h), h, 0.25));\n\n    return d;\n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy) - mapScene(p - e.xyy),\n                          mapScene(p + e.yxy) - mapScene(p - e.yxy),\n                          mapScene(p + e.yyx) - mapScene(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    float time = iTime;\n\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 6.28;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec2(iTime + 2.5, 0.5).xxy;\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    float t = 0.0;\n    for (int i=0; i < 100; i++) {\n        vec3 p = ro + rd * t;\n        float d = mapScene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n            fragColor.rgb = abs(n) * max(0.2, dot(n, -rd));\n            break;\n        }\n\n        if (t > 100.0) {\n            break;\n        }\n\n        t += d;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}