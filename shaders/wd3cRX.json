{
    "Shader": {
        "info": {
            "date": "1601383236",
            "description": "A small 3D blob to get back to some raymarching",
            "flags": 0,
            "hasliked": 0,
            "id": "wd3cRX",
            "likes": 6,
            "name": "Blobs3000",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "blobs"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 246
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat lenny(vec2 p)\n{\n    return abs(p.x)+abs(p.y);\n}\n\n#define sat(a) clamp(a, 0., 1.)\n\nfloat cir(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n\n\nvec3 getDir(vec3 fwd, vec2 uv)\n{\n    vec3 r = normalize(cross(normalize(fwd), vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(r, normalize(fwd)));\n    float fov = .8;\n    float fov2 = 3.;\n    uv = uv * fov2;\n    return uv.x*r+uv.y*u+fov*fwd;\n}\n\nfloat sub(float a, float b)\n{\n    return max(a, -b);\n}\n\nfloat map(vec3 p)\n{\n    float m = p.y+1.+(1.-sat((pow(sin(length(p.xz)-50.*iTime),.7)-5.)))*\n        (length(p.xz)*.2+(sin(p.x*.2+iTime+p.y*sin(p.x*3.))+sin(p.z*2.+p.x)*.5)*.2+.3);\n\t\n    m = min(m, sub(-1., cir(p, 20.)));\n    float sm = 0.9;\n    \n    for (int i = 0; i < 16; ++i)\n    {\n        float fi = float(i);\n        vec3 pos = p-vec3(sin(fi*20.+iTime),-2.*sin(iTime*.5-fi*5.),asin(sin(iTime*.34+fi*15.)));\n        m = smin(m, cir(pos, 1.*(sin(fi)*.2+.5)), .5);\n    }\n    return m;\n}\nvec3 calcNormal( in vec3 p, in float t )\n{\n    float e = 0.001*t;\n\n    vec2 h = vec2(1.0,-1.0)*0.5773;\n    return normalize( h.xyy*map( p + h.xyy*e ) + \n\t\t\t\t\t  h.yyx*map( p + h.yyx*e ) + \n\t\t\t\t\t  h.yxy*map( p + h.yxy*e ) + \n\t\t\t\t\t  h.xxx*map( p + h.xxx*e ) );\n}\nvec3 rdr(vec2 uv)\n{\n    vec3 grad = (1.-sat(abs(uv.x*1.)))*vec3(0.6, 0.87,1.).zxy;\n    vec3 col = grad*.5;\n    col += (1.-pow(sat(lenny(uv)-.2), .5))*.5;\n    float dist = 7.;\n    vec3 ro = vec3(dist*sin(iTime),2.,dist*cos(iTime));//vec3(sin(iTime*.5+1.), 1., -5.+mod(iTime, 30.));\n    vec3 target = vec3(0., 0.,1.);\n    vec3 rd = getDir(normalize(target-ro),uv); \n    \n    float d = 0.01;\n    for (int i = 0; i < 128; ++i)\n    {\n        vec3 p = ro + rd * d;\n        float res = map(p);\n        col += pow((1.-sat(res*.05)), 5.5)*.03*vec3(0.,1.,1.);\n        if (res < 0.01 && d < 100.)\n        {\n         \t//col = calcNormal(p, d)*.5+.5;   \n            vec3 norm = calcNormal(p, d);\n            vec3 diff = vec3(0.);\n            vec3 spec = vec3(0.);//0.3, 0.7,1.);\n            if (p.y < 0.0)\n            {\n                diff = vec3(0.2, .267, .76).zxy*2.*(1.-sat(lenny(p.xz)-5.));\n                norm.xz += .1*vec2(sin(p.z*5.+iTime*5.),sin(p.x*5.24));\n                norm = normalize(norm);\n                spec = vec3(1.,.1,0.1);\n                \n            }\n            else\n            {\n                spec = vec3(1.,0.,.5);\n                diff = mix(vec3(0.),vec3(1.), sat(sin(p.y*10.)*2.));\n            }\n            spec = spec.zyx;\n            \n            \n            float lSpd = .5;\n            vec3 lPos = vec3(0.,1.,0.);\n            vec3 lDir = normalize(lPos-p);\n           // vec3 lDir = normalize(vec3(sin(iTime*lSpd), 1.,-1.));\n            col += vec3(.1); // Ambient\n            vec3 h = normalize(lDir+rd);\n            col += diff*sat(dot(norm, lDir)); // diffuse\n            col += spec*pow(sat(dot(norm,h)), 2.9); // spec\n            \n            break;\n        }\n    \td += res*.9;\n    }\n    \n    \n    col += grad*.5;\n    col *= 1.-pow(sat(length(uv*2.)), .5);\n    \n    col += (1.-pow(sat(lenny(uv*.5)), .5))*.1*sat(d-10.);\n    col *= vec3(1.)*(pow(sat(d/100.), .1));\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    vec3 col;\n    \n    col = rdr(uv);\n    //col = vec3(1.)*(1.-sat((length(uv)-.5)*400.));\n    col = pow(col, vec3(1./.6));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}