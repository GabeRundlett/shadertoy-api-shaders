{
    "Shader": {
        "info": {
            "date": "1722531293",
            "description": "made this a year ago but I can never get the colors right so didn't upload.\n\nchange n for more iterations",
            "flags": 0,
            "hasliked": 0,
            "id": "4f2czy",
            "likes": 24,
            "name": "Pentagon Subdivision",
            "published": 3,
            "tags": [
                "graph",
                "cell",
                "subdivision",
                "pentagon",
                "divide"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 177
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n#define dir(a) vec2(cos(a),sin(a))\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define cro(a,b) ((a).y*(b).x - (a).x*(b).y)\n\n// From Dave Hoskins\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n// Returns distance to containing edges\n// (modified from iq's polygon distance code)\nfloat dPentagon(vec2 u, vec2[5] P)\n{\n    float d = dot(u-P[0], u-P[0]);\n    for (int i; i < 5; i++)\n    {\n        vec2 e = P[(i+1)%5] - P[i];\n        vec2 w = u - P[i];\n        vec2 b = w - e * clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n    }\n    return sqrt(d);\n}\n\nbool inPentagon(vec2 u, vec2[5] P)\n{\n    bool inside = true;\n    for (int i; i < 5; i++) {\n        inside = inside && cro(u - P[i], P[(i+1)%5] - P[i]) >= 0.;\n    }\n    return inside;\n}\n\nbool inSector(vec2 u, vec2 a, vec2 b, vec2 c) \n{\n    return cro(u-b, a-b) >= 0. && cro(u-c, b-c) >= 0.;\n}\n\nvoid mainImage( out vec4 o, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         v = u / R;\n    u = (u+u-R)/R.y;\n    u.y += .07;\n    \n    float t = iTime;\n    \n    int id;   // Cell ID for last iteration (0,1,2,3,4)\n    float ID; // Cell ID distinct for every cell\n        \n    vec2[5] P, // Outer points\n            Q, // Inner points\n            M; // Outer midpoints\n            \n    vec2 centre; // Centre of outer points\n       \n    // Initialize outer points to a regular pentagon\n    for (int i; i < 5; i++) \n        P[i] = dir(pi/2. + 2.*pi*float(i)/5.);\n \n \n    // --- CHANGE ME ---\n    \n    float n = min(3., ceil(t/4.));   // Number of iterations\n    float spd = 1.; // Time multiplier (varies by iteration)\n    \n    // -----------------\n    \n    \n    for (float j; j < n; j++) {\n        // j offset (offset time by iteration)\n        float jo = pi*j/n; \n                \n        centre = (P[0]+P[1]+P[2]+P[3]+P[4])/5.;\n\n        for (int i; i < 5; i++) {\n            // i offset (offset time by cell)\n            float io = .4 * pi * float(i);\n            io *= .5 + .5 * cos(t);\n            \n            // Calculate outer midpoints\n            M[i] = mix(P[i], P[(i+1)%5], .5 + .1 * sin(io+jo+t));\n            \n            // Inner points lie on midpoint-centre lines\n            Q[i] = mix(M[i], centre, .5+.2*cos(io+jo-spd*t));\n        }\n        \n        // Middle cell has new outer points = old inner points\n        if (inPentagon(u, Q)) { \n            id = 5; \n            P = Q;\n        }\n        // Other cells check which midpoint-centre lines contain them\n        else {           \n            id = 4;\n            \n            // Only check id = 0,1,2,3. If those fail then id = 4\n            for (int i; i < 4; i++) {\n                if (inSector(u, M[i], centre, M[i+1])) {\n                    id = i;\n                    break;\n                }\n            }\n            \n            // New outer points \n            int id2 = (id+1)%5;        \n            P = vec2[5] (P[id2], M[id2], Q[id2], Q[id], M[id]);\n        }\n                \n        spd *= 2.;\n        \n        ID += float(id) / (1. + j);\n    }        \n\n    // Color each cell\n    o = 1. + .5 * cos(2.*pi*(float(id)/6. + .5 + vec4(0,1,2,0)/6.));\n\n    // White background outside pentagon\n    if (!inPentagon(u, P) || iMouse.z > 0.)\n        o = vec4(1);\n        \n    // Outline\n    float d = dPentagon(u, P);\n    o *= .15 + .85 * smoothstep(-2./R.y, 2./R.y, d-1.5/R.y);\n    \n    // Vignette\n    o -= 1. - pow(16.*v.x*v.y*(1.-v.x)*(1.-v.y), .03);\n    \n    // Gamma\n    o = pow(o, vec4(1./1.4));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}