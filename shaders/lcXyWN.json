{
    "Shader": {
        "info": {
            "date": "1721168757",
            "description": "Main elements of this shader:\n1) simple trichoid parametric curve (4 rotating circles stacked on top of each other)\n2) a separate function for controlling the \"thickness\" of the curve\n3) the curve SDF is based on piecewise line segments",
            "flags": 0,
            "hasliked": 0,
            "id": "lcXyWN",
            "likes": 11,
            "name": "Parametric Trochoid",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "parametric",
                "trochoid"
            ],
            "usePreview": 0,
            "username": "sanblu",
            "viewed": 146
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2024 Sandro Blum\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Main elements:\n// 1) a trichoid parametric curve (4 rotating circles stacked on top of each other)\n// 2) a separate function for controlling the \"thickness\" of the curve\n// 3) the curve SDF is based on piecewise line segments (more segments for curved areas, idea by inigo quilez -> https://www.shadertoy.com/view/Xlf3zl)\n\n// note1: the concept of 2) 3) can be used for any parametric curve, doesn't need to be the trichoid curve\n\n// trochoid parametric curve\n// for context, see: https://scholarcommons.scu.edu/cgi/viewcontent.cgi?article=1004&context=math_compsci\nvec2 trochoid(float t, bvec4 clockwise, vec4 cf, vec4 weights) {\n    return 0.5 + 0.5 * (\n            weights[0] * (clockwise[0] ? vec2(cos(cf[0] * t),sin(cf[0] * t)) : vec2(sin(cf[0] * t),cos(cf[0] * t))) +\n            weights[1] * (clockwise[1] ? vec2(cos(cf[1] * t),sin(cf[1] * t)) : vec2(sin(cf[1] * t),cos(cf[1] * t))) +\n            weights[2] * (clockwise[2] ? vec2(cos(cf[2] * t),sin(cf[2] * t)) : vec2(sin(cf[2] * t),cos(cf[2] * t))) +\n            weights[3] * (clockwise[3] ? vec2(cos(cf[3] * t),sin(cf[3] * t)) : vec2(sin(cf[3] * t),cos(cf[3] * t)))\n        );\n}\n\nfloat curveThickness(float t) {\n    return 0.002 + 0.006 * sin(16.0 * t + iTime);\n}\n\nfloat minDistance(vec2 uv, vec2 pos0, vec2 pos1, float thickness0, float thickness1, float minDist) {\n        vec2 dir = normalize(pos1 - pos0);\n        vec2 nearestPoint = clamp(dot(uv - pos0, dir), 0.0, length(pos1 - pos0)) * dir + pos0;\n        float dist = length(uv - nearestPoint);\n        float thickness = mix(thickness0, thickness1, clamp(dot(uv - pos0, dir) / length(pos1 - pos0), 0.0, 1.0));\n        return min(minDist, dist - thickness); \n}\n\nfloat curveSd(vec2 uv, bvec4 clockwise, vec4 cf, vec4 weights) {\n    float minDist = FLT_MAX;\n    float t0 = 0.0;\n    float t1 = 0.02;\n    while (true) {\n        vec2 pos0 = trochoid(t0, clockwise, cf, weights);\n        vec2 pos1 = trochoid(t1, clockwise, cf, weights);\n        float thickness0 = curveThickness(t0);\n        float thickness1 = curveThickness(t1);         \n        minDist = minDistance(uv, pos0, pos1, thickness0, thickness1, minDist);\n        \n        if (t1 == PI2) {\n            break;\n        }        \n        \n        // increase segment density for curved areas\n        // idea by inigo quilez: https://www.shadertoy.com/view/Xlf3zl\n        float delta = clamp(0.0006 * length(pos0 - uv) / length(pos0 - pos1), 0.0002, 0.01 );        \n        t0 = t1;        \n        t1 = min(t1 + delta, PI2);\n    }   \n    return minDist;\n}\n\n\nvec4 randomWeights(in uint seed) {\n    uint rnd1 = pcg1d(seed);\n    uint rnd2 = pcg1d(rnd1);\n    uint rnd3 = pcg1d(rnd2);\n    uint rnd4 = pcg1d(rnd3);       \n    vec4 weights = vec4(rnd1, rnd2, rnd3, rnd4) / UINT_MAX;\n    weights /= weights.x + weights.y + weights.z + weights.w;\n    return weights;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    float aspectRatio = iResolution.x/iResolution.y;\n    uv.x = uv.x * aspectRatio - (aspectRatio - 1.0) * 0.5;\n\n    // for this demo we choose just one specific trichoid configuration (there are tons of other configurations that look nice too)    \n    int n = 4;\n    bvec4 clockwise = bvec4(1, 1, 0, 1);\n    vec4 cf = vec4(1, 7, 17, 13);\n    \n    float mixRatio = smoothstep(0.3, 0.7, cos(iTime * 1.0) * 0.5 + 0.5);    \n    uint rootSeed = 1339u;\n    uint seedA = rootSeed + uint(0.5 * iTime / PI);\n    uint seedB = rootSeed * 7u + uint((0.5 * iTime + PI * 0.5) / PI);    \n    vec4 weightsA = randomWeights(seedA);\n    vec4 weightsB = randomWeights(seedB);\n    vec4 weights = mix(weightsA, weightsB, mixRatio);\n\n    float dist = curveSd(uv, clockwise, cf, weights);    \n    \n    float val = 1.0 - pow(clamp(dist,0.0,1.0),0.5);    \n    vec3 col = pal(val, vec3(0.5,0.5,0.5), vec3(0.5,0.5,0.5), vec3(1.0,1.0,0.5), vec3(0.8,0.9,0.3));\n    fragColor = vec4(col, 1.0);                \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define FLT_MAX 3.402823466e+38\n#define PI 3.14159\n#define PI2 6.28318530718\n#define UINT_MAX 4294967295.0\n\n// https://www.pcg-random.org/\n// http://www.jcgt.org/published/0009/03/02/\nuint pcg1d(in uint v)\n{\n    uint state = v * 747796405u + 2891336453u;\n    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n    return (word >> 22u) ^ word;\n}\n\n// https://iquilezles.org/articles/palettes\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}