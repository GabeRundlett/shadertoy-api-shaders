{
    "Shader": {
        "info": {
            "date": "1572573847",
            "description": "Star Wormhole",
            "flags": 32,
            "hasliked": 0,
            "id": "3dcXzs",
            "likes": 20,
            "name": "Star Wormhole",
            "published": 3,
            "tags": [
                "star",
                "wormhole"
            ],
            "usePreview": 0,
            "username": "shackle",
            "viewed": 1141
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n\n    // Output to screen\n    fragColor = texture(iChannel0,uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.141592654\n\nvec2 Rot(vec2 v, float angle)\n{\n    return vec2(v.x * cos(angle) + v.y * sin(angle),\n        v.y * cos(angle) - v.x * sin(angle));\n}\n\nvec3 DrawStar(float len, float angle)\n{\n    vec3 baseColor = vec3(0.0, 0.3, 0.7);\n    float fre1 = 30.0;\n    float fre2 = 20.0;\n    float radius = 0.03;\n    float m = radius / (radius + abs(sin(len * fre1 * 1.0 - 0.5 * iTime)));\n    float n = radius / (radius + abs(sin(angle * fre2 + len * 100.0)));\n    float f6 = max(m * n - 0.1 * len, 0.0) * 100.0;\n    return baseColor * f6;\n}\n\nfloat map(float l)\n{\n    float lm = 1.0;\n    l = clamp(1e-1, l, l);\n    float lm2 = lm * lm;\n    float lm4 = lm2 * lm2;\n    return sqrt(lm4 / (l * l) + lm2);\n    // return 1.0/(l+1e-5);\n}\nvec3 DrawCloud(float dis, float angle, vec2 coord)\n{\n    vec3 baseColor = vec3(0.0, 0.0, 0.0);\n    vec3 cloudColor = vec3(0.0, 0.3, 0.7);\n    float x = angle + dis;\n    float fre = 2.0;\n    float ap = 1.0;\n    float d = float(0.0);\n    coord = Rot(coord, 0.3 * iTime);\n    vec3 kp = vec3(coord * max(dis, 1.0), dis);\n    for (int i = 1; i < 5; i++) {\n        float k = 1.0 + sin(fre * x + 0.3 * iTime);\n        k = k * k * 0.25;\n        float p = fract(k + dis / float(i + 1));\n        p = p * (1.0 - p);\n        p = smoothstep(0.1, 0.25, p);\n        d += ap * p;\n        kp += sin(kp.zxy * 0.75 * fre + 0.3 * iTime);\n        d -= abs(dot(cos(kp), sin(kp.yzx)) * ap);\n        fre *= -2.0;\n        ap *= 0.5;\n    }\n    float len2=dot(coord,coord);\n    d+=len2*4.0;\n    return baseColor + cloudColor * d;\n}\nvec3 Render(vec2 coord)\n{\n    float len = length(coord);\n    float angle = PI - acos(coord.x / len) * sign(coord.y);\n\n    vec3 baseColor = vec3(0.0, 0.0, 0.0);\n    float dis = map(len);\n    // baseColor+=DrawStar(dis/10.0,angle);\n    // baseColor+=vec3(0.0,0.3,0.7)*dis/10.0;\n    baseColor += DrawCloud(dis, angle, coord) * 0.3;\n    vec3 fogColor = vec3(0.3, 1.5, 3.0);\n    float fogC = pow(0.97, dis);\n    baseColor = mix(fogColor, baseColor, fogC);\n    return baseColor;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 coord = uv - 0.5;\n    if (iResolution.y > iResolution.x) {\n        coord.x *= iResolution.x / iResolution.y;\n    } else {\n        coord.y /= iResolution.x / iResolution.y;\n    }\n    vec3 baseColor = Render(coord);\n    fragColor = vec4(baseColor*1.3, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}