{
    "Shader": {
        "info": {
            "date": "1681525119",
            "description": "All year long I'm going to just focus on truchet tiles and the likes!\n\nexp +1 woven truchets (basic level)",
            "flags": 0,
            "hasliked": 0,
            "id": "DsGSDy",
            "likes": 20,
            "name": "Year of Truchets #012",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 1,
            "username": "byt3_m3chanic",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #012\n    04/15/2023  @byt3_m3chanic \n    \n    All year long I'm going to just focus on truchet tiles and the likes!\n    Truchet Core \\M/->.<-\\M/ 2023 \n    \n*/\n\n#define R          iResolution\n#define M          iMouse\n#define T          iTime\n\n#define PI         3.14159265359\n#define PI2        6.28318530718\n\nconst float scale = 9.;\nconst float s4 = .577350;\nconst float s3 = .288683;\n\nmat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat hash21(vec2 p){return fract(sin(dot(p, vec2(27.609, 57.583)))*43758.5453);}\n\nvec3 hue(float t) {\n    return .45 + .45*cos(PI2*t*(vec3(.12,.47,.92)+vec3(0.88,.97,.85))); \n}\n\n//@Shane\nvec4 hexGrid(vec2 uv, float scale) {\n    uv*=scale;\n    const vec2 s = vec2(1.732, 1.);\n    vec4 hC = floor(vec4(uv, uv - vec2(1, .5))/s.xyxy) + .5;\n    vec4 h4 = vec4(uv - hC.xy*s, uv - (hC.zw + .5)*s);\n    return dot(h4.xy, h4.xy) < dot(h4.zw, h4.zw) ? vec4(h4.xy, hC.xy) : vec4(h4.zw, hC.zw + .5);\n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n\n    vec2 uv = F.xy/max(R.x,R.y);\n    vec2 vv = uv;\n    \n    vec3 C = vec3(.05);\n    uv += vec2(.0,.0325) * T;\n    \n    float px = scale/R.x;\n    \n    vec4 hex = hexGrid(uv,scale);\n    vec2 id = hex.zw, p = hex.xy;\n   \n    float check = mod(id.y+id.x,2.)*2.-1.;\n    float rnd = hash21(id);\n    float dir =  -1.;\n    mat2 r2 = rot(1.047197);\n    \n    if(rnd<.5) {\n        p *= r2;\n        p.y = -p.y;\n    } \n\n    // set vectors\n    vec2 p0 = p - vec2(-s3, .5);\n    vec2 p1 = p - vec2( s4,  0);\n    vec2 p2 = p - vec2(-s3,-.5);\n    \n    // find closest point\n    vec3 d3 = vec3(length(p0), length(p1), length(p2));\n    vec2 pp = vec2(0);\n\n    if(d3.x>d3.y) pp = p1;\n    if(d3.y>d3.z) pp = p2;\n    if(d3.z>d3.x && d3.y>d3.x) pp = p0;\n\n    // hex background\n    float tileform = max(abs(hex.x)*.8660254 + abs(hex.y)*.5, abs(hex.y)) - .5;\n    float cells = smoothstep(px,-px, abs(tileform)-.006);\n    \n    float thk = .1,spc=.001;\n    float circle = length(pp)-s3;\n    circle = abs(circle)-thk;\n\n    float c1 = 1e5, c2 = 1e5, c3 = 1e5; \n    vec2 pq = p;\n    float rwd = fract(rnd*3232.32);\n    \n    if(rnd>.8) {\n        c3 = length(pq.x)-thk;\n        circle = c3;\n        c3 = abs(c3+spc)-spc;\n        pq *= r2;\n        c2 = length(pq.x)-thk;\n        circle = min(c2,circle);\n        c2 = abs(c2+spc)-spc;\n        pq *= r2;\n        c1 = length(pq.x)-thk;\n        circle = min(c1,circle);\n        c1 = abs(c1+spc)-spc;\n        c1 = rwd>.4?rwd>.7?c2:c3:c1;\n        circle = max(circle,-c1);\n    }\n    \n    if(rnd<.045) {\n        pq*=r2;pq*=r2;circle = length(pq.x)-thk;\n        c2 = length(p0)-s3;\n        c1 = length(p0+vec2(-.58,1.))-s3;\n        c1 = min(c2,c1);\n        c1 = abs(c1)-thk;\n        circle = min(circle,c1);\n    } else if(rnd<.075) {\n        circle = length(pq.x)-thk;\n        c2 = length(p1)-s3;\n        c1 = length(p1+vec2(1.155,0))-s3;\n        c1 = min(c2,c1);\n        c1 = abs(c1)-thk;\n        circle = min(circle,c1);\n    }\n     \n    float pc = length(p)-.07;\n    float sc = smoothstep(px,-px,circle-.05);\n    float sd = smoothstep(px,-px,circle+.05);\n    float sh = smoothstep(.1+px,-px,circle-.025);\n    float pi = smoothstep(px,-px,length(p)-.025);\n    pc = abs(abs(abs(abs(abs(pc)-.12)-.06)-.03)-.015)-.0075;\n    pc = smoothstep(px,-px,pc);\n    \n    circle = abs(abs(circle)-.02)-.01;\n    circle = smoothstep(px,-px,circle);\n\n    //mixdowns and stuff\n    vec3 clx = vec3(0.800,0.200,0.000);\n    vec3 clr = vec3(0.004,0.349,0.396);\n    \n    C = mix(C,clx,pc);\n    C = mix(C,vec3(0),cells);\n    C = mix(C,vec3(1),pi);\n    C = mix(C,C*.3,sh);\n    \n    C = mix(C,vec3(0),sc);\n    C = mix(C,clr,circle);\n    C = mix(C,texture(iChannel0,p*2.).rgb,sd);\n    C = mix(C,C*.5,cells);\n    \n    //output\n    C = pow(C,vec3(.4545));\n    O = vec4(C,1);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}