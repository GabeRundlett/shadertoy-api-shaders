{
    "Shader": {
        "info": {
            "date": "1698407338",
            "description": "sigma ~ dist to mouse",
            "flags": 0,
            "hasliked": 0,
            "id": "DsVBzK",
            "likes": 14,
            "name": "foveated gaussian blur",
            "published": 3,
            "tags": [
                "blur",
                "gaussian",
                "foveated"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 403
        },
        "renderpass": [
            {
                "code": "  #define T(u) texelFetch(iChannel0, ivec2(u), 0 )                    // apply on texture\n//#define T(u) ( P = floor((u)/8.), vec4( mod(P.x+P.y,2.) ) )         \n\n#define gauss(v) exp(-.5*v*v)                                         // Gaussian\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy,\n          P = ( 2.*u - R ) / R.y,\n          M = iMouse.xy;\n          M = length(M)<10. ? .5*vec2(cos(iTime),sin(iTime))          // demo mode: simulate moving mouse\n                            : ( 2.*M - R ) / R.y;                     // mouse\n                            \n    float s = 10.*length(P-M), w,t;                                   // sigma ~ dist to mouse\n    int L = int(ceil(2.*s));\n    O *= w;\n    for (int y = -L; y <= L; y++ )                                    // filter window\n        for (int x = -L; x <= L; x++ )\n            t += w = gauss( length(vec2(x,y))/s ),                    // local & cumulated weight\n            O += w * T( u + vec2(x,y) );                              // weighted sum\n    O /= t;\n // O = sqrt(O);                                                      // for the checker, add final sRGB conversion\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}