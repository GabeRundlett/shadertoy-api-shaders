{
    "Shader": {
        "info": {
            "date": "1581662383",
            "description": "Gold rings, rotating around a sphere.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wt3SDj",
            "likes": 4,
            "name": "Gold Rings",
            "published": 3,
            "tags": [
                "noise",
                "raymarch",
                "ring",
                "gold"
            ],
            "usePreview": 0,
            "username": "kstyler",
            "viewed": 350
        },
        "renderpass": [
            {
                "code": "int mat = 0;\nfloat epsi = 0.001;\n\nfloat random(vec2 p){\n\n    vec3 p3  = fract(vec3(p.xyy) * .10031);\n    p3 += dot(p3, p3.yyx + 33.33);\n    return fract((p3.x + p3.y) );\n}\nfloat noise(vec2 uv){\n\n    vec2 id = floor(uv*8.);\n    vec2 lc = smoothstep(0.,1.,fract(uv*8.));\n    float a = random(id);\n    float b = random(id + vec2(1.,0.));\n    float c = random(id + vec2(0.,1.));\n    float d = random(id + vec2(1.,1.));\n    \n    float ud = mix(a,b,lc.x);\n    float lr = mix(c,d,lc.x);\n    float fin = mix(ud,lr,lc.y);\n    return fin;\n    \n}\n\nfloat octaves(vec2 uv,int octs){\n\n    float amp = 0.5;\n    float f = 0.;\n    for(int i =1; i<octs+1;i++){\n        f+=noise(uv)*amp;\n        uv*=2.;\n        amp*=0.5;\n    }\n   \n    return f;\n}\nmat2 rot(float a){\n    return mat2(sin(a),-cos(a),cos(a),sin(a));\n}\nfloat sdSphere(vec3 p){\n    return length(p)-1.;\n}\nfloat sdRCyl( vec3 p, float ra, float rb, float h ){\n  \n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  \n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\nfloat sdRing(vec3 p,float size,mat2 rotate){\n    p.zy*=rotate;\n    float or =  sdRCyl(p,size,0.,0.4);\n    float ir =  sdRCyl(p,size+0.1,0.,0.3);\n    return (max(-or,ir));\n}\nfloat sdRing2(vec3 p,float size,mat2 rotate){\n    p.xy*=rotate;\n    float or =  sdRCyl(p,size,0.,0.4);\n    float ir =  sdRCyl(p,size+0.1,0.,0.3);\n    return (max(-or,ir));\n}\n\nfloat map(vec3 p){\n\n    float sphere = sdSphere(p);\n   \n \n    \n    float ring = sdRing(p,0.85,rot(iTime));\n    float ring2 = sdRing2(p,0.65,rot(iTime));\n    float ring3 = sdRing(p,1.1,rot(-iTime));\n     //p.y+=(sin(length(p.xz*0.9)-iTime*3.)*.5);\n          float plane = p.y +3.5;\n    \n    float best = min(min(min(min(sphere,plane),ring),ring2),ring3);\n    if(best == sphere){\n        mat = 1;\n    } else if(best == plane){\n        mat = 2;\n    } else if(best == ring || best == ring2||best == ring3 ) {\n        mat = 3;\n    }else{mat = 4;}\n    return best;\n}\nvec3 normal(vec3 p){\n    vec2 e = vec2(epsi,0);\n    return normalize(vec3(map(p+e.xyy)-map(p-e.xyy),\n                        map(p+e.yxy)-map(p-e.yxy),\n                        map(p+e.yyx)-map(p-e.yyx)));\n}\n\nfloat tr(vec3 ro,vec3 rd){\n    float tot = 0.;\n    float dst = 0.;\n    for(int i = 0; i< 180; i++){\n        dst = map(ro+rd*tot);\n        tot+=dst;\n        if(dst <epsi||tot>180.)break;\n    }\n    \n    if(dst >epsi){\n        mat = 0;\n    }\n    return tot;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (fragCoord.xy-0.5* iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(2,-1.5,-9);\n    vec3 rd = normalize(vec3(uv,1));\n    ro.zy*=rot(2.1);\n    rd.zy*=rot(2.1);\n    ro.zx*=rot(iTime);\n    rd.zx*=rot(iTime);\n    vec3 color = vec3(1);\n    \n    for(int i =0;i<7;i++){\n        vec3 p = (ro+rd*tr(ro,rd));\n       \n      \n        if(mat == 0){\n        \n          \n            uv.x+=iTime/60.;\n            uv.x*=0.7;\n            color *= vec3(octaves(uv,9)+0.5);\n     \n            \n           \n        }if(mat == 1){\n         vec3 n = normal(p);\n           float fresnel = pow(1.-dot(- rd,n),5.);\n            color*= fresnel;\n               ro = p+1.;\n                rd = reflect(rd,n);\n        }\n        if(mat == 2){\n         vec3 n = normal(p);\n            color*= vec3(0.25,0.3,0.3);\n              ro = p+1.;\n            rd = reflect(rd,n);\n        }\n        if(mat ==3){\n         vec3 n = normal(p);\n            color *= vec3(0.9,0.7,0.3);\n               ro = p+1.;\n        rd = reflect(rd,n);\n        }\n \n    }\n\n   \n    fragColor = vec4((color),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}