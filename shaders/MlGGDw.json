{
    "Shader": {
        "info": {
            "date": "1474979191",
            "description": "Voronoi diagram are nice, but for CG use several goodies are welcome. \nIQ shown how to regularize the distance to border. \nI shown how to make an organic look (no sharp angle), i.e., trabeculum patterns. \nHere, I join both ideas.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlGGDw",
            "likes": 10,
            "name": "2D trabeculum - 2",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "voronoi",
                "noise",
                "worley",
                "short",
                "trabeculum"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 1369
        },
        "renderpass": [
            {
                "code": "// better trabeculum ( compare to https://www.shadertoy.com/view/4dKSDV )\n// relying on simplification ( cf https://www.shadertoy.com/view/llGGDw )\n// of IQ's Voronoi distance https://www.shadertoy.com/view/ldl3W8\n\n#define ANIMATE\n\nvec2 hash2( vec2 p )\n{\n\t// texture based white noise\n\treturn texture( iChannel0, (p+.5)/256., -100. ).xy;\n\t\n    // procedural white noise\t\n\t//return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvec2 dist(vec2 g, vec2 x) {\n    vec2 n = floor(x), f = fract(x),\n         o = hash2( n + g );\n\t#ifdef ANIMATE\n    o = .5 + .5*sin( iTime + 6.2831*o );\n    #endif\t\n    return g + o - f;\n}\n\nvec4 voronoi( vec2 x )\n{\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\n    float md = 8., md2, md3;\n    for( int j=-1; j<=1; j++ )\n        for( int i=-1; i<=1; i++ ) {\n            vec2  g = vec2(i,j), \n                  r = dist(g, x);\n            float d = dot(r,r);\n\n            if( d < md ) { md = d; mr = r;  mg = g; } // memorize closest + state\n        }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.;\n    for( int j=-2; j<=2; j++ )\n        for( int i=-2; i<=2; i++ ) {\n            vec2 g = mg + vec2(i,j),       // around cell of closest\n                 r = dist(g, x);\n\n            if( dot(mr-r,mr-r) > 1e-5 ) {  // don't count self cell\n                float d = dot( .5*(mr+r), normalize(r-mr) );\n                if ( d < md ) md3=md2, md2=md, md=d;\n                else if (d < md2 ) md3 = md2, md2=d;\n                else  if (d < md3 ) md3 = d;\n            }\n        }\n  //return vec3( md, md2, md3 );           // 3 distances to border: useful in 3D\n    return vec4( md, md2, mr );            // 2 distances to border + seed pos\n}\n\n\nvoid mainImage( out vec4 O,  vec2 p )\n{\n    p /= iResolution.x;\n\n    vec4 c = voronoi( 8.*p );\n    float d = c.x;              // original IQ's constant border width VoronoÃ¯ \n    d = 2./(1./c.x+1./c.y);     // trabeculum distance adapted from https://www.shadertoy.com/view/4dKSDV\n                                // ( Formula (c) Fabrice NEYRET - BSD3:mention author. )\n    // d = 2./(1./c.y+1./c.z);  // 3D\n    //float K = 1.3; d = pow( (pow(c.x,-K)+pow(c.y,-K))/5., -K );\n    //float K = .7; d = pow( (pow(c.x,-K)+pow(c.y,-K))*2., -K );\n    \n\t// isolines\n    vec3 col = vec3(d)*(.5 + .5*sin(64.*d));\n    // borders\t\n  //col = mix( vec3(1,.6,0), col, smoothstep( .04, .07, d*(1.+.5*sin(iTime)) ) );\n    col = mix( vec3(1,.6,0), col, smoothstep( .04, .07, d-.06-.1*sin(iTime) ) );\n\n    // feature points\n\tfloat dd = length( c.zw );\n\tcol =   mix( vec3(1,.6,.1), col, smoothstep( .0, .12, dd) )\n\t      + vec3(1,.6,.1)*smoothstep( .04, .0, dd);\n\n\tO = vec4(col,1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}