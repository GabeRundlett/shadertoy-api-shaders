{
    "Shader": {
        "info": {
            "date": "1696717299",
            "description": "Burning ship Julia",
            "flags": 32,
            "hasliked": 0,
            "id": "csGcWd",
            "likes": 0,
            "name": "Julia set burning ship + blend",
            "published": 3,
            "tags": [
                "juliaset"
            ],
            "usePreview": 0,
            "username": "Elyades",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "float PI = 3.14159265358979323846;\nfloat TWOPI = 6.28318530718;\nfloat PIONTWO = 1.57079632679;\n\nfloat atan2(float y, float x)\n{\n    //this computes arctan(y/x)\n    float angle = atan(y,x);\n    if(angle < 0.0){angle+= TWOPI;}\n    return(angle);\n}\n\nfloat norm(vec2 uv)\n{\n    return(float(uv.x*uv.x + uv.y*uv.y));\n}\n\nvec2 ix(vec2 uv)\n{\n    //this computes i*uv;\n    return vec2(-uv.y,uv.x);\n}\n\nvec2 times (vec2 z1, vec2 z2)\n{\n    return vec2(z1.x*z2.x - z1.y*z2.y , z1.x*z2.y + z1.y*z2.x);\n}\n\nvec2 oneoverz(vec2 uv)\n{\n    float squaremodulus = norm(uv);\n    return vec2(uv.x/squaremodulus, -uv.y/squaremodulus);\n}\n\nvec2 log2d(vec2 uv)\n{\n    return vec2(log(length(uv)) , atan2(uv.y,uv.x));\n}\n\nvec2 exp2d(vec2 uv)\n{\n    return vec2( exp(uv.x)*vec2(cos(uv.y),sin(uv.y)) );\n}\n\nvec2 cos2d(vec2 uv)\n{\n    vec2 expo = exp2d(ix(uv));\n    return 0.5*( expo + oneoverz(expo) );\n}\n\n\nvec2 sin2d(vec2 uv)\n{\n    vec2 expo = exp2d(ix(uv));\n    return ix(0.5*( expo - oneoverz(expo) ) );\n}\n\nvec2 square(vec2 uv)\n{\n    return vec2(uv.x*uv.x - uv.y*uv.y , 2.0*uv.x*uv.y);\n}\n\nvec2 cube(vec2 uv)\n{\n    return vec2( uv.x*uv.x*uv.x - 3.0*uv.x*uv.y*uv.y, 3.0*uv.x*uv.x*uv.y - uv.y*uv.y*uv.y );\n}\n\nvec2 degree2(vec2 uv, vec2 a, vec2 b, vec2 c)\n{\n    \n    return(times(a,square(uv)) + times(b,uv) + c);\n}\n\nvec2 degree3(vec2 uv, vec2 a, vec2 b, vec2 c, vec2 d)\n{\n    vec2 prod1 = square(uv);\n    vec2 prod2 = times(prod1,uv);\n    \n    return(times(a,prod2) + times(b,prod1) + times(c,uv) + d);\n}\n\nvec2 function(vec2 uv, vec2 c)\n{   \n    vec2 result = square(uv) + c;\n    return result;\n}\n\nvec3 palette2( float t ) {\n    //by Inigo Quilez\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(2.0,1.0,0.0);\n    vec3 d = vec3(0.3,0.1,0.6);\n\n    return vec3(a + b*cos(6.28318530718*(c*(t) + d)));\n}\n\nvec3 palette4(float iteration)\n{\n    float value = 0.8;\n    vec3 a = vec3(value);\n    vec3 b = vec3(1.0-value);\n    vec3 c = vec3(2.0,1.0,1.0);\n    vec3 d = vec3(0.3,0.0,0.0);\n    \n    return (a + b*cos(TWOPI*(c*iteration + d)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    //Offset\n    uv = uv - 0.5;\n    uv.x += 0.0;\n    \n    //Scale\n    uv *= 4.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n     //Choosing the Zoom\n    vec2 zoomPoint = vec2(0.0);\n    \n    //Zoom\n    float zoomAmount = min(1.0,1.0/pow(max(iTime-3.0,1.0),3.0));\n    //uv = uv*zoomAmount;\n    uv += zoomPoint;\n    \n    // Algorithm to color the pixel\n    float tol = pow(10.0,-6.0);\n    \n    \n    float DistanceToPrevious = 1.0;\n    float currentModulus = length(uv);\n    vec2 previousIteration;\n    int iterationAmount;\n    int testAmount = 1000;\n    \n    vec2 c = 2.0*(iMouse.xy/iResolution.xy - 0.5);\n    //float residue = mod(iTime,15.0)/15.0;\n    //vec2 c = uv;\n    \n    for (iterationAmount = 0; iterationAmount < testAmount; iterationAmount++)\n    {\n        previousIteration = uv;\n        uv = function(uv,c);\n        currentModulus = length(uv);\n        DistanceToPrevious = length(uv - previousIteration);\n        \n        if(DistanceToPrevious < tol){break;}\n        if(currentModulus > 300000000.0){break;}\n    }\n    \n    \n    \n    if(currentModulus < 300000000.0)\n    {\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    }\n    \n    else\n    {\n            iterationAmount = int(log(float(iterationAmount)));\n            int periodFast = 5;\n            int residueFast = iterationAmount%periodFast;\n            float indexFast = float(residueFast)/float(periodFast);\n            vec3 colorFast = palette4(indexFast);\n            \n            int periodMedium = 20;\n            int residueMedium = iterationAmount%periodMedium;\n            float indexMedium = float(residueMedium)/float(periodMedium);\n            vec3 colorMedium = palette4(indexMedium);\n            \n            int periodSlow = 50;\n            int residueSlow = iterationAmount%periodSlow;\n            float indexSlow = float(residueSlow)/float(periodSlow);\n            vec3 colorSlow = palette4(indexSlow);\n           \n            float finalIndex = (indexSlow + indexMedium + indexFast)*0.333333333;\n            vec3 finalColor = (colorSlow + colorMedium + colorFast)*0.3333333333;\n            fragColor = vec4(finalColor,1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float PI = 3.14159265358979323846;\nfloat TWOPI = 6.28318530718;\nfloat PIONTWO = 1.57079632679;\n\nfloat atan2(float y, float x)\n{\n    //this computes arctan(y/x)\n    float angle = atan(y,x);\n    if(angle < 0.0){angle+= TWOPI;}\n    return(angle);\n}\n\nfloat norm(vec2 uv)\n{\n    return(float(uv.x*uv.x + uv.y*uv.y));\n}\n\nvec2 times (vec2 z1, vec2 z2)\n{\n    return vec2(z1.x*z2.x - z1.y*z2.y , z1.x*z2.y + z1.y*z2.x);\n}\n\nvec2 oneoverz(vec2 uv)\n{\n    float squaremodulus = norm(uv);\n    return( vec2(uv.x/squaremodulus, -uv.y/squaremodulus) );\n}\n\nvec2 exp2d(vec2 uv)\n{\n    return vec2( exp(uv.x)*vec2(cos(uv.y),sin(uv.y)) );\n}\n\nvec2 cos2d(vec2 uv)\n{\n    return(vec2(0.5*( exp2d(times(uv,vec2(0.0,1.0))) + exp2d(times(-uv,vec2(0.0,1.0))))));\n}\n\n\nvec2 sin2d(vec2 uv)\n{\n    return(times(0.5*( exp2d(times(uv,vec2(0.0,1.0))) - exp2d(times(-uv,vec2(0.0,1.0)))),vec2(0.0,1.0)));\n}\n\nvec2 power(vec2 uv, float n)\n{\n    float modulus = length(uv);\n    float angle = atan2(uv.y,uv.x);\n    angle *= n;\n    \n    return( exp(n*log(modulus))*vec2(cos(angle),sin(angle)));\n}\n\nvec3 palette1( float t ) {\n    //by Inigo Quilez\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(1.0,1.0,2.0);\n    vec3 d = vec3(0.0,0.2,0.2);\n\n    return vec3(a + b*cos(6.28318530718*(c*(t) + d)));\n}\n\nvec3 palette2( float t ) {\n    //by Inigo Quilez\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(2.0,1.0,1.0);\n    vec3 d = vec3(0.0,0.33,0.66);\n\n    return vec3(a + b*cos(6.28318530718*(c*(t) + d)));\n}\n\nvec3 palette3( float t ) {\n    //by Inigo Quilez\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(2.0,1.5,1.0);\n    vec3 d = vec3(0.0,0.8,0.0);\n\n    return vec3(a + b*cos(6.28318530718*(c*(t) + d)));\n}\n\nvec3 palette4( float t ) {\n    //by Inigo Quilez\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(1.0,1.0,1.0);\n    vec3 d = vec3(0.0,0.1,0.2);\n\n    return vec3(a + b*cos(6.28318530718*(c*(t) + d)));\n}\n\nvec3 palette5 (float t)\n{\n    float value = 0.61;\n    vec3 a = vec3(value);\n    vec3 b = vec3(1.0-value);\n    vec3 c = vec3(2.0,1.0,1.0);\n    vec3 d = vec3(0.3,0.0,0.0);\n    \n    return (a + b*cos(TWOPI*(c*t + d)));\n}\n\nvec2 square(vec2 uv)\n{\n    return vec2(uv.x*uv.x - uv.y*uv.y, 2.0*uv.x*uv.y);\n}\n\nvec2 cube(vec2 uv)\n{\n    return vec2(uv.x*uv.x*uv.x - 3.0*uv.x*uv.y*uv.y , 3.0*uv.x*uv.x*uv.y - uv.y*uv.y*uv.y);\n}\n\nvec2 rotate(vec2 uv, float angle)\n{\n    float cosine = cos(angle); float sine = sin(angle);\n    return (vec2(cosine*uv.x - sine*uv.y, sine*uv.x + cosine*uv.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}