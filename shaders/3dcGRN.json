{
    "Shader": {
        "info": {
            "date": "1567872421",
            "description": "Using separable functions to aproximate lens blur.\n\nConvoluted one: https://www.shadertoy.com/view/wdtGRH\n2 component version: https://www.shadertoy.com/view/3scGRN\nIdea taken from: youtu.be/vNG3ZAd8wCc and http://yehar.com/blog/?p=1495",
            "flags": 32,
            "hasliked": 0,
            "id": "3dcGRN",
            "likes": 3,
            "name": "Separable Lens Blur(1 component)",
            "published": 3,
            "tags": [
                "blur",
                "complex",
                "lensblur",
                "separable"
            ],
            "usePreview": 0,
            "username": "Txoka",
            "viewed": 634
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){  \n    #ifdef BLUR\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 o=vec3(0);\n    vec3 s1;\n    vec3 s2;\n    vec2 r;\n    vec2 g;\n    vec2 b;\n    vec2 n;\n    for(int i=-CONV_SIDE;i<=CONV_SIDE;i++){\n        s1=col(iChannel0,uv+vec2(0,i)/iResolution.y);\n        s2=col(iChannel1,uv+vec2(0,i)/iResolution.y);\n        r=vec2(s1.r,s2.r);\n        g=vec2(s1.g,s2.g);\n        b=vec2(s1.b,s2.b);\n        n=vec2(comp0_conv_real(STEP*float(i)),comp0_conv_imag(STEP*float(i)));\n        r=cMul(r,n);\n        g=cMul(g,n);\n        b=cMul(b,n);\n        o+=vec3(r.x,g.x,b.x)*weight_real+vec3(r.y,g.y,b.y)*weight_imag;\n    }\n    \n    fragColor = vec4(o/AREA,1.0);\n    \n    #else\n    vec2 uv = (fragCoord-vec2(iResolution.y/2.,0))/iResolution.y;\n    fragColor=vec4(BriSp(texture(iChannel2,uv).rgb),1);\n    \n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define BLUR\n#define BRIGHT_SPOTS\nconst float pi=4.*atan(1.);\n\nconst int CONV_SIDE=10; //20 (bigger blur and performance comparation with convoluted one)\nconst float BLUR_RADIUS=10.; //20 (bigger blur and performance comparation with convoluted one)\nconst float BRIGHT_SPOT_TRESHOLD=0.5;\n\nfloat AREA=min(pi*BLUR_RADIUS*BLUR_RADIUS,float(4*CONV_SIDE*CONV_SIDE));\nconst float STEP=1.13/BLUR_RADIUS;\n\nvec3 BriSp(vec3 p){\n    #ifdef BRIGHT_SPOTS\n    if(p.x+p.y+p.z>BRIGHT_SPOT_TRESHOLD*3.)p=(1./(1.-p)-1.)*(1.-BRIGHT_SPOT_TRESHOLD);\n    p=clamp(p,0.,10.);\n\t#endif\n    return p;\n}\n\nfloat weight_real=0.767583;\nfloat weight_imag=1.862321;\n\nfloat comp0_conv_real(float x){\n\treturn cos(1.624835*x*x)*exp(-0.862325*x*x);\n}\n\nfloat comp0_conv_imag(float x){\n\treturn sin(1.624835*x*x)*exp(-0.862325*x*x);\n}\n\nvec2 cMul(vec2 a,vec2 b){\n    return vec2(\n        a.x*b.x-a.y*b.y,\n        a.x*b.y+b.x*a.y\n    );\n}\n\nvec3 col(sampler2D sampler,vec2 p){\n\treturn texture(sampler,p).rgb;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord-vec2(iResolution.y/2.,0))/iResolution.y;\n    \n    vec3 o=vec3(0);\n    for(int i=-CONV_SIDE;i<=CONV_SIDE;i++){\n    \to+=BriSp(col(iChannel0,uv+vec2(i,0)/iResolution.y))*comp0_conv_real(STEP*float(i));\n    }\n    fragColor = vec4(o,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord-vec2(iResolution.y/2.,0))/iResolution.y;\n    \n    vec3 o=vec3(0);\n    for(int i=-CONV_SIDE;i<=CONV_SIDE;i++){\n    \to+=BriSp(col(iChannel0,uv+vec2(i,0)/iResolution.y))*comp0_conv_imag(STEP*float(i));\n    }\n    fragColor = vec4(o,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}