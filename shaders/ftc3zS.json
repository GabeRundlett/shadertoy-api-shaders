{
    "Shader": {
        "info": {
            "date": "1636224832",
            "description": "https://en.wikipedia.org/wiki/Collatz_conjecture\n\nin this variant we display the \"orbit hair\" of each value (in first line of buffA) as curve which step turn left for evens and right for odds. see https://community.wolfram.com/groups/-/m/t/558256",
            "flags": 32,
            "hasliked": 0,
            "id": "ftc3zS",
            "likes": 25,
            "name": "Syracuse problem / Collatz con 4",
            "published": 3,
            "tags": [
                "collatzconjecture",
                "syracuseproblem",
                "ulamconjecture",
                "hailstonesequence"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 541
        },
        "renderpass": [
            {
                "code": "// fixing https://shadertoy.com/view/fl3GzS\n// variant of https://shadertoy.com/view/Nlc3RS\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n        O = T(U/1.);\n        if ( iMouse.z > 0.) O =  texelFetch(iChannel1, ivec2(U),0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- compute the Collatz sequence\n\n/*\nvec3 ihash( uvec3 x ) {              // quality interger hash from https://www.shadertoy.com/view/XlXcW4\nconst uint k = 1103515245U;  // GLIB C\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    return vec3(x) / float(0xffffffffU);\n}\n#define hash(p)   ihash(uvec3(U.x,U.x*11.,U.x+717.)).x\n*/\n\n#define hash(p)  fract(sin( (p) *  78.233 ) * 43758.5453) // old school hash\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;\n    if (U.y > 0.) return;            // we simulates only 1st line \n    \n    if (iFrame==0) {                 // --- initialization\n        O = vec4(0);\n     // O.x = U.x + U.y*R.x;         // each pixel represent one integer\n        O.a = O.x = floor(1e5*hash(U.x));\n        return;\n    }\n                                     // --- Syracuse steps\n    O = T(U);                        // previous state\n    int i = int(O.x+.5);\n    if ( i==1 ) { O.y++; return; }   // already converged ( O.y counts after converged )\n    \n    i   = i/2*2==i ? i/2 : 3*i+1;    // hearth of the model\n    O.x = float(i);                  // store current value\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R    iResolution.xy\n#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// --- store the whole sequence\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = int(U.y)==iFrame  ? texelFetch(iChannel1, ivec2(U.x,0),0)\n                          : T(U);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// --- draw the AnglePath orbit of the reversed sequence \n//     see see https://community.wolfram.com/groups/-/m/t/558256\n\nfloat line(vec2 p, vec2 a,vec2 b) {           // --- draw line\n    p -= a, b -= a;\n    float h = dot(p, b) / dot(b, b),\n          c = clamp(h, 0., 1.);\n    p -= b*h;\n    return h==c ? dot(p,p) : 1e5; \n // return dot(p,p);                          // with round ends\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = texelFetch( iChannel1, ivec2(U), 0 ); // previous image\n    vec2 P, _P;\n    if ( iFrame > int(R.y) ) return;          // drawing finished\n\n    float d = 99.,x, a,r, z = R.y/7.;\n    U = ( U - vec2(.1,.45)*R ) / z ;\n    \n    for ( x=0.; x < min(R.x,640.); x++ ) {    // for each simulated number\n        vec4 T = T(vec2(x,iFrame));           // last record\n        if ( T.y != 1. ) continue;            // draw curve when sequence just finished\n        a = 0.; P = vec2(0); r = .05; // r = 300.*pow(T.a,-1.2);\n        for ( int i,t = iFrame; t >= 0; t-- )  { // for each value in the sequence\n            _P = P;\n            T = T(vec2(x,t)); i = int(T.x+.5);// current value in the reversed sequence\n            a += i/2*2==i ? .14 : -.26;       // AnglePath from the sequence:\n            P += vec2(cos(a),sin(a)) * r;     // curve turns left it even or right if odd\n            d = min(d, line(U,_P,P) );        // draw current hair segment\n        }\n    }\n    O += .2* smoothstep(1.5,0.,sqrt(d) *z ) * vec4(.5,.7,1,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}