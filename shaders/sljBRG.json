{
    "Shader": {
        "info": {
            "date": "1652429153",
            "description": "I can feel his sour sweet taste",
            "flags": 0,
            "hasliked": 0,
            "id": "sljBRG",
            "likes": 31,
            "name": "Glass Candy",
            "published": 3,
            "tags": [
                "abstract"
            ],
            "usePreview": 1,
            "username": "leon",
            "viewed": 652
        },
        "renderpass": [
            {
                "code": "\n// Glass Candy by Leon Denise 2022/05/13\n// Using code from Inigo Quilez, Antoine Zanuttini and many more\n\n// A classic kaleidoscopic iterated function with spheres\n// I was playing with reflections and inversed the ray and normal for curiosity\n// It gave a funky fake refraction that was fun to play with\n\nconst float falloff = 1.2;\nconst float size = .5;\nconst float range = 1.1;\n\nfloat colorOffset;\n\nmat2 rot (float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\n// signed distance function\nfloat map(vec3 p)\n{\n    float d = 100.;\n    float s = 100.;\n    float a = 1.;\n    float t = 196.+iTime * .1;\n    for (float i = 0.; i < 12.; ++i)\n    {\n        p.x = abs(p.x)-range*a;\n        p.xz *= rot(t/a);\n        p.yx *= rot(t/a);\n        s = length(p)-size*a;\n        colorOffset = s < d ? i : colorOffset;\n        d = min(d, s);\n        a /= falloff;\n    }\n    \n    return d;\n}\n\n// Antoine Zanuttini\n// https://www.shadertoy.com/view/3sBGzV\nvec3 getNormal (vec3 pos)\n{\n    vec2 noff = vec2(0.001,0);\n    return normalize(map(pos)-vec3(map(pos-noff.xyy), map(pos-noff.yxy), map(pos-noff.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinates\n    vec2 uv = (fragCoord.xy - iResolution.xy / 2.)/iResolution.y;\n    vec3 noise = texture(iChannel0, fragCoord.xy/1024.).rgb;\n    vec3 ray = normalize(vec3(uv, 1));\n    vec3 pos = vec3(0,0,-3);\n    \n    // init variables\n    vec3 color, normal, tint;\n    float index, shade, light;\n    const float count = 25.;\n    colorOffset = 0.;\n\n    // ray marching\n    for (index = count; index > 0.; --index)\n    {\n        float dist = map(pos);\n        if (dist < .001) break;\n        dist *= .9+.1*noise.z;\n        pos += ray*dist;\n    }\n    \n    // lighting\n    shade = index/count;\n    normal = getNormal(pos);\n    light = pow(dot(reflect(ray, normal), vec3(0,1,0))*.5+.5, 4.);\n    light += pow(dot(normal, ray)*.5+.5, .5);\n    color = vec3(.5) * shade * light;\n    \n    // ray bouncing (where the funky stuff happens)\n    ray = reflect(normal, ray); // should be ray = reflect(ray, normal);\n    pos += ray * (.2+.19*sin(iTime*2.+length(uv)*6.)); // jumpy bounce\n    for (index = count; index > 0.; --index)\n    {\n        float dist = map(pos);\n        if (dist < .001) break;\n        dist *= .9+.1*noise.z;\n        pos += ray*dist;\n    }\n\n    // coloring\n    normal = getNormal(pos);\n    light = pow(dot(normal, ray)*.5+.5, 1.);\n    tint = .5+.5*cos(vec3(0,.3,.6)*6.+colorOffset*2.+pos.y*2.+light);\n    color += tint * shade * index/count * (noise.r*.3+.7);\n\n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}