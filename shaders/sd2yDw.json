{
    "Shader": {
        "info": {
            "date": "1643643307",
            "description": "With the opening of the new expansive Egyptian Antiquities Museum the curator was worried it may look empty for the grand opening. A quick trip to the Pottery Barn the night before and problem solved.",
            "flags": 8,
            "hasliked": 0,
            "id": "sd2yDw",
            "likes": 22,
            "name": "Pottery Barn",
            "published": 3,
            "tags": [
                "soc",
                "pots"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 389
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define size iResolution\n\nfloat pixelSize,focalDistance,aperture,fudgeFactor=0.6,shadowCone=0.5;\nmat2 rmat(float a){float sa=sin(a),ca=cos(a);return mat2(ca,sa,-sa,ca);}\nvec4 mcol=vec4(0);\nfloat rnd(float t){return fract(sin(t)*431.341);}\nfloat handle(vec3 p, float r){\n  if(r>.85)p.x=abs(p.x);else if(r>.6)p.x=-p.x;\n  p.x-=.11+r*.05;\n  p.y-=r*.4;\n  return length(vec2(length(p.xy)-.05,p.z))-0.005;\n}\nfloat vase(vec3 p){\n  float r=rnd(floor(p.x));\n  p.x=fract(p.x)-.5-r*.05;\n  p.z+=r*.2;\n  float m=length(p.xz);\n  float d=m-.1-sin(p.y*(3.+r*6.)-1.+r)*r*.08;\n  if(r<.1){\n    float t=(p.x+p.z)*20.,t0=fract(t);t=floor(t+r*100.);\n    d=m-.1-mix(rnd(t),rnd(t+1.),t0)*0.1;\n    r=.05;p.x+=r*100.;\n    p.y+=0.001*(sin(p.z*200.)+sin(p.x*30.+6.*sin(p.z*90.)));\n  }else if(r<.2){\n    d=max(abs(p.x)-.09-p.z*.3,abs(p.z)-.3);\n    r=.05;\n    p.y+=abs(p.x*.5)+(p.z>0.05?0.02:0.0);\n  }else if(r<.25){\n    d=min(abs(m-.065)-0.005,min(max(abs(p.x)-0.005-p.z*p.z*.4,abs(p.z+.15)-.1),max(abs(p.x)-0.1,abs(p.z+.06)-0.005-p.x*p.x)));\n    r=.05;\n  }else{\n    if(r<.4){\n      d=mix(d,m-.03,clamp(p.y*p.y*20.,0.,1.));r+=.4*fract(r*10.);\n    }else if(fract(r*100.)<.5){\n      d=min(d,handle(p,r));\n    }\n    d=abs(d)-0.01;\n  }\n  return max(abs(p.y)-r*.75,d);\n}\nfloat DE(in vec3 p){//vases\n float dW=1.-p.z,dF=max(-.6-p.z,p.y+.01);\n float dS=min(vase(p+vec3(10.5,0.,0.)),vase(p));\n float d=min(dS,min(dW,dF));\n if(mcol.x>0.){\n   if(d==dS){\n     float r=rnd(floor(p.x+.25));\n     float b=sign(sin(p.y*5.*r*6.*cos(p.y*17.*r)))*.5+.5;\n     if(r>.25 && r<.5 && fract(p.x*10.)>fract(p.z*10.))b=1.-b;\n     mcol+=vec4((.5+abs(sin(p*10.))*.5)*b,.25+.25*b);\n   }else if(d==dW)mcol.rgb+=vec3(0.8);else mcol+=vec4(.6,.6,.6,.2);\n }\n return d; \n}\nfloat DEL(in vec3 p){//lights\n p.x=abs(fract(p.x+.25)-.5);p.z-=.5;p.y-=1.;\n return length(p)-.01;\n}\n\nfloat CircleOfConfusion(float t){//calculates the radius of the circle of confusion at length t\n return max(abs(focalDistance-t)*aperture,pixelSize*(1.0+t));\n}\nmat3 lookat(vec3 fw,vec3 up){\n fw=normalize(fw);vec3 rt=normalize(cross(fw,up));return mat3(rt,cross(rt,fw),fw);\n}\nfloat linstep(float a, float b, float t){return clamp((t-a)/(b-a),0.,1.);}// i got this from knighty and/or darkbeam\n//random seed and generator\nvec2 randv2;\nfloat rand2(){// implementation derived from one found at: lumina.sourceforge.net/Tutorials/Noise.html\n randv2+=vec2(1.0,1.0);\n return fract(sin(dot(randv2 ,vec2(12.9898,78.233))) * 43758.5453);\n}\nfloat FuzzyShadow(vec3 ro, vec3 rd, float lightDist, float coneGrad, float rCoC){\n float t=0.01,d=1.0,s=1.0;\n for(int i=0;i<4;i++){\n  if(t>lightDist)break;\n  float r=rCoC+t*coneGrad;//radius of cone\n  d=DE(ro+rd*t)+r*0.66;\n  s*=linstep(-r,r,d);\n  t+=abs(d)*(0.8+0.2*rand2());\n }\n return clamp(s,0.0,1.0);\n}\nvec3 bg(vec3 rd){\n  float d=max(0.,rd.x+rd.y+rd.z);\n  return vec3(d*d*.25)+rd*.05;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n randv2=fract(cos((fragCoord.xy+fragCoord.yx*vec2(100.0,100.0))+vec2(time)*10.0)*1000.0);\n pixelSize=1.0/size.y;\n float tim=time*0.1;//camera, lighting and object setup\n vec3 ro=vec3(iTime,vec2(1.5,-2.)*(.85+.5*sin(iTime*.1))); \n vec3 rd=lookat(vec3(iTime+1.,0.,0.)-ro,vec3(0.0,1.0,0.0))*normalize(vec3((2.0*gl_FragCoord.xy-size.xy)/size.y,2.0)); \n focalDistance=min(length(ro)+0.001,1.0);\n aperture=0.007*focalDistance;\n vec3 rt=normalize(cross(vec3(0,1,0),rd)),up=cross(rd,rt);//just need to be perpendicular\n vec3 lightColor=vec3(1.0,0.5,0.25)*2.0;\n vec4 col=vec4(0.0);vec3 blm=vec3(0);//color accumulator, .w=alpha, bloom accum\n float t=0.0,mld=100.0,od,d0=1.,d,old,ld=100.,dt=0.,ot;//distance traveled, minimum light distance\n for(int i=1;i<72;i++){//march loop\n  if(col.w>0.9 || t>15.0)break;//bail if we hit a surface or go out of bounds\n  float rCoC=CircleOfConfusion(t);//calc the radius of CoC\n  od=d0;old=ld,dt=t-ot;ot=t;//save old distances for normal, light direction calc\n  d0=DE(ro+rd*t);\n  d=d0+0.33*rCoC;\n  ld=DEL(ro+rd*t);//the distance estimate to light\n  mld=min(mld,ld);//the minimum light distance along the march\n  if(d<rCoC){//if we are inside the sphere of confusion add its contribution\n   vec3 p=ro+rd*(t-dt);//back up to previos checkpoint\n   mcol=vec4(0.01);//collect color samples with normal deltas\n   float Drt=DE(p+rt*dt),Dup=DE(p+up*dt);\n   vec3 N=normalize(rd*(d0-od)+rt*(Drt-od)+up*(Dup-od));\n   if(N!=N)N=-rd;//if no gradient assume facing us\n   Drt=DEL(p+rt*old);Dup=DEL(p+up*old);\n   vec3 L=-normalize(rd*(DEL(p+rd*old)-old)+rt*(Drt-old)+up*(Dup-old));\n   float lightStrength=1.0/(1.0+ld*ld*20.0);\n   if(L!=L)L=up;\n   vec3 scol=mcol.rgb*(0.4*(1.0+dot(N,L)+.2))*lightStrength;//average material color * diffuse lighting * attenuation\n   scol+=mcol.a*pow(max(0.0,dot(reflect(rd,N),L)),8.0)*lightColor;//specular lighting\n   mcol=vec4(0);//clear the color accumulator before shadows\n   scol*=FuzzyShadow(p,L,ld,shadowCone,rCoC);//now stop the shadow march at light distance\n   blm+=lightColor*exp(-mld*t*10.)*(1.0-col.w);//add a bloom around the light\n   mld=100.0;//clear the minimum light distance for the march\n   float alpha=fudgeFactor*(1.0-col.w)*linstep(-rCoC,rCoC,-d);//calculate the mix like cloud density\n   col=vec4(col.rgb+scol*alpha,clamp(col.w+alpha,0.0,1.0));//blend in the new color \n  }//move the minimum of the object and light distance\n  d=abs(fudgeFactor*min(d,ld+0.33*rCoC)*(0.8+0.2*rand2()));//add in noise to reduce banding and create fuzz\n  t+=d;\n }//mix in background color and remaining bloom\n t=min(15.,t);\n blm+=lightColor*exp(-mld*t*10.)*(1.0-col.w);///(1.0+mld*mld*3000.0\n col.rgb=mix(col.rgb,bg(rd),t/15.);\n fragColor = vec4(clamp(col.rgb+blm,0.0,1.0),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define bps 5.0 \nfloat rnd(float t){return fract(sin(mod(t,32.123)*32.123)*41.123);} \nvec2 nofs(float n){//the song's \"random\" ring \n  float r=0.5+0.5*rnd(floor(n));//random volume as well \n  n=mod(n,8.0); \n  if(n<1.0)n= 0.0; \n  else if(n<2.0)n= 2.0; \n  else if(n<3.0)n= 3.0; \n  else if(n<4.0)n= 4.0; \n  else if(n<5.0)n= 5.0; \n  else if(n<6.0)n= 3.0; \n  else if(n<7.0)n= 2.0; \n  else n=0.0;\n  return vec2(n,r); \n}\nfloat scale(float note){//throws out dissonant tones \n float n2=mod(note,12.); \n if((n2==2.)||(n2==3.)||(n2==6.)||(n2==9.)||(n2==11.))note=-100.;//Phrygian Major \n return note; \n} \n// note number to frequency  from https://www.shadertoy.com/view/ldfSW2 \nfloat ntof(float n){return (n>0.0)?440.0 * pow(2.0, (n - 67.0) / 12.0):0.0;} \nconst float PI=3.14159; \nfloat Cos(float a){return cos(mod(a,PI*2.));} \nfloat Sin(float a){return Cos(a+PI/2.);} \nstruct instr{float att,fo,vibe,vphas,phas,dtun;}; \nvec2 I(float n,float t,float bt,instr i){//note,time,bt 0-8,instrument \n float f=ntof(scale(n));if(f<12.)return vec2(0.0);f-=bt*i.dtun;f*=t*PI*2.; \n f=exp(-bt*i.fo)*(1.0-exp(-bt*i.att))*Sin(f+Cos(bt*i.vibe*PI/8.+i.vphas*PI/2.)*Sin(f*i.phas))*(1.0-bt*0.125); \n n+=t;return vec2(f*Sin(n),f*Cos(n));\n} \nvec2 mainSound(int samp, float time){//att,fo,vibe,vphs,phs,dtun\n instr epiano=instr(50.0,0.05,1.5,0.1,2.525,0.003);//silly fm synth instruments \n instr sitar=instr(2.0,.2,12.0,0.0,0.525,0.0025); \n instr bassdrum=instr(500.0,1.0,4.0,0.76,1.0,0.5); \n instr stick=instr(500.0,1.0,10.5,0.0,2.3131,1000.0); \n instr pluckbass=instr(500.0,2.0,1.5,0.0,0.125,0.005); \n instr bass=instr(20.0,0.2,2.0,0.0,0.5,0.005); \n float tim=time*bps,b0,b1,b2,t0,t1,t2; \n vec2 a=vec2(0.0);//accumulator \n for(float i=0.;i<8.;i+=1.){//go back 8 beats and add note tails \n   b0=floor(tim);b1=floor(tim*0.5);b2=floor(tim*0.25); \n   vec2 n2=nofs(b2*0.0625)+nofs(b2*0.25)+nofs(b2);//build notes on top of notes like fbm \n   vec2 n1=n2+nofs(b1),n0=n2+nofs(b0); \n   t0=fract(tim)+i; \n   a+=I(n0.x+60.0,time,t0,sitar)*n0.y/(1.+abs(n0.x)*.25);\n   if(mod(i,1.)<1.){\n     a+=I(n0.x+93.0,time+Sin(t0*372.0),t0,stick)*n0.y*.1*cos(t0*6.);\n     a+=I(n0.x+79.0,time,t0,sitar)*n0.y/(3.+abs(n0.x+7.));\n     a+=I(n0.x+84.0,time,t0,sitar)*n0.y/(3.+abs(n0.x+7.));\n   } \n   if(mod(i,2.)<1.){//notes that play every 2 beats \n     t1=fract(tim*0.5)*2.0+i;\n     a+=I(n1.x+53.,time,t1,epiano)*n1.y*.1; \n     a+=I(n1.x+52.,time,t1,epiano)*n1.y*.1; \n     a+=I(n1.x+48.,time,t1,epiano)*n1.y*.1; \n     //a+=I(n1.x+36.0,time,t1,pluckbass)*n1.y*4.0;\n     a+=I(n1.x+32.0,t1/bps+0.008*sin(t1*3.0),t1,bassdrum)*2.0;\n     a+=I(n2.x+31.0,t1/bps+0.008*sin(t1*2.0),t1,bassdrum)*2.0;\n     if(mod(i,4.)<1.){//every 4 \n       t2=fract(tim*0.25)*4.0+i;\n       a+=I(n2.x+48.0,time,t2,bass)*n2.y;\n       a+=I(n2.x+52.0,time,t2,bass)*n2.y;\n       //a+=I(96.0,time,t2,stick)*n2.y*.25;   \n     } \n   } \n   tim-=1.;//go back in time to find old notes still decaying \n } \n return clamp(a/48.0,-1.,1.); \n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}