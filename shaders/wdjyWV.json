{
    "Shader": {
        "info": {
            "date": "1587414470",
            "description": "Use mouse to move camera (works when paused).",
            "flags": 0,
            "hasliked": 0,
            "id": "wdjyWV",
            "likes": 11,
            "name": "Font SDF fun",
            "published": 3,
            "tags": [
                "font"
            ],
            "usePreview": 0,
            "username": "TekF",
            "viewed": 522
        },
        "renderpass": [
            {
                "code": "// Font SDF Fun\n\n// The MIT License\n// Copyright Â© 2020 Hazel Quantock\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n//vec4 bgTint = vec4(1); vec4 fgTint = vec4(1);\nvec4 bgTint = vec4(.1,.3,1,1); vec4 fgTint = vec4(1,.9,.2,1); // retro game-show colours!\n\n\n// use better filtering to clean up the font texture, so I can get cleaner isosurfaces which I can use for fancy effects\n\n// bicubic filter by IQ\nvec4 BS_A = vec4(   3.0,  -6.0,   0.0,  4.0 ) /  6.0;\nvec4 BS_B = vec4(  -1.0,   6.0, -12.0,  8.0 ) /  6.0;\nvec4 RE_A = vec4(  21.0, -36.0,   0.0, 16.0 ) / 18.0;\nvec4 RE_B = vec4(  -7.0,  36.0, -60.0, 32.0 ) / 18.0;\nvec4 CR_A = vec4(   3.0,  -5.0,   0.0,  2.0 ) /  2.0;\nvec4 CR_B = vec4(  -1.0,   5.0,  -8.0,  4.0 ) /  2.0;\n        \nvec4 powers( float x ) { return vec4(x*x*x, x*x, x, 1.0); }\n\nvec4 ca, cb;\n\nvec4 spline( float x, vec4 c0, vec4 c1, vec4 c2, vec4 c3 )\n{\n    // We could expand the powers and build a matrix instead (twice as many coefficients\n    // would need to be stored, but it could be faster.\n    return c0 * dot( cb, powers(x + 1.0)) + \n           c1 * dot( ca, powers(x      )) +\n           c2 * dot( ca, powers(1.0 - x)) +\n           c3 * dot( cb, powers(2.0 - x));\n}\n\n// I've removed the +0.5 so it samples between the pixels, effectively adding a 2x2 box filter\n// this improves the precision of the distance field value, which otherwise have really bad stepping\n// this helps, but diagonal lines still look a bit wobbly\n#define SAM(a,b)  texture(iChannel0, (i+vec2(float(a),float(b)) /*+0.5*/)/res, -99.0)\n\nvec4 texture_Bicubic( sampler2D tex, vec2 t )\n{\n    vec2 res = iChannelResolution[0].xy;\n    vec2 p = res*t - 0.5;\n    vec2 f = fract(p);\n    vec2 i = floor(p);\n\n    return spline( f.y, spline( f.x, SAM(-1,-1), SAM( 0,-1), SAM( 1,-1), SAM( 2,-1)),\n                        spline( f.x, SAM(-1, 0), SAM( 0, 0), SAM( 1, 0), SAM( 2, 0)),\n                        spline( f.x, SAM(-1, 1), SAM( 0, 1), SAM( 1, 1), SAM( 2, 1)),\n                        spline( f.x, SAM(-1, 2), SAM( 0, 2), SAM( 1, 2), SAM( 2, 2)));\n}\n\nvec4 SmoothTexture( sampler2D tex, vec2 uv )\n{\n    // bilinear\n//    return texture( tex, uv );\n    \n    // bicubic\n    \n    //ca=RE_A; cb=RE_B;\n    //ca=CR_A; cb=CR_B;\n    ca=BS_A; cb=BS_B; // this gives the smoothest result\n\n    return texture_Bicubic( tex, uv );\n}\n\nfloat LetterSDF( vec3 pos, int letter, int seed )\n{\n    // animate parameters\n    vec4 quasi4 = vec4( 0.856674883854, 0.733891856627, 0.628706721038, 0.538597257224 );\n    vec4 rand = fract(quasi4*float(seed));\n    \n    float rounding = mix( .0, .2, rand.z*rand.z );\n    float thickness = max(rounding, mix( .05, .2, rand.y*rand.y ) );\n    float fatness = .1*rand.x-.02;\n    \n    // letter SDF with bounds\n    vec2 fontuv = pos.xy;\n    fontuv += vec2( letter&15, (letter>>4)&15 );\n    fontuv = (fontuv+.5)/16.;//+.5;\n    float boundValue = .15;\n    float f = boundValue + max(abs(pos.x),abs(pos.y)) - .5;\n    if ( f < boundValue )\n    {\n    \tvec4 font = SmoothTexture( iChannel0, fontuv );\n    \tf = min( boundValue, (font.w - .5) );\n    }\n    \n    f = (f - fatness + rounding)*1.0; // value tuned to make 45 degree angles look right\n\n    if ( rand.w > .5 )\n    {\n        // hard bevel\n        f = max( f, (abs(pos.z)-.13*(rand.w*2.-1.)+f)*.7071 );\n        f = max( f, abs(pos.z)-.13 );\n    }\n    else\n    {\n        // smooth curve\n        float o = abs(pos.z)-thickness+rounding;\n        if ( f > .0 && o > .0 ) f = length(vec2(f,o));\n        else f = max( f, o );\n        f -= rounding;\n    }\n        \n    return f\n        * 1.; // reduce this if there's artefacts from stepping near bounds (e.g. bottom of \"g\")\n}\n\n\nvec4 Sky( vec3 ray, float blur )\n{\n    // rotate BG\n    ray.xz = -ray.zx*sqrt(3./4.) + sqrt(1./4.)*vec2(-1,1)*ray.xz;\n\treturn textureLod( iChannel1, ray, blur*8. );\n}\n\n\nconst float tau = 6.283185;\n\nvec3 SphereRand( int seed )\n{\n\t// quasirandom numbers based on http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\n\t// expressed as fractions of 1<<32, so I get maximum precision and implicitly wrap them by overflowing the uint\n\tconst uvec2 quasi2 = uvec2( 3242174889, 2447445413 );\n\n    vec2 rand = vec2(quasi2*uint(seed+0x80000000))/exp2(32.);\n    \n    float height = rand.x * 2.-1.;\n    float angle = rand.y * tau;\n    \n    return vec3( height, sqrt(1.-height*height)*vec2( cos(angle),sin(angle) ) );\n}\n\n\n// quaternion maths\nvec4 AxisRotToQuat( vec3 axis, float angle )\n{\n    return vec4( axis*sin(angle/2.), cos(angle/2.) );\n}\n\nvec4 MulQ( vec4 a, vec4 b )\n{\n\treturn\n        vec4(\n        \t  a.x*b.w + a.y*b.z - a.z*b.y + a.w*b.x,\n        \t- a.x*b.z + a.y*b.w + a.z*b.x + a.w*b.y,\n        \t  a.x*b.y - a.y*b.x + a.z*b.w + a.w*b.z,\n        \t- a.x*b.x - a.y*b.y - a.z*b.z + a.w*b.w\n        );\n}\n\nvec4 InvQ( vec4 a )\n{\n    return vec4(-a.xyz,a.w);\n}\n\nvec3 RotateVecQ( vec4 rotation, vec3 vector )\n{\n\treturn MulQ( rotation, MulQ( vec4(vector,0), InvQ(rotation) ) ).xyz;\n}\n\n\nfloat SDF( vec3 pos )\n{\n    const float emissionRate = 2.5;\n    const float fallRate = 1.5;\n    const float spinRate = 2.;\n    \n    float t = iTime*emissionRate;\n    \n    float f = 1e30;\n    for ( int i=0; i<8; i++ )\n    {\n        int seed = i-int(floor(t));\n        vec3 uvw = pos;\n        \n        float fall = (fract(t)+float(i))*fallRate/emissionRate - 1.; // negative offsets to before peak of fall\n        uvw.y += fall*fall*.3-1.;\n        uvw.z += fall*.4;\n        uvw.x += fall*(fract(float(seed)*.618)-.5)*.5;\n        \n        // rotate randomly\n        vec3 axis = SphereRand(seed);\n        float angle = iTime*spinRate + float((seed*23)&32)*tau;\n        vec4 rot = AxisRotToQuat( axis, angle );\n        \n        uvw = RotateVecQ( rot, uvw );\n        \n    \tf = min( f, LetterSDF( uvw, (seed*157)&255, seed ) );\n    }\n\treturn f;\n}\n\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.xy/iResolution.xy;\n\n    if ( iMouse.x < 1. && iMouse.y < 1. )\n        mouse = vec2(.53,.8);\n    \n    mouse += sin(vec2(1,.618)*iTime*.3)*.01;\n    \n\tvec2 camAngle = (mouse-.5)*vec2(1.3,-.4999)*6.283185;\n    \n    vec3 camTarget = vec3(0);\n    float camDistance = 5.;\n    float camZoom = 1.;\n\n    vec3 camPos = camDistance*vec3(-vec2(sin(camAngle.x),cos(camAngle.x))*cos(camAngle.y),sin(camAngle.y)).xzy;\n    vec3 camK = normalize( camTarget-camPos );\n    vec3 camI = normalize(cross(vec3(0,1,0),camK));\n    vec3 camJ = cross(camK,camI);\n    \n    vec3 ray = normalize( vec3( (fragCoord-iResolution.xy*.5)/iResolution.x, camZoom ) );\n    ray = ray.x*camI + ray.y*camJ + ray.z*camK;\n\n    \n    float t = 0.;\n    float h = 1000.;\n    for ( int i=0; i < 100; i++ )\n    {\n        h = SDF(ray*t + camPos);\n        t += h;\n        if ( h < .001 || t > 8. )\n        {\n            break;\n        }\n    }\n    \n    if ( h >= .001 ) { fragColour = Sky(ray,0.)*bgTint; return; }\n    \n    vec3 pos = ray*t+camPos;\n    \n    vec2 d = vec2(-1,1)*.001;\n    vec3 normal =\n        normalize(\n            SDF(pos+d.xxx)*d.xxx +\n            SDF(pos+d.yyx)*d.yyx +\n            SDF(pos+d.yxy)*d.yxy +\n            SDF(pos+d.xyy)*d.xyy\n        );\n \n    vec3 reflectRay = reflect(ray,normal);\n    fragColour = Sky(reflectRay,max(0.,dot(reflectRay,ray))) * fgTint;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}