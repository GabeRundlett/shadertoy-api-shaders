{
    "Shader": {
        "info": {
            "date": "1643911188",
            "description": "Recommended to watch with this video:\n - https://youtu.be/Wl959QnD3lM\nTo watch, use OBS Virtual camera and drop saved video into program",
            "flags": 0,
            "hasliked": 0,
            "id": "7dByRt",
            "likes": 3,
            "name": "Old CRT television",
            "published": 3,
            "tags": [
                "crttelevisionoldretrotv"
            ],
            "usePreview": 0,
            "username": "symanth",
            "viewed": 311
        },
        "renderpass": [
            {
                "code": "// line_gap determines size of black lines\nconst float line_gap = 1.0; // px\n// line_size is visible height\nconst float line_size = 4.0; // px\n\n// parameters of ellipse\nconst float a = .6, b = .8;\n\n// function for laggy, noisy shift of image\nfloat noise(float x) {\n    return (sin(3.0*x)\n        + cos(8.0*x)\n        - cos(3.0 + 14.0 * x)\n        - sin(x * x / 2.0)\n    ) / 4.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.0 * fragCoord/ iResolution.xy - 1.0;\n\n    float len = 1.0 - (pow(abs(uv.x), 9.0) / a + pow(abs(uv.y), 3.0) / b);\n    \n    // uncomment for visible edges\n    // len = step(0.0, len);\n    \n    if (len > 0.0) {\n        vec4 intensity = vec4(len, len, len, 1.0);\n    \n        vec2 skew = vec2(0.0);\n        skew.x = smoothstep(0.7, 1.0, noise(iTime)) / 10.0;\n        \n        \n    \n        float modulo = line_gap + line_size;\n        if (mod(fragCoord.y + modulo / 2.0, modulo) >= line_gap) {\n            fragColor = texture(iChannel0, (uv + vec2(1.0))/2.0 + skew) * intensity;\n        } else {\n            fragColor = vec4(vec3(0.0), 1.0);\n        }\n    } \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}