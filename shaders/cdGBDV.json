{
    "Shader": {
        "info": {
            "date": "1698654868",
            "description": "A simple test that calculates an approximate SDF of a graph of a function to render it is a line of constant thickness with antialiasing.",
            "flags": 0,
            "hasliked": 0,
            "id": "cdGBDV",
            "likes": 3,
            "name": "Graph of constant thickness",
            "published": 3,
            "tags": [
                "line",
                "antialiasing",
                "graph"
            ],
            "usePreview": 0,
            "username": "Suslik",
            "viewed": 315
        },
        "renderpass": [
            {
                "code": "//an arbitrary function goes here\n//kind of breaks down for points with very high curvature and/or very thick lines\nfloat F(float x)\n{\n    x -= iResolution.x / 2.0f;\n    return x * sin(x / (iResolution.x / 40.0f)) / 2.0f + iResolution.y / 2.0f;\n}\n\nfloat GradF(float x)\n{\n    float eps = 1.0f; //in pixels\n    return (F(x + eps) - F(x - eps)) / (2.0f * eps);\n}\n\nfloat CosAng(float x)\n{\n    float tanAng = GradF(x);\n    float cosAng = sqrt(1.0f / (tanAng * tanAng + 1.0f));\n    return cosAng;\n}\n\nfloat DistF(vec2 xy)\n{\n    return abs(F(xy.x) - xy.y) * CosAng(xy.x);\n}\n\nfloat AALine(float dist, float width)\n{\n    return 1.0f - clamp((dist - width), 0.0f, 1.0f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float width = iResolution.x / 1000.0f * (sin(iTime * 3.0f) + 1.0f);\n    \n    float separator = iMouse.z > 0.5f ? iMouse.x : ((sin(iTime) * 0.5f + 0.5f) * iResolution.x);\n    fragColor = vec4(0.03f);\n    if(fragCoord.x < separator)\n    {\n        fragColor.rgb = mix(fragColor.rgb, vec3(1.0f), AALine(DistF(fragCoord.xy), width));\n    }else\n    {\n        fragColor.rgb = mix(fragColor.rgb, vec3(1.0f), AALine(abs(F(fragCoord.x) - fragCoord.y), width));\n    }\n    fragColor = mix(fragColor, vec4(0.0f, 1.0f, 0.0f, 1.0f), AALine(abs(fragCoord.x - separator), 0.5f));\n    fragColor.rgb = pow(fragColor.rgb, vec3(1.0f / 2.2f));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}