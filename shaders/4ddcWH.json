{
    "Shader": {
        "info": {
            "date": "1518725256",
            "description": "raymarching a sphere with a tweak",
            "flags": 32,
            "hasliked": 0,
            "id": "4ddcWH",
            "likes": 7,
            "name": "Sphere with normals plus tweak",
            "published": 3,
            "tags": [
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 582
        },
        "renderpass": [
            {
                "code": "#define PI acos( -1.0 )\n#define TPI 2.0 * PI\n\nvec2 polar( in vec2 uv )\n{\n    \n    float r = length( uv );\n    float the = atan( uv.x, uv.y );\n    \n    if( the < 0.0 ) the += TPI;\n\n\treturn vec2( r, the );\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy; // Output to screen\n    fragColor = texture( iChannel0, uv );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define EPS             0.0001\n#define STEPS             1028\n#define FAR             1000.0\n#define TPI acos( -1.0 ) * 2.0\n\nfloat map( vec3 p )\n{\n\n    float wav = texture( iChannel0, vec2( 0.0, 0.75 ) ).x;\n    float r = 2.0 + 0.15 * cos( 4.0 * p.z + sin( iTime * 5.0 + wav ) + iTime ) + cos( 5.0 * p.x + sin( iTime * 5.0 + wav ) ) * p.y * 0.1;\n    return length( p ) - r;\n    \n}  \n\nvec3 grad( vec3 p )\n{\n\n    vec2 q = vec2( EPS, 0.0 );\n    return vec3( map( p + q.yxx ) - map( p - q.yxx ),\n                 map( p + q.xyx ) - map( p - q.xyx ),\n                 map( p + q.xxy ) - map( p - q.xxy )\n    \t\t\t);\n\n}\n\nvec3 shade( vec3 ro, vec3 rd, float t )\n{\n    \n    return normalize( grad( ro + t * rd ) );\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord.xy ) / iResolution.y;\n\n    // Rays, origin and direction\n    \n    vec2 mouser = iMouse.xy / iResolution.xy;\n    \n    vec3 ro = vec3( 0.0 );\n    \n    if( mouser.x == 0.0 ) \n    {\n        \n        mouser = vec2( 0.5, 0.25 );\n        ro = 5.0 * vec3( sin( iTime * 0.2 ), 0.0, cos( iTime * 0.2 ) );\n    \n    }\n    \n    else \n    {\n    \n    \tro = 5.0 * vec3( sin( mouser.x * TPI ), 0.0, cos( -mouser.x * TPI ) );\n        \n    }\n    \n    vec3 ww = normalize( vec3( 0.0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0.0, 1.0, 0.0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n    //vec3 rd = normalize( vec3( uv, -1.0 ) );\n\n    // RayMarching loop\n    float t = 0.0; float d = EPS;\n    for( int i = 0; i < STEPS; ++i )\n    {\n        \n        d = 0.5 * map( ro + t * rd );\n        if( d < EPS || t > FAR ) break;\n        t += d;\n    \n    }\n    \n    // Shading\n    vec3 col = d < EPS ? shade( ro, rd, t ) : mix( vec3( 0.2, 0.3, 0.1 ), vec3( 0.1, 0.2, 0.2 ), length( uv ) );\n    \n    // Post processing\n    col = pow( col, vec3( 0.45 ) );\n    \n    \n    // Output to screen\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI acos( -1.0 )\n#define TPI 2.0 * PI\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float r = length( uv );\n    float the = atan( uv.x, uv.y );\n    \n    if( the < 0.0 ) the += TPI;\n    \n    vec2 pol = vec2( r, the );\n    \n\tvec3 col = texture( iChannel0, pol ).rgb;    \n    \n    fragColor = vec4(0.0,0.0,1.0,1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}