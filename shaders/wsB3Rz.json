{
    "Shader": {
        "info": {
            "date": "1547937690",
            "description": "I stream shader creation every Wednesday at 9pm UK time, over at [url]https://twitch.tv/lunasorcery[/url]\nCome and watch a show!\n\nOr watch the VOD for this shader here: [url]https://www.twitch.tv/videos/366635236[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wsB3Rz",
            "likes": 111,
            "name": "[twitch] Ink & Silver",
            "published": 3,
            "tags": [
                "raymarcher",
                "ink",
                "twitch"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 2535
        },
        "renderpass": [
            {
                "code": "/*\n\tThis shader was created live on stream!\n\tYou can watch the VOD here: https://www.twitch.tv/videos/366635236\n\n\tI use the Bonzomatic tool by Gargaj/Conspiracy:\n\thttps://github.com/Gargaj/Bonzomatic\n\n\tWednesdays around 9pm UK time I stream at https://twitch.tv/lunasorcery\n\tCome and watch a show!\n\n\t~yx\n*/\n\n#define pi (acos(-1.))\n#define tau (pi*2.)\n\nint mat;\n\nvec2 rotate(vec2 a, float b)\n{\n    float c=cos(b);\n    float s=sin(b);\n    return vec2(\n        a.x*c-a.y*s,\n        a.x*s+a.y*c\n    );\n}\n\nfloat field(vec3 p)\n{\n    float y = p.y+iTime + cos(p.x*2.)*.4 - cos(p.z*1.3)*.4;\n    float r = sin(y*.5)*.4;\n    p.y -= iTime*.5;\n    vec3 cell = p;\n    p = mod(p-.2,.4)-.2;\n    return length(p)-r;\n}\n\nfloat field2(vec3 p)\n{\n    float y = p.y+iTime + cos(p.x*2.)*.4 - cos(p.z*1.3)*.4;\n    float r = sin(y*.5)*1.1;\n    p.y -= iTime*.5;\n    vec3 cell = p;\n    p = mod(p-.5,1.)-.5;\n    return length(p)-r;\n}\n\nfloat outershape(vec3 p)\n{\n    return length(p)-3.;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nfloat tick(float t)\n{\n    t= fract(t);\n    t = smoothstep(0.,1.,t);\n    t = smoothstep(0.,1.,t);\n    return t;\n}\n\nfloat bettersign(float a)\n{\n    return step(0.,a)*2.-1.;\n}\n\nfloat cage(vec3 p)\n{\n    p.zx = rotate(p.zx, tick(iTime*.25)*sign(p.y)*pi*.5);\n\n    p=abs(p);\n    p.xy = vec2(max(p.x,p.y),min(p.x,p.y));\n    p.yz = vec2(max(p.y,p.z),min(p.y,p.z)).yx;\n    return max(\n        max(\n            length(p)-3.2,\n            3.15-length(p)\n        ),\n        abs(mod(p.y+tick(iTime*.25),1.)-.5)-.02\n    );\n}\n\nfloat scene(vec3 p)\n{\n    float ink = max(\n        outershape(p),\n        smin(\n            field(p),\n            field2(p),\n            0.1\n        )\n    );\n\n    float gold = cage(p);\n\n    if (ink<gold){\n        mat = 0;\n        return ink;\n    } else {\n        mat = 1;\n        return gold;\n    }\n}\n\nvec3 trace(vec3 cam, vec3 dir)\n{\n    vec3 accum=vec3(1);\n    int maxsteps = 100;\n    for (int b=0;b<5;++b){\n        float t= 0.;\n        float k=0.;\n        for(int i=0;i<100;++i){\n            k = scene(cam+dir*t);\n            t+=k;\n            if(abs(k)<.001||i>=maxsteps)\n                break;\n        }\n        vec3 h = cam+dir*t;\n        vec2 o = vec2(.001,0);\n        vec3 n = normalize(vec3(\n            scene(h+o.xyy)-scene(h-o.xyy),\n            scene(h+o.yxy)-scene(h-o.yxy),\n            scene(h+o.yyx)-scene(h-o.yyx)\n        ));\n\n        if (k > 10.) {\n            return accum*1.1;\n        }\n        else if (mat == 0) {\n            float f = pow(1.-dot(-dir,n),5.);\n            f = mix(.002,1.,f);\n            accum *= f;\n            cam = h + n * .01;\n            dir = normalize(reflect(dir, n));\n\n            // iter fog\n            //return vec3(float(i)/100.) * accum;\n        } else if (mat == 1) {\n            accum *= vec3(.9,.5,.1).yyy;\n            dir = normalize(reflect(dir, n));\n            cam = h + dir * .01;\n        }\n        maxsteps/=2;\n    }\n    return vec3(0);\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy - .5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 cam = vec3(0,0,-10);\n    vec3 dir = normalize(vec3(uv,1.2));\n\n    // alt camera\n    //dir = normalize(vec3(uv,1));\n    //dir.xz = rotate(dir.xz, -.15);\n    //dir.yz = rotate(dir.yz, .05);\n\n    cam.yz = rotate(cam.yz, pi/6.);\n    dir.yz = rotate(dir.yz, pi/6.);\n\n    cam.xz = rotate(cam.xz, pi/4.);\n    dir.xz = rotate(dir.xz, pi/4.);\n\n    out_color.rgb = trace(cam,dir);\n    out_color.rgb = pow(out_color.rgb, vec3(.45));\n    out_color *= 1.-dot(uv,uv)*.5;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}