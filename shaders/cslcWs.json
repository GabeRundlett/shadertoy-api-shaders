{
    "Shader": {
        "info": {
            "date": "1687315959",
            "description": "DEEP FAKE <3",
            "flags": 0,
            "hasliked": 0,
            "id": "cslcWs",
            "likes": 3,
            "name": "RAZZLE 0.333",
            "published": 3,
            "tags": [
                "sdf",
                "glitch",
                "bw",
                "stripes",
                "reza"
            ],
            "usePreview": 0,
            "username": "MacroMachines",
            "viewed": 152
        },
        "renderpass": [
            {
                "code": "// Fork of \"RAZZLE 0.33\" by MacroMachines. https://shadertoy.com/view/cdscWl\n// 2023-06-21 02:46:52\n\n// Fork of \"Space Puppy Zebra\" by reza. https://shadertoy.com/view/MscGWN\n// 2023-06-21 00:28:12\n\n// This is me stealing many many many things from IQ, THANK YOU IQ, YOU ARE THE BEST!!!\n// Really this is just a glitchy bastardization of ray marching a space puppy sphere\n// Then I put some strips on it, because why not right?\n\n#define TWO_PI 6.2831853072\n#define PI 3.14159265359\n#define HALF_PI 1.57079632679\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// \n\n\n\nfloat RIPPLES = 0.320;\nfloat MODAMT = 1.0;\nvec3 RIM = vec3( 0.10, -0.90, 0.950 );\nfloat kick = 0.0; \nfloat snare = 0.0;//pow(fract(iTime*0.5),6.) * 0.12*MODAMT;\n\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n  }\n\t\t\t\t\t\t\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n// First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n// Permutations\n  i = mod289(i); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n\n{\n    float modValue = snoise( vec4( 0.350 * normalize( p ), 0.05252 * iTime + kick) );\n    vec3 d = abs(p) - b;\n    float dd = min(max(d.x, max(d.y,d.z)), 0.0) + length(max(d,0.0));\n    dd += modValue;\n    return dd;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n\n\tfloat modValue = snoise( vec4( 1.0 * normalize( p ), 0.052 * iTime ) );\n    return length( p ) - ( s + 0.5 * modValue );\n\t// return length( p ) - s;\n}\n\nvec2 map( in vec3 pos )\n{\n    vec2 MAPP = vec2( sdSphere( pos, 1.0 ), 2.0 );\n    MAPP = vec2( sdBox( pos, vec3(0.50) ), 1.50 );\n    return MAPP;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 2.0;\n\n\tfloat precis = 0.1;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<1; i++ )\n    {\n\t    vec2 res = map( ro + rd*t );\n        if( res.x < precis || t > tmax ) break;\n        t += res.x;\n\t    \tm = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.5, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n    vec3 col = vec3( 0.0, 0.0, 0.0 );\n    vec2 res = castRay( ro, rd );\n    float t = res.x;\n\t\tfloat m = res.y;\n    if( m > -1.90 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = abs( calcNormal( pos ) );\n        col = vec3( 2.950 );\n        float rim = dot( RIM, nor );;\n        float value = cos( rim * TWO_PI * 40.0*RIPPLES );\n//        col *= value > 0.7 ? 1.0 : 0.0;\n        col *= smoothstep(.5,.51, value );\t// thank you @iapafoto!\n    }\n\treturn col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = uv;\n    vec2 p = -1.0 + 2.0 * q;\n\tp.x *= iResolution.x / iResolution.y;\n\n\n\n\t// camera\n    kick = pow(cos(iTime*PI),2.) * 0.12*MODAMT;\n    snare = pow(fract(iTime*0.25),2.) * 1.02*MODAMT;\n\tvec3 ro = vec3( 0.0, 0.0, -2.25+snare );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    ro *= setCamera(ro, ta, 0.0);\n    \n    \n    // ray direction\n\tvec3 rd = normalize( vec3( p.xy, 2.0 ) );\n    // render\n    vec3 col = render( ro, rd );\n\tcol = pow( col, vec3( 20 ) );\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}