{
    "Shader": {
        "info": {
            "date": "1702094318",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "dtKBWD",
            "likes": 8,
            "name": "Sky Projector",
            "published": 3,
            "tags": [
                "sky",
                "projection",
                "stars"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 179
        },
        "renderpass": [
            {
                "code": "float iSphere(in vec3 ro, in vec3 rd, in float r) {\n    float b = dot(ro, rd);\n    float c = dot(ro, ro) - r * r;\n    float dis = b * b - c;\n    if (dis < 0.0) return -1.0;\n    return -b - sign(c) * sqrt(dis);\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdStar(in vec2 p, in float r, in int n, in float m) {\n    float an = 3.141593 / float(n);\n    float en = 3.141593 / m; // m is between 2 and n\n    vec2 acs = vec2(cos(an), sin(an));\n    vec2 ecs = vec2(cos(en), sin(en)); // ecs = vec2(0, 1) for regular polygon\n    float bn = mod(atan(p.x, p.y), 2.0 * an) - an;\n    p = length(p) * vec2(cos(bn), abs(sin(bn)));\n    p -= r * acs;\n    p += ecs * clamp(-dot(p, ecs), 0.0, r * acs.y / ecs.y);\n    return length(p) * sign(p.x);\n}\n\n// https://www.shadertoy.com/view/4djSRW\nvec2 Hash22(in vec2 p) {\n    vec3 p3 = fract(p.xyx * vec3(0.1031, 0.103, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat skyMap(in vec2 p) {\n    vec2 cell = floor(p / 0.2) * 0.2;\n    p -= cell + Hash22(cell) * 0.1 + 0.05;\n    return step(sdStar(p, 0.01, 5, 3.0), 0.0);\n}\n\nfloat projection(in vec3 d) {\n    const float PI = 3.1415926536;\n    const float R = 1.0;\n\n    float rot = 0.1 * iTime;\n    float co = cos(rot), si = sin(rot);\n    d.xy *= mat2(co, -si, si, co);\n    d.xz *= mat2(co, -si, si, co);\n\n    vec2 p = d.xz;\n    float r = length(p);\n    p *= asin(r / R) * (2.0 * R * sqrt(2.0)) / (PI * r);\n\n    float sky = skyMap(p);\n    sky += skyMap(p * 2.0) * 0.5;\n    sky += skyMap(p * 4.0) * 0.25;\n    return sky;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 mouse = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n    if (iMouse.xy == vec2(0)) mouse = vec2(0.0);\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    vec3 projectorCenter = vec3(0.0, 1.0, 0.0);\n\n    vec3 ro = vec3(0.0, 2.0, 7.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    mouse *= 3.14;\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    float t = -1.0;\n    if (abs(rd.y) > 1e-6) {\n        t = -ro.y / rd.y;\n        vec3 p = ro + rd * t;\n        float sky = projection(normalize(p - projectorCenter));\n        fragColor.rgb = mix(vec3(0.001, 0.0, 0.01), vec3(1.0), vec3(sky));\n    }\n\n    ro -= projectorCenter;\n    float projector = iSphere(ro, rd, 1.0);\n    ro += projectorCenter;\n    if (projector > 0.0 && (t < 0.0 || projector < t)) {\n        t = projector;\n        vec3 p = ro + rd * t;\n        float sky = projection(normalize(p - projectorCenter));\n        fragColor.rgb = mix(vec3(0.0, 0.1, 0.02), vec3(5.0), vec3(sky));\n    }\n\n    float dome = iSphere(ro, rd, 20.0);\n    if (dome > 0.0 && (t < 0.0 || dome < t)) {\n        t = dome;\n        vec3 p = ro + rd * t;\n        float sky = projection(normalize(p - projectorCenter));\n        fragColor.rgb = mix(vec3(0.0, 0.0, 0.004), vec3(1.0), vec3(sky));\n        if (p.y < 0.0) t = -1.0;\n    }\n\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.4545));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}