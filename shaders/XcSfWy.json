{
    "Shader": {
        "info": {
            "date": "1725426984",
            "description": "waves",
            "flags": 0,
            "hasliked": 0,
            "id": "XcSfWy",
            "likes": 3,
            "name": "sep32024v4",
            "published": 3,
            "tags": [
                "popart"
            ],
            "usePreview": 0,
            "username": "brendanluu",
            "viewed": 70
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize pixel coordinates (preserve aspect ratio)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Grid settings\n    float gridSize = -38.0; // Number of squares in each row/column\n    float cellSize = 2.0 / gridSize;\n    vec2 cell = floor((uv + 1.0) / cellSize);\n    vec2 cellUV = fract((uv + 1.0) / cellSize) * 2.0 - 1.0;\n    \n    // Ensure cell coordinates wrap properly\n    cell = mod(cell, gridSize);\n    \n    // Calculate rotation angle (45 degrees every second, offset by cell position)\n    float timeOffset = cell.x + cell.y * gridSize;\n    float currentAngle = radians(45.0 * floor(iTime + timeOffset * 0.1));\n    float prevAngle = radians(45.0 * floor(iTime - 1.0 + timeOffset * 0.1));\n    \n    // Rotate UV coordinates for current and previous positions\n    float currentCos = cos(currentAngle);\n    float currentSin = sin(currentAngle);\n    float prevCos = cos(prevAngle);\n    float prevSin = sin(prevAngle);\n    \n    vec2 currentRotatedUV = vec2(\n        cellUV.x * currentCos - cellUV.y * currentSin,\n        cellUV.x * currentSin + cellUV.y * currentCos\n    );\n    vec2 prevRotatedUV = vec2(\n        cellUV.x * prevCos - cellUV.y * prevSin,\n        cellUV.x * prevSin + cellUV.y * prevCos\n    );\n    \n    // Define square\n    float squareSize = 0.71;\n    float currentSquare = float(max(abs(currentRotatedUV.x), abs(currentRotatedUV.y)) < squareSize);\n    float prevSquare = float(max(abs(prevRotatedUV.x), abs(prevRotatedUV.y)) < squareSize);\n    \n    // Calculate fade factor for trail (quicker fade)\n    float fadeFactor = smoothstep(0.0, 0.3, fract(iTime + timeOffset * 0.1));\n    float trail = prevSquare * (1.0 - fadeFactor);\n    \n    // Combine current square and trail\n    float finalSquare = max(currentSquare, trail);\n    \n    // Set color (black square on white background)\n    vec3 color = vec3(1.0 - finalSquare);\n    \n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}