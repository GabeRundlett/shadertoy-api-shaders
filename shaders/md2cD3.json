{
    "Shader": {
        "info": {
            "date": "1688291590",
            "description": "The Veil",
            "flags": 0,
            "hasliked": 0,
            "id": "md2cD3",
            "likes": 2,
            "name": "The Veil - TS",
            "published": 3,
            "tags": [
                "veil"
            ],
            "usePreview": 0,
            "username": "cnfrm",
            "viewed": 244
        },
        "renderpass": [
            {
                "code": "\n//Edit of https://www.shadertoy.com/view/MdVSWt#\n\n\nconst float dispValue = 1.;\nconst float dispOffset = .5;\nconst float sphereBaseRadius = .6;\nconst vec3 ld = vec3(.4,0.3,.0);\n\n\nfloat hash( vec3 p ) {\n    float h = dot(p,vec3(127.1,311.7,79.1));\t\n    return fract(sin(h)*43758.5453123);\n}\n\nvec3 rotateY(vec3 v, float t){\n    float cost = cos(t); float sint = sin(t);\n    return vec3(v.x * cost + v.z * sint, v.y, -v.x * sint + v.z * cost);\n}\n\nvec3 rotateX(vec3 v, float t){\n    float cost = cos(t); float sint = sin(t);\n    return vec3(v.x, v.y * cost - v.z * sint, v.y * sint + v.z * cost);\n}\n\n\nfloat noise( in vec3 p ) { // base noise\n\n    // iq 3d noise\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n    vec3 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    float v = mix( mix( mix( hash( i + vec3(0.,0.,0.) ), \n                             hash( i + vec3(1.,0.,0.) ), u.x),\n                        mix( hash( i + vec3(0.,1.,0.) ), \n                             hash( i + vec3(1.,1.,0.) ), u.x), u.y),\n                   mix( mix( hash( i + vec3(0.,0.,1.) ), \n                             hash( i + vec3(1.,0.,1.) ), u.x),\n                        mix( hash( i + vec3(0.,1.,1.) ), \n                             hash( i + vec3(1.,1.,1.) ), u.x), u.y),u.z); \n    \n    // bubble style\n    v = v * 2. - .5;    \n    float cv = abs(cos(v));    \n    float sv = abs(sin(v));    \n    v = mix(sv,cv,sv);\n    \n    return v;\n}\n\nfloat noiseLayer(vec3 p) { // layered noise\n        \n    float freq = 1.2; // base frequency / size\n    const int iter = 11; // iteration / depth\n    float lacunarity = 1.; // lacunarity: relative \"importance\" of smaller octaves\n    float v = 0.;\n    float sum = 0.;\n    for(int i = 0; i < iter; i++) {\n        float layerUp = 1. / pow(freq,lacunarity);\n        v += noise(p*freq) * layerUp;\n        sum += layerUp;\n        freq *= 1.8;\n    }\n    v /= sum;\n    return v;\n}\n\nfloat map(vec3 p){\n    \n    //rotate ball\n    p = rotateX(p,iMouse.y/100. + iTime/7.);\n    p = rotateY(p,iMouse.x/100. + iTime/7.); \n\n    // animate noise\n    float timeOffset = iTime/70.;\n    \n  \treturn noiseLayer(p+timeOffset) - dispOffset;  \n}\n\nvec3 calcNormal( in vec3 pos, float t ) // iq get normal\n{\n    vec2 eps = vec2( 0.005*t, 0.0 );\n\treturn normalize( vec3(\n           map(pos+eps.xyy) - map(pos-eps.xyy),\n           map(pos+eps.yxy) - map(pos-eps.yxy),\n           map(pos+eps.yyx) - map(pos-eps.yyx) ) );\n}\n\nfloat shadowRay(vec3 startP, vec3 lightDir){ // iq soft shadows \n    \n    float t = 0.0;\n    float shadowHardness = 10.;\n    float minD = 1.; // close-by distance \n    \n    for (int r = 0; r < 8; ++r){\n        \n        vec3 p = startP + vec3(t*lightDir.x,t*lightDir.y,t*lightDir.z) + normalize(startP)/shadowHardness; // safe offset\n        \n        vec3 pp = normalize(p) * sphereBaseRadius;                 \n        float sp = sphereBaseRadius + map(pp) * dispValue;\n        float d = length(p) - sp;\n        \n        minD = min(minD,d);        \n        if ( d < 0.0){  \n       \t\tbreak;   \n        }        \n        t += 0.08;\n    }    \n    return smoothstep(0.,1.0,minD*shadowHardness);\n}\n\nvec3 skyColor(vec2 uv, float minD){\n \n    float stars = ((1.-noiseLayer(vec3(uv*100.+iTime/40.,0.)))*10.-8. )*0.0f ;\n    \n    float stars2 = (((1.-noiseLayer(vec3(uv*30.+iTime/120.,3.)))*10.-8.8 )*0.0f);\n    \n    vec3 sky = max(0.,1.0) * vec3(0.,0.,0.);\n    sky += max(0.,0.02*10.) * vec3(0.39,0.31,0.35);\n    \n    float halo = (1.-length(uv*0.7)) * 2.;\n        \n    sky *= halo;\n    \n    minD = 1.-minD;\n    minD = pow(minD,3.)*.3;\n    \n    sky += minD * vec3 (0.78,0.79,0.8);\n    \n    return sky;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Ray from UV\n\tvec2 uv = fragCoord.xy * 2.0 / iResolution.xy - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 color = vec3(skyColor(uv,0.));\n    float minD = 1.; // store minimum distance to make halo ;)\n    \n    float t = 0.0; // travelled distance\n    for (int r = 0; r < 16; ++r)\n    {\n        // current pos    \n        vec3 p = vec3(uv.x,uv.y,-2.+t) ;\n        \n        // sphere distance\n        vec3 pp = normalize(p) * sphereBaseRadius;                 \n        float sp = sphereBaseRadius + map(pp) * dispValue;\n        float d = length(p) - sp;\n\n        minD = min(minD,d);\n        \n        if ( d < 0.01) // if intersect\n        {   \n                        \n            float rayCount = float(r);\n            rayCount /= 16.;\n           \t// color = vec3(rayCount);\n                                    \n            // get normals\n            vec3 n = mix ( calcNormal(pp,0.1), calcNormal(pp,10.), .5);\n            \n            // main light / sun\n            float light1 = max(dot(n,-ld),.0) * 1.2;\n            if (light1 > 0.1){\n            \tlight1 *= shadowRay(p,ld);\n            }\n           \tlight1 += pow(light1,15.)/500.; // fake specular\n            \n            color = vec3(0.78,0.79,0.8) * light1;\n            \n            // secondary light / kick\n           \tcolor += max(dot(n,vec3(0.39,0.31,0.35)),.0) * .15 * vec3 (0.21,0.13,0.17);\n            \n            // lava incandescence\n            color += vec3(0.21,0.13,0.17) * pow(max(.0,-map(pp)+.2),3.) * 8. * max(.0,1.-n.z);\n            \n            // inverse ambient occ\n            color += pow(rayCount,3.) * vec3(0.81,0.49,0.6);  \n            \n            break;\n            \n            \n        }else if( t > 4.){  // if gone too far\n            \n            color = skyColor(uv,minD);\n            break;\n            \n        }\n        \n        t +=d;\n    }\n    \n        \n    fragColor = vec4(color, 1.);\n    \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}