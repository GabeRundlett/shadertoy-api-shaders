{
    "Shader": {
        "info": {
            "date": "1607088053",
            "description": "Move the mouse over the shape to see the effect.\nChange the variable Nshapes to have more nested circles.\nChange the color array cArray to have different colors.\nchange the constant values used in defining variable pos to experience other noise effect",
            "flags": 0,
            "hasliked": 0,
            "id": "WsGfWW",
            "likes": 2,
            "name": "Nested noisy circles",
            "published": 3,
            "tags": [
                "noise",
                "circles",
                "wave",
                "bilinear",
                "generativeart",
                "creativecoding"
            ],
            "usePreview": 0,
            "username": "AI",
            "viewed": 368
        },
        "renderpass": [
            {
                "code": "// pseudo-random function, returns value between [0.,1.]\nfloat rand (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(31.7667,14.9876)))\n                 * 833443.123456);\n}\n\n//bilinear value noise function\nfloat bilinearNoise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // four corners of a 2D square\n    float f00 = rand(i);\n    float f10 = rand(i + vec2(1.0, 0.0));\n    float f01 = rand(i + vec2(0.0, 1.0));\n    float f11 = rand(i + vec2(1.0, 1.0));\n\n    vec2 u = smoothstep(0.,1.,(1.-f));\n\treturn u.x*u.y*f00+(1.-u.x)*u.y*f10+\n    u.x*(1.-u.y)*f01+(1.-u.x)*(1.-u.y)*f11;    \n}\n\nfloat circle(in vec2 st, in float noise,in float radius){\n    float noiseStep=.05; //noise step size\n    float d=length(st+noiseStep*noise-vec2(.5));\n    return smoothstep(radius,radius-.01,d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 cArray[3]; //array holding colors\n    cArray[0]=vec3(1.,0.,0.);\n    cArray[1]=vec3(0.,1.,0.);\n\tcArray[2]=vec3(0.,0.,1.);\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\t\n    float Nshapes=1.; // number of shapes\n    vec2 f=fract(uv*Nshapes);\n    vec2 pos = vec2(f*5.0)+2.*float(iMouse)/iResolution.xy;\n    // Using the bilinear value noise\n    float noise = bilinearNoise(pos+vec2(cos(iTime),sin(iTime)));\n\tfloat gray=0.;\n    vec3 color=vec3(0.);\n    for(float i=0.;i<12.;++i){\n        gray=circle(f,noise,.45-.04*i)-circle(f,noise,.43-.04*i);\n        color+=gray*cArray[int(mod(i,3.))];\n    }\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}