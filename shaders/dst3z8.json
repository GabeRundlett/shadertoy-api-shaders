{
    "Shader": {
        "info": {
            "date": "1676993761",
            "description": "Eye Ball Monster",
            "flags": 0,
            "hasliked": 0,
            "id": "dst3z8",
            "likes": 26,
            "name": "Eye Ball Monster",
            "published": 3,
            "tags": [
                "eyeball",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 2111
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Tri(p,s,a) max(-dot(p,vec2(cos(-a),sin(-a))),max(dot(p,vec2(cos(a),sin(a))),max(abs(p).x-s.x,abs(p).y-s.y)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define ZERO (min(iFrame,0))\n\nfloat SimpleVesicaDistanceX(vec2 p, float r, float d) {\n    p.y = abs(p.y);\n    p.y+=d;\n    return length(p)-r;\n}\n\nfloat eyeBall(vec2 p){\n    \n    p.x+=sin(iTime*0.5)*0.1;\n    vec2 prevP = p;\n    \n    float d = abs(length(p)-0.13)-0.005;\n    float d2 = length(p)-0.045;\n    d = min(d,d2);\n    \n    p*=Rot(radians(iTime*-20.));\n    p=DF(p,8.);\n    p-=vec2(0.08);\n    p*=Rot(radians(45.));\n    d2 = B(p,vec2(0.003,0.01));\n    d = min(d,d2);\n    \n    p = prevP;\n    \n    p*=Rot(radians(iTime*30.));\n    d2 = abs(length(p)-0.075)-0.012;\n    \n    float a = radians(45.);\n    p.x = abs(p.x);\n    \n    d2 = max(dot(p,vec2(cos(a),sin(a))),d2);\n    \n    d = min(d,d2);\n    \n    p = prevP;\n    d2 = abs(length(p)-0.075)-0.002;\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat eye(vec3 p, float mask, float mask2){\n    vec3 prevP = p;\n    p.z = abs(p.z);\n    p.z-=0.55;\n    \n    float eye = eyeBall(p.xy);\n    p = prevP;\n    p.z = abs(p.z);\n    p.z-=0.55;\n    float s = mod(iTime*0.5,2.3);\n    if(s<1.){\n        p.y*=1.+s;\n    } else if(s>=1. && s<2.){\n        p.y*=1.+2.-s;\n    }\n    \n    float d2 = abs(SimpleVesicaDistanceX(p.xy,0.25,0.1))-0.01;\n    float d3 = SimpleVesicaDistanceX(p.xy,0.25,0.1);\n    \n    \n    eye = max(abs(p.z)-0.03,eye);\n    \n    \n    d2 = max(abs(p.z)-0.07,d2);\n    d2 = max(mask,d2);\n    \n    d3 = max(abs(p.z)-0.1,d3);\n    d3 = max(mask2,d3);\n    eye = max(d3,eye);\n    \n    \n    return  min(eye,d2);\n}\n\nfloat pattern(vec2 p){\n    vec2 prevP = p;\n    p*=Rot(radians(-30.*iTime));\n    float d = abs(length(p)-0.1)-0.005;\n    d = max(abs(p.x)-0.05,d);\n    p = prevP;\n    float d2 = abs(length(p)-0.07)-0.001;\n    \n    d = min(d,d2);\n    \n    p*=Rot(radians(90.+30.*iTime));\n    p.y = abs(p.y)-0.15;\n    d2 = Tri(p,vec2(0.03),radians(45.));\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat pattern2(vec2 p, float thickness){\n    vec2 prevP = p;\n    p*=Rot(radians(45.));\n    float d = abs(B(p, vec2(0.1)))-0.002;\n    float d2 = abs(B(p, vec2(0.06)))-0.002;\n    d2 = max(-(abs(p.x)-0.02),d2);\n    d2 = max(-(abs(p.y)-0.02),d2);\n    d = min(d,d2);\n    d2 = abs(B(p, vec2(0.1)))-thickness;\n    p*=Rot(radians(30.*iTime));\n    d2 = max(-(abs(p.x)-0.05),d2);\n    d2 = max(-(abs(p.y)-0.05),d2);\n    d = min(d,d2);\n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n\n    p.yz *= Rot(radians(iTime*-3.0));\n    vec3 prevP = p;\n    \n    float mask = length(p)-0.58;\n    float mask2 = length(p)-0.565;\n    float d = length(p)-0.55;\n    \n    float d2 = eye(p,mask,mask2);\n    \n    d = min(d,d2);\n    \n    p.xz*=Rot(radians(90.));\n    d2 = eye(p,mask,mask2);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.yz*=Rot(radians(90.));\n    d2 = eye(p,mask,mask2);    \n    d = min(d,d2);\n    \n    p = prevP;\n    p.yz*=Rot(radians(45.));\n    p.xz*=Rot(radians(35.));\n    d2 = pattern(p.xy);\n    d2 = max(mask,d2);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.yz*=Rot(radians(-45.));\n    p.xz*=Rot(radians(35.));\n    d2 = pattern(p.xy);\n    d2 = max(mask,d2);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.yz*=Rot(radians(-45.));\n    p.xz*=Rot(radians(-35.));\n    d2 = pattern(p.xy);\n    d2 = max(mask,d2);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.yz*=Rot(radians(45.));\n    p.xz*=Rot(radians(-35.));\n    d2 = pattern(p.xy);\n    d2 = max(mask,d2);\n    d = min(d,d2);    \n    \n    p = prevP;\n    p.yz*=Rot(radians(45.));\n    d2 = pattern2(p.xy,0.01);    \n    d2 = max(mask,d2);\n    d = min(d,d2);   \n    \n    p = prevP;\n    p.yz*=Rot(radians(-45.));\n    d2 = pattern2(p.xy,0.01);    \n    d2 = max(mask,d2);\n    d = min(d,d2);       \n    \n    p = prevP;\n    p.xz*=Rot(radians(45.));\n    d2 = pattern2(p.xy,0.01);    \n    d2 = max(mask,d2);\n    d = min(d,d2);   \n        \n    p = prevP;\n    p.xz*=Rot(radians(-45.));\n    d2 = pattern2(p.xy,0.01);    \n    d2 = max(mask,d2);\n    d = min(d,d2);   \n    \n    p = prevP;\n    p.xz*=Rot(radians(90.));\n    p.yz*=Rot(radians(-35.));\n    d2 = pattern2(p.xy,0.01);    \n    d2 = max(mask,d2);\n    d = min(d,d2);      \n    \n    \n    p = prevP;\n    p.xz*=Rot(radians(-90.));\n    p.yz*=Rot(radians(-35.));\n    d2 = pattern2(p.xy,0.01);    \n    d2 = max(mask,d2);\n    d = min(d,d2);         \n    \n    return vec2(d,0);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<3; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,-10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    //float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15).x,0.9);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    //diffCol = col*vec3(-0.5)*diff*shadow*occ;\n    diffCol += col*vec3(1.0,1.0,0.95)*skyDiff*occ;\n    diffCol += col*vec3(0.95)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.)*occ; // spec\n        \n    return diffCol;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    col = diffuseMaterial(n,rd,p,vec3(1.));\n    return col;\n}\n\nfloat bg (vec2 p){\n    vec2 prevP = p;\n    float d = 10.;\n    for(float i = 0.; i<5.; i++){\n        p*=Rot(radians(i*60.0+sin(i)*20.));\n        p = abs(p)-0.18;\n        p.y+=0.05;\n        float d2 = abs(pattern2(p*Rot(0.1*iTime*-(i+1.)),0.007))-0.001;\n        d = min(d,d2);\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, -1.35);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        ro.yz *= Rot(radians(-5.0));\n        ro.xz *= Rot(radians(sin(iTime*0.3)*60.0));\n    }\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    } else {\n        float bd = bg(uv);\n        col = mix(col,vec3(0.5),S(bd,0.0));\n    }\n      \n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}