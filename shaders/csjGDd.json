{
    "Shader": {
        "info": {
            "date": "1668356934",
            "description": "Ride through forest and lakes in summer and winter; train  track based on generalized hexagonal Truchet tiles (mouseable, multiple views).",
            "flags": 0,
            "hasliked": 0,
            "id": "csjGDd",
            "likes": 26,
            "name": "Forest Train Ride",
            "published": 3,
            "tags": [
                "landscape",
                "tree",
                "truchet",
                "snow",
                "train"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 353
        },
        "renderpass": [
            {
                "code": "// \"Forest Train Ride\" by dr2 - 2022\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n/* See \"Truchet's Train\" for more info. */\n\n#define AA  0   // (= 0/1) optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrConCapsDf (vec3 p, vec2 cs, float r, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat HexEdgeDist (vec2 p);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define PLEN 17\n#define N_CAR 4\n\nvec4 cPath[PLEN], carPos[N_CAR], snowCol;\nvec3 qHit, sunDir, tOff;\nvec2 cIdB, cIdS, cMidB, cMidS, wlBase;\nfloat dstFar, tCur, angRFac, hgSizeB, hgSizeS, tEnd[PLEN + 1], tLen, trVel, cDir, cType,\n   trSzFac, viaWid, viaHt, watHt, csOcc;\nint idObj;\nbool trees, snow;\nconst int idGrnd = 1, idWat = 2, idVia = 3, idRail = 4, idFenc = 5, idTrnk = 6, idLvs = 7,\n   idPost = 8, idCar = 9, idCon = 10, idWhl = 11, idFLamp = 12, idBLamp = 13;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat Ddot (vec2 p)\n{\n  return dot (p, p);\n}\n\nvec3 TruchSDist (vec2 p)\n{ // (from \"Truchet's Train\", with signed distance)\n  vec2 pc, pc1, pc2, dp;\n  float d, d1, d2, cxy, rc, ac, s, ss;\n  bool ct;\n  ct = (cType == 2. || cType == 4.);\n  if (ct) {\n    pc1 = - vec2 (0., cDir);\n    pc2 = vec2 (sqrt3/2. * sign (p.x), 0.5 * cDir);\n    d1 = Ddot (p - pc1);\n    d2 = Ddot (p - pc2);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = 0.5;\n    d = abs (sqrt (d) - rc);\n  } else {\n    if (cDir != 0.) p = 0.5 * vec2 (p.x - cDir * sqrt3 * p.y, cDir * sqrt3 * p.x + p.y);\n    pc1 = vec2 (sqrt3/2. * sign (p.x), 0.);\n    pc2 = vec2 (sqrt3 * sign (p.x), 0.);\n    d1 = sqrt (Ddot (p - pc1));\n    d2 = abs (sqrt (Ddot (p - pc2)) - 1.5);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = (d == d1) ? 0.: 1.5;\n  }\n  dp = p - pc;\n  cxy = cIdB.x - cIdB.y;\n  s = (ct && cxy < 0. || ! ct && abs (cxy - 2.) == 1.) ? -1. : 1.;\n  ac = (0.5 - atan (dp.y, - dp.x) / (2. * pi)) * s;\n  if (! ct && abs (cxy - 2.) <= 1.) ac += 1./6.;\n  ss = sign (length (dp) - rc);\n  return vec3 (d * ss, rc * ss * s, ac);\n}\n\nbool OnTrk (vec2 w)\n{\n  vec2 wp, wm;\n  float cxy;\n  bool cyo, offTrk;\n  cxy = cIdB.x - cIdB.y;\n  cyo = (mod (cIdB.y, 2.) == 1.);\n  wm = Rot2Cs (w, sin (- pi / 3. + vec2 (0.5 * pi, 0.))) - vec2 (0., 0.3);\n  wp = Rot2Cs (w, sin (pi / 3. + vec2 (0.5 * pi, 0.)));\n  offTrk = (cxy == -2. && wm.y > 0. ||\n     ! cyo && (cxy == -3. && w.y > -0.3 || cxy == -2. || cxy == -1. && wm.y > 0. ||\n     cxy == 1. && wm.y < 0. || (cxy == 2. || cxy == 3.) && w.x < 0. || cxy == 4. || cxy == 5.) ||\n     cyo && (cxy == -3. || cxy == 0. && wp.x > 0. || (cxy == 1. || cxy == 2.) && w.x > 0. || \n     cxy == 3. || cxy == 4. && wm.x < 0. || cxy == 5. && wm.y < 0.));\n     return ! offTrk;\n}\n\nvoid SetPath ()\n{\n  float ts, tl;\n  ts = 1.;\n  tl = 1.5;\n  cPath[ 0] = vec4 (0., 0., -1./6., tl);\n  cPath[ 1] = vec4 (1., 0., 1./3., - ts);\n  cPath[ 2] = vec4 (0., 1., 5./6., tl);\n  cPath[ 3] = vec4 (-1., 1., -1./3., ts);\n  cPath[ 4] = vec4 (-1., 2., 1., ts);\n  cPath[ 5] = vec4 (0., 1., - 1./6., tl);\n  cPath[ 6] = vec4 (1., 1., 1./6., tl);\n  cPath[ 7] = vec4 (1., 2., 1., ts);\n  cPath[ 8] = vec4 (2., 1., 1./2., - tl);\n  cPath[ 9] = vec4 (2., 0., -1./2., tl);\n  cPath[10] = vec4 (3., -1., -1./6., tl);\n  cPath[11] = vec4 (4., -1., 1./3., - ts);\n  cPath[12] = vec4 (3., 0., -1./2., - tl);\n  cPath[13] = vec4 (3., 1., 1./2., tl);\n  cPath[14] = vec4 (2., 2., 5./6., tl);\n  cPath[15] = vec4 (1., 2., -1./3., ts);\n  cPath[16] = vec4 (1., 3., 1., ts);\n  tEnd[0] = 0.;\n  for (int k = 0; k < PLEN; k ++) tEnd[k + 1] = tEnd[k] + abs (cPath[k].w);\n  tLen = tEnd[PLEN];\n}\n\nvec2 EvalPPos (float t)\n{\n  vec4 cp;\n  vec2 tp, vd;\n  float tt, r, a, dc;\n  t /= 3.;\n  tp = floor (t / tLen) * vec2 (2.);\n  t = mod (t, tLen);\n  for (int k = 0; k < PLEN; k ++) {\n    if (t >= tEnd[k] && t < tEnd[k + 1]) {\n      cp = cPath[k];\n      tt = 2. * (t - tEnd[k]) / (tEnd[k + 1] - tEnd[k]) - 1.;\n      break;\n    }\n  }\n  tp += cp.xy;\n  if (abs (cp.w) == 1.5) {\n    r = 1.5;\n    dc = sqrt3;\n    a = pi / 6.;\n    tt *= sign (cp.w);\n  } else {\n    r = 0.5;\n    dc = 1.;\n    a = - sign (cp.w) * pi / 3.;\n  }\n  vd = vec2 (-1., 1.) * sin (pi * cp.z + vec2 (0., 0.5 * pi));\n  return (HexToPix (tp) + dc * vd - r * Rot2Cs (vd, sin (tt * a + vec2 (0.5 * pi, 0.)))) * hgSizeB;\n}\n\nfloat CarDf (vec3 p, float dMin, float dir)\n{  // (from \"Alpine Express\")\n  vec3 q, qq;\n  float d, s, ds;\n  q = p;\n  qq = q;\n  s = 0.25;\n  if (q.z * dir > 0.5) {\n    ds = -0.25 * (q.z * dir - 0.5);\n    s += ds;\n    qq.y -= ds;\n  }\n  d = 0.9 * PrRoundBoxDf (qq, vec3 (0.3, s, 1.55), 0.4);\n  DMINQ (idCar);\n  q = p;\n  q.xz = abs (q.xz);\n  q.z = abs (q.z - wlBase.y);\n  q -= vec3 (wlBase.x, -0.6, 0.2);\n  d = PrCylDf (q.yzx, 0.15, 0.08);\n  DMINQ (idWhl);\n  q = p;\n  q.z = (dir == 0.) ? abs (q.z) - 1.8 : q.z + 1.8 * dir;\n  d = PrCylDf (q.xzy, 0.3, 0.5);\n  DMINQ (idCon);\n  if (dir > 0.) {\n    q = p;\n    q.yz -= vec2 (-0.25, 1.9);\n    d = PrCylDf (q, 0.1, 0.1);\n    DMINQ (idFLamp);\n  } else if (dir < 0.) {\n    q = p;\n    q.x = abs (q.x) - 0.2;\n    q.yz -= vec2 (-0.25, -1.9);\n    d = PrCylDf (q, 0.08, 0.1);\n    DMINQ (idBLamp);\n  }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin;\n  dMin = dstFar / trSzFac;\n  for (int k = VAR_ZERO; k < N_CAR; k ++) {\n    q = (p - carPos[k].xyz) / trSzFac;\n    q.xz = Rot2Cs (q.xz, sin (carPos[k].w + vec2 (0.5 * pi, 0.)));\n    dMin = CarDf (q, dMin, (k > 0) ? ((k < N_CAR - 1) ? 0. : -1.) : 1.);\n  }\n  return dMin * trSzFac;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd, float dstCut)\n{\n  float dHit, d, eps;\n  eps = 0.001;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < eps * max (1., angRFac * dHit) || dHit > dstCut) break;\n    dHit += d;\n  }\n  if (d >= eps * max (1., angRFac * dHit)) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (h, 0.01);\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvoid BConf ()\n{\n  float h, cxy;\n  cMidB = HexToPix (cIdB * hgSizeB);\n  h = Hashfv2 (cIdB);\n  if (Hashfv2 (17.11 * cIdB) > 0.4) {\n    cDir = floor (3. * h) - 1.;\n    cType = 3.;\n  } else {\n    cDir = 2. * floor (2. * h) - 1.;\n    cType = 4.;\n  }\n  cxy = cIdB.x - cIdB.y;\n  if (cxy == 0.) cType = 1.;\n  else if (abs (cxy) == 1.) cType = mod (cIdB.x, 2.) + 1.;\n  else if (cxy == -2. || cxy == -3. || cxy == 5.) cType = 2.;\n  else if (cxy == 2. || cxy == 3. || cxy == 4.) cType = 1.;\n  if (cType <= 2.) {\n    if (cType == 1. && (cxy == 1. || cxy == 2. || cxy == 3.)) cDir = 0.;\n    else if (cType == 1. && cxy == 4.) cDir = -1.;\n    else if (cType == 2. && cxy == 5.) cDir = 1.;\n    else cDir = 2. * mod (cIdB.x, 2.) - 1.;\n  }\n}\n\nfloat GrndHt (vec2 p)\n{\n  float f, a, aSum;\n  p *= 0.25;\n  f = 0.;\n  a = 1.;\n  aSum = 0.;\n  for (int j = 0; j < 3; j ++) {\n    f += a * Noisefv2 (p);\n    aSum += a;\n    a *= 0.4;\n    p *= 2.5;\n  }\n  return 2.2 * f / aSum;\n}\n\nfloat BObjDf (vec3 p)\n{\n  vec3 q, cm3;\n  float dMin, d, dt, rc, ac, gHt, dh;\n  bool onTrk;\n  dMin = dstFar;\n  if (cType > 0.) {\n    q = p;\n    q.xz = (q.xz - cMidB) / hgSizeB;\n    dh = hgSizeB * HexEdgeDist (q.xz);\n    cm3 = TruchSDist (q.xz);\n    dt = hgSizeB * abs (cm3.x);\n    rc = abs (cm3.y);\n    ac = 18. * cm3.z;\n    onTrk = (cType <= 2. && rc != 0. && OnTrk (q.xz));\n    d = q.y - watHt;\n    DMIN (idWat);\n    gHt = GrndHt (p.xz);\n    d = q.y - gHt;\n    if (onTrk && gHt > viaHt - 0.1) d = min (SmoothMax (d, -0.2 - dot (vec2 (dt - viaWid,\n       0.2 * gHt - q.y), sin (0.1 * pi + vec2 (0.5 * pi, 0.))), 0.1), q.y - (viaHt - 0.1));\n    DMIN (idGrnd);\n    if (onTrk) {\n      d = max (max (abs (dt) - viaWid, q.y - viaHt), - (length (vec2 (abs (fract (9. *\n         rc * ac + 0.5) - 0.5) / 3., q.y) - vec2 (0., min (q.y, viaHt - 0.3))) - 0.12));\n      DMIN (idVia);\n      d = PrRoundBox2Df (vec2 (dt - wlBase.x * trSzFac, q.y - viaHt - 0.01),\n         vec2 (0.005, 0.01), 0.003);\n      DMIN (idRail);\n      d = min (length (vec2 (dt - viaWid + 0.03, q.y - viaHt - 0.12)) - 0.008,\n         max (PrRoundBox2Df (vec2 (dt - viaWid + 0.03, (fract (9. * rc * ac + 0.5) -\n         0.5) / 3.), vec2 (0.007, 0.001), 0.001), abs (q.y - viaHt - 0.06) - 0.06));\n      DMIN (idFenc);\n      if (cm3.y < 0.) {\n        q = vec3 (dt - 0.23, q.y - viaHt - 0.4, dh);\n        d = min (max (length (q.xz) - 0.012, q.y), PrSphDf (q, 0.03));\n        DMIN (idPost);\n      }\n    }\n  }\n  return dMin;\n}\n\nfloat BObjRay (vec3 ro, vec3 rd, float dstCut)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, cIdP;\n  float dHit, d, s, eps;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  eps = 0.001;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSizeB / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSizeB;\n  pM = HexToPix (PixToHex (ro.xz / hgSizeB));\n  hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n  s = Minv3 (hv);\n  cIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    p = ro + dHit * rd;\n    cIdB = PixToHex (p.xz / hgSizeB);\n    if (cIdB != cIdP) {\n      cIdP = cIdB;\n      BConf ();\n    }\n    d = BObjDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = Minv3 (hv);\n    }\n    if (d < eps * max (1., angRFac * dHit) || dHit > dstCut) break;\n  }\n  if (d >= eps * max (1., angRFac * dHit)) dHit = dstFar;\n  return dHit;\n}\n\nvec3 BObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = BObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat BObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 cIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  cIdP = vec2 (-999.);\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    cIdB = PixToHex (p.xz / hgSizeB);\n    if (cIdB != cIdP) {\n      cIdP = cIdB;\n      BConf ();\n    }\n    h = BObjDf (p);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (h, 0.01);\n    if (sh < 0.05 || d > hgSizeB) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvoid SConf ()\n{\n  vec2 r;\n  cMidS = HexToPix (cIdS * hgSizeS);\n  r = Hashv2v2 (73. * cIdS + 1.1);\n  tOff.xz = 0.2 * sqrt3 * hgSizeS * (0.5 + 0.5 * r.x) * sin (2. * pi * r.y + vec2 (0.5 * pi, 0.));\n  tOff.y = r.x + r.y;\n}\n\nvoid SBConf ()\n{\n  vec2 s, u;\n  u = cMidS + tOff.xz;\n  cIdB = PixToHex (u / hgSizeB);\n  BConf ();\n  s = (u - cMidB) / hgSizeB;\n  csOcc = (hgSizeB * abs (TruchSDist (s).x) < 0.9 || GrndHt (cMidS) < watHt + 0.1) ? 0. :\n     0.01 + 0.99 * Hashfv2 (17.11 * cIdS);\n}\n\nfloat SObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, h;\n  dMin = dstFar;\n  if (csOcc > 0.) {\n    q = p;\n    q.xz = (q.xz - cMidS) / hgSizeS;\n    q.xz -= tOff.xz;\n    h = 0.15 + 0.15 * tOff.y;\n    q.y -= h + GrndHt (cMidS);\n    d = max (length (q.xz) - 0.05, q.y - h);\n    DMIN (idTrnk);\n    q.y -= h + 0.55;\n    d = PrConCapsDf (q.xzy, sin (0.09 * pi + vec2 (0.5 * pi, 0.)), 0.18, 0.35);\n    DMIN (idLvs);\n  }\n  return dMin;\n}\n\nfloat SObjRay (vec3 ro, vec3 rd, float dstCut)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, cIdP;\n  float dHit, d, s, eps;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  eps = 0.001;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSizeS / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSizeS;\n  pM = HexToPix (PixToHex (ro.xz / hgSizeS));\n  hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n  s = Minv3 (hv);\n  cIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    p = ro + dHit * rd;\n    cIdS = PixToHex (p.xz / hgSizeS);\n    if (cIdS != cIdP) {\n      cIdP = cIdS;\n      SConf ();\n    }\n    SBConf ();\n    d = SObjDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = Minv3 (hv);\n    }\n    if (d < eps * max (1., angRFac * dHit) || dHit > dstCut) break;\n  }\n  if (d >= eps * max (1., angRFac * dHit)) dHit = dstFar;\n  return dHit;\n}\n\nvec3 SObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = SObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat SObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 cIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  cIdP = vec2 (-999.);\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    cIdS = PixToHex (p.xz / hgSizeS);\n    if (cIdS != cIdP) {\n      cIdP = cIdS;\n      SConf ();\n    }\n    SBConf ();\n    if (csOcc > 0.) {\n      h = SObjDf (p);\n      sh = min (sh, smoothstep (0., 0.1 * d, h));\n      d += h;\n    } else d += 0.1 * hgSizeS;\n    if (sh < 0.05 || d > 2. * hgSizeS) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec4 CarCol ()\n{\n  vec4 col4;\n  col4 = vec4 (0.7, 0., 0., 0.3);\n  if (idObj == idCar) {\n    col4 = (abs (qHit.y - 0.22) < 0.26) ? vec4 (0.3, 0.3, 0.5, 0.3) :\n       ((abs (abs (qHit.y - 0.22) - 0.28) < 0.02) ? vec4 (0.4, 0.4, 0.8, 0.3) : col4);\n  } else if (idObj == idCon) {\n    col4 *= 0.8;\n  } else if (idObj == idWhl) {\n     col4 = (length (qHit.yz) < 0.07) ? vec4 (0.2, 0.2, 0.2, 0.1) :\n        vec4 (0.6, 0.6, 0.6, 0.2);\n  } else if (idObj == idFLamp) {\n    if (qHit.z > 0.08) col4 = vec4 (1., 1., 0., -1.);\n  } else if (idObj == idBLamp) {\n    if (qHit.z < -0.08) col4 = vec4 (1., 0., 0., -1.);\n  }\n  return col4;\n}\n\nvec4 GrndViaCol (vec3 p, vec3 vn, inout vec2 vf)\n{\n  vec4 col4;\n  vec3 cm3;\n  vec2 w;\n  float dt, rc, ac;\n  bool onTrk;\n  w = (p.xz - cMidB) / hgSizeB;\n  cm3 = TruchSDist (w);\n  dt = hgSizeB * abs (cm3.x);\n  rc = abs (cm3.y);\n  ac = 18. * abs (cm3.z);\n  if (idObj == idGrnd) {\n    col4 = snow ? snowCol : vec4 (0., 0.7, 0., 0.) * (0.6 + 0.4 * Fbm2 (4. * p.xz));\n    onTrk = (cType <= 2. && rc != 0. && OnTrk (w));\n    if (onTrk) {\n      if (dt < 2.) col4 = mix ((snow ? snowCol : vec4 (0.5, 0.55, 0.5, 0.) * (0.97 +\n         0.03 * sin (64. * pi * p.y))), col4, smoothstep (0.6, 0.9, vn.y));\n      if (dt < viaWid + 0.05 && abs (p.y - viaHt + 0.1) < 0.01) col4 = snow ?\n         snowCol : vec4 (0.5, 0.55, 0.5, 0.);\n    }\n    if (trees && csOcc > 0. && length ((p.xz - cMidS) / hgSizeS - tOff.xz) < 0.06) col4 *= 0.8;\n    vf = vec2 (16., 1.);\n  } else if (idObj == idVia) {\n    col4 = (snow && p.y > viaHt - 0.01 && dt < viaWid - 0.01) ? snowCol :\n       vec4 (0.6, 0.4, 0.1, 0.1);\n    if (p.y > viaHt - 0.01 && dt < 0.2) {\n      if (! snow) col4 = mix (col4, vec4 (0.6, 0.6, 0.5, 0.), smoothstep (0., 0.01, 0.22 - dt));\n      if (dt < 0.15 && step (0.4, abs (fract (20. * rc * ac + 0.5) - 0.5)) > 0.)\n         col4 = vec4 (0.5, 0.4, 0.3, 0.);\n    } else col4 *= 0.8 + 0.2 * step (0.05, abs (fract (32. * p.y + 0.5) - 0.5));\n    vf = vec2 (64., 1.);\n  }\n  return col4;\n}\n\nvec4 ObjCol (vec3 ro, vec3 vn, inout vec2 vf)\n{\n  vec4 col4;\n  if (idObj == idGrnd || idObj == idVia) {\n    col4 = GrndViaCol (ro, vn, vf);\n  } else if (idObj == idWat) {\n    col4 = vec4 (0.6, 0.6, 0.7, 0.);\n  } else if (idObj == idTrnk) {\n    col4 = vec4 (0.5, 0.3, 0.1, 0.1);\n    vf = vec2 (32., 1.);\n  } else if (idObj == idLvs) {\n    col4 = vec4 (0.4, 0.7, 0.1, 0.) * (1.1 - 0.3 * csOcc);\n    if (snow) col4 = mix (col4, snowCol, smoothstep (-0.8, -0.4, vn.y));\n    else col4 = mix (col4, vec4 (0.9, 0.9, 0., 0.1), step (0.7, Fbm3 (64. * ro.xzy)));\n    vf = vec2 (16., 2.);\n  } else if (idObj == idFenc) {\n    col4 = vec4 (0.8, 0.8, 0.9, 0.2);\n  } else if (idObj == idPost) {\n    col4 = (ro.y < viaHt + 0.37) ? vec4 (0.8, 0.8, 0.9, 0.2) : vec4 (1., 1., 0.4, -1.);\n  } else if (idObj == idRail) {\n    col4 = vec4 (0.7, 0.7, 0.75, 0.1);\n  } else if (idObj >= idCar && idObj <= idBLamp) {\n    col4 = CarCol ();\n  }\n  return col4;\n}\n\nvec3 SkyCol (vec3 rd)\n{\n  rd.y = abs (rd.y);\n  return mix (vec3 (0.3, 0.35, 0.7), vec3 (0.8, 0.8, 0.8),\n     clamp (2. * (Fbm2 (4. * rd.xz / rd.y + 0.1 * tCur) - 0.1) * rd.y, 0., 1.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, rs, rdd;\n  vec2 vf;\n  float dstObj, dstObjB, dstObjS, dstObjNR, dstCut, sh, reflFac;\n  int idObjB, idObjS;\n  bool isLit;\n  reflFac = 0.;\n  dstObjNR = 0.;\n  snowCol = vec4 (0.9, 0.9, 0.95, 0.1);\n  vf = vec2 (0.);\n  for (int k = VAR_ZERO; k < 2; k ++) {\n    dstCut = dstFar;\n    if (trees) {\n      dstObjS = SObjRay (ro, rd, dstCut);\n      dstCut = min (dstCut, dstObjS);\n      idObjS = idObj;\n    } else dstObjS = dstFar;\n    dstObjB = BObjRay (ro, rd, dstCut);\n    dstCut = min (dstCut, dstObjB);\n    idObjB = idObj;\n    dstObj = ObjRay (ro, rd, dstCut);\n    if (min (dstObjB, dstObjS) < min (dstObj, dstFar)) {\n      if (dstObjB < dstObjS) {\n        dstObj = dstObjB;\n        idObj = idObjB;\n      } else {\n        dstObj = dstObjS;\n        idObj = idObjS;\n      }\n    }\n    if (k == 0 && dstObj < dstFar && idObj == idWat) {\n      ro += dstObj * rd;\n      rd = reflect (rd, VaryNf (4. * ro, vec3 (0., 1., 0.), 0.1));\n      ro += 0.01 * rd;\n      dstObjNR = dstObj;\n      reflFac = 0.2;\n    } else break;\n  }     \n  isLit = false;\n  if (min (dstObjB, dstObjS) < dstObj) {\n    if (dstObjB < dstObjS) {\n      dstObj = dstObjB;\n      idObj = idObjB;\n    } else {\n      dstObj = dstObjS;\n      idObj = idObjS;\n    }\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    if (dstObj == dstObjB) {\n      cIdB = PixToHex (ro.xz / hgSizeB);\n      BConf ();\n      vn = BObjNf (ro);\n    } else if (dstObj == dstObjS) {\n      cIdS = PixToHex (ro.xz / hgSizeS);\n      SConf ();\n      SBConf ();\n      vn = SObjNf (ro);\n    } else {\n      vn = ObjNf (ro);\n    }\n    col4 = ObjCol (ro, vn, vf);\n    if (idObj == idCar) {\n      rdd = reflect (rd, vn);\n      reflFac = (abs (qHit.y - 0.22) < 0.26) ? 0.6 : 0.2;\n    }\n    if (col4.a >= 0.) {\n      rs = ro + 0.01 * vn;\n      sh = min (ObjSShadow (rs, sunDir), BObjSShadow (rs, sunDir));\n      if (trees) sh = min (sh, SObjSShadow (rs, sunDir));\n      if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n      isLit = true;\n    } else {\n      col = col4.rgb * (0.4 + 0.6 * max (- dot (rd, vn), 0.));\n    }\n  } else if (rd.y < 0.) {\n    dstObj = - ro.y / rd.y;\n    vn = vec3 (0., 1., 0.);\n    col4 = 0.8 * vec4 (0., 0.8, 0., 0.);\n    sh = 1.;\n    isLit = true;\n  } else {\n    col = SkyCol (rd);\n  }\n  if (isLit) {\n    col = col4.rgb * (0.3 + 0.1 * max (- dot (sunDir, vn), 0.) +\n       0.7 * sh * max (dot (vn, sunDir), 0.)) +\n       col4.a * step (0.95, sh) * pow (max (dot (reflect (sunDir, vn), rd), 0.), 32.);\n    col = mix (col, SkyCol (rd), 1. - exp (min (0., 1. - 5. * (dstObjNR + dstObj) / dstFar)));\n  }\n  if (reflFac > 0.) col = mix (0.9 * col, SkyCol (rdd), reflFac);\n  return clamp (col, 0., 1.);\n}\n\n#define N_WIN  3\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col, vd, pAv;\n  vec2 canvas, uv, uvv, mMid[N_WIN], ut[N_WIN], mSize, msw, pc[3];\n  float el, az, zmFac, asp, sr, cGap, t, nc;\n  int vuId, regId;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur += 10.;\n  asp = canvas.x / canvas.y;\n  mSize = (1./5.) * vec2 (asp, 1.);\n  mMid[0] = (1. - mSize.y) * vec2 (- asp, 1.);\n  mMid[1] = (1. - mSize.y) * vec2 (asp, 1.);\n  mMid[2] = (1. - mSize.y) * vec2 (asp, -1.);\n  for (int k = 0; k < N_WIN; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  regId = -1;\n  if (mPtr.z > 0.) {\n    regId = 0;\n    for (int k = 0; k < N_WIN; k ++) {\n      msw = 2. * mPtr.xy - mMid[k] / vec2 (asp, 1.);\n      if (Maxv2 (abs (msw)) < mSize.y) {\n        regId = k + 1;\n        msw /= 2. * mSize.y;\n        break;\n      }\n    }\n    if (regId == 0) msw = mPtr.xy;\n  }\n  vuId = 0;\n  for (int k = 0; k < N_WIN; k ++) {\n    if (Maxv2 (ut[k]) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      vuId = k + 1;\n      break;\n    }\n  }\n  if (regId > 0 && (vuId == 0 || vuId == regId)) vuId = regId - vuId;\n  hgSizeB = 16.;\n  hgSizeS = 1.;\n  watHt = 0.7;\n  viaWid = 0.3;\n  viaHt = 1.1;\n  trSzFac = 0.2;\n  SetPath ();\n  trees = true;\n  snow = (uv.x / asp > -1.+ 2. * SmoothBump (0.25, 0.75, 0.01, fract (0.02 * (tCur - 10.))));\n  cGap = 0.74 * trSzFac;\n  wlBase = vec2 (0.5, 0.9);\n  trVel = 0.2;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0. && vuId == regId) {\n    az += 2. * pi * msw.x;\n    el += 0.5 * pi * msw.y;\n  }\n  pAv = vec3 (0.);\n  for (int k = VAR_ZERO; k < N_CAR; k ++) {\n    t = (tCur + 30.) * trVel - float (k) * cGap;\n    for (int j = VAR_ZERO; j < 3; j ++)\n       pc[j] = EvalPPos (t + ((j > 0) ? sign (float (j) - 1.5) * wlBase.y * trSzFac : 0.));\n    carPos[k].xz = pc[0];\n    carPos[k].y = viaHt + 0.9 * trSzFac;\n    pAv += carPos[k].xyz;\n    vd.xy = pc[2] - pc[1];\n    carPos[k].w = 0.5 * pi - atan (vd.y, vd.x);\n  }\n  nc = float (N_CAR);\n  pAv /= nc;\n  t = (tCur + 30.) * trVel;\n  angRFac = 1.;\n  if (vuId == 0 || vuId == 3) {\n    ro.xz = EvalPPos (t - ((vuId == 0) ? nc + 2. :  -3.) * cGap);\n    ro.x += 0.01;\n    ro.y = viaHt + 1.;\n    vd = normalize (((vuId == 0) ? carPos[N_CAR - 2].xyz : carPos[1].xyz) - ro);\n    az += atan (vd.z, - vd.x) - 0.5 * pi;\n    el += asin (vd.y);\n    el = clamp (el, -0.2 * pi, 0.15 * pi);\n    zmFac = 3.;\n    dstFar = 12. * hgSizeB;\n  } else if (vuId == 1) {\n    ro = vec3 (0., 40., (-3. * sqrt3 + (2. / tLen) * t) * hgSizeB);\n    ro.xz = Rot2D (ro.xz, - pi / 3.);\n    ro.xz += 0.01;\n    ro.x += 1.6 * hgSizeB;\n    az += pi / 3.;\n    el -= 0.15 * pi;\n    el = clamp (el, -0.4 * pi, -0.1 * pi);\n    zmFac = 5.;\n    dstFar = 30. * hgSizeB;\n  } else if (vuId == 2) {\n    ro = vec3 (0., 20., (-1.5 * sqrt3 + (2. / tLen) * t) * hgSizeB);\n    ro.xz = Rot2D (ro.xz, - pi / 3.);\n    ro.xz += 0.01;\n    ro.x -= 1.5 * hgSizeB;\n    vd = normalize (pAv - ro);\n    az = atan (vd.z, - vd.x) - 0.5 * pi;\n    el = asin (vd.y);\n    zmFac = 40.;\n    angRFac = 0.1;\n    dstFar = 30. * hgSizeB;\n  }\n  vuMat = StdVuMat (el, az);\n  sunDir = normalize (vec3 (0., 1.5, -1.));\n  sunDir.xz = Rot2D (sunDir.xz, - pi / 3.);\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) *\n       pi)) / zmFac;\n    rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uvv.x / asp)) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  for (int k = 0; k < N_WIN; k ++) {\n    if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 3.) col = vec3 (0.7, 0.3, 0.3);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrConCapsDf (vec3 p, vec2 cs, float r, float h)\n{\n  float d;\n  d = max (dot (vec2 (length (p.xy) - r, p.z), cs), abs (p.z) - h);\n  h /= cs.x * cs.x;\n  r /= cs.x;\n  d = min (d, min (length (vec3 (p.xy, p.z + r * cs.y - h)) - r + h * cs.y,\n     length (vec3 (p.xy, p.z + r * cs.y + h)) - r - h * cs.y));\n  return d;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (sqrt3/2.) - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xy, cHashVA3.x + cHashVA3.y)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}