{
    "Shader": {
        "info": {
            "date": "1570355333",
            "description": "The \"distance functions\" here are a mess, don't look at them. Good thing we have fwidth to cover for us in times like these.\n\nI don't know how I'll be able to put one of these out each day, let alone catch up with the calendar. It was fun making it tho.",
            "flags": 0,
            "hasliked": 0,
            "id": "wsy3Wm",
            "likes": 24,
            "name": "Inktober2019 02: mindless",
            "published": 3,
            "tags": [
                "mountain",
                "wind",
                "desert",
                "inktober",
                "shadertober",
                "mindless",
                "inktober2019",
                "tumbleweed"
            ],
            "usePreview": 0,
            "username": "s23b",
            "viewed": 587
        },
        "renderpass": [
            {
                "code": "#define AA 4.\n#define PERIOD 5.\n#define COLOR vec3(1., .8, .5)\n#define SOLID 0\n\n#define PI 3.14159265359\n\nvec4 hash(float p) {\n    return fract(cos(p) * vec4(12345.6, 23456.7, 34567.8, 45678.9));\n}\n\nvoid tRotate(inout vec2 p, float angle) {\n    float s = sin(angle), c = cos(angle);\n\tp *= mat2(c, -s, s, c);\n}\n\nvoid tTwirl(inout vec2 p, float size) {\n    const float r1 = .5;\n    const float r2 = .3;\n    const float r3 = .2;\n    if (p.x < 0.) {\n        vec2 p2 = p - vec2(0, size * (2. * r1 - r2));\n        float y2 = length(p2) - size * r2;\n        if (abs(p.y) > abs(y2)) {\n            p = vec2(((atan(-p2.x, p2.y) / PI) * r2 + r1) * PI * size, y2);\n        }\n    } else {\n        vec2 p1 = p - vec2(0, size * r1);\n        vec2 p2 = p - vec2(0, size * (2. * (r1 - r2) + r3));\n        float y1 = length(p1) - size * r1;\n        float y2 = length(p2) - size * r3;\n        \n        p = abs(y1) < abs(y2)\n            ? vec2((atan(-p1.x, p1.y) / PI + 1.) * PI * r1 * size, y1)\n            : vec2(((atan(-p2.x, p2.y) / PI + 1.) * r3 + r1 + r2) * PI * size,\n                   y2 + sign(y2) * smoothstep(-PI, 0., atan(-p2.x, p2.y)) * size / 10.);\n    }\n}\n\n// not exact, but we're on a deadline here\nfloat sdStroke(vec2 p, vec2 dim) {\n    p = abs(p);\n    return p.x > dim.x ? distance(p, vec2(dim.x, 0.)) : p.y - smoothstep(dim.x, 0., p.x) * dim.y;\n}\n\nfloat sdLine(vec2 p, vec2 direction, float amount) {\n    float s = dot(p, direction);\n    return abs(s) - amount;\n}\n\nfloat opU(float a, float b) {\n    return min(a, b);\n}\n\nfloat opS(float a, float b) {\n    return max(a, -b);\n}\n\nfloat ground(float x) {\n    return sin(x * 5.) / 15.;\n}\n\nfloat sdBackground(vec2 p) {\n    p.y += ground(p.x);\n\t#if ! SOLID\n    p.y = abs(p.y);\n    #endif\n    return p.y - .015 - (sin(p.x * 5. + 4.5) + 1.) * .005;\n}\n\nfloat sdBall(vec2 p, float pos) {\n    p += vec2(-pos, ground(pos));\n    p.y -= .12;\n    tRotate(p, pos * PI * 2.);\n    \n    float a = atan(p.x, p.y);\n    float l = length(p);\n    \n    float d = l - .12 + sin(a * 3.) * .006;\n    \n    #if ! SOLID\n    d = opS(d, l - .08 + sin(a * 3. + 2.) * .004);\n    #endif\n    \n    for (float i = 0.; i < 25.; ++i) {\n        vec4 h = hash(i) - vec4(.5, .5, .5, -.5);\n        d = opU(d, sdLine(p + vec2(h.x * .2, 0), normalize(h.yz), h.w * .01));\n    }\n    return d + abs(l - .10) * .3;\n}\n\nfloat sdWind(vec2 p, float t) {\n    t -= .5;\n    tTwirl(p, .1);\n    return sdStroke(p - vec2(t, 0), vec2(.3, .01));\n}\n\nfloat sdWinds(vec2 p, float t) {\n    t -= .65;\n    t = t * 6.;\n    tRotate(p, -.15);\n    float w1 = sdWind(vec2(p.x, p.y - .02), t),\n          w2 = sdWind(vec2(p.x + .12, - p.y - .04), t),\n          w3 = sdWind(vec2(p.x - .06, - p.y - .02), t - .4),\n          w4 = sdWind(vec2(p.x - .16, p.y), t - .6);\n    return opU(opU(w1, w2), opU(w3, w4));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    float color = 0.;\n    \n    float res = min(iResolution.y, iResolution.x);\n    vec2 uv = (fragCoord - iResolution.xy / 2.) / res;\n    \n    if (abs(uv.x) > .45 || abs(uv.y) > .45) {\n        color = 0.;\n    } else {\n        float t = fract(iTime / PERIOD);\n        vec2 p = uv;\n        tRotate(p, -PI / 4.);\n        p.x -= .1 - smoothstep(.1, .4, abs(.5 - abs(t - .25))) * .25;\n        p.y += .15;\n        \n        float pos = .1 + sin((t + .1 * cos(t * PI * 2.)) * PI * 2.) * .35;\n        \n        float d = sdBackground(p);\n        d = opU(d, sdBall(p, pos));\n        d = opU(d, sdWinds(p - vec2(-.5, .21), t));\n        float w = fwidth(d);\n        color = smoothstep(-w, 0., d);\n    }\n        \n\tfragColor = vec4(mix(vec3(0), COLOR, color), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}