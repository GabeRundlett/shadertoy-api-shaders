{
    "Shader": {
        "info": {
            "date": "1555065130",
            "description": "A simplified 2D planet",
            "flags": 0,
            "hasliked": 0,
            "id": "tdSXW3",
            "likes": 10,
            "name": "2D_Planet",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "fbm",
                "planet"
            ],
            "usePreview": 0,
            "username": "Simplyfire",
            "viewed": 571
        },
        "renderpass": [
            {
                "code": "precision highp float;\n\nuniform vec2 resolution;\nuniform float time;\n\n#define pi 3.14159265359\n#define S(a, b, t) smoothstep(a, b, t)\n\n// functions from the Book of Shaders\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat snoise(float x0,float y0, float z0) {\n    vec3 p = vec3(x0,y0,z0);\n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n    vec4 w, d;\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n    w = max(0.6 - w, 0.0);\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n    w *= w;\n    w *= w;\n    d *= w;\n    return dot(d, vec4(52.0));\n}\n\nfloat cubicPulse( float c, float w, float x ){\n\t x = abs(x - c);\n\t if( x>w ) return 0.0;\n\t x /= w;\n\t return 1.0 - x*x*(3.0-2.0*x);\n}\n\nvec3 rgb( in vec3 c ){\n vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0), 6.0)-3.0)-1.0, 0.0, 1.0 );\n rgb = rgb*rgb*(3.0-2.0*rgb);  return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nmat2 rotate2d(float angle){\n\treturn mat2(cos(angle),-sin(angle), sin(angle),cos(angle));\n}\n\n#define OCTAVES 12\nfloat fbm (float x, float y, float z) {\n\tvec3 st = vec3(x,y,z);\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    for (int i = 0; i < OCTAVES; i++) {\n\t\tfloat n = abs(snoise(st.x, st.y, st.z));\n        value += amplitude * n;\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float time = iTime+5.;\n  vec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n  float d = length(uv);\n  vec2 landId = floor(uv*40.)+1.0;\n  vec2 atmoId = floor(uv*70.)+1.0;\n  float planet = smoothstep(.35,.3, d);\n  float landScl = .04;\n  float atmoScl = .01;\n  float land = max(.5,clamp(3.*fbm(landScl*landId.x-time*.1, landScl*landId.y, 0.), 0.,1.));\n  float atmosphere = clamp(1.5*fbm(atmoScl*atmoId.x-time*.2, atmoScl*atmoId.y, 0.), 0.,1.);\n  float poles = smoothstep(.0, .1,abs(.5-landId.y)*.004);\n  vec3 hsb = vec3(mix(.2, 1.0, 1.-land), 1.-poles*planet-atmosphere-(smoothstep(.3,.35,d)-smoothstep(.35,0.5,d)), planet+poles*planet);\n  fragColor = vec4(rgb(hsb),1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}