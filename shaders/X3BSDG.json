{
    "Shader": {
        "info": {
            "date": "1710977590",
            "description": "вдловл",
            "flags": 0,
            "hasliked": 0,
            "id": "X3BSDG",
            "likes": 2,
            "name": "фон",
            "published": 3,
            "tags": [],
            "usePreview": 0,
            "username": "liza911",
            "viewed": 83
        },
        "renderpass": [
            {
                "code": "#define MAX_ITER 5\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// Наша хаотичная функция, основанная на шуме\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n           (c - a)* u.y * (1.0 - u.x) +\n           (d - b) * u.x * u.y;\n}\n\n// Повторяем наш шум, чтобы получить более грубый вид\nfloat fbm (in vec2 st) {\n    float value = 0.0;\n    float amplitude = 0.5;\n    float frequency = 0.0;\n    for (int i = 0; i < MAX_ITER; i++) {\n        value += amplitude * noise(st);\n        st *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Определяем размеры экрана\n    vec2 resolution = iResolution.xy;\n\n    // Центрируем координаты\n    vec2 uv = (fragCoord - resolution / 2.0) / min(resolution.x, resolution.y);\n\n    // Определяем время\n    float time = iTime;\n\n    // Задаем цвета для фона и разводов\n    vec3 backgroundColor = vec3(1, 1, 1); // Желтый\n    vec3 streakColor = vec3(.8, 0.8, .8); // Зеленый\n\n    // Задаем скорость движения разводов\n    float speed = 0.5;\n\n    // Определяем позицию разводов\n    float streakPos = fbm(uv * 10.0 - time * speed);\n\n    // Вычисляем интенсивность разводов\n    float streakIntensity = smoothstep(0.0, 1.0, abs(streakPos));\n\n    // Смешиваем фоновый цвет с цветом разводов\n    vec3 finalColor = mix(backgroundColor, streakColor, streakIntensity);\n\n    // Выводим цвет\n    fragColor = vec4(finalColor, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}