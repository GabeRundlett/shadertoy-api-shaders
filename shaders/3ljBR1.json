{
    "Shader": {
        "info": {
            "date": "1598319509",
            "description": "Hello world of raymarching.\nTips would be appreciated, as I'm not very experienced with ShaderToy",
            "flags": 0,
            "hasliked": 0,
            "id": "3ljBR1",
            "likes": 5,
            "name": "raymarched infinite cubes",
            "published": 3,
            "tags": [
                "raymarching",
                "infinite"
            ],
            "usePreview": 0,
            "username": "xacer",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "// First program\n\n\nvec3 cameraPosition = vec3(0.0);\nmat3 cameraMatrix = mat3(1, 0, 0, 0, 1, 0, 0, 0, 1);\nfloat distanceEstimator(vec3 z) {\n    vec3 oz = mod(z, 4.0) - 2.0;\n    return length(oz - clamp(oz, -1.0, 1.0)) - .2;\n}\n\nvec3 xDir = vec3(0.0001, 0, 0);\nvec3 yDir = vec3(0, 0.0001, 0);\nvec3 zDir = vec3(0, 0, 0.0001);\nvec3 lightDirection = normalize(vec3(0.5, 0.5, -1.0));\n\nvec3 surfaceNormal (vec3 pos) {\n    vec3 normal = vec3(\n        distanceEstimator(pos + xDir) - distanceEstimator(pos - xDir),\n        distanceEstimator(pos + yDir) - distanceEstimator(pos - yDir),\n        distanceEstimator(pos + zDir) - distanceEstimator(pos - zDir)\n    );\n    return normalize(normal);\n}\n\nvec3 trace (vec3 origin, vec3 direction) {\n    float totalDistance = 0.0;\n\n    for (float steps = 0.0; steps < 400.0; steps ++) {\n        vec3 pos = origin + direction * totalDistance;\n        float distance = distanceEstimator(pos);\n        totalDistance += distance;\n        if (distance < 0.001) {\n            vec3 normal = surfaceNormal(pos);\n            float diffuse = max(dot(normal, lightDirection), 0.0);\n            float specular = dot(reflect(direction, normal), lightDirection);\n\t\t\t\n            vec3 texPos = (mod(pos, 4.0) - 2.0);\n            \n            vec2 texPos2 = texPos.xy;\n            \n            if (abs(normal.x) > abs(normal.y) && abs(normal.x) > abs(normal.z)) {\n            \ttexPos2 = texPos.yz;\n            } else if (abs(normal.y) > abs(normal.z)) {\n            \ttexPos2 = texPos.xz;\n            } else {\n            \ttexPos2 = texPos.xy;\n            }\n            \n            specular = pow(max(specular, 0.0), 200.0);\n\n            float shade = 0.6 * diffuse + 0.4 * specular + 0.1;            \n            vec3 tint = texture(iChannel1, texPos2).rgb;\n            float m = mod(floor(pos.x/4.0) + floor(pos.y/4.0) + floor(pos.z/4.0), 4.0);\n            if (m == 0.0) {\n            \ttint = texture(iChannel0, texPos2).rgb;\n            } else if (m == 1.0) {\n            \ttint = texture(iChannel1, texPos2).rgb;\n            } else if (m == 2.0) {\n            \ttint = texture(iChannel2, texPos2).rgb;\n            } else {\n            \ttint = texture(iChannel3, texPos2).rgb;\n            }\n            return shade * tint;\n\n\n        }\n    }\n    return 0.2 * vec3(232.0, 159.0, 14.0) / 255.0;\n}\n    \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = 1.0 - 2.0 * fragCoord/iResolution.xy;\n\t\n    vec3 ray = normalize(vec3(uv.xy, 1.0));\n    \n    vec3 res = trace(cameraPosition + vec3(0, 0, iTime), ray);\n\n    // Output to screen\n    fragColor = vec4(res.rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}