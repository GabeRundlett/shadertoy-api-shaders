{
    "Shader": {
        "info": {
            "date": "1383088483",
            "description": "Another test integrating isolines of a texture",
            "flags": 0,
            "hasliked": 0,
            "id": "Md23zz",
            "likes": 10,
            "name": "Texture Isolines",
            "published": 3,
            "tags": [
                "2d",
                "texture",
                "isolines",
                "integral"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 3603
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n// Gathering pixels along the direction perpendicular to the gradient\n// of an image. See also: https://www.shadertoy.com/view/4djSD3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //---------------------------------\n    // input\n    //---------------------------------\n\tvec2 p = fragCoord.xy / iResolution.xy;\n\n    //---------------------------------\n    // integrate isolines\n    //---------------------------------\n\tfloat lg = 0.0;\n\tvec2 uv = 0.2*vec2( p.x, 1.0-p.y );\n\tvec2 e = 1.0/iChannelResolution[0].xy;\n\tfor( int i=0; i<128; i++ )\n\t{\n\t\t\n\t\tfloat h  = dot( texture(iChannel0, uv,               3.5).xyz, vec3(0.333) );\n\t\tfloat h1 = dot( texture(iChannel0, uv+vec2(e.x,0.0), 3.5).xyz, vec3(0.333) );\n\t\tfloat h2 = dot( texture(iChannel0, uv+vec2(0.0,e.y), 3.5).xyz, vec3(0.333) );\n\t\t\n        // gradient\n\t\tvec2 g = ( vec2( (h1-h), (h2-h) )/e );\n\t\t\n        // isoline\t\t\n\t\tvec2 f = g.yx*vec2(-1.0,1.0);\n\t\t\n\t\tuv -= 0.001*f/iChannelResolution[0].xy;\n\t\t\n\t\tlg += (0.5 + 0.5*sin(atan(f.x,f.y)))/128.0;\n\t}\n\tvec3 col = texture(iChannel0, uv).xyz;\n\n\t//---------------------------------\n    // color\n    //---------------------------------\n\tcol = col*col*(3.0-2.0*col);\n\tcol = col*col*(3.0-2.0*col);\n\tcol = col*col*(3.0-2.0*col);\n\t\n    //---------------------------------\n    // lighting\n    //---------------------------------\n\tfloat f = dot( col, vec3(0.33) );\n\tvec3 nor = normalize( vec3( dFdx(f), 25.0/iResolution.x, dFdy(f) ) );\n\tfloat dif = pow( clamp( dot( nor, vec3(0.57703,0.57703,-0.57703) ), 0.0, 1.0 ), 4.0 );\n\tcol += 0.14*vec3(dif);\n\n\tcol *= mix( vec3(0.6,0.75,0.6), vec3(1.0,1.1,0.8), lg );\n\t\t\n\n\t//---------------------------------\n    // output\n    //---------------------------------\n\tcol *= 0.5 + 0.5*pow( 16.0*p.x*(1.0-p.x)*p.y*(1.0-p.y), 0.2 );\n\tfragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}