{
    "Shader": {
        "info": {
            "date": "1444149367",
            "description": "Just experimenting with noises and other cool stuff on this site :)",
            "flags": 0,
            "hasliked": 0,
            "id": "ltBXDm",
            "likes": 34,
            "name": "Emission clouds",
            "published": 3,
            "tags": [
                "cloud",
                "nebula",
                "emission",
                "ionized"
            ],
            "usePreview": 0,
            "username": "Duke",
            "viewed": 3033
        },
        "renderpass": [
            {
                "code": "// based on https://www.shadertoy.com/view/ls2SDd\n// noise from https://www.shadertoy.com/view/XslGRr\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\nconst int MAX_RAY_STEPS = 64;\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn -1.0+2.0*mix( rg.x, rg.y, f.z );\n}\n\nvec2 rotate2d(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 screenPos = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\tvec3 cameraDir = vec3(0.0, 0.0, 1.4);\n\tvec3 cameraPlaneU = vec3(1.0, 0.0, 0.0);\n\tvec3 cameraPlaneV = vec3(0.0, 1.0, 0.0) * iResolution.y / iResolution.x;\n\tvec3 rayDir = cameraDir + screenPos.x * cameraPlaneU + screenPos.y * cameraPlaneV;\n\tvec3 rayPos = vec3(80.0, 12.0 * sin(iTime / 4.7), 0.0);\n\t\t\n    \n    rayDir.y -= .2 * sin(iTime / 4.7);\n    rayDir = normalize(rayDir);\n    \n\trayPos.xz = rotate2d(rayPos.xz, iTime / 2.0);\n\trayDir.xz = rotate2d(rayDir.xz, iTime / 2.0 + 3.14 / 2.0);\n    \n    \n    float dis = 0.0;\n    float t1 = 2.0;\n    vec3 dir = vec3(0.,1.,0.);\n    float val;\n    \n    vec3 col = vec3(0);\n    for(int i=0;i<MAX_RAY_STEPS;i++){\n\t    //////////////////////////////////\n    \t// participating media    \n    \tvec3 q = rayPos - dir* t1; val  = 0.50000*noise( q * .05 );\n\t\tq = q*2.0 - dir* t1; val += 0.25000*noise( q * .05  );\n\t\tq = q*2.0 - dir* t1; val += 0.12500*noise( q * .05  );\n\t\tq = q*2.0 - dir* t1; val += 0.06250*noise( q * .05  );\n        q = q*2.5 - dir* t1; val += 0.03125*noise( q * .8  );\n        //////////////////////////////////\n        \n        float t = max(5.0 * val - .9, 0.0);\n        \n        col += sqrt(dis) * .1 * vec3(0.5 * t * t * t, .6 * t * t, .7 * t);\n        \n        dis += 1.0 / float(MAX_RAY_STEPS);\n        \n        rayPos += rayDir * 1.0/ (.4);\n    }\n    \n    col = min(col, 1.0) - .34 * (log(col + 1.0));\n    \n    fragColor = vec4(sqrt(col.rgb), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}