{
    "Shader": {
        "info": {
            "date": "1593065386",
            "description": "potato",
            "flags": 0,
            "hasliked": 0,
            "id": "ttfyDj",
            "likes": 30,
            "name": "Day 187",
            "published": 3,
            "tags": [
                "mograph",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 542
        },
        "renderpass": [
            {
                "code": "\n// Super awesome bayered motion blur from yx https://www.shadertoy.com/view/wsfcWX\n\n#define rot(j) mat2(cos(j),-sin(j),sin(j),cos(j))\n#define pi acos(-1.)\n#define tau (2.*pi)\n\n\n#define motionBlurSteps 10 + min(0,iFrame)\n\n#define tri(j) asin(sin(j))\n\n#define timeStep (1./60.)\n\nfloat bayer8(ivec2 uv)\n{   \n    uv %= 8;\n\treturn texelFetch(iChannel1,uv,0).r;\n}\n\n\n// from iq\nfloat sdTri( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\nfloat sdBox( in vec2 p, in vec2 q )\n{\n    p = abs(p) - q;\n    return max(p.y,p.x);\n}\n\n#define pmod(p,j) mod(p - 0.5*j,j) - 0.5*j\n\n\n\nfloat ease(float p, float power, float jump, float offs, float end) {\n    float j = p;\n    p *= offs;\n    float r = (1.-cos(pi*p))/2.*jump;\n    r = pow(r, power);\n    r = mix(r, 1., pow(smoothstep(0.,1.,j),end));\n\treturn r;\n}\nfloat smease(float p, float g) {\n    float s = p;\n    for(float i = 0.; i < g; i++){\n    \ts = smoothstep(0.,1.,s);\n    }\n    return s;\n}\n\n\n\n\nconst float speed = 0.28;\nfloat[] scenes = float[10](6.2*speed,2.7*speed, 2.6*speed, 4.2*speed, 3.*speed, 6.75*speed, 6.2*speed, 7.2*speed, 6.2*speed, 8.9*speed); \n\nfloat sumScenes (float cnt){\n\tfloat sum = 0.;\n    for(float i = 0.; i <= cnt; i++){\n    \tsum += scenes[int(i)];\n    }\n    return sum;\n}\n\nvec3 get(vec2 uv, float t){\n\n    vec3 col = vec3(0);\n       \n    float d = 10e6;\n    \n    uv *= 0.85;\n    \n    \n    //t += sumScenes(8.)- 0.;\n    \n    t = mod(t, sumScenes(9.)  );\n    \n    vec2 triW = vec2(0.1,0.173)*1.;\n    \n    float its = 6.;\n    \n    if(t < scenes[0]){\n        for(float i = 0.; i < its; i++){\n\n            vec2 p = uv;\n\n           \n            float enva = smease(t/scenes[0]*1.,2.);\n            \n            float envb = 1.-smease(t/scenes[0]*1.,3.);\n \t\t\t\n            \n                        \n            \n            p *= rot(tau*i/its);\n\t\t\t\n            \n            float antiatten = (1. - enva);\n\n            p.y -= 0.105*antiatten;\n            \n            p.y += 0.9*enva*envb;\n            p.xy *= rot(-pi*enva/1.);\n           \n            vec2 q = p;\n            \n            enva*=envb;\n            \n            float dt = sdTri(p,triW);\n            for(int i = 0; i < 2; i++){\n            \tp = abs(p);\n                p.x -= 0.03*antiatten;\n                p.y -= 0.03*antiatten;\n            \t\n                p.xy *= rot( .5*pi*antiatten);\n\t\t\t\n                p.xy *= rot(-0.5*pi*enva);\n                p.y -= 0.1*enva;\n                p.x += 0.15*enva;\n            \t\n                //p.x += 0.05*enva;\n                \n                p.xy *= rot(0.25*pi*enva);\n                \n            }\n            \t\t\t\t\t\n            \n            //p *= rot(0.5*pi*enva);\n                \n            \n            \n            dt = mix(dt,sdBox(p,triW/5.),1.*antiatten);\n            q = pmod(q,triW/2.);\n            dt = mix(dt,sdBox(q,triW/14.),enva*2.5); \n            \n            //dt = mix(dt, max(abs(pmod(dt ,0.02)) - 0.001,dt),0.);\n            \n            //dt = mix(dt, max(abs(pmod(dt,0.02)) - 0.001,dt),0.);\n            \n            d = min(d,dt); \n            \n            \n        }\n\n    } else if(t <  sumScenes(1.) ) {\n    \tt -=  sumScenes(0.) ;\n        \n        for(float i = 0.; i < its; i++){\n\n            vec2 p = uv;\n\n            p *= rot(pi*2.*i/its);\n\n            float env = smease(t/scenes[1],2.);\n            p.x -= 0.2*env;\n\t\t\t\n            p *= rot(env*pi/3.);\n            \n\n            d = min(d,sdTri(p,triW)); \n\n        }\n        \n    \n    }else if(t < sumScenes(2.) ) {\n    \tt -= sumScenes(1.); \n    \n        for(float i = 0.; i < its; i++){\n\n            vec2 p = uv;\n\n            p *= rot(pi*2.*i/its);\n\n            float env = smease(t/scenes[2],2.5);\n            p.x -= 0.2 - 0.2*env;\n\t\t\t\n            p *= rot(pi/3.);\n            \n\n            d = min(d,sdTri(p,triW)); \n\n        }\n        \n    }else if(t < sumScenes(3.)) {\n    \tt -= sumScenes(2.) ; \n    \n        for(float i = 0.; i < its; i++){\n\n            vec2 p = uv;\n\n            \n            \n            p *= rot(pi*2.*i/its);\n\n            \n            float enva = smease(t/scenes[3]*2.,1.);\n\t\t\t\n            float envb = smease(t/scenes[3]*1.,3.);\n\t\t\t\n            p *= rot(envb*pi);\n            p.x += 0.1*enva;\n\n            d = min(d,sdTri(p,triW)); \n\n        }\n        \n    }else if(t < sumScenes(4.)) {\n    \tt -= sumScenes(3.) ; \n    \n        for(float i = 0.; i < its; i++){\n\n            vec2 p = uv;\n\n            p *= rot(pi*2.*i/its);\n\n            \n            float enva = smease(t/scenes[4]*1.,3.);\n\t\t\t\n            float envb = smease(t/scenes[4]*1.5,2.);\n\t\t\t\n            p *= rot(pi + pi*enva);\n            \n            p.x += 0.1 - 0.1*enva;\n            \n            d = min(d,sdTri(p,triW)); \n\n        }\n    \n    }else if(t < sumScenes(5.)) {\n    \tt -= sumScenes(4.) ; \n    \n        for(float i = 0.; i < its; i++){\n\n            vec2 p = uv;\n\n            p *= rot(tau*i/its);\n\n            float enva = smease(t/scenes[5]*0.9,3.);\n            \n            p.xy -= 0.1*enva;\n\t\t\t\n            for(int i = 0; i < 4; i++){\n            \tp = abs(p);\n                p.xy *= rot(-pi*0.25*enva);\n                p.x -= 0.06*enva;\n            }\n            \n            //p *= rot(pi);\n\n            \n            float dt = sdTri(p,triW); \n            dt = mix(dt, max(abs(pmod(dt,0.02)) - 0.001,dt),1.*enva);\n            \n            d = min(d,dt); \n\n        }\n    }else if(t < sumScenes(6.)) {\n    \tt -= sumScenes(5.) ; \n    \n        for(float i = 0.; i < its; i++){\n\n            vec2 p = uv;\n\n            p *= rot(tau*i/its);\n\n            float enva = smease(t/scenes[6]*0.8,3.);\n            \n            p.xy -= 0.1;\n\t\t\t\n            for(int i = 0; i < 4; i++){\n            \tp = abs(p);\n                p.xy *= rot(-pi*0.25 + 0.5*pi*enva);\n                p.x -= 0.06;\n            }\n            \n            float dt = sdTri(p,triW); \n            dt = mix(dt, max(abs(pmod(dt,0.02)) - 0.001,dt),1.);\n            \n            d = min(d,dt); \n\n        }\n    }else if(t < sumScenes(7.)) {\n    \tt -= sumScenes(6.) ; \n    \n        for(float i = 0.; i < its; i++){\n\n            vec2 p = uv;\n\n            p *= rot(tau*i/its);\n\n            float enva = smease(t/scenes[7]*1.,3.);\n            \n            p.xy *= rot(-1.*pi*enva);\n            p.xy -= 0.1;\n            \n            \n            for(int i = 0; i < 4; i++){\n            \tp = abs(p);\n                p.xy *= rot(0.25*pi + -0.25*pi*enva);\n                p.x -= 0.06 - 0.1*enva;\n            \t\n                p.y += 0.02*enva;\n                \n                p.xy *= rot(0.25*pi*enva);\n\t\t\t\n            }\n            \n            float dt = sdTri(p,triW); \n            dt = mix(dt, max(abs(pmod(dt,0.02)) - 0.001,dt),1. - 1.*enva);\n            \n            d = min(d,dt); \n\n        }\n    }else if(t < sumScenes(8.)) {\n    \tt -= sumScenes(7.) ; \n    \n        for(float i = 0.; i < its; i++){\n\n            vec2 p = uv;\n\n            p *= rot(tau*i/its);\n\n            float enva = smease(t/scenes[8]*1.25,3.);\n            \n            p.xy *= rot(-1.*pi - 1.*pi*enva);\n            p.xy -= 0.1 - 0.1*enva;\n            \n            \n            for(int i = 0; i < 4; i++){\n            \tp = abs(p);\n                p.x -= -0.04 + 0.04*enva;\n            \t\n                p.y += 0.02 - 0.02*enva;\n                \n                p.xy *= rot(0.25*pi + .25*pi*enva);\n\t\t\t\n            }\n            \n            float dt = sdTri(p,triW); \n            \n            d = min(d,dt); \n\n        }\n    }else if(t < sumScenes(9.)) {\n    \tt -= sumScenes(8.) ; \n        \n        for(float i = 0.; i < its; i++){\n\n            vec2 p = uv;\n\n            float enva = smease(t/scenes[9]*1.25,3.);\n            \n            float envb = 1.-smease(t/scenes[9]*1.25,2.);\n            \n            p *= rot(tau*i/its);\n\n            p *= rot(pi);\n\n            \n            //enva*= envb*6.;\n            \n            enva *= 1.5;\n            \n            p.y -= 0.07*enva;\n\n            //p *= rot(pi*enva/1.);\n\n           \n            \n\n            \n            float dt = sdTri(p,triW); \n            \n            for(int i = 0; i < 2; i++){\n            \tp = abs(p);\n                p.x -= 0.03;\n                p.y -= 0.03;\n            \t\n                //p.y += 0.005;\n                \n                p.xy *= rot( .5*pi);\n\t\t\t\n            }             \n            //p \n            dt = mix(dt,sdBox(p,triW/5.),enva/1.5); \n            //dt = mix(dt, max(abs(pmod(dt ,0.02)) - 0.001,dt), 1.-envb);\n            \n            d = min(d,dt); \n            \n        }\n    }\n    \n    \n    d = abs(d) - 0.001;\n    \n    col = mix(col,vec3(1.),smoothstep(dFdx(uv.x),0.,d));\n    //col = 1. - col;\n    \n\treturn col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;  \n    vec3 col = vec3(0);\n    \n    float edge = dFdx(uv.x)*1.;\n    \n    \n    for (int i = 0; i < motionBlurSteps  ; ++i) {\n        float subsample = bayer8(ivec2(fragCoord));\n        float time = iTime + ((float(i)+subsample)/float(motionBlurSteps)-.5) * timeStep;\n        col += get(uv,time);\n    }\n    col/=float(motionBlurSteps);\n    \n    //col = clamp(col, 0., 1.);\n    col *= 0.999;\n    \n    //col *= max((1. + 1.*cos(sin(0.25*tau*iTime/(scenes[0] + scenes[1] ))*tau+length(uv)*2.+vec3(4,2.5,1.5)))*1., 0.);\n    //col *= max((1.5 + 1.4*cos(iTime+length(uv)*2.+vec3(1,1.5,1.5)))*1., 0.);\n    \n    //col *= 1. - pow(smoothstep(0.,1.,dot(uv,uv)*0.9),0.9)*1.;\n    \n    col = pow(col, vec3(0.454545));\n    \n    fragColor = vec4(col,1.0);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}