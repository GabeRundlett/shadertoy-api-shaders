{
    "Shader": {
        "info": {
            "date": "1570874670",
            "description": "right: luminance.\n\nleft: green = min in #LOD cells, \n        blue = max in #LOD cells.\n       red = average.\n -> colored blocks where max-min is large.\n\n( should better store video at source resolution, for big MIPmap levels yield num issue in fullscreen)",
            "flags": 32,
            "hasliked": 0,
            "id": "3sKGWy",
            "likes": 8,
            "name": "making minmax quadtree for free",
            "published": 3,
            "tags": [
                "minmax",
                "gpmipmap",
                "bbox"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 595
        },
        "renderpass": [
            {
                "code": "#define LOD 4.\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O.ra = texture(iChannel0, U/R).ra;\n    \n    if (U.x < R.x/2.) {\n        //O.gb = texture(iChannel0, U/R, LOD+log2(R.y/O.a)).gb;\n        int l = int(max(0.,LOD+log2(R.y/O.a)));\n        O.gb = texelFetch(iChannel0, ivec2(U)>>l, l).gb;\n        O.gb *= exp2(2.*float(l));                    // convert MIPmap average to sum \n        \n        O.g = pow( O.g,-1./POW );                     // this approximates MIN\n        O.b = pow( O.b, 1./POW );                     // this approximates MAX\n      //O.g *= exp2(-2.*float(l)/POW);                    // convert MIPmap average to sum \n      //O.b *= exp2( 2.*float(l)/POW);                    // convert MIPmap average to sum \n        O.r = (O.g+O.b)/2.;\n    }\n    else O = O.rrrr;                                  // right: luminance only\n    \n    O = pow( O, vec4(1./2.2) );                       // back to sRGB\n\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    O.r = length( texture(iChannel0, U/R).rb ) / 1.3;\n    O.r = pow( O.r, 2.2 );            // sRGB to flat (was it necessary ?)\n    O.g = pow( O.r,-POW );            // this approximates MIN\n    O.b = pow( O.r, POW );            // this approximates MAX\n    O.a = iChannelResolution[0].y;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define POW 10.  // the larger the better min/max, but more bigfloats precision issues\n\n#define R  (iResolution.xy)\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}