{
    "Shader": {
        "info": {
            "date": "1708123593",
            "description": "Playing around with ray marching to learn about it; this visual disturbs me lol.",
            "flags": 0,
            "hasliked": 0,
            "id": "43j3zR",
            "likes": 0,
            "name": "xvrqt - Ray Marching ",
            "published": 3,
            "tags": [
                "raymarching",
                "beginner",
                "learning"
            ],
            "usePreview": 0,
            "username": "xvrqt",
            "viewed": 123
        },
        "renderpass": [
            {
                "code": "const float PI = 3.141592;\n\n// Signed distance to a sphere\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\n// Signed distance to a cube\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) -b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat opUnion(float d1, float d2) {\n    return min(d1,d2);\n}\n\nfloat opSubtraction(float d1, float d2) {\n    return max(-d1,d2);\n}\n\nfloat opSmoothSubtraction(float d1, float d2, float k) {\n    float h = clamp(0.5 - 0.5*(d2+d1)/k, 0.0, 1.0);\n    return mix(d2, -d1, h) + k*h*(1.0-h);\n}\n\nfloat opIntersection(float d1, float d2) {\n    return max(d1,d2);\n}\n\nvec2 smin(vec2 a, vec2 b, float k) {\n    float h = max( k-abs(a.x-b.x), 0.0 )/k;\n    float g = min(a.x,b.x) - h*h*h*k*(1.0/6.0);\n    if (a.x < b.x) { return vec2(g,a.y); }\n    else { return vec2(g,b.y); } \n}\n\nvec3 rot3D(vec3 p, vec3 axis, float angle) {\n    return mix(dot(axis, p) * axis, p, cos(angle)) + cross(axis, p) * sin(angle);\n}\n\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c,-s,s,c);\n}\n\nvec3 palette(in float t) {\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(1.0,1.0,1.0);\n    vec3 d = vec3(0.268,0.416,0.557);\n    \n    return a + b * cos((2.0*PI)*((c*t)+d));\n}\n\n// Takes a point as an input, returns distance to an object in the scene\nvec2 map(vec3 p) {\n    // Camera always \"zooming in\"\n    //p.z += mod(iTime *.25, 4.);\n    \n    // Blob\n    vec3 spherePos = vec3(sin(iTime)*3.,0,0);\n    vec2 sphere = vec2(sdSphere(p - spherePos, 1.), 2.0);\n    \n    // Box\n    vec3 bp = p;\n    bp.y -= iTime * .4; // Move up contnuously\n    bp.xz *= rot2D(iTime/10.);\n    bp = fract(bp) - 0.5;\n    vec2 box = vec2 (sdBox(bp, vec3(0.1)), 1.0);\n    \n    vec2 groundPlane = vec2(p.y + 0.75,0.0);\n    \n    return smin(groundPlane, smin(box,sphere,2.), 1.);\n}\n\nvec3 groundCol = vec3(100./255.,65./255.,23./255.);\nvec3 boxCol = vec3(188./255.,143./255.,143./255.);\nvec3 sphereCol = vec3(205./255.,91./255.,69./255.);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // Convert to clip space\n  vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n  // Mouse position in clip space\n  vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n  \n  // Define where the rays originate\n  vec3 ro = vec3(0,0,-3); // 3 units behind the origin in the 'z' direction\n  // Rays point away from ray origin, and through the imaginary screen plane\n  vec3 rd = normalize(vec3(uv,1)); // Normalize means they all have a magnitude of '1'\n  \n  \n  \n  // Rotate based on mouse position\n  ro.yz *= rot2D(-m.y);\n  rd.yz *= rot2D(-m.y);\n  ro.xz *= rot2D(-m.x);\n  rd.xz *= rot2D(-m.x);\n  \n  // Final pixel color\n  vec3 col = vec3(0);\n  \n  float t = 0.0; // Total distance traveled\n  \n  // Raymarching\n  int i;\n  vec2 d = vec2(0,0);\n  for(i = 0; i < 80; i++) {\n      vec3 p = ro + rd * t;\n      //p.xy += sin(t)*.35;\n  \n      d = map(p); // current distance to something in the scene\n  \n      t += d.x; // March the ray\n            \n      if(d.x < 0.001 || d.x > 100.) break; // Stop when we're close to an object\n  }\n  \n  //col = vec3(palette(t*0.4 + float(i)*.005));\n  if (d.y == 0.) { col = groundCol + float(i)*0.005; }\n  else if (d.y == 1.) { col = boxCol + float(i)*0.005; }\n  else if (d.y == 2.) { col = sphereCol + float(i)*0.005; }\n   col -= .4*log(t);\n\n  fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}