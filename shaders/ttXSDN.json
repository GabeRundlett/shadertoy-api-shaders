{
    "Shader": {
        "info": {
            "date": "1562912200",
            "description": "A modification of IQ's filtered xor Shader for the Looking Glass Display\n\nCalibration Bookmarklet:\njavascript:{var s=document.createElement(\"script\");s.src=\"https://zalo.github.io/Holopladertoy/bookmarklet.js\",document.body.appendChild(s);};void(0);",
            "flags": 0,
            "hasliked": 0,
            "id": "ttXSDN",
            "likes": 14,
            "name": "Looking Glass Raytracer",
            "published": 3,
            "tags": [
                "glass",
                "rendering",
                "looking",
                "lightfield",
                "lkg"
            ],
            "usePreview": 0,
            "username": "zalo",
            "viewed": 1602
        },
        "renderpass": [
            {
                "code": "// Looking Glass Calibration Variables\n// Paste this bookmarklet into your browser's URL bar to set these values for your display (make sure the \"javscript:\" is at the front):\n// javascript:{var s=document.createElement(\"script\");s.src=\"https://zalo.github.io/Holopladertoy/bookmarklet.js\",document.body.appendChild(s);};void(0);\nconst float pitch  = 246.93183799163623;\nconst float slope  = -0.1850851917072664;\nconst float center = 0.7301818132400513;\n\nfloat screenSize = 2.0; // Just do everything in screenSizes\n\n// A single view will _converge_ on a point about two screen-heights \n// from the device. Assume focalDist is ~2 screenSizehs backwards, \n// and from ~-0.22222 to 2 screenSizes on the x axis (use mouse.xy \n// to control these)\nvoid calcRayForPixel(vec2 pix, out vec3 rayOrigin, out vec3 rayDir) {\n    // Mouse controlled focal distance and viewpoint spread\n    float screenWidth = (iResolution.x/iResolution.y) * screenSize;\n    float focalLeft   = -((iMouse.x/iResolution.x)-0.45)*2.0;  \n    float focalRight  = screenWidth - focalLeft;\n    float focalDist   = -1.0-(iMouse.y/iResolution.y) * 5.0; // -2.0 is a good default\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 screenCoord = pix/iResolution.xy;\n    \n    // Get the current view for this subpixel\n    float view = screenCoord.x;\n\tview += screenCoord.y * slope;\n\tview *= pitch;\n\tview -= center;\n\tview = 1.0 - mod(view + ceil(abs(view)), 1.0);\n    \n    // Calculate the ray dir assuming pixels of a given view converge\n    // at points along a line segment floating \"focalDist\" above the display.\n    // TODO: Take into account the refraction of the acrylic, which changes\n    // the rays' angle of attack as they converge on pxFoc\n    vec3 pxPos = vec3(screenCoord.x * screenWidth, screenCoord.y * screenSize, 0.0);\n    vec3 pxFoc = vec3(mix(focalLeft, focalRight, view), 0.5, focalDist);\n    vec3 pxDir = pxFoc - pxPos; pxDir /= length(pxDir);\n    vec3 pxOri = pxPos + (1.0 * pxDir); // <- Increase for protruding objects\n    rayOrigin  = pxOri; rayDir = -pxDir;\n    \n    // Offset and Swizzle for IQ's Coordinate System\n    rayOrigin = vec3(-rayOrigin.z, rayOrigin.y, rayOrigin.x) + vec3(3.2,0.0,-0.9);\n    rayDir = vec3(-rayDir.z, rayDir.y, rayDir.x);\n}\n\n\n// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// A filtered xor pattern. Since an xor patterns is a series of checkerboard\n// patterns, I derived this one from https://www.shadertoy.com/view/XlcSz2\n\n// Other filterable simple procedural patterns:\n//\n// checker, 2D, box filter: https://www.shadertoy.com/view/XlcSz2\n// checker, 3D, box filter: https://www.shadertoy.com/view/XlXBWs\n// checker, 3D, tri filter: https://www.shadertoy.com/view/llffWs\n// grid,    2D, box filter: https://www.shadertoy.com/view/XtBfzz\n// xor,     2D, box filter: https://www.shadertoy.com/view/tdBXRW\n//\n// Article: https://iquilezles.org/articles/filterableprocedurals\n\n\n// --- analytically box-filtered xor pattern ---\n\nfloat xorTextureGradBox( in vec2 pos, in vec2 ddx, in vec2 ddy )\n{\n    float xor = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        // filter kernel\n        vec2 w = max(abs(ddx), abs(ddy)) + 0.01;  \n        // analytical integral (box filter)\n        vec2 f = 2.0*(abs(fract((pos-0.5*w)/2.0)-0.5)-abs(fract((pos+0.5*w)/2.0)-0.5))/w;\n        // xor pattern\n        xor += 0.5 - 0.5*f.x*f.y;\n        \n        // next octave        \n        ddx *= 0.5;\n        ddy *= 0.5;\n        pos *= 0.5;\n        xor *= 0.5;\n    }\n    return xor;\n}\n\n// --- unfiltered xor pattern ---\n\nfloat xorTexture( in vec2 pos )\n{\n    float xor = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        xor += mod( floor(pos.x)+floor(pos.y), 2.0 );\n\n        pos *= 0.5;\n        xor *= 0.5;\n    }\n    return xor;\n}\n\n//===============================================================================================\n//===============================================================================================\n// sphere implementation\n//===============================================================================================\n//===============================================================================================\n\nfloat softShadowSphere( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    vec3 oc = sph.xyz - ro;\n    float b = dot( oc, rd );\n\t\n    float res = 1.0;\n    if( b>0.0 )\n    {\n        float h = dot(oc,oc) - b*b - sph.w*sph.w;\n        res = smoothstep( 0.0, 1.0, 2.0*h/b );\n    }\n    return res;\n}\n\nfloat occSphere( in vec4 sph, in vec3 pos, in vec3 nor )\n{\n    vec3 di = sph.xyz - pos;\n    float l = length(di);\n    return 1.0 - dot(nor,di/l)*sph.w*sph.w/(l*l); \n}\n\nfloat iSphere( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    float t = -1.0;\n\tvec3  ce = ro - sph.xyz;\n\tfloat b = dot( rd, ce );\n\tfloat c = dot( ce, ce ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h>0.0 )\n\t{\n\t\tt = -b - sqrt(h);\n\t}\n\treturn t;\n}\n\n//===============================================================================================\n//===============================================================================================\n// scene\n//===============================================================================================\n//===============================================================================================\n\n\n// spheres\nconst vec4 sc0 = vec4(  3.0, 0.5, 0.0, 0.5 );\nconst vec4 sc1 = vec4( -4.0, 2.0,-5.0, 2.0 );\nconst vec4 sc2 = vec4( -4.0, 2.0, 5.0, 2.0 );\nconst vec4 sc3 = vec4(-30.0, 8.0, 0.0, 8.0 );\n\nfloat intersect( vec3 ro, vec3 rd, out vec3 pos, out vec3 nor, out float occ, out int matid )\n{\n    // raytrace\n\tfloat tmin = 10000.0;\n\tnor = vec3(0.0);\n\tocc = 1.0;\n\tpos = vec3(0.0);\n    matid = -1;\n\t\n\t// raytrace-plane\n\tfloat h = (0.01-ro.y)/rd.y;\n\tif( h>0.0 ) \n\t{ \n\t\ttmin = h; \n\t\tnor = vec3(0.0,1.0,0.0); \n\t\tpos = ro + h*rd;\n\t\tmatid = 0;\n\t\tocc = occSphere( sc0, pos, nor ) * \n\t\t\t  occSphere( sc1, pos, nor ) *\n\t\t\t  occSphere( sc2, pos, nor ) *\n\t\t\t  occSphere( sc3, pos, nor );\n\t}\n\n\n\t// raytrace-sphere\n\th = iSphere( ro, rd, sc0 );\n\tif( h>0.0 && h<tmin ) \n\t{ \n\t\ttmin = h; \n        pos = ro + h*rd;\n\t\tnor = normalize(pos-sc0.xyz); \n\t\tmatid = 1;\n\t\tocc = 0.5 + 0.5*nor.y;\n\t}\n\n\th = iSphere( ro, rd, sc1 );\n\tif( h>0.0 && h<tmin ) \n\t{ \n\t\ttmin = h; \n        pos = ro + tmin*rd;\n\t\tnor = normalize(pos-sc1.xyz); \n\t\tmatid = 2;\n\t\tocc = 0.5 + 0.5*nor.y;\n\t}\n\n\th = iSphere( ro, rd, sc2 );\n\tif( h>0.0 && h<tmin ) \n\t{ \n\t\ttmin = h; \n        pos = ro + tmin*rd;\n\t\tnor = normalize(pos-sc2.xyz); \n\t\tmatid = 3;\n\t\tocc = 0.5 + 0.5*nor.y;\n\t}\n\n\th = iSphere( ro, rd, sc3 );\n\tif( h>0.0 && h<tmin ) \n\t{ \n\t\ttmin = h; \n        pos = ro + tmin*rd;\n\t\tnor = normalize(pos-sc3.xyz); \n\t\tmatid = 4;\n\t\tocc = 0.5 + 0.5*nor.y;\n\t}\n\n\treturn tmin;\t\n}\n\nvec2 texCoords( in vec3 pos, int mid )\n{\n    vec2 matuv;\n    \n    if( mid==0 )\n    {\n        matuv = pos.xz;\n    }\n    else if( mid==1 )\n    {\n        vec3 q = normalize( pos - sc0.xyz );\n        matuv = vec2( atan(q.x,q.z), acos(q.y ) )*sc0.w;\n    }\n    else if( mid==2 )\n    {\n        vec3 q = normalize( pos - sc1.xyz );\n        matuv = vec2( atan(q.x,q.z), acos(q.y ) )*sc1.w;\n    }\n    else if( mid==3 )\n    {\n        vec3 q = normalize( pos - sc2.xyz );\n        matuv = vec2( atan(q.x,q.z), acos(q.y ) )*sc2.w;\n    }\n    else if( mid==4 )\n    {\n        vec3 q = normalize( pos - sc3.xyz );\n        matuv = vec2( atan(q.x,q.z), acos(q.y ) )*sc3.w;\n    }\n\n\treturn 200.0*matuv;\n}\n\n\nvoid calcCamera( out vec3 ro, out vec3 ta )\n{\n\tfloat an = 0.1*sin(0.1*iTime);\n\tro = vec3( 5.0*cos(an), 0.5, 5.0*sin(an) );\n    ta = vec3( 0.0, 1.0, 0.0 );\n}\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in float occ, in vec3 rd )\n{\n    float sh = min( min( min( softShadowSphere( pos, vec3(0.57703), sc0 ),\n\t\t\t\t              softShadowSphere( pos, vec3(0.57703), sc1 )),\n\t\t\t\t              softShadowSphere( pos, vec3(0.57703), sc2 )),\n                              softShadowSphere( pos, vec3(0.57703), sc3 ));\n\tfloat dif = clamp(dot(nor,vec3(0.57703)),0.0,1.0);\n\tfloat bac = clamp(0.5+0.5*dot(nor,vec3(-0.707,0.0,-0.707)),0.0,1.0);\n    vec3 lin  = dif*vec3(1.50,1.40,1.30)*sh;\n\t     lin += occ*vec3(0.15,0.20,0.30);\n\t     lin += bac*vec3(0.10,0.10,0.10)*(0.2+0.8*occ);\n\n    return lin;\n}\n\n//===============================================================================================\n//===============================================================================================\n// render\n//===============================================================================================\n//===============================================================================================\n\nvec3 rayTraceSubPixel(vec2 fragCoord) {\n    vec3 ro, rd, ddx_ro, ddx_rd, ddy_ro, ddy_rd;\n\tcalcRayForPixel( fragCoord + vec2(0.0,    0.0), ro, rd );\n\tcalcRayForPixel( fragCoord + vec2(1.0/3.0,0.0), ddx_ro, ddx_rd );\n\tcalcRayForPixel( fragCoord + vec2(0.0,    1.0), ddy_ro, ddy_rd );\n\t\t\n    // trace\n\tvec3 pos, nor;\n\tfloat occ;\n    int mid;\n    float t = intersect( ro, rd, pos, nor, occ, mid );\n\n\tvec3 col = vec3(0.9);\n\tif( mid!=-1 )\n\t{\n\t\t// -----------------------------------------------------------------------\n        // compute ray differentials by intersecting the tangent plane to the  \n        // surface.\t\t\n\t\t// -----------------------------------------------------------------------\n\n\t\t// computer ray differentials\n\t\tvec3 ddx_pos = ddx_ro - ddx_rd*dot(ddx_ro-pos,nor)/dot(ddx_rd,nor);\n\t\tvec3 ddy_pos = ddy_ro - ddy_rd*dot(ddy_ro-pos,nor)/dot(ddy_rd,nor);\n\n\t\t// calc texture sampling footprint\t\t\n\t\tvec2     uv = texCoords(     pos, mid );\n\t\tvec2 ddx_uv = texCoords( ddx_pos, mid ) - uv;\n\t\tvec2 ddy_uv = texCoords( ddy_pos, mid ) - uv;\n       \n\t\t// shading\t\t\n\t\tvec3 mate = vec3(0.0);\n        #if 0\n\t    bool lr = fragCoord.x < iResolution.x/2.0;\n        if( lr ) mate = vec3(1.0)*xorTexture( uv );\n        else     mate = vec3(1.0)*xorTextureGradBox( uv, ddx_uv, ddy_uv );\n        #else\n        //mate = vec3(1.0)*xorTexture( uv );\n        mate = vec3(1.0)*xorTextureGradBox( uv, ddx_uv, ddy_uv );\n        #endif\n        mate = pow( mate, vec3(1.5) );\n        \n        // lighting\t\n\t\tvec3 lin = doLighting( pos, nor, occ, rd );\n\n        // combine lighting with material\t\t\n\t\tcol = mate * lin;\n\t\t\n        // fog\t\t\n        col = mix( col, vec3(0.9), 1.0-exp( -0.00001*t*t ) );\n\t}\n\t\n    // gamma correction\t\n\tcol = pow( col, vec3(0.4545) );\n\n    // line\n\treturn col;// * smoothstep( 1.0, 2.0, abs(fragCoord.x-iResolution.x/2.0) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 col = vec3(rayTraceSubPixel(fragCoord).r,\n                    rayTraceSubPixel(fragCoord + vec2(1.0/3.0, 0.0)).g, \n                    rayTraceSubPixel(fragCoord + vec2(2.0/3.0, 0.0)).b);\n\t\n    // output\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}