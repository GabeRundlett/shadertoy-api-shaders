{
    "Shader": {
        "info": {
            "date": "1697635420",
            "description": "Hexagonal tilings of the first kind. Tiles have parallel sides and the tiling is symmetric under 180° rotations.\nAnimation mode by default. Press 'a' for manual control.\n\n<mouse>,<up/down>,d,g,q,r,s,x,z also do things.",
            "flags": 48,
            "hasliked": 0,
            "id": "mtdGWM",
            "likes": 11,
            "name": "Type 1 Hexagonal Tilings",
            "published": 3,
            "tags": [
                "hexagon",
                "tilings"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "// Type 1 Hexagonal Tilings, mla, 2023\n//\n// There are 3 types of convex monohedral hexagonal tilings, see:\n// https://en.wikipedia.org/wiki/Hexagonal_tiling#Monohedral_convex_hexagonal_tilings\n// or eg. Grunbaum and Shepard for details, and the same constructions\n// works for non-convex tiles as well (though there may be non-convex tilings\n// that are not constructible in this way).\n//\n// This shader constructs a Type 1 tiling based on a parallelogrammic\n// repeating unit, and using two control points within the unit to\n// construct the tiling (zooming in and using 'g' to see the underlying grid\n// will probably be more useful than me trying to explain it). For\n// some positions of the control points, the tile boundary intersects\n// itself, or the tile is incompletely drawn (a limitation of doing this\n// in a fragment shader).\n//\n// The resulting tiling consists of translations and 180° rotations of the\n// basic tile, there are no reflections.\n//\n// If the edges of the tile are replaced with curves with appropriate symmetry,\n// then we have tiling satisfying the 'Conway criterion':\n// https://en.wikipedia.org/wiki/Conway_criterion\n//\n// By varying the control point positions across the image we can do\n// 'parquet deformations' - currently just a displacement to the two\n// control points. Better ways are possible I'm sure.\n//\n// Controls:\n// <mouse>: if not in animation mode drag the control points.\n// <up/down>: zoom in and out\n// a: animation mode\n// d: parquet deformation\n// g: show underlying grid\n// q,r,s: use special values for the control points\n// x: don't show control points\n// z: extra zoom out\n\n// Point reflect p in q\nvec2 pointreflect(vec2 p, vec2 q) {\n  return 2.0*q - p;\n}\n\nint wind(vec2 p, vec2 q, vec2 r) {\n  // NR winding number computation, extending ray\n  // vertically.\n  q -= p; r -= p; // Relative to p\n  float t = determinant(mat2(q,r));\n  if (q.x <= 0.0) {\n    if (r.x > 0.0 && t > 0.0) return 1;\n  } else {\n    if (r.x <= 0.0 && t < 0.0) return -1;\n  }\n  return 0;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  setscale();\n  vec2 p = map(fragCoord);\n  vec2 p0 = p;\n  float px = fwidth(length(p));\n  vec2 a = getselection(0); // Parallelogram corner\n  vec2 A = vec2(1,0);\n  vec2 B = a;\n  vec2 C = vec2(a.x-1.0,a.y);\n  vec2 D = vec2(0);\n  mat2 M = mat2(A,C);\n  mat2 Minv = inverse(M);\n  vec2 E = 0.5*(A+B);\n  vec2 H = 0.5*(C+D);\n  vec2 K = getselection(1);\n  vec2 J = getselection(2);\n  p = Minv*p;\n  ivec2 ix = ivec2(floor(p));\n  ivec2 inc = ivec2(1);\n  p += 1.0;\n  p = mod(p,2.0);\n  p -= 1.0;\n  if (p.x < 0.0) p = -p, inc = -inc;\n  if (p.y < 0.0) p.y += 1.0;\n  p = M*p;\n  if (!key(CHAR_A)) {\n    vec2 q = 2.0*fract(0.5+(0.2*iTime)*vec2(1,0.618));\n    q = min(q,2.0-q);\n    K = M*q;\n    q = 2.0*fract(0.5+(0.1618*iTime)*vec2(0.618,1));\n    q = min(q,2.0-q);\n    J = M*q;\n  }\n  if (!key(CHAR_D)) {\n    J += 0.025*p0;\n    K += 0.025*p0.yx;\n  }\n  if (key(CHAR_Q)) K = C;\n  if (key(CHAR_R)) J = B;\n  if (key(CHAR_S)) J = K;\n  float d = 1e8;\n  d = min(d,segment(p,J,K));\n  vec2 J1 = pointreflect(J,B);\n  d = min(d,segment(p,J,J1));\n  vec2 J0 = pointreflect(J,E);\n  d = min(d,segment(p,J,J0));\n  d = min(d,segment(p,J0,pointreflect(J0,A)));\n  vec2 K0 = pointreflect(K,H);\n  d = min(d,segment(p,K,K0));\n  d = min(d,segment(p,K0,pointreflect(K0,D)));\n  vec2 K1 = pointreflect(K,C);\n  d = min(d,segment(p,K,K1));\n\n  // Check for which region p is in. There are\n  // some redundant calls to wind() here (since\n  // wind(p,q,r) = -wind(p,r,q), more or less).\n  int k;\n  k = wind(p,K0,K)+wind(p,K,K1)+wind(p,K1,K0);\n  if (k > 0) ix.x -= inc.x;\n  k = wind(p,K1,K)+wind(p,K,J)+wind(p,J,J1)+wind(p,J1,K1);\n  if (k > 0) ix.y += inc.y;\n  k = wind(p,J1,J)+wind(p,J,J0)+wind(p,J0,J1);\n  if (k > 0) ix.x += inc.x;\n  vec3 col = vec3(1,1,0.8);\n  if (!key(CHAR_C)) col = hsv2rgb(rand(ix+1),0.4,1.0);\n  col *= smoothstep(0.0,px,d-0.01);\n  if (key(CHAR_G)) {\n    d = 1e8;\n    d = min(d,line(p,A,B));\n    d = min(d,line(p,B,C));\n    d = min(d,line(p,C,D));\n    d = min(d,line(p,D,A));\n    col *= smoothstep(0.0,px,d);\n  }\n  if (!key(CHAR_X)) {\n    // Show the control points\n    float d = 1e8;\n    d = min(d,distance(p0,a));\n    d = min(d,distance(p0,K));\n    d = min(d,distance(p0,J));\n    col *= smoothstep(0.0,px,d-0.06);\n  }\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nfloat scale = 2.5;\nconst float PI = 3.1415927;\n\n#define map(screen) (scale*(2.0*screen-iResolution.xy)/iResolution.y)\n\nint nselections = 3;\nvec2 initselection(int i) {\n  if (i == 0) return vec2(1.2,1);\n  if (i == 1) return vec2(0.3,0.3);\n  if (i == 2) return vec2(0.8,0.4);\n  return vec2(0);\n}\n\n#define getselection(i) (texelFetch(iChannel2,ivec2((i)+1,3),0).xy)\n#define setscale() \\\n  (scale *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP))), \\\n   scale *= key(CHAR_Z) ? 1.0 : 2.0)\n\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);       \n  return v * mix(vec3(1.0),rgb,s);\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\nfloat line(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  return length(p-b*h);\n}\n\nint idiv(int a,int b) {\n  return a >= 0 ? a/b : -((-a+b-1)/b);\n}\n\nint imod(int a, int b) {\n  int d = idiv(a,b);\n  return a-d*b;\n}\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n    x += 0x12345678u;\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nfloat rand(ivec2 p) {\n  uint h = ihash(uint(p.x)^ihash(uint(p.y)));\n  return float(h)/exp2(32.0);\n}\n\nconst int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\n// const int KEY_LEFT = 37;\n// const int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\n// const int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\n// const int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\n// const int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\n// const int CHAR_I = 73;\n// const int CHAR_J = 74;\nconst int CHAR_K = 75;\n// const int CHAR_L = 76;\nconst int CHAR_M = 77;\n// const int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\n// const int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\n// const int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n  setscale();\n  int i = int(uv.x); // Column number\n  int j = int(uv.y); // Row\n  if (iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (j == 0) {\n    // First row - key count\n    // Do key repeat here as well?\n    float w1 = keystate(i,0).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      // Don't count key changes when ALT pressed\n      if (keystate(KEY_ALT,0).x == 0.0 && w1 != 0.0) {\n        t.x++; t.y = iTime;\n      }\n    }\n    // Key repeat - only when shader is running!\n    // Should have longer pause after first key press.\n    if (t.w != 0.0 && keystate(KEY_ALT,0).x == 0.0 && iTime-t.y > 0.25) {\n      t.x++; t.y = iTime;\n    }\n  } else if (j == 1) {\n    if (i == 0 && iMouse.z != 0.0) t.xy = iMouse.xy;\n    if (i == 1 && iMouse.z == 0.0) t.xy = iMouse.xy;\n  } else if (j == 2 && key(i)) {\n    // Record mouse position when key pressed\n    t = vec4(iMouse.xy,0,iTime);\n  } else if (j == 3) {\n      // Cell 0 holds currently selected item, 0 = no selection\n    if (i == 0) {\n      if (t.x == 0.0 && iMouse.z > 0.0) {\n        vec2 mouse = map(iMouse.xy);\n        // No selection, but mouse now down\n        for (int i = nselections; i >= 1; i--) {\n          // Select topmost item (assume drawn 1..N)\n          vec2 p = texelFetch(iChannel2,ivec2(i,3),0).xy; // Get current state\n          if (distance(mouse,p) < scale*0.05) {\n            t.x = float(i);\n            break;\n          }\n        }\n      } else if (t.x != 0.0 && iMouse.z <= 0.0) {\n        // Clear selection if mouse up.\n        t.x = 0.0;\n      }\n    } else if (iFrame == 0 || t.z != 1234.0) {\n      t.xyz = vec3(initselection(i-1),1234); // Current coordinates\n    } else {\n      vec4 t0 = texelFetch(iChannel2,ivec2(0,3),0); // Get current state\n      if (int(t0.x) == i && iMouse.z > 0.0) {\n        // If currently selected, copy mouse position\n        t.xy = map(iMouse.xy);\n      }\n    }\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}