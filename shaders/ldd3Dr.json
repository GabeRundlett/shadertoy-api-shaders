{
    "Shader": {
        "info": {
            "date": "1449145532",
            "description": "Upgraded version of my inFX.1\nMusic: \"Paula Loves Fat Bass\" by Dakota (3 place in Amiga Tracked Music Compo at Decrunch Party Wroclaw Poland 2015)",
            "flags": 64,
            "hasliked": 0,
            "id": "ldd3Dr",
            "likes": 53,
            "name": "â™« inFX.1b",
            "published": 3,
            "tags": [
                "raymarching",
                "music"
            ],
            "usePreview": 0,
            "username": "patu",
            "viewed": 6434
        },
        "renderpass": [
            {
                "code": "\n// S h a d e r T o y - - - C h r o m e   E x t e n s i o n\n\n// https://chrome.google.com/webstore/detail/shadertoy-unofficial-plug/ohicbclhdmkhoabobgppffepcopomhgl\n\n\nconst vec3 e = vec3(0.0, 0.0, 0.1);\nconst float maxd = 70.0;\nconst vec3 c = vec3(1.0);\nconst float PI = 3.14159265;\n\nvec2 d = vec2(0.1, 0.0);\nvec3 p;\n\nvec4 Color = vec4(0.0);\nfloat vol = 0.;\n\nvec3 spherical_texturing(in vec3 normal, in sampler2D tex, float delta) {\n     float u = atan(normal.z, normal.x) / PI * 2.0 + delta;\n\t float v = asin(normal.y) / PI * 2.0;\n     return texture(tex, vec2(u, v)).xyz;\n}\n\nmat3 xrotate( float t ) {\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0, cos(t), -sin(t),\n        0.0, sin(t), cos(t)\n    );\n}\n\nmat3 yrotate( float t ) {\n\treturn mat3(\n        cos(t), 0.0, -sin(t),\n        0.0, 1.0, 0.0,\n        sin(t), 0.0, cos(t)\n    );\n}\n\nmat3 zrotate( float t ) {\n    return mat3(\n        cos(t), -sin(t), 0.0,\n        sin(t), cos(t), 0.0,\n        0.0, 0.0, 1.0\n    );\n}\n\nmat3 fullRotate( vec3 r ) { \n   return xrotate(r.x) * yrotate(r.y) * zrotate(r.z);\n}\n\nvec3 opRep( vec3 p, vec3 c ) {\n    return mod(p,c)-0.5*c;\n}\n\nfloat smin( float a, float b, float k ){\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;    \n}\n\nfloat opBlend( float d1, float d2 ) {\n    return smin( d1 , d2 , 0.3);    \n}\n\nfloat opS( float d1, float d2 ) {\n    return max(-d2,d1);\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat sdCross( in vec3 p, float w ) {\n    float inf = 30.;\n    float da = sdBox(p.xyz,vec3(inf, w, w));\n    float db = sdBox(p.yzx,vec3(w, inf, w));\n    float dc = sdBox(p.zxy,vec3(w, w ,inf));\n    return min(da,min(db,dc));\n} \n\nvec2 distance_to_obj( in vec3 p ) {\n    float t = iChannelTime[1];\n    \n    float w = 1.7 - length(p) / (20. + vol * 20.);\n    float x = 0.;\n    \n    if (\t(t > -1. && t < 21.3) || \n        \t(t > 42.4 && t < 54.3)) {\n    \tw -= 4.;  \n    } else {\n    \tx = t;\n        w += (distance(p, vec3(0.)) / 20.) * vol;\n    }\n    \n    w *= 2. + sin(x) * 2. - 2. * vol + abs(sin(x));\n    float map =         \n        opBlend(\n            sdCross(p * fullRotate(vec3(t * 2., 0., t)), w),\n            sdCross(p * fullRotate(\n                vec3(\n                    -PI / 4. + t * 2., 0., PI / 4. + t\n                )),\n               w\n            )\n        );            \n        \n    return vec2(map, 1.);\n}\n\nvec3 opTwist( vec3 p, float r ) {\n    float  c = cos(r * p.y + r);\n    float  s = sin(r * p.y + r);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\n\nfloat shadow( in vec3 ro, in vec3 rd, in float maxt )\n{\n\tfloat res = 5.0;\n    float dt = 0.04;\n    float t = .02;\n    for( int i=0; i < 12; i++ )\n    {       \n        float h = distance_to_obj(ro + rd * t).x;\n        if( h < 0.001 ) return 0.1;\n        res = min( res, maxt * h / t );\n        t += h;\n    }\n    return res;\n}\n\nvec4 bg ( in vec3 ePos, in vec3 eDir ) {\n    vec4 bgColor = vec4(0.1);\n    \n    bgColor.r -= mod(iChannelTime[1], 5.45 / 8.) * vol * 4.; \n    bgColor.rgb += spherical_texturing(ePos, iChannel2, .001).rgb;//(eDir.xy + eDir.zy + eDir.zx) / 4.).r * 0.8;\n    return bgColor * vec4(1., sin(vol), 0.8, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 vPos = fragCoord.xy / iResolution.xy - 0.5;\n    \n    float k = iChannelTime[1] / 1.6;\n    float sk = sin(k), ck = cos(k);\n    \n    vol = texture(iChannel1, vec2(.2, .25)).r;\n    \n    // Camera setup. \n    vec3 vuv = vec3(0, sk, ck); // up\n    vec3 prp = vec3(sk * 60., 1. , ck * -34.); // pos\n    vec3 vrp = vec3(10., sk * 10., 0.); // lookat    \n    \n    vec3 vpn = normalize(vrp - prp) ;\n    vec3 u = normalize(cross(vuv, vpn));\n    vec3 v = cross(vpn, u);\n    vec3 vcv = (prp + vpn);\n    vec3 scrCoord = (vcv + vPos.x * u * iResolution.x/iResolution.y + vPos.y * v);\n    vec3 scp = normalize(scrCoord - prp);\n    \n    float glow = 0.;\n    float minDist= 100.;\n    \n    float f = 2.0;\n    \n    for (float i = 0.; i < 32.; i++) {\n        if ((abs(d.x) < .001) || (f > maxd)) break;\n    \n        f += d.x;\n\n        p = prp + scp * f;\n        p = opTwist(p, 0.08 * sk) * fullRotate(vec3(k * 1.2));\n    \n        //d = distance_to_obj(p);\n        d = distance_to_obj(p); // fixes glitches\n    \n        minDist = min(minDist, d.x * 1.5);\n        glow = pow( 1. / minDist, 1.35);  \n    }\n   \n    if (f < maxd) {      \n        Color = texture(iChannel0, p) / 2. \n            + texture(iChannel0, -reflect(p, scp)) / 2.;\n        Color *= shadow(p, scp, 24.);\n        Color = vec4(Color.g);\n    } else {        \n        Color = bg(-normalize(scp), scp) + pow(glow, .9) * vec4(3., 2., 1., 1.0) * 0.75;\n              \n    }   \n     \n    if (iChannelTime[1] > 19.0 && iChannelTime[1] < 21.45) {\n        Color -= 1. - (21.45 - iChannelTime[1]) / 2.;\n    }\n    \n    // iq vinegre\n    vec2 q = vPos + .5;\n    Color *= 0.4 + 0.6*pow( 32.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n    \n    // Cheap \"bloom emulation\" from backscatter;\n    Color += pow(max(Color - .2, 0.0), vec4(1.4)) * .5;\n    fragColor = Color;// * sin(length(vPos) - 1.5) * -1.2;  \n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 269,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/marek-ku-mierz/paula-loves-fat-bass"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}