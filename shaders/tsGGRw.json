{
    "Shader": {
        "info": {
            "date": "1570089657",
            "description": "Just having a little fun with voronoi and domain manipulation.\nThe base of the effect is an anti-aliased voronoi.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tsGGRw",
            "likes": 14,
            "name": "Kaleidoscope Trip",
            "published": 3,
            "tags": [
                "kaleidoscope"
            ],
            "usePreview": 0,
            "username": "PixelPhil",
            "viewed": 727
        },
        "renderpass": [
            {
                "code": "\nvec3 N13(float p) {\n    //  from DAVE HOSKINS\n   vec3 p3 = fract(vec3(p) * vec3(.1031,.11369,.13787));\n   p3 += dot(p3, p3.yzx + 19.19);\n   return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nvec4 N14(float t) {\n\treturn fract(sin(t*vec4(123., 1024., 1456., 264.))*vec4(6547., 345., 8799., 1564.));\n}\nfloat N(float t) {\n    return fract(sin(t*12345.564)*7658.76);\n}\n\nvec3 ChromaColor(float a)\n{\n    return (vec3(sin(a), sin(a + 1.52), sin(a + 3.14)) * 0.8) + 0.5;\n}\n\n// A cellular voronoi with smooth boundaries and trippy colors\nvec3 voronoi(vec2 pearlsUv, float colorOffset)\n{    \n    vec2 pearlsId =  floor(pearlsUv);\n     \n    pearlsUv = fract(pearlsUv);\n    \n    \n    vec3 chroma;\n    float bestlen = 1000.0;\n    \n    for (float y = -1.0; y <= 1.0; y++)\n    {\n        for (float x = -1.0; x <= 1.0; x++)\n        {\n            vec2 offset =  vec2(x, y);\n            vec2 cellId = pearlsId - offset;\n            vec3 rnd = N13(cellId.x * 34.0 + cellId.y * 345.0);\n            vec2 center = rnd.xy - offset;\n            \n            center.x += sin(iTime * rnd.x) * 0.3;\n            center.y += sin(iTime * rnd.y) * 0.3;\n\n            float len = length(center - (pearlsUv));\n            \n            float diff = bestlen - len;\n            \n        \tfloat thres = 0.04;    \n        \tfloat ratio = (diff + thres) / (2.0 * thres);\n            \n            if (ratio > 0.0)\n            {\n                bestlen = len;\n                vec3 col =  ChromaColor(rnd.z * 100.0 + len * 0.5 + colorOffset);\n\t            chroma = mix(chroma, col, min(ratio, 1.0));\n            }\n        }\n    }\n    \n    return chroma;\n}\n\nvec2 mirror(vec2 uv, vec2 origin, vec2 dir)\n{\n    vec2 offset = uv - origin;\n    float d = dot(offset, dir);\n    if (d < 0.0)\n    {\n        return uv - dir * (2.0 * d);\n    }\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float rot = iTime * 0.21;\n    float s = sin(rot);\n    float c = cos(rot);\n    mat2 rotMat = mat2(s,c,-c,s);\n    uv = uv * rotMat;\n    \n    \n    \n    float centerDst = length(uv);\n    \n    float distort = centerDst * centerDst;\n    \n    uv = abs(uv * (1.0 - distort * 0.2));\n\n    float t1 = iTime * 0.14;\n    float t2 = iTime * 0.2 + 23.0;\n    float t3 = -iTime * 0.24 + 56.0;\n    \n\n    uv = mirror(uv, vec2(0.2, 0.7), vec2(sin(t2), cos(t2)));\n    uv = mirror(uv, vec2(0.4, 0.3), vec2(sin(t3), cos(t3)));\n    uv = mirror(uv, vec2(0.5, 0.5), vec2(sin(t1), cos(t1)));\n    \n    // Time varying pixel color\n\n    vec2 pearlsUv = uv * 10.0 + sin(iTime) * 1.5;\n    \n    pearlsUv.y += iTime * 2.0;\n    \n    \n \n\n\tvec3 chroma = voronoi(pearlsUv, centerDst * 6.0) * smoothstep(1.5, 0.7, centerDst);\n\n    // Output to screen\n    fragColor = vec4(chroma,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}