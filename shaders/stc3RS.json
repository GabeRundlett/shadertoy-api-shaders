{
    "Shader": {
        "info": {
            "date": "1636257757",
            "description": "How to map the vertices of a regular grid to those of an equilateral Cairo pentagonal tiling.",
            "flags": 0,
            "hasliked": 0,
            "id": "stc3RS",
            "likes": 6,
            "name": "Cairo Pentagonal Tiling Grid",
            "published": 3,
            "tags": [
                "tiling",
                "tessellation"
            ],
            "usePreview": 0,
            "username": "TinyTexel",
            "viewed": 338
        },
        "renderpass": [
            {
                "code": "// License: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n// https://twitter.com/Mirko_Salm\n\n/*\n    How to map the vertices of a regular grid to those of a equilateral Cairo pentagonal tiling ( https://en.wikipedia.org/wiki/Cairo_pentagonal_tiling ).\n    One variant of the Cairo pentagonal tiling is dual the snub square tiling                   ( https://en.wikipedia.org/wiki/Snub_square_tiling      ).\n    \n    Related:\n            - \"Snub Square Tiling Grid\": https://www.shadertoy.com/view/7lcGRS\n*/\n\nvec3 GammaEncode(vec3 x) { return pow(x, vec3(1.0 / 2.2)); }\n\nfloat PlotDot(vec2 sp, vec2 dp, float dr)\n{\n    float v = length(sp - dp) - dr;\n    \n    v = smoothstep(1.0, 0.0, v * 16.0);\n    \n    return v;\n}\n\nfloat CheckerBoard(vec2 uv2)\n{\n    bvec2 tl1 = greaterThan(fract(uv2 * 0.5), vec2(0.5));   \n    bvec2 tl2 = greaterThan(fract(uv2 * 0.25 + vec2(0.25, 0.0)), vec2(0.5));   \n\n    if(tl2.x != tl2.y)\n    {\n        return tl1.x != tl1.y ? 0.0 : 0.004;\n    }\n    else\n    {\n        return tl1.x != tl1.y ? 0.02 : 0.04;\n    }\n}\n\n\nvec2 CairoTilingVPos(vec2 uvi)\n{\n    float offX = fract(uvi.x * 0.5) * 2.0;\n    float offY = fract(uvi.y * 0.5) * 2.0;\n    \n    if(offX == 1.0 && offY == 1.0) return vec2(-32.0);// discard point\n    \n    float flipX = fract(uvi.x * 0.25) < 0.5 ? -1.0 : 1.0;\n    float flipY = fract(uvi.y * 0.25) < 0.5 ? -1.0 : 1.0;\n    \n    float flip = flipX * flipY;\n    \n    float offM = 0.451416;// (4 - sqrt(7)) / 3\n    \n    vec2 off = vec2(-offY, offX) * offM * flip;\n    \n    return vec2(0.5) + off;\n}\n \n\nvoid mainImage(out vec4 outCol, in vec2 uv)\n{\n    uv -= floor(iResolution.xy * 0.5);\n    \n\tvec2 tex = uv / iResolution.xy;\n    \n    bool flip = (uint(iFrame) & 1u) != 0u;\n\n    vec3 col = vec3(0.0);\n\n    vec2 uv2 = uv / 32.0;\n    \n    vec2 uvf = fract(uv2);\n    vec2 uvi = floor(uv2);\n    \n    float dots = PlotDot(uvf, CairoTilingVPos(uvi), 0.02);\n    \n  #if 1\n    // ensures that points close to the cell boundaries don't get chopped off (doesn't add additional points)\n    { vec2 o = vec2( 1.0, 0.0); dots = max(dots, PlotDot(uvf, CairoTilingVPos(uvi + o) + o, 0.02)); }\n    { vec2 o = vec2(-1.0, 0.0); dots = max(dots, PlotDot(uvf, CairoTilingVPos(uvi + o) + o, 0.02)); }\n    { vec2 o = vec2( 0.0, 1.0); dots = max(dots, PlotDot(uvf, CairoTilingVPos(uvi + o) + o, 0.02)); }\n    { vec2 o = vec2( 0.0,-1.0); dots = max(dots, PlotDot(uvf, CairoTilingVPos(uvi + o) + o, 0.02)); }\n  #endif\n  \n  #if 1\n    if(tex.x < 0.0)\n    {\n        float s = tex.y < 0.0 ? 1.0 : 2.0;\n        col = vec3(CheckerBoard(uv2*s+vec2(1.0, 0.0))) / s;\n    }\n  #endif\n    \n    \n    col += vec3(dots);\n    \n\toutCol = vec4(GammaEncode(clamp(col, 0.0, 1.0)), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}