{
    "Shader": {
        "info": {
            "date": "1548851138",
            "description": "Play with procedural texturing",
            "flags": 0,
            "hasliked": 0,
            "id": "wdBGDW",
            "likes": 4,
            "name": "Procedural texturing",
            "published": 3,
            "tags": [
                "procedural",
                "texture"
            ],
            "usePreview": 0,
            "username": "macufrax",
            "viewed": 489
        },
        "renderpass": [
            {
                "code": "//\n// https://www.youtube.com/watch?v=PBxuVlp7nuM\n// \n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\nconst float EPSILON = 0.0001;\n\nvec4 NormalizeMouse()\n{\n    vec4 mousePos = vec4(iMouse.xy / iResolution.xy,0.,0.); // xy 0 <> 1\n    mousePos.xy = 1. - mousePos.xy;\n    mousePos.zw = iMouse.zw; // click button states are just copied\n    mousePos.xy -= .5; // xy -.5 <> .5\n    mousePos.xy *= 2.; // xy -1. <> 1.\n    mousePos.x *= iResolution.x/iResolution.y; // compensate for aspect ratio\n    return mousePos;\n}\n\n\n//\n// This function return the distance from a point in 3D space \n// to the view ray\n//\nfloat DistLine( vec3 ro, vec3 rd, vec3 p)\n{\n    return length(cross(p-ro, rd))/length(rd);\n}\n\n// draw a point\n// ro: ray origine\n// rd: ray direction\n// p: point \n//\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p)\n{\n// get the distance from the point p to the view ray\n    float d = DistLine( ro, rd, p);\n\n    // make it a dot not a degrade\n    // comment this line to see distance value\n    d = smoothstep(.06,.05, d);\n    return d;\n}\n\nvec4 s = vec4(0., 1., 6., 1.);\n\nfloat GetDist(vec3 p) {\n    \n    float sphereDist =  length(p-s.xyz)-s.w;\n    float planeDist = p.y+4.+sin(p.x-iTime*2.)+sin(p.z)/2.;\n    \n    float d = min(sphereDist, planeDist);\n    //float d = sphereDist;\n    return d;\n}\n\n/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        GetDist(vec3(p.x + EPSILON, p.y, p.z)) - GetDist(vec3(p.x - EPSILON, p.y, p.z)),\n        GetDist(vec3(p.x, p.y + EPSILON, p.z)) - GetDist(vec3(p.x, p.y - EPSILON, p.z)),\n        GetDist(vec3(p.x, p.y, p.z  + EPSILON)) - GetDist(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.7, 0.7, 0.7);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    return color;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 applyFog( in vec3  rgb,       // original color of the pixel\n               in float distance, // camera to point distance\n               in float b ) // fog density\n{\n    float fogAmount = 1.0 - exp( -distance*b );\n    vec3  fogColor  = vec3(0.4,0.4,0.4);\n    return mix( rgb, fogColor, fogAmount );\n}\n\nvec3 applyFogY( in vec3  rgb,      // original color of the pixel\n               in float distance, // camera to point distance\n               in vec3  rayOri,   // camera position\n               in vec3  rayDir, // camera to point vector\n               in float b,// fog density\n               in float c )  // vertical density ?\n{\n    float fogAmount = c * exp(-rayOri.y*b) * (1.0-exp( -distance*rayDir.y*b ))/rayDir.y;\n    vec3  fogColor  = vec3(0.5,0.6,0.7);\n    return mix( rgb, fogColor, fogAmount );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t  = iTime;\n\tvec2 uv = fragCoord.xy / iResolution.xy; // 0 <> 1\n    uv -= .5; // -.5 <> .5\n    uv.x *= iResolution.x/iResolution.y; // compensate for aspect ratio\n\n    vec4 mousePos = NormalizeMouse();\n\n    //vec3 ro = vec3(3.*sin(t),2.,-3.*cos(t)); //ray origine (eye) in front of screen\n    // zoom factor, eye pos and lookat\n    float zoom = 1.;\n    vec3 ro = vec3(0., 1., -3.);\n\n    if( mousePos.z > .5)\n    {\n        ro = ro + vec3(mousePos.x*10., mousePos.y*10., 0.); //ray origine (eye) in front of screen\n    }\n\n    if( mousePos.w > .5)\n    {\n        zoom += mousePos.y*3.;\n    }\n\n    vec3 lookAt = vec3(0., 1., 0.);\n    \n    vec3 f = normalize(lookAt-ro); // camera FORWARD\n    vec3 r = cross( vec3(0.,1.,0.), f ); // camera RIGHT\n    vec3 u = cross( f, r); // camera UP\n\n    vec3 c =  ro + f*zoom; // center of screen pos\n    vec3 i = c + uv.x*r + uv.y*u; // intersetction between ray and intersection\n\n    vec3 rd = i - ro; // ray vector from origine to point on screen\n        \n    //float d = RayMarch(ro, rd)/15.;\n    float d = RayMarch(ro, rd);\n\n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = ro + d * rd;\n    \n    vec3 K_a = vec3(0.0667, 0.1569, 0.1922);\n    vec3 K_d = vec3(0.0, 0.0, 0.0);\n    vec3 K_s = vec3(0.0157, 0.3255, 0.9922);\n    float shininess = 10.0;\n\n    vec3 fromCenterToP = normalize( p - s.xyz);\n    float fromCenterIntensity = dot(-rd,fromCenterToP );\n\n    float texture = smoothstep( 0.4, 0.5,  fract( p.x*4. + sin(p.y+p.z) + iTime  ));\n\n    //vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, ro);\n    vec3 color = phongIllumination(K_a, vec3(texture, sin(iTime), .1), K_s, shininess, p, ro);\n\n    //fromCenterIntensity *= fromCenterIntensity;\n    \n    //color += fromCenterIntensity * vec3(0.4, .4, 0.); \n\n    //color = applyFog( color, d, 0.02);\n    //color = applyFogY( color, d, ro, rd, 0.05, .1);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}