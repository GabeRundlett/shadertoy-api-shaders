{
    "Shader": {
        "info": {
            "date": "1457055595",
            "description": "Did you know 0 has a sign :-)  (this would work the same in C/C++)\nOn some operation it can makes a difference (including bugs). Here the most trivial: sign of inverse.\nTop: is -0 = or &lt; +0\nBottom : is 1./-0 = or &lt; 1./+0",
            "flags": 0,
            "hasliked": 0,
            "id": "XdKGWt",
            "likes": 4,
            "name": "IEEE 'glsl bug': -0 vs +0",
            "published": 3,
            "tags": [
                "glsl",
                "bug"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1604
        },
        "renderpass": [
            {
                "code": "// see also https://en.wikipedia.org/wiki/Signed_zero\n//          http://www.johndcook.com/blog/2010/06/15/why-computers-have-signed-zero/\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    U = U/iResolution.xy - .5;\n    \n    float  m = -0.,   p = +0., // this are equals for == , but encoded differently (bit sign is set)\n          im = 1./m, ip = 1./p;\n    \n\tO = vec4(\n                U.y>0. ? \n                     U.x<0.  ?  m ==  p :  m <  p   // top :    is -0 = or < +0 ?\n                :    U.x<0.  ? im == ip : im < ip   // bottom : is 1./-0 = or < 1./+0 ?\n        );\n\n    U = abs(U); if (min(U.x,U.y)<.005) O = vec4(1,0,0,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}