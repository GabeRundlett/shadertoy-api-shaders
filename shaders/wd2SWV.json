{
    "Shader": {
        "info": {
            "date": "1575753473",
            "description": "started off rendering a Mandelbrot set and then messed around with everything for this sketch",
            "flags": 32,
            "hasliked": 0,
            "id": "wd2SWV",
            "likes": 7,
            "name": "Floating in Fractals",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "mandlebrot"
            ],
            "usePreview": 0,
            "username": "Quontyn",
            "viewed": 454
        },
        "renderpass": [
            {
                "code": "// Post processing\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.x;\n    uv -= vec2(0.5, 0.5 * iResolution.y / iResolution.x);\n    \n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    fragColor *= 1.0 - pow(length(uv) * 1.2, 0.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define USE_GAMMA_CORRECTION\n#define GAMMA_RATIO 1.0/1.6\n#define AA_LEVEL 2.\n\nstruct Complex\n{\n\tfloat r;\n    float i;\n};\n\nComplex Add(Complex c1, Complex c2)\n{\n\tComplex new;\n    new.r = c1.r + c2.r;\n    new.i = c1.i + c2.i;\n    return new;\n}\n\nComplex Mult(Complex c1, Complex c2)\n{\n\tComplex new;\n    new.r = c1.r * c2.r - c1.i * c2.i;\n    new.i = c1.r * c2.i + c1.i * c2.r;\n    return new;\n}\n\nComplex Conjugate(Complex c)\n{\n\tComplex new;\n    new.r = c.r;\n    new.i = -c.i;\n    return new;\n}\n\nComplex f(Complex p, Complex c)\n{\n\treturn Add(Mult(p, p), c);\n}\n\nfloat Distance(Complex p)\n{\n\treturn p.r*p.r + p.i*p.i;\n}\n\n// Renders the number of iterations it takes to escape our fractal by the given distance\n// and using the given complex constant\nvec4 Render(vec2 uv, float dist, Complex c)\n{\n\tComplex p;\n    p.r = uv.x;\n    p.i = uv.y;\n    \n    float total = 0.0;\n    float iterations = 20. + 50.0 * pow(abs(sin(iTime*0.8)), 0.75);\n    for (int i = 0; i < int(iterations); i++)\n    {\n        total += (1.0 / iterations) * (1.0 + float(i) * 100.0 / iterations);\n        float d = Distance(p);\n    \tif (d > dist)\n            break;\n        p = Conjugate(p);\n        p = f(p, c);\n    }\n\n    return vec4(total, total, total, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // MSAA\n    fragColor = vec4(0.0);\n    float ps = 1.0 / iResolution.x;\n    float t = 0.0;\n    for (float _i = 0.; _i < AA_LEVEL; _i++)\n    {\n    \tfor (float _j = 0.; _j < AA_LEVEL; _j++)\n        {\n            \n            // Calculate coord with AA offset\n            vec2 uv = (fragCoord - (iResolution.xy * 0.5)) / iResolution.x;\n            uv += vec2(ps / AA_LEVEL * _i, ps / AA_LEVEL * _j); \n            \n            // Fit to our domain and do some scaling / rotating animation \n            uv *= 5.0 + sin(iTime*0.3);\n            uv *= mat2(cos(iTime*0.05), -sin(iTime*0.05), sin(iTime*0.05), cos(iTime*0.05));\n\n            vec4 col = vec4(0.0);\n            vec2 origuv = uv;\n\n            // Main circle\n            uv = origuv;\n            float d = 1.;\n            Complex c = Complex(sin(9.18*0.8) * 0.5, cos(9.18) * 0.5);\n            col += clamp(Render(uv, d, c) * 1.4, 0.0, 1.5);\n            col *= smoothstep(d + 0.2, d, length(uv));\n\n            // Sea of Fractals\n            float rot = 1.0;\n            for (float k = 0.; k < 8.; k++)\n            {\n                rot += 1.5;\n                uv *= mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n                Complex c2 = Add(c, Complex(sin(iTime + uv.x * 9.14) * 0.02, cos(iTime + uv.y * 9.14) * 0.02));\n                vec4 r = Render(uv * (0.5 - 0.04 * k) * (0.2 + (sin(iTime * 0.75 + rot * 5.0) * 0.5 + 0.5)), d * (sin(iTime)*0.3+1.2), c2) * (0.1 - 0.015 * k);\n                r.g += (0.45);\n                r *= 1.0 - smoothstep(d + 0.2, d, length(uv));\n                col += r * 0.4;\n            }\n\n            fragColor += vec4(uv.x, 0.3, 0.6, 1.0) * 0.3;\n            fragColor += col.x * vec4(uv.x, 0.3, 0.7, 1.0);\n            fragColor += vec4(0.05, 0.05 * col.g, 0.15, 0.0);\n            \n        \tt++;\n        }\n    }\n    \n    fragColor = fragColor / t;\n    \n    #ifdef USE_GAMMA_CORRECTION\n    \tfragColor = pow(fragColor, vec4(GAMMA_RATIO));\n    #endif\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}