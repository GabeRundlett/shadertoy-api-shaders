{
    "Shader": {
        "info": {
            "date": "1564459974",
            "description": "trying to make iq's inverse squared density sphere (https://www.shadertoy.com/view/XljGDy) work for an infinite cylinder. density falloff looks wrong compared to iq's sphere.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlfSWX",
            "likes": 6,
            "name": "inverse squared density cylinder",
            "published": 3,
            "tags": [
                "shapes"
            ],
            "usePreview": 0,
            "username": "lebek",
            "viewed": 551
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Analytically integrating quadratically decaying participating media within a sphere. \n// No raymarching involved.\n//\n// Related info: https://iquilezles.org/articles/spherefunctions\n\n// cylinder density by lebek, rest by iq (https://www.shadertoy.com/view/XljGDy)\n\n\nfloat cylinderDensity( vec3  ro, vec3  rd,   // ray origin, ray direction\n                  vec3  sc, float sr,   // cylinder center, cylinder radius\n                  float dbuffer )       // depth buffer\n{\n    // normalize the problem to the canonical infinite cylinder\n    float ndbuffer = dbuffer / sr;\n    vec3  rc = (ro - sc)/sr;\n\t\n    // find intersection with infinite cylinder\n    float a = rd.x*rd.x + rd.y*rd.y;\n    float b = 2.0f*rc.x*rd.x + 2.0f*rc.y*rd.y;\n    float c = rc.x*rc.x + rc.y*rc.y - 1.0f;\n    float h = b*b - 4.0f*a*c;\n\n    // not intersecting\n    if( h<0.0 ) return 0.0;\n\t\n    h = sqrt( h );\n    \n    //return h*h*h;\n\n    float d = 2.0f*a;\n    float t1 = (-b - h) / d;\n    float t2 = (-b + h) / d;\n\n    // not visible (behind camera or behind ndbuffer)\n    if( t2<0.0 || t1>ndbuffer ) return 0.0;\n\n    // clip integration segment from camera to ndbuffer\n    t1 = max( t1, 0.0 );\n    t2 = min( t2, ndbuffer );\n    \n    //return min(1.0f, (t2-t1)*0.07f);\n    \n    // analytical integration of an inverse squared density\n    float i1 = atan((t1*rd.y*rd.y + rc.y*rd.y + t1*rd.x*rd.x + rc.x*rd.x) / (rc.x*rd.y - rc.y*rd.x))/(rc.x*rd.y - rc.y*rd.x);\n\tfloat i2 = atan((t2*rd.y*rd.y + rc.y*rd.y + t2*rd.x*rd.x + rc.x*rd.x) / (rc.x*rd.y - rc.y*rd.x))/(rc.x*rd.y - rc.y*rd.x);\n    float density = (i2 - i1)*sr;\n    return min(1.0f, density*0.2f);\n}\n\nfloat sphDensity( vec3  ro, vec3  rd,   // ray origin, ray direction\n                  vec3  sc, float sr,   // sphere center, sphere radius\n                  float dbuffer )       // depth buffer\n{\n    // normalize the problem to the canonical sphere\n    float ndbuffer = dbuffer / sr;\n    vec3  rc = (ro - sc)/sr;\n\t\n    // find intersection with sphere\n    float b = dot(rd,rc);\n    float c = dot(rc,rc) - 1.0;\n    float h = b*b - c;\n\n    // not intersecting\n    if( h<0.0 ) return 0.0;\n\t\n    h = sqrt( h );\n    \n    //return h*h*h;\n\n    float t1 = -b - h;\n    float t2 = -b + h;\n\n    // not visible (behind camera or behind ndbuffer)\n    if( t2<0.0 || t1>ndbuffer ) return 0.0;\n\n    // clip integration segment from camera to ndbuffer\n    t1 = max( t1, 0.0 );\n    t2 = min( t2, ndbuffer );\n\n    // analytical integration of an inverse squared density\n    float i1 = -(c*t1 + b*t1*t1 + t1*t1*t1/3.0);\n    float i2 = -(c*t2 + b*t2*t2 + t2*t2*t2/3.0);\n    return (i2-i1)*(3.0/4.0);\n}\n\nfloat plnIntersect( in vec3 ro, in vec3 rd, vec4 pln )\n{\n    return (pln.w - dot(ro,pln.xyz))/dot(rd,pln.xyz);\n}\n\n//=====================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy) / iResolution.y;\n    \n\tvec3 ro = vec3(0.0, 0.2, 3.0 );\n\tvec3 rd = normalize( vec3(p,-3.0) );\n\t\n    // sphere\n    vec4 sph = vec4( \n        cos( iTime*vec3(1.0,1.1,1.3) + vec3(2.0,1.5,1.5) + 0.0 )\n        * vec3(0.5,0.3,0.7) + vec3(0.0,0.4,0.5), \n                    0.3 );\n    // planes\n    vec4 pl1 = vec4(  0.0, 1.0, 0.0, 0.0 );\n    vec4 pl2 = vec4(  1.0, 0.0, 0.0, 1.0 );\n    vec4 pl3 = vec4( -1.0, 0.0, 0.0, 1.0 );\n    vec4 pl4 = vec4(  0.0, 0.0,-1.0, 1.0 );\n    \n    float th = (-1.0+2.0*smoothstep( 0.8, 0.9, sin( iTime*1.0 )));\n    th *= iResolution.x/iResolution.y;\n    \n    vec3 lig = normalize( vec3(0.6,0.3,0.4) );\n\n\n    \n    float t2 = plnIntersect( ro, rd, pl1 );\n    float t3 = plnIntersect( ro, rd, pl2 );\n    float t4 = plnIntersect( ro, rd, pl3 );\n    float t5 = plnIntersect( ro, rd, pl4 );\n    \n    float tmin = 1000.0;\n    vec4  omin = vec4(0.0);\n    if( t2>0.0 && t2<tmin ) { tmin=t2; omin=pl1; }\n    if( t3>0.0 && t3<tmin ) { tmin=t3; omin=pl2; }\n    if( t4>0.0 && t4<tmin ) { tmin=t4; omin=pl3; }\n    if( t5>0.0 && t5<tmin ) { tmin=t5; omin=pl4; }\n\n    vec3 col = vec3(0.0);\n    \n\n        vec3 pos = ro + tmin*rd;\n\n        col = vec3(0.1,0.15,0.2);\n        col *= 0.8 + 0.4*dot(omin.xyz,lig);\n        \n        vec3 w = abs(omin.xyz);\n        col = (texture( iChannel0, 0.5*pos.zx ).xyz*w.y+\n               texture( iChannel0, 0.5*pos.xy ).xyz*w.z+\n               texture( iChannel0, 0.5*pos.yz ).xyz*w.x)/(w.x+w.y+w.z);\n        col *= 0.3;\n        float occ = 1.0;\n        occ *= smoothstep( 0.0, 0.5, length( pos.xy-vec2( 1.0, 0.0)));\n        occ *= smoothstep( 0.0, 0.5, length( pos.xy-vec2(-1.0, 0.0)));\n        occ *= smoothstep( 0.0, 0.5, length( pos.yz-vec2( 0.0,-1.0)));\n        occ *= smoothstep( 0.0, 0.5, length( pos.xz-vec2( 1.0,-1.0)));\n        occ *= smoothstep( 0.0, 0.5, length( pos.xz-vec2(-1.0,-1.0)));\n        col *= vec3(0.4,0.3,0.2) + vec3(0.6,0.7,0.8)*occ;\n        \n\n\n\n\n        //float h = sphDensity(ro, rd, sph.xyz, sph.w, tmin );\n        float h = cylinderDensity(ro, rd, sph.xyz, sph.w, tmin );\n        if( h>0.0 )\n        {\n            col = mix( col, vec3(0.2,0.5,1.0), h );\n            col = mix( col, 1.15*vec3(1.0,0.9,0.6), h*h*h );\n        }\n    \n    \n    col = sqrt( col );\n        \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}