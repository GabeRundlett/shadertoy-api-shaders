{
    "Shader": {
        "info": {
            "date": "1642476464",
            "description": "simple diamonds sdf",
            "flags": 0,
            "hasliked": 0,
            "id": "7slczX",
            "likes": 5,
            "name": "diamond transformer",
            "published": 3,
            "tags": [
                "raymarching",
                "ray",
                "sdf",
                "diamond"
            ],
            "usePreview": 0,
            "username": "xnio94",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "#define P 3.14159265359\n#define MAXD 100.\nfloat t;\n//y rotation\nvec3 rot(in vec3 p, in float a) {\n\tfloat c = cos(a), s = sin(a);\n\treturn vec3 (c * p.x - s * p.z, p.y, c * p.z + s * p.x);\n}\nfloat diamend( vec3 p)\n{\n\tfloat d=-MAXD;\n    float k=floor(t) + pow(fract(t),9.); //continuous transformations\n    //k=floor(t); //discrete transformations\n    //k=1.;\n    float t1 = k*P/16.,  t2=t1*2.,  t3=t1*3.,  t4=t1*4.;\n    \n    vec3 q;\n    for(float i=0.;i<4.;i++)\n    {\n        q=rot(p,t3-i*t2);\n        q.xz=abs(q.xz);\n        d=max(dot(q, vec3(4.,5.,4.)*.1324)-.804,d);//cut 4 top planes                \n        q.y*=-1.;\n        d=max(dot(q, vec3(5.,7.,5.)*.1005)-.762,d);//and 4 bottom\n    }   \n    for(float i=0.;i<2.;i++)//more plans cutting\n    {\n        q=rot(p, i*t4);\n        d=max(dot(abs(q), vec3(2.,3.,2.)*.2425)-0.5*1.5,d);\n        q=rot(q,-t2);\n        q=vec3(abs(q.x),q.y,abs(q.z));\n        d=max(dot(q, vec3(1.,2.,1.)*.4082)-.7,d);\n    }\n\td=max(p.y-.466,d); //flatten the top\n\treturn d;\n}\nfloat map(vec3 p)\n{\n    p = rot(p,t);\n    return diamend(p);\n\n}\n//check this https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 p )\n{\n    const float h = 1e-5;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n//from https://www.shadertoy.com/view/Xds3zN\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  \n    vec2 mo = iMouse.xy/iResolution.xy;\n\tt = iTime;\n\n    vec3 ta = vec3(0.);\n    float r =2.5;\n    \n    vec3 ro = ta + vec3(r*cos(0.1*t + 7.0*mo.x), .1 + 2.0*mo.y, r*sin(0.1*t + 7.0*mo.x) );\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    vec3 tot = vec3(0.0);\n    vec3 rd = ca * normalize( vec3(uv,2.) );\n\t\n\tfloat dd = 0.0;\n\tvec3 p;\n    //simple ray marching\n\tfor(float i = 0.; i < 64.; i++) {\n\t\tp = ro + rd * dd;\n\t\tfloat d = map(p);\n        dd += d;\n\t\tif (d < 1e-6) {\n\t\t\tbreak;\n\t\t}\n\t}\n    dd = min(6.0, dd);\n\tvec3 n = calcNormal(p);\n    float a = max(0.0,  dot( n ,  normalize(vec3(0.7, 3., 0.))  )); //lights\n    float b = max(0.0,  dot( n , -normalize(vec3(0.7, 2., -.2))   ));//lights\n    fragColor = vec4(0.,0., b*b + a*a , 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}