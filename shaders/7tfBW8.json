{
    "Shader": {
        "info": {
            "date": "1650788589",
            "description": "See these sites for the details.\n\nhttps://www.osar.fr/notes/logspherical/\nhttps://github.com/pac-dev/notes/blob/master/content/logspherical/logpolar3d_rods.glsl\n",
            "flags": 0,
            "hasliked": 0,
            "id": "7tfBW8",
            "likes": 17,
            "name": "log polar sphere",
            "published": 3,
            "tags": [
                "logpolar"
            ],
            "usePreview": 0,
            "username": "takahiroando",
            "viewed": 400
        },
        "renderpass": [
            {
                "code": "/*\nSee these sites for the details.\n\nhttps://www.osar.fr/notes/logspherical/\nhttps://github.com/pac-dev/notes/blob/master/content/logspherical/logpolar3d_rods.glsl\n*/\n\n#define M_PI 3.14151692\n#define AA 1\n\n\n// These lines are parsed by dspnote to generate sliders\nfloat camera_y = 0.5; //dspnote param: 0.5 - 3\nfloat rho_offset = 0.0; //dspnote param: 0 - 10\nfloat density = 13.0; //dspnote param: 5 - 50, 13\nfloat radius = 0.9; //dspnote param: 0.05 - 1, 0.9\n\nfloat height = 0.01;\nfloat lpscale;\n\nfloat sdf(in vec3 p3d)\n{\n\t// Choose 2 dimensions and apply the forward log-polar map\n\tvec2 p = p3d.xz;\n\tfloat r = length(p);\n\tp = vec2(log(r), atan(p.y, p.x));\n\n\t// Scale everything so it will fit nicely in the ]-pi,pi] interval\n\tp *= lpscale;\n\tfloat mul = r/lpscale;\n\n\t// Apply rho-translation, which yields zooming\n\tp.x -= rho_offset + iTime*lpscale*0.23;\n\t\n\t// Turn tiled coordinates into single-tile coordinates\n\tp = mod(p, 2.0) - 1.0;\n\n\t// Get rounded cylinder distance, using the original Y coordinate shrunk\n\t// proportionally to the other dimensions\n\treturn (length(vec3(p, max(0.0, p3d.y/mul))) - radius) * mul;\n}\n\nvec3 color(in vec3 p)\n{\n\tvec3 top = vec3(0.3, 0.4, 0.5);\n\tvec3 ring = vec3(0.6, 0.04, 0.0);\n\tvec3 bottom = vec3(0.3, 0.3, 0.3);\n\tbottom = mix(vec3(0.0), bottom, min(1.0, -1.0/(p.y*20.0-1.0)));\n\tvec3 side = mix(bottom, ring, smoothstep(-height-0.001, -height, p.y));\n\treturn mix(side, top, smoothstep(-0.01, 0.0, p.y));\n}\n\n// Adapted from http://iquilezles.org/www/articles/normalsSDF/normalsSDF.htm\nvec3 calcNormal(in vec3 pos)\n{\n\tvec2 e = vec2(1.0,-1.0)*0.5773;\n\tconst float eps = 0.0005;\n\treturn normalize(\n\t\te.xyy*sdf(pos + e.xyy*eps) + \n\t\te.yyx*sdf(pos + e.yyx*eps) + \n\t\te.yxy*sdf(pos + e.yxy*eps) + \n\t\te.xxx*sdf(pos + e.xxx*eps)\n\t);\n}\n\n// Based on http://iquilezles.org/www/articles/raymarchingdf/raymarchingdf.htm\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 iUV = (2.0 * gl_FragCoord.xy - iResolution.xy) / iResolution.y;\n\tlpscale = floor(density)/M_PI;\n\n\t // camera movement\t\n\tfloat an = 0.04*iTime;\n\tvec3 ro = vec3(1.0*cos(an), camera_y, 1.0*sin(an));\n\tvec3 ta = vec3( 0.0, 0.0, 0.0 );\n\t// camera matrix\n\tvec3 ww = normalize(ta - ro);\n\tvec3 uu = normalize(cross(ww,vec3(0.0,1.0,0.0)));\n\tvec3 vv = normalize(cross(uu,ww));\n\n\tvec3 tot = vec3(0.0);\n\t\n\t#if AA>1\n\tfor(int m=0; m<AA; m++)\n\tfor(int n=0; n<AA; n++)\n\t{\n\t\t// pixel coordinates\n\t\tvec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n\t\tvec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n\t\t#else    \n\t\tvec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\t\t#endif\n\n\t\t// create view ray\n\t\tvec3 rd = normalize(p.x*uu + p.y*vv + 3.5*ww); // fov\n\n\t\t// raymarch\n\t\tconst float tmax = 10.0;\n\t\tfloat t = 0.0;\n\t\tfor( int i=0; i<256; i++ )\n\t\t{\n\t\t\tvec3 pos = ro + t*rd;\n\t\t\tfloat h = sdf(pos);\n\t\t\tif( h<0.0001 || t>tmax ) break;\n\t\t\tt += h;\n\t\t}\n\t\n\t\t// shading/lighting\t\n\t\tvec3 col = vec3(0.0);\n\t\tif( t<tmax )\n\t\t{\n\t\t\tvec3 pos = ro + t*rd;\n\t\t\tvec3 nor = calcNormal(pos);\n\t\t\tfloat dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 );\n\t\t\tfloat amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n\t\t\tcol = color(pos)*amb + color(pos)*dif;\n\t\t}\n\n\t\t// gamma        \n\t\tcol = sqrt( col );\n\t\ttot += col;\n\t#if AA>1\n\t}\n\ttot /= float(AA*AA);\n\t#endif\n\n\tfragColor = vec4(tot, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}