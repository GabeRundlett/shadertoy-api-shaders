{
    "Shader": {
        "info": {
            "date": "1567796162",
            "description": "Cellular automata experiment that evolves over time.",
            "flags": 32,
            "hasliked": 0,
            "id": "WscGz8",
            "likes": 2,
            "name": "Crazy Automata",
            "published": 3,
            "tags": [
                "automata"
            ],
            "usePreview": 0,
            "username": "josplode",
            "viewed": 410
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = pow(texture(iChannel0, fragCoord / iResolution.xy), vec4(3.)) * 15.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec4 sampleAdj(vec2 fragCoord, vec2 offset) {\n    return texture(iChannel0, fract((fragCoord + offset) / iResolution.xy));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 0) {\n        fragColor = vec4(rand(fragCoord));\n    } else {\n        vec4 up = sampleAdj(fragCoord, vec2(0, 1));\n        vec4 down = sampleAdj(fragCoord, vec2(0, -1));\n        vec4 left = sampleAdj(fragCoord, vec2(-1, 0));\n        vec4 right = sampleAdj(fragCoord, vec2(1, 0));\n        \n        vec4 neighbors = up + down + left + right;\n        \n        float frame = float(iFrame);\n        \n        // Noise\n        vec4 pixel = vec4(rand(fragCoord + iTime),\n                      rand(fragCoord - iTime),\n                      rand(fragCoord * 2. + iTime), rand(fragCoord + 2. * iTime)) * 0.5 * \n            frame * frame * frame;\n        \n        // Convergence\n        vec4 div = pixel / (neighbors / 4.);\n        pixel -= div * 0.00940 * pow(frame, 0.4);\n        \n        // Automata\n        if (length(neighbors) > 2.5) {\n            pixel = vec4(0.);\n        } else if (length(neighbors) < 1.) {\n            pixel = vec4(0.);\n        }\n        \n        // Motion\n        float d = pow(frame, 0.9) / 10000.;\n        if (pixel.x > 0.75) { pixel = mix(pixel, left, d); }\n        else if (pixel.x < 0.25) { pixel = mix(pixel, right, d); }\n        if (pixel.y < 0.25) { pixel = mix(pixel, up, d); }\n        else if (pixel.y > 0.75) { pixel = mix(pixel, down, d); }\n        \n        pixel = pow(pixel, vec4(1.0000010139999999));\n        \n        \n        fragColor = clamp(pixel, 0., 1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Anti seizure filter\n// Dampens oscillation from A by temporal interpolation\n\n//#define VISUALIZE\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n#ifdef VISUALIZE\n    \n    if (uv.x > 0.4 && uv.x < 0.6 && uv.y > 0.4 && uv.y < 0.6) {\n        \n        vec2 zoom_nearest = (uv - vec2(0.5)) / 4. + vec2(0.5);\n        \n        zoom_nearest = (round(zoom_nearest * iResolution.xy) + 0.5) / iResolution.xy;\n        \n        fragColor = clamp(mix(\n        \ttexture(iChannel0, zoom_nearest),\n            texture(iChannel1, fragCoord / iResolution.xy),\n            0.9), 0., 1.);\n        \n        return;\n    }\n#endif\n    \n    vec4 pixel = texture(iChannel0, uv);\n    \n#ifdef VISUALIZE\n    if (uv.x > 0.5) {\n        if (uv.y > 0.5) {\n#endif\n    fragColor = clamp(mix(\n        pixel,\n        texture(iChannel1, fragCoord / iResolution.xy),\n    \t0.98), 0., 1.);\n#ifdef VISUALIZE\n        } else {\n        fragColor = clamp(mix(\n        \t1. - pixel * 10.,\n        \ttexture(iChannel1, fragCoord / iResolution.xy),\n            0.9), 0., 1.);\n        }\n    } else {\n        if (uv.y > 0.5) {\n        fragColor = clamp(mix(\n        vec4(length(pixel)) / 2.,\n        texture(iChannel1, fragCoord / iResolution.xy),\n    \t0.8), 0., 1.);\n        } else {\n            if (uv.x < 0.125) {\n            fragColor = clamp(mix(\n        vec4(pixel.r, 0., 0., 0.) / 1.5,\n        texture(iChannel1, fragCoord / iResolution.xy),\n    \t0.8), 0., 1.);\n            } else if (uv.x < 0.25) {\n                fragColor = clamp(mix(\n        vec4(0., pixel.g, 0., 0.) / 1.5,\n        texture(iChannel1, fragCoord / iResolution.xy),\n    \t0.8), 0., 1.);\n            } else if (uv.x < 0.375) {\n                fragColor = clamp(mix(\n        vec4(0., 0., pixel.b, 0.) / 1.5,\n        texture(iChannel1, fragCoord / iResolution.xy),\n    \t0.8), 0., 1.);\n            } else {\n                fragColor = clamp(mix(\n        vec4(pixel.a) / 1.5,\n        texture(iChannel1, fragCoord / iResolution.xy),\n    \t0.8), 0., 1.);\n            }\n        }\n    }\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}