{
    "Shader": {
        "info": {
            "date": "1505651673",
            "description": " Lots of reflection; still doesn't do much... (mouse enabled)",
            "flags": 0,
            "hasliked": 0,
            "id": "XlXcRX",
            "likes": 17,
            "name": "Reflecting Machine",
            "published": 3,
            "tags": [
                "raytracing",
                "raymarching",
                "reflection",
                "gearwheel"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 831
        },
        "renderpass": [
            {
                "code": "// \"Reflecting Machine\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrFlatCylAnDf (vec3 p, float b, float r, float w, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec2 Rot2D (vec2 q, float a);\n\n#define NBLK 12.\n\nvec3 qnBlk[2], ltDir, vnBlk, qHit, qGear, vnCylOut, oblPos, oblSize;\nvec2 qBlk;\nfloat dstFar, tCur, bEdge, tCyc, tMov, bCylRad, bCylHt, dCylOut;\nint idObj;\nconst int idGr = 1, idPln = 2, idConv = 3, idSup = 4, idAx = 5, idBas = 6,\n   idWhl = 7, idSpl = 8;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec4 a4;\n  vec3 q, bPos;\n  float dMin, d, angRot, r, a;\n  dMin = dstFar;\n  q = p - vec3 (1.13 + bEdge, bEdge, 1.);\n  r = length (q.yz);\n  q.yz = Rot2D (q.yz, -0.5 * pi * tMov / 5.);\n  a = (r > 0.) ? atan (q.z, - q.y) / (2. * pi) : 0.;\n  q.yz = Rot2D (q.yz, 2. * pi * (floor (8. * a + 0.5)) / 8.);\n  q.z = abs (q.z);\n  d = max (min (min (abs (r - 1.01) - 0.1, r - 0.3),\n     max (r - 1., dot (q.yz, vec2 (sin (0.8 * 2. * pi / 32.),\n     cos (0.8 * 2. * pi / 32.))))), abs (q.x) - 0.03);\n  if (d < dMin) { dMin = d;  idObj = idWhl;  qHit = q; }\n  d = PrBoxDf (p - vec3 (0., 0.98, 1.), vec3 (1.12, 0.02, 0.1));\n  d = min (d, PrBoxDf (p - vec3 (-1.018, 0.98, 0.51), vec3 (0.1, 0.02, 0.49 - bEdge)));\n  if (d < dMin) { dMin = d;  idObj = idPln; }\n  d = PrFlatCylAnDf (p - vec3 (-0.05, -0.21, 0.), 1., 0.2, 0.01, 0.1);\n  if (d < dMin) { dMin = d;  idObj = idConv; }\n  q = p - vec3 (-0.05, -0.21, 0.);  q.x = abs (q.x) - 1.;\n  d = PrCylDf (q, 0.19, 0.12);\n  if (d < dMin) { dMin = d;  idObj = idSpl;  qHit = q; }\n  q = p - vec3 (0.65, -0.1, 1.);  q.x = abs (q.x) - 0.3;\n  d = PrRoundBoxDf (q, vec3 (0.01, 1.04, 0.06), 0.02);\n  d = min (d, PrRoundBoxDf (p - vec3 (-1.05, -0.1, 1.), vec3 (0.04, 1.04, 0.01), 0.02));\n  q = p - vec3 (-0.05, -0.6, 0.);  q.xz = abs (q.xz) - vec2 (1., 0.2);\n  d = min (d, PrRoundBoxDf (q, vec3 (0.04, 0.54, 0.01), 0.02));\n  q = p - vec3 (-0.33, -0.6, 1.555);  q.x = abs (q.x) - 0.3;\n  d = min (d, PrRoundBoxDf (q, vec3 (0.01, 0.54, 0.04), 0.02));\n  if (d < dMin) { dMin = d;  idObj = idSup; }\n  q = p - vec3 (0.65, bEdge, 1.);\n  d = PrCylDf (q.yzx, 0.04, 0.62);\n  d = min (d, PrCylDf (p - vec3 (0.95, -0.21, 0.), 0.03, 0.27));\n  d = min (d, min (d, PrCylDf (p - vec3 (-1.05, -0.21, 0.55), 0.03, 0.82)));\n  d = min (d, PrCylDf ((p - vec3 (-0.36, -0.21, 1.555)).yzx, 0.03, 0.51));\n  if (d < dMin) { dMin = d;  idObj = idAx; }\n  d = PrBoxDf (p - vec3 (0., -1.2, 0.9), vec3 (1.6, 0.05, 1.4));\n  if (d < dMin) { dMin = d;  idObj = idBas; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nfloat GearWlDf (vec3 p, float rad, float wlThk, float tWid, float nt, float angRot, \n   bool bev, float d)\n{\n  p.xy = Rot2D (p.xy, angRot);\n  p.xy = Rot2D (p.xy, floor (nt * atan (p.y, - p.x) / (2. * pi) + 0.5) * 2. * pi / nt);\n  if (bev) p.xy *= 1.2 - 0.2 * p.z / wlThk;\n  return max (d, - rad - 0.95 * (p.x - 2. * clamp (1.5 * tWid +\n     0.5 * p.x * step (0., p.x) - abs (p.y), 0., tWid)));\n}\n\nfloat GearDf (vec3 p)\n{\n  vec3 q;\n  float dMin, angRot, wlThk, tWid, nt, rad, d;\n  dMin = dstFar / 0.3;\n  angRot = 0.1 * pi * tMov;\n  rad = 0.3;\n  wlThk = rad / 7.;\n  tWid = rad / 10.;\n  nt = 20.;\n  q = - (p - vec3 (-1.05, -0.21, 1.3));\n  d = max (length (q.xy) - rad, abs (q.z) - wlThk);\n  if (d < dMin) {\n    d = GearWlDf (q, rad, wlThk, tWid, nt, angRot, true, d);\n    if (d < dMin) { dMin = d;  qGear = q / rad; }\n  } else dMin = min (dMin, d);\n  q = (p - vec3 (-1.05 + 0.85 * rad, -0.21, 1.3 + 0.85 * rad)).yzx;\n  d = max (length (q.xy) - rad, abs (q.z) - wlThk);\n  if (d < dMin) {\n    d = GearWlDf (q, rad, wlThk, tWid, nt, angRot + pi / nt, true, d);\n    if (d < dMin) { dMin = d;  qGear = q / rad; }\n  } else dMin = min (dMin, d);\n  angRot = -0.1 * pi * tMov;\n  rad = 0.39;\n  wlThk = rad / 15.;\n  tWid = rad / 16.;\n  nt = 36.;\n  q = (p - vec3 (0.1, bEdge, 1.)).yzx;\n  d = max (length (q.xy) - rad, abs (q.z) - wlThk);\n  if (d < dMin) {\n    d = GearWlDf (q, rad, wlThk, tWid, nt, angRot, false, d);\n    if (d < dMin) { dMin = d;  qGear = q / rad; }\n  } else dMin = min (dMin, d);\n  q = - (p - vec3 (0.1, -0.21, 1.555)).zyx;\n  d = max (length (q.xy) - rad, abs (q.z) - wlThk);\n  if (d < dMin) {\n    d = GearWlDf (q, rad * 2./3., wlThk, tWid, nt * 2./3., angRot * 3./2., false, d);\n    if (d < dMin) { dMin = d;  qGear = q / rad; }\n  } else dMin = min (dMin, d);\n  return 0.3 * dMin;\n}\n\nfloat GearRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 250; j ++) {\n    d = GearDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 GearNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.0005, -0.0005, 0.);\n  v = vec4 (GearDf (p + e.xxx), GearDf (p + e.xyy), GearDf (p + e.yxy), GearDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.0005, -0.0005, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec4 MvBlkPos (float t)\n{\n  vec3 p;\n  float a;\n  t = mod (t, tCyc);\n  if (t < 20.) {\n    a = 0.;\n    p = vec3 (-1.018 + 2.118 * t / 20., bEdge, 0.);\n  } else if (t < 25.) {\n    a = 0.5 * pi * (t - 20.) / 5.;\n    p = vec3 (1.1, bEdge + 1. * sin (a), 1. - 1. * cos (a));\n  } else if ( t < 45.) {\n    a = 0.5 * pi;\n    p = vec3 (1.1 - 2.118 * (t - 25.) / 20., 1. + bEdge, 1.);\n  } else if (t < 55.) {\n    a = 0.5 * pi;\n    p = vec3 (-1.018, 1. + bEdge, 1. - 1. * (t - 45.) / 10.);\n  } else {\n    t = 0.5 * (t - 55.);\n    a = -0.5 * pi * t;\n    p = vec3 (-1.018, 1. + bEdge - t * t, 0.);\n  }\n  return vec4 (p, a);\n}\n\nfloat MvBlkHit (vec3 ro, vec3 rd)\n{\n  vec4 a4;\n  vec3 rm, rdm, u, v, tm, tp;\n  float dMin, dn, df;\n  dMin = dstFar;\n  for (float k = 0.; k < NBLK; k ++) {\n    a4 = MvBlkPos (tMov + tCyc * k / NBLK);\n    rm = ro - a4.xyz;\n    rdm = rd;\n    rm.zy = Rot2D (rm.zy, a4.w);\n    rdm.zy = Rot2D (rdm.zy, a4.w);\n    v = rm / rdm;\n    tp = bEdge / abs (rdm) - v;\n    tm = - tp - 2. * v;\n    dn = max (max (tm.x, tm.y), tm.z);\n    df = min (min (tp.x, tp.y), tp.z);\n    if (df > 0. && dn < min (df, dMin)) {\n      dMin = dn;\n      vnBlk = - sign (rdm) * step (tm.zxy, tm) * step (tm.yzx, tm);\n      u = (v + dn) * rdm;\n      qBlk = vec2 (dot (u.zxy, vnBlk), dot (u.yzx, vnBlk));\n      vnBlk.zy = Rot2D (vnBlk.zy, - a4.w);\n    }\n  }\n  return dMin;\n}\n\nfloat BlkHit (vec3 ro, vec3 rd, vec3 bSize)\n{\n  vec3 v, tm, tp;\n  float dMin, dn, df;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  dMin = dstFar;\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    qnBlk[0] = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    qnBlk[1] = - sign (rd) * step (tp, tp.zxy) * step (tp, tp.yzx);\n  }\n  return dMin;\n}\n\nvoid InCylHit (vec3 ro, vec3 rd)\n{\n  vec3 s;\n  float a, b, w, ws, srdy;\n  dCylOut = dstFar;\n  vnCylOut = vec3 (0.);\n  a = dot (rd.xz, rd.xz);\n  b = dot (rd.xz, ro.xz);\n  w = b * b - a * (dot (ro.xz, ro.xz) - bCylRad * bCylRad);\n  if (w > 0.) {\n    ws = sqrt (w);\n    srdy = sign (rd.y);\n    if (a > 0.) {\n      dCylOut = (- b + ws) / a;\n      s = ro + dCylOut * rd;\n    } else s.y = bCylHt;\n    if (abs (s.y) < bCylHt) vnCylOut.xz = - s.xz / bCylRad;\n    else {\n      dCylOut = (- srdy * ro.y + bCylHt) / abs (rd.y);\n      vnCylOut.y = - srdy;\n    }\n  }\n}\n\n#define SQRT3 1.7320508\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./SQRT3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (SQRT3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HexGrid (vec2 p)\n{\n  vec2 q;\n  p -= HexToPix (PixToHex (p));\n  q = abs (p);\n  return vec3 (p, (SQRT3/2.) - q.x + 0.5 * min (q.x - SQRT3 * q.y, 0.));\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float sd, f;\n  if (rd.y < 0.) {\n    rd.y = 0.;\n    rd = normalize (rd);\n  }\n  ro.xz += tCur;\n  sd = max (dot (rd, ltDir), 0.);\n  f = Fbm2 (0.04 * (rd.xz * (100. - ro.y) / max (rd.y, 0.001) + ro.xz));\n  col = vec3 (0.15, 0.25, 0.5) + 0.1 * pow (sd, 16.) + 0.2 * pow (sd, 256.);\n  col = mix (col, vec3 (0.9), clamp (3. * (f - 0.5) * rd.y + 0.1, 0., 1.));\n  return col;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, gCol, qh;\n  vec2 qw, iw;\n  float hy, hhy, hw, ww, f, b, aa, sRotH, sRotV;\n  InCylHit (ro + vec3 (0., - bCylHt + 1.25, 0.), rd);\n  if (vnCylOut.y == 0.) {\n    ro += dCylOut * rd;\n    vn = vnCylOut;\n    hy = (ro.y - 1.75) / bCylHt;\n    hhy = abs (hy) - 0.43;\n    aa = atan (vn.x, - vn.z) /pi;\n    sRotH = mod (64. * 0.5 * (1. + aa) + 0.5, 1.) - 0.5;\n    hw = 0.29;\n    ww = 0.28;\n    qw = abs (vec2 (sRotH, hhy));\n    if (qw.x < ww && qw.y < hw) {\n      qw = abs (qw - 0.5 * vec2 (ww, hw)) - vec2 (0.44 * ww, 0.47 * hw);\n      if (max (qw.x, qw.y) < 0.) col = 0.7 * SkyCol (ro, reflect (rd, vn));\n      else col = vec3 (0.5, 0.5, 0.3) * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n         0.5 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n    } else {\n      col = vec3 (0.8, 0.7, 0.5);\n      qw -= vec2 (ww, hw);\n      if (abs (hy) > (1. - 0.85/16.) || max (qw.x, qw.y) < 0.02) {\n        vn.xz = Rot2D (vn.xz, - pi * aa);\n        if (abs (hy) > (1. - 0.85/16.)) {\n          sRotV = (1. - abs (2. * SmoothBump (1. - 0.9/16., 0.97, 0.03, abs (hy)) - 1.));\n        } else {\n          sRotV = (1. - abs (2. * SmoothBump (hw, hw + 0.02, 0.02, abs (hhy)) - 1.)) * sign (hhy);\n          vn.xz = Rot2D (vn.xz, 0.4 * pi * sign (sRotH) *\n             (1. - abs (2. * SmoothBump (- (ww + 0.02), ww + 0.02, 0.04, sRotH) - 1.)));\n        }\n        vn.yz = Rot2D (vn.yz, -0.2 * pi * sRotV * sign (hy));\n        vn.xz = Rot2D (vn.xz, pi * aa);\n      } else {\n        qw = 16. * vec2 (24. * (0.5 * aa), hy);\n        col *= 1. - 0.3 * Noisefv2 (10. * qw);\n        iw = floor (qw);\n        if (2. * floor (iw.y / 2.) != iw.y) {\n          qw.x += 0.5;\n          iw = floor (qw);\n        }\n        qw = smoothstep (0.07, 0.08, abs (fract (qw + 0.5) - 0.5));\n        col *= (0.8 + 0.2 * qw.x * qw.y);\n      }\n      col = col * (0.3 + 0.7 * max (dot (vn, ltDir), 0.)) +\n         0.1 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n    }\n  } else if (vnCylOut.y > 0.) {\n    ro += dCylOut * rd;\n    b = 1. - smoothstep (-0.1, -0.01, rd.y) * smoothstep (0.4, 0.8, dCylOut / (1.6 * bCylRad));\n    qh = HexGrid (4. * ro.zx);\n    f = max (length (qh.xy) - 0.5, 0.) * b;\n    vn = vec3 (0., Rot2D (vec2 (1., 0.), 4. * f * f));\n    vn.zx = vn.z * vec2 (qh.x, - qh.y) / length (qh.xy);\n    vn = VaryNf (50. * ro, vn, 0.2 * b);\n    gCol = vec3 (0.7, 0.7, 0.8) * (1. - 0.1 * b * Noisefv2 (100. * ro.xz));\n    col = gCol * (1. - min (0.2 * b * (1. - smoothstep (0.03, 0.06, qh.z)), 0.1));\n    col = col * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       0.1 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n    col *= 0.7 + 0.3 * smoothstep (0., 4., BlkHit (ro + oblPos, ltDir, oblSize));\n  } else col = SkyCol (ro, rd);\n  return col;\n}\n\nvec4 ObjCol (vec3 ro, vec3 vn)\n{\n  vec3 col, q;\n  float spec, r, a, s;\n  if (idObj == idWhl) {\n    col = vec3 (0.7, 0.9, 0.3);\n    q = ro - vec3 (1.13 + bEdge, bEdge, 1.);\n    r = length (q.yz);\n    q.yz = Rot2D (q.yz, -0.5 * pi * tMov / 5.);\n    a = (r > 0.) ? atan (q.z, - q.y) / (2. * pi) : 0.;\n    a = mod (64. * a + 0.5, 1.);\n    if (r > 0.99) vn.yz = Rot2D (vn.yz, - sin (a - 0.5));\n    if (r > 0.92) col *= 0.7 + 0.3 * SmoothBump (0.05, 0.95, 0.01, a);\n    spec = 0.5;\n  } else if (idObj == idGr) {\n    col = vec3 (0.8, 0.7, 0.3);\n    spec = 0.5;\n  } else if (idObj == idSpl) {\n    q = ro - vec3 (-0.05, -0.21, 0.);\n    s = sign (q.x);\n    q.x = abs (q.x) - 1.; \n    q.xy = Rot2D (q.xy, 0.1 * s * pi * tMov);\n    a = atan (q.x, - q.y) / (2. * pi);\n    a = mod (16. * a + 0.5, 1.);\n    if (abs (ro.z) > 0.1) {\n      col = vec3 (0.8, 0.8, 0.85);\n      spec = 0.5;\n    } else col = vec3 (0.4, 0.4, 0.3);\n    col *= 0.5 + 0.5 * SmoothBump (0.05, 0.95, 0.01, a);\n  } else if (idObj == idAx) {\n    col = vec3 (0.8, 0.8, 0.85);\n    spec = 0.5;\n  } else if (idObj == idPln) {\n    col = vec3 (0.3, 0.2, 0.);\n    spec = 0.;\n  } else if (idObj == idConv) {\n    q = ro - vec3 (-0.05, -0.21, 0.);\n    col = vec3 (0.8, 0.8, 0.2);\n    if (abs (q.x) < 1. && abs (vn.y) > 0.99 && sign (vn.y) != sign (q.y))\n       col *= 1. - 0.9 * SmoothBump (0.45, 0.55, 0.03,\n       mod (10. * (q.x - sign (q.y) * mod (0.9 * tMov, 20.) * 0.1 * 2. * pi * 0.19), 1.));\n  } else if (idObj == idSup) {\n    col = vec3 (0.4, 0.3, 0.1);\n  } else if (idObj == idBas) {\n    q = ro;\n    q.z -= 0.9;\n    q.xz = abs (q.xz) - vec2 (1.55, 1.35);\n    col = (max (q.x, q.z) > 0.) ? vec3 (0.2, 0.1, 0.) : vec3 (0., 0.1, 0.05);\n    spec = 0.;\n  }\n  return vec4 (col, spec);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 vn, col, roo, rdo, q;\n  float dstObj, dstGear, dstMvBlk, dstBlk, reflAtn;\n  bool doRefl, hitOrig;\n  oblPos = vec3 (0., -0.05, -0.9);\n  oblSize = vec3 (1.6, 1.3, 1.4);\n  col = BgCol (ro, rd);\n  dstBlk = BlkHit (ro + oblPos, rd, oblSize);\n  roo = ro;\n  rdo = rd;\n  if (dstBlk < dstFar) {\n    tCyc = 57.;\n    tMov = 2. * tCur;\n    bEdge = 0.08;\n    reflAtn = 1.;\n    hitOrig = false;\n    for (int nr = 0; nr < 3; nr ++) {\n      doRefl = false;\n      dstGear = GearRay (ro, rd);\n      dstObj = ObjRay (ro, rd);\n      if (dstGear < min (dstObj, dstFar)) {\n        dstObj = dstGear;\n        idObj = idGr;\n      }\n      dstMvBlk = MvBlkHit (ro, rd);\n      if (dstMvBlk < min (dstObj, dstFar)) {\n        vn = vnBlk;\n        q.xy = abs (qBlk);\n        doRefl = (max (q.x, q.y) < 0.85 * bEdge);\n        if (doRefl) ro += rd * dstMvBlk;\n      } else if (dstObj < dstFar) {\n        q = ro + rd * dstObj;\n        if (idObj == idGr) {\n          if (abs (length (qGear.xy) - 0.38) < 0.17) {\n            vn = GearNf (q);\n            doRefl = true;\n          }\n        } else if (idObj == idBas) {\n          vn = ObjNf (q);\n          q.z -= 0.9;\n          q.xz = abs (q.xz) - vec2 (1.55, 1.35);\n          doRefl = (vn.y > 0. && max (q.x, q.z) < 0.);\n        } else if (idObj == idPln) {\n          vn = ObjNf (q);\n          doRefl = (vn.y > 0.99);\n        } else if (idObj == idWhl) {\n          doRefl = (abs (length (qHit.yz) - 0.61) < 0.45);\n          if (doRefl) vn = ObjNf (q);\n        } else if (idObj == idSpl) {\n          vn = ObjNf (q);\n          doRefl = (abs (vn.z) > 0.99 && abs (length (qHit.xy) - 0.13) < 0.04);\n        }\n        if (doRefl) ro += rd * dstObj;\n      }\n      if (doRefl) {\n        rd = reflect (rd, vn);\n        ro += 0.01 * rd;\n        reflAtn *= 0.9 * reflAtn;\n      } else break;\n    }\n    if (dstMvBlk < min (dstObj, dstFar)) {\n      dstObj = dstMvBlk;\n      ro += rd * dstObj;\n      vn = vnBlk;\n      qBlk = abs (qBlk);\n      col4 = (max (qBlk.x, qBlk.y) > 0.85 * bEdge) ? vec4 (0.3, 1., 0.3, 0.5) :\n         vec4 (0.4, 0.4, 0.4, 0.1);\n    } else if (dstObj < dstFar) {\n      ro += rd * dstObj;\n      vn = (idObj == idGr) ? GearNf (ro) : ObjNf (ro);\n      col4 = ObjCol (ro, vn);\n    } else if (reflAtn < 1.) col = BgCol (ro, rd);\n    if (min (dstMvBlk, dstObj) < dstFar) {\n      col = col4.rgb * (0.2 + 0.8 * max (dot (vn, ltDir), 0.)) +\n           col4.w * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n      hitOrig = (reflAtn == 1.);\n    }\n    col *= reflAtn;\n    if (! hitOrig) col *= vec3 (0.95, 1., 0.95) * (0.8 + 0.2 * dot (rdo, - qnBlk[1]));\n    col = mix (col,  vec3 (1.) * (0.2 + 0.8 * max (dot (ltDir, qnBlk[0]), 0.) +\n       0.5 * pow (max (dot (normalize (ltDir - rdo), qnBlk[0]), 0.), 128.)), 0.15);\n    col = mix (col, BgCol (roo, reflect (rdo, qnBlk[0])), pow (1. - abs (dot (rdo, qnBlk[0])), 5.));\n  }\n  col = pow (clamp (col, 0., 1.), vec3 (0.8));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 20.;\n  bCylRad = 16.;\n  bCylHt = 3.;\n  az = -0.85 * pi;\n  el = 0.05 * pi;\n  if (mPtr.z > 0.) {\n    az -= 2. * pi * mPtr.x;\n    el -= 0.7 * pi * mPtr.y;\n  }\n  rd = normalize (vec3 (uv, 4.));\n  ro = vec3 (0., 0., -0.75 * bCylRad);\n  el = clamp (el, 0.015 * pi, 0.4 * pi);\n  ro.yz = Rot2D (ro.yz, el);\n  rd.yz = Rot2D (rd.yz, el);\n  ro.xz = Rot2D (ro.xz, az);\n  rd.xz = Rot2D (rd.xz, az);\n  ltDir = normalize (vec3 (1., 2., -1.));\n  ltDir.yz = Rot2D (ltDir.yz, el);\n  ltDir.xz = Rot2D (ltDir.xz, az);\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCylAnDf (vec3 p, float b, float r, float w, float h)\n{\n  p.x -= b * clamp (p.x / b, -1., 1.);\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}