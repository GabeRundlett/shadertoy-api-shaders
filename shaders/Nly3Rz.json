{
    "Shader": {
        "info": {
            "date": "1637027813",
            "description": "a head",
            "flags": 0,
            "hasliked": 0,
            "id": "Nly3Rz",
            "likes": 9,
            "name": "a head",
            "published": 3,
            "tags": [
                "ahead"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 349
        },
        "renderpass": [
            {
                "code": "///-------------image\n\n//por jorge2017a2-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\n//operacion de Union  por FabriceNeyret2\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define opU(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define S(a,b,c) smoothstep(a,b,c)\n\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n\t{ vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r; }\nfloat sdTorus( vec3 p, vec2 t )\n\t{ vec2 q = vec2(length(p.xz)-t.x,p.y);  return length(q)-t.y; }\nfloat sdCylinderYZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.yz),p.x)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXY( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xy),p.z)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\n\n\n\nfloat opSmoothUnion( float d1, float d2, float k ) \n{   float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) \n{   float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) \n{   float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{ float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\nvec3 GetDist(vec3 p  ) \n{\tvec3 res= vec3(9999.0, -1.0,-1.0); \n    p.y=p.y-10.0;\n    vec3 p0=p;\n    \n\tfloat planeDist1 = p.y+10.0;  //piso inf\n    res =opU3(res, vec3(planeDist1,-1.0,7.0)); //inf\n   \n     //cabeza \n    float dCabeza= sdEllipsoid( p- vec3(0.0,0.0,0.0), vec3(5.0,6.0,4.0) ) ;\n    \n    p.x=abs(p.x)-1.5;\n    float dOjosHueco=sdEllipsoid(p-vec3(0.0,0.0,-2.5), vec3(1.5,1.5,1.5) );\n    dCabeza= opSmoothSubtraction( dOjosHueco, dCabeza, 0.35) ;\n    \n    float t=iTime*2.0;\n    vec3 pos=vec3(0.0+0.3*sin(t),0.3*cos(t),0.0);\n    float  dIrisG=sdEllipsoid(p-vec3(0.0,0.0,-4.0)+pos, vec3(0.9,1.0,1.5) );\n    float  dPupilaCh=sdEllipsoid(p-vec3(0.0,0.0,-4.0)+pos*0.8, vec3(0.5,0.7,1.5) );\n    \n    vec3 p2=p0;\n    \n    float  dPupilaRefA=sdEllipsoid(p2-vec3(-1.7+0.25,0.25,-4.0)-vec3(pos.x,-pos.y,pos.z)*0.5, vec3(0.25,0.27,1.5) );\n    float  dPupilaRefB=sdEllipsoid(p2-vec3( 1.7-0.25,0.25,-4.0)+pos*0.5, vec3(0.25,0.27,1.5) );\n    \n    dIrisG= intersectSDF(dOjosHueco,dIrisG);\n    dPupilaCh= intersectSDF(dOjosHueco,dPupilaCh);\n    dPupilaRefA= intersectSDF(dOjosHueco,dPupilaRefA);\n    dPupilaRefB= intersectSDF(dOjosHueco,dPupilaRefB);\n    \n    p=p0;\n    float dBocaHueco=sdEllipsoid(p-vec3(0.0,-3.0,-3.0), vec3(1.5,0.8+0.3*sin(iTime),1.5) );\n    float dBocaDif=sdEllipsoid(p-vec3(0.0,-3.0,-1.5), vec3(2.5,1.0,1.6) );\n    float dBocaFondo=sdEllipsoid(p-vec3(0.0,-3.0,-1.0), vec3(2.5,1.0,1.5) );\n    float dBocaDientesA=sdEllipsoid(p-vec3(-0.5,-2.3,-1.5), vec3(0.5,0.85,1.5) );\n    float dBocaDientesB=sdEllipsoid(p-vec3( 0.0,-2.3,-1.5), vec3(0.5,0.95,1.5) );\n    float dBocaDientesC=sdEllipsoid(p-vec3( 0.5,-2.4,-1.5), vec3(0.5,0.85,1.5) );\n    \n    dCabeza= opSmoothSubtraction( dBocaHueco,dCabeza, 0.35) ;\n    dCabeza= differenceSDF(dCabeza,dBocaDif);\n    \n    vec3 prn=rotate_x(p-vec3(0.,-1.0,-2.7), radians(-30.0));\n    float dNariz= sdRoundBox(prn, vec3(0.065,0.8,1.5), 0.25 );\n    \n    dCabeza= opSmoothUnion( dCabeza, dNariz, 0.25 ) ;\n    \n    res =opU3(res, vec3(dCabeza,33.0,-1.0));\n    res =opU3(res, vec3(dOjosHueco,1.0,-1.0));\n    res =opU3(res, vec3(dIrisG,-1.0,10.0));\n    res =opU3(res, vec3(dPupilaCh,0.0,-1.0));\n    res =opU3(res, vec3(dPupilaRefA,1.0,-1.0));\n    res =opU3(res, vec3(dPupilaRefB,1.0,-1.0));\n    res =opU3(res, vec3(dBocaFondo,0.0,-1.0));\n    res =opU3(res, vec3(dBocaDientesA,1.0,-1.0));\n    res =opU3(res, vec3(dBocaDientesB,1.0,-1.0));\n    res =opU3(res, vec3(dBocaDientesC,1.0,-1.0));\n\n    //pelo\n    p=p0;\n    float dpelo1=sdTorus( p.xzy-vec3(0.0,-2.5,-0.5), vec2(5.0,0.3) );\n    vec3 pr1=rotate_y(p, radians(-10.0));\n    float dpelo2=sdTorus( pr1.xzy-vec3(0.0,-1.5,-1.5), vec2(7.0,0.28) );\n    vec3 pr2=rotate_y(p, radians(10.0));\n    float dpelo3=sdTorus( pr2.xzy-vec3(0.0,-1.5,-1.5), vec2(7.0,0.28) );\n\n    float dpelodif= sdBox( p- vec3(0.0,-5.5,0.0), vec3(8.0,3.0,3.0) );\n    dpelo1= differenceSDF(dpelo1,dpelodif);\n    dpelo2= differenceSDF(dpelo2,dpelodif);\n    dpelo3= differenceSDF(dpelo3,dpelodif);\n    res =opU3(res, vec3(dpelo1,2.0,-1.0));\n    res =opU3(res, vec3(dpelo2,5.0,-1.0));\n    res =opU3(res, vec3(dpelo3,6.0,-1.0));\n    \n    //ceja\n    p.x=abs(p.x)-2.0;\n    float dCeja= sdBox( p-vec3(0.0,2.0,-2.0), vec3(1.0,0.125,2.0) );\n    dCeja= intersectSDF(dCeja,dCabeza);\n    \n    res =opU3(res, vec3(dCeja,0.0,-1.0));\n    \n    return res;\n}\n\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   float t = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0,minDist = 9999.0;\n    vec3 p;\n\n    for(int i=0; i <= PMaxSteps; i++) \n    {  \tp = ro + rd*t;\n        dS = GetDist(p);\n        t += dS.x;\n        if ( abs(dS.x)<MIN_DIST  || i == PMaxSteps)\n            {mObj.hitbln = true; minDist = abs(t); break;}\n        if(t>MAX_DIST)\n            {mObj.hitbln = false;    minDist = t;    break; } \n        marchCount++;\n    }\n    mObj.dist = minDist;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    mObj.phit=p;\n    return t;\n}\n\nfloat GetShadow(vec3 p, vec3 plig)\n{   vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l , MAX_STEPS/2);\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n\nvec3 amb(vec3 c, float k)\n{  return c * k; }\n\nfloat diff(vec3 p,vec3 lp,vec3 n )\n{   vec3 l = normalize(lp - p);\n    float dif = clamp(dot(l, n), 0.0, 1.0);\n    return dif;\n}\nfloat spec( vec3 p, vec3 lp,vec3 rd,vec3 n )\n{ vec3 l = normalize(lp - p);\n  vec3 r = reflect(-l, n);\n  float spe =pow(clamp(dot(r, -rd), 0.0, 1.0), 20.0);\n  return spe;\n}\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 col) \n{   vec3 l = lp - p;\n    vec3 ldir = normalize(p-rd);\n\n    float distA = max(length(l), 0.01);\n    float distB = 1.0/(length(p-lp));\n    float dist=(distA+distB)/2.0;\n    float atten = min(1./(1. + dist*0.5), 0.2);\n    l /= (dist);\n\n    vec3 n = normal;\n   \tvec3 r = reflect(-l, n);\n\n    vec3 amb=amb(col, 0.5);\n    float dif = diff( p, lp, n );\n    float diff=max(dot(normalize(p-lp), -n), 0.0);;\n    vec3 ln=normalize(lp);\n    \n    float spe= spec(  p,  lp, rd, n );\n    float fre = pow(clamp(1.0 + dot(n, rd), 0.0, 1.0), 2.0);\n    float dom = smoothstep(-1.0, 1.0, r.y);\n     float bac=clamp(dot(n,-l),0.0,1.0);\n    float rim=pow(1.0+dot(n,rd),3.0);\n    float dn=.15*max(0.,dot(normalize(rd),-n));\n\n     vec3  hal = normalize(-rd+l);\n     float dif3 = clamp( dot(n,l), 0.0, 1.0 );\n     float amb2 = clamp( 0.5 + 0.5*dot(n,vec3(0.0,1.0,0.0)), 0.0, 1.0 );\n     float occ = 0.5 + 0.5*n.y;\n\n    float fshadow;\n    float sh = clamp(dot(n,normalize(lp)),0.0,1.0);\n\n    if (mObj.blnShadow==true)\n        {fshadow=GetShadow(p,lp);}\n    else\n        {fshadow=0.5;}\n\n    vec3 lin=vec3(1.0);\n    lin*= amb*amb2*occ;\n    lin += 1.0*(dif+diff+dif3)*sh;\n    lin += 2.5*spe*vec3(1.0);\n    lin += 2.5*fre*vec3(1.);\n    lin += 0.5*dom*vec3(1.);\n    lin += 0.35*bac*vec3(1.);\n    lin += 0.35*rim*vec3(1.);\n    lin += 0.35*rim*dn*vec3(1.);\n    lin += 0.4*pow(clamp(dot(hal,n),0.0,1.0),12.0)*dif3;\n      lin *= atten*0.5*col*fshadow;\n    lin *= vec3(1.0)*  max(normalize(vec3(length(lin))).z, 0.)+ .75; \n    lin = pow(lin,vec3(0.4545));\n \n    return lin;\n}\n\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{  float intensity=1.0;\n     vec3 result;\n    result = lightingv3( nor, p, plight_pos,  rd,ro, colobj);\n    return result;\n}\n\nvec3 render_sky_color(vec3 rd)\n{   float t = (rd.x + 1.0) / 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n\treturn sky;\n}\n\n//https://www.shadertoy.com/view/4lcSRn   ///IQ\nvec3 pattern( in vec2 uv )\n{   vec3 col = vec3(0.4);\n    col += 0.4*smoothstep(-0.01,0.02,cos(uv.x*0.5)*cos(uv.y*0.5)); \n    col *= smoothstep(-1.0,-0.98,cos(uv.x))*smoothstep(-1.0,-0.98,cos(uv.y));\n    return col;\n}\n\nvec3 getMaterial( vec3 pp, float id_material)\n{ vec3 col=vec3(1.0);\n  vec3 p=pp;\n  vec3 l1;\n    \n    if (id_material==7.0)\n    {return pattern( p.xz );}\n    \n    if (id_material==8.0)\n    {return pattern( p.xy );}\n    \n    if (id_material==9.0)\n    {return pattern( p.zy );}\n    \n    if (id_material==10.0)\n    {  vec3 blue = vec3(0.3, 0.8, 1.0);\n       vec3 blue2 = vec3(0.1, 0.2, 0.8);\n       return  mix(blue, blue2, S(0.1, 1.3,mObj.uv.y * 5.0));\n    }\n}\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{  \tvec3 colobj; \n\n    if( mObj.hitbln==false) return  render_sky_color(rd);\n\n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n\n    if (id_material>-1.0 && id_color==-1)\n        {   colobj=vec3(0.5);\n            colobj*=getMaterial(p, id_material); \n            return colobj;\n        }\n    return colobj;\n}\n\nvec3 Render(vec3 ro, vec3 rd)\n{  vec3 col = vec3(0);\n   TObj Obj;\n   mObj.rd=rd;\n   mObj.ro=ro;\n   vec3 p;\n\n     float d=RayMarch(ro,rd, MAX_STEPS);\n\n    Obj=mObj;\n    if(mObj.hitbln) \n    {   p = (ro + rd * d );  \n        vec3 nor=mObj.normal;\n        vec3 colobj;\n        colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n\n        float dif1=1.0;\n        vec3 result;\n        result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n        result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n        col= result;\n    }\n    else if(d>MAX_DIST)\n    col= render_sky_color(rd);\n\n   return col;\n}\n\n///---------------------------------------------\nvec3 linear2srgb(vec3 c) {\n    return mix(\n        12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055,\n        step(vec3(0.0031308), c));\n}\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{    return vec3(1.0) - exp(-hdrColor * exposure);  }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*1.0,360.0);\n    itime=t;\n\t//mObj.blnShadow=false;\n    mObj.blnShadow=true;\n\n \tlight_pos1= vec3(5.0, 10.0, -20.0 ); light_color1=vec3( 1.0 );\n \tlight_pos2= vec3( -10.0, 30.0, -25.0 ); light_color2 =vec3( 1.0 ); \n\n   vec3 ro=vec3(0.0,9.0,-15.0);\n\n   vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n\n    //light_pos1+=ro;\n    //light_pos2+=ro;\n    vec3 col= Render( ro,  rd);\n    //col = exposureToneMapping(2.0, col);\n    col = linear2srgb(col);    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------common\n///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 phit; //22-mar-2021\n    vec3 rf;\n    float marchCount;\n    bool blnShadow;\n    bool hitbln;\n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(.395, .95, 1.), //31\nvec3(0.425, 0.56, 0.9) , //32\nvec3(1.0, 0.58, 0.58), //33  //piel\nvec3(0.3, 0.8, 1.0),  //34\nvec3(0.1, 0.2, 0.8)  //35\n);\n\n\n//vec3 blue = vec3(0.3, 0.8, 1.0);\n//vec3 blue2 = vec3(0.1, 0.2, 0.8);\n        \n//vec3(1.0, 0.78, 0.8) //33\n\n///mat = PBRMat(vec3(1.0, 0.78, 0.8), 0.1, 0.3);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}