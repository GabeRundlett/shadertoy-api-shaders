{
    "Shader": {
        "info": {
            "date": "1720663080",
            "description": "oh look, another bad color space haha\n\nit would work best in a square window but idk how to put it in one",
            "flags": 0,
            "hasliked": 0,
            "id": "X3yXWc",
            "likes": 0,
            "name": "Vector Color Space Test",
            "published": 3,
            "tags": [
                "colorspace"
            ],
            "usePreview": 0,
            "username": "magi",
            "viewed": 9
        },
        "renderpass": [
            {
                "code": "// Properties (mess with at will)\n\n// Zoom in/out (larger value = zoom farther out)\nconst float _Scale = 3.0;\n\n// Applicate value (simmilar to brightness; 0.0 is black, 1.0 is white)\nconst float _Aplicate = 0.5; // 0.333, 0.5, and 0.666 are the most interesting\n\n// Set pixels that exceed the bounds in RGB space to the center pixel's color\n#define RESTRICT_TO_RGB TRUE\n\n// Draw x and y axes\n#define DRAW_AXES FALSE\n\n// Rotate the abcissa and ordinate (xy plane) about the applicate (z axis)\n#define ROTATE_IMAGE TRUE\n\n// Oscillate the applicate from 0 to 1\n#define OSCILLATE_APLICATE TRUE\n\n// Enable experimental code\n#define EXPERIMENTAL TRUE\n\n// -------------------------------------------------------------------------------- //\n\n// Conversion matricies\nconst mat3 VCStoRGB = mat3(\n    0.0,      0.57735, -0.57735,\n    2.0/3.0, -1.0/3.0, -1.0/3.0,\n    1.0,      1.0,      1.0\n);\nconst mat3 RGBtoVCS = mat3(\n    0.0,      1.0, 1.0/3.0,\n    0.86603, -0.5, 1.0/3.0,\n   -0.86603, -0.5, 1.0/3.0\n);\n\n// Rotation matrix\n#define ROTATE(n) mat2( cos(n), sin(n), -sin(n), cos(n) )\n\n// Pi\n#define PI 3.1415926535\n\n// Tau\n#define TAU 2.0*PI\n\n// Preprocessor Logic\n#define TRUE  1\n#define FALSE 0\n\n#if OSCILLATE_APLICATE\n#define APLICATE _OscilatingAplicate\n#else\n#define APLICATE _Aplicate\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #if OSCILLATE_APLICATE\n    float _OscilatingAplicate = 0.5 * (sin(iTime) + 1.0);\n    #endif\n    float theta, theta01;\n    vec2 uv;\n    vec3 vcs;\n\n    // Normalized and scaled pixel coordinates (from -0.5 * scale to 0.5 * scale)\n    uv = _Scale * (fragCoord/iResolution.xy - vec2(0.5));\n\n    // x and y provide abcissa and ordinate while the aplicate is \n    //   defined in properties and preprocessors\n    vcs = vec3(uv.xy, APLICATE);\n    \n    //Draw xy axes\n    #if DRAW_AXES\n        if(vcs.x <= 0.01 && vcs.x >= -0.01) {vcs = vec3(0.0, 0.0, 1.0);}\n        if(vcs.y <= 0.02 && vcs.y >= -0.02) {vcs = vec3(0.0, 0.0, 1.0);}\n    #endif\n    \n    // Rotates the abcissa and ordinate about the aplicate\n    #if ROTATE_IMAGE\n        vcs.xy = ROTATE(iTime) * vcs.xy;\n    #endif\n    \n    // Experimental nonsense\n    #if EXPERIMENTAL\n        theta = atan(vcs.y, vcs.x);\n        theta01 = (theta + PI) / TAU;\n\n        if(theta < -PI) { vcs = vec3(0.0); }\n        //vcs.x *= cos(3.0*theta01);\n        \n    #endif\n    \n    // Restrict to RGB bounds if specified\n    //   (Sets colors with any RGB value greater than 1 to black)\n    #if RESTRICT_TO_RGB\n        if(any(greaterThan( VCStoRGB * vcs, vec3(1.0)))\n        || any(   lessThan( VCStoRGB * vcs, vec3(0.0)))) {\n            vcs = vec3(0.0, 0.0, vcs.z);\n        }\n    #endif\n\n    // Convert back to RGB\n    vec4 rgb = vec4(VCStoRGB * vcs,1.0);\n    \n    // Output to screen\n    fragColor = rgb;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}