{
    "Shader": {
        "info": {
            "date": "1505396112",
            "description": "Now blowing smoke rings (mousing recommended)",
            "flags": 0,
            "hasliked": 0,
            "id": "XlXyzj",
            "likes": 7,
            "name": "Burping Volcano",
            "published": 3,
            "tags": [
                "raymarch",
                "cloud",
                "flame",
                "ring",
                "smoke",
                "volcano"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 842
        },
        "renderpass": [
            {
                "code": "// \"Burping Volcano\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float s);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat Hashff (float p);\nfloat Noiseff (float p);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\n\n#define NROCK 16\nvec4 rkPos[NROCK];\nvec3 sunDir, flmCylPos, smkPos;\nfloat dstFar, tCur, lavHt, qRad, flmCylRad, flmCylLen, smkRadEx,\n   smkRadIn, smkPhs, szFac, densFac;\nint idObj;\nconst int idMnt = 1, idRock = 2, idLav = 3;\nconst float pi = 3.14159;\n\nfloat MountDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, a, r, hd, s;\n  q = p;\n  a = atan (q.z, q.x) / (2. * pi) + 0.5;\n  r = length (q.xz);\n  s = 2. * Fbm2 (vec2 (33. * a, 7. * r)) - 0.5;\n  d = PrCylDf (q.xzy, 2., 0.75);\n  q.y -= 0.75;\n  d = max (d, - (PrSphDf (q, 0.35) - 0.03 * s));\n  hd = 0.015 * (1. + sin (64. * pi * a) + 2. * sin (25. * pi * a)) *\n     SmoothBump (0.5, 1.8, 0.3, r) + 0.15 * s * SmoothBump (0.1, 2., 0.2, r);\n  q.y -= 1.2 + hd;\n  d = max (max (d, - PrTorusDf (q.xzy, 2.8, 2.8)), 0.15 - length (q.xz));\n  q = p;\n  q.y -= -0.75;\n  d = max (SmoothMin (d, PrCylDf (q.xzy, 2.5, 0.05 *\n     (1. - smoothstep (2.2, 2.5, length (q.xz)))), 0.2), - q.y);\n  if (d < dMin) { dMin = d;  idObj = idMnt; }\n  q = p;\n  q.y -= lavHt;\n  d = PrCylDf (q.xzy, 0.3, 0.02);\n  if (d < dMin) { dMin = d;  idObj = idLav; }\n  return 0.8 * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin, d;\n  dMin = dstFar;\n  dMin = MountDf (p, dMin);\n  for (int j = 0; j < NROCK; j ++) {\n    d = PrSphDf (p - rkPos[j].xyz, rkPos[j].w);\n    if (d < dMin) { dMin = d;  idObj = idRock;  qRad = rkPos[j].w; }\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat TransObjRay (vec3 ro, vec3 rd)\n{\n  vec3 q;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    q = ro + dHit * rd - flmCylPos;\n    d = PrCylDf (q.xzy, flmCylRad, flmCylLen);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvoid SetRocks ()\n{\n  vec3 bv0, bp0, bp;\n  float a, tm, fj;\n  for (int j = 0; j < NROCK; j ++) {\n    fj = float (j);\n    a = 2. * pi * Hashff (100.11 * fj);\n    bv0.xz = 0.7 * vec2 (cos (a), sin (a));\n    bv0.y = 1.4 + 0.3 * Hashff (11.11 * fj);\n    bp0.xz = 0.1 * bv0.xz;  \n    bp0.y = 0.5;\n    tm = mod (tCur + 0.15 * (fj + 0.6 * Hashff (fj)), 4.);\n    bp = bp0 + bv0 * tm;  \n    bp.y -= 0.5 * tm * tm;\n    rkPos[j] = vec4 (bp, 0.04 - 0.03 * tm / 4.);\n  }\n}\n\nfloat FlmAmp (vec3 ro, vec3 rd, float dHit)\n{\n  vec3 p, q, dp;\n  float g, s, fh, fr, f, hs;\n  p = ro + dHit * rd - flmCylPos;\n  hs = min (p.y / flmCylLen, 1.);\n  dp = (flmCylRad / 20.) * rd;\n  g = 0.;\n  for (int i = 0; i < 20; i ++) {\n    p += dp;\n    s = distance (p.xz, flmCylPos.xz);\n    q = 4. * p;  q.y -= 6. * tCur;\n    fh = 0.5 * max (1. - (p.y - flmCylPos.y) / flmCylLen, 0.);\n    fr = max (1. - s / flmCylRad, 0.);\n    f = Fbm3 (q);\n    q = 7. * p;  q.y -= 8.5 * tCur;\n    f += Fbm3 (q);\n    g += max (0.5 * fr * fr * fh * (f * f - 0.6), 0.);\n    q = 23. * p;  q.y -= 11. * tCur;\n    g += 1000. * pow (abs (Noisefv3 (q) - 0.11), 64.);\n    if (s > flmCylRad || p.y < flmCylPos.y - 0.99 * flmCylLen || g > 1.) break;\n  }\n  g = clamp (0.9 * g, 0., 1.);\n  if (hs > 0.) g *= 1. - hs * hs;\n  return g;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float f;\n  if (rd.y >= 0.) {\n    ro.xz += 0.5 * tCur;\n    f = Fbm2 (0.02 * (rd.xz * (100. - ro.y) / max (rd.y, 0.001) + ro.xz));\n    col = vec3 (0.1, 0.2, 0.4);\n    col = mix (col, vec3 (0.8), clamp (3. * (f - 0.5) * rd.y + 0.1, 0., 1.));\n  } else {\n    ro -= ((ro.y + 0.75) / rd.y) * rd;\n    col = vec3 (0.17, 0.14, 0.05) * (0.7 + 0.3 * Fbm2 (10. * ro.xz));\n    f = 1. - smoothstep (0.1, 1., length (ro.xz) / dstFar);\n    vn = VaryNf (10. * ro, vec3 (0., 1., 0.), 3. * f);\n    col = col * (0.1 + 0.1 * max (vn.y, 0.) + 0.8 * max (dot (vn, sunDir), 0.));\n  }\n  return col;\n}\n\nfloat SmokeDens (vec3 p)\n{\n  mat2 rMat;\n  vec3 q, u;\n  p = p.xzy;\n  q = p / smkRadEx;\n  u = normalize (vec3 (q.xy, 0.));\n  q -= u;\n  rMat = mat2 (vec2 (u.x, - u.y), u.yx);\n  q.xy = rMat * q.xy;\n  q.xz = Rot2D (q.xz, 2. * tCur);\n  q.xy = q.xy * rMat;\n  q += u;\n  q.xy = Rot2D (q.xy, 0.1 * tCur);\n  return clamp (smoothstep (0., 1., densFac * PrTorusDf (p, smkRadIn, smkRadEx)) *\n     Fbm3 (5. * q + 0.01 * tCur) - 0.1, 0., 1.);\n}\n\nfloat SmokeShellDist (vec3 ro, vec3 rd)\n{\n  vec3 q;\n  float d, h;\n  d = 0.;\n  for (int j = 0; j < 150; j ++) {\n    q = ro + d * rd;\n    h = PrTorusDf (q.xzy, smkRadIn, smkRadEx);\n    d += h;\n    if (h < 0.001 || d > dstFar) break;\n  }\n  return d;\n}\n\nvec4 SmokeCol (vec3 ro, vec3 rd, vec3 col)\n{\n  vec3 clCol, tCol, q;\n  float d, dens, atten, sh;\n  clCol = vec3 (0.9);\n  atten = 0.;\n  d = 0.;\n  for (int j = 0; j < 150; j ++) {\n    q = ro + d * rd;\n    dens = SmokeDens (q);\n    sh = 0.5 + 0.5 * smoothstep (-0.2, 0.2, dens - SmokeDens (q + 0.1 * szFac * sunDir));\n    tCol = mix (vec3 (1., 0.2, 0.), vec3 (0.6, 0.6, 0.), clamp (smoothstep (0.2, 0.8, dens) +\n       0.2 * (1. - 2. * Noiseff (10. * tCur)), 0., 1.));\n    tCol = mix (mix (tCol, clCol, smkPhs), clCol, smoothstep (-0.15, -0.05,\n       (length (vec3 (q.xz * (1. - smkRadEx / length (q.xz)), q.y)) - smkRadIn) / szFac));\n    col = mix (col, 4. * dens * tCol * sh, 0.2 * (1. - atten) * dens);\n    atten += 0.12 * dens;\n    d += szFac * 0.01;\n    if (atten > 1. || d > dstFar) break;\n  }\n  atten *= smoothstep (0.02, 0.04, smkPhs);\n  return vec4 (col, atten);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, roo;\n  float dstHit, dstFlm, dstFlmR, intFlm, bgFlm, s, dstSmk;\n  lavHt = 0.4 + 0.12 * cos (2. * pi * smkPhs);\n  flmCylPos = vec3 (0., 0.9, 0.);\n  flmCylRad = 0.35;\n  flmCylLen = 1.3;\n  roo = ro;\n  SetRocks ();\n  dstFlm = TransObjRay (ro, rd);\n  dstHit = ObjRay (ro, rd);\n  bgFlm = (0.7 + 0.6 * Noiseff (10. * tCur));\n  intFlm = (dstFlm < dstHit) ? FlmAmp (ro, rd, dstFlm) : 0.;\n  if (dstHit >= dstFar) col = BgCol (ro, rd);\n  else {\n    ro += dstHit * rd;\n    vn = ObjNf (ro);\n    if (idObj == idMnt) {\n      s = clamp (ro.y / 1.2 + 0.6, 0., 1.);\n      vn = VaryNf (10. * ro, vn, 5. - 2. * s);\n      col = (0.5 + 0.7 * bgFlm * s) * vec3 (0.2 + 0.1 * (1. - s),\n         0.05 + 0.2 * (1. - s), 0.05);\n      col = col * (0.1 + 0.1 * max (vn.y, 0.) +\n         0.8 * max (dot (vn, sunDir), 0.));\n    } else if (idObj == idLav) {\n      col = mix (vec3 (0.4, 0., 0.), vec3 (0.8, 0.7, 0.),\n         step (1.1, 2. * Fbm2 (41. * ro.xz * vec2 (1. + 0.2 * sin (1.7 * tCur) *\n         vec2 (1. + 0.13 * sin (4.31 * tCur), 1. + 0.13 * cos (4.61 * tCur))))));\n      vn = VaryNf (21. * ro, vn, 10.);\n      col *= 0.5  + 1.5 * pow (max (vn.y, 0.), 32.);\n    } else if (idObj == idRock) {\n      col = mix (vec3 (0.8, 0., 0.), vec3 (0.1, 0.3, 0.1),\n         1. - (qRad - 0.005) / 0.03);\n      vn = VaryNf (200. * ro, vn, 10.);\n      col = col * (0.6 + 0.4 * max (dot (vn, vec3 (0., 0.5, 0.)), 0.));\n    }\n  }\n  if (intFlm > 0.) col = mix (col, bgFlm * mix (vec3 (1., 0.1, 0.1),\n     vec3 (1., 1., 0.5), 0.5 * intFlm), 1.2 * intFlm);\n  ro = roo - smkPos;\n  dstSmk = SmokeShellDist (ro, rd);\n  col4 = (dstSmk < min (dstHit, dstFar)) ? SmokeCol (ro + dstSmk * rd, rd, col) : vec4 (col, 0.);\n  col = mix (col, col4.rgb, min (col4.a, 1.));\n  return pow (clamp (col, 0., 1.), vec3 (0.7));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr;\n  vec3 rd, ro;\n  vec2 canvas, uv;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 30.;\n  szFac = 1.;\n  smkPhs = mod (0.04 * tCur, 1.);\n  smkRadIn = 0.25 * szFac;\n  smkRadEx = (0.5 - 0.4 * pow (1. - smkPhs, 2.)) * szFac;\n  densFac = 7.2 * (pow (smkPhs, 1.5) - 1.08) / szFac;\n  smkPos = vec3 (0., 0.6 + 4. * smkPhs * (1. - smoothstep (0.9, 1., smkPhs)), 0.);\n  ro = vec3 (0., 1. * smkPhs * (1. - smoothstep (0.9, 1., smkPhs)), -8.);\n  rd = normalize (vec3 (uv, 3.5));\n  rd.yz = Rot2D (rd.yz, -0.5 * atan (smkPos.y - ro.y, smkPos.z - ro.z));\n  az = 0.01 * tCur;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az -= 2. * pi * mPtr.x;\n    el -= 2. * pi * mPtr.y;\n  }\n  el = clamp (el, -0.01 * pi, 0.25 * pi);\n  ro.yz = Rot2D (ro.yz, el);\n  rd.yz = Rot2D (rd.yz, el);\n  ro.xz = Rot2D (ro.xz, az);\n  rd.xz = Rot2D (rd.xz, az);\n  sunDir = normalize (vec3 (1., 2., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec2 (dot (p + e.yy, cHashVA2), dot (p + e.xy, cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p); \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);  \n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;  \n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.1, 0., 0.);\n  vec3 g;\n  float s;\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}