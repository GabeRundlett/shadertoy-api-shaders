{
    "Shader": {
        "info": {
            "date": "1612507221",
            "description": "A nice transition from glsl-transitions. Modify the reflection, perspective,depth parameters.",
            "flags": 0,
            "hasliked": 0,
            "id": "wt3fDn",
            "likes": 8,
            "name": "Doorway Transition",
            "published": 3,
            "tags": [
                "transition"
            ],
            "usePreview": 0,
            "username": "turboplay",
            "viewed": 531
        },
        "renderpass": [
            {
                "code": "\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nconst vec4 black = vec4(0.0, 0.0, 0.0, 1.0);\nconst vec2 boundMin = vec2(0.0, 0.0);\nconst vec2 boundMax = vec2(1.0, 1.0);\n\n\n\nbool inBounds (vec2 p) {\n  return all(lessThan(boundMin, p)) && all(lessThan(p, boundMax));\n}\n\nvec2 project (vec2 p) {\n  return p * vec2(1.0, -1.2) + vec2(0.0, -0.02);\n}\n\nvec4 bgColor (vec2 p, vec2 pto,float reflection) {\n  vec4 c = black;\n  pto = project(pto);\n  if (inBounds(pto)) {\n    c += mix(black, texture(iChannel1,p), reflection * mix(1.0, 0.0, pto.y));\n  }\n  return c;\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nfloat reflection = 0.4;\nfloat perspective = 0.4;\nfloat depth = 3.;\n\n\n\n    float progress = fract(iTime/4.);\n    vec2 p = fragCoord/iResolution.xy;\n    \n    progress = smoothstep(0., 1., progress);\n    vec2 pfr = vec2(-1.), pto = vec2(-1.);\n     float middleSlit = 2.0 * abs(p.x-0.5) - progress;\n     if (middleSlit > 0.0) {\n    pfr = p + (p.x > 0.5 ? -1.0 : 1.0) * vec2(0.5*progress, 0.0);\n    float d = 1.0/(1.0+perspective*progress*(1.0-middleSlit));\n    pfr.y -= d/2.;\n    pfr.y *= d;\n    pfr.y += d/2.;\n  }\n  float size = mix(1.0, depth, 1.-progress);\n  pto = (p + vec2(-0.5, -0.5)) * vec2(size, size) + vec2(0.5, 0.5);\n  if (inBounds(pfr)) {\n    fragColor = texture(iChannel0,pfr);\n  }\n  else if (inBounds(pto)) {\n    fragColor =texture(iChannel1,pto);\n  }\n  else {\n    fragColor = bgColor(p, pto,reflection);\n  }\n  }",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}