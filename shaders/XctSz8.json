{
    "Shader": {
        "info": {
            "date": "1717220941",
            "description": "Voxel ray tracing demo for my [url=https://mini.gmshaders.com/p/voxels-draft]voxel tutorial[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "XctSz8",
            "likes": 49,
            "name": "GM Shaders: Voxels",
            "published": 3,
            "tags": [
                "voxel",
                "raytrace",
                "dda"
            ],
            "usePreview": 0,
            "username": "Xor",
            "viewed": 679
        },
        "renderpass": [
            {
                "code": "/*\n    \"GM Shaders: Voxels\" by @XorDev\n    \n    Voxel ray tracing demo for my voxel tutorial:\n    mini.gmshaders.com/p/voxels-draft\n*/\n\n//Max number of voxel steps\n#define MAX 255.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //View rotation matrix (pitch rotation)\n    mat3 view = mat3(1,0,0, 0,0.8,0.6, 0,-0.6,0.8);\n    //Resolution for scaling\n    vec2 res = iResolution.xy;\n    //Ray direction\n    vec3 dir = normalize(vec3(res*.5-fragCoord,res.y*.5)) * view;\n    //Prevent division by 0 errors\n    dir += vec3(dir.x==0.0, dir.y==0.0, dir.z==0.0) * 1e-5;\n    \n    //Camera position with mouse control\n    vec3 pos = vec3(iMouse.xy-res.xy*0.5, 0.0) / res.y * view*16.0;\n    //Scroll forward\n    pos.z += iTime/0.1;\n    \n    //Sign direction for each axis\n    vec3 sig = sign(dir);\n    //Step size for each axis\n    vec3 stp = sig / dir;\n    \n    //Voxel position\n    vec3 vox = floor(pos);\n    //Initial step sizes to the next axis faces\n    vec3 dep = ((vox-pos + 0.5) * sig + 0.5) * stp;\n    \n    //Axis index\n    vec3 axi;\n    \n    //Loop iterator\n    float steps = 0.0;\n    //Loop through voxels\n    for(float i = 0.0; i<MAX; i++)\n    {\n        //Check map\n        if (dot(sin(vox*.13),cos(vox.yzx*.17))+vox.y*.1>1.6) break;\n        //Increment steps\n        steps++;\n        \n        //Select the closest voxel face axis\n        axi = dep.x<dep.z? \n             ( dep.x<dep.y? vec3(1,0,0) : vec3(0,1,0) ):\n             ( dep.z<dep.y? vec3(0,0,1) : vec3(0,1,0) );\n        \n        //Step one voxel along this axis\n        vox += sig * axi;\n        //Set the length to the next voxel\n        dep += stp * axi;\n    }\n    //Here's how to get the normal and intersection point:\n    //vec3 nor = sig * axi;\n    //vec3 hit = pos + dir*dot(dep-stp, axi);\n    \n    //Apply shading \n    vec3 shade = mix(vec3(0.2,0.2,0.4), vec3(1), dot(axi, vec3(0,1,.5)));\n    //Pick a pseudo-random number for each block\n    float noise = fract(cos(vox.x*7.7+vox.y*8.9+vox.z*9.3)*4e4);\n    //Stratified color blended with noise\n    vec3 col = cos(vox.y*vox.y-vox.y+vec3(0,1,2))*0.4+0.2*noise+0.4;\n    //Increase contrast and shade\n    col *= col * shade;\n    //Sky gradient\n    vec3 sky = 1.0 + (dir.y-1.0) * vec3(0.8,0.6,0.3);\n    //Fade color with fog\n    float fog = steps/MAX;\n    col = mix(col, sky, fog * fog);\n    //Output with a gamma of 2.0\n    fragColor = vec4(sqrt(col),1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}