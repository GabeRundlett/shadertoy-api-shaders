{
    "Shader": {
        "info": {
            "date": "1609519258",
            "description": "3D version of my \"Infinite Map\"  shader (without polar distortions!).",
            "flags": 0,
            "hasliked": 0,
            "id": "3ltczj",
            "likes": 12,
            "name": "3D Map (No Polar Distortions)",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "map",
                "fractalnoise",
                "geography"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 278
        },
        "renderpass": [
            {
                "code": "#define PLANET_RADIUS 1.5\n#define MAP_SCALE 2.0\n#define MAP_ROUGHNESS 5.0\n#define MAP_HEIGHT 0.2\n#define MARKER_SPACING 0.75\n\nvec3 Hash33(in vec3 p) {\n    return vec3(fract(sin(dot(p, vec3(7643.54, 6854.95, 356.6765))) * 234.752),\n                fract(sin(dot(p, vec3(7853.67, 5214.327, 435.6437))) * 6734.8275),\n                fract(sin(dot(p, vec3(7546.754, 683.2647, 358.2431))) * 257.8643));\n}\n\nfloat noise(in vec3 p) {\n    return fract(sin(dot(p, vec3(3743.54, 2754.23, 578.537))) * 5664.865);\n}\n\nfloat snoise(in vec3 p) {\n    vec3 cell = floor(p);\n    vec3 local = fract(p);\n    local *= local * (3.0 - 2.0 * local);\n\n    float ldb = noise(cell);\n    float rdb = noise(cell + vec3(1.0, 0.0, 0.0));\n    float ldf = noise(cell + vec3(0.0, 0.0, 1.0));\n    float rdf = noise(cell + vec3(1.0, 0.0, 1.0));\n    float lub = noise(cell + vec3(0.0, 1.0, 0.0));\n    float rub = noise(cell + vec3(1.0, 1.0, 0.0));\n    float luf = noise(cell + vec3(0.0, 1.0, 1.0));\n    float ruf = noise(cell + 1.0);\n\n    return mix(mix(mix(ldb, rdb, local.x),\n                   mix(lub, rub, local.x),\n                   local.y),\n\n               mix(mix(ldf, rdf, local.x),\n                   mix(luf, ruf, local.x),\n                   local.y),\n\n               local.z);\n}\n\nfloat fnoise(in vec3 p) {\n    p *= MAP_SCALE;\n\n    float value = 0.0;\n    float nscale = 1.0;\n    float tscale = 0.0;\n\n    for (float octave=0.0; octave < MAP_ROUGHNESS; octave++) {\n        value += snoise(p) * nscale;\n        tscale += nscale;\n        nscale *= 0.5;\n        p *= 2.0;\n    }\n\n    return value / tscale;\n}\n\nvec3 map(in vec3 p) {\n    float n = fnoise(p);\n    vec3 color = mix(vec3(0.0, 0.0, 1.25 - n), mix(vec3(0.0, 1.0, 0.0), vec3(0.8, 0.4, 0.0), n * n), float(n > 0.5));\n\n    vec3 pinPos = floor(p / MARKER_SPACING + 0.5) * MARKER_SPACING;\n    pinPos += 0.45 * Hash33(pinPos) - 0.225;\n    pinPos = normalize(pinPos) * (PLANET_RADIUS + fnoise(p) * MAP_HEIGHT);\n    float pin = length(p - pinPos) - 0.05;\n    n = fnoise(pinPos);\n    if (n > 0.5 && pin < 0.0) {\n        color = vec3(1.0, 0.0, 0.0);\n    }\n\n    return color;\n}\n\nfloat mapScene(in vec3 p) {\n    float earth = length(p) - PLANET_RADIUS;\n    earth -= fnoise(p) * MAP_HEIGHT;\n    return earth * 0.98;\n}\n\nvec3 getNormal(in vec3 p) {\n    return normalize(vec3(mapScene(p + vec3(0.001, 0.0, 0.0)) - mapScene(p - vec3(0.001, 0.0, 0.0)),\n                          mapScene(p + vec3(0.0, 0.001, 0.0)) - mapScene(p - vec3(0.0, 0.001, 0.0)),\n                          mapScene(p + vec3(0.0, 0.0, 0.001)) - mapScene(p - vec3(0.0, 0.0, 0.001))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float t = 0.0;\n    for (float iters=0.0; iters < 150.0; iters++) {\n        vec3 p = ro + rd * t;\n\n        vec2 cs = sin(iTime + vec2(1.57, 0.0));\n        p.xz *= mat2(cs, -cs.y, cs.x);\n        p.yz *= mat2(cs, -cs.y, cs.x);\n\n        float d = mapScene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n            vec3 l = vec3(-0.58, 0.58, 0.58);\n\n            n.yz *= mat2(cs.x, -cs.y, cs.yx);\n            n.xz *= mat2(cs.x, -cs.y, cs.yx);\n\n            fragColor.rgb += map(p);\n            fragColor.rgb *= max(0.3, dot(n, l));\n            break;\n        }\n\n        if (t > 10.0) {\n            break;\n        }\n\n        t += d;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}