{
    "Shader": {
        "info": {
            "date": "1649162884",
            "description": "Using a hamiltonian based integrator to compute geodesics in the Dneg metric.\nhttps://arxiv.org/pdf/1502.03809.pdf",
            "flags": 48,
            "hasliked": 0,
            "id": "stByz1",
            "likes": 10,
            "name": "Interstellar wormhole",
            "published": 3,
            "tags": [
                "camera"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 11086
        },
        "renderpass": [
            {
                "code": "// Fork of \"Ellis wormhole\" by michael0884. https://shadertoy.com/view/ftSyzh\n// 2022-04-05 12:47:23\n\n// Fork of \"Arbitrary space-time ray tracer\" by michael0884. https://shadertoy.com/view/NtSGWG\n// 2022-04-04 21:07:42\n\n// Fork of \"Schwarzschild black hole\" by michael0884. https://shadertoy.com/view/ftBGWm\n// 2021-06-21 11:20:36\n\nvec3 saturate(vec3 c)\n{\n    return 1.3*pow(c, vec3(1.2));\n}\n\n#define SHARPEN 2.0\n#define LOWSAMPLE_BLUR 1.\nvec4 sample_adaptive(sampler2D ch, vec2 uv)\n{\n    vec3 dx = vec3(0.5/vec2(textureSize(ch, 0)),0.);\n    const float k = SHARPEN;\n    vec4 c = texture(ch, uv);\n    \n    vec4 u = texture(ch, uv + dx.zy);\n    vec4 d = texture(ch, uv - dx.zy);\n    vec4 r = texture(ch, uv + dx.xz);\n    vec4 l = texture(ch, uv - dx.xz);\n    vec4 u1 = texture(ch, uv + dx.xy);\n    vec4 d1 = texture(ch, uv - vec2(1, -1)*dx.xy);\n    vec4 r1 = texture(ch, uv - dx.xy);\n    vec4 l1 = texture(ch, uv + vec2(1, -1)*dx.xy);\n    return (1.+k)*c - k*(u+d+r+l+1.5*(u1+d1+r1+l1)/4.0)/(4.0 +1.5); \n}\n  \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 acc = sample_adaptive(iChannel0, fragCoord/iResolution.xy);\n    fragColor = vec4(saturate(acc.xyz/acc.w), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//controller\n\n//Keyboard constants\nconst int keyLe = 37, keyUp = 38, keyRi = 39, keyDn = 40, keyA = 65, keyB = 66, keyC = 67, keyD = 68, keyE = 69, keyF = 70, keyG = 71, keyH = 72, keyI = 73, keyJ = 74, keyK = 75, keyL = 76, keyM = 77, keyN = 78, keyO = 79, keyP = 80, keyQ = 81, keyR = 82, keyS = 83, keyT = 84, keyU = 85, keyV = 86, keyW = 87, keyX = 88, keyY = 89, keyZ = 90;\n\nbool pressed(int k) \n{\n    return texelFetch(iChannel3, ivec2(k, 0), 0).x > 0.5;\n}\n\nconst float force =130.0;\nconst float mouse_sens = 100.0;\nconst float roll_speed = 0.5;\n\nvoid mainImage( out vec4 o, in vec2 p )\n{\n    p = floor(p);\n    if(p.x > NAddr && p.y > 0.) discard;\n    \n    //get camera data\n    vec3 cp = get(CamP).xyz;\n    vec4 ca = get(CamA);\n    \n    float mode = 0.0;\n    if(pressed(keyR)) mode = 1.0;\n    \n    //initialization\n    if(iFrame == 0)\n    {\n        cp = normalize(vec3(0,1,0))*33.1;\n        ca = aa2q( normalize(vec3(1,0,0.)), PI*3.0/4.0);\n    }\n    vec4 oldca = ca;\n    if(p.x == PrevCamP) o = vec4(cp, 0);\n    if(p.x == PrevCamA) o = ca;\n    \n    mat3 cam = getCam(ca);\n    \n    //get velocities\n    vec3 cv = get(CamV).xyz;\n    vec4 cav = get(CamAV);\n    \n    float dt = 1./60.0;\n    //update position\n    if(pressed(keyW)) cv += force*dt*cam*vec3(0,0,1);\n    if(pressed(keyS)) cv += force*dt*cam*vec3(0,0,-1);\n    if(pressed(keyA)) cv += force*dt*cam*vec3(-1,0,0);\n    if(pressed(keyD)) cv += force*dt*cam*vec3(1,0,0);\n    \n    cp += dt*cv;\n    cv += -cv*tanh(10.0*dt);\n    \n    //update camera orientation\n    vec2 dmouse = dt*mouse_sens*(iMouse.xy - get(PrevMouse).xy)/iResolution.x;\n    \n    if(length(dmouse) < 0.1)\n    {\n        //rotate around y ax\n        ca = qq2q(ca, aa2q(cam*vec3(0,1,0), -dmouse.x)); \n        //rotate around x ax\n        ca = qq2q(ca, aa2q(cam*vec3(1,0,0), dmouse.y));\n    }\n    \n    //roll camera\n    if(pressed(keyQ)) ca = qq2q(ca, aa2q(cam*vec3(0,0,1), -roll_speed*dt)); \n    if(pressed(keyE)) ca = qq2q(ca, aa2q(cam*vec3(0,0,1), roll_speed*dt)); \n    \n    if(distance(oldca, ca) > 0.001 || length(cv) > 0.01) mode = 1.0;\n    \n    if(p.x == CamP) o = vec4(cp, mode);\n    if(p.x == CamA) o = ca;\n    if(p.x == CamV) o = vec4(cv, 0.0);\n    if(p.x == CamAV) o = vec4(0.0);\n    if(p.x == PrevMouse) o = vec4(iMouse.xy, 0, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define TWO_PI 6.28318530718\n#define PI 3.14159265359\n#define FOV 1.5\n#define CAM_ANGLE 0.001\n#define MAX_STEPS 90\n#define MIN_DIST 1e-5\n#define MAX_DIST 60.0\n\n//(reused some of @ollj's code, made it more readible)\n\nvec3 light = normalize(vec3(0,1,0));\nconst float light_bright =1.0;\nconst float light_ang = 0.1;\n\n//specific controller buffer Addresses\nconst float CamP = 0.,     //camera position \n            CamA = 1.,     //camera rotation quaternion    \n            CamV = 2.,     //camera velocity\n            CamAV = 3.,    //camera rotation velocity\n            PrevCamP = 4., //previous frame camera position\n            PrevCamA = 5., //previous frame camera rotation quaternion\n            PrevMouse = 6.,//previous mouse pos\n            NAddr = 7.;    //max address count\n            \n#define get(i) texelFetch(iChannel2,ivec2(i,0),0)\n\n\nmat4 diag(vec4 a)\n{\n    return \n    mat4(a.x,0,0,0,\n         0,a.y,0,0,\n         0,0,a.z,0,\n         0,0,0,a.w);\n}\n\n//optimized inverse of symmetric matrix\nmat4 inverse_sym(mat4 m) {\n\tfloat n11 = m[0][0], n12 = m[1][0], n13 = m[2][0], n14 = m[3][0];\n\tfloat n22 = m[1][1], n23 = m[2][1], n24 = m[3][1];\n\tfloat n33 = m[2][2], n34 = m[3][2];\n\tfloat n44 = m[3][3];\n\n\tfloat t11 = 2.0 * n23 * n34 * n24 - n24 * n33 * n24 - n22 * n34 * n34 - n23 * n23 * n44 + n22 * n33 * n44;\n\tfloat t12 = n14 * n33 * n24 - n13 * n34 * n24 - n14 * n23 * n34 + n12 * n34 * n34 + n13 * n23 * n44 - n12 * n33 * n44;\n\tfloat t13 = n13 * n24 * n24 - n14 * n23 * n24 + n14 * n22 * n34 - n12 * n24 * n34 - n13 * n22 * n44 + n12 * n23 * n44;\n\tfloat t14 = n14 * n23 * n23 - n13 * n24 * n23 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\tfloat det = n11 * t11 + n12 * t12 + n13 * t13 + n14 * t14;\n\tfloat idet = 1.0f / det;\n\n\tmat4 ret;\n\n\tret[0][0] = t11 * idet;\n\tret[0][1] = (n24 * n33 * n14 - n23 * n34 * n14 - n24 * n13 * n34 + n12 * n34 * n34 + n23 * n13 * n44 - n12 * n33 * n44) * idet;\n\tret[0][2] = (n22 * n34 * n14 - n24 * n23 * n14 + n24 * n13 * n24 - n12 * n34 * n24 - n22 * n13 * n44 + n12 * n23 * n44) * idet;\n\tret[0][3] = (n23 * n23 * n14 - n22 * n33 * n14 - n23 * n13 * n24 + n12 * n33 * n24 + n22 * n13 * n34 - n12 * n23 * n34) * idet;\n\n\tret[1][0] = ret[0][1];\n\tret[1][1] = (2.0 * n13 * n34 * n14 - n14 * n33 * n14 - n11 * n34 * n34 - n13 * n13 * n44 + n11 * n33 * n44) * idet;\n\tret[1][2] = (n14 * n23 * n14 - n12 * n34 * n14 - n14 * n13 * n24 + n11 * n34 * n24 + n12 * n13 * n44 - n11 * n23 * n44) * idet;\n\tret[1][3] = (n12 * n33 * n14 - n13 * n23 * n14 + n13 * n13 * n24 - n11 * n33 * n24 - n12 * n13 * n34 + n11 * n23 * n34) * idet;\n\n\tret[2][0] = ret[0][2];\n\tret[2][1] = ret[1][2];\n    ret[2][2] = (2.0 * n12 * n24 * n14 - n14 * n22 * n14 - n11 * n24 * n24 - n12 * n12 * n44 + n11 * n22 * n44) * idet;\n\tret[2][3] = (n13 * n22 * n14 - n12 * n23 * n14 - n13 * n12 * n24 + n11 * n23 * n24 + n12 * n12 * n34 - n11 * n22 * n34) * idet;\n\n\tret[3][0] = ret[0][3];\n\tret[3][1] = ret[1][3];\n\tret[3][2] = ret[2][3];\n\tret[3][3] = (2.0 * n12 * n23 * n13 - n13 * n22 * n13 - n11 * n23 * n23 - n12 * n12 * n33 + n11 * n22 * n33) * idet;\n\n\treturn ret;\n}\n\nfloat sphIntersect(in vec3 ro, in vec3 rd, in vec4 sph)\n{\n    vec3 oc = ro - sph.xyz;\n    float b = dot(oc, rd);\n    float c = dot(oc, oc) - sph.w * sph.w;\n    float h = b * b - c;\n    if (h < 0.0)\n        return 1e10;\n    return -b - sqrt(h);\n}\n\n//ollj quaternionRotation math\n//\n//ANY rotations in 3d are non-commutative!\n//\n//matrix rotations are just bulky, memory wasting\n//EulerRotations almost certainly fail to rotate over the SHORTEST path.\n//EulerRotations almost certainly will gimbalLock and get stuck along one axis\n//QuaternionRotations are superior here.\n//-> we only use EulerRorations for simple input devices (keyboard input)\n//-> we convert to quaternions, buffered as vec4.\n\n//quaternion Identity\nvec4 qid() \n{\n    return vec4(0, 0, 0, 1);\n}\n\n//return quaternion from axis and angle\nvec4 aa2q(vec3 axis, float ang) \n{\n    vec2 g = vec2(sin(ang), cos(ang)) * 0.5;\n    return normalize(vec4(axis * g.x, g.y));\n}\n\n//return AxisAngle of NORMALIZED quaternion input\nvec4 q2aa(vec4 q) \n{\n    return vec4(q.xyz / sqrt(1.0 - q.w * q.w), acos(q.w) * 2.);\n}\n\n//return q2, rotated by q1, order matters (is non commutative) : (aka quaternion multiplication == AxisAngleRotation)\nvec4 qq2q(vec4 q1, vec4 q2) \n{\n    return vec4(q1.xyz * q2.w + q2.xyz * q1.w + cross(q1.xyz, q2.xyz), (q1.w * q2.w) - dot(q1.xyz, q2.xyz));\n}\n\n//extension to qq2q(), scaled by sensitivity [f] (==quaternion ANGULAR equivalent to slerp() )\nvec4 qq2qLerp(vec4 a, vec4 b, float f) \n{\n    float d = dot(a, b), t = acos(abs(d)), o = (1. / sin(t));\n    return normalize(a * sin(t * (1.0 - f)) * o * sign(d) + b * sin(t * f) * o);\n}\n\n//doing qq2q() multiple times, you need to normalize() the quaternion, to fix rounding errors.\n//how often you do this is up to you.\n\n//normalize q (assuming length(q) is already close to 1, we can skip whe sqrt()\nvec4 qn(vec4 q) \n{\n    return q / dot(q,q);\n}\n\n//return quaternion, that is the shortest rotation, between looking to [a before], and looking to [b after] the rotation.\n//http://wiki.secondlife.com/wiki/LlRotBetween\nvec4 qBetween(vec3 a, vec3 b) \n{\n    float v = sqrt(dot(a,a) * dot(a,a));\n\n    if(v == 0.) return qid();\n    \n    v = dot(a, b) / v;\n    vec3 c = a.yzx * b.zxy - a.zxy * b.yzx / v;\n    float d = dot(c,c);\n    \n    if(d != 0.) \n    {\n        float s = (v > - 0.707107) ? 1. + v : d / (1. + sqrt(1. - d));\n        return vec4(c, s) / sqrt(d + s * s);\n    }\n    \n    if(v > 0.) return qid();\n    \n    float m = length(a.xy);\n    \n    return (m != 0.) ? vec4(a.y, - a.x, 0, 0) / m : vec4(1, 0, 0, 0);\n}\n\n//return inverse of quaternion\nvec4 qinv(vec4 q) \n{\n    return vec4(- q.xyz, q.w) / dot(q,q);\n}\n\n//return VECTOR p, rotated by quaterion q;\nvec3 qv2v(vec4 q, vec3 p) \n{\n    return qq2q(q, qq2q(vec4(p, .0), qinv(q))).xyz;\n}\n\n//qv2v()  with swapped inputs\n//return quaterion P (as vector), as if it is rotated by VECTOR p (as if it is a quaternion)\nvec3 vq2v(vec3 p, vec4 q) \n{\n    return qq2q(qinv(q), qq2q(vec4(p, 0.0), q)).xyz;\n}\n\nvec3 vq2v(vec4 a, vec3 b) \n{\n    return qv2v(a, b);\n}\n\n//in case of namespace confuction\nvec3 qv2v(vec3 a, vec4 b) \n{\n    return vq2v(a, b);\n}\n\n//return mat3 of quaternion (rotation matrix without translation)\n//https://www.shadertoy.com/view/WsGfWm\nmat3 q2m(vec4 q) \n{\n    vec3 a = vec3(-1, 1, 1);\n    vec3 u = q.zyz * a, v = q.xyx * a.xxy;\n    mat3 m = mat3(0.5) + mat3(0, u.x,u.y,u.z, 0, v.x,v.y,v.z, 0) * q.w + matrixCompMult(outerProduct(q.xyz, q.xyz), 1. - mat3(1));\n    q *= q; \n    m -= mat3(q.y + q.z, 0, 0, 0, q.x + q.z, 0, 0, 0, q.x + q.y);\n    return m * 2.0;\n}\n\n//return quaternion of orthogonal matrix (with determinant==1., or else quaternionm will not be normalized)\nvec4 m2q(mat3 m) \n{\n#define m2f(a,b) m[a][b]-m[b][a]\n    //http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\n    float q = 2. * sqrt(abs(1. + m[0][0] + m[1][1] + m[2][2]));\n    return vec4(vec3(m2f(2, 1), m2f(0, 1), m2f(1, 0)) / q / 4., q);\n#undef m2f\n}\n\nfloat at2e(vec2 a) \n{\n    a *= 2.;\n    return atan(a.x, 1. - a.y);\n}\n\n//return quaternion of Euler[yaw,pitch,roll]     \nvec4 eYPR2q(vec3 o) \n{\n    o *= .5;\n    vec3 s = sin(o);\n    //https://en.wikipedia.org/wiki/Conversion_between_quaternions_and_Euler_angles#Source_code\n    o = cos(o);\n    vec4 a = vec4(s.xz, o.xz);\n    return a.yyww * a.zxxz * o.y + a.wwyy * a.xzzx * s.y * vec4(-1, 1, -1, 1);\n}\n\nvec4 eYPR2q(vec2 o) \n{\n    o *= .5;\n    vec2 s = sin(o);\n    o = cos(o);\n    vec4 a = vec4(s.x, 0., o.x, 0.);\n    return a.yyww * a.zxxz * o.y + a.wwyy * a.xzzx * s.y * vec4(- 1, 1, - 1, 1);\n}\n\nmat3 getCam(vec4 q) \n{\n    return q2m(q);\n}\n\n//internal RNG state \nuvec4 s0, s1; \nivec2 pixel;\n\nvoid rng_initialize(vec2 p, int frame)\n{\n    pixel = ivec2(p);\n\n    //white noise seed\n    s0 = uvec4(p, uint(frame), uint(p.x) + uint(p.y));\n    \n    //blue noise seed\n    s1 = uvec4(frame, frame*15843, frame*31 + 4566, frame*2345 + 58585);\n}\n\n// https://www.pcg-random.org/\nuvec4 pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    return v;\n}\n\nfloat rand(){ return float(pcg4d(s0).x)/float(0xffffffffu); }\nvec2 rand2(){ return vec2(pcg4d(s0).xy)/float(0xffffffffu); }\nvec3 rand3(){ return vec3(pcg4d(s0).xyz)/float(0xffffffffu); }\nvec4 rand4(){ return vec4(pcg4d(s0))/float(0xffffffffu); }\n\nvec2 nrand2(float sigma, vec2 mean)\n{\n\tvec2 Z = rand2();\n    return mean + sigma * sqrt(-2.0 * log(Z.x)) * \n           vec2(cos(TWO_PI * Z.y),sin(TWO_PI * Z.y));\n}\n\n\n//uniformly spherically distributed\nvec3 udir(vec2 rng)\n{\n    vec2 r = vec2(2.*PI*rng.x, acos(2.*rng.y-1.));\n    vec2 c = cos(r), s = sin(r);\n    return vec3(c.x*s.y, s.x*s.y, c.y);\n}\n\n\nconst float PI2 = 6.2831853071;\n\n// Valid from 1000 to 40000 K (and additionally 0 for pure full white)\nvec3 colorTemperatureToRGB(const in float temperature){\n  // Values from: http://blenderartists.org/forum/showthread.php?270332-OSL-Goodness&p=2268693&viewfull=1#post2268693   \n  mat3 m = (temperature <= 6500.0) ? mat3(vec3(0.0, -2902.1955373783176, -8257.7997278925690),\n\t                                      vec3(0.0, 1669.5803561666639, 2575.2827530017594),\n\t                                      vec3(1.0, 1.3302673723350029, 1.8993753891711275)) : \n\t \t\t\t\t\t\t\t\t mat3(vec3(1745.0425298314172, 1216.6168361476490, -8257.7997278925690),\n   \t                                      vec3(-2666.3474220535695, -2173.1012343082230, 2575.2827530017594),\n\t                                      vec3(0.55995389139931482, 0.70381203140554553, 1.8993753891711275)); \n  return mix(clamp(vec3(m[0] / (vec3(clamp(temperature, 1000.0, 40000.0)) + m[1]) + m[2]), vec3(0.0), vec3(1.0)), vec3(1.0), smoothstep(1000.0, 0.0, temperature));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define SPP 2\n\n//Note, no time nor polar angle is used here. \n//A wormhole does not have gravity and is spherically symmetric thus such simplifications are applicable\n\nconst float max_distance = 50.0f;\nconst float eps = 0.005;\nconst vec2 dq = vec2(0, eps);\nfloat dt = 0.1;\n\n\nfloat sqr(float x)\n{\n    return x*x;\n}\n\n\nfloat EllisR(float l)\n{\n    const float rho = 1.0; //radius\n    const float a = 6.0; //tunnel length \n    const float M = 0.5; //\"mass\"\n    \n    float x = 2.0*(abs(l) - a)/(PI*M);\n    return (abs(l) > a)?(rho + M*(x*atan(x) - 0.5*log(1.0 + x*x))):rho;\n}\n\nvec2 DiagG(vec2 q)\n{\n    return vec2(1.0, sqr(EllisR(q.x)));\n}\n\nvec2 DiagGinv(vec2 q)\n{\n    return vec2(1.0, 1.0/sqr(EllisR(q.x)));\n}\n\nfloat L(vec2 q, vec2 qt)\n{\n    return dot(DiagG(q), qt*qt);\n}\n\nfloat H(vec2 q, vec2 p)\n{\n    return dot(DiagGinv(q), p*p);\n}\n\nvec2 ToMomentum(vec2 q, vec2 qt)\n{\n    return DiagG(q)*qt; \n}\n\nvec2 FromMomentum(vec2 q, vec2 p)\n{\n    return DiagGinv(q)*p; \n}\n\nvoid GeodesicStep(inout vec2 q, inout vec2 p)\n{  \n    vec2 qt = FromMomentum(q, p);\n \n    vec2 dHdq = (vec2(L(q+dq.yx,qt),L(q+dq.xy, qt))-L(q, qt))/eps; \n    \n    float r = EllisR(q.x);\n    dt = mix(0.3, 0.6, clamp(r / 10.0, 0.0, 1.0)); \n    \n    p += dHdq*dt;\n    q += 2.0*qt*dt;\n}\n\nvoid CameraToGeodesic(vec3 ro, vec3 rd, out vec2 q, out vec2 qt, out vec3 ax1, out vec3 ax2)\n{\n    //get spherical coordinate axis\n    ax1 = normalize(ro); // X\n    vec3 ax0 = normalize(cross(rd, ax1)); // Z\n    ax2 = normalize(cross(ax1, ax0)); // Y\n    \n    q = vec2(length(ro)-25.0, 0);\n    qt = vec2(dot(ax1, rd), dot(ax2, rd)/EllisR(q.x)); \n}\n\nvoid GeodesicToCamera(vec2 q, vec2 qt, vec3 ax1, vec3 ax2, out vec3 ro, out vec3 rd)\n{\n    //polar coordinates\n    vec2 s1 = vec2(cos(q.y), sin(q.y));\n    vec2 s2 = vec2(-sin(q.y), cos(q.y));\n    \n\n    vec2 s = s1*qt.x + s2*qt.y*EllisR(q.x);\n    \n    rd = s.x*ax1 + s.y*ax2;\n    ro = abs(q.x)*(s1.x*ax1 + s1.y*ax2);\n}\n\n\nvoid TraceGeodesic(inout vec3 ro, inout vec3 rd, inout float l)\n{\n    float t0 = sphIntersect(ro, rd, vec4(0,0,0,max_distance));\n    if(t0 > 0.0 && t0 < 1e10) ro += rd*t0;\n\n    vec3 ax1, ax2;\n    vec2 q, qt;\n    \n    CameraToGeodesic(ro, rd, q, qt, ax1, ax2);\n\n    vec2 p = ToMomentum(q, qt);\n \n    for(int i = 0; i <128*64; i++)\n    {\n        GeodesicStep(q, p);\n        if(abs(q.x) > max_distance) break;\n    }\n    \n    qt = FromMomentum(q, p);\n    \n    GeodesicToCamera(q, qt, ax1, ax2, ro, rd);\n    \n    l = q.x;\n}\n\n\nconst float aperture_size = 0.0;\nvec2 aperture()\n{\n    vec2 r = rand2();\n    return vec2(sin(TWO_PI*r.x), cos(TWO_PI*r.x))*sqrt(r.y);\n}\n\nbool getRay(vec2 uv, out vec3 ro, out vec3 rd)\n{\n    mat3 cam = getCam(get(CamA));\n    \n    vec2 apert_cent = -0.*uv;\n    \n    vec2 ap = aperture();\n    \n    if(!(distance(ap, apert_cent) < 1.0)) return false;\n    \n    float apd = length(ap);\n    \n    vec3 daperture = ap.x*cam[0] + ap.y*cam[1];\n    \n    ro = get(CamP).xyz + aperture_size*daperture;\n  \n    float focus =2.5 + 0.8*pow(apd,5.0);\n\n   \n    rd = normalize(focus*(cam*vec3(FOV*uv, 1.0)) - aperture_size*daperture);\n    \n    return true;\n}\n\nvec3 ToHDR(vec4 color)\n{\n    return 1.0*pow(length(color.xyz),1.0)*normalize(color.xyz+1e-4);\n}\n\nvec4 render(vec2 fragCoord)\n{\n    fragCoord += nrand2(0.5, vec2(0.));\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 cp, rd;\n    if(!getRay(uv, cp, rd)) return vec4(0,0,0,1);\n   \n    vec3 ro = cp;\n    vec3 fcol = vec3(0.0);\n    float l;\n    \n    TraceGeodesic(ro, rd, l);\n   \n    if(abs(l) > 5.0)\n    {\n        if(l > 0.0)\n            fcol = ToHDR(texture(iChannel1, rd));\n        else\n            fcol = ToHDR(texture(iChannel3, rd));\n    }\n    \n    return vec4(fcol, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    rng_initialize(fragCoord, iFrame);\n   \n    if(get(CamP).w == 0.0)\n        fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    else\n        fragColor = texture(iChannel0, fragCoord/iResolution.xy)*0.3;\n   \n   for(int i = 0; i < SPP; i++)\n       fragColor += render(fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}