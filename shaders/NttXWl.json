{
    "Shader": {
        "info": {
            "date": "1639991536",
            "description": "Flying particles loop. By combining multiple particles layers (a.k.a \"batches\") and apply some sort of \"time offset\" for each layer, I can create seamless loop. Quite good for screensaver.",
            "flags": 32,
            "hasliked": 0,
            "id": "NttXWl",
            "likes": 12,
            "name": "nahkd's Flying Particles",
            "published": 3,
            "tags": [
                "particles"
            ],
            "usePreview": 0,
            "username": "nahkd123",
            "viewed": 501
        },
        "renderpass": [
            {
                "code": "vec4 background(vec2 uv) {\n    return mix(vec4(.18, .10, 0, 1), vec4(.28, .12, .05, 1), uv.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = background(uv) + texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.141592653589793238462643383279502884197169399375105820974944592\n#define DEPTH_MAX_DIFF 0.1\n#define DEPTH_INIT_MIN 0.1\n#define DEPTH_INIT_MAX 0.2\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// From noise to random location\nvec3 randomPosition(float seed, int index) {\n    return vec3(\n        rand(vec2(seed, index * 2)),\n        rand(vec2(-seed, index)),\n        rand(vec2(2.0 * seed, index))\n    );\n}\n\nfloat calcNextDepth(float initial, float generatedNext) {\n    float generatedDiff = generatedNext - initial;\n    if (generatedDiff < 0.0) return initial - 0.1;\n    return initial + 0.1;\n}\n\nfloat calcProgress(float from, float to, float iTime) {\n    float duration = to - from;\n    return clamp((iTime - from) / duration, 0.0, 1.0);\n}\n\nvec3 randomParticle(float timeFrom, float timeTo, float iTime, int seed) {\n    float p = calcProgress(timeFrom, timeTo, iTime);\n    vec3 posA = randomPosition(0.0, seed) * 2.0 - 1.0;\n    vec3 posB = randomPosition(1.1, seed) * 2.0 - 1.0;\n    vec3 posCurr = mix(posA, posB, p);\n    vec2 pos = posCurr.xy;\n    \n    float depthCurr = clamp((posA.z + 1.0) / 2.0, DEPTH_INIT_MIN, DEPTH_INIT_MAX);\n    float depthNext = calcNextDepth(depthCurr, (posB.z + 1.0) / 2.0);\n    float depth = mix(depthCurr, depthNext, p);\n    return vec3(pos, depth);\n}\n\nfloat calcFade(float from, float to, float iTime) {\n    float p = calcProgress(from, to, iTime);\n    return sin(p * PI);\n}\n\nvec4 circle(vec2 uv, vec2 xy, float radius, float resolution) {\n    return clamp(\n        vec4(distance(uv, xy) > radius? 0.0 : 1.0) * 0.5 +\n        vec4(distance(uv, xy) > radius + 1.0 / resolution? 0.0 : 1.0) * 0.5,\n    0.0, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define PARTICLE_LIFETIME 3.5\n#define PARTICLES_BATCH_TIME 5.0\n#define PARTICLES_PER_BATCH 12\n\nvec4 particlesBatch(vec2 uv, float t, int shift) {\n    t = mod(t, PARTICLES_BATCH_TIME);\n    vec4 col = vec4(0);\n    for (int i = 0; i < PARTICLES_PER_BATCH; i++) {\n        float particleStart = float(i) * 0.1;\n        float particleEnd = particleStart + PARTICLE_LIFETIME;\n        if (t < particleStart || t > particleEnd) continue;\n        \n        vec3 part = randomParticle(particleStart, particleEnd, t, i + shift);\n        float radius = clamp(part.z / 9.0, 0.01, 0.1);\n        \n        vec4 particleCol = circle(uv, part.xy, radius, iResolution.x) * 4.2;\n        col += particleCol * (part.z + 0.05) * calcFade(particleStart, particleEnd, t);\n    }\n    return col;\n}\n\nvec4 particles(vec2 uv, float t) {\n    vec4 col = vec4(0);\n    int lastIdx = 0;\n    for (float tShift = 0.0; tShift < PARTICLES_BATCH_TIME; tShift += 1.0) {\n        col += particlesBatch(uv, t - tShift, lastIdx);\n        lastIdx += PARTICLES_PER_BATCH + 3;\n    }\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord / iResolution.xy - 0.5) * vec2(iResolution.x / iResolution.y * 2.0, 2);\n    uv /= 2.0;\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy) * 0.2 + particles(uv, iTime) * vec4(1, 0.79, 0.52, 1.0) * 0.8;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}