{
    "Shader": {
        "info": {
            "date": "1697045167",
            "description": "Just a quick compofiller for the 4k intro compo @Deadline Berlin 2023\n\nMusic done with Sointu, a great 4klang fork \n\n\nhttps://www.youtube.com/watch?v=s-5jykcgHd8&ab_channel=JochenFeldk%C3%B6tter",
            "flags": 96,
            "hasliked": 0,
            "id": "DddBWr",
            "likes": 16,
            "name": "Xorverse",
            "published": 3,
            "tags": [
                "4k",
                "demoscene",
                "intrro"
            ],
            "usePreview": 0,
            "username": "Virgill",
            "viewed": 460
        },
        "renderpass": [
            {
                "code": "// Xorverse\n\n// Virgill/Alcatraz 4k intro for Deadline Demoparty Berlin 2023\n\n// Xor rox, Sointu rox, Las rox\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy/iResolution.xy);\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 34890,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/virgill/xorverse"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Xorverse\n\n// Virgill/Alcatraz 4k intro for Deadline Demoparty Berlin 2023\n\n// Xor rox, Sointu rox, Las rox\n\n\n#define ITER 60\n#define BOUNCES 2\n#define PI 3.14159265\n#define PHI 1.618033988749\n\nvec3 hashHs(vec3 n, uint seed)\n{\n\tfloat a = (float((seed * 0x73493U) & 0xfffffU) / float(0x100000))*2. - 1.;\n\tfloat b = 6.283*(float((seed * 0xAF71fU) & 0xfffffU) / float(0x100000));\n\tfloat c = sqrt(1. - a * a);\n\tvec3 r = vec3(c*cos(b), a, c*sin(b));\n\treturn dot(r, n) > 0. ? r : -r;\n}\n\nfloat noise(vec3 p)\n{\n\tvec3 ip = floor(p);\n\tp -= ip;\n\tvec3 s = vec3(7, 157, 113);\n\tvec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n\tp = p * p*(3. - 2.*p);\n\th = mix(fract(sin(h)*43758.5), fract(sin(h + s.x)*43758.5), p.x);\n\th.xy = mix(h.xz, h.yw, p.y);\n\treturn mix(h.x, h.y, p.z);\n}\n\n// Lasball by Mercury\nfloat fBlob(vec3 p) {\n\tp = abs(p);\n\tif (p.x < max(p.y, p.z)) p = p.yzx;\n\tif (p.x < max(p.y, p.z)) p = p.yzx;\n\tfloat b = max(max(max(\n\t\tdot(p, normalize(vec3(1, 1, 1))),\n\t\tdot(p.xz, normalize(vec2(PHI + 1., 1)))),\n\t\tdot(p.yx, normalize(vec2(1, PHI)))),\n\t\tdot(p.xz, normalize(vec2(1, PHI))));\n\tfloat l = length(p);\n\treturn l - 1.5 - .5 *sin(0.33*iTime)* (1.5 / 2.)* cos(min(sqrt(1.01 - b / l)*(PI / 0.25), PI));\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r)\n{\n\tvec3 pa = p - a, ba = b - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n\treturn length(pa - ba * h) - r;\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n\tvec3 d = abs(p) - b;\n\treturn min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.));\n\n}\n\nvec2 pMod(inout vec2 p, vec2 size)\n{\n\tvec2 hz = size / 2.;\n\tvec2 c = floor((p + hz) / size);\n\tp = mod(p + hz, size) - hz;\n\tp *= mod(c, vec2(2))*2. - vec2(1);\n\tp -= hz;\n\tif (p.x > p.y) p.xy = p.yx;\n\treturn floor(c / 2.);\n}\n\nvoid pR(inout vec2 p, float a)\n{\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat sdSphere(vec3 p, float s)\n{\n\treturn length(p) - s;\n}\n\n// alcatraz logo by slerpy/lj/gopher/xtr1m\nfloat atz(vec3 p)\n{\n\tvec3 a=abs(p);\n\treturn max(min(max(max(\n\t\tmin(length(vec2(mod(p.x+.067,.134)-.067,p.z)),max(a.x-.02,a.y)-.1),\n\t\t-min(length(p.xy-vec2(0,.03))-.06,max(a.x,abs(p.y+.02)-.03)-.04)\n    ),abs(a.x+a.y)-.4),abs(abs(a.x+a.y)-.41)*.707-.01),a.z)-.03;\n}\n\nfloat smin(float a, float b, float k)\n{\n\tfloat h = clamp(0.5 + 0.5*(b - a) / k, 0.0, 1.0);\n\treturn mix(b, a, h) - k * h*(1.0 - h);\n}\n\nvoid dmin(inout vec3 d, in float x, in float y, in float z)\n{\n\tif (x < d.x) d = vec3(x, y, z);\n}\n\nfloat tunnel(vec3 p)\n{\n    float time = iTime+22.5;\n\tp = p.xzy; p.z -= time;\n\tp.xy = vec2((atan(p.x, p.y) + 1.5*sin(0.9*sqrt(dot(p.xy, p.xy)) - 0.1*time))*1.0187, 1. - length(p.xy));\n\tvec2 ku = pMod(p.xz, vec2(.8));\n\tpR(p.xz, time*.16);\n\tpMod(p.xz, vec2(.7));\n\tfloat box = sdBox(p - vec3(0), vec3(.4));\n\treturn box;\n}\n\n//*******************************************************************\n\nvec3 map(vec3 p)\n{\n\tvec3 d = vec2(0, 1e+31).yxx;\n\tfloat wireframe = 0.;\n\tif (fract(0.25*iTime) < 0.3125&&fract(4.*iTime) < 0.25&&iTime > 8.) wireframe = 1.;\n\tdmin(d, sdCapsule(p, vec3(-5., -2.5, 0), vec3(5., -2.5, 0), .5), 3., 0.);\n\n    if (iTime < 32.)\n\t{\n\t\t// noise floor\n\t\tvec3 q = p;\n\t\tq.x += iTime;\n\t\tfloat floornoise = .9*noise(.7*q);\n\t\tdmin(d, smin(5. - p.z, 1.5 - p.y, 8.) + floornoise, 0.9, 0.0);\n\t\t// wireframe cube\n\t\tif (iTime > 16.)pR(p.yz, 0.25*(iTime - 16.));\n\t\tif (iTime > 20.)pR(p.xz, 0.5*(iTime - 20.));\n\t\twireframe = (.98 + length(max(abs(p) - 0.8802, 0.0)))*wireframe;\n\t\tdmin(d, sdBox(p, vec3(.9)), .9, wireframe);  //;\n\t}\n\n\n\tif (iTime > 32.&&iTime < 48.)\n\t{\n\t\t// tunnel1\n\t\tvec3 q = p;\n\t\tpR(q.yz, PI*.5);\n\t\tdmin(d, tunnel(q), .7, 0.);\n\t\tdmin(d, sdSphere(q + vec3(0., 1. + sin(iTime), 0.), .3), 4., wireframe);\n\t}\n\n\tif (iTime > 48. && iTime<72.)\n\t{\n\t\t// walls\n\t\tvec3 q = p;\n\t\tpR(q.zx, 0.5 + 0.5*sin(0.2*iTime));\n\t\tpR(q.yz, .2 + 0.2*sin(0.5*iTime));\n\t\tdmin(d, 2. - q.y, 0.5 + 0.5*sin(4.*q.x), 0.);\n\t\tdmin(d, 7.9 + q.x, .7, 0.);\n\t\tdmin(d, 8. - q.z, 2., 1. - sin(4.*q.x));\n\t\t// lasball\n\t\tq = p;\n\t\tpR(q.xy, 0.4*iTime);\n\t\tpR(q.zy, 0.25*iTime);\n\t\tdmin(d, fBlob(q*1. + 0.1*sin(iTime)), 0.5, 0.);\n\t}\n    \n    if (iTime >72.)\n    {\n        // logo\n        vec3 q = p;\n        float moise=0.25-0.5*noise(6.*q+iTime*0.5)-0.1*noise(30.*p+iTime);\n        dmin(d, sdCapsule(p, vec3(-10., moise, -1.9), vec3(10.,moise , -1.9), .23), 1.01, 1.);\n        q=p+vec3(0.,0.,2.1);\n        pR(q.zy,PI+0.25*sin(iTime));\n        dmin(d, atz(q),.99,0.);\n    }    \n    return d;\n}\n\nvec3 normal(vec3 p, float k)\n{\n\tfloat m = map(p).x;\n\tvec2 e = vec2(0.0, k);\n\treturn normalize(m - vec3(map(p - e.yxx).x, map(p - e.xyx).x, map(p - e.xxy).x));\n}\n\nvec3 tracer(vec3 ro, vec3 rd)\n{\n\tvec3 m;\n\tfloat t = .0001;\n\tfor (int i = 0; i < ITER; i++)\n\t{\n\t\tm = map(ro + rd * t);\n\t\tt += m.x;\n\t}\n\treturn vec3(t, m.yz);\n}\n\nvoid camera(out vec3 ro, out vec3 rd, in vec2 p)\n{\n\tvec2 uv = (2.*p.xy - iResolution.xy) / iResolution.x*vec2(1, -1);\n\tro = vec3(0, 0, -3);\n\trd = normalize(vec3(uv, 1));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec3 emit = vec3(0), ro, rd, t, sp, sn;\n\t\tvec2 uv = (fragCoord.xy / iResolution.xy);\n        // get last frame\n\t\tvec4 buffer = texture(iChannel0, uv);\t\t  \n\t\tfloat amplify = .1, blur = .8;\n\t\tfloat zoom = 3.;\n\t\tfloat shift = 0.;\n\t\tif (iTime > 16.) shift = 0.25 + .25*-cos((iTime*PI*0.25));\n\t\tif (fract(iTime*0.0625) < 0.5) shift = 0.;\n\t\tif (iTime > 72.) shift = 0.;\n\t\tif (uv.y > 0.5 - shift && uv.y < 0.5 + shift)\n\t\t{\n\t\t\tzoom = 1.;\n\t\t}\n        // calculate first seed\n\t\tuint seed = uint((fragCoord.x / zoom)) ^ uint(fragCoord.y / zoom) ^ uint(floor(iTime+2.)); \n\t\tcamera(ro, rd, fragCoord);\n\n\t\tfor (int i = 0; i < BOUNCES; i++)\n\t\t{\n\t\t\tt = tracer(ro, rd);\n\t\t\tsp = ro + rd * t.x;\n\t\t\tsn = normal(sp, 5e-5);\n\t\t\tif (t.y > 1.&& i > 0) emit = t.y * vec3(0.7, 1., 0.7); \n             // wireframe \n\t\t\tif (t.z >= 1.&&i == 0) emit = t.z*vec3(1.4, 2., 1.4);\n\n\n\t\t\tif (uv.y > 0.5 - shift && uv.y < 0.5 + shift)\n\t\t\t{\n                // calculate new seed\n\t\t\t\tseed += uint(iTime*30.); \n\t\t\t\tif ((uv.y > 0.5 - shift && uv.y < 0.505 - shift) || (uv.y > 0.495 + shift && uv.y < 0.5 + shift)) emit = vec3(1., 2., 1.);\n\t\t\t\tamplify += .05;\n\t\t\t}\n            // reflect ray over hemisphere. dependent on material\n\t\t\trd = mix(reflect(rd, sn), hashHs(sn, seed), clamp(t.y, 0., 1.));  \n\t\t\tro = sp;\n\t\t}\n\n\t\temit *= amplify;\n\t\tfloat fade = min(iTime*0.2, 1.);\n\t\tfloat fadeout = clamp(1. - min((iTime - 80.)*0.1, 1.), 0., 1.);\n\t\tfragColor = (vec4(emit.x, emit.y, emit.z, 1.) + buffer * blur)*fadeout*fade;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}