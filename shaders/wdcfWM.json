{
    "Shader": {
        "info": {
            "date": "1605220816",
            "description": "The FitzHugh-Nagumo model of neuron excitation.",
            "flags": 48,
            "hasliked": 0,
            "id": "wdcfWM",
            "likes": 4,
            "name": "Vibrant Fitzhugh-Nagumo",
            "published": 3,
            "tags": [
                "diffusion",
                "reaction",
                "fitzhugh",
                "nagumo"
            ],
            "usePreview": 0,
            "username": "mkennan",
            "viewed": 397
        },
        "renderpass": [
            {
                "code": "/*\n\n    Michael Kennan, November 2020, https://www.shadertoy.com/view/wdcfWM\n\n    FlexMonkey,     October 2017,  https://www.shadertoy.com/view/MtSczD \n\n\tSimon Gladman   October 2017,  http://flexmonkey.blogspot.co.uk/     \n\n\tBased on https://github.com/GollyGang/ready/tree/gh-pages/Patterns/FitzHugh-Nagumo\n*/\n#define PI 3.1415926535\n#define TAU 2.0 * PI\n\nvec4 clr(float value) {\n  float bias = 2.3;\n  float ang = (value + 0.1) * TAU - 1.32 - bias * clamp(1.2 * cos(iTime * 0.1), -0.7, 0.7);\n\n  return vec4(\n    sin(ang + PI * 0.0) * 0.5 + 0.5,\n    sin(ang + PI * 0.5) * 0.5 + 0.5,\n    sin(ang + PI * 1.0) * 0.5 + 0.5,\n    1.0\n  );\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n  vec2 pos = fragCoord.xy / iResolution.xy;\n  vec2 val = texture(iChannel0, pos).xy;\n\n  fragColor = clr(val.x * val.x + val.y);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n\n    Michael Kennan, November 2020, https://www.shadertoy.com/view/wdcfWM\n\n    FlexMonkey,     October 2017,  https://www.shadertoy.com/view/MtSczD \n\n\tSimon Gladman   October 2017,  http://flexmonkey.blogspot.co.uk/     \n\n\tBased on https://github.com/GollyGang/ready/tree/gh-pages/Patterns/FitzHugh-Nagumo\n\n*/\n#define PI 3.1415926535\n\nfloat a0  = -0.15;\nfloat a1  =  1.8;\nfloat eps =  0.025;\nfloat del =  4.0;\nfloat k1  =  1.05;\nfloat k2  = -0.5;\nfloat k3  =  1.4;\n\nfloat timestep = 0.06;\n\nfloat noise(vec2 co) {\n    vec2 seed = vec2(sin(co.x), cos(co.y));\n    return fract(sin(dot(seed ,vec2(12.98,79.233) * iTime)) * 43758.5453);\n}\n\nvec2 rotate(vec2 v, float a) {\n  float s = sin(a);\n  float c = cos(a);\n  mat2 m = mat2(c, -s, s, c);\n  return m * v;\n}\n\nfloat mod289(float x) { return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4  mod289(vec4 x)  { return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4  perm(vec4 x)    { return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec2 v, float f) { // [-1,1]\n  vec3 p = vec3(v,f);\n  vec3 a = floor(p);\n  vec3 d = p - a;\n  d = d * d * (3.0 - 2.0 * d);\n\n  vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n  vec4 k1 = perm(b.xyxy);\n  vec4 k2 = perm(k1.xyxy + b.zzww);\n\n  vec4 c = k2 + a.zzzz;\n  vec4 k3 = perm(c);\n  vec4 k4 = perm(c + 1.0);\n\n  vec4 o1 = fract(k3 * (1.0 / 41.0));\n  vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n  vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n  vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n  float sum = o4.y * d.y + o4.x * (1.0 - d.y);\n  sum = sum * 2.0 - 1.0;\n  return clamp(sum, -1.0, 1.0);\n}\n\nvec4 t(vec2 v) {\n  return texture(iChannel0, v);\n}\n\nvec4 t(vec2 v, vec2 p, float x, float y) {\n  return t(vec2(v + vec2(x * p.x, y * p.y)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 pos = fragCoord.xy / iResolution.xy;\n  vec2 pix = 1.0 / iResolution.xy;\n\n  vec4 ab = texture(iChannel0, pos);\n\n  float diagonal = 0.0;\n  float aligned  = 1.0;\n  vec3 laplacian = vec3(\n    aligned * (\n      t(pos, pix, 1.0, 0.0) +\n      t(pos, pix, 0.0, 1.0) +\n      t(pos, pix,-1.0, 0.0) +\n      t(pos, pix, 0.0,-1.0)\n    ) +\n    diagonal * (\n      t(pos, pix, 1.0, 1.0) +\n      t(pos, pix,-1.0, 1.0) +\n      t(pos, pix, 1.0,-1.0) +\n      t(pos, pix,-1.0,-1.0)\n    )\n    - 4.0 * (aligned + diagonal) * t(pos)\n  );\n\n\n  float a = ab.x;\n  float b = ab.y;\n\n  float del_a = k1*a - k2*a*a - a*a*a - b + laplacian.x;\n  float del_b = eps*(k3*a - a1*b - a0) + del*laplacian.y;\n\n  vec2 result = vec2(clamp(a + del_a * timestep, -1.0, 1.0),\n                     clamp(b + del_b * timestep, -1.0, 1.0));\n\n  if(ab.xyz == vec3(0)) {\n      float h = 0.4;\n      float w = h * iResolution.y / iResolution.x;\n      \n      if (abs(pos.x - 0.5) < w && abs(pos.y - 0.5) < h) {\n        fragColor = vec4(noise(pos) * 4.0, 0.0, 0.0, 0);\n      }\n      else {\n        fragColor = vec4(-1, -noise(pos) * 0.2, 0, 1);\n      }\n\n  }\n  else {\n      // `z` holds sum of `x` species....\n      fragColor = vec4(result.xy, ab.z + result.x, 1.0);\n  }\n\n  //fragColor.r += 0.001 * noise((pos - 0.5) * 0.1, iTime * 0.001);\n\n  // decay phase\n  if (fragColor.z > 70.0) {\n    fragColor.x = -noise(pos * iTime) * 0.3;\n    fragColor.z = fragColor.x;\n  }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}