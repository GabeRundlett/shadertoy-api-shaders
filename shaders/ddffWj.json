{
    "Shader": {
        "info": {
            "date": "1689591093",
            "description": "zef\n",
            "flags": 96,
            "hasliked": 0,
            "id": "ddffWj",
            "likes": 5,
            "name": "DnB Phace & Current Value",
            "published": 3,
            "tags": [
                "metaballs",
                "music",
                "dnb",
                "currentvalue",
                "phace"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 248
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec3 rdr(vec2 uv)\n{\n    vec2 off = vec2((hash11(uv.y+iTime*0.01)-0.5)*.2, 0.);\n    if (iTime < 65.0)\n        off *= 0.;\n    off *= sat(sin(iTime*10.)*.5+.5)*(1.-sat(1.5*abs(uv.y-.5)))*.25;\n    vec3 col = vec3(0.);\n    col.x =texture(iChannel0, uv+off).x;\n    col.y =texture(iChannel0, uv+0.5*off).y;\n    col.z =texture(iChannel0, uv-off).z;\n     return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = rdr(uv)*2.;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define GLOW_SAMPLES 80\n#define GLOW_DISTANCE 0.07\n#define GLOW_POW 1.7\n#define GLOW_OPACITY 60.\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n#define TAU (PI*2.0)\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\nfloat hash11(float seed)\n{\n    return mod(sin(seed*123.456789)*123.456,1.);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 2.*(1.+5.*length(uv));\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nfloat _cucube(vec3 p, vec3 s, vec3 th)\n{\n    vec3 l = abs(p)-s;\n    float cube = max(max(l.x, l.y), l.z);\n    l = abs(l)-th;\n    float x = max(l.y, l.z);\n    float y = max(l.x, l.z);\n    float z = max(l.x, l.y);\n    \n    return max(min(min(x, y), z), cube);\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y, l.z));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat _seed;\nfloat rand()\n{\n    _seed++;\n    return hash11(_seed);\n}\n// Thanks iq :)\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000.,-1.);\n    \n    vec3 rep = vec3(10.);\n    vec3 id = floor((p+rep*.5)/rep);\n    p = mod(p+rep*.5,rep)-rep*.5;\n    p.xy *= r2d(id.x);\n    p.yz *= r2d(id.z);\n    //p.x += 1.-pow(texture(iChannel3, vec2(0.,p.y*2.)).x,.5)*.9;\n\n    float shape = 10000.;\n    for (float i = 0.; i < 8.; ++i)\n    {\n        vec3 pos = p+vec3(sin(i+iTime*.7), sin(i*5.+iTime*.25), sin(.33*iTime+i*3.3));\n        float curshape = length(pos)-.5-1.5*texture(iChannel3, vec2(i*.1,0.)).x;\n        shape = smin(shape, curshape, .2);\n        //acc = _min(acc, vec2(length(pos)-1., 0.));\n    }\n            acc = _min(acc, vec2(shape, 0.));\n            \n    float cube = _cucube(p, vec3(2.), vec3(.02));\n    cube = max(cube, -(length(p)-3.1));\n    if (iTime > 65.)\n        acc = _min(acc, vec2(cube, 1.));\n    \n    p += sin(p+iTime);\n    p.xy *= r2d(iTime);\n    float laser = length(p.xz)-.05;\n    laser = max(laser, sin(p.y*1.-sign(p.y)*20.*iTime));\n    if (iTime > 65.)\n        acc = _min(acc, vec2(laser, 1.));\n    \n    float laser2 = length(p.xy)-.02;\n    laser2 = max(laser2, sin(p.z*1.-sign(p.z)*10.*iTime)+.5);\n    if ((iTime > 35. && iTime < 60.) || iTime > 65.)\n        acc = _min(acc, vec2(laser2, 2.));\n    \n    float laser3 = length(p.yz)-.02;\n    laser3 = max(laser3, sin(p.x*2.-sign(p.x)*10.*iTime)+.5);\n\n    acc = _min(acc, vec2(laser3, 3.));\n    \n    \n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.001, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps && distance(p, ro) < 30.; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.001)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+=rd*res.x*.5;\n    }\n    return vec3(-1.);\n}\n\nvec3 getMat(vec3 p, vec3 n, vec3 rd, vec3 res)\n{\n    vec3 col = vec3(0.1);\n    if (res.z == 1.)\n        col = vec3(0.247,0.675,0.788)*1.;\n    if (res.z == 2.)\n        col = vec3(1.000,0.039,0.329)*1.;\n    if (res.z == 3.)\n        col = vec3(0.922,0.502,0.020)*1.;\n    vec3 refl = normalize(reflect(rd, n));\n    col += texture(iChannel2, refl*vec3(1.,-1.,1.)).xyz*.2;\n    return col;\n}\n\nvec3 rdr(vec2 uv, vec2 ouv)\n{\n    float t = iTime*.17;\n    float d = 5.;\n    float tanim = iTime*.5;\n    float off = mix((hash11(floor(tanim))-0.5)*3., \n    (hash11(floor(tanim+1.))-0.5)*3., \n    sat(pow(fract(tanim), 15.)));\n    \n        float tanim2 = iTime*mix(2.5, 0., float(iTime < 12.));\n    float off2 = mix((hash11(floor(tanim2)))*3., \n    (hash11(floor(tanim2+1.)))*3., \n    sat(pow(fract(tanim2), 15.)));\n    d*= off2;\n    uv *= r2d(.5*sin(iTime*.3)-off);\n    vec3 ro = vec3(sin(t)*d,1.,cos(t)*d);\n    vec3 ta = vec3(0.,0.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 col = pow(texture(iChannel2, rd*vec3(1.,-1.,1.)).xyz, vec3(.35))*.15;\n    col = (1.-sat(pow(abs(uv.y), .1)))*\n    vec3(texture(iChannel3, vec2(abs(uv.x),0.)).x, 0.5,0.2).zxy;\n    vec3 res = trace(ro, rd, 128);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        float pix = .1;\n        col = n*.5+.5;//floor((n*.5+.5)/pix+texture(iChannel2, ouv*40.).x*2.)*pix;\n        col = getMat(p, n, rd, res);\n    }\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 ouv = (fragCoord)/iResolution.xy;\n  \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    _seed = iTime+texture(iChannel0, uv).x;\n    vec2 off = .2*(vec2(rand(), rand())-.5)*\n    pow(texture(iChannel3, vec2(0.5,0.)).x,8.);\n    vec3 col = rdr(uv+off+vec2(.2,0.)*0., ouv);\n    col = sat(col);\n    \n    col = mix(col, texture(iChannel1, fragCoord/iResolution.xy).xyz, .5);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "musicstream",
                        "id": 33977,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/phace/phace-current-value-wild-thing?si=73eab0dab442401395e6e742289fb33f&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        \n        f = (f -.5)*2.;\n        float of = 1.-abs(f);\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        col += of*texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n\n        f = (f -.5)*2.;\n                float of = 1.-abs(f);\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        col += of*texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    rgb = pow(rgb*1.2, vec3(2.2));\n    vec2 cuv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}