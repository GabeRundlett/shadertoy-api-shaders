{
    "Shader": {
        "info": {
            "date": "1600706749",
            "description": "A Gloop Circle? - from in game  [url]https://www.youtube.com/watch?v=u3JePjNBRjM&feature=emb_logo[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Ws3yWn",
            "likes": 12,
            "name": "GloopCircle",
            "published": 3,
            "tags": [
                "noise",
                "deform",
                "cylinder",
                "gloop"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 504
        },
        "renderpass": [
            {
                "code": "// gloop test (Cylinder+Noise+Deform)\n// Added some colour+blend for fun\n\n#define AA 1\t// make this 2 if you are feeling cold...\n#define HEIGHT 8.\n\nvec3 _col = vec3(0.0);\t// pure filth\n// prim\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n// min/max polynomial\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sminCol( float a, float b, float k, vec3 col1, vec3 col2 )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n    _col = mix(col1,col2,h);// -  k*h*(1.0-h);\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\nvec3 hsv2rgb(vec3 c)\n{\n  // Íñigo Quílez\n  // https://www.shadertoy.com/view/MsS3Wc\n  vec3 rgb = clamp(abs(mod(c.x*6.+vec3(0.,4.,2.),6.)-3.)-1.,0.,1.);\n  rgb = rgb * rgb * (3. - 2. * rgb);\n  return c.z * mix(vec3(1.), rgb, c.y);\n}\n\nfloat smax(float a, float b, float k)\n{\n    return smin(a, b, -k);\n}\n// noise\nfloat noise(vec3 p,float scale, float s1,float s2)\n{\n    p*=scale;\n    float k = dot(sin(p - cos(p.yzx*1.57)), vec3(.333))*s1;\n    k += dot(sin(p*2. - cos(p.yzx*3.14)), vec3(.333))*s2;    \n    return k*0.4;\n}\n\nfloat map( in vec3 pos )\n{\n    float rad =  (1.0/(3.141*2.0)*20.0);\n    vec3 dp = vec3(pos.z, atan(pos.x, pos.y) * rad, rad-length(pos.xy));    \n    float d1 = sdCylinder(dp,vec2(0.8,HEIGHT))-0.5;\n    float t = iTime*1.35;\n    float n1 = noise(dp+vec3(0.0,t*1.0,0.0),1.0,3.57,.83);\n    float n2 = noise(dp+vec3(sin(t*.2)*2.0,t*1.5,0.0), 1.5, 4.47, 1.43);\n    float n3 = noise(dp+vec3(0.0,t*2.0,0.0), 2.0, 1.87,3.13);\n    n1 = smin(n1,n2,4.);\n    n1 = smin(n1,n3,4.);\n  \td1 = smax(n1,d1,4.);\n    \n    n3 = noise(pos+vec3(0.0,t*2.0,0.0),1.0,3.57,1.83)*2.0;\n    float disp = (sin(pos.z*1.3+t*1.1+pos.x*0.4)+cos(n3+t*1.3+pos.z*1.5+sin(t*2.2+pos.x*1.25)))*0.1;\n    \n    float d2 = dot(pos,vec3(0.0,1.0,0.0)) + 1.5+disp;   \n    //d1 = smin(d1,d2,1.2);\n    \n    vec3 goo = hsv2rgb(vec3(t*0.2+dp.y*0.075,0.85,0.9));\n    \n    d1 = sminCol(d1,d2,1.2,vec3(0.025,0.2,0.75),goo);\n    \n    return d1*0.75;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.008;\t//0.0005\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n    float an = 0.2-sin(iTime*.75)*2.0;\n\tvec3 ro = vec3( 7.0*cos(an), 2.0+sin(iTime*0.75)*2.2, 7.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raymarch\n        const float tmax = 25.0;\n        float t = 0.0;\n        for( int i=0; i<160; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n    \n        // shading/lighting\t\n        float v = 1.0-abs(p.y);\n        vec3 col = vec3(v*0.1);\n\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            \n            vec3 dir = normalize(vec3(1.0,0.7,0.0));\n\t        vec3 ref = reflect(rd, nor);\n\t        float spe = max(dot(ref, dir), 0.0);\n\t        vec3 spec = vec3(1.0) * pow(spe, 20.);\n            float dif = clamp( dot(nor,dir), 0.05, 1.0 );\n            col =  _col*dif;\n            col+=spec;\n        }\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}