{
    "Shader": {
        "info": {
            "date": "1635248806",
            "description": "triangle",
            "flags": 0,
            "hasliked": 0,
            "id": "7sVSDG",
            "likes": 1,
            "name": "draw_triangle",
            "published": 3,
            "tags": [
                "triangle"
            ],
            "usePreview": 0,
            "username": "yyf1994",
            "viewed": 258
        },
        "renderpass": [
            {
                "code": "\nvec3 drawTriangle( vec3 P , vec3 A, vec3 B, vec3 C ){\n    //       A\n    //     |    \\\n    //    |      \\\n    //   |   . p  \\\n    //  |          \\\n    // B ----------  C \n\n    vec3 AB = A - B;\n    vec3 BC = B - C;\n    vec3 CA = C - A;\n\n    vec3 AP = A - P;\n    vec3 BP = B - P;\n    vec3 CP = C - P;\n\n    bool b1 = cross(AB, AP) .z >= 0.0;\n    bool b2 = cross(BC, BP).z   >= 0.0;\n    bool b3 = cross(CA, CP).z   >= 0.0;\n\n    if(b1 && b2 && b3  ){\n      return vec3(1.0);\n    }else{\n      return vec3(0.0);\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/min(iResolution.x,iResolution.y);\n\n    //points\n    vec3 v0 = vec3(0.0, 0.1, 0.0);\n    vec3 v1 = vec3( -0.2, -0.2, 0.0);\n    vec3 v2 = vec3( 0.2,  -0.2, 0.0);\n\n    vec3 result = drawTriangle(  vec3(uv   , 0.0)   , v0 , v1 , v2 );\n    fragColor =  vec4(result , 1.0);\n \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}