{
    "Shader": {
        "info": {
            "date": "1475776995",
            "description": "Part 05: Overlaying multiple computations to provide an effect\nIntro to democoding using ShaderToy\nBy cxw/Incline - Demosplash 2016",
            "flags": 0,
            "hasliked": 0,
            "id": "lly3zK",
            "likes": 4,
            "name": "demosplash2016-cxw-05",
            "published": 3,
            "tags": [
                "tutorial",
                "demoparty"
            ],
            "usePreview": 0,
            "username": "cxw",
            "viewed": 548
        },
        "renderpass": [
            {
                "code": "precision highp int;precision highp float;\n\n// Parameters for your demo\n\n#define THICKNESS (0.85)\n    // larger means narrower\n#define SPACING (200.0)\n    //ditto\n#define SPEED (0.6)\n    // Higher is faster\n\nfloat           //not a color, but an ingredient\nget_sine_01(    //Named for its output range\n    in float time, in vec2 coords,      // parameters!\n    in vec2 center, in float radius, in float speed)\n{\n    float whereami = radius*distance(center,coords) - speed*time;\n    return 0.5+0.5*sin(whereami);\n} //get_sine_01\n\nfloat squish(in float f)\n{ //-1..1->0..1\n  return (f+1.0)*0.5;\n}\nvec2 lisa(in float time, in float a, in float b, in float delta)\n{ // a Lissajous curve.  Formula from en.wikipedia.org.\n    return vec2(squish(sin(a*time+delta)), squish (sin(b*time)));\n} //lisa\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    vec2 pixel_coord = fragCoord.xy / iResolution.xy;\n\n    // Centers of sines a and b.  All numbers empirical.\n    vec2 ca = lisa(t*0.5*SPEED,        5.0,4.0,0.0);\n    vec2 cb = lisa(t*0.835744*SPEED,   3.0,2.0,1.8);\n\n    cb = mix(ca, cb, 0.6);      //Move cb closer to ca.\n        // I did this because the centers were spending too much time apart\n        // and this was an easy way to mitigate that.\n\n    // Sine values\n    float sa = get_sine_01(t, pixel_coord, ca, SPACING, 10.0);\n    float sb = get_sine_01(t, pixel_coord, cb, SPACING, 10.0);\n\n    // Make them sharp rather than blurry\n    sa=step(THICKNESS,sa);\n    sb=step(THICKNESS,sb);\n\n    // Combine the two sines\n    float res=max(sa,sb);\n        // or min(sa,sb)   sa-sb   mix(sa,sb,0.5)\n    fragColor = vec4(res,0.0,0.0,1.0);\n       // or vec4(sa,sb,0.0,1.0);\n\n} //mainImage\n\n// vi: set ts=4 sts=4 sw=4 et ai: //\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}