{
    "Shader": {
        "info": {
            "date": "1717558971",
            "description": "Another pixel shader - this time a sweeping radar with bogeys that update when they are swept.\n\nI really like the combination of subtle warping, gradients, compression, and noise. The brain fills in so much information. \n\nChange the debug value to see WIP",
            "flags": 0,
            "hasliked": 0,
            "id": "4XG3Wz",
            "likes": 13,
            "name": "pixel radar",
            "published": 3,
            "tags": [
                "pixel",
                "radial",
                "radar",
                "scanner"
            ],
            "usePreview": 0,
            "username": "technowizard",
            "viewed": 173
        },
        "renderpass": [
            {
                "code": "#define GRID 8.\n#define debug 10. // 0 to 10\n\nstruct BogeyData{\n //   bool friendly;\n    vec2 center;\n    float xDev;\n    float yDev;\n    float speed;\n    float tOffset;\n};\n\nconst BogeyData[] bogeys = BogeyData[](\n    // top right circle\n    BogeyData(vec2( 0.5 ,0.6  ),  0.4,  0.3, 0.6,   0.0),\n    BogeyData(vec2( 0.5 ,0.6  ),  0.4,  0.3, 0.6,   0.6),\n    BogeyData(vec2( 0.5 ,0.6  ),  0.4,  0.3, 0.6,   1.2),\n    BogeyData(vec2( 0.5 ,0.6  ),  0.4,  0.3, 0.6,   1.8),\n    BogeyData(vec2( 0.5 ,0.6  ),  0.4,  0.3, 0.6,   2.4),\n    // right blob\n    BogeyData(vec2( 0.7 ,-0.3  ),  0.1,  0.3, 1.0,   0.0),\n    BogeyData(vec2( 0.7 ,-0.3  ), 0.05, 0.25,-1.0,   0.2),\n    BogeyData(vec2( 0.7 ,-0.3  ), 0.02,  0.1, 1.0,   0.0),\n    // left triangle\n    BogeyData(vec2(-0.66 ,0.1 ),  0.25,  -0.5, 0.25,  1.0),\n    BogeyData(vec2(-0.63,0.1  ),  0.25,  -0.5, 0.25,  0.5),\n    BogeyData(vec2(-0.6 ,0.1  ),  0.25,  -0.5, 0.25,  0.0),\n    BogeyData(vec2(-0.6 ,0.1  ),  0.25,  -0.5, 0.25,  1.0),\n    BogeyData(vec2(-0.57,0.1  ),  0.25,  -0.5, 0.25,  0.5),\n    BogeyData(vec2(-0.54 ,0.1 ),  0.25,  -0.5, 0.25,  1.0),\n    // top leftish\n    BogeyData(vec2(-0.15 ,0.65),  0.3,  -0.4, 0.3,  1.0),\n    // on your 5\n    BogeyData(vec2(0.3 ,-0.65 ), 0.27, -0.25, 0.1,  1.0),\n    // on your 4\n    BogeyData(vec2(-0.3 ,-0.65 ), -0.27, 0.25, 0.5,  0.0)\n);\n\nvec3 col1 = vec3(243., 255., 218.)/255.;\nvec3 col2 = vec3(80., 120., 218.)/255.;\nvec3 col3 = vec3(167., 38., 8.)/255.;\n\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34,456.821));\n    p += dot(p,p+45.32);\n    return fract(p.x*p.y);\n}\n\n\nfloat noise( in vec2 p )\n{\n    vec2 i = vec2(floor( p ));\n    vec2 f = fract( p );\n\n    // cubic interpolant\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( Hash21( i + vec2(0.,0.) ), \n                     Hash21( i + vec2(1.,0.) ), u.x),\n                mix( Hash21( i + vec2(0.,1.) ), \n                     Hash21( i + vec2(1.,1.) ), u.x), u.y);\n}\n\nvec2 radMap(vec2 uv){\n    vec2 RadUv = vec2(0.,0.);    \n\tRadUv.x = ((atan(uv.x,uv.y) * 0.15915494309189533576888376337251 /*OneOverTau*/) ) +0.5;\n    RadUv.y = length(uv);\n    return RadUv;\n}\n\nvec2 project(vec2 uv, float amt) {  \n    mat3 warp = mat3(\n    1.0-amt/3.,0.0,0.0,\n    0.0,1.+amt,0.0,\n    0.0,0.-amt,1.0);\n    vec3 w = (vec3(uv.xy,1.) *warp);\n    return w.xy/w.z+vec2(0.,-amt*.5);\n}\n\nvec2 rotate(vec2 p, float rad) {\n    mat2 m = mat2(cos(rad), sin(rad), -sin(rad), cos(rad));\n    return m * p;\n}\n\nfloat circle (vec2 uv, vec2 pos,float rad, float bloom) {\n    return smoothstep(1.-rad-bloom,1.-rad,1.-length(uv-pos));\n}\n\nfloat triangle(vec2 position, float halfWidth, float halfHeight) {\n    position.x = abs(position.x);\n    position -= vec2(halfWidth, -halfHeight);\n    vec2 e = vec2(-halfWidth, 2.0 * halfHeight);\n    vec2 q = position - e * clamp(dot(position, e) / dot(e, e), 0.0, 1.0);\n    float d = length(q);\n    if (max(q.x, q.y) > 0.0) {\n        return d;\n    }\n    return -min(d, position.y);\n}\n\nvec2 bogeyCoords(float bogeyTime, BogeyData b){\n    if(debug<5.) {\n        b.speed*=8.;\n        bogeyTime += b.tOffset *.2;\n    }\n    else\n        bogeyTime += b.tOffset;\n    return vec2(b.center.x+b.xDev*sin(bogeyTime*b.speed),b.center.y+b.yDev*cos(bogeyTime*b.speed*1.4));\n}\n\nfloat bogey (vec2 uv,float bogeyTime, BogeyData bD, float str) {\n    vec2 pos = bogeyCoords(bogeyTime, bD);\n    str+=.7;\n    float b = 0.;\n    b+= circle(uv,pos,.021,0.01) * str;\n    return b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    //pixelate\n    if(debug>9.)uv = floor(uv*96.)/96.;\n    \n    if(debug>7.)\n        uv = project(uv,.3+sin(iTime/10.)*.05);\n    \n    float c = 0.;\n    float r = 0.;\n    \n    // rotate\n    if(debug>8.) uv = rotate(uv,cos(iTime)/256.);\n    // radial\n    vec2 uvr =uv;\n    if(debug>3.) uvr = radMap(uv);\n    // dialate\n    if(debug>8.) uvr = uvr *vec2(1.,1.+sin(iTime)/256.);\n    // grid\n    vec2 uvg = uv; \n    uvg = fract(uvr*vec2(GRID*4.,GRID));\n    \n    // sweeper\n    float tx =fract(iTime*.2);\n    float scanStr = fract(uvr.x-tx);\n    \n    float bogeyTime = iTime*.2;\n    // disable the below line for constant updates\n    if(debug>1.) bogeyTime = scanStr+bogeyTime;\n    \n    bogeyTime = uvr.x- bogeyTime;\n    \n    // base grid\n    float thr = .9;\n    if(uvr.y <1.1 && uvr.y>.1) \n    {\n        float rings = 0.;\n        float rays = 0.;\n        float sweep = 0.;\n        if(debug >2.)\n            rings += pow(1. - uvg.y,4.)*.7 + step(.8,1.-uvg.y)*.5;\n        if(uvr.y<1.02 && uvr.y >.125){\n            rays += step(.9,1.-uvg.x)*.7;\n            rays += step(.9,uvg.x)*.7;\n            \n            // sweeping line\n            if( debug >2.){\n                sweep+= pow(scanStr,10.);\n                sweep+= step(.995,scanStr)*2.;\n            }\n            // bogeys\n            for(int i =0; i<bogeys.length();i++){\n                r+= bogey(uv, bogeyTime, bogeys[i],scanStr);\n            }\n        }\n        c += min(rings + rays,.7)+sweep;\n    }\n    // add cursor in the center\n    \n    c += 1.-smoothstep(0.0,0.02,triangle(rotate(uv,cos(iTime)/8.),.03,.05));\n    if(debug>0.)\n        c -= 1.-smoothstep(0.0,0.03,triangle(rotate(uv,cos(iTime)/8.)+vec2(0.,.05),.02,.002));\n    \n    \n    // add noise \n    if(debug>7.) c += (noise(uv*96.)*.5-.5)*.5;\n    // restrict palette\n    if(debug>6.) c = floor(c*2.+.6)/2.;\n    vec3 col =  max(0.,c+r*1.4)*col1;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}