{
    "Shader": {
        "info": {
            "date": "1651924765",
            "description": "Sloppy code, looks ok",
            "flags": 0,
            "hasliked": 0,
            "id": "ftSBRw",
            "likes": 12,
            "name": "Glossy Effect Test 2",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 1,
            "username": "SnoopethDuckDuck",
            "viewed": 345
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define pi 3.14159\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec3 getRo() {\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    float r = 4.;\n    float t = 0.2 * iTime;\n\n    vec3 ro = vec3(r * cos(t), 1.5 * cos(0.8 * t), r * sin(t));\n    //ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat GetDist(vec3 p) {\n    float o = 2. * pi / 3.;\n    //p *= 1. + 0.2 * thc(1., vec3(-o,0,o) + 4. * p.y + iTime);\n\n    float d = length(p) - 1.3 + 0.12 * cos(p.y * 4. - iTime);\n    \n    // unneccesary but i cant find the right value to replace it\n    float val = smoothstep(-0.5, 0.5, -length(p) + 1.15);\n    val = clamp(val, 0., 1.);\n    d -= 0.75 * val;\n   \n    p.xy *= rot(1. * iTime);\n    float r1 = 1.;\n    float r2 = 0.5;\n    float d1 = length(p.xz) - r1;\n    float d2 = length(vec2(p.y, d1)) - r2;\n   \n    d = mix(d, d2, 0.5 + 0.5 * thc(5., 0.25 * iTime));\n   \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\t\n    float dO=0.;\n    float s = sign(z);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = getRo();\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    // was 2.\n    float IOR = 1.2;\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        vec3 pIn = p - 20. * SURF_DIST * n;\n        vec3 rdIn = refract(rd, n, 1./IOR);\n        float dIn = RayMarch(pIn, rdIn, -1.);\n        \n        vec3 pExit = pIn + dIn * rdIn;\n        vec3 nExit = -GetNormal(pExit);\n        \n        \n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n       \n        float fres = pow(1. + dot(rd, n), 5.);\n        \n        // Change me\n        float c = 4.; // [0.6,6] is an okay range (<1 is like fresnel)\n        float I = 3.; // anything above 0. lower numbers more intense\n        \n        vec3 n1 = 0.8 * (abs(r) - abs(n));\n        float mx2 = exp(-5. * length(abs(r)-abs(n1)));\n\n        vec3 r2 = c * (abs(r)-abs(n));\n        vec3 n2 = c * (abs(r2)-abs(n));\n        \n        float mx = exp(-I * length(abs(r2)-abs(n2)));\n \n        float cl = 0.5 + 0.25 * dif + max(0.5 * fres, max(mx,mx2));\n\n        vec3 e = vec3(0.5);\n        vec3 col2 = pal(0.75 * length(p) - p.y * 0.05 + 0.25 + 0.75 * mx, e, e, e, 0.5 * vec3(0,1,2)/3.);\n        vec3 col3 = pal(0.75 * length(p) - p.y * 0.05 + 0.25 + 1.5 * mx2, e, e, e, 0.5 * vec3(0,1,2)/3.);\n        \n        float c1 = texture(iChannel0, 0.05 * iTime + 3. * p.xy).r;\n        float c2 = texture(iChannel0, 0.05 * iTime + 3. * p.yz).r;\n        float c3 = texture(iChannel0, 0.05 * iTime + 3. * p.zx).r;\n        \n        vec3 n3 = abs(n);\n        float c4 = n3.z * c1 + n3.x * c2 + n3.y * c3;\n        \n        // add (dif + reflections) * base color\n        col = cl * col2;\n\n        // add noise (doesnt do much)\n        col *= 0.72 + 0.35 * c4;\n\n        // mix to second color based on ray distance inside object\n        float mx3 = exp(-0.333 * dIn);\n        //col = cl * col3;\n        col = mix(col, col3, mx3);\n        //col = cl * col3;\n        \n        // add vertical shading (\"light source\" from above)\n        col += 0.2 * n.y + 0.1 * nExit.y;\n        \n        // more color + reflections to match background \n        col += 0.075 * (exp(vec3(abs(rd.x),rd.y,abs(rd.z))) + exp(-r) + 0.1 * exp(r2) - 1.05);\n    } else {    \n        col = 0.5 * exp(vec3(abs(rd.x),rd.y,abs(rd.z)));\n    }\n    \n    //col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}