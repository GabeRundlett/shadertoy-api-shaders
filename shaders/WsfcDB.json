{
    "Shader": {
        "info": {
            "date": "1585440402",
            "description": "Bubble sort. Pretty much useless but it's fun to look at. It doesn't seem work so well with high speed value settings. Also gets screwed up with different  refresh rates. ",
            "flags": 32,
            "hasliked": 0,
            "id": "WsfcDB",
            "likes": 7,
            "name": "Bubble Sort",
            "published": 3,
            "tags": [
                "2d",
                "sort"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 367
        },
        "renderpass": [
            {
                "code": "// Plento\nconst int nBars = 35;\nfloat speed = 60.; \nconst float unq = 600.;\n\nvoid mainImage( out vec4 f, in vec2 u ){\n\n    vec2 uv = u / iResolution.xy;\n    \n    vec4 b = texture(iChannel0, uv);\n    \n    vec3 col = vec3(step(b.w/unq, -1.*(uv.y-1.)));\n    float sch = mod(floor(iTime*speed), float(nBars));\n    \n    float id = floor(uv.x * float(nBars));\n    if(id == sch)col *= vec3(1.0, 0., 0.);\n    \n    f = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int nBars = 35;\nfloat speed = 60.; \nconst float unq = 600.;\nvec2 R;\nfloat read(float offset){\n \treturn texture(iChannel0, vec2(offset + 0.001, 0.)).w;\n}\n\nfloat rnd(float p){\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nvoid mainImage( out vec4 f, in vec2 u ){\n    R = iResolution.xy;\n    vec2 uv = u / R;\n    \n    vec4 b = texture(iChannel0, uv);\n    \n    float cID = mod(floor(iTime*speed), float(nBars));\n    float ratio = 1. / float(nBars);\n    \n    float rs0 = cID * ratio ; \n    float rs1 = (cID + 1.) * ratio ; \n    \n    float i0 = read(rs0);\n    float i1 = read(rs1);\n    \n\tif(i0 < i1){\n\t\tif(uv.x > rs0 && uv.x < rs0 + ratio)\n\t\t\tb.w = i1;\n        else if(uv.x > rs1 && uv.x < rs1 + ratio)\n        \tb.w = i0;\n    } \n    \n    b = vec4(i0, i1, b.z, b.w);\n    \n    float id = floor(uv.x * float(nBars));\n    if(iFrame < 2)b = vec4(floor(rnd(id + 23.34)*unq));\n   \n    f = b;    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}