{
    "Shader": {
        "info": {
            "date": "1724596265",
            "description": "Permutation polynomials allows easy quality random permutations for N=prime \nbut involved for non-primes, see wikipedia.\nAnyway it is easy to compress it to smaller N by following the graph if out of the restricted set.\nClick or Rewind to regenerate.",
            "flags": 32,
            "hasliked": 0,
            "id": "Xc2Bzz",
            "likes": 7,
            "name": "procedural permutation (n=81)",
            "published": 3,
            "tags": [
                "permutations",
                "polynomials"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 153
        },
        "renderpass": [
            {
                "code": "// utils from https://www.shadertoy.com/view/llySRh\n\nvec4 char(vec2 p, int c) {\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx, dFdy );\n}\n#define hue(v)  ( .6 + .6 * cos( 6.283*(v)  + vec4(0,23,21,0)  ) )\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, \n         U = 9.*u/R.y;\n    O *= 0.;\n    if ( U.x > 9. ) return;\n    \n    int n = int( T(vec2(int(U) + 9*int(U.y),0)) ); // read permutation\n     \n    U = fract(U);                                  // display digits\n    O =   char(U+vec2(.2,0), 48+n/10).x * hue(float(n/10)/10.)\n        + char(U-vec2(.2,0), 48+n%10).x * hue(float(n%10)/10.)*.5;\n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// see also https://www.shadertoy.com/view/lXlSzf\n//          https://www.shadertoy.com/view/4s2yRD\n// ref: https://en.wikipedia.org/wiki/Permutation_polynomial#Higher_degree_polynomials\n//      https://www.desmos.com/calculator/ykmoljie7i\n\nint shuffle0(int i)  // --- shuffle integers in 0..82 range (83 is prime)\n{   i++;\n    int a = int( mod(iTime*1e3,82.) ) + 1, \n        k = 0, b = 0; // should be: a, b such that no v with vÂ² = -b/a\n    return ( a*i*i*i + b*i + k ) % 83; // permutation polynomial in prime range\n}\n//#define shuffle0(i) ( int( mod(iTime*1e3,82.) +1. )*++i*i*i ) % 83 // compact version\n\nint shuffle(int i) {    // --- shuffle integers in 0..80 range\n    i = shuffle0(i);\n    if ( i < 81 ) return i; // compress the extra range\n    i = shuffle0(i);\n    if ( i < 81 ) return i;\n    i = shuffle0(i);        // worst case: 2 indirections\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    if ( u.y > 1. || u.x > 81. ) return;\n    \n    if ( iFrame < 1 || iMouse.w > 0. ) { // generate\n        O.x = float( shuffle(int(u)) ); \n        return; \n     }\n     \n    O = T(u);                            // keep state\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}