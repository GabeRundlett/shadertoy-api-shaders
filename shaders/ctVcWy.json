{
    "Shader": {
        "info": {
            "date": "1700604249",
            "description": "Naive Barnsley Fern stylized to look a bit like a limestone fossil.",
            "flags": 32,
            "hasliked": 0,
            "id": "ctVcWy",
            "likes": 11,
            "name": "Barnsley Fern Fossil",
            "published": 3,
            "tags": [
                "fractal",
                "barnsley",
                "fern",
                "fossil"
            ],
            "usePreview": 0,
            "username": "Real_NC",
            "viewed": 237
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = 0.5*(0.9 + 0.1*texture(iChannel1,fragCoord/iResolution.xy))/(0.5+texelFetch(iChannel0, ivec2(fragCoord), 0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 fc = ivec2(fragCoord);\n    if(max(fc.x,fc.y) > SPEED) discard;\n    \n    \n    if(iFrame == 0) fragColor = vec4(0);\n    else\n    {\n        float f = hash(vec3(fragCoord,iFrame));\n        fragColor = texelFetch(iChannel0, fc, 0);\n        int n = 1; // 85%\n        if(f <= 0.01) n = 0; // 1%\n        else if(f <= 0.08) n = 2; // 7%\n        else if(f <= 0.15) n = 3; // 7%\n        \n        fragColor.xy = fragColor.xy*acbd[n] + ef[n];\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    uv *= 11.;\n    uv.y += 5.;\n    \n    fragColor = texelFetch(iChannel1, ivec2(fragCoord), 0) * 0.997;\n    if(iFrame == 0) fragColor = vec4(0);\n    \n    for(ivec2 p = ivec2(0,0); p.x <= SPEED; p.x++)\n    {\n        for(p; p.y <= SPEED; p.y++)\n        {\n            float d = distance(uv, texelFetch(iChannel0, p, 0).xy);\n            fragColor += 0.00004/(0.00004+d*d);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SPEED 24\n\n// Constants for the \"Black Spleenwort\" fern. (Matrix is in a different order than GLSL takes)\nconst mat2[4] acbd = mat2[](\nmat2(0, 0, 0, 0.16),           /*f1*/\nmat2(0.85, -0.04, 0.04, 0.85), /*f2*/\nmat2(0.20, 0.23, -0.26, 0.22), /*f3*/\nmat2(-0.15, -0.26, -0.28, 0.24)  /*f4*/\n);\n\nconst vec2[4] ef   = vec2[](\nvec2(0, 0),   /*f1*/\nvec2(0, 1.6), /*f2*/\nvec2(0, 1.6), /*f3*/\nvec2(0, 0.44) /*f4*/\n);\n//////////////////////////////////////\n// Hash by Dave Hoskins\nfloat hash(vec3 p3)\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}