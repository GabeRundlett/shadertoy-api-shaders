{
    "Shader": {
        "info": {
            "date": "1555261710",
            "description": "An alternative view (no physics)...",
            "flags": 0,
            "hasliked": 0,
            "id": "WsBXWd",
            "likes": 7,
            "name": "Black Hole Accretion",
            "published": 3,
            "tags": [
                "light",
                "fibonacci",
                "relativity"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 579
        },
        "renderpass": [
            {
                "code": "// \"Black Hole Accretion\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 SphFib (vec3 v, float n);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nfloat Hashfv3 (vec3 p);\nfloat Fbm2 (vec2 p);\n\nfloat tCur, dstFar;\nconst float pi = 3.14159, phi = 1.618034;\n\nvec2 BallHit (vec3 ro, vec3 rd, vec3 p, float s)\n{\n  vec3 v;\n  float dbIn, dbOut, b, d;\n  v = ro - p;\n  b = dot (rd, v);\n  d = b * b + s * s - dot (v, v);\n  dbIn = dstFar;\n  dbOut = dstFar;\n  if (d > 0.) {\n    d = sqrt (d);\n    dbIn = - b - d;\n    dbOut = - b + d;\n  }\n  return vec2 (dbIn, dbOut);\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 531.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 571.13 * scl * q.yx));\n  return 12. * vec3 (1., 1., 0.5) * pow (f, 16.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 f4;\n  vec3 col, bPos, ror;\n  vec2 dSph;\n  float nCyc, tCyc, iFib, phs, rMax, rMin, rFac, r, s, rp, c, aSpin, bSpin, pFlash;\n  const float kMax = 20.;\n  rMax = 16.;\n  rMin = 0.5;\n  iFib = 16384.;\n  tCyc = 20.;\n  nCyc = floor (tCur / tCyc) + 1.;\n  phs = fract (tCur / tCyc);\n  pFlash = abs (phs - 1./1.5);\n  phs = min (1.5 * phs, 1.);\n  bPos = vec3 (0.);\n  rp = length (cross (bPos - ro, rd));\n  aSpin = -2. * pi * pow (phs, 4.);\n  bSpin = 0.02 * tCur;\n  c = 0.;\n  for (float k = 0.; k < kMax; k ++) {\n    r = (rMax - (rMax - rMin) * phs) * (1. - 0.002 * k);\n    rFac = 0.004 * (1. - 0.003 * (k - 0.5 * kMax) * (k - 0.5 * kMax));\n    dSph = BallHit (ro, rd, bPos, r);\n    if (dSph.x < dstFar) {\n      ro += dSph.x * rd;\n      ror = normalize (ro);\n      ror.xy = Rot2D (ror.xy, bSpin);\n      ror.xz = Rot2D (ror.xz, aSpin);\n      f4 = SphFib (ror, iFib);\n      s = Hashfv3 (73.11 * f4.yzw + 87.11 * nCyc);\n      if (s > 0.5 && f4.x < rFac * s) c = 1. - 0.01 * (kMax - k);\n      else if (rp < rMin) c = 2.;\n      else {\n        ro += (dSph.y - dSph.x) * rd;\n        ror = normalize (ro);\n        ror.xy = Rot2D (ror.xy, bSpin);\n        ror.xz = Rot2D (ror.xz, aSpin);\n        f4 = SphFib (ror, iFib);\n        s = Hashfv3 (73.11 * f4.yzw + 87.11 * nCyc);\n        if (s > 0.5 && f4.x < rFac * s) c = 0.8;\n      }\n      if (c > 0.) break;\n    }\n  }\n  if (c == 2.) {\n    col = vec3 (0.08, 0., 0.) * (1. - 0.5 * smoothstep (0.8, 1., rp / rMin)) +\n       vec3 (1., 1., 0.5) * (1. - smoothstep (0.001, 0.01, pFlash));\n  } else if (c > 0.) {\n    s = pow ((r - rMin) / (rMax - rMin), 0.7);\n    col = c * HsvToRgb (vec3 (0.15 * s, 1., smoothstep (0., 0.001, s)));\n  } else {\n    col = StarPat (normalize (vec3 (Rot2D (rd.xy, bSpin) * (1. -\n       0.95 * smoothstep (0.7, 1., phs) * (1. - smoothstep (1., 16., rp / rMin))), rd.z)), 4.);\n  }\n  col += vec3 (1., 1., 0.5) * (1. - smoothstep (0.001, 0.005, pFlash));\n  return clamp (col, 0., 1.);\n}\n\n#define AA  1   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az -= 0.02 * pi * mPtr.x;\n    el -= 0.02 * pi * mPtr.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -40.);\n  dstFar = 100.;\n  #if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), 6.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nvec4 SphFib (vec3 v, float n)\n{   // Keinert et al's inverse spherical Fibonacci mapping\n  vec4 b;\n  vec3 vf, vfMin;\n  vec2 ff, c;\n  float fk, ddMin, dd, a, z, ni;\n  ni = 1. / n;\n  fk = pow (phi, max (2., floor (log (n * pi * sqrt (5.) * dot (v.xy, v.xy)) /\n     log (phi + 1.)))) / sqrt (5.);\n  ff = vec2 (floor (fk + 0.5), floor (fk * phi + 0.5));\n  b = vec4 (ff * ni, pi * (fract ((ff + 1.) * phi) - (phi - 1.)));\n  c = floor ((0.5 * mat2 (b.y, - b.x, b.w, - b.z) / (b.y * b.z - b.x * b.w)) *\n     vec2 (atan (v.y, v.x), v.z - (1. - ni)));\n  ddMin = 4.1;\n  for (int j = 0; j < 4; j ++) {\n    a = dot (ff, vec2 (j - 2 * (j / 2), j / 2) + c);\n    z = 1. - (2. * a + 1.) * ni;\n    vf = vec3 (sin (2. * pi * fract (phi * a) + vec2 (0.5 * pi, 0.)) * sqrt (1. - z * z), z);\n    dd = dot (vf - v, vf - v);\n    if (dd < ddMin) {\n      ddMin = dd;\n      vfMin = vf;\n    }\n  }\n  return vec4 (sqrt (ddMin), vfMin);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}