{
    "Shader": {
        "info": {
            "date": "1612125971",
            "description": "License CC0: Sunday fractals\nInspired by: http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/\nSABS from ollj\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Wtdfzr",
            "likes": 9,
            "name": "Sunday fractals",
            "published": 3,
            "tags": [
                "2d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 448
        },
        "renderpass": [
            {
                "code": "// License CC0: Sunday fractals\n// Inspired by: http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/\n// SABS from ollj\n\n#define RESOLUTION      iResolution\n#define TIME            iTime\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define LESS(a,b,c)     mix(a,b,step(0.,c))\n#define SABS(x,k)       LESS((.5/(k))*(x)*(x)+(k)*.5,abs(x),abs(x)-(k))\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n#define L2(x)           dot(x,x)\n#define PSIN(x)         (0.5+0.5*sin(x))\n#define PERIOD          30.0\n#define NPERIOD         floor(TIME/PERIOD)\n#define TIMEINPERIOD    mod(TIME, PERIOD)\n#define FADE            1.0\n#define HPERIOD         hash(NPERIOD)\n\nfloat hash(float co) {\n  co += 2313.0;\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nfloat tanh_approx(float x) {\n  return tanh(x);\n  /*\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n  */\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return vec2(p.x*cos(p.y), p.x*sin(p.y));\n}\n\nfloat modMirror1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize,size) - halfsize;\n  p *= mod(c, 2.0)*2.0 - 1.0;\n  return c;\n}\n\nfloat smoothKaleidoscope(inout vec2 p, float sm, float rep) {\n  vec2 hp = p;\n\n  vec2 hpp = toPolar(hp);\n  float rn = modMirror1(hpp.y, TAU/rep);\n\n  float sa = PI/rep - SABS(PI/rep - abs(hpp.y), sm);\n  hpp.y = sign(hpp.y)*(sa);\n\n  hp = toRect(hpp);\n\n  p = hp;\n\n  return rn;\n}\n\nfloat height(vec2 p, vec2 c, float hh) {\n  p*=mix(1.5, 0.5, TIMEINPERIOD/PERIOD);\n  p+=mix(0.2, 0.0, TIMEINPERIOD/PERIOD);\n  p*=ROT(TIMEINPERIOD*0.05);\n  vec2 op = p;\n  float l2 = L2(p);\n  float rep = 2.0*round(mix(3.0, 30.0, hh*hh));\n  float s = 0.05*6.0/rep;\n  float n = smoothKaleidoscope(p, s, rep);\n  p *= ROT(TAU*hh);\n  vec2 u = p;\n\n  float a = 0.0;\n\n  \n  for (int i = 0; i < 13; ++i) {\n    float m = dot(u, u);\n    u = SABS(u, 0.025)/m + c;\n  }\n  \n  float h = L2(u-p);\n  h = log(h-hh);\n  h = abs(h);\n  h = tanh_approx(.45*h*h+0.125/(l2+0.125));\n  \n  return h;\n}\n\nvec3 normal(vec2 p, vec2 c, float hh) {\n  vec2 v;\n  vec2 w;\n  vec2 e = vec2(4.0/RESOLUTION.y, 0);\n  \n  vec3 n;\n  n.x = height(p + e.xy, c, hh) - height(p - e.xy, c, hh);\n  n.y = 2.0*e.x;\n  n.z = height(p + e.yx, c, hh) - height(p - e.yx, c, hh);\n  \n  return normalize(n);\n}\n\nvec3 hsv2rgb(vec3 c) {\n  const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 postProcess(vec3 col, vec2 q)  {\n  col=pow(clamp(col,0.0,1.0),vec3(1.0/2.2)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // saturation\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  const float s = 1.25;\n  const vec3 lp1 = s*vec3(1.0, 2.25, 1.0)*vec3(s, 1.0, s);\n  const vec3 lp2 = s*vec3(-1.0, 2.25, 1.0)*vec3(s, 1.0, s);\n  \n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  float hh = HPERIOD;\n\n  vec3 col = vec3(0.0);\n  vec2  c = vec2(-0.4-0.2*fract(7.0*hh), -0.4-0.2*fract(13.0*hh));\n\n  float h = height(p, c, hh);\n  vec3  n = normal(p, c, hh);\n\n  vec3 ro = vec3(0.0, -10.0, 0.0);\n  vec3 pp = vec3(p.x, 0.0, p.y);\n\n  vec3 po = vec3(p.x, h, p.y);\n  vec3 rd = normalize(po - ro);\n\n  vec3 ld1 = normalize(lp1 - po);\n  vec3 ld2 = normalize(lp2 - po);\n\n  float l = length(p);\n\n  vec3 hsv1 = vec3(hh+mix(0.0, 0.2, PSIN(0.3*TIME-2.0*l+(p.x+p.y))), tanh_approx(h*h), tanh_approx(3.0*h*h));\n  hsv1.yz = clamp(hsv1.yz, 0.0, 1.0);\n  vec3 col1 = hsv2rgb(hsv1);\n  vec3 col2 = pow(col1, vec3(0.25, 0.5, 2.0));\n\n  float diff1 = max(dot(n, ld1), 0.0);\n  float diff2 = max(dot(n, ld2), 0.0);\n\n  vec3  ref   = reflect(rd, n);\n  float ref1  = max(dot(ref, ld1), 0.0);\n  float ref2  = max(dot(ref, ld2), 0.0);\n\n  col += col1*mix(0.1, 1.0, pow(diff1, 8.0))*0.5;\n  col += col2*mix(0.1, 1.0, pow(diff2, 8.0))*0.5;\n  col = pow(col, vec3(1.5));\n  col += 8.0*col1*pow(ref1, 40.0);\n  col += 4.0*col2*pow(ref2, 10.0);\n\n  col = tanh(2.5*col);\n  col = postProcess(col, q);\n  \n  float fadeIn  = smoothstep(0.0, FADE, TIMEINPERIOD);\n  float fadeOut = 1.0-smoothstep(PERIOD-FADE, PERIOD, TIMEINPERIOD);\n  col = mix(vec3(0.0), col, fadeIn*fadeIn*fadeOut*fadeOut);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}