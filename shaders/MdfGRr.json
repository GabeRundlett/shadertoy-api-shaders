{
    "Shader": {
        "info": {
            "date": "1360471561",
            "description": "A Julia-bulb implementation. Two tricks worth noting: [1] it doesn't use pow() functions to compute complex number powers, but it uses algebra instead.  [2] the distance estimator (DE) is analytic, not based on numerically computed gradient. ",
            "flags": 0,
            "hasliked": 0,
            "id": "MdfGRr",
            "likes": 116,
            "name": "Juliabulb - derivative",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal",
                "distancefield",
                "juliabulb"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 20742
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\n// This is the code for this video from 2009: https://www.youtube.com/watch?v=iWr5kSZQ7jk\n\n\n// https://iquilezles.org/articles/intersectors\nvec2 isphere( in vec4 sph, in vec3 ro, in vec3 rd )\n{\n    vec3 oc = ro - sph.xyz;\n    \n\tfloat b = dot(oc,rd);\n\tfloat c = dot(oc,oc) - sph.w*sph.w;\n    float h = b*b - c;\n    if( h<0.0 ) return vec2(-1.0);\n    h = sqrt( h );\n    return -b + vec2(-h,h);\n}\n\nfloat map( in vec3 p, in vec3 c, out vec4 resColor )\n{\n    vec3 z = p;\n    float m = dot(z,z);\n\n    vec4 trap = vec4(abs(z),m);\n\tfloat dz = 1.0;\n    \n\tfor( int i=0; i<4; i++ )\n    {\n        // size of the derivative of z (comp through the chain rule)\n        // dz = 8*z^7*dz\n\t\tdz = 8.0*pow(m,3.5)*dz;\n        \n        // z = z^8+z\n        float r = length(z);\n        float b = 8.0*acos( clamp(z.y/r, -1.0, 1.0));\n        float a = 8.0*atan( z.x, z.z );\n        z = c + pow(r,8.0) * vec3( sin(b)*sin(a), cos(b), sin(b)*cos(a) );\n        \n        // orbit trapping\n        trap = min( trap, vec4(abs(z),m) );\n\n        m = dot(z,z);\n\t\tif( m > 2.0 )\n            break;\n    }\n\n    resColor = trap;\n\n    // distance estimation (through the Hubbard-Douady potential)\n    return 0.25*log(m)*sqrt(m)/dz;\n}\n\nfloat raycast( in vec3 ro, in vec3 rd, out vec4 rescol, float fov, vec3 c )\n{\n    float res = -1.0;\n\n    // bounding volume\n    vec2 dis = isphere( vec4( 0.0, 0.0, 0.0, 1.25 ), ro, rd );\n    if( dis.y<0.0 )\n        return -1.0;\n    dis.x = max( dis.x, 0.0 );\n\n\tvec4 trap;\n\n    // raymarch\n\tfloat fovfactor = 1.0/sqrt(1.0+fov*fov);\n\tfloat t = dis.x;\n\tfor( int i=0; i<256; i++  )\n    { \n        vec3 p = ro + rd*t;\n\n        float surface = clamp( 0.001*t*fovfactor, 0.0001, 0.1 );\n\n\t\tfloat dt = map( p, c, trap );\n\t\tif( t>dis.y || dt<surface ) break;\n\n        t += min(dt,0.05);\n    }\n    \n    \n    if( t<dis.y )\n    {\n        rescol = trap;\n        res = t;\n    }\n\n    return res;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k, vec3 c )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<150; i++ )\n    {\n        vec4 kk;\n        float h = map(ro + rd*t, c, kk);\n        res = min( res, k*h/t );\n        if( res<0.001 ) break;\n        t += clamp( h, 0.001, 0.05 );\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos, in float t, in float fovfactor, vec3 c )\n{\n    vec4 tmp;\n    float surface = clamp( 0.0005*t*fovfactor, 0.0001, 0.1 );\n    vec2 eps = vec2( surface, 0.0 );\n\treturn normalize( vec3(\n           map(pos+eps.xyy,c,tmp) - map(pos-eps.xyy,c,tmp),\n           map(pos+eps.yxy,c,tmp) - map(pos-eps.yxy,c,tmp),\n           map(pos+eps.yyx,c,tmp) - map(pos-eps.yyx,c,tmp) ) );\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    float time = iTime*.15;\n\n\tvec3 light1 = vec3(  0.577, 0.577, -0.577 );\n\tvec3 light2 = vec3( -0.707, 0.000,  0.707 );\n\n\n\tfloat r = 1.3+0.1*cos(.29*time);\n\tvec3  ro = vec3( r*cos(.33*time), 0.8*r*sin(.37*time), r*sin(.31*time) );\n\tvec3  ta = vec3(0.0,0.1,0.0);\n\tfloat cr = 0.5*cos(0.1*time);\n\n\tfloat fov = 1.5;\n    vec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize(cross(cw,cp));\n\tvec3 cv = normalize(cross(cu,cw));\n\tvec3 rd = normalize( p.x*cu + p.y*cv + fov*cw );\n\n\n\tvec3 cc = vec3( 0.9*cos(3.9+1.2*time)-.3, 0.8*cos(2.5+1.1*time), 0.8*cos(3.4+1.3*time) );\n\tif( length(cc)<0.50 ) cc=0.50*normalize(cc);\n\tif( length(cc)>0.95 ) cc=0.95*normalize(cc);\n\n\tvec3 col;\n\tvec4 tra;\n    float t = raycast( ro, rd, tra, fov, cc );\n    if( t<0.0 )\n    {\n     \tcol = 1.3*vec3(0.8,.95,1.0)*(0.7+0.3*rd.y);\n\t\tcol += vec3(0.8,0.7,0.5)*pow( clamp(dot(rd,light1),0.0,1.0), 32.0 );\n\t}\n\telse\n\t{\n\t\tvec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos, t, fov, cc );\n        vec3 hal = normalize( light1-rd);\n        vec3 ref = reflect( rd, nor );\n        \n        col = vec3(1.0,1.0,1.0)*0.3;\n        col = mix( col, vec3(0.7,0.3,0.3), sqrt(tra.x) );\n\t\tcol = mix( col, vec3(1.0,0.5,0.2), sqrt(tra.y) );\n\t\tcol = mix( col, vec3(1.0,1.0,1.0), tra.z );\n        col *= 0.4;\n                \n\t\tfloat dif1 = clamp( dot( light1, nor ), 0.0, 1.0 );\n\t\tfloat dif2 = clamp( 0.5 + 0.5*dot( light2, nor ), 0.0, 1.0 );\n        float occ = clamp(1.2*tra.w-0.6,0.0,1.0);\n        float sha = softshadow( pos,light1, 0.0001, 32.0, cc );\n        float fre = 0.04 + 0.96*pow( clamp(1.0-dot(-rd,nor),0.0,1.0), 5.0 );\n        float spe = pow( clamp(dot(nor,hal),0.0,1.0), 12.0 ) * dif1 * fre*8.0;\n        \n\t\tvec3 lin  = 1.0*vec3(0.15,0.20,0.23)*(0.6+0.4*nor.y)*(0.1+0.9*occ);\n\t\t     lin += 4.0*vec3(1.00,0.90,0.60)*dif1*sha;\n\t\t     lin += 4.0*vec3(0.14,0.14,0.14)*dif2*occ;\n             lin += 2.0*vec3(1.00,1.00,1.00)*spe*sha * occ;\n             lin += 0.3*vec3(0.20,0.30,0.40)*(0.02+0.98*occ);\n\t\tcol *= lin;\n        col += spe*1.0*occ*sha;\n\t}\n\n\tcol = sqrt( col );\n\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}