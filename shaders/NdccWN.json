{
    "Shader": {
        "info": {
            "date": "1653436553",
            "description": "The seed of the image changes in every beat for making a visual with the same pattern but similar.",
            "flags": 32,
            "hasliked": 0,
            "id": "NdccWN",
            "likes": 6,
            "name": "Generative Beat",
            "published": 3,
            "tags": [
                "beat",
                "generative",
                "feedback"
            ],
            "usePreview": 0,
            "username": "jpupper",
            "viewed": 294
        },
        "renderpass": [
            {
                "code": "\n#define fx iResolution.x/iResolution.y\n#define PI 3.14159235859\nfloat rdm(float p){\n    p*=1234.56;\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    return fract(2.*p*p);\n}\nfloat sm(float m1,float m2, float e){\n\treturn smoothstep(m1,m2,e);\n}\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\nfloat mapr(float _value,float _low2,float _high2) {\n\tfloat val = _low2 + (_high2 - _low2) * (_value - 0.) / (1.0 - 0.);\n    //float val = 0.1;\n\treturn val;\n}\nvec3 l2(vec2 uv,float h){\n\n\tfloat red =mapr(rdm(h+201.),0.0,1.);\n\tfloat g =mapr(rdm(h+431.),0.0,1.);\n\tfloat b =mapr(rdm(h+3023.),0.0,1.);\n\n\tfloat spr =1.;\n\tvec2 sp = vec2(mapr(rdm(h+21.),-spr,spr),\n\t \t         mapr(rdm(h+4031.),-spr,spr));\n\tvec3 cf = vec3(red,g,b);\n\n \t\n\tfloat fr = mapr(rdm(h+453.),5.0,30.);\n\tuv.x*=fx;\n\tuv-=vec2(.5);\n\tuv*=rotate2d(rdm(h+324.)*PI*2.);\n\tuv+=vec2(.5);\n\tuv =fract(uv*fr+vec2(iTime)*sp);\n\t \n\t vec2 p =vec2(0.5*fx,.5)-uv;\n\t float r = length(p);\n\n\tfloat ridx = floor(mapr(rdm(h+4685.),0.0,3.0));\n\n\tfloat e = 0.0; \n\n\tif(ridx == 0.0){\n\n\t\te = 1.-sm(0.1,0.2,uv.x);\n\t}else if(ridx == 1.0 ){\n\n \t\te = 1.-sm(0.1,0.2,uv.x);\n \t\te+= 1.-sm(0.1,0.2,uv.y);\n\t}else if(ridx == 2.0){\n\t\tvec2 p =vec2(0.5,.5)-uv;\n\t \tfloat r = length(p);\n\t \te = 1.-sm(0.1,0.2,r);\n\n\t}\n\t \n\t vec3 dib = cf +sin(e*10.+iTime);\n\t return dib;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = gl_FragCoord.xy / iResolution.xy;\n   vec2 puv = uv;\n   vec2 puv2 = uv;\n\t\n\tfloat t  = floor(iTime*1.0)*0.01;\n\tfloat sr = t;\n vec3 d1 = l2(uv,sr);\n \n\n const int cnt = 5;\n\n vec3 d1aux = d1;\n vec3 fin = d1;\n\tfor(int i =0; i<cnt;i++){\n\t\t\n\t\tvec3 d2 = l2(uv,sr+120.+float(i)*4.);\n\t\tfloat idx = float(i)/float(cnt)*PI*2.;\n\t\t//MASK CIRCLE : \n\t\tvec2 uv_c = uv;\n\t\tuv_c.x*=fx;\n\n\t\tfloat fase = rdm(sr*465.+float(i))*PI*2.;\n\t\t\n\t\tfloat fase2 = rdm(sr*465.+float(i))*PI*2.;\n\n\t\tfloat ampx = sin(rdm(sr*4587.+float(i)*535.)+iTime*.02)*.15+.05;\n\t\tfloat ampy = cos(rdm(sr*4587.+float(i)*535.)+iTime*.02)*.15+.05;\n\t\tfloat s = mapr(rdm(sr+float(i)*325.),0.1,0.2);\n\t\tvec2 p = vec2(0.5*fx,.5) - uv_c;\n\t\tfloat r = length(p);\n\t\tfloat a = atan(p.x,p.y);\n\n\n\t\tfloat amp_mof = mapr(rdm(sr*6384.+float(i)*5341.+t*10.),0.01,0.08);\n\t\tfloat mof = sin(a*5.+iTime)*amp_mof;\n\t\tfloat e = 0.0;\n\t\t\n\t\tfloat ridx = floor(mapr(rdm(sr+4685.+float(i)*579.*10.),0.0,4.0));\n\t\t\n\t\tif(i == cnt){\n\t\t\tridx = 0.0;\n\t\t}\n\t\t\n\t\te = 1.-sm(s,s+0.8,sin(r*10.+idx*40.+sin(iTime+idx))-mof);\n\n\n\t\tif(fin != d1aux && e > 0.001){\n\t\t\tfin = mix(fin,d2,e);\n\t\t}else{\n\t\t\tvec3 d3 = l2(uv,sr+620.+float(i)*57.);\n\t\t\tfin = mix(fin,d3,e);\n\t\t}\n\t}\n\n\tfloat prom = length(fin);\n\t\n    \n\tvec4 fb2 = texture(iChannel0,uv);\n\tfloat fb2_prom = (fb2.r+fb2.g+fb2.b)/3.;\n\t\n\tpuv-=vec2(0.5+fb2_prom*.001);\n\tpuv*= scale(vec2(0.995+fb2_prom*.0001));\n\tpuv+=vec2(0.5-fb2_prom*.001);\n\t\n    \n   \n\tvec4 fb = texture(iChannel0,puv2);\n\t\t\n\tif(prom > 0.995){\n\t\tfin = vec3(0.0);\n\t}\n\t\n\tfloat prom2 = (fin.r+fin.g+fin.b)/3.;\n\t\n\tfin = smoothstep(0.1,0.9,fin);\n\tif( prom2 < 0.2){\n\t\tfin = fb.rgb*.992;\n\t}\n    \n     puv2-=length(fin)*.04;\n     puv2.y=1.-puv2.y;\n\tvec3 textoloco = texture(iChannel1,puv2).rgb;\n    \n    fin+=textoloco;\n\tfragColor = vec4(fin, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define fx iResolution.x/iResolution.y\n#define PI 3.14159235859\nfloat rdm(float p){\n    p*=1234.56;\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    return fract(2.*p*p);\n}\nfloat sm(float m1,float m2, float e){\n\treturn smoothstep(m1,m2,e);\n}\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\nfloat mapr(float _value,float _low2,float _high2) {\n\tfloat val = _low2 + (_high2 - _low2) * (_value - 0.) / (1.0 - 0.);\n    //float val = 0.1;\n\treturn val;\n}\nvec3 l2(vec2 uv,float h){\n\n\tfloat red =mapr(rdm(h+201.),0.0,1.);\n\tfloat g =mapr(rdm(h+431.),0.0,1.);\n\tfloat b =mapr(rdm(h+3023.),0.0,1.);\n\n\tfloat spr =1.;\n\tvec2 sp = vec2(mapr(rdm(h+21.),-spr,spr),\n\t \t         mapr(rdm(h+4031.),-spr,spr));\n\tvec3 cf = vec3(red,g,b);\n\n \t\n\tfloat fr = mapr(rdm(h+453.),5.0,30.);\n\tuv.x*=fx;\n\tuv-=vec2(.5);\n\tuv*=rotate2d(rdm(h+324.)*PI*2.);\n\tuv+=vec2(.5);\n\tuv =fract(uv*fr+vec2(iTime)*sp);\n\t \n\t vec2 p =vec2(0.5*fx,.5)-uv;\n\t float r = length(p);\n\n\tfloat ridx = floor(mapr(rdm(h+4685.),0.0,3.0));\n\n\tfloat e = 0.0; \n\n\tif(ridx == 0.0){\n\n\t\te = 1.-sm(0.1,0.2,uv.x);\n\t}else if(ridx == 1.0 ){\n\n \t\te = 1.-sm(0.1,0.2,uv.x);\n \t\te+= 1.-sm(0.1,0.2,uv.y);\n\t}else if(ridx == 2.0){\n\t\tvec2 p =vec2(0.5,.5)-uv;\n\t \tfloat r = length(p);\n\t \te = 1.-sm(0.1,0.2,r);\n\n\t}\n\t \n\t vec3 dib = cf +sin(e*10.+iTime);\n\t return dib;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = gl_FragCoord.xy / iResolution.xy;\n\tvec2 puv = uv;\n\t\n\t\n\tfloat t  = floor(iTime*1.0)*0.01;\n\tfloat sr = t;\n vec3 d1 = l2(uv,sr);\n \n\n const int cnt = 5;\n\n vec3 d1aux = d1;\n vec3 fin = d1;\n\tfor(int i =0; i<cnt;i++){\n\t\t\n\t\tvec3 d2 = l2(uv,sr+120.+float(i)*4.);\n\t\tfloat idx = float(i)/float(cnt)*PI*2.;\n\t\t//MASK CIRCLE : \n\t\tvec2 uv_c = uv;\n\t\tuv_c.x*=fx;\n\n\t\tfloat fase = rdm(sr*465.+float(i))*PI*2.;\n\t\t\n\t\tfloat fase2 = rdm(sr*465.+float(i))*PI*2.;\n\n\t\tfloat ampx = sin(rdm(sr*4587.+float(i)*535.)+iTime*.02)*.15+.05;\n\t\tfloat ampy = cos(rdm(sr*4587.+float(i)*535.)+iTime*.02)*.15+.05;\n\t\tfloat s = mapr(rdm(sr+float(i)*325.),0.1,0.2);\n\t\tvec2 p = vec2(0.5*fx,.5) - uv_c;\n\t\tfloat r = length(p);\n\t\tfloat a = atan(p.x,p.y);\n\n\n\t\tfloat amp_mof = mapr(rdm(sr*6384.+float(i)*5341.+t*10.),0.01,0.08);\n\t\tfloat mof = sin(a*5.+iTime)*amp_mof;\n\t\tfloat e = 0.0;\n\t\t\n\t\tfloat ridx = floor(mapr(rdm(sr+4685.+float(i)*579.*10.),0.0,4.0));\n\t\t\n\t\tif(i == cnt){\n\t\t\tridx = 0.0;\n\t\t}\n\t\t\n\t\te = 1.-sm(s,s+0.8,sin(r*10.+idx*40.+sin(iTime+idx))-mof);\n\n\n\t\tif(fin != d1aux && e > 0.001){\n\t\t\tfin = mix(fin,d2,e);\n\t\t}else{\n\t\t\tvec3 d3 = l2(uv,sr+620.+float(i)*57.);\n\t\t\tfin = mix(fin,d3,e);\n\t\t}\n\t}\n\n\tfloat prom = length(fin);\n\t\n\t\n\tvec4 fb2 = texture(iChannel0,uv);\n\tfloat fb2_prom = (fb2.r+fb2.g+fb2.b)/3.;\n\t\n\tpuv-=vec2(0.5+fb2_prom*.001);\n\tpuv*= scale(vec2(0.995+fb2_prom*.0001));\n\tpuv+=vec2(0.5-fb2_prom*.001);\n\t\n\tvec4 fb = texture(iChannel0,puv);\n\t\t\n\tif(prom > 0.995){\n\t\tfin = vec3(0.0);\n\t}\n\t\n\tfloat prom2 = (fin.r+fin.g+fin.b)/3.;\n\t\n\tfin = smoothstep(0.1,0.9,fin);\n\tif( prom2 < 0.2){\n\t\tfin = fb.rgb*.992;\n\t}\n\t\n\tfragColor = vec4(fin, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ↙\n//  ↙\n//   ↙\n// https://youtu.be/dQw4w9WgXcQ\n\n// compare algorithm performance, comment out line below to see previous performance:\n#define ANOTHER_ALGORITHM      // runs slower on ARM, so comment this out if mobile phone performance is priority\n\nvec2 uv;\n\n#define time iTime\n#define resolution iResolution\n\nconst vec2 ch_size  = vec2(1.0, 2.0) * 0.6;              // character size (X,Y)\nconst vec2 ch_space = ch_size + vec2(1.5, 1.0);    // character distance Vector(X,Y)\nconst vec2 ch_start = vec2 (ch_space.x * -5., 1.); // start position\n      vec2 ch_pos   = vec2 (0.0, 0.0);             // character position(X,Y)\n//      vec3 ch_color = vec3 (1.5, 0.75, 0.5);        // character color (R,G,B)\n//const vec3 bg_color = vec3 (0.2, 0.2, 0.2);        // background color (R,G,B)\n\n#define REPEAT_SIGN false // True/False; True=Multiple, False=Single\n\n/* 16 segment display...Akin to LED Display.\n\nSegment bit positions:\n  __2__ __1__\n |\\    |    /|\n | \\   |   / |\n 3  11 10 9  0\n |   \\ | /   |\n |    \\|/    |\n  _12__ __8__\n |           |\n |    /|\\    |\n 4   / | \\   7\n | 13 14  15 |\n | /   |   \\ |\n  __5__|__6__\n\n15 12 11 8 7  4 3  0\n |  | |  | |  | |  |\n 0000 0000 0000 0000\n\nexample: letter A\n\n   12    8 7  4 3210\n    |    | |  | ||||\n 0001 0001 1001 1111\n\n binary to hex -> 0x119F\n*/\n\n// split 16 Bit int into two 8 Bit int for mobile phones with ridiculous 1-byte int\n#define n0 ddigit(0x22,0xFF);\n#define n1 ddigit(0x02,0x81);\n#define n2 ddigit(0x11,0x77);\n#define n3 ddigit(0x11,0xE7);\n#define n4 ddigit(0x55,0x08);\n#define n5 ddigit(0x11,0xEE);\n#define n6 ddigit(0x11,0xFE);\n#define n7 ddigit(0x22,0x06);\n#define n8 ddigit(0x11,0xFF);\n#define n9 ddigit(0x11,0xEF);\n\n#define A ddigit(0x11,0x9F);\n#define B ddigit(0x92,0x7E);\n#define C ddigit(0x00,0x7E);\n#define D ddigit(0x44,0xE7);\n#define E ddigit(0x10,0x7E);\n#define F ddigit(0x10,0x1E);\n#define G ddigit(0x80,0x7E);\n#define H ddigit(0x11,0x99);\n#define I ddigit(0x44,0x66);\n#define J ddigit(0x44,0x36);\n#define K ddigit(0x92,0x18);\n#define L ddigit(0x00,0x78);\n#define M ddigit(0x0A,0x99);\n#define N ddigit(0x88,0x99);\n#define O ddigit(0x00,0xFF);\n#define P ddigit(0x11,0x1F);\n#define Q ddigit(0x80,0xFF);\n#define R ddigit(0x91,0x1F);\n#define S ddigit(0x88,0x66);\n#define T ddigit(0x44,0x06);\n#define U ddigit(0x00,0xF9);\n#define u ddigit(0x00,0xF0);\n#define V ddigit(0x22,0x18);\n#define W ddigit(0xA0,0x99);\n#define w ddigit(0xA0,0x90);\n#define X ddigit(0xAA,0x00);\n#define Y ddigit(0x4A,0x00);\n#define Z ddigit(0x22,0x66);\n#define _ ch_pos.x += ch_space.x;\n#define s_dot     ddigit(0,0);\n#define s_minus   ddigit(0x11,0x00);\n#define s_plus    ddigit(0x55,0x00);\n#define s_greater ddigit(0x28,0x00);\n#define s_less    ddigit(0x82,0x00);\n#define s_sqrt    ddigit(0x0C,0x02);\n#define s_sw      ddigit(0x55,0xAA);\n#define s_pow     ddigit(0x02,0x01);\n#define upper_u   ddigit(0x11,0x09);\n#define s_bra    ddigit(0x00,0x3C);\n#define s_ket    ddigit(0x00,0xC3);\n#define s_quotl    ddigit(0x04,0x01);\n#define s_quotr    ddigit(0x04,0x08);\n#define s_degrees    ddigit(0x05,0x03);\n#define s_ast    ddigit(0xFF,0x00);\n#define s_question ch_pos-=vec2(-.45,.4); ddigit(0,0); ch_pos+=vec2(-ch_space.x-.45,.4); ddigit(0x41,0x07);\n#define s_exclam   ch_pos-=vec2(-.45,.4); ddigit(0,0); ch_pos+=vec2(-ch_space.x-.45,.4); ddigit(0x44,0x00);\n#define s_comma   ch_pos-=vec2(.45); ddigit(0x20,0x00); ch_pos+=vec2(.45);\n#define nl1 ch_pos = ch_start;  ch_pos.y -= 3.0;\n#define nl2 ch_pos = ch_start;  ch_pos.y -= 6.0;\n#define nl3 ch_pos = ch_start;\tch_pos.y -= 9.0;\n\n#ifdef ANOTHER_ALGORITHM\nfloat dseg1(vec2 p0, vec2 p1)\n{\n\tvec2 cp = vec2(uv.x-(uv.y*.5-ch_pos.y*.5-p0.y), uv.y) - ch_pos - p0;\n\treturn distance(cp, vec2(0., clamp(cp.y, 0., p1.y-p0.y)) );\n}\nfloat dseg2(vec2 p0, vec2 p1)\n{\n\tvec2 cp = vec2(uv.x+(uv.y*.5-.9-ch_pos.y*.5-p0.y), uv.y) - ch_pos - p0;\n\treturn distance(cp, vec2(0., clamp(cp.y, 0., p1.y-p0.y)) );\n}\n#else\nfloat dseg(vec2 p0, vec2 p1)\n{\n\tvec2 dir = normalize(p1 - p0);\n\tvec2 cp = (uv - ch_pos - p0) * mat2(dir.x, dir.y,-dir.y, dir.x);\n\treturn distance(cp, clamp(cp, vec2(0), vec2(distance(p0, p1), 0)));\n}\n#endif\nfloat dsegH(vec2 p0, vec2 p1) // avoiding matric ops\n{\n\tvec2 cp = uv - ch_pos - p0;\n\t//return distance(cp, clamp(cp, vec2(0), vec2(distance(p0, p1), 0)));\n\treturn distance(cp, vec2(clamp(cp.x, 0., p1.x-p0.x), 0.) );\n}\nfloat dsegV(vec2 p0, vec2 p1) // avoiding matrix ops\n{\n\tvec2 cp = uv - ch_pos - p0;\n\t//return distance(cp, clamp(cp, vec2(0), vec2(0, distance(p0, p1))));\n\treturn distance(cp, vec2(0., clamp(cp.y, 0., p1.y-p0.y)) );\n}\n\nbool bit(int n)\n{\n\treturn (n/2)*2 != n;\n}\n\nfloat d = 1e6;\n\n#ifdef ANOTHER_ALGORITHM\t\t// Intel skylake GPU seems to prefer this\nvoid ddigit(int n, int nn)\n{\n\tfloat v = 1e6;\n\tvec2 cp = uv - ch_pos;\n\t// better performance in this order, on Intel Iris 550 skylake  (WHY does order matter??)\n\tif (n == 0 && nn==0)     v = min(v, dsegH(vec2(-0.405, -1.000), vec2(-0.500, -1.000)));\n\tif (bit(nn/4)) v = min(v, dsegH(vec2( -0.438,  1.000), vec2(-0.063, 1.000)));\n\tif (bit(nn/2)) v = min(v, dsegH(vec2(0.063,  1.000), vec2(0.438,  1.000)));\n\tif (bit(nn/32)) v = min(v, dsegH(vec2(-0.438, -1.000), vec2(-0.063, -1.000)));\n\tif (bit(nn/64)) v = min(v, dsegH(vec2( 0.063, -1.000), vec2( 0.438, -1.000)));\n\tif (bit(n/1)) v = min(v, dsegH(vec2( 0.063,  0.000), vec2( 0.438, -0.000)));\n\tif (bit(n/16)) v = min(v, dsegH(vec2(-0.438,  0.000), vec2(-0.063, -0.000)));\n\tif (bit(nn/1)) v = min(v, dsegV(vec2( 0.500,  0.063), vec2( 0.500,  0.937)));\n\tif (bit(nn/128)) v = min(v, dsegV(vec2( 0.500, -0.938), vec2( 0.500, -0.063)));\n\tif (bit(n/4)) v = min(v, dsegV(vec2( 0.000,  0.063), vec2( 0.000,  0.937)));\n\tif (bit(n/64)) v = min(v, dsegV(vec2( 0.000, -0.938), vec2( 0.000, -0.063)));\n\tif (bit(nn/8)) v = min(v, dsegV(vec2(-0.500,  0.063), vec2(-0.500,  0.937)));\n\tif (bit(nn/16)) v = min(v, dsegV(vec2(-0.500, -0.938), vec2(-0.500, -0.063)));\n\t// matrix ops last\n\tif (bit(n/2)) v = min(v, dseg1(vec2( 0.063,  0.063), vec2( 0.063,  0.938)));\n\tif (bit(n/8)) v = min(v, dseg2(vec2(-0.963,  0.063), vec2(-1.338,  0.938)));\n\tif (bit(n/32)) v = min(v, dseg1(vec2(-0.963, -0.938), vec2(-0.963, -0.063)));\n\tif (bit(n/128)) v = min(v, dseg2(vec2( 0.063, -0.938), vec2( 0.063, -0.063)));\n\tch_pos.x += ch_space.x;\n\td = min(d, v);\n}\n#else\t\t// some GPU's may run faster with this\nvoid ddigit(int n, int nn)\n{\n\tfloat v = 1e6;\n    vec2 cp = uv - ch_pos;\n    if (n == 0 && nn == 0)     v = min(v, dseg(vec2(-0.405, -1.000), vec2(-0.500, -1.000)));\n\tif (bit(nn/1)) v = min(v, dseg(vec2( 0.500,  0.063), vec2( 0.500,  0.937)));\n\tif (bit(nn/2)) v = min(v, dseg(vec2( 0.438,  1.000), vec2( 0.063,  1.000)));\n\tif (bit(nn/4)) v = min(v, dseg(vec2(-0.063,  1.000), vec2(-0.438,  1.000)));\n\tif (bit(nn/8)) v = min(v, dseg(vec2(-0.500,  0.937), vec2(-0.500,  0.062)));\n\tif (bit(nn/16)) v = min(v, dseg(vec2(-0.500, -0.063), vec2(-0.500, -0.938)));\n\tif (bit(nn/32)) v = min(v, dseg(vec2(-0.438, -1.000), vec2(-0.063, -1.000)));\n\tif (bit(nn/64)) v = min(v, dseg(vec2( 0.063, -1.000), vec2( 0.438, -1.000)));\n\tif (bit(nn/128)) v = min(v, dseg(vec2( 0.500, -0.938), vec2( 0.500, -0.063)));\n\tif (bit(n/1)) v = min(v, dseg(vec2( 0.063,  0.000), vec2( 0.438, -0.000)));\n\tif (bit(n/2)) v = min(v, dseg(vec2( 0.063,  0.063), vec2( 0.438,  0.938)));\n\tif (bit(n/4)) v = min(v, dseg(vec2( 0.000,  0.063), vec2( 0.000,  0.937)));\n\tif (bit(n/8)) v = min(v, dseg(vec2(-0.063,  0.063), vec2(-0.438,  0.938)));\n\tif (bit(n/16)) v = min(v, dseg(vec2(-0.438,  0.000), vec2(-0.063, -0.000)));\n\tif (bit(n/32)) v = min(v, dseg(vec2(-0.063, -0.063), vec2(-0.438, -0.938)));\n\tif (bit(n/64)) v = min(v, dseg(vec2( 0.000, -0.938), vec2( 0.000, -0.063)));\n\tif (bit(n/128)) v = min(v, dseg(vec2( 0.063, -0.063), vec2( 0.438, -0.938)));\n\tch_pos.x += ch_space.x;\n\td = min(d, v);\n}\n#endif\n\nmat2 rotate(float a)\n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n\nvec3 generarTextoLoco(){\n   \n    //fragColor = vec4(fractalLoco();,1.);\n    //fragColor = vec4(vec3(1.0,0.0,0.0),1.);\n    vec2 aspect = resolution.xy / resolution.y;\n\tuv = ( gl_FragCoord.xy / resolution.y ) - aspect / 2.0;\n\tfloat _d =  1.0-length(uv);\n    \n    \n\tuv *= 40.0 ;\n\t\n    uv -= vec2(-8., 4.);\n    //uv *= rotate(time+uv.x*0.05);\n\n\t//uv.x+=4. + sin(uv.y*1.5+time*3.)*.15;\n\tch_pos = ch_start;\n\n\t\t\tnl2\n\t   \t\t_ _ _ _ _ _ _ J P U P P E R _ _ _ _ _\n    float a = smoothstep(0.6,0.1,d);\n    float b = smoothstep(0.5,0.4,d) * .8;\n  \tvec3 ch_color = hsv2rgb_smooth(vec3(time*0.4+uv.y*0.1,0.5,1.0));\n    vec3 col=ch_color*a;\n    return col;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec3 col=generarTextoLoco();\n       //  col+=texto;\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}