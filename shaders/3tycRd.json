{
    "Shader": {
        "info": {
            "date": "1611529139",
            "description": "Interesting result from cellular automata formula\n\nIf you pick 1px (0.004 ?)  head size, you get the standard result of cellular automata.",
            "flags": 32,
            "hasliked": 0,
            "id": "3tycRd",
            "likes": 2,
            "name": "Cellular Automata Cobra",
            "published": 3,
            "tags": [
                "automata",
                "feedback",
                "cellular",
                "backbuffer"
            ],
            "usePreview": 0,
            "username": "xavierseb",
            "viewed": 341
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = vec2(uv.x, uv.y * (iResolution.y/iResolution.x));\n    \n    float x = texture(iChannel0, uv).r;\n    fragColor = vec4(vec3(pow(x, 4.)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Cellular Automata Cobra \n\n\n// large head\n#define HEAD_SIZE .1\n\n// head for original cellular automata result\n//#define HEAD_SIZE .004\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord  ) {\n\tvec2 uv=fragCoord/iResolution.xy;\n\tvec2 res=iResolution.xx/200000.;\n\tfloat c=1.;\n\t//vec2 pos= vec2(0.5,max(sin(iTime)*.8,sin(iTime*2.)*.1)); // Cobra\n\tvec2 pos = iMouse.x<1.? vec2(0.5+cos(iTime*4.)/24.,max(sin(iTime)*.9,sin(iTime*2.)*.1)) : iMouse.xy/iResolution.xy;\n    //if(pos.y<0.) pos.y=.0;     if(pos.y>1.) pos.y=.5; // prevent screen from filling\n\t\n    if(distance(uv,pos)>HEAD_SIZE) {\n    \n\t\tfloat p0 = round(texture( iChannel0, uv + res ).r); \n\t\tfloat p1 = round(texture( iChannel0, uv + vec2( 0.,res.y) ).r); \n\t\t//float p1 = texture2D( bb, uv - vec2( 0.,res.y) ).r; \n\t\tfloat p2 = round(texture( iChannel0, uv + vec2(-res.x,res.y) ).r); \n\t\n\t\tif(p0==p2) c=0.;                                           // #90\t\t\t\t\t\t\n\t\t// c=0.; if(p0+p1+p2==1.) c=1.; if(p0==0.&&p1==1.&&p2==1.) c=1.; // #30\t\t\n\t\t// c=0.; if(p0+p1+p2==1.) c=1.; if(p0+p1+p2==3.) c=1.;\t// #150\t\t\t\t\n\t\t// if(p0+p1==2.&&p2==0.) c=0.; if(p1+p2==2.&&p0==0.) c=0.; if(p0+p1+p2==0.) c=0.;\t// #182\t\t\t\t\t\n\t\t// if(p0+p1+p2==3.) c=0.; if(p0+p1+p2==0.) c=0.; if(p0==1.&&p1==0.&&p2==1.) c=0.;\t// #109\t\n\t}\n\n\tfragColor=vec4(c);\n    if(uv.y>.99)fragColor=vec4(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}