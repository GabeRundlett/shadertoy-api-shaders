{
    "Shader": {
        "info": {
            "date": "1489990359",
            "description": "An idea I had that I wanted to try out.",
            "flags": 32,
            "hasliked": 0,
            "id": "ldscWj",
            "likes": 4,
            "name": "Framebuffer Study",
            "published": 3,
            "tags": [
                "raymarch",
                "framebuffer"
            ],
            "usePreview": 0,
            "username": "lherm",
            "viewed": 777
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 f, in vec2 w )\n{\n    f=texture(iChannel0, w/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 f, in vec2 w )\n{\n    // t - total ray distance\n    // x - the distance function\n    // o - the distance between each point and 0\n    float T=iTime, t=0., x, o;\n\tvec2 R = iResolution.xy, u = vec2((2.*w-R)/R.y);\n    vec3 r = vec3(u, 1), d=normalize(vec3(u,-1)), p, l=r-r, c; // Basic ray march set up\n    for (float i = 1.; i > 0.; i -= 0.01)\n    {\n        \n        p = r + d * t;\n        //p.xy += sin(p.z + T)*.4;\n        p.z -= iTime;\n        x = length(mod(p*.5, 2.)-1.)-.5; // Distance function\n        t += x;\n        if (x < 0.005 || t > 30.) break;\n        o = distance(p, vec3(0.));\n        c = sin(vec3(o, 1.-o, 1./o) + t);\n        c += l = texture(iChannel0, w/R-.01).rgb*.5; // l - The framebuffer\n    }\n    f.rgb=c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}