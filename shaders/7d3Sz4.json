{
    "Shader": {
        "info": {
            "date": "1632788971",
            "description": "My first second order ODE. Especially fun because afterwards I can make a fun animation with it! :)\nSolving process (updated): https://www.desmos.com/calculator/z8c1limv0t",
            "flags": 0,
            "hasliked": 0,
            "id": "7d3Sz4",
            "likes": 13,
            "name": "Damped Spring ODE",
            "published": 3,
            "tags": [
                "solution",
                "spring",
                "oscillation",
                "damping",
                "ode"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 301
        },
        "renderpass": [
            {
                "code": "// SDFs\nfloat sdDisk(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\n// https://www.shadertoy.com/view/tlcBW2\nfloat udTriangleWave(in vec2 p, in float freq, in float amp) {\n    float pw = 1.0 / freq, qw = 0.25 * pw;\n    vec2 sc = vec2(2.0 * amp, pw);\n    float l = length(sc);\n    p.x = abs(mod(p.x + qw, pw) - 0.5 * pw) - qw;\n    p *= mat2(sc, -sc.y, sc.x) / l;\n    return length(vec2(p.x, max(0.0, abs(p.y) - 0.25 * l)));\n}\n\n// mx'' + ux' + kx = 0\nfloat springODE(in float t, in float t0, in float x0, in float v0,\n                in float m, in float u, in float k) {\n\n    t -= t0;\n    float alpha = -u / (2.0 * m);\n    float discr = alpha * alpha - k / m;\n    float beta = sqrt(abs(discr));\n\n    if (discr < 0.0) { // Normal oscillation\n        float w = beta * t;\n        return (x0 * cos(w) - (alpha * x0 - v0) / beta * sin(w)) * exp(alpha * t);\n    }\n\n    if (abs(discr) < 1e-3) { // No oscillation - edge case\n        return (x0 - (alpha * x0 - v0) * t) * exp(alpha * t);\n    }\n\n    // No oscillation\n    return (((beta - alpha) * x0 + v0) * exp((alpha + beta) * t) +\n            ((beta + alpha) * x0 - v0) * exp((alpha - beta) * t)) / (2.0 * beta);\n}\n\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 8.0;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 8.0;\n    float unit = 16.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Default before user interaction\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse = vec2(2.0 * cos(iTime), sin(0.5 * iTime)) * 2.0;\n\n    // Constants: mass (m), springiness (k), resistance/friction (u)\n    float m = 1.0;\n    float k = 100.0;\n    float u = 0.8;\n\n    // Initial position (x0) and initial velocity (v0)\n    float x0 = 3.0;\n    float v0 = 0.0;\n\n    // Position vs. time graph\n    float y = springODE(iTime - uv.x, 0.0, x0, v0, m, u, k) - 2.0;\n    float dx = (springODE(iTime - uv.x + 0.001, 0.0, x0, v0, m, u, k) - 2.0 - y) / 0.001;\n    if (uv.x > 0.0 && uv.x < iTime) drawSDF(abs(uv.y - y) / sqrt(1.0 + dx * dx), vec3(1.0, 0.0, 0.0));\n\n    // Spring and weight\n    float x = springODE(iTime, 0.0, x0, v0, m, u, k) - 2.0;\n    if (uv.y < 8.0 && uv.y > x) drawSDF(udTriangleWave(vec2(uv.y - 4.0, uv.x), 12.0 / (4.0 - x), 0.7), vec3(0.0));\n    drawSDF(sdDisk(uv, vec2(0.0, x), 0.5), vec3(0.0, 0.0, 1.0));\n\n    // Vignette\n    color *= 1.0 - 2.0 * pow(length(fragCoord / iResolution.xy - 0.5), 4.0);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}