{
    "Shader": {
        "info": {
            "date": "1632076041",
            "description": "My take on https://iquilezles.org/articles/checkerfiltering/checkerfiltering.htm\nDrag the corners of the blue rectangle (integration area).\nThe value in the corner is the number of white squares within the blue area.",
            "flags": 32,
            "hasliked": 0,
            "id": "slsXRN",
            "likes": 8,
            "name": "Checkerboard Double Integral",
            "published": 3,
            "tags": [
                "2d",
                "checkerboard",
                "boxblur",
                "integration",
                "doubleintegral"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 197
        },
        "renderpass": [
            {
                "code": "// My take on https://iquilezles.org/articles/checkerfiltering\n// Desmos graph with derivation: https://www.desmos.com/calculator/wdu1remdvx\n\n// Uncomment me\n//#define BOX_BLUR_DEMO\n\n// Double integral of mod(floor(x) + floor(y), 2) over the\n// rectangular region bounded by points A and B\nfloat integrateCheckers(in vec2 A, in vec2 B) {\n    vec2 D1 = B - A, D2 = abs(mod(B, 2.0) - 1.0) - abs(mod(A, 2.0) - 1.0);\n    return (D1.x * D1.y - D2.x * D2.y) / 2.0;\n}\n\n// SDFs\nfloat sdDisk(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    p = abs(p) - b;\n    return length(max(p, 0.0)) + min(0.0, max(p.x, p.y));\n}\n\n// https://www.shadertoy.com/view/4djSRW\nvec2 Hash12(in float p) {\n\tvec3 p3 = fract(p * vec3(0.1031, 0.103, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\n#define drawSDF(dist, color) fragColor.rgb = mix(fragColor.rgb, color.rgb, smoothstep(unit, 0.0, dist) * color.a)\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 5.0;\n    float unit = 10.0 / iResolution.y;\n\n    #ifndef BOX_BLUR_DEMO\n    // Checkerboard\n    float checker = mod(floor(uv.x) + floor(uv.y), 2.0);\n    fragColor = vec4(checker);\n\n    // Animated integration bounds\n    vec2 A = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n    vec2 B = texelFetch(iChannel0, ivec2(1, 0), 0).xy;\n\n    if (ivec2(iMouse.xy) == ivec2(0)) {\n        vec2 anim = 0.5 * iTime + vec2(11.13, -85.73);\n        A = mix(Hash12(floor(anim.x)), Hash12(ceil(anim.x)), smoothstep(0.0, 1.0, fract(anim.x))) * 5.0 - 2.5;\n        B = mix(Hash12(floor(anim.y)), Hash12(ceil(anim.y)), smoothstep(0.0, 1.0, fract(anim.y))) * 5.0 - 2.5;\n    }\n\n    // Draw integration area\n    float box = sdBox(uv - 0.5 * (A + B), 0.5 * abs(B - A));\n    drawSDF(box, vec4(0.0, 0.0, 1.0, 0.5));\n    drawSDF(abs(box), vec4(0.0, 0.0, 1.0, 1.0));\n\n    // Draw integration bound corners\n    drawSDF(sdDisk(uv, A, 0.08), vec4(1.0, 0.0, 0.0, 1.0));\n    drawSDF(sdDisk(uv, B, 0.08), vec4(0.0, 1.0, 0.0, 1.0));\n\n    // Display double integral in the corner\n    vec2 corner = vec2(0.5 * iResolution.x / iResolution.y, 0.5);\n    float area = integrateCheckers(min(A, B), max(A, B));\n    fragColor.rgb = digitIn(fragColor.rgb, vec3(1.0, 0.5, 0.0), uv * 0.2 + corner - 0.05, 100.0, area);\n\n    #else\n    vec2 blur = 0.25 + 0.25 * vec2(cos(0.5 * iTime), sin(iTime)) + 1e-3;\n\n    // Count white squares surrounding\n    // the pixel within the blur radius\n    fragColor = vec4(integrateCheckers(uv - blur, uv + blur));\n\n    // Divide by total integration area to average (mean filter or box blur)\n    fragColor /= 4.0 * blur.x * blur.y;\n\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Handy debugging font (which I also use for displaying numeric results) by @valalalalala\n// Thanks!\n\n        /////////////////////////////////////////////////////////////////\n       //                                                            ////\n      //  \"little debugging font\"                                   // //\n     //                                                            //  //\n    //  This utility uses a small bitmapped font (3x5) to render  //   //\n   //  floats, primarily intended for debugging. The code can    //    //\n  //  be copy/pasta'd into the Common tab as needed.            //     //\n //                                                            //     //\n////////////////////////////////////////////////////////////////     //\n//                                                            //    //\n// Creative Commons Attribution-NonCommercial-ShareAlike      //   //                                       //  //\n// 3.0 Unported License                                       //  //\n//                                                            // //\n// by Val \"valalalalala\" GvM ðŸ’ƒ 2021                          ////\n//                                                            ///\n////////////////////////////////////////////////////////////////\n\nconst int CHARACTERS[14] = int[14](31599, 9362, 31183, 31207, 23524, 29671, 29679, 30994, 31727, 31719, 1488, 448, 2, 3640);\n\nfloat digitIsOn(in int digit, in vec2 id) {   \n    if (id.x < 0.0 || id.y < 0.0 || id.x > 2.0 || id.y > 4.0 ) return 0.0;\n    return floor(mod(float(CHARACTERS[int(digit)]) / pow(2.0, id.x + id.y * 3.0), 2.0));\n}\n\nfloat digitSign(in float v, in vec2 id) {\n    return digitIsOn(10 - int((sign(v) - 1.0) * 0.5), id);\n}\n\nint digitCount(in float v) {\n    return int(floor(log(max(v, 1.0) ) / log(10.0)));\n}\n\nfloat digitFirst(in vec2 uv, in float scale, in float v, in int decimalPlaces) {\n    vec2 id = floor(uv * scale);\n\n    if (0.0 < digitSign(v, id)) return 1.0;\n    v = abs(v);\n\n    int digits = digitCount(v);\n    float power = pow(10.0, float(digits));\n    \n    float offset = floor(0.1 * scale);\n    id.x -= offset;\n\n    float n;\n    for (int i = 0; i < 33; i++, id.x -= offset, v -= power * n, power /= 10.0) {\n        n = floor(v / power);\n        if (0.0 < digitIsOn(int(n), id)) return 1.0;   \n        if (i == digits) {\n            id.x -= offset;\n            if (0.0 < digitIsOn(int(12), id)) return 1.0;\n        }\n\n        if (i >= digits + decimalPlaces) return 0.0;\n    }\n\n    return 0.0;\n}\n\nfloat digitFirst(in vec2 uv, in float scale, in float v) {\n    return digitFirst(uv, scale, v, 3);\n}\n\nvec3 digitIn(in vec3 color, in vec3 toMix, in vec2 uv, in float scale, in float v) {\n    float f = digitFirst(uv, scale, v);\n    return mix(color, toMix, f);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define SELECTION_RADIUS 0.25\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    if (iFrame == 0) {\n        if (iFragCoord == ivec2(0, 0)) fragColor.xy = vec2(-1.0);\n        if (iFragCoord == ivec2(1, 0)) fragColor.xy = vec2( 1.0);\n    }\n\n    if (iFrame > 0) {\n        if (iFragCoord.x < 2 && iFragCoord.y == 0) {\n            vec2 mouse = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y * 5.0;\n            fragColor = texelFetch(iChannel0, iFragCoord, 0);\n            if (length(mouse - fragColor.xy) < SELECTION_RADIUS) {\n                fragColor.xy = mouse;\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}