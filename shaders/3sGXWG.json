{
    "Shader": {
        "info": {
            "date": "1574803457",
            "description": "Seed with mouse clicks. Two way Laplacian upper left creates dark crosses rotated 45 degrees. Four way Laplacian upper middle creates normal crosses. 12 point Laplacian upper right. 20 point lower left. 24 lower middle. Spherical lower right.",
            "flags": 32,
            "hasliked": 0,
            "id": "3sGXWG",
            "likes": 4,
            "name": "6 ∇², Δ, Laplacian operators",
            "published": 3,
            "tags": [
                "diffusion",
                "reactiondiffusion",
                "laplacian",
                "reaction"
            ],
            "usePreview": 0,
            "username": "davidjonsson",
            "viewed": 385
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 Q, in vec2 U )\n{\n    Q = 2. * A(U);\n    if (abs(U.x - iResolution.x/3.) < 1. || \n\t\tabs(U.x - 2. * iResolution.x/3.) < 1. || \n        abs(U.y - iResolution.y/2.) < 1.) {\n    \tQ.r = 1. - Q.r;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define A(U) texture(iChannel0,(U)/iResolution.xy)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Closest here means closest squared distance.\n// Must be run at full screen in roder to compare the effects of different Laplacian stencils.\n//\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    // Lookup Field \n    Q = A(U);\n    // Mean Field \n\n    // Two way: horizontal, vertical\n    vec4 sum2 = A(U+vec2(0,1))+A(U+vec2(1,0))+A(U-vec2(0,1))+A(U-vec2(1,0));\n    vec4 mean2 = 1./4.*(sum2);\n\t// Laplacian \n    vec4 laplacian2 = (mean2 - Q);\n    \n    // Four way: horizontal, vertical and both diagonals\n    vec4 sumDiagonals = A(U+vec2(1,1))+A(U+vec2(1,-1))+A(U+vec2(-1,1))+A(U+vec2(-1,-1));\n    vec4 mean4 = 1./(4.+4./2.)*(sum2 + \n        1./2.*(sumDiagonals));\n\t// Laplacian \n    vec4 laplacian4 = (mean4 - Q);\n    \n    // 12 closest point: adding quarter of the remaining 4 because of double distance\n    vec4 sum9to12closest = A(U+vec2(0,2))+A(U+vec2(2,0))+A(U+vec2(0,-2))+A(U+vec2(-2,0));\n    vec4 mean12closest = 1. / (4. + 4./2. + 4./4.) * (sum2 + 1. / 2. * sumDiagonals + 1. / 4. * sum9to12closest);\n\t// Laplacian \n    vec4 laplacian12closest = (mean12closest - Q);\n    \n    // 20 closest point: adding 1/(1^2 + 2^2) of the remaining 8 because of increased distance\n    vec4 sum13to20closest = A(U+vec2(1,2))+A(U+vec2(2,1))+A(U+vec2(1,-2))+A(U+vec2(-2,1)) + \n                            A(U+vec2(-1,2))+A(U+vec2(2,-1))+A(U+vec2(-1,-2))+A(U+vec2(-2,-1));\n    vec4 mean20closest = 1. / (4. + 4./2. + 4./4. + 8./5.) * (sum2 + 1. / 2. * sumDiagonals + 1. / 4. * sum9to12closest + 1. /5. * sum13to20closest);\n\t// Laplacian \n    vec4 laplacian20closest = (mean20closest - Q);\n    \n    // 24 closest point: adding 1/(2^2 + 2^2) of the remaining 4 because of increased distance\n    vec4 sum21to24closest = A(U+vec2(2,2))+A(U+vec2(-2,2))+A(U+vec2(-2,-2))+A(U+vec2(2,-2));\n    vec4 mean24closest = 1. / (4. + 4./2. + 4./4. + 8./5. + 4./8.) * (sum2 + 1. / 2. * sumDiagonals + 1. / 4. * sum9to12closest + 1. /5. * sum13to20closest + \n                                                                     1. / 8. * sum21to24closest);\n\t// Laplacian \n    vec4 laplacian24closest = (mean24closest - Q);\n   \n    // Rotational symmetric according to Hundsdorfer, Willem, and Jan G. Verwer. \n    // Numerical solution of time-dependent advection-diffusion-reaction equations. Vol. 33. Springer Science & Business Media, 2013.\n\t// page 301\n    //\n    // horizontal, vertical and both diagonals\n    vec4 meanRotational = 1./(4. + 4./4.)*(sum2 + 1./4.*(sumDiagonals));\n\t// Laplacian \n    vec4 laplacianRotational = (meanRotational - Q);\n    \n    // Diffuse each variable differently : \n\tif (U.y > iResolution.y/2.) {\n        if (U.x < iResolution.x/3.) {\n            Q += laplacian2 * vec4(1, .4, 1, 1);\n        } else if (U.x < 2. * iResolution.x/3.){\n            Q += laplacian4 * vec4(1, .4, 1, 1);\n        } else {\n\t        Q += laplacian12closest * vec4(1, .4, 1, 1);\n        }\n    } else {\n        if (U.x < iResolution.x/3.) {\n            Q += laplacian20closest * vec4(1, .4, 1, 1);\n        } else if (U.x < 2. * iResolution.x/3.){\n            Q += laplacian24closest * vec4(1, .4, 1, 1);\n        } else {\n\t        Q += laplacianRotational * vec4(1, .4, 1, 1);\n        }\n    }\n    // Compute reactions:\n    Q.x = Q.x * .99 + 0.01 * Q.y;\n    Q.y = Q.y + .05 * Q.y * (1. - Q.y) - .03 * Q.x - 1e-3;\n    \n    // Prevent Negative Values (depends on system):\n    Q = max(Q, 0.);\n    \n    // Mouse to seed\n    float seedRadius = 15.;\n    if (iMouse.z > 0. && length(U - iMouse.xy) < seedRadius ) {\n        Q += exp(-pow(length(U - iMouse.xy)/seedRadius, -2.)) * vec4(0, 1, 0, 0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}