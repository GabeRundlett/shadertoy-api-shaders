{
    "Shader": {
        "info": {
            "date": "1561467007",
            "description": "Simplistc forest with multiple lights and fog",
            "flags": 0,
            "hasliked": 0,
            "id": "3tB3Wd",
            "likes": 14,
            "name": "Low Poly Forest",
            "published": 3,
            "tags": [
                "raymarching",
                "lowpoly"
            ],
            "usePreview": 0,
            "username": "SSHantaram",
            "viewed": 543
        },
        "renderpass": [
            {
                "code": "const int MAX_MARCHING_STEPS = 255;\nconst int MAX_SHADOW_STEPS = 60;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0005;\n\n/**\n * Rotation matrix around the X axis.\n */\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n/**\n * Rotation matrix around the Y axis.\n */\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n/**\n * Rotation matrix around the Z axis.\n */\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n/**\n * Constructive solid geometry union operation on SDF-calculated distances.\n */\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\nfloat sphereSDF(vec3 p, float r) {\n    return length(p) - r;\n}\n\n/**\n * Signed distance function for a cube centered at the origin\n * with dimensions specified by size.\n */\nfloat boxSDF(vec3 p, vec3 size) {\n    vec3 d = abs(p) - (size / 2.0);\n    \n    // Assuming p is inside the cube, how far is it from the surface?\n    // Result will be negative or zero.\n    float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\n    \n    // Assuming p is outside the cube, how far is it from the surface?\n    // Result will be positive or zero.\n    float outsideDistance = length(max(d, 0.0));\n    \n    return insideDistance + outsideDistance;\n}\n\n// signed distance function for xz plane\nfloat plane(vec3 p) {\n    return p.y;\n}\n\n// SDF for a single tree layer\nfloat treeLayerSDF(vec3 p) {\n    \n    p.z = abs(p.z);\n    p = rotateY(radians(30.0))*p;\n    p.x = abs(p.x);\n    p = rotateY(radians(60.0))*p;\n    p.z *= 0.5; //length is inacurate!!\n  \tp = rotateZ(radians(45.0))*rotateX(atan(sqrt(0.5)))*p;\n    \n    return boxSDF(p, vec3(1.0, 1.0, 1.0));\n}\n\n// SDF for single tree\nfloat treeSDF(vec3 p) {\n    \n    p.y *= 0.7; //length is inacurate!!\n    \t\n    float layer0 = treeLayerSDF(p);\n    float layer1 = treeLayerSDF(p*1.2 - vec3(0.0, 0.7, 0.0))/1.2;\n    float layer2 = treeLayerSDF(p*2.0 - vec3(0.0, 2.2, 0.0))/2.0;\n    float layer3 = treeLayerSDF(p*4.0 - vec3(0.0, 6.0, 0.0))/4.0;\n    \n    mat3 rotate = rotateY(radians(60.0));\n    \n    float layer4 = treeLayerSDF(rotate*p*1.1 - vec3(0.0, 0.2, 0.0))/1.1;\n    float layer5 = treeLayerSDF(rotate*p*1.5 - vec3(0.0, 1.1, 0.0))/1.5;\n    float layer6 = treeLayerSDF(rotate*p*2.5 - vec3(0.0, 3.2, 0.0))/2.5;\n    float layer7 = treeLayerSDF(rotate*p*4.8 - vec3(0.0, 7.8, 0.0))/4.8;\n    \n    float result = unionSDF(layer0, layer1);\n    result = unionSDF(result, layer2);\n    result = unionSDF(result, layer3);\n    result = unionSDF(result, layer4);\n    result = unionSDF(result, layer5);\n    result = unionSDF(result, layer6);\n    result = unionSDF(result, layer7);\n    return result;\n}\n\n/**\n * Signed distance function describing the scene.\n * \n * Absolute value of the return value indicates the distance to the surface.\n * Sign indicates whether the point is inside or outside the surface,\n * negative indicating inside.\n */\nfloat sceneSDF(vec3 p) {\n    \n    // repeat in xz-plane\n    vec3 p1 = vec3(mod(p.x, 3.0) - 1.5,\n             p.y,\n             mod(p.z, 3.0) - 1.5);\n    // ground plane\n    return unionSDF(treeSDF(p1), plane(p1));\n}\n\n/**\n * Return the shortest distance from the eyepoint to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n * \n * eye: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end, int max_steps) {\n    float depth = start;\n    for (int i = 0; i < max_steps; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n            \n\n/**\n * Return the normalized direction to march in from the eye point for a single pixel.\n * \n * fieldOfView: vertical field of view in degrees\n * size: resolution of the output image\n * fragCoord: the x,y coordinate of the pixel in the output image\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\n// lambert shading coefficient with raymarched shadows\nfloat lambertShading(vec3 p, vec3 lightPos) {\n    vec3 n = estimateNormal(p);\n    vec3 ray = p - lightPos;\n    vec3 lightDir = normalize(ray);\n    \n    // lambert shading coefficient\n    float brightness = max(0.0, dot(-lightDir, n));\n    \n    // trace ray from surface point in direction of the light source\n    // offset in direction of the normal to avoid self intersection\n    float distToLight = shortestDistanceToSurface(p + n * EPSILON * 100.0, -lightDir, MIN_DIST, MAX_DIST, MAX_SHADOW_STEPS);\n    \n    // in shadow\n    if (distToLight + EPSILON < MAX_DIST) {\n        return 0.0;\n    }\n    \n    // brightness depends on inverse sqare law\n    return brightness/(ray.x*ray.x + ray.y*ray.y + ray.z*ray.z);\n}\n\n/**\n * Return a transform matrix that will transform a ray from view space\n * to world coordinates, given the eye point, the camera target, and an up vector.\n *\n * This assumes that the center of the camera is aligned with the negative z axis in\n * view space when calculating the ray marching direction. See rayDirection.\n */\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // time offset for better thumbnail\n    float time = iTime - 10.0;\n    \n\tvec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(3.0 * sin(0.2*time), 7.0, time);  \n   \tvec3 up = normalize(vec3(0.2*cos(0.2*time), 1.0, 0.0));\n    \n    mat3 viewToWorld = viewMatrix(eye, vec3(0.0, 2.0, time + 10.0), up);\n    \n    vec3 worldDir = viewToWorld * viewDir;\n    \n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST, MAX_MARCHING_STEPS);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    \n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * worldDir;\n    \n    vec3 objectColor = vec3(0.2, 0.7, 0.3);\n    \n    // animation magic\n    vec3 lightPos1 = vec3(12.0, 20.0, time - 15.0 + 30.0*sin(time*0.1));\n    vec3 lightPos2 = vec3(-1.5 -1.5*cos(radians(60.0*time)), 3.6, 10.5 + time);\n    vec3 lightPos3 = vec3(-8.0, 15.0, time - 15.0 + 30.0*sin(time*0.1));\n    \n    vec3 lightColor1 = vec3(1.0, 0.4, 0.1);\n    vec3 lightColor2 = vec3(0.6, 0.6, 1.0);\n    float lightIntensity1 = 800.0;\n    float lightIntensity2 = 15.0;\n    float lightIntensity3 = 100.0;\n    vec3 ambient = vec3(0.01, 0.1, 0.08);\n    vec3 diffuse1 = lambertShading(p, lightPos1)*lightIntensity1*lightColor1;\n    vec3 diffuse2 = lambertShading(p, lightPos2)*lightIntensity2*lightColor2;\n    vec3 diffuse3 = lambertShading(p, lightPos3)*lightIntensity3*lightColor1;\n    vec3 color = (ambient + diffuse1 + diffuse2 + diffuse3) * objectColor;\n    \n    vec3 fogColor = vec3(0.3, 0.3, 0.7);\n    \n    vec3 eyeRay = p - eye;\n    float depth = length(eyeRay);\n    float fogFactor = clamp(depth*0.05 - 0.25, 0.0, 1.0);\n    color = mix(color, fogColor, fogFactor);\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}