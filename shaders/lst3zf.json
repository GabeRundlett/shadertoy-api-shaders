{
    "Shader": {
        "info": {
            "date": "1452116698",
            "description": "This must have been one of the first fractals I coded (copied from a magazine) in 1994. We couldn't make these in Shadertoy [url]https://www.shadertoy.com/view/lss3zs[/url]. We cannot make them properly yet, but it's better now.",
            "flags": 32,
            "hasliked": 0,
            "id": "lst3zf",
            "likes": 36,
            "name": "IFS Fern",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "ifs",
                "barnsley",
                "fern",
                "classic",
                "barnsleyfern"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1853
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2016\n// I share this piece (art and code) here in Shadertoy and through its Public API, only for educational purposes. \n// You cannot use, sell, share or host this piece or modifications of it as part of your own commercial or non-commercial product, website or project.\n// You can share a link to it or an unmodified screenshot of it provided you attribute \"by Inigo Quilez, @iquilezles and iquilezles.org\". \n// If you are a teacher, lecturer, educator or similar and these conditions are too restrictive for your needs, please contact me and we'll work it out.\n\n// This must have been one of the first fractals I coded (copied from\n// a magazine) in 1994. \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 data = texelFetch( iChannel0, ivec2(fragCoord), 0 );\n    \n    float d = data.x;\n    float c = 0.7 + 0.3*smoothstep(-1.0,-0.8,sin(15.0*d) ) ;\n\n    c *= smoothstep(0.005,0.010,d);\n    c *= 1.0 - 0.5*1.0/(1.0+32.0*d);\n    \n    vec2 p = fragCoord/iResolution.xy;\n    c *= 0.5 + 0.5*pow( 16.0*p.x*p.y*(1.0-p.x)*(1.0-p.y), 0.15 );\n\n    fragColor = vec4( c, c, c, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "// Created by inigo quilez - iq/2016\n// I share this piece (art and code) here in Shadertoy and through its Public API, only for educational purposes. \n// You cannot use, sell, share or host this piece or modifications of it as part of your own commercial or non-commercial product, website or project.\n// You can share a link to it or an unmodified screenshot of it provided you attribute \"by Inigo Quilez, @iquilezles and iquilezles.org\". \n// If you are a teacher, lecturer, educator or similar and these conditions are too restrictive for your needs, please contact me and we'll work it out.\n\n\n\n#if HW_PERFORMANCE==0\nconst int numItes = 256;\n#else\nconst int numItes = 1024;\n#endif\n\n\n//------------------------------------------------------------------\n// oldschool rand() from Visual Studio\n//------------------------------------------------------------------\nint  seed = 1;\nvoid srand(int s ) { seed = s; }\nint  rand(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\nfloat frand(void) { return float(rand())/32767.0; }\n//------------------------------------------------------------------\n// hash to initialize the random sequence (copied from Hugo Elias)\n//------------------------------------------------------------------\nint hash( int n ) { n=(n<< 13)^n; return n*(n*n*15731+789221)+1376312589; }\n\n//------------------------------------------------------------------\n// our ifs\n//------------------------------------------------------------------\nvec2 ifs( in vec2 z )\n{\n    float p = frand();\n         if( p < 0.01 ) z = vec2(  0.0, 0.16*z.y );\n    else if( p < 0.84 ) z = vec2(  0.85*z.x + 0.04*z.y, -0.04*z.x + 0.85*z.y + 1.60 );\n    else if( p < 0.92 ) z = vec2(  0.20*z.x - 0.26*z.y,  0.23*z.x + 0.22*z.y + 1.60 );\n    else                z = vec2( -0.15*z.x + 0.28*z.y,  0.26*z.x + 0.24*z.y + 0.44 );\n    return z;\n}\n\n//------------------------------------------------------------------\n// sdf\n//------------------------------------------------------------------\nfloat sdf( vec2 p )\n{\n    vec2 z = vec2(0.0);\n    for( int i=0; i<32; i++ )\n    {\n        z = ifs( z );\n    }\n    float d = 1e4;\n    for( int i=0; i<numItes; i++ )\n    {\n        z = ifs( z );\n\t\td = min( d, dot(p-z,p-z) );\n    }\n    return sqrt(d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // init randoms\n    ivec2 q = ivec2(fragCoord);\n    srand( hash(iFrame+hash(q.x+hash(q.y))) );\n\n    // coords\n    vec2 p = (2.0*fragCoord-iResolution.xy) / iResolution.y;\n    p = 6.0*p + vec2(0.0,5.0);\n    \n    // sdf\n    float d = sdf(p);\n \n    // accumulate\n    float data = texelFetch( iChannel0, ivec2(fragCoord), 0 ).x;\n    if( iFrame==0 ) data = 1000.0;\n    fragColor = vec4(min(data,d), 0.0, 0.0, 0.0 );\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}