{
    "Shader": {
        "info": {
            "date": "1640276523",
            "description": "An interesting mosaic pattern.",
            "flags": 0,
            "hasliked": 0,
            "id": "ftVXzD",
            "likes": 8,
            "name": "Mosaic fractal 3",
            "published": 3,
            "tags": [
                "fractal",
                "carpet",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 321
        },
        "renderpass": [
            {
                "code": "//change these constants to get different patterns!\n#define c2 0.0\n\n#define c1 vec4(3.0+c2,.5+c2,1.5,0)\n//#define c1 vec4(2.0+c2,1.5+c2,1.4,0)\n//#define c1 vec4(1.0,1.5,1.4,0)\n//#define c1 vec4(7.0,5.0,1.4,0)\n//#define c1 vec4(7.0,9.0,1.4,0)\n//#define c1 vec4(5.0,5.5,1.4,0)\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n    //from David Hoskin's \"Hash without sine\"\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((a+c1.xy)*scale)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    \n    \n\n    \n    vec3 col;  \n    float t1 = 4.5*4.;\n\n    vec2 uv = (fragCoord-iResolution.xy)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    //vec3 random1 = hash31(floor((iTime)/10.0+uv.x))*10.*.0;\n    //vec3 random2 = hash31(1.+floor((iTime)/10.0+uv.x));\n    float t2 = floor((iTime/2.+uv.x)/10.0)/t1;\n    //vec3 random1 = (hash31(3.+t2)-.5)/12.;\n    //vec3 random2 = (hash31(4.+t2)-.5)/12.;\n    //vec3 random3 = (hash31(3.+t2)-vec3(.5))/1.5;\n    //vec3 random4 = (hash31(4.+t2)-vec3(.5))/4.;\n    \n    float offset = .5;\n    float scale2 = 1.5;\n    float bend = 1.;\n    for(int c=0;c<1;c++){\n        float scale = c1.z;\n        //float scale1 = 1.0;\n        for(int i=0;i<9;i++)\n        {\n            vec2 t2 = vec2(0);\n            for(int k = 0; k < 3; k++){    \n                uv /= -scale2;\n                uv -= t2.yx/(scale);\n                t2 = triangle_wave(uv.yx-offset,scale);\n                vec2 t3 = triangle_wave(uv,scale);\n                uv.yx = t2+t3;\n \n\n            }\n            offset += .5/scale;\n            scale /= 1.+(scale2)*col.x/(8.);\n            scale2 -= (col.x-1.)/(4.);\n\n\n            col[c] = abs((uv.x)-(uv.y)+col.x);\n            col = col.yzx;\n            //random2 = col - random2;\n            \n\n        }\n\t}\n    \n    fragColor = vec4(vec3(col),1.0);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}