{
    "Shader": {
        "info": {
            "date": "1588145528",
            "description": "2d pixel lighting test for future reference. Just throwing around some ideas. Mostly this solves the problem of how to light surrounding 2d terrain while also allowing some nice soft shadows.",
            "flags": 32,
            "hasliked": 0,
            "id": "WdlBW8",
            "likes": 8,
            "name": "2d Pixel Lighting Test",
            "published": 3,
            "tags": [
                "2d",
                "lighting",
                "pixel"
            ],
            "usePreview": 1,
            "username": "natethegreat2525",
            "viewed": 589
        },
        "renderpass": [
            {
                "code": "\nbool inWall(vec2 pos) {\n    return texture(iChannel0, pos/iResolution.xy).x > .5;\n}\n\nfloat getLight(vec2 pos, vec2 lpos) {\n    vec2 dir = pos-lpos;\n    float dist = length(dir);\n    float light = 3./pow(dist,.5);\n    float dotf = dist*.2;\n    int dot = int(dotf);\n    float walls = 0.;\n    for (int i = 0; i <= dot; i++) {\n        vec2 p = lpos + (float(i)/dotf)*dir;\n        if (inWall(p)) {\n            walls++;\n            if (walls > 4.) {\n                break;\n            }\n        }\n    }\n    \n    return light * (5.-walls)/5.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 coord )\n{\n    vec3 light = texture(iChannel2, coord/iResolution.xy).rgb;\n    if (inWall(coord)) {\n        fragColor = texture(iChannel1, coord*4./iResolution.xy);\n        fragColor.xyz *= light*2.;\n        return;\n    }\n    \n    \n    fragColor = vec4(vec3(light), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool inWall(vec2 pos) {\n    return texture(iChannel0, pos/iResolution.xy).x > .5;\n}\n\nvec3 getLight(vec2 pos, vec2 lpos, vec3 col) {\n    vec2 dir = pos-lpos;\n    float dist = length(dir);\n    float light = 3./sqrt(dist);\n    float dotf = dist*.2;\n    int dot = int(dotf);\n    for (int i = 1; i <= dot; i++) {\n        vec2 p = lpos + (float(i)/dotf)*dir;\n        if (inWall(p)) {\n            return vec3(0.);\n        }\n    }\n    \n    return light * col;\n}\n\n#define RAD 5.\nvoid mainImage( out vec4 fragColor, in vec2 coord )\n{\n    float time = iTime * .5;\n    vec2 light1Pos = iResolution.xy * (vec2(.5) + vec2(cos(time), sin(time))*.3);\n    vec2 light2Pos = iResolution.xy * (vec2(.5) + vec2(cos(time*.4), sin(time*.8))*.4);\n    // need to add light together in squared space then squareroot again to properly add light values\n    vec3 light = sqrt(pow(getLight(coord, iMouse.xy, vec3(1)), vec3(2.)) +\n                      pow(getLight(coord, light1Pos, vec3(1, 1, 0)), vec3(2.)) +\n                     pow(getLight(coord, light2Pos, vec3(0, 1, 1)), vec3(2.)));\n    \n    vec3 oldLightU = texelFetch(iChannel2, ivec2(coord.x, coord.y+RAD), 0).rgb;\n    vec3 oldLightD = texelFetch(iChannel2, ivec2(coord.x, coord.y-RAD), 0).rgb;\n    vec3 oldLightL = texelFetch(iChannel2, ivec2(coord.x+RAD, coord.y), 0).rgb;\n    vec3 oldLightR = texelFetch(iChannel2, ivec2(coord.x-RAD, coord.y), 0).rgb;\n    \n    vec3 maxAround = max(max(oldLightU, oldLightD), max(oldLightL, oldLightR));\n    \n    vec3 oldLightUR = texelFetch(iChannel2, ivec2(coord.x-RAD, coord.y+RAD), 0).rgb;\n    vec3 oldLightDR = texelFetch(iChannel2, ivec2(coord.x-RAD, coord.y-RAD), 0).rgb;\n    vec3 oldLightUL = texelFetch(iChannel2, ivec2(coord.x+RAD, coord.y+RAD), 0).rgb;\n    vec3 oldLightDL = texelFetch(iChannel2, ivec2(coord.x+RAD, coord.y-RAD), 0).rgb;\n    \n    vec3 maxAroundDiag = max(max(oldLightUR, oldLightDR), max(oldLightUL, oldLightDL));\n    \n    maxAround = max(maxAround, maxAroundDiag*.94);  // multiplier should be .9 ^ (1/sqrt(2)), not sure why but had to tweak to .94 to remove artifacts\n    light = max(light, clamp(maxAround, 0., 1.)*.9);\n    fragColor = vec4(light, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}