{
    "Shader": {
        "info": {
            "date": "1526659488",
            "description": "Nijntje",
            "flags": 0,
            "hasliked": 0,
            "id": "ld3BDS",
            "likes": 7,
            "name": "Nijntje",
            "published": 3,
            "tags": [
                "2d",
                "cartoon",
                "animal",
                "bunny",
                "child"
            ],
            "usePreview": 0,
            "username": "d1kkop",
            "viewed": 1152
        },
        "renderpass": [
            {
                "code": "// BY Bart Knuiman\n\n\n#define PI 3.14159\n\n\nfloat hash(float f)\n{\n    return fract( sin(f * 77321.81283) );\n}\n\nfloat sub( float d, float d2 )\n{\n    return max(-d2, d);\n}\n\nfloat add( float d2, float d )\n{\n    return min(d2, d);\n}\n\nfloat sect( float d, float d2 )\n{\n    return max(d,d2);\n}\n\nvec2 rotate( float ang, vec2 v )\n{\n    float s = sin(ang);\n    float c = cos(ang);\n    return vec2( c*v.x-s*v.y, s*v.x+c*v.y );\n}\n\nfloat circle( vec2 where, vec2 uv, float radius )\n{\n    vec2 dv = uv-where;\n    return sqrt(dot(dv,dv))-radius;\n}\n\nfloat ellips( vec2 where, vec2 uv, vec2 ab, float radius )\n{\n    vec2 dv = (uv-where) / ab;\n    return length(dv)-radius;\n}\n\nfloat square( vec2 where, vec2 uv, vec2 hsize )\n{\n    vec2 dv = abs(uv - where) - hsize;\n    return min(0., max(dv.x, dv.y)) + length(max(dv,0.));\n}\n\nfloat rsquare( vec2 where, vec2 uv, vec2 hsize, float edge )\n{\n    float d =square(where,uv,hsize);\n    return d-edge;\n}\n\n\nfloat blownQuad( vec2 uv, vec2 size, float roundness, float edge )\n{\n    float d=0.;\n    d=ellips( vec2(0.), uv, vec2(roundness,1.), size.y );\n    d=sect(d,ellips(vec2(0.),uv,vec2(1.,roundness),size.x));\n    return d;\n}\n\nfloat hline( vec2 uv, float len )\n{\n    vec2 cp = uv;\n    cp.y=0.;\n    cp.x = max(min(uv.x,len*.5), -len*.5);\n    return distance(cp,uv);\n}\n\nfloat vline( vec2 uv, float len )\n{\n    return hline(rotate(PI*.5, uv),len);\n}\n\nfloat line( vec2 uv, vec2 a, vec2 b )\n{\n    vec2 d=a-b;\n    vec2 m=(a+b)*.5;\n    return hline( rotate(-atan(d.y,d.x), uv-m), length(d) );\n}\n\n\nfloat trapezoid( vec2 uv, vec3 s, float edge ) // top,bottom,height\n{\n    vec2 cp0 = vec2(-s.x,s.z)*.5;\n    vec2 cp1 = cp0+vec2(s.x,0.);\n    vec2 cp2 = vec2(-s.y,-s.z)*.5;\n    vec2 cp3 = cp2+vec2(s.y,0.);\n    float d = line( uv, cp0, cp1 );\n    d = add( d, line( uv, cp1, cp3 ) );\n    d = add( d, line( uv, cp3, cp2 ) );\n    d = add( d, line( uv, cp2, cp0 ) );\n    return d-edge;\n}\n\n\nfloat head( vec2 uv )\n{\n    float d=0.;\n    d = ellips( vec2(0., 0.), uv, vec2(1.2, 1.), .2 ); // head\n    d = add( d, ellips( vec2(-.08, .25), rotate(-.2,uv), vec2(1.,2.4), .1) ); // ear1\n    d = add( d, ellips( vec2(.08, .25), rotate(.1,uv), vec2(1.,2.3), .1) ); // ear2\n    return d;\n}\n\nfloat face( vec2 uv )\n{\n    float d=0.;\n    d = square(vec2(.0, 0.), rotate(3.5, uv-vec2(.0,-.1)), vec2(.02, 0.002)) ; // mouth1\n    d = add( d, square(vec2(.0, 0.), rotate(-3.5, uv-vec2(.0,-.1)), vec2(.02, 0.002)) ); // mouth2\n    d = add( d, ellips( vec2(-.1, .0), rotate(.1,uv), vec2(1.,1.2), .006) ); // eye1\n    d = add( d, ellips( vec2(.1, -.01), rotate(-.1,uv), vec2(1.,1.2), .006) ); // eye2\n    return d;\n}\n\n\nfloat arms( vec2 uv )\n{\n    float d = trapezoid( rotate( 1.4, uv+vec2(-.2,.22) ), vec3(.12,.15,.07), .034);\n    d = add( d, trapezoid( rotate( -1.6, uv+vec2(.27,.19) ), vec3(.13,.15,.08), .034) );\n    return d;\n}\n\nfloat handsFeet( vec2 uv )\n{\n    float d=0.;\n    d = rsquare( vec2(.0), rotate( -.18, uv+vec2(-.28,.205) ), vec2(.028, .042), 0.033 );\n    d = add(d, rsquare( vec2(.0), rotate( -0.03, uv+vec2(.35,.19) ), vec2(.028, .042), 0.033 ));\n    d = add(d, rsquare( vec2(.0), rotate( -0.0, uv+vec2(-.07+.04,.49) ), vec2(.048, .022), 0.033 ));\n    d = add(d, rsquare( vec2(.0), rotate( -0.0, uv+vec2(.1+.04,.49) ), vec2(.048, .022), 0.033 ));\n    return d;\n}\n\nfloat body( vec2 uv )\n{\n    float d = 0.;\n    vec2 uvarm = uv;\n    uv = rotate( .05, uv+vec2(0.039,.28) );\n    d = blownQuad( uv, vec2(.27,.21), 2., .0 );\n \treturn add( d, arms(uvarm) );\n}\n\nfloat balloon( vec2 uv )\n{\n    float d=0.;\n    float x=sin(iTime*2.)*.02;\n    float y=sin(iTime+hash(PI))*.004;\n    d=ellips(vec2(.0),rotate(.1,uv-vec2(.44+x,.28+y)),vec2(1.,1.1),.17);\n    d=add(d, line(uv, vec2(.33,-0.2), vec2(.4+x,.1+y) ));\n    return d;\n}\n\nfloat nsmoothstep(float e0, float e1, float x, float f)\n{\n    f=1./f;\n    x = smoothstep(e0*f,e1*f,x);\n    return x;\n}\n\n\nvec3 strokestep( float e, float m, float x, vec3 left, vec3 mid, vec3 right )\n{\n    return\n    mix( mix( left, mid, smoothstep( -e-m, -m, x ) ), right, \n        smoothstep( m, e+m, x ) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // shapes\n    vec2 ruv=rotate(sin(iTime)*.03,uv);\n    float hd = head( ruv );\n\tfloat fd = face( ruv );\n    float bd = body( uv );\n    float ds = handsFeet( uv );\n    float ld = balloon( uv );\n\n    // materials\n    vec3 bgb   = vec3(.5, .5, 1.) * pow( (1.3-length(uv)), .2 );\n    vec3 black = vec3(.3);\n    vec3 white = vec3(1.);\n    vec3 orang = vec3(1., .45, 0.2);\n    vec3 yello = vec3(1.0,0.85,0.0);\n    \n    // anti-aliasing\n    const float AA  = 0.003;\n    const float M   = 0.004;\n    \n    vec3 col=vec3(0.);\n    float a=0.;\n    \n    // balloon > bg\n    col = strokestep( AA, M, ld, yello, black, bgb );\n    \n    // hands > balloon\n    col = strokestep( AA, M, ds, white, black, col );\n    \n    // body > hands\n    col = strokestep( AA, M, bd, orang, black, col );\n\n    // head > body\n    col = strokestep( AA, M, hd, white, black, col );\n\n    // face > head\n    a = nsmoothstep( 0., AA, fd, 1. );\n\tcol = mix( black, col, a );\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}