{
    "Shader": {
        "info": {
            "date": "1559693046",
            "description": "A non polynomial smoothstep() functions invented by vassvik, that I found has a simple analytic inverse.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtSGWw",
            "likes": 14,
            "name": "Non-polynomial smoothstep",
            "published": 3,
            "tags": [
                "2d",
                "smoothstep",
                "inverse"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1055
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// A non polynomial smoothstep() function that I found has a simple\n// analytic inverse.\n//\n// In yellow, the inverse_smoothstep. In gray, the smoothstep of the\n// inverse_smoothstep, which gives the identity. In blue, the smoothstep for \n// reference and symmetry of the image.\n\n\nfloat my_smoothstep( float x, float n )\n{\n    return pow(x,n) / (pow(x,n) + pow(1.0-x,n) );\n    \n    // single pow() optimization, if x is not 0.0\n    //\n    // return 1.0/(1.0+pow(1.0/x-1.0,n) );\n}\n\nfloat inverse_smoothstep( float x, float n )\n{\n    // nicely enough, the inverse is the function\n    // itself with the parameter inverted.\n    return my_smoothstep(x,1.0/n); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float dx = 1.0/iResolution.y;\n    vec2  p = ( vec2((iResolution.y-iResolution.x)/2.0,0.0)+fragCoord)/iResolution.y;\n    \n    vec3 col = vec3(0.0);\n    \n    float n = 1.0 + 5.0*pow(0.5 +0.5*sin(0.5*iTime),2.0);\n    \n    if( p.x>0.0 && p.x<1.0 )\n    {\n        // background\n        col = vec3( 0.2 + 0.02*mod(floor(p.x*10.0)+floor(p.y*10.0),2.0) );\n\n        // gray: smoothstep of inverse_smoothstep = identity\n        {\n        float y = my_smoothstep( inverse_smoothstep( p.x, n ), n );\n        float di = abs(p.y-y)/sqrt(2.0)/dx;\n        col = mix( col, vec3(0.5,0.5,0.5), 1.0-smoothstep(0.0, 1.5, di ) );\n        }\n\n        // blue: smoothstep\n        {\n        float y = my_smoothstep( p.x, n );\n        float dy = my_smoothstep(p.x-sign(p.x-0.5)*dx, n) - y; // distance estimation\n        float di = abs(p.y-y)/sqrt(dx*dx+dy*dy);            // https://iquilezles.org/articles/distance\n        col = mix( col, vec3(0.0,0.4,0.8), 1.0-smoothstep( 0.0, 2.0, di ) );\n        }\n        \n        // yellow: inverse_smoothstep\n        {\n        float y = inverse_smoothstep( p.x, n );\n        float dy = inverse_smoothstep(p.x-sign(p.x-0.5)*dx, n) - y; // distance estimation\n        float di = abs(p.y-y)/sqrt(dx*dx+dy*dy);                 // https://iquilezles.org/articles/distance\n        col = mix( col, vec3(1.0,0.7,0.0), 1.0-smoothstep( 0.0, 2.0, di ) );\n        }\n    }\n    \n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}