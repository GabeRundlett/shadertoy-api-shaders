{
    "Shader": {
        "info": {
            "date": "1638514531",
            "description": "Flagstone/Asymmetric tiling with tile IDs, sizes, and UVs.\n\nFor a 3D raytraced version: https://www.shadertoy.com/view/cltGRl",
            "flags": 0,
            "hasliked": 0,
            "id": "7tKGRc",
            "likes": 131,
            "name": "Straight Flagstone Tiles",
            "published": 3,
            "tags": [
                "grid",
                "rectangle",
                "tiling",
                "bricks",
                "bricks",
                "tiles",
                "asymmetric",
                "flagstone"
            ],
            "usePreview": 0,
            "username": "gelami",
            "viewed": 5728
        },
        "renderpass": [
            {
                "code": "\n// Straight Flagstone Tiles (aka Asymmetric Tiles)\n// https://www.shadertoy.com/view/7tKGRc\n\n/**\n * Flagstone/Asymmetric tiling with tile IDs, sizes and UVs.\n * \n * Like with my previous shader (https://www.shadertoy.com/view/flVGzm),\n * the tile IDs are computed first, and the UVs are derived from it,\n * by subtracting from the original position, and scaling by the tile size.\n * \n * This has the advantage of not dealing with the mess that is\n * getting the UVs for each corner, and gives you already the tile ID.\n * It's great for rectangular tilings, as long as you know what the size of the tile is.\n * \n * The distances from this does have discontinuities in the edges\n * \n * Next time, I'd like to try doing the organic flagstone tiles with asymmetric sizes\n * Distance-to-edge voronoi is pretty close to it, but the sizes aren't so varied. :(\n * Maybe there's a way to do it in a similar vein like this one.\n * \n * Many thanks to Shane (hello!) and fizzer for their methods\n * from which this shader is derived from:\n * \n *   Variegated Tiling by fizzer\n *   https://www.shadertoy.com/view/3styzn\n *\n *   Asymmetric Blocks by Shane\n *   https://www.shadertoy.com/view/Ws3GRs\n *\n *   For a 3D raytraced version:\n *   Extruded Flagstone Tiling 3D by gelami\n *   https://www.shadertoy.com/view/cltGRl\n**/\n\n#define ANIMATED\n#define GLOW\n\n#define SCROLLING\n\n//#define SHOW_CHECKER\n//#define SHOW_GRID\n//#define SHOW_ID\n//#define SHOW_UV\n\nconst float SCALE = 4.;\nconst float SMOOTHNESS = 0.15;\n\nfloat randSpan( vec2 p )\n{\n    #ifdef ANIMATED\n    return (sin(iTime*1.6 + hash12(p)*TAU)*.5+.5)*.6+.2;\n    #else\n    return hash12(p)*.6+.2;\n    #endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy) / iResolution.y;\n    \n    uv *= SCALE;\n    \n    #ifdef SCROLLING\n    uv += vec2(.7, .5) * iTime;\n    #endif\n\n    vec2 fl = floor(uv);\n    vec2 fr = fract(uv);\n    \n    bool ch = mod(fl.x + fl.y, 2.) > .5;\n    \n    float r1 = randSpan(fl);\n    vec2 ax = ch ? fr.xy : fr.yx;\n    \n    float a1 = ax.x - r1;\n    float si = sign(a1);\n    vec2 o1 = ch ? vec2(si, 0) : vec2(0, si);\n    \n    float r2 = randSpan(fl + o1);\n    float a2 = ax.y - r2;\n    \n    vec2 st = step(vec2(0), vec2(a1, a2));\n    \n    // Tile ID\n    vec2 of = ch ? st.xy : st.yx;\n    vec2 id = fl + of - 1.;\n    \n    bool ch2 = mod(id.x + id.y, 2.) > .5;\n    \n    // Get the random spans\n    float r00 = randSpan(id + vec2(0, 0));\n    float r10 = randSpan(id + vec2(1, 0));\n    float r01 = randSpan(id + vec2(0, 1));\n    float r11 = randSpan(id + vec2(1, 1));\n    \n    // Tile Size\n    vec2 s0 = ch2 ? vec2(r00, r10) : vec2(r01, r00);\n    vec2 s1 = ch2 ? vec2(r11, r01) : vec2(r10, r11);\n    vec2 s = 1. - s0 + s1;\n    \n    // UV\n    vec2 puv = (uv - id - s0) / s;\n    \n    // Border Distance\n    vec2 b = (.5 - abs(puv - .5)) * s;\n    \n    float d = smin(b.x, b.y, SMOOTHNESS);\n    float l = smoothstep(.02, .06, d);\n    \n    // **** Shading ****\n    \n    // Highlights\n    vec2 hp = (1. - puv) * s;\n    float h = smoothstep(.08, .0, max(smin(hp.x, hp.y, SMOOTHNESS), 0.));\n    \n    // Shadows\n    vec2 sp = puv * s;\n    float sh = smoothstep(.05, .12, max(smin(sp.x, sp.y, SMOOTHNESS), 0.));\n    \n    // Texture\n    vec3 tex = pow(texture(iChannel0, puv).rgb, vec3(2.2));\n    \n    // Random Color\n    vec3 col = palette(hash12(id));\n    \n    col *= tex;\n    col *= (vec3(puv, 0) * .6 + .4);\n    col *= sh * .8 + .2;\n    col += h * vec3(.9, .7, .5);\n    col *= l * 5.;\n    \n    // **** Defines ****\n    #ifdef GLOW\n    vec2 gv = (1.1 - fragCoord / iResolution.xy) * iResolution.x / iResolution.y;\n    col += pow(.12 / length(gv), 1.5) * vec3(1., .8, .4) * (l * 0.3 + 0.7);\n    #endif\n    \n    #ifdef SHOW_ID\n    col = vec3(id, 0);\n    #endif\n    \n    #ifdef SHOW_UV\n    col = vec3(puv, 0);\n    #endif\n    \n    #ifdef SHOW_GRID\n    vec2 g = .5 - abs(fr - .5);\n    float grid = smoothstep(.03, .02, min(g.x, g.y));\n    col = mix(col, vec3(.2, .9, 1), grid);\n    #endif\n    \n    #ifdef SHOW_CHECKER\n    col = mix(col, (ch ? vec3(1, .2, .2) : vec3(.2, 1, .2)), .2);\n    #endif\n    \n    // Tonemapping and Gamma Correction\n    col = max(col, vec3(0));\n    col = col / (1. + col);\n    col = pow(col, vec3(1./2.2));\n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define PI (acos(-1.))\n#define TAU (2.*PI)\n\n#define sat(x) clamp(x, 0., 1.)\n\nmat2 rot2D(float a)\n{\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n// Cubic smin function\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = max(k - abs(a - b), 0.0 ) / k;\n    return min(a, b) - h*h*h*k * (1.0 / 6.0);\n}\n\nfloat smax( float a, float b, float k )\n{\n    return -smin(-a, -b, k);\n}\n\n// Cosine Color Palette\n// https://iquilezles.org/articles/palettes\nvec3 palette( float t )\n{\n    return 0.52 + 0.48*cos( TAU * (vec3(.9, .8, .5) * t + vec3(0.1, .05, .1)) );\n}\n\n\n// Hash without Sine\n// https://www.shadertoy.com/view/4djSRW\n// MIT License...\n/* Copyright (c) 2014 David Hoskins.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/\n\nfloat hash12(vec2 p)\n{\n    p = p * 1.1213;\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}