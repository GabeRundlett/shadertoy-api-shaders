{
    "Shader": {
        "info": {
            "date": "1670873563",
            "description": "Very simple example of packing and unpacking data into / from single bits. In this way, visible image can be encoded and stored in 512 bytes.\nCommon -  C# utils to generate uint array from input data;\nImage - standalone shader",
            "flags": 0,
            "hasliked": 0,
            "id": "DdSXDV",
            "likes": 5,
            "name": "Simple Lossless Compression",
            "published": 3,
            "tags": [
                "2d",
                "3d",
                "compression",
                "image",
                "maze",
                "packing",
                "byte",
                "data",
                "labyrinth",
                "unpacking"
            ],
            "usePreview": 0,
            "username": "PrzemyslawZaworski",
            "viewed": 280
        },
        "renderpass": [
            {
                "code": "const uint _GridSize = 64u;\nconst uint _ArraySize = _GridSize * _GridSize / 32u;\n\nconst uint _Uints[_ArraySize] = uint[_ArraySize] // encoded 4096 bools (grid 64x64) into 128 uints (512 bytes)\n(\n    4294967295u,4294967295u,2022752772u, 805611218u, 807649868u,2422235486u, 617628712u, 674267525u,\n      16843524u,1218593956u, 408045258u, 312478641u,2300022620u,   2625664u,4065866000u,1354350920u,\n    2731248654u, 380895556u, 436773154u, 547168963u,1275069056u,1338098820u,  11437153u,1620887856u,\n       5353090u,1111556240u, 321151776u,3259016449u,1359055398u,1681674306u,   7864399u,2167451699u,\n    1786987028u,  12622017u,3447744647u,   6402882u, 585619981u,2634056076u,2204677856u, 304111648u,\n        590662u,1074794509u,2446460050u,2168524822u,2032271492u,    524742u,3087008129u,1786774730u,\n     317342018u,2954723368u,2215656512u, 607195249u,1879614210u, 268505090u,2919512668u, 805314955u,\n    1361658995u,   6508808u,    550914u,1142166144u,  34106416u,2160592900u,4026550282u, 550506638u,\n    1208766584u, 307233192u, 276825679u,2874216528u,2889925676u,  37848390u,1061831056u,  37296276u,\n      71843844u, 210334280u,2793821323u,3239383041u,1363759144u,3700818508u,1222674144u, 946149378u,\n     226800320u,1075923008u, 675828103u,   4472993u,1837174788u,3793494088u, 671187209u, 994054848u,\n    2315543076u,1175150603u,2286231874u,3004049667u,2424307796u, 712125506u,1145569282u,  43091074u,\n     806846880u, 771769098u, 598696275u, 369174722u, 942752805u, 220467270u,1879401800u,2778859568u,\n     557974913u, 549605409u,  15280150u, 612412544u,  98631960u,2196827776u,  42214569u,2974073100u,\n    3347605521u,  42289222u,2281734146u,1683049841u,1228145186u,3502760977u,2492137608u,2213622508u,\n     272957579u,   8620386u,1543544984u, 311982149u, 148783232u,2244608106u,4294967295u,4294967295u\n);\n\n// extract single byte from four-bytes unsigned int number, index must have values from 0 to 3\nuint GetByteFromUint(uint number, uint index)\n{\n    return (number >> (index << 3u)) & 0xFFu;\n}\n\n// extract single bit from single byte, index must have values from 0 to 7\nuint GetBitFromByte(uint byte, uint index)\n{\n    return ((byte >> index) & 0x01u);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = floor(fragCoord.xy / iResolution.xy * float(_GridSize));\n    uint instance = uint(uv.x) + _GridSize * uint(uv.y);\n    uint number = _Uints[instance / 32u];\n    uint byte = GetByteFromUint(number, (instance / 8u) % 4u);\n    uint bit = GetBitFromByte(byte, instance % 8u);\n    fragColor = (bit == 1u) ? vec4(0.8) : vec4(0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//////////////////////////////////////////////////////////////////////////////////////\n// C# utils to generate uint array from input data\n// See also: https://www.dotnetperls.com/bitarray\n// Set _GridSize in Image (line of code nr 1)\n// Set _Uints array content in Image (from line of code nr 6)\n//////////////////////////////////////////////////////////////////////////////////////\n/*\nbyte[] BitArrayToBytes(BitArray bits)\n{\n    byte[] bytes = new byte[(bits.Length - 1) / 8 + 1];\n    bits.CopyTo(bytes, 0);\n    return bytes;\n}\n\nuint[] BytesToUints(byte[] bytes)\n{\n    uint[] uints = new uint[bytes.Length / 4];\n    System.Buffer.BlockCopy(bytes, 0, uints, 0, bytes.Length);\n    return uints;\n}\n\nstring[] PrintUints (uint[] uints)\n{\n    List<string> lines = new List<string>();\n    string line = \"\";\n    for (int i = 0; i < uints.Length; i++) \n    {\n        line = line + uints[i].ToString() + \"u,\";\n        if ((i+1) % 8 == 0)\n        {\n            lines.Add(line);\n            line = \"\";\n        }\n    }\n    return lines.ToArray();\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}