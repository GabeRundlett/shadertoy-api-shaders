{
    "Shader": {
        "info": {
            "date": "1582237908",
            "description": "This technique is only really reasonable at massive scales in 3D - I think just a regular N-body would be better for shadertoy-scale. ",
            "flags": 32,
            "hasliked": 0,
            "id": "3lySzW",
            "likes": 23,
            "name": "3D Simulation",
            "published": 3,
            "tags": [
                "3dsdftexture"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 667
        },
        "renderpass": [
            {
                "code": "// MARCH THROUGH DISTANCE VOLUME\nSampler\nMain\n    vec3 mi = 0.5*R3D;\n    vec3 p = vec3(0,0,-0.8*max(R3D.x,max(R3D.y,R3D.z)));\n    vec3 d = normalize(vec3((u-0.5*R)/R.y,1));\n\t    \n\tif (iMouse.z>0.) {\n \t\tp.zx *= e(6.2*iMouse.x/R.x);\n\t\td.zx *= e(6.2*iMouse.x/R.x);\n        p.yz *= e(6.2*iMouse.y/R.y);\n\t\td.yz *= e(6.2*iMouse.y/R.y);\n    } else {\n\t\tp.xz *= e(.2*iTime);\n\t\td.xz *= e(.2*iTime);\n\t}\n    Q = vec4(0);\n    for (int i = 0; i < 20; i++) {\n        vec3 o = abs(p)-mi;\n        float m = length(max(o,0.));\n        if (m<1.)\n        { \t\n            p += d*(T(clamp(p+mi,vec3(1),R3D-1.)).w);\n        } else p += d*max(m,1.);    \n \t}\n\tvec3 q = p;\n\tp += d*T(p+mi).w;\n\t\n\tfloat \n        n = T(p+mi+vec3(0,1,0)).w,\n        e = T(p+mi+vec3(1,0,0)).w,\n        f = T(p+mi+vec3(0,0,1)).w,\n        s = T(p+mi-vec3(0,1,0)).w,\n        w = T(p+mi-vec3(1,0,0)).w,\n        b = T(p+mi-vec3(0,0,1)).w;\n\tvec3 no = vec3(e-w,n-s,f-b);\n\tif (length(no)>0.) no = normalize(no);\n\telse {Q = vec4(0);return;}\n\tvec4 bb = B(p+mi);\n\tvec4 a = A(bb.xy), aa = A(bb.zw);\n\tvec4 col = 0.5+0.5*sin(a.w+vec4(1,2,3,4));\n\tvec4 col1 = 0.5+0.5*sin(aa.w+vec4(1,2,3,4));\n\tQ = mix(col,col1,0.5*smoothstep(2.,3.,length(p+mi-a.xyz)));\n\t\n\tQ *= 0.6+0.4*texture(iChannel3,abs(reflect(no,vec3(0,0,1))));\n\tQ *= exp(-length(q-p));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define N ceil(sqrt(R.x+R.y)/4.)\n#define R iResolution.xy\n#define R3D vec3(R/N,N*N)\n#define d2(U) ((U).xy+vec2(mod(floor((U).z),N),floor(floor((U).z)/N))*R/N)\n#define d3(u) vec3(mod(u,R/N),floor(u/R*N).x+floor(u/R*N).y*N)\n#define e(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define A(U) texelFetch(iChannel0,ivec2(U),0)\n#define B(U) texelFetch(iChannel1,ivec2(d2(mod((U),R3D))),0)\n#define C(U) texture(iChannel2, d2(mod((U),R3D))/R)\n#define D(U) texelFetch(iChannel3,ivec2(U),0)\n#define Sampler vec4 T(vec3 U) {return mix(texture(iChannel2,d2(vec3(U.xy,floor(U.z)))/R),texture(iChannel2,d2(vec3(U.xy, ceil(U.z)))/R),fract(U.z));}\n#define Main void mainImage( out vec4 Q, in vec2 u ) { vec3 U = d3(u); \n#define Me Q = A(U);\n#define Them vec4 M = 1./6.*(A(U+vec3(1,0,0))+A(U+vec3(0,1,0))+A(U+vec3(0,0,1))+A(U-vec3(1,0,0))+A(U-vec3(0,1,0))+A(U-vec3(0,0,1)));\n#define Init  if (iFrame < 1)\n\n\n\n#define pie(p, a, b) ((length((a)-(b))<1e-3)?1e3:abs(dot((p)-0.5*((a)+(b)),(b)-(0.5*((a)+(b))))/dot((b)-0.5*((a)+(b)),(b)-0.5*((a)+(b)))))\n\n#define line(p, a, b)  ((length((p)-(a)-((b)-(a))*clamp(dot((p)-(a),(b)-(a))/dot((b)-(a),(b)-(a)),0.,1.))))\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// STORE PARTICLE POSITION\nMain\n\tQ = A(u);\n    vec3 v = texelFetch(iChannel3,ivec2(u),0).xyz;\n\tQ.xyz += v;\n\t\n\tif (Q.x<3.) Q.x = 3.;\n\tif (R3D.x-Q.x<3.) Q.x = R3D.x-3.;\n\tif (Q.y<3.) Q.y = 3.;\n\tif (R3D.y-Q.y<3.) Q.y = R3D.y-3.;\n\tif (Q.z<3.) Q.z = 3.;\n\tif (R3D.z-Q.z<3.) Q.z = R3D.z-3.;\n\n    Init {\n        Q.xyz = round(clamp(U-vec3(0,0,1),R3D*.2,R3D*.8)/8.)*8.;\n        Q.w = Q.x+Q.y*R3D.x+Q.z*R3D.x*R3D.y;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// SORT TRIANGULATION\nvoid X (inout vec4 Q, inout vec4 a, inout vec4 aa, vec3 U, vec3 r) {\n    vec4 b = B(U+r);\n    vec4 n = A(b.xy);\n    float ln = length(n.xyz-U), la = length(a.xyz-U);\n    if (ln<la) {\n    \tQ.xy = b.xy;\n        a.xyz = n.xyz;\n    }\n    float pn = pie(U,a.xyz,n.xyz), \n          pa = pie(U,a.xyz,aa.xyz);\n    if (pn<pa){\n        aa = n;\n        Q.zw = b.xy;\n    }\n\tn = A(b.zw);\n    ln = length(n.xyz-U);\n    if (ln<la) {\n    \tQ.xy = b.zw;\n        a.xyz = n.xyz;\n    }\n    pn = pie(U,a.xyz,n.xyz);\n    if (pn<pa){\n        aa = n;\n        Q.zw = b.zw;\n    }\n}\nvoid Xr (inout vec4 Q, inout vec4 a, inout vec4 aa, vec3 U, float r) {\n\t X(Q,a,aa,U,vec3(r,0,0));\n     X(Q,a,aa,U,vec3(0,r,0));\n     X(Q,a,aa,U,vec3(0,0,r));\n     X(Q,a,aa,U,vec3(0,-r,0));\n     X(Q,a,aa,U,vec3(-r,0,0));\n     X(Q,a,aa,U,vec3(0,0,-r));\n    \n}\nMain \n\tQ = B(U);\n    vec4 a = A(Q.xy), aa= A(Q.zw);\n    Xr(Q,a,aa,U,1.);\n    Xr(Q,a,aa,U,2.);\n   \tInit {\n        Q.xy = u;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// COMPUTE DISTANCE & FORCE FIELD\nMain \n\tvec4 b = B(U);\n\tvec4 a = A(b.xy), aa = A(b.zw),\n         d = D(b.xy), dd = D(b.zw);\n\tQ.w = \n        min(\n            length(a.xyz-U)-2.,\n        \tline(U,a.xyz,aa.xyz)-1.\n        );\n\tvec3 r = a.xyz-aa.xyz;\n\tfloat l = length(r);\n\tQ.xyz = l>0.?\n       2e-2*(r/l/l-0.12*r/l+0.01*(dd-d).xyz/l-1e-4*(a.xyz-0.5*R3D))\n        \n        :vec3(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// STORE & UPDATE VELOCITY\nMain\nQ = 0.999*D(u);\nU = (A(u).xyz);\nQ += C(U+vec3(-2,-2,0));\nQ += C(U+vec3(-2,-1,-1));\nQ += C(U+vec3(-2,-1,0));\nQ += C(U+vec3(-2,-1,1));\nQ += C(U+vec3(-2,0,-2));\nQ += C(U+vec3(-2,0,-1));\nQ += C(U+vec3(-2,0,0));\nQ += C(U+vec3(-2,0,1));\nQ += C(U+vec3(-2,0,2));\nQ += C(U+vec3(-2,1,-1));\nQ += C(U+vec3(-2,1,0));\nQ += C(U+vec3(-2,1,1));\nQ += C(U+vec3(-2,2,0));\nQ += C(U+vec3(-1,-2,-1));\nQ += C(U+vec3(-1,-2,0));\nQ += C(U+vec3(-1,-2,1));\nQ += C(U+vec3(-1,-1,-2));\nQ += C(U+vec3(-1,-1,-1));\nQ += C(U+vec3(-1,-1,0));\nQ += C(U+vec3(-1,-1,1));\nQ += C(U+vec3(-1,-1,2));\nQ += C(U+vec3(-1,0,-2));\nQ += C(U+vec3(-1,0,-1));\nQ += C(U+vec3(-1,0,0));\nQ += C(U+vec3(-1,0,1));\nQ += C(U+vec3(-1,0,2));\nQ += C(U+vec3(-1,1,-2));\nQ += C(U+vec3(-1,1,-1));\nQ += C(U+vec3(-1,1,0));\nQ += C(U+vec3(-1,1,1));\nQ += C(U+vec3(-1,1,2));\nQ += C(U+vec3(-1,2,-1));\nQ += C(U+vec3(-1,2,0));\nQ += C(U+vec3(-1,2,1));\nQ += C(U+vec3(0,-2,-2));\nQ += C(U+vec3(0,-2,-1));\nQ += C(U+vec3(0,-2,0));\nQ += C(U+vec3(0,-2,1));\nQ += C(U+vec3(0,-2,2));\nQ += C(U+vec3(0,-1,-2));\nQ += C(U+vec3(0,-1,-1));\nQ += C(U+vec3(0,-1,0));\nQ += C(U+vec3(0,-1,1));\nQ += C(U+vec3(0,-1,2));\nQ += C(U+vec3(0,0,-2));\nQ += C(U+vec3(0,0,-1));\nQ += C(U+vec3(0,0,1));\nQ += C(U+vec3(0,0,2));\nQ += C(U+vec3(0,1,-2));\nQ += C(U+vec3(0,1,-1));\nQ += C(U+vec3(0,1,0));\nQ += C(U+vec3(0,1,1));\nQ += C(U+vec3(0,1,2));\nQ += C(U+vec3(0,2,-2));\nQ += C(U+vec3(0,2,-1));\nQ += C(U+vec3(0,2,0));\nQ += C(U+vec3(0,2,1));\nQ += C(U+vec3(0,2,2));\nQ += C(U+vec3(1,-2,-1));\nQ += C(U+vec3(1,-2,0));\nQ += C(U+vec3(1,-1,-2));\nQ += C(U+vec3(1,-1,-1));\nQ += C(U+vec3(1,-1,0));\nQ += C(U+vec3(1,-1,1));\nQ += C(U+vec3(1,-1,2));\nQ += C(U+vec3(1,0,-2));\nQ += C(U+vec3(1,0,-1));\nQ += C(U+vec3(1,0,0));\nQ += C(U+vec3(1,0,1));\nQ += C(U+vec3(1,0,2));\nQ += C(U+vec3(1,1,-2));\nQ += C(U+vec3(1,1,-1));\nQ += C(U+vec3(1,1,0));\nQ += C(U+vec3(1,1,1));\nQ += C(U+vec3(1,1,2));\nQ += C(U+vec3(1,2,-1));\nQ += C(U+vec3(1,2,0));\nQ += C(U+vec3(1,2,1));\nQ += C(U+vec3(2,-2,0));\nQ += C(U+vec3(2,-1,-2));\nQ += C(U+vec3(2,-1,-1));\nQ += C(U+vec3(2,-1,0));\nQ += C(U+vec3(2,-1,1));\nQ += C(U+vec3(2,0,-2));\nQ += C(U+vec3(2,0,-1));\nQ += C(U+vec3(2,0,0));\nQ += C(U+vec3(2,0,1));\nQ += C(U+vec3(2,0,2));\nQ += C(U+vec3(2,1,-1));\nQ += C(U+vec3(2,1,0));\nQ += C(U+vec3(2,1,1));\nQ += C(U+vec3(2,2,0));\n    if (length(Q.xyz)>1.) Q.xyz = normalize(Q.xyz);\n\tInit Q = vec4(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}