{
    "Shader": {
        "info": {
            "date": "1669389692",
            "description": "donut of dottiness",
            "flags": 0,
            "hasliked": 0,
            "id": "msfXRs",
            "likes": 11,
            "name": "dotnut",
            "published": 3,
            "tags": [
                "2d",
                "3d",
                "donut"
            ],
            "usePreview": 0,
            "username": "Alie",
            "viewed": 187
        },
        "renderpass": [
            {
                "code": "// Rotates a 2d point by an angle\n#define Rotate2D(p,a) p = cos(a) * p + sin(a) * vec2(-p.y, p.x)\n#define PI acos(-1.0)\n\n// Dot size and torus sections\nconst float dotSize = 0.02;\nconst float torusSectionsA = 12.0, torusSectionsB = 24.0;\nconst float torusRadiusA = 0.3, torusRadiusB = 0.6;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalised coords (from -1 to 1)\n    vec2 uv = fragCoord * 2.0 - iResolution.xy;\n    uv /= iResolution.xx;\n\n    // base colour\n    vec3 col = vec3(1.0, 0.45, 0.55);\n\n    // pixel size (for AA)\n    float pixSize = 2.0 / iResolution.x;\n    \n    // We start with a point offset a bit from the centre\n    vec3 p = vec3(0,torusRadiusA,0);\n    \n    // Iterate to rotate the point to form a circle\n    for (float i=0.0; i<=1.0; i+=1./torusSectionsA) {\n    \n        // Make a copy of the point and rotate it on the xy plane\n        vec3 pos1 = p;\n        Rotate2D(pos1.xy, i * PI * 2.);\n        \n        // Shift it across so it's a cross section through one side of the torus\n        pos1.x += torusRadiusB;\n        \n        // We now have a slice of torus, iterate to rotate around a second circle to finish it\n        for(float j = 0.0; j <= 1.0; j+= 1. / torusSectionsB) {\n        \n            // make a copy and roate again, this time on the xz plane\n            vec3 pos2 = pos1;\n            Rotate2D(pos2.xz, j * PI * 2.);\n            \n            // rotate the whole donut so it spins in 3d\n            Rotate2D(pos2.xy, iTime * .55);\n            Rotate2D(pos2.xz, iTime * .34);\n            \n            // a bit of fudged perspective...\n            pos2.z = -pos2.z * 0.5 + 0.5;\n            pos2.xy *= pos2.z+0.5;\n            \n            // add to the colour if we're inside the dot\n            // The dot size gets scaled by the z position for perspective\n            // Smoothstep is used betwee the dotsize and dotsize + pixSize, which gives us some AA\n            col += 1. - smoothstep(dotSize * pos2.z, dotSize * pos2.z + pixSize, length(uv - pos2.xy));\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}