{
    "Shader": {
        "info": {
            "date": "1481040257",
            "description": "Removes aliasing artifacts in square waves with non-integer samples per oscillation by computing an approximation of the ringing phenomenon in the band-limited signal resulting from a discontinuous function.\n\nMouse controls sampling offset.",
            "flags": 8,
            "hasliked": 0,
            "id": "Xt3Xzl",
            "likes": 20,
            "name": "Antialiased Step",
            "published": 3,
            "tags": [
                "math",
                "sound",
                "antialias",
                "squarewave",
                "synth"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 1690
        },
        "renderpass": [
            {
                "code": "/*\n\nRemoves aliasing artifacts in square waves with non-integer samples per oscillation by computing\nan approximation of the ringing phenomenon in the band-limited signal resulting from a discontinuous function.\n\nMouse controls sampling offset.\n\nFloating-point limitations cause nasty noises starting from time~=101. and affect both functions.\n\n*/\n\n#define pi 3.14159\n\nfloat aatestsquare(float freq, float x, float c) {\n    float sum = 0.;\n    for (int j=-20; j<0; j++) {\n        int i = j+int(floor(x*freq/2.))*2+2;\n        float e = mod(float(i),2.);\n        sum+= (e*2.-1.) * aastep(x+(-float(i)+((-c*2.+1.))*e)/freq);\n    }\n    return -sum*2.-1.;\n}\n\nfloat stestsquare(float freq, float x, float c) {\n    // Following code block is equivalent, demonstrates same method of construction as antialiased version\n    /* float sum = 0.;\n    for (int j=-20; j<0; j++) {\n        int i = j+int(floor(x*freq/2.))*2+2;\n        sum+=(mod(float(i),2.)*2.-1.) * sstep(x-float(i)/freq);\n    }\n    return sum+0.5; */\n    return float(fract(x*freq/2.)<c)*2.-1.;\n}\n\nvec3 plot_function (vec2 uvs) {\n\tvec2 uv = ( uvs - vec2(0.1,0.125) )*vec2(20.,1.5);\n    vec3 color = vec3(0.);\n    float offset = iMouse.x/iResolution.x*2.;\n    float x = uv.x;\n    if ( abs( aastep(x-offset) - uv.y )\n        < 0.005+0.8*abs(aastep(x-offset+0.01)-aastep(x-offset-0.01)) )\n        { color.rgb += vec3(0.0,0.5,1.0); }\n    if ( abs(fract(x-0.51)-0.5)<0.013 ) { color.r=1.0; }\n    if ( abs(uv.y-sstep(x-offset))<0.003 ) { color.g+=0.5; }\n    float xsmp = floor(x+0.5);\n    if ( length(vec2((uv.x-xsmp)*0.2,uv.y - aastep(xsmp-offset) ))<0.03 ) { color.rgb=vec3(0.0,0.8,1.0); }\n    if ( length(vec2((uv.x-xsmp)*0.2,uv.y - sstep(xsmp-offset) ))<0.02 ) { color.rgb+=vec3(0.0,0.5,0.0); }\n    return color;\n}\n\nvec3 plot_testwave (vec2 uvs) {\n    vec3 color = vec3(0.);\n    vec2 uv = ( uvs - vec2(0.0,0.5) ) * vec2(40.,4.01);\n    float offset = iMouse.x/iResolution.x*2.;\n    const float testfreq = 0.117;\n    float c = iMouse.y/iResolution.y;\n    if ( abs( aatestsquare(testfreq, uv.x-offset, c) - uv.y )<0.01 ) { color.rgb += vec3(0.0,0.5,1.0); }\n    if ( abs( stestsquare(testfreq, uv.x-offset, c) - uv.y )<0.005 ) { color.rgb += vec3(0.0,0.5,0.0); }\n    if ( abs( -1.0 - uv.y )<0.01 ) { color.r = 1.; }\n    if ( abs(  1.0 - uv.y )<0.01 ) { color.r = 1.; }\n    float xsmp = floor(uv.x+0.5);\n    if ( length(vec2((uv.x-xsmp)*0.2,uv.y - aatestsquare(testfreq, xsmp-offset, c) ))<0.03 ) { color.rgb+=vec3(0.0,0.8,1.0); }\n    if ( length(vec2((uv.x-xsmp)*0.2,uv.y - stestsquare(testfreq, xsmp-offset, c) ))<0.02 ) { color.g+=0.5; }\n    if ( abs(fract(uv.x-0.51)-0.5)<0.02 ) { color.r=0.5; }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor.a = 1.;\n    fragColor.rgb = ( uv.y > 0.5 ? plot_function(uv*vec2(1.,2.)-vec2(0.,1.)) : plot_testwave(uv*vec2(1.,2.)) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Source in Common",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 38
                    }
                ],
                "type": "sound"
            },
            {
                "code": "#define pi 3.14159\n\nfloat aastep(float x) {\n    return ( x<0.001 ? 0. : 1.0-sin(pi*x)/(pi*x) );\n}\n\nfloat sstep(float x) {\n    return ( x<0. ? 0. : 1.0 );\n}\n\nfloat aatestsquare(float freq, float x) {\n    float sum = 0.;\n    for (int j=-20; j<0; j++) {\n        int i = j+int(floor(x*freq/2.))*2+2;\n        sum+=(mod(float(i),2.)*2.-1.) * aastep(x-float(i)/freq);\n    }\n    return sum+0.5;\n}\n\nfloat stestsquare(float freq, float x) {\n    // Following code block is equivalent, demonstrates same method of construction as antialiased version\n    /* float sum = 0.;\n    for (int j=-20; j<0; j++) {\n        int i = j+int(floor(x*freq/2.))*2+2;\n        sum+=(mod(float(i),2.)*2.-1.) * sstep(x-float(i)/freq);\n    }\n    return sum+0.5; */\n    return float(fract(x*freq/2.)>0.5)-0.5;\n}\n\nfloat gtime = 0.;\n\nfloat testsquare(float freq, float x) {\n    // 1 second alternation between functions for comparison\n    return ( fract(gtime/2.)<0.5 ? aatestsquare(freq, x) : stestsquare(freq, x) );\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    gtime = time;\n    \n    // Add two square waves of similar frequency\n    // Should not produce any sounds of lower frequency than the lowest fundamental\n    // testsquare alternates between using aa function and naive function every 1s\n    return vec2( 0.5*testsquare(16000./44100., float(samp)) + 0.5*testsquare(16005./44100., float(samp)) );\n    \n    // Only the noise (difference):\n    // return 0.5*vec2( aatestsquare(800./44100., time*44100.) - stestsquare(800./44100., time*44100.) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}