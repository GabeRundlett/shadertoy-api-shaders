{
    "Shader": {
        "info": {
            "date": "1630075318",
            "description": "move mouse on screen\n\nback at it again with the frame killers\n\na moment of silence for anyone viewing on mobile",
            "flags": 32,
            "hasliked": 0,
            "id": "Ndt3zS",
            "likes": 14,
            "name": "2d light test pt",
            "published": 3,
            "tags": [
                "gi"
            ],
            "usePreview": 0,
            "username": "pema99",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);\n    fragColor.xyz /= fragColor.a;\n    \n    fragColor.x = pow(fragColor.x, 1.0/2.2);\n    fragColor.y = pow(fragColor.y, 1.0/2.2);\n    fragColor.z = pow(fragColor.z, 1.0/2.2);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define EPS 0.001\n#define BOUNCES 3\n#define SPP 16\n\nvec2 mouse = vec2(0.8, -0.4);\n\nfloat sdSphere(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\n// from iq\nfloat udSegment(vec2 p, vec2 a, vec2 b)\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 2.0 );\n    return length(pa-h*ba);\n}\n\nvec3 emission = vec3(0.);\nfloat map(vec2 p)\n{\n    emission = vec3(0.0);\n    \n    // solids\n    float d1 = sdSphere(p - vec2(0.3, 0.3), 0.3);\n    float d2 = sdSphere(p - vec2(-0.25, -0.2), 0.25);\n    d2 = min(d2, udSegment(p, vec2(-0.25, -0.2), vec2(-0.25, -1.0))-0.02);\n    d2 = min(d2, udSegment(p, vec2(1.0, 1.0), vec2(1.1, 0.5))-0.02);\n    \n    // boundary walls\n    float wall = min(\n        min(p.y+1.0, 1.0-p.y), \n        min(p.x + iResolution.x/iResolution.y, iResolution.x/iResolution.y - p.x));\n    \n    float solid = min(d1, min(d2, wall));\n    \n    // light\n    float d4 = udSegment(p, mouse.xy+vec2(-p.y, p.x)*0.1, mouse.xy-vec2(-p.y, p.x)*0.1) - 0.01;//sdSphere(p - mouse, 0.1);\n    float d5 = sdSphere(p + vec2(1.0, 0.0), 0.1);\n    float light = min(d4, d5);\n    if (light < solid)\n    {\n        if (d4 < d5) emission = vec3(0.0, 0.4, 0.0);\n        else emission = vec3(0.8, 0.0, 0.0);\n    }\n    \n    return min(solid, light);\n}\n\nfloat march(vec2 ro, vec2 rd)\n{\n    float t = 0.;\n    vec2 p = vec2(0.);\n    for (int i; i < 50; i++)\n    {        \n        p = ro + t * rd;\n        float dist = map(p);\n        if (dist < EPS) break;\n        t += dist;\n    }\n    return t;\n}\n\nvec2 normal(vec2 p)\n{\n    vec2 o = vec2(EPS, 0.);\n    return normalize(vec2(\n        map(p + o.xy) - map(p - o.xy),\n        map(p + o.yx) - map(p - o.yx)\n    ));\n}\n\nvec3 trace(vec2 ro)\n{\n    vec3 col = vec3(0.);\n    for (int i = 0; i < SPP; i++)\n    {        \n        vec3 final = vec3(0.);\n        \n        float ang = fract(float(i) / float(SPP) + float(iFrame)/600.0) * 6.28;\n        vec2 tro = ro, trd = vec2(cos(ang), sin(ang));\n        for (int j = 0; j < BOUNCES; j++)\n        {\n            float dist = march(tro, trd);\n\n            if (emission.x > 0. || emission.y > 0. || emission.z > 0.)\n            {\n                final = emission;\n                break;\n            }\n            else\n            {\n                vec2 hit = tro + dist * trd;\n                vec2 norm = normal(hit);\n                \n                tro = hit + norm * EPS;\n                trd = reflect(trd, norm);\n            }\n        }\n        \n        col += final;\n    }\n    return col / float(SPP);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // setup uvs, mouse\n    vec2 ouv = fragCoord/iResolution.xy;\n    vec2 uv = (ouv-0.5)*2.0;\n    uv.x *= iResolution.x/iResolution.y;\n    if (iMouse.xy != vec2(0.))\n    {\n        mouse = (iMouse.xy/iResolution.xy-0.5)*2.0;\n        mouse.x *= iResolution.x/iResolution.y;\n    }\n    \n    // pt\n    vec3 col = vec3(0.);\n    if (map(uv) < 0.)\n        col = emission;\n    else\n        col = trace(uv);\n        \n    vec4 buf = iMouse.z > 0.0 ? vec4(0.) : texture(iChannel0, ouv);\n    \n    fragColor = vec4(col, 1.0) + buf;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}