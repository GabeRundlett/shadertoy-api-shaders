{
    "Shader": {
        "info": {
            "date": "1715580020",
            "description": "House",
            "flags": 32,
            "hasliked": 0,
            "id": "lfVXzc",
            "likes": 9,
            "name": "Quick House",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "dof",
                "pathtrace",
                "aberration"
            ],
            "usePreview": 0,
            "username": "FifthStateOfMatter",
            "viewed": 228
        },
        "renderpass": [
            {
                "code": "const float aberrationScale = 2.0;\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec3 col = vec3(\n        texelFetch(iChannel0, ivec2(fragCoord + vec2(aberrationScale, 0) * length(uv)), 0).r,\n        texelFetch(iChannel0, ivec2(fragCoord), 0).g,\n        texelFetch(iChannel0, ivec2(fragCoord + vec2(-aberrationScale, 0) * length(uv)), 0).b\n    );\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float scale = 0.2;\nconst vec3 lDir = normalize(vec3(-10, -10, 10));\n\nfloat seed;\n\nfloat hash1() {\n    return fract(sin(seed += 0.1) * 4568.7564);\n}\n\nvec2 hash2() {\n    return vec2(hash1(), hash1());\n}\n\nvec3 hash3() {\n    return vec3(hash1(), hash1(), hash1());\n}\n\nvec2 randomDirection2D() {\n    vec2 d;\n    while(true) {\n        d = hash2() * 2.0 - 1.0;\n        if(length(d) <= 1.0) return d;\n    }\n}\n\nvec3 randomDirection() {\n    vec3 d;\n    while(true) {\n        d = hash3() * 2.0 - 1.0;\n        if(length(d) <= 1.0) return normalize(d);\n    }\n}\n\nvec3 rotate2D(vec3 p, vec2 t){\n    float stx = sin(t.x);\n    float ctx = cos(t.x);\n    float sty = sin(t.y);\n    float cty = cos(t.y);\n    mat3 xRotation;\n    xRotation[0] = vec3(1, 0, 0);\n    xRotation[1] = vec3(0, ctx, -stx);\n    xRotation[2] = vec3(0, stx, ctx);\n    \n    mat3 yRotation;\n    yRotation[0] = vec3(cty, 0, -sty);\n    yRotation[1] = vec3(0, 1, 0);\n    yRotation[2] = vec3(sty, 0, cty);\n    return p*xRotation*yRotation;\n}\n\nfloat box(vec3 p, vec3 s){\n    vec3 q = abs(p) - s;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat siding(vec3 p, float c, vec3 l){\n    vec3 q = p - c * clamp(round(p / c), -l, l);\n    return box(rotate2D(q, vec2(radians(-10.0), radians(0.0))), vec3(7, 0.25, 0.05) * scale);\n}\n\nvec2 minSurface(float d1, float d2) {\n    float d = min(d1, d2);\n    return vec2(d, d == d1 ? 0 : 1);\n}\n\nvec2 scene(vec3 p) {\n    float ground = box(p - vec3(0, -2, 0), vec3(1000, 1, 1000));\n    ground -= sin(p.x * 0.25) * sin(p.z * 0.25);\n    ground *= 1.0;\n    \n    float frontWall = min(\n        siding(p - vec3(0, 0, -6.98) * scale, 0.55 * scale, vec3(0, 35, 0) * scale),\n        box(p - vec3(0, 0, -6) * scale, vec3(7, 5, 1) * scale)\n    );\n    \n    float rightWall = min(\n        siding(rotate2D(p, vec2(0, -3.14 * 0.5)) - vec3(0, 0, -6.98) * scale, 0.55 * scale, vec3(0, 35, 0) * scale),\n        box(p - vec3(6, 0, 0) * scale, vec3(1, 5, 7) * scale)\n    );\n    \n    float leftWall = min(\n        siding(rotate2D(p, vec2(0, 3.14 * 0.5)) - vec3(0, 0, -6.98) * scale, 0.55 * scale, vec3(0, 35, 0) * scale),\n        box(p - vec3(-6, 0, 0) * scale, vec3(1, 5, 7) * scale)\n    );\n    \n    float backWall = min(\n        siding(rotate2D(p, vec2(0, -3.14)) - vec3(0, 0, -6.98) * scale, 0.55 * scale, vec3(0, 35, 0) * scale),\n        box(p - vec3(0, 0, 6) * scale, vec3(7, 5, 1) * scale)\n    );\n    \n    float doorSub = box(p - vec3(2.5, -0.6, 0) * scale, vec3(5, 3, 1.5) * scale);\n    \n    float door = box(p - vec3(1.8, -0.4, 0) * scale, vec3(5, 2.9, 1.5) * scale);\n    \n    float aFrame = max(\n        -doorSub,\n        box(rotate2D(p - vec3(0, 5, 0) * scale, vec2(3.14 * 0.25, 0)), vec3(7, 5, 5) * scale)\n    );\n    \n    float sides = max(\n        -doorSub,\n        min(leftWall, rightWall)\n    );\n    \n    float frontBack = max(\n        -box(p - vec3(0, 1, 0) * scale, vec3(1.5, 1.5, 100) * scale),\n        min(frontWall, backWall)\n    );\n    float walls = min(sides, frontBack);\n    \n    float roof = min(\n        box((rotate2D(p - vec3(0, 5, 0) * scale, vec2(3.14 * 0.25, 0)) - vec3(0, 5.5, 0.25) * scale), vec3(7.5, 0.25, 5.5) * scale),\n        box((rotate2D(p - vec3(0, 5, 0) * scale, vec2(-3.14 * 0.25, 0)) - vec3(0, 5.5, 0.25) * scale), vec3(7.5, 0.25, 5.5) * scale)        \n    );\n    \n    float foundation = box(p - vec3(0, -5.6, 0) * scale, vec3(8, 2, 8) * scale);\n    \n    foundation = min(foundation, box(p - vec3(9, -6, 0) * scale, vec3(1, 2, 2) * scale));\n    \n    float closest = min(aFrame, min(min(min(door, walls), roof), min(foundation, ground)));\n    \n    if (closest == roof || closest == foundation) {\n        return vec2(closest, 0);\n    } else if (closest == ground) {\n        return vec2(closest, 1);\n    } else if (closest == door) {\n        return vec2(closest, 3);\n    }else {\n        return vec2(closest, 2);\n    }\n}\n\nfloat raymarch(vec3 o, vec3 d, inout bool hit) {\n    float t = 0.0;\n    for(int i = 0; i < 100 && t <= 100.0 && !hit; i++) {\n        float s = scene(o + d * t).x;\n        t += s;\n        if(abs(s) <= 0.003 * t && t >= 0.0) hit = true;\n    }\n    return t;\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(0, 0.001);\n    return normalize(vec3(\n        scene(p + e.yxx).x - scene(p - e.yxx).x,\n        scene(p + e.xyx).x - scene(p - e.xyx).x,\n        scene(p + e.xxy).x - scene(p - e.xxy).x\n    ));\n}\n\nvec3 pathtrace(vec3 o, vec3 d) {\n    vec3 col = vec3(1);\n    bool h;\n    vec3 n;\n    float initT;\n    bool initH;\n    \n    for (int i = 0; i < 12; ++i) {\n        h = false;\n        float t = raymarch(o, d, h);\n        initT = i <= 0 ? t : initT;\n        initH = i <= 0 ? h : initH;\n        \n        if (h) {\n            vec3 m;\n            float currM = scene(o + d * t).y;\n            if (currM == 1.0) {\n                m = vec3(0.5, 0.8, 0);\n            } else if(currM == 2.0) {\n                m = vec3(1);\n            } else if(currM == 3.0) {\n                m = vec3(0.5, 0.3, 0);\n            } else {\n                m = vec3(0.2);\n            }\n            \n            n = getNormal(o + d * t);\n            o = o + d * t + n * 0.001;\n            d = randomDirection();\n            d = normalize(d + n);\n            col *= 0.5 * m;\n        } else {\n            col *= mix(vec3(0.6, 0.8, 1), vec3(1, 0.9, 0.7) * 500.0, pow(max(0.0, dot(d, -lDir)), 500.0));\n            break;\n        }\n    }\n    \n    return mix(col, vec3(0.6, 0.8, 1), 1.0 - exp(-(initH ? initT : 50.0) * vec3(0.01, 0.011, 0.015)));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord ){\n    seed = iTime + dot(sin(fragCoord), vec2(443.712, 983.234));\n    seed += hash1() * 434.251;\n    \n    vec2 uv = (fragCoord + hash2() - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec3 o = rotate2D(vec3(0, 0, -10), vec2(radians(10.0), radians(135.0)));\n    vec3 d = rotate2D(normalize(vec3(uv, 1.75)), vec2(radians(10.0), radians(135.0)));\n    \n    vec3 focalPoint = o + d * 10.0;\n    \n    o += rotate2D(vec3(randomDirection2D(), 0), vec2(radians(10.0), radians(135.0))) * 0.16;\n    vec3 shiftedDir = normalize(focalPoint - o);\n    \n    vec3 col = pathtrace(o, shiftedDir);\n    vec4 data = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    if(iMouse.z > 0.0){\n        data *= 0.0;\n    }\n    data += vec4(col, 1);\n    \n    fragColor = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// ACES, hash and convergence setup from Poisson (https://www.shadertoy.com/view/dssXRj)\n\nvec3 ACES(vec3 x) {\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.1;\n    float d = 0.7;\n    float e = 0.12;\n    return (x * (a * x + b)) / (x * (c * x + d) + e);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec4 col = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    col.rgb /= col.a;\n    col.rgb = ACES(col.rgb);\n    fragColor = vec4(pow(col.rgb, vec3(1.0 / 2.2)), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}