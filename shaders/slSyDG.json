{
    "Shader": {
        "info": {
            "date": "1650199040",
            "description": "sample code",
            "flags": 0,
            "hasliked": 0,
            "id": "slSyDG",
            "likes": 3,
            "name": "9_6_repeat",
            "published": 3,
            "tags": [
                "ch9"
            ],
            "usePreview": 0,
            "username": "tomoe",
            "viewed": 298
        },
        "renderpass": [
            {
                "code": "//begin rot\nvec2 rot2(vec2 p, float t){\n    return vec2(cos(t) * p.x -sin(t) * p.y, sin(t) * p.x + cos(t) * p.y);\n}\nvec3 rotX(vec3 p, float t){\n    return vec3(p.x, rot2(p.yz, t));\n}\nvec3 rotY(vec3 p, float t){\n    return vec3(p.y, rot2(p.zx, t)).zxy;\n}\nvec3 rotZ(vec3 p, float t){\n    return vec3(rot2(p.xy, t), p.z);\n}\nvec3 euler(vec3 p, vec3 t){\n    return rotZ(rotY(rotX(p, t.x), t.y), t.z);\n}\n//end rot\n\nfloat sphereSDF(vec3 p, vec3 c, float s){\n    return sqrt(dot(p - c, p - c)) - s;\n}\n\nfloat sceneSDF(vec3 p){\n    vec3 center = vec3(0.);\n    float scale = 0.1;\n    return sphereSDF(fract(p+0.5)-0.5, center, scale);\n}\nvec3 gradSDF(vec3 p){\n    float d = 0.001;\n    return normalize (vec3(\n        sceneSDF(p + vec3(d, 0.0, 0.0)) - sceneSDF(p - vec3(d, 0.0, 0.0)),\n        sceneSDF(p + vec3(0.0, d, 0.0)) - sceneSDF(p - vec3(0.0, d, 0.0)),\n        sceneSDF(p + vec3(0.0, 0.0, d)) - sceneSDF(p - vec3(0.0, 0.0, d))\n    ));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    vec3 t = vec3(iTime * 0.1);\n    vec3 cPos = euler(vec3(0.0, 0.0,.5), t);\n    vec3 cDir = euler(vec3(0.0, 0.0, - 1.0), t);\n    vec3 cUp = euler(vec3(0.0, 1.0, 0.0), t);\n    vec3 cSide = cross(cDir, cUp);\n\n    float targetDepth = 1.0;\n\n    vec3 lDir = vec3(1.0);\n\n    vec3 ray = cSide * p.x + cUp * p.y + cDir * targetDepth;\n    vec3 rPos = cPos;\n    ray = normalize(ray);\n    fragColor.rgb = vec3(0.0);\n    for(int i = 0; i < 50; i ++ ){\n        if (sceneSDF(rPos) > 0.001){\n            rPos += sceneSDF(rPos) * ray;\n        } else {\n            float amb = 0.1;\n            float diff = 0.9 * max(dot(normalize(lDir), gradSDF(rPos)), 0.0);\n            vec3 col = vec3(0.0, 1.0, 1.0);\n            fragColor.rgb = col * (diff + amb);\n            break;\n        }\n    }\n    fragColor.a = 1.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}