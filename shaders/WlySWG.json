{
    "Shader": {
        "info": {
            "date": "1583427171",
            "description": "Based on @BigWIngs's gyro tut",
            "flags": 64,
            "hasliked": 0,
            "id": "WlySWG",
            "likes": 3,
            "name": "Rorschach's Dream (Soft)",
            "published": 3,
            "tags": [
                "raymarching",
                "template",
                "gyroid",
                "artofcode",
                "deerfeeder"
            ],
            "usePreview": 0,
            "username": "deerfeeder",
            "viewed": 434
        },
        "renderpass": [
            {
                "code": "// Fork of \"Rorschach's Dream\" by deerfeeder. https://shadertoy.com/view/wtGXzd\n// 2020-03-05 16:50:36\n\n// Fork of \"RayMarching starting point\" by BigWIngs. https://shadertoy.com/view/WtGXDD\n// 2020-03-04 23:37:06\n// Music by me (Deerfeeder - Fall)\n// raymarching artifacts as a feature\n\n#define MAX_STEPS 12\n#define MAX_DIST 100.\n#define SURF_DIST 0.1\n\n#define S(a, b, t) smoothstep(a, b, t)\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdGyroid(vec3 p, float scale, float thickness, float bias) {\n\tp *= scale;\n    return abs(dot(sin(p), cos(p.zxy))+bias)/scale - thickness;\n}\n\nfloat GetDist(vec3 p) {\n    p.xy*=Rot(iTime*0.08);\n    p.zx*=Rot(iTime*0.08);\n    float box = sdBox(p, vec3(3.0));\n   \t\n    // return box;\n    float gyro = sdGyroid(p,abs(5.0*tanh(iTime*3.65)),0.125,2.0)/1.0;\n    return max(box, gyro*2.);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv.x = abs(uv.x);\n    //uv.y = abs(uv.y);\n\tvec2 m = vec2(cos(iTime*1.)+iMouse.y,sin(iTime*1.))/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    float amp = texture(iChannel0, vec2(1., 0.0)).r*7.3;\n    amp = amp > 12.1 ? amp:0.;\n    vec3 ro = vec3(sin((iTime)*0.096), 3. + 3. + sin(iTime * 0.1) , -cos((iTime+ amp)*0.096));\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        \n    \tfloat dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n    \tcol += dif;  \n    }\n    \n    col = pow(col, vec3(0.2 + abs(2. * cos(iTime*0.1))));\t// gamma correction\n    \n    fragColor = vec4(1.-col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 21428,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/miiiis/mi-ish-airborne"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}