{
    "Shader": {
        "info": {
            "date": "1488822027",
            "description": "shaded tubes flow.\nH: markers density   N: markers length (will be multiplied by 3)\n #if line 49 to show/hide background flow.  \n\nGlitch: if somebody knows how to generate tileable simplex noise (bufA) , I'm interested :-)",
            "flags": 32,
            "hasliked": 0,
            "id": "MslcRB",
            "likes": 14,
            "name": "flow 2D - lines 2c (Cthulhu)",
            "published": 3,
            "tags": [
                "noise",
                "flow",
                "curlnoise",
                "flownoise",
                "tentacle",
                "cthulhu"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1384
        },
        "renderpass": [
            {
                "code": "// variant of https://www.shadertoy.com/view/MdsyRB\n\nfloat line(vec2 p, vec2 a, vec2 b, out vec2 d) \n{\n\tvec2 pa = p - a, ba = b - a;\n    float u = dot(pa, ba)/dot(ba, ba), cu = clamp(u , 0., 1.); \n\td = pa - ba * u; \n \treturn length(pa - ba * cu);\n}\n\nvoid mainImage( out vec4 O, vec2 U ) // -------------------------------------------\n{\n    float t = iTime*.05; const float H=4., N=70.; // 1.+30.*(.5+.5*sin(t));\n    vec2 R = iResolution.xy, d;\n    O = vec4(0);\n    U /= 8.*R.y; \n    float T = 1., a, r;  \n\n#if 1  // set 1 to complete trajectory beyond tiles\nfor(int x=-2; x<=2; x++) \n  for(int y=-2; y<=2; y++)\n#else\n    int x=0,y=0;\n#endif\n  {        \n    vec2 P0 =  .5*R.xy/R.y/8.+.3*(  vec2(x,y)/1. )/ (8.*H), // /1 instead of /3 for overlap\n         D, _P, P = P0;\n    O +=  .5*smoothstep(2.,0., length(U-P0)*R.y*8.);    // --- draw pin\n\n      for (float i=0.; i<1.; i+=1./N) {\n                                                     // --- random field creation\n        D = texture(iChannel0, fract( P*8.*R.y/R + t )).xy;\n                                                               \n\t\t_P = P;\n        P -= .1/200.* D*R.y/8.*3.;                   // --- advection (to be LIC )\n       \n        r = .7*(1.-i*i);\n        a = clamp(smoothstep(1.14,1.,line(U,_P,P,d)*R.y/r) *2.* R.y/1e3,0.,1.); // cyl mask\n        vec3 n = vec3( d*=-R.y/r, sqrt(1.-dot(d,d)));                      // cyl normal\n        O += T*  a\n              *  (.2 + .8*max(0.,dot( n, vec3(1,0,0) )) ) // Lambert shading\n              * ( .5 + .5*vec4(P-P0,0,0)*200.*8./11.3 )   // color = 3D orientation\n            ; \n        T *= (1.-a);\n    }        \n }  \n    \n    \n#if 1                                                // --- display background flow\n    vec2 D, P=U; const float N2 = 30.;\n    float B = 0.;\n    for (float i=0.; i<1.; i+=1./N2) {\n        D = texture(iChannel0, fract( P*8.*R.y/R + t )).xy,\n        P -= .1/200.* D*R.y/8.;\n        B += .07/length(fract(P * 8.*30.)-.5) ;\n      }\n    O.b += T * B / N2;\n#else\n    O.b += T*.3;\n#endif\n    \n    //O = .5+.5*vec4(D,0,0)*30.*.1* R.y /11.3; O=fract(O); \n    //O = abs(2.*O-1.);\n    \n    //O += .1/length(fract(P * 8.*30.)-.5) -O;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- Simplex noise 2D from  Makio64 / Ashima  https://www.shadertoy.com/view/4sdGD8\n\nvec3 permute( vec3 x) { return mod( x*x*34.+x, 289.); }\nfloat noise2( vec2 v) {\n    v *= 64./2.; // emulates 64x64 noise texture\n    vec2 i = floor((v.x+v.y)*.36602540378443 + v),\n        x0 = (i.x+i.y)*.211324865405187 + v - i;\n    float s = step(x0.x,x0.y);\n    vec2 j = vec2(1.-s,s),\n        x1 = x0 - j + .211324865405187, \n        x3 = x0 - .577350269189626; \n    i = mod(i,289.);\n    vec3 p = permute( permute( i.y + vec3(0, j.y, 1 ))+ i.x + vec3(0, j.x, 1 )   ),\n         m = max( .5 - vec3(dot(x0,x0), dot(x1,x1), dot(x3,x3)), 0.),\n         x = fract(p * .024390243902439) * 2. - 1.,\n         h = abs(x) - .5,\n        a0 = x - floor(x + .5);\n    return .5 + 65. * dot( pow(m,vec3(4.))*(- 0.85373472095314*( a0*a0 + h*h )+1.79284291400159 ), \n                           a0 * vec3(x0.x,x1.x,x3.x) + h * vec3(x0.y,x1.y,x3.y));\n}\n\nvoid mainImage( out vec4 O, vec2 U ) // -------------------------------------------\n{\n    vec2 R = iResolution.xy;\n    \n    if (iFrame>0 && texture(iChannel0,.5/R).xy==R) { // recompute at start + resize\n        O = texture(iChannel0,U/R);\n        return;\n    }\n    if (U==vec2(.5)) { O.xy = R; return; }\n    \n    float t = iTime;\n    U /= 8.*R.y; \n    vec2 D, P0 =  U, P = P0;\n    \n    float T = noise2(P);\n#define dnoise2(i,j) T - noise2(P-vec2(i,j)/8./R.y)\n  //D = vec2(dFdx(T), dFdy(T) );                 // hardware derivatives\n    D = vec2(dnoise2(1,0), dnoise2(0,1) );       // software derivatives\n    D = normalize(D)*5./R.y;                     // optional : no calm areas\n    D = vec2(-D.y,D.x);                          // invicid noise: grad(D)=0\n\n    O = vec4(D,0,0); // *30.*.1* R.y;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}