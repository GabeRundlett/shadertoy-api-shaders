{
    "Shader": {
        "info": {
            "date": "1475180725",
            "description": "Counter-examples to show that [url=https://www.shadertoy.com/view/ldl3W8]IQ's algorithm[/url] is not bullet-proof. Hold LMB to see [url=https://www.shadertoy.com/view/llG3zy]my version[/url] that improves accuracy and has less iterations (32 vs 34).",
            "flags": 0,
            "hasliked": 0,
            "id": "4lKGRG",
            "likes": 23,
            "name": "IQ's Voronoi Inaccuracies",
            "published": 3,
            "tags": [
                "2d",
                "voronoi",
                "worley"
            ],
            "usePreview": 1,
            "username": "tomkh",
            "viewed": 2802
        },
        "renderpass": [
            {
                "code": "// Voronoi edge distance inaccuracies in IQ's algorithm\n// by Tomasz Dobrowolski' 2016\n\n// Hold LMB to see fixed version.\n// Shader cycles through 2 different counter-examples over time.\n\n// My improved variants and longer description at:\n// https://www.shadertoy.com/view/llG3zy \n\n// Original:\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://www.shadertoy.com/view/ldl3W8\n// And his article:\n// https://iquilezles.org/articles/voronoilines\n\n// IQ's algorithm as stated in his article is flawed,\n// because it is making two wrong assumptions.\n// 1. The max. distance between query point and the closest point is underestimated.\n//    It can be as far as sqrt(2) distance and this is more than 1 cell,\n//    thus 3x3 scan is not enough and 4x4 is necessary in the first pass\n//    (the first counter-example is designed to clearly show that).\n// 2. For the second pass Inigo wrote\n//   \"the solution must be to first detect which cell contains the closest point to our shading point x,\n//    then do the neighbor search centered at that cell instead of the cell that contains x\"\n//  and he shows no mathematical justification for this.\n//  And no wonder, because there is none.\n//  I can suspect it was intuitively assumed from the 1st assumption that 3x3 is good enough,\n//  therefore 5x5 should contain all the neighbouring points?\n//  Unfortunately, it's not true.\n//  The second counter-example clearly shows that 5x5 scan around the cell \n//  that cointains closest point (\"mg\" in code) is wrong.\n//  In fact there is no point in searching around the cell that contains closest point\n//  at all, since it can only make things worse, as I show in this illustration:\n//  http://ricedit.com/second_order_voronoi_03.png\n// It is actually way better to do 5x5 scan just around query point cell (ignoring \"mg\").\n// We can further optimize this and do only 4x4 scan around half-cell closest to the query point,\n// then also consider faster variants i.e. 3x3+4x4 or even 3x3 that work good enough (as in llG3zy).\n// However, I wouldn't risk to say any of those variants is \"mathematically correct\" quite yet.\n// I am still working out a detailed proof.\n// And actually instead of saying \"mathematically correct\" I prefer to say\n// \"correct in all cases\" or if it's not, it's just \"yet another good approximation\".\n\n//#define ANIMATE\n\nvec2 hash2( vec2 p )\n{\n#if 1\n    // Counter example when it fails \n    // (all points are properly within one cell, even within .01 tolerance):\n    if (fract(iTime*.25) > .5 && p.x == 1. && p.y == 2.) return vec2(.99,.01);\n    if (p.x == 2. && p.y == 1.) return vec2(.01,.01);\n    if (p.x == 2. && p.y == 2.) return vec2(.01,.99);\n    if (p.x == 3. && p.y == 1.) return vec2(.99,.01);\n    if (p.x == 3. && p.y == 2.) return vec2(.99,.99);\n    if (p.x == 4. && p.y == 2.) return vec2(.01,.01);\n    return vec2(.5);\n#else\n\t// texture based white noise\n\treturn texture( iChannel0, (p+0.5)/256.0, -100.0 ).xy;\n#endif\n    // procedural white noise\t\n\t//return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\n//---------------------------------------------------------------\n// Original IQ's algorithm\nvec3 voronoi( in vec2 x )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec3( md, mr );\n}\n\n//---------------------------------------------------------------\n// 4x4 scan in both passes (more accurate)\n// by Tomasz Dobrowolski\n//---------------------------------------------------------------\nvec3 voronoi_fixed( in vec2 x )\n{\n#if 1\n    // slower, but better handles big numbers\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n    vec2 h = step(.5,f) - 2.;\n    n += h; f -= h;\n#else\n    vec2 n = floor(x - 1.5);\n    vec2 f = x - n;\n#endif\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mr;\n\n    float md = 8.0;\n    for( int j=0; j<=3; j++ )\n    for( int i=0; i<=3; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n        vec2 o = hash2( n + g );\n        #ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=0; j<=3; j++ )\n    for( int i=0; i<=3; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n        vec2 o = hash2( n + g );\n        #ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 ) // skip the same cell\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec3( md, mr );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy/iResolution.xx;\n    \n    p *= 8.0;\n    //p += vec2(100000,100000); // big number test, where separate floor/fract is better\n    //p += vec2(1000000,1000000); // big number test, both fail actually\n    //(test big numbers with texture based hash)\n\n    vec3 c = (iMouse.z > 0.) ? voronoi_fixed( p ) : voronoi( p );\n\n\t// isolines\n    vec3 col = c.x*(0.5 + 0.5*sin(64.0*c.x))*vec3(1.0);\n    // borders\t\n    col = mix( vec3(1.0,0.6,0.0), col, smoothstep( 0.04, 0.07, c.x ) );\n    // feature points\n\tfloat dd = length( c.yz );\n\tcol = mix( vec3(1.0,0.6,0.1), col, smoothstep( 0.0, 0.12, dd) );\n\tcol += vec3(1.0,0.6,0.1)*(1.0-smoothstep( 0.0, 0.04, dd));\n\n\tfragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}