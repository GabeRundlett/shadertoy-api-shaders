{
    "Shader": {
        "info": {
            "date": "1370848591",
            "description": "Or a line integral, pretty much inspired by fizzer's \"funcky planet\". I used to know this as \"directional blur\" in the demoscene times. Here it is anyway, a doodling that ended up looking cute I think ^_^",
            "flags": 0,
            "hasliked": 0,
            "id": "4dlGDN",
            "likes": 304,
            "name": "Noise blur",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "flow",
                "noisefield"
            ],
            "usePreview": 1,
            "username": "iq",
            "viewed": 27083
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0;\n    return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n               mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n}\n\nvec2 map( vec2 p, in float offset )\n{\n\tp.x += 0.1*sin( iTime + 2.0*p.y ) ;\n\tp.y += 0.1*sin( iTime + 2.0*p.x ) ;\n\t\n\tfloat a = noise(p*1.5 + sin(0.1*iTime))*6.2831;\n\ta -= offset;\n\treturn vec2( cos(a), sin(a) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n\tvec2 uv = -1.0 + 2.0*p;\n\tuv.x *= iResolution.x / iResolution.y;\n\t\t\n    float offset = iTime + fragCoord.x/iResolution.x;\n    \n\tfloat acc = 0.0;\n\tvec3  col = vec3(0.0);\n\tfor( int i=0; i<32; i++ )\n\t{\n\t\tvec2 dir = map( uv, offset );\n\t\t\n\t\tfloat h = float(i)/32.0;\n\t\tfloat w = 4.0*h*(1.0-h);\n\t\t\n\t\tvec3 ttt = w*texture( iChannel0, uv ).xyz;\n\t\tttt *= mix( vec3(0.6,0.7,0.7), vec3(1.0,0.95,0.9), 0.5 - 0.5*dot( reflect(vec3(dir,0.0), vec3(1.0,0.0,0.0)).xy, vec2(0.707) ) );\n\t\tcol += w*ttt;\n\t\tacc += w;\n\t\t\n\t\tuv += 0.008*dir;\n\t}\n\tcol /= acc;\n    \n\tfloat gg = dot( col, vec3(0.333) );\n\tvec3 nor = normalize( vec3( dFdx(gg), 0.5, dFdy(gg) ) );\n\tcol += vec3(0.4)*dot( nor, vec3(0.7,0.01,0.7) );\n\n\tvec2 di = map( uv, offset );\n\tcol *= 0.65 + 0.35*dot( di, vec2(0.707) );\n\tcol *= 0.20 + 0.80*pow( 4.0*p.x*(1.0-p.x), 0.1 );\n\tcol *= 1.7;\n\n\tfragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}