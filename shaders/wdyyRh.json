{
    "Shader": {
        "info": {
            "date": "1610659899",
            "description": "camouflage",
            "flags": 0,
            "hasliked": 0,
            "id": "wdyyRh",
            "likes": 4,
            "name": "camouflage",
            "published": 3,
            "tags": [
                "camouflage"
            ],
            "usePreview": 0,
            "username": "yurka",
            "viewed": 276
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitFreqs(iTime);\n    InitFreqs2(iTime);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n    \n    float value = 0.0;\n    \n    for (int oi = 0; oi < freqs_count; oi++)\n    {\n        value += freqs[oi].a * sin(freqs[oi].xfreq * uv.x * 3.14 * 2.0 + freqs[oi].yfreq * uv.y * 3.14 * 2.0 + freqs[oi].phase);\n    }\n\n    float value2 = 0.0;\n    \n    for (int oi = 0; oi < freqs_count; oi++)\n    {\n        value2 += freqs2[oi].a * sin(freqs2[oi].xfreq * uv.x * 3.14 * 2.0 + freqs2[oi].yfreq * uv.y * 3.14 * 2.0 + freqs2[oi].phase);\n    }\n\t\n\n    vec3 col1 = vec3(0.5, 0.75, 0.01);\n    vec3 col2 = vec3(0.02, 0.63, 0.001);\n    vec3 col3 = vec3(0.6, 0.6, 0.03);\n    vec3 col4 = vec3(0.00, 0.00, 0.000);\n    // discrete:\n    vec3 col = value < 0.0 ? value2 < 0.0 ? col1 : col3 : value2 < 0.0 ? col2 : col4;\n    // smooth:\n    //vec3 col = value < 0.0 ? (-value) * col1 : value * col + value2 < 0.0 ? (-value2) * col3 : value2 * col4;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_FREQS 20\n#define MPI 3.14159265359\nfloat timescale = 1.50;\n\nfloat random (in vec2 _st) {\n     return fract(sin(1.0+dot(_st,vec2(127.1,311.7)))*43758.545); \n}\n\nfloat random (in float _st) {\n    return fract(sin(dot(vec2(_st, 0.0),\n                         vec2(127.1,311.7)))*\n        43758.545);\n}\nfloat lastrandom = 0.0;\nfloat nextrandom(float a)\n{\n    float r = random (lastrandom + a);\n    lastrandom = r;\n    return r;\n}\n\nstruct freq\n{\n    float a;\n    float phase;\n\tfloat xfreq;\n    float yfreq;\n};\n    \nfreq freqs[MAX_FREQS];\nfreq freqs2[MAX_FREQS];\nint freqs_count = 0;\n\nvoid InitFreqs(float iTime)\n{\n    int oc = freqs_count = 0;\n    lastrandom = floor(iTime*timescale);\n    for (int i = 0; i < MAX_FREQS; i++)\n    {\n        freqs[oc].a = nextrandom(float(i*5 + 0) / 5.0);\n    \tfreqs[oc].xfreq = (nextrandom(float(i*5 + 1) / 5.0)*2.0 - 1.0) * (1.0 - freqs[oc].a) * (float(MAX_FREQS));\n    \tfreqs[oc].yfreq = (nextrandom(float(i*5 + 2) / 5.0)*2.0 - 1.0) * (1.0 - freqs[oc].a) * (float(MAX_FREQS));\n    \tfreqs[oc].phase = nextrandom(float(i*5 + 3) / 5.0) * 2.0 * MPI;\n\n    \toc = ++freqs_count;\n    }\n}\n\nvoid InitFreqs2(float iTime)\n{\n    int oc = freqs_count = 0;\n    lastrandom = floor(iTime*timescale) + 4.178;\n    for (int i = 0; i < MAX_FREQS; i++)\n    {\n        freqs2[oc].a = nextrandom((float(i)*5.0 + 0.2) / 5.0);\n    \tfreqs2[oc].xfreq = (nextrandom((float(i)*5.0 + 1.4) / 5.0)*2.0 - 1.0) * (1.0 - freqs2[oc].a) * (float(MAX_FREQS));\n    \tfreqs2[oc].yfreq = (nextrandom((float(i)*5.0 + 2.6) / 5.0)*2.0 - 1.0) * (1.0 - freqs2[oc].a) * (float(MAX_FREQS));\n    \tfreqs2[oc].phase = nextrandom((float(i)*5.0 + 3.7) / 5.0) * 2.0 * MPI;\n\n    \toc = ++freqs_count;\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}