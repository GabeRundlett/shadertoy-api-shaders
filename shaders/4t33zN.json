{
    "Shader": {
        "info": {
            "date": "1468185209",
            "description": "Basic sphere tracer - my first attempt.\nMainly based on the tracer and lighting algorithms specified in http://www2.compute.dtu.dk/pubdb/views/edoc_download.php/6392/pdf/imm6392.pdf\n\nYou can change the position of the point light with the mouse.",
            "flags": 0,
            "hasliked": 0,
            "id": "4t33zN",
            "likes": 1,
            "name": "Sphere Tracing Test",
            "published": 3,
            "tags": [
                "spheretracing"
            ],
            "usePreview": 0,
            "username": "geoff",
            "viewed": 610
        },
        "renderpass": [
            {
                "code": "#define MAX_ITER 1000\n#define MAX_DIST 25.0\n#define EPSILON 0.001\n#define T_MIN 0.25\n#define AO_SAMPLES 50\n#define AO_STRENGTH 5.0\n\nvec3 lightPos = vec3(4.0 * (iMouse.x / iResolution.x) - 2.0, 2.0 * (iMouse.y / iResolution.y), -1.0);\nvec3 camPos = vec3(0.0, 0.0, -0.5);\n\nvec3 ac = vec3(1.0);\nfloat ka = 0.3;\n\nvec3 dc = vec3(1.0);\nfloat kd = 0.5;\n\nvec3 sc = vec3(1.0);\nfloat ks = 0.8;\nfloat alpha = 32.0;\n\nfloat map(vec3 p){\n    return min(p.y + 0.25, length(p) - 0.25);\n}\n\nfloat trace(vec3 ro, vec3 rd){\n \tfloat t = 0.0;\n    float d = 0.0;\n    for(int iter = 0; iter < MAX_ITER; iter++){\n        d = map(ro + rd * t);\n        if(d < EPSILON){\n            break;\n        }\n        if(t > MAX_DIST){\n        \tt = 0.0;\n            break;\n    \t}\n        t += d;\n    }\n    return t;\n}\n\nfloat shadow(vec3 ro, vec3 rd){\n    float t = T_MIN;\n    float d = 0.0;\n    float shadow = 1.0;\n    for(int iter = 0; iter < MAX_ITER; iter++){\n        d = map(ro + rd * t);\n        if(d < EPSILON){\n            return 0.0;\n        }\n        if(t > MAX_DIST){\n            break;\n        }\n        shadow = min(shadow, 8.0 * d / t);\n        t += d;\n    }\n    return shadow;\n}\n\nfloat occlusion(vec3 ro, vec3 rd){\n    float k = 1.0;\n    float d = 0.0;\n    float occ = 0.0;\n    for(int i = 0; i < AO_SAMPLES; i++){\n        d = map(ro + 0.1 * k * rd);\n        occ += 1.0 / pow(2.0, k) * (k * 0.1 - d);\n        k += 1.0;\n    }\n    return 1.0 - clamp(AO_STRENGTH * occ, 0.0, 1.0);\n}\n\nvec3 normal(vec3 p){\n    return vec3(map(vec3(p.x + EPSILON, p.yz)) - map(vec3(p.x - EPSILON, p.yz)),\n                map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\n                map(vec3(p.xy, p.z + EPSILON)) - map(vec3(p.xy, p.z - EPSILON)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 ro = camPos;\n    vec3 rd = normalize(vec3(uv, 1.0));\n    float d = trace(ro, rd);\n    vec3 col;\n    if (d == 0.0){\n        col = vec3(0.0);\n    }else{\n    \tvec3 sro = ro + (rd * d);\n    \tvec3 srd = normalize(lightPos - sro);\n    \tfloat s = shadow(sro, srd);\n    \n    \tvec3 l = srd;\n    \tvec3 n = normalize(normal(sro));\n    \tfloat nl = dot(n, l);\n    \n    \tvec3 amb = ka * ac * occlusion(sro, n);\n    \t\n        vec3 diff = kd * dc * max(nl, 0.0);\n    \n    \tfloat facing = nl > 0.0 ? 1.0 : 0.0;\n    \tvec3 h = 2.0 * nl * n - l;\n    \tvec3 spec = facing * ks * sc * pow(max(dot(n, h), 0.0), alpha);\n    \n    \tcol = amb + diff + spec;\n                                      \n    \tcol -= vec3(0.5 - 0.5 * s);\n    }\n\tfragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}