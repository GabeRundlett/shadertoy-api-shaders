{
    "Shader": {
        "info": {
            "date": "1560077019",
            "description": "Learning how reaction diffusion works, based on this really nice explanation: https://www.karlsims.com/rd.html",
            "flags": 32,
            "hasliked": 0,
            "id": "WlSGzy",
            "likes": 23,
            "name": "Learning Reaction Diffusion",
            "published": 3,
            "tags": [
                "reactiondiffusion"
            ],
            "usePreview": 0,
            "username": "TekF",
            "viewed": 930
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    fragColour = texelFetch(iChannel0,ivec2(fragCoord),0);\n    fragColour.b = fract( 1.0001-fragColour.x-fragColour.y );\n    \n    // map to firey colours\n    fragColour.rgb = mix( mix( vec3(0), vec3(1,0,0), 1.-fragColour.r ), vec3(1,1,0), fragColour.g );\n    \n    fragColour.rgb = pow( fragColour.rgb, vec3(1./2.2) );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    ivec2 res = ivec2(iResolution.xy);\n    \n    #define Wrap(c) ((c+res)%res)\n    \n    fragColour = texelFetch(iChannel0,coord,0);\n    \n\t// reaction diffusion\n    // all of these params can vary with position/time/whatever to get nice effects\n    float laplaceSelf = -1.;\n    float laplaceAdjacent = .2;\n    float laplaceDiagonal = .05;\n    float deltaT = 1.; // could use frame duration but I'm pretty sure the maths isn't really linear\n    vec2 diffusionRate = vec2(1,.5);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n\n    // fead & kill rates\n    vec2 feedKill = mix( vec2(0,.04), vec2(.1,.07), vec2(.23,.5) ); // terminating worms\n// some pretty looking alternatives:\n//    vec2 feedKill = vec2(.033,.063);// dividing bacteria (needs sharp shapes)\n//    vec2 feedKill = vec2(.023,.053) + uv.yx*vec2(0,.01); // spots! (variations by adjusting kill)\n//    vec2 feedKill = vec2(.031,.058); // fungal\n//    vec2 feedKill = vec2(.025,.055); // angle sprouts\n//    vec2 feedKill = mix( vec2(.02,.04), vec2(.0,.05), uv ); // weirdsmoke\n//    vec2 feedKill = mix( vec2(.03,.03), vec2(.0,.06), uv.yx ); // weirdsmoke\n//    vec2 feedKill = vec2(uv.x*uv.y,uv.y)*vec2(.02,.06); // smoke waves\n//    vec2 feedKill = vec2(.4*.6,.6)*vec2(.02,.06); // smooth arcs\n//    vec2 feedKill = vec2(.8*.6,.6)*vec2(.02,.06); // more spirally\n//    vec2 feedKill = vec2(.6,.65)*vec2(.02,.06); // cycling spirals\n//    vec2 feedKill = vec2(.75,.8)*vec2(.02,.06); // spiral puffs\n//    vec2 feedKill = vec2(.02,.055); // plankton\n//    vec2 feedKill = mix( vec2(0,.04), vec2(.1,.07), vec2(.21,.37) );// constant growth, different features\n//    vec2 feedKill = mix( vec2(0,.04), vec2(.1,.07), vec2(.2,.33) ); // very active\n//    vec2 feedKill = mix( vec2(0,.04), vec2(.1,.07), uv ); // map\n    \n    vec2 AB = fragColour.xy;\n\n    // sample neighbouring pixels and apply weights to them\n    ivec3 d = ivec3(-1,0,1);\n    vec2 laplace = laplaceSelf * AB;\n    laplace += \n        (\n            texelFetch(iChannel0,Wrap(coord+d.xy),0).xy +\n            texelFetch(iChannel0,Wrap(coord+d.zy),0).xy +\n            texelFetch(iChannel0,Wrap(coord+d.yx),0).xy +\n            texelFetch(iChannel0,Wrap(coord+d.yz),0).xy\n        )*laplaceAdjacent;\n    laplace += \n        (\n            texelFetch(iChannel0,Wrap(coord+d.xx),0).xy +\n            texelFetch(iChannel0,Wrap(coord+d.xz),0).xy +\n            texelFetch(iChannel0,Wrap(coord+d.zx),0).xy +\n            texelFetch(iChannel0,Wrap(coord+d.zz),0).xy\n        )*laplaceDiagonal;\n    \n    vec2 deltaAB = diffusionRate*laplace;\n    deltaAB += vec2(-1,1)*AB.x*AB.y*AB.y;\n    deltaAB.x += feedKill.x*(1.-AB.x);\n    deltaAB.y -= (feedKill.y+feedKill.x)*AB.y;\n    \n    AB += deltaT * deltaAB;\n    \n    AB = clamp(AB,0.,1.);\n    \n    fragColour.xy = AB;\n    \n    if ( iFrame == 0 )\n    {\n    \tfragColour = vec4(1,0,0,1);\n        fragColour.y = smoothstep(4.,3.,min(min(length(fragCoord-iResolution.xy*.5),length(fragCoord-iResolution.xy*vec2(.6,.3))),length(fragCoord-iResolution.xy*.45) ));\n        fragColour.x = 1.-fragColour.y;\n    }\n    \n    // let mouse add more\n    if ( iMouse.z > 0. )\n    {\n        fragColour.xy = mix( fragColour.xy, vec2(0,1), smoothstep(4.,3.,length(iMouse.xy-fragCoord.xy)) );\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}