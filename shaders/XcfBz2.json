{
    "Shader": {
        "info": {
            "date": "1724007065",
            "description": "Mandelbrot / Julia hybrid where the Julias are Siegel disks coming from the main cardioid's edge.",
            "flags": 0,
            "hasliked": 0,
            "id": "XcfBz2",
            "likes": 3,
            "name": "Mulia on Edge",
            "published": 3,
            "tags": [
                "julia",
                "mandelbrot",
                "hybrid",
                "evoke25"
            ],
            "usePreview": 0,
            "username": "Refurio",
            "viewed": 91
        },
        "renderpass": [
            {
                "code": "const float pi = 3.1415926536;\n\n// center coordinates\nfloat x0 = 0.;\nfloat y0 = 0.;\n\nfloat r = 1.2; // radius\nfloat a = 0.; // angle\nint N = 1000; // iteration depth\n\n// color depends on iteration depth N:\nfloat rf = 100.;\nfloat gf = 200.;\nfloat bf = 300.;\n\nfloat sqr(float x) {\n  return x*x;\n}\nbool btwn(float x, float a, float b) {\n  return (x > a) && (x < b);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float w2 = iResolution.x / 2.;\n  float h2 = iResolution.y / 2.;\n  float m = h2 < w2 ? h2 : w2;\n\n  // make complex radius from r and a:\n  float rr = r * cos(-a*pi/180.) / m;\n  float ri = r * sin(-a*pi/180.) / m;\n\n  int i;\n  float fcx = fragCoord.x - w2;\n  float fcy = fragCoord.y - h2;\n  float cr  = fcx*rr - fcy*ri + x0;\n  float ci  = fcx*ri + fcy*rr + y0;\n\n  // point on cardioid: (1-(e^(it)-1))/4\n  float da = iTime/30.;\n  float dx = cos(da);\n  float dy = sin(da);\n  float dr = (1.-(sqr(dx-1.)-sqr(dy)))/4.;\n  float di = -((2.*(dx-1.)*dy))/4.;\n\n  if(btwn(sqr(dr-cr)+sqr(di-ci), 0.0005, 0.001)) {\n    fragColor = vec4(1., 1., 1., 0.);\n    return;\n  }\n\n  float zr = 0.;\n  float zi = 0.;\n  for(i = 0; i < N; ++i) {\n    float t;\n    if(i<8) {\n      t = zr*zr - zi*zi + cr;\n      zi = 2.*zr*zi + ci;\n    }\n    else {\n      t = zr*zr - zi*zi + dr;\n      zi = 2.*zr*zi + di;\n    }\n    zr = t;\n    if(zi*zi + zr*zr > 4.) {\n      float d = float(i)/float(N);\n      fragColor = vec4(sin(rf*d), sin(gf*d), sin(bf*d), 0.);\n      return;\n    }\n  }\n  fragColor = vec4(0., 0., 0., 0.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}