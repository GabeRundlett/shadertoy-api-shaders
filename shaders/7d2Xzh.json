{
    "Shader": {
        "info": {
            "date": "1619697729",
            "description": "Blueprint, but in Green",
            "flags": 0,
            "hasliked": 0,
            "id": "7d2Xzh",
            "likes": 5,
            "name": "大龙猫 - Satellite Blueprint",
            "published": 3,
            "tags": [
                "green",
                "holo",
                "satellite"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "#define fGlobalTime iTime\nfloat box(vec3 p,vec3 b){\n  vec3 q=abs(p)-b;\n  return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));\n}\nmat2 rot(float a){\n     float c=cos(a),s=sin(a);return mat2(c,-s,s,c);\n}\nvec2 obj(vec3 p){\n p.z = -abs(p.z)+0.001;\n  vec2 h = vec2(1.);\n  h.x = box(p,vec3(.3,.5,.02));\n  h.x = min(h.x,box(p+vec3(.0,.5,.0),vec3(.05,.45,.01)));\n  \n  vec3 pp=p;\n\n  pp.xy =abs(pp.xy)-vec2(.15,.25);\n  pp.xy*=2.;\n  pp.xy =abs(pp.xy)-vec2(.15,.25);\n  pp.z+=.03;\n   \n  float d = box(pp,vec3(.14,.24,.03));\n  h.x = max(h.x,-d);\n  return h;\n  }\n  \n float sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n  float acc= 0.;\nvec2 sdf(vec3 p){\n \n  p.xz*=rot(.5+fGlobalTime);\n  p.xy*=rot(.5+fGlobalTime*.2);\n  float tt = texture(iChannel0,(asin(p.xy*5.)*cos(p.yz*2.))*.1+vec2(.1,0.)).g;\n  tt = floor(tt*100.)/100.;\n  float q = sdCappedCylinder(p.xzy,.30+tt*.017,.75+tt*.25)*.8;\n  \n  p.y = abs(p.y) - 1.;\n  vec2 h = obj(p);\n  h.x = min(h.x,q);\n  return h;\n}\nvec2 nv=vec2(-.001,.001);\n#define q(s) s*sdf(p+s).x\nvec3 norm(vec3 p){return normalize(q(nv.xyy)+q(nv.yyx)+q(nv.yxy)+q(nv.xxx));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    \n\tvec3 col = vec3(.1);\n  \n  vec2 zuv = fract(uv*50.);\n \n  if( abs(zuv.x) >= .990 || abs(zuv.y)  >= .990){\n      col = (exp(10.*-fract(fGlobalTime-length(uv))*abs(zuv.x-.5))+exp(5.*-abs(zuv.y-.5)))*vec3(.1,.9,.1);\n  }\n  vec3 ro=vec3(0.,0.,-3.),rd=normalize(vec3(uv,1.)),rp=ro;\n  vec3 lid=vec3(1.,2.,-3.),lic=vec3(.9,.0,.1);\n  \n  \n  for(float i=0.;i<=69.;i++){\n      vec2 d= sdf(rp);\n      acc += exp(5.*-d.x)/(69.+rp.y*10.);\n    d.x = max(0.0005+tan(uv.y*1000.)+sin(fGlobalTime+rp.y+rp.x*.5),d.x);\n      if(d.x<=0.001){\n        vec3 n = norm(rp);\n        //rd = reflect(rd,n);\n        \n        col=lic*max(0.,dot(normalize(lid),n))*sqrt(acc/length(ro-rp));\n        \n      }\n      \n      rp += rd*d.x;\n  }\n\n  col +=acc*.7*vec3(.1,1.,.1);\n\n  \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}