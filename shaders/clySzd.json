{
    "Shader": {
        "info": {
            "date": "1686288571",
            "description": "i'm seeing colors that dont exist",
            "flags": 0,
            "hasliked": 0,
            "id": "clySzd",
            "likes": 4,
            "name": "neon-psychedelic-2",
            "published": 3,
            "tags": [
                "psychedelic"
            ],
            "usePreview": 0,
            "username": "LydianLights",
            "viewed": 216
        },
        "renderpass": [
            {
                "code": "vec3 mainPass(in vec2 fragCoord)\n{\n    vec2 uv = 2.0 * (fragCoord / iResolution.xy) - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 uv0 = uv;\n    \n    uv -= 0.5;\n    float d0 = length(uv0);\n    vec3 color = vec3(0.0);\n    \n    for (float i = 0.0; i < 5.0; i++)\n    {\n        uv = fract(vec2(1.0 + 0.18 * i) * uv) - 0.5;\n        vec3 polar = vec3(log(length(uv)), atan(uv.y / uv.x), atan(uv.x / uv.y));\n        \n        float p = mix(0.7, 1.5, d0 * d0);\n        float q = mix(0.02, 0.07, clamp(d0, 0.0, 1.0));\n\n        vec2 d = vec2(length(polar.xy), length(polar.xz));\n        d *= pow(0.03, d0 * 0.4);\n        d = sin(5.0 * d + 0.2 * vec2(5.0 * iTime, 3.0 * iTime));\n        d = abs(d);\n        d = pow(q / d, vec2(p));\n\n        float d0 = d.x + d.y;\n\n        vec3 c = palette(length(uv) + i + (0.1 + 0.2 * i) * iTime) * d0;\n        \n        color += c;\n    }\n    \n    return color;\n}\n\nvec3 antialias(in vec2 fragCoord)\n{\n    const float AA_STAGES = 2.0;\n    \n    const float AA_TOTAL_PASSES = AA_STAGES * AA_STAGES + 1.0;\n    const float AA_JITTER = 0.5;\n    \n    vec3 color = mainPass(fragCoord);\n    for (float x = 0.0; x < AA_STAGES; x++)\n    {\n        for (float y = 0.0; y < AA_STAGES; y++)\n        {\n            vec2 offset = AA_JITTER * (2.0 * hash22(vec2(x, y)) - 1.0);\n            color += mainPass(fragCoord + offset);\n        }\n    }\n    return color / AA_TOTAL_PASSES;\n}\n\nvec3 gamma(in vec3 color)\n{\n    return pow(color, vec3(1.0 / 2.2));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 color = antialias(fragCoord);\n    color = gamma(color);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://iquilezles.org/articles/palettes/\nvec3 palette(in float t)\n{\n    vec3 a = vec3(0.7, 0.1, 0.5);\n    vec3 b = vec3(0.6, 0.7, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.0, 0.2, 0.4);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n// https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}