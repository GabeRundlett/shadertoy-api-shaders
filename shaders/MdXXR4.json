{
    "Shader": {
        "info": {
            "date": "1397316498",
            "description": "My first Julia set, added AA now",
            "flags": 0,
            "hasliked": 0,
            "id": "MdXXR4",
            "likes": 21,
            "name": "JuliaRyu",
            "published": 3,
            "tags": [
                "fractal",
                "orbittrap",
                "aa"
            ],
            "usePreview": 0,
            "username": "EvilRyu",
            "viewed": 1398
        },
        "renderpass": [
            {
                "code": "// Created by evilryu - evilryu/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// Learned from iq\n\nfloat ctime, stime;\n\nvec3 render(vec2 p)\n{\n    vec2 cc=p*0.18; \n    vec2 z=cc;\n    vec2 dz=vec2(1.0, 0.0); \n    float t0, t1,t2=0.0; \n    t0=t1=1e20; \n    float counter=0.; \n\t\n\t// the main iteration for julia set\n    for(int i=0;i<256;i++){ \n        if(dot(z,z)>256.0)continue; \n        dz=2.0*vec2(z.x*dz.x - z.y*dz.y, z.x*dz.y + z.y*dz.x);\n        z=vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + vec2(-0.74543+0.001*stime, 0.11301+0.001*ctime); \n        t0=min(t0, dot(dz,dz));\n        t1=min(t1, dot(z-vec2(0.5,1.0),z-vec2(0.5,1.0))); \n        float d1=abs(z.y-sin(z.x*ctime))/abs(cos(z.x)); \n        float ff=step(d1,1.0); \n        counter+=ff; \n        t2+=ff*d1; \n    } \n    float d=sqrt(dot(z,z)/dot(dz,dz))*log(dot(z,z)); \n\n    //  coloring part\n    float c=pow(clamp(d*50.0, 0.0, 1.0), 0.13); \n    float c0=pow(clamp(t0, 0.0, 1.0), 1.5); \n    float c1=pow(clamp(t1, 0.0, 1.0), 0.55); \n    float c2=pow(clamp(t2/counter, 0.0, 1.0), 0.9); \n\n    vec3 col0=0.5+0.5*sin(1.0+3.7*c+vec3(0.0,0.5,1.0)); \n    vec3 col1=0.5+0.5*sin(3.2+4.*c0+vec3(0.0,0.5,1.0)); \n    vec3 col2=0.5+0.5*sin(4.0+3.*c1+vec3(0.0,0.5,1.0)); \n    vec3 col3=0.5+0.5*sin(3.0+3.8*c2+vec3(0.0,0.5,1.0)); \n    vec3 col=sqrt(col1*col2*c*col3)*4.0; \n    \n    return col;\n}\n\nvec2 getsubpixel(int id,vec2 fragCoord)\n{\n\tvec2 aa=vec2(floor((float(id)+0.1)*0.5),mod(float(id),2.0));\n\treturn vec2((2.0*fragCoord.xy+aa-iResolution.xy)/iResolution.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{ \n    vec2 q=fragCoord.xy/iResolution.xy; \n    stime = sin(iTime*0.2);\n\tctime = cos(iTime*0.2);\n     \n   \tvec3 col = vec3(0.0);\n    for(int i=0;i<4;++i)\n    {\n        vec2 p = getsubpixel(i,fragCoord);\n        p*=exp(sin(iTime*0.2)*0.1);\n        col += render(p);\n    }\n    col/=4.0;\n\n    col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n    col*=0.5+0.5*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.25);  // vigneting\n    fragColor=vec4(col.x,col.y,col.z,1.0); \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}