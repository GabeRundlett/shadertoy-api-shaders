{
    "Shader": {
        "info": {
            "date": "1505483857",
            "description": "level lines, constant thickness, fwidth & antialiasing (thx to FabriceNeyret)",
            "flags": 0,
            "hasliked": 0,
            "id": "Mlfyz2",
            "likes": 19,
            "name": "Contour lines (Level lines 2)",
            "published": 3,
            "tags": [
                "noise",
                "lines"
            ],
            "usePreview": 0,
            "username": "jniac",
            "viewed": 1650
        },
        "renderpass": [
            {
                "code": "precision highp float;\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* 3d simplex noise */\nfloat simplex3(vec3 p) {\n\t/* 1. find current tetrahedron T and it's four vertices */\n\t/* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t/* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t\n\t/* calculate s and x */\n\tvec3 s = floor(p + dot(p, vec3(F3)));\n\tvec3 x = p - s + dot(s, vec3(G3));\n\t\n\t/* calculate i1 and i2 */\n\tvec3 e = step(vec3(0.0), x - x.yzx);\n\tvec3 i1 = e*(1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t\t\n\t/* x1, x2, x3 */\n\tvec3 x1 = x - i1 + G3;\n\tvec3 x2 = x - i2 + 2.0*G3;\n\tvec3 x3 = x - 1.0 + 3.0*G3;\n\t\n\t/* 2. find four surflets and store them in d */\n\tvec4 w, d;\n\t\n\t/* calculate surflet weights */\n\tw.x = dot(x, x);\n\tw.y = dot(x1, x1);\n\tw.z = dot(x2, x2);\n\tw.w = dot(x3, x3);\n\t\n\t/* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\tw = max(0.6 - w, 0.0);\n\t\n\t/* calculate surflet components */\n\td.x = dot(random3(s), x);\n\td.y = dot(random3(s + i1), x1);\n\td.z = dot(random3(s + i2), x2);\n\td.w = dot(random3(s + 1.0), x3);\n\t\n\t/* multiply d by w^4 */\n\tw *= w;\n\tw *= w;\n\td *= w;\n\t\n\t/* 3. return the sum of the four surflets */\n\treturn dot(d, vec4(52.0));\n}\n\nfloat map(float nMin, float nMax, float n) {\n\treturn (n - nMin) / (nMax - nMin);\n}\nfloat gain(float x, float p) {\n\treturn x < .5 ? \n\t\t.5 * pow(2. * x, p) : \n\t\t1. - .5 * pow(2. * (1. - x), p);\n}\n\nfloat thickness = 2.;\nfloat scale = 1.5;\nfloat t = 0.;\n\nvoid mainImage_OLD( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv00 = fragCoord.xy / iResolution.xy;\n    vec2 uv11 = uv00 + thickness / iResolution.xy;\n    vec2 uv10 = vec2(uv11.x, uv00.y);\n    vec2 uv01 = vec2(uv00.x, uv11.y);\n        \n    float n00 = simplex3(vec3(uv00 * scale, iTime * .02));\n    float n01 = simplex3(vec3(uv01 * scale, iTime * .02));\n    float n10 = simplex3(vec3(uv10 * scale, iTime * .02));\n    float n11 = simplex3(vec3(uv11 * scale, iTime * .02));\n    \n    n00 = map(-1., 1., n00);\n    n01 = map(-1., 1., n01);\n    n10 = map(-1., 1., n10);\n    n11 = map(-1., 1., n11);\n    \n    float f1 = 0.;\n    \n    //f1 = ((n00 < .5) != (n11 > .5)) && ((n01 < .5) != (n10 > .5)) ? 1. : 0.;\n    \n    for(float t = 0.; t < 1.; t += .05){\n\t    //f1 = max(f1, around(t, a));\n        f1 = max(f1, ((n00 < t) != (n11 > t)) && ((n01 < t) != (n10 > t)) ? 0. : 1.);\n    }\n    \n\tfragColor = vec4(vec3(f1), 1.0);\n    \n    //fragColor = min(fragColor, vec4(uv,1.,1.0));\n}\nvoid mainImage( out vec4 O, vec2 U )\n{\n    \n\tU /= iResolution.xy;\n    float n = simplex3( vec3( U * scale, iTime * .02)) * 35.;\n\n    O = vec4 ( smoothstep( 1.5, 0., abs(fract(n+.5)-.5) / fwidth(n) ) ); \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}