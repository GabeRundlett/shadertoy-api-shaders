{
    "Shader": {
        "info": {
            "date": "1671175803",
            "description": "a new 2d raymarcher",
            "flags": 0,
            "hasliked": 0,
            "id": "mtXGzr",
            "likes": 9,
            "name": "Material Raymarching 2d",
            "published": 3,
            "tags": [
                "raymarching",
                "ray",
                "line",
                "circle",
                "normal",
                "material",
                "rect"
            ],
            "usePreview": 0,
            "username": "SONENEIS",
            "viewed": 303
        },
        "renderpass": [
            {
                "code": "//#define glow\n\nmat2 rot(float a){return mat2(cos(a),-sin(a),sin(a),cos(a));}\n\nfloat sdCirc(vec2 p,float r){\n\treturn length(p) - r;\n}\nfloat sdRect(vec2 p,vec2 s){\n\tvec2 q = abs(p)-s;\n\treturn length(max(q,0.0)) + min(max(q.x,q.y),0.0);\n}\nfloat sdLine(vec2 p,float r,vec2 p1,vec2 p2){\n\tvec2 d1 = p - p1;\n\tvec2 d2 = p2 - p1;\n\tfloat h = clamp(dot(d1,d2) / dot(d2,d2),0.0,1.0);\n  return length(d1 - d2*h) - r;\n}\n\nvec4 fUn(vec4 a,vec4 b){\n  if(a.w < b.w) return a;\n  else return b;\n}\n\nvec4 map(vec2 p){\n\tvec4 d = vec4(vec3(0),9999999999999.0);\n    \n\td = fUn(d,vec4(vec3(1,0,0.5),sdCirc(p - vec2(-0.2,0.4),0.1)));\n\td = fUn(d,vec4(vec3(1,0.1,0),sdCirc(p - vec2(0.3,0.1),0.1)));\n\n\td = fUn(d,vec4(vec3(0,0.5,1),sdLine(p,0.01,vec2(-0.2,0.4),vec2(0.3,0.1))));\n\n  {\n  vec2 q = (p - vec2(-0.15,0.0)) * rot(iTime);\n  d = fUn(d,vec4(vec3(0,1,0.1),sdRect(q,vec2(0.1))));\n  }\n\n\treturn d;\n}\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord){\n  vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec2 mm = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n  vec3 col = vec3(0.0);\n  \n  uv *= 0.5; uv.y += 0.125;\n  mm *= 0.5; mm.y += 0.125;\n  \n  vec4 d = map(uv);\n  #ifdef glow\n    col += d.rgb * smoothstep(4.0/iResolution.y,0.0,d.w) * 0.75;\n    col += abs(sin(100.0*d.w))*0.05;\n    col = mix(col,vec3(1),smoothstep(10.0/iResolution.y,0.0,abs(d.w)));\n    col *= clamp(abs(-d.w*10.0)*0.75+0.5,0.0,1.0);\n    col += d.rgb * abs(exp(-d.w*10.0));\n  #else\n    col += 0.1;\n    col += d.rgb * smoothstep(4.0/iResolution.y,0.0,d.w) * 0.75;\n    col += abs(sin(100.0*d.w))*0.05;\n    col *= clamp(abs(-d.w*10.0)*0.75+0.5,0.0,1.0);\n    col = mix(col,vec3(1),smoothstep(4.0/iResolution.y,0.0,abs(d.w)));\n  #endif\n\n  { //raymarching\n  \tvec2 ro = vec2(mm);\n  \tvec2 rd = normalize(vec2(1)*rot(iTime));\n\n  \tconst float num_steps = 25.0;\n  \tconst float max_dist = 100.0;\n  \tconst float min_dist = 0.001;\n\n  \tvec2 p = ro;\n  \tfor(float i=0.0;i<num_steps;i++){\n  \t\tfloat h = abs(map(p).w);\n  \t\tif(h < min_dist || h > max_dist) break;\n\n      col += 0.1 * smoothstep(4.0/iResolution.y,0.0,length(uv - p) - h);\n      col += 0.1 * smoothstep(4.0/iResolution.y,0.0,abs(length(uv - p) - h));\n      col += 0.2 * smoothstep(4.0/iResolution.y,0.0,length(uv - p) - 0.015);\n\n      vec2 e = vec2(-1,1) * min_dist;\n      vec2 normal = normalize(vec2(\n      \te.xx * map(p + e.xx).w +\n      \te.xy * map(p + e.xy).w +\n      \te.yx * map(p + e.yx).w +\n      \te.yy * map(p + e.yy).w\n      ));\n      vec2 n = p - normal*h;\n\n      col += 0.5 * smoothstep(4.0/iResolution.y,0.0,sdLine(uv,0.0025,p,n));\n\n  \t  p += rd * h;\n    }\n\n     vec2 e = vec2(-1,1) * min_dist;\n     vec2 normal = normalize(vec2(\n    \te.xx * map(p + e.xx).w +\n    \te.xy * map(p + e.xy).w +\n    \te.yx * map(p + e.yx).w +\n    \te.yy * map(p + e.yy).w\n    ));\n    vec2 n = p + normal*0.1;\n\n    col += 0.5 * smoothstep(4.0/iResolution.y,0.0,sdLine(uv,0.001,ro,p));\n    col += vec3(0.5,0.0,0.5) * smoothstep(4.0/iResolution.y,0.0,sdLine(uv,0.005,p,n));\n  }\n\n  fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}