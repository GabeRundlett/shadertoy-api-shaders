{
    "Shader": {
        "info": {
            "date": "1694219383",
            "description": "A simple planet.\n\nWait a few minutes for the clouds to appear.",
            "flags": 32,
            "hasliked": 0,
            "id": "dtjfWm",
            "likes": 10,
            "name": "planet 0000",
            "published": 3,
            "tags": [
                "space",
                "planet"
            ],
            "usePreview": 0,
            "username": "ArolaunTech",
            "viewed": 193
        },
        "renderpass": [
            {
                "code": "/*=======Constants=======*/\n\n//Lighting constants\nconst float ambient = 0.1; //Ambient light.\nconst float sundot = 0.999; //Controls sun size. Smaller = Larger sun.\n\nconst vec3 suncolor = vec3(1.0, 1.0, 1.0);\n\n//Atmospheric constants\nconst float scatterOutStrength = 200.0; //Out-scattering strength\nconst float scatterInStrength = 60.0; //In-scattering strength\nconst float mieScatterStrength = 100.0; //Mie scattering strength\n\nconst float cloudDensity = 1000.0;\n\nconst float cloudLowAlt = 0.005;\nconst float cloudHighAlt = 0.025;\n\nconst float cloudAvgAlt = (cloudLowAlt + cloudHighAlt)/2.0;\nconst float cloudReciprocalDiff = 1.0/(cloudHighAlt-cloudLowAlt);\n\nconst vec3 atmcol = vec3(0.11, 0.41, 1.0); //Blue color of atmo (DO NOT CHANGE)\nconst vec3 rcol = exp(-0.15*atmcol);\n\nconst float atmoradius = 1.1;\n\n//Render constants\nconst vec3 center = vec3(-0.0, 0.0, 2.5);\n\n/*\n * ================================\n *            Sun Sizes\n * ================================\n *\n * 0.866 gives a 60 degree wide sun\n * 0.906 gives a 50 degree wide sun\n * 0.940 gives a 40 degree wide sun\n * 0.966 gives a 30 degree wide sun\n * 0.985 gives a 20 degree wide sun\n * 0.991 gives a 15 degree wide sun\n * 0.996 gives a 10 degree wide sun\n * 0.999 gives a  5 degree wide sun\n * 0.9994 gives a 4 degree wide sun\n * 0.9997 gives a 3 degree wide sun\n * 0.9998 gives a 2 degree wide sun\n * 0.99996 gives a 1 degree wide sun\n * 0.99999 gives a realistic 0.5 degree wide sun\n *\n */\n\nfloat press(vec3 p) {\n    float alt = sqrt(dot(p,p))-1.0;\n    return exp(-50.0*alt);\n}\n\nfloat magnitude(vec3 p) {\n    return sqrt(dot(p,p));\n}\n\nfloat opticalDepth(vec3 p, vec3 dir, float radius) {\n    float ltca = dot(dir, -p);\n    float ld = sqrt(dot(p,p)-ltca*ltca);\n    float lthc = sqrt(radius*radius-ld*ld);\n    \n    float ldepth = ltca + lthc;\n    \n    float samples = 5.0;\n    float ret = 0.0;\n    \n    for (float i = 0.0; i < 1.001; i += 1.0/samples) {\n        vec3 pos = p + dir*ldepth*i;\n        ret += press(pos)*ldepth/samples;\n    }\n    return ret;\n}\n\nfloat rayleighPhase(float c) {\n    return 1.0 + c*c;\n}\n\nfloat miePhase(float c) {\n    float g = 0.75;\n    return pow(1.0-g,3.0)*(1.0+c*c)/(2.0*(1.0+g*g-2.0*g*c));\n}\n\nfloat cloudPhase(float c) {\n    return 0.2+0.8*sqrt(1.0-c*c);\n}\n\nfloat cloudFunc(vec3 pos) {\n    vec3 np = pos-center;\n    np += 0.01*simplex3d(100.0*pos+iTime);\n    np = normalize(np);\n    float alt = magnitude(pos-center)-1.0;\n    float altMult = exp(-10.0*cloudReciprocalDiff*cloudReciprocalDiff*pow(alt-cloudAvgAlt,2.0));\n    \n    float density = texture(iChannel3, vec2(0.5+atan(np.x,np.z)/(2.0*pi),0.5+atan(np.y)/pi)).x;\n\n    return altMult*(min(density,0.8)-0.5);\n}\n\nfloat apos(float a, float b) {\n    if (a == b) {\n        return a;\n    }\n    \n    float dnm = a/(a-b);\n    float d = min(1.0, max(dnm, 0.0));\n    if (a > 0.0 && b > 0.0) {\n        return b * (1.0-dnm) * (1.0 - pow(a/b, 2.0))/2.0;\n    }\n    return (max(b, 0.0) * (1.0 - d) + max(a, 0.0) * d)/2.0;\n}\n\nfloat simpson(float s, float m, float e) {\n    return s + 4.0*m + e;\n}\n\n//float occludedPart(vec3 dir, vec3 pos, float sdot) {\n//    int samples = 20;\n//    float add = 1.0/float(samples);\n//    float ret = 0.0;\n//    for (int i = 0; i < samples; i++) {\n//        vec3 rdir = normalize(dir+sqrt(1.0-sdot*sdot)*random3(vec3(dir.x, i, iTime)));\n//        float ctca = dot(rdir, -pos);\n//        float cd = sqrt(dot(pos,pos)-ctca*ctca);\n//        if (cd > 0.95 || ctca < 0.0) {\n//            float amult = min(1.0,10.0*(cd-0.95));\n//            \n//            if (ctca < 0.0) {\n//                amult = 1.0;\n//            }\n//            \n//            ret += add*amult;\n//        }\n//    }\n//    return ret;\n//}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Constants\n    \n    float radius = 1.0;\n    \n    //vec3 lightdir = normalize(vec3(sin(iTime/5.0),0.0,-cos(iTime/5.0)));\n    vec3 lightdir = normalize(vec3(0.01,0.0,-0.01));\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    float m = min(iResolution.x, iResolution.y);\n    \n    vec2 uv = fragCoord/m;\n    vec2 xy = 2.0*uv-vec2(iResolution.x/m, iResolution.y/m);\n\n    // Direction\n    float vFOV = 60.0;\n    vFOV /= 2.0;\n    \n    vec3 D = normalize(vec3(tan(vFOV*3.14159/180.0)*xy,1.0));\n    \n    //Sphere\n    float tca = dot(center, D);\n    float d = sqrt(dot(center, center)-tca*tca);\n    float thc = sqrt(radius*radius-d*d);\n    vec3 norm = normalize((D*(tca-thc))-center);\n    \n    float cloudRegionStartD = 0.0;\n    float cloudRegionEndD = 0.0;\n    \n    float lowRegionStartD = 0.0;\n    float lowRegionEndD = 0.0;\n    \n    float hcthc = 0.0;\n\n    if (d < 1.0 + cloudHighAlt) {\n        hcthc = sqrt(pow(radius+cloudHighAlt,2.0)-d*d);\n        cloudRegionStartD = max(tca - hcthc, 0.0);\n        cloudRegionEndD = tca + hcthc;\n        \n        if (d < 1.0 + cloudLowAlt) {\n            hcthc = sqrt(pow(radius+cloudLowAlt,2.0)-d*d);\n            lowRegionStartD = max(tca - hcthc, 0.0);\n            lowRegionEndD = tca + hcthc;\n        }\n    }\n    \n    vec3 coord = norm;\n    float thccopy = thc;\n    \n    coord *= mat3(\n        cos(iTime/5.0), 0.0, sin(iTime/5.0),\n        0.0, 1.0, 0.0,\n        sin(-iTime/5.0), 0.0, cos(iTime/5.0)\n    );\n    \n    //Background\n    vec3 col = vec3(0.0);\n    float dotp = dot(D, lightdir);\n    if (dotp > sundot) {\n        col = vec3(pow(2.0*(dotp-sundot)/(1.0-sundot),6.0));\n    }\n    \n    //Lighting\n    if (d < radius && tca >= 0.0) {\n        float specnoise = 1.0+0.07*simplex3d(40.0*coord+iTime);\n        norm *= specnoise*0.05+0.95;\n        \n        float spherenoise = simplexfract(coord);\n        vec3 spherecolor = vec3(0.0,0.05/max(abs(spherenoise)*2.0,0.1),specnoise);\n        vec3 specular = vec3(pow(max(dot(norm, normalize(lightdir - D)),0.0), 100.0));\n        if (spherenoise > 0.0) {\n            spherecolor = vec3(0.0, 0.7*(0.5*simplex3d(coord*3.0)+1.0-0.6*abs(coord.y/radius)), 0.4);\n            if (spherenoise < 0.05) {\n                spherecolor = 20.0*((spherenoise)*spherecolor+(0.05-spherenoise)*vec3(1.0,1.0,0.5));\n            }\n            if (spherenoise > 0.5) {\n                spherecolor = vec3(0.5);\n            }\n            if (spherenoise > 0.6+0.07*simplex3d(coord*30.0+0.4)) {\n                spherecolor = vec3(1.0);\n            }\n            if (dot(lightdir, norm) > -sqrt(radius*radius-spherenoise*spherenoise)) {\n                vec3 dirY = vec3(0.0, 0.006, 0.0);\n                vec3 dirZ = 0.006*norm;\n                vec3 dirX = 0.006*normalize(cross(dirY, dirZ));\n                dirY = 0.006*normalize(cross(dirZ,dirX));\n            \n                float normX = simplexfract(coord+dirX)-simplexfract(coord-dirX);\n                float normY = simplexfract(coord+dirY)-simplexfract(coord-dirY);\n                float normZ = simplexfract(coord+dirZ)-simplexfract(coord-dirZ);\n                norm = 0.7*norm+0.2*normalize(dirX*normX + dirY*normY + dirZ*normZ);\n                norm = normalize(norm);\n            }\n            \n            specular = vec3(0.0);\n        }\n        vec3 diffuse = vec3(max(dot(lightdir, norm),ambient))*spherecolor;\n\n        col = diffuse*1.0+0.5*specular;\n    }\n    \n    if (d <= atmoradius) {\n        //Calc atmo\n        thc = sqrt(atmoradius*atmoradius-d*d);\n        vec3 sp = D*(tca-thc);\n        if (thc > tca) {\n            sp = vec3(0.0);\n        }\n        float depth = magnitude(D*(tca+thc) - sp);\n        if (d < radius && tca > 0.0) {\n            depth = magnitude(D*(tca-thccopy)-sp);\n        }\n        \n        //float samples = 5.0; //Low quality\n        float samples = 10.0; //Medium atmospheric quality\n        //float samples = 20.0; //High quality\n        \n        float cloudSamples = 15.0;\n        float subSamples = 1.0;\n        \n        float totalCloudDepth = cloudRegionEndD - cloudRegionStartD;\n        \n        float dtrue = d;\n        \n        if (tca < 0.0) {\n            dtrue = sqrt(dot(center, center));\n        }\n        \n        if (dtrue < 1.0 + cloudLowAlt) {\n            totalCloudDepth -= lowRegionEndD - lowRegionStartD;\n            totalCloudDepth /= 2.0;\n        }\n        \n        float cloudRegionAddm = totalCloudDepth*samples/(cloudSamples*depth);\n        \n        float addm = 1.0;\n        \n        for (float i = 0.0001; i < 1.0; i += 0.0) {\n        \n            vec3 pos = sp + D*depth*i*0.9998;\n            float dense = press(pos-center);\n            \n            float ltca = dot(lightdir, center-pos);\n            float ld = sqrt(dot(center-pos,center-pos)-ltca*ltca);\n            float lthc = sqrt(atmoradius*atmoradius-ld*ld);\n            \n            float pmss = 0.0;\n            float alt = magnitude(pos-center)-1.0;\n            \n            //Cloud generation\n            \n            float cloudf = cloudFunc(pos);            \n            //col = 0.9*col+0.1*vec3(protoMult/ceil(protoMult));\n            if (alt > cloudHighAlt) {\n                addm = 1.0;\n            }\n            \n            if (alt <= cloudLowAlt && tca < 0.0) {\n                addm = (lowRegionEndD - lowRegionStartD)*samples/(subSamples*depth);\n            }\n            \n            float cctca = 0.0;\n            hcthc = 0.0;\n            if (alt <= cloudHighAlt && alt > cloudLowAlt) {\n                cctca = dot(center-pos, lightdir);\n                float ccd = sqrt(dot(center-pos, center-pos)-cctca*cctca);\n                hcthc = sqrt(pow(radius+cloudHighAlt,2.0)-ccd*ccd);\n            \n                addm = cloudRegionAddm;\n                float cf2 = cloudFunc(pos + D*depth*addm/samples);\n                float simp = (max(0.0,cloudf)+max(0.0,cf2));\n                pmss += mieScatterStrength*(cctca+hcthc)*cloudDensity*1.0*pow(simp,2.0);\n            }\n            \n            if (ld >= 0.99 || ltca <= 0.0) {\n                if (ltca < 0.0) {\n                    ld = sqrt(dot(center-pos,center-pos));\n                }\n                float lm = min(1.0, 100.0*(ld-0.99));\n                \n                float sinFactor = 2.0*sqrt(1.0-pow(dot(D,lightdir),2.0));\n                sinFactor += sqrt(0.5-0.5*dot(D,lightdir));\n                sinFactor /= 3.0;\n                \n                //if (D.y < 0.0) {\n                //    sinFactor = log(9.0-8.0*dot(D,lightdir))/log(17.0);\n                //}\n                \n                float od = opticalDepth(pos-center, lightdir, atmoradius);\n                vec3 outColor = pow(rcol, vec3(scatterOutStrength*od));\n                \n                col += scatterInStrength*min(lm,1.0)*sinFactor*outColor*rayleighPhase(dot(D,lightdir))*dense*atmcol*depth*addm/samples;\n                col += mieScatterStrength*outColor*min(lm,1.0)*dense*miePhase(dot(D,lightdir))*depth*addm/samples;\n                \n                col *= exp(-5000.0*(cctca+hcthc)*pmss*od*depth*addm/samples);\n                col += 7.0*pmss*outColor*min(lm,1.0)*cloudPhase(dot(D,lightdir))*depth*addm/(samples*max((cctca+hcthc),1.0));\n                \n         \n                //col += cctca+hcthc;\n                \n                //col *= exp(-50.0*pmss*od*depth*addm/samples);\n                //if (pmss > 0.0) {\n                //    col += vec3(0.1);\n                //}\n            }\n            col *= pow(rcol, vec3(depth*dense*scatterOutStrength*addm/samples));\n            i += addm/samples;\n        }\n        \n        //col = vec3(pmss);\n    }\n\n    // Output to screen\n    \n    //if (d < 1.0+cloudHighAlt) {\n    //    col = vec3(cloudRegionEndD);\n    //}\n    \n    //col = 10.0*(texture(iChannel3, fragCoord/iResolution.xy).xyz-0.5);\n    //col = texture(iChannel3, fragCoord/iResolution.xy).xyz;\n    \n    //col.x = 0.0;\n    //col.y = 0.0;\n    //col.z = 0.0;\n    \n    //col = norm;\n    \n    fragColor = vec4(pow(1.0-exp(-1.2*pow(col*suncolor,vec3(2.1))), vec3(0.5)),1.0); //Color filter for smoother colors\n    //fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Noise maker\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //float m = min(iResolution.x, iResolution.y);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= 2.0*pi;\n    uv.y -= 0.5;\n    uv.y *= pi;\n    \n    vec3 coord = vec3(cos(uv.y)*sin(uv.x),sin(uv.y),cos(uv.y)*cos(uv.x));\n    \n    //vec3 diff = windChangeSpeed*iTime*timeRate;\n    vec3 diff = vec3(cos(windChangeSpeed*iTime*timeRate), windChangeSpeed*iTime*timeRate*0.2, sin(windChangeSpeed*iTime*timeRate));\n    \n    fragColor = vec4(vec3(simplex3d(4.0*coord+diff)+0.0*simplex3d(16.0*coord+diff)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Curl noise maker\nfloat noisev(vec2 uv) {\n    return texture(iChannel0, uv).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 wx = uv;\n    \n    wx.y -= 0.5;\n    wx.y *= pi;\n    \n    float gradStep = 0.01;\n    \n    vec2 uvr = uv+vec2(gradStep,0.0);\n    vec2 uvl = uv-vec2(gradStep,0.0);\n    vec2 uvt = uv+vec2(0.0,gradStep);\n    vec2 uvb = uv-vec2(0.0,gradStep);\n    \n    uvr.x = mod(uvr.x, 1.0);\n    uvl.x = mod(uvl.x, 1.0);\n    uvt.x = mod(uvt.x, 1.0);\n    uvb.x = mod(uvb.x, 1.0);\n    \n    vec2 grad = vec2(noisev(uvr)-noisev(uvl),noisev(uvt)-noisev(uvb));\n    \n    fragColor = vec4(-grad.y/cos(wx.y),grad.x,noisev(uv),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Weather maker\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 wx = fragCoord/iResolution.xy;\n    \n    vec2 uv = wx;\n    \n    uv.x *= 2.0*pi;\n    uv.y -= 0.5;\n    uv.y *= pi;\n    \n    vec3 coord = vec3(cos(uv.y)*sin(uv.x),sin(uv.y),cos(uv.y)*cos(uv.x));\n    \n    float temp = sqrt(1.0-pow(2.0*uv.y/pi,2.0));\n    \n    vec4 cv = texture(iChannel0,wx);\n    \n    cv.y += 0.0005*(temp-cv.y);\n    float maxW = exp((cv.y-1.0)*3.0);\n    \n    vec2 adjustCoord = wx-cloudMoveSpeed*timeRate*texture(iChannel1,wx).xy;\n    adjustCoord.x = mod(adjustCoord.x, 0.999);\n    vec4 pt = texture(iChannel0, adjustCoord);\n    \n    //float pMult = 0.4*exp(-pow(1.0/3.0*sin(3.0*uv.y),2.0))+1.6;\n    float pMult = 2.0;\n    \n    if (iTime < 0.1) { //Page loading heartstart\n        pt = vec4(2.0*vec3(exp(-pow(1.0/3.0*sin(3.0*uv.y),2.0))),1.0);\n    }\n    \n    cv = (1.0-cloudMoveMult)*cv + pt*cloudMoveMult;\n    \n    float dcz = 0.01*(maxW-cv.z);\n    \n    cv.z += max(dcz,0.0);\n    \n    dcz = 0.0015*(maxW/pMult-cv.z);\n    \n    cv.z += dcz;\n    cv.x += -min(dcz,0.0);\n    cv.x *= 0.999;\n    fragColor = cv;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//Cloud generation consts\nconst float timeRate = 1.0;\n\nconst float cloudMoveSpeed = 0.01;\n\nconst float cloudMoveMult = 0.1;\n\nconst float cloudDiffuseRate = 0.99995;\nconst float cloudAdditionRate = 0.000055;\n\nconst float windChangeSpeed = 0.1;\n\n/* https://www.shadertoy.com/view/XsX3zB\n *\n * The MIT License\n * Copyright © 2013 Nikita Miropolskiy\n * \n * ( license has been changed from CCA-NC-SA 3.0 to MIT\n *\n *   but thanks for attributing your source code when deriving from this sample \n *   with a following link: https://www.shadertoy.com/view/XsX3zB )\n *\n * ~\n * ~ if you're looking for procedural noise implementation examples you might \n * ~ also want to look at the following shaders:\n * ~ \n * ~ Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n * ~\n * ~ Noise shaders by iq:\n * ~     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n * ~     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n * ~     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n * ~     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n * ~     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n * ~     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n * ~     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n * ~     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n * ~     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n * ~     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n * ~ \n *\n */\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\nfloat simplexfract(vec3 p) {\n    float persistence = 0.37;\n    float detail = 3.0;\n    int octaves = 4;\n    float sp = 1.0;\n    float sd = 1.5;\n    \n    float spherenoise = 0.0;\n    for (int i = 0; i < octaves; i++) {\n        spherenoise += sp*simplex3d(p*sd);\n        sp *= persistence;\n        sd *= detail;\n    }\n    spherenoise -= 0.1;\n    spherenoise += 3.0*simplex3d(p)*simplex3d(p+3.0)*(1.0-abs(simplex3d(10.0*p)));\n    \n    return spherenoise;\n}\n\n#define pi 3.14159",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}