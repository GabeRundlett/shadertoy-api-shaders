{
    "Shader": {
        "info": {
            "date": "1608277767",
            "description": "No text because this was already too much of an effortpost",
            "flags": 0,
            "hasliked": 0,
            "id": "tdVfDt",
            "likes": 5,
            "name": "PS1 startup animation",
            "published": 3,
            "tags": [
                "logo",
                "animation",
                "ps1",
                "startup"
            ],
            "usePreview": 0,
            "username": "ChronosDragon",
            "viewed": 565
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159;\n\nconst vec3 bg = vec3(226.0/255.0);\nconst vec3 black = vec3(0.0);\nconst vec3 tri_red = vec3(239.0/255.0, 23.0/255.0, 2.0/255.0);\nconst vec3 tri_orange = vec3(224.0/255.0, 150.0/255.0, 2.0/255.0);\n\nconst vec3 ps_red = vec3(255.0/255.0, 26.0/255.0, 1.0/255.0);\nconst vec3 ps_yellow = vec3(255.0/255.0, 179.0/255.0, 1.0/255.0);\nconst vec3 ps_green = vec3(15.0/255.0, 126.0/255.0, 120.0/255.0);\nconst vec3 ps_blue = vec3(36.0/255.0, 82.0/255.0, 145.0/255.0);\n\n\nvec3 gradient(float t) {\n    vec3 left = mix(tri_red, tri_orange, t*2.0);\n    vec3 right = mix(tri_orange, tri_red, t*2.0 - 1.0);\n    return mix(left, right, smoothstep(0.49, 0.51, t));\n}\n\nfloat diamond(vec2 uv) {\n    float bl = mix(0.0, 1.0, smoothstep(0.997, 1.003, uv.x + uv.y + 0.5));\n    float tl = mix(0.0, 1.0, smoothstep(0.997, 1.003, uv.x - uv.y + 1.5));\n    float br = mix(0.0, 1.0, smoothstep(0.997, 1.003, - uv.x + uv.y + 1.5));\n    float tr = mix(0.0, 1.0, smoothstep(0.997, 1.003, - uv.x - uv.y + 2.5));\n    return tl * tr * bl * br;\n}\n\nvec3 diamond_gradient(vec2 uv, vec3 bg) {\n    return mix(bg, gradient(uv.x), diamond(uv));\n}\n\nfloat triangle(vec2 uv) {\n    float bl = mix(0.0, 1.0, smoothstep(0.997, 1.003, uv.x + uv.y + 0.5));\n    float tl = mix(0.0, 1.0, smoothstep(0.997, 1.003, uv.x - uv.y + 1.5));\n    return mix(bl * tl, 0.0, smoothstep(0.497, 0.503, uv.x));\n}\n\nvec3 triangle_gradient(vec2 uv, vec3 bg) {\n    return mix(bg, gradient(uv.x), triangle(uv));\n}\n\nvec3 trilogo_animation(vec2 uv, float t_) {\n    float t = clamp(0.0, 1.0, t_);\n    vec3 big = diamond_gradient(uv, bg);\n    \n    vec2 uv_half1 = uv + vec2(0.0, 0.0);\n    vec2 uv_half2 = -uv + vec2(1.0, 1.0);\n    vec2 uv_small1 = 2.0 * uv - vec2(0.58, 0.92);\n    vec2 uv_small2 = -2.0 * uv + vec2(1.42, 1.08);\n\n    vec3 small1 = triangle_gradient(mix(uv_half1, uv_small1, t), big);\n    vec3 small2 = triangle_gradient(mix(uv_half2, uv_small2, t), small1);\n    return small2;\n}\n\nfloat line(vec2 uv, float at, float angle) {\n    const float WIDTH = 0.003;\n    return mix(0.0, 1.0, smoothstep(at - WIDTH, at + WIDTH, cos(angle) * uv.x + sin(angle) * uv.y));\n}\n\nfloat polycircle(int segments, vec2 uv, vec2 center, float radius) {\n    float result = 1.0;\n    for (int i = 0; i < 20; ++i) {\n        float angle = 2.0 * PI * float(i + 1) / float(segments);\n        result *= line(uv - center, -radius, angle);\n    }\n    return result;\n}\n\nfloat p(vec2 uv) {\n    return clamp(0.0, 1.0, \n    (\n        line(uv, -0.1, 0.0) * \n        line(uv, -0.17, PI) * \n        line(uv, -0.54, 1.35) *\n        line(uv, -0.6, PI + 1.35)\n    ) + \n    polycircle(20, uv * vec2(1.1, 1.0), vec2(0.41, 0.222), 0.3) * line(uv, 0.25, 0.0) +\n    (\n        line(uv, 0.5, 1.35) * \n        line(uv, -0.6, PI + 1.35) *\n        line(uv, -0.1, 0.0) *\n        line(uv, -0.43, PI)\n    )\n    );\n}\n\nfloat s(vec2 uv) {\n    return clamp(0.0, 1.0,\n    ( // prongs\n        (\n            line(uv, -0.56, 1.9) *\n            line(uv, 0.43, 1.9 + PI) *\n            line(uv, 0.22, PI + 1.35)\n        ) + (\n            line(uv, -0.35, 1.9) *\n            line(uv, 0.22, 1.9 + PI) *\n            line(uv, -0.26, 1.35)\n        ) + (\n            line(uv, -0.14, 1.9) *\n            line(uv, 0.01, 1.9 + PI) *\n            line(uv, -0.26, 1.35)\n        )\n    ) * ( // top/bottom\n        line(uv, -0.47, 1.35) *\n        line(uv, 0.06, PI + 1.35)\n    ) + ( // right curve\n        polycircle(15, uv * vec2(0.60, 1.3), vec2(-0.13, -0.34), 0.2) *\n        line(uv, 0.01, 1.9 + PI) * (1.0 - clamp(\n            line(uv, 0.14, 1.9 + PI) *\n            line(uv, -0.22, 1.9) *\n            line(uv, -0.31, 1.35) +\n            polycircle(15, uv * 4.35 * vec2(0.60, 1.3), vec2(-0.58, -1.5), 0.2),\n            0.0, 1.0\n        ))\n    ) + ( // left curve\n        polycircle(15, uv * vec2(0.60, 1.3), vec2(0.23, -0.36), 0.2) *\n        line(uv, -0.56, 1.9) * (1.0 - clamp(\n            line(uv, 0.35, 1.9 + PI) *\n            line(uv, -0.43, 1.9) *\n            line(uv, 0.19, PI + 1.35) +\n            polycircle(15, uv * 4.2 * vec2(0.60, 1.3), vec2(0.98, -1.5), 0.2),\n            0.0, 1.0\n        ))\n    )\n    );\n}\n\nvec4 s_color(vec2 uv) {\n    float s_amount = s(uv);\n    vec3 s_color = mix(mix(ps_yellow, ps_green, line(uv, -0.3, 1.2)), ps_blue, line(uv, -0.15, 1.2));\n    return vec4(s_color, 1.0) * s_amount;\n}\n\nvec3 ps_logo(vec2 uv) {\n    uv.x += 0.15;\n    vec4 logo_s_main = s_color(uv);\n    vec4 logo_s_shadow = s_color(uv + vec2(0.00, 0.04));\n    vec3 logo_s = mix(mix(black, logo_s_shadow.rgb * 0.5, logo_s_shadow.a), logo_s_main.rgb, logo_s_main.a);\n    vec3 logo_p = mix(mix(logo_s, ps_red * 0.5, p(uv + vec2(-0.04, -0.02))), ps_red, p(uv));\n    return logo_p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 c_uv = 2.0 * uv - vec2(1.0);\n    vec2 sq_uv = c_uv * vec2(iResolution.x / iResolution.y, 1.0);\n\n    float t = mod(iTime, 15.0);\n    vec3 color = black;\n    if (t < 2.0) {\n        color = mix(black, bg, smoothstep(0.0, 2.0, t));\n    } else if (t < 7.0) {\n        color = trilogo_animation(sq_uv * 0.6 + vec2(0.5), t - 2.0);\n    } else if (t < 7.2) {\n        color = mix(bg, black, smoothstep(7.0, 7.2, t));\n    } else if (t < 8.2) {\n        color = mix(black, ps_logo(sq_uv), smoothstep(7.2, 8.2, t));\n    } else if (t < 13.2) {\n        color = ps_logo(sq_uv);\n    }\n   \n    // fade black to white 2s\n    // tri logo appears\n    // halves animate 1s\n    // hold 4s\n    // (fast fade) black and tri logo disappears\n    // ps logo fades in 1s\n    // hold 5s\n    // ps logo cuts out\n    // hold black 2s\n    // repeat\n\n    // vec3 logo = trilogo_animation(sq_uv * 0.6 + vec2(0.5), iTime);\n    vec3 logo_ps = ps_logo(sq_uv);\n    \n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}