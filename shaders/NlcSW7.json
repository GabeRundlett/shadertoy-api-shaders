{
    "Shader": {
        "info": {
            "date": "1665710823",
            "description": "click and drag\nmouse corresponds to universal c value\nInspired by: https://www.shadertoy.com/view/MdX3zN",
            "flags": 0,
            "hasliked": 0,
            "id": "NlcSW7",
            "likes": 3,
            "name": "Julia Set Uniformization",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "juliaset"
            ],
            "usePreview": 0,
            "username": "loveless_savage",
            "viewed": 161
        },
        "renderpass": [
            {
                "code": "//resolution of each test\n#define RESOL 512\n#define THRESHOLD 10000.\n\n// complex multiplication\nvec2 cmul(vec2 a, vec2 b){\n    return vec2( a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x );\n}\n\n// complex division\nvec2 cdiv(vec2 a, vec2 b){\n    float d = dot(b,b);\n    return vec2( dot(a,b), a.y*b.x - a.x*b.y ) / d;\n}\n\n// complex exponent\nvec2 cpow(vec2 z, float n){\n    float r = length( z );\n    float a = atan( z.y, z.x );\n    return pow( r, n )*vec2( cos(a*n), sin(a*n) );\n}\n\n// square root of a complex number\nvec2 csqrt(vec2 z, bool isPositive){\n// for mathematical proof: https://math.stackexchange.com/questions/44406/how-do-i-get-the-square-root-of-a-complex-number\n    if(z.y == 0.0) return vec2(0.0,sqrt(length(z))); // doesn't work for negative numbers!\n    // square root of the complex number z takes the form:\n    // √z = √|z| * (z+|z|)/|z+|z||\n    vec2 rootz = vec2(z.x + length(z), z.y);\n    rootz *= sqrt(length(z)) / length(rootz);\n    if(!isPositive) rootz *=-1.;\n    return rootz;\n    \n    /*float m = length(z); return sqrt( 0.5*vec2(m+z.x, m-z.x) ) * vec2( 1.0, sign(z.y) );*/\n}\n\n//given the 4D Julia set coordinates, test for divergence with a certain resolution\nvec4 runTest(vec2 zi, vec2 c){\n    bool cutoff = true;\n    vec2 z = zi;\n    bool[RESOL] argsign;\n    vec2 gdiff;\n    vec2 bmap = zi;\n\n    int n = 0;\n    while(n<RESOL){\n        // if we passed the outer threshold\n        if( cutoff && dot(z,z)>THRESHOLD*THRESHOLD ) break;\n        // record quadrant data\n        if(z.y==0.)\n            argsign[n] = (z.x>=0.);\n        else\n            argsign[n] = (z.y>0.);\n        // iterate\n        z = cmul(z,z) + c;\n        // Boettcher map - https://iquilezles.org/articles/distancefractals\n        gdiff = cdiv(z,z-c);\n        bmap = cmul(bmap, cpow(gdiff,pow(0.5,float(n))) );\n        n++;\n    }\n    \n    if( dot(z,z)<=THRESHOLD*THRESHOLD ) return vec4(0.0);\n    \n    // this step maps our fractal border to the unit circle\n    // ... by undoing z^2 + c but with c = 0\n    for(int i = 0; i<n; i++){\n        z = csqrt(z,argsign[n-i-1]);\n    }\n    \n    return vec4(z.xy,bmap.xy);\n}\n\n//calculate the color of the model given a depth\nvec4 modelColor(float dep){\n    if(length(dep) == 0.0) return vec4(0.0);\n\n    float temp[3] = float[3](0.0,0.0,0.0);\n    float depmod = mod(dep,0.2);\n    if(dep==1.0) {\n        return vec4(0.0);\n    }\n\n    int depnum = int((dep-depmod)*5.0);\n\n    if((depnum&1)>0) depmod = 0.2-depmod;\n\n    temp[(4-depnum) % 3]=5.0*depmod;\n\n    depnum += 1;\n    depnum >>= 1;\n\n    temp[depnum]=1.0;\n\n    return vec4(temp[0],temp[1],temp[2],1.0);\n}\n\n// checkerboard coloring\nvec4 checkerboard(vec2 uz, float width){\n    // eliminate the filled in set\n    if(length(uz) == 0.0) return vec4(0.0);\n    \n    // find checkerboard position using step function\n    vec2 check = floor(uz/width);\n    vec4 outcol = vec4(0.3);\n    if( mod(check.x + check.y, 2.0) == 0.0 ){\n        outcol = vec4(0.8);\n    }\n    return outcol;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Adjusted pixel coordinates; transform to window of Mandelbrot Set\n    vec2 z = 2.0*fragCoord.xy-iResolution.xy;\n    vec2 c = 2.0*iMouse.xy-iResolution.xy;\n    z *= 2.0/min(iResolution.x,iResolution.y);\n    c *= 2.0/min(iResolution.x,iResolution.y);\n    \n    // Test for divergence\n    vec4 uVal = runTest(z,c);\n    \n    // Output to screen\n    fragColor = checkerboard(uVal.wz,0.1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}