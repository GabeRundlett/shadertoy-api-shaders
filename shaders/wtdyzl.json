{
    "Shader": {
        "info": {
            "date": "1609748638",
            "description": "merp merp merp",
            "flags": 96,
            "hasliked": 0,
            "id": "wtdyzl",
            "likes": 15,
            "name": "Merp",
            "published": 3,
            "tags": [
                "sound",
                "animation",
                "distance2d",
                "merp",
                "sergal"
            ],
            "usePreview": 0,
            "username": "levonchic",
            "viewed": 443
        },
        "renderpass": [
            {
                "code": "// MIT License (c) bitrate16\n\n// Sergal count\n#define COUNT 64     // Sergals count (For not random use nearest square like 9, 16, 25, ..)\n#define SCALE 1.0    // Sergals scale (larger value -> smaller)\n#define TIME_RND 2.0 // Time random range\n#define TIME_DEF 1.0 // Time default value (Result time is (rand(TIME_RND) + TIME_DEF))\n//#define RANDOM    // Use random spawn or coordinate grid\n\n// Ref: https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nvec4 sergal(vec2 frag, vec2 serg, bool state, float fact, float minMap) {\n    frag -= serg;\n    // Map fragCoord to texture size for different states\n    if (state) {\n        vec2 uv = frag / fact;\n        if (uv.x < 0.0 || uv.x > 0.5 || uv.y < 0.0 || uv.y > 0.5)\n            return vec4(0.0);\n        uv += minMap * vec2(0.5, 0.5);\n        return texture(iChannel0, uv);\n    }\n    \n    vec2 uv = frag / fact;\n    if (uv.x < 0.0 || uv.x > 0.5 || uv.y < 0.0 || uv.y > 0.5)\n        return vec4(0.0);\n    uv += minMap * vec2(0.0, 0.5);\n    return texture(iChannel0, uv);\n}\n\n// Paste B on A\nvec4 paste(vec4 a, vec4 b) {\n    return a * a.a + b * (1.0 - a.a);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Minimal of resolutions\n    float fact = min(iResolution.x, iResolution.y);\n    vec2 map = iResolution.xy / fact;\n    // minimal of scaled resolution used in scaling Channel 0 texture\n    float minMap = min(map.x, map.y);\n    // Sergal size used to make random spawner cords offsets\n    vec2 sergalSize2 = vec2(fact * SCALE * 0.25);\n    // Scale the sergal size\n    fact *= SCALE;\n    \n    fragColor = vec4(1.0);\n    \n    const float offstep = sqrt(float(COUNT));\n    \n#ifdef RANDOM\n    // Divide view into multiple lines & draw sqrt(COUNT) \n    //  sergals on each of sqrt(COUNT) lines\n    float resstep = (iResolution.y + sergalSize2.y) / offstep;\n    \n    // Fill the view with sergals\n    for (int i = 0; i < COUNT; ++i) {\n        float sqri = sqrt(float(i));\n        fragColor = paste(sergal(fragCoord,\n                            // Sergal coord on each \"line\" is defined by noise value\n                            vec2(rand(float(i +     COUNT)) * (iResolution.x + sergalSize2.x), \n                                 rand(float(i + 2 * COUNT)) * resstep + resstep * (offstep - sqri))\n                               - sergalSize2,\n                            // Animation time is defined by noise\n                            mod(iTime * (TIME_DEF + TIME_RND * rand(float(i + 3 * COUNT))), 1.0) <= 0.5,\n                            fact,\n                            minMap),\n                          fragColor);\n    }\n#else\n    // Divide view into multiple lines & draw sqrt(COUNT) \n    //  sergals on each of sqrt(COUNT) lines\n    vec2 resstep = (iResolution.xy + sergalSize2.xy) / offstep;\n    \n    float lineno = offstep - 1.0;\n    float colno = offstep - 1.0;\n    for (float i = 0.0; i <= offstep * offstep; i += 1.0) {        \n        vec2 sergpos = vec2((colno + (-mod(lineno, 2.0)*0.5)),\n                            (lineno + (mod(colno, 2.0)*0.5)))\n                          * resstep - sergalSize2;\n        fragColor = paste(sergal(fragCoord,\n                            // Sergal coord on each \"line\" is defined by noise value\n                            sergpos,\n                            // Animation time is defined by noise\n                            mod(iTime * (TIME_DEF + TIME_RND * rand(i)), 1.0) <= 0.5,\n                            fact,\n                            minMap),\n                          fragColor);\n        colno -= 1.0;\n        if (colno < 0.0) {\n            colno = offstep - 1.0;\n            lineno -= 1.0;\n        }\n    }\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 25184,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/lynca-and-dolara/merp-sounds"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI  3.14159265359\n\nfloat circle(vec2 v, vec2 center, float radius) {\n    return distance(v, center) - radius;\n}\n\nfloat line(vec2 v, vec2 A, vec2 B) {\n    vec2 n  = B - A;\n    vec2 va = A - v;\n    vec2 c  = n * dot(va, n) / dot(n, n);\n    return length(va - c);\n}\n\nfloat segment(vec2 v, vec2 A, vec2 B, float far) {\n    vec2 b = B - A;\n    vec2 a = v - A;\n    \n    // Get ptojection coord\n    float frac = dot(a, b) / dot(b, b);\n    if (frac < 0.0 || frac > 1.0)\n        return far;\n    \n    vec2 n  = B - A;\n    vec2 va = A - v;\n    vec2 c  = n * dot(va, n) / dot(n, n);\n    return length(va - c);\n}\n\nfloat round_segment(vec2 v, vec2 A, vec2 B, float far) {\n    vec2 b = B - A;\n    vec2 a = v - A;\n    \n    // Get ptojection coord\n    float frac = dot(a, b) / dot(b, b);\n    if (frac < 0.0)\n        return distance(v, A);\n    if (frac > 1.0)\n        return distance(v, B);\n    \n    vec2 n  = B - A;\n    vec2 va = A - v;\n    vec2 c  = n * dot(va, n) / dot(n, n);\n    return length(va - c);\n}\n\n// Convert distance to smooth white line\nvec4 color(float dist) {\n    return vec4(smoothstep(1.0, 0.0, dist * 100.0));\n}\n\n// Ref: https://www.shadertoy.com/view/wldczf\nfloat cp (vec2 a, vec2 b) { return a.x * b.y - b.x * a.y; }\t\n\n// Ref: https://www.shadertoy.com/view/wldczf\nbool TriangleHit(vec2 p, vec2 a, vec2 b, vec2 c)\n{\n  bool b1 = cp(p-a, b-a) > 0.0;\n  bool b2 = cp(p-b, c-b) > 0.0;\n  bool b3 = cp(p-c, a-c) > 0.0;\n  return b1 == b2 && b2==b3;\n}\n\nbool right(vec2 uv, vec2 a, vec2 b) {\n    return cp(uv-a, b-a) < 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float fact = min(iResolution.x, iResolution.y);\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y = 1.0 - uv.y;\n    \n    if (uv.x > 1.0 || uv.y > 1.0) {\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n    if (uv.x < 0.5) {            \n        // Body\n        float md = round_segment(uv,   vec2(0.184210, 0.315789), vec2(0.184210, 0.473684), 100.0);\n        md = min(md, round_segment(uv, vec2(0.184210, 0.315789), vec2(0.131578, 0.315789), 100.0));\n        md = min(md, round_segment(uv, vec2(0.131578, 0.315789), vec2(0.184210, 0.289473), 100.0));\n        md = min(md, round_segment(uv, vec2(0.184210, 0.289473), vec2(0.131578, 0.263157), 100.0));\n        md = min(md, round_segment(uv, vec2(0.131578, 0.263157), vec2(0.157894, 0.263157), 100.0));\n        md = min(md, round_segment(uv, vec2(0.026315, 0.210526), vec2(0.157894, 0.263157), 100.0));\n        md = min(md, round_segment(uv, vec2(0.026315, 0.210526), vec2(0.184210, 0.131578), 100.0));\n        md = min(md, round_segment(uv, vec2(0.210526, 0.105263), vec2(0.184210, 0.131578), 100.0));\n        md = min(md, round_segment(uv, vec2(0.052631, 0.131578), vec2(0.099999, 0.173684), 100.0));\n        md = min(md, round_segment(uv, vec2(0.052631, 0.131578), vec2(0.184210, 0.131578), 100.0));\n        md = min(md, round_segment(uv, vec2(0.210526, 0.105263), vec2(0.184210, 0.131578), 100.0));\n        md = min(md, round_segment(uv, vec2(0.210526, 0.105263), vec2(0.236842, 0.131578), 100.0));\n        md = min(md, round_segment(uv, vec2(0.236842, 0.105263), vec2(0.236842, 0.131578), 100.0));\n        md = min(md, round_segment(uv, vec2(0.236842, 0.105263), vec2(0.263157, 0.131578), 100.0));\n        md = min(md, round_segment(uv, vec2(0.421052, 0.131578), vec2(0.263157, 0.131578), 100.0));\n        md = min(md, round_segment(uv, vec2(0.421052, 0.131578), vec2(0.394736, 0.184210), 100.0));\n        md = min(md, round_segment(uv, vec2(0.289473, 0.184210), vec2(0.394736, 0.184210), 100.0));\n        md = min(md, round_segment(uv, vec2(0.421052, 0.236842), vec2(0.394736, 0.184210), 100.0));\n        md = min(md, round_segment(uv, vec2(0.421052, 0.236842), vec2(0.263157, 0.263157), 100.0));\n        md = min(md, round_segment(uv, vec2(0.421052, 0.236842), vec2(0.315789, 0.289473), 100.0));\n        md = min(md, round_segment(uv, vec2(0.315789, 0.289473) , vec2(0.342105, 0.473684), 100.0));\n\n        // Eyes & nose\n        md = min(md, circle(uv, vec2(0.223684, 0.171052), 0.002770));\n        md = min(md, circle(uv, vec2(0.381578, 0.152631), 0.001558));\n        fragColor = color(md);\n        \n        \n        // Very long body color check\n        // Is there any way to make it more compact?\n        if (right(uv, vec2(0.184210, 0.473684), vec2(0.184210, 0.289473))\n            &&\n            right(uv, vec2(0.184210, 0.289473), vec2(0.315789, 0.289473))\n            &&\n            right(uv, vec2(0.315789, 0.289473), vec2(0.342105, 0.473684))\n            &&\n            right(uv, vec2(0.342105, 0.473684), vec2(0.184210, 0.473684))\n            ||\n\n            right(uv, vec2(0.184210, 0.315789), vec2(0.131578, 0.315789))\n            &&\n            right(uv, vec2(0.131578, 0.315789), vec2(0.184210, 0.289473))\n            &&\n            right(uv, vec2(0.184210, 0.289473), vec2(0.184210, 0.315789))\n            ||\n\n            right(uv, vec2(0.184210, 0.289473), vec2(0.131578, 0.263157))\n            &&\n            right(uv, vec2(0.131578, 0.263157), vec2(0.157894, 0.263157))\n            &&\n            right(uv, vec2(0.157894, 0.263157), vec2(0.184210, 0.289473))\n            ||\n\n            right(uv, vec2(0.157894, 0.263157), vec2(0.026315, 0.210526))\n            &&\n            right(uv, vec2(0.026315, 0.210526), vec2(0.099999, 0.173684))\n            &&\n            right(uv, vec2(0.099999, 0.173684), vec2(0.157894, 0.263157))\n            ||\n\n            right(uv, vec2(0.099999, 0.173684), vec2(0.052631, 0.131578))\n            &&\n            right(uv, vec2(0.052631, 0.131578), vec2(0.184210, 0.131578))\n            &&\n            right(uv, vec2(0.184210, 0.131578), vec2(0.099999, 0.173684))\n            ||\n\n            right(uv, vec2(0.184210, 0.131578), vec2(0.210526, 0.105263))\n            &&\n            right(uv, vec2(0.210526, 0.105263), vec2(0.236842, 0.131578))\n            &&\n            right(uv, vec2(0.236842, 0.131578), vec2(0.184210, 0.131578))\n            ||\n\n            right(uv, vec2(0.236842, 0.131578), vec2(0.236842, 0.105263))\n            &&\n            right(uv, vec2(0.236842, 0.105263), vec2(0.263157, 0.131589))\n            &&\n            right(uv, vec2(0.263157, 0.131578), vec2(0.236842, 0.131578))\n            ||\n\n            right(uv, vec2(0.394736, 0.184210), vec2(0.421052, 0.236842))\n            &&\n            right(uv, vec2(0.421052, 0.236842), vec2(0.315789, 0.289473))\n            &&\n            right(uv, vec2(0.315789, 0.289473), vec2(0.394736, 0.184210))\n            ||\n\n            right(uv, vec2(0.184210, 0.289473), vec2(0.157894, 0.263157))\n            &&\n            right(uv, vec2(0.157894, 0.263157), vec2(0.099999, 0.173684))\n            &&\n            right(uv, vec2(0.099999, 0.173684), vec2(0.184210, 0.131578))\n            &&\n            right(uv, vec2(0.184210, 0.131578), vec2(0.421052, 0.131578))\n            &&\n            right(uv, vec2(0.421052, 0.131578), vec2(0.394736, 0.184210))\n            &&\n            right(uv, vec2(0.394736, 0.184210), vec2(0.315789, 0.289473))\n            &&\n            right(uv, vec2(0.315789, 0.289473), vec2(0.184210, 0.289473)))\n            fragColor.a = 1.0;\n    } else {      \n        // Body\n        float md =   round_segment(uv, vec2(0.684210, 0.473684), vec2(0.684210, 0.315789), 100.0);\n        md = min(md, round_segment(uv, vec2(0.684210, 0.315789), vec2(0.631578, 0.315789), 100.0));\n        md = min(md, round_segment(uv, vec2(0.631578, 0.315789), vec2(0.684210, 0.289473), 100.0));\n        md = min(md, round_segment(uv, vec2(0.684210, 0.289473), vec2(0.631578, 0.263157), 100.0));\n        md = min(md, round_segment(uv, vec2(0.684210, 0.263157), vec2(0.526315, 0.263157), 100.0));\n        md = min(md, round_segment(uv, vec2(0.526315, 0.263157), vec2(0.684210, 0.157894), 100.0));\n        md = min(md, round_segment(uv, vec2(0.578947, 0.157894), vec2(0.621052, 0.199999), 100.0));\n        md = min(md, round_segment(uv, vec2(0.578947, 0.157894), vec2(0.684210, 0.157894), 100.0));\n        md = min(md, round_segment(uv, vec2(0.684210, 0.157894), vec2(0.671052, 0.131578), 100.0));\n        md = min(md, round_segment(uv, vec2(0.671052, 0.131578), vec2(0.697368, 0.144736), 100.0));\n        md = min(md, round_segment(uv, vec2(0.697368, 0.144736), vec2(0.697368, 0.118421), 100.0));\n        md = min(md, round_segment(uv, vec2(0.697368, 0.118421), vec2(0.710526, 0.131578), 100.0));\n        md = min(md, round_segment(uv, vec2(0.710526, 0.131578), vec2(0.815789, 0.039473), 100.0));\n        md = min(md, round_segment(uv, vec2(0.815789, 0.039473), vec2(0.842105, 0.078947), 100.0));\n        md = min(md, round_segment(uv, vec2(0.842105, 0.078947), vec2(0.75    , 0.197368), 100.0));\n        md = min(md, round_segment(uv, vec2(0.75    , 0.197368), vec2(0.855263, 0.328947), 100.0));\n        md = min(md, round_segment(uv, vec2(0.855263, 0.328947), vec2(0.815789, 0.197368), 100.0));\n        md = min(md, round_segment(uv, vec2(0.815789, 0.197368), vec2(0.842105, 0.078947), 100.0));\n        md = min(md, round_segment(uv, vec2(0.855263, 0.328947), vec2(0.842105, 0.342105), 100.0));\n        md = min(md, round_segment(uv, vec2(0.842105, 0.342105), vec2(0.736842, 0.263157), 100.0));\n        md = min(md, round_segment(uv, vec2(0.842105, 0.473684), vec2(0.821052, 0.326315), 100.0));\n        md = min(md, round_segment(uv, vec2(0.813710, 0.277006), vec2(0.802631, 0.210526), 100.0));\n        md = min(md, round_segment(uv, vec2(0.802631, 0.210526), vec2(0.771763, 0.169386), 100.0));\n        \n        // Eyes & nose\n        md = min(md, circle(uv, vec2(0.710526, 0.171052), 0.002770));\n        md = min(md, circle(uv, vec2(0.805263, 0.068421), 0.001558));\n        fragColor = color(md);\n        \n        // Tongue\n        if (TriangleHit(uv,      vec2(0.802631, 0.210526), vec2(0.813710, 0.277006), vec2(0.75, 0.197368)))\n            fragColor += 0.5;\n        else if (TriangleHit(uv, vec2(0.802631, 0.210526), vec2(0.771763, 0.169386), vec2(0.75, 0.197368)))\n            fragColor += 0.5;\n        \n        // Mouth\n        else if (TriangleHit(uv, vec2(0.815789, 0.197368), vec2(0.855263, 0.328947), vec2(0.75    , 0.197368)))\n            fragColor += 0.75;\n        else if (TriangleHit(uv, vec2(0.75    , 0.197368), vec2(0.842105, 0.078947), vec2(0.815789, 0.197368)))\n            fragColor += 0.75;\n            \n        // Very long body color check\n        // Is there any way to make it more compact?\n        if (right(uv, vec2(0.684210, 0.473684), vec2(0.684210, 0.289473))\n            &&                                                         \n            right(uv, vec2(0.684210, 0.289473), vec2(0.821052, 0.326315))\n            &&                                                         \n            right(uv, vec2(0.821052, 0.326315), vec2(0.842105, 0.473684))\n            &&                                                         \n            right(uv, vec2(0.842105, 0.473684), vec2(0.684210, 0.473684))\n            ||                                                         \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n            right(uv, vec2(0.684210, 0.315789), vec2(0.631578, 0.315789))\n            &&                                                         \n            right(uv, vec2(0.631578, 0.315789), vec2(0.684210, 0.289473))\n            &&                                                         \n            right(uv, vec2(0.684210, 0.289473), vec2(0.684210, 0.315789))\n            ||                                                         \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n            right(uv, vec2(0.631578, 0.263157), vec2(0.526315, 0.263157))\n            &&                                                         \n            right(uv, vec2(0.526315, 0.263157), vec2(0.684210, 0.157894))\n            &&                                                         \n            right(uv, vec2(0.684210, 0.157894), vec2(0.631578, 0.263157))\n            ||                                                         \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n            right(uv, vec2(0.621052, 0.199999), vec2(0.578947, 0.157894))\n\t\t\t&&\n\t\t\tright(uv, vec2(0.578947, 0.157894), vec2(0.684210, 0.157894))\n\t\t\t&&\n\t\t\tright(uv, vec2(0.684210, 0.157894), vec2(0.621052, 0.199999))\n            ||                                                         \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n            right(uv, vec2(0.684210, 0.157894), vec2(0.671052, 0.131578))\n            &&                                                         \n            right(uv, vec2(0.671052, 0.131578), vec2(0.697368, 0.144736))\n            &&                                                         \n            right(uv, vec2(0.697368, 0.144736), vec2(0.684210, 0.157894))\n            ||                                                         \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n            right(uv, vec2(0.697368, 0.144736), vec2(0.697368, 0.118421))\n            &&                                                         \n            right(uv, vec2(0.697368, 0.118421), vec2(0.710526, 0.131578))\n            &&                                                         \n            right(uv, vec2(0.710526, 0.131578), vec2(0.697368, 0.144736))\n            ||                                                         \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n            right(uv, vec2(0.855263, 0.328947), vec2(0.842105, 0.342105))\n            &&                                                         \n            right(uv, vec2(0.842105, 0.342105), vec2(0.821052, 0.326315))\n            &&                                                         \n            right(uv, vec2(0.821052, 0.326315), vec2(0.855263, 0.328947))\n            ||                                                         \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n            right(uv, vec2(0.821052, 0.326315), vec2(0.684210, 0.289473))\n            &&                                                         \n            right(uv, vec2(0.684210, 0.289473), vec2(0.815789, 0.197368))\n            &&                                                         \n            right(uv, vec2(0.815789, 0.197368), vec2(0.855263, 0.328947))\n            &&                                                         \n            right(uv, vec2(0.855263, 0.328947), vec2(0.821052, 0.326315))\n            ||\n\n            right(uv, vec2(0.684210, 0.289473), vec2(0.631578, 0.263157))\n            &&\n            right(uv, vec2(0.631578, 0.263157), vec2(0.684210, 0.157894))\n            &&\n            right(uv, vec2(0.684210, 0.157894), vec2(0.815789, 0.039473))\n            &&\n            right(uv, vec2(0.815789, 0.039473), vec2(0.842105, 0.078947))\n            &&\n            right(uv, vec2(0.842105, 0.078947), vec2(0.815789, 0.197368))\n            &&\n            right(uv, vec2(0.815789, 0.197368), vec2(0.684210, 0.289473)))\n            fragColor.a = clamp(fragColor.a + 1.0, 0.0, 1.0);\n    }\n    \n    fragColor.rgb = 1.0 - clamp(fragColor.rgb, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}