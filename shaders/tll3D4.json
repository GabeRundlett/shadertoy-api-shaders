{
    "Shader": {
        "info": {
            "date": "1557144987",
            "description": "Domain color plots in the style of [url=http://fs2.american.edu/lcrone/www/ComplexPlot.html]Lawrence Crone[/url].",
            "flags": 0,
            "hasliked": 0,
            "id": "tll3D4",
            "likes": 5,
            "name": "Crone-style domain coloring",
            "published": 3,
            "tags": [
                "2d",
                "math",
                "complex",
                "domaincoloring"
            ],
            "usePreview": 0,
            "username": "tpfto",
            "viewed": 582
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Basic domain coloring plot (https://en.wikipedia.org/wiki/Domain_coloring)\n// of a rational function, using Larry Crone-style shading (http://fs2.american.edu/lcrone/www/ComplexPlot.html)\n\n#define PI 3.14159265359\n#define SCALE 5.0 // plot scale\n#define EP 0.1 * SCALE/iResolution.y // something tiny\n\n// Adjustable parameters for Crone-style shading\n\n#define S0 0.3\n#define B0 0.6\n\n// from Fabrice Neyret, \n#define cis(a) vec2( cos(a), sin(a) )\n#define cmul(A,B) ( mat2( A, -(A).y, (A).x ) * (B) )\n#define cinv(Z) ( vec2( (Z).x, -(Z).y ) / dot(Z, Z) ) \n#define cdiv(A,B) cmul( A, cinv(B) )\n\n// Auxiliary functions for Larry Crone-style plots\nfloat wave1( float x )\n{\n    float tmp = x - (x - 4.0 * log2(EP + 0.25 * x)) * smoothstep(0.0, EP, x - 4.0);\n    return 1.5 - abs(mod(0.5 * tmp + 0.5, 2.0) - 1.0) - abs(mod(0.5 * tmp + 1.0, 2.0) - 1.0);\n}\n\nfloat wave2( float x )\n{\n    float tmp = x - (x - 4.0 * log2(EP + 0.25 * x)) * smoothstep(0.0, EP, x - 4.0);\n    return abs(mod(0.5 * tmp, 2.0) - 1.0) + abs(mod(0.5 * tmp + 0.5, 2.0) - 1.0) - 0.5;\n}\n\n// modified version of Inigo Quilez's smooth HSV at https://www.shadertoy.com/view/MsS3Wc\n// using \"rational smoothstep\" from https://tpfto.wordpress.com/2019/03/28/on-a-rational-variant-of-smoothstep/\nvec3 smooth_hue( float h )\n{\n    vec3 rgb = clamp( abs(mod(6.0 * h + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n    return rgb * rgb * rgb/(1.0 - 3.0 * rgb * (1.0 - rgb));\n}\n\n// modified DLMF coloring, adapted from https://www.shadertoy.com/view/WtXGWN\nvec3 smooth_dlmf( float h )\n{\n    vec3 rgb = clamp( vec3(1., -1., -1.) * abs((vec3(8., 4., 8.) * mod(h, 1.0) - vec3(4.5, 1.5, 5.5))) + vec3(-1.5, 1.5, 2.5), 0.0, 1.0 );\n\treturn rgb * rgb * rgb/(1.0 - 3.0 * rgb * (1.0 - rgb));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = iResolution.xy / iResolution.y;\n    vec2 z = ( fragCoord.xy / iResolution.y ) - 0.5 * aspect;\n    z *= SCALE;\n\n    // plot a rational function\n    vec2 w = (1.0 + 0.5 * sin(0.4 * PI * iTime)) * cmul(z, z) - cdiv(1.1 * cis(0.2 * PI * iTime), cmul(z, z));\n    float ph = atan(w.y, w.x);\n    float mg = length(w);\n    \n    vec3 cd = smooth_dlmf(0.5 * (ph / PI));\n    vec3 ch = smooth_hue(0.5 * (ph / PI));\n    // transition between normal hue and DLMF coloring\n    vec3 c = mix(cd, ch, 0.5 + 0.5 * cos(2.0 * iTime));\n\n    // Crone shading\n    float br = mix(wave1(mg), 1.0, B0);\n    float sat = mix(wave2(mg), 1.0, S0);\n    fragColor = vec4(br * mix( vec3(1.0), c, sat), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}