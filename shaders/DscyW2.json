{
    "Shader": {
        "info": {
            "date": "1695888783",
            "description": "Testing environment mapping with SDFs.",
            "flags": 0,
            "hasliked": 0,
            "id": "DscyW2",
            "likes": 3,
            "name": "Environment Mapping on Cube",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "environmentmapping"
            ],
            "usePreview": 0,
            "username": "s_fx",
            "viewed": 190
        },
        "renderpass": [
            {
                "code": "/* (c) 2023 s.fx */\n\nconst int   MAXI = 100;\nconst float MIND = .001;\nconst float MAXD = 100.;\n\nfloat cube( in vec3 p, in vec3 b )\n{\n    float t  = iTime;\n    float st = sin(t);\n    float ct = cos(t);\n    mat3 rot = mat3(\n             ct,     -st,  0.,\n        ct * st, ct * ct, -st,\n        st * st, st * ct,  ct\n    );\n\n    p *= rot;\n    \n    // box sdf by iq:\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec3 norm( in vec3 p )\n{\n    return normalize(vec3(0.) - p);\n}\n\nfloat dist( in vec3 p )\n{\n    return cube(p, vec3(2.));\n}\n\nvec3 rotateY( in vec3 v )\n{\n    float t  = iTime * .2;\n    float st = sin(t);\n    float ct = cos(t);\n    mat3 rot = mat3(\n         ct, 0., st,\n         0., 1., 0.,\n        -st, 0., ct\n    );\n    \n    return v * rot;\n}\n\nvec3 march( in vec3 rd, in vec3 ro )\n{\n    vec3  col = texture(iChannel0, rd).rgb;\n    vec3  rp  = ro;\n    vec3  re, n;\n    float d;\n    \n    for (int i = 0; i < MAXI; i++)\n    {\n        d   = dist(rp);\n        rp += rd * d;\n        \n        if (d <= MIND)\n        {\n            n   = norm(rp);\n            re  = rd - 2. * dot(rd, n) * n;\n            col = texture(iChannel1, re).rgb;\n            break;\n        }\n        \n        if (d >= MAXD)\n            break;\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv   = fragCoord/iResolution.xy * 2. - 1.;\n    uv.x     *= iResolution.x / iResolution.y;\n\n    vec3 ro   = rotateY(vec3(0., 0., -5.));\n    vec3 rd   = normalize(rotateY(vec3(uv, 1.)));\n    vec3 col  = march(rd, ro);\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}