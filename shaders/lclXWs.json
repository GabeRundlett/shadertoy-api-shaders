{
    "Shader": {
        "info": {
            "date": "1705932695",
            "description": "Extremely slow, use shadertoy browser extension to increase the number of iters/frame (paint calls) to 512 ish with inspect element!\n\nHelp: How do I calculate max dt (before it breaks) based on the parameters?\n\nhttps://www.desmos.com/calculator/ery45h4dzl",
            "flags": 32,
            "hasliked": 0,
            "id": "lclXWs",
            "likes": 1,
            "name": "Quantum physics or something",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "solver",
                "physics",
                "quantum",
                "equation",
                "pde",
                "schrodinger"
            ],
            "usePreview": 0,
            "username": "beans_please",
            "viewed": 148
        },
        "renderpass": [
            {
                "code": "vec2 screen_to_uv(vec2 coord)\n{\n    return (2. * coord - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nvoid mainImage(out vec4 frag_col, in vec2 frag_coord)\n{\n    vec2 uv = screen_to_uv(frag_coord);\n    \n    vec3 col = vec3(.04, 0., .02);\n    if (max(abs(uv.x), abs(uv.y)) < 1.)\n    {\n        ivec2 icoord = ivec2(remap(uv, -1., 1., 0., float(grid_res)));\n        vec4 data = texelFetch(iChannel0, icoord, 0);\n        \n        complex val = 2. * READ(data);\n        col += abs(val.x) * vec3(2., .65, 0) + abs(val.y) * vec3(0, .7, 2.);\n    }\n    \n    // Output\n    col = pow(col, vec3(1. / 2.2));\n    frag_col = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define complex vec2\n#define READ(DATA) complex(DATA.x, DATA.y)\n#define WRITE(VAR) frag_col = vec4(VAR.xy, iResolution.xy)\n#define RES_CHANGED(DATA) (max(abs(DATA.z - iResolution.x), abs(DATA.w - iResolution.y)) > .1)\n\nconst int grid_res = 100;\n\nconst float dx = 1. / float(grid_res);\nconst float dx2 = dx * dx;\n\n// reduced planck's constant\n// 1.054571817 * 10^âˆ’34 joule seconds\nconst float h = 1.054571817e-4;\nconst float h2 = h * h;\n\nconst float mass = 20.;\n\nconst float h2_2mass = h2 / (2. * mass);\n\nconst float dt = .005;\n\ncomplex complex_mul(complex a, complex b)\n{\n    return complex(\n        a.x * b.x - a.y * b.y,\n        a.x * b.y + a.y * b.x\n    );\n}\n\ncomplex complex_mul_by_i(complex c)\n{\n    return complex(-c.y, c.x);\n}\n\n\n\n/*_________________ Math Utils ________________*/\n\n#define PI 3.1415926535897932384626433832\n#define TAU 6.283185307179586476925286766\n#define PI_OVER_2 1.57079632679489661923132169163\n\n#define FUNC_LERP(T) \\\nT lerp(T a, T b, float t) \\\n{ \\\n    return a + t*(b-a); \\\n}\n\n#define FUNC_WRAP(T) \\\nT wrap(T inp, float start, float end) \\\n{ \\\n    return start + mod(inp - start, end - start); \\\n}\n\n#define FUNC_REMAP(T) \\\nT remap(T inp, float inp_start, float inp_end, float out_start, float out_end) \\\n{ \\\n    return out_start + ((out_end - out_start) / (inp_end - inp_start)) * (inp - inp_start); \\\n}\n\n#define FUNC_REMAP_CLAMP(T) \\\nT remap_clamp(T inp, float inp_start, float inp_end, float out_start, float out_end) \\\n{ \\\n    T t = clamp((inp - inp_start) / (inp_end - inp_start), 0.0, 1.0); \\\n    return out_start + t * (out_end - out_start); \\\n}\n\n#define FUNC_REMAP01(T) \\\nT remap01(T inp, float inp_start, float inp_end) \\\n{ \\\n    return clamp((inp - inp_start) / (inp_end - inp_start), 0.0, 1.0); \\\n}\n\nFUNC_LERP(float)\nFUNC_LERP(vec2)\nFUNC_LERP(vec3)\nFUNC_LERP(vec4)\n\nFUNC_WRAP(float)\nFUNC_WRAP(vec2)\nFUNC_WRAP(vec3)\nFUNC_WRAP(vec4)\n\nFUNC_REMAP(float)\nFUNC_REMAP(vec2)\nFUNC_REMAP(vec3)\nFUNC_REMAP(vec4)\n\nFUNC_REMAP_CLAMP(float)\nFUNC_REMAP_CLAMP(vec2)\nFUNC_REMAP_CLAMP(vec3)\nFUNC_REMAP_CLAMP(vec4)\n\nFUNC_REMAP01(float)\nFUNC_REMAP01(vec2)\nFUNC_REMAP01(vec3)\nFUNC_REMAP01(vec4)\n\nmat2 rotate_2d(float angle)\n{\n    return mat2(cos(angle), sin(angle), cos(angle + PI_OVER_2), sin(angle + PI_OVER_2));\n}\n\n/*____________________ End ____________________*/\n\n\n\n/*_______ Pseudo-Random Number Generator ______*/\n// Source: https://www.shadertoy.com/view/WdSSRt\n\n/* Usage Example:\n    void mainImage(out vec4 frag_col, in vec2 frag_coord)\n    {\n        // Initialize PRNG\n        prng_init(vec3(frag_coord / iResolution.y, iTime));\n    \n        // Using the function\n        float a = random();\n        vec3 b = vec3(random(), random(), random());\n        \n        ...\n    }\n*/\n\nuint prng_state[2];\n\nuint prng_rot(uint x, int k)\n{\n    return (x << k) | (x >> (32 - k));\n}\n\n// Random uint from 0 to 2^32-1\nuint randomui()\n{\n    uint s0 = prng_state[0];\n    uint s1 = prng_state[1];\n    uint result = prng_rot(s0 * 0x9e3779bbu, 5) * 5u;\n    s1 ^= s0;\n    prng_state[0] = prng_rot(s0, 26) ^ s1 ^ (s1 << 9);\n    prng_state[1] = prng_rot(s1, 13);\n    return result;\n}\n\n// Random int from 0 to 2^31-1\nint randomi()\n{\n    return int(randomui() % 0x7FFFFFFFu);\n}\n\n// Random float from 0 to 1\nfloat random()\n{\n    return float(randomui()) / float(0xffffffffu);\n}\n\n// Generate two normally distributed random numbers using the\n// Box-Muller Transform.\n// https://www.baeldung.com/cs/uniform-to-normal-distribution\nvec2 random_gauss()\n{\n    float u1 = random();\n    float u2 = random() * TAU;\n    float temp = sqrt(-2. * log(u1));\n    return temp * vec2(cos(u2), sin(u2));\n    \n    // Unoptimized version\n    //float u1 = random();\n    //float u2 = random();\n    //return vec2(cos(TAU * u2), sin(TAU * u2)) * sqrt(-2. * log(u1));\n}\n\nvec2 random_unit_vec2()\n{\n    vec2 v = vec2(1);\n    float lensqr;\n    for (int i = 0; i < 20; i++)\n    {\n        v = vec2(2. * random() - 1., 2. * random() - 1.);\n        lensqr = dot(v, v);\n        if (lensqr == 0.)\n            i--;\n        else if (lensqr <= 1.)\n            break;\n    }\n    return v / sqrt(lensqr);\n}\n\nvec3 random_unit_vec3()\n{\n    vec3 v = vec3(1);\n    float lensqr;\n    for (int i = 0; i < 20; i++)\n    {\n        v = vec3(2. * random() - 1., 2. * random() - 1., 2. * random() - 1.);\n        lensqr = dot(v, v);\n        if (lensqr == 0.)\n            i--;\n        else if (lensqr <= 1.)\n            break;\n    }\n    return v / sqrt(lensqr);\n}\n\nvec2 random_in_circle()\n{\n    vec2 v = vec2(1);\n    for (int i = 0; i < 20; i++)\n    {\n        v = vec2(2. * random() - 1., 2. * random() - 1.);\n        if (dot(v, v) <= 1.)\n            return v;\n    }\n    return v;\n}\n\nvec3 random_in_sphere()\n{\n    vec3 v = vec3(1);\n    for (int i = 0; i < 20; i++)\n    {\n        v = vec3(2. * random() - 1., 2. * random() - 1., 2. * random() - 1.);\n        if (dot(v, v) <= 1.)\n            return v;\n    }\n    return v;\n}\n\n// Initialize with uvec2\nvoid prng_init(uvec2 seed)\n{\n    seed += uvec2(1317, 944573125);\n    seed *= 464973573u;\n    prng_state[0] = seed.x;\n    prng_state[1] = seed.y;\n    randomi();\n}\n\n// Initialize with uint\nvoid prng_init(uint seed)\n{\n    prng_init(uvec2(seed, 1));\n}\n\n// Initialize with vec3\nvoid prng_init(vec3 seed)\n{\n    seed += 3.49276101561702;\n    seed.xy *= (seed.z + 10.258);\n    prng_state[0] = floatBitsToUint(seed.x);\n    prng_state[1] = floatBitsToUint(seed.y);\n    randomui();\n}\n\n// Initialize with vec2\nvoid prng_init(vec2 seed)\n{\n    prng_init(vec3(seed, 1));\n}\n\n// Initialize with float\nvoid prng_init(float seed)\n{\n    prng_init(vec3(seed, 1, 1));\n}\n\n/*____________________ End ____________________*/\n\n\n\n// ...\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "complex value_at(ivec2 icoord)\n{\n    if (icoord.x < 0\n        || icoord.y < 0\n        || icoord.x >= grid_res\n        || icoord.y >= grid_res)\n    {\n        return complex(0);\n    }\n\n    vec4 data = texelFetch(iChannel0, icoord, 0);\n    return READ(data);\n}\n\ncomplex potential(vec2 uv)\n{\n    return complex(2. * sin(uv.x * 10.), 0.);\n}\n\nvoid mainImage(out vec4 frag_col, in vec2 frag_coord)\n{\n    // ignore out-of-bounds\n    ivec2 icoord = ivec2(frag_coord);\n    if (max(icoord.x, icoord.y) >= grid_res)\n    {\n        return;\n    }\n    \n    // UV\n    vec2 uv = (2. * vec2(icoord) / float(grid_res)) - 1.;\n    \n    // read the current value\n    vec4 data = texelFetch(iChannel0, icoord, 0);\n    complex curr = READ(data);\n    \n    // initial values\n    if (iFrame < 1 || iTime < .01 || RES_CHANGED(data))\n    {\n        float real = 1. - min(dot(10. * uv, 10. * uv), 1.);\n        real *= real;\n        float imag = 0.;\n        WRITE(complex(real, imag));\n        return;\n    }\n    \n    complex prev_in_x = value_at(icoord + ivec2(-1, 0));\n    complex prev_in_y = value_at(icoord + ivec2(0, -1));\n    complex next_in_x = value_at(icoord + ivec2(1, 0));\n    complex next_in_y = value_at(icoord + ivec2(0, 1));\n    \n    complex grad_sum = (\n        (next_in_x - curr - curr + prev_in_x)\n        + (next_in_y - curr - curr + prev_in_y)\n    ) / dx2;\n    \n    complex du_dt =\n        (grad_sum * h2_2mass);\n        - complex_mul(potential(uv), curr);\n    du_dt /= h;\n    du_dt = complex_mul_by_i(du_dt);\n    \n    curr += dt * du_dt;\n    \n    WRITE(curr);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}