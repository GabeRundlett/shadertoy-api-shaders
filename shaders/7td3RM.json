{
    "Shader": {
        "info": {
            "date": "1635896909",
            "description": "Inspired by the velvet room loading screen in Persona 5",
            "flags": 0,
            "hasliked": 0,
            "id": "7td3RM",
            "likes": 3,
            "name": "Velvet room chains",
            "published": 3,
            "tags": [
                "persona",
                "chains"
            ],
            "usePreview": 0,
            "username": "Roninkoi",
            "viewed": 319
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n#define MAXIT 40\n#define EPSILON 0.1\n#define STEP 0.8\n\n#define minx4(a, b) ((a.x) < (b.x) ? (a) : (b))\n#define minx2(a, b) ((a.x) < (b.x) ? (a) : (b))\n\nmat3 rotX(float a)\n{\n    return mat3(\n        1., 0., 0.,\n        0., cos(a), -sin(a),\n        0., sin(a), cos(a)\n    );\n}\n\nmat3 rotY(float a)\n{\n    return mat3(\n        cos(a), 0.0, -sin(a),\n        0., 1., 0.,\n        sin(a), 0.0, cos(a)\n    );\n}\n\nmat3 rotZ(float a)\n{\n    return mat3(\n        cos(a), -sin(a), 0.,\n        sin(a), cos(a), 0.,\n        0., 0., 1.\n    );\n}\n\nfloat hash(vec2 r) {\n    return fract(sin(dot(r, vec2(15.5921, 96.654654))) * 23626.3663);\n}\n\nfloat t;\n\nfloat sphere(vec3 r, float a)\n{\n    return length(r) - a;\n}\n\nfloat torus(vec3 r, vec3 a)\n{\n    vec2 p = vec2(length(r.xz) - a.x, r.y);\n    return length(p) - a.y;\n}\n\nfloat plane(vec3 r, vec3 o, vec3 n) {\n    return dot(r - o, n);\n}\n\nfloat box(vec3 r, vec3 a)\n{\n    vec3 p = (abs(r) - a);\n\t\n    return length(max(p, 0.));\n}\n\nfloat link(vec3 r, float a, float b, float t)\n{\n\tr = vec3(r.x+r.y, r.x-r.y, r.z);\n    vec3 p = (abs(r) - vec3(a, a, t));\n\tfloat c = max(b-max(abs(r.y), abs(r.x)), 0.);\n\n    return length(max(p, 0.)+c);\n}\n\nfloat shade(vec3 n, vec3 rd)\n{\n    return clamp(max(dot(n, -rd), 0.) + 1., 0., 1.);\n}\n\nvec3 fog(float z, vec3 col, vec3 fogCol)\n{\n    return mix(fogCol, col, exp(-z));\n}\n\nvec3 matCol(vec4 o)\n{\n\tvec2 cc = o.zw;\n\t\n\tif (o.y == 1.0)\n\t\treturn vec3(cc.x, 0., 0.);\n\t\n    return normalize(vec3(0.8, 0.2, 0.0));\n}\n\nmat3 obj;\n\nvec4 map(vec3 r)\n{\n\tfloat tt = t * 0.2;\n\t\n\tr *= rotY(0.);\n\tr.z += 5.;\n\tvec2 cr = vec2(1000., 0.);\n\t\n\tint n = 12;\n\tfor (int i = 0; i < n; ++i) {\n\t\tfloat dy = 8.;\n\t\tfloat ii = float(i)/float(n) * PI - mod(tt, 2./float(n)) * PI - 0.75;\n\t\tvec3 offs = vec3(cos(ii*4.+tt*10.)*2.+8., ii*dy, sin(ii*4.)-cos(ii)*5.-ii-0.); // shape of chain\n\t\tvec3 v = vec3(8.*sin(ii*4.+tt*10.), dy, 4.*cos(ii*4.)+sin(ii)*5.-1.); // link direction\n\t\tfloat l2 = mod(float(i), 2.); // flip every other link\n\t\tvec3 lr = (r + offs)*rotX(-(v.z/v.y))*rotZ(-(v.x/v.y))*rotY(l2*PI/2.);\n\t\tcr = min(cr, link(lr, 2., 1.5, 0.2));\n\t}\n\t\n\tn = 12;\n\tfor (int i = 0; i < n; ++i) {\n\t\tfloat dy = 5.;\n\t\tfloat ii = float(i)/float(n) * PI - mod(tt, 2./float(n)) * PI - 0.6;\n\t\tvec3 offs = vec3(-8.+ii, ii*dy, 0.);\n\t\tfloat l2 = mod(float(i), 2.);\n\t\tvec3 lr = (r + offs)*rotY(l2*PI/2.);\n\t\tcr = min(cr, link(lr, 1., 0.8, 0.1));\n\t}\n\t\n\tn = 13;\n\tfor (int i = 0; i < n; ++i) {\n\t\tfloat dy = 16.;\n\t\tfloat ii = float(i)/float(n) * PI - mod(tt*0.8, 2./float(n)) * PI - 1.2;\n\t\tvec3 offs = vec3(cos(ii*3.)*2. - 3.*ii, ii*dy, cos(ii)*10.+2.);\n\t\tvec3 v = vec3(3.*sin(ii*3.)*2. + 3., dy, -6.*sin(ii));\n\t\tfloat l2 = mod(float(i), 2.);\n\t\tvec3 lr = (r*rotZ(PI/2.)*rotY(mod(-tt, PI/2.)*3.+PI*0.5) + offs)*rotX(-(v.z/v.y))*rotZ(-(v.x/v.y))*rotY(l2*PI/2.);\n\t\tcr = min(cr, link(lr, 2.9,1.8, 0.3));\n\t}\n\t\n\treturn vec4(cr.x, vec3(0., 0., 0.));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    t = iTime;\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    mat3 cam = rotY(-PI) * rotX(0.3);\n\n    vec3 ro = vec3(0., 2.0, -10.0);\n    vec3 rd = cam * normalize(vec3(uv * 2., -1.));\n    vec3 r = ro;\n\n    vec3 bcol = vec3(0.02, 0.0, 0.4) * (0.8-uv.y) * (0.8-uv.y)+vec3(0.01);\n    vec4 col = vec4(0.);\n    col.rgb = bcol;\n\n    float sh = 1.;\n\n    int ch = 1;\n\n    for (int i = 0; i < MAXIT; ++i) {\n        vec4 d = map(r);\n        float z = length(r - ro);\n\n        if (d.x < EPSILON) {\n            col.rgb = mix(col.rgb, d.yzw,\n                shade(normalize(r), rd));\n\t\t\n            col.rgb = fog(z * 0.03, col.rgb, bcol);\n            break;\n        }\n\n        d.x *= 0.8 - 0.2 * hash(uv);\n        r += rd * d.x * STEP;\n\n        sh = (float(i) / float(MAXIT));\n    }\n\n    if (sh < 0.5)\n        col.rgb *= clamp(exp(-sh * 2.0 + 1.0), 0., 1.);\n\n    fragColor = vec4(col.rgb, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}