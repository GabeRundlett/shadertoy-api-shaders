{
    "Shader": {
        "info": {
            "date": "1587243610",
            "description": "Trying to improve comb sorting network. Leonardo numbers seem to be well suited for distances.\nCycles still can be improved though, as currently they are just manually selected and not guaranteed to work for all inputs.\n\nSeems to be <= O(log(N)^2).",
            "flags": 48,
            "hasliked": 0,
            "id": "tsScWG",
            "likes": 4,
            "name": "Sorting: Leonardo comb network",
            "published": 3,
            "tags": [
                "sort",
                "sorting",
                "parallel"
            ],
            "usePreview": 0,
            "username": "metalim",
            "viewed": 338
        },
        "renderpass": [
            {
                "code": "/*\n\n==================== Sorting series ====================\n\nhttps://www.shadertoy.com/view/tsByzt - odd-even sorting network (aka parallel bubble sort).\nhttps://www.shadertoy.com/view/tsBczt - odd-even horizonta-vertical experiment.\nhttps://www.shadertoy.com/view/tdByzd - (2^N)-1 comb sorting network.\nhttps://www.shadertoy.com/view/tsScWG - Leonardo comb sorting network.\n\nPress 'R' to Reset.\nPress 'D' or hold left mouse button to see how much data is sorted.\n\nBuffer A - initial state of data to sort.\nBuffer B - test control variables (todo), currently just previous resolution.\nBuffer C - the sorting network.\nImage - display dataset number, current data state, current sorting state.\n\n*/\n\nint D(vec2 p, float n) {\n    int i=int(p.y), b=int(exp2(floor(30.-p.x-n*3.)));\n    i = ( p.x<0.||p.x>3.? 0:\n    i==5? 972980223: i==4? 690407533: i==3? 704642687: i==2? 696556137:i==1? 972881535: 0 )/b;\n \treturn i-i/2*2;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 muv = iMouse.xy/iResolution.xy;\n    if (iMouse.z>0. && muv.x+muv.y<uv.x+uv.y || iMouse.z<=0. && uv.x+uv.y>1.+.3*sin(iTime*.5) || texelFetch(iChannel1,ivec2(KEY_D,2),0).r>0.)\n        fragColor = lum(texelFetch(iChannel0,ivec2(fragCoord),0)) < lum(texelFetch(iChannel0,ivec2(fragCoord)-ivec2(1,0),0)) ? vec4(0.) : vec4(1.);\n    else\n\t    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n\n    // display dataset number\n    ivec4 conf = config(iResolution, iFrame);\n    vec2 i = fragCoord / 10.;\n    if ((i.x-=1.)<3. && i.y<7.) { fragColor += vec4(D(i,float(conf.w))); }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//#define BW\n#define KEY_R 82\n#define KEY_D 68\n\nvec4 get(int index, sampler2D chan, vec3 res) {\n    ivec2 p;\n    p.x = index%int(res.x);\n    p.y = index/int(res.x);\n    return texelFetch(chan,p,0);\n}\n\nfloat lum(vec4 c)\n{\n    return dot(c.rgb*vec3(0.3,0.59,0.11),vec3(1.));\n}\n\nvec4 bw(vec4 col)\n{\n    col.r = (col.r+col.g+col.b)/3.;\n    return col.rrra;\n}\n\nvec4 init(sampler2D chan, vec2 uv)\n{\n    vec4 col = texture(chan, uv);\n#ifdef BW\n    return bw(col);\n#else\n    return col;\n#endif\n}\n\nbool isSorted(vec4 a, vec4 b)\n{\n    return lum(a) <= lum(b);\n}\n\nvec4 compareAndSwap(int i, int j, int isSecond, int size, sampler2D chan, vec3 res)\n{\n    vec4 a = get(i, chan, res);\n\tif (j<0 || j>=size) return a;\n    vec4 b = get(j, chan, res);\n\n    if (isSecond!=0)\n    {\n        // note we have to keep the order of comparison, or we will lose pixels!\n        // as we can have less(a,b)==less(b,a), both false.\n        if (isSorted(b,a)) return a;\n        return b;\n    }\n    if (isSorted(a,b)) return a;\n    return b;\n}\n\nivec4 config(vec3 res, int globFrame)\n{\n    int size = int(res.x)*int(res.y);\n    \n    int len = int(log2(float(size)));\n    len = len*len+60;\n    \n    int frame = globFrame%len;\n    \n\tint set = globFrame/len%9;\n    \n    return ivec4(size,len,frame,set);\n}\n\nint xy2i(vec2 pos, vec3 res)\n{\n    return int(pos.x)+int(res.x)*int(pos.y);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n/////////////////////////////////////////////////////////////////////////\n// common\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec4 conf = config(iResolution,iFrame);\n    int index = xy2i(fragCoord, iResolution);\n    vec2 uv = fragCoord/iResolution.xy;\n\n    if (conf.w==0)\n    {\n        // horizontal split, only 4 values\n        fragColor = vec4(float(int(fragCoord.x)*4/int(iResolution.x))/4.);\n    }\n    else if (conf.w==1)\n    {\n        // reversed\n        fragColor = vec4(float(conf.x-index-1)/float(conf.x));\n    }\n    else if (conf.w==2)\n    {\n        // color gradient\n        fragColor = vec4(1.-uv.y, 1.-uv.x, uv.y, 0.);\n    }\n    else if (conf.w==3)\n    {\n        // all sorted, but last element moved to front.\n        fragColor = vec4(float((index+conf.x-1)%conf.x)/float(conf.x));\n    }\n    else if (conf.w==4)\n    {\n        // even are sorted, odd are reversed\n        if (index%2==0)\n            fragColor = vec4(0.,float(index)/float(conf.x),0.,0.);\n        else\n            fragColor = vec4(float(conf.x-index-1)/float(conf.x),0.,0.,0.);\n    }\n    else if (conf.w==5)\n    {\n        // London texture\n        fragColor = vec4(init(iChannel0, uv).rgb,0.);\n    }\n    else if (conf.w==6)\n    {\n        // Alphabet texture\n        fragColor = vec4(init(iChannel1, uv).rgb,0.);\n    }\n    else if (conf.w==7)\n    {\n        // Blue noise texture\n        fragColor = vec4(init(iChannel2, uv).rgb,0.);\n    }\n    else\n    {\n        // RGB noise texture\n        fragColor = vec4(init(iChannel3, uv).rgb,0.);\n    }\n    fragColor.a = 0.; // frame number\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(iResolution,0.);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n// common\n\nvec4 get(int index)\n{\n    return get(index, iChannel0, iResolution);\n}\n\nvec4 compareAndSwap(int i, int j, int isSecond, int size)\n{\n    return compareAndSwap(i, j, isSecond, size, iChannel0, iResolution);\n}\n\n/////////////////////////////////////////////////////////////////////////\n// sorting\n\nint leonardo(int i)\n{\n    if(i<2) return 1;\n    int a=1;\n    int b=1;\n    for (;i>1;i--)\n    {\n        int t = b;\n        b += a+1;\n\t\ta = t;\n    }\n    return b;\n}\n\n#define max_step_power 24\n#define large_cycle 11\n#define small_cycle 5\n\nvec4 update(int i, int size, int frame)\n{\n    // All distances are odd, because we select odd-even pairs.\n    int isSecond = (i+frame)%2;\n    int k = frame/large_cycle - frame%small_cycle;\n    int dist = leonardo(max_step_power-k);\n    int j = i + dist*(1 - isSecond*2);\n\n    return compareAndSwap(i, j, isSecond, size);\n}\n\n/////////////////////////////////////////////////////////////////////////\n// common\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    ivec4 conf = config(iResolution,iFrame);\n\n    if (conf.z>=0 && conf.z<60 || get(0,iChannel1,iResolution).xy != iResolution.xy || texelFetch(iChannel3,ivec2(KEY_R,0),0).r>0.)\n    {\n        fragColor = texture(iChannel2,uv);\n    }\n    else\n    {\n        int index = xy2i(fragCoord, iResolution);\n        int frame = int(texelFetch(iChannel0,ivec2(fragCoord),0).a*256.);\n        fragColor = update(index, int(iResolution.x)*int(iResolution.y), frame);\n    \tfragColor.a = float(frame+1)/256.;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}