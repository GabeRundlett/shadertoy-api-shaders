{
    "Shader": {
        "info": {
            "date": "1674977805",
            "description": "A little helper effect practice",
            "flags": 0,
            "hasliked": 0,
            "id": "DlsSRB",
            "likes": 3,
            "name": "Fork Tiled Text zyc 785",
            "published": 3,
            "tags": [
                "texture",
                "zoom",
                "scroll",
                "tiling"
            ],
            "usePreview": 0,
            "username": "zyc",
            "viewed": 245
        },
        "renderpass": [
            {
                "code": "// vertical scroll: 1\n// horizontal scroll: 0\n#define SCROLL_DIRECTION 1\n//#define FIX_CENTER\n\n\n#define PI 3.14159265358979323846\n\n\nfloat map(float value, float low1, float high1, float low2, float high2) {\n   return low2 + (value - low1) * (high2 - low2) / (high1 - low1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float padding = 0.015;\n    float aspect = 16./9.;\n    vec4 color = vec4(1.);\n    float cycleTime = mod(iTime, 2.0)/2.0;\n    float time = 3.*cos((cycleTime + 1.0) * PI) / 2.0 + 0.5;\n    \n    vec2 uv = (1.5 * fragCoord - iResolution.xy) / iResolution.y;\n    uv.y *= aspect; // fix aspect ratio\n    \n    #if (SCROLL_DIRECTION == 0)\n       float rows = 1.;\n        // calc row index to offset x of every other row\n        float rowIndex = floor(uv.y * rows);\t\t\n        float oddEven = mod(rowIndex, 2.);\n\n        // create grid coords & set color\n        vec2 uvRepeat = fract(uv * rows);\t\t\n        if(oddEven == 1.) {\n            #ifdef FIX_CENTER\n                uvRepeat = fract(vec2(0.5, 0.) + uv * rows);\n            #else\n                uvRepeat = fract(vec2(time, 0.) + uv * rows); // scroll override\n            #endif\n        } else {\n            uvRepeat = fract(vec2(-time, 0.) + uv * rows); // scroll override\n        }\n\n        // add padding and only draw once per cell\n        uvRepeat *= 1. + padding * 2.;\n        uvRepeat -= padding;\n    #else\n        float columns = 1.;\n        // calc row index to offset x of every other row\n        float columnIndex = floor(uv.x * columns);\t\t\n        float oddEven = mod(columnIndex, 2.);\n\n        // create grid coords & set color\n        vec2 uvRepeat = fract(uv * columns);\t\t\n        if(oddEven == 1.) {\n            #ifdef FIX_CENTER\n                uvRepeat = fract(vec2(0., 0.5) + uv * columns);\n            #else\n                uvRepeat = fract(vec2(0., -time) + uv * columns); // scroll override\n            #endif\n        } else {\n            uvRepeat = fract(vec2(0., time) + uv * columns); // scroll override\n        }\n\n        // add padding and only draw once per cell\n        uvRepeat *= 1. + padding * 2.;\n        uvRepeat -= padding;\n    #endif\n    \n    // antialias - probably a very long & stupid way of doing it, but it's smooth :)\n    float alphaX = 1.0;\n    float alphaY = 1.0;\n    float center = 0.5;\n    float repeatThresh = 0.51;\t// push out a little so we don't cut any texture off. also helps blend nicely when no padding\n    float aa = repeatThresh - center;\n    aa *= 0.5;\n    float centerDistX = distance(center, uvRepeat.x);\n    float centerDistY = distance(center, uvRepeat.y);\n    if(centerDistX > repeatThresh - aa) alphaX = map(centerDistX, repeatThresh - aa, repeatThresh + aa, 1., 0.);\n    if(centerDistY > repeatThresh - aa) alphaY = map(centerDistY, repeatThresh - aa, repeatThresh + aa, 1., 0.);\n    float alpha = min(alphaX, alphaY);\n    color = texture(iChannel0, uvRepeat);\n    color = mix(vec4(1.), color, alpha);\n\n    // draw repeating texture\n    fragColor = color;\n}\n\n/*\n\t// simple texture repeat option\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    uv = rotateCoord(uv, 0.2 * sin(iTime));\n    uv.y *= 4.5/3.; // fix aspect ratio\n    uv *= 1. + 0.75 * sin(iTime); // zoom\n    vec4 color = texture(iChannel0, uv + vec2(iTime, 3. * sin(iTime)));\n    fragColor = color;\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}