{
    "Shader": {
        "info": {
            "date": "1486070509",
            "description": "An anaglyph rendering of https://www.shadertoy.com/view/4sX3Rn",
            "flags": 1,
            "hasliked": 0,
            "id": "XlGXW3",
            "likes": 3,
            "name": "Menger Sponge Anaglyph",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal",
                "anaglyph",
                "menger",
                "vr"
            ],
            "usePreview": 0,
            "username": "loic_fejoz",
            "viewed": 839
        },
        "renderpass": [
            {
                "code": "float maxcomp(in vec3 p ) { return max(p.x,max(p.y,p.z));}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3  di = abs(p) - b;\n  float mc = maxcomp(di);\n  return min(mc,length(max(di,0.0)));\n}\n\nconst mat3 ma = mat3( 0.60, 0.00,  0.80,\n                      0.00, 1.00,  0.00,\n                     -0.80, 0.00,  0.60 );\n\nvec4 map( in vec3 p )\n{\n    float d = sdBox(p,vec3(1.0));\n    vec4 res = vec4( d, 1.0, 0.0, 0.0 );\n\n    float ani = smoothstep( -0.2, 0.2, -cos(0.5*iTime) );\n\tfloat off = 1.5*sin( 0.01*iTime );\n\t\n    float s = 1.0;\n    for( int m=0; m<4; m++ )\n    {\n        p = mix( p, ma*(p+off), ani );\n\t   \n        vec3 a = mod( p*s, 2.0 )-1.0;\n        s *= 3.0;\n        vec3 r = abs(1.0 - 3.0*abs(a));\n        float da = max(r.x,r.y);\n        float db = max(r.y,r.z);\n        float dc = max(r.z,r.x);\n        float c = (min(da,min(db,dc))-1.0)/s;\n\n        if( c>d )\n        {\n          d = c;\n          res = vec4( d, min(res.y,0.2*da*db*dc), (1.0+float(m))/4.0, 0.0 );\n        }\n    }\n\n    return res;\n}\n\nvec4 intersect( in vec3 ro, in vec3 rd )\n{\n    float t = 0.0;\n    vec4 res = vec4(-1.0);\n\tvec4 h = vec4(1.0);\n    for( int i=0; i<64; i++ )\n    {\n\t\tif( h.x<0.002 || t>10.0 ) break;\n        h = map(ro + rd*t);\n        res = vec4(t,h.yzw);\n        t += h.x;\n    }\n\tif( t>10.0 ) res=vec4(-1.0);\n    return res;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n\tfloat h = 1.0;\n    for( int i=0; i<32; i++ )\n    {\n        h = map(ro + rd*t).x;\n        res = min( res, k*h/t );\n\t\tt += clamp( h, 0.005, 0.1 );\n    }\n    return clamp(res,0.0,1.0);\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec3  eps = vec3(.001,0.0,0.0);\n    vec3 nor;\n    nor.x = map(pos+eps.xyy).x - map(pos-eps.xyy).x;\n    nor.y = map(pos+eps.yxy).x - map(pos-eps.yxy).x;\n    nor.z = map(pos+eps.yyx).x - map(pos-eps.yyx).x;\n    return normalize(nor);\n}\n\n// light\nvec3 light = normalize(vec3(1.0,0.9,0.3));\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n    // background color\n    vec3 col = mix( vec3(0.3,0.2,0.1)*0.5, vec3(0.7, 0.9, 1.0), 0.5 + 0.5*rd.y );\n\t\n    vec4 tmat = intersect(ro,rd);\n    if( tmat.x>0.0 )\n    {\n        vec3  pos = ro + tmat.x*rd;\n        vec3  nor = calcNormal(pos);\n\t\t\n        float occ = tmat.y;\n\t\tfloat sha = softshadow( pos, light, 0.01, 64.0 );\n\n\t\tfloat dif = max(0.1 + 0.9*dot(nor,light),0.0);\n\t\tfloat sky = 0.5 + 0.5*nor.y;\n        float bac = max(0.4 + 0.6*dot(nor,vec3(-light.x,light.y,-light.z)),0.0);\n\n        vec3 lin  = vec3(0.0);\n        lin += 1.00*dif*vec3(1.10,0.85,0.60)*sha;\n        lin += 0.50*sky*vec3(0.10,0.20,0.40)*occ;\n        lin += 0.10*bac*vec3(1.00,1.00,1.00)*(0.5+0.5*occ);\n        lin += 0.25*occ*vec3(0.15,0.17,0.20);\t \n\n        vec3 matcol = vec3(\n            0.5+0.5*cos(0.0+2.0*tmat.z),\n            0.5+0.5*cos(1.0+2.0*tmat.z),\n            0.5+0.5*cos(2.0+2.0*tmat.z) );\n        col = matcol * lin;\n    }\n\n    return pow( col, vec3(0.4545) );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    vec3 col = render( fragRayOri + vec3(0.0,1.0,2.5), fragRayDir );\n    fragColor = vec4( col, 1.0 );\n}\n\nvoid mainPlain(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\n    float ctime = iTime;\n    // camera\n    vec3 ro = 1.1*vec3(2.5*sin(0.25*ctime),1.0+1.0*cos(ctime*.13),2.5*cos(0.25*ctime));\n    vec3 ww = normalize(vec3(0.0) - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.5*ww );\n\n    vec4 col;\n    mainVR(col, fragCoord, ro - vec3(0.0,1.0,2.5), rd);\n\n    fragColor = col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainAnaglyph(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\n    float ctime = iTime;\n    // camera\n    vec3 ro = 1.1*vec3(2.5*sin(0.25*ctime),1.0+1.0*cos(ctime*.13),2.5*cos(0.25*ctime));\n    vec3 ww = normalize(vec3(0.0) - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    //vec3 rd = normalize( p.x*uu + p.y*vv + 2.5*ww );\n    vec3 ta = vec3(0.0);\n\n\tvec3 eyes_line = normalize(cross(vec3(0.0, 1.0, 0.0), ro));\n\tfloat d_eyes_2 = 0.08;\n\tvec3 ro_left = ro + d_eyes_2 * eyes_line;\n\tvec3 ro_right = ro - d_eyes_2 * eyes_line;\n    vec3 ta_left = ta + d_eyes_2 * eyes_line;\n    vec3 ta_right = ta - d_eyes_2 * eyes_line;\n\n\n\t// camera-to-world transformation\n    mat3 ca_left  = setCamera(ro_left, ta_left, 0.0);\n    mat3 ca_right = setCamera(ro_right, ta_right, 0.0);\n\n    // rays' direction\n\tvec3 rd_left = ca_left * normalize( vec3(p.xy,1.0) );\n\tvec3 rd_right = ca_right * normalize( vec3(p.xy,1.0) );\n\n    // render both eye\n    vec4 col_left;\n    mainVR(col_left, fragCoord, ro_left - vec3(0.0,1.0,2.5), rd_left);\n    vec4 col_right;\n    mainVR(col_right, fragCoord, ro_left - vec3(0.0,1.0,2.5), rd_right);\n\n    //vec3 col = vec3( col_right.r, col_left.g, col_left.b);\n    vec3 col = vec3( col_left.r, col_right.g, col_right.b);\n\n    fragColor = vec4(col, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    // mainPlain(fragColor, fragCoord);\n    mainAnaglyph(fragColor, fragCoord);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}