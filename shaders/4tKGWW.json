{
    "Shader": {
        "info": {
            "date": "1474651350",
            "description": "Kaleidoscopic IFS",
            "flags": 0,
            "hasliked": 0,
            "id": "4tKGWW",
            "likes": 6,
            "name": "Kaleidoscopic IFS",
            "published": 3,
            "tags": [
                "ifs",
                "kaleidoscopic"
            ],
            "usePreview": 0,
            "username": "vox",
            "viewed": 685
        },
        "renderpass": [
            {
                "code": "\n//-----------------CONSTANTS MACROS-----------------\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n\n//-----------------UTILITY MACROS-----------------\n\n#define time (sin(((sin(float(__LINE__)*100.0)/GR/PI/E+1.0/GR)*iTime+100.0)/100.0)*100.0)\n#define saw(x) (acos(cos(x))/PI)\n#define angle(uv) (atan((uv).y, (uv).x))\n#define angle_percent(uv) ((angle(uv)/PI+1.0)/2.0)\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n\n#define GRID_COUNT (50.0)\n#define hash(p) (fract(sin(vec2( dot(p,vec2(127.5,313.7)),dot(p,vec2(239.5,185.3))))*43458.3453))\n\n#define MAX_DIM (max(iResolution.x, iResolution.y))\n\n#define MATRIX_W (floor(MAX_DIM/75.0))\n#define MATRIX_H (floor(MAX_DIM/75.0))\n\n#define BORDER_SCALE 2.0\n\n\nfloat de(vec3 p) {\n    return length(cos(p)+2.0)-1.0;\n}\n\nvec3 transform1(vec3 p)\n{\n\tfloat atime = iTime*0.3;\n\t\n\tvec3 ro = 3.0*vec3(cos(atime), 0, -sin(atime));\n\tvec3 ww = normalize(vec3(0, sin(iTime), 0) - ro);\n\tvec3 uu = normalize(cross(vec3(0, 1, 0), ww));\n\tvec3 vv = normalize(cross(ww, uu));\n\tvec3 rd = normalize(uu*p.x + vv*p.y + 1.97*ww);\n    \n    vec3 col = vec3(1.0);\n\t\n\tfloat t = 0.0;\n    \n\tfor(int i = 0; i < 16; i++) {\n\t\tfloat d = de(ro + rd*t);\n\t\tif(d < 0.001*t || t >= 10.0) break;\n\t\tt += d;\n\t}\n\t\n    vec3 pos = vec3(0.0);\n        pos = ro + rd*t;\n\t\tvec2 h = vec2(0.001, 0.0);\n\t\tvec3 nor = normalize(vec3(\n\t\t\tde(pos + h.xyy) - de(pos - h.xyy),\n\t\t\tde(pos + h.yxy) - de(pos - h.yxy),\n\t\t\tde(pos + h.yyx) - de(pos - h.yyx)\n\t\t));\n        col = nor;\n    \n    return nor;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\n    \n\tvec3 p = vec3(-1.0 + 2.0*fragCoord.xy/iResolution.xy, 0.0);\n\tp.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(0.0);\n    float fog = 1.0;\n    for(int i = 0; i < 4; i++)\n    {\n    \tp = transform1(p);\n        col += saw(p*PI*2.0);\n        fog /= log(length(p.z)+1.0)+1.0;\n    }\n    int t = int(saw(time)*1.9);\n    \tfragColor.rgb = col*fog;\n    fragColor.a = 1.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}