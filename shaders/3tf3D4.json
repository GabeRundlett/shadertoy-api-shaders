{
    "Shader": {
        "info": {
            "date": "1556290533",
            "description": "Tribute to Vasarely",
            "flags": 0,
            "hasliked": 0,
            "id": "3tf3D4",
            "likes": 4,
            "name": "Tribute to Vasarely",
            "published": 3,
            "tags": [
                "vasarely"
            ],
            "usePreview": 0,
            "username": "flyingrub",
            "viewed": 433
        },
        "renderpass": [
            {
                "code": "#define TAU 6.28318530718\n\nconst float grid = 9.;\n#define pixel_width 3./iResolution.y*grid\n#define slowt iTime/5.\n\nfloat easeInOut(float t) {\n    if ((t *= 2.0) < 1.0) {\n        return 0.5 * t * t;\n    } else {\n        return -0.5 * ((t - 1.0) * (t - 3.0) - 1.0);\n    }\n}\n\nfloat linearstep(float begin, float end, float t) {\n    return clamp((t - begin) / (end - begin), 0.0, 1.0);\n}\n\nfloat stroke(float d, float size, float width) {\n\treturn smoothstep(pixel_width,0.0,abs(d-size)-width/2.);\n}\n\nfloat fill(float d, float size) {\n\treturn smoothstep(pixel_width,0.0,d-size);\n}\n\nfloat circleSDF(vec2 uv) {\n\treturn length(uv);\n}\n\nvec2 rotate(vec2 _uv, float _angle){\n    _uv =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _uv;\n    return _uv;\n}\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-iResolution.xy*.5)/iResolution.y;\n    uv *= grid;\n    uv.y += mod(grid,2.)* .5;\n    vec2 id = floor(uv);\n    vec2 gv = fract(uv)*2.-1.;\n    \n    float a = floor(random(id*floor(slowt))*8.)/8.;\n    float next_a = floor(random(id*(floor(slowt)+1.))*8.)/8.;\n    float angle = mix(a,next_a,easeInOut(linearstep(.5,1.,fract(slowt))));\n    gv = rotate(gv,angle*TAU);\n    \n    float col = fill(circleSDF(gv), .9);\n    col = min(col,smoothstep(pixel_width,0.,gv.x-.6));\n    col = min(col, step(uv.x,grid-1.));\n    col = min(col, 1.-step(uv.x,-grid+1.));\n    \n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}