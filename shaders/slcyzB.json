{
    "Shader": {
        "info": {
            "date": "1660029878",
            "description": "Trying to make some cartoony bricks. might try to add some cracks in them later.",
            "flags": 0,
            "hasliked": 0,
            "id": "slcyzB",
            "likes": 7,
            "name": "Cartoon Bricks",
            "published": 3,
            "tags": [
                "procedural",
                "noise",
                "cartoon",
                "bricks"
            ],
            "usePreview": 0,
            "username": "intrakits",
            "viewed": 239
        },
        "renderpass": [
            {
                "code": "vec2 rand2(vec2 p)\n{\n\tvec2 q = vec2(dot(p,vec2(127.1,311.7)), \n\t\tdot(p,vec2(269.5,183.3)));\n\treturn fract(sin(q)*43758.5453);\n}\n\nfloat rand(vec2 p)\n{\n\treturn fract(sin(dot(p,vec2(419.2,371.9))) * 833458.57832);\n}\n\nfloat iqnoise(in vec2 pos, float irregular, float smoothness)\n{\n\tvec2 cell = floor(pos);\n\tvec2 cellOffset = fract(pos);\n\n\tfloat sharpness = 1.0 + 63.0 * pow(1.0-smoothness, 4.0);\n\t\n\tfloat value = 0.0;\n\tfloat accum = 0.0;\n\n\tfor(int x=-2; x<=2; x++ )\n\tfor(int y=-2; y<=2; y++ )\n\t{\n\t\tvec2 samplePos = vec2(float(y), float(x));\n\n\t\tvec2 center = rand2(cell + samplePos) * irregular;\n\t\tfloat centerDistance = length(samplePos - cellOffset + center);\n\n\t\tfloat sam = pow(1.0 - smoothstep(0.0, 1.414, centerDistance), sharpness);\n\n\t\tfloat color = rand(cell + samplePos);\n\t\tvalue += color * sam;\n\t\taccum += sam;\n\t}\n\n\treturn value/accum;\n}\nfloat DrawSquare (vec2 uv, float width, float height, float posX, float posY, float blur){\n    float w = length((uv.x + posX));\n    float h = length(uv.y + posY);\n    float col = smoothstep(width,width-blur, w);\n    col *= smoothstep(height,height-blur, h);\n    return col;\n}\nmat2 rotate(float r) {\n    float c = cos(r);\n    float s = sin(r);\n    return mat2(c, -s, s, c);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=.5;\n    uv.x*=iResolution.x/iResolution.y;\n    uv.y+=iTime*.2;\n    float id = rand(floor((uv-iqnoise(10.*uv,.9,.9)*.03)*4.));\n    uv = fract((uv-iqnoise(10.*uv,.9,.9)*.03)*4.)-.5;\n    uv.x*=max(1.7,id*2.3);\n    \n    vec3 col = vec3(max(iqnoise((uv-rand(uv*20.)*.1-vec2(3,0))*4., .9, .3),.2));\n    float off =iqnoise(20.*uv,.9,.9);\n    col += DrawSquare(uv-off*.03, .8, .4, 0., 0., .001)*off;\n    col-=DrawSquare(uv-off*.03, .73+id*.03, .33+id*.03, 0., 0., .001)*2.;\n    col = clamp(col,0.,1.);\n    col+=5.*DrawSquare(uv-off*.03, .73+id*.03, .33+id*.03, 0., 0., .001)*max(iqnoise(10.*uv-rand(uv*30.)*.3-id*20.,.9,.1),.4)*.2;\n    \n    vec2 gv = uv;\n    gv*=rotate(3.1415/6.2);\n    float bounds = max(smoothstep(-.37,-.4,uv.y),smoothstep(.4,.41,uv.y));\n    //\n    col+=DrawSquare(gv-off*.03, 1.4, .02, 0., 0., .001)*bounds*off;\n    \n    \n    gv=uv;\n    gv*=rotate(-3.1415/6.2);\n    col+=DrawSquare(gv-off*.03, 1.4, .02, 0., 0., .001)*bounds*off;\n    col*=smoothstep(0.9,.8,abs(uv.x));\n    col*=smoothstep(0.55,.3,abs(uv.y));\n    float r = smoothstep(0.,.5,id);\n    float g = smoothstep(0.4,.7,id);\n    float b = smoothstep(0.7,1.,id);\n    col*=max(vec3(r,g,b)*.7,vec3(.4));\n\n   \n   // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}