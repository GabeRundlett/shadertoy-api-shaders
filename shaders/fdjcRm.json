{
    "Shader": {
        "info": {
            "date": "1643293578",
            "description": "The Banner of Arms of the Kingdom of Scotland, forming one quarter of the Royal Standard (or two quarters of the Standard used in Scotland itself).\n\n A little slower than the English banner, with twice as many curves",
            "flags": 16,
            "hasliked": 0,
            "id": "fdjcRm",
            "likes": 13,
            "name": "The Royal Banner of Scotland",
            "published": 3,
            "tags": [
                "bezier",
                "flag",
                "fixedpoint",
                "svg",
                "arms",
                "jings",
                "crivens"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 374
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// The Royal Banner of Scotland, Matthew Arcus, mla. 2022\n//\n////////////////////////////////////////////////////////////////////////////////\n//\n// Variation of https://www.shadertoy.com/view/fdXcDX - see there for further\n// details.\n//\n// https://en.wikipedia.org/wiki/Royal_Banner_of_Scotland, first recorded\n// use by Alexander II in 1222.\n//\n// Exploits rotational symmetry to speed things along, but slower than\n// the English banner as there are just more curves.\n//\n// Mouse to zoom, 'x' to draw progressively.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nint wind = 0; // Compute winding number here\nvoid polywind(vec2 p, vec2 q, vec2 r) {\n  // NR winding number computation\n  q -= p; r -= p; // Relative to p\n  float t = determinant(mat2(q,r));\n  if (q.y <= 0.0) {\n    if (r.y > 0.0 && t > 0.0) wind++;\n  } else {\n    if (r.y <= 0.0 && t < 0.0) wind--;\n  }\n}\n\n// The usual function, but also include segment in winding number computation\nfloat segment(vec2 p, vec2 q, vec2 r) {\n  polywind(p,q,r);\n  p -= q; r -= q; // Relative to q\n  float t = dot(p,r)/dot(r,r);\n  t = clamp(t, 0.0, 1.0);\n  return length(p-t*r);\n}\n\nconst int nbeziercoeffs = 16;\nvec4 beziercoeff(int i) {\n  // Matrix formulation due to Shane.\n  const int N = nbeziercoeffs;\n  float t = float(i)/float(N);\n  float u = 1.0-t, t2 = t*t, u2 = u*u;\n  return vec4(u*u2,3.0*t*u2,3.0*u*t2,t*t2);\n}\n\n// Distance to Cubic Bezier.\n// Split the path into N subsegments.\nfloat bezier(vec2 p, mat4x2 m) {\n  // Since we spend most of the time deciding not to draw\n  // curves, the value of N doesn't seem to be time critical.\n  const int N = nbeziercoeffs;\n  vec2 q = m[0];\n  float d = 1e8;\n  for (int i = 1; i <= N; i++) {\n    vec2 r = m*beziercoeff(i);\n    d = min(d,segment(p,q,r));\n    q = r;\n  }\n  return d;\n}\n\nvec3 getcolor(int i) {\n  vec3 col = vec3(1,0,1);\n  // Colors from Wikipedia SVG\n  if (i == 0) col = vec3(0xa0,0,0)/255.0;\n  if (i == 1) col = vec3(0x0a,0x26,0x62)/255.0;\n  if (i == 2) col = vec3(0xff,0xd1,0x28)/255.0;\n  if (i == 3) col = vec3(0xff,0xd2,0x14)/255.0;\n  if (i == 4) col = vec3(0);\n  if (i == 5) col = vec3(0xa0,0,0)/255.0;\n\n  if (i == 6) col = vec3(0xb4,0,0x1e)/255.0;\n  if (i == 7) col = vec3(1);\n  if (i == 8) col = vec3(0x1e,0x82,0xd2)/255.0;\n  col = pow(col,vec3(2.2));\n  return col;\n}\n\nvec2 decode(uint n) {\n  return vec2(n>>16,n&0xffffu)/64.0;\n}\n\nvec4 decode(uvec2 p) {\n  return vec4(decode(p.x),decode(p.y));\n}\n\nbool inrect(vec2 p, vec4 rect) {\n  return p.x >= rect.x && p.x <= rect.z && p.y >= rect.y && p.y <= rect.w;\n}\n\nvec2 quarter(vec2 p) {\n  p -= vec2(250,125);\n  p = -abs(p);\n  p += vec2(250,125);\n  return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 p = (fragCoord-0.0*iResolution.xy)/iResolution.xy;\n  if (iMouse.z > 0.0) {\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    p -= mouse;\n    p *= 0.25;\n    p += mouse;\n  }\n  //vec2 p = fragCoord/iResolution.xy;\n  //p *= 4.0;\n  p.y = 1.0-p.y;\n  p *= vec2(500,250);\n  vec3 col = getcolor(2);\n  float eps = 2.0; // Allow for line width \n  float px = fwidth(p.x);\n  float lwidth = 0.5;\n  int N = paths.length();\n  if (key(CHAR_X)) N = min(int(iTime),N); // Progressive effect\n  for (int i = 0; i < N; i++) {\n    if (i == 6) continue;\n    if (i == 52) p = quarter(p); // Draw the frame\n    vec4 box = decode(boxes[i]);\n    if ((p.x >= box.x-eps && p.x <= box.z+eps && p.y >= box.y-eps && p.y <= box.w+eps)) {\n      //assert(i != N-1); // With progressive drawing, show bounding boxes\n      int start = i == 0 ? 0 : paths[i-1];\n      int end = paths[i];\n      vec2 initpos = decode(points[start/2]); //vec2(points[start],points[start+1]);\n      vec2 p0 = initpos;\n      wind = 0;\n      float d = 1e8;\n      for (int j = start+2; j < end; j += 6) {\n        vec2 c0 = decode(points[(j+0)/2]);//vec2(points[j+0],points[j+1]);\n        vec2 c1 = decode(points[(j+2)/2]);//vec2(points[j+2],points[j+3]);\n        vec2 p1 = decode(points[(j+4)/2]);vec2(points[j+4],points[j+5]);\n        vec2 box1 = min(min(c0,c1),min(p0,p1))-eps;\n        vec2 box2 = max(max(c0,c1),max(p0,p1))+eps;\n        if (p.x < box1.x || p.y  < box1.y  || p.x > box2.x || p.y > box2.y) {\n          polywind(p,p0,p1);\n        } else {\n          d = min(d,bezier(p,mat4x2(p0,c0,c1,p1)));\n        }\n        p0 = p1;\n      }\n      polywind(p,p0,initpos); // Close curve if necessary\n      if (colors[i] != 0 && (wind&1) == 1) col = getcolor(colors[i]);;\n      col = mix(vec3(0),col,smoothstep(0.0,px,d-lwidth));\n    }\n  }\n  // Draw frame\n  for (int i = 0; i < frame.length(); i+=2) {\n    vec4 outer = frame[i]; // (x0,y0,x1,y1)\n    vec4 inner = frame[i+1]; // (x0,y0,x1,y1)\n    if (inrect(p,outer) && !inrect(p,inner)) {\n      col = getcolor(6);\n    }\n  }\n  for (int i = 0; i < frame.length(); i++) {\n    vec4 rect = frame[i]; // (x0,y0,x1,y1)\n    col = mix(vec3(0),col,smoothstep(0.0,px,segment(p,rect.xy,rect.xw)-lwidth));\n    col = mix(vec3(0),col,smoothstep(0.0,px,segment(p,rect.xy,rect.zy)-lwidth));\n    //col = mix(vec3(0),col,smoothstep(0.0,px,segment(p,rect.zy,rect.zw)-lwidth));\n    //col = mix(vec3(0),col,smoothstep(0.0,px,segment(p,rect.xw,rect.zw)-lwidth));\n  }\n  col = pow(col,vec3(0.4545));\n  if (alert) col = 1.0-col;\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))\n\nconst uint points[] = uint[](\n995824862u, 997921960u, 997921960u, 1000019059u, 1002771626u, 1002771626u, 1005589728u, \n992285384u, 995234578u, 995234578u, 998249307u, 1000805147u, 1000805147u, 1003360987u, \n947001990u, 966138265u, 986192190u, 986192190u, 986192190u, 972888499u, 965220940u, 957553382u, 949230354u, 949230354u, 971905867u, 977214150u, 983833197u, 985209434u, 987109960u, 989207094u, 989207093u, 989207092u, 989207092u, 989207092u, 989207093u, 989207094u, 997202417u, 1008474551u, 1008474551u, 1008474551u, 997202417u, 989207094u, 989469255u, 991763190u, 989862719u, 987831179u, 980884448u, 988159013u, 995499114u, 1003166805u, 1003166805u, 1003166805u, 999693242u, 1016797970u, 999693242u, 1003166805u, 1003166805u, 1004477638u, 998186288u, 998186288u, 1026825487u, 1043078068u, 1043078068u, 1043078161u, 1040129291u, 1040129291u, 1051401455u, 1058413738u, 1061100637u, 1063722001u, 1066736519u, 1071389773u, 1076043027u, 1092361515u, 1092361515u, 1091902600u, 1091902600u, 1091378148u, 1098390673u, 1114381456u, 1121197191u, 1119558768u, 1119558768u, 1117985881u, 1119558768u, 1119558768u, 1121197191u, 1123097733u, 1124342914u, 1124342914u, 1110711280u, 1106385177u, 1119033993u, 1131682808u, 1150622458u, 1150622458u, 1133648606u, 1141316015u, 1141316015u, 1155930612u, 1160976682u, 1160976682u, 1137973485u, 1146296117u, 1146296117u, 1165629297u, 1169954487u, 1169954487u, 1146951347u, 1149310345u, 1145967924u, 1142625503u, 1144984750u, 1144984750u, 1161958595u, 1165300793u, 1165300793u, 1141969977u, 1140659003u, 1140658890u, 1140658777u, 1136005614u, 1135677855u, 1135219007u, 1140002964u, 1140002964u, 1140002964u, 1130631446u, 1122308386u, 1113985326u, 1116344440u, 1110380595u, 1104351215u, 1097731994u, 1088360342u, 1079054226u, 1081740955u, 1081740955u, 1081740955u, 1072041740u, 1066078029u, 1060114318u, 1056116626u, 1047793558u, 1039470490u, 1033768805u, 1021120483u, 1008472160u, 997527620u, 983830596u, 970199108u, 973541545u, 976556249u, 979505417u, 976228743u, 976228868u, 976228993u, 983503477u, 991498942u, 999494406u, 1008472770u, 1014174345u, 1019548243u, 1038619224u, 1040257625u, 1039012411u, 1038094876u, 1038029308u, 1038094876u, 1039012411u, 1040257625u, 1040388697u, 1040454233u, 1040454233u, 1041568346u, 1041568346u, 1042747994u, 1042813520u, 1042813520u, 1042879045u, 1042813520u, 1042813520u, 1042747994u, 1044189788u, 1044189788u, 1045697117u, 1044189788u, 1044189788u, 1042747994u, 1042616942u, 1042616942u, 1042485890u, 1047597781u, 1055331086u, 1055331086u, 1055331086u, 1047597781u, 1042485890u, 1042485890u, 1042485890u, 1042420355u, 1042027408u, 1049105463u, 1049105554u, 1049040098u, 1041110243u, 1041110243u, 1041110243u, 1003820259u, 993203421u, 982521048u, 984749337u, 984749455u, 984749574u, 978523691u, 978523691u, 989599292u, 992286219u, 994973152u, 997594549u, 1005131162u, 1014896074u, 1024660987u, 1037571525u, 1044649397u, 1051792805u, 1048188449u, 1048188449u, 1048188449u, 1040651981u, 1028658904u, 1016731362u, 1007818445u, 1000281907u, 995170168u, 986126225u, 978851760u, 981211069u, 981211069u, 983635914u, 981211069u, 981211069u, 978851760u, 975312830u, 972101582u, 970069989u, 963909675u, 936384647u, 920852501u, 920852501u, 919476472u, 938154264u, 938154264u, 949229869u, 934615487u, 926882315u, 922229393u, 915872453u, 916134600u, 916265673u, 916265673u, 917576405u, 917576405u, 918887137u, 920263384u, 920263384u, 921705168u, 920263384u, 920263384u, 918887137u, 918952674u, 918952674u, 919083747u, 918952674u, 918952674u, 918887137u, 917838567u, 917838567u, 916789997u, 922753799u, 934812446u, 947001990u, 947001990u, 947001990u, 947001990u, \n934615487u, 949229870u, 938154264u, 938154264u, 919476472u, 920852502u, 920852502u, 936384647u, 963909675u, 970069989u, 972101582u, 975312830u, 978851760u, 978655151u, 978655151u, 978524078u, 978524078u, 929896120u, 909579324u, 889328065u, 843518080u, 843518080u, 843518080u, 829362229u, 838340386u, 847318544u, 837881285u, 834080232u, 830279178u, 825560620u, 821366293u, 817106430u, 812846728u, 806227506u, 799608284u, 798231982u, 792071684u, 785976922u, 778374792u, 781258416u, 782044860u, 782110403u, 781717191u, 783945421u, 796987131u, 810225629u, 796987131u, 783945421u, 781717191u, 780734161u, 776867527u, 773197482u, 768020098u, 760483544u, 764219153u, 768020299u, 761401380u, 771756045u, 782176246u, 792989606u, 793514003u, 793972864u, 808587512u, 793514243u, 778375439u, 770838828u, 771756429u, 772739566u, 780276527u, 788271741u, 796332492u, 812388818u, 817107570u, 821826322u, 828445636u, 828445636u, 829756330u, 829756330u, 831067024u, 831067024u, 836047950u, 835720391u, 838210741u, 838210741u, 840701090u, 842536278u, 842536278u, 844371466u, 847189479u, 847189479u, 850073029u, 850859681u, 850859681u, 851711869u, 856364877u, 856364877u, 861017884u, 861017884u, 862066675u, 863377467u, 865867813u, 865867813u, 868358159u, 868358159u, 869996688u, 877992209u, 885463434u, 912333472u, 915872453u, 922229393u, 926882315u, 934615487u, 934615487u, 934615487u, 934615487u, \n810159696u, 815861471u, 815861471u, 821628783u, 815861471u, 815861471u, 810159696u, 810159696u, 810159696u, 810159696u, \n1040454233u, 1040454233u, 1040323161u, 1040257625u, 1040912999u, 1041633909u, 1042485890u, 1042616942u, 1042616942u, 1042747995u, 1041568346u, 1041568346u, 1040454233u, 1040454233u, 1040454233u, 1040454233u, \n916265674u, 916265674u, 916134600u, 915872453u, 914889421u, 913906387u, 912857815u, 912857815u, 914299618u, 916789997u, 917838567u, 917838567u, 918887137u, 917576405u, 917576405u, 916265674u, 916265674u, 916265674u, 916265674u, \n1089938112u, 1090658966u, 1090789995u, 1090593346u, 1089217090u, 1051206228u, 1039081988u, 1026695602u, 1004806585u, 990782038u, 976757491u, 951460772u, 939074257u, 935862938u, 934224489u, 933569087u, 931537350u, 937435523u, 937435523u, 937435523u, 901456395u, 925639513u, 899228600u, 884613738u, 884613738u, 884613738u, 877405132u, 897328128u, 915219503u, 930685976u, 930685976u, 930685976u, 912991596u, 891692375u, 891692375u, 900998677u, 931931403u, 931931403u, 930293092u, 933635529u, 933635529u, 959259862u, 961553929u, 963913532u, 964241180u, 968566604u, 972892029u, 979576895u, 966600763u, 953559095u, 938616830u, 928262138u, 917972982u, 885336135u, 878389222u, 871376773u, 862398276u, 861021903u, 859711066u, 854730314u, 850732622u, 846734930u, 839722614u, 842082019u, 842082019u, 841033508u, 838149913u, 850339751u, 850339751u, 862529589u, 850339751u, 850339751u, 838149913u, 837691160u, 837232405u, 836773648u, 832775911u, 823076523u, 821765900u, 820455277u, 822749121u, 820783090u, 818751522u, 816130099u, 816457855u, 816785612u, 812788126u, 820455842u, 828058022u, 828778825u, 840706385u, 852699481u, 873015609u, 864037262u, 855058915u, 844704255u, 843721288u, 842738320u, 847063676u, 851389056u, 855714436u, 859712193u, 860695289u, 861678386u, 868690782u, 870722285u, 872688252u, 874326475u, 883042754u, 892807608u, 896805411u, 896805411u, 903228076u, 908274412u, 911289079u, 911289079u, 911813267u, 919546485u, 927214168u, 931736234u, 933833438u, 935865107u, 940190580u, 949234569u, 949234569u, 948447989u, 956181239u, 963848953u, 967257003u, 981871568u, 981871568u, 982264693u, 987704155u, 993143618u, 995961605u, 996158181u, 996158181u, 997862306u, 1011755975u, 1011755975u, 1012476817u, 1017391950u, 1023027968u, 1025125083u, 1039477465u, 1053829847u, 1064446503u, 1064446503u, 1064446503u, 1046817408u, 1034168855u, 1021520302u, 1002841888u, 1053107778u, 1068115462u, 1076110860u, 1078535696u, 1078011196u, 1084498950u, 1089938112u, 1089938112u, 1089938112u, 1089938112u, \n834611185u, 826943401u, 821372892u, 821372892u, 821372892u, 826943401u, 834611185u, 842278969u, 851716246u, 851716246u, 851716246u, 842278969u, 834611185u, 834611185u, 834611185u, 834611185u, \n1331826582u, 1324289770u, 1316687367u, 1300303367u, 1300303367u, 1322519797u, 1303383075u, 1303383075u, 1297747345u, 1265241489u, 1201409425u, 1183649663u, 1189221211u, 1193547359u, 1241520098u, 1274091886u, 1302010561u, 1307712824u, 1307712824u, 1307581748u, 1307385136u, 1307188525u, 1293360153u, 1276845071u, 1255152515u, 1233197814u, 1250171303u, 1250171303u, 1204558433u, 1234836477u, 1234836477u, 1228872777u, 1228872777u, 1222843542u, 1204886872u, 1185553392u, 1185553392u, 1183587692u, 1208556916u, 1208556916u, 1161961293u, 1211899999u, 1211899999u, 1191911237u, 1221533254u, 1221533254u, 1229201346u, 1254497991u, 1254497991u, 1242177219u, 1222188364u, 1264459011u, 1306729658u, 1322393748u, 1274159619u, 1225859955u, 1173627202u, 1163927522u, 1154293379u, 1121328266u, 1121328266u, 1121262729u, 1121262729u, 1121197191u, 1114381456u, 1098390673u, 1091378148u, 1091902600u, 1091902600u, 1092361515u, 1092361515u, 1076043027u, 1071389773u, 1066736519u, 1063722001u, 1061100637u, 1058413738u, 1051401455u, 1040129291u, 1040129291u, 1043143697u, 1043143604u, 1043143604u, 1026825487u, 998186288u, 998186288u, 1004477638u, 1003166805u, 1003166805u, 995499114u, 988159013u, 980884448u, 987831179u, 989862719u, 991763190u, 989469255u, 989207094u, 987109960u, 985274970u, 983833197u, 977214150u, 971905867u, 949230354u, 949230354u, 957553382u, 965220940u, 972888499u, 986192190u, 986192190u, 986192190u, 966138265u, 947001990u, 934812446u, 922753799u, 916789997u, 916724461u, 916724461u, 916593390u, 898898767u, 848370983u, 848370983u, 826416621u, 809770651u, 786505427u, 763174668u, 750526127u, 738532938u, 726539749u, 728571563u, 728571563u, 728571626u, 728571626u, 728571688u, 728571814u, 743186261u, 751837045u, 760487829u, 731193427u, 715268203u, 699277444u, 707600661u, 711270677u, 714940693u, 715923713u, 720904546u, 725885379u, 731914679u, 737222986u, 742531293u, 753868988u, 760881284u, 767828043u, 768155776u, 768155885u, 768155994u, 763502990u, 756163027u, 748888600u, 758522420u, 762520136u, 766517852u, 768877169u, 771826353u, 774841074u, 781525693u, 781525443u, 781525192u, 790831300u, 798498903u, 806100970u, 806101124u, 805773585u, 805446046u, 807805363u, 813113787u, 818422211u, 824123815u, 827793657u, 831397963u, 843063432u, 843063432u, 846078120u, 850403480u, 850403480u, 848044087u, 853090274u, 853090274u, 857743472u, 871374964u, 871374964u, 868360219u, 873013190u, 873013190u, 880681108u, 896016500u, 896016500u, 892674087u, 894312370u, 894312370u, 899686435u, 909320182u, 909320182u, 904339349u, 908992276u, 908992276u, 916660186u, 929963958u, 929963958u, 923279112u, 933633776u, 939925288u, 946282337u, 955588392u, 955588392u, 964566792u, 966270853u, 966270853u, 966270853u, 976690985u, 984227572u, 988028633u, 992419535u, 996548302u, 995106466u, 995106466u, 993664631u, 995106466u, 995106466u, 996548302u, 1004216010u, 1010835172u, 1010835172u, 1010835172u, 1004216010u, 996548302u, 996679379u, 996679379u, 996875992u, 1010507851u, 1043472532u, 1059791032u, 1076109533u, 1087054206u, 1087054206u, 1087447429u, 1087447429u, 1087906189u, 1079648351u, 1056710509u, 1056710509u, 1056710509u, 1079648351u, 1087906189u, 1090462140u, 1090462140u, 1093083628u, 1090462140u, 1090462140u, 1087906189u, 1089479111u, 1090462212u, 1090658882u, 1090658882u, 1090789954u, 1090789954u, 1093280322u, 1093280322u, 1095836226u, 1093280322u, 1093280322u, 1090789954u, 1090789954u, 1090658882u, 1090658882u, 1090789996u, 1090658966u, 1089938112u, 1084498950u, 1078076732u, 1078535696u, 1079059985u, 1079453201u, 1079453201u, 1081812499u, 1081812499u, 1084171798u, 1081812499u, 1081812499u, 1079453201u, 1079453201u, 1079059985u, 1078535696u, 1078666832u, 1079453320u, 1081091764u, 1088169841u, 1115236559u, 1097935319u, 1080634079u, 1076243188u, 1078012919u, 1078012919u, 1080109866u, 1092758249u, 1092758249u, 1089416192u, 1098722437u, 1098722437u, 1096428467u, 1106389850u, 1106389850u, 1115368505u, 1131031532u, 1131031532u, 1119365995u, 1119365825u, 1119365655u, 1124346315u, 1131358796u, 1138371277u, 1150364365u, 1159342720u, 1168321076u, 1186605369u, 1186605571u, 1186605773u, 1189620490u, 1192962854u, 1196239682u, 1195584403u, 1189948396u, 1184312389u, 1179266254u, 1176644907u, 1173958024u, 1160654430u, 1155018253u, 1149316540u, 1138371976u, 1135029692u, 1131687409u, 1123364353u, 1128017458u, 1132670562u, 1132670651u, 1131687684u, 1130704716u, 1136996180u, 1134374821u, 1134374821u, 1139617588u, 1150824156u, 1139617588u, 1134374821u, 1134374821u, 1131687926u, 1126051826u, 1133654075u, 1141321859u, 1142370524u, 1150693560u, 1159016595u, 1161638068u, 1161965820u, 1162293573u, 1171272126u, 1174941997u, 1178611868u, 1177628626u, 1177300893u, 1176973161u, 1180970844u, 1186606892u, 1192242940u, 1201942223u, 1202597688u, 1203253153u, 1201287287u, 1205285007u, 1209282728u, 1214591156u, 1214918743u, 1215246330u, 1217605602u, 1223897042u, 1230254017u, 1235234741u, 1235562337u, 1235889932u, 1235234507u, 1225207499u, 1215246027u, 1214262971u, 1214262890u, 1214262809u, 1212231096u, 1224879532u, 1237527968u, 1250438535u, 1254436178u, 1254436178u, 1244409146u, 1240214758u, 1236020371u, 1229532318u, 1229532318u, 1229532318u, 1229794435u, 1236413557u, 1243098216u, 1264593981u, 1269312408u, 1269312408u, 1261054913u, 1254173563u, 1247292213u, 1244670775u, 1244670775u, 1244670775u, 1248013074u, 1257712402u, 1267477266u, 1278159505u, 1278159505u, 1278159505u, 1269049995u, 1265707611u, 1262430762u, 1258170882u, 1252207100u, 1252207100u, 1259284905u, 1268394398u, 1277503891u, 1283008794u, 1283008794u, 1283008794u, 1276193072u, 1269508349u, 1262823626u, 1252403423u, 1252403423u, 1252403423u, 1257318540u, 1268590724u, 1279928443u, 1291462669u, 1291462669u, 1291462669u, 1281959954u, 1276192724u, 1276192724u, 1263937379u, 1262429944u, 1260856972u, 1264199287u, 1261839938u, 1258890751u, 1247552916u, 1249191135u, 1249191135u, 1245521090u, 1234904396u, 1224222165u, 1205544596u, 1189029435u, 1189029435u, 1165174231u, 1173627674u, 1173627674u, 1334978083u, 1335828123u, 1336743872u, 1224415168u, 1210258422u, 1210258422u, 1186729501u, 1269305001u, 1269305001u, 1278611135u, 1271074672u, 1263472674u, 1262621153u, 1262621153u, 1262621153u, 1269895662u, 1275204045u, 1275204045u, 1277235719u, 1271468637u, 1265701555u, 1261704118u, 1273697378u, 1285690638u, 1311905054u, 1311905054u, 1311905054u, 1301222530u, 1306989531u, 1312756532u, 1318523663u, 1320292995u, 1320292995u, 1332745271u, 1357124453u, 1357124453u, 1340740313u, 1344279068u, 1347817824u, 1350504741u, 1350504649u, 1350504649u, 1369575604u, 1369575275u, 1369575275u, 1339363394u, 1331826582u, 1331826582u, 1331826582u, 1331826582u, \n1154625506u, 1149382684u, 1149382842u, 1149382842u, 1149382842u, 1149382684u, 1154625506u, 1159802792u, 1165176671u, 1165176671u, 1165176671u, 1159802792u, 1154625506u, 1154625506u, 1154625506u, 1154625506u, \n1276056033u, 1276056033u, 1276383662u, 1282216312u, 1288048962u, 1295913173u, 1297879168u, \n1307841736u, 1307841736u, 1284904123u, 1289425693u, \n1106978479u, 1106978479u, 1113008049u, 1135617953u, \n1203513120u, 1209149208u, 1209149208u, 1214850832u, 1214850832u, 1220814600u, 1220814680u, 1220814761u, 1220814842u, 1220814842u, \n843327092u, 843327092u, 828646783u, 810165826u, 810165826u, 824845890u, 829368034u, 834217733u, 834217733u, 839067431u, 840640263u, 840640263u, 842213096u, 842147560u, 839788185u, 843327092u, 843327092u, 843327092u, 843327092u, \n821372892u, 831858664u, 842803273u, 851716246u, \n816785465u, 811607973u, 790308782u, 790308782u, 798303954u, 821700390u, 821700390u, 821700390u, 821307270u, 821831604u, 822355939u, 816785465u, 816785465u, 816785465u, 816785465u, 816785465u, \n861809438u, 846801762u, 846146656u, 846146656u, 828320550u, 844376688u, 844376688u, 844376688u, 845490817u, 850668159u, 855911037u, 858532526u, 859581140u, 860629754u, 861809438u, 861809438u, 861809438u, 861809438u, 861809438u, \n816130164u, 816130164u, 784738323u, 785787284u, 785787284u, 799353037u, 815081770u, \n1134309285u, 1134309285u, 1139552051u, 1150758620u, \n1149382842u, 1149382842u, 1151938628u, 1157115913u, 1162358735u, 1165176671u, 1165176671u, \n1131753236u, 1115959050u, 1109012387u, 1109012387u, 1103572559u, 1127558692u, 1127558692u, 1127558692u, 1132473967u, 1132474008u, 1132474049u, 1131753236u, 1131753236u, 1131753236u, 1131753236u, 1131753236u, \n1129590795u, 1129590795u, 1108160756u, 1134375379u, 1134375379u, 1131557103u, 1141584038u, \n1166815556u, 1152790918u, 1159803517u, 1159803517u, 1130639851u, 1147220151u, 1147220151u, 1147220151u, 1152004293u, 1156657324u, 1161375890u, 1165242555u, 1165504743u, 1165766932u, 1166815556u, 1166815556u, 1166815556u, 1166815556u, 1166815556u, \n1232940973u, 1239101711u, 1216557424u, 1216557424u, 1224945898u, 1213345939u, 1213345939u, 1213345939u, 1215246435u, 1215246375u, 1215246316u, 1218654166u, 1222258639u, 1225863113u, 1232940973u, 1232940973u, 1232940973u, 1232940973u, 1232940973u, \n1086988670u, 1086988670u, 1076043996u, 1059725496u, 1043406996u, 1010442315u, 996810455u, \n938744089u, 938744089u, 960829766u, 978524296u, 996153290u, 1013454750u, 1031411614u, \n1003101269u, 1003101269u, 999627706u, 1016797970u, \n1091902450u, 1091902450u, 1086135128u, 1086134881u, \n1043078068u, 1043078068u, 1049303735u, 1049303584u, \n723853714u, 710877615u, 701899477u, 701899477u, 690233787u, 707862789u, 707862789u, 707862789u, 710091034u, 712974609u, 715858184u, 717955366u, 719397186u, 720839005u, 723853714u, 723853714u, 723853714u, 723853714u, 723853714u, \n771760817u, 758129385u, 753804272u, 753804272u, 744170262u, 755835440u, 755835440u, 755835440u, 759964212u, 763961934u, 767959656u, 769729171u, 771760817u, \n728505954u, 728505954u, 702553614u, 699866965u, 699866965u, 716513016u, 728506164u, \n807084426u, 804725278u, 804725278u, 802431665u, 802431665u, 813703752u, 817701307u, \n1112545835u, 1112545835u, 1117854043u, 1113397318u, \n1140922807u, 1140922807u, 1147607183u, 1125652418u, \n1146033974u, 1146033974u, 1134302968u, 1126504047u, \n1144525998u, 1144525998u, 1138693285u, 1132729412u, 1127814132u, 1119163334u, 1114510173u, \n1118376211u, 1118376211u, 1109266651u, 1094586557u, \n1043206312u, 1043206312u, 1032917007u, 1027149920u, 1021317296u, 1012863198u, 1019678982u, 1026494767u, 1029378333u, 1035538719u, 1041633569u, 1050349822u, 1043206312u, 1043206312u, 1043206312u, 1043206312u, \n1048908852u, 1013912620u, 1013912620u, 978916387u, 978916387u, 933893177u, 955191707u, 955191707u, 953750462u, 990581694u, 1027412926u, 1044386757u, 1044386757u, \n780538537u, 780538537u, 752489229u, 740495839u, 740495839u, 758780459u, 773001702u, \n765398948u, 765398948u, 743968580u, 734138268u, 734138268u, 740757171u, 763498201u, \n783355494u, 783355494u, 773918111u, 757206500u, 757206500u, 772345064u, 795676125u, \n823463457u, 823463457u, 820579625u, 805768401u, 805768401u, 824118435u, 836046304u, \n781323974u, 781323974u, 795676389u, 810225629u, \n1044976237u, 1044976237u, 1019744849u, 1014108809u, 1008472770u, 999494406u, 991498942u, 983503477u, 976163457u, 976163332u, 976163207u, 979505418u, 976490713u, 973476009u, 970199108u, 983830596u, 997462084u, 1008472160u, 1021120483u, 1033768805u, 1039404954u, 1047728022u, 1056051090u, 1060048782u, 1066012493u, 1072041741u, 1081675420u, 1081675420u, 1081675420u, 1079054226u, 1088360342u, 1097666458u, 1104351215u, 1110315059u, 1116278904u, 1113985326u, 1122308386u, 1130631446u, 1139937428u, 1139937428u, 1139937428u, 1135153471u, 1135612319u, 1136005614u, 1140593241u, 1140593354u, 1140593467u, 1141969977u, 1165235257u, 1165235257u, 1161893059u, 1144919215u, 1144919215u, 1142625503u, 1145967924u, 1149244809u, 1146951348u, 1169888952u, 1169888952u, 1165563761u, 1146296117u, 1146296117u, 1137973485u, 1160911146u, 1160911146u, 1155930612u, 1141250479u, 1141250479u, 1133648606u, 1150622458u, 1150622458u, 1131617273u, 1118968457u, 1106319641u, 1110645745u, 1124277378u, 1124277378u, 1100356803u, 1091312612u, 1091837064u, 1091837064u, 1092361516u, 1092361516u, 1076043027u, 1071389773u, 1066736519u, 1063722001u, 1061035102u, 1058413738u, 1051401455u, 1040063755u, 1040063755u, 1043078161u, 1043078068u, 1043078068u, 1026759951u, 998120752u, 998120752u, 1004477639u, 1003101269u, 1003101269u, 995499114u, 988159013u, 980818912u, 987831180u, 989797183u, 991828722u, 989141556u, 989141556u, \n1008474551u, 1008474551u, 990452244u, 983833197u, 977148614u, 971840331u, 949230354u, 949230354u, 957553382u, 965155404u, 972822963u, 986126654u, 986126654u, 986126654u, 966072729u, 947001990u, 929766236u, 916527859u, 916527859u, 920787644u, 925702679u, 934549951u, 949229870u, 938088728u, 938088728u, 919476472u, 920786966u, 920786966u, 936319111u, 963844139u, 970069989u, 976295839u, 992679834u, 1000281907u, 1007818445u, 1016665827u, 1028658904u, 1040651981u, 1048188449u, 1048188449u, 1048188449u, 1051727269u, 1044649397u, 1037505989u, 1024660987u, 1014896075u, 1005131162u, 997594549u, 994907616u, 992286219u, 989599292u, 978523692u, 978523692u, 984749574u, 984749455u, 984749337u, 982521048u, 993137886u, 1003820259u, 1041110243u, 1041110243u, 1041110243u, 1049040098u, 1049040018u, 1049105463u, 1041961872u, 1042420355u, \n978458542u, 978458542u, 929896120u, 909579324u, 889262529u, 843518080u, 843518080u, 843518080u, 829362229u, 838274850u, 847253008u, 837815749u, 834080232u, 830279178u, 825560620u, 821300757u, 817040894u, 812846728u, 806227506u, 799608284u, 798166446u, 792071684u, 785911386u, 778374792u, 781192880u, 784010968u, 778374866u, 773197482u, 768020098u, 760418008u, 764219153u, 767954763u, 761401380u, 771756045u, 782110710u, 792989606u, 793448467u, 793907328u, 808587512u, 793448707u, 778375439u, 770838828u, 771756429u, 772674030u, 780276527u, 788271741u, 796332492u, 812323282u, 817042034u, 821760786u, 828380100u, 828380100u, 829690794u, 829690794u, 831067024u, 831067024u, 836047950u, 835720391u, 838210741u, 838210741u, 840701090u, 842536278u, 842536278u, 844371466u, 847189479u, 847189479u, 850007493u, 850859681u, 850859681u, 851711869u, 856364877u, 856364877u, 861017884u, 861017884u, 862001139u, 863311931u, 865867813u, 865867813u, 868358159u, 868358159u, 869996688u, 877992209u, 885987731u, 916265674u, 916265674u, \n1079387665u, 1079387665u, 1071392249u, 1053042242u, 1002776352u, 1021454766u, 1034103319u, 1046751872u, 1064380967u, 1064380967u, 1064380967u, 1053764311u, 1039411929u, 1025059547u, 1022962432u, 1017326414u, 1012411281u, 1011690439u, 1011690439u, 997796770u, 996092645u, 996092645u, 995896069u, 993078082u, 987638619u, 982199157u, 981806032u, 981806032u, 967191467u, 963783418u, 956115703u, 948382453u, 949169033u, 949169033u, 940125045u, 935799571u, 933767902u, 931670698u, 927148632u, 919480949u, 911813267u, 911223543u, 911223543u, 908208876u, 903162540u, 896739875u, 896739875u, 892938679u, 882977218u, 874326476u, 872622716u, 870656749u, 868625246u, 861678386u, 860629753u, 859646657u, 855648900u, 851323520u, 846998140u, 842672784u, 843655752u, 844704255u, 854993379u, 863971726u, 872950073u, 852699481u, 840706385u, 828713289u, 828058022u, 820390306u, 812722590u, 816720076u, 816392319u, 816064563u, 818685986u, 820717554u, 822683585u, 820389741u, 821700364u, 823076523u, 832710375u, 836708112u, 840705848u, 842016483u, 842016483u, 839722614u, 846669394u, 850667086u, 854664778u, 859645530u, 861021903u, 862332740u, 871311237u, 878323686u, 885270599u, 917907446u, 928262138u, 938551294u, 953559095u, 966535227u, 979511359u, 972826493u, 968501068u, 964175644u, 963847996u, 961553929u, 959194326u, 933569993u, 933569993u, 930227556u, 931865867u, 931865867u, 900933141u, 891626839u, 891626839u, 912926060u, 930620440u, 930620440u, 930620440u, 915219503u, 897262592u, 877405132u, 884548202u, 884548202u, 884548202u, 899163064u, 925573977u, 901390859u, 937369987u, 937369987u, 937369987u, 931471814u, 933503551u, 934158953u, 935862938u, 939074257u, 951395236u, 976691955u, 990716502u, 1004741049u, 1026695602u, 1039016452u, 1051402838u, 1090724417u, 1090724417u, \n1010769636u, 1010769636u, 995172007u, 984162036u, 976625449u, 966205317u, 966205317u, 966205317u, 964501256u, 955522856u, 955522856u, 946216801u, 939859752u, 933568240u, 923213576u, 929898422u, 929898422u, 916594650u, 908926740u, 908926740u, 904273813u, 909254646u, 909254646u, 899620899u, 894246834u, 894246834u, 892608551u, 895950963u, 895950963u, 880615572u, 872947654u, 872947654u, 868294683u, 871309427u, 871309427u, 857677935u, 853024738u, 853024738u, 847978551u, 850337944u, 850337944u, 846012584u, 842997896u, 842997896u, 831332427u, 827728121u, 824058278u, 818356675u, 813048251u, 807739827u, 805380510u, 805708049u, 806035588u, 806035434u, 798433367u, 790765764u, 781459656u, 781459907u, 781460157u, 774775538u, 771760817u, 768746096u, 766452316u, 762454600u, 758456884u, 748823064u, 756097491u, 763437454u, 768090458u, 768090349u, 768090240u, 767762507u, 760815748u, 753803452u, 742465756u, 737157450u, 731849143u, 725819843u, 720839010u, 715858177u, 714875157u, 711205141u, 707535125u, 699211908u, 715202667u, 731127891u, 760422293u, 751771509u, 743120725u, 728506277u, 728506152u, 728506027u, 728506027u, 728506027u, 728506027u, 726474213u, 738467402u, 750460591u, 763109132u, 786439891u, 809705115u, 826351085u, 848305447u, 848305447u, 898833231u, 916593390u, \n1121328266u, 1121328266u, 1154227843u, 1163927522u, 1173561665u, 1225794419u, 1274094083u, 1322328212u, 1306729658u, 1264459011u, 1222122828u, 1242111683u, 1254432455u, 1254432455u, 1229135810u, 1221467718u, 1221467718u, 1191845701u, 1211834463u, 1211834463u, 1161895757u, 1208491380u, 1208491380u, 1183522156u, 1185553392u, 1185553392u, 1204821336u, 1222843542u, 1228807241u, 1228807241u, 1234770940u, 1234770940u, 1204492897u, 1250105767u, 1250105767u, 1233132278u, 1255086979u, 1276779535u, 1293294617u, 1307188525u, 1307319600u, 1307516212u, 1307712824u, 1307712824u, 1302010561u, 1274091886u, 1241454562u, 1193547359u, 1189221211u, 1183649663u, 1201409425u, 1265175953u, 1297681809u, 1303383075u, 1303383075u, 1322454261u, 1300237831u, 1300237831u, 1316687367u, 1324224234u, 1331761046u, 1339297858u, 1369509739u, 1369509739u, 1369510067u, 1350439113u, 1350439113u, 1350439204u, 1347752288u, 1344213532u, 1340674777u, 1357058917u, 1357058917u, 1332679735u, 1320227458u, 1320227458u, 1318458126u, 1312690996u, 1306923995u, 1301156994u, 1311773982u, 1311773982u, 1311773982u, 1285625102u, 1273631842u, 1261638581u, 1265636019u, 1271403101u, 1277170183u, 1275138509u, 1275138509u, 1269830125u, 1262555617u, 1262555617u, 1262555617u, 1263407138u, 1270943600u, 1278480062u, 1269173929u, 1269173929u, 1186663965u, 1210192886u, 1210192886u, 1224349631u, 1336678335u, 1335762587u, 1334912547u, 1173562138u, 1173562138u, 1165108695u, 1188963899u, 1188963899u, 1205413523u, 1224156629u, 1234773323u, 1245455554u, 1249125598u, 1249125598u, 1247421844u, 1258825215u, 1261774402u, 1264133750u, 1260791436u, 1262298871u, 1263871843u, 1276061652u, 1276061652u, 1281828882u, 1291397133u, 1291397133u, 1291397133u, 1279862907u, 1268525187u, 1257187467u, 1252337887u, 1252337887u, 1252337887u, 1262758089u, 1269442812u, 1276062000u, 1282943258u, 1282943258u, 1282943258u, 1277438355u, 1268328862u, 1259219369u, 1252141564u, 1252141564u, 1258105346u, 1262299690u, 1265642074u, 1268984459u, 1278093968u, 1278093968u, 1278093968u, 1267411729u, 1257646865u, 1247882001u, 1244539703u, 1244539703u, 1244539703u, 1247226677u, 1254108027u, 1260989376u, 1269181336u, 1269181336u, 1264528444u, 1243032679u, 1236348021u, 1229728898u, 1229466781u, 1229466781u, 1229466781u, 1235889299u, 1240149222u, 1244343609u, 1254305106u, 1254305106u, 1250307462u, 1237462432u, 1224813996u, 1212165560u, 1214131737u, 1214131818u, 1214131899u, 1215180491u, 1225141963u, 1235168971u, 1235824395u, 1235496800u, 1235169205u, 1230122945u, 1223831505u, 1217474529u, 1215180794u, 1214853207u, 1214525620u, 1209151655u, 1205153935u, 1201156215u, 1203187617u, 1202532152u, 1201876687u, 1192177403u, 1186541356u, 1180905308u, 1176907624u, 1177235357u, 1177563089u, 1178546331u, 1174876461u, 1171206590u, 1162228037u, 1161900284u, 1161572531u, 1158885523u, 1150562487u, 1142239452u, 1141256323u, 1133588538u, 1125920754u, 1131622390u, 1134243749u, 1136930644u, 1130573644u, 1131622147u, 1132605114u, 1132605026u, 1127951921u, 1123298817u, 1131621873u, 1134898620u, 1138240903u, 1149251004u, 1154887181u, 1160588894u, 1173892487u, 1176513835u, 1179200718u, 1184181316u, 1189882860u, 1195518867u, 1196174146u, 1192831782u, 1189554953u, 1186540237u, 1186540035u, 1186539833u, 1168190003u, 1159211648u, 1150233293u, 1138240205u, 1131293260u, 1124280778u, 1119300119u, 1119300289u, 1119300458u, 1130965996u, 1130965996u, 1115302968u, 1106324314u, 1106324314u, 1096297395u, 1098656901u, 1098656901u, 1089350656u, 1092627177u, 1092627177u, 1079978794u, 1077881846u, 1077881846u, 1076112116u, 1080568542u, 1097869782u, 1115171023u, 1088104305u, 1081026228u, 1073882616u, 1082795113u, 1089872576u, 1097015574u, 1056579437u, 1056579437u, \n3170970609u, 3166448673u, 3165072494u, 3165072572u, 3161009314u, 3155635343u, 3151113363u, 3156290752u, 3161468140u, 3161468240u, 3161468282u, 3159764405u, 3157405142u, 3170971094u, 3170971094u, 3184537046u, 3182177717u, 3180473722u, 3180473680u, 3180473580u, 3185650880u, 3190828179u, 3186306191u, 3180932258u, 3176869052u, 3176868974u, 3175492641u, 3170970609u, 3170970609u, 3170970609u, 3170970609u, \n610863775u, 610864498u, 652349060u, 668470670u, 680004830u, 676268770u, 639044263u, 645597958u, 648809344u, 644877245u, 637733930u, 615451482u, 615451232u, 600836704u, 600836704u, 586222176u, 586222426u, 563940394u, 556796861u, 552864640u, 556075783u, 562629287u, 525404898u, 521669854u, 533204366u, 549326468u, 590810482u, 590809759u, 600836767u, 600836767u, 610863775u, \n609225312u, 609225312u, 626003237u, 626003633u, 626003850u, 619450462u, 600838557u, 582226014u, 575672202u, 575671985u, 575671589u, 592448096u, 592448096u, 600836704u, 600836704u, 609225312u, \n1063192480u, 1063192303u, 1085474356u, 1092617857u, 1096550060u, 1093338890u, 1086785358u, 1124009765u, 1127744957u, 1116210496u, 1100088467u, 1058604385u, 1058604896u, 1048577888u, 1048577888u, 1038550880u, 1038550369u, 997065875u, 980944192u, 969409981u, 973145893u, 1010370382u, 1003816714u, 1000605356u, 1004537473u, 1011680820u, 1033963247u, 1033963424u, 1048577952u, 1048577952u, 1063192480u, \n1040189344u, 1040189344u, 1023411626u, 1023411346u, 1023411192u, 1029964642u, 1048576640u, 1067189090u, 1073742840u, 1073742994u, 1073743274u, 1056966560u, 1056966560u, 1048577952u, 1048577952u, 1040189344u, \n1048579584u, 1040387472u, 1038028000u, 1038027819u, 1030753383u, 1020988564u, 1012927626u, 1022168096u, 1031474108u, 1031473877u, 1031473779u, 1028393452u, 1024264608u, 1048578464u, 1048578464u, 1072892320u, 1068763628u, 1065683571u, 1065683669u, 1065683900u, 1074990112u, 1084230794u, 1076104340u, 1066404967u, 1059130411u, 1059130592u, 1056771472u, 1048579584u, 1048579584u, 1048579584u, 1048579584u, \n117835870u, 84280927u, 42272605u, 42272952u, 42273201u, 68487921u, 97520009u, 88476044u, 80546137u, 80546051u, 80545897u, 105908235u, 117508284u, 127862815u, 127862815u, 138151809u, 126551760u, 132711757u, 142804301u, 148440397u, 151782854u, 151586384u, 175178901u, 154206981u, 137888517u, 115147525u, 98502022u, 131991430u, 124913650u, 124913650u, 117835870u, \n121899129u, 121899129u, 77203257u, 58852897u, 48760199u, 43582635u, 41943808u, 69927705u, 84345704u, 94438402u, 112788762u, 133760964u, 133760964u, 127862815u, 127862815u, 121899129u, \n225316334u, 225905991u, 219417776u, 211029040u, 218958860u, 227937219u, 233180005u, 221776766u, 210504603u, 199822072u, 195234483u, 191171122u, 190581199u, 173411030u, 173411030u, 156175324u, 162663397u, 171117603u, 175639657u, 186322188u, 184421816u, 182783590u, 188943894u, 193727885u, 196087060u, 204475796u, 214371831u, 225316334u, 225316334u, 225316334u, 225316334u, \n169811929u, 217194457u, 235151954u, 219030344u, 207496184u, 174203839u, 170336647u, 176562667u, 184558108u, 188555744u, 195699059u, 182067231u, 165683231u, 165683008u, 165683008u, 165682785u, 182066785u, 195697933u, 188554400u, 184556644u, 176626837u, 170335481u, 174201537u, 207493768u, 219028280u, 235150382u, 217194151u, 169811623u, 169811776u, 169811776u, 169811929u, \n165683136u, 165683136u, 212148416u, 238100672u, 252321984u, 266215516u, 287121216u, 266214948u, 252321216u, 238099904u, 212147648u, 165682880u, 165682880u, 165683008u, 165683008u, 165683136u, \n58728256u, 66068163u, 77602463u, 89464479u, 85532208u, 82582940u, 83238176u, 90185133u, 96738875u, 111877691u, 118300219u, 127147532u, 132128205u, 132128576u, 132128576u, 132128947u, 127148148u, 118300741u, 111878213u, 96739397u, 90185939u, 83239264u, 82583781u, 85532752u, 89464801u, 77602785u, 66068413u, 58728256u, 58728256u, 58728256u, 58728256u, 0u );\nconst uvec2 boxes[] = uvec2[](\n  uvec2(995824755u,1005589728u),\n  uvec2(992285384u,1003361115u),\n  uvec2(915869339u,1169956144u),\n  uvec2(760483246u,978852549u),\n  uvec2(810159696u,821628783u),\n  uvec2(1040257625u,1042748034u),\n  uvec2(912857797u,918887149u),\n  uvec2(812786051u,1090792400u),\n  uvec2(821372841u,851716246u),\n  uvec2(699272227u,1369584062u),\n  uvec2(1149382495u,1165177018u),\n  uvec2(1276055680u,1297879521u),\n  uvec2(1284903709u,1307841736u),\n  uvec2(1106978479u,1135617969u),\n  uvec2(1203513096u,1220814842u),\n  uvec2(810165631u,843327271u),\n  uvec2(821372892u,851716246u),\n  uvec2(790308562u,822356025u),\n  uvec2(828320368u,861809760u),\n  uvec2(784738323u,816130452u),\n  uvec2(1134309084u,1150758821u),\n  uvec2(1149382495u,1165177018u),\n  uvec2(1103572516u,1132474275u),\n  uvec2(1108160523u,1141584339u),\n  uvec2(1130639506u,1166815869u),\n  uvec2(1213345709u,1239101808u),\n  uvec2(996810455u,1086988670u),\n  uvec2(938743710u,1031412038u),\n  uvec2(999627538u,1016798293u),\n  uvec2(1086134881u,1091902450u),\n  uvec2(1043077664u,1049303988u),\n  uvec2(690233605u,723854037u),\n  uvec2(744170032u,771761136u),\n  uvec2(699866638u,728506197u),\n  uvec2(802431370u,817701553u),\n  uvec2(1112545350u,1117854251u),\n  uvec2(1125652418u,1147607479u),\n  uvec2(1126504047u,1146033974u),\n  uvec2(1114510173u,1144525998u),\n  uvec2(1094586557u,1118376211u),\n  uvec2(1012862991u,1050349871u),\n  uvec2(933892507u,1048908857u),\n  uvec2(740495839u,780538637u),\n  uvec2(734138035u,765398948u),\n  uvec2(757206248u,795676262u),\n  uvec2(805768355u,836046369u),\n  uvec2(781323974u,810225629u),\n  uvec2(970198684u,1169890608u),\n  uvec2(916525699u,1051728732u),\n  uvec2(760417710u,978459338u),\n  uvec2(812720515u,1090726864u),\n  uvec2(699210478u,1010770674u),\n  uvec2(1056574499u,1369518526u),\n  uvec2(3151113201u,3190828502u),\n  uvec2(521669216u,680005252u),\n  uvec2(575670880u,626004381u),\n  uvec2(969409683u,1127745440u),\n  uvec2(1023410816u,1073743776u),\n  uvec2(1012926880u,1084231168u),\n  uvec2(42271493u,175180529u),\n  uvec2(41943808u,133761145u),\n  uvec2(156174799u,233180774u),\n  uvec2(165681800u,235152376u),\n  uvec2(165682624u,287121600u),\n  uvec2(58727712u,132129120u)\n);\nconst int paths[] = int[](\n  14,28,570,800,820,852,890,1216,1248,2288,2320,2334,2342,2350,2370,2408,2416,2448,2486,2500,2508,2522,2554,2568,2606,2644,2658,2672,2680,2688,2696,2734,2760,2774,2788,2796,2804,2812,2826,2834,2866,2892,2906,2920,2934,2948,2956,3174,3308,3478,3768,3980,4546,4608,4670,4702,4764,4796,4858,4920,4952,5014,5076,5108,5170);\n\nconst int colors[boxes.length()] =\n  int[](7,7,6,6,0, 0,6,6,0,6, 0,0,0,0,0, 8,0,8,8,8, 0,0,8,8,8, 8,0,0,0,0, 0,8,8,8,8, 0,0,0,0,0, 4,8,8,8,8, 8,0,0,0,0, 0,0,0,\n        6,6,6,6,6, 6,6,6,6,6, 6,6);\n\n// The frame, easier to draw separately\nconst vec4 frame[] =\n  vec4[](vec4(36.500000,38.500122,463.500000,211.499939),\n         vec4(41.500000,43.500122,458.500000,206.499939),\n         vec4(26.500000,28.500122,473.500000,221.499939),\n         vec4(31.500000,33.500122,468.500000,216.499939));",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}