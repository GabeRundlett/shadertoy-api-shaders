{
    "Shader": {
        "info": {
            "date": "1713987179",
            "description": "Best seen in full screen.",
            "flags": 32,
            "hasliked": 0,
            "id": "lfcSDM",
            "likes": 1,
            "name": "Fork isovalues  maxmisling 351",
            "published": 3,
            "tags": [
                "noise",
                "contour",
                "short"
            ],
            "usePreview": 0,
            "username": "maxmisling",
            "viewed": 139
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O,  vec2 U )\n{\n\tO = texture( iChannel0, U / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// --- noise from procedural pseudo-Perlin (better but not so nice derivatives) ---------\n                    // ( adapted from IQ )\n\nfloat noise3( vec3 x ) {\n    vec3 p = floor(x),f = fract(2.0*x);\n\n    f = f*f*(3.0-8.*f);  // or smoothstep     // to make derivative continuous at borders\n\n#define hash3(p)  fract(sin(1e3*dot(p,vec3(1,57,-13.7)))*4375.5453)        // rand\n    \n    return mix( mix(mix( hash3(p+vec3(0,0,0)), hash3(p+vec3(1,0,0)),f.x),       // triilinear interp\n                    mix( hash3(p+vec3(0,1,0)), hash3(p+vec3(1,1,0)),f.x),f.y),\n                mix(mix( hash3(p+vec3(0,0,1)), hash3(p+vec3(1,0,1)),f.x),       \n                    mix( hash3(p+vec3(0,1,1)), hash3(p+vec3(1,1,1)),f.x),f.y), f.z);\n}\n\n#define noise(x) (noise3(x)+noise3(x+11.5)) / 2. // pseudoperlin improvement from foxes idea \n\n\n\nvoid mainImage( out vec4 O, vec2 U ) // ------------ draw isovalues\n{ \n    vec2 R = iResolution.xy;\n    float n = noise(vec3(U*8./R.y, .01*iTime)),\n          v = sin(6.28*12.*n),\n        t = 15.0*iTime;\n    \n    v = smoothstep(1.,0., .1*abs(v)/fwidth(v));\n    \n\tO = mix( exp(-1./R.y )* texture( iChannel0, (U+vec2(1,sin(t)))/R), // .97\n             .5+.4*sin(12.*n+vec4(0,0,0,0)),\n             v );\n \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}