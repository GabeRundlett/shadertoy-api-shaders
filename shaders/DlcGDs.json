{
    "Shader": {
        "info": {
            "date": "1683301841",
            "description": "A signed distance function for arches aka circle arcs defined by two points and a height.\nFeel free to use.\n\nI'm trying to make this as compact as possible.\nAny comments about improvements and potential problems or else are welcome! :)\n",
            "flags": 0,
            "hasliked": 0,
            "id": "DlcGDs",
            "likes": 2,
            "name": "a SDF for Arches",
            "published": 3,
            "tags": [
                "sdf",
                "arch",
                "circlearc"
            ],
            "usePreview": 0,
            "username": "FTPlus",
            "viewed": 138
        },
        "renderpass": [
            {
                "code": "// A signed distance function for arches aka circle arcs\n// by Ferry \"FTPlus\" Timmers\n// with help from iq and ollj\n\nfloat sdfArc(vec2 I, vec2 A, vec2 B, float s)\n{   \n    vec2 v = .5 * (B-A);\n    float p = abs(s),\n          k = dot(v, v),\n          l = sqrt(k) * sign(s),\n          r = .5 * (k / p + p);\n    vec2 n = vec2(-v.y, v.x) / l,\n         C = A + v + n * (r - p);\n    float d = length(C - I);\n    if (dot(n, C - I) * r < (r - p) * d)\n        return sqrt(min(dot(A - I, A - I), dot(B - I, B - I)));\n    return abs(d - r);\n}\n\n\n/* Compacted version:\nfloat sdfArc(vec2 I, vec2 A, vec2 B, float s)\n{   \n    vec2 v=.5*(B-A);float p=abs(s),k=dot(v,v),l=sqrt(k)*sign(s),r=.5*(k/p+p);\n    vec2 n=vec2(-v.y,v.x)/l,C=A+v+n*(r-p);float d=length(C-I);\n    if (dot(n,C-I)*r<(r-p)*d)return sqrt(min(dot(A-I,A-I),dot(B-I,B-I)));\n    return abs(d-r);\n}\n*/\n\n/* Version 1:\nfloat sdfArc(vec2 coords, vec2 A, vec2 B, float s)\n{   \n    vec2 v = (B - A) / 2.;\n    vec2 n = normalize(vec2(A.y - B.y, B.x - A.x)) * sign(s);\n    float r = abs(pow(length(v), 2.) / (2. * s) + (s / 2.));\n    vec2 C = A + v + n * (r - abs(s));\n    if (dot(n, normalize(C - coords)) < dot(n, normalize(C - A)))\n        return min(length(A - coords), length(B - coords));\n    return abs(length(C - coords) - r);\n}\n*/\n\n// We define an arch as two points, and a height (sagitta [1])\n//\n// Let A and B be two points in the 2d space.\n// Let s be a scalar.\n// We can find a circle that passes through both A and B such that:\n// - the distance between the base of the arch and the center of the arch is |s|.\n// - the direction of the arch is sign(s) (i.e. negative mirrors the arch around AB)\n//\n// Let n be the normal vector of the arch: i.e. be perpendicular to AB.\n// Then:\n// The radius of the circle is r = |(AB)^2 / 8s + s/2|\n// The center of the circle is C = A + (B-A)/2 + n * (r - |s|)\n\n/*          _.--\"\"T\"\"--._            +\n         _-`      |      `-_         |\n       .\"         |         \".       |\n     .\"           |           \".     | s \n    /             |             \\    |\n   o . . . . . . .|. . . . . . . o   +\n   A              |              B   \n                  | r\n                  |\n                  o\n                  C\n*/\n\n// Then the field is divided into two parts:\n// 1. Inside the cone CA CB (the circle pie between A and B extended to infinity)\n//    the distance acts a circle i.e. | ||C - X|| - r | for some point X\n// 2. Outside the cone either point A or B is closest, we take the minimum,\n//    i.e. ||A - X|| min ||B - X|| for some point X\n// To check if it is inside the cone we use teh dot product of vectors C-X and C-A\n\n// Sources:\n// [1] https://en.wikipedia.org/wiki/Sagitta_(geometry)\n\n// ------------------------------------------------------------------------------------\n\n// Visualize the field\n\n// Sawtooth function\nfloat ramp(float x)\n{\n    x = abs(x);\n    float y = 0.;\n    for (int i = 1; i < 7; ++i)\n        y += (1. / float(i)) * sin(x * float(i));\n    return y * .5 + .5;\n}\n\n#define BG vec3(.17, .13, .15)\n#define FG (vec3(1.) - BG)\n\nvoid mainImage(out vec4 O, in vec2 I)\n{\n    float w = min(iResolution.x, iResolution.y);\n    I -= iResolution.xy / 2.;\n    \n    float t = iTime + 25.;\n    float tA = t / -5.;\n    float tB = t / -7.;\n    float ts = t / 10.;\n    \n    vec2 A = vec2(cos(tA), sin(tA)) * .4 * w;\n    vec2 B = vec2(cos(tB), sin(tB)) * .2 * w;\n    float s = sin(ts) * .5 * w;\n    \n    if (iMouse.z >= 0.)\n        s = iMouse.y - .5 * w;\n    \n    float d = sdfArc(I, A, B, s) - .04 * w;\n    \n    vec3 color = d >= 0. ? vec3(.4, .9, .3) : vec3(.9, .3, .4);\n    vec3 field = BG + FG * color * ramp(d / 5.);\n    vec3 image = mix(field, FG * vec3(.4, .3, .9), smoothstep(2., 0., abs(d) - 1.));\n    O = vec4(image, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}