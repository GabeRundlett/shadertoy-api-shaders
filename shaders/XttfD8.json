{
    "Shader": {
        "info": {
            "date": "1539438221",
            "description": "comparing and explaining various blackbody related functions.\n\nm.x sets temperature\nm.y adjusts gamma doe varying display-whitepoints (domain includes negative exponents over the log(0) singularity ))\nm.y=.5 is no gamma correction.",
            "flags": 0,
            "hasliked": 0,
            "id": "XttfD8",
            "likes": 10,
            "name": "blackbody compared annotated",
            "published": 3,
            "tags": [
                "fire",
                "physics",
                "kelvin",
                "temperature",
                "gas",
                "blackbdy"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 863
        },
        "renderpass": [
            {
                "code": "//self:   https://www.shadertoy.com/view/XttfD8\n//parent: https://www.shadertoy.com/view/4tdGWM\n\n//this is hsc2rgb(), semi compatible to rainbows() and rainbowt(), but capped triangle wave:\nvec3 rainbow3(float value){ // crisp, linear, most discontinuous\n ;return clamp(2.0 * abs(2. * fract(value + vec3(0,1,2) * fract(iTime * .1)) - 1.) - 0.5, 0.0, 1.0); }\n//but its tricky go get the phase to fold down to the common hsv2rgb()\n\n//https://en.wikipedia.org/wiki/Black-body_radiation\n//==stars,hot metal,fire,carbonized material,soot\n\n//this shader compares blackbody radiation functions\n//to compare, estimate and generalize them\n//2 closely related (but very different) gradients are\n//phaseshifted rainbows() which can be stretched to a compromise.\n//fusion() (blackbody-like, with negative temperature defines)  \n\n#define vec1 float\n#define pi acos(-1.)\n#define sat(a) clamp(a,0.,1.)\n#define u2(a) ((a)*2.-1.)\n#define u5(a) ((a)*.5+.5)\n\n//https://www.shadertoy.com/view/ldK3zD\nvec3 fusion(float a\n){a=sat(a)\n ;return sat(vec3(sqrt(a),a*a*a, max(sin(pi*1.75*a),pow(a,12.))));}\n// HDR version\nvec3 fusionHDR(float a\n){a=sat(a)\n ;return fusion(sqrt(a))*(.5+2.*a);}\n\n//rgba colorspace matrices\n#define ab012(a,b)(a+b*vec3(0,1,2))//desaturation.rgb kernel;b scales offset\n//rainbow*()ro from purple to purple for range[0..1],this makes ab012()desaturate into semi-gaussian scattering.\nvec3 rainbowt(float a,float b){return abs(u2(fract(ab012(a,b))));}//triangle rainbow with offsets,desaturates colors for small b\nvec3 rainbowt(float a){return rainbowt(-a,1./3.);}\nvec3 rainbows(float a,float b){return u5(cos(2.*pi*ab012(a,b)));}//sine rainbow with offsets,desaturates colors for small b\nvec3 rainbows(float a){return rainbows(-a,1./3.);}\n#define ToRgb(w) return c.z*mix(vec3(1.),sat(w(-c.x)),c.y);}\nvec3 rainbows(vec3 c){ToRgb(rainbows)//3 tri waves, most blurry  , fast and precise cos-mix (blurriest because it is only linear)\nvec3 rainbowt(vec3 c){ToRgb(rainbowt)//3 cos waves, medium blurry, linear-mix not identical to hsv2rgb ,but close\n//hsv2rgb uses a capped triangle-wave, as such it appears to be the brighttest/sharpest because at any moment only 2/3 colors swap.\n#define hsv2rgb(c) c.z*mx(1.,sat(abs(fract(c.x+vec3(3,2,1)/3.)*6.-3.)-1.),c.y)\n//below is inverse of above, it swivels quite a lot, i think i once made this much smarter!, like in 2008, but code is lost\n#define rgb2hsv2(a,b,c,d,e,f) mx(vec4(a,b),vec4(c,d),st(e,f))\n#define rgb2hsv3(K) rgb2hsv2(a.zy,K.wz,a.yz,K.xy,a.z,a.y)\n#define rgb2hsv4(P) rgb2hsv2(P.xyw,a.x,a.x,P.yzx,P.x,a.x)\n#define rgb2hsv5(D,q) abx(vec2(q.w-q.y,D)/(vec2(6.*D,q.x)+1e-10)+vec2(q.z,0))\n#define rgb2hsv6(q) vec3(rgb2hsv5((q.x-min(q.w,q.y)),q),q.x)\n#define rgb2hsv(a) rgb2hsv6(rgb2hsv4(rgb2hsv3((vec4(0,-1,2,-3)/3.))))\n//https://www.shadertoy.com/view/MdGfWm\n//common legacy namespaces\n#define hsv2rgbR     rainbowt //3 tri waves, most blurry, fast and precise, considder for mobile\n#define angleToColor rainbows //3 cos waves, medium blurry\n//hsv2rgb() most commonly implies a [capped triangle waveform]\n\n//an ideal goal is to stretch the above 2 to estimate the blackbody() functions below\n\n\n//its always fun to make these [universal constants] parametric\n//or to just round them arbitiarily.\n#define coMaxSpeed 2.99792458e8\n//commonly known as \"speed of light\" or \"c\". Without a maximum speed in meter/second, causality over time is nonlinear/discontinuous.\n//shadows/projections may appear to move faster than this speed, but information can not be transpmitted faster than coMaxSpeed.\n//- The timetravel-RTS game [acron] nicely explores discontinuity of \"modular timelines\",\n//- ,that move slightly faster than coMaxSpeed over time and overwrite future times from the past.\n//- ,and it has solutions for grandfather-paradoxa,rwsilved by moving back till \"start of time itself\"\n//the weird part about c is its division by time, meaning, there is no time==0\n//there is only a [smallest absolute time] epsilon, which brings us to:\n#define coPlanck 6.62607004e-34\n//smallest quantity,physically EM-percievable interval of \n//;in joule*second==newton*meter*second==meter*meter*kilogramm/second\n//, as a result of oscillations that transmit energy with coMaxSpeed\n//coPlanck has dimensions of physical action; i.e., energy*ime, or momentum*distance, angularMomentum.  \n#define coBoltzmann 1.38064852e-23\n//average kinetic energy of particles in a gas with the temperature of the gas \n//;in meter*meter*kilogramm/second/second/Kelvin\n\n#define eps coPlanck*1e-4\n//defining epsilon (to evade division by 0 or for spheretracking) in terms of coPlanck/float32Precision\n\n//MouseScale.y,Tempperature,Interval,scaleLin,scaleLog\n#define planckLaw(m,T,f,a,b) ((a)*2.*(f)*(f)*(f)/(m)/(exp((b)*(f)/(T))-1.))\n//MouseScale.y, ColorRange,temperature,coPlanck, coBoltzmann, coMaxSpeed\n#define planckLawR(m,f,T,h,k,c) planckLaw(m,T,((f)*4e14),(h*1e7/(c)/(c)),(h)/(k))\n//above is relativistic, below is newtonian with smaller values for less rounding errors\n#define planckLawN(m,f,T)  planckLaw(m,T,f,5.,19E3)\n\n//BlackBody-normalized-unit (visibility bias):  f = 1 (red) to 2 (violet). \n// const 19E3 also disappears if you normalized temperatures with 1 = 19000 K\nvec4 blackBodyNorm(float T,float m){vec4 o=vec4(0);for(float i=.1; i<3.0+.1;i++){o[int(i)]+=planckLawN(m,1.+.5*i,T);}return o;}\n//BlackBody-RelativityUnits (math conditionning can be an issue)\nvec4 blackBodyPhys(float T,float m){vec4 o=vec4(0);for(float i=.1; i<3.0+.1;i++){o[int(i)]+=planckLawR(m,1.+.5*i,T,coPlanck,coBoltzmann,coMaxSpeed);}return o;}\n// +=.1 for better samples\n//blackBodyPhys() completely fails to work on my integrated-chipset-laptop, but all others are fine.\n    \n//porterDuffAlphaCompositing (with premultiplied .w)\nvec4 ut(vec4 a,vec1 b){return a*(1.-b);}//v41 ut(v41 a,vec1 b){return mu(a,(1.-b));}\nvec3 ut(vec3 a,vec1 b){return a*(1.-b);}//v31 ut(v31 a,vec1 b){return mu(a,(1.-b));}\nvec2 ut(vec2 a,vec1 b){return a*(1.-b);}//v21 ut(v21 a,vec1 b){return mu(a,(1.-b));}\nvec1 ut(vec1 a,vec1 b){return a*(1.-b);}//v11 ut(v11 a,vec1 b){return mu(a,(1.-b));}//#define ut(a,b) (a*(1.-b))\nvec4 pdOut(vec4 a,vec4 b){return ut(b,a.w);}\nvec4 pdOver(vec4 a,vec4 b){return ut(b,a.w)+a;}\nvec4 pdAtop(vec4 a,vec4 b){return ut(b,a.w)+a*b.w;}\nvec4 pdXor(vec4 a,vec4 b){return ut(b,a.w)+ut(a,b.w);}\n\n//all ther blackbody core functions from shadertoy as of 2018-10\n//there is little new to this\n//blackbody() is a subset of gamma and color transformation matrices\n//and of whatever you do with a relativistic shader\n//, which is a more dynamic field.\n/*\n//https://www.shadertoy.com/view/lllczf\n//http://www.physics.sfasu.edu/astro/color/blackbody.html\nvec3 blackBodyALaPewDiePie(float k){//most common blackbody code\n    //it is shit, in case you cant tell just by looking at it:\n    //to make sure you can not mis how bad this one is, \n    //i gave it a fitting namespace\n\tvec3 c = vec3(255.);\n    c.x = 56100000. * pow(k,(-3. / 2.)) + 148.;\n   \tc.y = 100.04 * log(k) - 623.6;\n   \tif (k > 6500.) c.y = 35200000. * pow(k,(-3. / 2.)) + 184.;\n   \tc.z = 194.18 * log(k) - 1448.6;\n   \tc = clamp(c, 0., 255.)/255.;\n    if (k < 1000.) return c*k/1000.;\n    return c;}//this one is pretty terricle on too mayny levels\n//https://www.shadertoy.com/view/lllczf\n//and i code golfed it into evel lower precision:\n//code golfed by ollj\nvec3 blackB0(float k){float l=-log(k)*1.5;return clamp(\n  vec3(.71,mix(.6,-2.1,(step(l,13.))),-4.8)\n  -l*vec3(0.,.11*(-sign(l-13.)+1.),.4)\n  +exp(l)*vec3(2e5,39e3*(sign(l-13.)+1.),0)\n ,0.,1.)*mix(k/1000.,1.,step(l,-log(1000.)*1.5));} //not good\n//https://www.shadertoy.com/view/lllczf\n//return blackbody color of temperature in [k] kelvin.\n//code golfed by ollj\nvec3 blackB(float k){float l=-log(k)*1.5-13.,s=sign(l);return clamp(\n vec3(.71,-2.55*(-s+1.)-.3*(s+1.),-10)-l*vec3(0,.115*(-s+1.),.4)\n +k*vec3(73e3,38e3*(s+1.),0),0.,1.)*mix(1.,k/1e3,step(-l,23.35));}\n//something got lost here.\n//---- above is shit below id good\n//iq https://www.shadertoy.com/view/4tdGWM\nvec4 blackBodyFab( vec4 O,  vec2 U ){\n   // U /= iResolution.xy;\n    float y = 2.*U.y,\n          m = .01+5.*iMouse.y/iResolution.y,\n        T = U.x*16000.; // absolute temperature (K)\n    //O -= O;    \n  // // --- with physical units: (but math conditionning can be an issue)\n  //  float h = 6.6e-34, k=1.4e-23, c=3e8; // Planck, Boltzmann, light speed  constants\n  //  for (float i=0.; i<3.; i++) {  // +=.1 if you want to better sample the spectrum.\n  //      float f = 4e14 * (1.+.5*i); \n  //      O[int(i)] += 1e7/m* 2.*(h*f*f*f)/(c*c) / (exp((h*f)/(k*T)) - 1.);  // Planck law\n  //  }\n\n    // --- with normalized units:  f = 1 (red) to 2 (violet). \n    // const 19E3 also disappears if you normalized temperatures with 1 = 19000 K\n     for (float i=0.; i<3.; i++) {  // +=.1 if you want to better sample the spectrum.\n        float f = 1.+.5*i; \n        O[int(i)] += 10./m* (f*f*f) / (exp((19E3*f/T)) - 1.);  // Planck law\n    }\n    //if (y<1.)\n    O /= max(O.r,max(O.g,O.b));  // chrominance\n  return O;   \n}\n//https://www.shadertoy.com/view/XlcSDr\n//code golfed: iq: https://www.shadertoy.com/view/4tdGWM\nvec3 blackBodyColor(float k){\n vec3 c=vec3(1.,3.375,8.)/(exp((19e3*vec3(2,3,4)/k/64e3))-1.);\n //the -1 barely changes much, could be cut.\n return c/mav(c);}\n/**/\n\n/*\nhttps://www.shadertoy.com/view/4ldBWH\n\n// see also https://www.shadertoy.com/view/Xty3zc\n\n#define NB_STARS 200\n#define PERS 1          // perspective\n\n#define SCALE 40.\nconst float star_luminosity = 1e3;\nvec3 star_color = vec3(1.,.3,.1)*star_luminosity;\n#define PI 3.1415927\nvec2 FragCoord, R;\n\n//https://www.shadertoy.com/view/XdsGWs\n//--- filter integration [l0..l1] on black body spectrum(T) ---------\nfloat filterIntegral(float x){return (6.+x*(6.+x*(3.+x)))*exp(-x);}\nfloat plaI(float T,float l1,float l0\n){float A=1.1, B=1./1.05,C0=.014387770,C=C0/(B*T)\n ;T=1.;//normalised spectrum better for display :-)\n ;return 100.*A/B*pow(100.*T/C0,4.)*(filterIntegral(C/l1)-filterIntegral(C/l0))\n ;}\n*/\n\n/*\n//https://www.shadertoy.com/view/MtdBz7\n// Calculate Standard Illuminant Series D light source XYZ values\nvec4 temperatureToXyz(float temperature)\n{\n\t// Calculate terms to be added up. Since only the coefficients aren't\n\t// known ahead of time, they're the only thing determined by mix()\n\tfloat x = dot(mix(\n\t\tvec4(0.244063, 99.11, 2967800.0, -4607000000.0),\n\t\tvec4(0.23704, 247.48, 1901800.0, -2006400000.0),\n\t\tbvec4(temperature > 7000.0)\n\t)/vec4(1, temperature, pow(temperature, 2.0), pow(temperature, 3.0)), vec4(1));\n\n\treturn White(x, -3.0*pow(x, 2.0) + 2.87*x - 0.275);\n}\n*/\n\n/*\n// blackbody by aiekick : https://www.shadertoy.com/view/lttXDn\n//copied from https://www.shadertoy.com/view/lsfcRB\n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\nvec3 blackbody(float t\n){\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(t,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(t) - 623.6;\n   \tif (t > 6500.) col.y = 35200000. * pow(t,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(t) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (t < 1000.) col *= t/1000.;\n   \treturn col;\n}\n*/\n\n/*\nvec3 blackbody(float Temp\n){vec3 col = vec3(255.)//https://www.shadertoy.com/view/Xd2fz1\n ;col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;}\n*/\n\n\n/*\nhttps://www.shadertoy.com/view/llsGDB\nfloat calcRed(float temp\n             ) {\tfloat red; \n\t\tif ( temp <= 6600. ) {\t\tred = 1.;\t}\n\telse {\t\ttemp = temp - 6000.;\t\t\n\t\ttemp = temp / 100.;\t\t\n\t\tred = 1.29293618606274509804 * pow(temp, -0.1332047592);\t\t\n\t\tif (red < 0.) {\t\t\tred = 0.;\t\t}\n\t\telse if (red > 1.) {\t\t\tred = 1.;\t\t}\t}\n\t\treturn red;}\nfloat calcGreen(float temp) {\t\n\tfloat green; \t\n\tif ( temp <= 6600. ) {\t\ttemp = temp / 100.;\n\t\t\t\tgreen = 0.39008157876901960784 * log(temp) - 0.63184144378862745098;\n\t\t\t\tif (green < 0.) {\t\t\tgreen = 0.;\t\t}\n\t\telse if (green > 1.) {\t\t\tgreen = 1.;\t\t}\t}\n\telse {\n\t\ttemp = temp - 6000.;\t\t\n\t\ttemp = temp / 100.;\t\n\t\tgreen = 1.12989086089529411765 * pow(temp, -0.0755148492);\n\t\tif (green < 0.) {\t\t\tgreen = 0.;\t\t}\n\t\telse if (green > 1.) {\t\t\tgreen = 1.;\t\t}\n\t}\t\treturn green;}\n\nfloat calcBlue(float temp) {\n\tfloat blue;\t\n\tif ( temp <= 1900. ) {\t\tblue = 0.;\t}\n\telse if ( temp >= 6600.) {\t\tblue = 1.;\t}\n\telse {\t\n\t\ttemp = temp / 100.;\t\t\n\t\tblue = .00590528345530083 * pow(temp, 1.349167257362226); // R^2 of power curve fit: 0.9996\n\t\tblue = 0.54320678911019607843 * log(temp - 10.0) - 1.19625408914;\n\t\tif (blue < 0.) {\t\t\tblue = 0.;\t\t}\n\t\telse if (blue > 1.) {\t\t\tblue = 1.;\t\t}\t}\n\treturn blue;}\n//\tcolor = vec3(calcRed(temp), calcGreen(temp), calcBlue(temp));\n\n/*\n//https://www.shadertoy.com/view/MsfyRN\n//blackbody radiation try 2, based on planckian locus\nvec3 blackbodyPalette(float t){//temperature in kelvin\n\treturn max((vec3( 5.1099,-1.4746,-0.4452)*((1.532*t + 958078.)/(t*t + 1189.6*t + 1412140.) + .18166)+vec3(-0.9971, 0.0831, 2.1146))/((308.6*t + 352837.)/(t*t - 179.45*t + 6193640.) + .26043)+vec3( 0.9555, 1.6682,-5.4906),0.)*t*t*t*t*2.56e-14;\n}\n/**/\n\n/*\n//https://www.shadertoy.com/view/MdBSRW\n//lava glow\nvec3 blackbody(float t\n){t *=2200.\n ;float u = ( 0.860117757 + 1.54118254e-4 * t + 1.28641212e-7 * t*t ) \n            / ( 1.0 + 8.42420235e-4 * t + 7.08145163e-7 * t*t )\n ;float v = ( 0.317398726 + 4.22806245e-5 * t + 4.20481691e-8 * t*t ) \n            / ( 1.0 - 2.89741816e-5 * t + 1.61456053e-7 * t*t )\n ;float x = 3.0*u / (2.0*u - 8.0*v + 4.0)\n ;float y = 2.0*v / (2.0*u - 8.0*v + 4.0)\n ;float z = 1.0 - x - y\n ;float Y = 1.\n ;float X = Y / y * x\n ;float Z = Y / y * z\n ;mat3 XYZtoRGB = mat3(3.2404542, -1.5371385, -0.4985314,\n                        -0.9692660,  1.8760108,  0.0415560,\n                         0.0556434, -0.2040259,  1.0572252)\n ;return max(vec3(0.0), (vec3(X,Y,Z) * XYZtoRGB) * pow(t * 0.0004, 4.0));}\n*/\n\n/*\n//https://www.shadertoy.com/view/MslSDl\nvec3 BlackBody(float _t){\n    // See: http://en.wikipedia.org/wiki/Planckian_locus\n    //      under \"Approximation\"\n    float u = (0.860117757 + 1.54118254e-4*_t + 1.28641212e-7*_t*_t)\n        / (1.0 + 8.42420235e-4*_t + 7.08145163e-7*_t*_t);\n    float v = (0.317398726 + 4.22806245e-5*_t + 4.20481691e-8*_t*_t)\n        / (1.0 - 2.89741816e-5*_t + 1.61456053e-7*_t*_t);\n    // http://en.wikipedia.org/wiki/CIE_1960_color_space\n    // -> http://en.wikipedia.org/wiki/XYZ_color_space\n    float x = 3.0 * u / (2.0 * u - 8.0 * v + 4.0);\n    float y = 2.0 * v / (2.0 * u - 8.0 * v + 4.0);\n    float z = 1.0 - x - y;\n    float Y = 1.0;\n    float X = (Y/y) * x;\n    float Z = (Y/y) * z;    \n    // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n    mat3 XYZtosRGB = mat3(\n         3.2404542,-1.5371385,-0.4985314,\n        -0.9692660, 1.8760108, 0.0415560,\n         0.0556434,-0.2040259, 1.0572252    );    \n    vec3 RGB = vec3(X,Y,Z) * XYZtosRGB;\n    return RGB * pow(0.0004*_t, 4.0);}\n*/\n\n/*\n//https://www.shadertoy.com/view/lslBWl\nvec3 blackbody(float t){\n    // http://en.wikipedia.org/wiki/Planckian_locus\n    vec4 vx = vec4( -0.2661239e9, -0.2343580e6, 0.8776956e3, 0.179910   );\n    vec4 vy = vec4( -1.1063814,   -1.34811020,  2.18555832, -0.20219683 );\n    //vec4 vy = vec4(-0.9549476,-1.37418593,2.09137015,-0.16748867); //>2222K\n    float it = 1. / t;\n    float it2= it * it;\n    float x = dot( vx, vec4( it*it2, it2, it, 1. ) );\n    float x2 = x * x;\n    float y = dot( vy, vec4( x*x2, x2, x, 1. ) );\n    \n    // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n    mat3 xyzToSrgb = mat3(\n         3.2404542,-1.5371385,-0.4985314,\n        -0.9692660, 1.8760108, 0.0415560,\n         0.0556434,-0.2040259, 1.0572252\n    );\n    vec3 srgb = vec3( x/y, 1., (1.-x-y)/y ) * xyzToSrgb;\n    return max( srgb, 0. );}\n*/\n\n#define aar min(iResolution.x,iResolution.y)\n\nvec4 rgba2waves(vec4 a,vec2 u//visualize gradient over a domain as waveform.y over the same domain.\n){a=a-u.y\n ;a=smoothstep(.01,-.01,abs(a)-fwidth(a)+5./aar)//;a=step(abs(a),fwidth(a))\n //fwidth() doesnt go well with contextual fPiP-frames.\n ;vec4 r=    vec4(a.x,0,0,a.x)\n ;r=pdOver(r,vec4(0,a.y,0,a.y))\n ;r=pdOver(r,vec4(0,0,a.z,a.z))\n ;//r=pdOver(r,vec4(a.w,a.w,0,a.w))//contextual; show w in yellow\n ;return r;}\n\n//float RayleighJeansLaw()\n\n//division that evades a/(b==0), in the context of blackBody() RED is returned close to asymptotes.\nvec4 divBb(vec4 a,float b){if(abs(b)<eps)return vec4(1,0,0,1);return a/b;}\n//cannot mix() the abiove, because that would mix with NaN, which is ambiguous between implementations/contexts.\n\n\n                      \nvoid mainImage(out vec4 o,  vec2 u\n){u/= iResolution.xy\n ;u.x=u.x*6.-2.//zoom out y, see negative temperature range.\n ;float y = 2.*u.y,T=u.x*16000.;// absolute temperature (K)\n ;vec2 m=iMouse.xy/iResolution.xy\n ;m.x=m.x*5.+.1\n ;//m.y=.5//debug override, no gamma corretion\n ;o-= o\n ;if(y>1.\n ){\n  ;if(y<1.6){o=blackBodyNorm(T,m.x);u.y=(u.y-.42*2.)*4.*4.\n  ;}else    {o=blackBodyPhys(T,m.x);u.y=(u.y-.35*2.)*4.*4.;}\n  ;o=pow(o,vec4((1.-2.*(m.y*4.-2.))))//gamma adjust BlackBody\n  ;if(y<1.3)  {o=divBb(o,max(o.r,max(o.g,o.b)));u.y+=2.8;}// chrominance\n }else//fusion*() is intended to highlight a local domain[-3...3] in pseudo-blackbody\n  {if(y>.6\n  ){T=T/16000.*1.75-2.1\n   ;vec3 c=rainbows((sin(((2.-T)/pi)*pi)-.5)/2.+2./6.,-1./6.)//this is eerie\n   //how the hell is this a thing! rainbows() is 3 just cosines/seesaws with shifted phase!\n   //its not a great estimate, but it does have its fun parts, negative temperatures:\n   ;if(u.x<0.)T-=2.32\n   ;if(u.x<0.)c=1.-rainbows(((((-T-2.)/pi)*pi)+.5)/2.+1./6.,2./6.).zyx//this is eerie\n   ;c=mix(c,c/max(c.r,max(c.g,c.b)),-.1)//optional norm\n   ;c=c/max(c.r,max(c.g,c.b))//optional norm\n   ;o=vec4(c,1);\n   ;u.y=(u.y-.4)*4.*4.\n ;}else if(y>.3\n  ){T=T/16000.*1.5-.8\n   ;vec3 c=rainbows(((((2.-T)/pi)*pi)-.5)/2.+1./6.,1./6.)\n   ;if(u.x<0.)T-=0.34\n   ;if(u.x<0.)c=1.-rainbows(((((2.+T)/pi)*pi)-.5)/2.+1./6.)\n       \n   ;c=c/max(c.r,max(c.g,c.b))*u5(((c.g)/(c.r+c.b)))//optional norm\n   ;o=vec4(c,1)\n   ;u.y=(u.y-.2)*4.*4.\n ;}else{\n   ;T=T/16000.\n       ;T*=.8//scale the fusion gradient to better match blackbody\n  ;T+=.25     //offset the fusion gradient to better match blackbody\n   ;vec3 c=fusionHDR(abs(T))\n   ;if(u.x<-.3185)c=(c.grb*c.r*4.)//swas red and green, BUT is the factor is different, it does more.\n   ;//c=normalize(c) //fusion() is NOT normalized\n   ;o=vec4(c,1);\n   ;u.y=(u.y-.05)*4.*4.\n   ;}\n       \n    // o=vec4(1)\n     ;}\n ;//o=blackBodyPhys(T,m)\n ;//o=pow(o,vec4(-m.y*2.+1.))\n ;o=sat(o)//to make rgba2waves() show the limits of a displays range.\n ;o=pdOver(rgba2waves(o,u),o);\n ;}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}