{
    "Shader": {
        "info": {
            "date": "1558393983",
            "description": "Five different interpolations in time: step, linear, cosine, smoothstep and quintic. For learning purposes.\n\nClick to select interpolation.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lSGz1",
            "likes": 8,
            "name": "Interpolations",
            "published": 3,
            "tags": [
                "linear",
                "smoothstep",
                "cosine",
                "interpolation",
                "quintic",
                "step"
            ],
            "usePreview": 0,
            "username": "sschmidtix",
            "viewed": 662
        },
        "renderpass": [
            {
                "code": "// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Copyright Â© 2019 Stefan Schmidt\n//\n// Five different interpolations in time: step, linear, cosine, smoothstep, quintic.\n// For learning purposes.\n//\n// Click to select interpolation.\n// ---------------------------------------------------------------------\n\n// Parameters\n#define PERIOD 2.\n#define REPETITIONS 2\n\n// Constants\nconst float M_PI = radians(180.);\n\nvec3 shadeBlob(vec2 p, float index, float value)\n{\n    float screenRatio = iResolution.x / iResolution.y;\n    vec2 pc = vec2(0.1 + (screenRatio - 0.2) * value, index);\n    \n    float d = distance(p, pc) / 0.015;\n    \n    return vec3(3. * vec3(1.0, 0.5, 0.1) / (max(d * d, 1.)));\n}\n\nfloat step_interp(float x) {\n    return step(0.5, x);\n}\n\nfloat linear_interp(float x) {\n    float c = clamp(x, 0., 1.);\n\t\n    return c;\n}\n\nfloat cosine_interp(float x) {\n    float c = clamp(x, 0., 1.);\n\t\n    return 0.5 * (1. - cos(M_PI * c));\n}\n\nfloat smoothstep_interp(float x) {\n//    return smoothstep(0., 1., x);\n\n    float c = clamp(x, 0., 1.);\n\t\n    return c * c * (3. - 2. * c);\n}\n\nfloat quintic_interp(float x) {\n    float c = clamp(x, 0., 1.);\n\t\n    return c * c * c * ((6. * c - 15.) * c + 10.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p = fragCoord / iResolution.yy;\n    \n\tfloat t = abs(2. * fract(iTime / PERIOD) - 1.);\n    int sel = int(6. * fract(iTime / (float(REPETITIONS) * PERIOD) / 6.));\n    \n    if (iMouse.z > 0.)\n        sel = int(iMouse.y / iResolution.y * 5.);\n    \n    // Background pattern\n    vec3 col = vec3(0.028 + 0.007 * mod(floor(p.x * 10.0) + floor(p.y * 10.0), 2.0));\n\t\n    // Interpolations\n    if (sel == 0)\n\t    col += shadeBlob(p, 0.1, step_interp(t));\n    else if (sel == 1)\n\t    col += shadeBlob(p, 0.3, linear_interp(t));\n    else if (sel == 2)\n\t    col += shadeBlob(p, 0.5, cosine_interp(t));\n    else if (sel == 3)\n\t    col += shadeBlob(p, 0.7, smoothstep_interp(t));\n    else if (sel == 4)\n        col += shadeBlob(p, 0.9, quintic_interp(t));\n    else if (sel == 5)\n    {\n\t    col += shadeBlob(p, 0.1, step_interp(t));\n\t    col += shadeBlob(p, 0.3, linear_interp(t));\n\t    col += shadeBlob(p, 0.5, cosine_interp(t));\n\t    col += shadeBlob(p, 0.7, smoothstep_interp(t));\n        col += shadeBlob(p, 0.9, quintic_interp(t));\n    }\n    \n    col = pow(col, vec3(1. / 2.2));\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}