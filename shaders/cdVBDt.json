{
    "Shader": {
        "info": {
            "date": "1698769319",
            "description": "Summoning Token : https://www.shadertoy.com/view/dsGBDd\nxy = p.x / p.y :: secret sauce\nhttps://cineshader.com/view/cdVBDt",
            "flags": 0,
            "hasliked": 0,
            "id": "cdVBDt",
            "likes": 9,
            "name": "Taste of the Divine II",
            "published": 3,
            "tags": [
                "infinity",
                "summoning"
            ],
            "usePreview": 0,
            "username": "ElSolem",
            "viewed": 916
        },
        "renderpass": [
            {
                "code": "vec3 palette(float d) {\n    return mix(vec3(0.0, 3.02, 1.24), vec3(1.0, 0.01, 1.2), d);\n}\n\nvec2 rotate(vec2 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return p * mat2(c, s, -s, c);\n}\n\nfloat map(vec3 p) {\n    for (int i = 0; i < 66; ++i) {\n        float t = iTime * 0.006;\n        p.xz = rotate(p.xz, t);\n        p.xy = rotate(p.xy, t * 1.0);\n        p.xz = abs(p.xz);\n        p.xz -= 0.16;\n    }\n    return dot(sign(p), p) / 6.0;\n}\n\nvec4 rm(vec3 ro, vec3 rd) {\n    float t = 1.0;\n    vec3 col = vec3(0.006);\n    float d;\n    for (float i = 0.0; i < 36.0; i++) {\n        vec3 p = ro + rd * t;\n        d = map(p) * 0.98;\n        if (d < 0.07) {\n            break;\n        }\n        if (d > 22.0) {\n            break;\n        }\n        col += palette(length(p) * 0.1) / (222.0 * d);\n        t += d;\n    }\n    return vec4(col, 1.0 / (d * 20.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / min(iResolution.y, iResolution.x);\n    float xy = uv.x / uv.y;\n\n    float threshold = 2.0;\n\n    if (abs(xy) < abs(threshold)) {\n        vec3 ro = vec3(55.0, 55.0, -13.0);\n        ro.xz = rotate(ro.xz, iTime);\n        vec3 cf = normalize(-ro);\n        vec3 cs = normalize(cross(cf, vec3(7, 3.0, 17.0)));\n        vec3 cu = normalize(cross(cf, cs));\n\n        vec3 uuv = ro + cf * 3.0 + uv.x * cs + uv.y * cu;\n        vec3 rd = normalize(uuv - ro);\n\n        vec4 col = rm(ro, rd);\n\n        fragColor = col;\n    } else {\n        vec3 ro = vec3(55.0, 55.0, -13.0);\n        ro.xz = rotate(ro.xz, iTime);\n        vec3 cf = normalize(-ro);\n        vec3 cs = normalize(cross(cf, vec3(7, 3.0, 17.0)));\n        vec3 cu = normalize(cross(cf, cs));\n\n        vec3 uuv = ro + cf * 3.0 + uv.x * cs + uv.y * cu;\n        vec3 rd = normalize(uuv - ro);\n\n        vec4 col = rm(ro, rd);\n\n        fragColor = col;\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}