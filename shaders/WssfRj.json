{
    "Shader": {
        "info": {
            "date": "1588630516",
            "description": "hoveringsoul01",
            "flags": 0,
            "hasliked": 0,
            "id": "WssfRj",
            "likes": 0,
            "name": "hoveringsoul01",
            "published": 3,
            "tags": [
                "hoveringsoul01"
            ],
            "usePreview": 0,
            "username": "paulobarcelos",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265358979323846\nvec2 rotate2D(vec2 uv, float angle){\n    uv -= 0.5;\n    float s = sin(angle);\n    float c = cos(angle);\n    uv *=  mat2(c,-s,s ,c);\n    uv += 0.5;\n    return uv;\n}\n\nvec3 cosPalette( float t, vec3 a, vec3 b, vec3 c, vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec4 gradient(float t) {\n\treturn vec4( cosPalette(t,\n    \tvec3(0.5, 0.2, 0.5),\n        vec3(0.2, 0.2, 0.2),\n        vec3(0.4, 0.2, 0.8),\n        vec3(0.0, 0.1, 0.0)\n    ), 1.0);\n}\n\nfloat rectangle(vec2 uv, vec2 size, float blur) {\n    uv = abs(uv);\n    vec2 halfSize = size * 0.5;\n    float halfBlur = blur * 0.5;\n    vec2 start = halfSize + halfBlur;\n    vec2 end = clamp(vec2(0.0), vec2(1.0), halfSize - halfBlur);\n    vec2 m = smoothstep(start, end, uv);\n    return m.x * m.y;\n}\n\nfloat leafShape(vec2 uv, float time) {\n    float height = 0.5;\n    float verticalChange = clamp(0.0, 1.0, ((uv.y + 0.5) - (1.0 - height)) / height);\n    uv.x += sin(time + verticalChange * 5.0) * verticalChange * 0.5;\n    uv.y += 0.1;\n    vec2 size = vec2(mix(0.1, 0.9, verticalChange), height);\n    float blur = mix(0.3, 1.1, verticalChange * verticalChange);\n    float r = rectangle(uv, size, blur);\n    return smoothstep(0.1, 0.15, smoothstep(0.1, 0.15, r));\n}\n\nfloat lines(vec2 suv, float time) {\n    float l;\n    vec2 uv;\n       \n    uv = suv;\n    uv *= 6.0;\n    uv.x += step(1., mod(uv.y, 2.0)) * 0.5;\n    uv = fract(uv) - 0.5;\n    uv.y += time * 1.0;  \n    uv.y = mod(uv.y, 2.0) - 0.5;\n    l += smoothstep(0.05, 0.08, rectangle(uv, vec2(0.001, 0.7), 0.2)) * 0.6;\n   \n    uv = suv;\n    uv *= 6.0;\n    uv.x += step(1., mod(uv.y + 1.0, 2.0)) * 0.5;\n    uv = fract(uv) - 0.5;\n    uv.y += time * 1.0;  \n    uv.y = mod(uv.y + 1.0 , 2.0) - 0.5;\n    l += smoothstep(0.05, 0.08, rectangle(uv, vec2(0.001, 0.7), 0.2)) * 0.6;\n    \n    return l;\n}\n\nvec4 soul(vec2 uv, float time) {\n    vec4 color = vec4(0);\n    \n    uv.y *= 0.7;\n    uv.y += 0.1;\n    \n    float t1 = time + 0.2;\n    float t2 = t1 + 0.2;\n    float t3 = t2 + 0.2;\n    \n    vec2 offset1 = vec2(sin(t1) * 0.1, cos(t1) * 0.05);\n    vec2 offset2 = vec2(sin(t2) * 0.2, cos(t2) * 0.075);\n    vec2 offset3 = vec2(sin(t3) * 0.3, cos(t3) * 0.1);\n    \n    float s1 = leafShape(uv + offset1, t1);\n    float s2 = leafShape(uv / vec2(0.8, 1.0) + offset2 , t2);\n    float s3 = leafShape(uv / vec2(0.5, 1.0) + offset3, t3);\n    \n    float ss1 = leafShape(uv + offset1 + vec2(0.005), t1);\n    float ss2 = leafShape(uv / vec2(0.8, 1.0) + offset2 + vec2(0.005), t2);\n    float ss3 = leafShape(uv / vec2(0.5, 1.0) + offset3 + vec2(0.005), t3);\n\n    vec4 shaddowColor = vec4(0, 0, 0, 1.0);\n    \n    color = mix(color, shaddowColor, ss1 * 0.5);\n    color = mix(color, gradient(t1 + uv.y), s1);\n    \n    color = mix(color, shaddowColor, ss2 * 0.5);\n    color = mix(color, gradient(t2 + uv.y), s2);\n    \n    color = mix(color, shaddowColor, ss3 * 0.5);\n    color = mix(color, gradient(t3 + uv.y), s3);\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // speed\n    float time = iTime * 0.5;\n    \n    // normalize -0.5 <> 0.5\n    vec2 uv = (fragCoord - iResolution.xy * 0.5)/iResolution.y;\n    \n    // shrink scene\n    uv *= 1.5;\n    \n    // rotate scene \n    float a = PI * 0.25;\n    float s = sin(a);\n    float c = cos(a);\n    uv *=  mat2(c,-s,s ,c);\n    \n    // uv.x += cos(time * (uv.y + 0.5) * .06) * .03;\n    \n    uv.x += cos(uv.y * 6.0 ) * .05;\n    \n    \n    // bg color\n    vec4 color = vec4(gradient(time * 0.5 + uv.y * 0.5)) * 0.5;\n    \n \n    // lines\n    color = mix(color, vec4(1), lines(uv, time));\n    \n    // soul\n    vec4 soul = soul(uv, time);\n    \n    // color = mix(color, vec4(0), soulShaddow.a * 0.5);\n    color = mix(color, soul, soul.a);\n    \n    // paint pixel\n    fragColor = color;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}