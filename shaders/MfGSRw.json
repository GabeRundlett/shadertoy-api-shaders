{
    "Shader": {
        "info": {
            "date": "1714936198",
            "description": " After an annoying week at work I needed to tinker a bit.",
            "flags": 0,
            "hasliked": 0,
            "id": "MfGSRw",
            "likes": 42,
            "name": "Rendezvous with gasgiant",
            "published": 3,
            "tags": [
                "space"
            ],
            "usePreview": 1,
            "username": "mrange",
            "viewed": 333
        },
        "renderpass": [
            {
                "code": "// CC0 - Rendezvous with gasgiant\n//  After an annoying week at work I needed to tinker a bit.\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n\nconst vec3 luma         = sqrt(vec3(0.299, 0.587, 0.114));\nconst vec4 planetDim    = vec4(vec3(0.0,0.,0.), 1.);\nconst vec3 sunDir       = normalize(vec3(-0.4, 0.5, -1.));\nconst vec3 sunCol       = HSV2RGB(vec3(0.58, 0.6, 1.));\nconst vec3 starCol0     = HSV2RGB(vec3(0.05, 0.5, 0.5));\nconst vec3 starCol1     = HSV2RGB(vec3(0.55, 0.3, 0.75));\nconst vec3 coreCol      = HSV2RGB(vec3(0.0475, 0.75, 8.));\nconst vec3 raylCol      = HSV2RGB(vec3(0.58, 0.85, 0.75));\nconst vec3 bottomBoxCol = HSV2RGB(vec3(0.5, 0.75, 0.5));\nconst vec3 topBoxCol    = HSV2RGB(vec3(0.57, 0.80, 1.));\nconst vec3 planetCol0   = HSV2RGB(vec3(0.04, 0.5, 1.));\nconst vec3 shipPos      = vec3(0.,0.075, 2.);\nconst vec3 shipDim      = vec3(0.9, 0.1, 0.3)*0.3;\nconst vec3 shipGlow     = HSV2RGB(vec3(0.05, 0.8, 1E-6));\nconst mat2 shipRot      = ROT(0.7);\nconst float halfPeriod  = 70.;\nconst float fadeIn      = 5.;\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6;\n  float a = 2.51;\n  float b = 0.03;\n  float c = 2.43;\n  float d = 0.59;\n  float e = 0.14;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0, 1.0);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nvec2 hash2(vec2 p) {\n  p = vec2(dot (p, vec2 (127.1, 311.7)), dot (p, vec2 (269.5, 183.3)));\n  return fract(sin(p)*43758.5453123);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/distfunctions/\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n  \nfloat vnoise(vec2 p) {\n  return texture(iChannel0, p).x;\n}\n\n// License: Unknown, author: Claude Brezinski, found: https://mathr.co.uk/blog/2017-09-06_approximating_hyperbolic_tangent.html\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors/\nvec2 raySphere(vec3 ro, vec3 rd, vec4 sd) {\n  vec3 oc = ro - sd.xyz;\n  float b = dot( oc, rd );\n  float c = dot( oc, oc ) - sd.w*sd.w;\n  float h = b*b - c;\n  // no intersection\n  if (h<0.0) return vec2(-1.0);\n  h = sqrt( h );\n  return -b+vec2(-h, +h);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors/\nvec2 rayEllipse(vec3 ro, vec3 rd, vec3 ra) {\n    vec3 ocn = ro/ra;\n    vec3 rdn = rd/ra;\n    float a = dot( rdn, rdn );\n    float b = dot( ocn, rdn );\n    float c = dot( ocn, ocn );\n    float h = b*b - a*(c-1.0);\n    if( h<0.0 ) return vec2(-1.0); //no intersection\n    h = sqrt(h);\n    return vec2(-b-h,-b+h)/a;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/articles/intersectors/\nvec3 norEllipse(vec3 pos, vec3 ra) {\n  return normalize(pos/(ra*ra) );\n}\n\n\nvec3 toSpherical(vec3 p) {\n  float r   = length(p);\n  float t   = acos(p.z/r);\n  float ph  = atan(p.y, p.x);\n  return vec3(r, t, ph);\n}\n\nvec2 rayShip(vec3 ro, vec3 rd) {\n  ro.xz *= shipRot;\n  ro -= shipPos;\n  rd.xz *= shipRot;\n  return rayEllipse(ro, rd, shipDim);\n}\n\nvec3 norShip(vec3 pos) {\n  pos.xz *= shipRot;\n  pos -= shipPos;\n  return norEllipse(pos, shipDim);\n}\n\nfloat height(vec2 p, float magic) {\n  float h = 0.;\n  float ip = 7.*length(p)+1.5;\n  float ia = 0.25;\n  for (float i = 0.; i < 7.; ++i) {\n    h += ia*sin(ip);\n    ia *= 0.5*magic;\n    ip = 1.99*ip+1.;\n  }\n  return h;\n}\n\nvec3 ringCol(vec2 p, float magic) {\n  vec3 h = vec3(0.);\n  float ip = 7.*length(p)+2.;\n  float ia = 0.5;\n  for (float i = 0.; i < 7.; ++i) {\n    h += ia*sin(0.15*vec3(2,1,0)+ip);\n    ia *= 0.5*magic;\n    ip = 1.99*ip+1.;\n  }\n  h = abs(h);\n  return h;\n}\n\nvec3 planetCol(vec3 pp) {\n  float h = 0.;\n  float p = pp.y;\n  float ip = 4.*(p)-2.;\n  float ia = 0.6;\n  for (float i = 0.; i < 7.; ++i) {\n    h += ia*(1.+sin(ip));\n    ia *= 0.5;\n    ip = 1.99*ip+1.;\n  }\n  h *= h*0.25;\n  return h*planetCol0;\n}\n\nfloat hf(vec2 p, float magic) {\n  return 1E-2*height(p, 0.9*magic);\n}\n\nvec3 nf(vec2 p, float aa, float magic) {\n  vec2 e = vec2(aa, 0);\n  \n  vec3 n;\n  n.x = hf(p + e.xy, magic) - hf(p - e.xy, magic);\n  n.y = 2.0*e.x;\n  n.z = hf(p + e.yx, magic) - hf(p - e.yx, magic);\n  \n  return normalize(n);\n}\n\nvec3 skyCol0(vec3 ro, vec3 rd) {\n  float gf0 = 1.001 -dot(rd, sunDir);\n  vec3 col = sunCol*1E-5/(gf0*gf0);\n  return col; \n}\n\nvec3 stars0(vec2 cp, float sd) {\n  vec3 scol0 = vec3(0.);\n  const float ii = 3.;\n  for (float i = 0.; i < ii; ++i) {\n    float fi = (i+1.)/ii;\n    vec2 sp2 = cp;\n    float sc = PI/(100.-20.*fi*fi); \n    sp2 /= sc;\n    vec2 np2 = round(sp2);\n    vec2 cp2 = sp2-np2;\n    vec2 sh2 = -1.+2.*hash2(np2+123.4+i);\n    float sh1= fract((sh2.x+sh2.y)*8667.);\n    cp2 += sh2*0.5;\n    cp2.y *=sd;\n    float dd = length(cp2)*sc;\n    \n    if (sh1+0. < sd) {\n      scol0 += sh1*fi*smoothstep(sd*15E-4, 0., dd)*sqrt(mix(starCol0, starCol1, sh1*sh1));\n    }\n  }\n  return scol0;\n}\n\nvec3 stars1(vec2 cp, float sd) {\n  vec3 scol1 = vec3(0.);\n  const float ii =3.;\n  for (float i = 0.; i < ii; ++i) {\n    float fi = (i+1.)/ii;\n    vec2 sp2 = cp;\n    float sc = PI/(20.-10.*fi*fi); \n    sp2 /= sc;\n    vec2 np2 = round(sp2);\n    vec2 cp2 = sp2-np2;\n    vec2 sh2 = -1.+2.*hash2(np2+123.4+i);\n    float sh1= fract((sh2.x+sh2.y)*8667.);\n    cp2 += sh2*0.33;\n    cp2.y *=sd;\n    float dd = length(cp2)*sc;\n    float sh3 = fract(3667.0*sh1);\n    \n    if (sh3+0.5 < sd) {\n      vec3 scol = mix(starCol0, starCol1, sh1*sh1);\n      scol1 += sh3*fi*2E-10*scol*scol/max(dd*dd*dd*dd, 1E-10);\n      scol1 += 2.*fi*smoothstep(sd*15E-4, 0., mix(0.75, 0.5, fi)*dd)*scol;\n    }\n  }\n  return scol1;\n}\n\nfloat dust(vec2 cp, float sd, float di) {\n  const float jj = 9.;\n  const mat2 r0 = ROT(4.8);\n  const mat2 r1 = 1.99*ROT(1.91);\n  vec2 jp2 = cp;\n  jp2.y *= sd;\n  jp2 *= 0.05;\n  jp2 -= 1E-3*vec2(21., -17.);\n  jp2 *= r0;\n  float jh = 0.;\n  float ja = 1.; \n  float jagg = 0.;\n  for (float j = 0.; j < jj; ++j) {\n    jh += ja*vnoise(jp2);\n    jagg += ja;\n    ja *= -0.55;\n    jp2 *= r1;\n  }\n  jh /= jagg;\n  jh -= 0.42;\n  jh = max(jh, 0.);\n  jh *= sd;\n  jh *= di;\n  return exp(-40.*(jh));\n}\n\nvec2 core(vec2 cp, float sd) {\n  const mat2 r0 = ROT(PI*0.33);\n  vec2 gp = cp;\n  gp.y *= sd;\n  gp.y -= 0.6;\n  gp *= r0;\n  gp = abs(gp);\n  float glum = smoothstep(1.0,0.25, gp.x)*tanh_approx(1E-3/((pow(8.*gp.x,4.)+1.)*pow(gp.y, 2.)));\n  \n  return vec2(glum, tanh_approx(3E-3/(gp.y*gp.y)));\n}\n\nvec3 skyCol1(vec3 ro, vec3 rd) {\n  vec3 col = skyCol0(ro, rd);\n\n  vec3 sp = toSpherical(rd.xzy);\n  float sd = sin(sp.y);\n  \n  vec2 cp = sp.yz-.5*PI*vec2(1.,-1.);\n  \n  vec3 scol0 = stars0(cp, sd);\n  vec3 scol1 = stars1(cp, sd);\n\n  vec2 core = core(cp, sd);\n  float dust = dust(cp, sd, core.y);\n  \n  col += coreCol*core.x*dust;\n  float lum = dot(luma, col);\n  float sfo = 1./(1E3*lum+1.);\n  col += scol0*dust*sfo;\n  col += scol1*sfo;\n\n  return col; \n}\n\nvec3 skyCol2(vec3 ro, vec3 rd) {\n  vec3 col = skyCol0(ro, rd);\n  \n  float tp0  = -(ro.y+5.)/rd.y;\n  float tp1 = -(ro.y-6.)/rd.y;\n\n  if (tp0 > 0.0) {\n    col += bottomBoxCol*exp(-0.75*(length((ro + tp0*rd).xz)));\n  }\n\n  if (tp1 > 0.0) {\n    vec3 pos  = ro + tp1*rd;\n    vec2 pp = pos.xz;\n    float db = box(pp, vec2(9.0, 2.0))-3.;\n    \n    col += topBoxCol*rd.y*rd.y*smoothstep(0.25, 0.0, db);\n    col += 0.2*topBoxCol*exp(-0.5*max(db, 0.0));\n    col += 0.05*sqrt(topBoxCol)*max(-db, 0.0);\n  }\n\n  return clamp(col, 0., 10.); \n}\n\n\nfloat ringShadow(vec3 ro, vec3 rd) {\n  float ri = -(ro.y-planetDim.y)/rd.y; \n  vec3 rp = ro+rd*ri; \n  vec3 pp  = rp-planetDim.xyz;\n\n  vec2 rp2 = pp.xz;\n  float rl = length(rp2);\n  float sp = 4.5*rl+1.;\n  float shade = 0.6+0.3*sin(sp)*sin(2.9*sp);\n  return ri > 0. ? 1.-shade*smoothstep(0.4, 0.2, abs(rl-2.)) : 1.;\n}\n\nvec4 rings(vec3 ro, vec3 rd, vec3 nrd, out float hit) {\n  float ri = -(ro.y-planetDim.y)/rd.y; \n  float nri = -(ro.y-planetDim.y)/nrd.y; \n  vec3 rp = ro+rd*ri; \n  vec3 nrp = ro+nrd*nri; \n  vec2 si = raySphere(rp, sunDir, planetDim);\n  vec2 ssi = rayShip(rp, sunDir);\n  vec3 pp  = rp-planetDim.xyz;\n  vec2 rp2 = pp.xz;\n  vec2 nrp2 = nrp.xz-planetDim.xz;\n  float aa = length(nrp2-rp2);\n  float rl = length(rp2);\n  float rfre = 1.+rd.y;\n  float magic = smoothstep(1., .6, rfre*sqrt(abs(dot(normalize(pp), normalize(rd)))));\n  magic = mix(1., magic, tanh_approx(.1*ri));\n  vec3 ringCol = ringCol(rp2, magic);\n  vec3 n = nf(rp2, aa, magic);\n  vec3 r = reflect(rd, n);\n  float dif = max(dot(sunDir, n), 0.0);\n  vec3 ref = skyCol0(rp, r);\n  vec3 rcol = vec3(0.);\n  rcol += ringCol;\n  rcol += sqrt(ref)*rfre;\n  rcol *= smoothstep(0.4, 0.2, abs(rl-2.));\n  float rt = dot(luma, rcol);\n  if (si.x > 0.)\n    rcol *= 1.-0.95*tanh_approx(4.*pow(si.y-si.x, 2.));\n  if (ssi.x > 0.)\n    rcol *= 1.-0.9*tanh_approx(2E4*pow(ssi.y-ssi.x, 4.));\n  hit = ri > 0. ? ri : -1.;\n  return vec4(rcol, rt*step(0., ri));\n}\n\nvec4 planet(vec3 ro, vec3 rd, vec3 nrd, out float hit) {\n  vec2 pi = raySphere(ro, rd, planetDim);\n  vec3 rp = ro+rd*pi.x;\n  vec3 pp = rp-planetDim.xyz;\n  vec3 pn = normalize(pp);\n  vec3 pr = reflect(rd, pn);\n  float pfre = 1.+dot(rd, pn);\n  pfre *= pfre;\n  pfre *= pfre;\n  float pt = tanh_approx(1E3*pow(pi.y-pi.x, 4.)/pi.x);\n  vec3 pcol = vec3(0.);\n    \n  float diff = max(dot(pn, sunDir), 0.);\n  pcol += sqrt(diff)*sqrt(sunCol)*planetCol(pp);\n  pcol += skyCol0(rp, pr)*smoothstep(0.45, 0.6, pfre);\n  pcol += raylCol*diff*pfre;\n  hit = pi.x;\n  float ringShadow = ringShadow(rp, sunDir);\n  pcol.xyz *= ringShadow;\n  return vec4(pcol, pt*step(0., pi.x));\n}\n\nvec4 ship(vec3 ro, vec3 rd, vec3 nrd, out float hit) {\n\n  vec2 si = rayShip(ro, rd);\n  vec3 sp = ro+rd*si.x;\n  vec3 sn = norShip(sp);\n  vec3 sr = reflect(rd, sn);\n  vec3 srr= refract(rd, sn, 0.8);\n  float gd = abs(sp.y-shipPos.y);\n  float fre= 1.0+dot(sn,rd);\n\n  vec3 scol = skyCol2(sp, sr)*mix(2./3., 1., fre*fre)/(1.+1E-2*si.x*si.x);\n  scol += shipGlow/max(gd*gd, 1E-7+1E-7*si.x*si.x);\n  float st = tanh_approx(1E3*pow(si.y-si.x, 2.)/si.x);\n  hit = si.x;\n  return vec4(scol, st*step(0., si.x));\n}\n\nvec3 pos(float tm) {\n  float t = -(tm-halfPeriod)/halfPeriod;\n  return vec3(8.*t, 3.*t*t*t, -14.0*t*t)+vec3(0., 0.5, 3.);\n}\n\nvec3 effect(vec2 p) {\n  const float fov = 2.;\n  const vec3 up = normalize(vec3(0.0, 1., 0.5));\n  \n  float tm  = mod(TIME, 2.*halfPeriod); \n  vec3 ro   = pos(tm);\n  vec3 dro  = normalize(ro-pos(tm-1E-1));\n  vec2 np   = p+sqrt(8.)/RESOLUTION.y;\n\n  vec3 ww0 = dro;\n  vec3 ww1 = normalize(-ro);\n  vec3 ww = normalize(ww0+3.*ww1);\n  vec3 uu = normalize(cross(up, ww));\n  vec3 vv = cross(ww, uu);\n  \n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww);\n  vec3 nrd = normalize(-np.x*uu + np.y*vv + fov*ww);\n\n  float phit, rhit, shit;\n  \n  vec4 pcol = planet(ro, rd, nrd, phit);\n  vec4 rcol = rings(ro, rd, nrd, rhit);\n  vec4 scol = ship(ro, rd, nrd, shit);\n\n  float pt = pcol.w;\n  float rt = rcol.w*(rhit < phit?1.:1.-pt);\n  rt *= smoothstep(1E-3, 1E-2, abs(rd.y));\n  float st = scol.w*(shit < phit?1.:1.-pt);\n  st *= shit < rhit?1.:1.-rt;\n\n  vec3 col = skyCol1(ro, rd);\n\n  col = mix(col, pcol.xyz, pt);\n  col = mix(col, rcol.xyz, rt);  \n  col = mix(col, scol.xyz, st);\n\n  col = aces_approx(col);  \n  col *= smoothstep(halfPeriod-1., halfPeriod-fadeIn, abs(tm-halfPeriod));\n  col = sqrt(col);\n\n  return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 p= (-RESOLUTION.xy+2.*fragCoord)/RESOLUTION.yy;\n\n  vec3 col = effect(p);\n  fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}