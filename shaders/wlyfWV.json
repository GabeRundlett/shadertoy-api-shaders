{
    "Shader": {
        "info": {
            "date": "1615063096",
            "description": "Destroying signed distance fields for nice visuals.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlyfWV",
            "likes": 0,
            "name": "DJ Visuals with broken sdf",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "fakeglow"
            ],
            "usePreview": 0,
            "username": "eimink",
            "viewed": 240
        },
        "renderpass": [
            {
                "code": "const float E = 0.0001;\nconst float FAR = 40.0;\nconst int STEPS = 64;\n\nvec3 glow = vec3(0.0);\n\nfloat speed = 2.0;\nfloat tunnelrot = 1.4;\nfloat tunneltwst = .6;\nfloat camyaw = 0.4;\nfloat morphspd = 0.25;\n\n\nfloat noise(vec3 p)\n{\n\tvec3 ip=floor(p);\n    p-=ip; \n    float s1 = smoothstep(41.,41.+(iTime*0.01),sin(iTime));\n    float s2 = smoothstep(157.,157.+(iTime*0.01),cos(iTime));\n    float s3 = smoothstep(353.,353.+(iTime*0.01),sin(iTime));\n    vec3 s=vec3(s1,s2,s3);\n    vec4 h=vec4(0.,s.yz,s.y+s.z)+dot(ip,s);\n    p=p*p*(3.-2.*p); \n    h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n    h.xy=mix(h.xz,h.yw,p.y);\n    return mix(h.x,h.y,p.z); \n}\n\nfloat noise2(vec3 p)\n{\n\tvec3 ip=floor(p);\n    p-=ip; \n    vec3 s=vec3(11,313,701);\n    vec4 h=vec4(0.,s.yz,s.y+s.z)+dot(ip,s);\n    p=p*p*(3.-2.*p); \n    h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n    h.xy=mix(h.xz,h.yw,p.y);\n    return mix(h.x,h.y,p.z); \n}\n\nvoid rot(inout vec2 p, float a) {\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat box (vec3 p, vec3 r){\n    vec3 d = abs(p) - r;\n    return length(max(d,0.0) + min(max(d.x, max(d.y, d.z)), 0.0));\n}\n\nfloat oct( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nvec3 twistz(vec3 p, float k) {\n    float c = cos(k*p.z);\n    float s = sin(k*p.z);\n    mat2  m = mat2(c,-s,s,c);\n    return vec3(m*p.xy,p.z);\n}\n\nfloat tun2(vec3 p){\n    vec3 pp = p;\n    vec3 t = vec3(2.) - abs(vec3(length(pp.xz),length(p.xy),1.0));\n    return max(t.x,t.y)+.1;\n    return min(max(t.x,t.y),0.0);\n}\n\nfloat tun(vec3 p){\n    vec3 t = vec3(2.) - abs(twistz(p,tunneltwst));\n    return min(t.x,t.y);\n}\n\nfloat op(vec3 p){\n    float d1 = tun2(p);\n    float d2 = tun(p);\n    float d3 = mix(noise(p),noise2(p),-1.);\n    float t = clamp(iTime*0.1,0.0,1.);\n    return mix(d2,d1,t)+d3;\n}\n\nfloat scene(vec3 p)\n{\n    vec3 pp = p;\n    //pp -= vec3(0.,0.,iTime*speed+1.5);\n    for (int i = 0; i < 5; ++i)\n    {\n        rot(pp.xy,iTime*0.01);\n        rot(pp.xz,cos(iTime*0.2));\n        rot(pp.yz,sin(iTime*0.2));\n        pp = twistz(abs(pp) - float(i)*vec3(.1,.2,.0),.1);\n        \n    }\n    float a = oct(pp,2.5);\n    float c = box(pp,vec3(1.2,1.2,1.2));\n    float d =  mix(c,a,cos(3.+iTime*morphspd)*1.2);\n    rot(p.yx,iTime*tunnelrot);\n    float b = op(pp);\n    d = max(d,0.01);\n    \n    if (mod(p.z,noise2(p)) <= 1.) {\n            glow += vec3(.6+cos(iTime*2.)*0.3,.0,.6+sin(iTime)*0.2)*0.001/(0.01+abs(b));\n        }\n    glow += vec3(0.7,0.3,0.0)* 0.01 / (0.01+abs(d));\n    float r = min(b,max(c,a));\n    return abs(r);\n}\n\nfloat march(in vec3 ro, in vec3 rd, out vec3 p)\n{\n    p = ro;\n    float t = E;\n    for (int i = 0; i < STEPS; ++i) {\n        float d = scene(p);\n        t += d;        \n        if (d < E || t > FAR) {\n            break;\n        }\n        p -= rd*d;\n    }\n    return t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 cp = vec3(sin(iTime)*camyaw,.0,-3.);//iTime*speed);\n    rot(cp.xz,sin(iTime*0.001));\n    vec3 ct = vec3(0,0,-1);\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n\n    vec3 cf = normalize(ct-cp);\n    vec3 cr = normalize(cross(vec3(0.0,1.0,0.0),cf));\n    vec3 cu = normalize(cross(cf,cr));\n    \n    vec3 rd = normalize(mat3(cr,cu,cf)*vec3(q,radians(60.0)));\n   \n    vec3 col = vec3(1.);\n    vec3 p = vec3(0);\n    float t = march(cp,rd,p);\n    if (t < FAR) {\n            col = mix(vec3(.2,.2,.6),vec3(.3,.3,.8),step(0.9,fract(p.z)))*exp((cp.z-p.z)*0.3);       \n    }\n    col *= glow;\n    col = smoothstep(0.0,1.0,col);\n    col *= (1.0-vec3(t/FAR));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}