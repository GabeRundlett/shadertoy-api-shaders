{
    "Shader": {
        "info": {
            "date": "1638191101",
            "description": "Don't fall off",
            "flags": 0,
            "hasliked": 0,
            "id": "ftK3Rt",
            "likes": 25,
            "name": "Bucking Bronco",
            "published": 3,
            "tags": [
                "kinematics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 436
        },
        "renderpass": [
            {
                "code": "// \"Bucking Bronco\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  0   // (= 0/1) optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nvec3 HsvToRgb (vec3 c);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\n\nvec3 ltPos[3], ltCol[3], pUp, qHit;\nvec2 aRotCs[3];\nfloat tCur, dstFar, movFac, platRad[2];\nint idObj;\nconst int idTube = 1, idBall = 2, idBase = 3, idLeg = 4, idPlat = 5, idSeat = 6, idGrip = 7; \nconst float pi = 3.1415927;\n\nstruct TbCon {\n  vec3 pLo, pHi;\n  vec2 aLimCs, tRotCs[2], pRotCs[2];\n  float chLen, chDist, ang, rad;\n};\nTbCon tbCon[4];\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\n#define F(x) (sin (x) / x - b)\n\nfloat SecSolve (float b)\n{  // (from \"Robotic Head\")\n  vec3 t;\n  vec2 f;\n  float x;\n  if (b < 0.95) {\n    t.yz = vec2 (0.7, 1.2);\n    f = vec2 (F(t.y), F(t.z));\n    for (int nIt = 0; nIt < 4; nIt ++) {\n      t.x = (t.z * f.x - t.y * f.y) / (f.x - f.y);\n      t.zy = t.yx;\n      f = vec2 (F(t.x), f.x);\n    }\n    x = t.x;\n  } else if (b < 1.) {\n    x = sqrt (10. * (1. - sqrt (1. - 1.2 * (1. - b))));\n  } else {\n    x = 0.;\n  }\n  return x;\n}\n\nvoid SetConf ()\n{\n  vec3 vp;\n  float tubeLen, t, h, rm, a[3];\n  movFac = SmoothBump (0.15, 0.85, 0.07, mod (0.05 * tCur, 1.));\n  t = 1.5 * tCur;\n  platRad[0] = 3.3;\n  platRad[1] = 1.;\n  rm = 0.55 * (platRad[1] - platRad[0]);\n  h = 0.1 + movFac * 0.9 * (1.2 + 0.6 * sin (2.3 * t));\n  tubeLen = length (vec2 (platRad[1] - platRad[0], 2.));\n  pUp.xz = movFac * Rot2D (vec2 (rm, 0.), t + 0.5 * (Fbm1 (t) - 0.5));\n  pUp.y = h;\n  a[0] = movFac * 0.1 * pi * sin (2.7 * t);\n  a[1] = movFac * 0.1 * pi * sin (2.9 * t);\n  a[2] = movFac * pi * (Fbm1 (0.5 * t) - 0.5) + 0.25 * pi;\n  aRotCs[0] = sin (a[0] + vec2 (0.5 * pi, 0.));\n  aRotCs[1] = sin (a[1] + vec2 (0.5 * pi, 0.));\n  aRotCs[2] = sin (a[2] + vec2 (0.5 * pi, 0.));\n  for (int k = 0; k < 4; k ++) {\n    tbCon[k].pLo = vec3 (Rot2D (vec2 (platRad[0] + 0.11, 0.), float (k) * 0.5 * pi), - h).xzy;\n    tbCon[k].pHi = vec3 (Rot2D (vec2 (platRad[1] + 0.11, 0.), float (k) * 0.5 * pi) + pUp.xz,\n       pUp.y).xzy;\n    tbCon[k].pHi.xy = Rot2D (tbCon[k].pHi.xy, - a[0]);\n    tbCon[k].pHi.zy = Rot2D (tbCon[k].pHi.zy, - a[1]);\n    vp = tbCon[k].pHi - tbCon[k].pLo;\n    tbCon[k].pLo.y += h;\n    tbCon[k].pHi.y += pUp.y;\n    tbCon[k].chLen = 0.5 * length (vp);\n    tbCon[k].tRotCs[0] = sin (atan (vp.x, vp.z) + vec2 (0.5 * pi, 0.));\n    tbCon[k].tRotCs[1] = sin (- asin (length (vp.xz) / length (vp)) + vec2 (0.5 * pi, 0.));\n    tbCon[k].ang = SecSolve (tbCon[k].chLen / tubeLen);\n    tbCon[k].chDist = tbCon[k].chLen / tan (tbCon[k].ang);\n    tbCon[k].rad = length (vec2 (tbCon[k].chDist, tbCon[k].chLen));\n    tbCon[k].aLimCs = sin (- tbCon[k].ang + vec2 (0.5 * pi, 0.));\n  }\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, a;\n  dMin = dstFar;\n  p.y -= 0.36;\n  q = p;\n  q.y -= -0.05;\n  d = PrRoundCylDf (q.xzy, platRad[0] + 0.03, 0.02, 0.04);\n  DMINQ (idBase);\n  q.y -= -0.22;\n  q.xz = abs (q.xz) - 0.63 * platRad[0];\n  d = PrCylDf (q.xzy, 0.1 * platRad[0], 0.15);\n  DMINQ (idLeg);\n  for (int k = 0; k < 4; k ++) {\n    d = PrSphDf (p - tbCon[k].pLo, 0.1);\n    DMINQ (idBall);\n  }\n  q = p;\n  q.y -= pUp.y;\n  q.xy = Rot2Cs (q.xy, aRotCs[0]);\n  q.zy = Rot2Cs (q.zy, aRotCs[1]);\n  q -= pUp;\n  q.y -= -0.1;\n  d = PrRoundCylDf (q.xzy, platRad[1] + 0.07, 0.02, 0.04);\n  DMINQ (idPlat);\n  q.y -= 0.3;\n  d = PrCylDf (q.xzy, 0.15, 0.25);\n  DMINQ (idSeat);\n  q.y -= 0.33;\n  q.xz = Rot2Cs (q.xz, aRotCs[2]);\n  d = PrRoundBoxDf (q, vec3 (0.4, 0.15, 0.08), 0.1);\n  DMINQ (idSeat);\n  q.xy -= vec2 (0.3, 0.25);\n  d = PrTorusBxDf (q.yzx, vec3 (0.25, 0.12, 0.08), 0.03);\n  DMINQ (idGrip);\n  for (int k = 0; k < 4; k ++) {\n    d = PrSphDf (p - tbCon[k].pHi, 0.1);\n    DMINQ (idBall);\n  }\n  for (int k = 0; k < 4; k ++) {\n    q = p - tbCon[k].pLo;\n    q.xz = Rot2Cs (q.xz, tbCon[k].tRotCs[0]);\n    q.yz = Rot2Cs (q.yz, tbCon[k].tRotCs[1]) - vec2 (tbCon[k].chLen, tbCon[k].chDist);\n    a = fract ((128. / tbCon[k].ang) * atan (q.y, - q.z) / (2. * pi));\n    d = max (dot (vec2 (abs (q.y), - q.z), tbCon[k].aLimCs), length (vec2 (length (q.yz) -\n       tbCon[k].rad, q.x)) - (0.08 - 0.012 * smoothstep (0.15, 0.35, 0.5 - abs (0.5 - a))));\n    DMINQ (idTube);\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.001 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dMax)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.001 || d > dMax) break;\n  }\n  return 0.3 + 0.7 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, ltDir, ltAx, c;\n  vec2 u;\n  float dstObj, nDotL, sh, att, ltDst, a, r;\n  bool isMet;\n  SetConf ();\n  dstObj = ObjRay (ro, rd);\n  col = vec3 (0.);\n  isMet = false;\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idTube) {\n      col4 = vec4 (0.8, 0.8, 0.9, 0.3);\n      isMet = true;\n    } else if (idObj == idBall) {\n      col4 = vec4 (0.9, 0.7, 0.4, 0.3);\n      isMet = true;\n    } else if (idObj == idBase) {\n      r = length (qHit.xz);\n      col4 = vec4 (0.5, 0.6, 0.4, 0.1) * (0.85 + 0.15 * smoothstep (0., 0.05,\n         abs (r - 1.1 * platRad[1])));\n      u = Rot2D (qHit.xz, pi / 16.);\n      a = (r > 0.) ? atan (u.y, - u.x) / (2. * pi) : 0.;\n      u = Rot2D (u, 2. * pi * (floor (16. * a + 0.5) / 16.));\n      if (length (u + vec2 (platRad[0] - 0.3, 0.)) < 0.15) col4 = vec4 (((movFac > 0.2) ?\n         HsvToRgb (vec3 (mod (a + 0.5 * pi * tCur, 1.), 1., 1.)) :\n         vec3 (1., 1., 0.) * (0.8 + 0.2 * sin (16. * pi * tCur))), -1.);\n    } else if (idObj == idLeg) {\n      col4 = vec4 (0.5, 0.6, 0.4, 0.1);\n    } else if (idObj == idPlat) {\n      col4 = vec4 (0.6, 0.5, 0.7, 0.2);\n      r = length (qHit.xz);\n      u = Rot2D (qHit.xz, pi / 8.);\n      a = (r > 0.) ? atan (u.y, - u.x) / (2. * pi) : 0.;\n      u = Rot2D (u, 2. * pi * (floor (8. * a + 0.5) / 8.));\n      if (length (u + vec2 (platRad[1] - 0.15, 0.)) < 0.1)\n         col4 = vec4 (((movFac > 0.) ? vec3 (1., 0., 0.) : vec3 (0., 1., 0.)), -1.);\n    } else if (idObj == idSeat) {\n      col4 = vec4 (0.7, 0.5, 0.1, 0.2);\n    } else if (idObj == idGrip) {\n      col4 = vec4 (1., 0.5, 0.5, 0.2);\n      isMet = true;\n    }\n  } else if (rd.y < 0.) {\n    dstObj = - ro.y / rd.y;\n    ro += dstObj * rd;\n    vn = vec3 (0., 1., 0.);\n    u = ro.xz;\n    col4 = vec4 (0.6, 0.5, 0.5, 0.1) * (1. - 0.2 * Fbm2 (4. * u));\n    u = abs (fract (u + 0.5) - 0.5);\n    col4.rgb *= (1. - 0.15 * smoothstep (0.05, 0.08,\n       abs (max (abs (u.x + u.y), abs (u.x - u.y)) - 0.2) - 0.2)) *\n       (1. - 0.15 * smoothstep (0.05, 0.08, length (max (u - 0.42, 0.))));\n  }\n  if (dstObj < dstFar) {\n    if (col4.a >= 0.) {\n      for (int k = VAR_ZERO; k < 3; k ++) {\n        ltDir = ltPos[k] - ro;\n        ltDst = length (ltDir);\n        ltDir /= ltDst;\n        ltAx = normalize (ltPos[k] - vec3 (0., 2., 0.));\n        att = smoothstep (0., 0.02, dot (ltDir, ltAx) - 0.97);\n        sh = (dstObj < dstFar) ? ObjSShadow (ro + 0.01 * vn, ltDir, ltDst) : 1.;\n        nDotL = max (dot (vn, ltDir), 0.);\n        if (isMet) nDotL *= nDotL * nDotL;\n        c = att * ltCol[k] * (col4.rgb * (0.1 + 0.9 * sh * nDotL) +\n           col4.a * step (0.95, sh) * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.));\n        col += c * c;\n      }\n      col = sqrt (col);\n    } else col = col4.rgb * (0.5 + 0.5 * max (0., - dot (vn, rd)));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.2 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.03 * pi * tCur;\n    el += 0.08 * pi * cos (0.02 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, -0.01 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 1.5, -20.);\n  for (int k = VAR_ZERO; k < 3; k ++) {\n    ltPos[k] = vec3 (0., 30., 0.);\n    ltPos[k].xy = Rot2D (ltPos[k].xy, 0.25 * pi * (1. + 0.2 * sin (0.05 * pi * tCur -\n       pi * float (k) / 3.)));\n    ltPos[k].xz = Rot2D (ltPos[k].xz, -0.1 * pi * tCur + 2. * pi * float (k) / 3.);\n  }\n  ltCol[0] = vec3 (1., 0.2, 0.2);\n  ltCol[1] = ltCol[0].gbr;\n  ltCol[2] = ltCol[0].brg;\n  zmFac = 4.2;\n  dstFar = 60.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri)\n{\n  return length (vec2 (length (max (abs (p.xy) - b.xy, 0.)) - b.z, p.z)) - ri;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. -\n     3.) - 1., 0., 1.), c.y);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}