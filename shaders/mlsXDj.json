{
    "Shader": {
        "info": {
            "date": "1675885747",
            "description": "variation of @yonatan twigl shader",
            "flags": 0,
            "hasliked": 0,
            "id": "mlsXDj",
            "likes": 56,
            "name": "pulsating intestines",
            "published": 3,
            "tags": [
                "2d",
                "twigl"
            ],
            "usePreview": 1,
            "username": "shaderology",
            "viewed": 1622
        },
        "renderpass": [
            {
                "code": "// noisePulse() by @yonatan\n// https://twigl.app/?ol=true&ss=-NNIajM4aEzy75lqtAUd\n// https://twitter.com/zozuar\n\nmat2 rotate2D(float r){\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\nfloat noisePulse(in vec2 p, in float t){\n\n    vec2 n,q;\n    vec2 o = (iMouse.xy*.001);\n    float d=dot(p,p),S=9.,i,a,j;\n    for(mat2 m=rotate2D(5.);j++<16.;){\n      p*=m;\n      n*=m;\n      q=(p+o)*S+t*4.+sin(t*4.-d*6.)*.8+j+n ;\n      a+=dot(cos(q)/S,vec2(.2));\n      n-=sin(q);\n      S*=1.2;\n    }\n    \n    return a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 r = (fragCoord.xy-.5*iResolution.xy);\n    float a = iResolution.y;\n    vec2 uv = r/a;\n\n\tvec2 m = iMouse.xy / a;\n    \n    // VARIABLES\n    vec3 sp = vec3(uv + .5, 0.);\n    vec3 lp = vec3(0.5, 0.5, 1.) + vec3(m,0.);\n    vec3 ld = normalize(lp - sp);\n    vec3 ro = vec3(0., 0., -1.);\n    vec3 rd = normalize(ro-sp);\n\n    // NORMALS\n    vec2 x1 = (r-vec2(-1.,0.))/a;\n    vec2 y1 = (r-vec2(0.,-1.))/a;\n         \n    float nB = noisePulse(uv, iTime);\n    float nX = noisePulse(x1, iTime);\n    float nY = noisePulse(y1, iTime);\n    \n    float Nx = (nB-nX);\n    float Ny = (nB-nY);\n    vec3 N = normalize(vec3(Nx,Ny,0.005));\n\n    // TEXTURE\n    vec2 uvd = uv * (1. + (N.xy*.1)) + (N.xy*.1);\n    vec3 tex = texture(iChannel0,uvd).xyz;\n    \n    // SHADE\n\tfloat diff = max(dot(N, ld), 0.);\n    float spec = pow(max(dot( reflect(N, ld), rd), 0.), 16.); \n    float occl = nB + .5;  \n    \n    // COMP\n    vec3 tint = vec3(0.3, 0.03, 0.005);\n    vec3 comp = vec3(0);\n    comp += occl * occl * tint;\n    comp += diff * tint * 0.2;\n    comp += spec * tex;\n    \n    // POST\n    uv -= vec2(1.);\n    comp *= pow(2.0*uv.x*uv.y*(uv.x-1.)*(uv.y-1.),0.4);\n    comp = sqrt(comp);    \n    \n    fragColor=vec4(comp,1.);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}