{
    "Shader": {
        "info": {
            "date": "1651863266",
            "description": "Just a quick test of using fwidth for isolines and a cool pseudo 3d effect",
            "flags": 0,
            "hasliked": 0,
            "id": "fljBRW",
            "likes": 16,
            "name": "Surface Lines",
            "published": 3,
            "tags": [
                "noise",
                "isolines",
                "contourlines"
            ],
            "usePreview": 0,
            "username": "Dragonpeak",
            "viewed": 361
        },
        "renderpass": [
            {
                "code": "//Just a quick test of using fwidth for isolines and a cool pseudo 3d effect\nconst int SLICES = 50;\nconst float SURF = .6;\nconst float WID = 1.1;\n#define t iTime*.1\nuvec3 pcg3d(uvec3 v) \n{\n    //from https://www.shadertoy.com/view/XlGcRh\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    v ^= v >> 16u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    return v;\n}\nvec3 Rand3D(vec3 v)\n{\n    return vec3(pcg3d(uvec3(v)))/float(0xffffffffu);\n}\n\nfloat Noise3D(vec3 p)\n{\n    p+=iDate.z*100.;\n    vec3 ap = abs(p);\n    vec3 fr = fract(ap);\n    fr = fr * fr * (3. - 2. * fr);\n    \n    float a = Rand3D(ap).x;\n    float b = Rand3D(ap+vec3(1,0,0)).x;\n    float c = Rand3D(ap+vec3(0,1,0)).x;\n    float d = Rand3D(ap+vec3(1,1,0)).x;\n    \n    float e = Rand3D(ap+vec3(0,0,1)).x;\n    float f = Rand3D(ap+vec3(1,0,1)).x;\n    float g = Rand3D(ap+vec3(0,1,1)).x;\n    float h = Rand3D(ap+vec3(1,1,1)).x;\n\n    float v = mix(mix(mix(a,b, fr.x),mix(c,d,fr.x), fr.y), mix(mix(e,f, fr.x),mix(g,h,fr.x), fr.y), fr.z);\n    \n\n    \n\n    return v;\n}\n\n\nfloat DrawSlice(vec3 p)\n{\n    p.xy+= vec2(Noise3D(p*5.+5151.51), Noise3D(p*5.-625.83))*.2-.1;\n    float d = Noise3D(vec3(p.xy, p.z*.1)*15.)-Noise3D(p*30.)*.3-Noise3D(p*90.)*.1;\n    d*= smoothstep(0., .3, 1.-length(p.xy)*3.4);\n    return max(-(abs(d-SURF)/fwidth(d)-WID), 0.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.x-vec2(.5,iResolution.y/iResolution.x/2.))*vec2(1,-3.);\n    \n    float shape = 0.;\n    for(int i = 0; i < SLICES; i++)\n    {\n        float off = float(i)/float(SLICES);\n        vec2 uv2 = vec2(uv.x, uv.y-off+.5);\n        shape += DrawSlice(vec3(mat2(cos(t), -sin(t), sin(t), cos(t))*uv2, off))*min(uv2.y+.6,1.);\n    }\n    \n    vec3 col = mix(vec3(.9), vec3(0.3), clamp(shape, 0., 1.));\n\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}