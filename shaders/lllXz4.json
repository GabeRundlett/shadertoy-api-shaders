{
    "Shader": {
        "info": {
            "date": "1446535483",
            "description": "Spherical Fibonacci points, as described by this paper [url]https://dl.acm.org/doi/10.1145/2816795.2818131[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "lllXz4",
            "likes": 103,
            "name": "Inverse Spherical Fibonacci",
            "published": 3,
            "tags": [
                "3d",
                "sampling",
                "spherical",
                "fibonacci"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 6974
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// Spherical Fibonnacci points, as described by Benjamin Keinert, Matthias Innmann, \n// Michael Sanger and Marc Stamminger in their paper (below)\n\n\n//=================================================================================================\n// https://dl.acm.org/doi/10.1145/2816795.2818131\n//=================================================================================================\n\nvec2 inverseSF( vec3 p ) \n{\n    const float kTau = 6.28318530718;\n    const float kPhi = (1.0+sqrt(5.0))/2.0;\n    const float kNum = 150.0;\n\n    float k  = max(2.0, floor(log2(kNum*kTau*0.5*sqrt(5.0)*(1.0-p.z*p.z))/log2(kPhi+1.0)));\n    float Fk = pow(kPhi, k)/sqrt(5.0);\n    vec2  F  = vec2(round(Fk), round(Fk*kPhi)); // |Fk|, |Fk+1|\n    \n    vec2  ka = 2.0*F/kNum;\n    vec2  kb = kTau*(fract((F+1.0)*kPhi)-(kPhi-1.0));    \n\n    mat2 iB = mat2( ka.y, -ka.x, kb.y, -kb.x ) / (ka.y*kb.x - ka.x*kb.y);\n    vec2 c = floor(iB*vec2(atan(p.y,p.x),p.z-1.0+1.0/kNum));\n\n    float d = 8.0;\n    float j = 0.0;\n    for( int s=0; s<4; s++ ) \n    {\n        vec2  uv = vec2(s&1,s>>1);\n        float id = clamp(dot(F, uv+c),0.0,kNum-1.0); // all quantities are integers\n        \n        float phi      = kTau*fract(id*kPhi);\n        float cosTheta = 1.0 - (2.0*id+1.0)/kNum;\n        float sinTheta = sqrt(1.0-cosTheta*cosTheta);\n        \n        vec3 q = vec3( cos(phi)*sinTheta, sin(phi)*sinTheta, cosTheta );\n        float tmp = dot(q-p, q-p);\n        if( tmp<d ) \n        {\n            d = tmp;\n            j = id;\n        }\n    }\n    return vec2( j, sqrt(d) );\n}\n\n\n//=================================================================================================\n// iq code starts here\n//=================================================================================================\n\nfloat hash1( float n ) { return fract(sin(n)*158.5453123); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n\n     // camera movement\t\n\tfloat an = 0.5*iTime;\n\tvec3 ro = vec3( 2.5*cos(an), 1.0, 2.5*sin(an) );\n    vec3 ta = vec3( 0.0, 1.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n    // sphere center\t\n\tvec3 sc = vec3(0.0,1.0,0.0);\n    \n    vec3 col = vec3(1.0);\n\n    // raytrace\n\tfloat tmin = 10000.0;\n\tvec3  nor = vec3(0.0);\n\tfloat occ = 1.0;\n\tvec3  pos = vec3(0.0);\n\t\n\t// raytrace-plane\n\tfloat h = (0.0-ro.y)/rd.y;\n\tif( h>0.0 ) \n\t{ \n\t\ttmin = h; \n\t\tnor = vec3(0.0,1.0,0.0); \n\t\tpos = ro + h*rd;\n\t\tvec3 di = sc - pos;\n\t\tfloat l = length(di);\n\t\tocc = 1.0 - dot(nor,di/l)*1.0*1.0/(l*l); \n        col = vec3(1.0);\n\t}\n\n\t// raytrace-sphere\n\tvec3  ce = ro - sc;\n\tfloat b = dot( rd, ce );\n\tfloat c = dot( ce, ce ) - 1.0;\n\th = b*b - c;\n\tif( h>0.0 )\n\t{\n\t\th = -b - sqrt(h);\n\t\tif( h<tmin ) \n\t\t{ \n\t\t\ttmin=h; \n\t\t\tnor = normalize(ro+h*rd-sc); \n\t\t\tocc = 0.5 + 0.5*nor.y;\n\t\t}\n        \n        vec2 fi = inverseSF(nor);\n        col = 0.5 + 0.5*sin( hash1(fi.x*13.0)*3.0 + 1.0 + vec3(0.0,1.0,1.0));\n        col *= smoothstep(0.02, 0.03, fi.y);\n        col *= mix( 1.0, 1.0 - smoothstep(0.12, 0.125, fi.y), smoothstep(-0.1,0.1,sin(iTime) )) ;\n        col *= 1.0 + 0.1*sin(250.0*fi.y);\n        col *= 1.5;\n\t}\n\n\tif( tmin<100.0 )\n\t{\n\t    pos = ro + tmin*rd;\n\t\tcol *= occ;\n\t\tcol = mix( col, vec3(1.0), 1.0-exp( -0.003*tmin*tmin ) );\n\t}\n\t\n\tcol = sqrt( col );\n\t\n\tfragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}