{
    "Shader": {
        "info": {
            "date": "1544538231",
            "description": "Based of DOOM 2016s DOF effect as described here: http://www.adriancourreges.com/blog/2016/09/09/doom-2016-graphics-study/\n\nDrag the mouse left and right to control blur.\nDrag the mouse up and down to control day-night cycle.",
            "flags": 32,
            "hasliked": 0,
            "id": "4lVfDt",
            "likes": 40,
            "name": "DOOM 2016 Style DOF bokeh blur",
            "published": 3,
            "tags": [
                "blur",
                "dof",
                "bokeh",
                "doom"
            ],
            "usePreview": 0,
            "username": "battlebottle",
            "viewed": 2293
        },
        "renderpass": [
            {
                "code": "\n\n// ACES fitted\n// from https://github.com/TheRealMJP/BakingLab/blob/master/BakingLab/ACES.hlsl\n\nconst mat3 ACESInputMat = mat3(\n    0.59719, 0.35458, 0.04823,\n    0.07600, 0.90834, 0.01566,\n    0.02840, 0.13383, 0.83777\n);\n\n// ODT_SAT => XYZ => D60_2_D65 => sRGB\nconst mat3 ACESOutputMat = mat3(\n     1.60475, -0.53108, -0.07367,\n    -0.10208,  1.10813, -0.00605,\n    -0.00327, -0.07276,  1.07602\n);\n\nvec3 RRTAndODTFit(vec3 v)\n{\n    vec3 a = v * (v + 0.0245786) - 0.000090537;\n    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n    return a / b;\n}\n\nvec3 ACESFitted(vec3 color)\n{\n    color = color * ACESInputMat;\n\n    // Apply RRT and ODT\n    color = RRTAndODTFit(color);\n\n    color = color * ACESOutputMat;\n\n    // Clamp to [0, 1]\n    color = clamp(color, 0.0, 1.0);\n\n    return color;\n}\n\n\n\nvec3 OECF_sRGBFast(const vec3 linear) {\n    return pow(linear, vec3(1.0 / 2.2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy ;\n    \n    \n    float nightCycle = (sin(iTime / 2.0) + 1.0) / 2.0;\n    \n    \n    fragColor = vec4(OECF_sRGBFast(ACESFitted(textureLod(iChannel0, uv, 0.0).rgb)), 1.0);\n    //add some noise\n    fragColor -= vec4( texture(iChannel1, fragCoord.xy / 256.0).rgb / 64.0, 0.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n\nvoid paintLight(vec2 pos, float radius, vec3 col, inout vec4 fragIn, inout vec2 uvCoords){\n    float dist = distance(uvCoords, pos);\n    if (dist < radius) {\n        fragIn += vec4(col, 0.0);\n    }\n}\n\n\nvec3 OECF_sRGBFast(const vec3 gamma2_2) {\n    return pow(gamma2_2, vec3(2.2 / 1.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x + vec2(0.0, 0.16);\n    \n    \n    float nightCycle = (sin((iTime - 3.0) / 2.0) + 1.0) / 2.0;\n    \n    if (iMouse.z > 0.0) {\n        nightCycle = (iMouse.y / iResolution.y);\n    }\n    \n    \n    fragColor = vec4(OECF_sRGBFast(textureLod(iChannel0, uv, 0.0).rgb) * 1.0, 1.0);\n    fragColor *= mix(vec4(0.2,0.2,0.6, 1.0), vec4(1.2, 1.2, 0.95, 1.0), nightCycle);\n    //taxi headlights\n    paintLight(vec2(.47,.369), 0.004, vec3(.8,.7,.6) * 60.0, fragColor, uv);\n    paintLight(vec2(.498,.37), 0.004, vec3(.8,.7,.6) * 60.0, fragColor, uv);\n    \n    //bus break lights\n    paintLight(vec2(.217,.35), 0.003, vec3(.8,.1,.1) * 40.0, fragColor, uv);\n    paintLight(vec2(.259,.354), 0.003, vec3(.8,.1,.1) * 40.0, fragColor, uv);\n    \n    //bus indicator\n    if(mod(iTime, 1.0) < 0.5) {\n    \tpaintLight(vec2(.21642,.355), 0.003, vec3(.6,.8,.1) * 60.0, fragColor, uv);\n    }\n    \n    fragColor *= vec4(vec3(clamp((nightCycle - 0.04) * 10.0, 0.0, 1.0)), 1.0);\n    \n    \n\t//fragColor *= nightCycle;\n\n    // Output to screen\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float PI = 3.14;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy ;\n    float blurRadMax = 0.08;\n    float blurRadius = blurRadMax * ((sin(iTime / 2.0) + 1.0) / 2.0);\n    \n    if (iMouse.z > 0.0) {\n        blurRadius = blurRadMax * (iMouse.x / iResolution.x);\n    }\n    \n    \n    float blurCircles = 4.0;// * (blurRadius * 12.0);\n    \n    float totalSamples = 0.0;\n    vec3 colAcum = vec3(0.0);\n    \n    for(float currentCircle = 0.0; currentCircle < blurCircles; currentCircle++) {\n        float samplesForCurrentCircle = (pow((currentCircle + 1.0), 2.0) - pow(currentCircle, 2.0)) * 4.0;\n        float currentRadius = (blurRadius / float(blurCircles)) * (float(currentCircle) + 0.5);\n          \n        \n        for(float currentSample = 0.0; currentSample < samplesForCurrentCircle; currentSample++) {\n            vec2 samplePoint = vec2(0.0, currentRadius);\n            float angle = (2.0 * PI) * ((currentSample + 0.5) / samplesForCurrentCircle);\n            \n            float s = sin(angle);\n            float c = cos(angle);\n            mat2 m = mat2(c, -s, s, c);\n            samplePoint = m * samplePoint;\n            \n            samplePoint *= vec2(iResolution.y / iResolution.x, 1.0);\n            \n            totalSamples++;\n            colAcum += textureLod(iChannel0, uv + samplePoint, blurRadius * 30.0).rgb;\n        }\n    }\n    \n    \n    //colAcum = colAcum / 300.0;\n    \n    fragColor =  vec4(colAcum / totalSamples, 1.0);//-0\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float PI = 3.14;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy ;\n    float blurRadMax = 0.08;\n    float blurRadius = blurRadMax * ((sin(iTime / 2.0) + 1.0) / 2.0);\n    \n    if (iMouse.z > 0.0) {\n        blurRadius = blurRadMax * (iMouse.x / iResolution.x);\n    }\n    blurRadius *= 0.3;\n    float blurCircles = 3.0;\n    \n    float totalSamples = 0.0;\n    vec3 colAcum = vec3(0.0);\n    \n    for(float currentCircle = 0.0; currentCircle < blurCircles; currentCircle++) {\n        float samplesForCurrentCircle = (pow((currentCircle + 1.0), 2.0) - pow(currentCircle, 2.0)) * 4.0;\n        float currentRadius = (blurRadius / float(blurCircles)) * (float(currentCircle) + 0.5);\n          \n        \n        for(float currentSample = 0.0; currentSample < samplesForCurrentCircle; currentSample++) {\n            vec2 samplePoint = vec2(0.0, currentRadius);\n            float angle = (2.0 * PI) * ((currentSample + 0.5) / samplesForCurrentCircle);\n            \n            float s = sin(angle);\n            float c = cos(angle);\n            mat2 m = mat2(c, -s, s, c);\n            samplePoint = m * samplePoint;\n            \n            samplePoint *= vec2(iResolution.y / iResolution.x, 1.0);\n            \n            totalSamples++;\n            colAcum = max(colAcum, texture(iChannel0, uv + samplePoint).rgb);\n        }\n    }\n    \n    \n    //colAcum = colAcum / 300.0;\n    \n    fragColor =  vec4(colAcum, 1.0);//-0\n    //fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}