{
    "Shader": {
        "info": {
            "date": "1641931910",
            "description": "My participation to genuary 2022\nMachine learning, wrong answers only.",
            "flags": 32,
            "hasliked": 0,
            "id": "7dscRM",
            "likes": 11,
            "name": "Genuary 2022 - Day10",
            "published": 3,
            "tags": [
                "machinelearning",
                "genuary",
                "2022"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 331
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float f = 1.;\n    vec3 col = texture(iChannel0, (uv)*f+vec2(.5)-vec2(.5*f)).xyz;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec3 rdr(vec2 uv, vec2 coords)\n{\n    vec3 col = vec3(0.);\n    \n    if (mod(float(iFrame), 550.0) == 0.)\n        col += vec3(1.)*sat(pow(texture(iChannel1, uv*2.0).x, 20.)*400.);\n    else\n    {\n        float prev = texelFetch(iChannel0, ivec2(coords),0).x;\n        float neighbors[8];\n        neighbors[0] = texelFetch(iChannel0, ivec2(coords+vec2(1.0,0.0)),0).x;\n        neighbors[1] = texelFetch(iChannel0, ivec2(coords+vec2(1.0,1.0)),0).x;\n        neighbors[2] = texelFetch(iChannel0, ivec2(coords+vec2(0.0,1.0)),0).x;\n        neighbors[3] = texelFetch(iChannel0, ivec2(coords+vec2(-1.0,1.0)),0).x;\n        neighbors[4] = texelFetch(iChannel0, ivec2(coords+vec2(-1.0,0.0)),0).x;\n        neighbors[5] = texelFetch(iChannel0, ivec2(coords+vec2(-1.0,-1.0)),0).x;\n        neighbors[6] = texelFetch(iChannel0, ivec2(coords+vec2(0.0,-1.0)),0).x;\n        neighbors[7] = texelFetch(iChannel0, ivec2(coords+vec2(1.0,-1.0)),0).x;\n        int neighborsCount = 0;\n        for (int i = 0; i < 8; ++i)\n        {\n            neighborsCount += int(neighbors[i]);\n        }\n        if (prev > 0.5 && (neighborsCount == 2 || neighborsCount == 3))\n            col = vec3(1.0);\n        if (prev < 0.5 && neighborsCount == 3)\n            col = vec3(1.0);\n    }\n    \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    \n    vec3 col = rdr(uv, fragCoord);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s ,s, c); }\n\n// Thanks IQ\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    \n    vec3 prev = texelFetch(iChannel1, ivec2(fragCoord.xy), 0).xyz;\n    vec3 col = texelFetch(iChannel0, ivec2(fragCoord.xy), 0).xyz;\n\n    col = mix(col, col*vec3(sin(uv.x*5.+iTime)*.2+.8, .2, .8), sat(prev.x));\n    \n    uv *= .25;\n    float shape = \n    max(max((length(uv*vec2(1.,1.7)*r2d(.5)-vec2(-0.01,.03))-.075), -uv.y-0.01), uv.x-.01);\n    shape = smin(shape,     \n    (length((uv-vec2(.025,0.015))*r2d(.8)*vec2(1.4,1.8))-.07), .01);\n\n    shape = min(shape, length(uv*r2d(-.2)*vec2(1.,1.3)-vec2(-0.01,-0.005))-.035);\n    shape = min(shape, length(uv*r2d(-.2)*vec2(1.,1.3)-vec2(0.025,-0.02))-.035);\n    \n    shape = smin(shape, max(max(abs(uv.x*1.5+uv.y+.01)-.01, uv.y), -uv.y-.06), 0.01);\n    col *= sat((1.-sat(shape*400.))*.5+.4);\n    \n//    col += (1.-sat((abs(shape)-.0001)*4000.))*vec3(1.);\n    //col += 1.-texture(iChannel2, uv*5.-vec2(.5)).xyz; // Brain texture\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec3 doBloom(vec2 uv, float blur, float threshold)\n{\n    vec3 col;\n    int cnt = 20;\n    float fcnt = float(cnt);\n    for (int i = 0;i <cnt;++i)\n    {\n        float fi = float(i);\n        float coef = (fi/fcnt);\n        float sz = 1.+pow(coef,2.)*blur;\n        float samplePerTurn = 4.;\n        float an = (fi/(fcnt/samplePerTurn))*PI;\n        vec2 p = uv - vec2(sin(an), cos(an))*(fi/fcnt)*blur*.1;\n        vec3 smple = texture(iChannel0, p).xyz;\n        if (length(smple) > threshold)\n            col += smple;\n    \t\n        \n    }\n    \n    return col/float(cnt);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cuv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    \n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    float bloomIntensity = 5.;  \n    vec3 bloomSample = doBloom(uv, 50./360., 437./ 640.);\n    bloomSample = pow(bloomSample, vec3(0.9));\n    col = pow(col, vec3(1.)*mix(0.45,1.45,(sat(length(cuv*3.)))));\n    col = col + (bloomSample*bloomIntensity);\n    \n    col = pow(col, vec3(1.9));\n    \n    col *= 1.-sat((length(cuv)-.25)*3.);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}