{
    "Shader": {
        "info": {
            "date": "1705040977",
            "description": "recreating artwork by Anni Alberts for genuary\nclick to randomize\ntruchet tiles where the light triangles avoid touching sides or same neighbors\nfeels like it's missing some rules\nhttps://media.mutualart.com/Images/2022_09/14/11/112026399/triangula",
            "flags": 32,
            "hasliked": 0,
            "id": "MflSRN",
            "likes": 10,
            "name": "triangulated intaglio II 1976",
            "published": 3,
            "tags": [
                "annialbers",
                "genuary"
            ],
            "usePreview": 0,
            "username": "ufffd",
            "viewed": 177
        },
        "renderpass": [
            {
                "code": "// set false if there are rendering issues\n#define GENERATE true\n// set true to view BufferA activity\n#define DEBUG_A false\n\n#define BLK vec3(59,  53,  55 )/255.\n#define WHT vec3(250, 239, 222)/255.\n\nfloat drawTile(in vec2 p, in int r) { // y not. wouldn't recommend copying this to your code tho\n    if (r<1) return 0.;\n    if (r==1)\n        return p.x > p.y ? 1. : 0.;\n    if (r==2)\n        return p.x > p.y ? 0. : 1.;\n    if (r==3)\n        return p.x > 1.-p.y ? 1. : 0.;\n    if (r==4)\n        return p.x > 1.-p.y ? 0. : 1.;\n    if (r>4) return 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if (DEBUG_A) {\n        fragColor = texture(iChannel1, uv/24.);\n        fragColor.r /= 3.;\n        return;\n    }\n    \n    vec3 col = vec3(0.);\n    if (uv.x < .23 || uv.x > .77 || uv.y < .03 || uv.y > .97) {\n        // background/wall\n        float plank_r = hash11(floor(uv.x*12.));\n        col = texture(iChannel0, rot(PI/2.1 + PI*plank_r*.1)*uv*(2.+plank_r)).rgb;\n        col += .1;\n        col *= .8;\n        col -= smoothstep(0.96,1.,fract(uv.x*12.))/6.;\n        col += smoothstep(0.04,.0,fract(uv.x*12.))/8.;\n        col -= 0.5*(smoothstep(0.19,0.3,uv.x) - smoothstep(0.7,0.81,uv.x)) * smoothstep(0.,0.04,uv.y) * smoothstep(0.,.1,1.-uv.y);\n        fragColor = vec4(col,1.);\n        return;\n    }\n    \n    uv.y -= .75/48.;\n    \n    vec2 tile_uv = uv;\n    tile_uv -= 0.5;\n    vec2 scale = vec2(48.,27.);\n    tile_uv *= scale*1.1;\n    tile_uv += scale/2.;\n    ivec2 tile_n = ivec2(floor(tile_uv.x), floor(tile_uv.y));\n    tile_uv = fract(tile_uv);\n    \n    \n    float bw = 0.;\n    int tile_dir = 5;\n    ivec4 frame = ivec4(11,36,0,25);\n    if (tile_n.x>frame.x && tile_n.x<frame.y && tile_n.y>frame.z && tile_n.y<frame.w) {\n        // random:\n        if (!GENERATE) {\n            if      (tile_n == ivec2( frame.x+1,frame.z+1)) tile_dir = 4;\n            else if (tile_n == ivec2( frame.x+1,frame.w-1)) tile_dir = 2;\n            else if (tile_n == ivec2( frame.y-1,frame.z+1)) tile_dir = 1;\n            else if (tile_n == ivec2( frame.y-1,frame.w-1)) tile_dir = 3;\n            else    {\n                // tile_dir = int(hash12(vec2(tile_n)+abs(iMouse.zw))*5.)-1;\n            }\n        } else {\n            // buffer generated:\n            tile_dir = int(texture(iChannel1,vec2(tile_n-frame.xz)/iResolution.xy).r);\n        }\n    }\n    bw = drawTile(tile_uv,tile_dir);\n    col = mix(BLK,WHT,bw);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// SIZE is 0 indexed (23 = 24x24)\n#define SIZE 23\n\n// 1 ◤ NW\n// 2 ◢ SE\n// 3 ◣ SW\n// 4 ◥ NE\n// N = 1,4\n// S = 2,3\n// E = 2,4\n// W = 1,3\n\nint resetPattern(in vec2 uv) {\n    ivec2 iuv = ivec2(uv);\n    if (iuv==ivec2(0,0))\n        return 4;\n    if (iuv==ivec2(0,SIZE))\n        return 2;\n    if (iuv==ivec2(SIZE,0))\n        return 1;\n    if (iuv==ivec2(SIZE,SIZE))\n        return 3;\n    else\n        return -999;\n}\n\nint getNeighborX(in vec2 uv, in int x) {\n    return int(texture(iChannel0,uv+float(x)*vec2(1./iResolution.x,0.)).r);\n}\nint getNeighborY(in vec2 uv, in int y) {\n    return int(texture(iChannel0,uv+float(y)*vec2(0.,1./iResolution.y)).r);\n}\n\nint resolvePattern(in vec2 uv, in int nN, in int nE, in int nS, in int nW) {\n    for(int i=0; i<999; i++) {\n        int rand = int(hash12(vec2(iTime)+uv+float(i))*4.+0.5);\n        // return 1;\n        if ((nN==2||nN==3)&&(rand==1||rand==4)) continue;\n        if ((nS==1||nS==4)&&(rand==2||rand==3)) continue;\n        if ((nE==1||nE==3)&&(rand==2||rand==4)) continue;\n        if ((nW==2||nW==4)&&(rand==1||rand==3)) continue;\n        if (rand!=0&&(nN==rand||nS==rand||nE==rand||nW==rand)) continue;\n        return rand;\n    }\n    return 0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    float data = texture(iChannel0, uv).r;\n    \n    float SIZEp5 = float(SIZE)+0.5;\n    if (fragCoord.x > SIZEp5 || fragCoord.y > SIZEp5) {\n        fragColor = vec4(999.,0.,0.,0.);\n        return;\n    }\n    \n    if (iTime<0.1 || iMouse.z > 0.) {\n        data = float(resetPattern(fragCoord));\n    }\n    bool drawFrame = iFrame % 10 < 1; // resolve pattern at 6 fps (on most machines)\n    if (data<-99. && drawFrame) {\n        int nN = getNeighborY(uv,1);\n        int nS = getNeighborY(uv,-1);\n        int nW = getNeighborX(uv,1);\n        int nE = getNeighborX(uv,-1);\n        float HALF = float(SIZE+1)/2.; // +0.5\n        if (fragCoord.x > HALF && fragCoord.y > HALF) {\n            if (abs(nW) < 99 || abs(nN) < 99)\n                data = float(resolvePattern(uv,nN,-999,-999,nW));\n        } \n        else if (fragCoord.x > HALF && fragCoord.y < HALF) {\n            if (abs(nW) < 99 || abs(nS) < 99)\n                data = float(resolvePattern(uv,-999,-999,nS,nW));\n        }\n        else if (fragCoord.x <= HALF && fragCoord.y >= HALF) {\n            if (abs(nE) < 99 || abs(nN) < 99)\n                data = float(resolvePattern(uv,nN,nE,-999,-999));\n        } \n        else if (fragCoord.x <= HALF && fragCoord.y <= HALF) {\n            if (abs(nE) < 99 || abs(nS) < 99)\n                data = float(resolvePattern(uv,-999,nE,nS,-999));\n        }\n        // -1 data = unset tiles\n        // calculate tiles iteratively\n        // if any neighbor tile is set, pick one that doesnt conflict with neighbors\n        // calculate in checker pattern to avoid creating conflicts in simultaneous sets\n    }\n    \n    fragColor = vec4(data,0.,0.,0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float hash11(float p) {\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nmat2 rot(in float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n\n    return mat2(\n        c, -s,\n        s, c\n    );\n}\n\n#define PI 3.14289\n\nint imod(in int i, in int m) {\n    return 0;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}