{
    "Shader": {
        "info": {
            "date": "1550917399",
            "description": "Rendering grids on plane after complex transformations.",
            "flags": 0,
            "hasliked": 0,
            "id": "lssfRN",
            "likes": 1,
            "name": "2D Complex Maps",
            "published": 3,
            "tags": [
                "2d",
                "complex",
                "functions",
                "maps"
            ],
            "usePreview": 0,
            "username": "Friend",
            "viewed": 455
        },
        "renderpass": [
            {
                "code": "float customAtan2(float y, float x) {\n    float t0 = atan(abs(y), abs(x)); // angle in [0, pi/2]\n    float t1 = (x < 0.0) ? pi_ - t0 : t0; // correct for [pi/2, pi] and [-pi/2, 0]\n    float t2 = (y < 0.0) ? -t1 : t1; // correct for [-pi, -pi/2] and [-pi/2, 0]\n\n    return t2;\n}\n\nvec3 shsv(float h, float s, float v) {\n    vec3 p = clamp(abs(fract(vec3(h) + vec3(3.0, 2.0, 1.0) / 3.0) * 6.0 - vec3(3.0)) - vec3(1.0), 0.0, 1.0);\n    p = p * p * (3.0 - 2.0 * p); // Apply smoothstep function\n    return v * mix(vec3(1.0), p, s);\n}\n\nvec3 hsv2rgb(float h, float s, float v) {\n    // Remap hue to cover the [0, 1] range\n    h = fract(h); // Ensure we don't go beyond the [0, 1] range for hue\n\n    float c = v * s;\n    float x = c * (1.0 - abs(fract(h * 6.0) - 1.0));\n    float m = v - c;\n\n    vec3 hsv = vec3(h * 6.0, s, v);\n    vec3 rgb;\n\n    if (hsv.x < 1.0) {\n        rgb = vec3(c, x, 0.0);\n    } else if (hsv.x < 2.0) {\n        rgb = vec3(x, c, 0.0);\n    } else if (hsv.x < 3.0) {\n        rgb = vec3(0.0, c, x);\n    } else if (hsv.x < 4.0) {\n        rgb = vec3(0.0, x, c);\n    } else if (hsv.x < 5.0) {\n        rgb = vec3(x, 0.0, c);\n    } else {\n        rgb = vec3(c, 0.0, x);\n    }\n\n    rgb += vec3(m);\n\n    return rgb;\n}\n\n\nvoid mainImage(out vec4 o, vec2 f) {\n    #define AA 5.\n    vec3 c = vec3(.0);\n    float scale = 5.;\n    \n    for(float m = 0.; m < AA; m++)\n    for(float n = 0.; n < AA; n++) {\n        // Cartesian plane\n        // -------------------------------------------------------------\n        vec2 o = vec2(m, n) / AA - .5;\n        vec2 p = ((f + o) * 2. - res_.xy) / min(res_.x, res_.y) * scale;\n\n        // Complex maps\n        // -------------------------------------------------------------\n        vec2 z = p;\n        if(t <= 6.)\n            z = zinv(zsin(zcos(z)));\n        if(t >= 6. && t <= 12.)\n            z = ztan(z) + zlog(z) + zinv(z);\n        if(t >= 12. && t <= 18.)\n            z = zdiv(zlog(z), zsin(z));\n        if(t >= 18. && t <= 24.)\n            z = ztan(5.*zinv(z));\n        if(t >= 24. && t <= 30.)\n            z = zexp(2., zinv(zsin(z)));\n        if(t >= 30. && t <= 36.)\n            z = zdiv(z, zadd(zpow(z, 4.), .5));\n        if(t >= 36. && t <= 42.)\n            z = zexp(2.71828, z);\n        \n        // Mobius \n        vec2 aa = vec2(2.10, 1.0); // Replace with actual values for a\n        vec2 bb = vec2(.30, .40); // Replace with actual values for b\n        vec2 cc = vec2(.50, .60); // Replace with actual values for c\n        vec2 dd = vec2(.70, .80); // Replace with actual values for d\n        if(t >= 42. && t <= 48.)\n            z = zdiv(zmul(aa, z) + bb, zmul(cc, z) + dd);\n\n        // Grid \n        // -------------------------------------------------------------\n        float tm = abs(sin(0.5*t));\n        tm = tm * tm * (3.0 - 2.0 * tm); // Smootherstep-like reshaping\n        tm = pow(tm, 2.);\n        \n        vec2 g = mix(p, z, tm);\n        float dg  = grid(g);\n        \n        // Shading\n        // -------------------------------------------------------------\n        float ma = length(g);\n        float an = customAtan2(g.y, g.x);      // Use the smooth atan2 function\n        float hue = (an + pi_) / (2.0 * pi_);  // Normalize angle to [0, 1] for hue\n        float val = 1. - exp(-ma);             // Exponential decay for brightness\n\n        vec3 gc = shsv(hue, val*val, val*val); // s is always 1 in your hsv2rgb function\n        c += gc;\n        c = mix(c, vec3(gc), smoothstep(1., .001, dg));\n    }\n    \n    c /= AA * AA;\n    c = pow(c, vec3(.315));\n    o = vec4(c, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define res_        iResolution\n#define time_       iTime\n#define pi_         3.14159265\n#define tau_        2.*pi_\n#define t           iTime \n\n#define crot(a)     mat2(cos(a),-sin(a),sin(a),cos(a))\n#define ccrot(a)    mat2(cos(a),sin(a),-sin(a),cos(a))\n#define dom(f,s)    (2. * f.xy - res_.xy) / res_.y * s\n\n\nfloat grid(vec2 p) {\n\treturn min(\n        (abs(fract(p-.49)-.5) / fwidth(p)).x,\n        (abs(fract(p-.49)-.5) / fwidth(p)).y \n    );\n}\n\nvec2 zexp(float c, vec2 z) {\n    float ln_c = log(c); // Natural log of the base c\n    float a = exp(z.x * ln_c);\n    return vec2(a * cos(z.y * ln_c), a * sin(z.y * ln_c));\n}\n\nvec2 zadd(vec2 z, float c) {\n    return vec2(z.x + c, z.y);\n}\n\nvec2 zmul(vec2 z0, vec2 z1)  {\n    return vec2(\n        z0.x * z1.x - z0.y * z1.y,\n        z0.x * z1.y + z0.y * z1.x\n    );\n}\n\nvec2 zdiv(vec2 z0, vec2 z1)  {\n    float d = dot(z1, z1);\n    return vec2(dot(z0, z1), z0.y * z1.x - z0.x * z1.y) / d; \n}\n\nvec2 zpow(vec2 z, float c) {\n    float r = length(z);\n    float a = atan(z.y, z.x);\n    return pow(r, c) * vec2(cos(a * c), sin(a * c)); \n}\n\nvec2 zsqrt(vec2 z) {\n    float m = length(z);\n    return sqrt(.5 * vec2(m + z.x, m - z.x)) * vec2(1., sign(z.y));\n}\n\nvec2 zconj(vec2 z) { \n    return vec2(z.x, -z.y); \n}\n\nvec2 zsin(vec2 z) {\n    vec2 d = vec2(exp(z.y), exp(-z.y));\n\treturn vec2(sin(z.x) * (d.x+d.y)*.5, cos(z.x) * (d.x-d.y)*.5);\n}\n\nvec2 zcos(vec2 z) {\n    vec2 d = vec2(exp(z.y), exp(-z.y));\n \treturn vec2(cos(z.x) * (d.x+d.y)*.5, -sin(z.x) * (d.x-d.y)*.5);\n}\n\nvec2 ztan(vec2 z) {\n\tvec2 d = vec2(exp(z.y), exp(-z.y));\n \tfloat e = cos(z.x), s = (d.x-d.y)*.5;\n \treturn vec2(sin(z.x) * e, s * (d.x+d.y)*.5) / (e*e+s*s);\n}\n\nvec2 zlog(vec2 z) {\n    return vec2(log(length(z)), atan(z.y, z.x));\n}\n\nvec2 zinv(vec2 z) {\n    return vec2(z.x, -z.y) / dot(z, z);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}