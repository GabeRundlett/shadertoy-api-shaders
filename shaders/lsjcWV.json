{
    "Shader": {
        "info": {
            "date": "1493923607",
            "description": "instead of using distance to closest point, it uses distance to hit(maybe), so i can lower the step count\nvoxel version(can't see as far) [url]https://www.shadertoy.com/view/MdlcWX[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "lsjcWV",
            "likes": 7,
            "name": "fast menger sponge",
            "published": 3,
            "tags": [
                "3d",
                "fractal",
                "mengersponge"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 952
        },
        "renderpass": [
            {
                "code": "/**/\n#define rot(spin) mat2(sin(spin),cos(spin),-cos(spin),sin(spin))\n\nfloat mid(vec3 p) {\n    p = min(p,p.yzx);\n    return max(max(p.x,p.y),p.z);\n}\n\nfloat maxes(vec3 p) {\n    return max(max(p.x,p.y),p.z);\n}\n\n#define time iTime\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 var1 = vec3(3.0, 3.0,3.0); //the center of the hole\n    vec3 var2 = vec3(1.0,1.0,1.0); //the size of the hole\n    vec3 pos = vec3(3.0,1.666,time*0.4);\n    \n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 dir = normalize(vec3(uv,1.0));\n    vec3 signdir = sign(dir);\n    float dist = 0.0;\n    vec3 normal;\n    for (int i = 0; i < 8; i++) {\n        vec3 pos2;\n        float stepsize = 1.0;\n        for (stepsize = 1.0; stepsize > 0.03; stepsize /= 3.0) {\n            pos2 = mod(pos+dir*dist,6.0*stepsize)-var1*stepsize;\n            if (mid(abs(pos2)) < stepsize*0.99)\n                break;\n        }\n        \n        vec3 num = (stepsize*var2-pos2*signdir)\n            \t   *step(abs(pos2),stepsize*var2)\n            \t   /dir*signdir;\n        \n        float len = mid(num);\n        \n        if (len < 0.001) {\n            if (stepsize < 0.05) break;\n            stepsize /= 3.0;\n        } else {\n            normal = vec3(equal(vec3(len),num));\n        }\n        \n        dist += len;\n    }\n    pos += dir*dist;\n    pos *= 4.0;\n    //pos.xy*normal.z+pos.yz*normal.x+pos.xz*normal.y\n    fragColor = texture(iChannel0,(vec2(dot(pos,normal.zxy),dot(pos.yzx,normal.zxy))))*dot(normal,vec3(0.25,0.5,0.75));\n\t//fragColor = vec4((sin(pos*3.0+dist+iTime)*0.5+0.5)/(dist+1.0)*2.0+normal*0.2,1.0);\n    //fragColor.xyz = normal;\n}\n/**/\n\n/**\n//this one is for aiekick :P\n#define rot(spin) mat2(sin(spin),cos(spin),-cos(spin),sin(spin))\n\n#define fixbug\n\nfloat mid(vec3 p) {\n    p = min(p,p.yzx);\n    return max(max(p.x,p.y),p.z);\n}\n\n#define time iTime\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    float ft = floor(time/9.)+1., t = mod(time,9.);    \n    //vec3 pos = (clamp(t-vec3(0,3,6),0.,3.)*2./3. + 1.) *pow(3.,ft);\n    \n    vec3 pos = vec3(3.0,3.0,time);\n    \n    vec3 dir = normalize(vec3(uv,1.0));\n    vec3 signdir = sign(dir);\n    float stepsize = 1.0;\n    float dist = 0.0;\n    vec3 normal;\n    for (int i = 0; i < 8; i++) {\n        \n        vec3 pos2 = mod(pos-normal*signdir*stepsize,6.0*stepsize)-4.0*stepsize+normal*signdir*stepsize;\n        \n        vec3 num = (stepsize*2.0-pos2*signdir)\n            \t   *step(abs(pos2),vec3(stepsize*2.0))\n            \t   /dir*signdir;\n        \n        float len = mid(num);\n        \n        if (len < 0.01) {\n            if (stepsize < 0.05) break;\n            stepsize /= 3.0;\n        } else normal = vec3(equal(vec3(len),num));\n        \n        pos += dir*len*1.001;\n        dist += len*1.001;\n    }\n    fragColor = vec4((.5+.25*(sin(floor(pos)*10.0+time)*0.5+0.5)+.25*normal)*.9/dist, 1);\n}\n/**/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}