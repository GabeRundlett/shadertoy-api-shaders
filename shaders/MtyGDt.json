{
    "Shader": {
        "info": {
            "date": "1477531616",
            "description": "music stuffs",
            "flags": 0,
            "hasliked": 0,
            "id": "MtyGDt",
            "likes": 1,
            "name": "Ray marching music",
            "published": 3,
            "tags": [
                "music"
            ],
            "usePreview": 0,
            "username": "Mrfixit13",
            "viewed": 558
        },
        "renderpass": [
            {
                "code": "\nfloat A = 0.15;\nfloat B = 0.50;\nfloat C = 0.10;\nfloat D = 0.20;\nfloat E = 0.02;\nfloat F = 0.30;\nvec3 W = vec3(11.2);\n\nvec3 lp = vec3(0.0,0.0,1.0);\nvec3 lc = vec3(1.0,1.0,1.0)*5.0;\nfloat f0,f1,f2,f3,f4,f5,f6,f7,f8,p0,p1,t0;\nvec2 mouse;\n\nstruct mat{\nvec3 col;\nvec3 rcol;\nfloat frc;\nfloat frm; \n};\n\nmat getMat(float n){\n  \tmat m;   \n    \n    m.col = vec3(0.8);\n    m.rcol= vec3(1.0);\n    m.frm = 0.5;\n    m.frc = 0.05*m.frm;\n   \n    \n    if(n < 1.0){\n        //n = floor(texture(iChannel0,vec2(n,0.0)).r*10.0)/10.0-0.1;\n        \n        if(n == 0.1){\n\n        m.col = vec3(1.0,0.0,0.0);\n\n        }else if(n == 0.2){\n\n        m.col = vec3(1.0,1.0,0.0);\n\n        }else if(n == 0.0){\n\n        m.col = vec3(0.1);\n\n        }else if(n == 0.3){\n\n        m.col = vec3(0.0,1.0,0.0);\n\n        }else if(n == 0.4){\n\n        m.col = vec3(0.0,1.0,1.0);\n\n        }else if(n == 0.5){\n\n        m.col = vec3(0.0,0.0,1.0);\n\n        }else if(n == 0.6){\n\n        m.col = vec3(1.0,0.0,1.0);\n\n        }\n        \n    }else{\n        m.frm = 1.0;\n         m.frc = 0.5*m.frm;\n         m.col = vec3(0);\n\n        if(n == 1.0){\n            \n        m.rcol= vec3(1.0,0.766,0.336);\n       \n        }else if(n == 1.2){\n       \n        m.rcol= vec3(0.955,0.637,0.538);\n      \n        }else if(n >= 1.1){\n\n        m.rcol= vec3(0.972, 0.960, 0.915);  \n\n        }\n        \n    }\n \n    return m;\n}\n\n\nvec3 uncharted2ToneMapping(vec3 x){\n\t\n\t\t\n\treturn ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;\n}\n\nvec2 plane( vec3 p )\n{\n    \n    float x = float(int(sin(p.x*10.0)+0.99));\n    float z = float(int(sin(p.z*10.0)+0.99));\n    float check = abs(x-z)*-0.1;\n\treturn vec2(p.y,check);\n}\n\nfloat plane2( vec3 p )\n{\n\treturn p.z;\n}\n\n\nfloat sphere(vec3 p,float r){\n    \n       return length(p)-r; \n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\n\nvec2 comp(vec2 a,vec2 b){\n    \n    return (a.x < b.x) ? a : b;\n}\n\nvec2 map(vec3 rp){\n    vec2 dis = vec2(50.0);\n    \n    \n    \n    \n    dis = comp(dis,vec2(plane(rp-vec3(0,-1,0)).xy ));\n    dis = comp(dis,vec2(plane2(rp-vec3(0,0.0,-2.0)),-0.1));\n    \n    dis = comp(dis,vec2(sphere(rp - vec3(lp),0.1),2.0));\n    \n    dis = comp(dis,vec2(sphere(rp - vec3(-2.53,-0.5,-1.0),f0),0.1));\n    dis = comp(dis,vec2(sphere(rp - vec3(-1.52,-0.5,-1.0),f1),0.2));\n    dis = comp(dis,vec2(sphere(rp - vec3(-0.51,-0.5,-1.0),f2),0.3));\n    dis = comp(dis,vec2(sphere(rp - vec3(0.51,-0.5,-1.0),f3),0.4));\n    dis = comp(dis,vec2(sphere(rp - vec3(1.52,-0.5,-1.0),f4),0.5));\n    dis = comp(dis,vec2(sphere(rp - vec3(2.53,-0.5,-1.0),f5),0.6));\n    \n    dis = comp(dis,vec2(sphere(rp - vec3(-1.0,0.5,-1.0),f6),1.0));\n    dis = comp(dis,vec2(sphere(rp - vec3(0.0,0.5,-1.0),f7),1.1));\n    dis = comp(dis,vec2(sphere(rp - vec3(1.0,0.5,-1.0),f8),1.2));\n    \n    dis = comp(dis,vec2(sdTorus(rp - vec3(0.0,-1.0+p1,-0.5),vec2(0.45,p1)),-0.1));\n    dis = comp(dis, vec2( 0.5*sdTorus( opTwist(rp-vec3(0.0,-0.75, -0.5)),vec2(0.250,0.1)), 0.0 ));\n  \n    return dis;\n}\n\n\t\nfloat calcShadow(vec3 sp,int nmax){\n   vec3 dp = normalize(lp-sp);\n    float i2 = 0.1;\n    for(int n =0; n < 60;n++){\n        \n        i2 += max(abs(map(sp+dp*i2).x/1.0) , 0.02);\n        \n        if(abs(map(sp+dp*i2).x) < 0.01){\n            \n            if(map(sp+dp*i2).y < 2.0){\n                \n            return 0.0;\n                \n            }else{\n                \n            return 1.0;\n                \n            }\n            \n        }else if( n > nmax) return 1.0;\n            \n    }\n    \n    return 1.0;\n}\n\n\nvec3 castRay(vec3 ro , vec3 rd,int nmax){\n    \n    float i = 0.002;\n    vec2 dat;\n    \n    for(int n = 0; n < 60; n++){\n        \n        dat.xy = map(ro+rd*i);\n        \n        if(dat.x < 0.002)return vec3(dat,i);\n        \n        i+=max(abs(dat.x),0.002);    \n    }\n    \n    return vec3(dat.x,-0.1,-0.1);\n}\n\nvec3 calcNormal(vec3 pos){\n    vec2 off = vec2(0.002,0.0);\n    \n   \tvec3 normal = normalize(vec3(\n    map(pos+off.xyy).x - map(pos-off.xyy).x,\n    map(pos+off.yxy).x - map(pos-off.yxy).x,\n    map(pos+off.yyx).x - map(pos-off.yyx).x )); \n    \n    return normal;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (vec2(-1.0)+2.0*(fragCoord.xy / iResolution.xy)) * vec2(iResolution.x/iResolution.y,1.0);\n    \n    vec3 pos = vec3(0,0,0);\n    vec2 dat = vec2(0,0);  \n    vec3 normal = vec3(0.0,0.0,0.0);\n\n    vec3 color =vec3(0.0,0.0,0.0);\n    bool run=true;\n    vec3 ref = vec3(1.0);\n    mat mate = getMat(0.0); \n    float ic;\n   \tfloat prec = 0.002;\n    \n    mouse = (iMouse.xy/iResolution.xy*2.0-vec2(1.0))*vec2(iResolution.x/iResolution.y,1.0)*2.0;\n    \n    \n    \n    mouse.y = max(mouse.y,-0.5);\n    float ab0 = 0.8,ab1=0.1;\n    \n    p0 = texture(iChannel1,vec2(0.0,0.0)).r+0.1;\n    p1 = texture(iChannel1,vec2(0.1,0.0)).r*0.1+0.05; \n    \n    f0 = texture(iChannel1,vec2(0.20,0.0)).r*ab0+ab1;\n    f1 = texture(iChannel1,vec2(0.30,0.0)).r*ab0+ab1;\n    f2 = texture(iChannel1,vec2(0.40,0.0)).r*ab0+ab1;\n   \tf3 = texture(iChannel1,vec2(0.5,0.0)).r*ab0+ab1;\n    f4 = texture(iChannel1,vec2(0.6,0.0)).r*ab0+ab1;\n    f5 = texture(iChannel1,vec2(0.7,0.0)).r*ab0+ab1;\n    f6 = texture(iChannel1,vec2(0.8,0.0)).r*ab0+ab1;\n    f7 = texture(iChannel1,vec2(0.9,0.0)).r*ab0+ab1;\n   \tf8 = texture(iChannel1,vec2(1.0,0.0)).r*ab0+ab1;\n    t0 = p0+p1+f0+f1+f2+f3+f4+f5+f6+f7+f8;\n    t0*=0.1;\n    \n    lp=vec3(0.0,p0,0.0)*2.0;\n    lc=vec3(1.0)*p0*10.0;\n    \n\n    \n    vec3 ro = vec3(0.0,0.0,3.0);\n    vec3 rd =normalize(vec3(uv,-2.0));\n    \n\tfor(int j = 1; j<5 ; j++){\n   \n           \tvec3 dat = castRay(ro,rd,60/j);\n\t\t\tvec3 pos = ro+rd*dat.z;\n        \n            if( dat.x < 0.002){   \t\n\n                if(dat.y >= 2.0){\n\n                   color+=lc*ref;    \n                   break;\n\n                }else{ \n                      \n                    mate = getMat(dat.y);\n\n                    normal = calcNormal(pos);\n\n                    vec3 ld = normalize(lp-pos);    \n\n                    float fren =pow(1.0 - max(dot(-rd,normal),0.0),5.0);\n                    fren = mix(mate.frc,mate.frm,fren);\n\n                    vec3 lit = (max(dot(ld,normal),0.0))*lc*calcShadow(pos,60/j);\n\n                    vec3 c = pow(mate.col,vec3(2.2));   \n                    vec3 rc = pow(mate.rcol,vec3(2.2));\n                    \n                \tcolor+=c*lit*(1.0-fren)*ref + c*vec3(0.1)*ref*(1.0-fren); \n                    ref*=fren*rc;\n                    \n                }\n                ro=pos;\n            \trd=reflect(rd,normal);\n                \n            }  \t \n       \n    }\n    \n    color+=ref*vec3(0.1);\n    \n    vec3 curr = uncharted2ToneMapping(color.xyz*1.0);\n\tvec3 whiteScale = 1.0/uncharted2ToneMapping(W); \n\tvec3 mapped = curr*whiteScale;\n\t\n\tmapped = pow(mapped, vec3(1.0 / 2.2));\n\t\n\tfragColor =  vec4(mapped,1.0) ;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 21,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}