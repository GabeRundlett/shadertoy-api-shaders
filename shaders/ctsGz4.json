{
    "Shader": {
        "info": {
            "date": "1671409912",
            "description": "Whole demo (ca. 4min)  >> Watch until the End <<\n\nSunday project.. I loved this track and thought I make small demo out of it learning more about camera & composition.\n\n",
            "flags": 96,
            "hasliked": 0,
            "id": "ctsGz4",
            "likes": 13,
            "name": "[phreax] rainbow lounge ",
            "published": 3,
            "tags": [
                "raymarching",
                "demo",
                "rainbow",
                "kifs"
            ],
            "usePreview": 1,
            "username": "phreax",
            "viewed": 366
        },
        "renderpass": [
            {
                "code": "/*\n  Copyright Michael Thomas a.k.a phreax/jiagual, 2022\n  \n  I am the sole copyright owner of this Work.\n  You cannot host, display, distribute or share this Work in any form,\n  including physical and digital. You cannot use this Work in any\n  commercial or non-commercial product, website or project. You cannot\n  sell this Work and you cannot mint an NFTs of it.\n  I share this Work for educational purposes, and you can link to it,\n  through an URL, proper attribution and unmodified screenshot, as part\n  of your educational material. If these conditions are too restrictive \n  please contact me and we'll definitely work it out.\n  copyright statement borrowed from Inigo Quilez\n \n  Special thanks to: iq, evvvvil, nusan, bigwings, fabrice, flopine, yx \n  for their amazing content and learning material.\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\n  Copyright Michael Thomas a.k.a phreax/jiagual, 2022\n  \n  I am the sole copyright owner of this Work.\n  You cannot host, display, distribute or share this Work in any form,\n  including physical and digital. You cannot use this Work in any\n  commercial or non-commercial product, website or project. You cannot\n  sell this Work and you cannot mint an NFTs of it.\n  I share this Work for educational purposes, and you can link to it,\n  through an URL, proper attribution and unmodified screenshot, as part\n  of your educational material. If these conditions are too restrictive \n  please contact me and we'll definitely work it out.\n  copyright statement borrowed from Inigo Quilez\n \n  Special thanks to: iq, evvvvil, nusan, bigwings, fabrice, flopine, yx \n  for their amazing content and learning material.\n*/\n\n#define PI 3.141592\n#define TAU PI*2.\n\n#define S(a, b) smoothstep(a, b, T)\n#define F(a, b, s) (S(a, a+s)-S(b, b+s))\n#define F2(a, b, s1, s2) (S(a, a+s1)-S(b, b+s2))\n#define F3(t, s1, s2) (F2(t, t, s1, s2))\n\n//#define USE_ITIME\n\nfloat tt, T;\nvec3 ro;\nvec2 beamId;\nfloat matId;\n\n\n// from \"Palettes\" by iq. https://shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 getPal(float t) {\n    return pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20) );\n}\n\nfloat repeat(inout float x, float n) {\n    float id = floor(n*x)/n;\n    x = fract(n*x);\n    return id;\n}\n\n\nfloat box(vec3 p, vec3 r) {\n\tvec3 q = abs(p) - r;\n    return max(max(q.x, q.y),q.z);\n}\n\nmat2 rot(float a) { return mat2(cos(a), sin(a), -sin(a), cos(a));}\n\n\nvec2 repeat(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5,size) - size*0.5;\n\treturn c;\n}\n\nfloat repeatSingle(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tif (p >= 0.)\n\t\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\n// adapted from the book of shaders\nfloat triangle(vec2 uv, float w, float blur) {   \n  int N = 3;\n\n  // Angle and radius from the current pixel\n  float a = atan(uv.x,uv.y)+PI;\n  float r = TAU/float(N);\n\n  // Shaping function that modulate the distance\n  float d = 1.-cos(floor(.5+a/r)*r-a)*length(uv);\n  return smoothstep(blur, .0, abs(d)-w)*(0.3/blur);\n}\n\n\nvoid transform(inout vec3 p) {\n    \n    float repz =8.;\n\n    float idz = repeatSingle(p.z,8.);  \n    p.xy *= rot(.25*PI*mod(idz, repz));\n}\n\nvec3 colorStripeTexture(vec3 p, vec2 matId, float off) {\n\n    matId = abs(matId);\n    int mat = int((matId.x*2.))+int(matId.y*2.);\n    \n    float dim = p.x*4.;\n    \n    if(mat % 3 == 1) dim = p.y*3.;\n    if(mat % 3 == 2) dim = p.z*.4;\n    \n    float id = repeat(dim, 4.2) + matId.y/10.;\n    vec3 col = getPal(id);\n    return col;\n}\n\n\nvec2 moda(vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\ta = mod(a,angle) - angle/2.;\n\treturn vec2(cos(a), sin(a))*length(p);\n}\n\n\nvec3 kalei(vec3 p) {\n  float w = 1.;\n      p = abs(p) -.2;\n  for(float i=0.; i < 4.; i++) {\n        float t1 = 2.+sin(i+tt) + sin(.7*tt)*.4;\n        p.xy *= rot(.3*t1);\n        p -= 0.1 + .1*i;\n        p.y -= 0.25;\n        p = abs(p);\n    }\n    p /= w;\n    return p;\n}\n\n// by Nusan\nfloat curve(float t, float d) {\n  t/=d;\n  return mix(floor(t), floor(t)+1., pow(smoothstep(0.,1.,fract(t)), 5.));\n}\n\nvec2 foldSym(vec2 p, float N) {\n    float t = atan(p.x,-p.y);\n    t = mod(t+PI/N,2.0*PI/N)-PI/N;\n    p = length(p.xy)*vec2(cos(t),sin(t));\n    p = abs(p)-0.25;\n    p = abs(p)-0.25;\n    return p;\n}\n\nfloat smin(float a, float b, float k) {\n    float h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 transformBlotter(vec3 p) {\n    p.z -= 6.;\n    p.y -= .3*S(30., 50.);\n    p.xz *= rot(T*.5);\n    \n    p.yz *= rot(.25*(T-37.5)*S(37.5, 39.));\n   \n    p *= mix(1., 10., S(30., 52.));\n    p *= mix(1., 5., S(50., 55.));\n\n    return p;\n}\n\nfloat mapBlotter(vec3 p) {\n            \n    p -= ro;\n    p = transformBlotter(p);\n\n    vec3 p1 = p;\n    p1.xy += sin(p.yx*4.5*TAU+vec2(2.5, 1.))*.04;\n    float d = box(p1, vec3(2., 2., .004));\n\n    float d2 = box(p, vec3(vec2(1.9), .2)-0.4);\n    d = smin(d, d2, .7);\n\n    float size =  mix(1., 10., S(30., 50.));\n    return d/size;\n    \n}\n\nfloat map(vec3 p) {\n    \n    vec3 bp = p;\n\n    float bl = 1e6;\n    \n    if(T < 54.) {\n      bl = mapBlotter(p);\n    }\n    if(T < 30.) {\n        matId = 1.;\n        return bl;\n    }\n\n    p.xy = foldSym(p.xy, 3.);\n    // p.xy *= rot(.5*PI);\n\n    p.y += 0.4*sin(p.z*TAU/4.+tt*TAU/3.);\n    p.xy *= (1.+abs(.1*p.x))*rot(curve(tt, 8.)*.5*PI);\n\n    transform(p);\n    p = kalei(p);\n    float blen = 2.4;\n\n    float outer = 1.45;\n    float inner = .9;\n    \n    float maskout = box(p, vec3(vec2(outer), blen));\n    float maskin = box(p, vec3(vec2(inner), blen + .3));\n   \n    beamId = repeat(p.xy, vec2(.39));\n    \n    float beam = max(box(p, vec3(vec2(.16), blen)), -box(p, vec3(vec2(.1), blen+.3)));\n    \n    \n    float frame = max(maskout, -maskin);\n    float d = max(beam, maskout);\n    d = max(d, frame);\n    \n\n    d = max(d, - (length(bp-ro)-0.3));  // collision avoidance\n    \n    matId = d < bl ? 0. : 1.; \n    d = min(d*.6, bl);\n    return d*.6;\n   \n}\n\nfloat getRT(float t) {\n    return (t-48.)*.25;\n}\n\nfloat calcAO(vec3 p, vec3 n)\n{\n\tfloat sca = 2.0, occ = 0.0;\n    for( int i=0; i<5; i++ ){\n    \n        float hr = 0.01 + float(i)*0.5/4.0;        \n        float dd = map(n * hr + p);\n        occ += (hr - dd)*sca;\n        sca *= 0.7;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\nvoid camz(inout vec3 p ) {\n    p.z += 4.*tt;\n}\n\nvoid cam(inout vec3 ro, inout vec3 rd) {\n    bool sw = (T > 67.1 && T < 80.) || (T > 92.9 && T < 105.6) || T > 172.8 && T < 179.2\n               || T > 198.5 && T < 204.8;\n    if(sw) {\n        ro.y += 2.;\n        rd.zy *= rot(.3);\n        ro.x += .8*sin(1.*tt);\n        rd.xz *= rot(PI*sin(-.5*tt-.8));\n    }\n    if(T > 119. && T < 160.) {\n        rd.yz *= rot(.31*(tt-getRT(119.)));\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.x;\n    \n    //uv *= rot(.5*PI);\n    T = iChannelTime[3];\n    #ifdef USE_ITIME\n    T = iTime;\n    #endif\n    \n    if(iResolution.y <= 300.) T = (iTime+160.);;  // preview\n    \n    tt = (T-48.)*.25;\n    \n    ro = vec3(0.,-1.5, 0.);\n    vec3 rd = normalize(vec3(uv, .5)),\n         lp = vec3(0., 4., -4.),\n         lp2 = vec3(0., -4., 3.);\n    \n    vec4 tex = texture(iChannel1, fragCoord/iResolution.xy);\n    if (tex.a != iResolution.x) tex = vec4(0); // reset buffer on resize\n    \n    camz(ro);\n    camz(lp);\n    camz(lp2);\n    cam(ro, rd);\n\n    float i, t, d = 0.1;\n\n    vec3 p = ro;\n    \n    vec2 beamIdTemp;\n    float matIdTemp;\n    \n    for(i=0.; i<400.; i++) {\n        d = map(p);\n        beamIdTemp = beamId; // save id\n        matIdTemp = matId;\n        \n        if(d < 0.001 || t >100.) break;\n        \t\n        p += rd*d;\n        t += d;\n    }\n    \n    vec2 e = vec2(0.0035, -0.0035);\n    \n    vec3 fo, co;\n    co = fo = mix(vec3(0.722,1.000,0.976), vec3(1.), uv.y+.5);\n    \n    if(d < 0.001) {\n        vec3 al;\n        \n        vec3 n = normalize( e.xyy*map(p+e.xyy) + e.yyx*map(p+e.yyx) +\n                            e.yxy*map(p+e.yxy) + e.xxx*map(p+e.xxx));\n        al = colorStripeTexture(p, beamIdTemp,  tt*.6)*1.2;\n        \n        vec3 l = normalize(lp-p);\n        vec3 l2 = normalize(lp2-p);\n        float dif = max(dot(n, l), .0);\n        float dif2 = max(dot(n, l2), .0);\n        float spe = pow(max(dot(reflect(-rd, n), -l), .0), 40.);\n        float sss = smoothstep(0., 1., map(p+l*.4))/.4; \n        float ao = calcAO(p, n);\n \n        if(matIdTemp == 0.) {  // lounge\n            co =  .7*al*(.3+.8*spe+(.9*dif+1.5*sss));\n            co += al*(.7*vec3(1.000,0.886,0.780)*dif2);\n\n            rd = reflect(rd, n);\n\n\n            vec3 refl = texture(iChannel0, rd, 3.).rgb;\n\n            refl *= mix(vec3(1), getPal(n.x*n.y*20.), .4); // reflect rainbows too\n            co = mix(co, refl, .4);\n\n            float aof = S(137., 140.);\n            ao = mix(ao, 1.-ao, aof); // inverse AO for brilliance effect\n            co = mix(co, co*ao, mix(.6, .8, aof));\n\n            co = mix(co, fo, 1.-exp(-.0005*t*t));\n            co *= 1.3;\n                 \n         } else { // blotters\n             vec3 bp = p;\n             p -= ro;\n                          \n             p = transformBlotter(p);\n             vec3 c1 = mix(vec3(1), colorStripeTexture(p*.12-.4, vec2(0), 0.), .98);\n             c1 = mix(c1, getPal(tt), .4);\n       \n             vec3 c2 = clamp(1.-c1, vec3(0), vec3(1));\n        \n             // draw sun \n             vec2 tuv = p.xy;\n             \n             tuv.x -= .1;\n             vec2 tuv1 = tuv;\n   \n             tuv1 = moda(tuv1, 16.);\n             tuv1 *= vec2(2., 5.)*.7;        \n             tuv1 += sin(tuv1.yx*7.+tt*5.)*.08;\n             tuv1 *= rot(PI*.17);             \n             float tr = triangle(tuv1, .05, 0.1);\n             float ci = 1.-smoothstep(0. ,.02, abs(length(tuv)-.7)-.04);\n       \n             float isfront = smoothstep(.6, 1., .5+.5*cos(.5*T));\n             \n             co = mix(c1, c2, (tr*.5+ci*1.5)*isfront);\n             co = mix(vec3(1), co, .7);\n             co *= .7*(.2*spe+(.8*dif+.8*sss));\n             co = mix(co, co*(texture(iChannel2, (p.xy*.5))).x+.3, .5);\n         }    \n    }\n  \n    co = pow(co, vec3(1.2));\n \n    float feedback = 1.-S(23., 30.)+S(54., 56.)-S(130., 138.)+S(161., 164.)-F2(68., 76.7, 3., 3.)-F(94., 99., 3.)-S(210., 216.);\n\n    co = clamp(co, vec3(0), vec3(1));\n    co = mix(co, tex.rgb, .98*(1.-feedback));\n    \n    co = mix(co, fo, S(223., 233.));\n\n    // Output to screen\n    fragColor = vec4(co, iResolution.x);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "musicstream",
                        "id": 31306,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/erichiltonmusic/more-beautiful-things?si=c56b5ee096cc4889b76693d80c111372&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}