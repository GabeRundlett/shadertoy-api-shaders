{
    "Shader": {
        "info": {
            "date": "1605865923",
            "description": "Uses volumetric and an approximation of light, because apparently the approximation is as cheap as the fully raymarch to the light as well. (Set iChannel0 filter to lineair if you want smooth result)",
            "flags": 0,
            "hasliked": 0,
            "id": "3sdBzs",
            "likes": 2,
            "name": "Smoke Light",
            "published": 3,
            "tags": [
                "volumetric"
            ],
            "usePreview": 0,
            "username": "Leasel",
            "viewed": 361
        },
        "renderpass": [
            {
                "code": "/*\njlfwong(2016). Ray Marching: Part 1. Visited on 2020 on 19 november by (Took the rayDirection)\nhttps://www.shadertoy.com/view/llt3R4\n*/\n\nbool inBox(in vec3 p)\n{\n    return p.x >= -BoxSize && p.y >= -BoxSize && p.z >= -BoxSize && p.x < BoxSize && p.y < BoxSize && p.z < BoxSize;\n}\n\n//float GetThickNess(in vec3 p)\n//{\n//    return step((p.y*B+1.0)*0.5, V(vec2(((p.x - Pos.x)*B+1.)*0.5, (p.z - Pos.z)*B)).r);\n//}\n\nfloat GetThickNess(in vec3 p)\n{\n    return V((p-BoxSize)*B+B*iTime).r;\n    //return 1.;\n}\n\n//Cubised a distance\nfloat MaxiumDistance(in vec3 rd)\n{\n    return 1./abs(max(abs(rd.x), max(abs(rd.y),abs(rd.z))));\n}\n\n//Cubised a distance\nfloat LingeringDistance(in vec3 F, in vec3 P)\n{\n    P = mod(P-1.,2.)-1.;\n    F = 1./F;\n    vec3 O = (1.-P)*F;\n    vec3 R = (-1.-P)*F;\n    \n    float d = min(max(R.x,O.x),min(max(R.y,O.y),max(R.z,O.z)));       \n        \n    return d;\n}\n\nfloat RayMarch(in vec3 ro, in vec3 rd)\n{\n    vec3 p = ro;\n    float fogCollected = 0., dS = 1., dO = 0.;//, ldS = 5.;\n    \n    dS *= MaxiumDistance(rd);\n    p += LingeringDistance(rd,p)*rd;\n    \n    //Can be made efficienter\n    for(int i = 0; i < 30 && !inBox(p); i++)\n    {\n        p += rd*dS;\n    }\n    \n    //Vec4(lightPos, lightStrength)\n    vec4 Light = vec4(sin(1.)*15.,0.,0., 5.);\n\t//vec3 lrd, p2;\n    for(; fogCollected < 1. && inBox(p); p += rd*dS, dO += dS)\n    {\n        //!!Why do these two functions create the same effect?\n        \n     \t//float LightReflectance = max(dot(lrd = normalize(Light.xyz-p), rd), 0.);   \n        //float LightCollected = 0.;\n        //for(p2 = p;inBox(p2) && LightReflectance < 0. && LightCollected < 1.;p2 += lrd*ldS)\n        //{\n        //    //Get Fog Thickness\n        //   LightCollected += ldS * CollectedFogPerMeter * GetThickNess(p2);\n        //}\n        //LightCollected = (1. - LightCollected)*Light.w*LightReflectance;\n        \n\t\t//fogCollected += dS * CollectedFogPerMeter * GetThickNess(p)*LightCollected;\n        \n        \n        fogCollected += max(dot(normalize(Light.xyz-p), rd),0.) * dS * CollectedFogPerMeter * GetThickNess(p) *Light.w;\n    }\n    \n    //fogCollected +=  mod(iTime, 5.) < 2.5 ? 0. : max(dot(normalize(Light.xyz-p), rd),0.) * LingeringDistance(rd,p)*CollectedFogPerMeter *GetThickNess(p);\n    \n    return fogCollected;\n}\n\n//Cam\nvec3 CamRd(in vec2 fragCoord){\n    vec2 xy = fragCoord - iResolution.xy * 0.5;\n    \n    float z = iResolution.y / tan(FieldOfView*0.5);\n    return normalize(vec3(xy, z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    fragColor = RayMarch(Pos, CamRd(fragCoord))*FogColor;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Variables\n#define Speed 1. //Says how much the old music moves\n#define Pos vec3(0.,0.,-40.)\n#define FieldOfView (60./180.)*PI\n#define FogColor vec4(1.,1.,1.,1.)\n#define BoxSize 10.\n#define CollectedFogPerMeter 0.05\n\n//Common Variables\n#define PI 3.14159265358979323846\n\n//Common defined functions\n#define dif vec3(1./iResolution.xy,0.)\n#define V(uv) texture(iChannel0, uv)\n#define B 1./BoxSize // Do this 1./BoxSize, project the fog in a box",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}