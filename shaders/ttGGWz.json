{
    "Shader": {
        "info": {
            "date": "1578651609",
            "description": "Two types of patterns (angle- and radius-based) mixed together.",
            "flags": 0,
            "hasliked": 0,
            "id": "ttGGWz",
            "likes": 4,
            "name": "Polar Patterns in RGB",
            "published": 3,
            "tags": [
                "procedural",
                "radial",
                "polar",
                "tuner"
            ],
            "usePreview": 0,
            "username": "tombla",
            "viewed": 371
        },
        "renderpass": [
            {
                "code": "#define PI  3.14159265359\n#define PI2 6.28318530718\n\n#define ARMS 6.\n#define ANGLE_SPEED 3.\n#define DENSITY 3.\n#define SPEED 8.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2\n        R = iResolution.xy,\n        // Cartesian [-1, 1] along shorter axis.\n        uv = (2. * fragCoord - R) / min(R.x, R.y);\n    float\n        T = iTime,\n        // Angle [-PI, PI] and radius.\n        a = atan(uv.x, uv.y),\n        r = length(uv);\n\n    // Patterns based on the angle.\n    float ap1 = sin(a * ARMS + T * ANGLE_SPEED);\n    // Patterns based on radius.\n    float rp1 = sin(1. / r * PI2 * DENSITY + T * SPEED);\n    // Expose interference-like patters in the middle.\n    float rp2 = smoothstep(9., 1., 1. / r);\n\n    vec3 color = vec3(ap1 * rp2, rp1, rp2);\n    fragColor = vec4(color * 1.2, 1.);\n    //gamma22(fragColor, color);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}