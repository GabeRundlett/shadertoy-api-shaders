{
    "Shader": {
        "info": {
            "date": "1537392076",
            "description": "Coded live on twitch stream in Bonzomatic, and tidied/ported to shadertoy.\nUnedited Bonzomatic shader here: [url]https://gist.github.com/willkirkby/b5b4502827e481b46253079ea6ba6da8[/url]\nInspired by the works of Andreas Wannerstedt.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltVyRd",
            "likes": 44,
            "name": "[twitch] Rolling Balls",
            "published": 3,
            "tags": [
                "raymarched",
                "twitch"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 1195
        },
        "renderpass": [
            {
                "code": "#define pi (acos(-1.))\n\n// I changed the timing slightly for shadertoy so it loops at exactly 5 seconds - I got the math wrong on stream\n#define iTime (iTime * pi * .4)\n\nvec2 rotate(vec2 a, float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return vec2(\n        a.x * c - a.y * s,\n        a.x * s + a.y * c\n    );\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat tick()\n{\n    float t = sin(iTime)*.5+.5;\n    return t*2.-1.;\n}\n\nvec2 halfScene(vec3 p)\n{\n    p.x = mod(p.x+2., 4.)-2.;\n    float env = max(\n        max(p.y,-p.z),\n        -sdTorus(p, vec2(1,.25))\n    );\n\n    p.xz = rotate(p.xz, iTime);\n    p.z -= step(0.,cos(iTime))*2.-1.; // tweaked this line - sign(x) and step(0,x)*2-1 are not the same when x is zero\n\n    float ball = sdSphere(p,.25);\n\n    return vec2(min(env,ball), env<ball?1:0);\n}\n\nvec2 scene(vec3 p)\n{\n    vec3 pA = p;\n    vec3 pB = p;\n\n    pA.x += tick();\n    pB.x -= tick();\n    pB.z *= -1.;\n\n    vec2 a = halfScene(pA);\n    vec2 b = halfScene(pB);\n    return vec2(min(a.x,b.x),a.x<b.x?a.y:b.y);\n}\n\nvec3 trace(vec3 cam, vec3 dir)\n{\n    vec3 accum = vec3(1);\n    for(int bounce=0;bounce<3;++bounce)\n    {\n        float t;\n        vec2 k;\n        for(int i=0;i<100;++i)\n        {\n            k = scene(cam+dir*t);\n            t += k.x;\n            if (k.x < .001 || k.x > 10.)\n                break;\n        }\n\n        // sky hack\n        if (k.x > 10.)\n            k.y = 2.;\n\n        vec3 h = cam+dir*t;\n        vec2 o = vec2(.001, 0);\n        vec3 n = normalize(vec3(\n            scene(h+o.xyy).x-scene(h-o.xyy).x,\n            scene(h+o.yxy).x-scene(h-o.yxy).x,\n            scene(h+o.yyx).x-scene(h-o.yyx).x\n        ));\n\n        if (k.y == 2.)\n        {\n            // sky\n            // tweaked - I forgot to include the accumulation term on stream\n            return vec3(dir.y*.15+.1) * vec3(.5,1,.8) * 30. * accum;\n        }\n        if (k.y == 1.)\n        {\n            float A = .1;\n            float B = scene(h+n*A).x;\n            float fakeAO = clamp(B/A,0.,1.);\n            fakeAO = pow(fakeAO,.6)*.2+.8;\n\n            float light = n.y*.5+.5;\n\n            vec3 color = vec3(.3,1,.7)*.8;\n\n            h.x += tick() * sign(h.z);\n            if(h.y > -.001)\n                color += smoothstep(.071,.07,length(fract(h.xz*4.)-.5));\n\n            // floor\n            return light * fakeAO * accum * color;\n        }\n        else\n        {\n            // balls\n            float fresnel = pow(1.-dot(-dir,n),3.);\n            fresnel = mix(.04,1.,fresnel);\n            accum *= fresnel;\n            cam = h + n*.0015;\n            dir = reflect(dir, n);\n        }\n    }\n    return vec3(0);\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy-.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 cam = vec3(uv*4.,-5.);\n    vec3 dir = vec3(0,0,1);\n\n    cam.yz = rotate(cam.yz, atan(1.,sqrt(2.)));\n    dir.yz = rotate(dir.yz, atan(1.,sqrt(2.)));\n\n    cam.xz = rotate(cam.xz, pi/4.);\n    dir.xz = rotate(dir.xz, pi/4.);\n\n    out_color.rgb = trace(cam,dir);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}