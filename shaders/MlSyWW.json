{
    "Shader": {
        "info": {
            "date": "1508523333",
            "description": "based on [url=https://www.shadertoy.com/view/MtXSD7]Soud Experiment 1[/url] \nultra basic iterative lighing  test :)\nuse mouse for control density",
            "flags": 0,
            "hasliked": 0,
            "id": "MlSyWW",
            "likes": 18,
            "name": "Sound Experiment 1 remixed",
            "published": 3,
            "tags": [
                "sound",
                "experiment",
                "1",
                "remixed"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 862
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec4 freqs;\n    \nvec3 dstepf = vec3(0.0);\n    \nconst vec2 RMPrec = vec2(0.2, 0.05); \nconst vec3 DPrec = vec3(1e-3, 12., 1e-8); \n\nfloat Density = 5.;\n\nvec4 map(vec3 p)\n{\n\t// pattern based on 104 shader https://www.shadertoy.com/view/ltlSW4 \n    vec4 col = vec4(p,1);\n    vec2 i = col.xz*Density;\n    i=i/col.y+iTime;\n    i-=col.xy=ceil(i+=i.x*=.577);\n    col.xy+=step(1.,col.z=mod(col.x+col.y,3.))-step(2.,col.z)*step(i,i.yx);\n    col.z=0.;\n    col=.5+.5*sin(col);\n    \n    col *= freqs;\n    \n    dstepf += 0.02 * col.rgb;\n\n    float disp = dot(col,vec4(0.5));\n      \n    float dist = length(p) -4. + smoothstep(0., 1., disp);\n    \n    return vec4(dist, col.rgb);\n}\n\nvec3 cam(vec2 uv, vec3 ro, vec3 cu, vec3 cv)\n{\n\tvec3 rov = normalize(cv-ro);\n    vec3 u =  normalize(cross(cu, rov));\n    vec3 v =  normalize(cross(rov, u));\n    vec3 rd = normalize(rov + u*uv.x + v*uv.y);\n    return rd;\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n    vec2 si = iResolution.xy;\n    \n    float t = iTime;\n    \n    // from CubeScape : https://www.shadertoy.com/view/Msl3Rr\n    freqs.x = texture( iChannel1, vec2( 0.01, 0.25 ) ).x;\n\tfreqs.y = texture( iChannel1, vec2( 0.07, 0.25 ) ).x;\n\tfreqs.z = texture( iChannel1, vec2( 0.15, 0.25 ) ).x;\n\tfreqs.w = texture( iChannel1, vec2( 0.30, 0.25 ) ).x;\n    //freqs = normalize(freqs);\n    \n   \tif ( iMouse.z >0.) Density = iMouse.y/iResolution.y * 50.;\n    \n    f = vec4(0.);\n    float ca = t*.2; // angle z\n    float ce = 4.7; // elevation\n    float cd = 0.5; // distance to origin axis\n\n    vec2 uv = (g+g-si)/min(si.x, si.y);\n    vec3 ro = vec3(sin(ca)*cd, ce+1., cos(ca)*cd); //\n    \n    vec3 rov = normalize(vec3(0,0,0)-ro);\n    vec3 u =  normalize(cross(vec3(0,1,0), rov));\n    vec3 v =  normalize(cross(rov, u));\n    vec3 rd = normalize(rov + u*uv.x + v*uv.y);\n    \n    vec3 d = vec3(0.);\n    vec3 p = ro+rd*d.x;\n    float s = DPrec.y;\n    float rmd = sign(map(p).x);\n    for(int i=0;i<250;i++)\n    {      \n\t\tif(s<DPrec.x||s>DPrec.y) break;\n        s = map(p).x*(s>DPrec.x?RMPrec.x:RMPrec.y);\n        if (sign(s) != rmd) break;\n        d.y = d.x;\n        d.x += s;\n        p = ro+rd*d.x;\n   \t}\n\n    float countIter = 0.;\n    if (sign(s) == rmd)\n    {\n    \tp = ro+rd*d.x;\n        rmd = map(p).x;\n        for (int i = 0; i < 20; i++)\n        {\n        \tcountIter += 10.;\n            d.z = (d.x + d.y)*.5;\n            p = ro+rd*d.z;\n            s = map(p).x*RMPrec.y;\n            d.x += abs(s);\n            if (abs(s) < DPrec.z)break;\n            (d.x*rmd < 0. )? (d.x = d.z ): (d.y = d.z);\n       \t}\n        d.x = (d.x+d.y) * .5;\n   \t}\n    \n    f = vec4(dstepf,1);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 21,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}