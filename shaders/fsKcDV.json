{
    "Shader": {
        "info": {
            "date": "1655660089",
            "description": "WIP.\nTrying to compute the curvature along an isovalue.\nHere I search the curvature center via the intersection of the lines given by position + gradient of the 2 pixel neighbors closest to the isovalue.\nNot isotropic on the circle ex. Ultra noisy on text",
            "flags": 0,
            "hasliked": 0,
            "id": "fsKcDV",
            "likes": 8,
            "name": "curvature of an isovalue",
            "published": 3,
            "tags": [
                "2d",
                "curve",
                "curvature",
                "short",
                "isovalue"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 290
        },
        "renderpass": [
            {
                "code": "// To answer Andrei Zelenco on the Fbk group: https://www.facebook.com/groups/shadertoy/posts/1111326822781676/\n// Probably simpler way here: https://computergraphics.stackexchange.com/questions/5892/how-to-calculate-curvature-of-isoline-of-image\n\n#define R iResolution.xy\n\nvec4 T( vec2 U , int i ) { // === signed function to plot. return (value, id, gradient)\n // float v = texelFetch( iChannel0, ivec2(U), 0 ).r;\n // float v = texture( iChannel0, U/R+.01*iTime).r;                 // texture\n // float v = length( 2.*U - R ) / R.y;                             // circle\n    U = 3.*( U+U - R ) / R.y; float v = length(sin(U)+cos(U+U-iTime))/3.; // complex math shape\n    return vec4( v-.4, i, dFdx(v),dFdy(v) );\n}\n\n#define sort(a,b) abs(a).x > abs(b).x ?  c=b, b = a, a=c  : b  // keep closest to isovalue 0\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 D = vec2(2,0);\n   \n    O-=O;\n    vec4 v = T(u,0), c,\n         l = T(u-D   ,-1), r = T(u+D   ,1),     // check neighbors\n         b = T(u-D.yx,-2), t = T(u+D.yx,2);\n   //O = vec4( 1.-abs(v.x)/fwidth(v.x));   return; // isovalues test\n   //O = vec4(.5+.5*cos(v.x/fwidth(v.x))); return; // isovalues test\n    if ( abs(v.x)/fwidth(v.x) > 4.) return;     // compute curvature only on contour     \n    sort(l,r);                                  // keep 2 closest to isoval\n    sort(l,b);\n    sort(l,t);                                  // l = nearest to isoval 0\n  //sort(l,v); sort(r,v);                       // includes center in the options\n    sort(r,b);\n    sort(r,t);                                  // r = second neared\n    if (abs(v).x > abs(r.x) ) return;           // trace only on the contour\n    \n#define point(l) ( abs(l.y)==1. ? D : D.yx ) *sign(l.y) \\\n                  - 0.*l.x/l.zw                 // adjust point on isoval 0\n    vec2 P1 = point(l),                         // sample point relative location\n         P2 = point(r),\n          d = -(P2-P1) / ( normalize(r.zw) - normalize(l.zw) )  // intersection of the bisector lines\n              * 360./R.y;\n    O = vec4( 60./(d.x+d.y) * vec2(1,-1), v.x+.4, 1 );          // draw curvature R/G = sign\n // O = vec4( 6.*(1./d.x+1./d.y) * vec2(1,-1), v.x+.4, 1 );     // draw curvature R/G = sign\n // O = mix(O, vec4(1), clamp(1.-abs(v.x)/fwidth(v.x),0.,1.) ); // draw contour\n}\n\n\n\n\n\n /* // --- old complex method ( ~ marching cube )\n    float v00 = T(u)     , v10 = T(u+d ),\n          v01 = T(u+d.yx), v11 = T(u+1.), i=0.;\n    if      (v00*v10 < 0.) P1 = vec2( 1.- v10/v00, 0), i++;\n    else if (v01*v11 < 0.) P1 = vec2( 1.- v11/v01, 1), i++;\n    if      (v00*v01 < 0.) P2 = vec2( 0, 1.- v01/v00), i++;\n    else if (v10*v11 < 0.) P2 = vec2( 0, 1.- v11/v10), i++;\n    if (i!=2.) { O=vec4(0,0,1,1); return; }\n */",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}