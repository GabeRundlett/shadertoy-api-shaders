{
    "Shader": {
        "info": {
            "date": "1532249421",
            "description": "Cleanup of \"Bezier DistanceGlow\" by bloxard. [url]https://shadertoy.com/view/XdB3Ww[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "XtdyDn",
            "likes": 14,
            "name": "Quadratic Bezier dist - cleanup",
            "published": 3,
            "tags": [
                "cardanosmethod",
                "bezierspline",
                "quadraticbezier"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1701
        },
        "renderpass": [
            {
                "code": "// cleanup of \"Bezier DistanceGlow\" by bloxard. https://shadertoy.com/view/XdB3Ww\n\n\n//Find roots using Cardano's method. http://en.wikipedia.org/wiki/Cubic_function#Cardano.27s_method\nvec2 solveCubic2(vec3 a)\n{\n\tfloat p  = a.y - a.x*a.x/3.,\n\t      p3 = p*p*p,\n\t      q  = a.x* ( 2.*a.x*a.x - 9.*a.y ) /27. + a.z,\n\t      d  = q*q + 4.*p3/27.;\n    \n\tif(d>0.) {\n\t\tvec2 x = ( vec2(1,-1)*sqrt(d) -q ) *.5;\n        x = sign(x) * pow( abs(x) , vec2(1./3.) );\n  \t\treturn vec2( x.x+x.y -a.x/3. );\n  \t}\n    \n \tfloat v = acos( -sqrt(-27./p3)*q*.5 ) / 3.,\n \t      m = cos(v),\n \t      n = sin(v)*sqrt(3.);\n\n\treturn vec2(m+m,-n-m) * sqrt(-p/3.) - a.x/3.;\n}\n\n// How to solve the equation below can be seen on this image.\n// http://www.perbloksgaard.dk/research/DistanceToQuadraticBezier.jpg\n#define dd(a) dot(a,a)\n\nfloat dQBezier(vec2 p, vec2 a, vec2 b, vec2 c)\n{\n\tb = mix( b+vec2(1e-4), b, abs(sign(b*2.-a-c)) );\n\tvec2 A = b-a,\n\t     B = c-b-A,\n\t     C = p-a,\n\t     D = A*2.,\n\tP = solveCubic2( vec3(-3.*dot(A,B), dot(C,B)-2.*dd(A), dot(C,A))/-dd(B) );\n    P = clamp( P,0.,1.); // curve parameterization\n\n\treturn sqrt( min( dd( (D+B*P.x)*P.x -C ),\n                      dd( (D+B*P.y)*P.y -C )));\n}\n\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a) )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    float t = iTime; \n    vec2 R =   iResolution.xy,\n         U = ( u - R*.5 ) / R.y;\n    \n\tvec2 p0 = vec2(-cos(t*.5)   , sin(t*0.9) ) *.4,\n\t     p1 = vec2(-cos(t*2.3)  , sin(t*1.1) ),\n\t     p2 = vec2(cos(t*1.3)*.4, -sin(t*.3)*.3 );\n\n\tp0 *= rot( sin(t) -t );\n\tp1 *= rot( sin(t*.7) );\n\tp2 *= rot( cos(t*1.8) +t );\n\n\tfloat d = dQBezier(U,p0,p1,p2);\n  \n\tO = vec4(smoothstep(1.5,0., (d-10./R.y)/fwidth(d) ) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}