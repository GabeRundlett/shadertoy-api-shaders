{
    "Shader": {
        "info": {
            "date": "1575514710",
            "description": "another lovely shader for a wednesday stream.  don't ask about the \"PAW\" and \"blackles_correction\" it was for the memes\n\nwatch the recording here: https://www.twitch.tv/videos/517246716",
            "flags": 0,
            "hasliked": 0,
            "id": "wttGzr",
            "likes": 4,
            "name": "Twitch: Cute Pistons",
            "published": 3,
            "tags": [
                "cylinders",
                "liveshader",
                "livecode",
                "twitchstream",
                "pistons"
            ],
            "usePreview": 0,
            "username": "blackle",
            "viewed": 486
        },
        "renderpass": [
            {
                "code": "//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n//see updated version here: https://www.shadertoy.com/view/3lc3R8\n\nfloat corner(vec2 p){\n  bool t = sign(p.y)+sign(p.x) == 2.;\n  return t ? length(p) : max(p.x,p.y);\n}\n\nfloat cylinf(vec3 p, vec2 dim){\n  vec2 crds = vec2(length(p.xy), p.z);\n  return corner(crds-dim);\n}\n\nfloat cyl(vec3 p, vec2 dim) {\n  vec2 crds = vec2(length(p.xy), abs(p.z));\n  return corner(crds-dim);\n}\n\n#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)\nfloat hash(vec2 p) {\n  int x = FK(p.x);int y = FK(p.y);\n  return float((x*x-y)*(y*y+x)+x)/2.14e9;\n}\n\nfloat PAW = acos(-1.)*1.5;\nfloat blackles_correction = 2./1.5;\n\nvec2 piston(vec3 p, vec2 id, float scale) {\n  vec2 center = id/scale;\n  \n  vec2 offset = vec2(hash(id*vec2(0.5,0.69)),hash(id*vec2(0.85,0.19)));\n  center += offset;\n  \n  float off1 = hash(id)*PAW*blackles_correction;\n  float off2 = hash(id+vec2(off1,cos(off1)))*PAW*blackles_correction;\n  float off3 = hash(id+vec2(off2,cos(off2)))*PAW*blackles_correction;\n  float height = sin(iTime + off1) + sin(iTime*1.9 + off2)*0.9 + sin(iTime*2.9 + off3)*0.7;\n  \n  float rod = cylinf(p-vec3(center,0), vec2(0.6,height));\n  float scop = cylinf(p-vec3(center,0.), vec2(1.,(10.+height)/2.-10.));\n  float best = min(rod, scop);\n  float cap = cyl(p-vec3(center,height), vec2(1.2,0.1));\n  if (cap < best) {\n    return vec2(cap-0.05,1);\n  }\n  return vec2(best-0.1,0);\n}\n\nfloat mat = 0.;\nvec2 bestid = vec2(0);\nfloat scene(vec3 p) {\n  float scale =0.2;\n  \n  vec2 id = floor(p.xy*scale);\n  float dist = 10000.;\n  for (int i = -1; i < 2; i++) {\n    for (int j = -1; j < 2; j++) {\n      vec2 currid = vec2(id)+vec2(i,j);\n      vec2 pi = piston(p, currid, scale);\n      if (pi.x < dist) {\n        dist = pi.x;\n        mat = pi.y;\n        bestid = currid;\n      }\n    }\n  }\n  return dist;\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p) - mat3(0.001);\n  return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nvoid erot(inout vec3 p, vec3 ax, float ro) {\n  p = mix(dot(ax,p)*ax,p,cos(ro)) + sin(ro)*cross(ax,p);\n}\n\nfloat samp(vec3 p, vec3 i, float dist) {\n  return tanh(2.*scene(p + i*dist)/dist)*0.5+0.5;\n}\n\nvec3 planeinterp(vec3 a, vec3 b, vec3 c, vec3 d, vec2 k) {\n  a*=a;\n  b*=b;\n  c*=c;\n  d*=d;\n  return sqrt(mix(mix(a, b, k.x), mix(c, d, k.x),k.y));\n}\n\nvec3 prettycol(vec2 k) {\n  return planeinterp(vec3(1,0,0), vec3(1,0.1,0.5), vec3(0.1,0.6,0.9), vec3(0.5,0.5,1), k*0.5+0.5);\n}\n\nvec3 shade(vec3 p, vec3 cam) {\n  vec2 localbest = bestid;\n  vec3 col = vec3(0.8);\n  vec2 colr = vec2(hash(localbest*vec2(0.75,0.19)),hash(localbest*vec2(0.35,0.59)));\n  if (mat == 1.) {\n    col = mix(vec3(0.8),prettycol(colr),0.6);\n  } else {\n    col *= 0.9+colr.x*0.2;\n  }\n  vec3 n = norm(p);\n  vec3 i = reflect(cam, n);\n  float frensel = 1.-pow(abs(dot(n, cam)),2.)*0.5;\n  float s = (samp(p, i, 0.5)+samp(p, i, 2.)+samp(p, i, 4.))/3.;\n  return col*frensel*s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 cam = normalize(vec3(1.4, uv));\n  vec3 init = vec3(-9,0,5);\n  float ang1 = 0.6;\n  float ang2 = 0.6;\n  erot(cam, vec3(0,1,0), ang1);\n  erot(init, vec3(0,1,0), ang1);\n  init += vec3(iTime*5.,0,0);\n  erot(cam, vec3(0,0,1), ang2);\n  erot(init, vec3(0,0,1), ang2);\n\n  vec3 p = init;\n  bool hit = false;\n  for (int i = 0; i < 100; i++) {\n    float dist = scene(p);\n    if (abs(dist) < 0.001) { hit = true; break; }\n    if (distance(init, p) > 100.) break;\n    p += dist*cam;\n  }\n  fragColor.xyz = hit ? shade(p,cam) : vec3(0.5);\n  fragColor.xyz = smoothstep(vec3(0.1,0.1,0.05),vec3(0.9),fragColor.xyz) + hash(uv*iTime)*0.025;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}