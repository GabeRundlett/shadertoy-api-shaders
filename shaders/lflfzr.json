{
    "Shader": {
        "info": {
            "date": "1723286675",
            "description": "seed of life and flower of life",
            "flags": 0,
            "hasliked": 0,
            "id": "lflfzr",
            "likes": 7,
            "name": "seed of life distance",
            "published": 3,
            "tags": [
                "seedoflife"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 108
        },
        "renderpass": [
            {
                "code": "vec4 f_ond_seed_of_life(\n    vec2 o_trn\n){\n    float n_tau = 6.2831;\n    float n_ang_nor = fract(\n        atan(o_trn.x, o_trn.y)/n_tau\n    );\n    float n_radius = 0.25;\n    \n    float[] a_n = float[] (\n        0., 0., 0., 0.\n    );\n    float n_ang_nor_snpd = floor(n_ang_nor*6.)/6.;\n    \n    for(float n = 0.; n < float(a_n.length()); n+=1.){\n        float n2 = -1.+n;\n        float n_ang_nor_snpd = fract(n_ang_nor_snpd+(1./6.)*n2);\n        vec2 o = vec2(\n            sin(n_ang_nor_snpd*n_tau),\n            cos(n_ang_nor_snpd*n_tau)\n        )*n_radius;\n        float nl = length(o-o_trn)-n_radius;\n        float nl_abs = abs(nl);\n        a_n[int(n)] = nl;\n    }\n    float no = (length(o_trn)-n_radius);\n    float no_abs = abs(no);\n    float nm1 = min(min(min(a_n[0], a_n[1]), a_n[2]), a_n[3]);\n    float nma = min(min(min(abs(a_n[0]), abs(a_n[1])), abs(a_n[2])), abs(a_n[3]));\n    \n    return vec4(\n        min(nm1, no), \n        min(nma, no_abs),\n        min(nm1, no_abs), \n        min(nm1, nma)\n    );\n\n}\nvec4 f_ond_flower_of_life(\n    vec2 o_trn\n){\n    //basically the same as seed of life \n    \n    float n_tau = 6.2831;\n    float n_ang_nor = fract(\n        atan(o_trn.x, o_trn.y)/n_tau\n    );\n    float n_radius = 0.25;\n    \n    vec4[] a_o = vec4[] (\n        vec4(0.),\n        vec4(0.),\n        vec4(0.),\n        vec4(0.)\n    );\n    float n_ang_nor_snpd = floor(n_ang_nor*6.)/6.;\n    \n    for(float n = 0.; n < float(a_o.length()); n+=1.){\n        float n2 = -1.+n;\n        float n_ang_nor_snpd = fract(n_ang_nor_snpd+(1./6.)*n2);\n        vec2 o = vec2(\n            sin(n_ang_nor_snpd*n_tau),\n            cos(n_ang_nor_snpd*n_tau)\n        )*n_radius;\n        vec4 onl = f_ond_seed_of_life(\n            o-o_trn\n        );\n\n        a_o[int(n)] = onl;\n    }\n    float no = (length(o_trn)-n_radius);\n    float no_abs = abs(no);\n    float nm1 = min(min(min(a_o[0].x, a_o[1].x), a_o[2].x), a_o[3].x);\n        float nma = min(min(min(abs(a_o[0].y), abs(a_o[1].y)), abs(a_o[2].y)), abs(a_o[3].y));\n\n\n    return vec4(\n        min(nm1, no), \n        min(nma, no_abs),\n        min(nm1, no_abs), \n        min(nm1, nma)\n    );\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float n_scl_min = min(iResolution.x, iResolution.y);\n    \n    vec2 o_trn = (fragCoord.xy-iResolution.xy*.5)/n_scl_min;\n    o_trn *=2.;\n    vec4 o = f_ond_seed_of_life(o_trn);\n    o = f_ond_flower_of_life(o_trn);\n    float nt = sin(iTime);\n    float n = o.x * nt + (1.-nt)*o.y;\n    \n    n = pow(abs(n), 1./3.);\n    n = 1.-n;\n    // Time varying pixel color\n    vec3 col = vec3(n);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}