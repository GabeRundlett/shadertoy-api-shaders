{
    "Shader": {
        "info": {
            "date": "1634055277",
            "description": "Result of experimentation with organic patterns",
            "flags": 0,
            "hasliked": 0,
            "id": "fscXDf",
            "likes": 9,
            "name": "Taste of Noise 2",
            "published": 3,
            "tags": [
                "weird"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 491
        },
        "renderpass": [
            {
                "code": "\n// taste of noise 2 by leon denise 2021/10/12\n// result of experimentation with organic patterns\n// using code from Inigo Quilez, David Hoskins and NuSan\n// licensed under hippie love conspiracy\n\n// global variable\nfloat material;\n\n// sdf\nfloat map (vec3 p)\n{\n    vec3 pp = p;\n    \n    // time\n    float t = iTime * 0.1;\n    \n    // travel\n    p.z += t;\n    \n    // rotation parameter\n    vec3 angle = vec3(4.,3.,8.) + p;\n    \n    // domain repeat\n    float grid = 1.5;\n    p = repeat(p, grid);\n    \n    // kif\n    const int count = 6;\n    float a = 1.0;\n    float scene = 1000.;\n    float shape = 1000.;\n    for (int index = 0; index < count; ++index)\n    {\n        // fold\n        p = abs(p)-.4*a;\n        \n        // rotate\n        p.xz *= rot(angle.y/a);\n        p.yz *= rot(angle.x/a);\n        p.yx *= rot(angle.z/a);\n        \n        // sphere\n        shape = length(p)-.3*a;\n        \n        // material blending\n        material = mix(material, float(index), smoothing(shape, scene, 0.1*a));\n        \n        // add\n        scene = smin(scene, shape, 0.1 * a);\n        \n        // falloff\n        a /= 1.9;\n    }\n    \n    // cylinder hole\n    scene = smin(scene, length(pp.xy)-0.15, 0.1);\n    \n    // shell\n    scene = -(scene);\n    \n    // surface details\n    p = repeat(p, 0.03);\n    scene -= length(p)*.2;\n        \n    return scene;\n}\n\n// return color from pixel coordinate\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // reset color\n    fragColor = vec4(0);\n    material = 0.0;\n    \n    // camera coordinates\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n    vec3 eye = vec3(0,0,-0.2);\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    eye.xz *= rot(0.4+mouse.x*3.);\n    eye.xy *= rot(0.6-mouse.y*3.);\n    vec3 z = normalize(-eye);\n    vec3 x = normalize(cross(z, vec3(0,1,0)));\n    vec3 y = normalize(cross(x, z));\n    vec3 ray = normalize(vec3(z * 0.5 + uv.x * x + uv.y * y));\n    vec3 pos = eye + ray * .1;\n    \n    // white noise\n    vec3 seed = vec3(gl_FragCoord.xy, iTime);\n    float rng = hash13(seed);\n    \n    // raymarch\n    const int steps = 30;\n    for (int index = steps; index > 0; --index)\n    {\n        // volume estimation\n        float dist = map(pos);\n        if (dist < 0.001)\n        {\n            float shade = float(index)/float(steps);\n            \n            // compute normal by NuSan (https://www.shadertoy.com/view/3sBGzV)\n            vec2 off=vec2(.001,0);\n            vec3 normal = normalize(map(pos)-vec3(map(pos-off.xyy), map(pos-off.yxy), map(pos-off.yyx)));\n            \n            // Inigo Quilez color palette (https://iquilezles.org/articles/palettes)\n            vec3 tint = vec3(1.)+vec3(0.5)*cos(vec3(1,2,3)*material*0.2+pos.z);\n            \n            // specular lighting\n            float ld = dot(normal, -ray)*0.5+0.5;\n            vec3 light = vec3(0.196,0.925,0.914) * pow(ld, 10.) * 0.5;\n            \n            // pixel color\n            fragColor.rgb = (tint + light) *  shade;\n            \n            break;\n        }\n        \n        // dithering\n        dist *= 0.8 + 0.1 * rng;\n        \n        // raymarch\n        pos += ray * dist;\n    }\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// Inigo Quilez\n// https://iquilezles.org/articles/distfunctions\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\nfloat smoothing(float d1, float d2, float k) { return clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 ); }\n    \n\n// rotation matrix\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\n#define repeat(p,r) (mod(p,r)-r/2.)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}