{
    "Shader": {
        "info": {
            "date": "1727611622",
            "description": "originals https://www.shadertoy.com/view/XXyGzh, https://www.shadertoy.com/view/lslyRn",
            "flags": 1,
            "hasliked": 0,
            "id": "M3jyzt",
            "likes": 4,
            "name": "alien from space",
            "published": 3,
            "tags": [
                "space",
                "alien"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 98
        },
        "renderpass": [
            {
                "code": "#define rot(x) mat2(cos(x+vec4(0,11,33,0)))\n\n//formula for creating colors;\n#define H(h)  (  cos(  h + vec3(1,2,5)   )*.6 + .5 )\n\n#define H2(h)  (  cos(  h + vec3(1,2,0)   )*.7 + .2 )\n\n//formula for mapping scale factor \n#define M(c)  log(1.+c)\n\n#define R iResolution\n\n#define iterations 12\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n\nvoid mainImage( out vec4 O, vec2 U) {\n  \n    O = vec4(0);\n    vec2 uv=U.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\nvec4 o=O;\nvec2 u=U;\n\t\n vec2 v = iResolution.xy;\n         u = .2*(u+u-v)/v.y;    \n         \n    vec4 z = o = vec4(1,2,3,0);\n     \n    for (float a = .5, t = iTime, i; \n         ++i < 19.; \n         o += (1. + cos(z+t)) \n            / length((1.+i*dot(v,v)) \n                   * sin(1.5*u/(.5-dot(u,u)) - 9.*u.yx + t))\n         )  \n        v = cos(++t - 7.*u*pow(a += .03, i)) - 5.*u,                 \n        u += tanh(40. * dot(u *= mat2(cos(i + .02*t - vec4(0,11,33,0)))\n                           ,u)\n                      * cos(1e2*u.yx + t)) / 2e2\n           + .2 * a * u\n           + cos(4./exp(dot(o,o)/1e2) + t) / 3e2;\n              \n     o = 25.6 / (min(o, 13.) + 164. / o) \n       - dot(u, u) / 250.;\n\t\n\t\n\t\n\t\n    vec3 c=vec3(0);\n    vec4 rd = normalize( vec4(U-.5*R.xy, .7*R.y, R.y))*200.;\n    \n    float sc,dotp,totdist=0., tt=iTime/3., t=0.;\n    \n    for (float i=0.; i<80.; i++) {\n        \n        vec4 p = vec4( rd*totdist);\n            \n        p.xyz += vec3(0,-1.7,-1.);\n        \n       \n           \n        p.yzw = p.xyz;\n        \n        sc = 1.; \n        \n    \n        \n        vec4 w = p;\n        \n        for (float j=0.; j<7.; j++) {\n          \n            p = abs(p)*.6;\n       \n            dotp = max(1./dot(w,w),.001);\n            sc *= dotp; \n            \n            p = p * dotp - .39; \n            \n            w = .8*log(1.+log(1.+log(1.+p)*p)*p) - vec4(0.1,.1,0.2,.035);\n                    \n        }\n         \n        float dist = abs( max(length(p.zw),length(p.xy))-.1)/sc ;  //funky distance estimate\n        float stepsize2 = dist/30. ;     \n        totdist += stepsize2;                  //move the distance along rd\n        \n        //accumulate color, fading with distance and iteration count\n        c +=\n             .02 * H2(  atan( p.w, p.z )) * exp(-totdist*1e2) \n           + .02 * H(M(sc)) *  exp(-i*i*stepsize*stepsize*1e4);\n           \n        rd.yz *= rot( atan(c.z, c.y) / 200. );\n  \n    }\n    \n    c = 1. - exp(-c*c);\n    vec3 from=vec3(1.,.5,1.5)*c;\n\n               mainVR(O, U, from, dir);\t\n                   O+= ( vec4(c,0) );\n                     O*= ( vec4(c*2.+o.xyz*2.,0) );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}