{
    "Shader": {
        "info": {
            "date": "1457524293",
            "description": "Testbed for deciding which simple dither to use to remove banding in 8-bit/channel colour for this shader: [url]https://www.shadertoy.com/view/MsK3Wt[/url]\nBanding exaggerated by using 8-bit/pixel colour (configured by DEPTH vector).",
            "flags": 0,
            "hasliked": 0,
            "id": "MdyGDK",
            "likes": 3,
            "name": "Simple Dithers",
            "published": 3,
            "tags": [
                "dither"
            ],
            "usePreview": 0,
            "username": "Edward",
            "viewed": 829
        },
        "renderpass": [
            {
                "code": "// License: http://unlicense.org/\n\n#define DEPTH vec3(3.,3.,2.)\n#define PI 3.14159265359\n#define SLOW 4.\n#define BREATHE 1.\n\n// http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\nhighp float hash(vec2 co) {\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 shades = pow(vec3(2.),DEPTH);\n    vec3 top = shades - 1.;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 c = vec3(uv.x,0.5,uv.y) - sin(BREATHE * iTime * PI/SLOW*2. + PI/2.) * length(uv - .5)/2.;\n    vec3 scaledColour = c * vec3(shades);\n    vec3 ditherOffset = vec3(0.);\n    int i = int(mod(iTime/SLOW, 5.));\n    // i == 0? No dither\n    \n    // Cheap ordered dither\n    if(i == 1) ditherOffset += vec3(fract(fragCoord.x/4.+fragCoord.y/2.)-.375);\n    \n    // Different ordered dither\n    if(i == 2) ditherOffset += vec3(mod(mod(fragCoord.x,2.)+mod(fragCoord.y,2.)*2.+2.,4.)/4.-.375);\n    \n    // Random dither\n    if(i == 3) ditherOffset += vec3(hash(fragCoord) - 0.5);\n    \n    // 3 channel random dither\n    if(i == 4) ditherOffset += vec3(hash(fragCoord), hash(fragCoord + 1000.), hash(fragCoord + 2000.)) - .5;\n\n    fragColor = max(vec4(floor(scaledColour+ditherOffset)/(vec3(top)), 1.), 0.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}