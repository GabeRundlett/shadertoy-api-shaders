{
    "Shader": {
        "info": {
            "date": "1516144085",
            "description": "A quadrangle and a dual quadrilateral as well as a pair of associated conics.\n\nThe white conic goes through the green and red points.\n\nThe blue conic is tangent to the green and red lines.",
            "flags": 16,
            "hasliked": 0,
            "id": "lljBWz",
            "likes": 6,
            "name": "Projective Duality",
            "published": 3,
            "tags": [
                "projective",
                "quadrangle",
                "quadrilateral",
                "conics",
                "duality"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 771
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Projective conics, quadrangles and quadrilaterals\n//\n// Copyright (c) Matthew Arcus, 2018\n// MIT License: https://opensource.org/licenses/MIT\n//\n// Display a complete quadrangle with its dual quadrilateral.\n// Also with a fifth point construct a dual pair of conics, one\n// passing through the points of the quadrangle, one tangent\n// to the reciprocal line.\n//\n// Projective conics have a neat 3x3 matrix representation that we\n// make heavy use of here.\n//\n// Controls:\n// Drag green point to change conic\n// 'b': show base configuration\n// 'd': show dual configuration\n// '1' and '2': change initial configuration\n// 'f': change line & point drawing style\n// 'z': zoom in\n//\n////////////////////////////////////////////////////////////////////////////////\n\nint configuration = 3;\nbool invert = false;\nbool drawbase = true;\nbool drawdual = false;\n\nconst float lwidth = 0.03;\nconst float pwidth = 0.08;\nfloat ledge0 = 0.0, ledge1 = lwidth;\nfloat pedge0 = 0.75*pwidth, pedge1 = pwidth;\nconst float scale = 2.5;\nfloat zoom = 1.0;\n\nconst float PI =  3.141592654;\nfloat eps = 1e-4;\n\nconst vec3 pcolor0 = vec3(1,0,0);\nconst vec3 pcolor1 = vec3(0,1,0);\nconst vec3 pcolor2 = vec3(1,1,0);\nconst vec3 pcolor3 = vec3(0,1,1);\nconst vec3 lcolor0 = pcolor0;\nconst vec3 lcolor1 = pcolor1;\nconst vec3 lcolor2 = pcolor2;\nvec3 ccolor0 = vec3(1,1,1);\nconst vec3 ccolor1 = vec3(0,0,1);\n\n// Represent a projective conic as a 3x3 matrix:\n//\n// M = (a,d,e,\n//      d,b,f,\n//      e,f,c)\n//\n// is: axx + byy + czz + 2(dxy + exz + fyz) = 0\n// calculated as p'Mp for p = (x,y,z) and p' = transpose(p)\n//\n// We can treat this as a distance field, scaled by the\n// (x,y) derivative in order to get correct line widths.\n\n// With this representation, the dual conic is just the inverse;\n// if the determinant is zero then there is no dual and the\n// conic is degenerate.\n\n// Distance from the conic\nfloat dist(vec3 p, mat3 m) {\n  return dot(p,m*p);\n}\n\n// The gradient uses the same matrix.\n// Don't homegenize the result!\nvec3 grad(vec3 p, mat3 m) {\n  return m*p*2.0;\n}\n\nfloat conic(vec3 p, mat3 m) {\n  float d = dist(p,m);\n  vec3 dd = grad(p,m);\n  d = abs(d/(p.z*length(dd.xy))); // Normalize for Euclidean distance\n  return 1.0-smoothstep(ledge0,ledge1,d);\n}\n\n// Find a projective mapping taking p0,p1,p2,p3 to\n// triangle of reference and unit point, ie:\n// p0 -> (1,0,0), p1 -> (0,1,0), p2 -> (0,0,1), p3 -> (1,1,1)\n// No three points collinear.\nmat3 rproject(vec3 p0, vec3 p1, vec3 p2, vec3 p3) {\n  // Just an inverse for the first three points\n  // (the triangle of reference). No inverse if collinear.\n  mat3 m = inverse(mat3(p0,p1,p2)); // column major!\n  vec3 p3a = m*p3;\n  // Then scale each row so the unit point (1,1,1) is correct\n  m = transpose(m);\n  // zero components here only if not collinear\n  m[0] /= p3a[0];\n  m[1] /= p3a[1];\n  m[2] /= p3a[2];\n  m = transpose(m);\n  return m;\n}\n\n// Construct the conic defined by 5 points.\n// Method taken from \"Geometry\", Brannan, Esplan & Gray, CUP, 2012\nmat3 solve(vec3 p0, vec3 p1, vec3 p2, vec3 p3, vec3 p4) {\n  // p takes p0,p1,p2,p3 to triangle of reference and unit point\n  mat3 p = rproject(p0,p1,p2,p3);\n  // Now construct a conic through the images of p0-p4,\n  vec3 p4a = p*p4;\n  float a = p4a.x, b = p4a.y, c = p4a.z;\n  float d = c*(a-b);\n  float e = b*(c-a);\n  float f = a*(b-c);\n  mat3 m = mat3(0,d,e,\n                d,0,f,\n                e,f,0);\n  // And combine the two.\n  return transpose(p)*m*p;\n}\n\nfloat point(vec3 p, vec3 q) {\n  if (abs(p.z) < eps) return 0.0;\n  if (abs(q.z) < eps) return 0.0;\n  p /= p.z; q /= q.z; // Normalize\n  return 1.0-smoothstep(pedge0,pedge1,distance(p,q));\n}\n\nfloat line(vec3 p, vec3 q) {\n  // Just treat as a degenerate conic. Note factor of 2.\n  // We could do this more efficiently of course.\n  return conic(p,mat3(0,  0,  q.x,\n                      0,  0,  q.y,\n                      q.x,q.y,2.0*q.z));\n}\n\nvec3 join(vec3 p, vec3 q) {\n  // Return either intersection of lines p and q\n  // or line through points p and q, r = kp + jq\n  return cross(p,q);\n}\n\n// Screen coords to P2 coords\nvec3 map(vec2 p) {\n  return vec3(scale*zoom*(2.0*p - iResolution.xy) / iResolution.y, 1);\n}\n\n//-------------------------------------------------\n//From https://www.shadertoy.com/view/XtXGRS#\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nvec3 transform(vec3 p) {\n  float t = iTime;\n  p.x -= sin(0.08*t);\n  p.xy = rotate(p.xy,0.2*t);\n  p.yz = rotate(p.yz,0.1*t);\n  return p;\n}\n\nvec3 cmix(vec3 color0, vec3 color1, float level) {\n  if (invert) return mix(color0,1.0-color1,level);\n  else return mix(color0,color1,level);\n}\n\nvec3 mid(vec3 p, vec3 q) {\n  return p*q.z + q*p.z;\n}\n\nconst int CHAR_0 = 48;\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_F = 70;\nconst int CHAR_I = 73;\nconst int CHAR_Z = 90;\nbool keypress(int code) {\n#if defined LOCAL || __VERSION__ < 300\n  return false;\n#else\n  return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  drawbase = !keypress(CHAR_B);\n  drawdual = !keypress(CHAR_D);\n  invert = keypress(CHAR_I);\n  if (invert) ccolor0 = vec3(0);\n  if (keypress(CHAR_Z)) zoom = 0.25;\n  if (keypress(CHAR_F)) {\n      float pixelwidth = 4.0*scale/iResolution.y;\n      pedge0 = pwidth-pixelwidth;\n      //pedge1 = pwidth+pixelwidth;\n      ledge0 = lwidth-pixelwidth;\n      //ledge1 = lwidth+pixelwidth;\n  }    \n  configuration = int(keypress(CHAR_0+1)) + 2*int(keypress(CHAR_0+2));\n  vec3 p = map(fragCoord.xy);\n  vec3 p0,p1,p2,p3,p4; // p4 is the movable point\n  if (configuration == 0) {\n    p0 = vec3(1,0,0); p1 = vec3(0,1,0);\n    p2 = vec3(0,0,1); p3 = vec3(1,1,1);\n    p4 = vec3(0.5,-1,1);\n  } else if (configuration == 1) {\n    p0 = vec3(0,0,1); p1 = vec3(1,0,1);\n    p2 = vec3(0,1,1); p3 = vec3(1,1,1);\n    p4 = vec3(0.5,-1,1);\n  } else if (configuration == 2) {\n    p0 = vec3(0,0,1); p1 = vec3(0,1,1);\n    p2 = vec3(0.866,-0.5,1); p3 = vec3(-0.866,-0.5,1);\n    p4 = vec3(0.5,-1,1);\n  } else {\n    p0 = vec3(1,0,1);  p1 = vec3(0,1,1);\n    p2 = vec3(-1,0,1); p3 = vec3(0,-1,1);\n    p4 = vec3(0.5,-1,1);\n  }\n  p0 = transform(p0); p1 = transform(p1);\n  p2 = transform(p2); p3 = transform(p3);\n  if (iMouse.x != 0.0) {\n    p4 = map(iMouse.xy);\n  }\n  vec3 p01 = join(p0,p1);\n  vec3 p02 = join(p0,p2);\n  vec3 p03 = join(p0,p3);\n  vec3 p12 = join(p1,p2);\n  vec3 p13 = join(p1,p3);\n  vec3 p23 = join(p2,p3);\n\n  mat3 M = solve(p0,p1,p2,p3,p4);\n\n  // Don't try to invert if zero or nan determinant\n  float det = determinant(M);\n\n  vec3 color = vec3(0);\n\n  if (drawbase) {\n    // The diagonal lines of the quadrangle\n    color = cmix(color,lcolor2,line(p,p01));\n    color = cmix(color,lcolor2,line(p,p02));\n    color = cmix(color,lcolor2,line(p,p03));\n    color = cmix(color,lcolor2,line(p,p12));\n    color = cmix(color,lcolor2,line(p,p13));\n    color = cmix(color,lcolor2,line(p,p23));\n  }\n  \n  // The lines of the quadrilateral\n  if (drawdual) {\n    color = cmix(color,lcolor0,line(p,p0));\n    color = cmix(color,lcolor0,line(p,p1));\n    color = cmix(color,lcolor0,line(p,p2));\n    color = cmix(color,lcolor0,line(p,p3));\n    // The moving line\n    color = cmix(color,lcolor1,line(p,p4));\n  }\n\n  // The conics\n  if (drawbase && !isnan(det)) {\n    color = cmix(color,ccolor0,conic(p,M));\n  }\n  if (drawdual && abs(det) > 1e-10) {\n    // Inverse is dual conic.\n    // In fact, the adjoint would be better\n    color = cmix(color,ccolor1,conic(p,inverse(M)));\n  }\n\n  // The points of the quadrangle\n  if (drawbase) {\n    color = cmix(color,pcolor0,point(p,p0));\n    color = cmix(color,pcolor0,point(p,p1));\n    color = cmix(color,pcolor0,point(p,p2));\n    color = cmix(color,pcolor0,point(p,p3));\n  }\n  if (drawdual) {\n    // The intersection points of the sides of the quadrilateral\n    color = cmix(color,pcolor2,point(p,p01));\n    color = cmix(color,pcolor2,point(p,p02));\n    color = cmix(color,pcolor2,point(p,p03));\n    color = cmix(color,pcolor2,point(p,p12));\n    color = cmix(color,pcolor2,point(p,p13));\n    color = cmix(color,pcolor2,point(p,p23));\n  }\n  // Alway draw the moving point\n  color = cmix(color,pcolor1,point(p,p4));\n\n  if (invert) color = 1.0 - color;\n  fragColor = vec4(pow(1.0*color,vec3(0.4545)),1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}