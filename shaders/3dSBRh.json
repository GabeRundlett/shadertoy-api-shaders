{
    "Shader": {
        "info": {
            "date": "1589417517",
            "description": "This is one of my first shaders, thanks to FabriceNeyret and manu210404 for offering advice when I was new to Shadertoy!",
            "flags": 0,
            "hasliked": 0,
            "id": "3dSBRh",
            "likes": 4,
            "name": "2D Fractal Brownian Motion Noise",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "noise",
                "fbm",
                "brownian",
                "motion"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 1639
        },
        "renderpass": [
            {
                "code": "// ####### 2D Fractal Brownian Motion Noise #######\n// Made by Jacob Bingham (Zi7ar21) on August 1st, 2021 (Original from May 14th, 2020)\n\n// If you found this anywhere except Shadertoy, the orignal (and possibly updated version) can be found at:\n// https://www.shadertoy.com/view/3dSBRh\n\n// http://www.mimirgames.com/articles/programming/digits-of-pi-needed-for-floating-point-numbers/\n#define pi 3.141592653589793\n\n// Rotate a vec2\nvec2 rotate(vec2 vec, float rot)\n{\n    float s = sin(rot), c = cos(rot);\n    return vec2(vec.x*c-vec.y*s, vec.x*s+vec.y*c);\n}\n\n// Hash13 Hash without Sine: https://www.shadertoy.com/view/4djSRW\nfloat hash(vec2 p, float t)\n{\n    vec3 p3 = vec3(p, t);\n    p3  = fract(p3*0.1031);\n    p3 += dot(p3, p3.zyx+31.32);\n    return fract((p3.x+p3.y)*p3.z);\n}\n\n// Value Noise\n/*\nfloat noise(vec2 p, float t)\n{\n    vec2 f = smoothstep(0.0, 1.0, fract(p));\n    p = floor(p);\n    float t0 = hash(vec2(0.0, 0.0)+p, t);\n    float t1 = hash(vec2(1.0, 0.0)+p, t);\n    float t2 = hash(vec2(0.0, 1.0)+p, t);\n    float t3 = hash(vec2(1.0, 1.0)+p, t);\n    return mix(mix(t0, t1, f.x), mix(t2, t3, f.x), f.y);\n}\n*/\n\n// manu210404's Improved Version\nfloat noise(vec2 p, float t)\n{\n    vec4 b = vec4(floor(p), ceil(p));\n    vec2 f = smoothstep(0.0, 1.0, fract(p));\n    return mix(mix(hash(b.xy, t), hash(b.zy, t), f.x), mix(hash(b.xw, t), hash(b.zw, t), f.x), f.y);\n}\n\n// Number of FBM Octaves\n#define num_octaves 16\n\n// Fractal Brownian Motion Noise\nfloat fbm(vec2 pos)\n{\n    float value = 0.0;\n    float scale = 1.0;\n    float atten = 0.5;\n    float t = 0.0;\n    for(int i = 0; i < num_octaves; i++)\n    {\n        t += atten;\n        value += noise(pos*scale, float(i))*atten;\n        scale *= 2.0;\n        atten *= 0.5;\n        pos = rotate(pos, 0.125*pi);\n    }\n    return value/t;\n}\n\n// Traditional Uniform Identifiers\n#define resolution iResolution\n\n// Render and Output the Frame\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Screen UV Coordinates\n    vec2 uv = 2.0*(gl_FragCoord.xy-0.5*resolution.xy)/max(resolution.x, resolution.y);\n\n    // Render the Frame\n    vec3 color = vec3(fbm(10.0*uv));\n\n    // Output the Rendered Frame\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}