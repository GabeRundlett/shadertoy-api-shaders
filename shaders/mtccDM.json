{
    "Shader": {
        "info": {
            "date": "1699277564",
            "description": "My first shader :)",
            "flags": 0,
            "hasliked": 0,
            "id": "mtccDM",
            "likes": 6,
            "name": "On the sine wave",
            "published": 3,
            "tags": [
                "2d",
                "sine"
            ],
            "usePreview": 0,
            "username": "bigmazi",
            "viewed": 244
        },
        "renderpass": [
            {
                "code": "float pi = 3.14159265359;\n\nfloat sinlen(float x)\n{\n    return (sin(2.0 * x) + 6.0 * x) * 0.25;\n}\n\nfloat normaly(float x0, float y0, float x)\n{\n    float cosx0 = cos(x0);\n    return (-x / cosx0) + (y0 + x0 / cosx0);\n}\n\nfloat solvex(float x, float y)\n{\n    float rem = mod(x - pi * 0.5, pi);\n    \n    if (rem == 0.0)\n        return x;\n    \n    float s = sign(cos(x));\n    \n    float begin = x - rem;\n    float end = begin + pi;\n    \n    for (int i = 0; i < 1000; ++i)\n    {\n        float m = (begin + end) * 0.5;\n        \n        if (s * normaly(x, y, m) < s * sin(m))\n        {\n            end = m;\n        }\n        else\n        {\n            begin = m;\n        }\n    }\n    \n    return begin;\n}\n\nvoid grid(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 uv0 = uv;\n    uv0 = uv0 * 2.0 - 1.0;\n    \n    uv.x *= iResolution.x / iResolution.y;    \n    uv += 0.05;\n    \n    uv = fract(uv * 10.0);\n    uv -= 0.5;\n    uv *= 2.0;\n    uv = 1.0 - abs(uv);\n    \n    vec2 wb = smoothstep(0.92, 0.96, uv);    \n    vec3 col = vec3(0.2, 1.0, 0.8) * pow(max(wb.x, wb.y), 3.0);\n    \n    vec2 b = smoothstep(-0.95, -0.9, -abs(uv0));\n    col *= min(b.x, b.y);\n    \n    col *= 0.32;\n    fragColor = vec4(col, 1.0);\n}\n\nfloat sine(in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;    \n    uv *= 2.0;\n    uv -= 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    uv.x *= pi * 2.0;\n    uv.y *= pi * 2.0;\n    \n    vec2 dyn = vec2(0.0, 0.0);\n    dyn.x += (fract(iTime / 2.46) - 0.5) * pi * 4.0 * iResolution.x / iResolution.y * 1.4;\n    \n    float radius = 0.52;\n    \n    float dist = length(uv - vec2(dyn.x, sin(dyn.x)));\n    \n    float solution = solvex(uv.x, uv.y);\n\n    if (solution < dyn.x)\n    {\n        dist = length(uv - vec2(solution, sin(solution)));\n    }\n    else\n    {\n        solution = dyn.x;\n    }\n\n    float tail = pi * 3.3;\n    float extra = 1.0 - sinlen(dyn.x - solution) / tail;\n    extra = clamp(extra, 0.0, 1.0);\n    extra = pow(extra, 1.5);\n    \n    float k = max(0.0, 1.0 - dist / extra / radius);\n    k = pow(k, 0.8);\n    k *= extra;\n    \n    return k;\n    \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    grid(fragColor, fragCoord);\n    float k = sine(fragCoord);    \n    \n    vec3 col = vec3(0.2, 0.8, 0.7);    \n    \n    fragColor = vec4(mix(fragColor.rgb, col, k * 1.88), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}