{
    "Shader": {
        "info": {
            "date": "1645089334",
            "description": "An attempt to model the warrped fungus from minecraft",
            "flags": 0,
            "hasliked": 0,
            "id": "7dXBRB",
            "likes": 9,
            "name": "The nether",
            "published": 3,
            "tags": [
                "3d",
                "raymarching"
            ],
            "usePreview": 0,
            "username": "El_Sargo",
            "viewed": 339
        },
        "renderpass": [
            {
                "code": "mat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\nmat3 rotz(float a) { mat3 rot; rot[0] = vec3(cos(a), -sin(a), 0.0); rot[1] = vec3(sin(a), cos(a), 0.0); rot[2] = vec3(0.0, 0.0, 1.0); return rot; }\n\n\nfloat smin( float a, float b, float k )\n{\n    float h = a-b;\n    return 0.5*( (a+b) - sqrt(h*h+k) );\n}\n\nfloat sdSphere(vec3 p, float r){\n    return length(p) - r;\n}\n\n\nfloat sdCutHollowSphere( vec3 p, float r, float h, float t )\n{\n  // sampling independent computations (only depend on shape)\n  float w = sqrt(r*r-h*h);\n  \n  // sampling dependant computations\n  vec2 q = vec2( length(p.xz), p.y );\n  return ((h*q.x<w*q.y) ? length(q-vec2(w,h)) : \n                          abs(length(q)-r) ) - t;\n}\n\nfloat sdTorus( vec3 p, float t, float r)\n{\n  vec2 q = vec2(length(p.xz)- t,p.y);\n  return length(q)- r;\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\n\nvec3 bendPoint(vec3 p, float k)\n{\n    float c = cos(k*p.y);\n    float s = sin(k*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.xy,p.z);\n    return q;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat displacement(vec3 p){\n    return \n    texture(iChannel1,p*0.2).x*0.1+\n    texture(iChannel1,p*0.4).x*0.05+\n    texture(iChannel1,p*0.8).x*0.025+\n    texture(iChannel1,p*1.6).x*0.0125;\n}\n\nfloat sdLand(vec3 p){\n    p-=vec3(3,-0.1,1.5);\n    return smin(\n                smin(\n                    sdBox((p-vec3(2,-1.8,7))*roty(-1.), vec3(2,1,2)),\n                    sdBox((p-vec3(2.5,-3.8,4)), vec3(3,1.9,3)),\n                    2.\n                    ),\n                smin(\n                    sdBox((p-vec3(-2,-1.8,1))*roty(-1.), vec3(2,1,2)),\n                    sdBox((p-vec3(4,-1.50,4)), vec3(1)),\n                    2.\n                    ),\n                    2.\n                )\n            + displacement(p*vec3(.2, .1, .2))*6.;\n}\n\nfloat sdShroomLights(vec3 q){\n   return min(\n              min(\n                  sdSphere(q-vec3(1.,1.5,5.4), 0.35), \n                  sdSphere(q-vec3(2.,1.5,5.6), 0.4)\n                  ),\n              min(\n                  sdSphere(q-vec3(1.2,1.6,6.5), 0.45), \n                   sdSphere(q-vec3(2.7,1.4,6.6), 0.34)\n                  )\n              );\n}\n\n\n#define SHROOMBEND bendPoint(p, sin(iTime*0.6)*0.05+0.1)\n\nfloat sdShroomHead(vec3 q){\n    return sdCutHollowSphere((q-vec3(1.5,0.95,6.5))*rotz(3.3)*rotx(.25), 1.8, -0.24*smoothstep(-1.,01.,sin(10.*q.x-q.z))-0.1, 0.12 )+displacement(q);\n}\n\nfloat sdShroomStem(vec3 q){\n    return sdVerticalCapsule(q-vec3(2.,-2.,6.5), 4., .32);\n}\n\nfloat sdShroom(vec3 p){\n    vec3 q = SHROOMBEND;\n        return smin(\n                       min(\n                            sdShroomHead(q),\n                            sdShroomStem(q)\n                           ),\n                       sdShroomLights(q),\n                       0.06\n                   );\n}\n\nfloat sdScene(vec3 p){\n    return smin(\n                sdShroom(p),\n                sdLand(p),\n                .2\n                );\n}\n\n\nvec3 calcShroomLightDir( in vec3 p) // for function f(p)\n{\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    vec3 q = SHROOMBEND;\n    return normalize( k.xyy*sdShroomLights(q + k.xyy*h) + \n                      k.yyx*sdShroomLights(q + k.yyx*h) + \n                      k.yxy*sdShroomLights(q + k.yxy*h) + \n                      k.xxx*sdShroomLights(q + k.xxx*h) );\n}\n\nvec3 calcNormal( in vec3 p) // for function f(p)\n{\n    const float h = 0.01; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*sdScene(p + k.xyy*h) + \n                      k.yyx*sdScene(p + k.yyx*h) + \n                      k.yxy*sdScene(p + k.yxy*h) + \n                      k.xxx*sdScene(p + k.xxx*h) );\n}\n\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = sdScene(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Camera setup...\n    //https://www.shadertoy.com/view/4tGfz3\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(0.5);\n    uv.y /= iResolution.x / iResolution.y;\n\n    vec3 rd = normalize(vec3(uv, .4));\n    //rd *= rotx(0.0);\n    vec3 rp = vec3(0.0, 0, 0);\n\n\n    \n    //---------------------------------------\n    //\n    //March!\n    //\n    //\n    for(int i = 0; i < 60; i++) {\n        rp += rd*sdScene(rp)*0.9;\n    }\n    //if (sdScene(rp) < .1)\n    vec3 p = rp;\n    vec3 q = SHROOMBEND;\n    float SLDist = sdShroomLights(q);\n    vec3 normal = calcNormal(rp);\n    vec3 lightDir;\n    if (SLDist <= 0.1)\n        lightDir = -normal;\n    else\n        lightDir = calcShroomLightDir(rp);\n    vec3 ShroomLightCol = vec3(2.99,0.99,0.42);\n    vec3 AmbientLightCol = vec3(0.9);\n    vec3 col = vec3(1.,0.4,0.);\n    float reflecive = 1.;\n    if (SLDist <= 0.1) {\n        col = ShroomLightCol*(texture(iChannel2, q.xy*4.).xxx-vec3(0, 5.5, 0));\n        reflecive = -2.2;\n    } else if(sdShroomHead(q) <= 0.2) {\n        col = vec3(0.2, 0.8, 1.2)+texture(iChannel0, q.xy).yxx*0.75;\n        reflecive = 0.8;\n    } else if(sdShroomStem(q) <= 0.4){\n        col = vec3(7.7)*texture(iChannel2, q.xy).xxx;\n        reflecive = 1.;\n    } else if(sdLand(p) < 0.5){\n        col = vec3(1.8, 0.3, 0.1)*texture(iChannel2, 2.2*p.xz + p.y*p.y).xyz;\n        reflecive = 0.4;\n    } else {\n        col = texture(iChannel3, rd).xyz+vec3(0.9,0.4,0.9);\n        reflecive = 1.;\n        normal = vec3(0);\n    }\n    vec3 DirlightDir = normalize(vec3(1.2, -1, 1));\n    float DirLightStrength = shadow(rp, -DirlightDir, 2.1, 2.);\n    fragColor = vec4(clamp(vec3(0),vec3(1),ShroomLightCol*smoothstep(-0.,1.,dot(lightDir,-normal)*0.5/SLDist)+\n                     col*AmbientLightCol*0.4*reflecive*smoothstep(-1.,1.,dot(normal,-DirlightDir))*(DirLightStrength*0.5+0.5)), 1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}