{
    "Shader": {
        "info": {
            "date": "1611723968",
            "description": "This shader visualizes the currently played audio in channel index 0. Select any other audio file if you want to change the currently played music.",
            "flags": 0,
            "hasliked": 0,
            "id": "wlKyDy",
            "likes": 1,
            "name": "Simple Audio Visualizer Matrix",
            "published": 3,
            "tags": [
                "simple",
                "audio",
                "visualizer"
            ],
            "usePreview": 0,
            "username": "BigETI",
            "viewed": 564
        },
        "renderpass": [
            {
                "code": "// Anti aliasing level\nuint antiAliasing = 4U;\n\n// Minimal bar count\nconst float minimalBarCount = 16.0;\n\n// Maximal bar count\nconst float maximalBarCount = 64.0;\n\n// Bar spacing\nconst float barSpacing = 0.25;\n\n// Sample volume count\nconst uint sampleBassVolumeCount = 16U;\n\n// Low background color\nconst vec4 lowBackgroundColor = vec4(0.0, 0.0625, 0.125, 1.0);\n\n// High background color\nconst vec4 highBackgroundColor = vec4(0.03125, 0.03125, 0.03125, 1.0);\n\n// Low volume color\nconst vec4 lowVolumeColor = vec4(0.0, 0.0, 1.0, 1.0);\n\n// Middle volume color\nconst vec4 middleVolumeColor = vec4(0.0, 1.0, 0.0, 1.0);\n\n// High volume color\nconst vec4 highVolumeColor = vec4(1.0, 0.0, 0.0, 1.0);\n\n// Samples scene\nvec4 SampleScene(const vec2 fragCoord)\n{\n    // Scene UV coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Samples bass volume sum\n    float bass_volume_sum = 0.0f;\n    for (uint x = 0U; x != sampleBassVolumeCount; x++)\n    {\n        bass_volume_sum += texture(iChannel0, vec2(float(x) / float(sampleBassVolumeCount * 4U), 0.0)).x;\n    }\n    \n    // Number of columns\n    float columns = round(mix(maximalBarCount, minimalBarCount, bass_volume_sum / float(sampleBassVolumeCount)));\n    \n    // Number of rows\n    float rows = (columns * iResolution.y) / iResolution.x;\n    \n    // Current volume of sample\n    float volume = ((fract(uv.x * float(columns) + (barSpacing * 0.5)) > barSpacing) && (fract(uv.y * float(rows) + (barSpacing * 0.5)) > barSpacing)) ? texture(iChannel0, vec2(floor(uv.x * columns) / columns, 0.0)).x : 0.0;\n    \n    // Renders visualization\n    return (uv.y > volume) ? mix(lowBackgroundColor, highBackgroundColor, uv.y) : ((volume > 0.5) ? mix(middleVolumeColor, highVolumeColor, (volume - 0.5) * 2.0) : mix(lowVolumeColor, middleVolumeColor, volume * 2.0));\n}\n\n// Main entry point\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Samples subpixels of scene\n    vec4 color_sum = vec4(0.0);\n    for (uint x = 0U, y; x != antiAliasing; x++)\n    {\n        for (y = 0U; y != antiAliasing; y++)\n        {\n            color_sum += SampleScene(fragCoord + vec2(((float(x) + 0.5) / float(antiAliasing)) - 0.5, ((float(y) + 0.5) / float(antiAliasing)) - 0.5));\n        }\n    }\n    fragColor = color_sum / float(antiAliasing * antiAliasing);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 20,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}