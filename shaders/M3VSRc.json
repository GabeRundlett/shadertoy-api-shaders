{
    "Shader": {
        "info": {
            "date": "1720310664",
            "description": "Pepsi WINS at the end of time",
            "flags": 32,
            "hasliked": 0,
            "id": "M3VSRc",
            "likes": 2,
            "name": "PEPSI WINS!",
            "published": 3,
            "tags": [
                "raymarching",
                "uvmapping"
            ],
            "usePreview": 1,
            "username": "orblivius",
            "viewed": 116
        },
        "renderpass": [
            {
                "code": "// Hacked together by the one and only .. Orblivius\n//\n// OK, I admit it I always liked Pepsi over Coke, so let me be the\n// one who puts the final judgement of Pepsi being the winner!\n// But these days I mostly just drink natural juices and water, and black tea!\n//\n// This a quick hack, but it had to be done. I  wanted to find out\n// how easy would it be to embed a decent resolution image and use it as a texsture.\n// And I stumbled upon this script: \n// \n// https://github.com/rkibria/img2shadertoy/blob/master/img2shadertoy.py\n//\n//\n// I struggled a bit to get it to work, but I got it to work, if you have a \n// python module installed by the name int, uninstall it with: pip3 uninstall int\n// Another thing I learned is you need to save BMP format as BMP3 like this:\n// \n// convert pepsi.jpg -resize 128x128 -type palette -depth 8 -compress none -define bmp:format=bmp3 pepsi.bmp\n//\n// I've tested it on OS X, but it should work everywhere. Oh and btw, install \n// image magick, that's what convert CLI tool is part of image magick package: \n// brew install magick\n//\n// That's it.  Sources I used:  https://shadertoy.com/view/ldX3DX, \n// https://www.shadertoy.com/view/lscGRl and that's about it. Horribly fast pasted together\n// simply as a tutorial how to do this.  You might want to choose resolution wiser for\n// rectangular and non-square image, and it has to be I think as docs say multiple of 32.\n\nconst float tau = 6.28318530717958647692;\nconst float PI = tau/2.;\n\n// inspired by foxes' honeycomb fractal\n\nvec3 hash(float x) { \n    return fract(cos((vec3(x) + vec3(23.32445, 132.45454, 65.78943)) * vec3(23.32445, 32.45454, 65.78943)) * 4352.34345); \n}\n\nvec3 noise(float x) {\n    float p = fract(x); \n    x -= p;\n    return mix(hash(x), hash(x + 1.0), p);\n}\n\nvec3 noiseq(float x) {\n    return (noise(x) + noise(x + 10.25) + noise(x + 20.5) + noise(x + 30.75)) * 0.25;\n}\n\nvoid mainImage2(out vec4 O, vec2 U) {\n    \n    // 获取旋转后的纹理颜色\n   // vec3 texColor = texture(iChannel0, spiralUV).rgb;\n   // O.rgb = mix(O.rgb, texColor, 0.);\n}\n\n\n// Divide the view into multiple viewports\n// Set global variables to replace iResolution and fragCoord for the local viewport\n// Returns index of which panel is being drawn for this pixel\n// in the range [0,numPanels.x*numPanels.y)\nvec2 view_Resolution;\nvec2 view_FragCoord;\nint view_Index;\nvec4 view_selectionRelativeMouse;\n/*bool SideMenu( ivec2 numPanels )\n{\n\t// arrange so that the main view and the side views have the same aspect ratio\n\tvec2 dims = vec2(\n\t\t\t\t\t\tiResolution.x/float(numPanels.x+numPanels.y), // main view is sv.y times bigger on both axes!\n\t\t\t\t\t\tiResolution.y/float(numPanels.y)\n\t\t\t\t\t\t);\n\n\n\t// which one is selected?\n\tivec2 viewIndex = ivec2(floor(iMouse.xy/dims));\n\n\tint selectedPanel = 0;\n\tif ( viewIndex.x < numPanels.x )\n\t{\n\t\tselectedPanel = viewIndex.y+viewIndex.x*numPanels.y;\n\t}\n\t\n\n\t// figure out which one we're drawing\n\tviewIndex = ivec2(floor(fragCoord.xy/dims));\n\n\tint index;\n\tvec4 viewport;\n\tif ( viewIndex.x < numPanels.x )\n\t{\n\t\tviewport.xy = vec2(viewIndex)*dims;\n\t\tviewport.zw = dims;\n\t\tindex = viewIndex.y+viewIndex.x*numPanels.y;\n\t}\n\telse\n\t{\n\t\t// main view, determined by where the last click was\n\t\tviewport.x = float(numPanels.x)*dims.x;\n\t\tviewport.y = 0.0;\n\t\tviewport.zw = dims*float(numPanels.y);\n\t\tindex = selectedPanel;\n\t}\n\t\n\t// highlight currently selected\n\tif ( index == selectedPanel && viewIndex.x < numPanels.x &&\n\t\t( fragCoord.x-viewport.x < 2.0 || viewport.x+viewport.z-fragCoord.x < 2.0 ||\n\t\t  fragCoord.y-viewport.y < 2.0 || viewport.y+viewport.w-fragCoord.y < 2.0 ) )\n\t{\n\t\tfragColor = vec4(1,1,0,1);\n\t\treturn false;\n\t}\n\t\n\t// compute viewport-relative coordinates\n\tview_FragCoord = fragCoord.xy - viewport.xy;\n\tview_Resolution = viewport.zw;\n\tview_Index = index;\n\n\tview_selectionRelativeMouse = fract(iMouse/dims.xyxy);\n\t\n\treturn true;\n}*/\n\n// Gamma correction\n#define GAMMA (2.2)\n\nvec3 ToLinear( in vec3 col )\n{\n\t// simulate a monitor, converting colour values into light values\n\treturn pow( col, vec3(GAMMA) );\n}\n\nvec3 ToGamma( in vec3 col )\n{\n\t// convert back into colour values, so the correct light will come out of the monitor\n\treturn pow( col, vec3(1.0/GAMMA) );\n}\n\n// Set up a camera looking at the scene.\n// origin - camera is positioned relative to, and looking at, this point\n// distance - how far camera is from origin\n// rotation - about x & y axes, by left-hand screw rule, relative to camera looking along +z\n// zoom - the relative length of the lens\nvoid CamPolar( out vec3 pos, out vec3 ray, in vec3 origin, in vec2 rotation, in float distance, in float zoom )\n{\n\t// get rotation coefficients\n\tvec2 c = vec2(cos(rotation.x),cos(rotation.y));\n\tvec4 s;\n\ts.xy = vec2(sin(rotation.x),sin(rotation.y)); // worth testing if this is faster as sin or sqrt(1.0-cos);\n\ts.zw = -s.xy;\n\n\t// ray in view space\n\tray.xy = view_FragCoord.xy - view_Resolution.xy*.5;\n\tray.z = view_Resolution.y*zoom;\n\tray = normalize(ray);\n\t\n\t// rotate ray\n\tray.yz = ray.yz*c.xx + ray.zy*s.zx;\n\tray.xz = ray.xz*c.yy + ray.zx*s.yw;\n\t\n\t// position camera\n\tpos = origin - distance*vec3(c.x*s.y,s.z,c.x*c.y);\n}\n\n\nvec4 Noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n//\tvec2 f2 = f*f; f = f*f2*(10.0-15.0*f+6.0*f2);\n\n\tvec2 uv = p + f;\n\n#if (1)\n\tvec4 rg = textureLod( iChannel0, (uv+0.5)/256.0, 0.0 );\n#else\n\t// on some hardware interpolation lacks precision\n\tvec4 rg = mix( mix(\n\t\t\t\ttexture( iChannel0, (floor(uv)+0.5)/256.0, -100.0 ),\n\t\t\t\ttexture( iChannel0, (floor(uv)+vec2(1,0)+0.5)/256.0, -100.0 ),\n\t\t\t\tfract(uv.x) ),\n\t\t\t\t  mix(\n\t\t\t\ttexture( iChannel0, (floor(uv)+vec2(0,1)+0.5)/256.0, -100.0 ),\n\t\t\t\ttexture( iChannel0, (floor(uv)+1.5)/256.0, -100.0 ),\n\t\t\t\tfract(uv.x) ),\n\t\t\t\tfract(uv.y) );\n#endif\t\t\t  \n\n\treturn rg;\n}\n\nfloat DistanceField( vec3 pos );\n\nvec3 Normal( vec3 pos )\n{\n\tconst vec2 delta = vec2(0,.01);\n\tvec3 grad;\n\tgrad.x = DistanceField( pos+delta.yxx )-DistanceField( pos-delta.yxx );\n\tgrad.y = DistanceField( pos+delta.xyx )-DistanceField( pos-delta.xyx );\n\tgrad.z = DistanceField( pos+delta.xxy )-DistanceField( pos-delta.xxy );\n\treturn normalize(grad);\n}\n\n\n// ----------------------\n\nfloat RippleHeight( vec2 pos )\n{\n\tvec2 p = pos+vec2(-1,.2)*iTime;\n\t\n\tp += vec2(1,0)*Noise(p).y; // more natural looking ripples\n\tfloat f = Noise(p).x-.5;\n\tp *= 2.0;\n\tp += vec2(0,-.5)*iTime;\n\tf += (Noise(p).x-.5)*.2;\n\tp *= 2.0;\n\tp += vec2(-3,0)*iTime;\n\tf += (Noise(p).x-.5)*.05;\n\t\n\tf = f*(1.0-exp2(-abs(pos.x)));\n\treturn f*1.0;\n}\n\nfloat DistanceField( vec3 pos )\n{\n\treturn (RippleHeight(pos.xy)-pos.z)*.5;\n}\n\n// map a uv space onto a distorted surface\nvec2 UVMapping( vec2 target )\n{\n\t// need to march vertically to absorb vertical creases, and horizontally for horizontal ones\n\t// cheat, by seperating these two\n\tvec2 uv = vec2(0);\n\t\n\tconst int n = 16;\n\tconst float fudge = 1.0; // use values > 1 to allow for extra ripples we're not measuring\n\tvec2 d = target/float(n);\n\tvec2 l;\n\tl.x = RippleHeight( vec2(0,target.y) );\n\tl.y = RippleHeight( vec2(target.x,0) );\n\tfor ( int i=0; i < n; i++ )\n\t{\n\t\tvec2 s;\n\t\ts.x = RippleHeight( vec2(d.x*float(i),target.y) );\n\t\ts.y = RippleHeight( vec2(target.x,d.y*float(i)) );\n\t\t//uv.x += sign(d.x)*sqrt(pow(fudge*,2.0)+d.x*d.x);\n\t\t//uv.y += sign(d.y)*sqrt(pow(fudge*,2.0)+d.y*d.y);\n\t\tuv += sign(d)*sqrt(pow(fudge*(s-l),vec2(2.0))+d*d);\n\t\tl = s;\n\t}\n\t\n\treturn (uv+vec2(0,1))/vec2(3.0,2.0);\n}\n\nvec3 Pattern( vec2 uv )\n{\n\tif ( view_Index == 0 )\n\t{\n\t\t// nyan cat\n\t\tfloat frame = 0.0;//floor(iTime*8.0)\n\t\tvec4 t = texture( iChannel1, uv*vec2(1.0/6.4,-1)+vec2(fract(frame/6.0)*.938,1) );\n\t\tfloat f = uv.y*5.5+1.9; //*tau\n\t\treturn mix( vec3(cos(f),-sin(f),-cos(f))*.5+.5, ToLinear(t.rgb), t.a );\n\t}\n\t\n\tif ( view_Index == 1 )\n\t{\n\t\t// gay pride (roughly)\n\t\tuv.y = floor(uv.y*6.0)/6.0+.3;\n\t\treturn vec3(cos(uv.y*tau),-sin(uv.y*tau),-cos(uv.y*tau))*.5+.5;\n\t}\n\n\tif ( view_Index == 2 )\n\t{\n\t\t// Sweden (because it's easy)\n\t\treturn mix( vec3(1,.6,0), vec3(.02,.1,.5), smoothstep(.095,.1,min(abs(uv.x-.4),abs(uv.y-.5))) );\n\t}\n\t\n//\tif ( view_Index == 3 )\n\t{\n\t\t// union jack\n\t\tvec3 b = vec3(0,0,.5);\n\t\tvec3 w = vec3(1);\n\t\tvec3 r = vec3(.8,0,0);\n\t\tvec3 col = b;\n\t\t\n\t\tuv = uv*2.0-1.0;\n\t\tcol = mix( w, col, smoothstep( .245,.255, min(abs(uv.y-uv.x-.05),abs(uv.y+uv.x-.05)) ) );\n\t\tcol = mix( r, col, smoothstep( .095,.105, min(abs(uv.y-uv.x),abs(uv.y+uv.x)) ) );\n\t\n\t\tfloat q = min(abs(uv.x*1.5),abs(uv.y));\n\t\tcol = mix( w, col, smoothstep( .245,.255, q ) );\n\t\tcol = mix( r, col, smoothstep( .145,.155, q ) );\n\t\t\n\t\treturn col;\n\t}\n}\n\n// xyz = normal, w = transmission from far side\nvec4 Weave( vec2 uv )\n{\n\tvec2 a = uv*vec2(3.0,2.0)*view_Resolution.y*.85;\n\tfloat h = (sin(a.x)+sin(a.y))*.25+.5;\n\t\n\th = h*.1; // transparency within the flag\n\t\n\t// edges\n\th = max(h,smoothstep(.495,.5,abs(uv.x-.5)));\n\th = max(h,smoothstep(.495,.5,abs(uv.y-.5)));\n\t\n\treturn vec4(0,0,0,h);\n}\n\n\nvec2 rotateUV(vec2 uv, float angle) {\n    angle = angle*tau;\n    mat2 matrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    return matrix * uv;\n}\n\n\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat noise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n/* SMOOTH MOD\n* - authored by @charstiles -\n* based on https://math.stackexchange.com/questions/2491494/does-there-exist-a-smooth-approximation-of-x-bmod-y\n* (axis) input axis to modify\n* (amp) amplitude of each edge/tip\n* (rad) radius of each edge/tip\n* returns => smooth edges\n*/\n\nfloat smoothMod(float axis, float amp, float rad){\n    float top = cos(PI * (axis / amp)) * sin(PI * (axis / amp));\n    float bottom = pow(sin(PI * (axis / amp)), 2.0) + pow(rad, 2.0);\n    float at = atan(top / bottom);\n    return amp * (1.0 / 2.0) - (1.0 / PI) * at;\n}\n\nfloat fit(float unscaled, float originalMin, float originalMax, float minAllowed, float maxAllowed) {\n  return (maxAllowed - minAllowed) * (unscaled - originalMin) / (originalMax - originalMin) + minAllowed;\n}\n\nfloat wave(vec3 position) {\n  return fit(smoothMod(position.y * 6.0, 1.0, 1.5), 0.35, 0.6, 0.0, 1.0);\n}\n\n\n// \"Fireworks\" by Martijn Steinrucken aka BigWings - 2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Email:countfrolic@gmail.com Twitter:@The_ArtOfCode\n\n#define PI 3.141592653589793238\n#define TWOPI 6.283185307179586\n#define S(x,y,z) smoothstep(x,y,z)\n#define B(x,y,z,w) S(x-z, x+z, w)*S(y+z, y-z, w)\n#define saturate(x) clamp(x,0.,1.)\n\n#define NUM_EXPLOSIONS 7.\n#define NUM_PARTICLES 40.\n\n\n// Noise functions by Dave Hoskins \n#define MOD3 vec3(.1031,.11369,.13787)\nvec3 hash31(float p) {\n   vec3 p3 = fract(vec3(p) * MOD3);\n   p3 += dot(p3, p3.yzx + 19.19);\n   return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat hash12(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat circ(vec2 uv, vec2 pos, float size) {\n\tuv -= pos;\n    \n    size *= size;\n    return S(size*1.1, size, dot(uv, uv));\n}\n\nfloat light(vec2 uv, vec2 pos, float size) {\n\tuv -= pos;\n    \n    size *= size;\n    return size/dot(uv, uv);\n}\n\nvec3 explosion(vec2 uv, vec2 p, float seed, float t) {\n\t\n    vec3 col = vec3(0.);\n    \n    vec3 en = hash31(seed);\n    vec3 baseCol = en;\n    for(float i=0.; i<NUM_PARTICLES; i++) {\n    \tvec3 n = hash31(i)-.5;\n       \n\t\tvec2 startP = p-vec2(0., t*t*.1);        \n        vec2 endP = startP+normalize(n.xy)*n.z;\n        \n        \n        float pt = 1.-pow(t-1., 2.);\n        vec2 pos = mix(p, endP, pt);    \n        float size = mix(.01, .005, S(0., .1, pt));\n        size *= S(1., .1, pt);\n        \n        float sparkle = (sin((pt+n.z)*100.)*.5+.5);\n        sparkle = pow(sparkle, pow(en.x, 6.)*50.)*mix(0.01, .01, en.y*n.y);\n      \n    \t//size += sparkle*B(.6, 1., .1, t);\n        size += sparkle*B(en.x, en.y, en.z, t);\n        \n        col += baseCol*light(uv, pos, size);\n    }\n    \n    return col;\n}\n\nvec3 Rainbow(vec3 c) {\n\t\n    float t=iTime;\n    \n    float avg = (c.r+c.g+c.b)/3.;\n    c = avg + (c-avg)*sin(vec3(0., .333, .666)+t);\n    \n    c += sin(vec3(.4, .3, .3)*t + vec3(1.1244,3.43215,6.435))*vec3(.4, .1, .5);\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// since Chrome 36 the extra logic for the SideMenu won't compile on some PCs (my work PC is ok, my home one is not)\n\tview_Resolution = iResolution.xy;\n\tview_FragCoord = fragCoord.xy;\n\tview_Index = 1;\n\tview_selectionRelativeMouse = iMouse/view_Resolution.xyxy;\n\n\t\n\t\tvec3 pos, ray;\n\t\tCamPolar( pos, ray, vec3(1.5,0,0), vec2(-.8,-.5)+vec2(.9,1.5)*view_selectionRelativeMouse.yx, 10.0, 3.5 );\n\t\t\n\t\tfloat t = 0.0;\n\t\tfloat h = 1.0;\n\t\tfor ( int i=0; i < 20; i++ )\n\t\t{\n\t\t\tif ( h < .01 )\n\t\t\t\tbreak;\n\t\t\tfloat h = DistanceField( pos+t*ray );\n\t\t\tt += h;\n\t\t}\n\t\t\n\t\tpos += t*ray;\n\n        vec2 uv = UVMapping( pos.xy );\n\t\t//vec2 uv2 = uv; //rotateUV(uv-.5, iTime*.2);\n        //uv2 += .5;\n        \n         // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv2 = fragCoord/iResolution.xy;\n    vec2 fixedUv = fragCoord/iResolution.xy;\n\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uvA = fragCoord / iChannelResolution[0].xy;\n    vec2 uvB = fragCoord / iChannelResolution[1].xy;\n    \n    // Create movment on the position on the x axis\n    uvA.y -= iTime * 0.1;\n    uvA.x -= sin(iTime) *  0.01;\n    uv2.x -= -iTime * 0.05;\n\n\n    // Create noisey lines using perlin noise and mesh position\n    vec3 noisyLines = vec3(fit(smoothMod(noise(vec3(uv.xyx) ) * 4. + sin(iTime), 1.0,1.5),0.4,0.6, 0.,1.)); \n\n    // Define the texture\n    vec4 textureColor = texture(iChannel2, uvA) + texture(iChannel2, uvB);\n    \n    // Mix the noise into the texture\n    \n    // Adjust colors using animated colors\n    vec3 color = vec3(\n        0.5 + 0.5 * sin(fixedUv.y + iTime),\n        0.5 + 0.5 * sin(fixedUv.x + iTime * 1.2),\n        0.5 + 0.5 * sin(fixedUv.y + iTime * 1.4)\n    );\n    \n    // Apply color only to bright areas using smoothstep for transition\n    float blendStart = 0.7;\n    float blendEnd = 0.9; \n    float blendFactor = smoothstep(blendStart, blendEnd, textureColor.r) *\n                        smoothstep(blendStart, blendEnd, textureColor.g) *\n                        smoothstep(blendStart, blendEnd, textureColor.b);\n    vec3 coloredTexture = color; //textureColor.rgb + color * blendFactor;\n    \n    \n    // Burn effect: Create sharp transitions to black and white\n    float threshold = 0.1; \n   // textureColor.rgb = mix(vec3(0.0), vec3(1.0), smoothstep(threshold, 1.0, textureColor.rgb));\n\n\n    // Output to screen\n   // fragColor = vec4(textureColor);\n   // textureColor.rgb*=textureColor.rgb;\n    \n    vec2 uv3 = fragCoord.xy / iResolution.xy;\n\tuv3.x -= .5;\n    uv3.x *= iResolution.x/iResolution.y;\n    \n    float n = hash12(uv3+0.);\n    float tt = iTime*.5;\n    \n    vec4 c = vec4(0,0,0,1);\n    \n    for(float i=0.; i<NUM_EXPLOSIONS; i++) {\n    \tfloat et = tt+i*1234.45235;\n        float id = floor(et);\n        et -= id;\n        \n        vec2 p = hash31(id).xy;\n        p.x -= .5;\n        p.x *= 1.6;\n        c.rgb += explosion(uv3, p, id, et);\n    }\n      c.rgb += pow(Rainbow(c.rgb),vec3(3.));\n    vec4 col = texture(iChannel1, vec2(uv.x*.126,uv.y*.18+0.025) );\n    col.rgb *= 2.;\n   \n       col *=  col;\n   \n    vec4 weave = pow(Weave(uv),vec4(5.));\n\n    vec3 normal = Normal( pos );\n\n    float nl = dot(normal,normalize(vec3(-3,1,-2)));\n    float l = max( nl, .0 );\n    float bl = (max( -nl, .0 ));\n    col.rgb *= l + bl; //(l + bl);\n\n     col.rgb = mix( col.rgb, c.rgb*(Noise(ray.xy*4.0).x*.3+1.0), weave.a );\n\n   col.rgb = mix( col.rgb, vec3(cos(uv.x*50.0)),smoothstep(0.015,0.01,abs(uv.x+.01))*smoothstep(1.01,1.0,uv.y));\n\n    fragColor = col + weave.a * c;\n\t\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "const vec2 bitmap_size = vec2(128, 128);\nconst int[] palette = int[] (\n0x00170f0f,\n0x00170f10,\n0x00180f10,\n0x001a1211,\n0x001f1815,\n0x00171010,\n0x0018100f,\n0x00201916,\n0x00241d1a,\n0x00201717,\n0x0027201c,\n0x0029221e,\n0x002d2521,\n0x002f2823,\n0x00302723,\n0x00332b25,\n0x00352e29,\n0x00382e27,\n0x00392f28,\n0x003c332b,\n0x00373029,\n0x003d3631,\n0x003d3835,\n0x0040362e,\n0x0042382f,\n0x0044352a,\n0x00413730,\n0x00443b33,\n0x00453e3a,\n0x00493e34,\n0x00493f38,\n0x00503f34,\n0x00793707,\n0x00743611,\n0x004c4236,\n0x004d433a,\n0x0046413c,\n0x00514235,\n0x0051463a,\n0x00554a3c,\n0x00594d3d,\n0x00514837,\n0x005b503f,\n0x007c441b,\n0x0070492f,\n0x004c4643,\n0x00554b42,\n0x005a4e42,\n0x00544c48,\n0x005d5242,\n0x005d534b,\n0x005d5653,\n0x00625544,\n0x0062564b,\n0x00655946,\n0x00655a4a,\n0x00685b47,\n0x006a5d4b,\n0x00655b52,\n0x006a5e51,\n0x00635953,\n0x00715848,\n0x006d614d,\n0x006e6351,\n0x006c635b,\n0x0067615b,\n0x0071644e,\n0x007b634d,\n0x00736651,\n0x00766952,\n0x00756c59,\n0x00796d55,\n0x007a6e59,\n0x00776558,\n0x007d7156,\n0x007e725a,\n0x00756b64,\n0x00776e67,\n0x007d7462,\n0x007b736c,\n0x007b7569,\n0x007d7670,\n0x006e6863,\n0x00281e9c,\n0x002a1dab,\n0x00271ca8,\n0x00251bbc,\n0x00271cb5,\n0x00312698,\n0x002c24a7,\n0x002b24b8,\n0x00332ab6,\n0x003a36b9,\n0x00342bab,\n0x001a0da5,\n0x002417cb,\n0x002419c3,\n0x00251acb,\n0x00291ecc,\n0x00271ac4,\n0x00271ad1,\n0x002b23c9,\n0x00322bca,\n0x00322bd1,\n0x003937c8,\n0x003430d0,\n0x001e1acb,\n0x003e43cb,\n0x00413ab6,\n0x004845b7,\n0x005650b6,\n0x00786daf,\n0x006859a6,\n0x00464ac8,\n0x004d53c9,\n0x005558c7,\n0x005050cf,\n0x005d62cd,\n0x006467c8,\n0x006f73cd,\n0x003e40c0,\n0x007c84cf,\n0x00853d05,\n0x008d4403,\n0x00894508,\n0x00894916,\n0x00944502,\n0x00944a04,\n0x009b4c02,\n0x00964907,\n0x009d5203,\n0x009b540b,\n0x00995617,\n0x00914e19,\n0x00975b27,\n0x008d5329,\n0x00996237,\n0x00a25302,\n0x00a65c05,\n0x00a45d18,\n0x00a04f02,\n0x00a86418,\n0x00ad640e,\n0x00a96728,\n0x00a96c36,\n0x00b57738,\n0x00af6e2e,\n0x0088644b,\n0x0081755c,\n0x0084775e,\n0x00997354,\n0x00936c4e,\n0x00817663,\n0x00847963,\n0x00867c6a,\n0x00897e6b,\n0x00887967,\n0x00837b74,\n0x00867e79,\n0x00887d72,\n0x00927b66,\n0x00a97648,\n0x00a67a55,\n0x00b77b47,\n0x00b37d53,\n0x00845f45,\n0x008d7aa5,\n0x00807fc4,\n0x008b816e,\n0x008e8371,\n0x0089827c,\n0x00918673,\n0x00948975,\n0x009a8b77,\n0x0095846e,\n0x00ab825b,\n0x00b8865a,\n0x00bb874f,\n0x00b88c64,\n0x00ba9469,\n0x00b89775,\n0x00a98b6d,\n0x00c48f5a,\n0x00c69969,\n0x00c79c74,\n0x00c08e6b,\n0x00cba26c,\n0x00cca678,\n0x00d3ad7c,\n0x00d3a975,\n0x00dab27a,\n0x00d4a86d,\n0x00e2b87a,\n0x00948e89,\n0x009b9693,\n0x00938c8b,\n0x00ac9a92,\n0x00b1a298,\n0x00aba8a6,\n0x00b5b5b4,\n0x00bbb9b8,\n0x00b3b0ac,\n0x009a89a9,\n0x008c92d6,\n0x00a6a8db,\n0x00bbbad4,\n0x00b2b7e3,\n0x009c9ed1,\n0x00bec1d7,\n0x00bdc1e4,\n0x00d3ac84,\n0x00d8b386,\n0x00ccae92,\n0x00cdbdab,\n0x00e0b98b,\n0x00d7c6b3,\n0x00dfc6a1,\n0x00c4c4c4,\n0x00cccdcd,\n0x00c8c7c8,\n0x00c9c8d5,\n0x00d8d8d8,\n0x00d5d1cc,\n0x00dbd9e6,\n0x00cacde7,\n0x00e1ddd7,\n0x00e5e2de,\n0x00e5e4e3,\n0x00e9e6e5,\n0x00ebeae5,\n0x00edeceb,\n0x00e6e6ea,\n0x00f1eeed,\n0x00f2f2ee,\n0x00f4f4f3,\n0x00fefefe,\n0x00f9f7f6,\n0x00eeeff0,\n0x00000000,\n0x00000000,\n0x00000000,\n0x00000000,\n0x00000000,\n0x00000000,\n0x00000000,\n0x00000000,\n0x00000000,\n0x00000000,\n0x00000000,\n0x00000000,\n0x00000000,\n0x00000000,\n0x00000000,\n0x00000000,\n0x00000000,\n0x00000000\n);\nconst int longs_per_line = 32;\nconst int[] bitmap = int[] (\n0x04040000, 0x00000000, 0x06040000, 0x00010400, 0x0d0e0d04, 0x04040d0d, 0x0d0d0404, 0x04010408, 0x06010404, 0x00040400, 0x0d0d0400, 0x0d0d0d0d, 0x04080b0d, 0x0d040001, 0x04080800, 0x0d08080d, 0x01080d0d, 0x01010104, 0x00060001, 0x0d080004, 0x0d0e0d0d, 0x0d0e0d0d, 0x0b0d0e0d, 0x00080e0d, 0x01060404, 0x04040000, 0x04040404, 0x04000000, 0x06060000, 0x06060101, 0x00000101, 0x08010004,\n0x04060400, 0x00000000, 0x00010000, 0x06010600, 0x0f0d0800, 0x04040b0d, 0x040d0804, 0x06010100, 0x01060404, 0x080b0400, 0x0e0d0404, 0x0d0d0d0d, 0x00040b0e, 0x0d040000, 0x080d0804, 0x0d080808, 0x06080d0d, 0x01060104, 0x01000101, 0x0d080004, 0x0d0d0e0d, 0x0d0d0d0d, 0x0b0d0d0e, 0x04060408, 0x01040004, 0x04060600, 0x06040406, 0x04000000, 0x01040000, 0x01000006, 0x00000106, 0x08060004,\n0x04040000, 0x00000100, 0x01060600, 0x01000400, 0x08040000, 0x04040108, 0x00040400, 0x06010101, 0x00000404, 0x0f0b0000, 0x0e0d080d, 0x0d0b0d0d, 0x040b0d0d, 0x0e0d0804, 0x04080408, 0x0d0b0404, 0x04080a0d, 0x01010601, 0x01000101, 0x0d0d0800, 0x0d0d0d0e, 0x0e0e0d0d, 0x0b0e0d0d, 0x00000004, 0x01010400, 0x04040000, 0x06060101, 0x04040000, 0x00000000, 0x00000406, 0x00000606, 0x0d040404,\n0x04040000, 0x00000606, 0x00000006, 0x00000404, 0x00010601, 0x04040601, 0x06010000, 0x04040101, 0x00000404, 0x0d040000, 0x0b0b0b0f, 0x0e0d0b0b, 0x0d0d0d0d, 0x0e0e0f0d, 0x0408070b, 0x0d0b0804, 0x0408080f, 0x01010601, 0x00010406, 0x0d0d0d04, 0x0d0d0d0d, 0x0d0e0d0d, 0x0d0e0d0d, 0x07040a0b, 0x0100080d, 0x04000000, 0x01010101, 0x00000000, 0x04010000, 0x00000404, 0x00000604, 0x08040406,\n0x06010100, 0x04040404, 0x00060001, 0x00040404, 0x04060101, 0x00000101, 0x00000000, 0x04060101, 0x01010606, 0x0d000401, 0x0d0b0b0d, 0x0d0d0e0d, 0x0e0d0d0d, 0x0d0e0d0d, 0x0d0d0d0d, 0x0d0b0d0d, 0x0404080f, 0x04040400, 0x00000004, 0x0d0d0d08, 0x0d0d0d0d, 0x0d0e0e0d, 0x0d0d0d0d, 0x0d0d0d0d, 0x00040d0c, 0x06040100, 0x01010100, 0x04000101, 0x01060000, 0x00040404, 0x00060404, 0x04040001,\n0x06040100, 0x04040606, 0x06040406, 0x00010401, 0x01010106, 0x06010101, 0x01010000, 0x04060100, 0x01010100, 0x04010101, 0x0d0d0d0d, 0x0d0e0e0d, 0x0e0d0d0d, 0x0d0d0d0d, 0x0e0e0d0d, 0x0e0e0e0e, 0x080a0d0e, 0x04040404, 0x08040404, 0x0d0d0d0e, 0x0e0e0d0d, 0x0d0d0d0d, 0x0d0d0e0e, 0x0d0d0d0d, 0x06080f0d, 0x08080400, 0x01010004, 0x04060000, 0x00000404, 0x00060404, 0x00000404, 0x00040106,\n0x04000006, 0x00000101, 0x04040000, 0x01060404, 0x04040001, 0x01010000, 0x06060404, 0x00000000, 0x00000106, 0x04000601, 0x0d0d0d0d, 0x0d0e0d0d, 0x0e0d0d0d, 0x0e0e0d0d, 0x0f0f0e0e, 0x0f0f0f0f, 0x080f0f0f, 0x04040402, 0x0f0f0801, 0x0e0d0e0f, 0x0d04040d, 0x0d0d0e0e, 0x0e0e0d0d, 0x0d0d0d0d, 0x01040d0d, 0x0d0d0400, 0x0001080d, 0x01010000, 0x00000000, 0x00010404, 0x00000000, 0x06040601,\n0x04040404, 0x00000004, 0x01000000, 0x00060104, 0x04040606, 0x04010101, 0x04040404, 0x00000000, 0x01000106, 0x00040101, 0x0d0b0b08, 0x0e0e0d0d, 0x0e0e0d0d, 0x0f0f0e0e, 0x0f0f0f0f, 0x110f0e0f, 0x0d110f0f, 0x04040404, 0x0e0f0806, 0x0d0e0f0f, 0x0400040d, 0x0d0d0d09, 0x0e0e0d0d, 0x0d0d0d0b, 0x0101080c, 0x0d0a0400, 0x00040d0d, 0x00000000, 0x04040000, 0x00060404, 0x00000000, 0x01000101,\n0x04040404, 0x04040404, 0x04040404, 0x00000404, 0x00010000, 0x04060000, 0x01060101, 0x01040406, 0x01000404, 0x04040601, 0x0b0d0804, 0x0e0e0d0d, 0x0e0f0f0d, 0x0f0f0f0f, 0x0f0f0f0f, 0x110c0d0f, 0x0d110f11, 0x04040404, 0x0f110a04, 0x0c0e0f0f, 0x0404040d, 0x04040400, 0x0d0d0b08, 0x0a0b0b08, 0x00000408, 0x08080404, 0x00040d0b, 0x00000006, 0x00000000, 0x06060400, 0x04040404, 0x04040404,\n0x04040407, 0x04040404, 0x04040404, 0x04040404, 0x04040404, 0x04040404, 0x00040104, 0x00060104, 0x00000100, 0x01010000, 0x0c0c0804, 0x0f0d0d0d, 0x0f0f0f0f, 0x110f110f, 0x110f0f11, 0x0f0f1111, 0x0a110f11, 0x04040404, 0x11110804, 0x0c0f1111, 0x04040408, 0x04040404, 0x0b0b0806, 0x000b0e0d, 0x04040d00, 0x080d0801, 0x0400080d, 0x04040404, 0x04040004, 0x04040404, 0x04040404, 0x04040404,\n0x04040813, 0x04040704, 0x04040404, 0x04040404, 0x04040404, 0x04040404, 0x04040404, 0x04040404, 0x04040404, 0x04040404, 0x0f0f0f08, 0x0f0c0f0f, 0x0f0f0f0f, 0x11111111, 0x11110f11, 0x0f111111, 0x08110f0f, 0x04040404, 0x0f080404, 0x080f0f11, 0x04040404, 0x04040404, 0x080d0d04, 0x06040d0d, 0x0f0f0d08, 0x0d0b070b, 0x0404040d, 0x08080404, 0x08040404, 0x04040407, 0x04040404, 0x04040404,\n0x0e080d1b, 0x0808080e, 0x04040407, 0x04040404, 0x04040404, 0x04040404, 0x04040707, 0x04040404, 0x04040404, 0x07040404, 0x13131108, 0x13131313, 0x13131313, 0x13131313, 0x13151313, 0x13131313, 0x0d131515, 0x08080808, 0x08080808, 0x08120f0a, 0x08080809, 0x07070708, 0x04070d08, 0x0704070b, 0x1313130f, 0x0b080e17, 0x04040408, 0x0d0e0407, 0x0e080404, 0x04040408, 0x04040404, 0x08080707,\n0x1307131d, 0x0a0b0b18, 0x08080a0a, 0x08080a08, 0x07070708, 0x04070707, 0x04040404, 0x04040404, 0x04040404, 0x0b0b0808, 0x1b130808, 0x1717131a, 0x1b1b1b1a, 0x1b1b1b1b, 0x1b1a1b1b, 0x1b1b1b1b, 0x0d1b1b1b, 0x0b0b0a0a, 0x0d0a0808, 0x080a080a, 0x08080808, 0x08080808, 0x07080808, 0x0e040704, 0x130f0d13, 0x08080b13, 0x04040404, 0x080f0404, 0x0c110704, 0x08080808, 0x08080808, 0x0a0a0b0a,\n0x1b131b1d, 0x0b081322, 0x08080808, 0x0a0a0a0a, 0x0b0b0b0a, 0x080a0a0a, 0x07080808, 0x07070707, 0x0b040407, 0x0f131312, 0x0f070808, 0x1a1a1312, 0x1a1b1b1b, 0x1b1b1b1b, 0x1a1b1b1b, 0x1b1b1a1b, 0x0b131b1b, 0x0a0b0d0a, 0x0d0d0d0b, 0x0a0a0a0d, 0x08080808, 0x08080808, 0x07080808, 0x0d040404, 0x130f0d13, 0x0b040f13, 0x04080707, 0x0d130f08, 0x0b13130b, 0x080a0b0b, 0x08080808, 0x0a0a0a0a,\n0x22292927, 0x080a1b22, 0x08080807, 0x0a0a0a0a, 0x0a0a0a0a, 0x0a0a0a0a, 0x0a0a0a0a, 0x0b0a0b0b, 0x0f0a0b0b, 0x1d1b1b1d, 0x080a0b17, 0x1b130d08, 0x1b1b1b1b, 0x1b1b1b1b, 0x131b1b1b, 0x1b1b1b1a, 0x0a111b1b, 0x0b0d0d0d, 0x0d0d0d0d, 0x0b0d0d0d, 0x0b0b0b0b, 0x0a0a0b0b, 0x0a0a080a, 0x0e08080a, 0x1d1b1b13, 0x0b081322, 0x0d0a0d0f, 0x0b0f1713, 0x0b0f1713, 0x0d0b0a08, 0x0a0a080b, 0x0a0a080a,\n0x27282828, 0x0d0d1b27, 0x0b0b0d0b, 0x080a0a0b, 0x080a0808, 0x0a0a080a, 0x0a0a0a0a, 0x0a0b0a0a, 0x130b0b0b, 0x22222222, 0x0d0d0f29, 0x230f0b0d, 0x29292729, 0x23292929, 0x23232323, 0x29292923, 0x0f133029, 0x11111111, 0x0f0f0f0f, 0x0f0f0f0f, 0x0f0f0f0f, 0x0f0f0f0f, 0x0d0d0d0e, 0x0a0b0d0d, 0x23221b0d, 0x08081222, 0x130d110d, 0x0f0b131b, 0x0b0b111b, 0x1b130f0f, 0x0b0a080e, 0x0f0f0d0d,\n0x28282828, 0x0f0d1327, 0x0f0f0f0f, 0x0f0f0f0f, 0x0b0d0d0d, 0x0a0a0b0b, 0x080a0a0a, 0x0b0a0808, 0x22120a0b, 0x2222221b, 0x0c0d1329, 0x1b0f130f, 0x23292927, 0x29292729, 0x29232323, 0x30303027, 0x1111232f, 0x11111111, 0x11111111, 0x0f111111, 0x0f0f0f0f, 0x0f0f0f0f, 0x0d0c0f0e, 0x0a0d0f11, 0x2322220f, 0x0b0b1222, 0x170f0e08, 0x170d121b, 0x1d12121b, 0x29292929, 0x11111222, 0x0f0f0f0f,\n0x28282828, 0x0f0f0d29, 0x0f0f0f0f, 0x0f0f0f0f, 0x0f0f0f0f, 0x0f0f0f0f, 0x0b0d0d0d, 0x0d0b0d0b, 0x221b0d0d, 0x22222222, 0x0d1b2323, 0x2323290f, 0x29292923, 0x29272929, 0x30272723, 0x30302f30, 0x11111b30, 0x11111111, 0x11111111, 0x110f1111, 0x0f0f0f11, 0x0c0c0c0c, 0x0f0d0d0c, 0x0b0d0b11, 0x17130f0b, 0x0c0f0e1b, 0x2213130b, 0x27131729, 0x28272929, 0x27272728, 0x17232927, 0x0f0f0f0f,\n0x27282828, 0x0f1b1329, 0x0f0f0f0f, 0x0f0f0d0d, 0x0f0d0f0f, 0x0f0f0c0f, 0x0f0f0f0f, 0x0f0f0f0f, 0x1d27180f, 0x29232929, 0x11272723, 0x271d1b13, 0x30302929, 0x29292930, 0x302f2f30, 0x29293030, 0x110f1529, 0x11111111, 0x11111111, 0x11111112, 0x0f111111, 0x0f0f0f0f, 0x0f0c0f0f, 0x0f0f0f0f, 0x13130f0f, 0x1b1b1d17, 0x2f221d13, 0x28271b27, 0x29292727, 0x29292929, 0x0f292729, 0x0f0f0f0f,\n0x29272828, 0x0f1d2829, 0x0f0f0f0f, 0x0b0f0f0f, 0x29180f0d, 0x0f0f0d13, 0x0f0f0f0f, 0x0f0f0f0f, 0x131b220f, 0x2f282828, 0x1b2f3128, 0x342f1817, 0x34343131, 0x312f3431, 0x31313131, 0x2f313131, 0x13132731, 0x13131313, 0x15151513, 0x1b1a1b15, 0x1313151b, 0x13131313, 0x13131313, 0x13131318, 0x1b131313, 0x131d1b1b, 0x271d1b13, 0x27282922, 0x29292927, 0x29292929, 0x13232929, 0x0f0f0f0f,\n0x29282828, 0x1b222827, 0x0f0f0f0f, 0x110e0d0d, 0x2728291b, 0x0f0f0f22, 0x110f0f0f, 0x130f1111, 0x1b0f1313, 0x2f282828, 0x13233128, 0x31342715, 0x34313131, 0x312f3134, 0x342f3131, 0x31313134, 0x1b233531, 0x15151b1b, 0x1b1b1b13, 0x151b1a15, 0x13131515, 0x13131313, 0x0f131113, 0x13181b0f, 0x0f0f130f, 0x0f13140f, 0x281d120e, 0x27272729, 0x29292927, 0x27272727, 0x0f292929, 0x0f0f0f0f,\n0x29272828, 0x1b282829, 0x0d0f0f0f, 0x2312130f, 0x2728282f, 0x0f0f0f23, 0x12110f0f, 0x1b0f1313, 0x37343135, 0x3128383f, 0x13233128, 0x3f39311b, 0x393f3f3e, 0x4444393b, 0x443f3f39, 0x39393b3f, 0x1b37443f, 0x15151b1b, 0x291b1b1b, 0x35353537, 0x35323532, 0x37373939, 0x311a2735, 0x37393535, 0x1b241327, 0x130f0f0f, 0x28221312, 0x27282728, 0x28272929, 0x28282827, 0x13222728, 0x0f0f0f0f,\n0x29282828, 0x17272729, 0x0f0d0f0f, 0x12131b11, 0x27292729, 0x0f0f0d22, 0x11120f0f, 0x22131311, 0x1f292929, 0x31344428, 0x13233131, 0x1d29271b, 0x1d1d291d, 0x291d1d1d, 0x1f1f1f1d, 0x1d1d292f, 0x32391d22, 0x1b1b1b1b, 0x291b1b1b, 0x22292929, 0x29292222, 0x29292929, 0x29343929, 0x281d2929, 0xaac23039, 0x27221713, 0x27282727, 0x27272828, 0x28272929, 0x29272727, 0x13222727, 0x0f0f0f0f,\n0x27282828, 0x23272929, 0x0f0d0d11, 0x1b0f0f0f, 0x29272827, 0x0f0f0d1d, 0x12121212, 0x32121312, 0xaa9d9daa, 0x383e2f32, 0x13132731, 0xaa9d1b13, 0xaa9e9e9e, 0x9e9e9eaa, 0xaa9e9e9e, 0x9daa4f2d, 0x37294f9e, 0x1515151c, 0x351b1b1b, 0x9e9e9daa, 0x9e9e9e9e, 0x9e9e9e9e, 0x9d29234c, 0x3ac39e9e, 0xc3c23128, 0x2831281b, 0x27292728, 0x29272727, 0x28282729, 0x27272727, 0x1d272929, 0x0f0f0f0f,\n0x27272828, 0x27292929, 0x0f0d0b1b, 0x290f0f0f, 0x27282828, 0x0f0f0f22, 0x13131111, 0x320f1313, 0xdadadadd, 0x444729c1, 0x29272731, 0xddc61323, 0xdadadada, 0xdadadada, 0xdadadada, 0xdaddc252, 0x3735c8da, 0x29272737, 0x3b1b3029, 0xdadadadd, 0xdadadada, 0xdadddada, 0xc722c2c8, 0xc2dadadd, 0x27222727, 0x27282a27, 0x27272727, 0x29292929, 0x28282827, 0x28282727, 0x23292927, 0x0f0f0f0f,\n0x27272828, 0x27272828, 0x0f0f0f22, 0x130f0f0f, 0x131d2727, 0x0f0f0f0f, 0x0f0f0f0f, 0x17131314, 0xe5ebebdd, 0x343422c2, 0x31312f2f, 0xeb9e3439, 0xebebebeb, 0xebebebeb, 0xe3ebebeb, 0xebeb4f9d, 0x224cdaeb, 0x282f2f34, 0x2f3b342f, 0xebebebdd, 0xebebebeb, 0xebebebeb, 0xc14fd0e3, 0xc6eaebeb, 0x28173427, 0x28282828, 0x28272331, 0x27272727, 0x28272727, 0x27282828, 0x23292727, 0x0f0f0f12,\n0x28282828, 0x28272828, 0x0f0f0f22, 0x0f0f0f0f, 0x0d0d1313, 0x0f0f0f0f, 0x14111111, 0x0f131313, 0xeaebebc9, 0x353540c7, 0x35353535, 0xea3a1d29, 0xeaebebeb, 0xe5e5e5e5, 0xe3e5e5e5, 0xebe532c6, 0x32c1dfeb, 0x35353535, 0x1d29323a, 0xe5e4eac6, 0xe5e5e5e5, 0xebebeae5, 0x4fc6e7eb, 0xc8ebebeb, 0x271b3435, 0x27313134, 0x2827131d, 0x28282828, 0x28292728, 0x27282728, 0x29292727, 0x0f0f0f13,\n0x28282828, 0x1d272828, 0x0f0f1323, 0x0f0f0f0f, 0x0f0f0f0f, 0x130f0f0f, 0x13131b17, 0x0f131313, 0xebebebaa, 0xc7c7c7d9, 0xc7c7c7c7, 0xdd1d40c6, 0xc6eaebeb, 0x29292929, 0x30292929, 0xebdd2935, 0xc7c9e5eb, 0xc7c7c7c7, 0x30c1c9c7, 0x292f3129, 0x29292929, 0xebe13223, 0x4cd9ebeb, 0xdaebebe4, 0x1b232f4c, 0x131b1d23, 0x282f1b0f, 0x28282827, 0x27272828, 0x29272828, 0x29292827, 0x0f0f0f17,\n0x28282828, 0x0e1b2828, 0x0f0f0f13, 0x0f0f0f0b, 0x0f0f0e0f, 0x110f0f0f, 0x18221711, 0x12131313, 0xebebeb3a, 0xe5ededeb, 0xe5eae5e5, 0xc932c7d9, 0xc9eaebeb, 0x4c4c4c4f, 0x4c4d4c4c, 0xebc91d2f, 0xe5eaebeb, 0xede5e5e5, 0xc2c8ddea, 0x4d2f1d29, 0x4f4f4f4f, 0xebd94c4f, 0x4fddebeb, 0xddebebd9, 0x1330289e, 0x13131313, 0x282a1b13, 0x28282827, 0x27292728, 0x29292728, 0x1d272727, 0x0f0f0f13,\n0x27282828, 0x0f0f2928, 0x0f0f0f0f, 0x0f0f0f0d, 0x0f0f0d0e, 0x0f0f0f0f, 0x2223170f, 0x13131313, 0xebebe21d, 0xebebebeb, 0xebebebeb, 0xaac1ddeb, 0xdaebebeb, 0xd9d9dbd9, 0xd9d9d9d9, 0xebaa194f, 0xebebebeb, 0xebebebeb, 0xc8e5ebeb, 0xdac83540, 0xdadadada, 0xebe3dbda, 0xaae5ebeb, 0xe5ebebc2, 0x153129c2, 0x13131313, 0x28311b13, 0x28282827, 0x27292728, 0x27292929, 0x13272929, 0x0f0f0f0f,\n0x28272828, 0x0f0d1b28, 0x0d0f0f0f, 0x0d0e0f0b, 0x0f0f0d0b, 0x13120f0f, 0x232f1d13, 0x30271b18, 0xebebc81d, 0xc7c8e5eb, 0xebe2c9c7, 0x51c9eaeb, 0xebebebea, 0xebebebeb, 0xdfebebeb, 0xeb401daa, 0xddebebeb, 0xd5c7c7c9, 0xddebebec, 0xebebc2aa, 0xebebebeb, 0xebebebeb, 0x51ebebeb, 0xeaebeb4d, 0x1b352fc9, 0x13151313, 0x28312313, 0x27282828, 0x29272927, 0x29292929, 0x132f2729, 0x0f0f0f0f,\n0x27282828, 0x0f0f0f22, 0x0d0d0f0f, 0x0b0d0f0d, 0x110f0f0d, 0x13131313, 0x27271b13, 0x37342f1d, 0xebebc127, 0x1732d9eb, 0xeb40171d, 0x4fddebeb, 0xebebebdd, 0xe8e8e5ea, 0xe3e9e5e8, 0xe12929c6, 0xc2e5ebeb, 0x171d1d17, 0xeaebebc9, 0xebebc6c2, 0xe3eaebeb, 0xe5e5e5e5, 0x29c6e3e5, 0xebebea35, 0x23343bd9, 0x13151b1a, 0x28312f1b, 0x28282827, 0x29272727, 0x29272929, 0x132f2727, 0x0f0f0f0f,\n0x11292828, 0x0d0f0f0d, 0x0d0d0f0f, 0x0f0f0f0f, 0x130f0f0f, 0x13131313, 0x2f1b1313, 0x34343131, 0xebeb4c2f, 0x1751ddeb, 0xdd171d22, 0xaae3ebeb, 0xebebebc8, 0x29292fc8, 0x29292929, 0xc8171d29, 0xc7eaebeb, 0x17291d2f, 0xebebeb4f, 0xebebc2c7, 0x29c9eaeb, 0x29292322, 0x1d191d29, 0xebebdd22, 0x30284fdd, 0x1b1a1b13, 0x28282922, 0x27282827, 0x27272727, 0x27272727, 0x0f272827, 0x0f0f0f0f,\n0x1b272828, 0x13130f13, 0x0d0b0d0f, 0x0f0f0f0f, 0x130f0f12, 0x13131313, 0x271b1313, 0x34343434, 0xebe33234, 0x4fc2e3eb, 0xe34f4f4f, 0xc2eaebeb, 0xebebebc2, 0x4f4d9ec7, 0x4d4d4d4d, 0xc1229d4d, 0xd9ebebeb, 0x4c4f4dc3, 0xebebebc6, 0xebe59eda, 0xc1c7ebeb, 0x4f4f4f4f, 0x9d9d4f4f, 0xebebc91d, 0x3427c1e4, 0x221b231b, 0x28283123, 0x27272728, 0x28272727, 0x28282828, 0x0f222a28, 0x0f0f0f0f,\n0x28282828, 0x27282928, 0x0f0e0f1b, 0x0f0f0f0f, 0x130f0f0f, 0x13131313, 0x1b131713, 0x34343431, 0xebd92937, 0xd9d9eceb, 0xebddd9da, 0xc6ecebeb, 0xebebeb4d, 0xdbdacddd, 0xdbdbdbdb, 0x3b9ddbd9, 0xdfebebeb, 0xd9d9dbc8, 0xebebebe7, 0xebc84ce2, 0xd9e3ebeb, 0xdadadada, 0xd9dadada, 0xebeb9d3a, 0x3930c6ea, 0x27303131, 0x312a312f, 0x27272731, 0x28272727, 0x28282828, 0x0f132831, 0x0f0f0f0f,\n0x28272828, 0x27272728, 0x0f0b1327, 0x0f0f0f0f, 0x130f0f0f, 0x13131313, 0x1b1a1a1a, 0x34343831, 0xebc61d39, 0xebebebeb, 0xebebebeb, 0xc4ebebeb, 0xebebea30, 0xebebebeb, 0xebebebeb, 0x2fc1e7eb, 0xebebebea, 0xebebebeb, 0xebebebeb, 0xeb3a35e5, 0xebebebeb, 0xebebebeb, 0xddebebeb, 0xebeb404f, 0x3735c8eb, 0x34343439, 0x2f313131, 0x28272831, 0x28282828, 0x28282828, 0x0f0f2227, 0x0f0f0f0f,\n0x28282828, 0x27292728, 0x0f0d0f29, 0x11110f0f, 0x130f0f0f, 0x13131313, 0x1b1a1b1a, 0x37343123, 0xebda3037, 0xeaeaeaea, 0xeaeaeaea, 0x2fdbeaea, 0xeaeaec9d, 0xeaeaeaea, 0xeaeaeaea, 0xc3c7eaea, 0xeaeaeaeb, 0xeaeaeaea, 0xe4eaeaea, 0x4c0b1bc2, 0xeaeae9dd, 0xeaeaeaea, 0xe5eaeaea, 0xeaebc2c2, 0x284cddea, 0x3434343b, 0x2f313434, 0x28272731, 0x28282828, 0x27272828, 0x0f122928, 0x0f0f0f0f,\n0x28282828, 0x27292728, 0x0f0d0d1b, 0x0f0f0f0f, 0x13110f0f, 0x13131313, 0x1b1b1a1a, 0x35343422, 0x3a3b3137, 0x3537373a, 0x32323a3a, 0x0f172f32, 0x3232332f, 0x32323232, 0x32323232, 0x30323532, 0x32323235, 0x35353232, 0x23353535, 0x07040811, 0x302f3013, 0x2f2f2f30, 0x35322f31, 0x3a3a3232, 0x31313b35, 0x34343537, 0x31343434, 0x28282728, 0x27282828, 0x28272727, 0x0f0f1d27, 0x0f0f0f0f,\n0x28282728, 0x1d272727, 0x0f0b0d0f, 0x0f0f0f0f, 0x1313130f, 0x13131713, 0x271b1315, 0x35343531, 0x34313737, 0x35313134, 0x08070f34, 0x0b0a0808, 0x04040404, 0x0d070404, 0x0709080d, 0x08080808, 0x08080808, 0x1111110d, 0x0b110f11, 0x04040404, 0x08070404, 0x07080808, 0x230f0808, 0x312f1b1e, 0x37373431, 0x34353737, 0x31343434, 0x2828272a, 0x27282828, 0x28282727, 0x0f0f2327, 0x0f0f0f0f,\n0x28272929, 0x0d182728, 0x0f0e0f0e, 0x0f0f0f0f, 0x110f110f, 0x13131713, 0x34231b13, 0x37353535, 0x37373537, 0x3a373737, 0x080a1323, 0x070a0a0a, 0x04040404, 0x0d080404, 0x0d0d0d11, 0x11110c0d, 0x14111114, 0x13151516, 0x0d111113, 0x04040708, 0x04040404, 0x080a0a07, 0x11080808, 0x37372323, 0x37373937, 0x35373737, 0x34343434, 0x282f2831, 0x28282828, 0x27272727, 0x0f0f2927, 0x0f0f0f0f,\n0x27292729, 0x0f0f1327, 0x0f0e0d0f, 0x0f0f0f0f, 0x130f0f0f, 0x1a1a1a17, 0x37311b13, 0x37373737, 0x37353737, 0x22373735, 0x08131b18, 0x0804080a, 0x0704040d, 0x0d0d0808, 0x15151415, 0x2f2f2d1c, 0x2f343434, 0x2d303235, 0x111b1c2d, 0x07080808, 0x04040404, 0x08080704, 0x08080808, 0x3737300f, 0x37373737, 0x37373737, 0x34343434, 0x28282831, 0x27282727, 0x27272727, 0x0f0f2928, 0x0f0f0f0f,\n0x23131827, 0x0f0f0f13, 0x0f0d0d0f, 0x0f0f0f0f, 0x17110f0f, 0x1b1b1a17, 0x37311b1b, 0x37373737, 0x37373737, 0x17223737, 0x0d1b181b, 0x130b0407, 0x08080811, 0x24110808, 0x3d35302d, 0xa2a29693, 0xa2a2afaf, 0x939796a2, 0x2d30353e, 0x08080d11, 0x04040707, 0x08040404, 0x08080808, 0x373b1b07, 0x37373739, 0x37373737, 0x34343437, 0x2f283134, 0x27272831, 0x29272727, 0x0f0f2228, 0x0f0f0f0f,\n0x0f0f0f0f, 0x0f0f0f0f, 0x130f0f0f, 0x0f0f1313, 0x13130f0f, 0x1b1b1b1b, 0x37311b1b, 0x37373737, 0x37393737, 0x1b132337, 0x0f171318, 0x0e130f0b, 0x0d0d0808, 0x352d140d, 0xb2969693, 0xd2d2bcb8, 0xbcbcd2bc, 0xb3b8bcbc, 0x3e93a2af, 0x080d112d, 0x04070808, 0x04040404, 0x08080808, 0x37310f08, 0x37373737, 0x37373737, 0x34343537, 0x38383434, 0x272a3838, 0x27272727, 0x0f0f2228, 0x0f0f0f0f,\n0x0f0f0f0f, 0x0f0f0f0f, 0x13130f0f, 0x0f170f0f, 0x13131311, 0x1b1b1b1b, 0x37301b1b, 0x37373737, 0x3f3b3737, 0x1b1b1731, 0x0f181b18, 0x04070f11, 0x23150808, 0x9643302d, 0xbcd2bab2, 0x8690a3b6, 0x86878686, 0xbcb3a297, 0xa2b2bad3, 0x11152893, 0x0708080b, 0x04040404, 0x08080804, 0x37220f08, 0x37373b3b, 0x35373737, 0x34343437, 0x39393734, 0x34383738, 0x28282727, 0x0f0f2228, 0x0f0f0f0f,\n0x0f0f0f0f, 0x0f0f0f0f, 0x0f130f0f, 0x131b0f0f, 0x17171313, 0x1b1b1b1a, 0x37231b1b, 0x37373737, 0x373b3739, 0x1b1d1b1b, 0x0f0f131b, 0x08080407, 0x33301208, 0xbbb2a247, 0x838fb6bc, 0x7a7a7a7e, 0x7a7a7b7e, 0x2b212020, 0xbcbcb288, 0x233d97b2, 0x09080d14, 0x04040b08, 0x08080404, 0x231d1308, 0x3b373b3b, 0x31232331, 0x34353535, 0x39393934, 0x2a373939, 0x28282828, 0x0f0f2228, 0x0f0f0f0f,\n0x0f0f0f0f, 0x0f0f0f0f, 0x0f130f0f, 0x1d130f0f, 0x1a17131b, 0x1b1b1b1b, 0x311b1b1b, 0x37373739, 0x293b3937, 0x1b1d1b1b, 0x0e12111b, 0x08080807, 0x96402d0d, 0xb1bcbbb2, 0x7e7e7e8b, 0x7e7e7e7e, 0x7f7e7e7e, 0x7a7c7e7e, 0xaf7d2121, 0xa5a2b8bc, 0x080d1528, 0x0d0f110d, 0x0a080408, 0x181d0f08, 0x3b3b3b2f, 0x231b1b27, 0x37342330, 0x38373434, 0x28343738, 0x28282828, 0x0f0f2328, 0x0f0f0f0f,\n0x130f0f0f, 0x0f0f0f0f, 0x0f131313, 0x130f1113, 0x1a13131b, 0x1b1b1b1b, 0x231b1b1b, 0x37373737, 0x1b303737, 0x1d1d1b1d, 0x0e121213, 0x15110f0f, 0xb796351c, 0x7e8bb7d3, 0x7b7e7f80, 0x7e7b7b7b, 0x817e7e7e, 0x7b7f817e, 0x21217d7d, 0xafbcb393, 0x11152a93, 0x12130f11, 0x08040a0d, 0x1b130a0a, 0x30353722, 0x231b1b23, 0x37271b1b, 0x31343434, 0x31343131, 0x28282831, 0x0f0f2328, 0x0f0f0f0f,\n0x1a130f0f, 0x0f0f0f0f, 0x130f1313, 0x13141213, 0x1a1a131b, 0x1b1b1b1b, 0x1c1c1d1b, 0x37373727, 0x1b133237, 0x171d1b1d, 0x0f0f120f, 0x1c15110f, 0xbeb39635, 0x7f808091, 0x7c7c7b7b, 0x7e7b7b7b, 0x81818181, 0x7f807f81, 0x7d2b2b81, 0xd2a1217d, 0x304396b2, 0x1311141b, 0x0408080f, 0x0d0a0a0a, 0x2323120b, 0x1e1e231c, 0x311b1e23, 0x34343438, 0x38373434, 0x28283439, 0x0f0f1b31, 0x0f0f0f0f,\n0x0f130f0f, 0x0f0f0f0f, 0x130f1311, 0x13131b12, 0x1a1b131d, 0x1b1b1b1b, 0x1e1b1e1b, 0x37373523, 0x1d0f1b39, 0x0f171b1b, 0x0d13110f, 0x35160d08, 0x8fbcb796, 0x7b7f8380, 0x7c7c7c7c, 0x7f7e7e7e, 0x8080807e, 0x80808080, 0x807f7f80, 0x88202b7c, 0x43a2b8bc, 0x11111b2d, 0x04040d13, 0x080a0a07, 0x231b0808, 0x1e231c23, 0x1b1b1e23, 0x34343430, 0x38373434, 0x28283439, 0x0f0f172f, 0x0f0f0f0f,\n0x0f0f0f0f, 0x0f0f0f0f, 0x1b221b13, 0x221b1713, 0x1b1b1322, 0x1b1b1b1b, 0x1b1c1e1b, 0x3939321b, 0x1b131b37, 0x0f111a1b, 0x08130f12, 0x9632150d, 0x808dbcb7, 0x7c7b8183, 0x7a878820, 0x7e85887e, 0x807f8081, 0x80808080, 0x8383898c, 0x207c7c83, 0xa2b7d387, 0x11152d3d, 0x04040b13, 0x0a0a0804, 0x230f080a, 0x1e232323, 0x1b1e1e23, 0x3434311b, 0x38342831, 0x28283134, 0x0f0f1327, 0x0f0f0f0f,\n0x130f0f0f, 0x0f0f0f13, 0x1b130f0f, 0x1b131318, 0x1b1b131b, 0x1b1b1b1b, 0x1b1c231e, 0x3935271b, 0x1b1d1b31, 0x120f1b1d, 0x11131213, 0xb393301c, 0x83808fbc, 0x207c7b7f, 0x7c86857a, 0x8083857b, 0x83808080, 0x80808080, 0x86898989, 0x7c7f898b, 0xb3d38821, 0x13243596, 0x0404070f, 0x0a0a0704, 0x1b0a0a0a, 0x23232323, 0x1e1e2323, 0x3434231b, 0x31313134, 0x28282828, 0x0f0f1127, 0x0f0f0f0f,\n0x13111111, 0x13171b13, 0x130f110f, 0x13131313, 0x1b1b1b1b, 0x1e1b1b1b, 0x23232323, 0x37302323, 0x1b1d1b1b, 0x1313171d, 0x1c151713, 0xd3b39533, 0x838b8391, 0x7a207a7b, 0x7c7d887d, 0x7f7e7e7c, 0x80808080, 0x8989898c, 0x908f8389, 0x7f8a8e8a, 0xd3a1217d, 0x1c3297b0, 0x0707080f, 0x0b080407, 0x13080a0a, 0x2323232d, 0x1e232323, 0x31231b1b, 0x27283434, 0x2a282828, 0x12131322, 0x12111111,\n0x11131211, 0x13130f0f, 0x13131313, 0x18171313, 0x1b1b1b18, 0x1d1b1b1b, 0x2323231e, 0x30302323, 0x1d1d130a, 0x0f131318, 0x24110c0d, 0xb1d2a23b, 0x7f8b8f89, 0x7a207a7c, 0x7c7c7c7c, 0x807f817e, 0x83808080, 0x89898980, 0x8b848989, 0x8e8f8e8a, 0xb02b7d7f, 0x2d43a2bc, 0x07080d15, 0x0b070407, 0x0d0a0a0b, 0x23232323, 0x22232323, 0x1b1b1e1d, 0x1b1b2223, 0x31282a31, 0x12131322, 0x12131213,\n0x0f111218, 0x0f0f0f11, 0x13131313, 0x17181313, 0x1b1b1b1b, 0x231d1b1b, 0x23232323, 0x15292323, 0x1b22130a, 0x070f1217, 0x2d110808, 0x83bab794, 0x7b8b9090, 0x7c7c7c7c, 0x7b7b7c7c, 0x807f7f7e, 0x83808c80, 0x89898983, 0x8b838389, 0x918f8b8b, 0x2b7d838d, 0x3596b7bd, 0x08080d1c, 0x0b040404, 0x0a0b0b0b, 0x2323271b, 0x23232323, 0x1b1b1d22, 0x221b1b1b, 0x312a2a31, 0x13131323, 0x0f0f1313,\n0x12131327, 0x13131212, 0x13131313, 0x17171313, 0x1b1b1b1b, 0x2323231d, 0x23232323, 0x0f2d2323, 0x1b22130a, 0x040e1313, 0x35150d08, 0x8fa3d2af, 0x7b8390b1, 0x7a207c7b, 0x7d7a867d, 0x80808185, 0x80808080, 0x89898383, 0x8b8a8a89, 0x908f8d83, 0x207b8ba3, 0x43afd2a1, 0x08080d2d, 0x08040404, 0x0a0d0b0b, 0x23232713, 0x23232323, 0x1b1d2223, 0x22171b1b, 0x34312a31, 0x13131329, 0x1b131313,\n0x13131322, 0x13131313, 0x13131313, 0x18171313, 0x1d1b1b1b, 0x23232323, 0x23232323, 0x0d233023, 0x1b220f0b, 0x080d1111, 0x942d110d, 0xa48bb7b7, 0x818390b0, 0x7a877d7c, 0x7d7c7d87, 0x80808081, 0x89898c80, 0x8a8a8983, 0x8b8a8a8a, 0xa38f8b8b, 0x8584b1b6, 0x93b7ba7d, 0x08080d1c, 0x07040704, 0x0b0d0d0b, 0x2330270f, 0x23232323, 0x1d232323, 0x22171b1d, 0x34312831, 0x17131731, 0x13181b1b,\n0x13131318, 0x13131313, 0x13131313, 0x18181713, 0x231d1b1b, 0x23232322, 0x29232323, 0x0b153027, 0x13220d0d, 0x080b110f, 0xa232150d, 0xb98f91bc, 0x838b90b2, 0x87887d7b, 0x7e7b8588, 0x8c7f7c81, 0x8989898c, 0x8a8a8989, 0x8a8a8a8a, 0xa1928d8e, 0x8691b7b9, 0x96bca120, 0x080d152f, 0x08080808, 0x0d0d0d0d, 0x2930230d, 0x23232323, 0x1b1b2223, 0x271b1b1b, 0x31313134, 0x28272231, 0x1313131b,\n0x17131313, 0x13131313, 0x13131313, 0x1b181313, 0x231b1b22, 0x23232322, 0x27232323, 0x0b133030, 0x131d0f0d, 0x0b0e120f, 0xb5492d11, 0xbbb08dba, 0x848fa1b9, 0x84a2867f, 0x7b7f817c, 0x8c807b81, 0x89898380, 0x8b8a8a8a, 0x8e8a8a8a, 0xa38f8d8e, 0x86b6d2b8, 0xafbc7d7a, 0x080d1c3d, 0x08080808, 0x130f0f0e, 0x37352311, 0x373b3b35, 0x23293031, 0x34272323, 0x34313134, 0x34383438, 0x13131b27,\n0x17171713, 0x13131313, 0x13131313, 0x1b1b1818, 0x221b2227, 0x29232323, 0x30272729, 0x0d0f3030, 0x131d0f0d, 0x14131211, 0xbba0331c, 0xbbb88fb6, 0x8f8fb0bb, 0x7e868684, 0x7b7e7b7b, 0x7c83807b, 0x83838383, 0x8a8a8983, 0x8e8e8a8a, 0xb1918f8d, 0x91bdd2b8, 0xb4b3207f, 0x08112393, 0x08080808, 0x1b180f0b, 0x3f372213, 0x4744443f, 0x373e3f44, 0x31343438, 0x39383431, 0x38383939, 0x17132234,\n0x18181818, 0x18181718, 0x18131813, 0x1b1b1d1b, 0x1b1b2734, 0x27272323, 0x30272727, 0x0d0e2930, 0x131b130d, 0x13131313, 0xbeaf402d, 0xb6b8a191, 0xb4a1a2a2, 0xd5d5d4d4, 0xb4d4d5d7, 0x8890a1a1, 0x8d8f8f86, 0x8a8a8a8b, 0x8e8e8e8a, 0xb6a3918d, 0xb6b7bbb7, 0xbca1208b, 0x08112f96, 0x07070808, 0x1d222211, 0x3f392213, 0x3e393939, 0x3e3e3939, 0x34393e3e, 0x393e3938, 0x39393939, 0x13132239,\n0x1b181b1b, 0x1318181b, 0x1b1b2218, 0x1b1b1d22, 0x23293431, 0x27232929, 0x27302927, 0x0f0d2330, 0x131b180d, 0x13131313, 0xbcb24c2d, 0xb4a4a38f, 0xe5e4e1d5, 0xe5e5e5e5, 0xededede5, 0xd7e1e5e5, 0x9090a1b4, 0x9191b1a3, 0x918f9191, 0xb8b6a3a3, 0xb7d3d6b7, 0xd296208f, 0x0d1534a2, 0x0f080808, 0x29222213, 0x3f3f2729, 0x3939393e, 0x3e393739, 0x373e4239, 0x393e3939, 0x39393939, 0x181d3439,\n0x1b1b1b1b, 0x1b1d1b1b, 0x222a311d, 0x22222222, 0x27273431, 0x30292927, 0x30272730, 0x0f0c2331, 0x1318220f, 0x1a1b1713, 0xbdb34d30, 0xeddeb083, 0xe2e3e7e5, 0xe3e2e2e2, 0xe5e3e3e3, 0xedede5e4, 0xb4d7e4ea, 0xb6a391a1, 0xb7b7b7b7, 0xbbd6d3d2, 0xa1b6d3bc, 0xd3e4c590, 0x0c163daf, 0x130b080a, 0x29292213, 0x443f2922, 0x393e3e3f, 0x3e393739, 0x3e394242, 0x38393939, 0x39393831, 0x27343939,\n0x1b1b1b1b, 0x3134291b, 0x2738311d, 0x23222222, 0x27233138, 0x30303027, 0x2f2f2f30, 0x0f0f2331, 0x131b290f, 0x1c1b1b13, 0xb7b89833, 0xe5eaeab3, 0xe2e2e4e3, 0xe3e3e3e3, 0xe5e5e5e4, 0xe5e8e5e5, 0xecece8e5, 0xb3d4d7e5, 0xb6a3a3a4, 0xa4b6b1b1, 0xd5b5afa3, 0xd3e5ebe5, 0x112493b0, 0x130b0808, 0x221d1b17, 0x443f2929, 0x39393e3e, 0x3e3e393e, 0x44423e44, 0x31394244, 0x3e393428, 0x34343939,\n0x1d1d1b1b, 0x3838281d, 0x38312728, 0x23232229, 0x27273134, 0x30272727, 0x2f273030, 0x0f0f2231, 0x171d2913, 0x1c1b1b18, 0xd6b79c33, 0xe5e5eaea, 0xe2e2e3e3, 0xe3e3e3e3, 0xe5e5e4e4, 0xe5e5e5e5, 0xe8e8e5e5, 0xecebebea, 0xd7d7e1e5, 0xd7d7d5d5, 0xebebe9e2, 0xd6e5e5ea, 0x112d93b2, 0x0b080808, 0x1b1b130d, 0x443e2722, 0x44444444, 0x3e3e3944, 0x42424242, 0x393e3e42, 0x39383837, 0x3439393e,\n0x22222222, 0x28343122, 0x34292229, 0x27292231, 0x27273134, 0x30272727, 0x31313130, 0x120f2332, 0x181b2913, 0x1e1b1b1b, 0xd8b7a033, 0xe5e8e8ea, 0xe3e2e2e4, 0xe3e3e3e3, 0xe5e4e4e3, 0xe5e5e5e5, 0xe8e5e8e5, 0xeaeaeaed, 0xebebebeb, 0xebebebeb, 0xecebebeb, 0xd8e5eaea, 0x112393b3, 0x0f0f0b0a, 0x18222312, 0x443f2913, 0x3f3e3f3f, 0x3e3e393f, 0x44444442, 0x42424242, 0x3e393939, 0x37423e3e,\n0x22222222, 0x23343827, 0x27272223, 0x27292734, 0x282f3138, 0x30272727, 0x31313130, 0x120f2332, 0x181b2913, 0x231b1b1b, 0xd8b79b33, 0xe5e8e8ea, 0xe5e4e1e3, 0xe5e5e5e5, 0xe4e4e5e5, 0xe5e5e5e5, 0xeaeae5e5, 0xeceaeaea, 0xeceaeaeb, 0xebeaeae8, 0xecebebe5, 0xd6e5eaea, 0x112d93b3, 0x13180c08, 0x1322130f, 0x443f291b, 0x3f3e3e3f, 0x423e3939, 0x44424242, 0x3e424244, 0x423e3e3e, 0x3e3e3e3e,\n0x22222222, 0x34382822, 0x27383434, 0x2223312a, 0x39393828, 0x31313028, 0x3131312f, 0x120f2331, 0x171b2913, 0x231b1b17, 0xd8b79b33, 0xeae5e5ed, 0xdcdfe4e3, 0xdccdcdcd, 0xece8dfdd, 0xe5e5e9e9, 0xeaeae8e5, 0xeaeaeaea, 0xecececea, 0xeaebeaec, 0xecebebec, 0xd6ece5ea, 0x112d93b3, 0x18180f0a, 0x27271713, 0x4444271d, 0x3f3f3f3f, 0x3e444239, 0x42424242, 0x39393e44, 0x3e423e3e, 0x3e423e3e,\n0x31222222, 0x38342927, 0x28343939, 0x22273934, 0x39393728, 0x3f393731, 0x31313137, 0x13132735, 0x131b2718, 0x1b131817, 0xd8b79a33, 0xdcedeae5, 0x595d77cf, 0x55545559, 0x776e5c59, 0xece9dfcc, 0xeaede8ea, 0xeaececea, 0xeceaecea, 0xebebeae8, 0xeaebecea, 0xc4cfebec, 0x153096b7, 0x18181311, 0x1d231d13, 0x4744271b, 0x44444444, 0x42444444, 0x42424242, 0x3e3e3e42, 0x42423e3e, 0x4242423e,\n0x38282827, 0x38343138, 0x31343937, 0x22343831, 0x37383731, 0x3e3e3831, 0x3431313e, 0x13133037, 0x131b2918, 0x1b181818, 0xd3b34e30, 0x6ea7dce9, 0x5959576d, 0x59555559, 0x57555555, 0xcf6e5d55, 0xececece0, 0xeaeaeaea, 0xeaeaeaea, 0xeaeaeaea, 0xecebebeb, 0xd2586fe4, 0x112d43b2, 0x0e0f0f0c, 0x23180f0d, 0x44442823, 0x47474744, 0x44444444, 0x42424244, 0x3939423e, 0x42423e3e, 0x42424242,\n0x38383129, 0x37383838, 0x2a343939, 0x28392727, 0x3831382a, 0x3e3e3438, 0x3534373f, 0x13133137, 0x1322271b, 0x1b1b1b18, 0xd3b34d30, 0x767977ca, 0x595d595c, 0x59555359, 0x5a545553, 0x57575a5a, 0xe0cf765c, 0xebebecea, 0xececebeb, 0xebebeceb, 0xcfdfebeb, 0xd2705e6d, 0x0d1539af, 0x0d0d0d0d, 0x312f2211, 0x44443128, 0x44444747, 0x47444444, 0x44424447, 0x3e3e4242, 0x423e3e42, 0x39393e42,\n0x38383127, 0x37383838, 0x2a313839, 0x38372727, 0x38343731, 0x3f3e3137, 0x37373e3f, 0x13183537, 0x18222718, 0x1b221b1b, 0xbeb54c2d, 0x73cccf6f, 0x53545d78, 0x53535959, 0x57545454, 0x5b5a5757, 0x6d5c5b66, 0xcdcccb76, 0xe7dfdfe0, 0xd1e0dfe7, 0x7377cbcc, 0xbc705771, 0x0d1537a2, 0x130f0f0d, 0x271d221d, 0x44473428, 0x44444444, 0x44444444, 0x44424747, 0x3e424444, 0x3e3e423e, 0x39394242,\n0x39373431, 0x39393838, 0x282a3739, 0x39393128, 0x31383934, 0x443e3434, 0x37373f44, 0x131d3737, 0x1b27271b, 0x1b221b1b, 0xbeae4023, 0x76cccbca, 0x535c5d6d, 0x55535959, 0x57575757, 0x63566056, 0x68686563, 0x73717171, 0x77777676, 0x7977cb77, 0x77cccbcf, 0xbac35578, 0x0d153296, 0x22231b13, 0x291b221d, 0x44483931, 0x44474444, 0x3e3e4444, 0x44444744, 0x42424444, 0x42424242, 0x39394242,\n0x39373939, 0x39393939, 0x38383939, 0x393e3939, 0x31343738, 0x443e3931, 0x37393e44, 0x13233937, 0x2227271b, 0x1b221b1b, 0xba9a3a23, 0x73cb77d4, 0x5959546c, 0x555b5b53, 0x56565757, 0x605f5f60, 0x6665625f, 0x74716b68, 0xcbcb7777, 0xceced1cc, 0x76cce0e0, 0xb9d45d66, 0x13133093, 0x1b131b22, 0x1d22221b, 0x47473e28, 0x47444746, 0x3e3e4444, 0x44444742, 0x3e424747, 0x423e3e3e, 0x38393e44,\n0x39393939, 0x38393839, 0x3e393939, 0x39393939, 0x37393939, 0x443e3e39, 0x373e3944, 0x13303939, 0x2928271b, 0x2222221d, 0xb44c321c, 0x79cb6fbe, 0x5355575c, 0x54595953, 0x605a5657, 0x655f5f5f, 0x5f655f62, 0x66656562, 0x77757468, 0xd1cecccb, 0x74cbe0d1, 0xafbe7056, 0x1d232d3b, 0x181b1318, 0x221d2223, 0x46474728, 0x44474447, 0x3e3e4444, 0x47474742, 0x39444747, 0x3e393939, 0x2a2a4244,\n0x39393939, 0x38383838, 0x39393939, 0x39393939, 0x3e3e423e, 0x443e3e3e, 0x373f3f44, 0x13313f37, 0x272a2822, 0x22222222, 0xae40301d, 0xcb77c5bf, 0x59556871, 0x57545559, 0x63665657, 0x5f5f5f60, 0x625f5f5f, 0x64626464, 0x74686664, 0xcecccb76, 0x6877ced1, 0x96b7c55d, 0x131e3033, 0x1d1b0f0f, 0x22222227, 0x47474631, 0x44444444, 0x3e3e3e44, 0x47474742, 0x42474447, 0x39373939, 0x2a314242,\n0x39393939, 0x39393838, 0x3e393939, 0x3e3e3e3e, 0x3e3e3e3e, 0x443e3e3e, 0x37444444, 0x22373f39, 0x282a2828, 0x29222222, 0x4f322323, 0xcb6fbeb3, 0x595b5c76, 0x57545953, 0x63656557, 0x5f5f5f5f, 0x5f5f6365, 0x62626464, 0x69676764, 0xcccb7774, 0x5a74cbcc, 0x49b2be70, 0x1b132330, 0x27180f13, 0x27272834, 0x47474839, 0x44444447, 0x3e3e4244, 0x47474742, 0x44474747, 0x39393939, 0x2a383939,\n0x38393939, 0x3e393938, 0x3939393e, 0x42423e3e, 0x3f3e3e3e, 0x443e3e3e, 0x37444444, 0x313e3f39, 0x312a2a27, 0x22222227, 0x52301b29, 0x77c5bdad, 0x595d7879, 0x59595959, 0x60565a57, 0x5f5f5f60, 0x5f63625f, 0x6262645f, 0x67666962, 0xcccb7368, 0x6c6876cf, 0x3396b7d4, 0x2217111c, 0x2a220f11, 0x28313434, 0x4748483f, 0x44444447, 0x3e424444, 0x4747473e, 0x42474747, 0x3939393e, 0x31373939,\n0x38393939, 0x39393939, 0x393e423e, 0x4242423e, 0x4242423e, 0x44443e3e, 0x39444744, 0x393f3e39, 0x34312a28, 0x27282734, 0x3b232223, 0xa6beb49d, 0x5d5a7675, 0x595d5959, 0x60605757, 0x5f5f5f60, 0x5f62625f, 0x65646566, 0x66676966, 0xcbcb7468, 0xa6667477, 0x3044afbd, 0x22271515, 0x38271818, 0x34343434, 0x47474647, 0x47474747, 0x42424444, 0x4744423e, 0x44474747, 0x3939393e, 0x393e3e39,\n0x393e3e34, 0x393e3e39, 0x3e42423e, 0x423e3e3e, 0x42424242, 0x47423e42, 0x37444747, 0x443e3e3e, 0x38342831, 0x28283137, 0x32232327, 0xd3baa940, 0x7772776f, 0x5559536e, 0x60565754, 0x5f5f5f60, 0x5f5f5f5f, 0x65646565, 0x66666666, 0x77777468, 0xd36f6874, 0x1b3397b2, 0x22221314, 0x28282723, 0x39343434, 0x47474746, 0x47474747, 0x3e444444, 0x44423e39, 0x47474744, 0x3939393e, 0x3e423e3e,\n0x393e3e39, 0x3e3e3e39, 0x3e424242, 0x3e3e3e39, 0x3e3e3e3e, 0x47424242, 0x39474747, 0x46443f3e, 0x3838313e, 0x27273438, 0x30273127, 0xbdad4c3a, 0x727776d4, 0x5955596c, 0x56575759, 0x5f5f6060, 0x5f5f5f60, 0x645f645f, 0x68696567, 0x74737468, 0xb7d46e68, 0x13233a96, 0x17130f0f, 0x22292922, 0x47383834, 0x47484848, 0x44444747, 0x3e444444, 0x42443e37, 0x4242423e, 0x3e393939, 0x39393e3e,\n0x3e42423e, 0x423e3e39, 0x42424242, 0x3e3e3e3e, 0x423e3e3e, 0x44444444, 0x39474747, 0x46443f3f, 0x39373748, 0x272a3938, 0x27313128, 0xb59d4031, 0x7573c5bd, 0x54545d72, 0x56575757, 0x60606060, 0x5f5f6060, 0x5f5f5f5f, 0x68696567, 0x66717168, 0xafbad46e, 0x111c303b, 0x11111113, 0x31272213, 0x48393437, 0x47474848, 0x47444747, 0x3e474747, 0x3e423e37, 0x37423e3e, 0x3e3e3e39, 0x3938383e,\n0x42424238, 0x3e3e393e, 0x44424242, 0x42424242, 0x44424244, 0x47474444, 0x3e444747, 0x48473f3f, 0x39394448, 0x34383e3e, 0x28272734, 0x4f403227, 0x6ed4beb5, 0x575c7272, 0x57575459, 0x56565656, 0x5f606060, 0x5f5f5f5f, 0x67676464, 0x6e656869, 0x4dafbdd4, 0x23302330, 0x13181323, 0x2a27271b, 0x48473834, 0x48474748, 0x44444747, 0x39444744, 0x42423e39, 0x37444244, 0x37373938, 0x39383438,\n0x423e3838, 0x39393e42, 0x4242423e, 0x44444442, 0x44424444, 0x44474444, 0x44444744, 0x48444447, 0x39444a48, 0x393e3e3e, 0x2727272a, 0x40302327, 0xd3beb49d, 0x6c72716f, 0x57575b59, 0x5a565757, 0x6056635a, 0x645f5f5f, 0x64656464, 0xd36f6564, 0x334db2bf, 0x27272323, 0x1b181828, 0x29272727, 0x48483927, 0x48474848, 0x44474747, 0x393e4444, 0x47473e39, 0x39424747, 0x34383837, 0x39383838,\n0x39383437, 0x3e3e4239, 0x4244423e, 0x44424242, 0x44444744, 0x47474744, 0x47444747, 0x48474747, 0x3e48944a, 0x3e3e3e3e, 0x2728272a, 0x3a302727, 0xbdb4aa4c, 0x6b71cad6, 0x545a6c6d, 0x57575754, 0x60565656, 0x665f5f60, 0x6a646464, 0xbfd3ca5c, 0x23339ab3, 0x2728271b, 0x29181b27, 0x29272728, 0x48464431, 0x47484848, 0x47444747, 0x39394447, 0x47473e39, 0x44474747, 0x38393942, 0x39383838,\n0x38383839, 0x423e3838, 0x42423e3e, 0x47444242, 0x42424242, 0x47474444, 0x473e4447, 0x4a484747, 0x44989894, 0x3e42423e, 0x29272838, 0x30312729, 0xad9d4c3a, 0x6fd4beb8, 0x5c68686d, 0x575a5b5b, 0x56565657, 0x5f605656, 0xa65c6a5f, 0xb5babed4, 0x15324c9a, 0x312a281b, 0x28221b27, 0x22272727, 0x48444639, 0x47484848, 0x3e3e4447, 0x3e39393e, 0x47474744, 0x44474747, 0x38383e44, 0x39383838,\n0x3938383e, 0x44393837, 0x423e4242, 0x47444444, 0x47474747, 0x47474747, 0x473e4447, 0x4a484848, 0x4a989894, 0x39424242, 0x28273139, 0x27312a27, 0x523a3230, 0xbebab59d, 0x5c6ea6d4, 0x5a5a5a66, 0x5a5a5a5a, 0x5a656065, 0xc0d4a66e, 0x4fabb3bf, 0x29313746, 0x31282a27, 0x27282227, 0x31272727, 0x48444447, 0x44474748, 0x3e3e3e3f, 0x42423e3e, 0x47474742, 0x44474747, 0x38394242, 0x38393737,\n0x38393942, 0x443e423e, 0x42444442, 0x47474444, 0x47474747, 0x47474747, 0x3f3e3e47, 0x4a4a4847, 0x98949494, 0x393e3e4a, 0x28343839, 0x27282a2a, 0x301c1b22, 0xb59f4c3a, 0xc5d3beba, 0x6e706fca, 0x6d6d6d6d, 0xc5ca6f6e, 0xb4bdc0d3, 0x404f9dad, 0x31313032, 0x2a2a2a31, 0x27282727, 0x47312828, 0x4a484848, 0x3f444447, 0x3e3e3e3f, 0x47443e3e, 0x47474742, 0x47474747, 0x39444242, 0x38383839,\n0x383e4744, 0x42444442, 0x42444444, 0x47474742, 0x47474747, 0x47474747, 0x3e3e3e44, 0x4847473f, 0x4a4a4a4a, 0x39394494, 0x38393739, 0x22282728, 0x1b222322, 0x4c413230, 0xbab3ad9d, 0xd3d3c0be, 0xd3d3d3d3, 0xbdc0c0d3, 0x9dadb4ba, 0x313a404f, 0x31343127, 0x312a3134, 0x282a2838, 0x4a472a28, 0x484a4a4a, 0x3f444848, 0x423e3e3f, 0x47473e3e, 0x47474747, 0x44474747, 0x3e444244, 0x38393939,\n0x393e4442, 0x44423939, 0x44474244, 0x47474444, 0x47474747, 0x47474747, 0x3e3e3e47, 0x47474444, 0x4a4a4a48, 0x39444a4a, 0x39393739, 0x272a2831, 0x27272222, 0x32231b1b, 0x9d4f523a, 0xb3b3b5ab, 0xbababab8, 0xadb5b4b4, 0x464f9daa, 0x3031323f, 0x34313131, 0x3e312834, 0x31312a37, 0x4a944428, 0x4a4a4a4a, 0x4444474a, 0x42424244, 0x47473e42, 0x47474747, 0x44474747, 0x3e444242, 0x39393937,\n0x39394242, 0x42424239, 0x42444244, 0x47474744, 0x47474747, 0x47474747, 0x3f424247, 0x47444444, 0x4a4a4a4a, 0x3e4a4a4a, 0x34393839, 0x272a3838, 0x23222222, 0x23222927, 0x3a323030, 0x4f4c4c52, 0xaaaaaa4f, 0x4f4f9daa, 0x353a404c, 0x31313132, 0x34313131, 0x39383434, 0x28313439, 0x4a949439, 0x4748484a, 0x44474747, 0x42424442, 0x44423e42, 0x47474442, 0x47474242, 0x39424444, 0x39393939,\n0x393e4444, 0x4447473e, 0x3e424442, 0x44474742, 0x47474744, 0x47474747, 0x3e424747, 0x47444444, 0x4a4a4847, 0x48944a4a, 0x31373439, 0x27383934, 0x29222222, 0x31313431, 0x23232323, 0x3a323030, 0x4c4c4c3a, 0x3a3f4046, 0x3131353a, 0x31343834, 0x34313131, 0x39393e39, 0x3e383939, 0x4a4a4a48, 0x484a4a4a, 0x42444747, 0x42424242, 0x3e3e3e3e, 0x47474239, 0x42393e44, 0x39424747, 0x39393939,\n0x39394447, 0x4244473e, 0x393e4447, 0x42444244, 0x47424242, 0x47444247, 0x3e444747, 0x47444442, 0x4a484747, 0x4848484a, 0x34343947, 0x31373e39, 0x27222227, 0x34343131, 0x23232227, 0x23232423, 0x373a372d, 0x37373737, 0x38343138, 0x34383834, 0x39383438, 0x3e3e393e, 0x9444393e, 0x4a4a4a4a, 0x4a4a4a4a, 0x42474747, 0x423e4242, 0x3e3e4242, 0x423e3e3e, 0x39394244, 0x393e4542, 0x3e393939,\n0x39394447, 0x3e393e39, 0x3e393e42, 0x47424747, 0x47474444, 0x47424247, 0x42474747, 0x44444442, 0x47474747, 0x48464848, 0x34394a48, 0x34343739, 0x27273134, 0x31343431, 0x27272728, 0x27272727, 0x37373127, 0x34383838, 0x34343134, 0x34383834, 0x3e3e3934, 0x3e3e3e3e, 0x9494473e, 0x4a4a944a, 0x47474a4a, 0x44474747, 0x423e4244, 0x3e424244, 0x3e424242, 0x393e423e, 0x39394442, 0x3e3e3e3e,\n0x3e3e3e44, 0x3e3e3e3e, 0x3e393e3e, 0x47474742, 0x47474747, 0x47443e44, 0x47474747, 0x44444442, 0x47474444, 0x48474647, 0x4448484a, 0x34343437, 0x38343434, 0x31313437, 0x27272a38, 0x27272727, 0x38383827, 0x34343438, 0x34383434, 0x39383438, 0x3e3e3e3e, 0x3e393e3e, 0x94949447, 0x4a4a4a4a, 0x47474a4a, 0x44474747, 0x42424447, 0x3e424444, 0x3e424242, 0x4242423e, 0x3e424242, 0x3e3e3e3e,\n0x3e3e3e3e, 0x3e3e3e3e, 0x4239393e, 0x47474744, 0x47474747, 0x47474244, 0x47474747, 0x44474442, 0x47474447, 0x4a474747, 0x4a484647, 0x34343444, 0x38343434, 0x31343e3e, 0x29272a38, 0x27272227, 0x38383827, 0x34383838, 0x38383834, 0x3e3e3e39, 0x3e3e3e3e, 0x4a423e3e, 0x4a4a9498, 0x94944a4a, 0x47474a4a, 0x47444747, 0x44444444, 0x3e424444, 0x4242423e, 0x423e3e42, 0x42424242, 0x3e3e4242,\n0x3e3e423e, 0x3e3e423e, 0x42423e39, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x44474447, 0x47474747, 0x48484747, 0x48484747, 0x34394748, 0x38343834, 0x423e3e42, 0x27272a39, 0x27292227, 0x3838372a, 0x37383838, 0x3e3e3937, 0x3e3e4242, 0x3e423e3e, 0x94944742, 0x4a4a9494, 0x4a944a4a, 0x47474a4a, 0x47444747, 0x44444444, 0x3e424242, 0x4442443e, 0x42424242, 0x42424242, 0x42424247,\n0x4242423e, 0x3e3e3e42, 0x4447443e, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x48484747, 0x47484848, 0x393e393e, 0x42423e39, 0x38343839, 0x31313138, 0x39393e38, 0x3e393939, 0x42424242, 0x42424242, 0x47423e3e, 0x9494944a, 0x4a4a9494, 0x4a949494, 0x47474a4a, 0x47444747, 0x42444244, 0x42444444, 0x42444242, 0x42424242, 0x47424242, 0x3e444747,\n0x4242423e, 0x423e3e42, 0x4747423e, 0x47474744, 0x47474747, 0x47474747, 0x42474747, 0x47474742, 0x47474747, 0x47474747, 0x47474747, 0x4a484848, 0x3944484a, 0x42393838, 0x38383838, 0x37373738, 0x42424239, 0x42424242, 0x42424242, 0x42424242, 0x9448443e, 0x4a4a9494, 0x4a4a4a94, 0x94949494, 0x474a4a4a, 0x47474747, 0x42424242, 0x47444444, 0x42424242, 0x3e424242, 0x47424242, 0x47474747,\n0x42424242, 0x42424242, 0x42424242, 0x47444742, 0x47474747, 0x47474747, 0x42424242, 0x47474742, 0x47474747, 0x47474747, 0x47484747, 0x4a484747, 0x474a9894, 0x3738383e, 0x37373739, 0x38383937, 0x4242423e, 0x42424242, 0x42444242, 0x47424242, 0x9494944a, 0x94949494, 0x4a4a4a94, 0x9494944a, 0x4a94944a, 0x47474747, 0x42424444, 0x47444442, 0x42444242, 0x42424242, 0x42424242, 0x47474747,\n0x42424242, 0x42424242, 0x3e424242, 0x47424242, 0x47474747, 0x47474747, 0x47474444, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x4a474848, 0x98989494, 0x3e44474a, 0x39393939, 0x39373939, 0x4242423e, 0x42424245, 0x47424242, 0x9c944a47, 0x94949498, 0x4a949494, 0x4a4a944a, 0x4a944a4a, 0x474a4a47, 0x47474747, 0x47454247, 0x42424444, 0x42443e3e, 0x42424242, 0x42424242, 0x47474742,\n0x42424242, 0x42444242, 0x3e3e4242, 0x47424242, 0x47474747, 0x44474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x48484847, 0x4a94944a, 0x94944a4a, 0x3e444848, 0x39373739, 0x4242423e, 0x47474242, 0x944a4747, 0x94949c9c, 0x9494949c, 0x94949494, 0x4a4a4a94, 0x47474a4a, 0x47474747, 0x47474747, 0x47474747, 0x42424447, 0x4242423e, 0x42424242, 0x42424242, 0x47474442,\n0x44444242, 0x42444442, 0x4242423e, 0x44444744, 0x47474742, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x48484747, 0x4a944a48, 0x4a4a4a4a, 0x484a4a4a, 0x48484848, 0x4a4a4a47, 0x94949494, 0x9c9c9c9c, 0x94949594, 0x4a4a9494, 0x9494944a, 0x4a4a4a4a, 0x4747474a, 0x47474747, 0x47474747, 0x47474747, 0x42424447, 0x42424242, 0x42444442, 0x44444242, 0x44424447,\n0x42474744, 0x3e424444, 0x42424242, 0x42474742, 0x47474742, 0x47474747, 0x47474744, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x4a474747, 0x4a4a4848, 0x4a4a4a4a, 0x48484a4a, 0x94944a4a, 0x9c9c9c94, 0x95959c9c, 0x9c94959c, 0x949c9c9c, 0x4a4a9495, 0x4a94944a, 0x4a4a4a4a, 0x474a9494, 0x47474747, 0x47474747, 0x47474747, 0x47424244, 0x42444447, 0x42454242, 0x47474742, 0x47474747,\n0x44474747, 0x423e4247, 0x47474744, 0x47474747, 0x47474447, 0x42474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x4a4a4a4a, 0x4a4a4a4a, 0x4a48484a, 0x4a4a4a4a, 0x94949c94, 0x94959494, 0x94949495, 0x94949494, 0x4a949494, 0x4a4a944a, 0x4747474a, 0x474a4a4a, 0x47474242, 0x47474747, 0x42474747, 0x47444242, 0x47474747, 0x47474742, 0x4a474245, 0x474a4747,\n0x44474747, 0x44423e42, 0x45474442, 0x47474742, 0x44444447, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x474a4a47, 0x484a4a4a, 0x4a4a4a4a, 0x4a4a4a4a, 0x94949494, 0x94949494, 0x94949494, 0x95959494, 0x4a4a9494, 0x4a4a4a4a, 0x47474747, 0x47474747, 0x47424447, 0x47474747, 0x42424747, 0x47444747, 0x42474444, 0x42474442, 0x4a474742, 0x4a4a4747,\n0x42424747, 0x47444242, 0x47474747, 0x42424242, 0x42424242, 0x47474447, 0x47474447, 0x47474747, 0x47474747, 0x47474747, 0x47474a47, 0x47474747, 0x4a4a4747, 0x484a4a48, 0x4a4a4a4a, 0x4a4a4a4a, 0x4a4a4a4a, 0x94944a4a, 0x94949494, 0x94949494, 0x4a949494, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47424747, 0x47474747, 0x42424447, 0x42424242, 0x47474742, 0x47474747,\n0x42474747, 0x47444442, 0x47454747, 0x42423e42, 0x42424242, 0x44424242, 0x47474744, 0x44474747, 0x44474444, 0x47474747, 0x47474a47, 0x47474747, 0x47474747, 0x4a474747, 0x4a4a4a4a, 0x4a4a484a, 0x4a4a4a4a, 0x944a4a4a, 0x94949494, 0x94949495, 0x4a4a9494, 0x47474747, 0x47474747, 0x47474747, 0x42474747, 0x47474a47, 0x47474747, 0x47444747, 0x42424247, 0x42424242, 0x47474742, 0x47474747,\n0x44474747, 0x47474742, 0x42474747, 0x47424242, 0x44474747, 0x47474244, 0x47474744, 0x47474747, 0x47474247, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x4a4a4a4a, 0x4a474a4a, 0x949c944a, 0x4a4a4a94, 0x9495944a, 0x94949494, 0x4a4a4a94, 0x474a4a47, 0x47474747, 0x47474747, 0x47474747, 0x4a474747, 0x47474747, 0x47474747, 0x42424247, 0x47474747, 0x47474742, 0x47474747,\n0x42474a47, 0x47474742, 0x42474747, 0x47474742, 0x47474747, 0x47424444, 0x47474747, 0x47474747, 0x4a4a4747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x4a4a474a, 0x4a47474a, 0x94959594, 0x4a949495, 0x9494944a, 0x94949494, 0x4a474a94, 0x474a9494, 0x4747474a, 0x47474747, 0x47474747, 0x47474a47, 0x47474747, 0x47474747, 0x47474242, 0x47474747, 0x47474447, 0x474a4a47,\n0x42474747, 0x47474742, 0x42424747, 0x47474747, 0x47444747, 0x47424247, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x474a4a4a, 0x474a4747, 0x47474a4a, 0x47484a47, 0x94474747, 0x94949494, 0x4a4a4a4a, 0x94944a4a, 0x94949494, 0x4a4a4a94, 0x4a474a4a, 0x474a4a4a, 0x47474747, 0x47474747, 0x4a4a4747, 0x47474747, 0x47474747, 0x47474744, 0x47474747, 0x47474747, 0x474a4a47,\n0x47474747, 0x47474542, 0x47424247, 0x47474747, 0x47474747, 0x47474242, 0x47474747, 0x47474747, 0x4a474747, 0x4747474a, 0x47474a47, 0x47474747, 0x47474747, 0x4747474a, 0x47474747, 0x4a4a4747, 0x4a949494, 0x4a47474a, 0x94944a4a, 0x944a9494, 0x4747474a, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x4a4a4747, 0x4744474a, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x474a4a47,\n0x47474747, 0x42474747, 0x4a474542, 0x474a4a4a, 0x47474747, 0x47474447, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x42474a47, 0x3e3e4242, 0x47474742, 0x42474747, 0x44444244, 0x4a4a4747, 0x9494944a, 0x47474a94, 0x4a944a47, 0x4a4a9494, 0x4747474a, 0x47474a47, 0x47474747, 0x42424247, 0x42424242, 0x47474744, 0x44424247, 0x47474242, 0x47474747, 0x4a4a4747, 0x47474747, 0x47474747,\n0x47474747, 0x47474747, 0x944a4a47, 0x4a4a944a, 0x47474747, 0x47424242, 0x47474747, 0x42474747, 0x47423e3e, 0x45474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x47474747, 0x4a944747, 0x4a949494, 0x47474a94, 0x4a944a47, 0x4a94944a, 0x4747474a, 0x47474a47, 0x47474747, 0x47474747, 0x42474245, 0x47474747, 0x42424242, 0x47474747, 0x47474747, 0x4a4a4747, 0x47474747, 0x47474a4a,\n0x47474747, 0x4a4a4747, 0x4a4a944a, 0x474a474a, 0x42424747, 0x47423e3e, 0x47474745, 0x47474747, 0x47474247, 0x47474747, 0x4a474747, 0x4747474a, 0x47474747, 0x47474747, 0x47474747, 0x4a4a4a47, 0x4a4a4a4a, 0x4747474a, 0x4a4a4a47, 0x4a4a4a4a, 0x47474a4a, 0x47474747, 0x4a474a4a, 0x47474a4a, 0x47474747, 0x47424747, 0x47474747, 0x42474747, 0x47474742, 0x47474747, 0x47474747, 0x474a4a4a,\n0x47474747, 0x47474747, 0x47474747, 0x4a4a4747, 0x423e474a, 0x47474242, 0x47474747, 0x47474747, 0x47474747, 0x474a4747, 0x47474747, 0x4747474a, 0x47474747, 0x47474747, 0x47474747, 0x4a944747, 0x9494944a, 0x4747474a, 0x944a4a47, 0x4a4a4a4a, 0x47474a4a, 0x4a474747, 0x4a474a4a, 0x474a4a4a, 0x47474747, 0x47474747, 0x47474747, 0x47474542, 0x47474747, 0x47474a47, 0x47424545, 0x4a4a4a47,\n0x47474747, 0x47474747, 0x4a474747, 0x4a4a4747, 0x42424247, 0x47424242, 0x47474747, 0x47454747, 0x3e424742, 0x45474742, 0x47474739, 0x47424247, 0x42474747, 0x47474242, 0x47474247, 0x46944747, 0x4a9c9c4a, 0x47464846, 0x94944748, 0x94949494, 0x4747484a, 0x47444244, 0x47424a4a, 0x4747474a, 0x44474242, 0x47474742, 0x47474747, 0x47474742, 0x4a424747, 0x47474747, 0x47474747, 0x47474a47,\n0x47474747, 0x45424747, 0x4a4a4747, 0x47474747, 0x3e424247, 0x47423e3e, 0x47474242, 0x42474747, 0x393e3e3e, 0x423e3939, 0x47473e39, 0x47424747, 0x42474a4a, 0x47474242, 0x47473e47, 0x47484747, 0x46474a48, 0x47474747, 0x94949447, 0x9494944a, 0x44474894, 0x423e3e44, 0x42424747, 0x47474747, 0x42473e3e, 0x42424242, 0x42474242, 0x4747453e, 0x473e3e47, 0x47474747, 0x47474747, 0x4a4a4a4a,\n0x47474747, 0x47474747, 0x47474747, 0x423e3e42, 0x39383842, 0x4747473e, 0x4a474547, 0x4747474a, 0x393e3e47, 0x3e383939, 0x4747393e, 0x4a424747, 0x474a4a4a, 0x47474242, 0x47473e47, 0x473e3e47, 0x46464846, 0x4a464646, 0x9c9c9c94, 0x94949494, 0x474a9494, 0x3e3e3e42, 0x42423e3e, 0x47474742, 0x44473e42, 0x45454247, 0x42474447, 0x4747473e, 0x3e38373e, 0x42424242, 0x4a474742, 0x4a4a4a94,\n0x47474747, 0x42424747, 0x3e3e4747, 0x3938383e, 0x47423939, 0x47474747, 0x4a474747, 0x4a474a47, 0x3e47474a, 0x3e393838, 0x3e37373e, 0x9b474747, 0x4e9a9b9b, 0x44443e47, 0x46463f46, 0x463f373f, 0x4e4d464e, 0xa9a99a4e, 0xa8a9a8a8, 0xa8a8a8a8, 0x9b9b9ba8, 0x46464e9c, 0x3e444746, 0x47423737, 0x47473e3e, 0x47474747, 0x42474744, 0x4247473e, 0x383e3e39, 0x473e3e3e, 0x4a4a4a47, 0x4a4a4a4a,\n0x47474747, 0x3e424747, 0x3e3e3e47, 0x42423e3e, 0x47473e42, 0x4a474747, 0x989c9494, 0x9c9c9c9c, 0x44989b9b, 0x4446473f, 0x3734373e, 0xa94a3f47, 0x4e98a9a9, 0x3e423e47, 0x47473f46, 0x463f3738, 0x4e9a9a9c, 0xa9aba84e, 0xa9a9a9a9, 0xa9a9a9a9, 0xa9a9a9a9, 0x484650a9, 0x373e464a, 0x44373837, 0x47473e38, 0x47474747, 0x44474744, 0x383e4438, 0x3e423939, 0x47474742, 0x47474a4a, 0x4a4a4a4a,\n0x47474747, 0x3e474747, 0x3939393e, 0x47474744, 0x47474747, 0x4a424747, 0xa8a89ba8, 0xa8a8a8a8, 0x9c98a8a8, 0x4a9c9b9a, 0x3f3e3f4a, 0x9b9a4646, 0x984ea9a8, 0x4447484a, 0x3f3f4647, 0x9c373837, 0xababa9ab, 0xa9a99ba9, 0xa9a9a9a9, 0xa9a9a9a9, 0xa9a9a8a8, 0x4848469a, 0x3e474648, 0x37373737, 0x46444737, 0x47474646, 0x47474747, 0x37373739, 0x47473e37, 0x989c9c47, 0x4a949c98, 0x4a4a4a4a,\n0x47474747, 0x3e473e47, 0x44373737, 0x47474748, 0x47474747, 0x47474747, 0xa8a8a99b, 0xa8a89b9b, 0x9aa9a8a8, 0x4a9b9c9c, 0x463f9c9b, 0x9aa94e46, 0x9c9ca9a8, 0x464a4a4a, 0x393f4a47, 0x9b463e3e, 0xa9a9a9a9, 0xa9a9aba9, 0xa9a9a9a9, 0xa9a9a9a9, 0xa89aa9a9, 0x474898a9, 0x48474747, 0x37393744, 0x483f483f, 0x47474748, 0x47444747, 0x37373747, 0x4748483e, 0xa9a9a998, 0xa8a8a9a9, 0x9b9b9b9b,\n0x48474747, 0x47473e48, 0x47373737, 0x47484848, 0x47474848, 0x47484748, 0xa9a9a99c, 0xa9a9a9a9, 0xa8a9a9a9, 0x98a89a9a, 0x4648a89a, 0x4ea99846, 0x9ba8a9a8, 0x484a4a4e, 0x39474a3f, 0x9b98473e, 0xa9a9a9a9, 0xa9ababa9, 0xaba9a9a9, 0xa9a9a9a9, 0x9b989ba9, 0x47464a9a, 0x474a4a47, 0x37373947, 0x483e4747, 0x48484848, 0x3f444a47, 0x37373e48, 0x47484847, 0xa9a8a998, 0xa9a8a9ab, 0xa9a9aba9,\n0x474a4a47, 0x473e444a, 0x47393737, 0x4a484a47, 0x48473944, 0x47484847, 0xa89aa84a, 0xa9a99aa9, 0x4a9aabab, 0x9ca8a84a, 0x46469b9b, 0x4e4e9a46, 0xa9a9a9a9, 0x4a4a4a4a, 0x3f47473f, 0x9b483f3f, 0x9cababab, 0xa9a9a84e, 0xab9aa9a9, 0xa8aba9ab, 0xa8a99c9c, 0x473e4aa9, 0x989b4a4a, 0x3e373747, 0x48443e47, 0x484a4a4a, 0x3e474a47, 0x37373f47, 0x4a4a4747, 0x984a4e4a, 0xa9a9a9a8, 0xa8a99a9b,\n0x47474a4a, 0x393e4747, 0x4a3e3e3f, 0x46474748, 0x47443f3f, 0x47474747, 0x9ba89c47, 0x9a9a9aa8, 0x989aa89a, 0x9aa89c4e, 0x464eab9b, 0xa9484a4a, 0xabababab, 0x4a4a4a4a, 0x3f3f3e48, 0x9a4a473e, 0x4e9aa9a8, 0x9ba99b50, 0xa99a9a9a, 0xa89aa9a9, 0x9a9a4a47, 0x3f3e4aa8, 0x9c484747, 0x39373e9c, 0x4a4a3e37, 0x47474747, 0x474a4a4a, 0x3f393e39, 0x4a9ca89a, 0x4e474448, 0x9a9a9ba8, 0xa8a8a89a,\n0x4a4a4a4a, 0x3e474a4a, 0x4a3e3e3f, 0x393f484a, 0x9c48483f, 0x474748a8, 0xa8a94747, 0x9a9a9b9b, 0xa99aa8a8, 0x4e4a489c, 0x4898aba8, 0xab9b4a4e, 0xabababab, 0x4a4a4a94, 0x3e39474a, 0xa89c443f, 0x9a4e4a98, 0xa9a99aa9, 0x9aa89a9a, 0x4e9aa99a, 0xa99b9c47, 0x3e474a9a, 0x4a473f37, 0x46464a9a, 0x4a4a4a46, 0x4a4a4a4a, 0x4a4a4a94, 0x3f3e3e3f, 0x4aa8ab9a, 0x47473f47, 0x9a9b9c4a, 0xab9aa99a,\n0x4a949494, 0x4894944a, 0x473e3e3f, 0x474e9b94, 0x4e4e9b9c, 0x47474a9a, 0xababa84a, 0xa89b9aab, 0x9a4e4aa8, 0x9a4e4e9b, 0x4e4ea8ad, 0xabab9b4e, 0xabababab, 0x4a4a4a94, 0x3f469494, 0x9c4a3e3f, 0x9a4a474a, 0xa84e4e9a, 0x984ea8a8, 0x4aabab9b, 0x9aa99c47, 0x474a3f46, 0x9c94473f, 0x4e4e4e4e, 0x4a94a9a9, 0x944a4a94, 0x944a9494, 0x463e444a, 0x9ca9ab98, 0x47483e4a, 0x9b983e3e, 0xababa8a8,\n0x4a949594, 0x4a4a4a4a, 0x3f3f3f47, 0x4e4e4747, 0x9a4e984e, 0x474a94ab, 0xadadab47, 0xababa9ab, 0x4e4ea8ab, 0x984e984e, 0x4e4e4e9c, 0xaba9a84e, 0xabadadad, 0x4a4a4a94, 0x3f474a4a, 0x473e3f3f, 0x4e463f44, 0xaba84e4e, 0x9c949c9c, 0x4a9caba8, 0xa8a9a84a, 0x3f3f3f4e, 0x4a443f3f, 0x9c4e4e4e, 0x4a95a8a8, 0x4a4a4a4a, 0x4a4a944a, 0x9846474a, 0x4e9a4e4e, 0x3f44444e, 0xa84a4a3f, 0xadaba9a9\n);\n\nint getPaletteIndexXY(in ivec2 fetch_pos)\n{\n    int palette_index = 0;\n    if(fetch_pos.x >= 0 && fetch_pos.y >= 0\n        && fetch_pos.x < int(bitmap_size.x) && fetch_pos.y < int(bitmap_size.y))\n    {\n        int line_index = fetch_pos.y * longs_per_line;\n\n        int long_index = line_index + (fetch_pos.x >> 2);\n        int bitmap_long = bitmap[long_index];\n\n        int byte_index = fetch_pos.x & 0x03;\n        palette_index = (bitmap_long >> (byte_index << 3)) & 0xff;\n    }\n    return palette_index;\n}\n\n\nint getPaletteIndex(in vec2 uv) {\n    int palette_index = 0;\n    ivec2 fetch_pos = ivec2(uv * bitmap_size);\n    palette_index = getPaletteIndexXY(fetch_pos);\n    return palette_index;\n}\n\nvec4 getColorFromPalette(in int palette_index) {\n    int int_color = palette[palette_index];\n    return vec4(float(int_color & 0xff)/ 255.0,\n                float((int_color >> 8)& 0xff)/ 255.0,\n                float((int_color >> 16)& 0xff)/ 255.0,\n                0);\n}\n\nvec4 getBitmapColor(in vec2 uv) {\n    return getColorFromPalette(getPaletteIndex(uv));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / bitmap_size;\n    fragColor = getBitmapColor(uv);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}