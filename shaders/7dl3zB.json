{
    "Shader": {
        "info": {
            "date": "1616191788",
            "description": "A robotic arm grabbing things. Based on reinder's [url=https://www.shadertoy.com/view/tlSSDV]\"Robotic Arm Hunting Lights\"[/url] and also trying to learn how inverse kinematics works. I'm going to have to start doing some robotics with my raspberry pi!",
            "flags": 0,
            "hasliked": 0,
            "id": "7dl3zB",
            "likes": 12,
            "name": "Two Link IK Robot Arm",
            "published": 3,
            "tags": [
                "ik",
                "tracker",
                "robotics",
                "inversekinematics",
                "arm",
                "twolink"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 284
        },
        "renderpass": [
            {
                "code": "#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n#define PLOT_RES 30\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec2 Hash12(in float x) {\n\tvec3 p3 = fract(x * vec3(0.1031, 0.103, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat sdDisc(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b, in float t) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0)) - t;\n}\n\nfloat sdRing(in vec2 p, in vec2 o, in float r, in float t) {\n    return abs(length(p - o) - r) - t;\n}\n\nvec2 getTarget(in float t) {\n    vec2 polar = Hash12(t);\n    polar = vec2(polar.x * 6.28, polar.y * 2.0 + 1.0);\n    return vec2(cos(polar.x), sin(polar.x)) * polar.y;\n}\n\nvec2 getJointAngles(in vec2 a, in vec2 b, in float ra, in float rb) {\n    vec2 ba = b - a;\n    float d = dot(ba, ba);\n    float q1 = atan(ba.y, ba.x) + acos((d + ra * ra - rb * rb) / (2.0 * ra * sqrt(d)));\n    float q2 = atan(ba.y - ra * sin(q1), ba.x - ra * cos(q1));\n    return vec2(q1, q2);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 6.0;\n    float unit = 12.0 / iResolution.y;\n    vec3 color = vec3(0.5, 0.0, 0.0);\n    float time = iTime;\n\n    float ra = 2.0;\n    float rb = 1.0;\n\n    vec2 a = vec2(0.0);\n\n    vec2 cPrev = getTarget(floor(time));\n    vec2 cNext = getTarget(ceil(time));\n    float transition = smoothstep(0.0, 1.0, fract(time));\n\n    vec2 prevAngles = getJointAngles(a, cPrev, ra, rb);\n    vec2 nextAngles = getJointAngles(a, cNext, ra, rb);\n\n    vec2 curAngles = mix(prevAngles, nextAngles, transition);\n    vec2 b = a + ra * vec2(cos(curAngles[0]), sin(curAngles[0]));\n    vec2 c = b + rb * vec2(cos(curAngles[1]), sin(curAngles[1]));\n\n    draw(sdRing(uv, a, ra, rb), vec3(0.0, 0.5, 0.0));\n\n    float tStep = 1.0 / float(PLOT_RES);\n    vec2 j2Prev = cPrev;\n    bool dash = true;\n    for (float t=tStep; t < 1.0 + tStep; t += tStep) {\n        vec2 angles = mix(prevAngles, nextAngles, smoothstep(0.0, 1.0, t));\n        vec2 j1Cur = a + ra * vec2(cos(angles[0]), sin(angles[0]));\n        vec2 j2Cur = j1Cur + rb * vec2(cos(angles[1]), sin(angles[1]));\n        if (dash) draw(sdLine(uv, j2Prev, j2Cur, 0.0), vec3(0.0, 0.0, 1.0));\n        j2Prev = j2Cur;\n        dash = !dash;\n    }\n\n    color = mix(color, vec3(1.0, 0.5, 0.0), min(exp(-10.0 * sdDisc(uv, cPrev, 0.1)) * (1.0 - transition), 1.0));\n    color = mix(color, vec3(1.0, 0.5, 0.0), min(exp(-10.0 * sdDisc(uv, cNext, 0.1)) * transition, 1.0));\n\n    float clip = -sdLine(uv, c, 2.0 * c - b, 0.1);\n    draw(sdLine(uv, a, b, 0.05), vec3(1.0, 0.8, 0.0));\n    draw(max(sdLine(uv, b, c, 0.05), clip), vec3(1.0, 0.8, 0.0));\n\n    draw(sdDisc(uv, a, 0.1), vec3(1.0));\n    draw(sdDisc(uv, b, 0.1), vec3(1.0));\n    draw(max(sdDisc(uv, c, 0.2), clip), vec3(1.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}