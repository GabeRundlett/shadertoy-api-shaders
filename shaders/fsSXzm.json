{
    "Shader": {
        "info": {
            "date": "1619857256",
            "description": "feature Z",
            "flags": 0,
            "hasliked": 0,
            "id": "fsSXzm",
            "likes": 10,
            "name": "feature Z",
            "published": 3,
            "tags": [
                "puma"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 303
        },
        "renderpass": [
            {
                "code": "// All the distance functions from:https://iquilezles.org/articles/distfunctions\n// raymarching based from https://www.shadertoy.com/view/wdGGz3\n#define USE_MOUSE 0\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define matRotateX(rad) mat3(1,0,0,0,cos(rad),-sin(rad),0,sin(rad),cos(rad))\n#define matRotateY(rad) mat3(cos(rad),0,-sin(rad),0,1,0,sin(rad),0,cos(rad))\n#define matRotateZ(rad) mat3(cos(rad),-sin(rad),0,sin(rad),cos(rad),0,0,0,1)\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat threeDF(vec3 p) {\n    vec3 prevP = p;\n    \n    float d = sdBox(p,vec3(1.0,1.0,0.3));\n    p*=matRotateZ(radians(-45.0));\n    d = max(-p.x,d);\n    p = prevP;\n    float mask = sdBox(p-vec3(-0.7,0.35,0.0),vec3(1.0,0.15,0.5));\n    d = max(-mask,d);\n    return d;\n}\n\nvec4 GetDist(vec3 p) {\n    vec3 prevP = p;\n    \n    float animate = sin(iTime*2.0)*0.1;\n    float d = threeDF((p-vec3(0.1+animate,0.3+animate*0.5,0.0)));\n    p*=-1.0;\n    float d2 = threeDF((p-vec3(0.1+animate,0.3+animate*0.5,0.0)));\n    d = min(d,d2);\n    vec4 res = vec4(vec3(1.0),d);\n\n    vec4 model = res;\n    return model;\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n    vec4 dO= vec4(0.0);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO.w;\n        vec4 dS = GetDist(p);\n        dO.w += dS.w;\n        dO.xyz = dS.xyz;\n        if(dO.w>MAX_DIST || dS.w<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).w;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).w,\n        GetDist(p-e.yxy).w,\n        GetDist(p-e.yyx).w);\n    \n    return normalize(n);\n}\n\nvec2 GetLight(vec3 p) {\n    vec3 lightPos = vec3(2,5,-3);\n    \n    lightPos.yz *= Rot(radians(-30.0));\n    lightPos.xz *= Rot(iTime*1.5+1.0);\n    \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l).w;\n    \n    float lambert = max(.0, dot( n, l))*0.6;\n    \n    return vec2((lambert+dif),max(0.9, 1.0)) ;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nfloat noise(float x) {\n    return fract(sin(dot(vec2(x), vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.56,789.34));\n    p+=dot(p,p+34.56);\n    return fract(p.x+p.y);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdPie( in vec2 p, in vec2 c, in float r )\n{\n    p.x = abs(p.x);\n    float l = length(p) - r;\n    float m = length(p-c*clamp(dot(p,c),0.0,r)); // c=sin/cos of aperture\n    return max(l,m*sign(c.y*p.x-c.x*p.y));\n}\n\nfloat animationMask(vec2 p, float speed){\n    float t = mod(iTime*speed,360.0);\n    float rad = radians(t);\n    float d = sdPie(p,vec2(sin(rad),cos(rad)),0.15);\n    return d;\n}\n\nfloat charF(vec2 p, int animate, float speed) {\n    vec2 prevP = p;\n    float size = 0.1;\n    float d = sdBox(p,vec2(size));\n    p*=Rot(radians(45.0));\n    d = max(p.x,d);\n    p = prevP;\n    float mask = sdBox(p-vec2(0.06,0.025),vec2(0.1,0.015));\n    d = max(-mask,d);\n    \n    if(animate == 1){\n        mask = animationMask(p,speed);\n        d = max(-mask,d);\n    }\n    return d;\n}\n\nfloat charU(vec2 p, int animate, float speed) {\n    vec2 prevP = p;\n    float w = 0.03;\n    float size = 0.1;\n    float d = abs(length(p)-(size-w))-w;\n    d = max(p.y,d);\n    float d2 = sdBox(p,vec2(size));\n    d2 = max(-p.y,d2);\n    float mask = sdBox(p,vec2(w*1.34,size+0.1));\n    d2 = max(-mask,d2);\n    d = min(d,d2);\n    p*=Rot(radians(45.0));\n    p.x+=0.075;\n    d = max(-p.x,d);\n    \n    p = prevP;\n    if(animate == 1){\n        mask = animationMask(p,speed);\n        d = max(-mask,d);\n    }\n    return d;\n}\n\nfloat charT(vec2 p, int animate, float speed) {\n    vec2 prevP = p;\n    float w = 0.03;\n    float size = 0.1;\n    float d = sdBox(p,vec2(size));\n    \n    float mask = sdBox(p-vec2(0.031,-0.031),vec2(0.071));\n    d = max(-mask,d);\n    \n    p*=Rot(radians(45.0));\n    p.x+=0.075;\n    d = max(-p.x,d);\n    \n    p = prevP;\n    p*=Rot(radians(45.0));\n    d = max(p.x,d);\n    \n    p = prevP;\n    if(animate == 1){\n        mask = animationMask(p,speed);\n        d = max(-mask,d);\n    }\n    return d;\n}\n\nfloat charR(vec2 p, int animate, float speed) {\n    vec2 prevP = p;\n    float w = 0.025;\n    float size = 0.11;\n    float d = abs(length(p-vec2(0.032,0.032))-((size-w)*0.5))-w;\n    d = max(-p.x+0.04,d);\n    float d2 = sdBox(p-vec2(-0.0302,0.032),vec2(0.07,0.067));\n    d = min(d,d2);\n    float mask = sdBox(p-vec2(-0.032,0.032),vec2(0.074,0.0155));\n    d = max(-mask,d);\n    d2 = sdBox((p-vec2(0.042,-0.07))*Rot(radians(-40.0)),vec2(0.025,0.08));\n    d = min(d,d2);\n    mask = sdBox(p,vec2(0.1));\n    d = max(mask,d);\n    p*=Rot(radians(45.0));\n    p.x+=0.082;\n    d = max(-p.x,d);\n    \n    p = prevP;\n    if(animate == 1){\n        mask = animationMask(p,speed);\n        d = max(-mask,d);\n    }\n    return d;\n}\n\nfloat charE(vec2 p, int animate, float speed) {\n    vec2 prevP = p;\n    float w = 0.025;\n    float size = 0.1;\n    float d = sdBox(p,vec2(size));\n    p.y = abs(p.y);\n    p.y-=0.032;\n    float mask = sdBox(p-vec2(0.03,0.0),vec2(0.072,0.012));\n    d = max(-mask,d);\n    p = prevP;\n    mask = sdBox(p-vec2(0.07,0.0),vec2(0.05,0.03));\n    d = max(-mask,d);\n    d = max(p.x-0.06,d);\n    p*=Rot(radians(45.0));\n    p.x+=0.082;\n    d = max(-p.x,d);\n    p = prevP;\n    p.x-=0.1;\n    p*=Rot(radians(45.0));\n    d = max(p.x,d);\n    \n    p = prevP;\n    if(animate == 1){\n        mask = animationMask(p,speed);\n        d = max(-mask,d);\n    }\n    return d;\n}\n\nfloat future(vec2 p, int animate){\n    float d = charF(p-vec2(-0.5,0.0),animate,90.0);\n    float d2 = charU(p-vec2(-0.36,0.0),animate,80.0);\n    d = min(d,d2);\n    d2 = charT(p-vec2(-0.14,0.0),animate,70.0);\n    d = min(d,d2);\n    d2 = charU(p-vec2(0.,0.0),animate,60.0);\n    d = min(d,d2);\n    d2 = charR(p-vec2(0.22,0.0),animate,50.0);\n    d = min(d,d2);\n    d2 = charE(p-vec2(0.44,0.0),animate,40.0);\n    d = min(d,d2);\n    return d;\n}\n\nfloat background(vec2 p, int animate){\n    p*=6.0;\n    \n    vec2 gv = fract(p)-0.5;\n    vec2 id = floor(p);\n    \n    float n = Hash21(id);\n    \n    float width = 0.15;\n    \n    if(n<.5)gv*=-1.0;\n    if(n>=.5 && n<0.7)gv*=Rot(radians(90.0));\n    if(n>=.7)gv*=Rot(radians(-90.0));\n    \n    gv*=0.2;\n    float d = charF(gv,animate,70.0);\n    if(n>.2 && n<.4) {\n        d = charU(gv,animate,50.0);\n    }\n    if(n>=.4 && n<.6) {\n        d = charR(gv,0,30.0);\n    }\n    if(n>=.8 && n<.9) {\n        d = charT(gv,animate,60.0);\n    }\n    if(n>=.9) {\n        d = charE(gv,0,30.0);\n    }\n    return d;\n}\n\nvec3 twoDRender(vec2 uv) {\n    vec2 prevUV = uv;\n    vec3 col = vec3(0.1,0.2,0.3);\n    uv.y-=iTime*.1;\n    float bg = background(uv,0);\n    col = mix(col,vec3(0.5),S(bg,0.0));\n    bg = background(uv,1);\n    col = mix(col,vec3(0.8),S(bg,0.0));\n    \n    uv = prevUV;\n    \n    float y = 0.2;\n    float d = future(uv-vec2(0.06,y-0.01),0);\n    \n    col = mix(col,vec3(0.2),S(d,0.0));\n    d = future(uv-vec2(0.055,y),0);\n    col = mix(col,vec3(1,1,0.1),S(d,0.0));\n    uv = prevUV;\n    d = future(uv-vec2(0.055,y),1);\n    col = mix(col,vec3(0.8,0.9,0.2),S(d,0.0));\n    return col;\n}\n\nvec3 Bg(vec3 rd, vec3 bcol) {\n    float k = rd.y*0.7+1.5;\n    vec3 col = mix(bcol,vec3(1.0,0.8,.0),k);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    //uv.x+=sin(floor(uv.y*500.0)*iTime*20.)*0.002;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 3, -10);\n    #if USE_MOUSE == 1\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    #else\n    ro.yz *= Rot(radians(-20.0));\n    ro.xz *= Rot(iTime*1.2);\n    #endif\n    \n    vec3 rd = R(uv, ro, vec3(0,1.5,0), 1.);\n\n    vec4 d = RayMarch(ro, rd);\n    \n    vec3 bgCol = twoDRender(uv);\n    if(d.w<MAX_DIST) {\n        vec3 p = ro + rd * d.w;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd,n);\n        float spec = pow(max(0.0,r.y),30.);\n        float dif = dot(n,normalize(vec3(1,2,3)))*0.5+0.5;\n        col = mix(Bg(r,bgCol),vec3(dif),0.5)+spec;\n        //col += d.rgb;\n    } else {\n        // background\n        col += bgCol;\n    }\n    \n    fragColor = vec4(col*0.8,1.0)+(noise(uv.x*uv.y*iTime*0.1))*0.12;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}