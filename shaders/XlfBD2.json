{
    "Shader": {
        "info": {
            "date": "1513266335",
            "description": "Kinetic trompe-l'oeil? - mouseable",
            "flags": 0,
            "hasliked": 0,
            "id": "XlfBD2",
            "likes": 10,
            "name": "Virtual Dolphins",
            "published": 3,
            "tags": [
                "raymarch",
                "refraction",
                "water",
                "mask"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 1014
        },
        "renderpass": [
            {
                "code": "// \"Virtual Dolphins\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrEllipsDf (vec3 p, vec3 r);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\n\nvec3 sunDir, pSize, fishPos, qHit;\nfloat tCur, dstFar, wWid, fishAngI;\nint idObj;\nconst float pi = 3.14159;\n\nfloat WaveHt (vec2 p)\n{\n  mat2 qRot = mat2 (0.8, -0.6, 0.6, 0.8);\n  vec4 t4, v4;\n  vec2 q, t, tw;\n  float wFreq, wAmp, h;\n  h = -0.15;\n  q = p;\n  wFreq = 1.;\n  wAmp = 0.03;\n  tw = 0.5 * tCur * vec2 (1., -1.);\n  for (int j = 0; j < 4; j ++) {\n    q *= qRot;\n    t4 = q.xyxy * wFreq + tw.xxyy;\n    t = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * t.xxyy - 1.;\n    v4 = (1. - abs (sin (t4))) * (abs (sin (t4)) + abs (cos (t4)));\n    t = 1. - sqrt (v4.xz * v4.yw);\n    h += wAmp * length (t); //dot (t, t);\n    wFreq *= 2.;\n    wAmp *= 0.5;\n  }\n  return h;\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 100; j ++) {\n    p = ro + s * rd;\n    h = p.y - WaveHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.05, h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - WaveHt (p.xz));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  p.xz = abs (p.xz) - 0.5 * pSize.xz;\n  return (max (p.x, p.z) > 0.) ? dstFar : dHit;\n}\n\nvec3 WaveNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return normalize (vec3 (WaveHt (p.xz) - vec2 (WaveHt (p.xz + e.xy), WaveHt (p.xz + e.yx)), e.x).xzy);\n}\n\nfloat FishDf (vec3 p)\n{\n  vec3 q;\n  float dMin, dBodyF, dBodyB, dMouth, dFinT, dFinP, dFinD, dEye, d, szFac;\n  szFac = 4.;\n  p *= szFac;\n  p.x = abs (p.x);\n  p.z -= 2.;\n  p.yz = Rot2D (p.yz, 0.2 * fishAngI);\n  q = p;\n  q.z -= -0.6;\n  dBodyF = PrEllipsDf (q, vec3 (0.7, 0.8, 2.4));\n  q = p;\n  q.z -= -1.2;\n  q.yz = Rot2D (q.yz, fishAngI);\n  q.z -= -1.6;\n  dBodyB = PrEllipsDf (q, vec3 (0.35, 0.5, 2.5));\n  q.z -= -2.2;\n  q.yz = Rot2D (q.yz, 2. * fishAngI);\n  q.xz -= vec2 (0.5, -0.5);\n  q.xz = Rot2D (q.xz, 0.4);\n  dFinT = PrEllipsDf (q, vec3 (0.8, 0.07, 0.4));\n  q = p;\n  q.yz -= vec2 (-0.3, 1.7);\n  q.yz = Rot2D (q.yz, 0.1);\n  q.y = abs (q.y) - 0.04;\n  dMouth = PrEllipsDf (q, vec3 (0.25, 0.12, 0.6));\n  q = p;\n  q.yz -= vec2 (0.7, -1.);\n  q.yz = Rot2D (q.yz, 0.6);\n  dFinD = PrEllipsDf (q, vec3 (0.05, 1., 0.35));\n  q = p;\n  q.xy = Rot2D (q.xy, 0.8);\n  q.xz -= vec2 (0.7, -0.1);\n  q.xz = Rot2D (q.xz, 0.6);\n  dFinP = PrEllipsDf (q, vec3 (0.9, 0.04, 0.3));\n  q = p;\n  q -= vec3 (0.4, -0.1, 1.1);\n  dEye = PrEllipsDf (q, vec3 (0.11, 0.15, 0.15));\n  idObj = 2;\n  dMin = SmoothMin (dBodyF, dBodyB, 0.3);\n  dMin = SmoothMin (dMin, dFinT, 0.1);\n  dMin = SmoothMin (dMin, dMouth, 0.15);\n  dMin = SmoothMin (dMin, dFinD, 0.02);\n  dMin = SmoothMin (dMin, dFinP, 0.02);\n  if (dEye < dMin) idObj = 3;\n  dMin = SmoothMin (dMin, dEye, 0.01);\n  qHit = q;\n  return dMin / szFac;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  int idObjA;\n  dMin = dstFar;\n  q = p;\n  d = PrBoxDf (q - vec3 (0., -0.5 * pSize.y, 0.), 0.5 * pSize + vec3 (wWid, 0., wWid));\n  d = max (d, - PrBoxDf (q - vec3 (0., -0.5 * pSize.y + 0.05, 0.), 0.5 * pSize));\n  d = max (d, - PrBoxDf (q  - vec3 (0., fishPos.y, 0.), vec3 (0.5 * pSize.x + wWid - 0.1, 0.5, 0.5)));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  idObjA = idObj;\n  q = p - fishPos;\n  q.xz = Rot2D (q.xz, 0.5 * pi);\n  d = FishDf (q);\n  if (d < dMin) { dMin = d;  idObjA = idObj; }\n  idObj = idObjA;\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 50; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.02 * d, h));\n    d += 0.04;\n    if (sh < 0.05) break;\n  }\n  return sh;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  if (rd.y >= 0.) {\n    ro.xz += 2. * tCur;\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * (1. - max (rd.y, 0.)) +\n       0.1 * pow (max (dot (rd, sunDir), 0.), 16.);\n    col = mix (col, vec3 (0.8), clamp (0.2 + Fbm2 (0.1 *\n       (ro.xz + rd.xz * (100. - ro.y) / max (rd.y, 0.001))) * rd.y, 0., 1.));\n  } else {\n    ro -= (ro.y / rd.y) * rd;\n    col = 0.7 * mix (vec3 (0.3, 0.4, 0.1), vec3 (0.4, 0.5, 0.2), Noisefv2 (256. * ro.xz)) *\n         (1. - 0.1 * Fbm2 (4. * ro.xz));\n  }\n  return col;\n}\n\nvec3 ShGrid (vec2 p)\n{\n  vec2 q, sq, ss;\n  q = p;\n  sq = smoothstep (0.05, 0.1, abs (fract (q + 0.5) - 0.5));\n  q = fract (q) - 0.5;\n  ss = 0.3 * smoothstep (0.3, 0.5, abs (q.xy)) * sign (q.xy);\n  if (abs (q.x) < abs (q.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, 0.8 + 0.2 * sq.x * sq.y, ss.y);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, colW, colC, vn, q, rg;\n  vec2 cg;\n  float dstWat, dstObj, aRefl, s, sh;\n  bool isBg, isBase, uWat;\n  aRefl = 0.;\n  colW = vec3 (0.);\n  colC = vec3 (0.);\n  col = BgCol (ro, rd);\n  isBg = true;\n  isBase = false;\n  uWat = false;\n  if (ro.y > 0.) {\n    dstObj = ObjRay (ro, rd);\n    dstWat = WaveRay (ro, rd);\n    if (dstWat < min (dstObj, dstFar)) {\n      ro += rd * dstWat;\n      vn = WaveNf (ro);\n      aRefl = 0.5 * smoothstep (0.9, 1., 1. - pow (dot (- rd, vn), 5.));\n      colW = BgCol (ro, reflect (rd, vn));\n      rd = refract (rd, vn, 1. / 1.3);\n      dstObj = ObjRay (ro, rd);\n      ro += rd * dstObj;\n      isBg = false;\n      uWat = true;\n      if (dot (vn, sunDir) > 0.) {\n        q = ro - (ro.y / sunDir.y) * sunDir;\n        q.xz = abs (q.xz) - 0.5 * pSize.xz;\n        if (max (q.x, q.z) < 0.) colC = 0.3 * vec3 (0.9, 0.9, 1.) *\n           pow (max (0., dot (WaveNf (q), sunDir)), 128.);\n      }\n    } else if (dstObj < dstFar) {\n      ro += rd * dstObj;\n      q.xz = abs (ro.xz) - 0.5 * pSize.xz;\n      s = max (q.x, q.z);\n      if (ro.y < 0. && s > wWid - 0.01 || ro.y >= 0. && s > 0.5) col = BgCol (ro, rd);\n      else isBg = false;\n    }\n  } else {\n    ro -= (ro.y / rd.y) * rd;\n    q.xz = abs (ro.xz) - 0.5 * pSize.xz - 0.5;\n    if (abs (max (q.x, q.z) + 0.2) < 0.2) {\n      col = vec3 (0.6, 0.4, 0.1);\n      vn = vec3 (0., -1., 0.);\n      isBg = false;\n      isBase = true;\n    }\n  }\n  if (! isBg) {\n    sh = 1.;\n    if (! isBase) {\n      vn = ObjNf (ro);\n      if (idObj == 1) {\n        cg = (abs (vn.y) < 0.01) ? ((abs (vn.x) > 0.99) ? ro.zy : ro.xy) : ro.xz;\n        rg = ShGrid (4. * cg);\n        if (abs (vn.y) < 0.01) {\n          if (abs (vn.x) > 0.99) {\n            rg.xz *= sign (vn.x);\n            if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n            else vn.xz = Rot2D (vn.xz, rg.x);\n          } else {\n            rg.xz *= sign (vn.z);\n            if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n            else vn.zx = Rot2D (vn.zx, rg.x);\n          }\n        } else {\n          if (vn.y > 0.99) {\n            if (rg.x == 0.) vn.yz = Rot2D (vn.yz, rg.z);\n            else vn.yx = Rot2D (vn.yx, rg.x);\n          }\n        }\n        col = vec3 (0.6, 0.6, rg.y) * (1. - 0.2 * Fbm2 (64. * cg));\n      } else if (idObj == 2) {\n        col = vec3 (0.6, 1., 0.9) * (1. - 0.4 * smoothstep (-0.5, -0.4, vn.y));\n      } else if (idObj == 3) {\n        col = vec3 (1., 0.5, 0.2) * step (0.05, length (qHit.yz - vec2 (-0.02, 0.05)));\n      }\n      if (uWat) col *= vec3 (0.9, 1., 1.);\n      sh = 0.5 + 0.5 * ObjSShadow (ro, sunDir);\n    }\n    col = col * (0.5 + 0.5 * sh * max (dot (vn, sunDir), 0.)) +    \n       0.2 * sh * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    col+= colC;\n  }\n  return pow (clamp (mix (col, colW, aRefl), 0., 1.), vec3 (0.9));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  pSize = vec3 (9., 3., 6.);\n  wWid = 2.5;\n  fishPos = vec3 ((0.5 * pSize.x + 2.) * (2. * mod (0.1 * tCur, 1.) - 1.), -1.5, 0.);\n  fishAngI = 0.15 * sin (pi * tCur);\n  dstFar = 50.;\n  if (mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = pi * mPtr.y;\n  } else {\n    el = -0.35 * pi + 0.4 * pi * SmoothBump (0.39, 0.61, 0.1, mod (0.06 * tCur, 1.));\n    az = pi * (2. * mod (floor (0.07 * tCur), 2.) - 1.) *\n       SmoothBump (0.25, 0.75, 0.1, mod (0.07 * tCur, 1.));\n  }\n  el = clamp (el, -0.4 * pi, 0.2 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -15.);\n  rd = vuMat * normalize (vec3 (uv, 4.2));\n  sunDir = normalize (vec3 (1., 5., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r)\n{\n  return (length (p / r) - 1.) * min (r.x, min (r.y, r.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}