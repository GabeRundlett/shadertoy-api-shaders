{
    "Shader": {
        "info": {
            "date": "1493675133",
            "description": "Newton fractal for sin(z)-2",
            "flags": 0,
            "hasliked": 0,
            "id": "Md2yDG",
            "likes": 9,
            "name": "Newton Raphson Sin",
            "published": 3,
            "tags": [
                "fractal",
                "complex",
                "newton"
            ],
            "usePreview": 0,
            "username": "DonKarlssonSan",
            "viewed": 675
        },
        "renderpass": [
            {
                "code": "// Complex Number math by julesb\n// https://github.com/julesb/glsl-util\n\n#define PI 3.14159265\n\n#define cx_mul(a, b) vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)\n#define cx_div(a, b) vec2(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)))\n#define cx_modulus(a) length(a)\n#define cx_conj(a) vec2(a.x,-a.y)\n#define cx_arg(a) atan2(a.y,a.x)\n#define cx_sin(a) vec2(sin(a.x) * cosh(a.y), cos(a.x) * sinh(a.y))\n#define cx_cos(a) vec2(cos(a.x) * cosh(a.y), -sin(a.x) * sinh(a.y))\n\nvec2 cx_sqrt(vec2 a) {\n    float r = sqrt(a.x*a.x+a.y*a.y);\n    float rpart = sqrt(0.5*(r+a.x));\n    float ipart = sqrt(0.5*(r-a.x));\n    if (a.y < 0.0) ipart = -ipart;\n    return vec2(rpart,ipart);\n}\n\nvec2 cx_tan(vec2 a) {return cx_div(cx_sin(a), cx_cos(a)); }\n\nvec2 cx_log(vec2 a) {\n    float rpart = sqrt((a.x*a.x)+(a.y*a.y));\n    float ipart = atan(a.y,a.x);\n    if (ipart > PI) ipart=ipart-(2.0*PI);\n    return vec2(log(rpart),ipart);\n}\n\nvec2 cx_mobius(vec2 a) {\n    vec2 c1 = a - vec2(1.0,0.0);\n    vec2 c2 = a + vec2(1.0,0.0);\n    return cx_div(c1, c2);\n}\n\nvec2 cx_z_plus_one_over_z(vec2 a) {\n    return a + cx_div(vec2(1.0,0.0), a);\n}\n\nvec2 cx_z_squared_plus_c(vec2 z, vec2 c) {\n    return cx_mul(z, z) + c;\n}\n\nvec2 cx_sin_of_one_over_z(vec2 z) {\n    return cx_sin(cx_div(vec2(1.0,0.0), z));\n}\n\n\n////////////////////////////////////////////////////////////\n// end Complex Number math by julesb\n////////////////////////////////////////////////////////////\n\n\n// From Stackoveflow\n// http://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// My own additions to complex number math\n#define cx_sub(a, b) vec2(a.x - b.x, a.y - b.y)\n#define cx_add(a, b) vec2(a.x + b.x, a.y + b.y)\n#define cx_abs(a) sqrt(a.x * a.x + a.y * a.y)\nvec2 cx_to_polar(vec2 a) {\n    float phi = atan(a.x, a.y);\n    float r = sqrt(a.x * a.x + a.y * a.y);    \n    return vec2(r, phi); \n}\n    \n    \n// End utils, here comes the actual fractal\n\n// sin(z) - 2 \nvec2 f(vec2 z) {\n    vec2 sinz = cx_sin(z);\n    vec2 sinzminustwo = vec2(sinz.x - 2.0, sinz.y);\n    return sinzminustwo;\n} \n\n// f(z) derivated\n// cos(z)  \nvec2 fPrim(vec2 z) {\n    return cx_cos(z);\n}\n\nconst int maxIterations = 800;\nvec2 one = vec2(1, 0);\nvec3 newtonRapson(vec2 z) {\n  vec2 oldZ = z;\n  float s = 0.0;\n  for(int i = 0; i < maxIterations; i++){\n    z = cx_sub(z, cx_div(f(z), fPrim(z))); \n    if(abs(oldZ.x - z.x) < 0.00001 && abs(oldZ.y - z.y) < 0.00001) {\n      break;\n    }\n    \n    vec2 w = cx_div(one, cx_sub(oldZ, z));\n    float wAbs = cx_abs(w);\n    \n    s += exp(-wAbs);\n    oldZ = z;\n  }\n  return vec3(s, cx_to_polar(z));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // I have no clue about what I am doing\n    // Trial and error\n    // Magic numbers\n    // You are welcome\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 moved = vec2(uv.x - 1.0, uv.y-0.7);\n    float cs = cos(iTime/5.0);\n\tfloat sn = sin(iTime/5.0);\n    vec2 rotated = vec2(moved.x * cs - moved.y * sn, moved.x * sn + moved.y * cs);\n    vec3 result = newtonRapson(rotated);\n    float c = 0.9-result.x/float(maxIterations)*50.8;    \n    vec3 color = hsv2rgb(vec3(result.z + iTime/15.0, 1.0, c));    \n    fragColor = vec4(color, 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}