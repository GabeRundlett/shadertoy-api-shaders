{
    "Shader": {
        "info": {
            "date": "1626724818",
            "description": "Lattice with Voronoi cells. Uses LLL for lattice reduction. Modular Surface /  Space of Lattices\nControls:\na/z expand x-direction & contract y-direction (geodesic flow)\ns/x & f/v shear (horocycle flow)\nd/c rotate (rotation of unit tangent vector)\n\n\n",
            "flags": 48,
            "hasliked": 0,
            "id": "fllXzl",
            "likes": 10,
            "name": "Lattice Parametrization II",
            "published": 3,
            "tags": [
                "modularsurface"
            ],
            "usePreview": 0,
            "username": "spr",
            "viewed": 533
        },
        "renderpass": [
            {
                "code": "// MacOS Safari users need to turn on WebGL 2.0 in Experimental Features.\n\n\n// The MIT License\n// Copyright © 2021 René Rühr\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Fun fact: shear + opposite shear to produce a rotation (e.g. https://link.springer.com/content/pdf/10.1007/3-540-62005-2_26.pdf )\n//           Press s & v alternatingly\n\n\n// Acknowledgement: First Person hyperbolic disk suggested by Manfred.\n\n\nconst int sample_range = 5; \nconst float point_size = 0.1;\nconst float line_thickness = 0.01;\nconst float infty = 10000.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/pixel_per_unit;\n\n    vec3 color = vec3(0);\n    vec2 p1,p2;\n    float d1 = infty;\n    float d2 = infty;\n    \n    mat2 lattice;\n    lattice[0] = texelFetch( iChannel0, ivec2(0), 0 ).xy; // Lattice after Reduction from Buffer A\n    lattice[1] = texelFetch( iChannel0, ivec2(0), 0 ).zw; // \n    \n    vec2 z = texelFetch( iChannel1, ivec2(0), 0 ).zw; // Height from Buffer B\n    float cusp_zoom = min(z.y < 4.6 ? 1. : z.y*0.3, 11.);       // Used to zoom out in upper half plane, increase copies in the disk model, \n    int range = sample_range + 2*int(cusp_zoom);      // and increase the copies of the voronoi cell\n    \n    //Voronoi Window\n    if(fragCoord.x >= iResolution.x/2. && fragCoord.y >= iResolution.y/2.){ \n        vec2 uv = (fragCoord-vec2(0.75*iResolution.x,0.75*iResolution.y))/pixel_per_unit;\n        vec3 color_in;\n        for(int x = -range; x<=range; ++x){\n            for(int y = -range; y<=range; ++y){\n                if(x == 0 && y == 0) \n                    color_in = vec3(1,0,0);\n                else if(x == 0 && y == 1)\n                    color_in = vec3(0,1,0);\n                else if(x == 1 && y == 0)\n                    color_in = vec3(0,0,1);\n                else\n                    color_in = vec3(1);               \n                vec2 point = lattice[0]*float(x) + lattice[1]*float(y);\n\n                DrawPoint(color, color_in, uv, point, point_size);\n                ClosestPoints(p1, p2, d1, d2, uv, point);\n        }}\n        if(abs(dot(uv-0.5*(p1+p2), normalize(p2-p1)))<line_thickness) color = vec3(1);   // https://iquilezles.org/articles/voronoilines\n    } \n    //Disk Model Window\n    else if(fragCoord.x >= iResolution.x/2. && fragCoord.y <= iResolution.y/2.)\n    {\n        vec2 resolution = iResolution.xy/2.;\n        vec2 offset = vec2(0.75 * iResolution.x, 0.25*iResolution.y);\n        vec2 w = (fragCoord-offset)/resolution.x*4.; \n        \n        float arrow = sdArrow( w*40., vec2(0,0)*40., vec2(0,0)*50.-.3*vec2(0,-1)*40., 0.2, 1. );\n        arrow = arrow <= 0.1 ? 1. : 0.;\n        color = vec3(arrow); \n        \n        w = vec2(-w.y,w.x);\n\n        if(length(w)<=0.03){\n            color += vec3(1);\n        } else if(length(w)<1.){ \n            int number_of_max_translates = 10+int(cusp_zoom)*30; \n            ToHalfplane(w);\n            Moebius(inverse(lattice), w);\n                \n             \n            bool flip = false; // https://www.shadertoy.com/view/wdjyzh\n            int j=0;\n            for (;j<number_of_max_translates; ++j)\n            {\n                flip = !flip;\n                if(w.x > 0.5) w.x -= 1.;\n                else if(w.x < -0.5) w.x += 1.;\n                else if(length(w)<1.) CircleInversion(w);\n                else { break; }\n            }\n            color += j==0 || j==1 || j==2 ? vec3((j+1)%2,j,j%2) :vec3(flip);\n         } else if(length(w)<1.02){\n             color += vec3(1.);\n         }\n         \n    } \n    //Upper Half Plane Window\n    else{\n        vec2 dir = texelFetch( iChannel1, ivec2(0), 0 ).xy;    \n        vec2 resolution = vec2(iResolution.x*0.5, iResolution.y);\n        vec2 uv = cusp_zoom * 4.*fragCoord/resolution.x; uv.x -= 2.*cusp_zoom;\n\n\n        \n        if(length(z-uv) < 0.3){\n            if(length(z-uv) < 0.05)\n                color = vec3(1);\n            else{\n                //mat2 rot = mat2(0,1,-1,0);\n                float arrow = sdArrow( uv*40., z*40., z*40.-.3*dir*40., 0.1, 1. );\n                arrow = arrow <= 0.1 ? 1. : 0.;\n                color = vec3(arrow);     \n            }\n        }\n\n\n        float line_width = max(0.01, cusp_zoom*0.01);\n        int num_translates = 0;\n        for(int j = -num_translates; j<=num_translates; ++j){\n        vec2 st = uv + vec2(j,0);\n            if( abs(abs(st.x)-0.5) < line_width && length(st) >= 1.) \n                color = vec3(1);\n            else if(abs(length(st)-1.) < line_width) \n                color = vec3(1);\n        }\n       \n    }\n    \n    \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float pixel_per_unit = 100.;\n\n\n//Transformations\nmat2 e(){\n    return mat2(1,0,0,1);\n}\n\nvoid Rotate(inout mat2 A, in float theta){\n    mat2 k = mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n    A = k*A;\n}\n\nvoid Shear(inout mat2 A, in float s){\n    mat2 u = mat2(1,s,0,1);\n    A= u*A;\n}\nvoid ShearOpposite(inout mat2 A, in float s){\n    mat2 u = mat2(1,0,s,1);\n    A= u*A;\n}\n\nvoid Dilate(inout mat2 A, in float t){\n    mat2 a = mat2(t,0,0,1./t);\n    A= a*A;\n}\n\n\nvoid kan(inout mat2 k, inout mat2 A, inout mat2 n, in mat2 g)\n{\n    float a=g[0][0], b=g[1][0], c=g[0][1], d=g[1][1];\n    float t= sqrt(a*a+c*c);\n   \n    k[0] = vec2(a,c); k[1] = vec2(-c,a); k = k / t;\n    A=mat2(t,0,0,1./t);\n    n=mat2(1,(a*b+c*d)/(t*t),0,1);\n}\n\n\nvoid sl2inverse(inout mat2 g){\n    mat2 h = g;\n    g[0][0] = h[1][1];\n    g[1][1] = h[0][0];\n    g[1][0] = -h[1][0];\n    g[0][1] = -h[0][1];\n}\n\nvoid MoebiusAti(in mat2 g, inout vec2 z){//z=i -> di-b / -ci+a\n    sl2inverse(g);\n    float a=g[0][0], b=g[1][0], c=g[0][1], d=g[1][1];\n    z = vec2(a*c+b*d,1) / (c*c+d*d);\n}\n\nvoid Moebius(in mat2 g, inout vec2 z){// z -> az+b / cz+d  for a,b,c,d real\n    float a=g[0][0], b=g[1][0], c=g[0][1], d=g[1][1];\n    float x = a*c*dot(z,z)+b*d + (a*d+b*c)*z.x;\n    float y = z.y;\n    float denom = (c*c*dot(z,z)+d*d+2.*d*c*z.x);\n    z = vec2(x,y) / denom;\n    }\n    \n\nvoid ToHalfplane(inout vec2 z){// z -> -iz-i / z-1\n    float x=z[0], y=z[1];\n    float denom = x*x + y*y + 1. - 2.*x;\n    z = vec2(-2.*y, -x*x-y*y+1.) / denom;\n}\n\nvoid CircleInversion(inout vec2 z)\n{\n\tz.x = -z.x;\n\tz /= dot(z,z);\n}\n\nvoid HorizontalTranslation(inout vec2 z)\n{\n\tz.x = mod(z.x+0.5, 1.)-0.5;\n}\n\n\n\n\n//Lattice Reduction\n\nfloat ClosestInteger(float f)\n{\n    return floor(f+0.5);\n}\n\nvoid WeakReduce(inout mat2 A, inout mat2 gamma){\n    float mu = round( dot(A[0], A[1]) / dot(A[0],A[0]) );\n    A[1] -= mu * A[0];\n    mat2 u = mat2(1,-mu,0,1);\n    gamma = gamma*u;\n}\n\nvoid GramSchmidt(inout mat2 A){\n    float mu = dot(A[0], A[1]) / dot(A[0],A[0]);\n    A[1] -= mu * A[0];\n}\n\nvoid SwapColumns(inout mat2 A, inout mat2 gamma){\n     mat2 B = A;\n     A[0] = -B[1]; A[1] = B[0];\n     mat2 w = mat2(0,-1,1,0);\n     gamma = gamma*w;\n}\n\nbool IsReduced(in mat2 A){\n    GramSchmidt(A);\n    return dot(A[0],A[0]) <  4./3. * dot(A[1],A[1]);\n}\n\n\nvoid LLL(inout mat2 A, inout mat2 gamma){ //Lattice Reduction Algorithm\n    WeakReduce(A, gamma);\n    while(!IsReduced(A)){\n        SwapColumns(A, gamma);\n        WeakReduce(A, gamma);\n    }   \n}\n\n#define bug_fix 0.00001 \nvoid MakeShorter(inout mat2 A, inout mat2 gamma){ // Tries to find a shorter basis using at most one step.\n    if(dot(A[0],A[0]) > dot(A[1],A[1])+bug_fix) {\n        SwapColumns(A, gamma); \n        return;}    \n    mat2 B = A, C = A;\n    B[1] -=  B[0];\n    if(dot(A[1],A[1]) > dot(B[1],B[1])){ \n        A = B; \n        gamma = gamma*mat2(1,-1,0,1);\n        return;}\n    C[1] +=  C[0];\n    if(dot(A[1],A[1]) > dot(C[1],C[1])){\n        A = C;\n        gamma = gamma*mat2(1,1,0,1);\n        return;}\n}\n\n\n\n\nfloat DrawCircle(in vec2 uv, float radius){\n    return abs(length(uv)-radius) < 0.01 ? 1. : 0.;\n}\n\n\n\n\n\n\n\n\n\nvoid DrawPoint(inout vec3 color_out, in vec3 color_in, in vec2 pixel, in vec2 center, in float radius){\n    vec2 point = pixel-center;\n    if( dot(point, point) <= radius*radius){\n        color_out = color_in;\n    }\n}\n\n//Checks if \"point\" is closer to \"pixel\" compared to the currently closest points p1,p2.\nvoid ClosestPoints(inout vec2 p1, inout vec2 p2, inout float d1, inout float d2, in vec2 pixel, in vec2 point){\n    float d = distance(pixel, point);\n    if(d < d2){\n        if(d<d1){\n            d1 = d;\n            p1 = point;\n        }else{\n            d2 = d;\n            p2 = point;\n        }\n    }\n}\n\n\n\n\n\n\n\n// https://www.shadertoy.com/view/slj3Dd\n// The MIT License\n// Copyright © 2021 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Distance to an arrow\n// The arrow goes from a to b. It's thickness is w1. The arrow\n// head's thickness is w2.\nfloat sdArrow( in vec2 p, vec2 a, vec2 b, float w1, float w2 )\n{\n    const float k = 3.0;   // arrow head ratio\n\tvec2  ba = b - a;\n    float l2 = dot(ba,ba);\n    float l = sqrt(l2);\n\n    // pixel setup\n    p = p-a;\n    p = mat2(ba.x,-ba.y,ba.y,ba.x)*p/l;\n    p.y = abs(p.y);\n    vec2 pz = p-vec2(l-w2*k,w2);\n\n    // === distance (four segments) === \n\n    vec2 q = p;\n    q.x -= clamp( q.x, 0.0, l-w2*k );\n    q.y -= w1;\n    float di = dot(q,q);\n    //----\n    q = pz;\n    q.y -= clamp( q.y, w1-w2, 0.0 );\n    di = min( di, dot(q,q) );\n    //----\n    if( p.x<w1 ) // conditional is optional\n    {\n    q = p;\n    q.y -= clamp( q.y, 0.0, w1 );\n    di = min( di, dot(q,q) );\n    }\n    //----\n    if( pz.x>0.0 ) // conditional is optional\n    {\n    q = pz;\n    q -= vec2(k,-1.0)*clamp( (q.x*k-q.y)/(k*k+1.0), 0.0, w2 );\n    di = min( di, dot(q,q) );\n    }\n    \n    // === sign === \n    \n    float si = 1.0;\n    float z = l - p.x;\n    if( min(p.x,z)>0.0 ) //if( p.x>0.0 && z>0.0 )\n    {\n      float h = (pz.x<0.0) ? w1 : z/k;\n      if( p.y<h ) si = -1.0;\n    }\n    return si*sqrt(di);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//Lattice Reduction (right ride)\n\nmat2 lattice = mat2(1,0,0,1);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(1.0,0.0,0.0,1.0);\n    \n    vec2 uv = (fragCoord-0.5*iResolution.xy)/pixel_per_unit;\n    \n    if(fragCoord == vec2(0.5) || fragCoord == vec2(1.5)){\n        \n        if(iFrame > 1){\n            lattice[0] = texelFetch( iChannel0, ivec2(0), 0 ).xy;\n            lattice[1] = texelFetch( iChannel0, ivec2(0), 0 ).zw;\n        }\n    \n        \n        if( texelFetch(iChannel1,ivec2(65,0),0).x > 0.){            \n            Dilate(lattice, 1.01);\n        } \n        else if( texelFetch(iChannel1,ivec2(90,0),0).x > 0.){           \n            Dilate(lattice, 1./1.01);\n        }\n        else if( texelFetch(iChannel1,ivec2(83,0),0).x > 0.){            \n            Shear(lattice, 0.02);\n        } \n        else if( texelFetch(iChannel1,ivec2(88,0),0).x > 0.){            \n            Shear(lattice, -0.02);\n        }\n        else if( texelFetch(iChannel1,ivec2(68,0),0).x > 0.){            \n            Rotate(lattice, 0.05);\n        } \n        else if( texelFetch(iChannel1,ivec2(67,0),0).x > 0.){            \n            Rotate(lattice, -0.05);\n        }\n        else if( texelFetch(iChannel1,ivec2(70,0),0).x > 0.){            \n            ShearOpposite(lattice, 0.02);\n        } \n        else if( texelFetch(iChannel1,ivec2(86,0),0).x > 0.){            \n            ShearOpposite(lattice, -0.02);\n        }\n        \n        mat2 gamma = e();\n        LLL(lattice, gamma);\n        //MakeShorter(lattice, gamma);\n        \n        \n        if(fragCoord == vec2(0.5))\n            fragColor = vec4(lattice[0], lattice[1]);\n        else if(fragCoord == vec2(1.5))\n            fragColor = vec4(gamma[0], gamma[1]);\n    }\n     \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0,0,1,1);\n\n    if(fragCoord == vec2(0.5)){\n        mat2 lattice;\n        lattice[0] = texelFetch( iChannel0, ivec2(0), 0 ).xy;\n        lattice[1] = texelFetch( iChannel0, ivec2(0), 0 ).zw;\n        \n    \n        mat2 K,a,n;\n        kan(K,a,n,lattice);\n        \n        vec2 z;\n        MoebiusAti(lattice,z);\n           \n        fragColor = vec4((K*K)[1], z);\n\n    }\n              \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}