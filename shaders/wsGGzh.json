{
    "Shader": {
        "info": {
            "date": "1569687450",
            "description": "First time I try making my code very short, and first time I try to comment graphics code a lot",
            "flags": 0,
            "hasliked": 0,
            "id": "wsGGzh",
            "likes": 1,
            "name": "Truchet Labyrinths",
            "published": 3,
            "tags": [
                "truchet",
                "commented",
                "short"
            ],
            "usePreview": 0,
            "username": "clepirelli",
            "viewed": 386
        },
        "renderpass": [
            {
                "code": "#if 0\n\n#define random(a) fract(dot(vec2(sin(a*194.0154)),vec2(104.9419,74.2918)))\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord){\n\t\n    //normalized screen coordinates adjusted for aspect ratio\n    vec2 UV = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    //multiplied by grid size (9)\n    UV *= 9.;\n    \n    //random seed : will seed the random orientation of the truchet tiles\n    //flooring the uv gets which tile we're in\n    //time (slowed down) plus .5 (to avoid 0 at start)\n    vec2 randomSeed = floor(UV)*(.5+floor(iTime));\n\t\n    //fractional part of UV = where in the tile we are\n    UV=fract(UV)-.5;\n    \n    //changing the sign of UV.x flips in the x axis\n    //50% chance of the sign being changed\n    //seed+1 : x and y aren't affected by same random \n    if(random(randomSeed+1.)>.5)\n    {\n        UV.x*=-1.;\n    }\n    \n    //same thing for UV.y\n    if(random(randomSeed)>.5)\n    {\n        UV.y*=-1.;\n    }\n\t\n    \n    \n    //UV.x+UV.y -> negative -.5 at bottom left, .5 at top right\n    //abs to remove negative\n    float diagonalGradient = abs(UV.x+UV.y);\n    \n\t//line is where gradient is very small\n\tif(diagonalGradient < .01)\n\t{\n        fragColor = vec4(.0);\n    } else \n\t{\n        fragColor = vec4(1.0);\n\t}\n}\n\n#else\n//short(?) version\n\n#define r(a) fract(dot(vec2(sin(a*194.154)),vec2(104.919,74.218)))\nvoid mainImage(out vec4 a,vec2 b){\nvec3 i=iResolution;\nvec2 c=9.*(b-.5*i.xy)/i.y;\nvec2 n=floor(c)*(.5+floor(iTime));\nc=fract(c)-.5;\nc.x*=r(n+1.)>.5?-1.:1.;\nc.y*=r(n)>.5?-1.:1.;\na+=abs(c.x+c.y)<.01?.0:1.;\n}\n\n#endif",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}