{
    "Shader": {
        "info": {
            "date": "1674075673",
            "description": "My first shader, watching the fractals play.",
            "flags": 0,
            "hasliked": 0,
            "id": "DlSGDt",
            "likes": 2,
            "name": "Fractal Play",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "QuantumSuper",
            "viewed": 295
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Fractals\n    // SETTINGS\n    float noiseShift = 4.0; //default 0; ?range -50..50\n    float spaceWarp = 0.1; //default 0; ?range 0..10\n    float digiZoom = 10.0; //default 1; ?range 1..10\n    float edgeTrueness = 1.0; //default 1; ?range 0.001..1000\n    float desat = 0.6; //default 0; range 0..1\n    float brightness = 1.1; //default 1; ?range 0..5\n    float colorShiftSpeed = 0.01; //default 0; ?range -0.01..0.01\n    float speedFactor = 0.3;\n\n    // Time renormalization\n    float time = speedFactor*iTime;\n    \n    // Normalized true-scaling pixel coordinates\n    vec2 p = (2.*fragCoord-iResolution.xy) / max(iResolution.x, iResolution.y);\n\n    // Randomize settings (optional)\n    noiseShift *= sin(time*0.1);\n    spaceWarp *= abs(sin(time*0.05));\n\n    // Fractal algorithm\n    float d = 0.;\n    float n = 0.;\n    vec2 c = vec2(0.0 + 0.66*sin(time), 0.1 + 0.9*cos(time)); //propagation vector, sensitive\n    for (int i=0; i<200; i++)\n    {\n        p = vec2(p.x*p.x - p.y*p.y, (spaceWarp+1.0)*2.0*p.x*p.y)+c; //imaginary p, p'=p*p+c\n        d = length(p) + noiseShift;\n        n += digiZoom*0.0002/d;\n        if (d > edgeTrueness*200.0) break; //no convergence\n    }\n    n = fract(n+colorShiftSpeed*time); //shift colors\n    vec3 col = abs(sin(n*vec3(99,66,33))); //define colors\n    \n    // Desaturation & Brightness\n    float luma = dot(col,vec3(0.3, 0.6, 0.1));\n    col = brightness*(col + desat*(luma-col));\n\n    // Output\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}