{
    "Shader": {
        "info": {
            "date": "1542388467",
            "description": "Click and hold to steer the flock.\nEach bird creates a downward dent in a field. The height of the field = the speed each bird travels at. Birds try to travel down the slope of the field. When the height becomes negative the birds go the other direction.",
            "flags": 32,
            "hasliked": 0,
            "id": "MtVfWz",
            "likes": 24,
            "name": "Bird Flock Simulation",
            "published": 3,
            "tags": [
                "simulation",
                "particles",
                "field",
                "buffer",
                "flock",
                "ai",
                "flocking"
            ],
            "usePreview": 0,
            "username": "Hullburg",
            "viewed": 1309
        },
        "renderpass": [
            {
                "code": "// Draw.\n\n\n#define birdSize 0.00002\n\n\n/*\n// Draw field\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ((fragCoord*2. - iResolution.xy)/iResolution.y)*scale;\n    \n    vec2 p1 = vec2(0);\n    vec2 p2 = ((iMouse.xy*2. - iResolution.xy)/iResolution.y)*scale;//vec2(3, 0);\n    \n    float hMax = 2.;\n    \n    float d1 = distance(uv, p1);\n    float val1 = 2./d1 - 1.;//1./(d1 + 1./hMax) - 1.;\n    \n    float d2 = distance(uv, p2);\n    float val2 = 2./d2 - 1.;//1./(d2 + 1./hMax) - 1.;\n    \n    fragColor.r = abs(val1 + val2) / 2.;\n    //fragColor.g = abs(val1);\n    //fragColor.b = abs(val2);\n}*/\n\nvoid mainImage(out vec4 col, in vec2 coord) {\n    //col = texelFetch(iChannel0, ivec2(coord), 0);\n    //return;\n    \n    /*vec2 uv = changeInterval(\n        vec2(0), iResolution.xy,\n        coord,\n        -iResolution.xy/iResolution.y, iResolution.xy/iResolution.y\n    );*/\n    vec2 uv = screenInterval(coord);\n    \n    for (int x = 0; x < birdsRes.x; x++) {\n        for (int y = 0; y < birdsRes.y; y++) {\n            ivec2 bird = ivec2(x, y);\n            vec4 texel = texelFetch(iChannel0, bird, 0);\n            vec2 pos = texel.rg;\n            \n            if (lsqr(pos - uv) <= birdSize) {\n                vec4 texel = texelFetch(iChannel1, bird, 0);\n                \n                col.r = texel.r > 0.5 ? 1. : 0.;\n                col.g = texel.g > 0.5 ? 1. : 0.;\n                //col.b = texel.b > 0.5 ? 1. : 0.;\n                if (col.r + col.g + col.b < 0.5) {\n                    col.g = 0.5;\n                    col.b = 1.;\n                }\n                \n                return;\n            }\n            \n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Birds.\n// Bird pos is .rg, vel is .ba\n\n\nconst bool compensateForFPS = true;\n//#define ignoreRange 1.\n#define speedLimit 0.05\t// decreases fps if low\n#define acceleration 0.02\t// 0 to 1\n#define spacing 0.3\n#define speedScale 0.1\n#define follow 50.\n\n\nvec4 spawn(ivec2 bird, sampler2D image) {\n    ivec2 res = textureSize(image, 0);//= ivec2(iChannelResolution[1].xy);\n    vec4 texel = texelFetch(iChannel1, Mod(bird, res), 0);\n\n    return vec4(\n        (texel.rg * 2. - 1.),\n        vec2(0)\t//texel.ba\n    );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2(fragCoord);\n    if (px.x >= birdsRes.x || px.y >= birdsRes.y) {\t// draw inside res only\n        return;\n    }\n    if (iFrame < 2) {\t// init\n        fragColor = spawn(px, iChannel0);\n        return;\n    }\n        \n        \n    vec4 prevTexel = texelFetch(iChannel0, px, 0);\n    vec2 oldPos = prevTexel.rg;\n    vec2 oldV = prevTexel.ba;\n        \n    vec2 newV = vec2(0);\t// new velocity\n    \n    for (int x = 0; x < birdsRes.x; x++) {\n        for (int y = 0; y < birdsRes.y; y++) {\n            ivec2 px2 = ivec2(x, y);\n            if (px2 == px) {\t// skip this\n\t\t\t\tcontinue;\n            }\n            \n            vec4 texel = texelFetch(iChannel0, px2, 0);\n            \n            vec2 pos = texel.rg;\n            vec2 v = pos - oldPos;\t// vector's length = distance, points from this to that\n            float sqr = lsqr(v);\t// square distance\n                        \n            v /= sqr;\t// dist/dist^2 = 1/dist. 1/dist is a curve that can be combined w/ other curves to create multiple peaks.\n            //v *= 2.;\t// for flip\n            v *= spacing;\n            if (lsqr(v) > 1.) {\t// fold so max is 1.\n                v *= -1.;\n            }\n            /*changeInterval(\n            \tvec2(0), vec2(1),\n                diff,\n                vec2(-1), vec2(1)\n            );*/\t// make negative near p\n            \n            newV += v;\t// add it to average\n            \n            vec2 vel = texel.ba;\n            \n            //newV += vel*sqr*follow;\n        }\n    }\n    newV /= float(birdsRes.x*birdsRes.y);\t// For average\n    \n    // Mouse controls\n    if (mouseDown) {\n        vec2 v = -mh + oldPos;\n        v /= /*mod(iTime, 16.) > 8.*/ true ? lsqr(v) : length(v) * 1./2.;\n        v *= 0.2;\n        newV += false && mod(iTime, 8.) > 4. ? v : -v;\n    }\n    \n    // Adjust speed\n    newV *= speedScale;\n    if (lsqr(newV) > speedLimit*speedLimit) {\t// Clamp, try to avoid this for sqrt reasons.\n        newV = normalize(newV)*speedLimit;\n    }\n    float Dt = compensateForFPS ? iTimeDelta : 1./60.;\n    newV = mix(oldV, newV, acceleration);\t// wrong if fps decreases\n    //newV = oldV + acceleration*Dt;\t// v = v_0 + a*delta(t)\n    //newV *= compensateForFPS ? iTimeDelta : 1./60.; //s = vt\n    \n    //newV = mix(vec2(0, 1), newV, clamp(oldPos.y * 10., 0., 1.));\n    \n    vec2 newPos = oldPos + newV;//*Dt;\n    //fragColor.rg = oldPos + newV;//clamp( oldPos + newV*1., -(scale/2.)*(iResolution.xy/iResolution.y), (scale/2.)*(iResolution.xy/iResolution.y) );\n    //fragColor.ba = newV;\n    \n    // Make sure vectors are reasonable.\n    //fragColor.rg = mod(fragColor.rg + iResolution.xy/iResolution.y, 2.*(iResolution.xy/iResolution.y)) - iResolution.xy/iResolution.y;\n    // Bounce on edge of screen\n    if ( abs(newPos.x) > aspectRatio ) {\n        newPos.x = sign(newPos.x)*aspectRatio*0.99;\n        newV.x = 0.;\n    }\n    if ( abs(newPos.y) > 1. ) {\n        newPos.y = sign(newPos.y)*0.99;\n        newV.y = 0.;\n    }\n    if (\n        isnan(newPos.x) || isinf(newPos.x) ||\n        isnan(newPos.y) || isinf(newPos.y)\n    ) {\n        fragColor = spawn(px, iChannel0);\n        return;\n    }\n    \n    fragColor.rg = newPos;\n    fragColor.ba = newV;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/** TODO:\n * Fix bird count limit\n * Add circle of influence / max distance for bird to pull\n * compensate for fps in acceleration\n*/\n\n\n\nconst ivec2 birdsRes = ivec2(70, 20);//ivec2(10, 38);\t// Amount of birds.\nconst float scale = 4.;\n\n\n#define changeInterval(omin, omax, val, nmin, nmax) ( ((val - omin)/(omax - omin))*(nmax - nmin) + nmin )\n#define screenInterval(pos) ( (pos*2. - iResolution.xy)/iResolution.y )\n#define aspectRatio ( iResolution.x/iResolution.y )\n#define mh screenInterval(iMouse.xy)\n#define mouseDown ( iMouse.z > 0. )\n\n#define Mod(a, b) (a%b + b)%b\t// works for negative\n\nfloat lsqr(vec2 v) {\n    return dot(v, v);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}