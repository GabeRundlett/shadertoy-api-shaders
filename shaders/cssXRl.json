{
    "Shader": {
        "info": {
            "date": "1669404043",
            "description": "there's a million things you can do with this - super fun and a little bit laggy\n\nSimpler version to play with: https://www.shadertoy.com/view/ddsSzl\n",
            "flags": 0,
            "hasliked": 0,
            "id": "cssXRl",
            "likes": 8,
            "name": "2.5D Ancient Confetti",
            "published": 3,
            "tags": [
                "grid",
                "spiral",
                "layers"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define pal(t,b) .5+.5*cos(2.*pi*(t+b))\n\nfloat seg(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\n// Distance function for each cell (ipos unused)\nfloat dist(vec2 ipos, vec2 fpos, vec2 uv, float io, float t) {\n    float r = 0.25 + 0.25 * cos(4. * length(uv) - t);\n    vec2  p = r * vec2(cos(io + t), sin(io + 2. * t));\n    float c = 0.5 + 0.5 * cos(10. * length(uv) - 2. * t);\n    return seg(fpos, c * uv, c * p);\n}\n\n// Min distance for this cell and neighbour cells\nfloat dist2(vec2 ipos, vec2 fpos, vec2 uv, float io, float t) {\n    float d = 1e5;\n    for (float i = -1.; i <= 1.; i++) \n        for (float j = -1.; j <= 1.; j++) \n            d = min(d, dist(ipos, fpos - vec2(i,j), uv, io, t));\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n    vec2 ouv = (fragCoord - 0.5 * res) / res.y;\n    \n    float t = iTime;  \n    // Unused time stuff\n    //float l = 2. * log(1. + length(ouv));\n    //float f = pow(fract(t - l), 2.);\n    //t = floor(t - l) + smoothstep(0.,1.,f);\n    //t = mix(t, iTime, 1.-exp(-0.25 * iTime));\n    //t = floor(t) + smoothstep(0., 1., fract(t));    \n    float th = tanh(0.25 * t);\n\n    float s = 0.;\n    \n    // Loop different layers (grids)\n    float n = 40.; // 50. looks better maybe\n    for (float i = n - 1.; i >= 0.; i--) {\n        float io = 2. * pi * i / n;     \n        float xp = 1. - exp(-0.12 * i);        \n        \n        // Rotate each layer (oscillate between 2 rotation modes)\n        float c = 0.5 + 0.5 * cos(io - t);\n        vec2 uv1 = ouv * rot(0.2 * t + io);\n        vec2 uv2 = ouv * rot(0.4 * t + io * 10.);\n        float c2 = 0.5 - 0.5 * thc(3., 0.1 * io - 0.25 * t);\n        vec2 uv = (1. + 0.2 * c * i) * mix(uv1, uv2, c2);\n        \n        // Scaled grid for each layer\n        float sc = 1. + 0.4 * sqrt(i);\n        vec2 ipos = floor(sc * uv) + 0.5;\n        vec2 fpos = sc * uv - ipos;\n\n        // Distance function for each cell (on each layer)\n        float d = dist2(ipos, fpos, uv, io, t);\n        float r = 0.13 * (0.75 + 0.25 * cos(io + t));\n        float k = (1. + 3. * xp) * sc / res.y;\n        //float s2 = smoothstep(-k, k, -abs(-d + r) + 0.01);\n        float r2 = 0.05 * cos(10. * d + uv.x * (20. + 3. * i));\n        float s2 = smoothstep(-k, k, -abs(-d + r) + r2);\n\n        // Add stuff to s (can replace float with vec3, and s with col)\n        s *= 1. - s2; // s = mix(s, 0., s2);\n        float fog = exp(0.02 - 0.5 * dot(uv,uv));      \n        s = mix(s, fog, (0.5 - 0.4 * th) * xp);\n    }\n    \n    s = clamp(s, 0., 1.); \n    vec3 col = vec3(s);\n   \n    // Contrast mode\n    //col = vec3(pow(4.*s*(1.-s),2.));\n   \n    // Blood mode\n    //col *= pal(0.15 * length(ouv), vec3(0,1,2)/3.);\n    \n    // Yellow mode\n    col *= pal(0.15 * length(ouv), 0.5 * vec3(0,1,2)/3.);\n    \n    // Gamma correction\n    col = pow(col, vec3(1./2.2));\n    \n    // Black bars at start\n    col *= step(abs(ouv.x), 0.52 * res.x/res.y * th);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}