{
    "Shader": {
        "info": {
            "date": "1554915445",
            "description": "nice",
            "flags": 0,
            "hasliked": 0,
            "id": "3sSSDV",
            "likes": 2,
            "name": "123abc",
            "published": 3,
            "tags": [
                "raymarchin"
            ],
            "usePreview": 0,
            "username": "alighazi",
            "viewed": 321
        },
        "renderpass": [
            {
                "code": "#define MAX_DIST 100.\n#define SURF_DIST 0.01\n#define MAX_STEPS 100\n\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat dist(vec3 p){\n    float an = sin(iTime*2.);\n    float an2 = sin(iTime*3.);\n    vec4 sph = vec4(0, 2.+ an, 6, 1);\n    float sphDist = length(p - sph.xyz) - sph.w;\n    float planeDist = p.y;\n    float boxDist = sdTorus(p-vec3(0,1.,6.), vec2(.5+0.5*an2, 0.5));\n    \n    return min(min(sphDist, planeDist), boxDist);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd){\n\tfloat dO = 0.;\n    \n    for(int i=0; i<MAX_STEPS; i++){\n    \tvec3 p = ro + rd*dO;\n        float d = dist(p);\n        dO += d;\n        if(d <= SURF_DIST || dO > MAX_DIST) break;                   \n    }\n    return dO;\n}\n\nvec3 calcNormal( in vec3 p ) // for function f(p)\n{\n    const float eps = 0.0001; // or some other value\n    const vec2 h = vec2(eps,0);\n    return normalize( vec3(dist(p+h.xyy) - dist(p-h.xyy),\n                           dist(p+h.yxy) - dist(p-h.yxy),\n                           dist(p+h.yyx) - dist(p-h.yyx) ) );\n}\n\nfloat getLight( in vec3 p){\n    vec3 lightPos = vec3(1.+5.*cos(iTime), 7, 5.+5.*sin(iTime));    \n    vec3 lightDir = normalize(lightPos - p);\n    vec3 normal = calcNormal(p);\n    float dif = dot(normal, lightDir);\n    \n    float d = rayMarch(p+ normal*SURF_DIST*2., lightDir);\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif*0.9+0.05;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv= (fragCoord - 0.5*iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(0., 2., 0.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n    \n    vec3 d = vec3(rayMarch(ro, rd)); \n    vec3 p = ro + rd* d;\n    \n    float light = getLight(p);    \n    col = vec3(light);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}