{
    "Shader": {
        "info": {
            "date": "1717226174",
            "description": "configurable pixel spiral galaxy",
            "flags": 0,
            "hasliked": 0,
            "id": "XXKGzz",
            "likes": 12,
            "name": "pixel galaxy",
            "published": 3,
            "tags": [
                "pixel",
                "spiral",
                "galaxy"
            ],
            "usePreview": 0,
            "username": "technowizard",
            "viewed": 151
        },
        "renderpass": [
            {
                "code": "const float a=1.0;\nconst float b=.1759;\nconst float PI=3.14159265359;\n#define THICKNESS .11\n#define ARMS 4.\n#define GRID 96.\n#define COLORS 2.\n#define STARS 2.\n#define SPEED 1.5\n\nmat2 Rot(float a){\n    float s= sin(a), c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34,456.821));\n    p += dot(p,p+45.32);\n    return fract(p.x*p.y);\n}\n\nfloat spiralSDF(vec2 p,vec2 c, float phase){\n    p = p - c;\n    float t=atan(p.y, p.x) + phase;\n    float r=length(p.xy);\n    float n=(log(r/a)/b-t)/(2.*PI);\n\n    // Cap the spiral\n    float upper_r=a*exp(b*(t+2.*PI*ceil(n)));\n    float lower_r=a*exp(b*(t+2.*PI*floor(n)));\n    return min(abs(upper_r-r),abs(r-lower_r));\n}\n\n\n\nfloat Star(vec2 uv, float m, float size){\n    vec2 center = uv+vec2(fract(m),fract(m*20.));\n    float l = length((center));\n    float v = 1.;\n    // vertical trail\n    v += max(0.,1.-abs(center.x*132.));\n    // horizontal trail\n    v += max(0.,1.-abs(center.y*132.));\n    \n    float brightness = ((sin(iTime+6.283*fract(m*132.4))/2.+.5)*.01+.008)*size;\n    v *= brightness/l;\n    // add falloff\n    v*= smoothstep(.5,0.1,l);\n    v = max(0.,v);\n    return v;\n}\n\nvoid mainImage(out vec4 O,vec2 I)\n{\n    vec2 R=iResolution.xy;\n    vec2 uv=(2.*I-R)/R.y;\n    vec2 c = vec2(0.0,0.0);\n    mat2 rotation = Rot(-3.14159/12.);\n    // pixelate\n    uv = floor(uv*GRID)/GRID;\n     \n    // per pixel random\n    float n = (Hash21(uv)/2.-0.5);\n    \n    float r = length(uv);\n    \n    vec2 uv0 = uv;\n    // warp\n    uv = (uv*rotation*vec2(1.,7.));\n    \n    float t=1.0-THICKNESS;\n    float v=0.;    \n    float phase = 2.*3.14159/ARMS;\n    for(float i = 0.;i<ARMS;i++){\n        float d = 01.-spiralSDF(uv,vec2(c),.3*SPEED*iTime+phase*i);\n        // Alter distance for a satisfying visual\n        float spiral = smoothstep(t,1.,d);//;pow(d, 1.32) / 0.23;\n        // add falloff away from center\n        float falloff = smoothstep(.3,.5,1.-length(uv)+.5);\n        //v+= falloff;\n        // add pulsing effect to falloff\n        falloff *=(cos((.1323*SPEED*iTime+phase*i))*.8 + 1.2);\n        // add to total\n        spiral *= falloff;\n        v += spiral;\n    }\n    // add depth\n    \n    // add LAZOR\n    \n    float beam = smoothstep(.93,1.,max(0.,1.-length(uv.x)));\n    beam*= sin((SPEED*.4*iTime+.6-abs(-4.-uv.y))*3.14)/8.+.75;\n    float trim = max(0.,(1.-length((uv.y-.9)/6.)));\n    v+=(beam*trim)*(.8+sin(iTime/2.)/8.);\n    /**/\n    \n    \n    // add stars\n    float star = 0.;\n    //v += Star(uv1,0.128);\n    \n    for(float layer = 0.;layer<STARS;layer++){\n        vec2 uv1 = fract(uv0*(layer+1.))-1.; \n        vec2 id = floor(uv0*(layer+1.));\n        for(int y=-1;y<=1;y++){\n            for(int x=-1;x<=1;x++){\n                vec2 starOffset = vec2(x,y);\n                float m = Hash21(id+starOffset+layer/STARS);\n                float brightness = (1.-layer/STARS);\n                v += Star(uv1-starOffset,m,brightness)*0.5;\n            }\n        }\n    }/**/\n    \n    // add noise\n    v*=n*.9+.5;\n    \n    \n    float colorOffset = COLORS/(COLORS+1.);\n    // restrict palette\n    v = floor(v*COLORS+colorOffset)/COLORS;\n    O.rgb = vec3(v);//*vec3(1.,.4,.6);//vec3(.35,.62,.96);\n    //O.g = sin((iTime+.6-abs(-4.-uv.y))*3.14)/2.+.7;\n    // O.r=n+0.5;\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}