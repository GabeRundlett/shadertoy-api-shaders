{
    "Shader": {
        "info": {
            "date": "1659725467",
            "description": "CC0: Bouncing ball and colorful logo\nUsually I go for colorful background and muted colors in foreground\nThis time I tried to reverse it. I thought the results were good enough to share.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "NldyDH",
            "likes": 35,
            "name": "Bouncing ball and colorful logo",
            "published": 3,
            "tags": [
                "2d",
                "3d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 398
        },
        "renderpass": [
            {
                "code": "// CC0: Bouncing ball and colorful logo\n// Usually I go for colorful background and muted colors in foreground\n// This time I tried to reverse it. I thought the results were good enough to share.\n\n// Try COLOR0 to COLOR5 for different color schemes of varying success\n#define COLOR4\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float bstart = 0.0;\nconst float bpm    = 120.0;\nconst float bhz    = bpm/60.0;\nfloat btime(float n) {\n  return bhz*n*8.0;\n}\n\nfloat beat(float tm) {\n  return 1.0*smoothstep(0.0, 1.0, cos(TAU*(tm-bstart)*bhz));\n}\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nconst float glimglam_corner0 = 0.02;\nconst float glimglam_corner1 = 0.075;\nconst float glimglam_topy    = 0.0475+glimglam_corner0*0.5;\nconst float glimglam_smoother= 0.0125;\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat corner(vec2 p) {\n  vec2 v = min(p, vec2(0));\n  return length(max(p, vec2(0))) + max(v.x, v.y);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat roundedBox(vec2 p, vec2 b, vec4 r) {\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nfloat glimglam_bar(vec2 p) {\n  vec2 pbar = p;\n  pbar.y -= glimglam_topy;\n  return abs(pbar.y)-glimglam_corner0;\n}\n\nfloat glimglam_a(vec2 p) {\n  p.x = abs(p.x);\n  float db = roundedBox(p, vec2 (0.19, 0.166), vec4(glimglam_corner1, glimglam_corner0, glimglam_corner1, glimglam_corner0));\n  float dc = corner(p-vec2(0.045, -0.07))-glimglam_corner0;\n\n  float d = db;\n  d = max(d, -dc);\n\n  return d;\n}\n\nfloat glimglam_c(vec2 p) {\n  p = -p.yx;\n  float db = roundedBox(p, vec2 (0.166, 0.19), vec4(glimglam_corner1, glimglam_corner0, glimglam_corner1, glimglam_corner0));\n  p.x = abs(p.x);\n  float dc = corner(p-vec2(0.05, glimglam_topy))-glimglam_corner0;\n\n  float d = db;\n  d = max(d, -dc);\n\n  return d;\n}\n\nfloat glimglam_e(vec2 p) {\n  p = -p.yx;\n  float db = roundedBox(p, vec2 (0.166, 0.19), vec4(glimglam_corner0, glimglam_corner0, glimglam_corner0, glimglam_corner0));\n\n  float dl = abs(p.x-(0.075-glimglam_corner0))-glimglam_corner0;\n  float dt = p.y-glimglam_topy;\n\n  float d = db;\n  d = max(d, -pmax(dl,dt, glimglam_smoother));\n\n  return d;\n}\n\nfloat glimglam_l(vec2 p) {\n  float db = roundedBox(p, vec2 (0.175, 0.166), vec4(glimglam_corner0, glimglam_corner0, glimglam_corner0, glimglam_corner1));\n  float dc = corner(-(p-vec2(-0.027, -0.055)))-glimglam_corner0;\n  float d = db;\n  d = max(d, -dc);\n  return d;\n}\n\nfloat glimglam_n(vec2 p) {\n  float db = roundedBox(p, vec2 (0.19, 0.166), vec4(glimglam_corner1, glimglam_corner0, glimglam_corner0, glimglam_corner0));\n\n  float dl = abs(p.x)-0.07;\n  float dt = p.y-glimglam_topy;\n\n  float d = db;\n  d = max(d, -max(dl,dt));\n\n  return d;\n}\n\nfloat lance(vec2 p) {\n  p.x -= -0.810;\n  float dbar = glimglam_bar(p);\n\n  vec2 pl = p;\n  float dl = glimglam_l(pl);\n\n  vec2 pa = p;\n  pa.x -= 0.39;\n  float da = glimglam_a(pa);\n\n  vec2 pn = p;\n  pn.x -= 0.795;\n  float dn = glimglam_n(pn);\n\n  vec2 pc = p;\n  pc.x -= 1.2;\n  float dc = glimglam_c(pc);\n\n  vec2 pe = p;\n  pe.x -= 1.605;\n  float de = glimglam_e(pe);\n\n  float d = 1E6;\n  d = min(d, dl);\n  d = min(d, da);\n  d = min(d, dn);\n  d = min(d, dc);\n  d = min(d, de);\n  d = pmax(d, -dbar, glimglam_smoother);\n\n  return d;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/spherefunctions/spherefunctions.htm\nvec2 raySphere(vec3 ro, vec3 rd, vec4 sph) {\n  vec3 oc = ro - sph.xyz;\n  float b = dot( oc, rd );\n  float c = dot( oc, oc ) - sph.w*sph.w;\n  float h = b*b - c;\n  if (h < 0.0) return vec2(-1.0);\n  h = sqrt(h);\n  return vec2(-b - h, -b + h);\n}\n\nvec3 toSpherical(vec3 p) {\n  float r   = length(p);\n  float t   = acos(p.z/r);\n  float ph  = atan(p.y, p.x);\n  return vec3(r, t, ph);\n}\n\nfloat bouncef(float tt) {\n  float tm = tt*bhz/2.0;\n  float t = fract(tm)-0.5;\n  return 4.0*(0.25 - t*t);\n}\n\nfloat dots(vec2 p, float f, float mf) {\n  const vec2 gz = vec2(PI/100.0);\n  vec2  n = mod2(p, gz);\n  p.x     /= f;\n  float d = length(p)-0.005;\n  \n  return d;\n}\n\nfloat grid(vec2 p, float f, float mf) {\n  const float steps = 20.0;\n  vec2 gz = vec2(PI/(steps*mf), PI/steps);\n  vec2  n = mod2(p, gz);\n  p.y     *= f;\n  float d = min(abs(p.x), abs(p.y))-0.0025;\n  return d;\n}\n\nconst vec3 lightPos = vec3(1.0, 2.0, 2.0);\nconst float planeY  = -0.75;\n\nvec4 ballDim(float bf) {\n  float b = 0.25*bf;\n  const float r = 0.5;\n  return vec4(vec3(0.0, b+planeY+r, 0.0), r);\n}\n\nvec3 skyColor(float bf, vec3 ro, vec3 rd, vec3 nrd) {\n  float pi = -(ro.y-(planeY))/rd.y;\n  \n  if (pi < 0.0) return vec3(1.0);\n  \n  vec3 pp = ro+rd*pi;\n  vec3 npp= ro+nrd*pi;\n  vec3 pld = normalize(lightPos-pp); \n\n  float aa = length(npp-pp);\n  \n  vec4 ball = ballDim(bf);\n\n  vec2 bi = raySphere(pp, pld, ball);\n  \n  vec2 pp2 = pp.xz+0.5*TIME;\n  vec2 np2 = mod2(pp2, vec2(0.5));\n  float pd = min(abs(pp2.x), abs(pp2.y))-0.01;\n  \n  vec3 col = vec3(1.0);\n  \n  col = mix(col, vec3(0.5), smoothstep(aa, -aa, pd));\n  \n  if (bi.x > 0.0) {\n    col *= mix(1.0, 1.0-exp(-bi.x), tanh_approx(2.0*(bi.y-bi.x)));\n  }\n  \n  col = mix(vec3(1.0), col, exp(-0.2*max(pi-2.0, 0.0)));\n\n  return col;\n}\n\nvec3 color(float bf, vec3 ro, vec3 rd, vec3 nrd) {\n  vec4 ball = ballDim(bf);\n\n  vec3 sky = skyColor(bf, ro, rd, nrd);\n  \n  vec2 bi = raySphere(ro, rd, ball);\n  float pi = -(ro.y-(planeY))/rd.y;\n  \n  vec3 sp   = ro + bi.x*rd;\n  vec3 nsp  = ro + bi.x*nrd;\n  float aa  = length(sp-nsp);\n  vec3 pp  = ro + pi*rd;\n\n  vec3 sld = normalize(lightPos-sp); \n  sp -= ball.xyz;\n  vec3 sn   = normalize(sp);\n  vec3 sr   = reflect(rd, sn);\n  float sfre= 1.0+dot(sn, rd);\n  sfre *= sfre;\n  \n  sp.yz    *= ROT(TIME*sqrt(0.5));\n  sp.xy    *= ROT(TIME*1.234);\n  vec3 ssp = toSpherical(sp.zxy);\n\n  vec2 sp2 = ssp.yz;\n  float sf  = sin(sp2.x); \n  float slf2 = -ceil(log(sf)/log(2.0));\n  float smf = pow(2.0, slf2);\n  \n  float sdiff = max(dot(sld, sn), 0.0);\n  float sspe  = pow(max(dot(sld, sr), 0.0), 0.5);\n  float sdd = dots(sp2, sf, smf);\n  float sdg = grid(sp2, sf, smf);\n    \n  vec3 col = vec3(1.0);\n  vec2 pp2 = pp.xz;\n\n  float st = tanh_approx(10.0*(bi.y-bi.x));\n  if (st > 0.0) {\n    vec3 scol = vec3(0.0);\n    float sdcol = mix(0.05, 0.1, sdiff); \n    scol += sdcol;\n    scol = mix(scol, vec3(sdcol*2.0), smoothstep(aa, -aa, sdd));\n    scol = mix(scol, vec3(sdcol*3.0), smoothstep(aa, -aa, sdg));\n    scol += sspe*sfre;\n    col = mix(col, scol, st);\n  }\n  \n  return mix(sky, col, st);\n}\n\nvec3 background(vec2 p) {\n  vec3 ro = vec3(0.0, 0, 2.0);\n  vec3 la = vec3(0.0 ,0.0, 0.0); \n\n  vec2 np = p + vec2(2.0/RESOLUTION.y); \n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross(vec3(0.0,1.0,0.0), ww));\n  vec3 vv = cross(ww,uu);\n  float rdd = 2.0;\n  vec3 rd = normalize(-p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd= normalize(-np.x*uu + np.y*vv + rdd*ww);\n\n  float bf = bouncef(TIME);\n  return color(bf, ro, rd, nrd);\n}\n\nconst float logoZoom  = 1.5;\n\nfloat f_df(vec2 p) {\n  vec2 p0 = p;\n  p0 /= logoZoom;\n  float d0  = lance(p0);\n  d0 *= logoZoom;\n  return d0;\n}\n\nfloat f_hf(vec2 p) {\n  float aa = 0.025;\n  float d = f_df(p);\n  return 0.04*smoothstep(aa, -aa, -d);\n}\n\nvec3 f_normal(vec2 p) {\n  vec2 e = vec2(4.0/RESOLUTION.y, 0);\n  \n  vec3 n;\n  n.x = f_hf(p + e.xy) - f_hf(p - e.xy);\n  n.y = -2.0*e.x;\n  n.z = f_hf(p + e.yx) - f_hf(p - e.yx);\n  \n  return normalize(n);\n}\n\nvec3 foreground(vec3 col, vec2 p) {\n  const float split = glimglam_topy*logoZoom; \n  float aa = 2.0/RESOLUTION.y;\n  float d = f_df(p);\n  vec3 n = f_normal(p);\n  vec3 lp1 = vec3(-.5, -2.0, 8.0);\n  vec3 ro = vec3(0.0, -10.0, 0.0);\n  vec3 po = vec3(p.x, 0.0, p.y);\n  vec3 rd = normalize(po-ro);\n  float fre = 1.0+dot(rd,n);\n  fre *= fre;\n  vec3 ld1 = normalize(lp1 - po);\n  float diff1 = max(dot(n, ld1), 0.0);\n  vec3  ref   = reflect(rd, n);\n  float ref1  = pow(max(dot(ref, ld1), 0.0), 20.0);\n\n\n#if defined(COLOR0)\n  vec3 lcol = hsv2rgb(vec3((p.y > split ? 0.65 : 0.)-(p.y)*0.45, 0.9, 1.0));\n#elif defined(COLOR1)\n  vec3 lcol = hsv2rgb(vec3((p.y > split ? 0.65 : 0.1)-abs(p.y)*0.45, 0.9, 1.0));\n#elif defined(COLOR2)\n  vec3 lcol = hsv2rgb(vec3((p.y > split ? 0.8 : 0.55)-(p.y)*0.45, 0.9, 1.0));\n#elif defined(COLOR3)\n  vec3 lcol = hsv2rgb(vec3((p.y > split ? 0.65 : 0.2)-abs(p.y)*0.45, 0.9, 1.0));\n#elif defined(COLOR4)\n  vec3 lcol = hsv2rgb(vec3((p.y > split ? 0.6 : 0.1)-abs(p.y-split)*0.33, 0.9, 1.0));\n#elif defined(COLOR5)\n  vec3 lcol = hsv2rgb(vec3((p.y > split ? 0.85 : 0.575), 0.66, 1.5))*vec3(abs(p.y-split));\n#else\n  vec3 lcol = hsv2rgb(vec3((p.y > split ? 0. : 0.)-(p.y)*0.45, 0.9, 1.0));\n#endif\n  vec3 ocol = 0.25*lcol*lcol;\n  lcol += 0.25*(n.x+n.z)+0.5*ref1;\n  float t = smoothstep(6.0, 8.0, TIME);\n  col = mix(col, ocol, t*smoothstep(aa, -aa, d-0.0075));\n  col = mix(col, lcol, t*smoothstep(aa, -aa, d));\n  \n  return col;\n}\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = background(p);\n  col = foreground(col, p);\n  col = mix(col, vec3(1.0), smoothstep(3.0, 0.0, TIME-dot(p, p)));\n  col = aces_approx(col);\n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}