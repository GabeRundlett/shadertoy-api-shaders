{
    "Shader": {
        "info": {
            "date": "1607462930",
            "description": "Flying through kaleidoscoped truchet patterns.\nExperimenting with simple truchet patterns + kaleidoscope turned out rather nice so I wanted to share.\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WdyfRV",
            "likes": 37,
            "name": "Truchet Kaleidoscope Variation",
            "published": 3,
            "tags": [
                "kaleidoscope",
                "truchet"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 755
        },
        "renderpass": [
            {
                "code": "// License CC0: Flying through kaleidoscoped truchet patterns\n// Experimenting with simple truchet patterns + kaleidoscope turned out rather nice \n//  so I wanted to share.\n\n// SABS by ollj\n\n#define PI              3.141592654\n#define TAU             (2.0*PI)\n#define TIME            iTime\n#define RESOLUTION      iResolution\n#define LESS(a,b,c)     mix(a,b,step(0.,c))\n#define SABS(x,k)       LESS((.5/(k))*(x)*(x)+(k)*.5,abs(x),abs(x)-(k))\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst vec3 std_gamma        = vec3(2.2, 2.2, 2.2);\n\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nfloat hash(vec3 co) {\n  return fract(sin(dot(co, vec3(12.9898,58.233, 12.9898+58.233))) * 13758.5453);\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return vec2(p.x*cos(p.y), p.x*sin(p.y));\n}\n\nvec2 mod2_1(inout vec2 p) {\n  vec2 c = floor(p + 0.5);\n  p = fract(p + 0.5) - 0.5;\n  return c;\n}\n\nfloat modMirror1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize,size) - halfsize;\n  p *= mod(c, 2.0)*2.0 - 1.0;\n  return c;\n}\n\nfloat smoothKaleidoscope(inout vec2 p, float sm, float rep) {\n  vec2 hp = p;\n\n  vec2 hpp = toPolar(hp);\n  float rn = modMirror1(hpp.y, TAU/rep);\n\n  float sa = PI/rep - SABS(PI/rep - abs(hpp.y), sm);\n  hpp.y = sign(hpp.y)*(sa);\n\n  hp = toRect(hpp);\n\n  p = hp;\n\n  return rn;\n}\n\nvec3 toScreenSpace(vec3 col) {\n  return pow(col, 1.0/std_gamma);\n}\n\nvec3 alphaBlend(vec3 back, vec4 front) {\n  vec3 colb = back.xyz;\n  vec3 colf = front.xyz;\n  vec3 xyz = mix(colb, colf.xyz, front.w);\n  return xyz;\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nvec3 offset(float z) {\n  float a = z;\n  vec2 p = -0.075*(vec2(cos(a), sin(a*sqrt(2.0))) + vec2(cos(a*sqrt(0.75)), sin(a*sqrt(0.5))));\n  return vec3(p, z);\n}\n\nvec3 doffset(float z) {\n  float eps = 0.1;\n  return 0.5*(offset(z + eps) - offset(z - eps))/eps;\n}\n\nvec3 ddoffset(float z) {\n  float eps = 0.1;\n  return 0.125*(doffset(z + eps) - doffset(z - eps))/eps;\n}\n\n// -----------------------------------------------------------------------------\n// PLANE0__BEGIN\n// -----------------------------------------------------------------------------\n\nconst float plane0_lw = 0.05;\n\nconst mat2[] plane0_rots = mat2[](ROT(0.0*PI/2.0), ROT(1.00*PI/2.0), ROT(2.0*PI/2.0), ROT(3.0*PI/2.0));\n\nvec2 plane0_cell0(vec2 p, float h) {\n  float d0  = circle(p-vec2(0.5), 0.5);\n  float d1  = circle(p+vec2(0.5), 0.5);\n\n  float d = 1E6;\n  d = min(d, d0);\n  d = min(d, d1);\n  return vec2(d, 1E6); // 1E6 gives a nice looking bug, 1E4 produces a more \"correct\" result\n}\n\nvec2 plane0_cell1(vec2 p, float h) {\n  float d0  = abs(p.x);\n  float d1  = abs(p.y);\n  float d2  = circle(p, mix(0.2, 0.4, h));\n\n  float d = 1E6;\n  d = min(d, d0);\n  d = min(d, d1);\n  d = min(d, d2);\n  return vec2(d, d2+plane0_lw);\n}\n\nvec2 plane0_df(vec3 pp, float h, out vec3 n) {\n  vec2 p = pp.xy*ROT(TAU*h+TIME*fract(23.0*h)*0.5);\n  float hd = circle(p, 0.4);\n\n  vec2 hp = p;\n  float rep = 2.0*floor(mix(5.0, 25.0, fract(h*13.0)));\n  float sm = mix(0.05, 0.125, fract(h*17.0))*24.0/rep;\n  float kn = 0.0;\n  kn = smoothKaleidoscope(hp, sm, rep);\n  vec2 hn = mod2_1(hp);\n  float r = hash(vec3(hn, h));\n\n  hp *= plane0_rots[int(r*4.0)];\n  float rr = fract(r*31.0);\n  vec2 cd0 = plane0_cell0(hp, rr);\n  vec2 cd1 = plane0_cell1(hp, rr);\n  vec2 d0 = mix(cd0, cd1, vec2(fract(r*13.0) > 0.5));\n\n  hd = min(hd, d0.y);\n\n  float d = 1E6;\n  d = min(d, d0.x);\n  d = abs(d) - plane0_lw;\n  d = min(d, hd - plane0_lw*2.0);\n\n  n = vec3(hn, kn);\n\n  return vec2(hd, d);\n}\n\nvec4 plane0(vec3 ro, vec3 rd, vec3 pp, vec3 off, float aa, float n) {\n\n  float h = hash(n);\n  float s = mix(0.05, 0.25, h);\n\n  vec3 hn;\n  vec3 p = pp-off*vec3(1.0, 1.0, 0.0);\n\n  vec2 dd = plane0_df(p/s, h, hn)*s;\n  float d = dd.y;\n\n  float a  = smoothstep(-aa, aa, -d);\n  float ha = smoothstep(-aa, aa, dd.x);\n\n  vec4 col = vec4(mix(vec3(1.0), vec3(0.0), a), ha);\n\n  return col;\n}\n\n// -----------------------------------------------------------------------------\n// PLANE0__END\n// -----------------------------------------------------------------------------\n\nvec4 plane(vec3 ro, vec3 rd, vec3 pp, vec3 off, float aa, float n) {\n  return plane0(ro, rd, pp, off, aa, n);\n}\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  float ld = max(dot(rd, vec3(0.0, 0.0, 1.0)), 0.0);\n  return vec3(tanh(3.0*pow(ld, 100.0)));\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  float lp = length(p);\n  vec2 np = p + 1.0/RESOLUTION.xy;\n  float rdd = (2.0+0.5*tanh(lp));\n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd = normalize(np.x*uu + np.y*vv + rdd*ww);\n\n  const vec3 errorCol = vec3(1.0, 0.0, 0.0);\n\n  float planeDist = 1.0-0.25;\n  const int furthest = 6;\n  const int fadeFrom = max(furthest-4, 0);\n\n  float nz = floor(ro.z / planeDist);\n\n  vec3 skyCol = skyColor(ro, rd);\n\n  vec3 col = skyCol;\n\n  for (int i = furthest; i >= 1 ; --i) {\n    float pz = planeDist*nz + planeDist*float(i);\n\n    float pd = (pz - ro.z)/rd.z;\n\n    if (pd > 0.0) {\n      vec3 pp = ro + rd*pd;\n      vec3 npp = ro + nrd*pd;\n\n      float aa = 3.0*length(pp - npp);\n\n      vec3 off = offset(pp.z);\n\n      vec4 pcol = plane(ro, rd, pp, off, aa, nz+float(i));\n\n      float nz = pp.z-ro.z;\n      float fadeIn = (1.0-smoothstep(planeDist*float(fadeFrom), planeDist*float(furthest), nz));\n      float fadeOut = smoothstep(0.0, planeDist*0.1, nz);\n      pcol.xyz = mix(skyCol, pcol.xyz, (fadeIn));\n      pcol.w *= fadeOut;\n\n      col = alphaBlend(col, pcol);\n    } else {\n      break;\n    }\n\n  }\n\n  return col;\n}\n\nvec3 postProcess(vec3 col, vec2 q) {\n  col = clamp(col, 0.0, 1.0);\n  col = toScreenSpace(col);\n  col = col*0.6+0.4*col*col*(3.0-2.0*col);\n  col = mix(col, vec3(dot(col, vec3(0.33))), -0.4);\n  col *=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 q) {\n  float tm  = TIME*0.4;\n  vec3 ro   = offset(tm);\n  vec3 dro  = doffset(tm);\n  vec3 ddro = ddoffset(tm);\n\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(normalize(vec3(0.0,1.0,0.0)+ddro), ww));\n  vec3 vv = normalize(cross(ww, uu));\n\n  vec3 col = color(ww, uu, vv, ro, p);\n  col = postProcess(col, q);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 col = effect(p, q);\n\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}