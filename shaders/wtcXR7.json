{
    "Shader": {
        "info": {
            "date": "1580636123",
            "description": "could it be shorter ? :-)",
            "flags": 0,
            "hasliked": 0,
            "id": "wtcXR7",
            "likes": 4,
            "name": "shortest heart ( 140 chars )",
            "published": 3,
            "tags": [
                "heart",
                "onetweet",
                "golf"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 939
        },
        "renderpass": [
            {
                "code": "// Derived from Hearth curve http://mathworld.wolfram.com/HeartCurve.html\n//    x = 16 sinÂ³(t) ; y = 13 cos(t) - 5 cos(2 t) - 2 cos(3 t) - cos(4 t)\n// see also: https://www.desmos.com/calculator/f0xnkcfbbr\n\n// NB: -12 without anti-aliasing.  or -7 with approx AA  O /= 3.\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2  U = iResolution.xy,\n          C = u/u - pow( abs( U = (u+u-U)/U.y ).x, .67),\n          A = 19. -8.*C,\n          B = 6. -C-C  -8.*C*C - U*16.;\n    O.ar =    C * A*A - B*B;\n    O /= fwidth(O);\n}/*\n\n\n\n\n\n// --- 143 chars  ( above (i.e. squaring) is even smoother ! even allow good aliased version )\n\n#define mainImage(O,u)                       \\\n    vec2  R = iResolution.xy,                \\\n          U = ( u+u - R ) / R.y,             \\\n          C = R/R - pow(abs(U.x),.67);       \\\n    O.ar =    sqrt(C) * ( 19. -8.*C )        \\\n           - abs( 6. -C-C  -8.*C*C - U*16.); \\\n    O /= fwidth(O)                          /*\n\n\n\n\n\n// --- 149 chars\n\n#define mainImage(O,u)                    \\\n    vec2  R = iResolution.xy,             \\\n          U = ( u+u - R ) / R.y;          \\\n    float C = 1. - pow(abs(U.x),.67);     \\\n    O.r =       sqrt(C) * ( 19. -8.*C )   \\\n          - abs(      6. -C-C  -8.*C*C    \\\n                -U.y*16.              );  \\\n    O /= fwidth(O)                       /*\n\n\n\n\n\n// --- 152 chars\n\n#define mainImage(O,u)                      \\\n    vec2  R = iResolution.xy,               \\\n          U = ( u+u - R ) / R.y;            \\\n    float S = pow(abs(U.x),.67);            \\\n    O.r  =      sqrt(1.-S)* (11. +8.*S)     \\\n         - abs(  -4.   +S * (18. -8.*S)     \\\n                -U.y*16.  );                \\\n    O /= fwidth(O)                         /*\n\n\n\n\n\n// --- 160 chars (trigo based, plein red heart )\n\n#define C cos( asin(pow(abs(U.x),.33))            //\n#define mainImage(O,u)                             \\\n    vec2  R = iResolution.xy,                      \\\n          U = ( u+u - R ) / R.y;                   \\\n    O.r +=      13.* C)          - 2.* C*3.)       \\\n         - abs(        - 5.* C*2.)         - C*4.) \\\n                -U.y*16. + 2. );                   \\\n    O /= fwidth(O)                                /*\n\n\n\n\n\n// --- 174 chars : white heart contour\n\n#define C cos( asin(pow(abs(U.x),.33))           //\n#define mainImage(O,u)                            \\\n    vec2  R = iResolution.xy,                     \\\n          U = ( u+u - R ) / R.y;                  \\\n    O +=        13.* C)         - 2.* C*3.)       \\\n         - abs(       - 5.* C*2.)         - C*4.) \\\n               -U.y*16. + 2. );                   \\\n    O = 1. -  abs(O) / fwidth(O)                 /*\n\n\n\n\n\n// --- 195 chars ( heart contour )\n\nvoid mainImage( out vec4 O, vec2 u)\n{\n    vec2 R = iResolution.xy, \n         U = ( u+u - R ) / R.y;\n\n    float t = asin(pow(abs(U.x),.33)),\n          a =      13. * cos(t)             - 2. * cos(3.*t) \n             -abs(           - 5. * cos(2.*t)              - cos(4.*t)\n                 -U.y*16. + 3.6 );\n    O += 1. -  abs(a) / fwidth(a) -O;\n} /*\n\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}