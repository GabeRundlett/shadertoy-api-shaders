{
    "Shader": {
        "info": {
            "date": "1640014197",
            "description": "fork menger sponge-color",
            "flags": 0,
            "hasliked": 0,
            "id": "7tdSDl",
            "likes": 5,
            "name": "fork menger sponge-color",
            "published": 3,
            "tags": [
                "forkmengerspongecolor"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "///modificado por jorge2017a2\n//referencia\n//https://www.shadertoy.com/view/ltGSWz\n\n#define distfar 6.0\n#define iterations 5.0\n\n#define opU(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n\nfloat maxcomp(vec3 p) {\n    return max(p.x,max(p.y,p.z));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3  di = abs(p) - b;\n  float mc = maxcomp(di);\n  return min(mc,length(max(di,0.0)));\n}\n\nfloat sdBox2D(vec2 p, vec2 b) {\n\tvec2  di = abs(p) - b;\n    float mc = max(di.x,di.y);\n    return min(mc,length(max(di,0.0)));\n}\n\nfloat sdCross( in vec3 p )\n{\n  float da = sdBox2D(p.xy,vec2(1.0));\n  float db = sdBox2D(p.yz,vec2(1.0));\n  float dc = sdBox2D(p.zx,vec2(1.0));\n  return min(da,min(db,dc));\n}\n\nvec2 sdCrossC3( in vec3 p )\n{\n  float da = sdBox2D(p.xy,vec2(1.0));\n  float db = sdBox2D(p.yz,vec2(1.0));\n  float dc = sdBox2D(p.zx,vec2(1.0));\n   vec2 dmin=vec2(9999.99,-1.0);\n  \n  dmin=opU(vec2(db,1.0),vec2(dc,2.0) );\n  dmin=opU(vec2(da,3.0),dmin );\n\n  return dmin;\n}\n\n\n#define MENGER_ITERATIONS\t2\n\n\nvec2 mapFractal(in vec3 p)\n{\t\n \n    float d = sdBox(p,vec3(2.5+0.3*sin(iTime*0.25)));\n    vec2 res = vec2(d, 7.0);\n    float s = 2.5;\n    \n    for(int i = 0; i < MENGER_ITERATIONS; ++i)\n    {\t  s = pow(2.0,float(i));\n        vec3 a = mod(p * s, 2.0) - 1.0;\n        s *= 11.0;\n        vec3 r = abs(1.0 - 5.0 * abs(a));\n\n       vec2 c2=sdCrossC3(r);\n        c2.x= (c2.x-0.25)/s;\n        float c=c2.x;\n\n        if(c > d) { d = c2.x; res = c2; }\n    }\n    \n    return res;\n}\n\nvec2 map(vec3  p)\n{   \n   vec2 d1=mapFractal(p);\n   return vec2(d1);\n}\n\nvec3 calcnormal(vec3 p) {\n    vec2 e = vec2(0.0001, 0.0);\n    vec3 n;\n    n.x = map(p+e.xyy).x - map(p-e.xyy).x;\n    n.y = map(p+e.yxy).x - map(p-e.yxy).x;\n    n.z = map(p+e.yyx).x - map(p-e.yyx).x;\n    return  normalize(n);\n}\n\nfloat softshadow (vec3 ro, vec3 rd) {\n    float res = 1.0;\n    float t = 0.001;\n    for (float i = 0.0; i < 1000.0; i++) {\n        if (t>distfar) break;\n        vec2 h = map(ro + t*rd);\n        if (h.x < 0.0001) return 0.0;\n        res = min(res, 64.0*h.x/t);\n        t += h.x;\n    }\n    return res;\n}\n\nvec3 trace(vec3 ro, vec3 rd) {\n    float t = 0.0;\n    for (float i = 0.0; i < 1000.0; i++) {\n        if (t > distfar) break;\n        vec2 d = map(ro + rd*t);\n        if (d.x < 0.0001) return vec3(t, d.y, i);\n        t += d.x;\n    }\n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.0,0.0,4.5);\n    vec3 rd = normalize(vec3(uv,-1.5));\n    \n    float theta = sin(iTime/2.0);\n    mat2 rot = mat2(cos(theta),sin(theta),-sin(theta),cos(theta));\n    ro.yz *= rot;\n    rd.yz *= rot;\n    theta = iTime/3.0;\n    rot = mat2(cos(theta),sin(theta),-sin(theta),cos(theta));\n    ro.xz *= rot;\n    rd.xz *= rot;\n    \n    vec3 t = trace(ro, rd);\n    \n    vec3 col = vec3(0.8);\n    \n    if (t.y > 0.5) {\n        \n        vec3 pos = ro + rd*t.x;\n        vec3 lig = normalize(vec3(0.6,1.0,0.8));\n        vec3 nor = calcnormal(pos);\n        float refRange = 0.2;\n        \n        float occ = 1.0/(1.0+t.z/15.0);\n        float sha = softshadow(pos, lig);\n        float dif = max(0.0, dot(nor,lig));\n        float sky = 0.5+0.5*nor.y;\n        float ind = max(0.0, dot(nor,vec3(-1.0,-0.2,-1.0)*lig));\n        float ref = max(1.0-refRange,dot(-nor,rd))-1.0+refRange;\n        \n        vec3 col2=getColor( int(t.y));\n        col = vec3(0.8,1.0,1.2)*dif*pow(vec3(sha),vec3(1.0,1.2,1.5));\n        col += vec3(0.2,0.3,0.4)*ind*occ;\n        col += (vec3(0.2,0.2,1.3)+sky*occ)*1.2;\n        col += pow(ref,2.0)*4.0*occ;\n        col*=col2;\n        \n        col = pow(col,vec3(0.4545));\n        \n    }\n    \n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(.395, .95, 1.), //31\nvec3(0.425, 0.56, 0.9) \n);\n\nvec3 getColor(int i)\n{    \n    //if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}