{
    "Shader": {
        "info": {
            "date": "1589023148",
            "description": "Rip Florian Schneider \nhttps://www.youtube.com/watch?v=Nzzw94lrytg",
            "flags": 0,
            "hasliked": 0,
            "id": "tdsfDS",
            "likes": 3,
            "name": "大龙猫 - Radioaktivität",
            "published": 3,
            "tags": [
                "kraftwerk"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 411
        },
        "renderpass": [
            {
                "code": "\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\nfloat sdCappedCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n  vec3  ba = b - a;\n  vec3  pa = p - a;\n  float baba = dot(ba,ba);\n  float paba = dot(pa,ba);\n  float x = length(pa*baba-ba*paba) - r*baba;\n  float y = abs(paba-baba*0.5)-baba*0.5;\n  float x2 = x*x;\n  float y2 = y*y*baba;\n  float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n  return sign(d)*sqrt(abs(d))/baba;\n}\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n  vec3 q = abs(p);\n  return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat vexel(vec3 p,vec3 b, float r) {\n\n        vec3 q = abs(p) -b;\n        return length(max(q,0.0) + min(max(q.x,max(q.y,q.z)),0.0)) - r;\n}\n#define ITER 64.\n#define PI 3.141592\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\nmat2 r(float a){\n    float c=cos(a),s=sin(a);\n    return mat2(c,s,-s,c);\n}\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\nfloat stripes(vec3 p) {\n     \n    float s = sin(atan(p.x,p.y)*21.) > 0.85 && p.z <-0.15 && sin(8.*iTime+p.z*50.) >-0.5 ? -sdCappedCylinder(p,vec3(0.,0.,1.),vec3(0.,0.,-1.),.89) : 10000.;\n    return s;\n\n}\nfloat radiologo(vec3 p) {\n    \n    float side = 100000.;\n    for(float i=0.;i<3.; i++){\n        \n        vec3 pos = p;\n        pos.xy*=r(i*(2.*PI/3.));\n        pos+=vec3(0,.5,-0.);\n         \n         \n        \n        side = min(side,sdTriPrism(pos,vec2(.51,.1) ));\n    }\n    \n    \n    side = max(-sdCappedCylinder(p,vec3(0,0,-.20),vec3(0,0,.20),.15),side);\n    \n    float border = max( sdCappedCylinder(p,vec3(0,0,-.20),vec3(0,0,.20),.89), -sdCappedCylinder(p,vec3(0,0,-.25),vec3(0,0,.25),.75)) ;\n    side = max(side,-border);\n    float center = sdCappedCylinder(p,vec3(0,0,-.10),vec3(0,0,.10),.1);\n    return min(min(side,center),stripes(p));\n}\n\n\nfloat SDF(vec3 p) {\n \n     return radiologo(p+vec3(0.,0.,-4.0));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv*=.5;\n    vec3 ro =vec3(0.01,0.01,-3.),\n    p = ro,\n    rd = normalize(vec3(uv,1.)),\n    col = vec3(0);\n  \n    float shad = 0.;\n    bool hit = false;\n    \n    for(float i=0.;i < ITER; i++) {\n      float d = SDF(p);\n        if(d< 0.001) {\n            hit = true;\n            shad = i / ITER;\n            break;\n        }\n        p += d*rd;\n    }\n    \n bool anim = mod(iTime,3.) >1.;\n    bool subanim = mod(iTime,3.) >2.;\n    if(hit) {\n     if(anim) {\n        col = vec3(1.-shad,1.-shad,.1);\n        } else {\n            col = vec3(0);\n        } \n        \n    } else {\n       if(anim) {\n             if(subanim) {\n           col = vec3(0);}\n           else {\n           col = vec3(.9,0.,0.);\n           }\n        } else {\n           \n            col = vec3(1.-shad,1.-shad,.1);\n        } \n    }\n     \n     \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}