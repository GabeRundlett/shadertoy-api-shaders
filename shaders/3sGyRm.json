{
    "Shader": {
        "info": {
            "date": "1602424735",
            "description": "Again some Sieprinski Adaption.\n\nCaution!!!\nIf you watch too long then your world will rotate the other direction.\n\n@Fabrice: I know. It's too much unnecessary code for you! (O;",
            "flags": 0,
            "hasliked": 0,
            "id": "3sGyRm",
            "likes": 2,
            "name": "Sumpinski",
            "published": 3,
            "tags": [
                "tutorial",
                "sierpinski"
            ],
            "usePreview": 0,
            "username": "samuelotherion",
            "viewed": 295
        },
        "renderpass": [
            {
                "code": "// height of a equilateral triangle\nconst float h = .5 * sqrt(3.);\n\nvoid mainImage(out vec4 o, in vec2 p) {\n\n    // want a black background\n    o = 0. * o;\n    \n    // use later for rotation\n    vec2 cs = vec2(cos(iTime), sin(iTime)),\n\t// scale centered axes\n         uv = (2.5 + 2.5 * sin(.3 * iTime)) * (2. * p / iResolution.xy - 1.) * vec2(iResolution.x / iResolution.y, 1);\n    \n    // points of the triangele: a, b, c\n    vec2 a = vec2(-1., -h),\n         b = vec2(+1., -h),\n         c = vec2(+0., +h),\n    // x and y axes and center z\n         x = b - a,\n         y = c - a,\n         z = (a + b + c) / 3.;\n    \n    // center all points of the triangle\n    a -= z; b -=z; c -= z;\n    \n    // rotate the world, so the triangle rotates back\n    uv *= mat2(cs.x, cs.y, -cs.y, cs.x);\n    \n    // trafo into triangle world\n    mat2 sierpinski = inverse(mat2(x, y));\n    \n    // apply trafo, with point 'a' as new origin\n    vec2 r = sierpinski * (uv - a);\n    \n    // scale factor for triangle size\n    float f = 1.;\n    \n    // if in triangle colorize it a little bit\n    if(0. <= r.x && 0. <= r.y && r.x + r.y < f) o = vec4(1. - dot(uv,uv));// + .1 *  cos(.1 * iTime));\n        \n    // divide 15 times\n    for(int i = 0; i < 15; ++ i) {\n        \n    \to.rgb -=\n            // am i inside the triangle? \n            // uncomment the next line for a showing only the center triangle!\n            // 0. <= r.x && 0. <= r.y && r.x + r.y < 1. &&\n            // am i in the lower left part of square in sierpinski space? -----------------------------------\n\t\t\t(mod(r.x, f) + mod(r.y, f) < f) //                                                               |\n             ? fract(mod(f, sin(.1 * iTime))) * vec3(r.x, r.y, 1. - r.x - r.y) //yes, so add some rgb colors |\n             : vec3(0.); // no, so add nothing                                                               |\n    \t                //                                                       ----------------------------\n                       //                                                       |\n        // divide the scaling factor                                            |\n        f *= .5;     //                                                         |\n    }               //                                                          |\n}                  //                                                           |\n                  //                                                            |\n/*    --------------------------------------------------------------------------\n     |\n     V\n\nf = .5\n\n+ - - - - - -\n+ + - - - - -\n+ + + - - - -\n+ + + + - - -\n+ + + + + - -\n+ + + + + + -\n+ + + + + + +\n\nf = .25\n\n+ - - - - - -\n+ + - - - - -\n+ + + - - - -\n+ - - - - - -\n+ + - - + - -\n+ + + - + + -\n+ + + + + + +\n\nf = .125\n\n+ - - - - - -\n+ + - - - - -\n+ + + - - - -\n+ - - - - - -\n+ + - - + - -\n+ - + - + + -\n+ + + + + + +\n\n\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}