{
    "Shader": {
        "info": {
            "date": "1570538728",
            "description": "A little experiment",
            "flags": 0,
            "hasliked": 0,
            "id": "wdG3RK",
            "likes": 45,
            "name": "Glass looking modulo trick",
            "published": 3,
            "tags": [
                "2d",
                "circles",
                "abstract",
                "glass",
                "orange"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 1177
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat PI = 3.14159265;\n\nmat3 RZ(float a) { float cosa = cos(a);float sina=sin(a);return mat3(cosa,sina,0,-sina,cosa,0,0,0,1);}\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\nfloat lenny(vec2 v)\n{\n  return abs(v.x)+abs(v.y);\n}\nfloat sat(float a)\n{\n  return clamp(a,0.0,1.0);\n}\nvec3 negate(vec3 col, bool yes)\n{\n  if (yes)\n     return vec3(1.)-col;\n  return col;\n}\n\nvec3 drawCir(vec2 uv, vec2 pos, float rad, float diag)\n{\n  uv = uv-pos;\n\n  float luv = mix(length(uv),lenny(uv),(0.5+0.5*sin(iTime))*diag);\n  float grad = (abs(luv - rad)/0.05);\n  vec3 col = (vec3(pow(sat(1.-grad),5.)));\n  float a = atan(uv.y,uv.x)/PI;\n  col += length(uv)/rad*float(length(uv)<rad);\n  return col;\n}\n\nvec3 rdrMain(vec2 uv)\n{\n  vec3 colGrad = vec3(0.45,0.34,0.78).yzx;\n  vec3 acc;\n\n  acc = mix(colGrad, vec3(0.3), 1.-length(uv));\n  acc *=min(pow(max(length(uv),0.1),3.5),1.);\n  return acc;\n}\n\nvec3 rdrCircles(vec2 uv)\n{\n  const int lines = 16;\n  vec3 acc;\n\n  for (int i = 0; i< lines;++i)\n  {\n    float fi = float(i);\n    vec2 pos= 1.*vec2(rand(vec2(fi*12., 8.-fi)), rand(vec2(mod(fi,0.5),fi)));\n    pos-= vec2(0.5);\n    pos-=pos;\n    float speed = 0.5;\n    pos -= max((fi/16.),0.1)*vec2(sin(speed*(iTime+fi)),cos(speed*(fi+iTime*(mod(fi,2.)<0.1?1.:-1.))));\n    acc += 0.5*drawCir(uv, pos,0.2*max(1.-pos.x,0.2),0.)*vec3(0.35+0.5*sin(iTime),0.05*fi+0.01,0.5+fi/16.).zyx;\n  }\n  return acc;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xx;\n  vec2 center = vec2(0.5)*iResolution.xy/iResolution.xx;\n  uv = uv - center;\n        vec2 ouv = uv;\n  uv *= 4.0;\n\n\n  uv += mod((vec3(ouv,0.)*RZ(PI/4.)).xy*5., vec2(0.1));\n\n  vec3 col = rdrMain(uv);\n\n  col *= 1.-pow(length(uv),2.5);\n  col += rdrCircles(uv);\n  col +=rdrCircles(uv.yx*vec2(-1.,1.)*0.5);\n\n  if (col.z > 2.1)\n    col += vec3(0.5);\n\n  float luv = length(uv);\n    \n  col *= sat(pow(luv*2.,5.5)+0.2);\n    \n  if (luv < 0.3 && luv >0.15)\n    col *= vec3(pow(sat(uv.y+0.15),0.5));\n    \n  col += sat(1.-length(uv*0.5)) * 0.1;\n    \n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}