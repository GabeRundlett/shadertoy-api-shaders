{
    "Shader": {
        "info": {
            "date": "1382730971",
            "description": "Implementation of dual-complex numbers, which are useful to compute derivatives of complex functions analytically without central differences or limits/epsilon differentiation.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xd2GzR",
            "likes": 58,
            "name": "Dual Complex Numbers",
            "published": 3,
            "tags": [
                "2d",
                "mandelbrot",
                "distance",
                "complex",
                "analytic",
                "dual",
                "dualcomplex"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 7230
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// An experiment on implementing \"dual complex\" numbers, in order to compute\n// complex function derivatives analytically without resorting to numerical\n// differenciation. That way I can compute derivatives, gradients and distance\n// estimations analytically, easily and elegantly.!\n\n// In this case, I use them for rendering the Mandelbrot with a distance\n// estimation coloring algorithm.\n// \n// See my \"Mandelbrot - distance\" shader for comparison: \n// https://www.shadertoy.com/view/lsX3W4\n//\n// See this article on dual numbers:\n// http://jliszka.github.io/2013/10/24/exact-numeric-nth-derivatives.html\n\n\n//-------------- dual complex numbers --------------\n\n// complex addition, and derivatives\nvec4 dcAdd( vec4 a, vec4 b )\n{\n    return a + b;\n}\n\n// complex multiplication, and derivatives\nvec4 dcMul( vec4 a, vec4 b )\n{\n    return vec4( a.x*b.x - a.y*b.y, \n\t\t\t\t a.x*b.y + a.y*b.x,\n\t\t\t\t a.x*b.z + a.z*b.x - a.y*b.w - a.w*b.y,\n\t\t\t\t a.x*b.w + a.w*b.x + a.z*b.y + a.y*b.z );\n}\n\n// complex squaring, and derivatives\nvec4 dcSqr( vec4 a )\n{\n    return vec4( a.x*a.x - a.y*a.y, \n\t\t\t\t 2.0*a.x*a.y,\n\t\t\t\t 2.0*(a.x*a.z - a.y*a.w),\n\t\t\t\t 2.0*(a.x*a.w + a.y*a.z) );\n}\n\n//--------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\n    // animation\t\n\tfloat tz = 0.5 - 0.5*cos(0.225*iTime);\n    float zo = pow( 0.5, 13.0*tz );\n\t\n    vec4 c = vec4( vec2(-0.05,.6805) + p*zo, 1.0, 0.0 );\n\n    // compute orbit\n\tfloat m2 = 0.0;\n    float co = 0.0;\n\tvec4 z = vec4( 0.0, 0.0, 0.0, 0.0 );\n    for( int i=0; i<256; i++ )\n    {\n        if( m2>1024.0 ) break;\n\t\t\t\n        // Z -> Z² + c\t\t\n\t\tz = dcAdd( dcSqr(z), c );\n\t\t\n\t\tm2 = dot( z.xy, z.xy );\n        co += 1.0;\n    }\n\n    // distance\t\n\t// d(c) = |Z|·log|Z|/|Z'|\n\tfloat d = 0.0;\n\tif( co<256.0 ) d = sqrt( dot(z.xy,z.xy)/dot(z.zw,z.zw) )*log(dot(z.xy,z.xy));\n\n\t\n    // do some soft coloring based on distance\n\td = clamp( 4.0*d/zo, 0.0, 1.0 );\n\td = pow( d, 0.25 );\n    vec3 col = vec3( d );\n    \n    // output color\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}