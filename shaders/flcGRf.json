{
    "Shader": {
        "info": {
            "date": "1636479684",
            "description": "Some iterative SDF fractal rendered with randomwalk subsurface scattering. You can play with SSS using DENSITY, EXTINCTION and ALBEDO defines :-)\nImproved version: https://www.shadertoy.com/view/fsXyWX",
            "flags": 32,
            "hasliked": 0,
            "id": "flcGRf",
            "likes": 25,
            "name": "Scattering fractal",
            "published": 3,
            "tags": [
                "fractal",
                "subsurface",
                "randomwalk"
            ],
            "usePreview": 0,
            "username": "hamtarodeluxe",
            "viewed": 605
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(pow(col,vec3(0.45)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define RWSTEPS 6\n#define AA 16\n#define FAR 5.\n#define MARCHBIAS 0.0005\n#define MAXSTEPS 50\n#define BIAS MARCHBIAS*2.\n\n#define DENSITY 230.\n#define EXTINCTION vec3(0.25, 0.7, 1.)\n#define ALBEDO vec3(.9, 1., .9)\n#define EMISSIVE vec3(.01, 0.02, 0.02)*0.1\n\nstruct Hit \n{\n\tfloat t; \n    bool hasHit;\n    vec3 position;\n};\n\nstruct Scene\n{\n\tvec3 spherePosition;\n    float sphereRadius;\n    vec3 lightPosition;\n    vec3 lightIntensity;\n \tvec3 sigmaS;\n    vec3 sigmaA;\n\tvec3 mouseRay;\n    vec3 planePosition;\n    vec3 planeNormal;\n    vec3 boxSize;\n    uvec2 random;\n    int bounces;\n    float time;\n};\n\n// Float generator\nfloat nextFloat(inout uvec2 random)\n{\n\trandom.x += 1u; \n    return clamp(hash21(random),0.0000,1.);\n}\n\n// SDF\n\n#define SDF \\\nfloat t = scene.time;\\\nvec3 a=0.1*vec3(5., t*0.5 +5.,t*0.9+10.);\\\nint k = 0;\\\nfor( k=0;k<km;k++){\\\n    p.xzy= abs(p.xyz);\\\n    p.xyz=p.xyz*vec3(2.,2.,2.)-vec3(0.6,0.6,0.6);\\\n    p.xy*=rot(a.z);\\\n    p.yz*=rot(a.x);\\\n    p.zx*=rot(a.y);\\\n}\\\nreturn (length(p)-1.0)/pow(2.,float(k));\\\n\nfloat sdf(vec3 p, Scene scene)\n{\n    int km = 7;\n    SDF\n}\n\nfloat sdfLow(vec3 p, Scene scene)\n{\n    int km = 3;\n    SDF\n}\n\nvec3 estimateNormal(vec3 pos, Scene scene)\n{\n \tvec3 normal = vec3(0.);\n    float d = 0.0001;\n    normal.x = sdf(pos + vec3(d,0.,0.), scene) - sdf(pos - vec3(d,0.,0.), scene);\n    normal.y = sdf(pos + vec3(0.,d,0.), scene) - sdf(pos - vec3(0.,d,0.), scene);\n    normal.z = sdf(pos + vec3(0.,0.,d), scene) - sdf(pos - vec3(0.,0.,d), scene);\n\treturn normalize(normal);\n}\n\nHit intersectSdf(vec3 ro, vec3 rd, Scene scene, float startSign)\n{\n    Hit hit;\n    hit.hasHit = false;\n\tfloat s = startSign;\n    vec3 p;\n    float t;\n    for(int i = 0; i < MAXSTEPS; i++)\n    {\n    \tp = ro + t*rd;\n     \tfloat d = sdf(p, scene);\n    \tif(s*d<MARCHBIAS && (iFrame != -1))\n        {\n        \thit.hasHit = true;\n            hit.t = t;\n            hit.position = p;\n           \n        \tbreak;\n        }\n        if(s*d>=FAR && (iFrame != -1)) break;\n        t+=s*d;\n    }\n    return hit;\n}\n\n// Monte carlo\n\nvec3 sampleSurfaceBSDF(vec3 normal, inout uvec2 random, out float pdf)\n{\n\tvec2 h = vec2(nextFloat(random), nextFloat(random));\n\t\n    vec2 d = vec2(sqrt(h.x),2.*PI*h.y);\n    d = vec2(d.x*sin(d.y),d.x*cos(d.y));\n    \n    vec3 ray = vec3(d.x,sqrt(max(0.,1.-d.x*d.x-d.y*d.y)),d.y);\n    float ct = dot(ray,vec3(0.,1.,0.));\n\n   \tvec3 up = normal;\n    vec3 right =  normalize(vec3(-up.y,0.1,up.x));\n    vec3 fw = normalize(cross(right, up));\n    right = normalize(cross(fw,up));\n    ray = mat3x3(right,up,fw)*ray;\n       \n   \tpdf = ct/PI;\n    return ray;\n}\n\nvec3 sampleMediumBSDF(inout uvec2 random)\n{\n    vec2 h = vec2(nextFloat(random),nextFloat(random));\n    float polar = acos(2.*h.x-1.);\n    float azimuth = 2.*PI*h.y;\n    vec3 ray = sphToCart(vec3(1.,polar,azimuth)); \n    return ray;\n}\n\nfloat sampleMediumScattering(inout uvec2 random, vec3 S)\n{\n    int ch = int(floor(3.*nextFloat(random)));  \n\tfloat t = -log(1.-nextFloat(random))/(S[ch]);\n        \n    return t;   \n}\n\nvec3 sampleMediumBSDF(inout uvec2 random, out float pdf)\n{            \n\tvec2 h = vec2(nextFloat(random), nextFloat(random));   \n    float polar = acos(h.x*2.-1.);  \n    float azimuth = 2.*PI*h.y;\n    vec3 ray = sphToCart(vec3(1., polar, azimuth));\t\n   \tpdf = 1./(4.*PI);\n    return ray;\n}\n\n//BSDF\nvec3 evaluateSurfaceBSDF(vec3 normal, vec3 wo, vec3 wi)\n{\n\treturn vec3(1.)/PI;\n}\n\n// Integrator\nvec3 traceSdf(vec3 ro, vec3 rd, inout Scene scene)\n{\n    int bounces = 0;\n    vec3 tp = vec3(1.);\n    vec3 col = vec3(0.);\n    bool inVolume = false;\n    vec3 pos = ro;\n    vec3 ray = rd;\n    vec3 sigmaT = scene.sigmaS + scene.sigmaA;\n    Hit hit;\n\n    hit = intersectSdf(pos, ray, scene, 1.0f);\n\n    if(!hit.hasHit) return col;\n            \n    vec3 normal = estimateNormal(hit.position, scene);\n    float pdf;\n    \n    // Update tp with surface interaction\n    vec3 wi = sampleSurfaceBSDF(-normal,scene.random,pdf);// uniform hemisphere\n    vec3 wo = -ray;\n    vec3 bsdf = evaluateSurfaceBSDF(-normal, wo,wi); // 1/PI\n    tp *= (bsdf/pdf)*saturate(dot(wi,-normal));\n    pos = hit.position-BIAS*normal;\n    ray = wi;\n    \n    bounces++;\n    \n    while (bounces < RWSTEPS)\n    {\n\n        // Sample scattering event\n        float t = sampleMediumScattering(scene.random, sigmaT);\n        inVolume = sdfLow(pos + ray*t, scene) < 0.00f;\n\n        if(inVolume)\n        {\n            // Update tp with scattering event\n            pos = pos + ray*t;\n            vec3 pdff = inVolume ? sigmaT*exp(-sigmaT*t) : exp(-sigmaT*t);\n            float pdf = (pdff.x+ pdff.y+ pdff.z)/3.; \n            vec3 tr = exp(-sigmaT*t);\n            tp *= inVolume ?(scene.sigmaS)*tr*(1./pdf) : tr*(1./pdf);\n            \n            // Sample medium BSDF\n            vec3 wi = sampleMediumBSDF(scene.random, pdf); \n            vec3 wo = -ray;\n            vec3 mediumBsdf = vec3(1./(4.*PI));\n            float mediumPdf = pdf;\n            tp *= mediumBsdf/mediumPdf;\n            ray = wi;               \n\n        }\n        else // Exiting volume\n        {\n            hit = intersectSdf(pos, ray, scene, -1.0f);\n\n            t = hit.t;\n            pos = pos + ray*t;\n            hit.position = pos;\n            \n            vec3 pdff = exp(-sigmaT*t);\n            float pdf = (pdff.x+ pdff.y+ pdff.z)/3.; \n            vec3 tr = exp(-sigmaT*t);\n            tp *= tr*(1./pdf);\n\n            vec3 normal = estimateNormal(hit.position, scene);\n            \n            // Do direct lighting\n            vec3 wo = -ray;\n            vec3 lp = sign(dot(pos,scene.lightPosition))*scene.lightPosition;\n            vec3 lightRay = lp-pos;\n            float l = length(lightRay);\n            vec3 wi = lightRay/l;\n            vec3 bsdf = evaluateSurfaceBSDF(normal, wo, wi);           \t\n            Hit occlusion = intersectSdf(pos+normal*BIAS,normalize(lightRay),scene, 1.0f);\n            vec3 lightIntensity = vec3(0.);\n            if(!occlusion.hasHit || occlusion.t>l)\n                lightIntensity = scene.lightIntensity/(l*l);\n    \n            col += tp*bsdf*lightIntensity*saturate(dot(normal,wi)) + tp * EMISSIVE;\n\n            break;\n        }\n\n        bounces++;\n                   \n    }\n\n    return col;\n}\n\nvec3 camera(vec2 pixel_coords, vec3 pos, vec3 lookAt)\n{\n\tvec2 pixelCoordsN = vec2(pixel_coords)/iResolution.xy;\n\tvec2 dc = (pixelCoordsN*2.-1.);\n\tdc.y *= float(iResolution.y)/float(iResolution.x);\n\tvec3 ro = pos;\n\tvec3 fw = normalize(lookAt-ro);\n\tvec3 rg = normalize(vec3(-fw.z,sin(0.05*iTime+PI*0.5),fw.x));\n\tvec3 up = normalize(cross(rg,fw));\n\tfloat fo = 3.;\n\tvec3 rd = normalize(fw * fo + up * dc.y + rg * dc.x);\n\treturn rd;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;   \n    \n    // Scene description\n    Scene scene;\n    scene.time = 40.+ 0.3*iTime;\n    vec3 albedo = ALBEDO;// + (vec3(1.0f)+ 0.1*sin(scene.time * vec3(0.5,1.,0.5)));\n    float density = DENSITY;// - sin(scene.time)*30.;\n    vec3 extinction = EXTINCTION;// * (vec3(1.0f)+ 0.1*sin(scene.time * vec3(2.,1.,0.5)));\n\tscene.sigmaS = albedo*extinction;\n    scene.sigmaA = extinction-scene.sigmaS;\n    scene.sigmaS *= density;\n    scene.sigmaA *= density;\n    scene.lightPosition = vec3(sin(scene.time * 0.5 -20.), 0.,cos(scene.time * 0.5 -20.));\n    scene.lightIntensity = 3.*vec3(1.,1.,1.);\n      \n    // Init. random\n    uint seed = uint(fragCoord.x + iResolution.x*fragCoord.y )+ uint(iFrame%1000)*uint(iResolution.x*iResolution.y);\n    scene.random =  uvec2(0,seed);   \n    \n    vec3 col = vec3(0.);   \n\n    vec3 camPos = vec3(cos(0.01*scene.time)*3.,sin(0.01*scene.time),sin(0.01*scene.time)*3.);\n    camPos = camPos * (0.85 - 0.15f * sin(scene.time+0.9));\n    for(int i = 0; i < AA && (iFrame != -1); i++)\n    {\n        vec2 offset = vec2(nextFloat(scene.random),nextFloat(scene.random))-0.5;  \n        vec3 rd = camera (fragCoord+offset, camPos, vec3(0.));\n        col += traceSdf(camPos, rd, scene);\n    }\n    \n    col /= float(AA);    \n    col = min(col.rgb, vec3(1.));\n    \n    vec3 pCol = texelFetch(iChannel0,ivec2(fragCoord),0).rgb;\n\n    fragColor = vec4(mix(col.rgb, pCol, 0.8f),0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.14159265359\n\n//random\nfloat hash( float n )\n{\n\treturn fract(sin(n)*43758.5453);\n}\n\n//random\nfloat hash21( uvec2 x )\n{\n    uvec2 q = 1103515245U * ( (x>>1U) ^ (x.yx   ) );\n    uint  n = 1103515245U * ( (q.x  ) ^ (q.y>>3U) );\n    float f = float(n) * (1.0/float(0xffffffffU));\n    return f;\n}\n\n//math\nfloat gauss(float x, float c)\n{\n\treturn exp(-pow(x,2.)/pow(2.*c,2.));\n\n}\n\nvec3 gamma(vec3 x, float gamma)\n{\n\treturn vec3(pow(x.x,gamma),pow(x.y,gamma),pow(x.z,gamma));\n}\n\nfloat saturate( float x) { return clamp(x,0.,1.);}\n\nvec3 saturate (vec3 x) { return vec3 (saturate(x.x),saturate(x.y),saturate(x.z));}\n            \nfloat smallestPositive(float x,float y)\n{\n\tif(x<0.&&y>=0.) return y;\n    if(y<0.&&x>=0.) return x;\n    else return min(x,y);\n}\n\nvec3 cartToSph(vec3 pos)\n{\n\tfloat r = length(pos);\n\treturn vec3(r,acos(pos.y/r),atan(pos.z,pos.x));//wikipedia physics convention\n}\n\nvec3 sphToCart(vec3 sc) //vec3 (radius, polar, azimuth)\n{\t\n\tfloat x = sc.x * sin(sc.y) * cos(sc.z);\n\tfloat z = sc.x * sin(sc.y) * sin(sc.z);\n\tfloat y = sc.x * cos(sc.y);\n\treturn vec3(x,y,z);\n}\n\nvec3 RGBToXYZ(vec3 rgb) {\n   \tvec3 xyz;\n    xyz[0] = 0.412453f * rgb[0] + 0.357580f * rgb[1] + 0.180423f * rgb[2];\n    xyz[1] = 0.212671f * rgb[0] + 0.715160f * rgb[1] + 0.072169f * rgb[2];\n    xyz[2] = 0.019334f * rgb[0] + 0.119193f * rgb[1] + 0.950227f * rgb[2];\n\n\treturn xyz;\n}\n\nmat2x2 rot(float angle)\n{\n  \n    return mat2x2(cos(angle), -sin(angle),\n\t\t\t\t  sin(angle), cos(angle));\n}\n\n\n   \n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}