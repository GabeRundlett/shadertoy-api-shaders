{
    "Shader": {
        "info": {
            "date": "1617750674",
            "description": "Training what I learn in evvvvil stream for fractalish stuff.\nTesting some color scheme also.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ns23zc",
            "likes": 0,
            "name": "大龙猫 - Quicky#050",
            "published": 3,
            "tags": [
                "quicky"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 308
        },
        "renderpass": [
            {
                "code": "  #define fGlobalTime iTime\n  mat2 rot(float a){\n      float c=cos(a),s=sin(a);\n     return mat2(c,-s,s,c);\n     }\n float frbox(vec3 p,vec3 b ,float e){\n         \n      p = abs(p)-b;\n   vec3 q = abs(p+e)-e;\n    return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n   }\n  float structure(vec3 p ){\n     float t  =fGlobalTime*.01;\n     float tt = fGlobalTime*.303;\n   vec3 np=p;\n    float h = 1000.;\n \n\n     np.z = abs(np.z)-(1.5+sin(t*100.)*.5+.5);\n    for(int i=0;i<20;i++){\n\n     np /=(1.1);\n     if(i==1){   np .xy = np.x < np.y ? np.yx:np.xy;\n     np.xz*=rot(.753-float(i)-t*t);\n     } else if(i==2) { np .xy = np.x > np.y ? np.yx:np.xy;\n        np.xy*=rot(.753+t*t+float(i));\n     }else if(i==3) {   np .xy = np.x < np.y ? np.yx:np.xy;\n        np.zy*=rot(.753+float(i));\n     } else {   np .xy = np.x > np.y ? np.yx:np.xy;\n                 np.yz*=rot(.753-t+float(i));\n       }\n      h = min(h,frbox(np,vec3(1.1),.1-abs(np.x*.2)));\n    }  \n   \n  return h;\n    \n    }\n   vec2 sdf(vec3 p){\n     float t  = (fGlobalTime*.02);\n     float tt = fract(fGlobalTime*.33);\n     float h = structure(p);\n     float l = length(p-vec3(0.,0.,0.))-(.25+sin(t*200.)*.1+.1);\n      vec2 rt = l < h ? vec2(l,1.):vec2(h,2.);\n     return rt;\n  }\n  vec2 nv = vec2(.00001,.0);\nvec3 norm(vec3 p){\n     float d = sdf(p).x;\n     return normalize(\n    vec3(\n      d-sdf(p-nv.xyy).x,\n      d-sdf(p-nv.yxy).x,\n     d-sdf(p-nv.yyx).x\n  )\n  );\n    }\nvec3 pal(float t){\n  return sqrt(.5+vec3(.5,.0,.5)*cos(2.*3.141592*(1.*t+vec3(.0,.4,.6))));\n  } \n\nvec2 rayt(vec3 ro,vec3 rd,int st){\n    vec3 rp = ro;\n  float rdd= 0.;\n    for(int i=0;i<=st;i++){\n      vec2 d = sdf(rp);\n        rdd += d.x;\n         rp = ro+rdd * rd;\n        if(d.x<=0.0001){\n              return vec2(rdd,d.y);   \n        }\n    }\n    return vec2(1000.,0.);\n  }\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    \n \n\tvec3 col = vec3(.1);\n  vec3 ro= vec3(0.,0.,-10.),rd= normalize(vec3(uv,1.)),rp = ro;\n  vec3 light = vec3(1.11,0.001,-3.);\n  \n  vec2 res = rayt(ro,rd,69);\n             rp = ro+rd*res.x;\n          if(res.y ==2.){\n              \n            col = pal(length(rp))* max(0.0,dot(normalize(light),norm(rp)));\n          } else if(res.y==1.) {\n            \n       \n            col =vec3(1.)* max(0.0,dot(normalize(light),norm(rp)));\n            } else {\n col = vec3(.1);\n              }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}