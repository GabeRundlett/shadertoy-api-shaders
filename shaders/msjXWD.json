{
    "Shader": {
        "info": {
            "date": "1670345276",
            "description": "Very messy, couldn't quite get the colors right but it looks okay.\n\nAO and shadows taken from here:\nhttps://www.shadertoy.com/view/cdSXDW\n\nMaterials inspired by this:\nhttps://www.shadertoy.com/view/ttsXWr",
            "flags": 0,
            "hasliked": 0,
            "id": "msjXWD",
            "likes": 16,
            "name": "Pimple Wave",
            "published": 3,
            "tags": [
                "skin"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "// was 400, 100, 0.001\n#define MAX_STEPS 100\n#define MAX_DIST 25.\n#define SURF_DIST .005\n\nvec3 rayOri() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    float r = 8.;\n    float t = 0.1 * iTime;\n    vec3 ro = r * vec3(cos(t), 0.4, sin(t));\n    //ro.yz *= rot(-m.y*3.14+1.);\n    //ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat dist1(vec3 p) {\n    float pd = p.y - 3. * texture(iChannel0, 0.01 * p.xz + iTime * 0.01).r;\n    return pd;\n}\n\nvec3 norm1(vec3 p) {\n\tfloat d = dist1(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        dist1(p-e.xyy),\n        dist1(p-e.yxy),\n        dist1(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat mat = 0.;\nvec2 dist(vec3 p) {\n    p.x += iTime;\n    p.y += 0.15*cos(1.5 * p.x + iTime);\n    float d1 = dist1(p);\n    //vec3 n1 = norm1(p);\n\n    vec2 ipos = floor(p.xz) + 0.5;\n    vec2 fpos = p.xz - ipos;\n   \n    float h = dist1(vec3(ipos.x,p.y,ipos.y));\n    float rnd = h21(ipos);\n    float r = 0.11 + 0.06 * rnd;\n    vec3 p2 = vec3(fpos.x, 0, fpos.y);\n    float a = 2. * pi * rnd;\n    float b = cos(a)*p2.x+sin(a)*p2.z;\n    float c = (.5+.5*cos(ipos.x * ipos.y + 32. * b + 4. * iTime));\n    vec3 q = vec3(0, r - h + 0.25 * h * c, 0);\n    float sd = length(p2 - q) - r;\n    sd *= 0.5;\n    if (rnd < 0.025) {\n        sd = length(vec3(fpos.x,p.y * 0.5,fpos.y)) -0.5;\n    }\n    float d = d1;\n    float mat = 0.;\n    if (sd < d1) {\n        mat = 1.;\n        d = sd;\n    }\n    //d = smin(d1, sd, .1 + .1 * (1.-c)); // pimples :)\n    return vec2(d, mat);\n}\n\nvec3 march(vec3 ro, vec3 rd, float z) {\t\n    float d=0.;\n    float s = sign(z);\n    float steps = 0.;\n    vec2 dmat = vec2(0);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*d;\n        dmat = dist(p);        \n        if (s != sign(dmat.x)) { z *= 0.5; s = sign(dmat.x); }\n        if(abs(dmat.x)<SURF_DIST || d>MAX_DIST) break;\n        d += dmat.x*z; \n        steps++;\n    }\n    \n    return vec3(min(d, MAX_DIST), steps, dmat.y);\n}\n\nvec3 normal(vec3 p) {\n\tfloat d = dist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        dist(p-e.xyy).x,\n        dist(p-e.yxy).x,\n        dist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 rayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n// Stolen from Sizertz (cool shader)\n// https://www.shadertoy.com/view/cdSXDW\nfloat AO(in vec3 p, in vec3 n) {\n\tfloat occ = 0.;\n    float sc = 1.;\n    for (float i = 0.; i < 5.; i++) {\n        float h = 0.015 + 0.015 * i;\n        float d = dist(p+h*n).x;\n        occ += (h-d)*sc;\n        sc *= 0.95;\n    }\n    return clamp(1. - 3.*occ, 0., 1.);\n}\n\nfloat shadow(in vec3 ro, in vec3 rd) {\n    float res = 1.;\n    float t = SURF_DIST;\n    for (int i=0; i<24; i++)\n    {\n\t\tfloat h = dist(ro + rd * t).x;\n        float s = clamp(32. * h / t, 0., 1.);\n        res = min(res, s);\n        t += clamp(h, 0.01, 0.2);\n        if(res<SURF_DIST || t>MAX_DIST ) break;\n    }\n    res = clamp(res, 0.0, 1.0);\n    return smoothstep(0., 1., res);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = rayOri();\n    \n    vec3 rd = rayDir(uv, ro, vec3(0), 1.4);\n    vec3 col = vec3(0);\n   \n    vec3 m = march(ro, rd, 1.);\n    float d = m.x;\n    \n    vec3 p = ro + rd * d;\n    float IOR = 1.2;\n    if(d<MAX_DIST) {        \n        vec3 n = normal(p);\n        vec3 r = reflect(rd, n);\n        float ao = AO(p, n);\n        \n        vec3 ld = normalize(vec3(1,1,-1) * rayOri());//vec3(-1,2,-3));\n        float dif  = dot(n,  ld)*.5+.5;\n        float fres = pow(1. + dot(rd, n), 3.);\n        \n        vec3 col1 = vec3(dif);//pal(0.25,vec3(0,1,2)/3.);\n \n        //col = mix(vec3(0), .5+.5*vec3(abs(rd.x),rd.y,abs(rd.z)), abs(mat-at));\n        vec3 pl = pal(p.y + iTime, vec3(0,1,2)/3.);\n        vec3 tx = texture(iChannel0, 0.01 * p.xz).rgb;\n        //col *= tx;\n       // col = mix(col, pl, at*fres);\n        col = col1;\n       // col *= ao * ao;\n        col.r += 0.4;\n      \n        vec2 ipos = floor(p.xz + vec2(iTime,0)) + 0.5;\n        vec2 fpos = fract(p.xz + vec2(iTime,0)) - 0.5;\n        float xp = 1./cosh(4. * length(fpos));\n        vec3 q = p - vec3(ipos.x, 0, ipos.y);\n        \n        q.y += 0.015 - dist1(q);\n    \n        float a = atan(p.y - q.y, p.x - q.x);\n        //col = mix(col, vec3(.5+.5 * cos(100. * a)), m.z);\n        \n        //col *= pal(m.z, 0.25 * vec3(0,1,2)/3.);\n        vec3 tx1 = texture(iChannel1, 0.05 * (p.xz + vec2(iTime,0))).rgb;\n        vec3 tx2 = texture(iChannel2, 0.05 * (p.xz + vec2(iTime,0))).rgb;\n        col = mix(col, tx1, 0.35);\n        col = mix(col, tx2, 1.-xp);\n        col = mix(col, vec3(1,0.5,0.5), 1.-exp(-0.01 * m.y));\n        ao = clamp(ao, 0., 1.);\n        col = mix(col, mix(tx1,tx2,0.3), 1.-ao * ao);\n        \n        float s = shadow(p + 4. * SURF_DIST * n, ld);\n        col *= .5 + 0.8* s;\n        float spec = pow(dif, 32.);\n        col = mix(col, vec3(1), spec);\n        col.gb *= 0.6;\n        col *= 1.-exp(-4.*abs(p.y));\n        vec3 c1 = texture(iChannel1, .5*(p.xy+vec2(iTime,-q.y))).rgb;\n        vec3 c2 = texture(iChannel2, .5*(p.yz+vec2(0,-q.y))).rgb;\n        vec3 c3 = texture(iChannel2, .5*(p.zx+vec2(0,iTime))).rgb;\n        vec3 c = abs(n).z*c1+abs(n).x*c2+abs(n).y*c3;\n       // col = mix(col, c, .5-.5*n.y);\n    }\n    else\n        col = .5+.5*vec3(abs(rd.x),rd.y,abs(rd.z));\n    \n    col = mix(col, vec3(0.05,0.013,0.01), 1.-clamp(exp(1.-0.5 * length(p.xz)), 0., 1.));\n    col = pow(col, vec3(1./2.2));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(2. * pi * (c * t + d));\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat sfloor(float a, float b) {\n    return floor(b) + 0.5 + 0.5 * tanh(a * (fract(b) - 0.5)) / tanh(0.5 * a);\n}\n\n// From iq, k = 0.12 is good\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}