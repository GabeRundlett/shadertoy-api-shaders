{
    "Shader": {
        "info": {
            "date": "1708168730",
            "description": "Ray-marching - Simple Tunnel\n\nArt shader.Cineshader support\n[url] https://cineshader.com/view/X3SGRh",
            "flags": 0,
            "hasliked": 0,
            "id": "X3SGRh",
            "likes": 14,
            "name": "Ray-marching - Simple Spiral",
            "published": 3,
            "tags": [
                "raymarching",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "kojdj0811",
            "viewed": 777
        },
        "renderpass": [
            {
                "code": "#define TimeOffset 7000.0\n\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdOctahedron( vec3 p, float s )\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nvec3 palette( in float t)\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.00, 0.10, 0.20);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat map(vec3 p) {\n    vec3 objPos = vec3(0,0,0);\n\n    float gridScale = 0.08;\n    vec3 q = p;\n    q.y -= (iTime+TimeOffset) * 0.02;\n    q = mod(q, gridScale) - gridScale*0.5;\n\n    float dist = 1000000000000.;\n    vec3 dO = q;\n    dO.xy *= rot2D((iTime+TimeOffset)*p.z * 0.001);\n    dist = min(dist, sdOctahedron(dO - objPos, 0.01));\n\n    vec3 dS = q;\n    dS.xy *= rot2D((iTime+TimeOffset)*(p.z) * 0.001);\n    dist = min(dist, sdBox(dS - objPos - vec3(0,gridScale*0.25,0), vec3(0.002)));\n\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0, 0, -3);\n    vec3 rd = normalize(vec3(uv, 8));\n    vec3 col = vec3(0);\n\n    float t = 0.;\n    int i;\n    for (i = 0; i < 250; i++) {\n        vec3 p = ro + rd * t;\n        p.z += (iTime+TimeOffset) * 0.3;\n        p.xy *= rot2D((iTime+TimeOffset)*t * 0.0001);\n        p.xy *= rot2D((iTime+TimeOffset)*p.z * 0.00025);\n\n        float d = map(p);\n        t += d;\n        \n        if(d < 0.0001 || t > 100.0) break;\n    }\n\n    col = palette(t * .04 + float(i) * 0.005);\n    col *= vec3(pow(1. - t * 0.45, 0.1));\n    fragColor = vec4(col, (1.464 - t)*0.316);\n}\n/** SHADERDATA\n{\n\t\"title\": \"Ray-marching - Simple Spiral\",\n\t\"description\": \"\",\n\t\"model\": \"person\"\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}