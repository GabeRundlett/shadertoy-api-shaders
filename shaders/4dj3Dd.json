{
    "Shader": {
        "info": {
            "date": "1395286575",
            "description": "Shadertoy Hackathon!",
            "flags": 0,
            "hasliked": 0,
            "id": "4dj3Dd",
            "likes": 11,
            "name": "[SH2014] Germs",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "green",
                "goo",
                "2014",
                "germ",
                "hackathon",
                "microscope",
                "sh"
            ],
            "usePreview": 0,
            "username": "HLorenzi",
            "viewed": 3337
        },
        "renderpass": [
            {
                "code": "float hash(float x)\n{\n\treturn fract(sin(x * 43717.33175));\t\n}\n\n\n\nfloat circle(vec2 uv, vec2 p)\n{\n\treturn length(uv - p);\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\n\nvec4 map(vec2 uv, float time, float index, float iteration, float subtime)\n{\n\tvec4 finalCol = vec4(0, 0, 0, 0);\n\tvec2 pos = vec2(0, 0);\n\t\n\tuv += vec2(cos(uv.x + time), sin(uv.y + time));\n\t\n\tfloat c = 10000.0;\n\t\n\tfor(int i = 0; i < 10; i++)\n\t{\n\t\tif (i <= int(iteration))\n\t\t{\n\t\t\t\n\t\t\tfloat thisSubtime = 1.0;\n\t\t\tif (i == int(iteration))\n\t\t\t\tthisSubtime = subtime;\n\t\t\t\n\t\t\tfloat dir = hash(index * 3.19 + float(i) * 2.89) * 3.14159 * 2.0;\n\t\t\tfloat dist = 15.0;//hash(index * 6.13 + float(i) * 4.15 + 2.3) * 15.0 + 5.0;\n\t\t\tvec2 nextPos = vec2(cos(dir) * dist, sin(dir) * dist);\n\t\t\t\n\t\t\tfloat cur = segment(uv, pos, pos + nextPos);\n\t\t\tif (cur < min(1.0, thisSubtime * 10.0) * 10.0)\n\t\t\t\tc = min(c, cur);\n\t\t\t\n\t\t\tpos += nextPos;\n\t\t}\n\t}\n\t\n\t\n\tif (c < 10.0)\n\t{\n\t\tif (c > 6.0)\n\t\t\tfinalCol = mix(vec4(0.1, 0.4, 0.1, 1), vec4(0.1, 0.8, 0.1, 1), (c - 6.0) / 4.0);\n\t\telse if (c > 3.0)\n\t\t\tfinalCol = mix(vec4(0.1, 0.8, 0.1, 1), vec4(0.1, 0.4, 0.1, 1), (c - 3.0) / 3.0);\n\t\telse\n\t\t\tfinalCol = mix(vec4(0.6, 0.8, 0.1, 1), vec4(0.1, 0.8, 0.1, 1), c / 3.0);\n\t}\n\t\n\treturn finalCol;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat time = iTime;\n\t\n\t// Screen resolution\n\tvec2 uv  = fragCoord.xy / iResolution.xy;\n\tuv       = uv * 2.0 - vec2(1, 1);\n\tuv.x    *= iResolution.x / iResolution.y;\n\tuv      *= 60.0;\n\t\n\t// Microscope aperture\n\tfloat aperture = min(60.0, abs(sin(mod(time, 11.0) / 11.0 * 3.14159)) * 1500.0);\n\t\n\tif (length(uv) >= aperture)\n\t{\n\t\tfragColor = vec4(0, 0, 0, 1);\n\t\treturn;\n\t}\n\t\n\tif (length(uv) >= aperture - 6.0)\n\t{\n\t\tfragColor = vec4(0.2, 0.2, 0.2, 1);\n\t\treturn;\n\t}\n\t\n\t\n\t// Camera\n\tfloat camIter = floor(time / 0.4);\n\tfloat camTime = mod(time, 0.4) / 0.4;//sin(mod(time, 0.4) / 0.4 * 3.14159) * 0.5 + 0.5;\n\t\n\t\n\tvec2 camPos = vec2(hash(camIter + 3.8) * 20.0, hash(camIter + 4.1) * 20.0);\n\tvec2 camPosNext = vec2(hash(camIter + 1.0 + 3.8) * 20.0, hash(camIter + 1.0 + 4.1) * 20.0);\n\tuv += mix(camPos, camPosNext, camTime);\n\t\n\t// Background color\n\tconst vec3 backgroundColorDef = vec3(1.0, 0.95, 0.95);\n\tvec3 backgroundColor;\n\t\n\tbackgroundColor = mix(backgroundColorDef, backgroundColorDef * 0.98, cos(uv.x) * sin(uv.y));\n\tbackgroundColor = mix(backgroundColor, backgroundColorDef, cos(uv.x * 0.2) * sin(uv.y * 0.2));\n\t\n\tfragColor = vec4(backgroundColor, 1.0);\n\t\n\t\n\t// Creature\n\tfloat index = floor(time / 11.0);\n\tfloat iteration = floor(mod(time, 11.0));\n\tfloat subtime = mod(time, 1.0) / 1.0;\n\t\n\tvec4 creatureColor = map(uv, time, index, iteration, subtime);\n\tif (creatureColor.a != 0.0)\n\t\tfragColor = creatureColor;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}