{
    "Shader": {
        "info": {
            "date": "1512870252",
            "description": "Animation that shows when loading a mission board in Elite Dangerous",
            "flags": 0,
            "hasliked": 0,
            "id": "llXfRl",
            "likes": 47,
            "name": "Welcome to the Starport",
            "published": 3,
            "tags": [
                "2d",
                "triangles"
            ],
            "usePreview": 0,
            "username": "marian42",
            "viewed": 1901
        },
        "renderpass": [
            {
                "code": "const float pi = 3.14159265359;\nconst float triangleScale = 0.816497161855865; // ratio of edge length and height\nconst vec3 orange = vec3(0.937, 0.435, 0.0);\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec4 getTriangleCoords(vec2 uv) {\n    uv.y /= triangleScale;\n    uv.x -= uv.y / 2.0;\n    vec2 center = floor(uv);\n    vec2 local = fract(uv);\n    \n    center.x += center.y / 2.0;\n    center.y *= triangleScale;\n    \n    if (local.x + local.y > 1.0) {\n    \tlocal.x -= 1.0 - local.y;\n        local.y = 1.0 - local.y;\n        center.y += 0.586;\n        center.x += 1.0; \n    } else {\n        center.y += 0.287;\n    \tcenter.x += 0.5;\n    }\n    \n    return vec4(center, local);\n}\n\nvec4 getLoader(vec4 triangle) {\n    if (length(triangle.xy) > 1.6) {\n        return vec4(0.0);\n    }\n    \n    float angle = atan(triangle.x, triangle.y);\n    float seed = rand(triangle.xy);\n    float dst = min(triangle.z, min(triangle.w, 1.0 - triangle.z - triangle.w)) * 15.0;\n    float glow = dst < pi ? pow(sin(dst), 1.5) : 0.0;\n    \n    return vec4(mix(orange, vec3(1.0), glow * 0.07), pow(0.5 + 0.5 * sin(angle - iTime * 6.0 + seed), 2.0));\n}\n\nfloat getBackground(vec4 triangle) {\n    float dst = min(triangle.z, min(triangle.w, 1.0 - triangle.z - triangle.w)) - 0.05;\n\t\n    if (triangle.y > 1.9 || triangle.y < -2.4 || dst < 0.0) {\n        return 0.0;\n    }\n\n    float value = pow(0.5 + 0.5 * cos(-abs(triangle.x) * 0.4 + rand(triangle.xy) * 2.0 + iTime * 4.0), 2.0) * 0.08;    \n    return value * (dst > 0.05 ? 0.65 : 1.0);\n}\n\nvec3 getColor(vec2 uv) {\n    uv *= 2.0 / iResolution.y;\n    \n    vec3 background = vec3(getBackground(getTriangleCoords(uv * 6.0 - vec2(0.5, 0.3))));\n \tvec4 loader = getLoader(getTriangleCoords(uv * 11.0));\n    \n    vec3 color = mix(background, loader.rgb, loader.a);\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    fragCoord = fragCoord - 0.5 * iResolution.xy;\n\tfragColor.rgb = 0.25 * (getColor(fragCoord)\n                            + getColor(fragCoord + vec2(0.5, 0.0))\n                            + getColor(fragCoord + vec2(0.5, 0.5))\n                            + getColor(fragCoord + vec2(0.0, 0.5)));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}