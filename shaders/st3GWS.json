{
    "Shader": {
        "info": {
            "date": "1636696958",
            "description": "render a terrain with water is impossible for 2 fps!\nwanna shadow? my toy will born..I give it up.",
            "flags": 0,
            "hasliked": 0,
            "id": "st3GWS",
            "likes": 10,
            "name": "mountain fly",
            "published": 3,
            "tags": [
                "terrain"
            ],
            "usePreview": 0,
            "username": "rockhard",
            "viewed": 388
        },
        "renderpass": [
            {
                "code": "//the height value is negative.so flip it over..\nfloat reheight(float py){\n   return 0.85-(55.0-py)/65.0;\n  }\n\nfloat map(vec2 x){\n\tvec2  p = x*0.02;\n    float a =fbm(x)*0.015; \n    float b = 1.0;\n    for(int i=0; i<5;i++) {\n        float n =noise3D(vec3(p.x,1.0,p.y)); \n        a += b*n;\n\t\tb *= 0.5;\n        p = m2(p)*2.0;\n    } \n   \n    a=(1.0-smoothstep(-0.1,1.0,a))*65.0;\n    float h=reheight(a);\n    a+=texture(iChannel0,x*0.5).x*h*5.0;\n    return a;\n}\nfloat Far =350.0;\nfloat raycast( vec3 ro, vec3 rd)\n{ \n    float t = 0.1;\n\tfor(int i=0; i<64; i++){\n        vec3 pos = ro + t*rd;\n\t\tfloat h =pos.y - map(pos.xz);         \n\t\tif(abs(h)<0.001*t) return t;\n        if(t>Far)return Far;\n\t\tt += h*0.5;         \n\t}\n\treturn t;\n}\n\nvec3 normal(vec3 p,float t){ vec2 e = vec2(0.002*t, 0.0);   \n\t  \n    return normalize(vec3(map(p.xz - e) - map(p.xz + e),\n                          2.0 * e.x,\n                          map(p.xz - e.yx) - map(p.xz + e.yx)));\n}\n\nvec3 hcolor(float h){\n  \n   vec3 col =vec3(0.375);\n      \n   col -= vec3(0.4-h,0.35,0.5)*smoothstep(0.2,0.9,1.0-h)\n       *(1.0-smoothstep(1.0,6.0,(h*h+0.9)));\n   \n   col=mix(vec3(0.16,0.1,0.06),col,smoothstep(-0.01,0.05,h));\n   return col;\n}\n\nvec3 color(vec3 ro,vec3 rd,vec3 p,vec3 n){   \n   float h=reheight(p.y);\n   vec3 col=hcolor(h);\n  \n   float wat=smoothstep(-0.001,0.01,h);\n   vec3 water=vec3(0.0,0.25,0.5);\n   \n   if(wat>0.0){\n     // Far=80.0;\n      //vec3 ref=normalize(vec3(rd.x+n.z,-rd.y,rd.z+n.x));\n      float t=0.0;// raycast(p,ref);\n      if(t<Far){\n       // float hw=p.y+ref.y*t;\n        //hw=reheight(hw);\n        float fres=1.0-dot(-rd,n);\n        fres*=fres;\n        water=vec3(0.0,0.1,fres*0.35); //hcolor(hw);\n      }\n     //Far=350.0;\n   }\n   \n   col=mix(water,col,wat);\n  \n   return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = fragCoord/iResolution.xy-0.5;\n       float vig=(1.0-uv.x*uv.x)*(1.0-uv.y*uv.y);\n    uv.x/=iResolution.x/iResolution.y;\n\n    mat3 camrot=rotXY(0.15,iTime*0.05+0.8);\n    vec3 ro=camrot[2]*5.0;\n    ro.y+=35.5;    \n    vec3 rd=getdir(uv,camrot);\n    ro.xz+=normalize(vec2(-rd.z,rd.x))*iTime;\n \n    float t=raycast(ro,rd);\n\n    vec3 light = normalize(vec3(-0.8,0.3,-0.3));\n    vec3 sun=max(0.0, dot(rd,light))*vec3(0.4,0.3,0.2);\n    vec3 sky=mix(vec3(0.25,0.2,0.1),vec3(0.0,0.3,0.75),rd.y)+sun;\n    //vec3 sky=vec3(0.3,0.7,0.9);\n    vec3 col =vec3(0.0);\n    \n    if(t<Far){\n    vec3 p=ro+rd*t;\n    vec3 n=normal(p,t);\n    //vec3 n= normalize(cross(dFdx(p), dFdy(p)));\n    float d2n=dot(light,n)*0.5+0.6;\n     col=color(ro,rd,p,n);\n     col*=d2n; \n     col=mix(col,sky,t/Far);     \n    }\n    else col=sky;\n    \n    //col=vec3(t/FAR);\n    fragColor = vec4(pow(col,vec3(0.65))*1.5*vig,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat3 rotXY(float rX, float rY){\n float cx = cos(rX),sx = sin(rX),cy = cos(rY),sy=sin(rY);\n return mat3(-sy, 0, -cy, -sx * cy, cx, sx * sy,cx * cy, sx, -cx * sy);\n}\nvec3 getdir(vec2 p,mat3 m){\n  return normalize(vec3(p.x * m[0].x + p.y * m[1].x - m[2].x, \n       p.x * m[0].y + p.y * m[1].y - m[2].y, \n       p.x * m[0].z + p.y * m[1].z - m[2].z));\n}\nfloat distsq(vec2 a,vec2 b){\n  float dx=a.x-b.x,dy=a.y-b.y; return float(dx*dx+dy*dy);\n} \n\nvec2 m2(vec2 p){  return vec2(p.x*0.8+p.y*0.6,p.y*0.8-p.x*0.6); } \n\nfloat noise3D(vec3 p){ \n   vec3 s = vec3(7, 157, 113);\n   vec3 ip = floor(p);  \n   vec4 h = vec4(0.0, s.yz, s.y + s.z) + dot(ip, s);\n    p -= ip;  \n    p = p*p*(3.0 - 2.0*p); //p *= p*p*(p*(p*6. - 15.) + 10.);\n    h = mix(fract(sin(h)*43.5453),fract(sin(h + s.x)*43.5453),p.x); \n    h.xy = mix(h.xz,h.yw,p.y); \n    return mix(h.x, h.y, p.z);\t\n}\n\nfloat rand(vec2 p){\n    p  = fract(p / vec2(2.16632,.17369)); p += dot(p.xy, p.yx+9.19);\n    return fract(p.x * p.y);\n}\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 n){\n    float sum = 0.0;\n    float amp= 1.0;\n    for (int i = 0; i <2; i++){\n        sum += noise(n) * amp;\n        n += n*3.0;\n        amp *= 0.25;\n    }\n    return sum;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}