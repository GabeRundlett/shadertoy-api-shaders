{
    "Shader": {
        "info": {
            "date": "1704834125",
            "description": "experimental sounds v2",
            "flags": 8,
            "hasliked": 0,
            "id": "lcXSzn",
            "likes": 5,
            "name": "experimental sounds v2",
            "published": 3,
            "tags": [
                "experimentalsoundsv2"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 199
        },
        "renderpass": [
            {
                "code": "//----------image\n//por jorge2017a2-\n//experimental sounds v2\n//--9-enero-2024\n//referencia e info\n//http://iquilezles.org/articles/\n\n#define MAX_STEPS 100\n#define MAX_DIST 255.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define Ka 0.5\n#define Kd 0.4\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\n//por FabriceNeyret2\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n\nfloat Intersect(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat Union(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat Difference(float distA, float distB)\n\t{ return max(distA, -distB);}\n\nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\n\nvec2 GetDist(vec3 p  ) \n{\tvec2 res= vec2(9999.0, -1.0);  \n     p.y=p.y+10.0;\n    vec3 p0=p;\n\tfloat planeDist1 = p.y+10.0;  //piso inf\n    res =opU2(res, vec2(planeDist1,100.0));\n    \n    p.y=p.y-5.0;\n    p.x=abs(p.x)-7.0;\n    p.z=abs(p.z)-7.0;\n    \n    float d1a= sdEquilateralTriangle(p.zx,3.0 );\n    float d1b=sdBox(p, vec3(5.0,15.0,5.0) );\n    float d1= Intersect(d1a,d1b);\n    res =opU2(res, vec2(d1,101.0));\n    \n    \n    return res;\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   vec3 p;\n    vec2 hit, object=vec2(0.1,0.0);\n    for(int i=0; i <= PMaxSteps; i++) \n    { p = ro + rd*object.x;\n      hit = GetDist(p);\n      object.x += hit.x;\n      object.y = hit.y;\n      if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }    \n    return object;\n}\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 9999.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < MAX_STEPS; i++) {\n      float hit = GetDist(p + lightPos * dist).x;\n      res = min(res, hit / (dist * lightSize));\n      dist += hit;\n      if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat occlusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {    \n      float hr = 0.01 + float(i) * 0.5 / 4.0;\n      float dd = GetDist(nor * hr + pos).x;\n      occ += (hr - dd)*sca;\n      sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 lightColor, float t) \n{   vec3 lightPos=lp;\n    vec3 worldPos = p;\n     vec3 V = normalize(ro - p);\n    vec3 N = normal;\n    vec3 L = normalize (lightPos - worldPos);\n    vec3 R = reflect (-L, N);\n    \n    float lightDist = max(length(L), .001);\n    float atten=1.0 / (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    L /= (lightDist*atten);\n    float shadow = getSoftShadow(worldPos, L);// shadows\n        \n    float occ = occlusion(worldPos, N);// occ\n    vec3 ambient = Ka + Ka * dot(normal, vec3(0., 1., 0.))*lightColor;\n    ambient*=0.5;\n\n    vec3 fresnel =  lightColor *  pow(clamp(1.0 + dot(rd, N), 0.0, 1.0), 2.0);;\n    float diff= clamp(dot(N, L), 0.0, 1.0);\n    //diff = pow(diff, 0.75) * 4.0;   //antes\n    vec3 diffuse =  lightColor * diff;\n    float shininess=10.0;\n    float specular    = pow(max(dot(R, V), 0.0), shininess);\n\n    vec3 back = 0.5 * lightColor * clamp(dot(N, -L), 0.0, 1.0); // back\n    vec3 colOut = occ*lightColor*(ambient+diffuse*shadow+.25 +back) + vec3(.5)*specular*specular;\n       return colOut;\n}\n\n\nvec3 Getluz(vec3 ro,vec3 p, vec3 lp, vec3 lcol,vec3 n, float diffp, vec3 specp)\n{ vec3 v=normalize(ro-p);\n    vec3 h=normalize(lp+v);\n    vec3 l=normalize(lp-p);\n    float ndh=max(0.0,dot(n,h));\n    float ndl=max(0.0,dot(n,l));\n    float ndv=max(0.0,dot(n,v));\n    float diff=ndl*diffp;\n    vec3  spec=0.8*pow(ndl,10.0)*specp;\n    vec3 col=(diff+spec*lcol);\n    return col;  \n}\n\n\n\nvec3 getColorTextura( vec3 p, vec3 nor,  int i)\n{\tvec3 col;\n    if (i==100 )\n    { col=tex3D(iChannel0, p/128., nor).yyy; return col*2.0; }\n\tif (i==101 ) { return tex3D(iChannel0, p/64., nor).xxx*3.0; }\n\tif (i==102 ) { return tex3D(iChannel2, p/32., nor); }\n\tif (i==103 ) { return tex3D(iChannel3, p/32., nor); }\n    return vec3(0.0);\n}\n\nvec3 render_sky_color(vec3 rd)\n{   float t = (rd.x + 1.0) / 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n\treturn sky;\n}\n\n\n\nvec3 GetMaterial(vec3 p,  vec3 nor, vec3 ro,  vec3 rd, int id_color)\n{  \tvec3 colobj; \n       \n   if (id_color>=100 )\n   { return  getColorTextura( p, nor,id_color); }\n      \n  return vec3(0.0);\n}\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43;d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\n\nvec3 Render(vec3 ro, vec3 rd)\n{  vec3 col = vec3(0);\n  vec3 p;\n     vec2 hit=RayMarch(ro,rd, MAX_STEPS);\n      if(hit.x<MAX_DIST)\n       {   p = (ro + rd * hit.x );\n        vec3 nor=GetNormal(p);\n        vec3 colobj;\n        colobj=GetMaterial( p, nor, ro, rd,  int(hit.y));\n        vec3 result;\n        \n        result= lightingv3(nor, p,light_pos1, rd,ro,colobj,hit.x)*light_color1;\n        result+= lightingv3(nor, p,light_pos2,rd, ro,colobj,hit.x)*light_color2;\n        col= result/2.0;\n        col= (ACESFilm(col)+linear2srgb(col)+col+ exposureToneMapping(3.0, col))/4.0 ;  \n    }\n    else if(hit.x>MAX_DIST)\n    col= render_sky_color(rd);\n   return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.x = uv.x * iResolution.x / iResolution.y;\n    vec2 mouseUV = iMouse.xy/iResolution.xy; // Range: <0, 1>\n   \n    float t0=iTime;\n    float t=mod(t0*5.0,500.0);\n \tlight_pos1= vec3(-10.0, 120.0, -25.); light_color1=vec3( 1.0,1.0,1.0 );\n \tlight_pos2= vec3(10.0, 20.0, -25.0 ); light_color2 =vec3( 1.0,1.0,1.0 ); \n  \n    vec3 ro=vec3(0.0,20.0,-25.0);\n    vec3  rd = normalize(vec3(uv,1.));\n    float t2=mod(t0, 6.0);\n    \n    if(t2>=0.0 && t2<=3.0)\n       { rd= rotate_x(rd, clamp(t2,0.0,0.75)); }\n    else if(t2>=3.0 )\n    {\n    ro=vec3(-10.0,20.0,-25.0);\n    rd= rotate_x(rd, 0.75);\n    rd= rotate_y(rd,  clamp(t2, 0.0,0.8) );\n    }\n   \n    //light_pos1+=ro;\n    //light_pos2+=ro;\n    vec3 col= Render( ro,  rd);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//por jorge2017a2 ----experimental sonidos\n//const float PI = 3.1415926;\nconst float TAU = 6.28318530;\n#define PIH (PI*.5)\n\n//gaz--//https://www.shadertoy.com/view/7lcXRf\n#define osc_sin(x)sin((x)*TAU)\n#define osc_saw(x)(1.-fract(x)*2.)\n#define osc_sqr(x)sign(0.5-fract(x))\n#define osc_tri(x)(asin(sin((x)*PI))/PIH)\n\n\nfloat sf1(float time,float tmin, float tmax)\n{\n    float fx=0.0;\n    \n    if(time>=tmin && time<=tmax)\n    {\n     float t=mod(time,4.0);\n    float x;\n    x=280.0;\n    \n    \n    float val;\n    float val0;\n    val0=10.0*cos(t*12.5);\n    val= sin(x*20.0*t+val0)+val0*t*exp(-(x/100.0)*t); \n    \n    fx=osc_sqr(val);\n    float fx2=osc_tri(val);\n    fx/=fx2;\n    \n   \n    if(t<0.73)\n    fx=fx*exp(-(x/100.0)*t);\n    else\n    fx=fx*exp(-(x/100.0)*0.73);\n    }\n    return fx;\n}\n\n\nfloat sf2(float time, float tmin, float tmax)\n{\n    float fx=0.0;\n    \n    if(time>=tmin && time<=tmax)\n    { \n    float t=mod(time*2.0,0.75);\n    float x;\n    x=380.0;\n    \n    float val;\n    val= sin(x*20.0*t)+x*t*exp(-(x/100.0)*t);\n    \n    fx=osc_sqr(val);\n    float fx2=osc_saw(x*t+val);\n    fx/=fx2;\n    \n    if(t<0.73)\n    fx=fx*exp(-(x/100.0)*t);\n    else\n    fx=fx*exp(-(x/100.0)*0.73);\n    }\n    return fx;\n    \n}\n\n\nfloat sf3n(float time, float tmin, float tmax)\n{\n    float fx=0.0;\n    \n    if(time>=tmin && time<=tmax)\n    { \n    float t=mod(-time*2.0,0.75);\n    float x;\n    x=380.0;\n    \n    float val;\n    val= sin(x*20.0*t)+x*t*exp(-(x/100.0)*t);\n    \n    fx=osc_sqr(val);\n    float fx2=osc_saw(x*t+val);\n    fx/=fx2;\n    \n    if(t<0.73)\n    fx=fx*exp(-(x/100.0)*t);\n    else\n    fx=fx*exp(-(x/100.0)*0.73);\n    }\n    return fx;\n    \n}\n\n\nfloat sf4(float time, float tmin, float tmax)\n{\n    float fx=0.0;\n\n    if(time>=tmin && time<=tmax)\n    { \n    \n     float t=mod(time*2.0,0.75);\n    float x;\n    x=380.0;\n    \n    float val;\n    val= sin(x*0.5*t)+x*t*exp(-(x/10.0)*t);\n    \n    fx=osc_sqr(val);\n    float fx2=osc_sin(x*t+val);\n    fx/=fx2;\n    \n    if(t<0.73)\n    fx=fx*exp(-(x/100.0)*t);\n    else\n    fx=fx*exp(-(x/100.0)*0.73);\n    }\n    return fx;\n    \n}\n\n\nfloat sf5(float time, float tmin, float tmax)\n{\n    float fx=0.0;\n\n    if(time>=tmin && time<=tmax)\n    {\n      fx=sf4(time,tmin,tmax);\n      fx*=(fx*sin(time*440.0));\n    }\n    return fx;\n}\n\n\nvec2 mainSound( int samp, float time )\n{\n    float fx;\n    float f1,f2,f3,f4,f5;\n    time=mod(time,40.0);\n    \n    \n    f2=sf2(time,0.0,3.0);\n    f1=sf1(time,0.0,11.0);\n    f2+=sf2(time,7.0,15.0);\n    f3= sf3n(time, 15.0,20.0);\n    f2+= sf2(time,20.0,23.0);\n    f3+=sf3n(time,23.0,26.0);\n    f2+= sf2(time,26.0,29.0);\n    f4=sf4(time,28.9,35.0);\n    f5=sf5(time, 35.0, 40.0);\n    \n    fx=f1+f2+f3+f4+f5;\n    \n\n    return vec2(fx*0.25);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//-------common\n#define PI 3.14159265\n\n///Gracias a Shane...16-jun-2020\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n  n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n  n /= dot(n, vec3(1)); \n  vec3 tx = texture(tex, p.yz).xyz;\n  vec3 ty = texture(tex, p.zx).xyz;\n  vec3 tz = texture(tex, p.xy).xyz;\n  return mat3(tx*tx, ty*ty, tz*tz)*n; \n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}