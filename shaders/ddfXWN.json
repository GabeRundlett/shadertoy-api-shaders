{
    "Shader": {
        "info": {
            "date": "1668887817",
            "description": "playing with glow and other things. recalculating the ray direction is kind of weird",
            "flags": 0,
            "hasliked": 0,
            "id": "ddfXWN",
            "likes": 39,
            "name": "Glowy Pearl Balls",
            "published": 3,
            "tags": [
                "glow"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 525
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n// RayMarching from TheArtOfCode\n\n// From BlackleMori\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdBox(in vec2 p, in vec2 b){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.))+min(max(d.x,d.y),0.);\n}\n\nvec3 rayOri() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    float mx = 0.5 - 0.5 * thc(4., 0.2 * iTime);\n    vec3 ro = vec3(0, mix(1.5, 0.1, mx), mix(-3., -18., mx));\n   // ro.yz *= rot(-m.y*3.14+1.);\n    //ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat dist(vec3 p) { \n    p.y += 250. + iTime; // + 2. * cc(1., 0.06 * p.z - iTime);\n    p.xz *= rot(3. * atan(p.y,p.z) - 0.1 * iTime);\n   // p.y += 0.5 * cos(10. * floor(p.x/3.) + 8. * floor(p.z/3.));\n    p = mod(p, 3.) - 1.5;\n    float d = length(p) - 0.5;\n    return d;\n}\n\nvec2 march(vec3 ro, vec3 rd, float z) {\t\n    float dO=0.;\n    float s = sign(z);\n    float steps = 0.;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = dist(p);\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) {\n            steps = float(i);\n            break;\n        }\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }      \n        dO += dS*z; \n    }\n    \n    return vec2(min(dO, MAX_DIST), steps);\n}\n\nvec3 normal(vec3 p) {\n\tfloat d = dist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        dist(p-e.xyy),\n        dist(p-e.yxy),\n        dist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 rayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = rayOri();\n    \n    vec3 rd = rayDir(uv, ro, vec3(0), 1.45);\n    vec3 col = vec3(0);\n   \n    vec2 m = march(ro, rd, 1.);\n    float d = m.x;\n\n    vec3 p = ro + rd * d;      \n    vec3 n = normal(p);\n    \n    rd = mix(rd, \n             rayDir(uv, ro, vec3(0), dist(p)), \n             0.25 + 0.25 * thc(10., 0.5 * length(p) + iTime));\n    rd = normalize(rd);\n    \n    vec3 r = reflect(rd, n);\n    vec3 lightDir = normalize(vec3(1,2,3));\n    float dif  = dot(n,  lightDir)*.5+.5;\n    float fres = pow(1. + dot(rd, n),  4.);\n    float v = exp(-0.03 * m.y);\n    if (d == MAX_DIST)\n        v = 0.;   \n\n    vec3 tx = texture(iChannel0, r).rgb;\n  \n    // mixing with p.y oversaturates but looks cool\n    vec3 bg = mix(vec3(1), \n                  pal(1.25 + 0.05 * cos(0.25 * iTime),\n                      0.5 * vec3(0,1,2)/3.), \n                  -abs(p.y));\n    \n    col = mix(bg * exp(-0.2 * abs(p.y)), \n              0.5 + 0.5 * n,  // was r\n              v);\n   \n    col = mix(col, tx, v * (1.-fres));\n\n    //col = pow(col, vec3(1./2.2));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(2. * pi * (c * t + d));\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat sfloor(float a, float b) {\n    return floor(b) + 0.5 + 0.5 * tanh(a * (fract(b) - 0.5)) / tanh(0.5 * a);\n}\n\n// From iq, k = 0.12 is good\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}