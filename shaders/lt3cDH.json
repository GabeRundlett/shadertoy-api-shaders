{
    "Shader": {
        "info": {
            "date": "1532407470",
            "description": "The code is a mess, but I got it to work.",
            "flags": 32,
            "hasliked": 0,
            "id": "lt3cDH",
            "likes": 4,
            "name": "Transparent Metaballs",
            "published": 3,
            "tags": [
                "2d",
                "metaballs",
                "transparent",
                "hdr"
            ],
            "usePreview": 0,
            "username": "luluco250",
            "viewed": 611
        },
        "renderpass": [
            {
                "code": "#define scale(x, s, c) ((x - c) * s + c)\n\nconst float pi = 3.1415926535897932384626433832795;\n\nfloat normal(float x, float mean, float variance) {\n    float v = variance * variance;\n    float a = 1.0 / sqrt(2.0 * pi * v);\n    float b = ((x - mean) * (x - mean)) / (2.0 * v);\n    return a * exp(-b);\n}\n\nfloat rand(vec2 uv, float t) {\n    const float a = 34.3454;\n    const float b = 45.5675;\n    const float c = 5428.1384;\n    float d = dot(uv, vec2(a, b));\n    return fract(sin(d) * c + t);\n}\n\nvoid mainImage(out vec4 out_color, vec2 coord) {\n    vec2 uv = coord / iResolution.xy;\n    \n    vec4 spheres = texture(iChannel0, uv);\n    \n    float noise = rand(uv, iTime * 0.0);\n    noise = normal(noise, 0.0, 0.0001);\n    vec3 color = vec3(noise);\n    \n    color += spheres.rgb * 0.05;\n    \n    color = clamp(color, 0.0, 1.0);\n    \n    color = pow(color, vec3(1.0 / 2.2));\n    out_color = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//\tGenerate circles\n\nstruct Circle {\n    vec4 color;\n\tvec2 pos;\n\tfloat size;\n};\n    \n#define nsin(x) (sin(x) * 0.5 + 0.5)\n#define scale(x, s, c) ((x - c) * s + c)\n    \nfloat sin_curve(\n    float source,\n    float period,\n    float phase_shift,\n    float amplitude,\n    float position,\n    bool allow_negatives\n) {\n    float s = sin(source * period + phase_shift);\n    s = !allow_negatives ? s * 0.5 + 0.5 : s;\n    return s * amplitude + position;\n}\n\nfloat rand(vec2 uv, float t) {\n    const float a = 34.3454;\n    const float b = 45.5675;\n    const float c = 5428.1384;\n    float d = dot(uv, vec2(a, b));\n    return fract(sin(d) * c + t);\n}\n    \nvoid draw(inout vec4 color, vec2 coord, Circle c) {\n\tcolor = mix(color, c.color, step(distance(c.pos, coord), c.size));\n}\n\nvoid mainImage(out vec4 out_color, vec2 coord) {\n\tvec4 color = vec4(0.0);\n    \n    float scale = 4.0;\n    coord = scale(coord, scale, iResolution.xy * 0.5);\n    \n    for (int i = 0; i < 5; ++i) {\n        Circle c = Circle(\n            vec4(1.0),\n            vec2(\n                sin_curve(iTime, 1.0, float(i + 1), 0.5, 0.25, false),\n                sin_curve(iTime, 1.0, -float(i + 1), 0.5, 0.25, false)\n            ) * iResolution.xy,\n            nsin(iTime + log2(coord.x)) * 90.0 + 30.0\n        );\n        draw(color, coord, c);\n    }\n    \n    //\t\"Eraser\" circle when clicking\n    if (iMouse.z > 0.0) {\n        Circle touch = Circle(vec4(0.0), iMouse.xy, 60.0);\n        draw(color, coord, touch);\n    }\n    \n    out_color = color;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//\tBlur spheres horizontally\n\nvoid mainImage(out vec4 out_color, vec2 coord) {   \n    const int samples = 13;\n    const float weights[samples] = float[samples](\n        0.020470,\n        0.035759,\n        0.056441,\n        0.080494,\n        0.103725,\n        0.120769,\n        0.127052,\n        0.120769,\n        0.103725,\n        0.080494,\n        0.056441,\n        0.035759,\n        0.020470\n    );\n    const float scale = 1.25;\n    const float start_offset = float(samples / 2 + 1);\n    \n    vec2 ps = vec2(1.0) / iResolution.xy;\n    \n    vec2 uv = coord * ps;\n    vec4 color = vec4(0.0);\n    \n    uv.x -= start_offset * ps.x * scale;\n    \n    for (int i = 0; i < samples; ++i) {\n        color += texture(iChannel0, uv) * weights[i];\n        uv.x += ps.x * scale;\n    }\n    \n    out_color = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//\tBlur spheres vertically\n\nvoid mainImage(out vec4 out_color, vec2 coord) {\n    const int samples = 13;\n    const float weights[samples] = float[samples](\n        0.020470,\n        0.035759,\n        0.056441,\n        0.080494,\n        0.103725,\n        0.120769,\n        0.127052,\n        0.120769,\n        0.103725,\n        0.080494,\n        0.056441,\n        0.035759,\n        0.020470\n    );\n    const float scale = 1.25;\n    const float start_offset = float(samples / 2 + 1);\n    \n    vec2 ps = vec2(1.0) / iResolution.xy;\n    \n    vec2 uv = coord * ps;\n    vec4 color = vec4(0.0);\n    \n    uv.y -= start_offset * ps.y * scale;\n    \n    for (int i = 0; i < samples; ++i) {\n        color += texture(iChannel0, uv) * weights[i];\n        uv.y += ps.y * scale;\n    }\n    \n    out_color = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//\tCut-off\n\nconst vec3 FRESNEL_COLOR = vec3(0.0, 0.25, 1.0);\nconst vec3 OUTLINE_COLOR = vec3(0.0, 0.0, 1.0);\nconst float HDR_MULTIPLIER = 10.0;\n\n#define scale(x, s, c) ((x - c) * s + c)\n\nvoid mainImage(out vec4 out_color, vec2 coord) {\n    coord = scale(coord, 1.0 / 4.0, iResolution.xy * 0.5);\n    \n    vec2 uv = coord / iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n    \n    if (color.a > 0.1) {\n        float fresnel = 1.0 - color.a * 1.1;\n        \n        if (color.a < 0.15)\n            color.rgb = OUTLINE_COLOR * HDR_MULTIPLIER * 100.0;\n        else\n            color.rgb = pow(FRESNEL_COLOR * HDR_MULTIPLIER * fresnel, vec3(2.0));\n        \n        color.a = 1.0;\n    }\n    \n    out_color = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}