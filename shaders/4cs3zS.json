{
    "Shader": {
        "info": {
            "date": "1703201568",
            "description": "original title: webcam fractal builder\niwhen you point the webcam on the screen, fractals will naturally form because of the feedback loop!\n\nok i did not quite achieve what i wanted but this is still cool :) \nuse the mouse to play around",
            "flags": 32,
            "hasliked": 0,
            "id": "4cs3zS",
            "likes": 6,
            "name": "buffer buffer feedback",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 o_trn = ( (fragCoord.xy - iResolution.xy*0.5) / iResolution.yy );\n    vec4 o_col_b1 = texture( iChannel0, fragCoord.xy/iResolution.xy);\n    \n\n    fragColor = vec4(o_col_b1);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_trn = ( (fragCoord.xy - iResolution.xy*0.5) / iResolution.yy );\n    float n_t = fract(iTime);\n\n\n    vec4 o_col_b1 = texture( iChannel0, fragCoord.xy/iResolution.xy);\n    fragColor = vec4(o_col_b1);\n    \n    \n    float n_tau = 6.2831;\n    float n = o_trn.y - sin(o_trn.x*n_tau)*.2;\n    n = length(o_trn);\n    float n_ang = fract(atan(o_trn.x, o_trn.y)/n_tau);\n    n_ang = sin(n_ang*n_tau+iTime)*0.01;\n    fragColor += 0.5*vec4(abs(n));\n    vec4 o_diff = fragColor-o_col_b1;\n    fragColor = o_col_b1+abs(o_diff)*.1;\n    fragColor = fract(fragColor);\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float f_n_rand2(vec2 pos)\n{\n    return fract(sin(1234.1234*pos.y+pos.y+iTime)*234.123);\n}\nfloat f_n_rand(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_trn_mouse = ( (iMouse.xy - iResolution.xy*0.5) / iResolution.yy );\n\n    if( iMouse.w== 0.0 ){\n        float n_m = -.05*(sin(iTime)*0.5+.5);\n        float n_toggle = 0.001+float(fract(iTime*0.5)>0.5)*-.1;\n        o_trn_mouse = vec2(n_toggle)+vec2(n_m)+0.05;\n    }\n    \n    o_trn_mouse*=0.2;\n    float n = 1.+o_trn_mouse.x;//sin(iTime*0.2)*0.003;//0.001;\n    \n    vec2 o_fc = (fragCoord.xy*(1.+o_trn_mouse));//+sin(iTime*0.001)*.5+.5)*0.00001);\n    vec2 o_ires = iResolution.xy;\n    vec2 o = o_fc/o_ires;\n    o-=o_trn_mouse/2.;\n    vec4 o_col_b1 = texture( iChannel0,o);\n    fragColor = fract(o_col_b1);\n    \n    o_trn_mouse *= 0.1;\n    float n_rnd = f_n_rand(fragColor.xy+iTime);\n    fragColor.xyz += o_trn_mouse.x*n_rnd;\n    //fragColor.y += (1.-o_trn_mouse.x)*f_n_rand(fragColor.xy);\n    //fragColor.z += fract(o_trn_mouse.x*2.)*f_n_rand(fragColor.xy);\n    vec4 o_diff = fragColor.xyzw-o_col_b1.zyxw;\n    fragColor += o_diff*0.1;\n    //fragColor.x = o_col_b1.z+abs(o_diff.z)*n_rnd;\n    //fragColor.y = o_col_b1.x+abs(o_diff.x)*(1.-n_rnd);\n    //fragColor.z = o_col_b1.y+abs(o_diff.y)*0.2;\n    fragColor = fract(fragColor);\n    \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}