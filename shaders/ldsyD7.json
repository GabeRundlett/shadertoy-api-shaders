{
    "Shader": {
        "info": {
            "date": "1488549504",
            "description": "switch #if line #67 for flow upon a texture\nvariant: just uncomment the last line",
            "flags": 0,
            "hasliked": 0,
            "id": "ldsyD7",
            "likes": 20,
            "name": "LIC 2D / flow 2.5D dynamic",
            "published": 3,
            "tags": [
                "noise",
                "flow",
                "curlnoise",
                "flownoise",
                "lic"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1692
        },
        "renderpass": [
            {
                "code": "// see also the static version: https://www.shadertoy.com/view/MslyD7#\n\n// --- Simplex noise 3D from  Makio64 / Ashima https://www.shadertoy.com/view/Xd3GRf\n\nvec4 permute(vec4 x){return mod(x*x*34.+x,289.);}\n\nfloat noise3(vec3 v){\n    v *= 64./2.; // emulates 64x64 noise texture\n  const vec2 C = 1./vec2(6,3);\n  const vec4 D = vec4(0,.5,1,2);\n  vec3 i  = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n  vec3 g = step(x0.yzx, x0);\n  vec3 l = 1. - g.zxy;\n  vec3 i1 = min( g, l );\n  vec3 i2 = max( g, l );\n  vec3 x1 = x0 - i1 + C.x;\n  vec3 x2 = x0 - i2 + C.y;\n  vec3 x3 = x0 - D.yyy;\n  i = mod(i,289.);\n  vec4 p = permute( permute( permute(\n\t  i.z + vec4(0., i1.z, i2.z, 1.))\n\t+ i.y + vec4(0., i1.y, i2.y, 1.))\n\t+ i.x + vec4(0., i1.x, i2.x, 1.));\n  vec3 ns = .142857142857 * D.wyz - D.xzx;\n  vec4 j = p - 49. * floor(p * ns.z * ns.z);\n  vec4 x_ = floor(j * ns.z);\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = floor(j - 7. * x_ ) *ns.x + ns.yyyy;\n  vec4 h = 1. - abs(x) - abs(y);\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n  vec4 sh = -step(h, vec4(0));\n  vec4 a0 = b0.xzyw + (floor(b0)*2.+ 1.).xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + (floor(b1)*2.+ 1.).xzyw*sh.zzww ;\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n  vec4 norm = inversesqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  vec4 m = max(.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.);\n  return .5 + 12. * dot( m * m * m, vec4( dot(p0,x0), dot(p1,x1),dot(p2,x2), dot(p3,x3) ) );\n}\n\n#define noise2( v) noise3(vec3(v,.01*iTime))\n\nvoid mainImage( out vec4 O, vec2 U ) // -------------------------------------------\n{\n    float t = iTime; const float N=30.;\n    vec2 R = iResolution.xy;\n    U /= 8.*R.y; \n    vec2 D, P0 =  U, P = P0;\n    O = vec4(0);\n    \n    for (float i=0.; i<1.; i+=1./N) {\n                                                     // --- random field creation\n        float T = noise2(P);\n#define dnoise2(i,j) T - noise2(P-vec2(i,j)/8./R.y)\n      //D = vec2(dFdx(T), dFdy(T) );                 // hardware derivatives\n        D = vec2(dnoise2(1,0), dnoise2(0,1) );       // software derivatives\n        D = normalize(D)*5./R.y;                     // optional : no calm areas\n        D = vec2(-D.y,D.x);                          // invicid noise: grad(D)=0\n                                                               \n\n        P -= .1/200.* D*R.y/8.;                      // --- advection (to be LIC )\n#if 1          \n\t    O +=   (.5+.5*vec4(P-P0,0,0)*200.*8./11.3)   // --- flow visualization \n             * pow(texture(iChannel1,P.xy*8.*R.y/R+.00*t).r*1.15,3.) *2.\n             * (1.+1.*sin(2.*6.2832*i+10.*t))\n            ;\n#else\n\t    O += pow(texture(iChannel2,P.xy*8.*R.y/R+.00*t)*1.15,vec4(3));\n#endif       \n    }\n    O /= N;\n    //O = .5+.5*vec4(D,0,0)*30.*.1* R.y /11.3; O=fract(O); // debug\n    //O = abs(2.*O-1.);\n    \n    //O = pow(texture(iChannel2,P.xy*8.*R.y/R+.00*t)*1.15,vec4(3));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}