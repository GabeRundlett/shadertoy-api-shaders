{
    "Shader": {
        "info": {
            "date": "1644410939",
            "description": "Use your mouse click and drag to interacting the ink",
            "flags": 32,
            "hasliked": 0,
            "id": "fsXfzr",
            "likes": 8,
            "name": "Ink Interacting",
            "published": 3,
            "tags": [
                "ink"
            ],
            "usePreview": 0,
            "username": "SamOrantin",
            "viewed": 176
        },
        "renderpass": [
            {
                "code": "vec4 color1 = vec4(0.17,0.19,0.18,1.0);\nvec4 color2 = vec4(0.0,0.0,0.0,1.0);\nvec4 color3 = vec4(0.0,0.0,0.0,1.0);\nfloat multiplier = 1.0;\nfloat midPosition = 1.0;\n\n#define NUM_OCTAVES 5\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    vec4 c = texture(iChannel0, uv);\n    //uv.x *= iResolution.x/iResolution.y;\n    \n    vec4 tex = texture(iChannel1, uv);\n    \n    float l = max(pow(clamp(((c.x+c.y+c.z)/2.7)*multiplier,0.0,1.0),2.0),pow(clamp(((c.x+c.y+c.z)/2.6)*multiplier,0.0,1.0),12.0));\n    \n    vec4 res1 = mix(color1, color2, smoothstep(0.0,midPosition,l));\n    vec4 res2 = mix(res1, color3, smoothstep(midPosition,1.0,l));\n    \n    fragColor = texture(iChannel2, uv);\n    fragColor = texture(iChannel1, uv);\n    fragColor = res2;\n    //fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat timeMultiply = 0.2;\nfloat noiseScale = 3.5;\n\n\nfloat noise3D(vec3 p)\n{\n\treturn fract(sin(dot(p ,vec3(12.9898,78.233,128.852))) * 43758.5453)*2.0-1.0;\n}\n\nfloat simplex3D(vec3 p, float time)\n{\n\t\n\tfloat f3 = 1.0/3.0;\n\tfloat s = (p.x+p.y+p.z)*f3;\n\tint i = int(floor(p.x+s));\n\tint j = int(floor(p.y+s));\n\tint k = int(floor(p.z+s));\n\t\n\tfloat g3 = 1.0/6.0;\n\tfloat t = float((i+j+k))*g3;\n\tfloat x0 = float(i)-t;\n\tfloat y0 = float(j)-t;\n\tfloat z0 = float(k)-t;\n\tx0 = p.x-x0;\n\ty0 = p.y-y0;\n\tz0 = p.z-z0;\n\t\n\tint i1,j1,k1;\n\tint i2,j2,k2;\n\t\n\tif(x0>=y0)\n\t{\n\t\tif(y0>=z0){ i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; } // X Y Z order\n\t\telse if(x0>=z0){ i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; } // X Z Y order\n\t\telse { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; }  // Z X Z order\n\t}\n\telse \n\t{ \n\t\tif(y0<z0) { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; } // Z Y X order\n\t\telse if(x0<z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; } // Y Z X order\n\t\telse { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; } // Y X Z order\n\t}\n\t\n\tfloat x1 = x0 - float(i1) + g3; \n\tfloat y1 = y0 - float(j1) + g3;\n\tfloat z1 = z0 - float(k1) + g3;\n\tfloat x2 = x0 - float(i2) + 2.0*g3; \n\tfloat y2 = y0 - float(j2) + 2.0*g3;\n\tfloat z2 = z0 - float(k2) + 2.0*g3;\n\tfloat x3 = x0 - 1.0 + 3.0*g3; \n\tfloat y3 = y0 - 1.0 + 3.0*g3;\n\tfloat z3 = z0 - 1.0 + 3.0*g3;\t\n\t\t\t\t \n\tvec3 ijk0 = vec3(i,j,k);\n\tvec3 ijk1 = vec3(i+i1,j+j1,k+k1);\t\n\tvec3 ijk2 = vec3(i+i2,j+j2,k+k2);\n\tvec3 ijk3 = vec3(i+1,j+1,k+1);\t\n            \n\tvec3 gr0 = normalize(vec3(noise3D(ijk0),noise3D(ijk0*2.01),noise3D(ijk0*2.02)));\n\tvec3 gr1 = normalize(vec3(noise3D(ijk1),noise3D(ijk1*2.01),noise3D(ijk1*2.02)));\n\tvec3 gr2 = normalize(vec3(noise3D(ijk2),noise3D(ijk2*2.01),noise3D(ijk2*2.02)));\n\tvec3 gr3 = normalize(vec3(noise3D(ijk3),noise3D(ijk3*2.01),noise3D(ijk3*2.02)));\n\t\n\tfloat n0 = 0.0;\n\tfloat n1 = 0.0;\n\tfloat n2 = 0.0;\n\tfloat n3 = 0.0;\n\n\tfloat t0 = 0.5 - x0*x0 - y0*y0 - z0*z0;\n\tif(t0>=0.0)\n\t{\n\t\tt0*=t0;\n\t\tn0 = t0 * t0 * dot(gr0, vec3(x0, y0, z0));\n\t}\n\tfloat t1 = 0.5 - x1*x1 - y1*y1 - z1*z1;\n\tif(t1>=0.0)\n\t{\n\t\tt1*=t1;\n\t\tn1 = t1 * t1 * dot(gr1, vec3(x1, y1, z1));\n\t}\n\tfloat t2 = 0.5 - x2*x2 - y2*y2 - z2*z2;\n\tif(t2>=0.0)\n\t{\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * dot(gr2, vec3(x2, y2, z2));\n\t}\n\tfloat t3 = 0.5 - x3*x3 - y3*y3 - z3*z3;\n\tif(t3>=0.0)\n\t{\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * dot(gr3, vec3(x3, y3, z3));\n\t}\n\treturn 96.0*(n0+n1+n2+n3);\n\t\n}\n\nfloat fbm(vec3 p, float t)\n{\n\tfloat f;\n    f  = 0.50000*simplex3D( p , t ); p = p*2.01;\n    f += 0.25000*simplex3D( p , t ); p = p*2.02; //from iq\n    f += 0.12500*simplex3D( p , t ); p = p*2.03;\n    f += 0.06250*simplex3D( p , t ); p = p*2.04;\n    f += 0.03125*simplex3D( p , t ); \n\n\treturn f;\n}\n\n\nfloat baseColorModify(in float C)\n{\n    return smoothstep(0.6,0.65,C);\n}\n\nfloat boxMask(vec2 uv, vec2 pivot, vec2 bounds, float falloff)\n{\n\tvec2 p = abs(uv - pivot);\n\tp = max(p - (bounds * 0.5), 0.);\n\t\n\treturn 1.0 - min(length(p) / max(falloff, 0.00001), 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = vec3(0.0);\n    \n    float time = timeMultiply * iTime;\n    \n    float n = fbm(vec3(time,vec2(uv*noiseScale)),time)*0.5+0.5;\n    \n    float aspect = iResolution.x / iResolution.y;\n    \n    \n    \n    vec2 box_position = vec2(0.5 * aspect, 0.5); // center of screen\n\n    vec2 box_bounds = vec2(0.8*aspect, 0.7);\n    \n    float box_falloff = 0.1;\n\n    float box = min(boxMask(fragCoord.xy / iResolution.yy, box_position, box_bounds, box_falloff),0.9);\n                \n                \n    n = baseColorModify(n)*(1.0-box);\n\n    fragColor = vec4(n);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float sampleDistance = 1.0;\nfloat diffusion = 2.0;\nfloat turbulence = 1.9;\nfloat fluidify = 0.017;\nfloat attenuate = 0.001;\n\nfloat boxMask(vec2 uv, vec2 pivot, vec2 bounds, float falloff)\n{\n\tvec2 p = abs(uv - pivot);\n\tp = max(p - (bounds * 0.5), 0.);\n\t\n\treturn 1.0 - min(length(p) / max(falloff, 0.00001), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy/iResolution.xy);\n    \n    vec4 baseColor = texture(iChannel0, uv);\n    \n    \n    float aspect = iResolution.x / iResolution.y;\n    \n    vec2 box_position = vec2(0.5 * aspect, 0.5); // center of screen\n\n    vec2 box_bounds = vec2(0.55*aspect, 0.2);\n    \n    float box_falloff = 0.4;\n\n    float box = boxMask(fragCoord.xy / iResolution.yy, box_position, box_bounds, box_falloff);\n    \n    \n    vec2 sDist = sampleDistance/iResolution.xy;\n    \n    vec4 newColor = texture(iChannel1, uv);\n    vec2 turb = (texture(iChannel3, uv).xy*2.0-1.5)*2.;\n    vec2 dirVec = uv - vec2(0.5,0.5);\n\n    vec4 newColor1 = texture(iChannel1, uv + vec2(1.0,0.0)*sDist);\n    vec4 newColor2 = texture(iChannel1 , uv + vec2(-1.0,0.0)*sDist);\n    vec4 newColor3 = texture(iChannel1, uv + vec2(0.0,1.0)*sDist);\n    vec4 newColor4 = texture(iChannel1, uv + vec2(0.0,-1.0)*sDist);\n    \n    vec4 newColor5 = texture(iChannel1, uv + vec2(1.0,1.0)*sDist);\n    vec4 newColor6 = texture(iChannel1, uv + vec2(-1.0,1.0)*sDist);\n    vec4 newColor7 = texture(iChannel1, uv + vec2(1.0,-1.0)*sDist);\n    vec4 newColor8 = texture(iChannel1, uv + vec2(-1.0,-1.0)*sDist);\n     \n    vec2 t = (newColor1.x+newColor1.y+newColor1.z)/3.0 * vec2(1.0,0.0);\n    t += (newColor2.x+newColor2.y+newColor2.z)/3.0 * vec2(-1.0,0.0);\n    t += (newColor3.x+newColor3.y+newColor3.z)/3.0 * vec2(0.0,1.0);\n    t += (newColor4.x+newColor4.y+newColor4.z)/3.0 * vec2(0.0,-1.0);\n    \n    t += (newColor5.x+newColor5.y+newColor5.z)/3.0 * vec2(1.0,1.0);\n    t += (newColor6.x+newColor6.y+newColor6.z)/3.0 * vec2(-1.0,1.0);\n    t += (newColor7.x+newColor7.y+newColor7.z)/3.0 * vec2(1.0,-1.0);\n    t += (newColor8.x+newColor8.y+newColor8.z)/3.0 * vec2(-1.0,-1.0);\n    \n    t /= 8.0;\n    \n    float mouseRegion = texture(iChannel2,uv).x;\n    \n    vec2 dir = vec2(t*(mouseRegion*0.+1.0)*diffusion+turb*turbulence + dirVec*0.7)*iTimeDelta*0.2 + (texture(iChannel2,uv).yz*2.-1.)*0.06;\n    \n    vec4 res = texture(iChannel1, uv+dir);\n    \n    if(iFrame<10 || sin(float(iFrame)/75.) > 0.)\n    {\n    \tfragColor =  mix(res-0.002*mouseRegion, baseColor, clamp(baseColor.a*fluidify + attenuate,0.0,1.0)) + 0.01*baseColor;\n    }\n    else\n    {\n    \tfragColor = mix(res-0.002*mouseRegion, baseColor, clamp(baseColor.a*fluidify + attenuate,0.0,1.0));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 speed = vec2(1.0,2.0);\nfloat v = 30.0;\nfloat dist = 0.3;\nfloat random1 = 1.0;\nfloat random2 = 100.0;\n\nfloat noiseScale = 1.;\n\nfloat timeMultiply = 0.1;\n\n#define NUM_OCTAVES 7\n\nfloat boxMask(vec2 uv, vec2 pivot, vec2 bounds, float falloff)\n{\n\tvec2 p = abs(uv - pivot);\n\tp = max(p - (bounds * 0.5), 0.);\n\t\n\treturn 1.0 - min(length(p) / max(falloff, 0.00001), 1.0);\n}\n\nfloat hash(float n)\n{\n   return fract(sin(dot(vec2(n,n) ,vec2(12.9898,78.233))) * 43758.5453);  \n}  \n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvec2 turbulence (in vec2 _st) {\n    \n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    \n    float m1 = mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n    \n    float a1 = random(i+1.0);\n    float b1 = random(i + vec2(1.0, 0.0));\n    float c1 = random(i + vec2(0.0, 1.0));\n    float d1 = random(i + vec2(1.0, 1.0));\n\n    vec2 u1 = f * f * (3.0 - 2.0 * f);\n\n    float m2 = mix(a1, b1, u1.x) +\n            (c1 - a1)* u1.y * (1.0 - u1.x) +\n            (d1 - b1) * u1.x * u1.y;\n    return vec2(m1,m2);\n}\n\nvec2 fbmV ( in vec2 _st) {\n\n    vec2 v = vec2(0.0);\n    vec2 a = vec2(0.5);\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * turbulence(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= vec2(0.5);\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ratio = iResolution.x/iResolution.y;\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv.x *= ratio;\n    \n    float time = timeMultiply * iTime;\n    \n    \n    float aspect = iResolution.x / iResolution.y;\n    \n    vec2 box_position = vec2(0.5 * aspect, 0.5); // center of screen\n\n    vec2 box_bounds = vec2(0.55*aspect, 0.2);\n    \n    float box_falloff = 0.4;\n\n    float box = boxMask(fragCoord.xy / iResolution.yy, box_position, box_bounds, box_falloff);\n\n   \n    vec2 r = vec2(0.);\n    vec2 q = vec2(0.);\n    q.x = fbmV(uv*noiseScale*3.0 + 7.10*time).x;\n    q.y = fbmV(uv*noiseScale*3.0 + vec2(1.0)).x;\n    \n    vec2 turb1 = fbmV(uv*noiseScale*13.0 + 1.0*q + vec2(1.7,9.2)+ 0.35*time )*0.5+0.5;\n    vec2 turb2 = fbmV(uv*noiseScale*152.0 + 1.0*q + vec2(8.3,2.8)+ 0.326*time)*0.5+0.5;\n    \n    vec2 turb = (turb1 + turb2)/2.;\n    \n    fragColor = vec4(turb,0.,0.);\n      \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float mouseMask(vec2 p,vec2 uv,float r,float smoothness){\n\n    float dist = sqrt(dot(uv-p,uv-p));\n    return smoothstep(r,r-smoothness,dist);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy/iResolution.xy);\n    \n    vec2 uv1 = (fragCoord.xy/iResolution.y);\n    \n    float ratio = iResolution.x/iResolution.y;\n    \n    vec4 pf = texture(iChannel0, uv);\n    \n    vec2 m = iMouse.xy/iResolution.y;\n    float mask = mouseMask(m,uv*vec2(ratio,1),0.2,0.1);\n    float mask1 = mouseMask(m,uv*vec2(ratio,1),0.3,0.4);\n    vec2 force = mask1*(- uv1 + m);\n    fragColor = vec4(max(pf.x*0.98,mask), vec2(force*0.5+0.5),0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\n#define NUM_OCTAVES 6\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}