{
    "Shader": {
        "info": {
            "date": "1678183474",
            "description": "I spent some time working on some noise functions and then used them to make a wood texture. I'd never used musgrave noise before - Looks very cool.\nI've tried to keep the code size down - Let me know if you find this useful!",
            "flags": 0,
            "hasliked": 0,
            "id": "mdy3R1",
            "likes": 63,
            "name": "Procedural Wood texture",
            "published": 3,
            "tags": [
                "procedural",
                "texture",
                "wood",
                "material",
                "nature"
            ],
            "usePreview": 0,
            "username": "dean_the_coder",
            "viewed": 1658
        },
        "renderpass": [
            {
                "code": "// 'Procedural Wood texture' dean_the_coder (Twitter: @deanthecoder)\n// https://www.shadertoy.com/view/mdy3R1\n//\n// Processed by 'GLSL Shader Shrinker'\n// (https://github.com/deanthecoder/GLSLShaderShrinker)\n//\n// I spent some time working on some noise functions and then\n// used them to make a wood texture. I'd never used musgrave\n// noise before - Looks very useful!\n//\n// Thanks to Evvvvil, Flopine, Nusan, BigWings, Iq, Shane,\n// totetmatt, Blackle, Dave Hoskins, byt3_m3chanic, tater,\n// and a bunch of others for sharing their time and knowledge!\n//\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define R\tiResolution\n#define sat(x)\tclamp(x, 0., 1.)\n#define S(a, b, c)\tsmoothstep(a, b, c)\n#define S01(a)\tS(0., 1., a)\n\nfloat sum2(vec2 v) { return dot(v, vec2(1)); }\n\n///////////////////////////////////////////////////////////////////////////////\n\nfloat h31(vec3 p3) {\n\tp3 = fract(p3 * .1031);\n\tp3 += dot(p3, p3.yzx + 333.3456);\n\treturn fract(sum2(p3.xy) * p3.z);\n}\n\nfloat h21(vec2 p) { return h31(p.xyx); }\n\nfloat n31(vec3 p) {\n\tconst vec3 s = vec3(7, 157, 113);\n\n\t// Thanks Shane - https://www.shadertoy.com/view/lstGRB\n\tvec3 ip = floor(p);\n\tp = fract(p);\n\tp = p * p * (3. - 2. * p);\n\tvec4 h = vec4(0, s.yz, sum2(s.yz)) + dot(ip, s);\n\th = mix(fract(sin(h) * 43758.545), fract(sin(h + s.x) * 43758.545), p.x);\n\th.xy = mix(h.xz, h.yw, p.y);\n\treturn mix(h.x, h.y, p.z);\n}\n\n// roughness: (0.0, 1.0], default: 0.5\n// Returns unsigned noise [0.0, 1.0]\nfloat fbm(vec3 p, int octaves, float roughness) {\n\tfloat sum = 0.,\n\t      amp = 1.,\n\t      tot = 0.;\n\troughness = sat(roughness);\n\tfor (int i = 0; i < octaves; i++) {\n\t\tsum += amp * n31(p);\n\t\ttot += amp;\n\t\tamp *= roughness;\n\t\tp *= 2.;\n\t}\n\treturn sum / tot;\n}\n\nvec3 randomPos(float seed) {\n\tvec4 s = vec4(seed, 0, 1, 2);\n\treturn vec3(h21(s.xy), h21(s.xz), h21(s.xw)) * 1e2 + 1e2;\n}\n\n// Returns unsigned noise [0.0, 1.0]\nfloat fbmDistorted(vec3 p) {\n\tp += (vec3(n31(p + randomPos(0.)), n31(p + randomPos(1.)), n31(p + randomPos(2.))) * 2. - 1.) * 1.12;\n\treturn fbm(p, 8, .5);\n}\n\n// vec3: detail(/octaves), dimension(/inverse contrast), lacunarity\n// Returns signed noise.\nfloat musgraveFbm(vec3 p, float octaves, float dimension, float lacunarity) {\n\tfloat sum = 0.,\n\t      amp = 1.,\n\t      m = pow(lacunarity, -dimension);\n\tfor (float i = 0.; i < octaves; i++) {\n\t\tfloat n = n31(p) * 2. - 1.;\n\t\tsum += n * amp;\n\t\tamp *= m;\n\t\tp *= lacunarity;\n\t}\n\treturn sum;\n}\n\n// Wave noise along X axis.\nvec3 waveFbmX(vec3 p) {\n\tfloat n = p.x * 20.;\n\tn += .4 * fbm(p * 3., 3, 3.);\n\treturn vec3(sin(n) * .5 + .5, p.yz);\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// Math\nfloat remap01(float f, float in1, float in2) { return sat((f - in1) / (in2 - in1)); }\n\n///////////////////////////////////////////////////////////////////////////////\n// Wood material.\nvec3 matWood(vec3 p) {\n\tfloat n1 = fbmDistorted(p * vec3(7.8, 1.17, 1.17));\n\tn1 = mix(n1, 1., .2);\n\tfloat n2 = mix(musgraveFbm(vec3(n1 * 4.6), 8., 0., 2.5), n1, .85),\n\t      dirt = 1. - musgraveFbm(waveFbmX(p * vec3(.01, .15, .15)), 15., .26, 2.4) * .4;\n\tfloat grain = 1. - S(.2, 1., musgraveFbm(p * vec3(500, 6, 1), 2., 2., 2.5)) * .2;\n\tn2 *= dirt * grain;\n    \n    // The three vec3 values are the RGB wood colors - Tweak to suit.\n\treturn mix(mix(vec3(.03, .012, .003), vec3(.25, .11, .04), remap01(n2, .19, .56)), vec3(.52, .32, .19), remap01(n2, .56, 1.));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fc) {\n    vec3 p = vec3((fc - .5 * R.xy) / R.y, floor(mod(iTime, 8.0)));\n    fragColor = vec4(pow(matWood(p), vec3(.4545)), 0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}