{
    "Shader": {
        "info": {
            "date": "1715612437",
            "description": "The Panini projection [url]http://tksharpless.net/vedutismo/Pannini/panini.pdf[/url] - project to a cylinder from centre point, then reproject from point on the cylinder opposite the centre point (or a point in between).\n\nMouse rotates.",
            "flags": 48,
            "hasliked": 0,
            "id": "Nd3Bzl",
            "likes": 19,
            "name": "Panini Projection Panorama",
            "published": 3,
            "tags": [
                "projection",
                "panini"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 248
        },
        "renderpass": [
            {
                "code": "// Panini Projection Panorama, mla, 2024\n//\n// The Panini projection, named for the Italian artist Giovanni\n// Paolo Panini, https://en.wikipedia.org/wiki/Giovanni_Paolo_Panini.\n// The projection allows a very wide view to be shown fairly\n// naturally in a relatively narrow picture area.\n\n// Controls:\n// <mouse>: rotate camera\n// <u>/<down>: zoom in/out\n// <left>/<right>: set projection parameter\n// g: show grid\n// r: auto rotation\n// t: use alternative texture\n// x: show normal projection\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord){\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    //if (iMouse.x > 0.0) uv *= exp(3.0*(2.0*iMouse.x-iResolution.x)/iResolution.x);\n    uv *= exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP)));\n    float x = uv.x;\n    // Project ray from (0,0,-k) to (uv,1) and compute intersection p\n    // with cylinder x²+z² = 1. Now the ray from origin to p \n    // is desired result.\n    float k = 1.0;\n    k = max(-1.0,1.0+0.125*float(keycount(KEY_LEFT)-keycount(KEY_RIGHT)));\n    //if (iMouse.x > 0.0) k = 2.0*iMouse.y/iResolution.y;\n    float A = x*x+(k+1.0)*(k+1.0); // >= 0\n    float B = k*(k+1.0);\n    float C = k*k-1.0;\n    float t = (B + sqrt(B*B-A*C))/A; // Furthest root\n    vec3 p = vec3(t*uv,t*(k+1.0)-k);\n    if (key(CHAR_X)) p = vec3(uv,1); // Normal perspective\n    p.xz = rotate(p.xz,-0.5*PI);\n    if (iMouse.x > 0.0) {\n      p.xy = rotate(p.xy,-PI*(2.0*iMouse.y-iResolution.y)/iResolution.y);\n      p.xz = rotate(p.xz,PI*(2.0*iMouse.x-iResolution.x)/iResolution.x);\n    }\n    if (!key(CHAR_R)) p.xz = rotate(p.xz,-0.25*iTime); \n    p = normalize(p);\n    vec3 col = (!key(CHAR_T) ? texture(iChannel0,p) : texture(iChannel1,p)).xyz;\n    if (!key(CHAR_G)) {\n      float phi = asin(p.y)/PI;\n      float nsteps = 12.0;\n      phi *= nsteps ;\n      col *= 0.6+0.4*smoothstep(0.0,fwidth(phi),abs(phi-round(phi)));\n      // lambda is discontinuous, so get glitches at 180° if just\n      // using fwidth(lambda). One way to fix this is to call fwidth\n      // again with a differently wrapped lambda & use whichever\n      // value is appropriate. (ie. covering a circle with 2 open sets).\n      float lambda = atan(p.x,p.z)/PI;\n      float dlambda = fwidth(lambda);\n      float lambda1 = mod(lambda,2.0);\n      float dlambda1 = fwidth(lambda1);\n      if (!key(CHAR_Z) && abs(lambda) > 0.5) dlambda = dlambda1; \n      lambda *= nsteps; dlambda *= nsteps;\n      col *= 0.6+0.4*smoothstep(0.0,dlambda,abs(lambda-round(lambda)));\n    }\n    col *= 2.0/(1.0+col);\n    if (alert) col.r = 1.0;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float PI = 3.14159265;\n\nbool alert = false;\nvoid assert(bool b) { if (!b) alert = true; }\n\nvec2 rotate(vec2 p, float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nconst int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\n// const int CHAR_0 = 48;\n\n// const int CHAR_A = 65;\n// const int CHAR_B = 66;\n// const int CHAR_C = 67;\n// const int CHAR_D = 68;\n// const int CHAR_E = 69;\n// const int CHAR_F = 70;\nconst int CHAR_G = 71;\n// const int CHAR_H = 72;\n// const int CHAR_I = 73;\n// const int CHAR_J = 74;\n// const int CHAR_K = 75;\n// const int CHAR_L = 76;\n// const int CHAR_M = 77;\n// const int CHAR_N = 78;\n// const int CHAR_O = 79;\n// const int CHAR_P = 80;\n// const int CHAR_Q = 81;\nconst int CHAR_R = 82;\n// const int CHAR_S = 83;\nconst int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\n// const int CHAR_W = 87;\nconst int CHAR_X = 88;\n// const int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 t, vec2 uv) {\n  int i = int(uv.x); // Column number\n  int j = int(uv.y); // Row\n  if (iFrame == 0) {\n    t = vec4(0);\n  } else {\n    t = texelFetch(iChannel2,ivec2(i,j),0); // Get current state   \n  }  \n  if (j == 0) {\n    // First row - key count\n    // Do key repeat here as well?\n    float w1 = keystate(i,0).x;\n    if (w1 != t.w) {\n      t.w = w1;\n      // Don't count key changes when ALT pressed\n      if (keystate(KEY_ALT,0).x == 0.0 && w1 != 0.0) {\n        t.x++; t.y = iTime;\n      }\n    }\n    // Key repeat - only when shader is running!\n    // Should have longer pause after first key press.\n    if (t.w != 0.0 && keystate(KEY_ALT,0).x == 0.0 && iTime-t.y > 0.25) {\n      t.x++; t.y = iTime;\n    }\n  }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}