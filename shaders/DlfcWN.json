{
    "Shader": {
        "info": {
            "date": "1690733211",
            "description": "playing with simple fractals",
            "flags": 0,
            "hasliked": 0,
            "id": "DlfcWN",
            "likes": 1,
            "name": "Cloth Fractal",
            "published": 3,
            "tags": [
                "raymarch",
                "mandelbulb"
            ],
            "usePreview": 0,
            "username": "Sleng",
            "viewed": 185
        },
        "renderpass": [
            {
                "code": "float mandelbulbDist(vec3 pos);\nfloat rayMarch(vec3 ro, vec3 rd);\nvec3 getNormal(vec3 p);\nfloat lightIntensity(vec3 p, vec3 lightDir);\nmat3 rotationMatrix(vec3 axis, float angle);\n\nfloat mandelbulbDist(vec3 pos) {\n    // Rotate the fractal over time\n    float angle = iTime/10.;\n    mat3 rot = rotationMatrix(vec3(0.0, 1.0, 0.0), angle);\n    pos = rot * pos;\n    \n     // Scale the fractal to make it appear larger\n    float scaleFactor = 0.85;  // Adjust this value to control the zoom level\n    pos *= scaleFactor;\n\n    vec3 z = pos;\n    float dr = 1.0;\n    float r = 0.0;\n    const int iterations = 5;\n    const float bailout = 2.0;\n    const float power = 3.0;\n    for (int i = 0; i < iterations; i++) {\n        r = length(z);\n        if (r > bailout) return r;\n\n        float theta = acos(z.z/r);\n        float phi = atan(z.y, z.x);\n        dr = pow(r, power - 1.0) * power * dr + 1.0;\n\n        float zr = pow(r, power);\n        theta *= power;\n        phi *= power;\n\n        z = zr * vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));\n        z += pos;\n    }\n    return 0.5 * log(r) * r/dr;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float totalDist = 0.0;\n    for(int i = 0; i < 128; i++) {\n        vec3 p = ro + rd * totalDist;\n        float d = mandelbulbDist(p);\n        totalDist += d;\n        if(d < 0.001) {\n            return totalDist;\n        }\n        if(totalDist > 4.0) break;\n    }\n    return totalDist;\n}\n\nvec3 getNormal(vec3 p) {\n    const vec2 eps = vec2(0.001, 0.0);\n    vec3 n;\n    n.x = mandelbulbDist(p + eps.xyy) - mandelbulbDist(p - eps.xyy);\n    n.y = mandelbulbDist(p + eps.yxy) - mandelbulbDist(p - eps.yxy);\n    n.z = mandelbulbDist(p + eps.yyx) - mandelbulbDist(p - eps.yyx);\n    return normalize(n);\n}\n\nfloat lightIntensity(vec3 p, vec3 lightDir) {\n    vec3 normal = getNormal(p);\n    return max(0.1, dot(normal, lightDir));\n}\n\nmat3 rotationMatrix(vec3 axis, float angle) {\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,   oc * axis.y * axis.y + c,         oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,   oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 color = vec3(0.0);\n    vec3 ro = vec3(0.0, 0.0, -2.5);\n    vec3 target = vec3(0.0, 0.0, 0.0);\n    \n    // Rotate the fractal over time\n    float angle = iTime;\n    mat3 rot = rotationMatrix(vec3(0.0, 1.0, 0.0), angle);\n    target = rot * target;\n\n    vec3 forward = normalize(target - ro);\n    vec3 right = cross(vec3(0.0, 1.0, 0.0), forward);\n    vec3 up = cross(forward, right);\n    vec3 c = ro + forward * 2.0;\n    vec3 i = c + right * uv.x;\n    vec3 j = c + up * uv.y;\n    vec3 p = i + j;\n    vec3 rayDir = normalize(p - ro);\n\n    float dist = rayMarch(ro, rayDir);\n    if(dist < 4.0) {\n        vec3 lightDir = normalize(vec3(0.5, 1.0, 0.8)); // Direction of the light\n        float diff = lightIntensity(ro + rayDir * dist, lightDir);\n        color = vec3(1.0, 0.0, 0.0) * diff;\n    }\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}