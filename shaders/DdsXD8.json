{
    "Shader": {
        "info": {
            "date": "1678286016",
            "description": "A simple 2d ray tracer",
            "flags": 32,
            "hasliked": 0,
            "id": "DdsXD8",
            "likes": 5,
            "name": "2d raytracing ",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 0,
            "username": "Pro_Coder",
            "viewed": 317
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord / iResolution.xy;\n\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define SCALE 5.\n\n#define LIGHT_SOURCE_POS vec2(0.0)\n#define LIGHT_HIT_ID 2u\n\n#define CIRCLE_POS vec2(-1., 0)\n#define CIRCLE_RAD 0.3\n#define CIRCLE_HIT_ID 1u\n\n#define BOX_POS vec2(-3.0, 1.)\n#define BOX_SIZE vec2(.5, .5)\n#define BOX_HIT_ID 3u\n\n#define NO_HIT_ID 0u\n\n#define MIN_DISTANCE 0.0001\n\nvoid mmin(inout float cd, float d, inout uint cHitId, uint hitId, uint ignoreId) {\n    if(cd < d || hitId == ignoreId) return;\n    cd = d;\n    cHitId = hitId;\n}\n\nfloat getDistance(vec2 pos, out uint hitId, uint ignoreId) {\n    float dis = 100000.;\n    hitId = NO_HIT_ID;\n    \n    mmin(dis, sdfCircle(pos, CIRCLE_POS, CIRCLE_RAD), hitId, CIRCLE_HIT_ID, ignoreId);\n    mmin(dis, sdfBox(pos, BOX_POS, BOX_SIZE), hitId, BOX_HIT_ID, ignoreId);\n    mmin(dis, length(pos - LIGHT_SOURCE_POS) - 0.0, hitId, LIGHT_HIT_ID, ignoreId);\n    \n    return dis;\n}\n\nstruct Ray {\n    float dis;\n    vec2 dir;\n    vec2 start;\n    vec2 pos;\n    uint hitId;\n};\n\nRay march(vec2 pos, vec2 rd, uint ignoreId) {\n    Ray r = Ray(0., rd, pos, pos, NO_HIT_ID);\n    \n    for(int i = 0; i < 1000; i++) {\n        float cDis = getDistance(r.pos, r.hitId, ignoreId);\n        r.dis += cDis;\n        r.pos = r.start + r.dir * r.dis;\n        \n        if(cDis < MIN_DISTANCE) {\n            break;\n        }\n    \n    }\n    \n    return r;\n    \n}\n\nvec3 getObjectColor(uint id, vec3 def) {\n    if(id == CIRCLE_HIT_ID) {\n        return vec3(.7, 0.2, 0.1);\n    } else if(id == BOX_HIT_ID) {\n        return vec3(.1, 0.2, 0.7);\n    }\n    \n    return def;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy*.5) / iResolution.yy * SCALE;\n    vec3 color = vec3(0.5);\n    vec3 light = vec3(0.0);\n    \n    \n    uint currentObjectId = NO_HIT_ID;\n    float dis = getDistance(uv, currentObjectId, NO_HIT_ID);\n    if(currentObjectId == LIGHT_HIT_ID || dis > 0.0) {\n        color = mix(color, vec3(.3), smoothstep(0.08, 0.0, dis));\n        currentObjectId = NO_HIT_ID;\n    }\n        \n    Ray ray = march(uv, normalize(LIGHT_SOURCE_POS - uv), currentObjectId);\n    if(ray.hitId == LIGHT_HIT_ID) {\n        light = vec3(1.) / pow(1. + ray.dis * 0.1, 2.);\n    }\n    color = getObjectColor(currentObjectId, color) * light;\n    \n    fragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float sdfCircle(in vec2 pos, vec2 center, float radius) {\n    return length(pos - center) - radius;\n}\n\nfloat sdfBox(in vec2 pos, vec2 center, vec2 size) {\n    vec2 p = pos - center;\n    vec2 m = abs(p) - (size * .5);\n    return max(m.x, m.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}