{
    "Shader": {
        "info": {
            "date": "1647987488",
            "description": "mouseable",
            "flags": 0,
            "hasliked": 0,
            "id": "NtXyDN",
            "likes": 8,
            "name": "Clean Metaballs",
            "published": 3,
            "tags": [
                "3d",
                "mouse",
                "sdf",
                "metaballs",
                "reflect",
                "reflective"
            ],
            "usePreview": 0,
            "username": "Veggiebob",
            "viewed": 372
        },
        "renderpass": [
            {
                "code": "// Fork of \"3D Reflective Metaballs\" by Veggiebob. https://shadertoy.com/view/MldyWn\n// 2022-03-22 22:13:22\n\n#define roughness 2.0 // between 0 and 1\n#define bigness 0.1\n#define EPSILON pow(10., -4.)\n#define num_balls 16.\n#define threshold 45.\n#define TIME_OFFSET (600.)\nfloat align (float diff, float dim){\n    if(diff>=dim){\n        return diff-dim;\n    } else {\n        return 0.;\n    }\n}\nfloat box3D (vec3 boxPos, vec3 boxSize, vec3 pos){\n    float n = align(abs(pos.x-boxPos.x), boxSize.x)+align(abs(pos.y-boxPos.y), boxSize.y);\n    n+=align(abs(pos.z-boxPos.z), boxSize.z);//just to keep the lines short\n    return n;\n}\nfloat sphere (vec3 spherePos, vec3 pos, float radius){\n    return length(pos-spherePos)-radius;\n}\nfloat sq (float x){\n    return x*x;\n}\nvec3 fractalColor (vec3 p, float iters){\n    vec3 c = texture(iChannel1, p).rgb;\n    for(float i = 0.; i<iters; i++){\n        c+=texture(iChannel1, p*pow(2., i)).rgb*pow(0.8, i);\n    }\n    return c;\n}\nvec2 rotate2D (vec2 p, float angle){\n    return vec2(p.x*cos(angle)-p.y*sin(angle), p.y*cos(angle)+p.x*sin(angle));\\\n}\n//from IQ -- https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k)\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat smin2(float a, float b, float k){\n\treturn min(a, b)-pow(0.5, 10.*mix(0., 0.1, abs(a-b)))*k;\n}\nfloat SDF (vec3 p){\n    float dP = 100.;//cube with rounded corners\n    float dp = 1.;\n    float time = iTime + TIME_OFFSET;\n    for(float i = num_balls; i<num_balls*2.; i++){\n        float inc = i*0.4*sq(sin(time*0.01*i*0.1))*0.5;\n        float constrict = 1.;//sq(sin(iTime))\n        vec3 pos = vec3(sin(time+inc), cos(time+inc), sin((time+inc)*2.))\n            *bigness*constrict;//modifiers\n        float smallSphere = sphere(pos, p, bigness*0.1);\n    \tdP = smin(dP, smallSphere, 0.08);\n    }\n   \t//optional distortion\n    //dP+=length(fractalColor(p*20., 3.))*0.0001*roughness;\n    return dP;//pow(0.99, max(dp, 1.))*0.1;\n}\nvec4 trace (vec3 o, vec3 r) {\n    float t = 0.;\n    vec3 p = o;\n    for(int i = 0; i<32; i++){\n        p = o+r*t;\n        float d = SDF(p);\n        t+=d*1.;\n    }\n    return vec4(p, t);\n}\n//Credit to Jamie Wong http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#surface-normals-and-lighting\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        SDF(vec3(p.x + EPSILON, p.y, p.z)) - SDF(vec3(p.x - EPSILON, p.y, p.z)),\n        SDF(vec3(p.x, p.y + EPSILON, p.z)) - SDF(vec3(p.x, p.y - EPSILON, p.z)),\n        SDF(vec3(p.x, p.y, p.z  + EPSILON)) - SDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\nfloat bright (vec3 c){\n    return dot(c, vec3(1.))/3.;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 mouse = iMouse.xy/iResolution.xy - vec2(0.5, 0.);\n    if(iMouse.xy == vec2(0.))mouse = vec2(0.0, 0.3);\n    mouse.x*=5.;\n    mouse.y*=2.;\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv-=0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    float groundHeight = 0.;\n    float angle = mouse.x;\n    float fov = 0.5;\n    float camDist = mouse.y-0.1;\n    vec3 camera = vec3(cos(mouse.x)*camDist, 0., sin(mouse.x)*camDist);\n    vec3 ray = vec3(-cos(mouse.x+uv.x*fov)*2., uv.y, -sin(mouse.x+uv.x*fov)*2.);\n    ray = normalize(ray);\n    \n    vec4 v = trace(camera, ray);\n    vec3 col = vec3(0.);//fractalColor(v.xyz, 5.);//fractalize\n    //col*=1./length(col);//normalize\n    //vec3 randomize = fractalColor(v.xyz*1., 3.);//texture(iChannel1, v.xyz*10.).xyz-0.5; \n    vec3 normal = estimateNormal(v.xyz);\n    vec3 newRay = reflect(ray, normal);\n    col = texture(iChannel0, newRay).rgb;//+vec3(0., 0., 0.3);\n\tfloat fog = 1./(1.+pow(v.w, 10.)*0.1);\n    vec3 background = vec3(1.); //texture(iChannel0, ray).rgb;\n    col=col*fog+(1.-fog)*background;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}