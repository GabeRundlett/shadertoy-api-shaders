{
    "Shader": {
        "info": {
            "date": "1661263660",
            "description": "I tried speeding up raymarching by mixing it with raytracing.\nIt doesn't seem to work too well",
            "flags": 0,
            "hasliked": 0,
            "id": "flVcWR",
            "likes": 1,
            "name": "bisection method w/ Box Interpol",
            "published": 3,
            "tags": [
                "sdf",
                "bisection",
                "falseposition"
            ],
            "usePreview": 0,
            "username": "alaula",
            "viewed": 182
        },
        "renderpass": [
            {
                "code": "#define FOVTAN 2.0\n#define CAMDIST 5.0\n#define DELTA 0.0001\n\nstruct ray {\n    vec3 rd;\n    vec3 ro;\n};\n\nstruct hit {\n    float tn;\n    float tf;\n};\n\nconst vec3 pos = vec3(1.0, 1.0, 1.0);\nconst float size = 1.0;\nconst float inflate = 1.0;\nconst vec3 boxDim = vec3(4.0,4.0,4.0);\nconst vec3 color = vec3(0.1, 0.4, 0.2);\n\nconst vec3 signs = vec3(1.0, -1.0, 0.0);\n\nray getRay(in vec2 fragCoord) {\n    vec2 circle = vec2(cos(iTime),sin(iTime));\n    float pxSize = FOVTAN/iResolution.x;\n    vec2 offset = pxSize*(fragCoord - iResolution.xy/2.0);\n    return ray(normalize(vec3(circle,offset.y) + offset.x*vec3(circle.y,-circle.x,0.0)),CAMDIST*vec3(-circle, 0.0));\n}\n\nfloat sdOctahedron(vec3 p, float s)\n{\n    p = abs(p);\n    float m = p.x + p.y + p.z - s;\n    vec3 r = 3.0*p - m;\n    vec3 o = p - m/3.;\n    vec3 k = min(o, 0.0);\n    o = o + (k.x + k.y + k.z) * 0.5 - k * 1.5;\n    o = clamp(o, 0.0, s);\n    return length(p - o) * sign(m) - inflate;\n}\n\nhit BoxIntersect(in ray line){\n    vec3 uh = -1.0/line.rd;\n    vec3 m = uh*(line.ro);\n    vec3 n = abs(uh*boxDim);\n    uh = m - n;\n    m = m + n;\n    return hit(max(max(uh.x,uh.y),uh.z),min(min(m.x,m.y),m.z));\n}\n\nhit SphereIntersect(in ray line){\n    float rDist = dot(line.rd,-line.ro);\n    float rad = size + inflate;\n    vec3 off = rDist*line.rd + line.ro;\n    float offSqr = dot(off,off);\n    if (offSqr > rad*rad) return hit(1.0, -1.0);\n    float n = abs(sqrt(rad*rad - offSqr));\n    return hit(rDist - n, rDist + n);\n}\n\nvec3 getNorm(in vec3 p){\n    float val = sdOctahedron(p ,size);\n    return normalize(vec3(val - sdOctahedron(p + DELTA*signs.xzz, size),\n                          val - sdOctahedron(p + DELTA*signs.zxz, size),\n                          val - sdOctahedron(p + DELTA*signs.zzx, size)));\n}\n\nfloat falsePos(in vec2 vals, in vec2 dist){\n    return (vals.y*dist.x - vals.x*dist.y)/(vals.y - vals.x);\n}\n\n#define AVG(X) mix(X.x,X.y,0.5)\nfloat trace(in ray line){\n    line.ro = line.ro - pos;\n    hit box = BoxIntersect(line);\n    if (box.tn > box.tf) return -1.0;\n    //return 5.0;\n    float avg = (box.tn + box.tf)/2.0;\n    float val = sdOctahedron(avg*line.rd + line.ro, size);\n    avg = val > 0.0 ? dot(line.rd, -line.ro) : avg;\n    val = sdOctahedron(avg*line.rd + line.ro, size);\n    if(val > 0.0) return -1.0;\n    vec2 vals = vec2(sdOctahedron(line.ro + line.rd*box.tn,size),val);\n    vec2 dist = vec2(box.tn,avg);\n    //bisection\n    avg = AVG(dist);\n    val = sdOctahedron(avg*line.rd + line.ro, size);\n    float less = float(val < 0.0);\n    dist = vec2(dist.x*less +avg*abs(less -1.0),avg*less+ dist.y*abs(less -1.0));\n    vals = vec2(vals.x*less +val*abs(less -1.0),val*less+ vals.y*abs(less -1.0));\n    //bisection\n    avg = AVG(dist);\n    val = sdOctahedron(avg*line.rd + line.ro, size);\n    less = float(val < 0.0);\n    dist = vec2(dist.x*less +avg*abs(less -1.0),avg*less+ dist.y*abs(less -1.0));\n    vals = vec2(vals.x*less +val*abs(less -1.0),val*less+ vals.y*abs(less -1.0));\n    //falsePos\n    avg = falsePos(vals,dist);\n    val = sdOctahedron(avg*line.rd + line.ro, size);\n    less = float(val < 0.0);\n    dist = vec2(dist.x*less +avg*abs(less -1.0),avg*less+ dist.y*abs(less -1.0));\n    vals = vec2(vals.x*less +val*abs(less -1.0),val*less+ vals.y*abs(less -1.0));\n    //bisection\n    avg = AVG(dist);\n    val = sdOctahedron(avg*line.rd + line.ro, size);\n    less = float(val < 0.0);\n    dist = vec2(dist.x*less +avg*abs(less -1.0),avg*less+ dist.y*abs(less -1.0));\n    vals = vec2(vals.x*less +val*abs(less -1.0),val*less+ vals.y*abs(less -1.0));\n    //falsePos\n    avg = falsePos(vals,dist);\n    val = sdOctahedron(avg*line.rd + line.ro, size);\n    less = float(val < 0.0);\n    dist = vec2(dist.x*less +avg*abs(less -1.0),avg*less+ dist.y*abs(less -1.0));\n    vals = vec2(vals.x*less +val*abs(less -1.0),val*less+ vals.y*abs(less -1.0));\n    \n    return AVG(dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ray line = getRay(fragCoord);\n    vec3 col = vec3(0.3,0.3,0.3);\n    \n    float rayDist = trace(line);\n    \n    if(rayDist > 0.0){\n        col = color*(1.0 + dot(line.rd,getNorm(line.ro + line.rd*rayDist - pos))/4.0);\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}