{
    "Shader": {
        "info": {
            "date": "1668276251",
            "description": "@rigel's https://www.shadertoy.com/view/XsjBRt  with mouseX added as a multiplier to iTime to allow mouse interactivity (lines 53, 56)\n\nall credit goes to https://www.shadertoy.com/user/rigel",
            "flags": 0,
            "hasliked": 0,
            "id": "mdjGDc",
            "likes": 13,
            "name": "Mystic Flower interactive",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "color",
                "palette"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 390
        },
        "renderpass": [
            {
                "code": "// Author: Rigel\n// Shader: Mystic Flower\n// licence: https://creativecommons.org/licenses/by/4.0/\n\n#define PI 3.141592653589793\n#define TWO_PI 6.283185307179586\n\n// radom number in 2d\nfloat hash(vec2 p) {\n  return fract(sin(dot(p,vec2(12.9898,78.2333)))*43758.5453123);\n}\n\n// noise in 2d\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( hash( i + vec2(0.0,0.0) ), hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// fractal noise in 2d\nfloat fbm ( vec2 p ) {\n    const mat2 m = mat2(0.8,0.6,-0.6,0.8);\n    float f = 0.0;\n    f += 0.5000*noise ( p ); p*=m*2.02;\n    f += 0.2500*noise ( p ); p*=m*2.04;\n    f += 0.1250*noise ( p ); p*=m*2.03;\n    f += 0.0650*noise ( p ); p*=m*2.01;\n\n    // normalize f;\n    f /= 0.9375;\n    return f;\n}\n\n// generates a palette with a cosine\n// from https://www.shadertoy.com/view/ll2GD3\nvec3 pal(float domain, vec3 frequency, vec3 phase) {\n  return vec3(0.5) + vec3(0.5) * cos(TWO_PI*(frequency*domain+phase));\n}\n\nvoid mainImage(out vec4 light, in vec2 space)\t{\n  // cordinate system from -2 to 2\n  vec2 p = (-0.5 + (space.xy / iResolution.xy)) * vec2(4.0);\n  // aspect ratio\n  p.x *= iResolution.x / iResolution.y;\n\n  // angle and radius to center 0,0\n  float a = atan( p.y, abs(p.x) );\n  float r = length(p);\n\n  float mouseX = (iMouse.x>0.) ? (iMouse.x-iResolution.x)/iResolution.x : 1.;  // add mouseX in as 0.5 - +0.5 term to allow interactivity\n  //float mouseX = (iMouse.x>0.) ? iMouse.x/iResolution.x : 1.;  // add mouseX in as 0.0 - 1.0 term to allow interactivity\n\n  // space distortion\n  p += vec2(fbm(vec2(a*2.+mouseX*iTime*.1,r*.4-iTime*.3)))*5.0;\n  // divide the space into cells and get cell index to seed the palette\n  float cidx = (floor(p.x+2.0) + (floor(p.y+2.0)*4.0)) / 16.0;\n  // color is from palette with cell index\n  vec3 color = pal(fbm(p*.5), vec3(1.0), vec3(0.4+cidx,0.2+cidx,0.0));\n\n  // draw a grid for the cells\n  color *= smoothstep(0.49,0.44, abs(fract(p.x)-0.5));\n  color *= smoothstep(0.49,0.44, abs(fract(p.y)-0.5));\n\n  // angular distortion\n  a += fbm(p*0.05);\n  // flower white petals\n  float f = abs(cos(a*9.)*sin(a*6.))*.7+.1;\n  float ff = smoothstep(f,f+0.05,r);\n  color = ff * color + (1.0-ff) * vec3(0.9,0.9,0.7) * (1.8-r);\n\n  // flower center\n  color = mix(color,vec3(1.,1.-r*3.,0.0),smoothstep(0.26,0.1+fbm(vec2(r+iTime,a-iTime))*0.06 ,r));\n\n  light = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}