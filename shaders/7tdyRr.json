{
    "Shader": {
        "info": {
            "date": "1659210218",
            "description": "shoutout tater for his awesum pixel art stuff which i got inspired by",
            "flags": 0,
            "hasliked": 0,
            "id": "7tdyRr",
            "likes": 44,
            "name": "Day 954",
            "published": 3,
            "tags": [
                "pixelart",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 645
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n// from iq\nvec3 hsv2rgbSmooth( in vec3 hsv )\n{\n    vec3 rgb = clamp( abs(mod(hsv.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n\n    return hsv.z * mix( vec3(1.0), rgb, hsv.y);\n}\n\n\n#define iTime (iTime + 4.*iMouse.x/iResolution.x)\nvoid mainImage( out vec4 C, in vec2 U ){\n    vec2 uv = (U - 0.5*R.xy)/max(R.x,R.y);\n\n    vec3 col = vec3(0);\n    \n    float res =3./max(R.x,R.y);\n    \n    \n    vec2 p = uv;\n    p = uv;\n\n    float scroll = iTime*0.1;\n    float pan = sin(iTime*0.6 + sin(iTime*0.5))*0.05 - 0.1;\n    pan += (iMouse.y/iResolution.y - 0.5)*0.;\n    \n    p.x += scroll;\n    p.y += pan;\n    \n    vec2 op = p;\n\n    vec2 pid = floor(p/res);\n    p = floor(p/res)*res;       \n    float dith = texelFetch(iChannel0,ivec2(pid)%8,0).x;\n        \n    // sky\n    {\n \n        \n        vec3 skyCol = vec3(1.,0.7,0.4)*0.9;\n        vec3 skyColb = vec3(0.1,0.4,0.5)*1.2;\n        \n        //float dith = texture(iChannel0,);\n        \n        col = mix(skyCol,vec3(1.4,0.7,0.5)*0.7,step(0.7-p.y*15. + 0.5*noise(vec3(p.x,4,4))*0.1,dith));\n        col = mix(col,vec3(1.,0.4,0.3)*0.8,step(1.4-p.y*10. + 0.5*noise(vec3(p.x,4,4))*0.1,dith));\n        col = rgb2hsv(col);\n        \n        col = hsv2rgbSmooth(col + vec3(0,-0.1,0));\n        //col = mix(col,skyColb,step(1.2-p.y*15. + 0.5*noise(vec3(p.x,4,4))*0.1,dith));\n        \n        //col = dith*vec3(1);\n        //col = mix(skyCol,skyColb,p.y*2. + 0.5*noise(vec3(p.x,4,4))*0.1);\n    }\n    float sdl = p.y + noise(vec3(p.x,4. + p.x,4))*0. + 0.1;\n    if(sdl < 0. + mod(pid.x*0.1 + r21(vec2(pid.x*0.1,40.))*0.,2.)*0.003){\n        col = vec3(0.45,0.42,0.5) + 0.;\n    }     \n    // Clouds\n    {\n        \n        for(float i = 0.; i < 56.; i++){\n            vec2 cpos = vec2(\n                    - mod(\n                        i*12.6\n                        + .05*iTime*max(abs(sin(i + sin(i*20.)*4. + 200.)),0.8)*1.05\n                        + scroll*0. \n                        ,2.\n                    )*2.\n                    + 2. + scroll\n                ,cos(i*20.)*0.1 + 0.07);\n            vec2 lcpos = cpos - p;\n            float d = length(lcpos.y) + abs(lcpos.y)*0.9;\n            d += smoothstep(0.,4.,abs(lcpos.x));\n            d += noise(vec3(lcpos.x*2. + i*120.,4. + i,4. + p.y))*0.05;\n            //d -= noise(vec3(lcpos.x*4. + i*120.,4. + i,4. + p.y))*0.01;\n            //if(d < 0.00)\n                //col = mix(col,col*3.*vec3(0.2,0.15,0.25)*(1. + sin(i*3.)*0.1),0.4 + sin(i*20.)*0.1);\n            if(d < 0.00)\n                col = mix(col,vec3(1.2,0.7,0.6)*0.8,0.6);\n        \n        }\n    \n    }\n    \n    vec3 rocks = vec3(0);\n    float minDrocks = 10e6;\n    // props\n    \n    {\n            \n        for(float i = 0.; i < 50.; i++){\n            vec2 lp = p + vec2(0,pan*0.4);\n            lp.x -= 2. + sin(i)*4.;\n            lp.x = mod(lp.x,4.) - 2.;\n            lp.y += 0.45 + sin(i*200.)*0.05;\n            float sdplank = length(lp);\n            sdplank = max(sdplank,-lp.y + 0.02);\n            \n            sdplank -= abs(noiseGrid(vec3(lp*120. + i*20.,15.)))*0.004 + abs(sin(i*15.))*0.02;\n            minDrocks = min(minDrocks,sdplank + max(lp.y*1. -0.01,0.));\n            if(sdplank < 0.004 ){\n                rocks = mix(\n                    vec3(0.34,0.35,0.4),\n                    vec3(0.1)*2.,\n                    1.-step(\n                        clamp(dot(lp,normalize(vec2(1,-1)))*44.+0.4,0.,1.),\n                        dith\n                    )\n                );\n            }\n        }\n        \n        \n        \n    \n    }\n        \n    \n    // ground\n    \n    {\n\n\n            float griters = 40.;\n            vec2 lastp = p;\n            \n            for(float i = 0.; i <= griters; i++){\n                \n                float sc = pow(i/griters,4.);\n                p = lastp;\n                p.y += sc*pan*0.4;\n                p.x += (1.-sc)*iTime*0.004;\n                \n                //vec2 offs = vec2(0,pan);\n                \n                //vec2 lp = p;\n                //vec2 lpid = floor(p/res);\n                //lp = floor(lp/res)*res;    \n                \n                \n                //p.x += iTime*0.2*0.003;\n                //pid = floor(p/res);\n                //p = floor(p/res)*res;\n                \n                float iterscale = smoothstep(1.,0.7,i/griters);\n    \n                float n = noise(vec3(p.x*(1. + 1.*abs(sin(i*20.))),1. + i * 20.,4. + i))*0.1*sin(i*10.+iTime*float(iMouse.z>0.))*iterscale;\n                float lsd = p.y*1. + n + i/griters*0.2 + 0.14;\n                float idx = i/griters;\n                float grass = mod(pid.x + r21(vec2(i*20. + pid.x,40.))*4.,2.)*0.01*sin(i)*smoothstep(0.4,1.,idx);\n                float fade = (1. - idx);\n                if(lsd < 0. + grass){\n                    vec3 grcol = (vec3(0.4,0.34,0.1) - 0.1*sin(vec3(0.2,0.4,41.3) + i));\n                    grcol = mix(grcol,vec3(0.3,0.3,0.5), pow(fade,2.4));\n                    float grass = mod(pid.x + r21(vec2(pid.x))*1., 2.)*0.3*(idx);\n                    \n                    float dn = noise(vec3(p.x*2.,1. + p.y*6. + n*4. + i*20.,4. + i*20.)) + grass;\n                    \n                    grcol *= 1.\n                        - vec3(0.6,0.8,0.6)*0.2*step(dn,0.5) \n                        - vec3(0.6,0.4,0.5)*0.3*step(dn + 0.9 - grass*0.7*(1.-iterscale) + n*20.,0.1)*(sc*0.6 + 0.4)\n                        - smoothstep(0.02,0.,minDrocks)*0.4\n                        //- step(minDrocks,0.007)*0.4\n                        \n                        ;\n                    \n                    col = grcol;\n                }\n            }\n    }\n    \n    col = mix(col,rocks,float(rocks.x!=0.));\n    col = rgb2hsv(col);\n    \n    \n    float t = iTime + 10.;\n    float tt = 10.;\n    float tid = floor(t/tt);\n    float T = mod(t,tt);\n    float tenv = clamp(T,0.,1.);\n    \n    \n    float a = -0.4;\n    float b = 0.;\n    float v = mod(tid,2.) == 0. ? mix(a,b,tenv) : mix(b,a,tenv);\n        \n    col = hsv2rgbSmooth(col + vec3(0,v,-0.04));\n    \n    \n    \n    col = pow(abs(col),vec3(0.8));\n\n    C = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float sdBox(vec2 c, vec2 s){\n    c = abs(c) - s; return max(c.x,c.y);\n}\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define pmod(p,a) mod(p,a) - 0.5*a\n// Dave hoskins hash without sine\nfloat r21(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// cyclic noise by nimitz. i have a tutorial on it on shadertoy\n\nfloat noise(vec3 p_){\n    float n = 0.;\n    float amp = 1.;\n    vec4 p = vec4(p_,11.);\n    p.xy *= rot(1.4);\n    p.x *= 3.;\n    for(float i = 0.; i < 12.; i++){\n        p.yz *= rot(.5);\n        p.xz *= rot(2.5 + i);\n        p.wy *= rot(1.5-i);\n        p += cos(p*1. + vec4(3,2,1,1.) )*amp*.5;\n        n += dot(sin(p),cos(p))*amp;\n    \n        amp *= 0.7;\n        p *= 1.5;\n    }\n    \n    //n = n * 0.9;\n    n = sin(n*2.);\n    return n;\n}\nfloat noiseGrid(vec3 p_){\n    float n = 0.;\n    float amp = 1.;\n    vec4 p = vec4(p_,11.);\n    for(float i = 0.; i <2.; i++){\n        p.yz *= rot(.5);\n        p.xz *= rot(2.5 + i);\n        p.wy *= rot(2.5-i);\n        p += cos(p*1. + vec4(3,2,1,1.) )*amp*.5;\n        n += dot(sin(p),cos(p))*amp;\n    \n        amp *= 0.5;\n        p *= 1.5;\n    }\n    \n    //n = sin(n*1.);\n    return n;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}