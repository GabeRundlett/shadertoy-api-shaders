{
    "Shader": {
        "info": {
            "date": "1565561988",
            "description": "inspired by https://www.instagram.com/p/BVOEiCglSqs/",
            "flags": 32,
            "hasliked": 0,
            "id": "ttBXDR",
            "likes": 6,
            "name": "Experimental Buffer Filter",
            "published": 3,
            "tags": [
                "lines",
                "filter",
                "buffer"
            ],
            "usePreview": 0,
            "username": "Veggiebob",
            "viewed": 620
        },
        "renderpass": [
            {
                "code": "#define rows 30.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float y = floor(uv.y*rows)/rows;\n    vec4 c = texture(iChannel0, vec2(uv.x, y));\n    float b = 1.-dot(vec4(1.), c)/3.3;\n    float r = (mod(uv.y, 1./rows)*rows);\n    float bord = 0.2;\n    float br = smoothstep(0., bord, abs(r-0.5)*1.-b*0.3+bord/2.);\n    vec3 col = vec3(br);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define EPSILON 0.0001\nstruct Ray {\n    vec3 end;\n    float dist;\n    float sdf;\n};\nvec2 rotate2D (vec2 p, float angle){\n    return vec2(p.x*cos(angle)-p.y*sin(angle), p.y*cos(angle)+p.x*sin(angle));\\\n}\nfloat sphere (vec3 p, vec3 q, float r) {\n    return length(p - q)-r;\n}\nfloat sdf (vec3 p) {\n    return \n        min(\n            sphere(p, vec3(0), 0.4),\n            min(\n                sphere(p, vec3(0.25), 0.1),\n                sphere(p, vec3(-0.25), 0.1)\n            )\n       );\n}\nRay trace (vec3 o, vec3 r) {\n    vec3 p = o;\n    float t = 0.;\n    float s = 0.;\n    for(int i = 0; i<128; i++){\n        p = o+r*t;\n        s = sdf(p);\n        t+=s*0.8;\n    }\n    return Ray(p, t, s);\n}\n//Credit to Jamie Wong http://jamie-wong.com/2016/07/15/ray-marching-signed-distance-functions/#surface-normals-and-lighting\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sdf(vec3(p.x + EPSILON, p.y, p.z)) - sdf(vec3(p.x - EPSILON, p.y, p.z)),\n        sdf(vec3(p.x, p.y + EPSILON, p.z)) - sdf(vec3(p.x, p.y - EPSILON, p.z)),\n        sdf(vec3(p.x, p.y, p.z  + EPSILON)) - sdf(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    mouse-=0.5;\n    uv-=0.5;\n    float res = iResolution.x/iResolution.y;\n    uv*=vec2(res, 1.);\n\tvec3 camera = vec3(uv, -1.);\n    vec3 ray = vec3(0., 0., 1.);\n    \n    mouse.x*=-8.5;\n    camera.xz = rotate2D(camera.xz, mouse.x);\n    ray.xz = rotate2D(ray.xz, mouse.x);\n    \n    Ray v = trace(camera, ray);\n    // Time varying pixel color\n    vec3 col = vec3(1.);\n    vec3 light = vec3(5., 10., 5.);\n    vec3 toLight = normalize(v.end-light);\n    vec3 normal = estimateNormal(v.end);\n\tcol-=dot(normal, -toLight);\n    //col-=pow(dot(toLight, reflect(-ray, normal)), 3.)*2.;\n    if(v.dist>2.){\n        col = vec3(1.);\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}