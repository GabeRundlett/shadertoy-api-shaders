{
    "Shader": {
        "info": {
            "date": "1721143107",
            "description": "2d light design test. inspired by Chris Kuroda Light design",
            "flags": 0,
            "hasliked": 0,
            "id": "XclyWN",
            "likes": 7,
            "name": "2d light design test",
            "published": 3,
            "tags": [
                "light",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.5),-antialiasing(1.5),d - b)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define deg45 .707\n#define R45(p) (( p + vec2(p.y,-p.x) ) *deg45)\n#define Tri(p,s) max(R45(p).x,max(R45(p).y,B(p,s)))\n#define COLORMODE 0\n\nfloat random (vec2 p) {\n    return fract(sin(dot(p.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\n// noise and fbm function from https://www.shadertoy.com/view/Xd3GD4\n//-----------------------------------------------------------------------------\nvec2 hash( vec2 p ){\n    p = vec2( dot(p,vec2(127.1,311.7)),\n             dot(p,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise2d( in vec2 p ){\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n    \n    vec2 i = floor( p + (p.x+p.y)*K1 );\n    \n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0*K2;\n    \n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n    \n    vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    \n    return dot( n, vec3(70.0) );\n}\n\nfloat fbm(vec2 uv){\n    float f;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*noise2d( uv ); uv = m*uv;\n    f += 0.2500*noise2d( uv ); uv = m*uv;\n    f += 0.1250*noise2d( uv ); uv = m*uv;\n    f += 0.0625*noise2d( uv ); uv = m*uv;\n    f = 0.5 + 0.5*f;\n    return f;\n}\n\nvec2 polarToCartesian(float radius, float angle) {\n    return vec2(radius * cos(angle), radius * sin(angle));\n}\n\nvec4 light2D(vec2 p, vec2 lightPos, vec3 lightCol, float intensity, float range, float deg, float angle, float noiseAngle){\n    float lightRadius = radians(range); // spot light range \n    float aspect = iResolution.x / iResolution.y;\n    lightRadius /= aspect;\n\n    vec2 spotLightDir = polarToCartesian(1.,radians(deg)); // rotate light\n    float spotAngle =  radians(angle);\n    vec2 lightDir = p - lightPos;\n    float lightDistance = length(lightDir);\n    \n    float d = step(dot(normalize(lightDir), normalize(spotLightDir)),cos(spotAngle/2.));\n    d = max((length(lightDir)-(lightRadius)),d);\n    float d2 = length(lightDir)-0.005;\n    d = min(d,d2);\n    p*=Rot(radians(noiseAngle));\n    p.y+=iTime*0.1;\n    float n = fbm(p*3.)*0.6;\n    return vec4(intensity * (1. - length(lightDir / lightRadius)) * lightCol+n,d);\n}\n\nvec3 torus(vec2 p, vec3 col, float dir, float deg, float size){\n    vec2 prevP = p;\n    p.x*=dir;\n    p*=Rot(radians(iTime*deg+30.));\n    float d = abs(length(p)-size)-0.05;\n    \n    #if COLORMODE\n    vec3 cColor = vec3(0.1,0.6,0.8);\n    #else\n    vec3 cColor = vec3(1.);\n    #endif\n    \n    col = mix(col,cColor*0.2,S(d,0.0));\n    \n    d = abs(length(p)-size)-0.05;\n    d = max(-p.x,d);\n    float a = clamp(atan(p.x,p.y)*0.5,0.3,1.);\n    col = mix(col,vec3(a)*cColor*0.3,S(d,0.0));\n    \n    return col;\n}\n\nvec3 dots(vec2 p, vec3 col){\n    p = mod(p,0.05)-0.025;\n    float d = length(p)-0.001;\n    return mix(col,vec3(1.),S(d,0.0));\n}\n\nfloat bgEffectItem(vec2 p){\n    float size = 0.5;\n    \n    p.x*=2.;\n    p.y-=size*0.5;\n    p.y-=0.3;\n    p.y-=iTime*0.5;\n    \n    p.y = mod(p.y,0.6)-0.3;\n    float d = abs(Tri(p,vec2(size)))-0.02;\n    p.x*=0.5;\n    float d2 = length(p-vec2(0.0,-0.2))-0.03;\n    return min(d,d2);\n}\n\nvec3 bgEffect(vec2 p, vec3 col){\n    vec2 prevP = p;\n    p+=0.025;\n    p*=20.;\n    \n    vec2 id = floor(p);\n    vec2 gd = fract(p)-0.5;\n    float n = random(id);\n    \n    if(n<0.1){\n        gd*=Rot(radians(90.));\n    } else if(n>=0.1 && n<0.2){ \n        gd*=Rot(radians(180.));\n    } else if(n>=0.3 && n<0.4){ \n        gd*=Rot(radians(270.));\n    }\n    float d = bgEffectItem(gd);\n    if(n>=0.5){\n        d = 10.0;\n    }\n\n    col = mix(col,vec3(0.5),S(d,0.0));\n    return col;\n}\n\nvec3 bg(vec2 p, vec3 col){\n    vec2 prevP = p;\n    \n    col = dots(p,col);\n    \n    p*=5.;\n    vec2 id = floor(p);\n    vec2 gd = fract(p)-0.5;\n    float n = random(id);\n    \n    col = torus(gd,col,(n<0.5)?1.:-1.,30.+n*30.0,0.2+n*0.1);\n    return col;\n}\n\nvec3 baseLights(vec2 p, vec3 col){\n    p.y = abs(p.y);\n    float intensity = 0.6;\n    #if COLORMODE\n    vec3 lightColor = vec3(0.3,0.9,0.8);\n    #else\n    vec3 lightColor = vec3(1.);\n    #endif\n    vec4 d = light2D(p,vec2(-0.1,0.1),lightColor,intensity,15.,220.+sin(-iTime*1.5)*5.,10.,10.);\n    col = mix(col,d.rgb,S(d.w,0.));\n    d = light2D(p,vec2(0.1,0.1),lightColor,intensity,15.,320.+sin(iTime*1.5)*5.,10.,10.);\n    col = mix(col,d.rgb,S(d.w,0.));\n    \n    d = light2D(p,vec2(0.09,0.1),lightColor,intensity,10.,180.+sin(-iTime*2.)*5.,10.,-90.);\n    col = mix(col,d.rgb,S(d.w,0.));\n    d = light2D(p,vec2(-0.09,0.1),lightColor,intensity,10.,0.+sin(-iTime*2.)*5.,10.,90.);\n    col = mix(col,d.rgb,S(d.w,0.));\n    \n    d = light2D(p,vec2(-0.1,0.1),lightColor,intensity,15.,320.+sin(-iTime*2.)*5.,10.,10.);\n    col = mix(col,d.rgb,S(d.w,0.));\n    d = light2D(p,vec2(0.1,0.1),lightColor,intensity,15.,220.+sin(-iTime*2.)*5.,10.,10.);\n    col = mix(col,d.rgb,S(d.w,0.));\n    \n    return col;\n}\n\nvec3 lightsSystemBack(vec2 p, vec3 col){\n    p.x = abs(p.x);\n    vec2 prevP = p;\n    vec3 d = vec3(0.);\n    for(float i = 0.; i<5.; i++){\n        p*=Rot(radians(i*65.0+sin(i)*5.*-iTime));\n        p = abs(p)-0.18;\n        p.y+=0.05;\n        d = baseLights(p,col);\n    }\n    \n    return d;\n}\n\nvec3 lightsSystemMain(vec2 p, vec3 col){\n    p.y = abs(p.y);\n    p.y*=-1.;\n    float intensity = 0.5;\n    vec4 d = light2D(p,vec2(-0.09,-0.2),vec3(1.0),intensity,50.,-80.+sin(-iTime)*5.,20.,10.);\n    col = mix(col,d.rgb,S(d.w,0.));\n    d = light2D(p,vec2(0.09,-0.2),vec3(1.0),intensity,50.,-100.+sin(iTime)*5.,20.,-10.);\n    col = mix(col,d.rgb,S(d.w,0.));\n    \n    d = light2D(p,vec2(-0.18,-0.23),vec3(1.0),intensity,50.,-80.+sin(-iTime*1.1)*5.,10.,-10.);\n    col = mix(col,d.rgb,S(d.w,0.));\n    d = light2D(p,vec2(0.18,-0.23),vec3(1.0),intensity,50.,-100.+sin(iTime*1.1)*5.,10.,10.);\n    col = mix(col,d.rgb,S(d.w,0.));\n    \n    d = light2D(p,vec2(-0.25,-0.27),vec3(1.0),intensity,50.,-110.+sin(-iTime*1.2)*5.,20.,-10.);\n    col = mix(col,d.rgb,S(d.w,0.));\n    d = light2D(p,vec2(0.25,-0.27),vec3(1.0),intensity,50.,-70.+sin(iTime*1.2)*5.,20.,10.);\n    col = mix(col,d.rgb,S(d.w,0.));\n    \n    d = light2D(p,vec2(-0.15,-0.1),vec3(1.0),intensity,120.,-30.+sin(-iTime*1.3)*5.,20.,-60.);\n    col = mix(col,d.rgb,S(d.w,0.));\n    d = light2D(p,vec2(0.15,-0.1),vec3(1.0),intensity,120.,-150.+sin(iTime*1.3)*5.,20.,60.);\n    col = mix(col,d.rgb,S(d.w,0.));    \n    \n    d = light2D(p,vec2(-0.3,-0.1),vec3(1.0),intensity,90.,-130.+sin(-iTime*1.4)*5.,20.,50.);\n    col = mix(col,d.rgb,S(d.w,0.));\n    d = light2D(p,vec2(0.3,-0.1),vec3(1.0),intensity,90.,-50.+sin(iTime*1.4)*5.,20.,-50.);\n    col = mix(col,d.rgb,S(d.w,0.));      \n    \n    d = light2D(p,vec2(-0.4,-0.15),vec3(1.0),intensity,90.,-180.+sin(-iTime*1.5)*5.,20.,90.);\n    col = mix(col,d.rgb,S(d.w,0.));\n    d = light2D(p,vec2(0.4,-0.15),vec3(1.0),intensity,90.,0.+sin(iTime*1.5)*5.,20.,-90.);\n    col = mix(col,d.rgb,S(d.w,0.));      \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.0,0.0,0.0);\n    col = bgEffect(uv,col);\n    \n    col = bg(uv,col);\n    col = lightsSystemBack(uv,col);\n    col = lightsSystemMain(uv,col);\n    \n    float brightness = 1.5;\n    fragColor = vec4(col*brightness,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}