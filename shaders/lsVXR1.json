{
    "Shader": {
        "info": {
            "date": "1463103596",
            "description": "Unauthorized remix of the Khronos logo.",
            "flags": 0,
            "hasliked": 0,
            "id": "lsVXR1",
            "likes": 2,
            "name": "Khronos logo remixed",
            "published": 3,
            "tags": [
                "2d",
                "logo",
                "webgl",
                "opengl",
                "khronos"
            ],
            "usePreview": 0,
            "username": "jimbo00000",
            "viewed": 609
        },
        "renderpass": [
            {
                "code": "// Join or start your local Khronos chapter!\n\n#define PI 3.1415926535897932384\n\n// Trefoil shape from iq\n// https://iquilezles.org/articles/distance\nfloat dFunc( in float r, in float a )\n{\n    a -= .54;\n    if (a > 2.2)\n        return 9999.0;\n    a -= 2.;\n    \n\tfloat num = .5;\n\tfloat sweep = -.05;\n\tfloat pointy = 2.5+.1*sin(4.*iTime);\n    float phase = .5+PI*.85*(1.-PI*.45*fract(.25*iTime));\n        //.5+.25*sin(1.*iTime)\n    float amp = .1*(1.+(sin(2.*iTime)));\n    r += //amp*(3.+2.)*\n        clamp(1.-.5*abs(3.*(5.*a+4.*(\n\t\tphase\n    \t))),0., 1.);\n\treturn r - 1.0 - pointy*sin( num*a + 1.-sweep*(r) );\n}\n\nfloat polarFunc(in vec2 pt, in vec2 cent)\n{\n\tfloat r = 2.7 * length( pt - cent );\n\tfloat a = atan( pt.y, pt.x );\n\tfloat d = dFunc( r, a );\n    return smoothstep( 0.19, 0.22, abs(d) );\n}\n\n// Convert {uv, center} pair to polar coords {r, theta}\n// and pass them on to dist func\nfloat getDist( in vec2 pt, in vec2 cent )\n{\n    pt *= vec2(.45, -.8);\n    float t = 2.*iTime;\n    vec2 shift = vec2(.2,-.38) + vec2(.03,.01)*vec2(sin(t), cos(t));\n    return min(\n        polarFunc(pt-shift, cent),\n        polarFunc(-pt-shift, cent)\n        );\n}\n\n\n// Ripped off from: https://www.shadertoy.com/view/XsXXRN\nfloat rand(vec2 n) {\n    return fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat fbm(vec2 n) {\n    float total = 0.0, amplitude = 1.0;\n    for (int i = 0; i < 4; i++) {\n        total += noise(n) * amplitude;\n        n += n;\n        amplitude *= 0.5;\n    }\n    return total;\n}\n\nvoid fire301( out vec4 fragColor, in vec2 fragCoord ) {\n    const vec3 c1 = vec3(0.5, 0.0, 0.1);\n    const vec3 c2 = vec3(0.9, 0.0, 0.0);\n    const vec3 c3 = vec3(0.2, 0.0, 0.0);\n    const vec3 c4 = vec3(1.0, 0.9, 0.0);\n    const vec3 c5 = vec3(0.1);\n    const vec3 c6 = vec3(0.9);\n\n    vec2 speed = vec2(0.7, 0.4);\n    float shift = 1.6;\n    float alpha = 1.0;\n\n    vec2 p = fragCoord.xy * 8.0 / iResolution.xx;\n    float q = fbm(p - iTime * 0.1);\n    vec2 r = vec2(fbm(p + q + iTime * speed.x - p.x - p.y), fbm(p + q - iTime * speed.y));\n    vec3 c = mix(c1, c2, fbm(p + r)) + mix(c3, c4, r.x) - mix(c5, c6, r.y);\n    fragColor = vec4(c * cos(shift * fragCoord.y / iResolution.y), alpha);\n}\n\n// Simple thresholding\nfloat color( in vec2 x, in vec2 cent )\n{\n    float v = getDist( x, cent );\n    return v;//smoothstep( 0.19, 0.24, abs(v) );\n}\n\nvec3 getColorFromUV( in vec2 rawuv, in vec2 uv11 )\n{\n    vec4 fireColor;\n    fire301(fireColor, rawuv);    \n    vec3 fgCol = fireColor.rgb;//vec3(1.,0.,0.);\n    fgCol.r *= 1.8;\n    fgCol = mix(fgCol,vec3(1.,0.,0.),.25);\n    //return fgCol;\n\treturn mix(fgCol, vec3(1.), color( uv11, vec2(0.0, 0.0)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\t// Fit [-1,1] into screen and expand for aspect ratio\n\tvec2 uv11 = 2.0*uv - vec2(1.0,1.0);\n\tfloat aspect = iResolution.x / iResolution.y;\n\tif (aspect > 1.0)\n\t{\n\t\tuv11.x *= aspect;\n\t}\n\telse\n\t{\n\t\tuv11.y /= aspect;\n\t}\n\t\n\tfragColor = vec4(getColorFromUV(fragCoord, uv11), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}