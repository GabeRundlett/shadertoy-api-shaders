{
    "Shader": {
        "info": {
            "date": "1706893575",
            "description": "do mouse action to get the transition. \nim too dumb spending a lot of time on it, and got an unsatisfactory result. I was thinking that each line would enter in turn, with time interval. But my code sucks, I can't control these parameters well...",
            "flags": 0,
            "hasliked": 0,
            "id": "Xf2SD3",
            "likes": 4,
            "name": "Transit Mask",
            "published": 3,
            "tags": [
                "line",
                "pattern",
                "mask",
                "polar",
                "radius",
                "transit"
            ],
            "usePreview": 0,
            "username": "Ridah",
            "viewed": 134
        },
        "renderpass": [
            {
                "code": "//https://www.shadertoy.com/view/slyGW1\n#define R iResolution.xy\n  #define S(d,r) smoothstep( 3.,0., (d)*R.y -r )  \n//#define S(d,r) max( 0., 1. -(d)*R.y/2. +r )  \n#define RadiusToAngle 180./3.1415926    \n#define AngleToRadius 3.1415926/180. \n#define tau 6.2831852 \n#define pi 3.1415926 \n\nfloat angle(vec2 v1,vec2 v2){\nreturn  acos(dot(v1,v2)/(length(v1)*length(v2)))*RadiusToAngle;\n}\n\nfloat line(vec2 p, vec2 a,vec2 b, float r) { \n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 2.), // proj coord on line\n          d = length(p - b * h);                    // dist to segment\n    return S(  d , max(0.,r) );\n}\nvec2 uvRotate(vec2 uv,float rad){\nreturn mat2(cos(rad), sin(rad),\n        -sin(rad), cos(rad))*uv;}\n\nvoid mainImage( out vec4 O,  vec2 u )\n{\n    O -= O;\n    vec2 U = ( 2.*u - R ) / R.y;\n    vec2 M = (iMouse.xy/iResolution.xy-.5);\n    //initialize\n    float n =  64.,a,b, l = length(U),dist = 1.,speed =2.,delay = 8.;\n    //dist: line length adaptation according to rectangle \n    float ang = (angle(U,vec2(1.,0.)));\n    float threAngle = atan(R.y/R.x)*RadiusToAngle;\n    if(ang>=threAngle&&ang<=180.-threAngle){\n        if(ang<90.)dist /= cos((90.-ang)*AngleToRadius);\n        else dist /= cos((ang-90.)*AngleToRadius);\n    }else{\n        if(ang<threAngle)dist *= (R.x/R.y)/cos((ang)*AngleToRadius);\n        else dist *= (R.x/R.y)/cos((180.-ang)*AngleToRadius);}\n        \n     vec2 Ub = uvRotate(U,-20.*AngleToRadius), Ua=U;\n     a = (round((atan(U.y,U.x))/tau*n ))/n;\n     b = (round((atan(Ub.y,Ub.x))/tau*n))/n;\n     \n     float period = .001;    \n     \n     if(iMouse.z>0.1) {     \n         float ta = ((M.x+.5)*4.-(a+.5));\n         float tb = ((M.x+.5)*4.-(b+.5));\n         if(M.x<-0.4){ta = 0.;}\n         if(M.x<0.1){tb = 0.;}\n         if( a<-.5+(round((M.x+.25)*260.))/n)ta=1.;\n         if( b<-.5+(round((M.x)*260.))/n)tb=1.;\n         Ua-=(abs(cos(mix(0.,pi/2.,ta))))*3.2*cos(tau*a-vec2(0,pi/2.));//delete the \"dist\"\n         Ub-=(abs(cos(mix(0.,pi/2.,tb))))*3.2*cos(tau*b-vec2(0,pi/2.));}\n     else {period+=((iTime*speed/5.)-a*pi)*delay;\n         Ua-=(abs(cos(period/4.)))*1.*cos(tau*a-vec2(0,pi/2.))*dist;}//\"dist\"\n     \n    l *=  8.;//width\n    O += line( Ua, vec2(0), cos(tau*a-vec2(0,pi/2.)) , l );\n    O += line( Ub, vec2(0), cos(tau*b-vec2(0,pi/2.)) , l );\n    \n    O = pow(O, vec4(1./2.2) ); \n        \n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}