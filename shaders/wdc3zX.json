{
    "Shader": {
        "info": {
            "date": "1568969126",
            "description": "An example on how to render stereoscopic anaglyph image.\nIt will be the theme of https://2019.cookie.paris/\nAnd the content of the 3rd issue of https://fanzine.cookie.paris/",
            "flags": 0,
            "hasliked": 0,
            "id": "wdc3zX",
            "likes": 31,
            "name": "Anaglyph Quick Sketch",
            "published": 3,
            "tags": [
                "anaglyph"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 1277
        },
        "renderpass": [
            {
                "code": "// Anaglyph Quick Sketch\n// An example on how to render stereoscopic anaglyph image\n// It will be the theme of https://2019.cookie.paris/\n// And the content of the 3rd issue of https://fanzine.cookie.paris/\n// Leon Denise 2019.09.20\n// Licensed under hippie love conspiracy\n\n// Using code from\n// Inigo Quilez\n// Morgan McGuire\n\nconst int count = 5;\nconst float speed = .4;\nconst float range = 1.;\nconst float radius = .3;\nconst float blend = 1.5;\nconst float balance = 1.5;\nconst float falloff = 1.9;\nconst float grain = .01;\nconst float divergence = 0.1;\nconst float fieldOfView = 1.5;\n\nfloat random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\nmat2 rot(float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\nfloat smoothmin (float a, float b, float r) { float h = clamp(.5+.5*(b-a)/r, 0., 1.); return mix(b, a, h)-r*h*(1.-h); }\nvec3 look (vec3 eye, vec3 target, vec2 anchor, float fov) {\n    vec3 forward = normalize(target-eye);\n    vec3 right = normalize(cross(forward, vec3(0,1,0)));\n    vec3 up = normalize(cross(right, forward));\n    return normalize(forward * fov + right * anchor.x + up * anchor.y);\n}\n\nvec3 camera (vec3 eye) {\n    vec2 mouse = iMouse.xy/iResolution.xy*2.-1.;\n    if (iMouse.z > 0.5) {\n        eye.yz *= rot(mouse.y*3.1415);\n        eye.xz *= rot(mouse.x*3.1415);\n    } else {\n        eye.yz *= rot(-3.1415/4.);\n        eye.xz *= rot(-3.1415/2.);\n    }\n    return eye;\n}\n\nfloat geometry (vec3 pos) {\n    pos = camera(pos);\n    float a = 1.0;\n    float scene = 1.;\n    float t = iTime*0.2;\n    float wave = 1.0+0.2*sin(t*8.-length(pos)*2.);\n    t = floor(t)+pow(fract(t),.5);\n    for (int i = count; i > 0; --i) {\n        pos.xy *= rot(cos(t)*balance/a+a*2.+t);\n        pos.zy *= rot(sin(t)*balance/a+a*2.+t);\n        pos.zx *= rot(sin(t)*balance/a+a*2.+t);\n        pos = abs(pos)-range*a*wave;\n        scene = smoothmin(scene, length(pos)-radius*a, blend*a);\n        a /= falloff;\n    }\n    return scene;\n}\n\nfloat raymarch ( vec3 eye, vec3 ray ) {\n    float dither = random(ray.xy+fract(iTime));\n    float total = dither;\n    const int count = 30;\n    for (int index = count; index > 0; --index) {\n        float dist = geometry(eye+ray*total);\n        dist *= 0.9+.1*dither;\n        total += dist;\n        if (dist < 0.001 * total)\n            return float(index)/float(count);\n    }\n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.*(fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec3 eyeLeft = vec3(-divergence,0,5.);\n    vec3 eyeRight = vec3(divergence,0,5.);\n    vec3 rayLeft = look(eyeLeft, vec3(0), uv, fieldOfView);\n    vec3 rayRight = look(eyeRight, vec3(0), uv, fieldOfView);\n    float red = raymarch(eyeLeft, rayLeft);\n    float cyan = raymarch(eyeRight, rayRight);\n    fragColor = vec4(red,vec2(cyan),1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}