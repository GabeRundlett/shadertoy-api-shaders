{
    "Shader": {
        "info": {
            "date": "1542567554",
            "description": "Playing with cheap distance functions.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtKfWW",
            "likes": 10,
            "name": "Dodecahedron From Three Planes",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 880
        },
        "renderpass": [
            {
                "code": "const float pi = acos(-1.);\nconst float phi = (1.+sqrt(5.))*.5;\n\nvec2 rotate(vec2 a, float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return vec2(\n        a.x * c - a.y * s,\n        a.x * s + a.y * c\n    );\n}\n\nfloat scene(vec3 p)\n{\n    const vec3 n = normalize(vec3(phi,1,0));\n\n    p = abs(p);\n\tfloat a = dot(p,n.xyz);\n    float b = dot(p,n.zxy);\n    float c = dot(p,n.yzx);\n    return max(max(a,b),c)-phi*n.y;\n}\n\nvec3 trace(vec3 cam, vec3 dir)\n{\n    vec3 accum = vec3(1);\n    for(int bounce=0;bounce<3;++bounce)\n    {\n        float t;\n        float k;\n        for(int i=0;i<100;++i)\n        {\n            k = scene(cam+dir*t);\n            t += k;\n            if (k < .001 || k > 10.)\n                break;\n        }\n\n        vec3 h = cam+dir*t;\n        vec2 o = vec2(.001, 0);\n        vec3 n = normalize(vec3(\n            scene(h+o.xyy)-scene(h-o.xyy),\n            scene(h+o.yxy)-scene(h-o.yxy),\n            scene(h+o.yyx)-scene(h-o.yyx)\n        ));\n\n        if (k > 10.)\n        {\n            return vec3(1);\n        }\n        else if (iMouse.z > 0.)\n        {\n            return n*.5+.5;\n        }\n        else\n        {\n            float A = .1;\n            float B = scene(h+n*A);\n            float fakeAO = clamp(B/A,0.,1.);\n            fakeAO = pow(fakeAO,.6)*.2+.8;\n\n            float light = dot(n,normalize(vec3(1,4,2)))*.5+.5;\n\n            vec3 color = vec3(.9);\n\n            return pow(light * fakeAO * accum * color, vec3(.4545));\n        }\n    }\n    return vec3(0);\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy-.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 cam = vec3(uv*3.,-5.);\n    vec3 dir = vec3(0,0,1);\n\n    cam.yz = rotate(cam.yz, .5);\n    dir.yz = rotate(dir.yz, .5);\n\n    cam.xz = rotate(cam.xz, iTime*.2);\n    dir.xz = rotate(dir.xz, iTime*.2);\n\n    out_color.rgb = trace(cam,dir);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}