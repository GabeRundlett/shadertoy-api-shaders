{
    "Shader": {
        "info": {
            "date": "1626387735",
            "description": "ray-disk intersection",
            "flags": 0,
            "hasliked": 0,
            "id": "4tsBD7",
            "likes": 24,
            "name": "Disk - intersection",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "raycast",
                "intersection",
                "raytrace",
                "disk"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1939
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Ray-disk intersection. For general planar shapes, please see the\n// \"coord system intersector\" at https://www.shadertoy.com/view/lsfGDB\n//\n//\n// List of other ray-surface intersectors:\n//    https://www.shadertoy.com/playlist/l3dXRf\n// and \n//    https://iquilezles.org/articles/intersectors\n\n\n// disk: center c, normal n, radius r\nfloat diskIntersect( in vec3 ro, in vec3 rd, vec3 c, vec3 n, float r )\n{\n\tvec3  o = ro - c;\n    float t = -dot(n,o)/dot(rd,n);\n    vec3  q = o + rd*t;\n    return (dot(q,q)<r*r) ? t : -1.0;\n}\n\n// disk: center c, normal n, radius r\nfloat diskIntersectWithBackFaceCulling( in vec3 ro, in vec3 rd, vec3 c, vec3 n, float r )\n{\n    float d = dot(rd,n);\n    if( d>0.0 ) return -1.0;\n\tvec3  o = ro - c;\n    float t = -dot(n,o)/d;\n    vec3  q = o + rd*t;\n    return (dot(q,q)<r*r) ? t : -1.0;\n}\n\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        #else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        #endif\n\n        // camera\n        vec3 ro = 1.5*vec3(cos(0.15*iTime),0.0,sin(0.15*iTime));\n        vec3 ta = vec3(0.0,0.0,0.0);\n        // camera matrix\n        vec3 ww = normalize( ta - ro );\n        vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n        vec3 vv = normalize( cross(uu,ww));\n        // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.0*ww );\n\n        // render background\n        vec3 col = vec3(0.08)*(1.0-0.3*length(p)) + 0.02*rd.y;\n\n        // render disks (raycast them)\n        const int num = 64;  // number of disks\n\n        float tmin = 1e20;\n        vec3  onor = vec3(0.0);\n        for( int i=0; i<num; i++ )\n        {\n            // fibonacci points on a sphere\n            const float kInvPhi = (sqrt(5.0)-1.0)/2.0; // one over golden ratio\n            float cb = 1.0-2.0*(float(i)+0.5)/float(num);\n            float sb = sqrt(1.0-cb*cb);\n            float aa = 6.283185*kInvPhi*float(i);\n            vec3  cen = vec3( sb*sin(aa), sb*cos(aa), cb );\n\n            // orient disk tangent to sphere surface\n            vec3  nor = normalize(cen);\n\n            // for full coverage, each disk's area should be 4PI/num,\n            // ie, their radius should be 2/sqrt(num)\n            float rad = (2.0/sqrt(float(num))); \n            // but we only want partial coverage, for aesthetic reasons\n            rad *= 0.5;\n\n            // test for intersection with disk\n            float t = diskIntersect( ro, rd, cen, nor, rad );\n\n            // trak intersections\n            if( t>0.0 && t<tmin ) \n            {\n                tmin = t;\n                onor = nor;\n            }\n        }\n\n        // shade disk, if one found\n        if( tmin<1000.0 )\n        {\n            float dif = clamp( dot(onor,vec3(0.8,0.6,0.4)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*onor.y;\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.75,0.6)*dif;\n        }\n\n        // gamma        \n        col = sqrt( col );\n        \n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    // dither to remove banding in the background\n    tot += fract(sin(fragCoord.x*vec3(13,1,11)+fragCoord.y*vec3(1,7,5))*158.391832)/255.0;\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}