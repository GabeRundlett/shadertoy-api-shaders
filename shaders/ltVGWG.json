{
    "Shader": {
        "info": {
            "date": "1476527815",
            "description": "Use mouse to change constant.\nInternet resources say that \"Biomorphs\" like this one were discovered by Dr. Clifford A. Pickover reportedly by accident.\nAs far as I know there was an article published about them on July 1989 issue of Scientific American.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltVGWG",
            "likes": 28,
            "name": "Biomorph",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "mouse",
                "mandlebrot",
                "power",
                "5",
                "clifford",
                "changing",
                "biomorph",
                "cliff",
                "pickover",
                "july",
                "1989",
                "scientificamerican",
                "5th"
            ],
            "usePreview": 0,
            "username": "vmednis",
            "viewed": 1134
        },
        "renderpass": [
            {
                "code": "/*\n\nCopyright (c) 2016 Valters Mednis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n#define ITERATIONS_MAX 100\n#define EXIT_NUMBER 10.0\n#define ANTIALIAS_AMOUNT 2\n\n//Function that returns a complex number to power of 5\nvec2 complexPower5(vec2 c)\n{\n    vec2 cRes = c;\n    for(int i = 1; i < 5; i++)\n    {\n        //Multiply the result by the original complex number\n    \tvec2 cResCopy = cRes;\n    \tcRes.x = (c.x * cResCopy.x) - (c.y * cResCopy.y);\n    \tcRes.y = (c.x * cResCopy.y) + (c.y * cResCopy.x);\n    }\n    return cRes;\n}\n\n//Returns the color of a biomorph at position coord\nvec4 colorBiomorph(vec2 coord, vec2 morphConstant)\n{\n    //This part is very similar to crude mandlebrot implementations\n    vec2 z = coord;\n    for(int i = 0; i < ITERATIONS_MAX; i++)\n    {\n        if((z.x * z.x < EXIT_NUMBER * EXIT_NUMBER) && (z.y * z.y < EXIT_NUMBER * EXIT_NUMBER) && ((z.x * z.x) + (z.y * z.y) < EXIT_NUMBER * EXIT_NUMBER))\n        {\n        \t//z = z^5 + c\n        \tz = complexPower5(z) + morphConstant;\n        }\n    }\n    \n    //Unlike mandelbrot and likes this is not colored according to the number of iterations\n    //it took to reach the exit number, but rather the according to the number itself after\n    //these iterations\n    if((z.x * z.x < EXIT_NUMBER * EXIT_NUMBER) || (z.y * z.y < EXIT_NUMBER * EXIT_NUMBER))\n    {\n        return vec4(0.0, 0.0, 0.0, 1.0);\n    }\n    else\n    {\n        return vec4(1.0, 1.0, 1.0, 1.0);\n    }\n}\n\n//Simple multisampling-antialising\n//Effectively the same as rendering the thing in a larger resolution and then downscaling\nvec4 antiAliasedBiomorph(vec2 uv, vec2 constant)\n{\n    vec4 result = vec4(0.0, 0.0, 0.0, 0.0);\n    vec2 sampleStep = 1.0 / iResolution.xy / float(ANTIALIAS_AMOUNT + 1);\n    for(int i = 1; i < ANTIALIAS_AMOUNT + 1; i++)\n    {\n        for(int j = 1; j < ANTIALIAS_AMOUNT + 1; j++)\n        {\n            vec2 currentPos = uv;\n            currentPos.x += sampleStep.x * float(i);\n            currentPos.y += sampleStep.y * float(j);\n            result += colorBiomorph((currentPos) * 4.0, constant);\n        }\n    }\n    return result / float(ANTIALIAS_AMOUNT * ANTIALIAS_AMOUNT);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    //Position the Biomorph\n    if(iResolution.x > iResolution.y)\n    {\n    \tuv.x -= 0.5 * (iResolution.x / iResolution.y) - 0.1777;\n   \t\tuv.y -= 0.5;\n    }\n    else\n    {\n        uv.y -= 0.5 * (iResolution.y / iResolution.x);\n   \t\tuv.x -= 0.3333;\n    }\n    //Render the Biomorph\n    if(iMouse.z < 0.5)\n    {\n\t\tfragColor = antiAliasedBiomorph(uv, vec2(0.01 * sin(iTime / 4.0) + 0.15, 0.8));\n    }\n    else\n    {\n        fragColor = antiAliasedBiomorph(uv, iMouse.xy / iResolution.xy);\n    }\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}