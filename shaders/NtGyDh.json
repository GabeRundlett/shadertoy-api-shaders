{
    "Shader": {
        "info": {
            "date": "1661341069",
            "description": "Threw a bit of everything at the wall and now the wall is like that.",
            "flags": 0,
            "hasliked": 0,
            "id": "NtGyDh",
            "likes": 9,
            "name": "Donut soul",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "abstract"
            ],
            "usePreview": 0,
            "username": "ruojake",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "// Donut soul by Kristian Sivonen (ruojake)\n// CC BY-SA 4.0 (https://creativecommons.org/licenses/by-sa/4.0/)\n\n// 2022-08-25: Added some cheese\n\nmat2 rot(float a)\n{\n    float s = sin(a),\n          c = cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat cheb(vec3 p, float k)\n{\n    return pow(pow(abs(p.x),k) + pow(abs(p.y),k) + pow(abs(p.z),k), 1./k);\n}\n\nfloat cheb(vec2 p, float k)\n{\n    return pow(pow(abs(p.x),k) + pow(abs(p.y),k), 1./k);\n}\n\nfloat time;\n\nfloat scene(vec3 p)\n{\n    float pt = time * 3.141593;\n    mat2 r = rot(pt / 3.);\n    \n    p.xz *= r;\n    float tr0 = abs(cheb(p.xy, 2.5 + sin(pt)) - 1.) - .5;\n    p.zy *= r;\n    float tr1 = abs(cheb(p.yz, 3. - sin(pt * 2.) * 1.5) - 1.) - .5;\n    p.yx *= r;\n    float tr2 = abs(cheb(p.zx, 2.1 + sin(pt * -3.) * .5) - 1.) - .5;\n    \n    return cheb(vec3(tr0, tr1, tr2), 2.25 + .75 * sin(pt * .5)) - .5;\n}\n\nvec3 normal(vec3 p, float d)\n{\n    const vec2 e = vec2(.004, 0);\n    return normalize(\n        d - vec3(\n            scene(p - e.xyy),\n            scene(p - e.yxy),\n            scene(p - e.yyx)\n        )\n    );\n}\n\nfloat shadow(vec3 ro, vec3 rd)\n{\n    float res = 1.;\n    float t = 0.;\n    for(int i = 0; i < 80 && res > 0.; ++i)\n    {\n        vec3 p = ro + rd * t;\n        float d = scene(p);\n        if (d < .001) return 0.;\n        res = min(res, d/t);\n        t += d;\n    }\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n    vec3 ro = vec3(0,0,-6),\n         rd = normalize(vec3(uv, 1.75)),\n         p;\n    \n    time = iTime;\n    \n    float zoomPos = uv.y * .5;\n    float zoomWidth = .5;\n    zoomPos += fract(time * .17) * 1.5 - fract(time * .3);\n    zoomWidth *= 2. + sin(time * .5) * fract(time * .2 + .3);\n    bool isZoomed = abs(uv.x - zoomPos) < zoomWidth * .5;\n    if (isZoomed)\n    {\n        rd = normalize(vec3(uv, 3.));\n        ro.y += floor(cos(time * .7) * 1.5) * .5;\n    };\n    \n    float hft = length(fract(uv * (isZoomed ? 15. : 40.)) - .5);\n    time += step(.5, hft) * .1 * (sin(iTime + length(uv) * 8.) * .5 + .5);\n    \n    float t = 2., d = 0., i = 0.;\n    \n    for(;i < 1. && t < 12.; i += 1./256.)\n    {\n        p = ro + rd * t;\n        d = scene(p) * .7;\n        if (abs(d) < .0001) break;\n        t += d;\n    }\n\n    vec3 col = vec3(.75 + uv.y * .25);\n    \n    bool line = abs(abs(uv.x - zoomPos) - zoomWidth * .5) < .05;\n    bool render = t < 12. && !line;\n    \n    if (render)\n    {\n        vec3 n = normal(p,d);\n        float frn = pow(1. - dot(rd,-n), 8.);\n        vec3 rfd = reflect(rd, n);\n        vec3 ld = normalize(vec3(1,1,-1));\n        float l = dot(ld, n) * .5 + .5;\n        l *= l;\n        float s = shadow(p + n * .1, ld);\n        float rf = frn * pow(dot(vec3(1), cos(rfd * 16. + 3.)), 4.) * (n.y * .5 + .5) * (1.-i);\n        float spec = pow(dot(rfd, ld), 16.);\n        float lighting = min(max(rf, s *max(spec, l)), 1.);\n        col = mix(vec3(.05,.1,.5) * max(sqrt(lighting), .1), mix(vec3(1.,.5,.3), vec3(1.,.1,.6), lighting), lighting);\n        col = mix(col,vec3(lighting), lighting * lighting * lighting);\n        if (isZoomed) col = max(vec3(.85,1.,0), vec3(floor(lighting * 6.)/6.)) * step(.125,lighting);\n    }\n\n    col *= 1. - pow(length((fragCoord / iResolution.xy) - .5), 5.);\n\n    float dth = fract(dot(fragCoord + float(iFrame & 7) * iResolution.xy, vec2(.11592,.60233)));\n    if (line) col = vec3(1);\n    fragColor = vec4(col + dth / 255.,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}