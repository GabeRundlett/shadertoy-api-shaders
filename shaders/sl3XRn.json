{
    "Shader": {
        "info": {
            "date": "1638577123",
            "description": "Intersecting two line segments. Performance improvement and math simplification of [url]https://www.shadertoy.com/view/sl3SRn[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "sl3XRn",
            "likes": 37,
            "name": "Segments - intersection",
            "published": 3,
            "tags": [
                "2d",
                "line",
                "intersection",
                "segment"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 968
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2021 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Intersecting two line segments\n//  l1(s) = a1 + s*(b1-a1)\n//  l2(t) = a2 + t*(b2-a2)\n// by equating them:\n//  l1(s) = l2(t) -> a1 + s*(b1-a1) = a2 + t*(b2-a2)\n// This is two equations with two unkowns:\n//  a1.x + s*(b1-a1).x = a2.x + t*(b2-a2).x\n//  a1.y + s*(b1-a1).y = a2.y + t*(b2-a2).y\n// So solve for s and t, for example like this:\n//  [(b1-a1).x (a2-b2).x][s] = (a2-a1).x\n//  [(b1-a1).y (a2-b2).y][t] = (a2-a1).y\n//\n// The little rectangle is the st space, and the yellow dot in it\n// the intersection point.\n\nfloat cro( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\nfloat vmax( in vec2 v ) { return max(v.x,v.y); }\n\nbool intersect( vec2 a1, vec2 b1, vec2 a2, vec2 b2, out vec2 point )\n{\n    float d = cro(b2-a2,b1-a1);\n    float s = cro(a1-a2,b1-a1) / d;\n    float t = cro(a1-a2,b2-a2) / d;\n    point = a1 + (b1-a1)*t; // or point = a2 + (b2-a2)*s;\n    return s>=0.0 && s<=1.0 && t>=0.0 && t<=1.0;\n    \n    // alternative test with one scalar comparisonss but more arithmetic\n    // return vmax(abs(vec2(s,t)-0.5))<0.5; \n}\n\n// same math as above, alternative writing by mla (see comments)\n/*\nbool intersect( vec2 a1, vec2 b1, vec2 a2, vec2 b2, out vec2 point )\n{\n    vec2 st = inverse(mat2(b1-a1,a2-b2))*(a2-a1);\n    point = a1 + (b1-a1)*st.x;\n    return st.x>=0.0 && st.x<=1.0 && st.y>=0.0 && st.y<=1.0;\n}\n*/\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b)\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp(dot(pa,ba)/(dot(ba,ba)),0.0, 1.0);\n    return length(pa-ba*h);\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdDisk( in vec2 p, in vec2 c, in float r )\n{\n    return length(p-c)-r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // animate\n    vec2 a1 = vec2(-2.0+vec2(1.5,1.0)*sin(iTime*1.1+vec2(0.0,0.5)));\n    vec2 b1 = vec2( 2.0+vec2(1.5,1.0)*sin(iTime*1.2+vec2(5.0,2.0)));\n    vec2 a2 = vec2(-2.0+vec2(1.5,1.0)*sin(iTime*1.3+vec2(3.0,1.0)));\n    vec2 b2 = vec2( 2.0+vec2(1.5,1.0)*sin(iTime*1.4+vec2(1.5,4.5)));\n\n    // NDC coords\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    // background\n    vec3 col = vec3(0.15) - 0.04*length(p);\n\n    p *= 3.5;\n        \n    // segment 1\n    {\n    float    d = sdLine(p,a1,b1)-0.02;\n    d = min( d,  sdDisk(p,a1,0.06) );\n    d = min( d,  sdDisk(p,b1,0.06) );\n    col = mix(col, vec3(0.0,0.7,0.7), smoothstep(0.01,0.0,d) );\n    }\n    \n    // segment 2\n    {\n    float    d = sdLine(p,a2,b2)-0.02;\n    d = min( d,  sdDisk(p,a2,0.06) );\n    d = min( d,  sdDisk(p,b2,0.06) );\n    col = mix(col, vec3(0.2,0.5,1.0), smoothstep(0.01,0.0,d) );\n    }\n\n    // intersection\n    vec2 pos;\n    if( intersect(a1, b1, a2, b2, pos) )\n    {\n        float d = sdDisk(p,pos,0.03);\n        d = min( d, abs(d-0.2) ) - 0.01; // onion, see https://iquilezles.org/articles/distfunctions2d\n        col = mix(col, vec3(1.0,0.7,0.0), smoothstep(0.01,0.0,d));\n    }    \n\n    // draw intersection point in st space\n    {\n        vec2 p = fragCoord/iResolution.y;\n        float px = 1.0/iResolution.y;\n\n        // draw box\n        float br = 0.1;\n        vec2 bc = vec2(iResolution.x/iResolution.y-br-0.05,0.05+br);\n        float s = vmax(abs(p-bc)) - br;\n        // fill\n        col += 0.1*step(s,0.0);\n        // border\n        col += smoothstep(px,0.0,abs(s));\n        \n        // compute intersecton point again\n        vec2 st = inverse(mat2(b1-a1,a2-b2))*(a2-a1);\n        if( vmax(abs(st-0.5))<0.5 )\n        {\n            st = bc + br*(2.0*st-1.0);\n            float d = sdDisk(p,st,0.006);\n            col = mix(col, vec3(1.0,0.7,0.0), smoothstep(px,-px,d));\n        }\n    }\n\n    // cheap dither (color banding removal)\n    col += (1.0/512.0)*sin(fragCoord.x*2.0+13.0*fragCoord.y);\n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}