{
    "Shader": {
        "info": {
            "date": "1668240388",
            "description": "Interpolation within tetrahedral cells, ensuring planar facets.\nLook around with the mouse.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssjSRw",
            "likes": 28,
            "name": "SDF to Mesh II",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "effect",
                "barycentric",
                "interpolation",
                "mesh",
                "sdftomesh",
                "tetrahedral"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 453
        },
        "renderpass": [
            {
                "code": "// Mesh resolution\n#define RES vec3(0.5)\n\n// Inigo Quilez's polynomial smooth minimum from https://iquilezles.org/articles/smin:\nfloat smin(in float a, in float b, in float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat mapScene(in vec3 p) {\n    float dist = length(p - vec3(-1.0, -1.0 + sin(iTime), 1.0)) - 1.5;\n    dist = smin(dist, length(p - vec3(1.0, 1.0 + 0.5 * cos(iTime), -1.0)) - 2.0, 1.5);\n    dist = smin(dist, length(p - vec3(-4.0, 1.0, 0.5)) - 2.0, 1.0);\n    dist = smin(dist, length(p - vec3(-2.0, 1.0, -3.0)) - 1.0, 2.25);\n    dist = smin(dist, length(p - vec3(3.0 + cos(iTime), -1.0, -1.0)) - 1.0, 1.0);\n    return dist;\n}\n\n// Meshify!\nfloat mapMesh(in vec3 p, out vec3 nor) {\n    vec3 pos = floor(p / RES) * RES;\n    vec3 uvw = (p - pos) / RES;\n\n    // Determine the vertices of the tetrahedron we're in\n    vec3 v0 = dot(uvw, vec3( 1,  1,  1)) > 2.0 ? vec3(1, 1, 1) : vec3(0, 0, 0);\n    vec3 v1 = dot(uvw, vec3(-1, -1,  1)) > 0.0 ? vec3(0, 0, 1) : vec3(1, 1, 0);\n    vec3 v2 = dot(uvw, vec3(-1,  1, -1)) > 0.0 ? vec3(0, 1, 0) : vec3(1, 0, 1);\n    vec3 v3 = dot(uvw, vec3( 1, -1, -1)) > 0.0 ? vec3(1, 0, 0) : vec3(0, 1, 1);\n\n    // Solve for barycentric coordinates\n    mat4 map = inverse(transpose(mat4(v0, 1, v1, 1, v2, 1, v3, 1)));\n    vec4 bary = vec4(uvw, 1) * map;\n\n    // Calculate isovalues at the tetrahedron vertices\n    vec4 isovals = vec4(\n        mapScene(pos + v0 * RES),\n        mapScene(pos + v1 * RES),\n        mapScene(pos + v2 * RES),\n        mapScene(pos + v3 * RES)\n    );\n\n    nor = normalize((map * isovals).xyz / RES); // Normalized gradient\n    return dot(isovals, bary); // Interpolate isovalues\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 3.14;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    fragColor = vec4(0.24375, 0.16125, 0.07875, 1.0);\n\n    // Default before interaction\n    if (ivec2(iMouse) == ivec2(0)) mouse = vec2(-0.25, -0.5);\n\n    // Calculate ray\n    vec3 ro = vec3(0.0, 0.0, 10.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Rotate with mouse\n    float cy = cos(mouse.x), sy = sin(mouse.x);\n    float cp = cos(mouse.y), sp = sin(mouse.y);\n\n    ro.yz *= mat2(cp, -sp, sp, cp);\n    ro.xz *= mat2(cy, -sy, sy, cy);\n    rd.yz *= mat2(cp, -sp, sp, cp);\n    rd.xz *= mat2(cy, -sy, sy, cy);\n\n    // Raymarch\n    float t = 0.0;\n    vec3 nor;\n    for (int i=0; i < 200; i++) {\n        vec3 p = ro + rd * t;\n        float dist = mapMesh(p, nor);\n        if (dist < 0.001) {\n            fragColor.rgb = 0.5 + 0.5 * nor;\n            break;\n        }\n\n        if (t > 25.0) {\n            break;\n        }\n\n        t += dist;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}