{
    "Shader": {
        "info": {
            "date": "1501048070",
            "description": "Use this shader to ask questions to the community about the 3rd challenge or the Shadertoy Competition. \n\nMore info : [url]https://www.shadertoy.com/events/competition2017[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "4dBfRK",
            "likes": 8,
            "name": "[SH17C] Challenge",
            "published": 3,
            "tags": [
                "challenge",
                "sh17c"
            ],
            "usePreview": 0,
            "username": "shadertoy",
            "viewed": 4463
        },
        "renderpass": [
            {
                "code": "// Created by Shadertoy - iq/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst int[] font = int[](0x75557, 0x22222, 0x74717, 0x74747, 0x11574, 0x71747, 0x71757, 0x74444, 0x75757, 0x75747);\nconst int[] powers = int[](1, 10, 100, 1000, 10000, 100000, 1000000);\n\nint PrintInt( in vec2 uv, in int value, const int maxDigits )\n{\n    if( abs(uv.y-0.5)<0.5 )\n    {\n        int iu = int(floor(uv.x));\n        if( iu>=0 && iu<maxDigits )\n        {\n            int n = (value/powers[maxDigits-iu-1]) % 10;\n            uv.x = fract(uv.x);//(uv.x-float(iu)); \n            ivec2 p = ivec2(floor(uv*vec2(4.0,5.0)));\n            return (font[n] >> (p.x+p.y*4)) & 1;\n        }\n    }\n    return 0;\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    //------------------------------\n    // coords (-1,1) with 10% paddin\n    //------------------------------\n    \n    vec2  uv = 1.1 * (-iResolution.xy+2.0*fragCoord)/iResolution.y;\n    float px = 1.1 * 2.0/iResolution.y;\n    \n\n    //------------------------------\n    // animation\n    //------------------------------\n\n    float t = (iMouse.z<0.001) ? iTime : 6.2831*iMouse.x/iResolution.x;\n    vec2 p = cos( t - vec2(0.0,3.1415927/2.0) );\n\n\n    //------------------------------\n    // rendering\n    //------------------------------\n    \n    vec3 col = vec3(0.0);\n    // grid\n    col = vec3( 0.2 ) + 0.01*mod(floor(uv.x*10.0)+floor(uv.y*10.0),2.0);\n\t// circle\n    col = mix( col, vec3(0.0,0.0,0.0), 1.0-smoothstep( 0.0, px, abs(length(uv)-1.0) ) );\n\t// axes\n    col = mix( col, vec3(0.0,0.0,0.0), 1.0-smoothstep( 0.0, px, abs(uv.x) ) );\n    col = mix( col, vec3(0.0,0.0,0.0), 1.0-smoothstep( 0.0, px, abs(uv.y) ) );\n    // orage lines\n    col = mix( col, vec3(1.0,0.7,0.0), 1.0-smoothstep( 0.0, px, sdSegment(uv, vec2(p.x,0.0), p) ) );\n    col = mix( col, vec3(1.0,0.7,0.0), 1.0-smoothstep( 0.0, px, sdSegment(uv, vec2(0.0,p.y), p) ) );\n    col = mix( col, vec3(1.0,0.7,0.0), 1.0-smoothstep( 0.0, px, sdSegment(uv, vec2(0.0,0.0), p) ) );\n    // red point    \n    col = mix( col, vec3(1.0,0.3,0.0), 1.0-smoothstep( 0.0, px, abs(length(uv-p)-0.03)-0.002 ) );\n    // numbers\n    col += vec3(0.7,0.4,0.1)*float( PrintInt( (uv-vec2(1.3,-0.95))*10.0, int(round(abs(10000.0*p.x))), 5 ) );\n\n    \n    fragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}