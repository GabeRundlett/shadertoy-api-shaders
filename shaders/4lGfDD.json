{
    "Shader": {
        "info": {
            "date": "1542496950",
            "description": "clubberized, https://codepen.io/alvarobyrne/pen/rQzoOz. The point here is to show online use of iMusic uniform, so useless within shadertoy and usable in codepen. https://github.com/wizgrav/clubber",
            "flags": 0,
            "hasliked": 0,
            "id": "4lGfDD",
            "likes": 6,
            "name": "Concentric Rainbow Circles, club",
            "published": 3,
            "tags": [
                "circles",
                "color",
                "rainbow",
                "clubber"
            ],
            "usePreview": 0,
            "username": "alvarobyrne",
            "viewed": 1184
        },
        "renderpass": [
            {
                "code": "// Fork of \"Concentric Rainbow Circles\" by jangxx. https://shadertoy.com/view/XtKBDz\n// 2018-11-17 23:16:55\n#ifndef CLUBBER\nvec4 iMusic[4];\nconst float iTransition = 1.0;\n#endif\n#define PI 3.14159265359\n\nfloat gradientFn(in float x, in float low, in float high, in float target) {\n    float b = ((low * target) - high) / (low - high);\n    float m = (1.0 - b) / low;\n    return m*x + b;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/(iResolution.xy-iMusic[0].x);\n   \n    float aspect = iResolution.x / iResolution.y;\n    \n//    vec2 pos = (uv * 2.0) - vec2(1, 1);\n    vec2 pos = (uv * 2.0) - vec2(0.5+iMusic[0].y, 0.5+iMusic[0].z);\n    pos.x *= aspect+iMusic[1].z;\n    \n    float radius = length(pos)+iMusic[1].y;\n\n    float x = radius*1.0 - iTime/(4.0+iMusic[0].y);\n    float ringColor = mod(x, 1.0) * 10.0;\n\n    vec3 finalColor;\n    if (ringColor < 1.0) {\n        finalColor = vec3(230,0,63)*(1.-iMusic[3].w)  / 255.0;\n    } else if (ringColor < 2.0) {\n        finalColor = vec3(255,0,0)*iMusic[3].z  / 255.0;\n    } else if (ringColor < 3.0) {\n        finalColor = vec3(255,81,0)*iMusic[3].y  / 255.0;\n    } else if (ringColor < 4.0) {\n        finalColor = vec3(255,138,0)*iMusic[3].x / 255.0;\n    } else if (ringColor < 5.0) {\n        finalColor = vec3(255,189,0)*iMusic[1].x / 255.0;\n    } else if (ringColor < 6.0) {\n        finalColor = vec3(241,236,0)*iMusic[0].x / 255.0;\n    } else if (ringColor < 7.0) {\n        finalColor = vec3(0,245,138)*iMusic[2].x / 255.0;\n    } else if (ringColor < 8.0) {\n        finalColor = vec3(0,206,190)*iMusic[2].y / 255.0;\n    } else if (ringColor < 9.0) {\n        finalColor = vec3(0,118,252)*iMusic[2].z / 255.0;\n    } else if (ringColor < 10.0) {\n        finalColor = vec3(140,24,195)*iMusic[2].w / 255.0;\n    }\n\n    float gradient = mod(ringColor, 1.0+0.5*iMusic[1].w);\n    if (gradient > 0.6) {\n        finalColor *= gradientFn(gradient, 0.6, 1.0, 0.3);\n    }\n\n    fragColor = vec4(finalColor, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}