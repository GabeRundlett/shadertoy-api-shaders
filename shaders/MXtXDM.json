{
    "Shader": {
        "info": {
            "date": "1719168348",
            "description": "See: https://www.pouet.net/prod.php?which=97199\n\nBecause i used sointus sync buffer which is not readily available at shadertoy and since the code got pretty ugly while party coding,\ni decided to just upload the animation at the heart of the intro here.",
            "flags": 0,
            "hasliked": 0,
            "id": "MXtXDM",
            "likes": 11,
            "name": "Implicit content",
            "published": 3,
            "tags": [
                "2d",
                "bezier",
                "implicit",
                "implicitization",
                "resultant",
                "bezout"
            ],
            "usePreview": 0,
            "username": "NinjaKoala",
            "viewed": 129
        },
        "renderpass": [
            {
                "code": "/*\nI'm using rational quartic bezier curves\nwhich are implicitized.\n\nThis is done by computing the resultant as\nthe determinant of the bezout matrix.\n\nSee:\nhttps://en.wikipedia.org/wiki/B%C3%A9zout_matrix\nhttps://en.wikipedia.org/wiki/Resultant\n\nOr for all the details, Sederbergs script:\nhttp://hdl.lib.byu.edu/1877/2822\n*/\n\nconst float a = sqrt(3.);\nconst float pi = 3.14159274;\n\n// double circle\nconst vec3 a0 = vec3(1,0,1);\nconst vec3 a1 = vec3(1,a,1);\nconst vec3 a2 = vec3(-2,2.*a,2);\nconst vec3 a3 = vec3(-8,0,4);\nconst vec3 a4 = vec3(-8,-8.*a,16);\n\n// circle\nconst vec3 b0 = vec3(2,0,2);\nconst vec3 b1 = vec3(2,-a,2);\nconst vec3 b2 = vec3(2,-2.*a,4);\nconst vec3 b3 = vec3(2,-6.*a,8);\nconst vec3 b4 = vec3(-16,-16.*a,32);\n\nvec3 color(float t){\n\treturn vec3(0.17,0.14,0.22)\n       +t*(vec3(1.64,5.77,5.69)\n       +t*(vec3(15.24,-31.76,-25.34)\n       +t*(vec3(-77.98,107.38,51.45)\n       +t*(vec3(149.87,-190.94,-54.09)\n       +t*(vec3(-131.90,158.77,25.82)\n       +t*(vec3(43.10,-49.19,-3.46)\n       ))))));\n}\n\nfloat quartic_bezier(vec2 uv, vec3 p0, vec3 p1, vec3 p2, vec3 p3, vec3 p4){\n\tp4.xy -= uv * p4.z;\n\tp3.xy -= uv * p3.z;\n\tp2.xy -= uv * p2.z;\n\tp1.xy -= uv * p1.z;\n\tp0.xy -= uv * p0.z;\n\n\tvec2 a4 = p0.xy-4.*p1.xy+6.*p2.xy-4.*p3.xy+p4.xy;\n\tvec2 a3 = -4.*p0.xy+12.*p1.xy-12.*p2.xy+4.*p3.xy;\n\tvec2 a2 = 6.*p0.xy-12.*p1.xy+6.*p2.xy;\n\tvec2 a1 = -4.*p0.xy+4.*p1.xy;\n\tvec2 a0 = p0.xy;\n\n\tmat4 bezout;\n\n\tbezout[0][0] = a1.x*a0.y - a0.x*a1.y;\n\tbezout[1][1] = a3.x*a0.y + a2.x*a1.y - a1.x*a2.y - a0.x*a3.y;\n\tbezout[2][2] = a4.x*a1.y + a3.x*a2.y - a2.x*a3.y - a1.x*a4.y;\n\tbezout[3][3] = a4.x*a3.y - a3.x*a4.y;\n\n\tbezout[0][1] = bezout[1][0] = a2.x*a0.y - a0.x*a2.y;\n\tbezout[0][2] = bezout[2][0] = a3.x*a0.y - a0.x*a3.y;\n\tbezout[0][3] = bezout[3][0] = a4.x*a0.y - a0.x*a4.y;\n\n\tbezout[1][2] = bezout[2][1] = a4.x*a0.y + a3.x*a1.y - a1.x*a3.y - a0.x*a4.y;\n\tbezout[1][3] = bezout[3][1] = a4.x*a1.y - a1.x*a4.y;\n\n\tbezout[2][3] = bezout[3][2] = a4.x*a2.y - a2.x*a4.y;\n\n\treturn determinant(bezout);\n}\n\nfloat cur_curve(vec2 uv){\n    vec3 p0, p1, p2, p3, p4;\n    \n    float t0 = .5 + .48*cos(iTime*2.*pi*.1);\n    \n    p0 = mix(a0,b0,t0);\n    p1 = mix(a1,b1,t0);\n    p2 = mix(a2,b2,t0);\n    p3 = mix(a3,b3,t0);\n    p4 = mix(a4,b4,t0);\n    \n    return quartic_bezier(uv,p0,p1,p2,p3,p4);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float eps = 1. / iResolution.y;\n    \n    float zoom = 3.;\n    \n    uv *= zoom;\n\n\tfloat d_x0 = cur_curve(uv+vec2(-1./2.,-1./3.)*eps);\n\tfloat d_x1 = cur_curve(uv+vec2(1./2.,-1./3.)*eps);\n\n\tfloat d_y0 = cur_curve(uv+vec2(0,2./3.)*eps);\n\n    vec2 grad = vec2(d_x0-d_x1, d_y0-(d_x0+d_x1)/2.)/eps*2.;\n    \n    float val = cur_curve(uv);\n\n    float dis = val / length(grad) / zoom;\n    vec3 color = color(pow(clamp(atan(dis*5.)*2./pi,0.,1.),.5));\n\n    fragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}