{
    "Shader": {
        "info": {
            "date": "1513087377",
            "description": "test virtual pipe water",
            "flags": 32,
            "hasliked": 0,
            "id": "4lXfWB",
            "likes": 12,
            "name": "virtual pipe water",
            "published": 3,
            "tags": [
                "fluid"
            ],
            "usePreview": 0,
            "username": "wachel",
            "viewed": 1122
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = texture(iChannel1, uv).rgb;\n    fragColor = vec4(pow(clamp(color, 0., 1.), vec3(1./2.2)), 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //current\n    vec4 outflow = texture(iChannel0, uv);//outflow        \n    vec4 height = texture(iChannel1, uv);//main haight\n    float totalHeight = height.x + height.y;\n    float waterHeight = height.y;\n\n    //neighbour\n    vec4 heightL = texture(iChannel1,uv + vec2(-1.0,0.0) / iResolution.xy);\n    vec4 heightR = texture(iChannel1,uv + vec2( 1.0,0.0) / iResolution.xy);\n    vec4 heightB = texture(iChannel1,uv + vec2(0.0,-1.0) / iResolution.xy);\n    vec4 heightT = texture(iChannel1,uv + vec2(0.0, 1.0) / iResolution.xy);\n    vec4 totalHeightN = vec4(\n        heightL.x + heightL.y, \n        heightR.x + heightR.y, \n        heightB.x + heightB.y, \n        heightT.x + heightT.y\n    );\n\n    //outflowN\n    vec4 outflowL = texture(iChannel0,uv + vec2(-1.0,0.0) / iResolution.xy);\n    vec4 outflowR = texture(iChannel0,uv + vec2( 1.0,0.0) / iResolution.xy);\n    vec4 outflowB = texture(iChannel0,uv + vec2(0.0,-1.0) / iResolution.xy);\n    vec4 outflowT = texture(iChannel0,uv + vec2(0.0, 1.0) / iResolution.xy);\n\n    //\n    vec4 diffHeight = (vec4(totalHeight).xxxx - totalHeightN);\n\n    //damp\n    float flowdamp = 0.999;\n\n    float flowSpeed = 0.2;\n\n\n    //\n    outflow *= flowdamp;\n    outflow += diffHeight * flowSpeed;// / distance;\n    outflow = max(outflow, vec4(0.00000000000001));\n\n    //\n    float outflowScale = waterHeight / (outflow.x + outflow.y + outflow.z + outflow.w);\n    outflowScale = min(1.0, outflowScale);\n    outflow *= outflowScale;\n\n    fragColor = outflow;\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define MOD3 vec3(.1031,.11369,.13787)\nvec3 hash33(vec3 p3)\n{\n    p3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nfloat simplex_noise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n\n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n\n    // thx nikita: https://www.shadertoy.com/view/XsX3zB\n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n    vec3 i1 = e * (1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n\n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n\n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n\n    return dot(vec4(31.316), n);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    if(iFrame == 0){\n        fragColor = vec4(0.0,0.1,0.0,0.0);\n        return;\n    }    \n    \n    //current\n    vec4 outflow = texture(iChannel0, uv);//outflow\n    vec4 height = texture(iChannel1, uv);//main\n    float terrainHeight = height.x;\n    float waterHeight = height.y;\n    float totalHeight = terrainHeight + waterHeight;\n\n    //neighbour\n    vec4 heightL = texture(iChannel1,uv + vec2(-1.0,0.0) / iResolution.xy);\n    vec4 heightR = texture(iChannel1,uv + vec2( 1.0,0.0) / iResolution.xy);\n    vec4 heightB = texture(iChannel1,uv + vec2(0.0,-1.0) / iResolution.xy);\n    vec4 heightT = texture(iChannel1,uv + vec2(0.0, 1.0) / iResolution.xy);\n    vec4 waterN = vec4(heightL.y, heightR.y, heightB.y, heightT.y);\n\n    //inflow\n    vec4 outflowL = texture(iChannel0,uv + vec2(-1.0,0.0) / iResolution.xy);\n    vec4 outflowR = texture(iChannel0,uv + vec2( 1.0,0.0) / iResolution.xy);\n    vec4 outflowB = texture(iChannel0,uv + vec2(0.0,-1.0) / iResolution.xy);\n    vec4 outflowT = texture(iChannel0,uv + vec2(0.0, 1.0) / iResolution.xy);\n    vec4 inflow = vec4(outflowL.y, outflowR.x, outflowB.w, outflowT.z);\n\n    ////suspended\n    vec2 fluxOutflow = vec2(outflow.y - outflow.x, outflow.w - outflow.z);\n    vec2 fluxInflow = vec2(inflow.x - inflow.y, inflow.z - inflow.w);\n    vec2 flux = (fluxInflow + fluxOutflow) * 0.5 ;//\n    vec2 velocity = flux / (height.y + 0.000000001);\n\n    //update water\n    vec4 diffFlow = inflow - outflow;\n    waterHeight += dot(diffFlow,vec4(1.0));\n    \n    //if(length(iMouse.xy)<10.0){\n        vec2 emissionRed = vec2(simplex_noise(vec3(iTime * 0.5,0,0)),simplex_noise(vec3(0,iTime * 0.5,0))) * 0.5 +0.5;\n    \tvec2 emissionYellow = vec2(simplex_noise(vec3(iTime * 0.5 + 3.5,0,0)),simplex_noise(vec3(0,iTime * 0.5 + 3.5,0))) * 0.5 +0.5;\n        emissionRed *= iResolution.xy;\n    \temissionYellow *= iResolution.xy;\n        if(length(fragCoord.xy - emissionRed.xy) < 3.0f){\n            waterHeight += 0.5f;\n        }\n       // if(length(fragCoord.xy - emissionYellow.xy) < 3.0f){\n        //    waterHeight += 0.5f;\n        //}    \n    //}\n    //else{\n        if(iMouse.z > 0.0f && length(fragCoord.xy - iMouse.xy)<3.0f){\n            waterHeight += 0.5f;\n        }\n    //}\n    waterHeight -= (waterHeight - 0.1f) * 0.01f;\n\n    fragColor = vec4(0, waterHeight, 0, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}