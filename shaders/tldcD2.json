{
    "Shader": {
        "info": {
            "date": "1609984180",
            "description": "2d-cuadrado simple",
            "flags": 0,
            "hasliked": 0,
            "id": "tldcD2",
            "likes": 2,
            "name": "2d-cuadrado simple",
            "published": 3,
            "tags": [
                "2dcuadradosimple"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 260
        },
        "renderpass": [
            {
                "code": "// por jorge2017a1 ...jorge flores p.!!!\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\nvec2 opRep2D( in vec2 p, in vec2 c )\n{    vec2 q = mod(p+0.5*c,c)-0.5*c; return  q; }\n\n\nvec2 opU2( vec2 d1, vec2 d2 ) \n{ if (d1.x<d2.x) return d1;   else return d2; }\n\nvec2 opI2( vec2 d1, vec2 d2 ) \n{ if (d1.x>d2.x) return d1; else return d2;}\n\nvec2 opS2(vec2 d1, vec2 d2) \n{ return vec2(max(-d2.x, d1.x), 2.0); }\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0); }\n\n\nvec2 CuadroBlanco(vec2 p)\n{\n  float sb0= sdBox( p, vec2(0.52,0.52) );  \n  float sb1= sdBox( p, vec2(0.5,0.5) );\n  float sb2= sdBox( p, vec2(0.25,0.25) );\n  float sb3= sdBox( p, vec2(0.125,0.125) );\n  \n  vec2 resp=vec2(9999.9,-1.0);\n  \n  sb0=opS(sb1,sb0 );\n  \n  sb1=opS(sb2,sb1 );\n  sb1=opS(sb3,sb1 );\n  \n  \n  sb2=opS(sb3,sb2);\n  \n  resp=opU2(resp, vec2(sb0,0.0 ) );\n  resp=opU2(resp, vec2(sb1,1.0 ) );\n  resp=opU2(resp, vec2(sb2,0.0 ) );\n  resp=opU2(resp, vec2(sb3,1.0 ) );\n  \n return resp;\n}\n\n\nvec2 CuadroNegro(vec2 p)\n{\n  float sb0= sdBox( p, vec2(0.52,0.52) );  \n  float sb1= sdBox( p, vec2(0.5,0.5) );\n  float sb2= sdBox( p, vec2(0.25,0.25) );\n  float sb3= sdBox( p, vec2(0.125,0.125) );\n  \n  vec2 resp=vec2(9999.9,-1.0);\n  \n  sb0=opS(sb1,sb0 );\n  \n  sb1=opS(sb2,sb1 );\n  sb1=opS(sb3,sb1 );\n  \n  \n  sb2=opS(sb3,sb2);\n  resp=opU2(resp, vec2(sb0,1.0 ) );\n  resp=opU2(resp, vec2(sb1,0.0 ) );\n  resp=opU2(resp, vec2(sb2,1.0 ) );\n  resp=opU2(resp, vec2(sb3,0.0 ) );\n  \n return resp;\n}\n\n\nvec2 BloquesSimple(vec2 p)\n{\n    vec2 resp=vec2(9999.0,-1.0);\n    \n    float ii=1.0;\n    float jj=2.0;\n    for (float i=0.0; i<6.0;i++)\n \t{       \n        vec2 cb1= CuadroBlanco( p-vec2(ii,0.0) );\n        vec2 cb2= CuadroNegro( p-vec2(jj,0.0) );\n        resp=opU2(resp, cb1);\n        resp=opU2(resp, cb2);\n        ii=ii+2.0;\n        jj=jj+2.0;\n        \n    }\n    \n    return resp;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    p*=3.0*sin(iTime);\n    vec3 colOut=vec3(0.0);\n    \n    vec2 c1 =vec2(20.0,1.05);\n    vec2 p1= opRep2D(  p, c1 );\n    \n    vec2 bs1= BloquesSimple(p1-vec2(-6.0,0.0) );\n    colOut= ProcesoColorVec2( colOut, bs1);\n    \n    \n    vec4 color =vec4(colOut, 1.0);\n\tfragColor = color;\n\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{ vec3 color; };\n    \nTObj mObj;\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.75),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(0.9),  //31\nvec3(0.8),  //32\nvec3(0.7),  //33\nvec3(0.6),  //34\nvec3(150.,75.,0.0)/255.,  //35  //marron o cafe\nvec3(204.,119.,34.0)/255.,  //36 //marron o cafe\nvec3(184.,115.,51.0)/255.  //37 //marron o cafe\n\n    \n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\nvec3 getColorf(float ii)\n{\n    int i=int(ii);\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n\n\nvec2 rotate2d(vec2 p, float ang)\n{\n    float c = cos(ang); float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nmat2 rot2D(float a)\n{\n    float c=cos(a);  float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\n\n\n///------------------\nvec3 ProcesoColor(vec3 colBorde , vec3 colOut, float dist)\n{\n    float thickness = 0.005;  //grosor\n\tfloat blur = 0.004;\t //difuminar\n    \n    float step1 = thickness;\n\tfloat step2 = thickness + blur;\t\n    float step3= smoothstep(step1, step2, dist);\n    vec3 color1 = mix(colBorde, colOut, step3);\t\n    return color1;\n}\n\nvec3 ProcesoColorVec2( vec3 colOut, vec2 dist)\n{\n    float thickness = 0.005;  //grosor\n\tfloat blur = 0.004;\t //difuminar\n    vec3 colBorde=getColorf(dist.y);\n    \n    float step1 = thickness;\n\tfloat step2 = thickness + blur;\t\n    float step3= smoothstep(step1, step2, ( dist.x) );\n    vec3 color1 = mix(colBorde, colOut, step3);\t\n    return color1;\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}