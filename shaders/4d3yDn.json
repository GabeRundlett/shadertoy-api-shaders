{
    "Shader": {
        "info": {
            "date": "1518357783",
            "description": "Experiment",
            "flags": 40,
            "hasliked": 0,
            "id": "4d3yDn",
            "likes": 9,
            "name": "Sound Experiment 2018-02-11 1",
            "published": 3,
            "tags": [
                "sound",
                "music"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 684
        },
        "renderpass": [
            {
                "code": "// Passthrough to Buf A\n\nvoid mainImage( out vec4 f, in vec2 d ) { f = texelFetch(iChannel0, ivec2(d), 0); }\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Source in Common",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "/*\nStreaming Spectrogram v.2\nCopyright 2017 Theron Tarigo\n*/\n\nfloat windowmax = 0.5;\n\nvec4 encode(int i) { return vec4((uvec4(i)>>ivec4(0,8,16,24))&0xFFu)/255.; }\nint decode(vec4 f) { uvec4 d = uvec4(f*255.)<<ivec4(0,8,16,24); return int(d.x|d.y|d.z|d.w); }\n\nvoid mainImage( out vec4 f, in vec2 pixf )\n{\n    f = vec4(0.);\n    ivec2 pix = ivec2(pixf);\n    ivec2 res = ivec2(iChannelResolution[0].xy);\n    int center = res.x*res.y/2;\n    int offset = int(iTime*iSampleRate) - center;\n    int index = res.x*pix.y+pix.x;\n    if (index==0) { f = encode(offset); return; }\n    int offsetlast = decode(texelFetch(iChannel0, ivec2(0), 0));\n    int cutoff = int(windowmax*iSampleRate);\n    if (abs(index-center) > cutoff) return;\n    int samp = index+offset;\n    int samplast = center+cutoff+offsetlast;\n    float time = (float(samp)-0.5)/iSampleRate;\n    \n    //#define TESTING\n    #ifdef TESTING\n    /* TESTING: ensure reuse of previously computed samples is valid.  No blue pixels should appear! */\n    vec2 newsamp = mainSound( in int samp,time);\n    vec2 oldsamp = texelFetch(iChannel0, (ivec2(index+offset-offsetlast)/ivec2(1,res.x))%(res), 0).xy;\n    f.xy = newsamp;\n    if (bool(newsamp != oldsamp) == bool(samp <= offsetlast + center + cutoff)) f.z = 1.;\n    #else\n    if (samp <= offsetlast + center + cutoff) {\n        f.xy = texelFetch(iChannel0, (ivec2(index+offset-offsetlast)/ivec2(1,res.x))%(res), 0).xy;\n    } else {\n        f.xy = mainSound(0,time);\n    }\n    #endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Config\n\nconst float timescale = 1./4.; // Screens per second\nconst float freqscale = 3000.;\nconst float aspect = 1.;\nconst vec2 stereomix = vec2(1.,1.);\n\n\n\n/*\nStreaming Spectrogram v.2\nCopyright 2017 Theron Tarigo\n*/\n\nvec2 readsound( float time )\n{\n    ivec2 res = ivec2(iResolution.xy);\n    int offset = int(iTime*iSampleRate) - res.x*res.y/2;\n    //time += 4.;\n    int samp = int(time*iSampleRate) - offset;\n    ivec2 pix = ivec2(samp%res.x, (samp/res.x));\n    return texelFetch(iChannel1, pix, 0).xy;\n}\n\nvec2 spectrogram(float windowmax, float time, float freq) {\n    vec2 sum = vec2(0.);\n    float window = windowmax;\n    float samplerate = freqscale*2.;\n    for (float trel = -window; trel <= window; trel+=1./samplerate) {\n        // Cosine window\n        float w = (0.5+0.5*cos(trel/window*pi))/samplerate/window;\n        float samp = dot(stereomix,readsound(time+trel));\n        sum += w*vec2(cos(trel*freq*2.*pi),sin(trel*freq*2.*pi))*samp;\n    }\n    return sum;\n}\n\nvoid panImage( out vec4 f, float time, float y ) {\n    float freq = freqscale * y / iResolution.y;\n    f.rgb = 5.*vec3(10.,3.2,1.)*\n    length(spectrogram(0.1*sqrt(freq/freqscale)/aspect, time, freq));\n}\n\n//#define FRAMEDEBUGVIS\nvoid mainImage( out vec4 f, in vec2 df )\n{\n    ivec2 d = ivec2(df);\n    vec2 fsf = iResolution.xy;\n    ivec2 fs = ivec2(fsf);\n    int shift = int(fsf.x*timescale*(iTime));\n    int shiftlast = int(fsf.x*timescale*(iTime-iTimeDelta));\n    int delta = shift - shiftlast;\n    if ((fs.x-d.x) <= delta) {\n        #ifdef FRAMEDEBUGVIS\n        if (d.y<10) { f = vec4(0,iFrame%2,0,0); return; }\n        #endif\n        float time = float(shift-fs.x+d.x)/timescale/fsf.x;\n        panImage(f, time, df.y);\n    } else {\n        f = texelFetch(iChannel0,d+ivec2(delta,0),0);\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\nSound Experiment\nCopyright 2018 Theron Tarigo\n*/\n\n// variant of Mddcz7, Msdcz7\n\nconst float pi = 3.141592653589793;\n\nfloat sincstep(float x) {\n    return ( x<0.001 ? 0. : 1.0-sin(pi*x)/(pi*x) );\n}\n\nfloat pulse1(float freq, float decay, float time) {\n  return sincstep(time*freq*2.)*exp(-time*decay)*cos(time*freq*2.*pi);\n}\n\nstruct Synth2Params {\n  float decay_exp;\n  float decay_mult;\n  float filter_exp;\n  float filter_num;\n};\n\nfloat synth2(Synth2Params p, float freq, float time, float maxtime) {\n  float v = 0.;\n  if (time < 0. || time > maxtime) return 0.;\n  for (float n=1.0; n<18.; n+=1.0) {\n    v += pulse1(freq*n, pow(n,p.decay_exp)*p.decay_mult, time)\n         / pow(n,p.filter_exp)*(1.-p.filter_num/n);\n  }\n  v*=1.-exp((time/maxtime-1.)*8.);\n  return v;\n}\n\nfloat selfproduct(vec3 v) { return v.x*v.y*v.z; }\n\nivec3[] seqN = ivec3[](\n    ivec3(-3,-1, 1),\n    ivec3(-1,-1, 0),\n    ivec3( 0,-1, 0),\n    ivec3( 1,-2, 0),\n    ivec3(-1,-1, 0),\n    ivec3(-2, 0, 0),\n    ivec3(-3, 1,-1),\n    ivec3(-1,-1, 0),\nivec3(0));\n\nfloat seqf(int n, int s) {\n  int a = s/4;\n  int b = s/16;\n  int i = ((n+s)%8)%((n ^ (b ^ (b>>1)) )%4+1);\n  int j = (n/(1))%8;\n  i ^= (s ^ (s>>1));\n  ivec3 seq = seqN[i%8];\n  return selfproduct(pow(vec3(2,3,5), vec3(seq)));\n}\n\nvoid seq0(float time, out float freq, int s) {\n    int n = int(time);\n    float fprod = seqf(n, s);\n    freq = 180. * 1. * fprod;\n}\n\nvec2 smoothclip(vec2 f) {\n    float p = 3.;\n    f.x = pow(atan(pow(abs(f.x),p)*1.571)/1.571,1./p)*sign(f.x);\n    f.y = pow(atan(pow(abs(f.y),p)*1.571)/1.571,1./p)*sign(f.y);\n    return f;\n}\n\nvec2 mainSound( in int samp, float timein ) {\n  float time = timein;\n  float br;\n  vec2 v = vec2(0.);\n  for (int i = 0; i < 6; i++) {\n    float ampl;\n    float freq;\n    br = float(4<<i);\n    float nr = 1./4.;\n    float syntime = mod(time,1./br);\n    seq0(time*br, freq, int(time*nr)-1);\n    freq *= pow(2., 3.-float(i));\n    ampl = 0.25;\n    float pos = pi*sin(0.25/4.*pi*float((1<<i)*int(time*br)));\n    float td = 0.0001;\n    Synth2Params s2p;\n    s2p.decay_exp=1.2;\n    s2p.decay_mult=1.0;\n    s2p.filter_num = 0.5;\n    s2p.filter_exp=mod(time*br+3.,4.)*0.5+1.5;\n    v.x += ampl*synth2(s2p, freq, syntime+td*sin(pos)-td, 0.75/br)*pow(cos(pos/2.-pi/4.),2.);\n    v.y += ampl*synth2(s2p, freq, syntime-td*sin(pos)-td, 0.75/br)*pow(cos(pos/2.+pi/4.),2.);\n  }\n  v *= max(1.-exp(-1.1*(135.-time)),0.);\n  v *= max(1.-1.1*exp(-0.2*time),0.);\n  v *= 2.;\n  v = smoothclip(v);\n  return vec2(v);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}