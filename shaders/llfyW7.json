{
    "Shader": {
        "info": {
            "date": "1505070305",
            "description": "More experiments with smoke animation.",
            "flags": 0,
            "hasliked": 0,
            "id": "llfyW7",
            "likes": 70,
            "name": "Mushroom Cloud",
            "published": 3,
            "tags": [
                "raymarching",
                "volumetric",
                "flowmapping"
            ],
            "usePreview": 0,
            "username": "TekF",
            "viewed": 3082
        },
        "renderpass": [
            {
                "code": "// Hazel Quantock 2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\nfloat g_blastTime;\nvec3 g_cloudCentre;\nvoid InitBlastParams()\n{\n    g_blastTime = fract(iTime/20.);\n    g_cloudCentre = vec3(0,g_blastTime*5.,0);\n}\n\nvec3 Flow( vec3 pos )\n{\n    // make a toroidal roll, like a mushroom cloud\n    vec3 p = pos - g_cloudCentre;\n    vec3 v;\n    v.xz = -normalize(p.xz)*p.y;\n    v.y = length(p.xz)-.8;\n    //v *= smoothstep(.0,.5,length(pos.xz)); bad: this squashes/stretches it\n    v *= .1;\n    \n    // reduce velocity with distance from cloud top edge\n    float g = length(vec2(p.y,length(p.xz)-.8))-1.; // this doesn't match the one in SDF, but it looks better with the mismatch\n    v *= exp2(-pow(g*3.,2.));\n    \n    return v;\n}\n\nfloat SDF( vec3 pos )\n{\n    // multi fractal\n    const float period = 1.6;\n    float tt = fract(iTime/period /*+ texture(iChannel0,pos/20.).x /*break up the pattern - screws up texture filtering and I'm too lazy to fix/hide it*/);\n    float t[2] = float[2]( tt*period, (tt-1.)*period );\n    vec3 uvw = (pos-g_cloudCentre)/30.;\n    float f[2] = float[2]( .0, .0 );\n\n// applying flow to the whole SDF causes a \"pulsing\" - because we're displacing in a straight line so convex curves shrink\n    for ( int i=0; i < 2; i++ )\n    {\n\t    vec3 offset = Flow(pos)*t[i];\n        vec3 u = uvw\n//            +offset*.25; offset *= .0; // makes the loop more obvious but looks generally good\n            +offset*.2; offset *= .2; // makes the loop more obvious but looks generally good\n        f[i] += texture(iChannel0,offset+u*2.).x/2.;\n        f[i] += texture(iChannel0,offset+u*4.).x/4.;\n        f[i] += texture(iChannel0,offset+u*8.).x/8.;\n        f[i] += texture(iChannel0,offset+u*16.).x/16.;\n        f[i] += texture(iChannel0,offset+u*32.).x/32.;\n    }\n    \n    float ff = mix( f[0], f[1], tt );// actually better with a longer fade imo smoothstep(.4,.6,tt) );\n    //this doesn't help: const float p = 1.; float ff = pow( mix( pow(f[0],p), pow(f[1],p), tt ), 1./p );\n\n/*this looks far worse\n\tf[0] *= smoothstep(1.,.5,tt);\n    f[1] *= smoothstep(0.,.5,tt);\n    const float p = 20.; float ff = pow( pow(f[0],p) + pow(f[1],p), 1./p );*/\n//    float ff = max(f[0],f[1]);\n\n    ff *= .5; // strength of clouds vs bounding shapes\n\n//    float g = length(vec3(pos.yz,max(0.,abs(pos.x)-.5)))-1.2;\n//    float g = length(pos.xz)-1.3-.5*abs(sin(pos.y*1.5-iTime));\n//    g = min(g,length(pos-vec3(0,-2,0))-1.2);\n//    float g = length(vec2(pos.y,length(pos.xz)-(.5+.5*sin(iTime*.31))*2.)) - 1.; // smoke ring!\n//    float g = max(max(abs(pos.x),abs(pos.y)),abs(pos.z)) - 1.; // cube - even hard corners look soft!\n    vec3 p = pos - g_cloudCentre;\n    float bulge = 1.-exp2(-20.*g_blastTime);\n    float g = length(vec2(p.y,length(p.xz)-1.*bulge))-1.;\n    ff *= bulge; // smooth sphere to start\n    \n//    g = min(g,max(length(pos.xz)-.7,abs(pos.y-g_cloudCentre.y*.5)-g_cloudCentre.y*.5));\n    \n    // vertical column\n    float h = length(pos.xz)-.7+.2*(g_cloudCentre.y-pos.y-1.2); // cylinder - slightly tapered to cone\n    h = max(h, pos.y-g_cloudCentre.y); // cut off at top (inside cloud)\n    h = max(h,(g_cloudCentre.y*1.25-4.-pos.y)*.3); // softer cut off at the bottom\n    \n    g = min(g,h);\n    ff += g*.6;\n    \n//    ff += smoothstep(.9,1.,g_blastTime)*2.1;//1.*pow(g_blastTime,2.); // fade\n    \n    // hard cut at ground level\n//    ff = max(ff,-pos.y);\n    \n    return ff;\n}\n\nvoid mainImage( out vec4 o, in vec2 uv )\n{\n    InitBlastParams();\n    \n    vec3 ray = vec3((uv-iResolution.xy*.5)/iResolution.y,.9);\n    ray = normalize(ray);\n    vec3 pos = vec3(0,2,-5);\n    \n    vec2 a = iMouse.xy/iResolution.xy - .5;\n    if ( iMouse.x == .0 && iMouse.y == .0 )\n        a = vec2(0,.15);//vec2(-(iTime+sin(iTime))/15.,-.3*cos((iTime+sin(iTime))*.3));\n    a *= vec2(3,2);\n    \n    vec3 csx = vec3(cos(a.x),sin(a.x),-sin(a.x));\n    vec3 csy = vec3(cos(a.y),sin(a.y),-sin(a.y));\n    \n    pos.yz = pos.yz*csy.x + pos.zy*csy.yz;\n    pos.xz = pos.xz*csx.x + pos.zx*csx.yz;\n    ray.yz = ray.yz*csy.x + ray.zy*csy.yz;\n    ray.xz = ray.xz*csx.x + ray.zx*csx.yz;\n    \n    pos.y = max(.01,pos.y);\n    \n    float softness = .1+pow(g_blastTime,2.)*.5;\n    float density = 1.2/softness;\n    \n    const float epsilon = .001; // could scale this to pixel size - works well in big scenes\n    float visibility = 1.;\n    float light0 = 0.;\n    float light1 = 0.;\n    vec3 sunDir = normalize(vec3(1));\n    for ( int i=0; i < 20; i++ ) // can get away with really low loop counds because of the soft edges!\n    {\n        float h = SDF(pos);\n        float vis = smoothstep(epsilon,softness,h); // really should do an integral thing using previous h\n        if ( pos.y < .0 ) vis = 1.;\n        h = max(h,epsilon); // ensure we always march forward\n        if ( vis < 1. )\n        {\n            float newvis = visibility * pow(vis,h*density);\n\t    \tlight0 += (visibility - newvis)\n                \t\t*smoothstep( -.5, 1., (SDF(pos+sunDir*softness) - h)/softness );\n            vec3 lightDelta = g_cloudCentre-pos;\n\t    \tlight1 += (visibility - newvis)\n                \t\t*pow(smoothstep( -1., 1., (SDF(pos+normalize(lightDelta)*softness) - h)/softness ),2.)\n                \t\t/(dot(lightDelta,lightDelta)+1.); // inverse square falloff\n            visibility = newvis;\n        }\n        \n        if ( vis <= 0.\n            || pos.y < .0 ) // cut off to ground plane (assumes camera is above)\n            break;\n        pos += h*ray;\n    }\n\n    o = vec4(.1,.2,.3,1); // ambient\n    o += light0*vec4(.9,.8,.7,0);\n\to *= pow(g_blastTime,.5)*.5; // albedo (before the glow, so I can blance the two lights separately\n    \n    o += light1*vec4(8,2,.25,0)/(25.*pow(g_blastTime,2.));\n    \n    // sky\n    o = mix( o, vec4(.2,.4,.8,1)+.003/g_blastTime, visibility );\n    \n    o = pow(o,vec4(1./2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}