{
    "Shader": {
        "info": {
            "date": "1588169326",
            "description": "Hilb-Toning: halftoning using a hilbert curve in different scales.\nmove mouse to adjust detail\n\n...btw this effect is also available for AfterEffects and OpenFX (e.g. Nuke, DaVinci, Natron) here: [url]https://10xfx.com?package=pack2[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3dlBWH",
            "likes": 56,
            "name": "one line britney",
            "published": 3,
            "tags": [
                "effect",
                "halftone",
                "hilbert"
            ],
            "usePreview": 0,
            "username": "flockaroo",
            "viewed": 1616
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// one line britney - \"Hilb-toning\"\n\n// this and more effect for AfterEffects/OpenFX available at https://10xfx.com\n\n\n#define Res vec2(iResolution.xy)\n#define Res0 vec2(textureSize(iChannel0,0))\n#define Res1 vec2(textureSize(iChannel1,0))\n#define PI  3.14159265359\n#define PI2 6.28318530718\n#define PIH 1.57079632679\n\n#define ROT(ang) mat2(cos(ang+vec2(0.,PI*.5)),sin(ang+vec2(0.,PI*.5)))\n\n//#define PatternRot 0.\n#define PatternRot (iTime*.1)\n#define randness .0\n\nvec4 getRand(int idx)\n{\n    return texelFetch(iChannel1,ivec2(idx%256,(idx/256)%256),0);\n}\n\nmat2 getHilbTrans(int idx)\n{\n//  mirr, ang  (4 points)\n//    -1,-90\n//     1,  0\n//     1,  0\n//    -1, 90\n    float a=float( (((idx/2)&1)*2-1)*(((idx+3)/2)&1) ); // (-1,-1,1,1)*(1,0,0,1)=(-1,0,0,1)\n    float mir=-abs(a)*2.+1.;\n    float ang=a*PIH;\n    vec2 cs=cos(ang-vec2(0,PIH));\n    return mat2(cs,cs.yx*vec2(-1,1))*mat2(mir,0,0,1);\n    //return vec2(mir,ang);\n}\n    \nvec2 getHilbPoint(int idx)\n{\n    return vec2((ivec2(idx,idx+1)/2)&1)-.5;\n}\n\nint getHilbIdx03(vec2 sc)\n{\n    // get quadrant index\n    // 1 2\n    // 0 3\n    //return int(step(0.,-sc.y*sc.x)+2.*step(0.,sc.x));\n    return int(atan(sc.x,sc.y)/PIH+2.);\n}\n\nfloat dDirLine(vec3 p, vec3 c, vec3 dir, float l)\n{\n    p-=c;\n    dir=normalize(dir);\n    float dp=dot(p,dir);\n    //return length(p-dp*dir);\n    return max(max(length(p-dp*dir),-dp),dp-l);\n}\n\nfloat dLine(vec3 p, vec3 p1, vec3 p2) { return dDirLine(p,p1,normalize(p2-p1),length(p2-p1)); }\n\nfloat dLine(vec2 p, vec2 p1, vec2 p2) { return dLine(vec3(p,0),vec3(p1,0),vec3(p2,0)); }\n\n// get hilbert point of index idx with lev subdivision levels\nvec2 getHilbPoint(int idx,int lev)\n{\n    vec2 p=vec2(0);\n    float scale=1.;\n    mat2 m=mat2(1,0,0,1);\n    for(int l=0;l<lev;l++)\n    {\n        int il=(idx>>((lev-1-l)*2))&3;\n        p+=m*(getHilbPoint(il)*scale);\n        m=m*getHilbTrans(il);\n        scale*=.5;\n    }\n    return p;\n}\n\nvec2 getHilbPointF(int idx,float lev)\n{\n    vec2 p=vec2(0);\n    float scale=1.;\n    mat2 m=mat2(1,0,0,1);\n    int maxLev=int(floor(lev)+1.)-1;\n    maxLev=min(maxLev,10);\n    for(int l=0;l<=maxLev;l++)\n    {\n        int il=(idx>>((maxLev-l)*2))&3;\n        float levFade=1.;\n        if(l==maxLev) levFade=fract(lev);\n        vec2 offs=vec2(0.);\n        if(l==maxLev-1) offs=(getRand(idx).xy-.5)*.2*randness;\n        if(l==maxLev) offs=(getRand(idx).xy-.5)*.2*(1.-fract(lev))*randness;\n        p+=m*((getHilbPoint(il)+offs)*scale)*levFade;\n        m=m*getHilbTrans(il);\n        scale*=.5;\n    }\n    return p;\n}\n\nint getClosestHilbIdx(vec2 p,int lev)\n{\n    float scale=1.;\n    int idxAll=0;\n    for(int l=0;l<lev;l++)\n    {\n        int idx=getHilbIdx03(p);\n        idxAll=idxAll*4+idx;\n        mat2 m=getHilbTrans(idx);\n        p=m*(p-getHilbPoint(idx)*scale);\n        scale*=.5;\n    }\n    return idxAll;\n}\n\nfloat hilbert2d(vec2 pos, int level)\n{\n    float d=10000.;\n    for(int i=0; i<int(iMouse.x/10.); i++)\n    {\n        vec2 p1=getHilbPoint(i,level);\n        vec2 p2=getHilbPoint(i+1,level);\n        d=min(d,dLine(pos,p1,p2));\n    }\n    return d;\n}\n\n\nvec2 getInterPoint(vec2 p[11], int num, float fact)\n{\n    fact=clamp(fact,0.,1.);\n    float idxf=fact*(float(num)-.001);\n    int fi=int(idxf);\n    return mix(p[fi],p[min(fi+1,num-1)],fract(idxf));\n}\n\nvec2 getSmoothInterPoint(vec2 p[11], int num, float fact, float w)\n{\n    vec2 p1=getInterPoint(p, num, fact-w);\n    vec2 p2=getInterPoint(p, num, fact+w);\n    return mix(p1,p2,.5);\n}\n\nfloat hilbDistF(vec2 p, float lev)\n{\n    vec2 h[11];\n    int idx0=getClosestHilbIdx(p,int(lev+1.));\n    for(int i=0;i<=8;i++)\n    {\n        h[i]=getHilbPointF(idx0+i-4,lev);\n    }\n    float d=10000.;\n    //d=dSpline(h,8);\n    for(int i=0;i<8;i++)\n    {\n        d=min(d,dLine(p,h[i],h[i+1]));\n    }\n    return d;\n}\n\nfloat hilbPat(vec2 p, float lev)\n{\n    float sc=1.*exp2(lev);\n    return hilbDistF(p, lev);\n}\n\n#define LineWidth (1.*pow(Res.x/700.,.3)*(.75+iMouse.y/Res.y))\n#define Inverse 0.\n\n#define VidTex iChannel0\n\nfloat WhiteVign=1.;\n\nvec4 getCol(vec2 c)\n{\n    vec2 uv=(c-.5*Res)*min(Res0.x/Res.x,Res0.y/Res.y)/Res0+.5;\n    //return textureLod(VidTex,c/Res,0.);\n    vec4 col=vec4(0);\n    float sum=0.;\n    for(int i=0;i<4;i++) \n    {\n        float f=exp2(-float(i)*1.);\n        col+=f*textureLod(VidTex,uv,.5+float(i)*1.2);\n        sum+=f;\n    }\n    col/=sum;\n    float l=length(c/Res-.5);\n\t//col*=1.1;\n    //col-=.1;\n    col=mix(col,vec4(1),clamp(WhiteVign*l*l,0.,1.));\n    return clamp(col,0.,.9);\n}\n\nfloat getVal(vec2 c)\n{\n    //return dot(getCol(c).xyz,vec3(.3,.5,.2));\n    return dot(getCol(c).xyz,vec3(.3333));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fitRes=min(Res.x,Res.y);\n    vec2 sc=(fragCoord-Res*.5)/fitRes*2.;\n    sc=ROT(PatternRot)*sc;\n    \n    /*vec4 c=\n     1.  *textureLod(iChannel0,fragCoord/Res,0.5)\n    +.5  *textureLod(iChannel0,fragCoord/Res,1.5)\n    +.25 *textureLod(iChannel0,fragCoord/Res,2.5)\n    +.125*textureLod(iChannel0,fragCoord/Res,3.5);\n    c*=1./(1.+.5+.25+.125)*.9;\n    float br=dot(c.xyz,vec3(.333));*/\n    float br=getVal(fragCoord);\n    br=clamp(br,0.,1.);\n    //br*=.9;\n    br=mix(br,1.-br,Inverse);\n    //sc+=(texture(iChannel1,sc*.2).xy-.5)*.006;\n    //br=.1+.9*br;\n    float scale=1.;\n    //scale*=exp(-iMouseData.z/3000.)/sqrt(Res.x/600.);\n    scale*=exp(-iMouse.x/Res.x)/sqrt(Res.x/600.);\n    scale*=max(.8,.01)*(fitRes/Res.x);\n    float d=hilbPat(sc, log2(br*.5*Res.x*scale));\n    \n    float s=2./(fitRes*length(vec2(fwidth(sc.y),fwidth(sc.x))));\n    \n    d=hilbDistF(sc, log2((1.-br)*1.*Res.x*scale))*fitRes/2.;\n    //d=hilbPat(sc, iMouse.x/Res.x*10.);\n    \n    float w=1.4*fwidth(d);\n    fragColor.xyz = vec3(0)+exp(-(d-1.+br)*(d-1.+br)/w/w);\n    float th=LineWidth-.35;\n    //float p=smoothstep(th-.7,th+.7,d);\n    float p=clamp(d*s*1.4+1.-LineWidth,0.,1.);\n    p=mix(p,1.-p,Inverse);\n    fragColor.xyz = vec3(0)+p;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}