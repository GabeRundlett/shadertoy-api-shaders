{
    "Shader": {
        "info": {
            "date": "1573504932",
            "description": "Improving nurof3n's idea to capture internal penumbra in traditional cone-traced shadows for SDFs. This method doesn't break the external penumbra, and matches better physically correct shadows. It works for different light sizes.",
            "flags": 0,
            "hasliked": 0,
            "id": "WdyXRD",
            "likes": 52,
            "name": "Penumbra Shadows",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "shadows"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 4074
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// This shader is what I believe the most accurate fake soft shadow implementation\n// to date, in that it reproduces correct inner and outer penumbra sizes casting\n// a single ray. It matches the ground truth pretty well for different light\n// source sizes (here alternating between a small and large one every 8 seconds).\n// \n// Code is in line 126\n\n\n//------------------------------------------------------------------\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdSphere( vec3 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdCylinder(vec3 p, float h, float r)\n{\n    vec2 q = vec2( length(p.xz)-r, abs(p.y-h*0.5)-h*0.5 );\n    return min( max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\nbool shadowBox( in vec3 ro, in vec3 rd, in vec3 cen, in vec3 rad, in float tmax ) \n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*(ro-cen);\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\tif( tN > tF || tF < 0.0) return false;\n\treturn tN>0.0 && tN<tmax;\n}\n\nbool shadowSphere( in vec3 ro, in vec3 rd, in vec3 cen, in float rad, in float tmax )\n{\n\tvec3 oc = ro - cen;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - rad*rad;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return false;\n\tfloat t = -b - sqrt( h );\n    return t>0.0 && t<tmax;\n}\n\nbool shadowCylinder( in vec3 ro, in vec3 rd, in float he, float ra, in float tmax )\n{\n    float he2 = he*he;\n    \n    float k2 = 1.0        - rd.y*rd.y;\n    float k1 = dot(ro,rd) - ro.y*rd.y;\n    float k0 = dot(ro,ro) - ro.y*ro.y - ra*ra;\n    \n    float h = k1*k1 - k2*k0;\n    if( h<0.0 ) return false;\n    h = sqrt(h);\n    float t = (-k1-h)/k2;\n\n    // body\n    float y = ro.y + t*rd.y;\n    if( y>0.0 && y<he )\n    {\n        return t>0.0 && t<tmax;\n    }\n    \n    // caps\n    t = ( ((y<0.0) ? 0.0 : he) - ro.y)/rd.y;\n    if( abs(k1+k2*t)<h )\n    {\n        return t>0.0 && t<tmax;\n    }\n\n    return false;\n}\n\n//------------------------------------------------------------------\n\nfloat map( in vec3 pos )\n{\n    vec3 p2 = vec3( mod(pos.x+1.0,3.0)-1.0, pos.yz );\n    vec3 p3 = vec3( mod(pos.x+2.0,3.0)-1.0, pos.yz );\n    vec3 p4 = vec3( mod(pos.x+3.0,3.0)-1.0, pos.yz );\n\n    float d1 = sdPlane(    pos-vec3(0.0,0.00,0.0) );\n    float d2 = sdSphere(   p2-vec3(0.0,0.30,0.0), 0.4 );\n    float d3 = sdBox(      p3-vec3(0.0,0.25,0.0), vec3(0.2,0.5,0.2) );\n    float d4 = sdCylinder( p4-vec3(0.0,0.0,0.0), 0.8,0.3 );\n      \n    return min(min(d1,d2),min(d3,d4));\n}\n\n//------------------------------------------------------------------\n//\n// Approximated soft shadows, based on\n//\n// https://iquilezles.org/articles/rmshadows\n//\n// and\n//\n// https://www.shadertoy.com/view/tscSRS\n//\n// and further fixed and improved\n//\nfloat apprSoftShadow(vec3 ro, vec3 rd, float mint, float tmax, float w)\n{\n \tfloat t = mint;\n    float res = 1.0;\n    for( int i=0; i<256; i++ )\n    {\n     \tfloat h = map(ro + t*rd);\n        res = min( res, h/(w*t) );\n    \tt += clamp(h, 0.005, 0.50);\n        if( res<-1.0 || t>tmax ) break;\n    }\n    res = max(res,-1.0); // clamp to [-1,1]\n\n    return 0.25*(1.0+res)*(1.0+res)*(2.0-res); // smoothstep\n}\n\n\n// --------------------------------------\n// oldschool rand() from Visual Studio\n// --------------------------------------\nint   seed = 1;\nint   rand(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\nfloat frand(void) { return float(rand())/32767.0; }\nvoid  srand( ivec2 p, int frame )\n{\n    int n = frame;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589; // by Hugo Elias\n    n += p.y;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589;\n    n += p.x;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589;\n    seed = n;\n}\n// --------------------------------------\n\nfloat realSoftShadow( in vec3 ro, in vec3 rd, in float tmin, in float tmax, float w )\n{\n    vec3 uu = normalize(cross(rd,vec3(0,1,0)));\n    vec3 vv = normalize(cross(rd,uu));\n    \n    float tot = 0.0;\n    const int num = 32; // cast 32 rays\n\tfor( int j=0; j<num; j++ )\n    {\n        // uniform distribution on an disk\n        float ra = sqrt(frand());\n        float an = 6.283185*frand();\n        vec3 jrd = normalize(rd + w*ra*(uu*cos(an)+vv*sin(an)));\n        \n        // raycast\n        float res = 1.0;\n        \n        for( int i=0; i<7; i++ ) // 7 objects\n        {\n            int k = i % 3;\n            bool sha = false;\n                 if(k==0) sha = shadowBox( ro, jrd, vec3(-4.0 + float(i),0.25,0.0), vec3(0.2,0.5,0.2), tmax);\n            else if(k==1) sha = shadowSphere(ro, jrd, vec3(-4.0 + float(i),0.3,0.0), 0.4, tmax);\n            else          sha = shadowCylinder( ro - vec3(-4.0 + float(i),0.0,0.0), jrd, 0.8, 0.3, tmax);\n            \n            if( sha ) { res=0.0; break; }\n        }\n        \n        \n        tot += res;\n    }\n    return tot/float(num);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n}\n\nfloat castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n   \n#if 1\n    // bounding volume\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.0-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.0 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n    float t = tmin;\n    for( int i=0; i<128; i++ )\n    {\n\t    float precis = 0.0005*t;\n\t    float res = map( ro+rd*t );\n        if( res<precis || t>tmax ) break;\n        t += res;\n    }\n\n    if( t>tmax ) t=-1.0;\n    return t;\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.001 + 0.15*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 1.5*occ, 0.0, 1.0 );    \n}\n\nvec3 render( in vec3 ro, in vec3 rd, in int technique, in float lightSize)\n{ \n    vec3  col = vec3(0.0);\n    float t = castRay(ro,rd);\n\n    if( t>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        \n        // material        \n\t\tvec3 mate = vec3(0.3);\n\n        // key light\n        vec3  lig = normalize( vec3(-0.1, 0.3, 0.6) );\n        vec3  hal = normalize( lig-rd );\n        \n        float sha = (technique==0) ? realSoftShadow(pos, lig, 0.01, 3.0, lightSize ) \n                                   : apprSoftShadow(pos, lig, 0.01, 3.0, lightSize );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 ) * sha;\n        \n\t\tfloat spe = pow(clamp(dot(nor,hal),0.0,1.0),16.0)*\n                    dif *\n                    (0.04+0.96*pow(clamp(1.0+dot(hal,rd),0.0,1.0),5.0));\n\n\t\tcol = mate * 4.0*dif*vec3(1.00,0.70,0.5);\n        col +=       9.0*spe*vec3(0.90,0.80,1.0);\n        \n        // ambient light\n        float occ = (pos.y>0.01) ? 1.0 : calcAO( pos, nor );\n\t\tfloat amb = 0.5 + 0.5*nor.y;\n        col += mate*amb*occ*vec3(0.05,0.1,0.15);\n        \n        // fog\n        col *= exp( -0.0008*t*t*t );\n    }\n\n\treturn col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2   // make this 2 or 3 for antialiasing\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// init randoms\n    srand( ivec2(fragCoord), iFrame );\n    \n    // camera\t\n    float an = 12.0 - sin(0.1*iTime);\n    vec3 ro = vec3( 3.0*cos(0.1*an), 1.0, -3.0*sin(0.1*an) );\n    vec3 ta = vec3( 0.0, -0.4, 0.0 );\n    \n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    // animation\n    int technique = (fract(iTime/1.0)>0.5) ? 1 : 0;\n    float lightSize = 0.05 + 0.10*((fract(iTime/8.0)>0.5) ? 1.0 : 0.0);\n\n    // render\n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n#endif\n\n        // ray direction\n        vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n        // render\t\n        vec3 col = render( ro, rd, technique, lightSize);\n\n        // gain\n        col = 1.8*col/(1.0+dot(col,vec3(0.333)));\n        \n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}