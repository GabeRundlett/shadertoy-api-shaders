{
    "Shader": {
        "info": {
            "date": "1587787978",
            "description": "Here's another edit of my \"[url=https://www.shadertoy.com/view/wsSyWV]Ink-Marbling Fractal[/url].\"",
            "flags": 0,
            "hasliked": 0,
            "id": "WdlfR4",
            "likes": 2,
            "name": "Flowing Marbled Fractal",
            "published": 3,
            "tags": [
                "fractal",
                "psychedelic",
                "marbling"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 359
        },
        "renderpass": [
            {
                "code": "\n//This parameter changes the number of iterations.\nconst float mag = 9.0;\nconst float GREEN = 0.;\nconst float BLUE = 1.;\nconst float GRAY = 2.;\nconst float YELLOW = 3.;\nconst float WHITE = 4.;\nconst float RED = 5.;\n\n\n//this function is from https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n    float num_colors = 5.0;\n    //set the number of colors to be randomly generated\n    \n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return floor(fract((p3.x + p3.y) * p3.z)*num_colors);\n}\n    \n\n\nfloat magnify(vec2 fragCoord,float mag){\n    return hash12(floor(fragCoord/pow(3.0,mag)));\n}\n\nvec4 get_neighbors(vec2 fragCoord,float mag){\n    return vec4(magnify(fragCoord+vec2(0,1),mag),\n        magnify(fragCoord+vec2(1,0),mag),\n        magnify(fragCoord-vec2(0,1),mag),\n        magnify(fragCoord-vec2(1,0),mag));\n}\n\n\nbool is_next_to(float color,vec4 neighbors){\n\treturn (neighbors.x == color)\n        || (neighbors.y == color)\n        || (neighbors.z == color)\n        || (neighbors.w == color);\n}\n\n\n\nvec3 get_color(float color){\n    if(color == BLUE){\n    \treturn vec3(0.149,0.141,0.912);\n   \t}\n    else if(color == GREEN){\n    \treturn vec3(0.000,0.833,0.224);\n   \t}\n    else if(color == RED){\n    \treturn vec3(1.0,0.0,0.0);\n   \t}\n    else if(color == WHITE){\n    \treturn vec3(1.0,1.0,1.0);\n   \t}\n    else if(color == GRAY){\n    \treturn vec3(192.0,192.0,192.0)/255.0;\n    }\n    else if(color == YELLOW){\n    \treturn vec3(1.0,1.0,0.0);\n   \t}\n}\n\nvec3 iterations(float color1,in vec2 fragCoord,float mag){\n    float colors[] = float[](GREEN,BLUE,GRAY,YELLOW,WHITE,RED);\n    float mag1 = mag;\n    vec4 neighbors;\n    vec3 color;\n    float steps = 0.0;\n    while(mag > 1.0){\n        float avg =((100.0+sin((fragCoord.x+iTime*300.0)/(20.0*mag)))*(mag/color1));\n        fragCoord += vec2(sin(fragCoord.y/avg)*10.0,sin(fragCoord.x/(avg))*10.0)*mag*mag;\n\n        neighbors = get_neighbors(fragCoord,mag);\n    color1 = color1 == GREEN && is_next_to(BLUE,neighbors)\n    \t? YELLOW\n    :color1 == BLUE && is_next_to(GREEN,neighbors)\n        ? GREEN\n    :color1 == YELLOW && is_next_to(GRAY,neighbors)\n        ? BLUE\n    :color1 == GRAY && is_next_to(YELLOW,neighbors)\n        ? YELLOW\n    :color1 == WHITE && is_next_to(YELLOW,neighbors)\n        ? GRAY\n    :color1 == GRAY && is_next_to(BLUE,neighbors)\n        ? BLUE\n    :color1;\n\n    color += get_color(color1);\n    //mag -= 1.0+(sin(fragCoord.x+iTime)+cos(fragCoord.y+iTime))*0.0002;\n    mag -= 1.0;\n    steps += 1.0;\n\n    }\n    return color/steps;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord *= mag*(((iMouse.x-iMouse.y)+iResolution.x)/iResolution.x);\n    fragCoord = fragCoord + floor((iTime)*100.0)*vec2(mag,0.0);\n    fragCoord += vec2(sin(fragCoord.y/(100.0*(mag+1000.0)))*10.0,sin(fragCoord.x/(100.0*(mag)))*10.0)*mag*mag;\n\n    float color1 = magnify(fragCoord,mag);\n    //color1 = replace_pattern(mat2(1.0,1.0,1.0,1.0),mat2(0.0,2.0,2.0,0.0),fragCoord,mag);\n\n    vec3 color2 = iterations(color1,fragCoord,mag-1.0);\n\n    fragColor = vec4(color2,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}