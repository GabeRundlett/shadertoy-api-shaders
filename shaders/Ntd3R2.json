{
    "Shader": {
        "info": {
            "date": "1636367157",
            "description": "Endless free energy... (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "Ntd3R2",
            "likes": 20,
            "name": "Wind Farm",
            "published": 3,
            "tags": [
                "symmetry",
                "seascape",
                "windmill",
                "propeller"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 415
        },
        "renderpass": [
            {
                "code": "// \"Wind Farm\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA    0  // (= 0/1) optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Maxv2 (vec2 p);\nfloat Minv2 (vec2 p);\nfloat Minv3 (vec3 p);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define N_BOAT 2\n\nmat3 boatMat[N_BOAT];\nvec3 boatPos[N_BOAT], sunDir, qHit;\nvec2 gId, gShift, csMilAx, csBldAng, csBldPch;\nfloat dstFar, tCur, hgSize, boatAng[N_BOAT], boatSz, milSz;\nint idObj, idObjGrp;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvec3 TrackPath (float t)\n{\n  return vec3 (7. * cos (0.06 * t) + 0.1 * t, 0., t);\n}\n\nvec3 TrackVel (float t)\n{\n  return vec3 (-0.06 * 7. * sin (0.06 * t) + 0.1, 0., 1.);\n}\n\nfloat GrndHt (vec2 p)\n{\n  float h, s;\n  h = Fbm2 (0.5 * p) - 0.45;\n  s = 1. - abs (p.x - TrackPath (p.y).x) / 2.5;\n  if (s > 0.) h = max (h - s * s, -0.5);\n  return h;\n}\n\nfloat GrndHtN (vec2 p)\n{\n  float h;\n  h = GrndHt (p);\n  if (h > 0.) h = 0.3 * h + 0.3 * Fbm2 (2. * p);\n  return h;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.001, 0.);\n  return normalize (vec3 (GrndHtN (p.xz) - vec2 (GrndHtN (p.xz + e.xy),\n     GrndHtN (p.xz + e.yx)), e.x)).xzy;\n}\n\nvoid SetMilParms ()\n{\n  vec2 g, w, cs0;\n  g = HexToPix (gId * hgSize);\n  if (GrndHt (g) < 0. || Hashfv2 (37. * gId + 1.1) < 0.15) milSz = 0.;\n  else {\n    milSz = 0.18 * hgSize * 0.5 * sqrt3 * (1. - 0.1 * Hashfv2 (17. * gId + 1.1));\n    w = Hashv2v2 (73. * gId + 1.1);\n    cs0 = vec2 (0.5 * pi, 0.);\n    gShift = hgSize * max (0., 0.1 * sqrt3 - milSz) * w.x * sin (2. * pi * w.y + cs0);\n    csBldAng = sin (0.2 * (0.2 + w.x) * pi * (tCur + 10.) + cs0);\n    csMilAx = sin (0.2 * pi * sin (0.1 * pi * tCur) + 0.2 * pi * w.y + 0.01 * pi * tCur + cs0);\n    csBldPch = sin ((0.15 + 0.2 * w.x) * pi + cs0);\n  }\n}\n\nfloat BladeDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 b;\n  float d, bLen, bxMax;\n  bLen = 4.;\n  bxMax = 2.;\n  q = p;\n  q.x += 0.3;\n  d = PrRoundCylDf (q.yzx, 0.25, 0.05, 0.25);\n  DMINQ (2);\n  q.zy = Rot2Cs (q.zy, csBldPch);\n  q.xz += vec2 (bLen + 0.2, -0.03);\n  b = vec2 (q.x, sign (q.y));\n  if (q.z > 0.) q.zx = Rot2D (q.zx - vec2 (0., bxMax), mix (-0.02, 0.011,\n     step (q.x, bxMax)) * pi) + vec2 (0., bxMax);\n  q.yx = Rot2D (q.yx, 0.003 * pi * b.y);\n  d = PrRoundBoxDf (vec3 (b.x, q.y + 0.05 * b.y, q.z), vec3 (bLen, 0.02, 0.2), 0.12);\n  DMINQ (3);\n  return dMin;\n}\n\nfloat GObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, tLen, bScl, s;\n  dMin = dstFar;\n  if (milSz > 0.) {\n    p.xz -= HexToPix (gId * hgSize) + gShift;\n    dMin /= milSz;\n    p /= milSz;\n    tLen = 3.5;\n    q = p;\n    q.xz = Rot2Cs (q.xz, csMilAx);\n    q.yz -= vec2 (2. * tLen + 0.1, 0.1);\n    d = PrRoundBoxDf (q, vec3 (0.18, 0.2, 0.375), 0.1); \n    DMINQ (1);\n    q.z += 0.55;\n    q.xy = Rot2Cs (q.xy, csBldAng);\n    d = PrCapsDf (q, 0.2, 0.45);\n    DMINQ (2);\n    q.z += 0.27;\n    q.xy = Rot2D (q.xy, 2. * pi * ((floor (3. * atan (q.y, - q.x) / (2. * pi)) + 0.5) / 3.));\n    bScl = 0.65;\n    dMin = bScl * BladeDf (q / bScl, dMin / bScl);\n    q = p;\n    q.y -= tLen;\n    s = abs (q.y / tLen - 1.);\n    d = PrCylDf (q.xzy, 0.15 * (0.8 + 0.125 * s * s * s), tLen);\n    DMINQ (4);\n    dMin *= milSz;\n  }\n  return dMin;\n}\n\nfloat GObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  eps = 0.01;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  gIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = Minv3 (hv);\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetMilParms ();\n    }\n    d = GObjDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 GObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = GObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat GObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  gIdP = vec2 (-999.);\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetMilParms ();\n    }\n    h = GObjDf (p);\n    sh = min (sh, smoothstep (0., 0.02 * d, h));\n    d += h;\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  return 0.8 + 0.2 * sh;\n}\n\nfloat BoatDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  dMin /= boatSz;\n  p /= boatSz;\n  p.y -= 0.7;\n  d = PrCylDf (p, 1.2, 3.5);\n  if (d < 0.1 / boatSz) {\n    q = p;\n    d = max (max (PrRoundCylDf (q, -0.8, 2., 1.5), - max (PrRoundCylDf (q - vec3 (0., 0.1, 0.),\n       -0.85, 2., 1.5), abs (q.y) - 0.1)), abs (q.y + 0.1) - 0.1);\n    q.y -= -0.2;\n    d = max (SmoothMin (d, max (PrRoundCylDf (q, -1., 2., 1.3 ), q.y), 0.1), q.z - 2.);\n    DMINQ (idObjGrp + 1);\n    q = p;\n    q.yz -= vec2 (-0.5, -0.2);\n    d = max (PrRoundCylDf (q, -0.1, 1.1, 1.2), max (0.4 - q.y, q.z - 1.2));\n    DMINQ (idObjGrp + 2);\n    q = p;\n    q.yz -= vec2 (0.8, 0.5);\n    d = PrCylDf (q.xzy, 0.04, 0.3);\n    DMINQ (idObjGrp + 3);\n  } else dMin = min (dMin, d);\n  return boatSz * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  for (int k = 0; k < N_BOAT; k ++) {\n    idObjGrp = (k + 1) * 256;\n    dMin = BoatDf (boatMat[k] * (p - boatPos[k]), dMin);\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol;\n  vec2 q;\n  float f, fd, ff;\n  q = 0.01 * (ro.xz + tCur * vec2 (0.5, 2.) + ((200. - ro.y) / rd.y) * rd.xz);\n  ff = Fbm2 (q);\n  f = smoothstep (0.1, 0.8, ff);\n  fd = smoothstep (0.1, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n  clCol = (0.8 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n     smoothstep (0., 0.05, abs (fd)));\n  fd = smoothstep (0.01, 0.1, rd.y);\n  col = mix (mix (vec3 (0.8, 0.8, 0.75), vec3 (0.4, 0.5, 0.8), 0.3 + 0.7 * fd), clCol,\n     0.1 + 0.9 * f * fd);\n  return col;\n}\n\nfloat WakeFac (vec3 row)\n{\n  vec2 tw[N_BOAT], twa;\n  float twLen[N_BOAT], wkFac, ba;\n  for (int k = 0; k < N_BOAT; k ++) {\n    tw[k] = row.xz - (boatPos[k].xz - Rot2D (vec2 (0., 2.), boatAng[k]));\n    twLen[k] = length (tw[k]);\n  }\n  if (twLen[0] < twLen[1]) {\n    twa = tw[0];\n    ba = boatAng[0];\n  } else {\n    twa = tw[1];\n    ba = boatAng[1];\n  }\n  twa = Rot2D (twa, - ba);\n  wkFac = 0.;\n  if (length (twa * vec2 (2., 0.5)) < 1.) wkFac =\n     clamp (1. - 4. * abs (twa.x), 0., 1.) * clamp (0.5 + twa.y, 0., 1.);\n  return wkFac;\n}\n\nvec4 BoatCol ()\n{\n  vec4 col4, c4;\n  int ig, id;\n  ig = idObj / 256;\n  id = idObj - 256 * ig;\n  c4 = (ig == 1) ? vec4 (0.9, 0.9, 0.3, 0.2) : vec4 (0.3, 0.9, 0.3, 0.2);\n  if (id == 1) col4 = (abs (qHit.y - 0.1) < 0.01) ? vec4 (0.7, 0.4, 0.2, 0.1) * (1. -\n     0.2 * SmoothBump (0.42, 0.58, 0.05, mod (7. * qHit.x, 1.))) :\n     ((qHit.y > -0.3) ? c4 : vec4 (0.7, 0.7, 0.8, 0.1));\n  else if (id == 2) col4 = (abs (abs (qHit.x) - 0.4) < 0.36 && qHit.y > 0.45 && \n     length (vec2 (abs (qHit.x) - 0.1, qHit.y - 0.2)) < 0.7 || abs (abs (qHit.z + 0.2) -\n     0.6) < 0.5 && abs (qHit.y - 0.65) < 0.2) ? vec4 (0.6, 0.5, 0.2, -1.) : c4;\n  else if (id == 3) col4 = vec4 (1., 0., 0., 0.2);\n  return col4;\n}\n\nvec4 MillCol ()\n{\n  vec4 col4;\n  if (idObj == 1) col4 = vec4 (1., 0.9, 0.7, 0.1) * (0.5 +\n     0.5 * smoothstep (0., 0.02, abs (qHit.y) - 0.02)) * (0.5 +\n     0.5 * smoothstep (0., 0.02, length (vec2 (qHit.x, qHit.z + 0.1))- 0.18));\n  else if (idObj == 2) col4 = vec4 (0.9, 1., 0.8, 0.2);\n  else if (idObj == 3) col4 = mix (vec4 (0.85, 0.85, 0.9, 0.2), vec4 (1., 0.2, 0.2, 0.1), \n     smoothstep (0., 0.02, step (qHit.x, -3.5)));\n  else if (idObj == 4) col4 = vec4 (0.9, 0.8, 0.7, 0.05) * (0.9 +\n     0.1 * smoothstep (0., 0.02, abs (mod (2. * qHit.y + 0.5, 1.) - 0.5) - 0.02));\n  return col4;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, row;\n  vec2 vf;\n  float dstObj, dstObjG, dstObjM, dstGrnd, wkFac, sh;\n  int idObjG;\n  bool wtRefl;\n  boatSz = 0.15;\n  dstObjG = GObjRay (ro, rd);\n  idObjG = idObj;\n  dstObjM = ObjRay (ro, rd);\n  dstGrnd = (rd.y < 0.) ? - ro.y / rd.y : dstFar;\n  wtRefl = false;\n  wkFac = 0.;\n  dstObj = min (dstObjM, dstObjG);\n  if (dstGrnd < min (dstObj, dstFar)) {\n    row = ro + dstGrnd * rd;\n    if (GrndHt (row.xz) < 0.) {\n      ro = row;\n      wkFac = WakeFac (row);\n      row.xz += 0.2 * tCur;\n      vf = (wkFac > 0.) ? vec2 (16., 2. * wkFac) : vec2 (2., 0.05 * (1. - smoothstep (0.1, 0.4,\n          dstGrnd / dstFar)));\n      vn = VaryNf (vf.x * row, vec3 (0., 1., 0.), vf.y);\n      row = ro;\n      rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      dstObjG = GObjRay (ro, rd);\n      idObjG = idObj;\n      dstObjM = ObjRay (ro, rd);\n      dstGrnd = dstFar;\n      dstObj = min (dstObjM, dstObjG);\n      wtRefl = true;\n    }\n  }\n  sh = 1.;\n  if (min (dstObj, dstGrnd) < dstFar) {\n    if (dstObj < dstGrnd) {\n      if (dstObjM < dstObjG) {\n        ro += dstObjM * rd;\n        vn = ObjNf (ro);\n        col4 = BoatCol ();\n     } else {\n        ro += dstObjG * rd;\n        idObj = idObjG;\n        vn = GObjNf (ro);\n        col4 = MillCol ();\n        if (idObj == 4) vn = VaryNf (64. * ro, vn, 0.3);\n      }\n    } else {\n      ro += dstGrnd * rd;\n      vn = GrndNf (ro);\n      gId = PixToHex (ro.xz / hgSize);\n      SetMilParms ();\n      col4 = vec4 (vec3 (0., 0.4, 0.) * (1. - 0.2 * Fbm2 (8. * ro.xz)), 0.05);\n      if (milSz > 0.) col4 *= 0.5 + 0.5 * smoothstep (0., 0.03,\n         milSz * length (ro.xz - HexToPix (gId * hgSize)) - 0.05);\n      sh = GObjSShadow (ro, normalize (vec3 (1., 5., 1.)));\n    }\n    if (col4.a >= 0.) {\n      col = col4.rgb * (0.2 + 0.2 * max (dot (normalize (vec3 (- sunDir.xz, 0.)).xzy, vn), 0.) +\n         0.8 * sh * max (dot (vn, sunDir), 0.)) +\n         col4.a * step (0.95, sh) * pow (max (dot (sunDir, reflect (rd, vn)), 0.), 32.);\n      col = mix (col, SkyCol (ro, rd), (wtRefl ? 0.2 + 0.8 * smoothstep (0.4, 0.6,\n         dstObj / dstFar) : smoothstep (0.8, 0.9, min (dstGrnd, dstObj) / dstFar)));\n    } else col = mix (col4.rgb, 0.5 * SkyCol (ro, reflect (rd, vn)), 0.8);\n  } else col = SkyCol (ro, rd);\n  col *= wtRefl ? 0.85 : 1.;\n  if (wkFac > 0.) col = mix (col, vec3 (0.8, 0.83, 0.8), wkFac * clamp (0.1 +\n     Fbm2 (16. * row.xz), 0., 1.));\n  col *= vec3 (1.05, 0.95, 0.95);\n  return clamp (col, 0., 1.);\n}\n\nvoid BoatPM (float t, out vec3 bPos, out mat3 bMat, out float btAng)\n{\n  vec3 v;\n  vec2 cs;\n  float bAz;\n  bPos = TrackPath (t);\n  bPos.y = 0.;\n  bMat[2] = vec3 (Rot2D (vec2 (1., 0.), 0.4 * (Fbm1 (0.2 * t) - 0.5)), 0.);\n  bMat[0] = normalize (vec3 (0., 0.1, 1.));\n  bMat[1] = cross (bMat[0], bMat[2]);\n  v = TrackVel (t);\n  bAz = atan (v.z, - v.x);\n  btAng = 0.5 * pi - bAz;\n  cs = sin (bAz + vec2 (0.5 * pi, 0.));\n  bMat *= mat3 (cs.x, 0., cs.y, 0., 1., 0., - cs.y, 0., cs.x);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, uvv, uvf, mMid, ut, mSize, msw;\n  float el, az, asp, winHt, zmFac, sr, spd;\n  int vuId, regId;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  winHt = 0.9;\n  uvf = vec2 (asp, winHt) - abs (uv);\n  mSize = (1./5.) * vec2 (asp, 1.) * winHt;\n  mMid = vec2 (asp, winHt - mSize.y) * vec2 (1. - mSize.y, -1.);\n  ut = abs (uv - mMid) - mSize;\n  regId = -1;\n  if (mPtr.z > 0.) {\n    regId = 0;\n    msw = 2. * mPtr.xy - mMid / vec2 (asp, 1.);\n    if (Maxv2 (abs (msw)) < mSize.y) {\n      regId = 1;\n      msw /= 2. * mSize.y;\n    }\n    if (regId == 0) msw = mPtr.xy;\n  }\n  vuId = 0;\n  if (Maxv2 (ut) < 0.) {\n    uv = (uv - mMid) / mSize.y;\n    vuId = 1;\n  }\n  if (regId > 0 && (vuId == 0 || vuId == regId)) vuId = regId - vuId;\n  tCur = mod (tCur, 2400.) + 30. * floor (dateCur.w / 7200.);\n  hgSize = 3.;\n  spd = 0.3;\n  ro = TrackPath (spd * tCur);\n  if (vuId == 0) {\n    ro.x += 0.1 * sin (0.05 * 2. * pi * tCur);\n    ro.y = 1. + 0.3 * Fbm1 (0.1 * tCur);\n    vd = TrackVel (spd * tCur);\n    el = -0.03 * pi;\n    az = atan (vd.x, vd.z);\n    if (mPtr.z > 0.) {   \n      el += 0.4 * pi * msw.y;\n      az += 2. * pi * msw.x;\n    }\n    el = clamp (el, -0.4 * pi, 0.4 * pi);\n    zmFac = 3.;\n  } else {\n    ro.y = 30.;\n    el = -0.3 * pi + 0.1 * pi * msw.y;\n    az = 0.2 * pi * msw.x;\n    zmFac = 5.;\n  }\n  for (int k = 0; k < N_BOAT; k ++) {\n    BoatPM (spd * tCur + ((vuId == 0) ? (((abs (az) > 0.5 * pi) ? -1. : 1.) *\n       (7. * float (k) + 5.)) : 7. * float (k) + 15.), boatPos[k], boatMat[k], boatAng[k]);\n    boatPos[k].y = -0.02 + 0.04 * Fbm1 (0.5 * tCur + float (k));\n  }\n  vuMat = StdVuMat (el, az);\n  dstFar = 120.;\n  sunDir = normalize (vec3 (1., 3., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  if (uvf.y > 0.) {\n    col = vec3 (0.);\n    sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n    for (float a = float (VAR_ZERO); a < naa; a ++) {\n      uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) *\n         pi)) / zmFac;\n      rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uvv.x / asp)) * asp, uvv.y, 1.));\n      col += (1. / naa) * ShowScene (ro, rd);\n    }\n    if (Maxv2 (ut) < 0. && Minv2 (abs (ut)) * canvas.y < 2. ||\n       Minv2 (uvf) * canvas.y < 2.) col = vec3 (0.6, 0.3, 0.2);\n  } else col = vec3 (0.85);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e;\n  e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}