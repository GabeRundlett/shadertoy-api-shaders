{
    "Shader": {
        "info": {
            "date": "1722294853",
            "description": "Setting up some raytracing, simple diffuse, metal and light materials (without structs or anything) and the frame averaging looks nice with the horizontal lines reminds me of painting with a brush texture.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "4f2yWh",
            "likes": 6,
            "name": "Paint brush raytracing",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 0,
            "username": "glaukp2",
            "viewed": 140
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n    fragColor = vec4(color, 1.0f);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "struct ray{\n    vec3 Q;\n    vec3 dir;\n};\n\nstruct interval{\n    float tmin;\n    float tmax;\n};\n\n// Hit-info struct and method----------------------------------------------\nstruct hit_info{\n    float t;\n    vec3 p;\n    vec3 normal;\n    bool front_face;\n};\n\nvoid setInfoFaceNormal(in vec3 N, in vec3 rayDir, inout hit_info info){\n    if (dot(N, rayDir) < 0.0f){\n        info.normal = N;\n        info.front_face = true;\n        return;\n    }\n    info.normal = N * -1.0f;\n    info.front_face = false;\n}\n\n\n// Random numbers----------------------------------------------------------\nfloat random(inout uint state){\n    state = state * 747796405U + 2891336453U;\n    uint result = ((state >> ((state >> 28U) + 4U)) ^ state) * 277803737U;\n    result = (result >> 22) ^ result;\n    return float(result) / 4294967295.0f;\n}\n\nfloat random(in float minValue, in float maxValue, inout uint rngState){\n    return random(rngState) * (maxValue - minValue) + minValue;\n}\n\nvec3 randomVec3(in float minValue, in float maxValue, inout uint rngState){\n    return vec3(\n        random(minValue, maxValue, rngState), \n        random(minValue, maxValue, rngState), \n        random(minValue, maxValue, rngState)\n    );\n}\n\nvec3 randomUnitSphere(inout uint rngState){\n    vec3 dir = randomVec3(-1.0f, 1.0f, rngState);\n    \n    while (dot(dir, dir) > 1.0f){\n        dir = randomVec3(-1.0f, 1.0f, rngState);\n    }\n    return dir;\n}\n\nvec3 randomHemisphere(in vec3 normal, inout uint rngState){\n    vec3 dir = randomUnitSphere(rngState);\n    if (dot(normal, dir) < 0.0f) return -dir;\n}\n\nvec3 randomUnitSquare(inout uint rngState){\n    return vec3(random(-1.0f, 1.0f, rngState), random(-1.0f, 1.0f, rngState), 0.0f);\n}\n\n// constants---------------------------------------------------------------\n\nconst float posInfinity = 1.175494351e+38;\nconst float negInfinity = 1.175494351e-38;\n\n\n// Ray Hit function--------------------------------------------------------\n\nbool hitSphere(in ray r, in vec4 sphere, in interval rayt, inout hit_info info){\n    vec3 co = sphere.xyz - r.Q;\n    float a = dot(r.dir, r.dir);\n    float c = dot(co, co) - sphere.w*sphere.w;\n    float h = dot(co, r.dir);\n    \n    float discriminant = h*h - a*c;\n    if (discriminant < 0.0f) return false;\n    \n    float sqd = sqrt(discriminant);\n    float t = (h - sqd) / a;\n    \n    if (t <= rayt.tmin || t >= rayt.tmax){\n        t = (h + sqd) / a;\n        if (t <= rayt.tmin || t >= rayt.tmax){\n            return false;\n        }\n    }\n    \n    info.t = t;\n    info.p = r.Q + r.dir * t;\n    vec3 normal = (info.p - sphere.xyz) / sphere.w;\n    setInfoFaceNormal(normal, r.dir, info);\n\n    return true;\n}\n\nvec3 rayColor(in ray r, inout uint rngState){\n    vec3 reflected_light = vec3(1.0f, 1.0f, 1.0f);\n    vec3 emitted_light   = vec3(0.0f, 0.0f, 0.0f);\n    hit_info info;\n    ray scattered;\n    int bounces = 0;\n    \n    while (bounces < 20){\n    \n        // Diffuse\n        if (hitSphere(r, vec4(0.0f, 0.0f, 1.5f, 0.5f), interval(0.001, posInfinity), info)){\n            reflected_light *= vec3(1.0f, 0.3f, 0.7f);\n            r.Q = info.p;\n            r.dir = info.normal + randomUnitSphere(rngState);\n            bounces++;\n            continue;\n        }\n\n        if (hitSphere(r, vec4(-1.2f, 0.0f, 1.3f, 0.5f), interval(0.001, posInfinity), info)){\n            reflected_light *= vec3(1.0f, 0.7f, 0.3f);\n            r.Q = info.p;\n            r.dir = info.normal + randomUnitSphere(rngState);\n            bounces++;\n            continue;\n        }\n\n        // Metal\n        if (hitSphere(r, vec4(1.2f, 0.0f, 1.3f, 0.5f), interval(0.001, posInfinity), info)){\n            reflected_light *= vec3(0.3f, 0.5f, 1.0f);\n            r.Q = info.p;\n            r.dir = r.dir - 2.0f * dot(info.normal, r.dir) * info.normal;\n            bounces++;\n            continue;\n        }\n\n        // Ground\n        if (hitSphere(r, vec4(0.0f, -100.5f, 1.5f, 100.0f), interval(0.001, posInfinity), info)){\n            reflected_light *= vec3(0.5f, 0.8f, 0.6f);\n            r.Q = info.p;\n            r.dir = info.normal + randomUnitSphere(rngState);\n            bounces++;\n            continue;\n        }\n        \n        // Light\n        if (hitSphere(r, vec4(0.0f, 2.0f, 0.5f, 0.5f), interval(0.001, posInfinity), info)){\n            emitted_light = vec3(3.0f, 3.0f, 3.0f);\n            reflected_light *= emitted_light;\n            break;\n        }\n        \n        // Ray misses picks up sky color\n        reflected_light *= vec3(0.15f, 0.1f, 0.2f);\n        break;\n    }\n    \n    if (bounces == 20) return vec3(0.0f, 0.0f, 0.0f);\n\n    return reflected_light + emitted_light;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 pixelCoord = vec3((fragCoord/iResolution.xy) * 2.0f - 1.0f, 1.0f);\n    \n    float aspectRatio = iResolution.x / iResolution.y;\n    pixelCoord.x *= aspectRatio;\n\n    // Random seed generation\n    uint pixelIndex = uint(fragCoord.y * iResolution.x + fragCoord.x);\n    uint rngState = pixelIndex;\n    rngState = rngState + uint(iFrame); // here lies the paintbrush effect\n    \n    ray r;\n    r.Q = vec3(0.0f, 0.0f, -1.0f);\n    r.dir = normalize(pixelCoord - r.Q);\n        \n    vec3 color = rayColor(r, rngState);\n    \n    // Average frames\n    vec3 lastFrameColor = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n    color = mix(lastFrameColor, color, 1.0f / float(iFrame + 1));\n    \n    fragColor = vec4(color, 1.0f);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}