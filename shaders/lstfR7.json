{
    "Shader": {
        "info": {
            "date": "1524574364",
            "description": "A volumetric raymarcher with a simple WorldPosition coordinate",
            "flags": 0,
            "hasliked": 0,
            "id": "lstfR7",
            "likes": 64,
            "name": "Volumetric pointlight",
            "published": 3,
            "tags": [
                "raymarch",
                "light",
                "volumetric",
                "checkerboard",
                "orange",
                "point",
                "robobo1221",
                "moody",
                "worldposition"
            ],
            "usePreview": 0,
            "username": "robobo1221",
            "viewed": 3262
        },
        "renderpass": [
            {
                "code": "//Sphere thingy with volumetrics by robobo1221\n\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n#define THICKNESS 1.0\n#define SELF_SHADOWING\n//#define CUSTOM_CAMERA_ANGLE\n\n//#define USE_NOISE_FOG //Makes fog more realistic with 3d noise. \n\t\t\t\t        //Really heavy on performance when SELF_SHADOWING is enabled\n\nconst vec3 scatterCoeff = vec3(0.3, 0.5, 1.0) * 0.5;\nconst int steps = 64;\n\nconst float farPlane = 10.0;\nconst float lightBrighness = 3.0;\nconst vec3 lightColor = vec3(1.0, 0.5, 0.15) * lightBrighness;\n\nconst float pi = acos(-1.0);\nconst float tau = pi * 2.0;\n\nfloat bayer2(vec2 a){\n    a = floor(a);\n    return fract( dot(a, vec2(.5, a.y * .75)) );\n}\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\n#define bayer4(a)   (bayer2( .5*(a))*.25+bayer2(a))\n#define bayer8(a)   (bayer4( .5*(a))*.25+bayer2(a))\n#define bayer16(a)  (bayer8( .5*(a))*.25+bayer2(a))\n#define bayer32(a)  (bayer16(.5*(a))*.25+bayer2(a))\n#define bayer64(a)  (bayer32(.5*(a))*.25+bayer2(a))\n#define bayer128(a) (bayer64(.5*(a))*.25+bayer2(a))\n\nmat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    float xx = axis.x * axis.x;\n    float yy = axis.y * axis.y;\n    float zz = axis.z * axis.z;\n    \n    float xy = axis.x * axis.y;\n    float xz = axis.x * axis.z;\n    float zy = axis.z * axis.y;\n    \n    return mat3(oc * xx + c, oc * xy - axis.z * s, oc * xz + axis.y * s,\n                oc * xy + axis.z * s, oc * yy + c, oc * zy - axis.x * s, \n                oc * xz - axis.y * s, oc * zy + axis.x * s, oc * zz + c);\n}\n\nvec3 generateWorldSpacePosition(vec2 p)\n{\n\t    vec3 position = vec3(1.0 - p.x, p.yx) * 2.0 - vec3(0.0, 1.0, 0.0);\n    \n    \tfloat depth = clamp(1.0 / max(1e-32,-position.y), 0.0, farPlane); //Fake depth\n    \n        position = position * depth;\n\t\n\treturn position;\n}\n\nvec3 generateWorldSpacePosition(vec2 p, mat3 rotateV, mat3 rotateH)\n{\n\tvec3 position = rotateH * (rotateV * (vec3(1.0 - p.x, p.yx) * 2.0 - vec3(0.0, 1.0, 0.0)));\n\t\n\tfloat depth = clamp(1.0 / max(1e-32,-position.y), 0.0, farPlane); //Fake depth\n\t\n\treturn position * depth;\n}\n\nfloat sphere(vec3 p, vec3 o)\n{\n\treturn 1.0 - distance(p, o);\n}\n\nvec3 getLight(vec3 p, vec3 lp)\n{\n\tfloat dist = distance(p, lp);\n\t      dist *= dist;\n\t\n\treturn (1.0 / dist) * lightColor;\t\n}\n\nfloat calculateOD(vec3 p)\n{\n    #ifndef USE_NOISE_FOG\n\treturn THICKNESS;\n    #endif\n    \n    float pattern = noise(p - time) * 0.5;\n          pattern += noise(p * 2.0 + iTime) * 0.25;\n          pattern += noise(p * 4.0 - iTime) * 0.125;\n    \n\treturn (pattern*pattern * 4.0 + 0.25) * THICKNESS;\n}\n\nvec3 selfShadow(vec3 p, vec3 o)\n{\n    #ifndef SELF_SHADOWING\n    \treturn vec3(1.0);\n    #endif\n    \n    const int steps = 8;\n    const float iSteps = 1.0 / float(steps);\n    \n    vec3 increment = o * iSteps;\n    vec3 position = p;\n    \n    vec3 transmittance = vec3(1.0);\n    \n    for (int i = 0; i < steps; i++)\n    {\n        float od = calculateOD(position);\n\t\tposition += increment;\n        \n        transmittance += od;\n    }\n    \n    return exp2(-transmittance * scatterCoeff * iSteps);\n}\n\n\nvec3 calculateVolumetricLight(vec3 p, vec3 o, vec3 od)\n{\n\t\n\tvec3 light = getLight(p, o) * selfShadow(p, o);\n\tvec3 sphere = smoothstep(0.8, 0.81, sphere(p, o)) * lightColor*10.0;\n\t\n\treturn (light * od + sphere);\n}\n\nvec3 getVolumetricRaymarcher(vec3 p, vec3 o, float dither, vec3 background)\n{\n\tconst float isteps = 1.0 / float(steps);\n\t\n\tvec3 increment = -p * isteps;\n\tvec3 marchedPosition = increment * dither + p;\n\t\n\tfloat stepLength = length(increment);\n\t\n\tvec3 scatter = vec3(0.0);\n\tvec3 transMittance = vec3(1.0);\n\tvec3 currentTransmittence = vec3(1.0);\n\t\n\tfor (int i = 0; i < steps; i++){\n\t\tvec3 od = calculateOD(marchedPosition) * scatterCoeff * stepLength;\n\t\t\n\t\tmarchedPosition += increment;\n\t\t\n\t\tscatter += calculateVolumetricLight(marchedPosition, o, od) * currentTransmittence;\n\t\t\n\t\tcurrentTransmittence *= exp2(od);\n\t\ttransMittance *= exp2(-od);\n\t}\n\t\n\treturn background * transMittance + scatter * transMittance;\n}\n\nvec3 robobo1221sTonemap(vec3 x){\n    return x / sqrt(x*x + 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 cameraDir = iMouse.xy / iResolution.xy;\n         cameraDir = cameraDir.x == 0.0 ? vec2(0.5, 0.25) : cameraDir;\n    \n    #ifdef CUSTOM_CAMERA_ANGLE\n        vec2 camRotDir = cameraDir;\n             camRotDir = radians((camRotDir * vec2(360.0, 180.0) - vec2(0.0, 90.0)));\n             camRotDir.y =- camRotDir.y;\n    \tvec3 originOffset = vec3(sin(iTime) + 1.0, 0.3, cos(iTime));\n             \n             cameraDir = vec2(0.0);\n    #else\n    \tvec2 camRotDir = vec2(0.0);\n        vec3 originOffset = vec3(0.0, 0.3, 0.0);\n    #endif\n    \n    mat3 rotateH = rotationMatrix(vec3(0.0, 1.0, 0.0), camRotDir.x);\n    mat3 rotateV = rotationMatrix(vec3(-1.0, 0.0, 1.0), camRotDir.y);\n\n\tvec3 position = generateWorldSpacePosition(uv, rotateV, rotateH);\n\tvec3 origin = generateWorldSpacePosition(cameraDir) + originOffset;\n\t\n\tvec3 worldVector = normalize(position);\n\tvec3 worldOriginVector = normalize(origin);\n\t\n\tvec3 color = vec3(floor(length(cos(position.xz * 10.0)))) * 0.9 + 0.1;\n\t     color *= getLight(position, origin) * selfShadow(position, origin);\n\t\n\t     color = getVolumetricRaymarcher(position, origin, bayer16(gl_FragCoord.xy), color);\n\n\tfragColor = vec4(robobo1221sTonemap(color), 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}