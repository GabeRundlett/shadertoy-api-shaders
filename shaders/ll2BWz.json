{
    "Shader": {
        "info": {
            "date": "1515448907",
            "description": "Example how to encode and display sprites on Shadertoy.\nEncoder is available on GitHub: https://github.com/knarkowicz/ShadertoySprite",
            "flags": 0,
            "hasliked": 0,
            "id": "ll2BWz",
            "likes": 35,
            "name": "Sprite Rendering",
            "published": 3,
            "tags": [
                "2d",
                "example",
                "tutorial",
                "sprite",
                "metal",
                "generator",
                "slug"
            ],
            "usePreview": 0,
            "username": "knarkowicz",
            "viewed": 2276
        },
        "renderpass": [
            {
                "code": "void Sprite(inout vec3 color, vec2 p)\n{\n    uint v = 0u;\n\tv = p.y == 37. ? (p.x < 8. ? 0u : (p.x < 16. ? 0u : (p.x < 24. ? 544u : 0u))) : v;\n\tv = p.y == 36. ? (p.x < 8. ? 0u : (p.x < 16. ? 572653568u : (p.x < 24. ? 11186u : 0u))) : v;\n\tv = p.y == 35. ? (p.x < 8. ? 0u : (p.x < 16. ? 3146260992u : (p.x < 24. ? 11147u : 0u))) : v;\n\tv = p.y == 34. ? (p.x < 8. ? 0u : (p.x < 16. ? 582715424u : (p.x < 24. ? 10274u : 0u))) : v;\n\tv = p.y == 33. ? (p.x < 8. ? 0u : (p.x < 16. ? 3710040096u : (p.x < 24. ? 164397u : 0u))) : v;\n\tv = p.y == 32. ? (p.x < 8. ? 0u : (p.x < 16. ? 3722061954u : (p.x < 24. ? 8925u : 0u))) : v;\n\tv = p.y == 31. ? (p.x < 8. ? 0u : (p.x < 16. ? 1655349890u : (p.x < 24. ? 609u : 0u))) : v;\n\tv = p.y == 30. ? (p.x < 8. ? 1118464u : (p.x < 16. ? 2569153058u : (p.x < 24. ? 11410u : 0u))) : v;\n\tv = p.y == 29. ? (p.x < 8. ? 289058064u : (p.x < 16. ? 3432157729u : (p.x < 24. ? 186777u : 0u))) : v;\n\tv = p.y == 28. ? (p.x < 8. ? 859273744u : (p.x < 16. ? 3382088257u : (p.x < 24. ? 8809u : 0u))) : v;\n\tv = p.y == 27. ? (p.x < 8. ? 322402832u : (p.x < 16. ? 2573341781u : (p.x < 24. ? 665u : 0u))) : v;\n\tv = p.y == 26. ? (p.x < 8. ? 1360212224u : (p.x < 16. ? 1767982421u : (p.x < 24. ? 730u : 0u))) : v;\n\tv = p.y == 25. ? (p.x < 8. ? 1427599616u : (p.x < 16. ? 2518766114u : (p.x < 24. ? 273u : 0u))) : v;\n\tv = p.y == 24. ? (p.x < 8. ? 609318672u : (p.x < 16. ? 1645553305u : (p.x < 24. ? 713u : 0u))) : v;\n\tv = p.y == 23. ? (p.x < 8. ? 2454813200u : (p.x < 16. ? 571747548u : (p.x < 24. ? 614u : 0u))) : v;\n\tv = p.y == 22. ? (p.x < 8. ? 2455050145u : (p.x < 16. ? 706833612u : (p.x < 24. ? 34u : 0u))) : v;\n\tv = p.y == 21. ? (p.x < 8. ? 1649743777u : (p.x < 16. ? 757230028u : (p.x < 24. ? 36u : 0u))) : v;\n\tv = p.y == 20. ? (p.x < 8. ? 1648694065u : (p.x < 16. ? 765617814u : (p.x < 24. ? 37u : 0u))) : v;\n\tv = p.y == 19. ? (p.x < 8. ? 1648710001u : (p.x < 16. ? 1117940121u : (p.x < 24. ? 66146u : 0u))) : v;\n\tv = p.y == 18. ? (p.x < 8. ? 608522609u : (p.x < 16. ? 572941974u : (p.x < 24. ? 1118870u : 0u))) : v;\n\tv = p.y == 17. ? (p.x < 8. ? 608506128u : (p.x < 16. ? 577358998u : (p.x < 24. ? 27734294u : 0u))) : v;\n\tv = p.y == 16. ? (p.x < 8. ? 1145114624u : (p.x < 16. ? 2006751682u : (p.x < 24. ? 439554338u : 0u))) : v;\n\tv = p.y == 15. ? (p.x < 8. ? 1091637248u : (p.x < 16. ? 926521636u : (p.x < 24. ? 1932602521u : 1u))) : v;\n\tv = p.y == 14. ? (p.x < 8. ? 329740544u : (p.x < 16. ? 2469618193u : (p.x < 24. ? 858859209u : 23u))) : v;\n\tv = p.y == 13. ? (p.x < 8. ? 2855760128u : (p.x < 16. ? 2570134394u : (p.x < 24. ? 857286297u : 371u))) : v;\n\tv = p.y == 12. ? (p.x < 8. ? 2812768512u : (p.x < 16. ? 2450987690u : (p.x < 24. ? 824337001u : 5939u))) : v;\n\tv = p.y == 11. ? (p.x < 8. ? 2004291584u : (p.x < 16. ? 657554090u : (p.x < 24. ? 268444194u : 107315u))) : v;\n\tv = p.y == 10. ? (p.x < 8. ? 2004029440u : (p.x < 16. ? 1932634794u : (p.x < 24. ? 14247u : 71473u))) : v;\n\tv = p.y == 9. ? (p.x < 8. ? 1932591104u : (p.x < 16. ? 856796583u : (p.x < 24. ? 15015u : 4368u))) : v;\n\tv = p.y == 8. ? (p.x < 8. ? 2809200640u : (p.x < 16. ? 1932634794u : (p.x < 24. ? 6823u : 0u))) : v;\n\tv = p.y == 7. ? (p.x < 8. ? 2054623232u : (p.x < 16. ? 1999731367u : (p.x < 24. ? 6058u : 0u))) : v;\n\tv = p.y == 6. ? (p.x < 8. ? 2003898368u : (p.x < 16. ? 1930498426u : (p.x < 24. ? 279u : 0u))) : v;\n\tv = p.y == 5. ? (p.x < 8. ? 286470400u : (p.x < 16. ? 286326801u : (p.x < 24. ? 1u : 0u))) : v;\n\tv = p.y == 4. ? (p.x < 8. ? 322122512u : (p.x < 16. ? 858849280u : (p.x < 24. ? 1u : 0u))) : v;\n\tv = p.y == 3. ? (p.x < 8. ? 24326416u : (p.x < 16. ? 856752128u : (p.x < 24. ? 23u : 0u))) : v;\n\tv = p.y == 2. ? (p.x < 8. ? 396849969u : (p.x < 16. ? 1932726272u : (p.x < 24. ? 423u : 0u))) : v;\n\tv = p.y == 1. ? (p.x < 8. ? 930296625u : (p.x < 16. ? 858984449u : (p.x < 24. ? 79735u : 0u))) : v;\n\tv = p.y == 0. ? (p.x < 8. ? 286331153u : (p.x < 16. ? 286330881u : (p.x < 24. ? 69905u : 0u))) : v;\n    v = p.x >= 0. && p.x < 29. ? v : 0u;\n\n    float i = float((v >> uint(4. * p.x)) & 15u);\n    color = i == 1. ? vec3(0.063, 0.063, 0.031) : color;\n    color = i == 2. ? vec3(0.26, 0.13, 0) : color;\n    color = i == 3. ? vec3(0.23, 0.19, 0.063) : color;\n    color = i == 4. ? vec3(0.48, 0, 0) : color;\n    color = i == 5. ? vec3(0.71, 0.26, 0) : color;\n    color = i == 6. ? vec3(0.55, 0.35, 0.13) : color;\n    color = i == 7. ? vec3(0.45, 0.42, 0.23) : color;\n    color = i == 8. ? vec3(0.9, 0.61, 0.16) : color;\n    color = i == 9. ? vec3(0.84, 0.65, 0.35) : color;\n    color = i == 10. ? vec3(0.74, 0.71, 0.45) : color;\n    color = i == 11. ? vec3(1, 0.9, 0.29) : color;\n    color = i == 12. ? vec3(1, 0.94, 0.58) : color;\n    color = i == 13. ? vec3(1, 1, 0.94) : color;\n}\n\nvec2 Rot( vec2 p, float a ) \n{\n\treturn cos(a) * p + sin(a) * vec2(p.y, -p.x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{    \n    vec2 resMult = floor(iResolution.xy / 64.);\n    float resRcp = 1. / max(min(resMult.x, resMult.y), 1.);\n    vec2 screenSize = floor(iResolution.xy * resRcp);\n    vec2 pixel      = floor(fragCoord.xy * resRcp - screenSize * .5);\n\n    // background\n    vec3 color = vec3( .27, .41, .48 );\n    vec2 t = Rot( pixel, -.5 );\n    color *= mod( t.x, 40.0 ) < 20.0 ? 1.1 : 1.0;\n    \n    Sprite(color, pixel + vec2(18,19));\n    \n\tfragColor = vec4(color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}