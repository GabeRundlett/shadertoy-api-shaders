{
    "Shader": {
        "info": {
            "date": "1603594563",
            "description": "algorithmic",
            "flags": 0,
            "hasliked": 0,
            "id": "WsycDy",
            "likes": 2,
            "name": "october v005",
            "published": 3,
            "tags": [
                "trippy"
            ],
            "usePreview": 0,
            "username": "darkczar",
            "viewed": 504
        },
        "renderpass": [
            {
                "code": "\n// based on...\n// https://www.shadertoy.com/view/lssfW2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p=(2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec2 curve_p = vec2(0,200);\n    float d = 10000.0 + 4200.*sin(iTime)+4200.*cos(iTime);\n    float di = 2.;// +3.2*sin(iTime * .1);\n    for(int i = 0;i<300;i++)\n    {\n        di = float(i)*.3;\n        curve_p.x = .5-.3*sin(.3*iTime)-.05*float(d)*cos(float(d)+.4*iTime); // +.01*float(di)*sin(4.0*di+.2*iTime) + .03*sin(iTime*.1)*float(di)*sin(7.0*di+.4*iTime);\n        curve_p.y = .5-.3*cos(.3*iTime)-.05*float(di)*sin(float(di)+.2*iTime); // +.01*float(di)*cos(4.0*di+.2*iTime) + .03*sin(iTime*.1)*float(di)*cos(7.0*di+.4*iTime);\n        d = sin(min(d*1.0, 1.*sin(length(p-curve_p))));\n        //d = length(p-curve_p)/(di+1.0);\n  \n    }\n    float r =.05*d + .05*(.05 - .015*pow(dot(sin(p*p + d*d), log(20.0+2.*curve_p -d)),2.0));\n    float g = .0008 + .005*cos(.001*d*d*d+3.1*length(p)); //+.03*dot(p,curve_p + .0005*vec2(iTime, iTime));\n    float b=2.5*abs(.5+.3*cos(iTime*.8 - 2.5*pow(d,2.0))); // +.01*(dot(p,curve_p - .005*vec2(iTime-200.05, iTime-200.05)+10.0));\n    if (d < 2.2)\n    {\n        b = .0 +.04*(.5+ .5*sin(iTime*.1 + 1.28*dot(p,curve_p)));\n    }\n    float checkers = mod(float(uv.x*uv.x +uv.y*uv.y)+r*r*1200.+b*20., .25);\n    float checkers_02 = mod(float( -.01*curve_p.x*curve_p.y)+g*g*1000.,.245);\n    if (checkers + checkers_02 > .25+.1*sin(iTime))\n    {\n        r = 0.06*r;\n        g = 1.2*g;\n        b = .06*b;\n    }\n    vec3 col = vec3(r, g, b);\n    float dn = col.x + col.y + col.z;\n    col /= dn;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}