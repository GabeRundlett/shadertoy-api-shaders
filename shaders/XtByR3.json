{
    "Shader": {
        "info": {
            "date": "1509409357",
            "description": "Random map with isolines. With added burn marks just to make it a little more interesting.",
            "flags": 32,
            "hasliked": 0,
            "id": "XtByR3",
            "likes": 18,
            "name": "Burnt map with isolines",
            "published": 3,
            "tags": [
                "2d",
                "isolines"
            ],
            "usePreview": 0,
            "username": "jmpep",
            "viewed": 847
        },
        "renderpass": [
            {
                "code": "#define MAX_VALUE       10.0\n#define MIN_VALUE       -6.5\n#define INTERVAL_COARSE  1.0\n#define INTERVAL_FINE    0.25\n\n#define CAM_SPEED_X     0.1\n#define CAM_SPEED_Y     0.2\n\n#define BURN_MARKS 1\n#define VIGNETTING 1\n\n\n#if BURN_MARKS\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\n\n// Noise from https://www.shadertoy.com/view/lsf3WH\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = step(a.yx,a.xy);    \n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n\t\n}\n#endif\n\nvec3 ramp(float h) \n{\n    if (h > 0.0) \n    {\n        return mix(vec3(0.941, 0.894, 0.615), vec3(0.662, 0.392, 0.239), h/MAX_VALUE );\n       \n    } else {\n    \treturn mix(vec3(0.250, 0.415, 0.611), vec3(0.082, 0.058, 0.360), h/MIN_VALUE );\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Automatic camera on/off toggle (suggested by FabriceNeyret2)\n    if (length(fragCoord.xy) < 10.0) {\n    \tfragColor.rgb = vec3(1.0, 0.0, 0.0);\n        return;\n    }\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 deltaUV = 1.0 / iResolution.xy;\n           \n    // compute isolines\n    float tc = texture(iChannel0, uv).r;\n    float tr = texture(iChannel0, uv + vec2(deltaUV.x, 0.0)).r;\n    float tu = texture(iChannel0, uv + vec2(0.0, deltaUV.y)).r;\n       \n    // compute isocontours\n    float fc    = abs(fract(tc / INTERVAL_COARSE + 0.5) - 0.5); // (technique inspired by https://www.shadertoy.com/view/ls23WR)\n    vec2  gradc = vec2(tr-tc, tu-tc) / INTERVAL_COARSE;\n    float ic    = 1.0 - clamp(abs(fc) / length(gradc), 0.0, 1.0);\n    \n    float fi    = abs(fract(tc / INTERVAL_FINE + 0.5) - 0.5);\n    vec2  gradi = vec2(tr-tc, tu-tc) / INTERVAL_FINE;\n    float ii    = 1.0 - clamp(abs(fi) / length(gradi), 0.0, 1.0);\n    \n    // compute colors\n\tfloat color_isolines  = 1.0 - (ic + 0.2*ii);   \n    vec3  color_magnitude = ramp(tc);\n\n    float burnt = 0.0;\n    \n    #if BURN_MARKS    \n        // burn marks\n        // (fBM from https://www.shadertoy.com/view/MdX3Rr)\n        vec2 p = fragCoord.xy / iResolution.xy;   \n    \n    \tvec2 camDisplacement = vec2(0.0, 0.0);   \n        if (length(iMouse.xy)>10.0) {   \n\t    \tcamDisplacement = -iMouse.xy * 0.01;        \t\n        } else {\n\t\t\tcamDisplacement = vec2(iTime * CAM_SPEED_X, iTime * CAM_SPEED_Y);        \n        }\n    \n        vec2 pc = p*vec2(iResolution.x/iResolution.y,1.0) + camDisplacement;\n        mat2 m = mat2(0.8,-0.6,0.6,0.8);\n        float o = 0.0;\n        o += 0.5000*noise( pc ); pc = m*pc*2.02; pc = m*pc*2.03;\n        o += 0.0625*noise( pc );\n    \n        burnt = clamp(0.1*pow(1.0 - o - 0.1, 10.0), 0.0, 1.0);\n    #endif\n    \n    // vignetting (similar to https://www.shadertoy.com/view/MdX3Rr)\n    float v = 1.0;\n    #if VIGNETTING\n\t\tv = pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.3 );\n    #endif\n\n    // composing\n    fragColor = v * vec4( color_magnitude * color_isolines - burnt, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Instructions\n// ------------\n// Click+Move the mouse anywhere to disable automatic camera movement and move manually\n// Click on the bottom-left corner to re-enable automatic camera movement\n\n#define MAX_VALUE       10.0\n#define MIN_VALUE      -6.5\n\n#define CAM_SPEED_X     0.1\n#define CAM_SPEED_Y     0.2\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\n// Noise from https://www.shadertoy.com/view/lsf3WH\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = step(a.yx,a.xy);    \n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec2 p = fragCoord.xy / iResolution.xy;\n\n    vec2 camDisplacement = vec2(0.0, 0.0);\n    if (length(iMouse.xy)>10.0) {   \n\t    camDisplacement = -iMouse.xy * 0.01;        \t\n    } else {\n\t\tcamDisplacement = vec2(iTime * CAM_SPEED_X, iTime * CAM_SPEED_Y);        \n    }\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0) + camDisplacement;\n\t\n\tfloat h = 0.0;\n\t\n\tuv *= 2.0;\n    \n    \n    // fBM from https://www.shadertoy.com/view/MdX3Rr\n    mat2 m = mat2(0.8,-0.6,0.6,0.8);\n    h += 0.5000*noise( uv ); uv = m*uv*2.02;\n    h += 0.2500*noise( uv ); uv = m*uv*2.03;\n    h += 0.1250*noise( uv ); uv = m*uv*2.01;\n    h += 0.0625*noise( uv );\n\n    h = h/0.9375;\n\th = 0.5 + 0.5*h;\n \n    h = MIN_VALUE + (MAX_VALUE - MIN_VALUE) * h;\n        \n    fragColor = vec4(h,0.0,0.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}