{
    "Shader": {
        "info": {
            "date": "1541688376",
            "description": "Messin around...forked some bits from here and there.. notably https://www.shadertoy.com/view/MdsXWM & https://www.shadertoy.com/view/XsjSzR",
            "flags": 96,
            "hasliked": 0,
            "id": "Mt3BW2",
            "likes": 35,
            "name": "Wavelengths",
            "published": 3,
            "tags": [
                "colors",
                "dither",
                "background",
                "vignette",
                "soothing",
                "trails"
            ],
            "usePreview": 0,
            "username": "granito",
            "viewed": 3118
        },
        "renderpass": [
            {
                "code": "lowp vec3 ACESFilm( vec3 x )\n{\n    x *= 0.01; \n    lowp float a = 2.51;\n    lowp float b = 0.03;\n    lowp float c = 2.43;\n    lowp float d = 0.59;\n    lowp float e = 0.14;\n    return clamp((x*(a*x+b))/(x*(c*x+d)+e), 0.0, 1.0);\n}\n\n//Forked Slightly modified -> https://www.shadertoy.com/view/XsjSzR\n\n\n// Emulated input resolution.\n\n// Fix resolution to set amount.\n#define res (vec2(180.0/1.0,120.0/1.0))\n\n// Hardness of scanline.\n//  -8.0 = soft\n// -16.0 = medium\nfloat hardScan=-10.0;\n\n// Hardness of pixels in scanline.\n// -2.0 = soft\n// -4.0 = hard\nfloat hardPix=-3.0;\n\n// Display warp.\n// 0.0 = none\n// 1.0/8.0 = extreme\nvec2 warp=vec2(-1.0/32.0,-1.0/24.0); \n\n// Amount of shadow mask.\nfloat maskDark=11.;\nfloat maskLight=11.;\n\n//------------------------------------------------------------------------\n\n// sRGB to Linear.\n// Assuing using sRGB typed textures this should not be needed.\nfloat ToLinear1(float c){return(c<=0.04045)?c/12.92:pow((c+0.055)/1.055,2.4);}\nvec3 ToLinear(vec3 c){return vec3(ToLinear1(c.r),ToLinear1(c.g),ToLinear1(c.b));}\n\n// Linear to sRGB.\n// Assuing using sRGB typed textures this should not be needed.\nfloat ToSrgb1(float c){return(c<0.0031308?c*12.92:1.055*pow(c,0.41666)-0.055);}\nvec3 ToSrgb(vec3 c){return vec3(ToSrgb1(c.r),ToSrgb1(c.g),ToSrgb1(c.b));}\n\n// Nearest emulated sample given floating point position and texel offset.\n// Also zero's off screen.\nvec3 Fetch(vec2 pos,vec2 off){\n  pos=floor(pos*res+off)/res;\n  if(max(abs(pos.x-0.5),abs(pos.y-0.5))>0.5)return vec3(0.0,0.0,0.0);\n  return ToLinear(texture(iChannel0,pos.xy,-16.0).rgb);}\n\n// Distance in emulated pixels to nearest texel.\nvec2 Dist(vec2 pos){pos=pos*res;return -((pos-floor(pos))-vec2(0.5));}\n    \n// 1D Gaussian.\nfloat Gaus(float pos,float scale){return exp2(scale*pos*pos);}\n\n// 3-tap Gaussian filter along horz line.\nvec3 Horz3(vec2 pos,float off){\n  vec3 b=Fetch(pos,vec2(-1.0,off));\n  vec3 c=Fetch(pos,vec2( 0.0,off));\n  vec3 d=Fetch(pos,vec2( 1.0,off));\n  float dst=Dist(pos).x;\n  // Convert distance to weight.\n  float scale=hardPix;\n  float wb=Gaus(dst-1.0,scale);\n  float wc=Gaus(dst+0.0,scale);\n  float wd=Gaus(dst+1.0,scale);\n  // Return filtered sample.\n  return (b*wb+c*wc+d*wd)/(wb+wc+wd);}\n\n// 5-tap Gaussian filter along horz line.\nvec3 Horz5(vec2 pos,float off){\n  vec3 a=Fetch(pos,vec2(-2.0,off));\n  vec3 b=Fetch(pos,vec2(-1.0,off));\n  vec3 c=Fetch(pos,vec2( 0.0,off));\n  vec3 d=Fetch(pos,vec2( 1.0,off));\n  vec3 e=Fetch(pos,vec2( 2.0,off));\n  float dst=Dist(pos).x;\n  // Convert distance to weight.\n  float scale=hardPix;\n  float wa=Gaus(dst-2.0,scale);\n  float wb=Gaus(dst-1.0,scale);\n  float wc=Gaus(dst+0.0,scale);\n  float wd=Gaus(dst+1.0,scale);\n  float we=Gaus(dst+2.0,scale);\n  // Return filtered sample.\n  return (a*wa+b*wb+c*wc+d*wd+e*we)/(wa+wb+wc+wd+we);}\n\n// Return scanline weight.\nfloat Scan(vec2 pos,float off){\n  float dst=Dist(pos).y;\n  return Gaus(dst+off,hardScan);}\n\n// Allow nearest three lines to effect pixel.\nvec3 Tri(vec2 pos){\n  vec3 a=Horz3(pos,-1.0);\n  vec3 b=Horz5(pos, 0.0);\n  vec3 c=Horz3(pos, 1.0);\n  float wa=Scan(pos,-1.0);\n  float wb=Scan(pos, 0.0);\n  float wc=Scan(pos, 1.0);\n  return a*wa+b*wb+c*wc;}\n\n// Distortion of scanlines, and end of screen alpha.\nvec2 Warp(vec2 pos){\n  pos=pos*2.0-1.0;    \n  pos*=vec2(1.0+(pos.y*pos.y)*warp.x,1.0+(pos.x*pos.x)*warp.y);\n  return pos*0.5+0.5;}\n\n// Shadow mask.\nvec3 Mask(vec2 pos){\n  pos.x+=pos.y*3.0;\n  vec3 mask=vec3(maskDark,maskDark,maskDark);\n  pos.x=fract(pos.x/6.0);\n  if(pos.x<0.333)mask.r=maskLight;\n  else if(pos.x<0.666)mask.g=maskLight;\n  else mask.b=maskLight;\n  return mask;}    \n\n// Draw dividing bars.\nfloat Bar(float pos,float bar){pos-=bar;return pos*pos<4.0?0.0:1.0;}\n\n// Entry.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  // Unmodified.\n\n  vec2 pos=Warp(fragCoord.xy/iResolution.xy);\n    \n  fragColor.rgb=Tri(pos)*Mask(fragCoord.xy);   \n  fragColor.a=1.0; \n  fragColor.rgb=ToSrgb(fragColor.rgb);\n\n\n    fragColor.rgb = ACESFilm( fragColor.rgb * 4.);\n    fragColor.rgb *= fragColor.rgb;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define HASHSCALE3 vec3(.10319, .10307, .09731)\nconst float dots = 44.;\nconst float radius = .275;\nconst float brightness = 0.1;\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 noisepattern(vec2 uv)\n{\n\treturn texture(iChannel1, uv,0.0).xyz;\n}\n\nvec2 rot(vec2 uv,float a){\n\treturn vec2(uv.x*cos(a)-uv.y*sin(a),uv.y*cos(a)+uv.x*sin(a));\n}\n\nvec4 audioeclipse(vec2 fragCoord, float fadein)\n{\n\tvec2 p=(fragCoord.xy-.5*iResolution.xy)/min(iResolution.x,iResolution.y);\n    vec3 c=vec3(0,0,0.1);\n    for(float i=0.;i<dots; i++){\n\t\tfloat vol =  texture(iChannel2, vec2(i/dots, 0.0)).x;\n\t\tfloat b = vol * brightness;\n        float x = radius*cos(iTime*3.14*float(i)/dots);\n        float y = radius*sin(iTime*3.14*float(i)/dots);\n        vec2 o = vec2(x,y);\n\t\tvec3 dotCol = hsv2rgb(vec3((i + iTime*10.)/dots,fadein,1.0));\n\t\tc += b/(length(p-o))*dotCol;\n    } \n\tfloat dist = distance(p , vec2(0));  \n    float shape = smoothstep(0.295, 0.3, dist);\n\treturn vec4(c,shape);\n}\n\nvec3 innercircle(vec2 fragCoord, float fadein)\n{\n    vec2 p=(fragCoord.xy-.5*iResolution.xy)/min(iResolution.x,iResolution.y);\n\tfloat dist = distance(p , vec2(0));  \n    float shading = pow( min(max(dist*2., 0.),1.) , (1.-texture(iChannel2 , vec2(0.5), 0.0).x)*10.);\n    vec2 U = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    float star = dot(U*2.-1.,vec2(sin(iTime),cos(iTime)));\n    return hsv2rgb(vec3(star*0.05+iTime*0.2, (1.-shading*20.)*fadein, 1.+sin(star+iTime*0.9))) * shading * 90. ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fadein = clamp(iTime * .5, 0., 1.);\n    float fadeinslower = clamp(iTime * .03, 0., 1.);    \n    float fadein2 = round(clamp(iTime * 0.0295, 0., 1.));\n    float soundin = clamp(texture(iChannel2 , vec2(.5), 0.0).x * 6. - 1., 0., 1.);\n    float lifetime = iTime*0.2;\n    float lifetimestep = ceil(lifetime);\n    vec3 stars = vec3(0.);\n    for (float i=0.; i<4.; i++) {  \n        float star = 0.;\n        vec2 random1 = hash21(i*333.33+lifetimestep) * 2. - 1.;\n        vec2 random2 = hash21(i*999.99+lifetimestep) * 2. - 1.;\n    \tvec2 U = ( fragCoord + (random2 * vec2(iResolution.xy * fract(lifetime+random1.x)) ) - iResolution.xy * vec2(0.5,0.5) ) / iResolution.y ;\n    \tU = rot(U, lifetime + sin(iTime) * 0.3 + cos(iTime*.3) * 0.2);\n        U = abs(U * mat2(1, 1, -1, 1)) * mat2(2, 0, 1, 1.7);\n        vec2 timerandom = pow(hash21(lifetimestep+i),vec2(2.));\n        star = (timerandom.x + 0.25) * 1. / max(U.x, U.y);\n        star *= 1. - abs(fract(lifetime+random1.x) * 2. - 1.);\n        vec3 color = hsv2rgb(vec3( random1.y*0.7+fract(lifetime), random1.x*0.25+0.75, 0.4 ));\n        stars += star * color * fadeinslower;\n    }\n    vec4 ae = audioeclipse(fragCoord,fadein2);\n    stars += ae.rgb;\n    stars = mix(innercircle(fragCoord, fadein2),stars,max(1.-fadein2,ae.a));\n    stars *= fadein;\n    stars += texture(iChannel0 , ((fragCoord - vec2(0.5)) * vec2(soundin*0.25+.5, -1.0) + vec2(0.5)) / iChannelResolution[0].xy, 0.0).xyz * 0.2 * soundin;\n    stars += texture(iChannel0 , ((fragCoord - vec2(0.5)) * vec2(-1.0, soundin*0.25+.5) + vec2(0.5)) / iChannelResolution[0].xy, 0.0).xyz * 0.1 * soundin;\n\tvec3 prevbuf = texture(iChannel0 , fragCoord / iChannelResolution[0].xy, 0.0).xyz;    \n    fragColor.xyz = mix(stars, prevbuf, 0.9);\n    fragColor.w = clamp(texture(iChannel2 , vec2(fragCoord.y / iChannelResolution[0].xy), 0.0).x, 0., 1.); \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 18349,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/djdomsta/dom-x-ray-prod-kevinthecreep"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\nvec3 ditherpattern(vec2 uv)\n{\n    vec3 d = texture(iChannel1, uv,0.0).xyz;\n    d.x = fract(iTime + d.x);\n    d.y = fract(iTime + d.y + .33);\n    d.z = fract(iTime + d.z + .66);\n\treturn d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv *=  1.0 - uv.yx;\n    float vig = uv.x*uv.y * 1.0;\n    vig = pow(vig, 0.15);\n    fragColor = texture( iChannel0 , fragCoord / iChannelResolution[0].xy , 0.0) * vec4(vec3(10.),1.);\n    fragColor.rgb *= vec3(vig);     \n\tfragColor.rgb *= sin(iTime*1.)*0.1 + 1.;    \n    fragColor.rgb = ceil(fragColor.rgb * vec3(2.) + ditherpattern(fragCoord/iChannelResolution[1].xy) * vec3(8.)) / vec3(10.);    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float warpA =  texture(iChannel0, vec2(uv.y)).w;\n    vec2 warpuv = (uv - 0.5) *  ( pow( warpA * vec2(-1.,-0.025),vec2(4.)) + vec2(1.,1.)) +0.5;\n    warpuv = mix(warpuv,uv, pow(2.*distance(0.5,uv.x),2.) );\n    fragColor = texture(iChannel0,warpuv);\n\tfragColor.rgb *= .9 + smoothstep(0.,1.,fragColor.w) * 0.2;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}