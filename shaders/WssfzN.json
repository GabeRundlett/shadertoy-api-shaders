{
    "Shader": {
        "info": {
            "date": "1587820458",
            "description": "This is just a sky rendering test. Sky code partially stolen from Clouds by iq: https://www.shadertoy.com/view/XslGRr",
            "flags": 0,
            "hasliked": 0,
            "id": "WssfzN",
            "likes": 1,
            "name": "Ciel et sol",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "42yeah",
            "viewed": 492
        },
        "renderpass": [
            {
                "code": "vec3 sunDir = normalize(vec3(-0.0, 0.2, -1.0));\n\nfloat sol(vec3 pos) {\n    return pos.y;\n}\n\nvec3 rand3d(vec3 i) {\n    return fract(sin(vec3(\n        dot(i, vec3(12.345, 67.890, 1.56)),\n        dot(i, vec3(512.21, 90.511, 80.42)),\n        dot(i, vec3(6.28, 30.19, 37.48))\n    )) * 421234.567) * 2.0 - 1.0;\n}\n\nvec3 solColor(vec3 pos) {\n    vec3 baseColor = vec3(2.0, 2.0, 2.2);\n    pos = pos * 5.0;\n    vec3 u = mod(floor(pos), 2.0) * 0.5;\n    vec3 f = fract(pos);\n    float m = 0.6 + clamp(abs(u.x - u.z), 0.0, 1.0) * 0.4;\n    return vec3(m) * baseColor;\n}\n\nvec2 map(vec3 pos) {\n    float closest = 1000.0;\n    float id = -1.0;\n    \n    float dist = sol(pos);\n    if (dist < closest) { closest = dist; id = 0.5; }\n    \n    return vec2(closest, id);\n}\n\nvec2 intersect(vec3 ro, vec3 rd) {\n    float depth = 0.0;\n    float id = -1.0;\n    for (int i = 0; i < 200; i++) {\n        vec2 info = map(ro + rd * depth);\n        if (info.x <= 0.001) {\n            id = info.y;\n            break;\n        }\n        depth += info.x;\n    }\n    return vec2(depth, id);\n}\n\nvec3 getSkyColor(vec3 p, vec3 rd) {\n    vec3 c = vec3(0.6, 0.8, 0.9);\n    c += rd.y * vec3(0.3, 0.3, 1.1);\n    float s = clamp(dot(rd, sunDir), 0.0, 1.0);\n    c += vec3(0.3, 0.3, 0.0) * pow(s, 32.0);\n    c += 0.1 * vec3(1.0, 0.4, 0.2) * pow(s, 8.0);\n    return c;\n}\n\nvec3 getColor(float id, vec3 p, vec3 rd) {\n    if (id < -0.5) { // ciel\n        return getSkyColor(p, rd);\n    }\n    if (id < 1.0) { return solColor(p); }\n    return vec3(1.0, 0.0, 0.0);\n}\n\nvec3 getNormal(vec3 pos) {\n    const float epsilon = 0.001;\n    return normalize(vec3(\n        map(pos).x - map(vec3(pos.x - epsilon, pos.yz)).x,\n        map(pos).x - map(vec3(pos.x, pos.y - epsilon, pos.z)).x,\n        map(pos).x - map(vec3(pos.x, pos.y, pos.z - epsilon)).x\n    ));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    \n    vec3 ro = vec3(iTime * 0.05, 0.4, iTime * 0.01);\n    \n    vec3 center = vec3(0.0, 0.5, -500.0);\n    vec3 front = normalize(center - ro);\n    vec3 right = normalize(cross(front, vec3(0.0, 1.0, 0.0)));\n    vec3 up = normalize(cross(right, front));\n    \n    mat4 lookAt = mat4(\n        vec4(right, 0.0),\n        vec4(up, 0.0),\n        vec4(front, 0.0),\n        vec4(0.0, 0.0, 0.0, 1.0)\n    );\n    vec3 rd = normalize(vec3(lookAt * vec4(uv, 2.0, 1.0)));\n    \n    vec2 info = intersect(ro, rd);\n    vec3 pos = ro + rd * info.x;\n    vec3 n = getNormal(pos);\n    \n    float ambient = 1.0;\n    float diffuse = max(dot(n, sunDir), 0.0);\n    float back = max(dot(n, vec3(-sunDir.x, 0.0, -sunDir.z)), 0.0);\n    float dome = 0.2 + 0.8 * clamp(rd.y, 0.0, 1.0);\n    float sol = 0.2 + 0.8 * clamp(-rd.y, 0.0, 1.0);\n    \n    vec3 light = vec3(0.0);\n    light += ambient * vec3(0.0304, 0.03, 0.02);\n    light += diffuse * vec3(0.30, 0.30, 0.3);\n    light += back * vec3(0.3, 0.37, 0.3);\n    light += dome * vec3(0.515, 0.51, 0.51);\n    light += sol * vec3(0.21, 0.2, 0.2);\n    \n    if (info.y < -0.5) {\n        light = vec3(1.0);\n    }\n    vec3 color = getColor(info.y, pos, rd) * light;\n    color = mix(color, getSkyColor(pos, rd), clamp(pow(info.x / 20.0, 2.0), 0.0, 1.0));\n    color = pow(color, vec3(0.4545));\n\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}