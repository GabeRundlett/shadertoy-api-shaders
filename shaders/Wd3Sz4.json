{
    "Shader": {
        "info": {
            "date": "1571526134",
            "description": "Raymarched tetrahedrons. Messing around with march step count AO and glow.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd3Sz4",
            "likes": 7,
            "name": "Shadertober 19 Bronze -jaburns",
            "published": 3,
            "tags": [
                "raymarch",
                "ao",
                "practice"
            ],
            "usePreview": 0,
            "username": "jaburns",
            "viewed": 448
        },
        "renderpass": [
            {
                "code": "//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n\n// =======================================================================================\n\n\n#define PI           3.14159265358979\n#define EPSILON      0.001\n#define MAX_DIST    30.0\n#define ITERATIONS  50.\n\n#define tt          (iTime * .2)\n\n#define POINTS_MATERIAL 1\n#define GEM_MATERIAL    2\n\nmat2 rot(float t)\n{\n    float c = cos(t);\n    float s = sin(t);\n    return mat2(c, s, -s, c);\n}\n\n\nstruct DistMat\n{\n    float dist;\n    int mat;\n};\n\nfloat sdOctahedron( in vec3 p, in float s)\n{\n    p = abs(p);\n    return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat floatyPoints(vec3 p)\n{\n    float pointsT = tt * 10.;\n    float pointsR = .5 + .5*sin(pointsT);\n    \n    float octo = sdOctahedron(p, 2. + pointsR);\n    float sphere = length(p) - 1.6 - pointsR;\n    \n    return max(-sphere, octo);\n}\n\nfloat middleGem(vec3 p)\n{\n    p.yz *= rot(tt *7.);\n    p.xz *= rot(tt *5.);\n    p.xy *= rot(tt *3.);\n    \n    vec3 q = p;\n    q.xz *= rot(PI / 4.);\n    q.xy *= rot(PI / 4.);\n    \n    return min(\n        sdOctahedron(p, 1.3),\n        sdOctahedron(q, 1.3)\n    );\n}\n\nDistMat dmMin(DistMat a, DistMat b)\n{\n    if (a.dist < b.dist) {\n\t\treturn a;\n    }\n    return b;\n}\n\nDistMat DE(vec3 p)\n{   \n    p.xz *= rot(3.*tt);\n    p.yz *= rot(.5*tt);\n    \n    float a = floatyPoints(p);\n    float b = middleGem(p);\n    \n    return dmMin(\n        DistMat(a, POINTS_MATERIAL),\n        DistMat(b, GEM_MATERIAL)\n    );\n}\n\n\n\nvec3 getNormal(vec3 p)\n{\n    vec2 e = vec2(EPSILON, 0);\n    return normalize(vec3(\n        DE(p + e.xyy).dist - DE(p - e.xyy).dist,\n        DE(p + e.yxy).dist - DE(p - e.yxy).dist,\n        DE(p + e.yyx).dist - DE(p - e.yyx).dist));\n}\n\nstruct MarchResult\n{\n    vec3 pos;\n    float totalDist;\n    float ao;\n    int material;\n};\n    \nMarchResult march(vec3 ro, vec3 rd)\n{\n    DistMat dist;\n    float totalDist = 0.;\n    \n    ro += rd*.01;\n    \n    float i = 0.;\n    for (; i < ITERATIONS; ++i) {\n        dist = DE(ro);\n        totalDist += dist.dist;\n        if (dist.dist < EPSILON || totalDist > MAX_DIST) break;\n        ro += rd * dist.dist;\n    } \n    \n    return MarchResult(\n        ro,\n        dist.dist < EPSILON ? totalDist : -1.0,\n        (.8+0.2*snoise(300.*ro)) * i / 100.,\n        dist.mat\n    );\n}\n\nfloat traceLight(vec3 ro, vec3 rd)\n{\n    return 0.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.yy - vec2(.5*iResolution.x/iResolution.y,.5);\n    \n    vec3 ro = vec3(0,0,7);\n    vec3 rd = normalize(vec3(uv, -1));\n    \n    MarchResult m = march(ro, rd);\n    \n    if (m.totalDist > 0.0) {\n        vec3 norm = getNormal(m.pos);\n        \n        float la = .1+.4*clamp(dot(norm,normalize(vec3(1,1,1))),0.,1.);\n        float lb = .1+.4*clamp(dot(norm,normalize(vec3(-1,1,1))),0.,1.);\n        \n    \tfragColor = la*vec4(1,.9,.8,0);\n        fragColor += lb*vec4(1,.8,.9,0);\n        fragColor -= vec4(3.*m.ao);\n    }\n    else {\n        float r = 1./length(uv);\n        float t = atan(uv.y, uv.x);\n        float n = sin(r + 10.*tt + 3.) + sin(3.*t);\n        \n        fragColor = .3*n*vec4(.1);\n    }\n    \n    fragColor += .8*m.ao*vec4(1,.9,.8,0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}