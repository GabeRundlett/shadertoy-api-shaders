{
    "Shader": {
        "info": {
            "date": "1484249062",
            "description": "Just toying around.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "MtVXD1",
            "likes": 3,
            "name": "Foggy Lasball",
            "published": 3,
            "tags": [
                "raymarching",
                "refraction",
                "demoscene",
                "relaxation",
                "inside"
            ],
            "usePreview": 0,
            "username": "Virgill",
            "viewed": 955
        },
        "renderpass": [
            {
                "code": "// ***********************************************************\n// Just testing a foggy Lasball\n// by Jochen \"Virgill\" Feldk√∂tter\n//\n// ***********************************************************\n\n#define PI 3.14159265\n#define PHI 1.618033988749\n\n\n\n// Lasball by Mercury\nfloat fBlob(vec3 p) {\n\tp = abs(p);\n\tif (p.x < max(p.y, p.z)) p = p.yzx;\n\tif (p.x < max(p.y, p.z)) p = p.yzx;\n\tfloat b = max(max(max(\n\t\tdot(p, normalize(vec3(1, 1, 1))),\n\t\tdot(p.xz, normalize(vec2(PHI+1., 1)))),\n\t\tdot(p.yx, normalize(vec2(1, PHI)))),\n\t\tdot(p.xz, normalize(vec2(1, PHI))));\n\tfloat l = length(p);\n\treturn l - 1.5 - .5 *sin(0.33*iTime)* (1.5 / 2.)* cos(min(sqrt(1.01 - b / l)*(PI / 0.25), PI));\n}\n\n\nmat3 m = mat3( 0.00,  0.80,  0.60, -0.80,  0.36, -0.48, -0.60, -0.48,  0.64 );\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),mix(mix( hash(n+113.0), hash(n+114.0),f.x),mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat fbm( vec3 p )\n{\n    float f;\n    f  = 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p );\n    return f;\n}\n\nfloat map(vec3 p)\n{\t\nreturn fBlob(p*0.3+1.8*sin(iTime));//-0.001*fbm(13.6*p);\n}\n\nvec3 calcNormal(vec3 pos)\n{\n    float eps=0.001;\n\tfloat d=map(pos);\n\treturn normalize(vec3(map(pos+vec3(eps,0,0))-d,map(pos+vec3(0,eps,0))-d,map(pos+vec3(0,0,eps))-d));\n}\n    float iter = 0.;\n\tfloat castRay(in vec3 ray_origin, in vec3 ray_direction) {\n    float relaxation = 1.6;\n    float distance_min =  0.01;\n    float distance_max = 20.0;\n    float precis   = 0.001;\n    float distance = distance_min;\n    float previous_radius = 0.0;\n    float stepLength = 0.0;\n    float function_sign = 1.0;\n    if(map(ray_origin) < 0.) function_sign = -1.;\n    \n\tfor(int i = 0; i < 80; i++ ) {\n        iter = float(i);\n        float result= map(ray_origin + ray_direction * distance);\n       \n        float signed_radius = function_sign * result;\n        float radius = abs(signed_radius);\n        \n        bool sorFail = relaxation > 1.0 && (radius + previous_radius) < stepLength;\n        if(sorFail) {\n        \tstepLength -= relaxation * stepLength; \n            relaxation = 1.0;\n        } else {\n        \tstepLength = signed_radius * relaxation;   \n        }\n        previous_radius = radius;\n        if(!sorFail && radius < precis || distance > distance_max ) break;\n        distance += stepLength;\n    }\n    return  distance;\n}\n\n\nfloat castRay2(vec3 ro,vec3 rd) \n{\n    float precis = 3.;\n    float h = 0.;\n    float t = 2.;\n\n    for(int i = 0; i < 90; i++) \n\t{\n\t\tif(abs(h) > precis ) break;\n\t\th = map(ro + rd * t);\n\t\tt-=h;\n\t}\n\treturn t;\n}\n\n// softshadow by IQ\nfloat softshadow(vec3 ro,vec3 rd) \n{\n    float sh = 1.0;\n    float t = 0.02;\n    float h = 0.0;\n    for(int i = 0; i < 22; i++)  \n\t{\n        if(t > 20.) continue;\n        h = map(ro + rd * t);\n        sh = min(sh, 4.0 * h / t);\n        t += h;\n    }\n    return sh;\n}\n\n\n//***************************************************************************************************\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 v = -1.0 + 2.0*q;\n    v.x *= iResolution.x/ iResolution.y;\n\tvec2 mo = vec2(iTime*.3,cos(iTime*.45)*3.);\n    vec3 org = 6.0*normalize(vec3(cos(2.75-3.0*mo.x), 0.7-1.0*(mo.y-1.0), sin(2.75-3.0*mo.x)));\n\tvec3 ta = vec3(0.0, 1.0, 0.0);\n    vec3 ww = normalize( ta - org);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 dir = normalize( v.x*uu + v.y*vv + 1.5*ww );\n\tvec4 color=vec4(.0);\n\tfloat count        = 10./128.;\n    float T            = 1.;\n    float absorption   = 100.;\n\tvec3 lig = normalize( vec3(-0.5, 0.2, 0.5) );\n \n    \n    vec4 color2= vec4(0.0);\n    float t = castRay(org,dir);\n\tvec3 pos = org + dir *t;\n\tvec3 nor = calcNormal(pos);\n\n// \tlighting:\n    float dif = clamp(dot(lig, nor), 0.0, 1.0);\n\tfloat spec = pow(clamp(dot(reflect(dir, nor), lig), 0.0, 1.0), 16.0);\n    vec3 pos2 =  vec3(0.);\n    vec3 nor2 = vec3(0.);\n    vec3 p = org;\n    //\tscene depth    \n    float depth=clamp((1.-0.09*t),0.,1.);\n    if(t<12.0)\n    {\n        color2 = vec4(.7*dif+1.5*spec)*(1.-(0.1*t));\n        //  refraction\n\t\tvec3 dir2 = refract(dir,nor,0.8);  \n    \tfloat t2 = castRay2(pos,dir2);\n\t\tpos2 = pos + dir2* t2;\n    \tnor2 = calcNormal(pos2);\n\t\tfloat dif2 = clamp(dot(-lig, nor2), 0.0, 1.0);\n   \t\tcolor2 += (1.0-t*0.15)*dif2;\n        color2-=clamp(0.1*(t2-t),0.,1.);\n    }      \n   \n\tfloat tmp =0.;\n    float intensity = 0.1*sin(0.5*iTime)+0.08;\n\tfor(int i=0; i<128; i++)\n\t{\n\t\tfloat density = intensity-map(p+.15*nor2)*1.*fbm(.6*p+iTime);\n\t\tif(density>0.)\n\t\t{\n\t\t\ttmp = density / (128.*0.9);\n            T *= 1. -tmp * absorption;\n\t\t\tif( T <= 0.0) break;\n\t\t}\n\t\tp += dir*count;\n\t}    \n   color = vec4(1./12., 1./32., 1./4., 1)* exp(4.*(0.5-T) - 0.8);\n   fragColor = vec4(vec3(color+.6*color2),1.);\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}