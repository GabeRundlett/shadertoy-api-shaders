{
    "Shader": {
        "info": {
            "date": "1635536106",
            "description": "[Mouse enabled]",
            "flags": 32,
            "hasliked": 0,
            "id": "ssGXD3",
            "likes": 15,
            "name": "Tesla's Raymarcher [Refraction]",
            "published": 3,
            "tags": [
                "2d",
                "visual"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 331
        },
        "renderpass": [
            {
                "code": "/*\nThis is really just a raymarching refraction demo\nbut I wanted to stretch the concept a bit so I added\n\nThe circles from: https://www.shadertoy.com/view/wtSSRG\nThe lighting from: https://www.shadertoy.com/view/sdySWG\n\n*/\n\n#define pi acos(-1.)\n#define eps 1./iResolution.y\n#define FAR 10.\n#define circlePos vec2(cos(iTime)*0.6,-0.5)\n#define squarePos vec2(.9,sin(iTime)*0.4)\n#define S(d) 1.-smoothstep(-eps,+eps, abs(d)-0.01)\n#define thinS(d) 1.-smoothstep(-eps,+eps, abs(d)-0.005)\n#define MAX_LOOP 30.\n#define purp vec3(159,174,216)/255.\n#define blu vec3(160,132,179)/255.\n#define pink vec3(0.9,0.6,0.6)\n\n#define gold vec3(215., 154., 15.)/255.\n\nmat2 rot(float a){\n    float c = cos(a), s = sin(a); return mat2(c,-s,s,c);}\n    \nfloat circle(vec2 p, float r, float sf)\n{    \n    return 1.0-smoothstep(r-eps*sf, r+eps*sf, length(p));\n}\n\n//for gold rim texture\nfloat SIN(vec2 p, float r)\n{\n    float c = length(p);\n    return abs(sin(c*150./r))*(1.0-smoothstep(r-eps, r+eps,c));\n}\n\nvec3 drawFancyCircle(vec3 col, \n                     vec2 uv,\n                     float i,\n                     vec2 screen,\n                     vec2 light, \n                     vec2 pos, \n                     float r){\n                \n    float scale = 1./r;\n    vec3 tx1 = vec3(texture(iChannel1, \n    (uv-pos)/r/2.)).rgb+0.;\n    \n    //super hacky texture call to lighting that allows\n    //me to shift the texture by the circle\n    //position, scale it by the texture radius,\n    //adjust aspect ratio, and ajust the center again\n    vec3 tx0 = vec3(texture(iChannel0, \n    ((uv-pos)*scale*rot(iTime+i*8.))*vec2(iResolution.y/iResolution.x,1.)+0.5\n    )).rgb;\n    \n    vec2 lightDir = normalize(light - max(pos,eps));\n    //shadow circle\n    col = mix(col, vec3(0.0), circle(uv-pos-lightDir*0.1*r,r,20.));\n    //rim lighting circle\n    col = mix(col, tx1+dot(uv-pos,-lightDir), circle(uv-pos, r,5.));\n    //gold outer circle\n    col = mix(col, tx1, circle(uv-pos, r*0.97, 1.));\n    //sin gradient on outer circle\n    col-=SIN(uv-pos,r)/4.;\n    //black inner circle\n    col = mix(col, vec3(0.1), circle(uv-pos, r*0.78, 5.));\n    //grey center circle\n    col = mix(col, tx0+0.2*(0.5+0.5*cos(vec3(1.,2.,4.).xyx*4. + i*80.)), circle(uv-pos,r*0.75, 1.)); \n    return col;\n}\n\nfloat drawPoint(vec2 uv, vec2 p, float r){\n     return 1.-smoothstep(r-eps, r+eps, length(uv - p));\n}\n\nfloat distLine(vec2 p, vec2 A, vec2 B){\n  vec2 AB = B-A;\n  float t =  clamp(dot(AB,p-A)/dot(AB,AB),0.,1.);\n  vec2 P3 = A + (B-A)*t;\n  return length(P3-p);\n}\n\nfloat drawLine(vec2 uv, vec2 A, vec2 B, float r){\n    return smoothstep(r+eps, r-eps, distLine(uv,A,B));\n}\n\nfloat map(vec2 p){\n    float c = length(p - circlePos)-0.3;\n    vec2 sp = abs(p-squarePos);\n    float s = max(sp.x,sp.y)-0.2;\n    return min(s,c);\n}\n\nvec2 normal(vec2 p){\n\n    vec2 e = vec2(eps,0.);\n    \n    return normalize(vec2(\n           map(p-e) - map(p+e),\n           map(p-e.yx) - map(p+e.yx) \n           ));\n           \n           \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(1.);\n    vec2 screen = fragCoord.xy/iResolution.xy;\n    vec2 ro = vec2(-0.8,0.);\n    vec2 rd = normalize(vec2(1.,-.2));\n    float a = iTime/3.;\n    //rd *= rot(a);\n    \n    if(iMouse.z > 0.5) \n        rd = normalize((iMouse.xy*2.-iResolution.xy)/iResolution.y - ro);\n    \n   // col = mix(col, vec3(0.8,0.,0.3),drawPoint(uv,ro,0.02));\n      \n    //raymarcher\n    float t = 0., d; vec2 last, next; //last and next pos for drawing lines\n    next = ro + rd*t;\n    float mapDistances = map(uv);\n    float gradient = mapDistances;\n    \n    col = vec3(0.9, 0.9, 0.8);\n    float tx2 = vec3(texture(iChannel2, uv)).x+0.3;\n    col-=tx2/9.;  \n    float tx3 = abs(sin(abs(gradient)*100.))/5.;\n    //based on iq's coloring style\n    //col = sign(gradient)*purp;\n    col = mix(col, vec3(1.)-tx3, clamp(1.-sign(gradient),0.,1.));\n\t//col *= clamp(pow(gradient,0.6),0.,1.);\n\t//col += cos(130.0*gradient)/0.01;\n    //draw the map objects as smooth outlines\n    col = mix(col, vec3(.0), S(mapDistances));                     \n    col = mix(col, vec3(0.8,0.,0.3),drawPoint(uv,ro,0.02));\n    vec3 lineColorSum = vec3(0.0);\n\n    vec2 pos = ro;\n    float ior = 1./1.45;\n    float side = 1.;\n    //basic ray marcher                   \n    for(float i = 0.; i < MAX_LOOP; i ++){\n        \n        d = map(next);\n        if(t > FAR) break;\n        //t += d*0.75; \n        last = next;\n        //next = ro + rd*t;\n        next += rd*(d*0.75);\n        //draw line from last to next\n        col = mix(col, vec3(0.,0.7,0.99), drawLine(uv,last,next,0.01));\n        //draw point at next\n        col = mix(col, vec3(0.,0.7,0.99)*0.5,drawPoint(uv,next,0.02));\n        //draw circle based on d, distance to hit the map\n        //col = mix(col, 0.5+0.5*cos(vec3(1.,2.,4.).xyx + i*80.)/(1.+i/5.), S(length(uv - last)-abs(d))+0.01);\n        \n        col = drawFancyCircle(col, uv, i, screen, ro, last, min(abs(d),1.) );\n        \n        //check for hit and reflect\n        \n        if(abs(d) < 0.001){\n        \n            //col = mix(col, vec3(0.9,0.0,0.), drawPoint(uv,vec2(-1.5,i/MAX_LOOP-0.1),0.02));\n            vec2 n = normal(next);\n           // col = mix(col, vec3(0.,0.7,0.), drawLine(uv,next,next+n*.3,0.01));\n            vec2 altRd = rd;\n            rd = refract(rd, n, ior);\n            next += n*0.01*side;\n            \n            //This line here is what took all the time.\n            //Setting side to -1., telling myself I'd change it back\n            //to 1, and then believing I had, but I hadn't...I hadn't..I HADN'T!! ROOAR!!\n           \n            col = mix(col, vec3(1.,0.,0.), drawPoint(uv,next,0.02));\n            side *= -1.;\n            ior = 1./ior;\n            \n        }\n        \n    }\n    \n    // Output to screen\n    \n    col = pow(col, vec3(0.7));\n    //vignette\n    uv = fragCoord/iResolution.xy;\n    uv *=  1.0 - uv.yx;\n    float vig = uv.x*uv.y * 15.0; // multiply with sth for intensity\n    \n    vig = pow(vig, 0.25); \n    \n    fragColor = vec4(col*vig,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define boltNum 8.\n\nfloat hash(float x){\n    return fract(sin(x*12.)*42119.);\n}\n\nfloat noise(float x){\n    float a = hash(floor(x));\n    float b = hash(floor(x) + 1.);\n    float f = fract(x);\n  \n    return mix(a,b,f);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 col = vec3(61,59,77)/325.;//mix(vec3(0.3,0.4,0.2),vec3(0.4,0.,0.9),(1.-length(uv))/1.);\n    //col = mix(col,vec3(1.),(1.-length(uv))/9.);\n    col += vec3(2.-length(uv)-0.6)/9.;\n    float t = iTime/1.+5.;\n    float bend,y,f;\n    for(float i = 0.; i < boltNum; i++){\n        \n        //line \n        //y = 0.;\n        \n        //bend line in middle every second\n        bend = fract(t*(1.+(boltNum-i)/4.)+i/7.+i/8.)*0.13-0.13/2.;\n        bend *= 1.5;\n        y = bend*2. + (1.-uv.x*uv.x)*bend;\n        \n        //add sinewave\n        float randomOff = hash(floor(t*3. + i));\n        y += sin(uv.x*1.6+t*(3.) + randomOff*3.5 + i*80.)/3.;\n        \n        randomOff = hash(floor(t*2.));\n        y += noise(uv.x*6.+t*1. + randomOff*(10.5+i*8.))/5.;\n        //(fract(iTime*2.+uv.x*2.)/5.); \n        \n        //bring everything to 0 at edges\n        y = mix(y, .0, abs(uv.x/2.)/1.2);\n        //draw\n        float f = pow(1.0-smoothstep(0.02,0.5,pow(abs(y-uv.y), 0.5)),4.+i*1.9);\n        //1.0-smoothstep(0.0,0.02,pow(abs(y-uv.y)/fwidth(y-uv.y)/(25.-i*2.),2.));\n        col = mix(col, vec3(1.), f);\n    }\n\n    // Output to screen\n    //vignette\n    uv = fragCoord/iResolution.xy;\n    uv *=  1.0 - uv.yx;\n    float vig = uv.x*uv.y * 15.0; // multiply with sth for intensity\n    \n    vig = pow(vig, 0.25); \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}