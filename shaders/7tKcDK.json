{
    "Shader": {
        "info": {
            "date": "1686806054",
            "description": "Stereo.",
            "flags": 8,
            "hasliked": 0,
            "id": "7tKcDK",
            "likes": 10,
            "name": "Sound Experiment #8",
            "published": 3,
            "tags": [
                "sound",
                "experiment"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 265
        },
        "renderpass": [
            {
                "code": "// Modified version of font loader from https://www.shadertoy.com/view/ltcXzs\nvoid drawChar(inout vec3 color, in vec3 charColor, in vec2 uv, in vec2 pos, in vec2 size, in int char) {\n    uv = (uv - pos) / size + 0.5;\n    vec2 charUv = uv / 16.0;\n    vec2 dfdx = dFdx(charUv);\n    vec2 dfdy = dFdy(charUv);\n    if (all(lessThan(abs(uv - 0.5), vec2(0.5)))) {\n        float val = textureGrad(iChannel0, charUv + fract(vec2(char, 15 - char / 16) / 16.0), dfdx, dfdy).r;\n        color = mix(color, charColor, val);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Default shader\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0.0, 2.0, 4.0));\n    fragColor = vec4(color, 1.0);\n\n    // Correct aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n\n    // \"Sound In\" notification\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.3, 0.3), vec2(0.1), 83); // S\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.4, 0.3), vec2(0.1), 79); // O\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.5, 0.3), vec2(0.1), 85); // U\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.6, 0.3), vec2(0.1), 78); // N\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.7, 0.3), vec2(0.1), 68); // D\n\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.9, 0.3), vec2(0.1), 73); // I\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(1.0, 0.3), vec2(0.1), 78); // N\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TAU 6.2831853072\n\nfloat midi(in float note) {\n    return 440.0 * exp2((note - 69.0) / 12.0);\n}\n\n// https://www.shadertoy.com/view/4djSRW\nfloat Hash11(in float p) {\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat sine(in float t) {\n    return sin(TAU * fract(t));\n}\n\nfloat triangle(in float t) {\n    return abs(mod(4.0 * t - 1.0, 4.0) - 2.0) - 1.0;\n}\n\nfloat striangle(in float t, in float k) {\n    return asin(k * sin(TAU * t)) / asin(k);\n}\n\nfloat square(in float t) {\n    return 1.0 - 2.0 * mod(floor(2.0 * t), 2.0);\n}\n\nfloat ssquare(in float t, in float w) {\n    t *= 2.0;\n    return 1.0 - 2.0 * abs(mod(floor(t), 2.0) - smoothstep(-w, w, abs(fract(t) - 0.5) - 0.5));\n}\n\nvec2 makeNoise(in float time) {\n    vec2 sound = vec2(0.0);\n\n    float t = time * (mod(floor(time * (mod(2.0 * floor(time), 2.0) + 1.0)), 2.0) + 1.0);\n    float t1 = fract(t);\n    sound.x += Hash11(t1 * 1000.0) * exp(-8.0 * t1) * smoothstep(1.0, 0.0, t1);\n\n    float t2 = fract(t - 0.5);\n    sound.y += Hash11(t2 * 1000.0) * exp(-8.0 * t2) * smoothstep(1.0, 0.0, t2);\n\n    float t3 = fract(time);\n    float env1 = exp(-5.0 * t3) * smoothstep(1.0, 0.0, t3);\n    sound += sine(t3 * midi(mix(35.0, 36.0, mod(floor(time), 2.0)))) * env1;\n\n    float t4 = fract(time * 4.0);\n    float env2 = exp(-5.0 * t4) * smoothstep(1.0, 0.0, t4);\n    sound += 1.5 * sine(t4 * midi(35.0) / 4.0) * env2;\n\n    float osc = sine(time * 128.0);\n    sound *= mix(vec2(osc, 1.0), vec2(1.0, osc), mod(floor(time * 0.5), 2.0));\n    sound *= osc;\n\n    return sound;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 mainSound(int samp, float time) {\n    return makeNoise(float(samp % (11 * int(iSampleRate))) / iSampleRate);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}