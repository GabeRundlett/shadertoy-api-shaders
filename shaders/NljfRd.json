{
    "Shader": {
        "info": {
            "date": "1652628550",
            "description": "Simple water effect practicing with some noise and curves",
            "flags": 0,
            "hasliked": 0,
            "id": "NljfRd",
            "likes": 3,
            "name": "Water VFX",
            "published": 3,
            "tags": [
                "water",
                "masking",
                "gradientnoise"
            ],
            "usePreview": 0,
            "username": "rge15",
            "viewed": 333
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265358979\n\n\nfloat N21(in vec2 p)\n{\n    p = 50.*fract((p + vec2(7.3945,0.2594273))/PI);\n    return -1.+2.*fract( p.x*p.y/(p.x+p.y) );\n}\n\nvec2 N22(in vec2 p)\n{\n    p = 50.*fract((p+vec2(0.24342,709.23))/PI);\n    return 1. - 2.*fract(p * vec2(p.x+p.y, p.y*p.x) + vec2(0.29137,0.9348));\n}\n\nfloat valueNoise(in vec2 uv)\n{\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n\n    vec2 func = f*f*(3.-2.*f);\n\n    float a = N21(i+vec2(0.,0.));\n    float b = N21(i+vec2(1.,0.)); \n    float c = N21(i+vec2(0.,1.)); \n    float d = N21(i+vec2(1.,1.)); \n    \n    return a + (b-a)*func.x + (c-a)*func.y + (a-b-c+d)*func.x *func.y;\n\n}\n\nfloat gradientNoise(in vec2 uv)\n{\n\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n\n    vec2 func = f*f*(3.-2.*f);\n\n    vec2 a = N22(i+vec2(0.,0.));\n    vec2 b = N22(i+vec2(1.,0.)); \n    vec2 c = N22(i+vec2(0.,1.)); \n    vec2 d = N22(i+vec2(1.,1.)); \n    \n    float gA = dot(a,f-vec2(0.,0.));\n    float gB = dot(b,f-vec2(1.,0.));\n    float gC = dot(c,f-vec2(0.,1.));\n    float gD = dot(d,f-vec2(1.,1.));\n    \n    return gA + (gB-gA)*func.x + (gC-gA)*func.y + (gA-gB-gC+gD)*func.x *func.y;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n\n    float p = 0.7 + 0.15 * valueNoise(4.*uv);\n\n    float b = 0.5 + gradientNoise(10.*uv) ;\n\n    float c = 0.2 + .75*gradientNoise(2.*uv);\n    float t = smoothstep( 0.1,1. , c + gradientNoise(3.5*uv-0.7*iTime));\n    \n    vec3 w = p * vec3(0.05,0.75,0.9) + (p*t) * vec3(1.,1.,1.);\n\n    // Output to screen\n    fragColor = vec4(vec3(w),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}