{
    "Shader": {
        "info": {
            "date": "1699755212",
            "description": "Finds the homography that maps [(1,0,0), (0,1,0), (0,0,1)] to [a, b, c] and [ref] to [target]. Mouse moves target. This is much more intuitive than the classic version that maps corners of a rectangle.",
            "flags": 0,
            "hasliked": 0,
            "id": "DlcyDf",
            "likes": 9,
            "name": "Triangle Homography",
            "published": 3,
            "tags": [
                "triangle",
                "geometry",
                "perspective",
                "homgraphy"
            ],
            "usePreview": 0,
            "username": "pyBlob",
            "viewed": 238
        },
        "renderpass": [
            {
                "code": "/*\n\nTask: Find the homography that maps barycentric coordinates\n    [(1,0,0), (0,1,0), (0,0,1)] to [a, b, c]\n    and [ref] to [target].\n\na) Find the affine transformation for the corners of the triangle.\n   Trivial: mat3x2(a, b, c)\n\nb) Find the homography H that fixes the corners of the triangle and moves ref to target.\n   This homography must have eigenvectors [(1,0,0), (0,1,0), (0,0,1)]. Therefore it is a diagonal matrix.\n   Trivial:  diag(ref / tex(a,b,c, target))\n\n*/\n\nvec2 view(vec2 a, vec2 b, vec2 c, vec3 wuv)\n{\n    return mat3x2(a, b, c) * wuv;\n}\n\nvec3 tex(vec2 a, vec2 b, vec2 c, vec2 x)\n{\n    /* mla: less code */\n    return inverse(mat3(a,1,b,1,c,1)) * vec3(x,1);\n\n    /* original: normalized barycentric coordinate, less operations */\n    vec3 wuv = vec3(0, inverse(mat2(b-a, c-a)) * (x-a));\n    wuv.x = 1. - wuv.y - wuv.z;\n    return wuv;\n}\n\nvoid mainImage(out vec4 C, vec2 O)\n{\n    float res = 236.;\n    O /= iResolution.y;\n\n    vec3 ref = vec3(1) / 3.;\n    //ref = vec3(.6,1.2,1.2) / 3.;\n\n    vec2 a = vec2(120, 40) / res;\n    vec2 b = vec2(250, 110) / res;\n    vec2 c = vec2(90, 150) / res;\n    vec2 d = view(a,b,c, ref);\n    d = view(a,b,c, vec3(.2,.5,.3));\n    \n    if (iMouse.z > 0.)\n        d = abs(iMouse.xy) / iResolution.y;\n    //else d = abs(mouse.zw) / iResolution.y;\n\n    float r = 3. - min(min(length(O-a), length(O-b)), min(length(O-c), length(O-d))) * iResolution.y;\n\n    // affine\n    vec3 wuv = tex(a,b,c, O);\n\n    // persepective\n    int mode = 0;\n    if (mode == 0)\n        wuv *= ref / tex(a,b,c, d);\n    if (mode == 1 && iMouse.z > 0.)\n        wuv *= 1. + vec3(0, iMouse.xy - iResolution.xy/2.) / iResolution.y;\n\n    vec2 buv = wuv.yz / (wuv.x + wuv.y + wuv.z);\n    float bw = 1. - buv.x - buv.y;\n    //buv *= 3.;\n\n    vec2 uv = buv;\n    //if (false) // <- toggle this and move the mouse\n        uv = fract(uv);\n    float w = 1. - uv.x - uv.y;\n\n    C = vec4(0);\n    C = mix(C, vec4(clamp(vec3(bw, buv), 0., 1.), 1), clamp(-.5+min(uv.x/fwidth(buv.x), min(uv.y/fwidth(buv.y), w/fwidth(bw))), 0., 1.));\n    if (false)\n        C = mix(C, vec4(0), clamp(1.-1.4*abs(uv.x-uv.y)/fwidth(buv.x-buv.y), 0., 1.)*clamp(w/fwidth(bw),0.,1.)),\n        C = mix(C, vec4(0), clamp(1.-1.4*abs(uv.x-w)/fwidth(buv.x-bw), 0., 1.)),\n        C = mix(C, vec4(0), clamp(1.-1.4*abs(uv.y-w)/fwidth(buv.y-bw), 0., 1.));\n    C = mix(C, vec4(1), clamp(r, 0., 1.));\n    C = sqrt(C);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}