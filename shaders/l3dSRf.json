{
    "Shader": {
        "info": {
            "date": "1719375188",
            "description": "Halodrome Music Visualizer",
            "flags": 33,
            "hasliked": 0,
            "id": "l3dSRf",
            "likes": 8,
            "name": "Halodrome Music Visualizer",
            "published": 3,
            "tags": [
                "tunnel",
                "sound",
                "fft",
                "audio",
                "surreal"
            ],
            "usePreview": 0,
            "username": "orblivius",
            "viewed": 347
        },
        "renderpass": [
            {
                "code": "// Fork of \"Halodrome Music Visualizer\" by orblivius. https://shadertoy.com/view/l3dSRf\n// 2024-06-26 05:32:26\n\n// Halodrome Music Visualizer 1.0\n// hacked together by Orblivius\n\n// GITHUB: https://github.com/mewza\n// Email: orblivius@protonmail.com\n\n// Inspirations & Sources: \n//\n//   https://www.shadertoy.com/view/4djSRW \n//   https://www.shadertoy.com/view/4tyfWy\n//   https://www.shadertoy.com/view/MfsSD2\n//   https://www.shadertoy.com/view/lslyRn\n//   https://www.shadertoy.com/view/lXG3D1\n//   https://www.shadertoy.com/view/3tX3R4\n//\n//   (did I miss anyone? message me let me know)\n\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nfloat map(float v, float v_min, float v_max, float out1, float out2)\n{\n    if ( v_max - v_min == 0. )\n        return out2;\n        \n     return (clamp(v,v_min,v_max) - v_min) / (v_max - v_min) * (out2-out1)+out1;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  mouseCoord = iMouse.xy / iResolution.xy;\n    float ar = iResolution.y / iResolution.x;\n    vec2  rolling = vec2(sin(iTime), cos(iTime))*.5;\n    \n    \n    vec2 uv = vec2( map(fragCoord.x,0., iResolution.x,-1.,1.),  map(fragCoord.y,0., iResolution.y,-ar,ar)    ) + rolling*0.25;\n    vec2 uv2 = rotateUV(uv, -iTime*0.03);\n    vec2 uv3 = rotateUV(uv, iTime*0.05+0.3);\n    vec2 uv1 = rotateUV(uv, iTime*0.05);\n    float z = 2. / max(length(uv),0.1);\n   \n    float angle1 = map( atan(uv1.y,uv1.x), -PI, PI, 0., 1. );\n    float angle2 = map( atan(uv2.y,uv2.x), -PI, PI, 0., 1. );\n    float angle3 = map( atan(uv3.y,uv3.x), -PI, PI, 0., 1. );\n    float zmax =  map(rolling.x,-1.,1.,0.075,0.35);\n    float fade = map(z,0.,  8.- .001*zmax , 1.0, 0.);\n  \n    vec4 color  = texture(iChannel0, vec2( angle1 +rolling.y * 0.04, (z - 2. - .5 * sin(iTime*.1)) * zmax)+0.2) * vec4(2.,.3,.7,1.);\n    vec4 color1 = (fragCoord.y > 1.5) ? texture(iChannel1, vec2((angle3 +rolling.y*0.04), (z - 2. - .5*sin(iTime*.1)) * zmax)+0.2) * vec4(2.,.3,.7,1.) : vec4(0);\n    vec4 color2 = texture(iChannel2, vec2( angle2 + 0.5 + rolling.y * 0.1, (z + .5*sin(iTime*.2+0.5)) * zmax ) +0.2 ) * vec4(.8,.1,1.5,1.); \n\n    color1.rgb = hueShift(color1.rgb, 2.2);\n    color.rgb *= color.rgb;  color.rgb = hueShift(color.rgb, 5.5 + iTime * 0.1); \n    color1 *= color1;  \n\n    vec3 tt3 = color.rgb; \n    float tt = min(max(max(tt3.r, tt3.g),tt3.b),1.);\n    fragColor = vec4((color.rgb)* fade + (1.-tt)*(color1.rgb +color2.rgb ) * fade, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define BARS_COUNT 120\n#define BAR_HEIGHT .8\n#define BAR_SPACING_PERCENTAGE .302 // Normalized (0.0 = no spacing, 1.0 = full bar width)\n#define BAR_COLOR vec3(1.0, 0.0, 1.0) // Color of the bars\n#define BACKGROUND_COLOR vec3(0.0, 0.0, 0.0) // Color of the background\n#define MIRROR_FLAG 1// Set to 1 to mirror the waveform horizontally\n#define ORIENTATION_FLAG 1 // Set to 1 to put bass on the right\n#define CENTER_OVERLAP 0.00 // Control the overlap in the center\n#define COLOR_POLARITY_FLAG 0 // Set to 1 to switch foreground and background colors\n#define BASS_BALANCE 0.0001 // Normalized (0.0 = favor highs, 1.0 = favor lows)\n#define GRADIENT_FLAG 1 // Set to 1 to enable gradient, 0 to disable\n#define GRADIENT_POLARITY_FLAG 1 // Set to 1 to invert gradient colors\n#define GRADIENT_OFFSET 0.1 // Normalized (0.0 = start from background, 1.0 = start from bar color)\n#define GRADIENT_MULTIPLIER 1. // Normalized (0.0 = low intensity, 1.0 = high intensity)\n#define GRADIENT_CONTRAST .3 // Normalized (0.0 = no contrast, 1.0 = high contrast)\n#define MIRROR_Y_BOTTOM_FLAG 0 // Set to 1 to mirror the bottom half to the top\n#define MIRROR_Y_TOP_FLAG 0 // Set to 1 to mirror the top half to the bottom\n#define LOUDNESS_EXPONENT 2.0 // Controls the exponential scaling of loudness\n\n\n// Get the band value from the texture\nfloat getBand(int index) {\n    // Equal-loudness contour approximation\n    float normIndex = float(index) / float(BARS_COUNT);\n    float freq = pow(normIndex, mix(1.5, 0.5, BASS_BALANCE)); // Exaggerate emphasis based on BASS_BALANCE\n\n    if (ORIENTATION_FLAG == 1) {\n        freq = 1.0 - freq; // Flip bass to the right\n    }\n\n    return .2 + texture(iChannel0, vec2(freq, 0.0)).r;\n}\n\n// Function to get gradient color based on height and gradient parameters\nvec3 getGradientColor(float t) {\n    if (GRADIENT_FLAG == 1) {\n        float dynamicOffset = GRADIENT_OFFSET;\n        t = dynamicOffset + t * GRADIENT_MULTIPLIER;\n        t = clamp(t, 0.0, 1.0);\n        \n        t = pow(t, mix(1.0, 3.0, GRADIENT_CONTRAST));\n        \n        vec3 color = mix(BACKGROUND_COLOR, BAR_COLOR, t);\n        \n        if (GRADIENT_POLARITY_FLAG == 1) {\n            color = vec3(1.0) - color;\n        }\n        \n        return color;\n    } else {\n        return BAR_COLOR;\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 originalUv = uv;\n    \n  \n    float totalBars = float(BARS_COUNT) * (MIRROR_FLAG == 1 ? 2.0 : 1.0);\n    float barWidth = 1.0 / (totalBars + (totalBars - 1.0) * BAR_SPACING_PERCENTAGE); // Ensure float arithmetic\n    float barSpacing = barWidth * BAR_SPACING_PERCENTAGE;\n    \n    vec3 color = BACKGROUND_COLOR;\n\n    if (fragCoord.y <= 2.)  {\n    fragColor = vec4(0);\n    return;\n    }\n    \n    // Draw bars\n    for (int i = 0; i < BARS_COUNT; i++) {\n        float bandValue = getBand(i) * BAR_HEIGHT;\n\n        // Apply exponential scaling to the band value\n        bandValue = pow(bandValue, LOUDNESS_EXPONENT);\n\n        float barX = (barWidth + barSpacing) * float(i);\n\n        // Draw left side\n        if (uv.x > barX && uv.x < barX + barWidth) {\n            float barTop = 0.5 + bandValue / 2.0;\n            float barBottom = 0.5 - bandValue / 2.0;\n\n            if (uv.y > barBottom && uv.y < barTop) {\n                float gradientFactor = (uv.y - barBottom) / (barTop - barBottom); // Calculate gradient factor based on height\n                color = getGradientColor(gradientFactor); // Apply gradient color\n            }\n        }\n\n        // Draw right side (mirror) with overlap\n        if (MIRROR_FLAG == 1) {\n            float overlap = CENTER_OVERLAP;\n            barX = 1.0 - (barWidth + barSpacing) * float(i + 1) + overlap;\n\n            if (uv.x > barX && uv.x < barX + barWidth) {\n                float barTop = 0.5 + bandValue / 2.0;\n                float barBottom = 0.5 - bandValue / 2.0;\n\n                if (uv.y > barBottom && uv.y < barTop) {\n                    float gradientFactor = (uv.y - barBottom) / (barTop - barBottom); // Calculate gradient factor based on height\n                    color = getGradientColor(gradientFactor); // Apply gradient color\n                }\n            }\n        }\n    }\n\n    // Apply post-process mirroring effects\n    if (MIRROR_Y_BOTTOM_FLAG == 1) {\n        uv.y = 1.0 - uv.y; // Mirror the bottom to the top\n        vec3 mirrorColor = BACKGROUND_COLOR;\n\n        // Draw bars again with mirrored coordinates\n        for (int i = 0; i < BARS_COUNT; i++) {\n            float bandValue = getBand(i) * BAR_HEIGHT;\n\n            // Apply exponential scaling to the band value\n            bandValue = pow(bandValue, LOUDNESS_EXPONENT);\n\n            float barX = (barWidth + barSpacing) * float(i);\n\n            // Draw left side\n            if (uv.x > barX && uv.x < barX + barWidth) {\n                float barTop = 0.5 + bandValue / 2.0;\n                float barBottom = 0.5 - bandValue / 2.0;\n\n                if (uv.y > barBottom && uv.y < barTop) {\n                    float gradientFactor = (uv.y - barBottom) / (barTop - barBottom); // Calculate gradient factor based on height\n                    mirrorColor = getGradientColor(gradientFactor); // Apply gradient color\n                }\n            }\n\n            // Draw right side (mirror) with overlap\n            if (MIRROR_FLAG == 1) {\n                float overlap = CENTER_OVERLAP;\n                barX = 1.0 - (barWidth + barSpacing) * float(i + 1) + overlap;\n\n                if (uv.x > barX && uv.x < barX + barWidth) {\n                    float barTop = 0.5 + bandValue / 2.0;\n                    float barBottom = 0.5 - bandValue / 2.0;\n\n                    if (uv.y > barBottom && uv.y < barTop) {\n                        float gradientFactor = (uv.y - barBottom) / (barTop - barBottom); // Calculate gradient factor based on height\n                        mirrorColor = getGradientColor(gradientFactor); // Apply gradient color\n                    }\n                }\n            }\n        }\n        color = mix(color, mirrorColor, step(0.5, originalUv.y)); // Combine original and mirrored colors based on position\n    }\n\n    if (MIRROR_Y_TOP_FLAG == 1) {\n        uv = originalUv;\n        uv.y = 1.0 - uv.y; // Mirror the top to the bottom\n        vec3 mirrorColor = BACKGROUND_COLOR;\n\n        // Draw bars again with mirrored coordinates\n        for (int i = 0; i < BARS_COUNT; i++) {\n            float bandValue = getBand(i) * BAR_HEIGHT;\n\n            // Apply exponential scaling to the band value\n            bandValue = pow(bandValue, LOUDNESS_EXPONENT);\n\n            float barX = (barWidth + barSpacing) * float(i);\n\n            // Draw left side\n            if (uv.x > barX && uv.x < barX + barWidth) {\n                float barTop = 0.5 + bandValue / 2.0;\n                float barBottom = 0.5 - bandValue / 2.0;\n\n                if (uv.y > barBottom && uv.y < barTop) {\n                    float gradientFactor = (uv.y - barBottom) / (barTop - barBottom); // Calculate gradient factor based on height\n                    mirrorColor = getGradientColor(gradientFactor); // Apply gradient color\n                }\n            }\n\n            // Draw right side (mirror) with overlap\n            if (MIRROR_FLAG == 1) {\n                float overlap = CENTER_OVERLAP;\n                barX = 1.0 - (barWidth + barSpacing) * float(i + 1) + overlap;\n\n                if (uv.x > barX && uv.x < barX + barWidth) {\n                    float barTop = 0.5 + bandValue / 2.0;\n                    float barBottom = 0.5 - bandValue / 2.0;\n\n                    if (uv.y > barBottom && uv.y < barTop) {\n                        float gradientFactor = (uv.y - barBottom) / (barTop - barBottom); // Calculate gradient factor based on height\n                        mirrorColor = getGradientColor(gradientFactor); // Apply gradient color\n                    }\n                }\n            }\n        }\n        color = mix(color, mirrorColor, step(originalUv.y, 0.5)); // Combine original and mirrored colors based on position\n    }\n\n    // Apply color polarity inversion\n    if (COLOR_POLARITY_FLAG == 1) {\n        color = vec3(1.0) - color;\n    }\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define BPM 120.0\n#define PI 3.14159265359\n#define PI2 6.28318530718\n#define EPS 0.0001\n#define _beat (iTime * BPM / 60.0)\n#define beat (mod(_beat, 32.0))\n#define TAU 6.283184\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n\nbool between(float x, float from, float to) {\n    return from <= x && x < to;\n}\n\nfloat sdCircle(vec2 p, float r) {\n\treturn length(p) - r;\n}\n\nfloat sdRect(vec2 p, vec2 b) {\n    vec2 d = abs(p) - b;\n    return max(d.x, d.y) + min(max(d.x, d.y), 0.0);\n}\n\nfloat sdTriangle(vec2 p, float size) {\n    vec2 s = size * vec2(0.25, 0.43301270189);\n    p.y -= size * 0.14433756729;// sqrt(3) / 12\n\treturn sdRect(p, vec2(s.x - p.y * s.x / s.y, s.y));\n}\n\nfloat opSubtraction(float d1, float d2) {\n    return max(-d1,d2);\n}\n\nvec2 opRep(vec2 p, vec2 c) {\n\treturn mod(p, c) - 0.5 * c;\n}\n\nfloat opRep(float p, float c) {\n\treturn mod(p, c) - 0.5 * c;\n}\n\nmat2 rot(float x)\n{\n    return mat2(cos(x), sin(x), -sin(x), cos(x));\n}\n\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, saturate(p - K.xxx), c.y);\n}\n\n// https://www.shadertoy.com/view/4djSRW\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n// https://www.shadertoy.com/view/3tX3R4\nfloat remap(float val, float im, float ix, float om, float ox)\n{\n    return clamp(om + (val - im) * (ox - om) / (ix - im), om, ox);\n}\n\n// https://gist.github.com/mattatz/d7b8decb481947d2e37eab98aff2d0ad\n// https://neort.io/art/bj2225k3p9f9psc9ovf0?index=0&origin=my_profile\nfloat ease_in_quad(float x) {\n\tfloat t=x; float b=0.; float c=1.; float d=1.;\n\treturn c*(t/=d)*t + b;\n}\n\nvec3 aces(vec3 x) {\n    return clamp((x * (2.51 * x + 0.03)) / (x * (2.43 * x + 0.59) + 0.14), 0.0, 1.0);\n}\n\nvec2 rotateUV(vec2 uv, float angle) {\n    angle = angle*TAU;\n    mat2 matrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    return matrix * uv;\n}\n\n\nvec3 hueShift(vec3 col, float shift) {\n    vec3 m = vec3(cos(shift), -sin(shift) * .57735, 0);\n    m = vec3(m.xy, -m.y) + (1. - m.x) * .33333;\n    return mat3(m, m.zxy, m.yzx) * col;\n}\n\nfloat ease_out_quad(float x) {\n\tfloat t=x; float b=0.; float c=1.; float d=1.;\n\treturn -c *(t/=d)*(t-2.) + b;\n}\n\nfloat ease_in_out_quad(float x) {\n\tfloat t=x; float b=0.; float c=1.; float d=1.;\n\tif ((t/=d/2.)<1.) return c/2.*t*t + b;\n\treturn -c/2. * ((--t)*(t-2.) - 1.) + b;\n}\n\nfloat ease_in_cubic(float x) {\n\tfloat t=x; float b=0.; float c=1.; float d=1.;\n\treturn c*(t/=d)*t*t + b;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define iterations 20\n#define formuparam 0.53\n\n#define volsteps 15\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n      p.xy*=mat2(cos(iTime*0.005),sin(iTime*0.005),-sin(iTime*0.005),cos(iTime*0.005));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\t\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.1; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*vec3(0.015,0.015,0.015); // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n#define TAU 6.283184\n\nconst vec4 lineColor = vec4(0.25, 0.5, 1.0, 1.0);\nconst vec4[] bgColors = vec4[]\n(\n    lineColor * 0.5,\n    lineColor - vec4(0.2, 0.2, 0.7, 1)\n);\n\n\n// probably can optimize w/ noise, but currently using fourier transform\nfloat random(float t)\n{\n    return (cos(t) + cos(t * 1.3 + 1.3) + cos(t * 1.4 + 1.4)) / 3.0;   \n}\n\n\n\nfloat arc(float r, vec2 uv, float orientation, float radius, float section)\n{\n    uv = rotateUV(uv, orientation);\n    float theta = atan(uv.x, uv.y)/TAU;\n\n    float t = 100. * section;\n    float value = \n        min(2.0, pow(0.001 / abs(r - radius),2.)) *\n        min(2.0, pow(0.005 / abs(theta / t),t / 1.));\n    \n    return value;\n}\nfloat radial(float r, vec2 uv, float orientation, float radius, float section)\n{\n    uv = rotateUV(uv, orientation);\n    float theta = atan(uv.x, uv.y)/TAU;\n\n    //float value = min(2.0, 0.002 / abs(theta)) *;\n\n    float t = 100. * section;\n    float value = \n        min(2.0, 0.00025 / abs(theta)) *\n        min(2.0, pow(0.005 / abs((r - radius) / t),t / 2.));\n\n    return value;\n}\n\nfloat rich_beautiful_healthy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\nuint pcg(uint v)\n{\n\tuint state = v * 747796405u + 2891336453u;\n\tuint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n\treturn (word >> 22u) ^ word;\n}\n\nuvec2 pcg2d(uvec2 v)\n{\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    return v;\n}\n\n// http://www.jcgt.org/published/0009/03/02/\nuvec3 pcg3d(uvec3 v) {\n\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    v ^= v >> 16u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    return v;\n}\n\nfloat hash11(float p) {\n    return float(pcg(uint(p)))/4294967296.;\n}\n\nvec2 hash21(float p) {\n    return vec2(pcg2d(uvec2(p, 0)))/4294967296.;\n}\n\nvec3 hash33(vec3 p3) {\n    return vec3(pcg3d(uvec3(p3)))/4294967296.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=fragCoord.xy/iResolution.xy-.5;\n    vec2 uv2=fragCoord.xy/iResolution.xy-.5;\n    uv.y*=iResolution.y/iResolution.x;\n    vec3 dir=vec3(uv*zoom,iTime*0.002);\n    float time=iTime*speed+.25;\n\n    float aspect = iResolution.x / iResolution.y;\n\n    float r = length(uv);\n    const vec3 base_color = vec3(0.2, 0.3, 1.0);\n\n    vec3 from=vec3(1.,.5,0.5);\n    from+=vec3(time*2.,time,-2.);\n\n    vec2 center = (iResolution.xy/2.);\n    float c0 = 0., c1 = 0.;\n\n\n    // Some blueish tone\n    const vec3 blue_shift = vec3(1.0, 1.0, 1.0);\n    vec3 color = vec3(.3,0.3,1.1);\n\n    float verticalFade = cos(uv2.y * 13.28) * 0.05 + 0.5;\n    fragColor = mix(bgColors[1], bgColors[1], uv2.x/1.);\n    fragColor *= verticalFade/2.;\n\n\n    mainVR(fragColor, fragCoord, from, dir);\t\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const  int octaves =  20;\nfloat rs = 0.;\n\nmat2 R(float q){return mat2(cos(q),sin(q),-sin(q),cos(q));}\n\nfloat hash21(vec2 x) {\n    return fract(cos(mod(dot(x, vec2(13.9898, 8.141)), 3.14)) * 43758.5453);\n}\n\nfloat perlinNoise(vec2 uv)\n{\n    vec2 iuv = floor(uv);\n    vec2 fuv = fract(uv);\n    vec2 blur = smoothstep(.0, 1., fuv);\n    vec2 bl = vec2(.0, .0);\n    vec2 br = vec2(1., .0);\n    vec2 tl = vec2(.0, 1.);\n    vec2 tr = vec2(1., 1.);\n    vec2 bln = hash22(iuv + bl);\n    vec2 brn = hash22(iuv + br);\n    vec2 tln = hash22(iuv + tl);\n    vec2 trn = hash22(iuv + tr);\n    float b  = mix(dot(bln, fuv - bl), dot(brn, fuv - br), blur.x);\n    float t  = mix(dot(tln, fuv - tl), dot(trn, fuv - tr), blur.x);\n    float c = mix(b, t, blur.y);\n   \n    return (c);\n}\n\nfloat fbm(vec2 uu, vec2 uv)\n{\n    float value = 0.;\n    float ampitude  = .5;\n    float rs = texture(iChannel1, vec2(uu.x,1.5)).r;\n   \n    float y1 = rs*sin(uu.x*PI);\n  \n    for(int i = 0; i < octaves; i++)\n    {  \n        value +=  perlinNoise(uv*(1.)) * ampitude;\n        uv *= 2.;\n        ampitude *= .5;\n    }\n    return (.35 * value) * y1 + rs * .08 - 0.035;\n}\n\n\nvoid mainImage(out vec4 Col,in vec2 FC) \n{\n    vec2 uvv = (FC - 0.5 * iResolution.xy)/iResolution.y;\n    vec2 uu = FC.xy/iResolution.xy;\n    \n    if (FC.y < 2.) {\n        Col =  texture(iChannel1, vec2(uu.x,uu.y));\n        return;\n    } else \n       Col =  .4*texture(iChannel0, vec2(uu.x,uu.y));\n    rs = texture(iChannel1, uu, 0.75).r;\n    vec3 col1, col2; \n    uvv.y = 0.3*uvv.y + fbm(uu, uvv.yx + (.3*iTime));\n    float dist1 = abs(uvv.y);\n\n    dist1 = hash21(vec2(sin(iTime))) / dist1;\n   \n    col1 = mix(vec3(0.), vec3(.01), dist1);\n  \n    Col += vec4(col1,dist1);\n     \n   \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define WEB \n\n#ifndef WEB\n#define fft(x) iData[idx]/200.+iBeatAvg*iBeatDet\n#define fft2(x)  iCaps[idx]/200.\n#else\n#define fft(x) texture(iChannel1, vec2(float(idx)/120.,0.0)).r\n#define fft2(x) texture(iChannel1, vec2(float(idx)/120.,0.0)).r\n#endif\n\nvec4 rain(vec2 uv)\n{\n\tint idx = int(uv.x*120.);  \n    \n    float speed = min(fft(idx),1.0);\n   \n    float y = mod(uv.y-1.+fft2(idx), 1.);\n    return vec4(hueShift(vec3(.5,speed,speed)/(5.*y), -iTime*.2),1.);\n}\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvec3 rain2(vec2 fragCoord)\n{\n\tfragCoord.x -= mod(fragCoord.x, 16.);\n    fragCoord.y -= mod(fragCoord.y, 16.);\n    \n    float offset=sin(fragCoord.x*15.);\n    float speed=cos(fragCoord.x*3.)*.3+.12;\n   \n    float y = 5.*fract(fragCoord.y/iResolution.y + iTime*speed + offset);\n    return vec3(random(vec2(offset)),random(vec2(offset)*y),random(vec2(offset)*speed)) / (y*5.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 d = texture(iChannel0, uv);\n    if (fragCoord.y <= 2.) {\n       fragColor = d; //vec4(0);\n       return;\n    } \n    vec4 vcol = rain(uv);\n   \n    fragColor = (d + vcol);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}