{
    "Shader": {
        "info": {
            "date": "1534036777",
            "description": "Trying to make concentric lines using a dilation effect in a feedback loop. The idea here is to fake a signed distance field by running dilation over and over again on an alpha mask.",
            "flags": 32,
            "hasliked": 0,
            "id": "4t3cD2",
            "likes": 29,
            "name": "dilated shapes",
            "published": 3,
            "tags": [
                "rings"
            ],
            "usePreview": 0,
            "username": "aferriss",
            "viewed": 1976
        },
        "renderpass": [
            {
                "code": "// just composite everything\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 res = iResolution.xy;\n    vec2 uv = fragCoord / res;\n    vec4 t = texture(iChannel0, uv);\n    float a = texture(iChannel1, uv).r;\n    vec4 orig = texture(iChannel2, uv);\n\n\tvec4 m = floor(mod(t*12.0, 1.0)+0.5);\n    float mr = m.r;\n    m.rgb = mr * hsv2rgb(vec3(t.r + iTime*0.5 , 0.45,1.0));\n    m.a = mr;\n    \n   \n    fragColor = mix(orig, m, mr);\n    fragColor = mix(orig, fragColor, step(0.001, t));//step(0.01, t));\n    fragColor = mix(fragColor, orig, a);\n  \t//fragColor = sin(t*6.28*16.0)*0.5 + 0.5;//vec4(m.rgba);\n    //fragColor = floor(mod(t*12.0, 1.0)+0.5);\n    //fragColor = t;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 offset [9];\nfloat spread = 0.75;\nfloat decay = 0.04;\n// here we doo the dilation feedback\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 res = iResolution.xy;\n    vec2 step = spread / res;\n    vec2 uv = fragCoord / res;        \n    vec4 sum = texture(iChannel0, uv);\n   \n    // 49 taps gives us better results but you could probably find settings that work with less\n    for(int y = -7; y <= 7; y++){\n        for(int x = -7; x <= 7; x++){\n         \tvec4 color = texture(iChannel1, uv + vec2(x, y) * step);\n            sum = max(color, sum);\n        }\n    }\n\n\n    fragColor = sum - decay; \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// chromakey from here https://www.shadertoy.com/view/MsS3DW\n// this buffer just makes alpha mask\n\nfloat th = 8.0; // threshold\nfloat a2 = 1.2;\nfloat spill = 1.0;\n\n\nfloat getAlpha(vec4 c){\n\t// First Vlahos assumption: Gf <= a2Bf\t\n\treturn 1.0 - th*(c.g-a2*(max(c.r,c.b)));\n\t}\n\nvec4 despill(vec4 c){\n\t/// Second Vlahos assumption: max (Gf - Bf,0) <= max(Bf - Rf, 0)\n\tfloat sub = max(c.g - mix(c.b, c.r, 0.45), 0.0);\n\tc.g -= sub;\n\t\n\t/// \n\tc.a -= smoothstep(0.25, 0.5, sub*c.a);\n\t\n\t//restore luminance (kind of, I slightly reduced the green weight)\n\tfloat luma = dot(c.rgb, vec3(0.350, 0.587,0.164));\n\tc.r += sub*c.r*2.0*.350/luma;\n\tc.g += sub*c.g*2.0*.587/luma;\n\tc.b += sub*c.b*2.0*.164/luma;\n\n\treturn c;\n\t}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 fg = texture(iChannel0,uv);\n\t\n    vec4 ofg = fg;\n\t\n\tfg.a = clamp(getAlpha(fg), 0.0, 1.0);\n\tfg = despill(fg);    \n\tfragColor = fg.aaaa; \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}