{
    "Shader": {
        "info": {
            "date": "1633903322",
            "description": "Most games I play end in ties :D",
            "flags": 0,
            "hasliked": 0,
            "id": "7stSDB",
            "likes": 12,
            "name": "How to Win at Tic-Tac-Toe",
            "published": 3,
            "tags": [
                "game",
                "animation",
                "tictactoe"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 210
        },
        "renderpass": [
            {
                "code": "#define drawSDF(dist, col) color = mix(color, col.rgb, smoothstep(unit, 0.0, dist) * col.a)\n\n// Utilities\n// https://www.shadertoy.com/view/4djSRW\nvec2 Hash12(in float x) {\n\tvec3 p3 = fract(x * vec3(0.1031, 0.103, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvec2 fbm(in float x, in int oct) {\n    vec2 pos = vec2(0.0);\n    float amp = 1.0;\n    float total = 0.0;\n    for (int o=0; o < oct; o++) {\n        pos += mix(Hash12(floor(x)), Hash12(ceil(x)), smoothstep(0.0, 1.0, fract(x))) * amp;\n        total += amp;\n        amp *= 0.5;\n        x *= 2.0;\n    }\n\n    return pos / total;\n}\n\nmat2 Rotate2D(in float a) {\n    float co = cos(a), si = sin(a);\n    return mat2(co, -si, si, co);\n}\n\n// SDFs\nfloat sdDisk(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b, in float t) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0)) - t;\n}\n\nfloat sdRing(in vec2 p, in vec2 o, in float r, in float t) {\n    return abs(length(p - o) - r) - t;\n}\n\nfloat sdArc(in vec2 p, in vec2 ax, in vec2 ap, in float r, in float t) {\n    p = vec2(dot(p, ax), abs(p.y * ax.x - p.x * ax.y));\n    return (p.y * ap.x < p.x * ap.y ? abs(length(p) - r) : length(p - ap * r)) - t;\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdRoundedX(in vec2 p, in float w, in float r) {\n    p = abs(p);\n    return length(p - min(p.x + p.y, w) * 0.5) - r;\n}\n\n// https://www.shadertoy.com/view/Xlt3R4\nfloat sdQuestionMark(in vec2 p, in vec2 s, in float t) {\n    p += vec2(9.0, 10.0) * s;\n    float res = sdLine(p, vec2(3.0, 16.0) * s, vec2(3.0, 17.0) * s, t);\n    res = min(res, sdLine(p, vec2(3.0, 17.0) * s, vec2(4.0, 19.0) * s, t));\n    res = min(res, sdLine(p, vec2(4.0, 19.0) * s, vec2(5.0, 20.0) * s, t));\n    res = min(res, sdLine(p, vec2(5.0, 20.0) * s, vec2(7.0, 21.0) * s, t));\n    res = min(res, sdLine(p, vec2(7.0, 21.0) * s, vec2(11.0, 21.0) * s, t));\n    res = min(res, sdLine(p, vec2(11.0, 21.0) * s, vec2(13.0, 20.0) * s, t));\n    res = min(res, sdLine(p, vec2(13.0, 20.0) * s, vec2(14.0, 19.0) * s, t));\n    res = min(res, sdLine(p, vec2(14.0, 19.0) * s, vec2(15.0, 17.0) * s, t));\n    res = min(res, sdLine(p, vec2(15.0, 17.0) * s, vec2(15.0, 15.0) * s, t));\n    res = min(res, sdLine(p, vec2(15.0, 15.0) * s, vec2(14.0, 13.0) * s, t));\n    res = min(res, sdLine(p, vec2(14.0, 13.0) * s, vec2(13.0, 12.0) * s, t));\n    res = min(res, sdLine(p, vec2(13.0, 12.0) * s, vec2(9.0, 10.0) * s, t));\n    res = min(res, sdLine(p, vec2(9.0, 10.0) * s, vec2(9.0, 7.0) * s, t));\n    res = min(res, sdLine(p, vec2(9.0, 2.0) * s, vec2(8.0, 1.0) * s, t));\n    res = min(res, sdLine(p, vec2(8.0, 1.0) * s, vec2(9.0, 0.0) * s, t));\n    res = min(res, sdLine(p, vec2(9.0, 0.0) * s, vec2(10.0, 1.0) * s, t));\n    res = min(res, sdLine(p, vec2(10.0, 1.0) * s, vec2(9.0, 2.0) * s, t));\n    return res;\n}\n\n// Convert board indices to screen coordinates\nvec2 board2screen(in vec2 index) {\n    return index * 0.35 - 0.35;\n}\n\n// Animate placing pieces\nvoid placeX(in vec2 coords, in float startTime, in vec2 uv, in float unit, inout vec3 color) {\n    float transition = clamp((iTime - startTime) / 2.0, 0.0, 1.0);\n    float leftEdge = -0.5 * iResolution.x / iResolution.y * 1.1 - 0.2;\n    coords = mix(vec2(leftEdge, 0.0), board2screen(coords), transition);\n    float spin = 2.0 * 6.28 * transition;\n    drawSDF(sdRoundedX((uv - coords) * Rotate2D(spin), 0.175, 0.005), vec4(1.0, 0.0, 0.0, 1.0));\n}\n\nvoid placeO(in vec2 coords, in float startTime, in vec2 uv, in float unit, inout vec3 color) {\n    float rightEdge = 0.5 * iResolution.x / iResolution.y * 1.1 + 0.2;\n    coords = mix(vec2(rightEdge, 0.0), board2screen(coords), clamp((iTime - startTime) / 2.0, 0.0, 1.0));\n    drawSDF(sdRing(uv, coords, 0.1, 0.005), vec4(0.0, 0.0, 1.0, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 1.1;\n    float unit = 2.2 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    // Shake up\n    uv -= (0.5 * fbm(10.0 * iTime, 10) - 0.25) * smoothstep(35.0, 36.0, iTime);\n\n    // Tic-tac-toe board\n    drawSDF(sdLine(uv, vec2(-0.5, 0.175), vec2(0.5, 0.175), 0.005), vec4(1.0));\n    drawSDF(sdLine(uv, vec2(-0.5, -0.175), vec2(0.5, -0.175), 0.005), vec4(1.0));\n    drawSDF(sdLine(uv, vec2(0.175, -0.5), vec2(0.175, 0.5), 0.005), vec4(1.0));\n    drawSDF(sdLine(uv, vec2(-0.175, -0.5), vec2(-0.175, 0.5), 0.005), vec4(1.0));\n\n    // Place Xs and Os (note to self: 3s transitions)\n    placeO(vec2(1.0, 1.0), 0.0, uv, unit, color);\n    placeX(vec2(1.0, 0.0), 3.0, uv, unit, color);\n    placeO(vec2(0.0, 1.0), 6.0, uv, unit, color);\n    placeX(vec2(2.0, 1.0), 9.0, uv, unit, color);\n    placeO(vec2(0.0, 0.0), 12.0, uv, unit, color);\n\n    // Which one to stop?!?!\n    float pulse = 0.5 - 0.5 * cos(5.0 * clamp(iTime - 15.0, 0.0, 5.0));\n    drawSDF(sdQuestionMark(uv - board2screen(vec2(0.0, 2.0)), vec2(0.01), 0.005), vec4(1.0, 0.0, 0.0, pulse));\n    drawSDF(sdQuestionMark(uv - board2screen(vec2(2.0, 2.0)), vec2(0.01), 0.005), vec4(1.0, 0.0, 0.0, pulse));\n\n    // Fade out, then in\n    float fade = smoothstep(0.0, 1.0, 5.0 * abs(iTime - 22.5) - 11.5);\n    float invFade = 1.0 - fade;\n    color *= fade;\n\n    // Face\n    drawSDF(sdRing(uv, vec2(0.0), 0.45, 0.005), vec4(1.0, 1.0, 1.0, invFade));\n    drawSDF(sdArc(vec2(abs(uv.x) - 0.175, abs(uv.y - 0.075) + 0.066), vec2(0.0, 1.0), vec2(cos(1.0), sin(1.0)), 0.125, 0.005), vec4(1.0, 1.0, 1.0, invFade));\n    drawSDF(sdArc(uv + vec2(0.0, 0.4), vec2(0.0, 1.0), vec2(cos(1.0), sin(1.0)), 0.25, 0.005), vec4(1.0, 1.0, 1.0, invFade));\n\n    // Toggle eye direction\n    uv.x *= sign(cos(2.5 * clamp(iTime - 20.0, 0.0, 5.0)));\n\n    // Pupils\n    drawSDF(sdDisk(uv, vec2(-0.135, 0.075), 0.025), vec4(1.0, 1.0, 1.0, invFade));\n    drawSDF(sdDisk(uv, vec2(0.215, 0.075), 0.025), vec4(1.0, 1.0, 1.0, invFade));\n\n    // Final moves\n    placeX(vec2(2.0, 2.0), 26.0, uv, unit, color);\n    placeO(vec2(0.0, 2.0), 29.0, uv, unit, color);\n\n    // Os win! Tic-tac-toe, three in a row!\n    float transition = clamp((iTime - 32.0) / 2.0, 0.0, 1.0);\n    drawSDF(sdLine(uv, vec2(-0.35, 0.5 - transition), vec2(-0.35, 0.5), 0.005), vec4(0.0, 1.0, 0.0, transition));\n\n    // Fade out (shake up happens before this, see top of mainImage)\n    color *= 1.0 - smoothstep(36.0, 40.0, iTime);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}