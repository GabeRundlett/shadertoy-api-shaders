{
    "Shader": {
        "info": {
            "date": "1535216583",
            "description": "Eva army",
            "flags": 0,
            "hasliked": 0,
            "id": "4lGcR1",
            "likes": 6,
            "name": "Eva",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "repetition",
                "eva"
            ],
            "usePreview": 0,
            "username": "ikuto",
            "viewed": 721
        },
        "renderpass": [
            {
                "code": "Material shape_materials[] = Material[] (\n    Material(vec3(1.0, 1.0, 1.0), vec3(0.05), 0.5f),\n    Material(vec3(1.0, 1.0, 1.0), vec3(0.05), 0.5f),\n    Material(vec3(0.0, 0.0, 0.0), vec3(0.05), 0.5f),\n    Material(vec3(0.0, 0.4, 1.0), vec3(0.05), 0.5f),   \n    Material(vec3(1.0, 1.0, 1.0), vec3(0.05), 0.5f),\n    Material(vec3(1.0, 1.0, 1.0), vec3(0.0), 0.9f)\n);\n\nfloat mapBody(vec3 pos)\n{\n\treturn opSub(sdSphere(pos - vec3(0, 3.5, 0), 2.0), sdEllipsoid(pos - vec3(0, 2.0, 0), vec3(1.0, 3.0, 0.8)));\n}\n\nfloat mapHead(vec3 pos)\n{\n    return smax(sdSphere(pos - vec3(0, 2.2, 0), 0.95), sdEllipsoid(pos - vec3(0, 5.0, 0), vec3(2.0, 3.3, 2.0)), 0.1);\n}\n\nfloat mapFace(vec3 pos)\n{\n    return sdEllipsoid(pos - vec3(0, 2.4, 0.45), vec3(0.7, 0.5, 0.58));\n}\n\nfloat mapEye(vec3 pos)\n{\n    float lEye = sdEllipsoid(rotateYX(pos - vec3(0.3, 2.5, 0.925), vec2(0.4, 0)), vec3(0.2, 0.1, 0.04));\n    float rEye = sdEllipsoid(rotateYX(pos - vec3(-0.3, 2.5, 0.925), vec2(-0.4, 0)), vec3(0.2, 0.1, 0.04));\n    return min(lEye, rEye);\n}\n\nfloat mapArm(vec3 pos)\n{\n\tfloat lArm = sdEllipsoid(rotateZ(pos - vec3(1.2, 0.6, 0), -0.15), vec3(0.2, 1.0, 0.3));\n    float rArm = sdEllipsoid(rotateZ(pos - vec3(-1.2, 0.6, 0), 0.15), vec3(0.2, 1.0, 0.3));\n    return min(lArm, rArm);\n}\n\nvec2 mapScene(vec3 pos) \n{ \n    vec3 c = vec3(4, 0, 6);\n    pos = mod(pos, c) - 0.5 * c; //repetition\n    \n    float shapeIndex = 0.0;\n    vec2 res = vec2(mapBody(pos), shapeIndex++);\n    res = opUnion(res, vec2(mapHead(pos), shapeIndex++));\n    res = opUnion(res, vec2(mapFace(pos), shapeIndex++));\n    res = opUnion(res, vec2(mapEye(pos), shapeIndex++));\n    res = opUnion(res, vec2(mapArm(pos), shapeIndex++));\n    res = opUnion(res, vec2(sdPlane(pos - vec3(0, -1.0, 0), vec3(0, 1, 0)), shapeIndex++));\n    return res;\n}\n\nfloat sdScene(vec3 pos) { return mapScene(pos).x; }\n\nvec3 calculateNormal(in vec3 point) \n{\n    const vec3 step = vec3(0.01, 0.0, 0.0);\n    float gradX = sdScene(point + step.xyy) - sdScene(point - step.xyy);\n    float gradY = sdScene(point + step.yxy) - sdScene(point - step.yxy);\n    float gradZ = sdScene(point + step.yyx) - sdScene(point - step.yyx);\n    \n    vec3 normal = vec3(gradX, gradY, gradZ);\n    return normalize(normal);\n}\n\nfloat shadowRayMarch(vec3 ray_origin, vec3 ray_direction) \n{\n    const float HIT_DISTANCE = 0.001, MIN_TRACE_DISTANCE = 0.05, MAX_TRACE_DISTANCE = 4.5;\n    \n    float totalDistance = MIN_TRACE_DISTANCE; // step away from the surface\n    float shadow = 1.0;\n    for (int i = 0; i < 32; ++i) {\n        float sd = sdScene(ray_origin + ray_direction * totalDistance);\n        shadow = min(shadow, 1.0 * sd / totalDistance);\n        totalDistance += clamp(sd, 0.01, 0.2);\n        if (sd < HIT_DISTANCE || totalDistance > MAX_TRACE_DISTANCE) break;    \n    }\n    \n    return clamp(shadow, 0.0, 1.0);\n}\n\nvec2 rayMarch(vec3 ray_origin, vec3 ray_direction)\n{\n    const float MAX_TRACE_DISTANCE = 200.0;\n    \n    float totalDistance = 0.0, shapeIndex = -1.0;\n    for (int i = 0; i < 128; ++i) {\n        vec2 res = mapScene(ray_origin + totalDistance * ray_direction);\n        float minHitDistance = 0.0005 * totalDistance;\n        if (res.x < minHitDistance) {\n            shapeIndex = res.y; break; \n        }\n        if (totalDistance > MAX_TRACE_DISTANCE) break;\n        totalDistance += res.x;\n    }\n    \n\treturn vec2(totalDistance, shapeIndex);\n}\n\nfloat calculateAO( in vec3 pos, in vec3 normal )\n{\n\tfloat occlusionSum = 0.0;\n    float weight = 1.0;\n    for (int i = 0; i < 5; ++i)\n    {\n        float hr = 0.01 + 0.15 * float(i) / 4.0;\n        vec3 aoPos =  normal * hr + pos;\n        float sd = sdScene(aoPos);\n        occlusionSum += -(sd - hr) * weight;\n        weight *= 0.95;\n    }\n    return pow(clamp(1.0 - occlusionSum, 0.0, 1.0), 4.0);\n}\n\nvec3 render(vec3 ray_origin, vec3 ray_direction)\n{\n\tvec3 color = pow(texture(iChannel0, ray_direction).rgb, vec3(2.2));\n    \n    vec2 res = rayMarch(ray_origin, ray_direction);\n    int shapeIndex = int(res.y);\n    if (shapeIndex >= 0) {\n        vec3 pos = ray_origin + ray_direction * res.x;\n        vec3 normal = calculateNormal(pos);\n\t\tvec3 lightDir = normalize(vec3(1, 1, 1));\n\t\tfloat diff = max(0.0, dot(normal, lightDir));\n        float ao = calculateAO(pos, normal);\n        float shadow = shadowRayMarch(pos, lightDir);\n\t\t\n\t\tvec3 ambient = mix(vec3(0.07), vec3(0.05, 0.1, 0.15), normal.y * 0.5 + 0.5);\n\t\tvec3 lightCol = vec3(1.0 ,0.7, 0.6);\n    \n\t\tvec3 lighting = shadow * diff * lightCol + ambient * ao;\n\n        Material mat = shape_materials[shapeIndex];\n\t\tcolor = mat.albedo * lighting;\n       \n   \t\t// reflection mapping\n\t\tvec3 reflection = reflect(ray_direction, normal);\n\t\tvec3 refMap = pow(texture(iChannel0, reflection).rgb, vec3(2.2));\n\t\tvec3 fresnel = mix(mat.fresnelColor, vec3(1.0 - mat.roughness), pow(dot(normal, ray_direction) + 1.0, 5.0));\n\t\tcolor = mix(color.rgb, refMap, fresnel);\n    }\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    vec3 totalColor = vec3(0.0);\n    vec3 rayOrigin = vec3(0.0, 1.0, 20.0);\n    \n    vec2 angle = vec2(0.2 * iTime, -0.4);\n\tif (iMouse.z > 0.0) angle.x = (iMouse.x / iResolution.x - 0.5) * 3.14;\n    rayOrigin = rotateYX(rayOrigin, angle);\n    \n    for (int i = 0; i < AA; ++i)\n    for (int k = 0; k < AA; ++k)\n    {\n        vec2 offset = vec2(float(i) + .5, float(k) + .5) / float(AA) - .5;\n        vec2 uv = (fragCoord + offset - iResolution.xy * 0.5) / iResolution.x;\n        \n      \tvec3 rayDirection = normalize(vec3(uv, -1.0));\n\t\trayDirection = rotateYX(rayDirection, angle);\n\n   \t\tvec3 color = render(rayOrigin, rayDirection);\n        color = pow(color, vec3(0.4545));\n        \n        totalColor += color;\n    }         \n    \n\ttotalColor /= float(AA * AA);\n\tfragColor = vec4(totalColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define\tAA 2\n\nstruct Material \n{\n\tvec3 albedo;\n    vec3 fresnelColor;\n    float roughness;\n};\n\nvec3 rotateYX(vec3 vector, vec2 angle) \n{\n    vector.yz = cos(angle.y) * vector.yz + sin(angle.y) * vec2(-1, 1) * vector.zy;\n    vector.xz = cos(angle.x) * vector.xz + sin(angle.x) * vec2(-1, 1) * vector.zx;\n    return vector;\n}\n\nvec3 rotateZ(in vec3 v, float a)\n{\n    return vec3(cos(a) * v.x - sin(a) * v.y, sin(a) * v.x + cos(a) * v.y, v.z);\n}\n\nfloat smax(float a, float b, float k)\n{\n    float h = max(k - abs(a - b), 0.0);\n    return max(a, b) + h * h * 0.25 / k;\n}\n\n//distance operations\nvec2 opUnion(vec2 a, vec2 b) { return a.x < b.x ? a : b; }\n\nfloat opSub(float a, float b) { return max(-a, b); } //substraction\n\n//distance functions\nfloat sdSphere(vec3 pos, float radius) { return length(pos) - radius; }\n\nfloat sdPlane(vec3 pos, vec3 normal) { return dot(pos, normal); }\n\nfloat sdEllipsoid(vec3 pos, vec3 size)\n{\n    return (length( pos / size ) - 1.0) * min(min(size.x, size.y), size.z);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}