{
    "Shader": {
        "info": {
            "date": "1634063115",
            "description": "A simple walking duck. I asked rimina to do a duck during a stream, so I decided to do one myself as well!",
            "flags": 0,
            "hasliked": 0,
            "id": "7d3SDf",
            "likes": 6,
            "name": "Boxyduck",
            "published": 3,
            "tags": [
                "sdf",
                "walking",
                "duck"
            ],
            "usePreview": 0,
            "username": "eimink",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "// A very simple duck that's walking.\n// Shoutout to rimina! :)\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvoid rot(inout vec2 p, float a) {\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nvec2 opU(vec2 d1, vec2 d2)\n{\n    return (d1.x < d2.x) ? d1 : d2;\n}\n\nfloat llength = .4;\nfloat lspread = .4;\nfloat wspeedmod = 4.;\nfloat wstridemod = .2;\n\nstruct MarchResult\n{\n    vec3 p;\n    float id;\n};\n\n\nvec2 sdf(vec3 p){\n   vec3 pp = p;\n\n   pp = pp - vec3(1.+sin(iTime*wspeedmod*2.)*.02,.7,.0);\n   float head = sdBox(pp,vec3(.5,.4,.5));\n   vec3 ppp = pp - vec3(.7,-.1,.0);\n   float beak = sdBox(ppp,vec3(.2,.08,.2));\n   pp.z = abs(pp.z);\n   pp = pp - vec3(.5,.2,.3);\n   float eyes = sdBox(pp,vec3(.1,.1,.1));\n   \n   vec2 h = opU(vec2(eyes,1.0),opU(vec2(beak,2.0),vec2(head,3.0)));\n\n   pp = p;\n   rot(pp.xz,-sin(iTime*wspeedmod)*.1);\n   float body = sdBox(pp,vec3(1.,.6,.8));\n   pp = pp - vec3(-1.1+sin(iTime*wspeedmod*2.)*.02,.7,.0);\n   rot(pp.xz,sin(iTime*wspeedmod)*.1);\n   float tail = sdBox(pp,vec3(.4,.1,.6));\n   body = min(tail,body); \n   vec2 b = opU(vec2(body,3.0),h);\n   \n   pp = p;\n   rot(pp.xy,sin(iTime*wspeedmod)*wstridemod);\n   pp = pp - vec3(0.,-1.,lspread);\n   float lleg = sdBox(pp,vec3(.1,llength,.2));\n   lleg = min(lleg,sdBox(pp-vec3(.2,-llength,.0),vec3(.4,.1,.2)));\n   \n   pp = p;\n   rot(pp.xy,-sin(iTime*wspeedmod)*wstridemod);\n   pp = pp - vec3(0.,-1.,-lspread);\n   float rleg = sdBox(pp,vec3(.1,llength,.2));\n   rleg = min(rleg,sdBox(pp-vec3(.2,-llength,.0),vec3(.4,.1,.2)));\n   float legs = min(lleg,rleg);\n   \n   return opU(vec2(legs,2.0),b);\n\n}\n\nMarchResult march(in vec3 ro, in vec3 rd, inout float t){\n\n    MarchResult m;\n    m.p = ro+rd;\n    for(int i = 0; i < 40; ++i){\n        vec2 d = sdf(m.p);\n        t += d.x;\n        m.p += rd*d.x;\n        m.id = d.y;\n        \n        if(d.x < 0.01 || t > 100.){\n            break;\n        }\n        \n    }\n    \n    return m;\n}\n\nvec3 color(in float id)\n{\n    if (id == 1.0)\n        return vec3(0.1);\n    else if (id == 2.0)\n        return vec3(.8,.3,.2);\n    else if (id == 3.0)\n        return vec3(.8,.7,.4);\n    else\n        return vec3(0);\n}\nvec3 calcNormal( in vec3 pos) \n{\n    vec2 e = vec2(0.00001, 0.0);\n    return normalize( vec3(sdf(pos+e.xyy).x-sdf(pos-e.xyy).x,\n                           sdf(pos+e.yxy).x-sdf(pos-e.yxy).x,\n                           sdf(pos+e.yyx).x-sdf(pos-e.yyx).x ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 cp = vec3(3.,2.0,3.);\n    vec3 ct = vec3(0,0,0);\n    vec3 ld = vec3(-2.,0.5,2.);\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 cf = normalize(ct-cp);\n    vec3 cr = normalize(cross(vec3(0.0,1.0,0.0),cf));\n    vec3 cu = normalize(cross(cf,cr));\n    \n    vec3 rd = normalize(mat3(cr,cu,cf)*vec3(q,radians(90.0)));\n    \n    vec3 p = vec3(0.0);\n    \n    float t;\n    MarchResult m;\n    m.p = vec3(0.0);\n    m.id = 0.0;\n    m = march(cp,rd,t);\n    \n    vec3 col = vec3(0.0);\n    if(t < 100.){\n        col = color(m.id) + (clamp(dot(calcNormal(m.p), ld), 0.0, 1.0)*0.1);\n        \n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}