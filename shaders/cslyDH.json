{
    "Shader": {
        "info": {
            "date": "1686776897",
            "description": "See comments for details. Use mouse to scrub time.",
            "flags": 0,
            "hasliked": 0,
            "id": "cslyDH",
            "likes": 4,
            "name": "Fork HODL romanscz 529",
            "published": 3,
            "tags": [
                "crypto",
                "coin",
                "blockchain",
                "bitcoin",
                "btc",
                "nft",
                "currency"
            ],
            "usePreview": 0,
            "username": "romanscz",
            "viewed": 259
        },
        "renderpass": [
            {
                "code": "// \"HODL\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// I had started a bitcoin texture a couple of years ago but\n// never finished it. With the recent bullrun I got motivated\n// again to finish it. I tried to use symmetries as much as possible\n// but in the end, its still a shitload of manual tweaks because\n// the thing really isn't as symmetrical as it looks. Oww well.\n//\n// Music: Fly Me To The Moon (prod. ibrahim) - Going Spaceward\n// https://soundcloud.com/going-spaceward/fly-me-to-the-moon\n\n//#define SHOW_COIN_TEXTURE\n//#define SHOW_BACKGROUND\n\n// \"HODL\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// Background layer. See my tutorial about this here:\n// https://www.youtube.com/watch?v=3CycKKJiwis\n\n#define S smoothstep\n#define NUM_LAYERS 2.\n\nfloat Line(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 \n        pa = p - a, \n        ba = b - a;\n        \n\tfloat h = clamp(dot(pa,ba) / dot(ba,ba), 0., 1.);\n\t\n    return length(pa - ba * h);\n}\n\nfloat N21(vec2 p) {\n\tvec3 a = fract(vec3(p.xyx) * vec3(213.897, 653.453, 253.098));\n    a += dot(a, a.yzx + 79.76);\n    return fract((a.x + a.y) * a.z);\n}\n\nvec4 GetProgress(float T, vec2 M) {\n    T += M.x/.03; \n    float \n        t = fract(T*.03),\n        y = t*(1.-t)*4.;\n    return vec4(t, 1.-abs(t-.5)*2., y, y*75.);\n}\n\nvec3 GetBgCol(float T) {\n    return vec3(1., .7, .2).brg;\n}\n\nvec2 GetPos(vec2 id, vec2 offs, float t) {\n    float \n        n = N21(id+offs),\n        n1 = fract(n*10.),\n        n2 = fract(n*100.),\n        a = t+n;\n        \n    return offs + vec2(sin(a*n1), cos(a*n2))*.4;\n}\n\nfloat Connect(vec2 a, vec2 b, vec2 uv, float t) {\n    t = .5-abs(t-.5);\n    float \n        d = Line(uv, a, b),\n        d2 = length(a-b),\n        fade = S(1.5, .5, d2+t)*S(.9,.6, t*2.),\n        r = 6./iResolution.y;\n    \n    return S(r, 0., d)*fade;\n}\n\nfloat NetLayer(vec2 st, float n, float T) {\n    vec2 \n        id = floor(st)+n,\n        p[9];\n\n    float \n        t = iTime+10.,\n        m=0., d, s,\n        pulse, sparkle=0.;\n    \n    st = fract(st)-.5;\n    \n    int i=0;\n    for(float y=-1.; y<=1.; y++) {\n    \tfor(float x=-1.; x<=1.; x++) {\n            p[i++] = GetPos(id, vec2(x,y), t);\n    \t}\n    }\n    \n    for(int i=0; i<9; i++) {\n        m += Connect(p[4], p[i], st, T);\n\n        d = length(st-p[i]);\n\n        s = (.0005/(d*d));\n        s *= S(1., 0.1, d);\n        pulse = sin((fract(p[i].x)+fract(p[i].y)+t)*2.)*.4+.6;\n\n        s *= pulse;\n        sparkle += s;\n    }\n    \n    m += Connect(p[1], p[3], st, T);\n\tm += Connect(p[1], p[5], st, T);\n    m += Connect(p[7], p[5], st, T);\n    m += Connect(p[7], p[3], st, T);\n    m += sparkle*S(.05, .5, abs(T-.5));\n    \n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {   \n    float \n        t, y, m = 0., r, d, glow, moon;\n        \n    vec2 \n        uv = (fragCoord-iResolution.xy*.5)/iResolution.y,\n        M = iMouse.xy/iResolution.xy,\n        st = uv;\n    \n    t = 1.;\n    \n    for(float i=0.; i<1.; i+=1./NUM_LAYERS) {\n        float \n            size = mix(15., 1., i),\n            fade = S(0., .6, i)*S(1., .8, i);\n            \n        m += fade * NetLayer(st*size, i, t);\n    }\n\t\n    vec3 \n        baseCol = GetBgCol(iTime),\n        col = baseCol*m*.2;\n    \n    //col += baseCol*(exp(offs.y/10.)+glow*glow);\n    \n    fragColor = vec4(min(col,vec3(1)),1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}