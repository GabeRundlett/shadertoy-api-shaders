{
    "Shader": {
        "info": {
            "date": "1657845202",
            "description": "shader fragrange",
            "flags": 32,
            "hasliked": 0,
            "id": "7dyBRm",
            "likes": 29,
            "name": "Smell of Burning Plastic",
            "published": 3,
            "tags": [
                "fire",
                "smoke",
                "plastic"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 654
        },
        "renderpass": [
            {
                "code": "\n// Smell of Burning Plastic\n// revisiting Liquid Toy https://www.shadertoy.com/view/fljBWc\n// with gyroid turbulences and a burning floor context\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 blue = texture(iChannel1, fragCoord/1024.).rgb;\n    vec3 color = vec3(0);\n    \n    // masks\n    float shade = texture(iChannel0, uv).r;\n    float flame = pow(shade, 6.);\n    float smoke = pow(shade, .5);\n    float height = flame;\n    \n    // normal\n    float range = 30.*blue.x;\n    vec3 unit = vec3(range/iResolution.xy,0);\n    vec3 normal = normalize(vec3(\n        TEX(uv + unit.xz)-TEX(uv - unit.xz),\n        TEX(uv - unit.zy)-TEX(uv + unit.zy),\n        height));\n        \n    // lighting\n    vec3 tint = .5+.5*cos(vec3(0,.3,.6)*6.28-flame*4.-4.);\n    vec3 dir = normalize(vec3(0,-.5,0.5));\n    float light = dot(normal, dir)*.5+.5;\n    light = pow(light,.5);\n    light *= (uv.y+.5); \n    color += tint * flame;\n    color += vec3(.5) * light;\n    color *= smoke;\n    color -= .1*blue.x;\n    color += smoothstep(.1,.0,1.-shade);\n    \n    // show layers\n    if (iMouse.z > 0.5) {\n        if (iMouse.x < 20.) {\n            if (uv.x < .25) {\n                color = vec3(shade);\n            } else if (uv.x < .5) {\n                color = normal;\n            } else if (uv.x < .75) {\n                color = tint;\n            } else {\n                color = vec3(.5)*light;\n            }\n        }\n    }\n    \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// fbm gyroid cyclic noise\nfloat gyroid (vec3 seed) { return dot(sin(seed),cos(seed.yzx)); }\nfloat fbm (vec3 seed) {\n    float result = 0.;\n    float a = .5;\n    for (int i = 0; i < 4; ++i) {\n        result += sin(gyroid(seed/a)*3.14+iTime/a)*a;\n        a /= 2.;\n    }\n    return result;\n}\n\n// the fluidish simulacre\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    vec3 blue = texture(iChannel1, fragCoord/1024.).rgb;\n    \n    float dt = iTimeDelta;\n    float current = texture(iChannel0, uv).r;\n    \n    // shape\n    float shape = p.y+.5;\n    \n    // mouse interaction\n    if (iMouse.z > 0.5) {\n        vec2 mouse = (iMouse.xy-iResolution.xy/2.)/iResolution.y;\n        shape = min(shape, length(p-mouse)-.01);\n    }\n    \n    \n    // masks\n    float shade = smoothstep(.01,.0,shape);\n    float smoke = pow(uv.y,.5);\n    float flame = 1.-uv.y;\n    float steam = pow(current, 0.2);\n    float cycle = .5 + .5 * sin(iTime-uv.x*3.);\n    \n    vec2 offset = vec2(0);\n    \n    // gravity\n    offset += vec2(0,-1) * flame * cycle * steam;\n    \n    // wind\n    //offset.x += sin(iTime*.2);\n    //offset += 3.*normalize(p*rot(.1)-p) * smoothstep(.1,.0,abs(length(p)-.5));\n    \n    // expansion\n    vec4 data = texture(iChannel0, uv);\n    vec3 unit = vec3(20.*blue.x/iResolution.xy,0);\n    vec3 normal = normalize(vec3(\n        TEX(uv - unit.xz)-TEX(uv + unit.xz),\n        TEX(uv - unit.zy)-TEX(uv + unit.zy),\n        data.x*data.x*data.x)+.001);\n    offset -= normal.xy * (smoke + cycle) * steam;\n    \n    // turbulence\n    vec3 seed = vec3(p*2.,p.y);\n    float angle = fbm(seed)*6.28*2.;\n    offset += vec2(cos(angle),sin(angle)) * flame;\n    \n    // energy loss\n    vec4 frame = texture(iChannel0, uv+offset/iResolution.xy);\n    shade = max(shade, frame.r-dt*.2);\n    fragColor = vec4(shade);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define TEX(uv) texture(iChannel0, uv).r\nmat2 rot (float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}