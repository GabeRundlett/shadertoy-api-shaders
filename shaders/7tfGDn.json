{
    "Shader": {
        "info": {
            "date": "1621872912",
            "description": "Metallic slime (mercury?) in channels formed by random rectangular tiling (mouseable, click upper-right for new run)",
            "flags": 32,
            "hasliked": 0,
            "id": "7tfGDn",
            "likes": 13,
            "name": "Green Mercury",
            "published": 3,
            "tags": [
                "collision",
                "metaballs",
                "dynamics",
                "physics"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 372
        },
        "renderpass": [
            {
                "code": "// \"Green Mercury\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// (Mix of \"Channeling Slime\" and \"Marble Paths\")\n\nfloat PrSphDf (vec3 p, float r);\nfloat Minv2 (vec2 p);\nfloat SmoothMin (float a, float b, float r);\nvec2 Rot2D (vec2 q, float a);\nmat3 DirVuMat (vec3 vd);\nfloat Hashfv2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\n#define VAR_ZERO min (iFrame, 0)\n\n\nconst int nBall = 60;\nvec3 vnObj, ltDir;\nfloat tCur, dstFar, surfHt, surfScl;\nint idBall;\nconst float pi = 3.1415927;\n\nfloat RandRect (vec2 p)\n{\n  vec4 hm, hc;\n  vec3 e;\n  vec2 pMid[4], pEdge[4], ip;\n  float dMin, hp, eFac;\n  ip = floor (p) + 0.5;\n  e = vec3 (-1., 0., 1.);\n  hp = Hashfv2 (ip);\n  hm = vec4 (Hashfv2 (ip + e.zy), Hashfv2 (ip + e.xy), Hashfv2 (ip + e.yz), Hashfv2 (ip + e.yx));\n  hc = vec4 (Hashfv2 (ip + e.zz), Hashfv2 (ip + e.xx), Hashfv2 (ip + e.xz), Hashfv2 (ip + e.zx));\n  if (mod (ip.x + ip.y, 2.) < 0.5) {\n    pEdge[0] = vec2 (hm.z - hm.y, hc.z - hp);\n    pEdge[1] = vec2 (hm.x - hm.z, hc.x - hp);\n    pEdge[2] = vec2 (hm.x - hm.w, hp - hc.w);\n    pEdge[3] = vec2 (hm.w - hm.y, hp - hc.y);\n    pMid[0] = vec2 (hm.z, hp);\n    pMid[1] = pMid[0];\n    pMid[2] = vec2 (hm.w, hp);\n    pMid[3] = pMid[2];\n  } else {\n    pEdge[0] = vec2 (hp - hc.z, hm.z - hm.y);\n    pEdge[1] = vec2 (hc.x - hp, hm.z - hm.x);\n    pEdge[2] = vec2 (hc.w - hp, hm.x - hm.w);\n    pEdge[3] = vec2 (hp - hc.y, hm.y - hm.w);\n    pMid[0] = vec2 (hp, hm.y);\n    pMid[1] = vec2 (hp, hm.x);\n    pMid[2] = pMid[1];\n    pMid[3] = pMid[0];\n  }\n  eFac = 0.3;\n  for (int k = 0; k < 4; k ++) {\n    pEdge[k] = eFac * pEdge[k] + 0.5;\n    pMid[k] = 2. * eFac * (pMid[k] - 0.5);\n  }\n  pMid[0] += pEdge[0] * e.xz;\n  pMid[1] += pEdge[1] * e.zz;\n  pMid[2] += pEdge[2] * e.zx;\n  pMid[3] += pEdge[3] * e.xx;\n  dMin = 1e6;\n  for (int k = 0; k < 4; k ++) \n     dMin = min (dMin, length (max (abs (p - ip - pMid[k]) - pEdge[k] + eFac - 0.05, 0.)) - 0.01);\n  return dMin;\n}\n\nfloat SurfHt (vec2 p)\n{\n  return surfHt * (1. - smoothstep (0., 0.2, RandRect (surfScl * p)));\n}\n\nfloat SurfRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  dHit = dstFar;\n  s = - (ro.y - surfHt) / rd.y;\n  sLo = s;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + s * rd;\n    h = p.y - SurfHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.2, 0.4 * h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = VAR_ZERO; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (p.y > SurfHt (p.xz)) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nvec3 SurfNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return normalize (vec3 (SurfHt (p.xz) - vec2 (SurfHt (p.xz + e.xy), SurfHt (p.xz + e.yx)), e.x).xzy);\n}\n\nfloat ObjDf (vec3 p)\n{\n  float d;\n  d = dstFar;\n  for (int n = VAR_ZERO; n < nBall; n ++)\n     d = SmoothMin (d, PrSphDf (p - Loadv4 (3 * n).xyz, 0.45), 2.);\n  return d;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.03 * d, h));\n    d += h;\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, bgCol;\n  float dstObj, dstSurf, sh, nDotL;\n  bgCol = vec3 (0.6, 0.6, 0.55);\n  dstObj = ObjRay (ro, rd);\n  dstSurf = (rd.y < 0.) ? SurfRay (ro, rd) : dstFar;\n  col = bgCol;\n  if (min (dstObj, dstSurf) < dstFar) {\n    sh = 1.;\n    if (dstObj < dstSurf) {\n      ro += dstObj * rd;\n      col4 = vec4 (0.7, 0.8, 0.2, 0.3);\n      vn = ObjNf (ro);\n    } else {\n      ro += dstSurf * rd;\n      col4 = vec4 (mix (vec3 (0.4, 0.3, 0.2), vec3 (0.6, 0.6, 0.5),\n         smoothstep (0., 0.1, ro.y)), 0.05);\n      vn = VaryNf (2. * ro, SurfNf (ro), 1. - smoothstep (0.5, 0.7, dstSurf / dstFar));\n      sh = ObjSShadow (ro + 0.01 * ltDir, ltDir);\n    }\n    nDotL = max (dot (vn, ltDir), 0.);\n    if (dstObj < dstSurf) nDotL *= nDotL;\n    col = col4.rgb * (0.2 + 0.8 * sh * nDotL) +\n       col4.a * step (0.95, sh) * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.);\n    col = mix (bgCol, col, min (1., exp2 (8. * (1. - 1.2 * min (dstObj, dstSurf) / dstFar))));\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA    0\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat, mPtr, bMid;\n  vec3 col, rd, ro;\n  vec2 canvas, uv;\n  float az, el, asp, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  asp = canvas.x / canvas.y;\n  stDat = Loadv4 (3 * nBall + 0);\n  surfHt = stDat.x;\n  surfScl = stDat.y;\n  mPtr.xyz = Loadv4 (3 * nBall + 1).xyz;\n  if (mPtr.z > 0. && Minv2 (mPtr.xy + 0.05 * vec2 (1. / asp, 1.) - 0.5) < 0.) {\n    az = -2. * pi * mPtr.x;\n    el = -0.5 * pi * mPtr.y;\n  } else {\n    az = 0.;\n    el = 0.;\n  }\n  az -= 0.01 * pi * tCur;\n  el = clamp (el + pi * (0.17 + 0.1 * sin (0.031 * pi * tCur)), 0.05 * pi, 0.4 * pi);\n  bMid = Loadv4 (3 * nBall + 2);\n  ro = bMid.xyz + min (5. * bMid.w, 120.) * vec3 (cos (el) * sin (az + vec2 (0.5 * pi, 0.)), 2. * sin (el)).xzy;\n  vuMat = DirVuMat (normalize (bMid.xyz - ro));\n  zmFac = 4.;\n  dstFar = 250.;\n  ltDir = vuMat * normalize (vec3 (1., 2., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  if (mPtr.z > 0. && Minv2 (uv - vec2 (asp, 1.)) > -0.1) col = mix (col, vec3 (1., 0.3, 0.), 0.3);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}  \n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 DirVuMat (vec3 vd)\n{\n  float s;\n  s = sqrt (max (1. - vd.y * vd.y, 1e-6));\n  return mat3 (vec3 (vd.z, 0., - vd.x) / s, vec3 (- vd.y * vd.x, 1. - vd.y * vd.y,\n     - vd.y * vd.z) / s, vd);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Green Mercury\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Maxv2 (vec2 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nvec3 Hashv3f (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nBall = 60;\nfloat todCur, nStep, surfHt, surfScl;\nconst float pi = 3.14159;\nconst float txRow = 128.;\n\n#define VAR_ZERO min (iFrame, 0)\n\nfloat RandRect (vec2 p)\n{\n  vec4 hm, hc;\n  vec3 e;\n  vec2 pMid[4], pEdge[4], ip;\n  float dMin, hp, eFac;\n  ip = floor (p) + 0.5;\n  e = vec3 (-1., 0., 1.);\n  hp = Hashfv2 (ip);\n  hm = vec4 (Hashfv2 (ip + e.zy), Hashfv2 (ip + e.xy), Hashfv2 (ip + e.yz), Hashfv2 (ip + e.yx));\n  hc = vec4 (Hashfv2 (ip + e.zz), Hashfv2 (ip + e.xx), Hashfv2 (ip + e.xz), Hashfv2 (ip + e.zx));\n  if (mod (ip.x + ip.y, 2.) < 0.5) {\n    pEdge[0] = vec2 (hm.z - hm.y, hc.z - hp);\n    pEdge[1] = vec2 (hm.x - hm.z, hc.x - hp);\n    pEdge[2] = vec2 (hm.x - hm.w, hp - hc.w);\n    pEdge[3] = vec2 (hm.w - hm.y, hp - hc.y);\n    pMid[0] = vec2 (hm.z, hp);\n    pMid[1] = pMid[0];\n    pMid[2] = vec2 (hm.w, hp);\n    pMid[3] = pMid[2];\n  } else {\n    pEdge[0] = vec2 (hp - hc.z, hm.z - hm.y);\n    pEdge[1] = vec2 (hc.x - hp, hm.z - hm.x);\n    pEdge[2] = vec2 (hc.w - hp, hm.x - hm.w);\n    pEdge[3] = vec2 (hp - hc.y, hm.y - hm.w);\n    pMid[0] = vec2 (hp, hm.y);\n    pMid[1] = vec2 (hp, hm.x);\n    pMid[2] = pMid[1];\n    pMid[3] = pMid[0];\n  }\n  eFac = 0.3;\n  for (int k = 0; k < 4; k ++) {\n    pEdge[k] = eFac * pEdge[k] + 0.5;\n    pMid[k] = 2. * eFac * (pMid[k] - 0.5);\n  }\n  pMid[0] += pEdge[0] * e.xz;\n  pMid[1] += pEdge[1] * e.zz;\n  pMid[2] += pEdge[2] * e.zx;\n  pMid[3] += pEdge[3] * e.xx;\n  dMin = 1e6;\n  for (int k = 0; k < 4; k ++) \n     dMin = min (dMin, length (max (abs (p - ip - pMid[k]) - pEdge[k] + eFac - 0.05, 0.)) - 0.01);\n  return dMin;\n}\n\nfloat SurfHt (vec2 p)\n{\n  return surfHt * (1. - smoothstep (0., 0.2, RandRect (surfScl * p)));\n}\n\nvec3 SurfNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return normalize (vec3 (SurfHt (p.xz) - vec2 (SurfHt (p.xz + e.xy), SurfHt (p.xz + e.yx)), e.x).xzy);\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec3 wm)\n{\n  vec3 rmN, vmN, wmN, dr, dv, am, wam;\n  float fOvlap, fricN, fricT, fricS, fricSW, fDamp, fPull, fAttr, grav, rSep,\n     fc, ft, drv, dt;\n  fOvlap = 500.;\n  fricN = 10.;\n  fricS = 0.1;\n  fricSW = 1.;\n  fricT = 0.5;\n  fPull = 0.5;\n  fAttr = 0.1;\n  fDamp = 0.5;\n  grav = 10.;\n  rm = Loadv4 (3 * mId).xyz;\n  vm = Loadv4 (3 * mId + 1).xyz;\n  wm = Loadv4 (3 * mId + 2).xyz;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    rmN = Loadv4 (3 * n).xyz;\n    dr = rm - rmN;\n    rSep = length (dr);\n    if (n != mId && rSep < 1.) {\n      fc = fOvlap * (1. / rSep - 1.);\n      vmN = Loadv4 (3 * n + 1).xyz;\n      wmN = Loadv4 (3 * n + 2).xyz;\n      dv = vm - vmN;\n      drv = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * drv, 0.);\n      am += fc * dr;\n      dv -= drv * dr + cross (0.5 * (wm + wmN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n    am += ((n / (nBall / 5) == mId / (nBall / 5) && abs (float (n - mId)) <= 1.) ? 1. : 0.0005) *\n       fAttr * (rmN - rm);\n  }\n  dr.xz = 0.5 * SurfNf (rm).xz;\n  dr.y = rm.y + 0.5 - SurfHt (rm.xz - dr.xz);\n  rSep = length (dr);\n  if (rSep < 1.) {\n    fc = fOvlap * (1. / rSep - 1.);\n    dv = vm;\n    drv = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * drv, 0.);\n    am += fc * dr;\n    dv -= drv * dr + cross (wm, dr);\n    ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  am += vec3 (Rot2D (vec2 (fPull, 0.), pi * (0.25 + 0.1 * sin (0.001 * nStep))),\n     - grav).xzy - fDamp * vec3 (1., 5., 1.) * vm;\n  dt = 0.02;\n  vm += dt * am ;\n  rm += dt * vm;\n  wm += dt * wam / 0.1;\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec3 wm)\n{\n  float mIdf;\n  mIdf = float (mId);\n  rm.xz = 0.7 * mIdf * vec2 (1., -1.) + 35. * mod (todCur, 10.);\n  rm.y = surfHt + 1.5;\n  vm = Hashv3f (mIdf + todCur) - 0.5;\n  wm = vec3 (0.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, bMid;\n  vec3 rm, vm, wm;\n  vec2 iFrag, canvas, b;\n  float asp;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 3 * nBall + 3) discard;\n  canvas = iResolution.xy;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  surfHt = 1.6;\n  surfScl = 0.125;\n  mId = (pxId < 3 * nBall) ? pxId / 3 : -1;\n  doInit = (iFrame <= 5);\n  if (! doInit) {\n    nStep = Loadv4 (3 * nBall).z;\n    ++ nStep;\n    mPtrP.z = Loadv4 (3 * nBall + 1).z;\n    if (mPtr.z > 0. && mPtrP.z < 0. && Maxv2 (mPtr.xy - 0.5 - vec2 (0.05 / asp, - 0.05)) > 0. &&\n       nStep > 100.) doInit = true;\n  }\n  if (doInit) nStep = 0.;\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, wm);\n    else Step (mId, rm, vm, wm);\n  }\n  if (pxId == 3 * nBall + 2) {\n    bMid = vec4 (0.);\n    for (int n = VAR_ZERO; n < nBall; n ++) {\n      b = Loadv4 (3 * n).xz;\n      bMid.xzw += vec3 (b, dot (b, b));\n    }\n    bMid.xz /= float (nBall);\n    bMid.y = 0.1;\n    bMid.w = sqrt (max (bMid.w / float (nBall) - dot (bMid.xz, bMid.xz), 0.));\n  }\n  if (pxId < 3 * nBall) {\n    kp = 3 * mId;\n    if      (pxId == kp + 0) stDat = vec4 (rm, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vm, 0.);\n    else if (pxId == kp + 2) stDat = vec4 (wm, 0.);\n  } else {\n    kp = 3 * nBall;\n    if      (pxId == kp + 0) stDat = vec4 (surfHt, surfScl, nStep, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (mPtr.xyz, 0.);\n    else if (pxId == kp + 2) stDat = bMid;\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec3 Hashv3f (float p)\n{\n  return fract (sin (p + vec3 (37., 39., 41.)) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Green Mercury\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Maxv2 (vec2 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nvec3 Hashv3f (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nBall = 60;\nfloat todCur, nStep, surfHt, surfScl;\nconst float pi = 3.14159;\nconst float txRow = 128.;\n\n#define VAR_ZERO min (iFrame, 0)\n\nfloat RandRect (vec2 p)\n{\n  vec4 hm, hc;\n  vec3 e;\n  vec2 pMid[4], pEdge[4], ip;\n  float dMin, hp, eFac;\n  ip = floor (p) + 0.5;\n  e = vec3 (-1., 0., 1.);\n  hp = Hashfv2 (ip);\n  hm = vec4 (Hashfv2 (ip + e.zy), Hashfv2 (ip + e.xy), Hashfv2 (ip + e.yz), Hashfv2 (ip + e.yx));\n  hc = vec4 (Hashfv2 (ip + e.zz), Hashfv2 (ip + e.xx), Hashfv2 (ip + e.xz), Hashfv2 (ip + e.zx));\n  if (mod (ip.x + ip.y, 2.) < 0.5) {\n    pEdge[0] = vec2 (hm.z - hm.y, hc.z - hp);\n    pEdge[1] = vec2 (hm.x - hm.z, hc.x - hp);\n    pEdge[2] = vec2 (hm.x - hm.w, hp - hc.w);\n    pEdge[3] = vec2 (hm.w - hm.y, hp - hc.y);\n    pMid[0] = vec2 (hm.z, hp);\n    pMid[1] = pMid[0];\n    pMid[2] = vec2 (hm.w, hp);\n    pMid[3] = pMid[2];\n  } else {\n    pEdge[0] = vec2 (hp - hc.z, hm.z - hm.y);\n    pEdge[1] = vec2 (hc.x - hp, hm.z - hm.x);\n    pEdge[2] = vec2 (hc.w - hp, hm.x - hm.w);\n    pEdge[3] = vec2 (hp - hc.y, hm.y - hm.w);\n    pMid[0] = vec2 (hp, hm.y);\n    pMid[1] = vec2 (hp, hm.x);\n    pMid[2] = pMid[1];\n    pMid[3] = pMid[0];\n  }\n  eFac = 0.3;\n  for (int k = 0; k < 4; k ++) {\n    pEdge[k] = eFac * pEdge[k] + 0.5;\n    pMid[k] = 2. * eFac * (pMid[k] - 0.5);\n  }\n  pMid[0] += pEdge[0] * e.xz;\n  pMid[1] += pEdge[1] * e.zz;\n  pMid[2] += pEdge[2] * e.zx;\n  pMid[3] += pEdge[3] * e.xx;\n  dMin = 1e6;\n  for (int k = 0; k < 4; k ++) \n     dMin = min (dMin, length (max (abs (p - ip - pMid[k]) - pEdge[k] + eFac - 0.05, 0.)) - 0.01);\n  return dMin;\n}\n\nfloat SurfHt (vec2 p)\n{\n  return surfHt * (1. - smoothstep (0., 0.2, RandRect (surfScl * p)));\n}\n\nvec3 SurfNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return normalize (vec3 (SurfHt (p.xz) - vec2 (SurfHt (p.xz + e.xy), SurfHt (p.xz + e.yx)), e.x).xzy);\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec3 wm)\n{\n  vec3 rmN, vmN, wmN, dr, dv, am, wam;\n  float fOvlap, fricN, fricT, fricS, fricSW, fDamp, fPull, fAttr, grav, rSep,\n     fc, ft, drv, dt;\n  fOvlap = 500.;\n  fricN = 10.;\n  fricS = 0.1;\n  fricSW = 1.;\n  fricT = 0.5;\n  fPull = 0.5;\n  fAttr = 0.1;\n  fDamp = 0.5;\n  grav = 10.;\n  rm = Loadv4 (3 * mId).xyz;\n  vm = Loadv4 (3 * mId + 1).xyz;\n  wm = Loadv4 (3 * mId + 2).xyz;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    rmN = Loadv4 (3 * n).xyz;\n    dr = rm - rmN;\n    rSep = length (dr);\n    if (n != mId && rSep < 1.) {\n      fc = fOvlap * (1. / rSep - 1.);\n      vmN = Loadv4 (3 * n + 1).xyz;\n      wmN = Loadv4 (3 * n + 2).xyz;\n      dv = vm - vmN;\n      drv = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * drv, 0.);\n      am += fc * dr;\n      dv -= drv * dr + cross (0.5 * (wm + wmN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n    am += ((n / (nBall / 5) == mId / (nBall / 5) && abs (float (n - mId)) <= 1.) ? 1. : 0.0005) *\n       fAttr * (rmN - rm);\n  }\n  dr.xz = 0.5 * SurfNf (rm).xz;\n  dr.y = rm.y + 0.5 - SurfHt (rm.xz - dr.xz);\n  rSep = length (dr);\n  if (rSep < 1.) {\n    fc = fOvlap * (1. / rSep - 1.);\n    dv = vm;\n    drv = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * drv, 0.);\n    am += fc * dr;\n    dv -= drv * dr + cross (wm, dr);\n    ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  am += vec3 (Rot2D (vec2 (fPull, 0.), pi * (0.25 + 0.1 * sin (0.001 * nStep))),\n     - grav).xzy - fDamp * vec3 (1., 5., 1.) * vm;\n  dt = 0.02;\n  vm += dt * am ;\n  rm += dt * vm;\n  wm += dt * wam / 0.1;\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec3 wm)\n{\n  float mIdf;\n  mIdf = float (mId);\n  rm.xz = 0.7 * mIdf * vec2 (1., -1.) + 35. * mod (todCur, 10.);\n  rm.y = surfHt + 1.5;\n  vm = Hashv3f (mIdf + todCur) - 0.5;\n  wm = vec3 (0.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, bMid;\n  vec3 rm, vm, wm;\n  vec2 iFrag, canvas, b;\n  float asp;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 3 * nBall + 3) discard;\n  canvas = iResolution.xy;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  surfHt = 1.6;\n  surfScl = 0.125;\n  mId = (pxId < 3 * nBall) ? pxId / 3 : -1;\n  doInit = (iFrame <= 5);\n  if (! doInit) {\n    nStep = Loadv4 (3 * nBall).z;\n    ++ nStep;\n    mPtrP.z = Loadv4 (3 * nBall + 1).z;\n    if (mPtr.z > 0. && mPtrP.z < 0. && Maxv2 (mPtr.xy - 0.5 - vec2 (0.05 / asp, - 0.05)) > 0. &&\n       nStep > 100.) doInit = true;\n  }\n  if (doInit) nStep = 0.;\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, wm);\n    else Step (mId, rm, vm, wm);\n  }\n  if (pxId == 3 * nBall + 2) {\n    bMid = vec4 (0.);\n    for (int n = VAR_ZERO; n < nBall; n ++) {\n      b = Loadv4 (3 * n).xz;\n      bMid.xzw += vec3 (b, dot (b, b));\n    }\n    bMid.xz /= float (nBall);\n    bMid.y = 0.1;\n    bMid.w = sqrt (max (bMid.w / float (nBall) - dot (bMid.xz, bMid.xz), 0.));\n  }\n  if (pxId < 3 * nBall) {\n    kp = 3 * mId;\n    if      (pxId == kp + 0) stDat = vec4 (rm, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vm, 0.);\n    else if (pxId == kp + 2) stDat = vec4 (wm, 0.);\n  } else {\n    kp = 3 * nBall;\n    if      (pxId == kp + 0) stDat = vec4 (surfHt, surfScl, nStep, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (mPtr.xyz, 0.);\n    else if (pxId == kp + 2) stDat = bMid;\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec3 Hashv3f (float p)\n{\n  return fract (sin (p + vec3 (37., 39., 41.)) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Green Mercury\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Maxv2 (vec2 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nvec3 Hashv3f (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nBall = 60;\nfloat todCur, nStep, surfHt, surfScl;\nconst float pi = 3.14159;\nconst float txRow = 128.;\n\n#define VAR_ZERO min (iFrame, 0)\n\nfloat RandRect (vec2 p)\n{\n  vec4 hm, hc;\n  vec3 e;\n  vec2 pMid[4], pEdge[4], ip;\n  float dMin, hp, eFac;\n  ip = floor (p) + 0.5;\n  e = vec3 (-1., 0., 1.);\n  hp = Hashfv2 (ip);\n  hm = vec4 (Hashfv2 (ip + e.zy), Hashfv2 (ip + e.xy), Hashfv2 (ip + e.yz), Hashfv2 (ip + e.yx));\n  hc = vec4 (Hashfv2 (ip + e.zz), Hashfv2 (ip + e.xx), Hashfv2 (ip + e.xz), Hashfv2 (ip + e.zx));\n  if (mod (ip.x + ip.y, 2.) < 0.5) {\n    pEdge[0] = vec2 (hm.z - hm.y, hc.z - hp);\n    pEdge[1] = vec2 (hm.x - hm.z, hc.x - hp);\n    pEdge[2] = vec2 (hm.x - hm.w, hp - hc.w);\n    pEdge[3] = vec2 (hm.w - hm.y, hp - hc.y);\n    pMid[0] = vec2 (hm.z, hp);\n    pMid[1] = pMid[0];\n    pMid[2] = vec2 (hm.w, hp);\n    pMid[3] = pMid[2];\n  } else {\n    pEdge[0] = vec2 (hp - hc.z, hm.z - hm.y);\n    pEdge[1] = vec2 (hc.x - hp, hm.z - hm.x);\n    pEdge[2] = vec2 (hc.w - hp, hm.x - hm.w);\n    pEdge[3] = vec2 (hp - hc.y, hm.y - hm.w);\n    pMid[0] = vec2 (hp, hm.y);\n    pMid[1] = vec2 (hp, hm.x);\n    pMid[2] = pMid[1];\n    pMid[3] = pMid[0];\n  }\n  eFac = 0.3;\n  for (int k = 0; k < 4; k ++) {\n    pEdge[k] = eFac * pEdge[k] + 0.5;\n    pMid[k] = 2. * eFac * (pMid[k] - 0.5);\n  }\n  pMid[0] += pEdge[0] * e.xz;\n  pMid[1] += pEdge[1] * e.zz;\n  pMid[2] += pEdge[2] * e.zx;\n  pMid[3] += pEdge[3] * e.xx;\n  dMin = 1e6;\n  for (int k = 0; k < 4; k ++) \n     dMin = min (dMin, length (max (abs (p - ip - pMid[k]) - pEdge[k] + eFac - 0.05, 0.)) - 0.01);\n  return dMin;\n}\n\nfloat SurfHt (vec2 p)\n{\n  return surfHt * (1. - smoothstep (0., 0.2, RandRect (surfScl * p)));\n}\n\nvec3 SurfNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return normalize (vec3 (SurfHt (p.xz) - vec2 (SurfHt (p.xz + e.xy), SurfHt (p.xz + e.yx)), e.x).xzy);\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec3 wm)\n{\n  vec3 rmN, vmN, wmN, dr, dv, am, wam;\n  float fOvlap, fricN, fricT, fricS, fricSW, fDamp, fPull, fAttr, grav, rSep,\n     fc, ft, drv, dt;\n  fOvlap = 500.;\n  fricN = 10.;\n  fricS = 0.1;\n  fricSW = 1.;\n  fricT = 0.5;\n  fPull = 0.5;\n  fAttr = 0.1;\n  fDamp = 0.5;\n  grav = 10.;\n  rm = Loadv4 (3 * mId).xyz;\n  vm = Loadv4 (3 * mId + 1).xyz;\n  wm = Loadv4 (3 * mId + 2).xyz;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    rmN = Loadv4 (3 * n).xyz;\n    dr = rm - rmN;\n    rSep = length (dr);\n    if (n != mId && rSep < 1.) {\n      fc = fOvlap * (1. / rSep - 1.);\n      vmN = Loadv4 (3 * n + 1).xyz;\n      wmN = Loadv4 (3 * n + 2).xyz;\n      dv = vm - vmN;\n      drv = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * drv, 0.);\n      am += fc * dr;\n      dv -= drv * dr + cross (0.5 * (wm + wmN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n    am += ((n / (nBall / 5) == mId / (nBall / 5) && abs (float (n - mId)) <= 1.) ? 1. : 0.0005) *\n       fAttr * (rmN - rm);\n  }\n  dr.xz = 0.5 * SurfNf (rm).xz;\n  dr.y = rm.y + 0.5 - SurfHt (rm.xz - dr.xz);\n  rSep = length (dr);\n  if (rSep < 1.) {\n    fc = fOvlap * (1. / rSep - 1.);\n    dv = vm;\n    drv = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * drv, 0.);\n    am += fc * dr;\n    dv -= drv * dr + cross (wm, dr);\n    ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  am += vec3 (Rot2D (vec2 (fPull, 0.), pi * (0.25 + 0.1 * sin (0.001 * nStep))),\n     - grav).xzy - fDamp * vec3 (1., 5., 1.) * vm;\n  dt = 0.02;\n  vm += dt * am ;\n  rm += dt * vm;\n  wm += dt * wam / 0.1;\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec3 wm)\n{\n  float mIdf;\n  mIdf = float (mId);\n  rm.xz = 0.7 * mIdf * vec2 (1., -1.) + 35. * mod (todCur, 10.);\n  rm.y = surfHt + 1.5;\n  vm = Hashv3f (mIdf + todCur) - 0.5;\n  wm = vec3 (0.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, bMid;\n  vec3 rm, vm, wm;\n  vec2 iFrag, canvas, b;\n  float asp;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 3 * nBall + 3) discard;\n  canvas = iResolution.xy;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  surfHt = 1.6;\n  surfScl = 0.125;\n  mId = (pxId < 3 * nBall) ? pxId / 3 : -1;\n  doInit = (iFrame <= 5);\n  if (! doInit) {\n    nStep = Loadv4 (3 * nBall).z;\n    ++ nStep;\n    mPtrP.z = Loadv4 (3 * nBall + 1).z;\n    if (mPtr.z > 0. && mPtrP.z < 0. && Maxv2 (mPtr.xy - 0.5 - vec2 (0.05 / asp, - 0.05)) > 0. &&\n       nStep > 100.) doInit = true;\n  }\n  if (doInit) nStep = 0.;\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, wm);\n    else Step (mId, rm, vm, wm);\n  }\n  if (pxId == 3 * nBall + 2) {\n    bMid = vec4 (0.);\n    for (int n = VAR_ZERO; n < nBall; n ++) {\n      b = Loadv4 (3 * n).xz;\n      bMid.xzw += vec3 (b, dot (b, b));\n    }\n    bMid.xz /= float (nBall);\n    bMid.y = 0.1;\n    bMid.w = sqrt (max (bMid.w / float (nBall) - dot (bMid.xz, bMid.xz), 0.));\n  }\n  if (pxId < 3 * nBall) {\n    kp = 3 * mId;\n    if      (pxId == kp + 0) stDat = vec4 (rm, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vm, 0.);\n    else if (pxId == kp + 2) stDat = vec4 (wm, 0.);\n  } else {\n    kp = 3 * nBall;\n    if      (pxId == kp + 0) stDat = vec4 (surfHt, surfScl, nStep, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (mPtr.xyz, 0.);\n    else if (pxId == kp + 2) stDat = bMid;\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec3 Hashv3f (float p)\n{\n  return fract (sin (p + vec3 (37., 39., 41.)) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Green Mercury\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Maxv2 (vec2 p);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nvec3 Hashv3f (float p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int nBall = 60;\nfloat todCur, nStep, surfHt, surfScl;\nconst float pi = 3.14159;\nconst float txRow = 128.;\n\n#define VAR_ZERO min (iFrame, 0)\n\nfloat RandRect (vec2 p)\n{\n  vec4 hm, hc;\n  vec3 e;\n  vec2 pMid[4], pEdge[4], ip;\n  float dMin, hp, eFac;\n  ip = floor (p) + 0.5;\n  e = vec3 (-1., 0., 1.);\n  hp = Hashfv2 (ip);\n  hm = vec4 (Hashfv2 (ip + e.zy), Hashfv2 (ip + e.xy), Hashfv2 (ip + e.yz), Hashfv2 (ip + e.yx));\n  hc = vec4 (Hashfv2 (ip + e.zz), Hashfv2 (ip + e.xx), Hashfv2 (ip + e.xz), Hashfv2 (ip + e.zx));\n  if (mod (ip.x + ip.y, 2.) < 0.5) {\n    pEdge[0] = vec2 (hm.z - hm.y, hc.z - hp);\n    pEdge[1] = vec2 (hm.x - hm.z, hc.x - hp);\n    pEdge[2] = vec2 (hm.x - hm.w, hp - hc.w);\n    pEdge[3] = vec2 (hm.w - hm.y, hp - hc.y);\n    pMid[0] = vec2 (hm.z, hp);\n    pMid[1] = pMid[0];\n    pMid[2] = vec2 (hm.w, hp);\n    pMid[3] = pMid[2];\n  } else {\n    pEdge[0] = vec2 (hp - hc.z, hm.z - hm.y);\n    pEdge[1] = vec2 (hc.x - hp, hm.z - hm.x);\n    pEdge[2] = vec2 (hc.w - hp, hm.x - hm.w);\n    pEdge[3] = vec2 (hp - hc.y, hm.y - hm.w);\n    pMid[0] = vec2 (hp, hm.y);\n    pMid[1] = vec2 (hp, hm.x);\n    pMid[2] = pMid[1];\n    pMid[3] = pMid[0];\n  }\n  eFac = 0.3;\n  for (int k = 0; k < 4; k ++) {\n    pEdge[k] = eFac * pEdge[k] + 0.5;\n    pMid[k] = 2. * eFac * (pMid[k] - 0.5);\n  }\n  pMid[0] += pEdge[0] * e.xz;\n  pMid[1] += pEdge[1] * e.zz;\n  pMid[2] += pEdge[2] * e.zx;\n  pMid[3] += pEdge[3] * e.xx;\n  dMin = 1e6;\n  for (int k = 0; k < 4; k ++) \n     dMin = min (dMin, length (max (abs (p - ip - pMid[k]) - pEdge[k] + eFac - 0.05, 0.)) - 0.01);\n  return dMin;\n}\n\nfloat SurfHt (vec2 p)\n{\n  return surfHt * (1. - smoothstep (0., 0.2, RandRect (surfScl * p)));\n}\n\nvec3 SurfNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return normalize (vec3 (SurfHt (p.xz) - vec2 (SurfHt (p.xz + e.xy), SurfHt (p.xz + e.yx)), e.x).xzy);\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec3 wm)\n{\n  vec3 rmN, vmN, wmN, dr, dv, am, wam;\n  float fOvlap, fricN, fricT, fricS, fricSW, fDamp, fPull, fAttr, grav, rSep,\n     fc, ft, drv, dt;\n  fOvlap = 500.;\n  fricN = 10.;\n  fricS = 0.1;\n  fricSW = 1.;\n  fricT = 0.5;\n  fPull = 0.5;\n  fAttr = 0.1;\n  fDamp = 0.5;\n  grav = 10.;\n  rm = Loadv4 (3 * mId).xyz;\n  vm = Loadv4 (3 * mId + 1).xyz;\n  wm = Loadv4 (3 * mId + 2).xyz;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = VAR_ZERO; n < nBall; n ++) {\n    rmN = Loadv4 (3 * n).xyz;\n    dr = rm - rmN;\n    rSep = length (dr);\n    if (n != mId && rSep < 1.) {\n      fc = fOvlap * (1. / rSep - 1.);\n      vmN = Loadv4 (3 * n + 1).xyz;\n      wmN = Loadv4 (3 * n + 2).xyz;\n      dv = vm - vmN;\n      drv = dot (dr, dv) / (rSep * rSep);\n      fc = max (fc - fricN * drv, 0.);\n      am += fc * dr;\n      dv -= drv * dr + cross (0.5 * (wm + wmN), dr);\n      ft = min (fricT, fricS * abs (fc) * rSep / max (0.001, length (dv)));\n      am -= ft * dv;\n      wam += (ft / rSep) * cross (dr, dv);\n    }\n    am += ((n / (nBall / 5) == mId / (nBall / 5) && abs (float (n - mId)) <= 1.) ? 1. : 0.0005) *\n       fAttr * (rmN - rm);\n  }\n  dr.xz = 0.5 * SurfNf (rm).xz;\n  dr.y = rm.y + 0.5 - SurfHt (rm.xz - dr.xz);\n  rSep = length (dr);\n  if (rSep < 1.) {\n    fc = fOvlap * (1. / rSep - 1.);\n    dv = vm;\n    drv = dot (dr, dv) / (rSep * rSep);\n    fc = max (fc - fricN * drv, 0.);\n    am += fc * dr;\n    dv -= drv * dr + cross (wm, dr);\n    ft = min (fricT, fricSW * abs (fc) * rSep / max (0.001, length (dv)));\n    am -= ft * dv;\n    wam += (ft / rSep) * cross (dr, dv);\n  }\n  am += vec3 (Rot2D (vec2 (fPull, 0.), pi * (0.25 + 0.1 * sin (0.001 * nStep))),\n     - grav).xzy - fDamp * vec3 (1., 5., 1.) * vm;\n  dt = 0.02;\n  vm += dt * am ;\n  rm += dt * vm;\n  wm += dt * wam / 0.1;\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec3 wm)\n{\n  float mIdf;\n  mIdf = float (mId);\n  rm.xz = 0.7 * mIdf * vec2 (1., -1.) + 35. * mod (todCur, 10.);\n  rm.y = surfHt + 1.5;\n  vm = Hashv3f (mIdf + todCur) - 0.5;\n  wm = vec3 (0.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, bMid;\n  vec3 rm, vm, wm;\n  vec2 iFrag, canvas, b;\n  float asp;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 3 * nBall + 3) discard;\n  canvas = iResolution.xy;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  surfHt = 1.6;\n  surfScl = 0.125;\n  mId = (pxId < 3 * nBall) ? pxId / 3 : -1;\n  doInit = (iFrame <= 5);\n  if (! doInit) {\n    nStep = Loadv4 (3 * nBall).z;\n    ++ nStep;\n    mPtrP.z = Loadv4 (3 * nBall + 1).z;\n    if (mPtr.z > 0. && mPtrP.z < 0. && Maxv2 (mPtr.xy - 0.5 - vec2 (0.05 / asp, - 0.05)) > 0. &&\n       nStep > 100.) doInit = true;\n  }\n  if (doInit) nStep = 0.;\n  if (mId >= 0) {\n    if (doInit) Init (mId, rm, vm, wm);\n    else Step (mId, rm, vm, wm);\n  }\n  if (pxId == 3 * nBall + 2) {\n    bMid = vec4 (0.);\n    for (int n = VAR_ZERO; n < nBall; n ++) {\n      b = Loadv4 (3 * n).xz;\n      bMid.xzw += vec3 (b, dot (b, b));\n    }\n    bMid.xz /= float (nBall);\n    bMid.y = 0.1;\n    bMid.w = sqrt (max (bMid.w / float (nBall) - dot (bMid.xz, bMid.xz), 0.));\n  }\n  if (pxId < 3 * nBall) {\n    kp = 3 * mId;\n    if      (pxId == kp + 0) stDat = vec4 (rm, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (vm, 0.);\n    else if (pxId == kp + 2) stDat = vec4 (wm, 0.);\n  } else {\n    kp = 3 * nBall;\n    if      (pxId == kp + 0) stDat = vec4 (surfHt, surfScl, nStep, 0.);\n    else if (pxId == kp + 1) stDat = vec4 (mPtr.xyz, 0.);\n    else if (pxId == kp + 2) stDat = bMid;\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec3 Hashv3f (float p)\n{\n  return fract (sin (p + vec3 (37., 39., 41.)) * cHashM);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}