{
    "Shader": {
        "info": {
            "date": "1619486819",
            "description": "A little experiment for fun. Blue --> orange gradient is where the wave-function is positive, purple --> green gradient is where the wave-function is negative.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdsXWs",
            "likes": 12,
            "name": "Orbital 2D",
            "published": 3,
            "tags": [
                "quantum",
                "wavefunction",
                "orbtial"
            ],
            "usePreview": 0,
            "username": "milesWaugh",
            "viewed": 404
        },
        "renderpass": [
            {
                "code": "float pi = 3.141592653589793;\nfloat sq2 = sqrt(2.);\nfloat transitionSpeed = 60.; //Higher is faster\n\nfloat sw(float x, float s) {\n    return (atan(s * sin(pi * x))) / (.5 * pi);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 col = vec3(0.);\n    float contour = 0.1;\n    int AA = 4; //Default value is 4x4 anti-aliasing\n    float AAA = float(AA * AA);\n\n    for(int i = 0; i < AA; i++) {\n        for(int j = 0; j < AA; j++) {\n            vec2 uv = (fragCoord + vec2(i, j) / float(AA) - iResolution.xy / 2.) / iResolution.y;\n            uv *= 7.;\n            float a = atan(uv.y / uv.x) - (uv.x < 0. ? pi : 0.);\n            a += a < 0. ? 2. * pi : 0.;\n            float d = sqrt(dot(uv, uv));\n            float mu = sw(iTime / 4., transitionSpeed);\n            mu = mu / 2. + .5;\n            float rot = iTime / 5.;\n            rot *= mu / 10. + 1.;\n            float w1 = cos(2. * a + rot) * exp(-d) * d * 2.5;\n            float w2 = cos(a + rot) * exp(-d) * d * 2.5;\n            float w = mu * w1 + w2 * (1. - mu);\n            float p = w * w;\n            p = max(min(p, 1.), 0.);\n            if(w < 0.) {\n                col += vec3(p, (-cos(pi * (p)) / 2. + .5), (1. - (acos(2. * p - 1.)) / pi)) / AAA;\n            } else {\n                col += vec3((-cos(pi * (p)) / 2. + .5), p, (1. - (acos(2. * p - 1.)) / pi)) / AAA;\n            }\n            float er = sin(pi * (p * 10. - floor(p * 10.)));\n            er -= p < 1. / 20. ? 5. : 0.;\n            er = (0.01) / (er * er);\n            col += vec3(min(er / AAA, 1. / AAA), min(0.7 * er / AAA, 1. / AAA), min(0.6 * er / AAA, 1. / AAA)) / 2.;\n        }\n    }\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}