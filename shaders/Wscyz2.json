{
    "Shader": {
        "info": {
            "date": "1601256639",
            "description": "Squelchy 'Glooper Tubes' (for a new SDF game) - Enjoy. - from in game  [url]https://www.youtube.com/watch?v=u3JePjNBRjM&feature=emb_logo[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "Wscyz2",
            "likes": 9,
            "name": "SquelcherSST",
            "published": 3,
            "tags": [
                "noise",
                "cylinder",
                "gloop",
                "squelch"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 745
        },
        "renderpass": [
            {
                "code": "// SST Squelcher\n\n#define AA 1\t// make this 2 if you are feeling cold...\n#define HEIGHT 10.\n\nvec3 _col;\n\n// prim\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n// min/max polynomial\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat smax(float a, float b, float k)\n{\n    return smin(a, b, -k);\n}\nfloat sminCol( float a, float b, float k, vec3 col1, vec3 col2 )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n    _col = mix(col1,col2,h);// -  k*h*(1.0-h);\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro)\n{\n    return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nfloat WaveletNoise(vec3 p, float z, float k) {\n    // https://www.shadertoy.com/view/wsBfzK\n    float d=0.,s=1.,m=0., a;\n    for(float i=0.; i<3.; i++) {\n        vec3 q = p*s, g=fract(floor(q)*vec3(123.34,233.53,314.15));\n    \tg += dot(g, g+23.234);\n\t\ta = fract(g.x*g.y)*1e3 +z*(mod(g.x+g.y, 2.)-1.); // add vorticity\n        q = (fract(q)-.5);\n        q = erot(q, normalize(tan(g+.1)), a);\n        d += sin(q.x*10.+z)*smoothstep(.25, .0, dot(q,q))/s;\n        p = erot(p,normalize(vec3(-1,1,0)),atan(sqrt(2.)))+i; //rotate along the magic angle\n        m += 1./s;\n        s *= k; \n    }\n    return d/m;\n}\n  \nfloat map( in vec3 pos )\n{\n    // testing 'wavelet' noise...\n    float nx = WaveletNoise(pos*0.1+vec3(0.0,iTime,0.0), iTime*3., 1.15)*1.9;\n    float nz = WaveletNoise(pos*0.1+vec3(0.0,iTime,0.0) + 10.0, iTime*3., 1.15)*1.9;\n    vec3 p2 = pos;\n    p2.x += nx;\n    p2.z += nz;\n    float d1 = sdCylinder(p2,vec2(4.0,HEIGHT))-1.0;\n    d1 = smax(d1-sin(iTime*7.0+pos.y*0.4)*1.1,d1,-3.0);\n    \n        // sphere cut\n        float rad = fract(iTime*0.1)*70.0;\n        float rad2 = clamp(rad,0.0,18.0);\n        float sphere1 = length(pos-vec3(0.0,HEIGHT+4.0-rad,0.0))-rad2;\n        float sphere2 = length(pos-vec3(0.0,((HEIGHT*2.0)+HEIGHT+4.0-rad),0.0))-rad2;\t//rad;\n        sphere1 = min(sphere1,sphere2);\n        d1 = smax(d1,sphere1,4.0);\n    _col = vec3(0.15,0.45,0.05);\n    pos.y = abs(pos.y);\n    vec3 p = pos;\n    \n    d1*=0.85;\n    \n    float d2 = sdCylinder(p-vec3(0.0,HEIGHT+2.0,0.0),vec2(10.5,0.5))-1.4;\n    d1 = sminCol(d2,d1,2.0,_col,vec3(0.05,0.15,0.4));\n    return d1;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.05;\t//0.0005\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n    float an = sin(iTime*0.8);\n    \n    //float dist = 36.0+sin(iTime)*7.0;\n    float dist = 28.0;\n    \n\tvec3 ro = vec3( dist*cos(an), sin(iTime*0.75)*14.0, dist*sin(an) );\n\t//vec3 ro = vec3( 16.0*cos(an), 0.0, 16.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raymarch\n        const float tmax = 65.0;\n        float t = 0.0;\n        for( int i=0; i<160; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n    \n        // shading/lighting\t\n        float v = 1.0-abs(p.y);\n        vec3 col = vec3(v*0.1);\n\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            \n            vec3 dir = normalize(vec3(1.0,0.7,0.0));\n\t        vec3 ref = reflect(rd, nor);\n\t        float spe = max(dot(ref, dir), 0.0);\n\t        vec3 spec = vec3(1.0) * pow(spe, 100.);\n            float dif = clamp( dot(nor,dir), 0.05, 1.0 );\n            col =  _col*dif;\n            col+=spec;\n        }\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}