{
    "Shader": {
        "info": {
            "date": "1692402075",
            "description": "All year long I'm going to just focus on truchet tiles and the likes!\n\nSimple animated truchet tiles (mouseable). ",
            "flags": 0,
            "hasliked": 0,
            "id": "7sKcRy",
            "likes": 28,
            "name": "Year of Truchets #051",
            "published": 3,
            "tags": [
                "reflection",
                "refraction",
                "truchet",
                "raymaching"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #051\n    08/18/2023  @byt3_m3chanic\n    Truchet Core \\M/->.<-\\M/ 2023 \n    \n*/\n\n\n#define R iResolution\n#define M iMouse\n#define T iTime\n\n#define PI2 6.28318530718\n#define PI  3.14159265359\n\nmat2 rot (float a) {return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat hash21( vec2 p ) {return fract(sin(dot(p,vec2(23.43,84.21)))*4832.3234);}\n//@iq\nfloat box(vec3 p, vec3 b){vec3 q=abs(p)-b;return length(max(q,0.));}\nfloat cap(vec3 p, float h, float r){p.y-=clamp(p.y,0.,h);return length(p)-r;}\n\n// globals for stuff\nvec3 hit,hitPoint;\nvec2 gid,sid;\nfloat time=0.,ftime=0.,glow=0.,mse=0.,gcurve=0.,scurve=0.;\n\nconst vec2 sc = vec2(.225), hsc = .5/sc; \nconst float amt = 4.;\nconst float dbl = amt*2.;\n\nvec2 map(vec3 p, float sg) {\n\n    vec3 op = p;\n    vec2 res = vec2(1e5,0.);\n\n    // breakdown domain\n    vec2 id = floor(p.xz*sc) + .5;    \n    vec2 q = p.xz - id/sc;\n    \n    vec3 pd = vec3(q.x,op.y,q.y);\n    \n    // flip random cells\n    float rnd = hash21(id);\n    if(rnd<.5) q.y = -q.y;\n\n    // create truchet curves\n    vec2 d2 = vec2(length(q-hsc), length(q+hsc)); \n    float crv = abs(min(d2.x,d2.y)-hsc.x);\n    float dir = mod(id.x+id.y,2.)<.5? -1. : 1.;\n\n    vec2 pp = d2.x<d2.y? vec2(q - hsc) : vec2(q + hsc);\n    pp *= rot((time+mse)*dir);\n\n    // create vectors for track\n    float a = atan(pp.y, pp.x);\n    float ai = floor(dir*a/PI*amt);\n    a = (floor(a/PI2*dbl) + .5)/dbl;\n    float ws = mod(ai,amt);\n\n    vec2 qr = rot(-a*PI2)*pp; \n    qr.x -= hsc.x;\n\n    // vectors for things\n    vec3 npos = vec3(qr.x, op.y, qr.y);\n    vec3 nnos = vec3(qr.x, op.y-.2, qr.y);\n\n    // apply rotations\n    vec3 ngos = nnos-vec3(0,.05,0);\n  \n    vec3 qd = pd;\n    qd.xz=abs(qd.xz)-hsc;\n\n    float blk = length(qd)-.95;\n    blk=max(abs(blk)-.15,blk);\n \n    if(blk<res.x) {\n        res = vec2(blk,4.);\n        hit= qd;\n        gid = vec2(15);\n    }\n    \n    //holder\n    float blox = box(npos,vec3(.15,.05,.05))-.005;\n    nnos.xz=abs(nnos.xz)-.0125;\n    float cl = cap(nnos+vec3(0,.1,0),.25,.005);\n    cl = min(cap(ngos,.05,.0275),cl);\n    cl = min(length(npos-vec3(0,.05,0))-.045,cl);\n    \n    vec3 fpos = ngos-vec3(0,.08,0);\n\n    // put all the things together\n    blox = min(blox,cl);\n    \n    if(blox<res.x) {\n        res = vec2(blox,24.);\n        hit= nnos;\n    }\n\n    // tube\n    float tube = cap(fpos+vec3(0,0,0),.1,.045);\n    tube = min(length(fpos-vec3(0,.2,0))-.15,tube);\n\n    if(tube<res.x) {\n        res = vec2(tube,ws==1.?2.:ws==3.?4.:5.);\n        hit= fpos;\n        gid = vec2(ws,ai);\n    }\n    \n    if(sg==1. && ws==1.) glow += .0025/(.0025+tube*tube);\n    \n    //truchet track\n    vec3 tp =vec3(abs(abs(crv)-.145)-.075,op.y,crv);\n    float bx = box(tp, vec3(.0325, .015,1.))-.0015;\n    if(bx<res.x) {\n        res = vec2(bx, 3.);\n        hit=tp;\n    }\n    \n    // ground floor\n    float ground = p.y+.05;\n    if(ground<res.x) {\n        res = vec2(ground,1.);\n        hit=p;\n        gcurve=crv;\n    }   \n    return res;\n}\n\n\nvec3 normal(vec3 p, float t) {\n    float d = map(p,0.).x;\n    vec2 e = vec2(t,0);\n    vec3 n = d - vec3(\n        map(p-e.xyy,0.).x,\n        map(p-e.yxy,0.).x,\n        map(p-e.yyx,0.).x\n    );\n    return normalize(n);\n}\n\n//@iq https://iquilezles.org/articles/palettes\nvec3 hue(float t){ \n    t+=T*.1;\n    return .42+.32*cos( PI2*t*vec3(.95,.97,.88)*vec3(.11,.95,.78)); \n}\n\nvec3 render(vec3 p, vec3 rd, vec3 ro, float d, float m, inout vec3 n, inout vec3 ref) \n{ \n    n = normal(p,d);\n    vec3 lpos =  vec3(3,10,-8);\n    vec3 l = normalize(lpos-p);\n    float diff = clamp(dot(n,l),.0,.85);\n    \n    float shdw = 1.0;\n    for( float t=.01; t < 9.; ) {\n        float h = map(p + l*t,0.).x;\n        if( h<.0001 ) { shdw = 0.; break; }\n        shdw = min(shdw, 12.*h/t);\n        t += h;\n        if( shdw<.0001 || t>24. ) break;\n    }\n    diff = mix(diff,diff*shdw,.5);\n        \n    vec3 h = vec3(.5);\n\n    if(m==1.){\n        h = vec3(.075);\n        vec3 hp = hitPoint;\n        \n        float px = 8./R.x;\n        vec2 id =floor(hp.xz*3.);\n        vec2 f = fract(hp.xz*3.)-.5;\n        float hs = hash21(id);\n        if(hs>.5) f.x *= -1.;\n        \n        vec2 d2 = vec2(length(f-.5), length(f+.5)); \n        vec2 pp = d2.x<d2.y? vec2(f - .5) : vec2(f + .5);\n\n        float pt = length(pp)-.5;\n        pt=smoothstep(px,-px,abs(abs(abs(abs(pt)-.2)-.1)-.05)-.025);\n        h=mix(h,vec3(.1),pt);\n        \n        px = 3./R.x;\n        float edge = smoothstep(px,-px,abs(abs(scurve)-.5)-.05);\n        float curve= smoothstep(px,-px,abs(scurve)-.5);\n        \n        vec3 clr = hue(13.+clamp(hp.z*.1,0.,.5));\n        h=mix(h,clr,curve);\n        h=mix(h,vec3(.6),edge);\n        ref=vec3(.65);\n    }\n\n    if(m==4.) {\n        h =vec3(0.376,0.376,0.463);\n        ref=vec3(.5);\n    }\n\n    if(m==12.){\n        float hs = hash21(sid);\n        h =hue(hs);\n    }\n\n    vec3 rtn = (m==5.||m==3.||m==1.)?diff*h:diff*vec3(.005);\n    return rtn;\n}\n\nvoid mainImage(out vec4 O, in vec2 F) { \n    // precal\n    time = T*.265;\n    mse = (M.x/R.y);\n    \n    vec3 C = vec3(.0015);\n    \n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n    vec3 ro = vec3(10,0,3.75);\n    vec3 rd = normalize(vec3(uv,-1));\n\n    // camera //\n    float y = T*1.*PI2/180.;\n    \n    mat2 rx = rot(.5+.1*sin(y));\n    mat2 ry = rot(y);\n\n    ro.yz *= rx; ro.xz *= ry;\n    rd.yz *= rx; rd.xz *= ry;\n\n    vec3 p = ro + rd;\n    vec3 atten = vec3(1.);\n    vec3 ref = vec3(0);\n    \n    float k = 1.,d = 0.,iv = 1.,fA = 0.;\n    float bnc = 6.;\n    \n    for(int i=0;i<128;i++)\n    {\n        vec2 ray = map(p,1.);\n        vec3 n = vec3(0);\n        float m = ray.y;\n\n        d = i<32?ray.x*.8:ray.x;\n        p += rd * d * k;\n        \n        if(bnc>5.) fA += d;\n        \n        if (d*d < 1e-8) {\n            hitPoint = hit;\n            sid=gid;\n            scurve=gcurve;\n            bnc--;\n                \n            C+=render(p,rd,ro,d,ray.y,n,ref)*atten;\n            if(m!=1.&&m!=5.&&m!=4.||bnc<1.)break;\n            \n            atten *= ref;\n            p += rd*.01;\n            k = sign(map(p,0.).x);\n\n            if(m== 4.) {\n                vec3 rf=refract(rd,n,iv > 0. ? .98 : 1.1);\n                iv *= -1.;\n                if(length(rf) == 0.) rf = reflect(rd,n);\n                rd=rf;\n                p+=-n*.1;\n            } else {\n                rd=reflect(-rd,n);\n                p+=n*.1;\n            }\n        } \n\n        if(distance(p,rd)>50.) { break; }\n    }\n\n    C = mix( C, vec3(.85,.55,.27)*(glow*.6)+C,clamp(glow,.0,1.)); \n    if(fA>0.) C=mix(C,vec3(.16), 1.-exp(-.00065*fA*fA*fA));\n    \n    C = mix(C,C*.8,hash21(uv)>.5?0.:1.);\n    \n    C = clamp(C,vec3(0),vec3(1));\n    C = pow(C,vec3(0.4545));\n    O = vec4(C,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}