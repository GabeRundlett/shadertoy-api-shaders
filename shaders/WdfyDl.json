{
    "Shader": {
        "info": {
            "date": "1585795445",
            "description": "The legend says that he is still eating bananas to this day",
            "flags": 0,
            "hasliked": 0,
            "id": "WdfyDl",
            "likes": 3,
            "name": "Banana Feeder",
            "published": 3,
            "tags": [
                "raymarching",
                "cartoon"
            ],
            "usePreview": 0,
            "username": "propagant",
            "viewed": 439
        },
        "renderpass": [
            {
                "code": "// Made by Matej Vanco just for fun\n\nstruct ray\n{\n\tvec3 o;\n\tvec3 d;\n\tfloat l;\n};\n\t\nmat2 rot(float a)\n{\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, -s, s, c);\n}\n\nvec4 opu(vec4 a, vec4 b)\n{\n\treturn (a.w < b.w) ? a : b;\t\n}\n\nfloat nnn(float p, float a, float b, float c)\n{\n\treturn cos(-p*a + iTime * b)*c;\n}\n\t\nvec4 geo(vec3 p)\n{\n\tvec3 color_head = mix(vec3(0.0,1.0,0.0), vec3(1.0,1.0,0.0), cos(iTime * 11.));\n\n\tfloat height = -0.1;\n    \n\tvec4 head = vec4(color_head,length(p - vec3(0.75,height,1.5))-0.4) \n        + nnn(p.x,4.2,10.5,0.2);\n\tvec4 eye = vec4(vec3(1.0),length(p - vec3(0.75,height+0.15,1.3))-0.25) \n        + nnn(p.x, 4.2, 10.5, 0.2);\n\tvec4 eyeB = vec4(vec3(0.),length(p - vec3(0.6,height+0.18,1.28))-0.15) \n        + clamp(nnn(p.x, 4.2, 10.5, 0.2),-0.9,0.15);\n\tvec4 plane = vec4(0.2,0.6,0.4,(p.y + 0.55));\n\tvec3 bRot = p;\n\tbRot.yz *= rot(0.4);\n\tvec4 box = vec4(1.0,1.0,0.0,length(\n        max(abs(bRot - vec3(-0.9,-0.6,1.3)) - vec3(1.15,0.02,0.02),0.0) + nnn(p.x, 2.1, 10.5, 0.2)) - 0.06);\n\n\tvec4 g = opu(head, plane);\n\tvec4 g2 = opu(g, box);\n\tvec4 g3 = opu(g2, eye);\n\tvec4 g4 = opu(g3, eyeB);\n\treturn g4;\n}\n\nvec4 march(ray r)\n{\n\tvec3 col = vec3(1.0);\n\tfor(int i = 0; i < 64; i++)\n\t{\n\t\tvec3 p = r.o + r.d * r.l;\n\t\tvec4 g = geo(p);\n\t\tr.l += g.w;\n\t\tcol = g.rgb;\n\t\tif(r.l > 32.)\n\t\t\tbreak;\n\t}\n\treturn vec4(col, r.l);\n}\n\nvec3 normal(vec3 p)\n{\n\tvec2 of = vec2(0.001, 0.0);\n\tfloat copy = geo(p).w;\n\treturn normalize(copy - vec3(geo(p - of.xyy).w, geo(p - of.yxy).w, geo(p - of.yyx).w));\n}\n\nfloat shadow(vec3 ro, vec3 rd, float b)\n{\n\tfloat t = 0.01;\n\tfloat res = 1.;\n\tfor(int i = 0; i < 16; i++)\n\t{\n\t\tfloat copy = geo(ro + rd * t).w;\n\t\tres = min(res, b * copy/t);\n\t\tif(copy < 0.001)\n\t\t\tbreak;\t\n\t\tt += copy;\n\t\tif(t < 0.01 || t > 3.)\n\t\t\tbreak;\n\t}\n\treturn clamp(res,0.2,1.);\n}\n\nfloat lighting(vec3 p)\n{\n\tvec3 lp = vec3(1.0,2.,-1.);\n\tvec3 lPos = normalize(lp - p);\n\tvec3 n = normal(p);\n\t\n\tfloat light = clamp(dot(lPos, n), 0.1,1.);\n\treturn light * shadow(p, lp, 0.8);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord -0.5 *iResolution.xy)/iResolution.y;\n    \n   \tray r;\n\tr.o = vec3(0.);\n\tuv.xy += sin(iTime * 25.)*0.015;\n\tr.d = vec3(uv, 1.0);\n\tvec4 m = march(r);\n\tvec3 mm = r.o + r.d * m.w;\n    \n    vec2 p = mm.xz;\n    p.x-=iTime * 6.;\n    if(m.rgb == vec3(0.2,0.6,0.4))\n    {\n     \tif(fract(sin(p.x*0.5)*0.5)>0.45) m.rgb = mix(m.rgb,vec3(0.6,0.6,0.3)*2.,uv.x); \n    }\n    \n\tvec3 col = m.rgb * lighting(mm);\n    col *= exp(-0.05 * pow(m.w, 3.));\n\tcol += (vec3(0.2,0.35,0.25) * 0.6) / 1.5;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}