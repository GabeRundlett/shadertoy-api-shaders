{
    "Shader": {
        "info": {
            "date": "1619891751",
            "description": "Made for the willstall challenge - 1 shader a week keeps the depression meek\n\nSimple reaction-diffusion with a palette - you can draw reagents with your mouse, and press space to reset the sim\n\n",
            "flags": 48,
            "hasliked": 0,
            "id": "NssXD2",
            "likes": 1,
            "name": "Basic Reaction-Diffusion",
            "published": 3,
            "tags": [
                "diffusion",
                "reaction",
                "nouse"
            ],
            "usePreview": 0,
            "username": "clepirelli",
            "viewed": 440
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 bufferA = texture(iChannel0, fragCoord/iResolution.xy).xy/maxAmount;\n    \n    if(usingPalette)\n    {\n        fragColor = vec4(pal(bufferA.x, palette) , 1.0);\n    } else \n    {\n        fragColor = vec4(bufferA.yyy,1.0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//---- reaction-diffusion constants\nconst float firstDiffusionRate = .8;\nconst float growthRate = .04;\nconst float growthVariation = .010;\n\nconst float secondDiffusionRate = .4;\nconst float deathRate = .06;\nconst float deathVariation = .001;\n\nconst float maxAmount = 1.0;\nconst float speed = 100.0;\n\nconst float mouseRadius = .1;\nconst float startRadius = .01;\n\n//---- aesthetic constants\nconst bool usingPalette = true; //true: v gets converted to palette\n#define palette \\\n    vec3(0.5,0.5,0.5),\\\n    vec3(0.5,0.5,0.7),\\\n    vec3(1.0,1.0,1.0),\\\n    vec3(0.05,0.10,0.1) \n\n//from iq: https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n//---- kernel stuff\nconst float laplacianKernel[9] = float[9](\n    .05, .2, .05, \n    .2, -1., .2, \n    .05, .2, .05);\n    \nvec2 _applyKernel(vec2 uv, vec2 resolution, sampler2D image, float kernel[9])\n{\n    vec2 pixelSize = 1./resolution.xy;\n    vec2 afterKernel = vec2(.0);\n    for(int i = 0; i < 3; i++)\n    for(int j = 0; j < 3; j++)\n    {\n        vec2 sampleUV = uv + vec2(float(i-1), float(j-1)) * pixelSize;\n        afterKernel += texture(image, sampleUV).xy * kernel[j*3+i];\n    }\n    \n    return afterKernel;\n}\n#define applyKernel(uv, image, kernel) _applyKernel(uv, iResolution.xy, image, kernel)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define spacePressed(sampler) texelFetch(sampler,ivec2(32, 0), 0).x > 0.0\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 bufferUV = fragCoord.xy/iResolution.xy; \n    float aspectRatio = iResolution.x/iResolution.y;\n    \n    vec2 aspectCorrectedUV = bufferUV;\n    aspectCorrectedUV.x *= aspectRatio;\n    \n    if(iFrame < 3 || spacePressed(iChannel1))\n    {\n        fragColor = vec4(1.0, distance(aspectCorrectedUV, vec2(.5*aspectRatio,.5)) < startRadius, .0, 1.0);\n        return;\n    }\n   \n    \n    vec2 mouse = iMouse.xy/iResolution.xy;\n    mouse.x *= aspectRatio;\n    \n    if((distance(mouse, aspectCorrectedUV) < mouseRadius) && sign(iMouse.z) > .0)\n    {\n        fragColor = vec4(1.0, 1.0, .0, 1.0);\n        return;\n    }\n\n    vec2 lastFrame = clamp(texture(iChannel0, bufferUV).xy, .0, maxAmount);\n    \n    const vec2 diffusionRates = vec2(firstDiffusionRate, secondDiffusionRate);\n    vec2 diffusion = applyKernel(bufferUV, iChannel0, laplacianKernel) * diffusionRates;\n    \n    float currentGrowthRate = mix(growthRate-growthVariation, growthRate+growthVariation, bufferUV.x);\n    float currentDeathRate = mix(deathRate-deathVariation, deathRate+deathVariation, bufferUV.y);\n    \n    float reactionAmount = lastFrame.x * lastFrame.y * lastFrame.y;\n    vec2 change = diffusion + vec2(\n        -reactionAmount + currentGrowthRate * (maxAmount - lastFrame.x),\n        reactionAmount - (currentGrowthRate + currentDeathRate) * lastFrame.y\n    );\n\n    fragColor = clamp(vec4(lastFrame+change*iTimeDelta*speed, 1.0, 1.0), .0, maxAmount);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}