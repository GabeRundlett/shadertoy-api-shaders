{
    "Shader": {
        "info": {
            "date": "1586804556",
            "description": "Abstract raymarching",
            "flags": 0,
            "hasliked": 0,
            "id": "3sByzG",
            "likes": 4,
            "name": "Implicit destination",
            "published": 3,
            "tags": [
                "abstract"
            ],
            "usePreview": 0,
            "username": "gambhiro",
            "viewed": 433
        },
        "renderpass": [
            {
                "code": "#define i_time iTime\n#define i_resolution iResolution\n\nfloat tt;\nvec3 ap, bp;\nfloat attr;\n\nmat2 rot2(float r) {\n  return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\nfloat sd_cylinder(vec3 p, float r, float height) {\n  float d = length(p.xz) - r;\n  d = max(d, abs(p.y) - height);\n  return d;\n}\n\nfloat sd_box(vec3 p, vec3 b) {\n  vec3 q  = abs(p) - b;\n  return max(max(q.x, q.y), q.z);\n}\n\nfloat spiral(vec3 p) {\n  vec3 q = p - vec3(.0, 2.5, .0);\n  q.y *= 0.04;\n  q.xz *= rot2((sin(q.y + 3.0)-tt*.05)*20.0);\n  q.yz *= rot2(radians(20.0));\n  q.y *= 0.18;\n  q = abs(q) - vec3(0.3, -.55, 3.0);\n  q -= vec3(.5, .05, 0.);\n  float d = length(q) - .7;\n  return d*0.5;\n}\n\nvec2 rails(vec3 p) {\n  vec3 q = p;\n\n  q.y -= .4;\n  q = abs(q) - vec3(1.2, .2, 0.);\n  vec2 a = vec2(sd_box(q, vec3(.1, .3, 20.)), 1.0);\n\n  q = p;\n  q.z = abs(q.z) - 2.0;\n  q.xy *= rot2(radians(90.0));\n  vec2 b = vec2(sd_cylinder(q - vec3(.8, 0, 0), 0.2, 5.), 1.0);\n\n  a = (a.x < b.x) ? a : b;\n\n  a.x *= 0.8;\n  return a;\n}\n\nvec2 map(vec3 p) {\n  attr = max(0.0, (6.0 - (length(p + vec3(0., 0., 1.0-tt*2.5)) - 6.0)));\n\n  vec3 q = p;\n  vec2 a = vec2(length(q - vec3(0., 0., 10. + tt*2.5)) - 2.5, 2.0);\n\n  q = p;\n  q.z = mod(q.z - 1.0, 11.0);\n  q = abs(q) - vec3(0., 6., 11.);\n  for (int i=0; i<6; i++) {\n    q = abs(q) - vec3(2.0, 0.0, 0.5);\n    //q.xz *= rot2(radians(i*5));\n    q.xy *= rot2(radians(4.+float(i)*1.5));\n  }\n\n  vec2 b = rails(q);\n\n  a = (a.x < b.x) ? a : b;\n\n  float s = sin(tt*.5)*2.0 +  + 1.5;\n  float ss = cos(tt*.5)*2.0 +  + 1.5;\n  q = abs(q) - vec3(s, ss*2.0, 0.);\n  b = rails(q);\n\n  a = (a.x < b.x) ? a : b;\n\n  q = p;\n  q.yz *= rot2(radians(90.0));\n  b = vec2(spiral(q), 1.0);\n\n  a = (a.x < b.x) ? a : b;\n\n  return a;\n}\n\nvec2 trace(vec3 ro, vec3 rd) {\n  vec2 h, t = vec2(0.1);\n  for (int i=0; i<128; i++) {\n    h = map(ro+rd*t.x);\n    if (h.x < .0001 || t.x > 50.0) break;\n    t.x += h.x;\n    t.y = h.y;\n  }\n  if (t.x > 50.0) t.x = 0.0;\n  return t;\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n  vec2 uv = vec2(frag_coord.x / i_resolution.x, frag_coord.y / i_resolution.y);\n  uv -= 0.5;\n  uv /= vec2(i_resolution.y / i_resolution.x, 1);\n\n  tt = i_time*0.5;\n\n  vec3 ro = vec3(0., 1., -20.);\n  ro.z += tt*2.5;\n  // ro.xz *= rot2(tt*.5);\n\n  vec3 cam_target = vec3(0, 5, 0);\n  cam_target.z += tt*2.5;\n\n  vec3 cw = normalize(cam_target - ro);\n  vec3 cu = normalize(cross(cw, vec3(0,1,0)));\n  vec3 cv = normalize(cross(cu, cw));\n\n  vec3 rd = mat3(cu, cv, cw) * normalize(vec3(uv, 0.5));\n\n  vec3 ld = normalize(vec3(.3, .5, -.5));\n\n  // Fibonacci Blue #112358, R: 17, G: 35 B: 88\n\n  vec3 fog = vec3(.066, .137, .345) * (1.0 - (length(uv)-0.2));\n  vec3 col = fog;\n\n  vec2 scene = trace(ro, rd);\n  float t = scene.x;\n\n  if (t > 0.0) {\n    vec3 pp = ro+rd*t;\n\n    vec2 e = vec2(.00035, -.00035);\n    vec3 nor = normalize(e.xyy*map(pp+e.xyy).x +\n                         e.yyx*map(pp+e.yyx).x +\n                         e.xyx*map(pp+e.xyx).x +\n                         e.xxx*map(pp+e.xxx).x);\n\n    vec3 b0 = vec3(.1, .5, .8);\n    vec3 b1 = vec3(0.7, .8, .8);\n    vec3 base = mix(b0, b1, attr);\n\n    if (scene.y == 1.0) {\n\n      float diff = max(0., dot(nor, ld));\n\n      float aor = t/30.;\n      float ao = exp2(-2.*pow(max(0.,1.-map(pp+nor*aor).x/aor),2.));\n\n      float fr = pow(1.+dot(nor,rd),2.);\n\n      vec3 sss = vec3(0.5)*smoothstep(0.,1.,map(pp+ld*0.4).x/0.4);\n\n      col = base*(0.9*ao+0.2)*(diff+sss);\n      col = mix(col, b0, min(fr, 0.2));\n\n    }\n\n    col = mix(col, fog, 1.0 - exp(-.00005*t*t*t));\n\n    if (scene.y == 2.0) {\n      float fr = pow(1.+dot(nor,rd),5.);\n      col = mix(vec3(0.), base, min(fr, 0.8));\n    }\n\n  }\n\n  frag_color = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}