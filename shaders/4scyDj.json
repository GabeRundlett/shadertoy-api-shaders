{
    "Shader": {
        "info": {
            "date": "1520156624",
            "description": "Another alphabetical city flythrough - explanation in program",
            "flags": 32,
            "hasliked": 0,
            "id": "4scyDj",
            "likes": 26,
            "name": "Alphapolis",
            "published": 3,
            "tags": [
                "raymarching",
                "lighting",
                "city",
                "architecture",
                "flight",
                "car"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 1427
        },
        "renderpass": [
            {
                "code": "// \"Alphapolis\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n Flying car travels nonrepeating path at varying altitude.\n 3 viewing modes: viewer behind car, ahead of car, and near ground.\n 3 lighting modes: night, night/day cycle, day; building lights flash in night mode.\n Automatic cycling between modes.\n Mini-views show all mode combinations (current mode has yellow frame); click mouse in\n mini-views for temporary override (selected mode has red frame).\n Use mouse for looking around in behind-view mode, and for zooming (mouse-y) otherwise.\n*/\n\n#define AA  1  // optional antialiasing (2019)\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nfloat Hashff (float p);\nfloat Hashfv2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm1 (float p);\nfloat IFbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nfloat FontTexDf (vec2 p);\nvec2 FontTexNf (vec2 p);\nvec4 Loadv4 (int idVar);\n\nmat3 flMat, flyerMat;\nvec3 flPos, flyerPos, qHit, sunDir;\nvec2 cId, bIdV, cTimeV;\nfloat dstFar, tCur, szFacFl, cCar, qcCar, cDir, flrHt, bHt, bRot, nFloor, fDayLt, flyerCol;\nint idObj, modeMv, modeLt;\nconst float pi = 3.14159;\nconst int idBldg = 1, idRoad = 2, idSWalk = 3, idCarWhl = 4, idCarBdy = 5, idTrLight = 6,\n   idStLight = 7, idFlyer = 8, idCkpt = 9;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat FlyerEngDf (vec3 p)\n{\n  vec3 q;\n  float d;\n  p = flyerMat * (p - flyerPos);\n  p = p / szFacFl;\n  q = p - vec3 (0., 0.3, -0.6);\n  q.xz = abs (q.xz) - vec2 (1.6, 1.3);\n  q.xy = Rot2D (q.xy, 12. * tCur);\n  d = max (PrCylDf (q, 0.4, 0.4), 0.05 - min (abs (q.x), abs (q.y)));\n  return szFacFl * d;\n}\n\nfloat FlyerEngRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 50; j ++) {\n    d = FlyerEngDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0002 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nfloat FlyerDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, h;\n  dMin = dstFar / szFacFl;\n  p = flyerMat * (p - flyerPos);\n  p = p / szFacFl;\n  q = p;\n  h = 0.5 - 0.05 * (q.z + 0.3) * (q.z + 0.3);\n  q.y -= h;\n  d = PrRoundBoxDf (q, vec3 (0.9 - 0.06 * (q.z + 0.5) * (q.z + 0.5), h, 2.7), 0.15);\n  q = p + vec3 (0., -0.3, 0.6);\n  qq = q;  qq.xz = abs (qq.xz) - vec2 (1.6, 1.3);\n  d = min (min (min (d, PrCylAnDf (qq, 0.44, 0.04 - 0.03 * (qq.z / 0.48) * (qq.z / 0.48), 0.48)),\n     PrCylDf (qq, 0.15 - 0.12 * (qq.z / 0.45) * (qq.z / 0.45), 0.45)),\n     PrRoundBoxDf (qq, vec3 (0.4, 0.01, 0.1), 0.01));\n  q = p;  q.y -= 0.3;\n  qq = q;  qq.z = abs (qq.z + 0.6) - 1.3;\n  d = SmoothMin (d, PrRoundBoxDf (qq, vec3 (1.15, 0.03 - 0.05 * abs (qq.z), 0.3), 0.01), 0.05);\n  DMINQ (idFlyer);\n  q = p;  q.yz -= vec2 (0.52, 0.5);\n  d = PrCapsDf (q, 0.6, 1.);\n  DMINQ (idCkpt);\n  return 0.7 * szFacFl * dMin;\n}\n\nfloat FlyerRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = FlyerDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0002 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 FlyerNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (FlyerDf (p + e.xxx), FlyerDf (p + e.xyy), FlyerDf (p + e.yxy), FlyerDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec4 FlyerCol ()\n{\n  vec4 col;\n  col = vec4 (HsvToRgb (vec3 (flyerCol, 1., 0.9)), 0.3);\n  if (idObj == idFlyer) {\n    if (qHit.z > 2. && length (vec2 (abs (qHit.x) - 0.15, qHit.y + 0.3)) < 0.08)\n       col = vec4 (1., 1., 0.8, -2.);\n    else if (qHit.z < -2. && length (vec2 (abs (abs (qHit.x) - 0.3) - 0.15,\n       qHit.y + 0.1)) < 0.1) col = vec4 (1., 0., 0., -2.);\n    else if (abs (abs (qHit.z + 0.15) - 1.3) < 0.1 && length (vec2 (abs (qHit.x) - 1.6,\n       qHit.y)) < 0.2) col = vec4 (1., 0., 0., 0.3);\n    else if (abs (qHit.x) < 0.02 || qHit.z < -2.8 && mod (8. * qHit.x + 0.1, 1.) < 0.2 ||\n       qHit.z > 2.8 && mod (12. * qHit.y + 0.1, 1.) < 0.2 ||\n       abs (qHit.z + 1.3) < 0.9 && abs (qHit.x) < 0.8 && mod (6. * qHit.x + 0.1, 1.) < 0.15 ||\n       abs (qHit.z + 0.7) < 0.5 && abs (qHit.y - 0.2) < 0.3 && mod (12. * qHit.y + 0.1, 1.) < 0.15)\n       col = vec4 (0.6, 0.6, 0.6, 0.3);\n    else if (abs (abs (qHit.z + 0.15) - 1.3) < 0.1 && abs (qHit.x) > 1.12)\n       col = vec4 (0.6, 0.6, 0.6, 0.3);\n    else if (length (vec2 (abs (qHit.z + 0.6) - 1.3, abs (qHit.x) - 1.6)) < 0.1 && abs (qHit.y) > 0.44)\n       col = mix (0.8 * col, vec4 (0., 1., 0., -2.), step (0.5, mod (0.5 * tCur, 1.)));\n  } else if (idObj == idCkpt) {\n    if (min (abs (qHit.x), abs (qHit.z - 1.)) > 0.03) col = vec4 (0.2, 0.2, 0.2, -1.);\n  }\n  return col;\n}\n\nfloat BldgDf (vec3 p, float dMin)\n{\n  vec3 q, qq;\n  float d;\n  d = p.y;\n  q = p;\n  DMINQ (idRoad);\n  q = p;  q.xz = fract (q.xz) - vec2 (0.5);  q.y -= 0.0015;\n  d = PrBoxDf (q, vec3 (0.35, 0.0015, 0.35));\n  if (d < dMin) { dMin = d;  idObj = idSWalk;  qHit = p; }\n  q.y -= bHt - 0.25 * flrHt;\n  d = max (FontTexDf (Rot2D (p.xz - cId - 0.5, bRot) + 0.5), abs (q.y) - bHt);\n  DMINQ (idBldg);\n  q = p;  q.xz = fract (q.xz) - vec2 (0.5);  q.y -= 0.025;\n  qq = q;  qq.xz = mod (qq.xz + 0.05, 0.1) - 0.05;\n  d = max (min (PrCylDf (qq.xzy, 0.0012, 0.025),\n     PrCylDf ((qq - vec3 (0., 0.025, 0.)).xzy, 0.005, 0.0007)),\n     - min (PrBox2Df (q.xz, vec2 (0.45)), max (PrBox2Df (abs (q.xz) - vec2 (0.5), vec2 (0.18)),\n     - PrBox2Df (abs (q.xz) - vec2 (0.5), vec2 (0.05)))));\n  DMINQ (idStLight);\n  q.xz = abs (q.xz) - vec2 (0.345);  q.y -= -0.002;\n  d = PrCylDf (q.xzy, 0.002, 0.02);\n  DMINQ (idTrLight);\n  return dMin;\n}\n\nvec3 CarPos (vec3 p)\n{\n  vec3 q;\n  float vDir, fqx;\n  if (cDir == 0. && abs (fract (p.z) - 0.5) > 0.35 ||\n     cDir == 1. && abs (fract (p.x) - 0.5) < 0.35) {\n    p.xz = vec2 (- p.z, p.x);\n    vDir = 0.;\n  } else {\n    vDir = 1.;\n  }\n  q = p;  q.y -= -0.003;\n  fqx = floor (q.x);\n  q.z += 3. * fqx;  q.x = q.x - fqx - 0.5;  q.z *= 2. * step (0., q.x) - 1.;\n  q.z -= cTimeV.x + ((cDir == vDir) ? vDir + cTimeV.y : 1.);\n  cCar = floor (20. * q.z);\n  q.z = fract (q.z) - 0.5;\n  q.x = abs (q.x) - 0.395 - 0.06 * step (0.7, Hashff (11. * cCar)) -\n     0.03 * Hashff (13. * cCar);\n  return q;\n}\n\nfloat CarDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, bf;\n  q = CarPos (p);\n  bf = PrBoxDf (q + vec3 (0., 0., -0.1), vec3 (0.015, 0.05, 0.2));\n  q.z = mod (q.z, 0.05) - 0.025;\n  d = max (SmoothMin (PrBoxDf (q + vec3 (0., -0.008, 0.), vec3 (0.007, 0.002, 0.015)),\n     PrBoxDf (q + vec3 (0., -0.015, 0.003), vec3 (0.0035, 0.0003, 0.005)), 0.02), bf);\n  if (d < dMin) qcCar = cCar;\n  DMINQ (idCarBdy);\n  q.xz = abs (q.xz) - vec2 (0.0085, 0.01);  q.y -= 0.006;\n  d = max (PrCylDf (q.yzx, 0.003, 0.0012), bf);\n  DMINQ (idCarWhl);\n  return 0.7 * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  dMin = BldgDf (p, dMin);\n  dMin = CarDf (p, dMin);\n  return dMin;\n}\n\nvoid SetBldgParms ()\n{\n  float bId;\n  bHt = (0.25 * Hashfv2 (13. * cId) + 0.05) * (1. + 0.15 / flrHt) + 0.1;\n  nFloor = floor (bHt * (0.6 + 0.4 * length (sin (0.125 * pi * cId))) / flrHt);\n  bHt = (nFloor + 0.3) * flrHt;\n  bRot = 0.5 * pi * floor (4. * Hashfv2 (23. * cId));\n  bId = floor (Hashfv2 (33. * cId) * 26.);\n  if (bId == 16.) ++ bId;\n  bId += float (0x41);\n  bIdV = vec2 (mod (bId, 16.), 15. - floor (bId / 16.));\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 cIdP, rdi, s;\n  float dHit, d;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.y == 0.) rd.y = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  rdi = 1. / rd.xz;\n  cIdP = vec2 (-999.);\n  dHit = 0.01;\n  for (int j = 0; j < 240; j ++) {\n    p = ro + dHit * rd;\n    cId = floor (p.xz);\n    if (cId != cIdP) {\n      cIdP = cId;\n      SetBldgParms ();\n    }\n    d = ObjDf (p);\n    s = (cId + step (0., rd.xz) - p.xz) * rdi.xy;\n    dHit += min (d, 0.001 + max (0., min (s.x, s.y)));\n    if (d < 0.0002 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 cIdP;\n  float sh, d, h;\n  sh = 1.;\n  cIdP = vec2 (-999.);\n  d = 0.02;\n  for (int j = 0; j < 40; j ++) {\n    p = ro + d * rd;\n    cId = floor (p.xz);\n    if (cId != cIdP) {\n      cIdP = cId;\n      SetBldgParms ();\n    }\n    h = BldgDf (p, dstFar);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += min (0.05, 3. * h);\n    if (h < 0.001) break;\n  }\n  return sh;\n}\n\nvec4 ObjCol (vec3 ro, vec3 rd, vec3 vn)\n{\n  vec3 col;\n  vec2 g, b;\n  float wFac, f, ff, spec;\n  wFac = 1.;\n  col = vec3 (0.);\n  spec = 0.;\n  if (idObj == idBldg) {\n    col = HsvToRgb (vec3 (Hashfv2 (43. * cId), 0.15, 0.6 + 0.3 * Hashfv2 (21. * cId)));\n    if (vn.y < 0.99) {\n      f = mod (qHit.y / flrHt - 0.2, 1.) - 0.5;\n      wFac = 1. - (step (0., f) - 0.5) * step (abs (abs (f) - 0.24), 0.02) -\n         0.801 * step (abs (f), 0.22);\n      if (wFac < 0.2) {\n        f = 1.5 * dot (qHit.xz, normalize (vn.zx));\n        wFac = min (0.2 + 0.8 * floor (fract (f / flrHt + 0.25) *\n           (1. + Hashfv2 (51. * cId))), 1.);\n      }\n      col *= wFac;\n      if (wFac > 0.5) col *= (0.8 + 0.2 * Noisefv2 (512. * vec2 (qHit.x + qHit.z, qHit.y)));\n      spec = 0.3;\n    } else {\n      g = step (0.05, fract (qHit.xz * 35.));\n      col *= mix (0.8, 1., g.x * g.y);\n    }\n  } else if (idObj == idRoad) {\n    g = abs (fract (qHit.xz) - 0.5);\n    if (g.x < g.y) g = g.yx;\n    col = mix (vec3 (0.06, 0.06, 0.07), vec3 (0.1), step (g.x, 0.355));\n    f = ((step (abs (g.x - 0.495), 0.002) + step (abs (g.x - 0.365), 0.002)) +\n       step (abs (g.x - 0.44), 0.0015) * step (fract (g.y * 18. + 0.25), 0.7)) *\n       step (g.y, 0.29);\n    col = mix (col, vec3 (0.6, 0.5, 0.1), f);\n    f = step (0.6, fract (g.x * 30. + 0.25)) * step (0.36, g.x) *\n       step (abs (g.y - 0.32), 0.02);\n    col = mix (col, vec3 (0.7), f);\n    if (fDayLt < 0.5) {\n      g = abs (fract (qHit.xz) - 0.5);\n      f = 1.3 * (1. - smoothstep (0.05, 0.2, length (g - 0.5)));\n      if (g.x < g.y) g = g.yx;\n      f += step (g.y, 0.35) * (1. - smoothstep (0.02, 0.05,\n      length ((vec2 (0.8 * abs (g.x - 0.437) - 0.015, mod (g.y + 0.05, 0.1) - 0.05)))));\n      col = mix (col, vec3 (1., 1., 0.7), 0.2 * f);\n    }\n    if (fDayLt > 0.5) {\n      b = CarPos (ro).xz;\n      g = abs (b + vec2 (0., -0.1)) - vec2 (0.015, 0.2);\n      b.y = mod (b.y, 0.05) - 0.025;\n      b = abs (b) * vec2 (1.55, 1.);\n      if (max (g.x, g.y) < 0. && max (b.x, b.y) < 0.016) col *= 0.6;\n    }\n  } else if (idObj == idSWalk) {\n    g = step (0.05, fract (qHit.xz * 35.));\n    col = vec3 (0.2) * mix (0.7, 1., g.x * g.y);\n    f = FontTexDf (Rot2D (ro.xz - cId - 0.5, bRot) + 0.5);\n    if (f < 0.02) col *= 2.;\n    else if (f < 0.025) {\n      col = vec3 (1., 1., 0.7) * max (0.5 - 0.5 * rd.y, 0.);\n      spec = -2.;\n    }\n  } else if (idObj == idTrLight) {\n    f = 2. * (atan (qHit.z, qHit.x) / pi + 1.) + 0.5;\n    ff = floor (f);\n    if (abs (qHit.y - 0.014) < 0.004 && abs (f - ff) > 0.3) {\n      col = mix (vec3 (0., 1., 0.), vec3 (1., 0., 0.),\n         (mod (ff, 2.) == 0.) ? cDir : 1. - cDir);\n      spec = -2.;\n    } else {\n      col = vec3 (0.4, 0.2, 0.1);\n      spec = 0.5;\n    }\n  } else if (idObj == idStLight) {\n    if (qHit.y > 0.024 && vn.y < 0.1) {\n      col = vec3 (0.8, 0.8, 0.4) * (0.7 - 0.3 * vn.y);\n      spec = -2.;\n    } else {\n      col = vec3 (0.5, 0.5, 0.55) * (1. + 0.3 * sin (128. * 2. * pi * qHit.y));\n      spec = 0.5;\n    }\n  } else if (idObj == idCarBdy) {\n    col = HsvToRgb (vec3 (Hashff (qcCar * 37.), 0.9,\n       0.4 + 0.6 * vec3 (Hashff (qcCar * 47.))));\n    f = abs (qHit.z + 0.003);\n    wFac = max (max (step (0.001, f - 0.005) * step (0.001, abs (qHit.x) - 0.0055),\n       step (f, 0.001)), step (0.0015, abs (qHit.y - 0.0145)));\n    col *= wFac;\n    spec = 0.5;\n    if (abs (qHit.z) > 0.015) {\n      g = vec2 (qHit.x, 3. * (qHit.y - 0.008));\n      if (qHit.z > 0. && dot (g, g) < 3.6e-5) col *= 0.3;\n      g = vec2 (abs (qHit.x) - 0.005, qHit.y - 0.008);\n      f = dot (g, g);\n      if (qHit.z > 0. && f < 2.2e-6) {\n        col = vec3 (1., 1., 0.3);\n        spec = -2.;\n      } else if (qHit.z < 0. && f < 1.1e-6) {\n        col = vec3 (1., 0., 0.);\n        spec = -2.;\n      }\n    }\n    if (fDayLt < 0.5 && spec > 0.) {\n      g = abs (fract (ro.xz) - 0.5);\n      f = 1.3 * (1. - smoothstep (0.05, 0.2, length (g - 0.5)));\n      if (g.x < g.y) g = g.yx;\n      f += step (g.y, 0.35) * (1. - smoothstep (0.02, 0.05, length ((vec2 (0.8 *\n         abs (g.x - 0.437) - 0.015, mod (g.y + 0.05, 0.1) - 0.05)))));\n      col = mix (col, vec3 (0.7, 0.7, 0.5), 0.4 * f);\n    }\n  } else if (idObj == idCarWhl) {\n    if (length (qHit.yz) < 0.0015) {\n      col = vec3 (0.7);\n      spec = 0.8;\n    } else {\n      col = vec3 (0.03);\n    } \n  }\n  if (wFac < 0.5) spec = -1.;\n  return vec4 (col, spec);\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 dyCol, ntCol, col, skyCol, sunCol, p, rds, mDir, vn;\n  float ds, fd, att, attSum, d, sd, mRad, bs, ts;\n  rd.y = (rd.y + 0.1) / 1.1;\n  rd = normalize (rd);\n  if (rd.y >= 0.) {\n    p = rd * (200. - ro.y) / max (rd.y, 0.0001);\n    ds = 0.1 * sqrt (length (p));\n    p += ro;\n    fd = 0.002 / (smoothstep (0., 10., ds) + 0.1);\n    p.xz *= fd;\n    p.xz += 0.1 * tCur;\n    att = 2. * Fbm2 (p.xz);\n    attSum = att;\n    d = fd;\n    ds *= fd;\n    for (int j = 0; j < 4; j ++) {\n      attSum += 2. * Fbm2 (p.xz + d * sunDir.xz);\n      d += ds;\n    }\n    attSum *= 0.3;\n    att *= 0.3;\n    sd = clamp (dot (sunDir, rd), 0., 1.);\n    skyCol = mix (vec3 (0.7, 1., 1.), vec3 (1., 0.4, 0.1), 0.25 + 0.75 * sd);\n    sunCol = vec3 (1., 0.8, 0.7) * pow (sd, 1024.) +\n       vec3 (1., 0.4, 0.2) * pow (sd, 256.);\n    col = mix (vec3 (0.5, 0.75, 1.), skyCol, exp (-2. * (3. - sd) *\n       max (rd.y - 0.1, 0.))) + 0.3 * sunCol;\n    attSum = 1. - smoothstep (1., 9., attSum);\n    col = mix (vec3 (0.4, 0., 0.2), mix (col, vec3 (0.3, 0.3, 0.3), att), attSum) +\n       vec3 (1., 0.4, 0.) * pow (attSum * att, 3.) * (pow (sd, 10.) + 0.5);\n  } else col = vec3 (0.6);\n  dyCol = col;\n  mDir = normalize (vec3 (-0.5, 0.2, 0.2));\n  mRad = 0.02;\n  ntCol = mix (vec3 (0.1, 0.1, 0.), vec3 (0.02, 0.02, 0.04), smoothstep (0., 0.05, abs (rd.y)));\n  ntCol += vec3 (0.06, 0.04, 0.02) * pow (clamp (dot (rd, mDir), 0., 1.), 16.);\n  bs = dot (rd, mDir);\n  ts = bs * bs - dot (mDir, mDir) + mRad * mRad;\n  if (ts > 0.) {\n    ts = bs - sqrt (ts);\n    if (ts > 0.) {\n      vn = normalize ((ts * rd - mDir) / mRad);\n      ntCol += 0.8 * vec3 (1., 0.9, 0.5) * clamp (dot (vec3 (0.5, 0.4, -0.77), vn) *\n         (1. - 0.3 * Noisefv3 (4. * vn)), 0., 1.);\n    }\n  }\n  if (ts < 0.) {\n    rds = floor (2000. * rd);\n    rds = 0.00015 * rds + 0.1 * Noisefv3 (0.0005 * rds.yzx);\n    for (int j = 0; j < 19; j ++) rds = abs (rds) / dot (rds, rds) - 0.9;\n    ntCol += smoothstep (0.04, 0.1, rd.y) * vec3 (0.8, 0.8, 0.6) *\n       min (1., 0.5e-3 * pow (min (6., length (rds)), 5.));\n  }\n  return mix (ntCol, dyCol, smoothstep (0.3, 0.5, fDayLt));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, rdr;\n  vec2 g;\n  float dstObj, dstFlyer, dstEng, sh, s, f;\n  bool isRf;\n  dstEng = FlyerEngRay (ro, rd);\n  dstFlyer = FlyerRay (ro, rd);\n  if (dstFlyer < dstEng) dstEng = dstFar;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < min (dstFlyer, dstFar)) {\n    ro += rd * dstObj;\n    cId = floor (ro.xz);\n    SetBldgParms ();\n    isRf = (idObj == idBldg && qHit.y > bHt - 0.002 * flrHt);\n    if (isRf) vn = vec3 (0., 1., 0.);\n    else vn = (idObj == idBldg) ? normalize (vec3 (Rot2D (FontTexNf (Rot2D (ro.xz - cId - 0.5,\n       bRot) + 0.5), - bRot), 0.00001).xzy) : ObjNf (ro);\n    col4 = ObjCol (ro, rd, vn);\n    col = col4.rgb;\n    if (isRf && (rd.y <= 0. || rd.y > 0. && dstObj < 0.3 * dstFar) && fDayLt < 0.3) col4.a =-1.;\n    if (col4.a >= 0.) {\n      if (idObj == idRoad) vn = VaryNf (512. * qHit, vn, 2.);\n      else if (idObj == idBldg && ! isRf) vn = VaryNf (512. * qHit, vn, 0.5);\n      if (fDayLt > 0.5) sh = mix (1., 0.5 + 0.5 * ObjSShadow (ro, sunDir), fDayLt);\n      col = col * (0.3 + 0.3 * max (dot (vn.xz, - normalize (sunDir.xz)), 0.) +\n         + 0.2 * max (vn.y, 0.) + 0.7 * sh * max (dot (vn, sunDir), 0.)) +\n         sh * col4.a * pow (max (dot (normalize (sunDir - rd), vn), 0.), 64.);\n      if (idObj == idBldg) col *= 0.5 + 0.5 * smoothstep (0.3, 0.7, fDayLt);\n      if (fDayLt > 0.5) col *= vec3 (1., 0.9, 0.8);\n    }\n    if (col4.a == -1.) {\n      rdr = reflect (rd, vn);\n      g = Rot2D (rdr.xz, 5.1 * atan (20. + cId.y, 20. + cId.x));\n      f = step (1., 0.3 * ro.y + 4. * rdr.y -\n         0.1 * floor (5. * IFbm1 (0.3 * atan (g.y, g.x) + pi) + 0.05));\n      if (idObj == idBldg) {\n        if (modeLt == 0 && ! isRf) {\n          col *= 0.5 + 3.5 * floor (2. * Hashff (73. * (floor (qHit.y / flrHt) -\n             floor (0.5 * nFloor * tCur))));\n        } else {\n          if (f == 1.) col = mix (0.3 * col, BgCol (ro, rdr), 0.5);\n          else col *= 0.3;\n          if (fDayLt < 1.) {\n            s = Hashfv2 (37. * cId);\n            f = step (fDayLt, 0.2 + 0.3 * Hashfv2 (47. * cId));\n            col = mix (0.2 * col, vec3 (0.8 + 0.2 * s, 0.75 - 0.4 * s, 0.), f);\n          }\n        }\n      } else if (idObj == idCarBdy) {\n        if (f == 1.) col = mix (0.3 * col, BgCol (ro, rdr), 0.5);\n        else col *= 0.3;\n        col = mix (vec3 (0.2, 0.1, 0.), col, fDayLt);\n      }\n    }\n    if (col4.a == -2.) col *= 1. - 0.95 * smoothstep (0.4, 0.7, dstObj / dstFar);\n    col = mix (col, BgCol (ro, rd), smoothstep (0.4, 1., dstObj / dstFar));\n  } else if (dstFlyer < dstFar) {\n    ro += rd * dstFlyer;\n    vn = FlyerNf (ro);\n    col4 = FlyerCol ();\n    col = col4.rgb;\n    if (col4.a >= 0.) {\n      if (fDayLt > 0.5) {\n        col = col * (0.2 + 0.8 * max (dot (vn, sunDir), 0.)) +\n           col4.a *  pow (max (dot (normalize (sunDir - rd), vn), 0.), 64.);\n        col = mix (col, BgCol (ro, reflect (rd, vn)), 0.2);\n      } else {\n        col = 0.6 * col * (0.7 + 0.3 * vn.y);\n        col = mix (col, BgCol (ro, reflect (rd, vn)), 0.5);\n      }\n    } else if (col4.a == -1.) {\n      col = mix (col, 0.8 * BgCol (ro, reflect (rd, vn)), 0.5);\n    }\n  } else col = BgCol (ro, rd);\n  if (dstEng < min (dstObj, dstFar)) col = mix (col, vec3 (1.), 0.4);\n  return pow (clamp (col, 0., 1.), vec3 (0.9));\n}\n\nvec3 TrackPath (float t)\n{\n  vec3 p;\n  float pLen, s, cCount;\n  pLen = 2.;\n  p.y = 0.1 + 3.5 * SmoothBump (0.2, 0.8, 0.1, mod (0.05 * t, 1.));\n  s = mod (t, 11.);\n  if (s < 7.) p.xz = (s < 4.) ? vec2 (0., s) : vec2 (s - 4., 4.);\n  else p.xz = (s < 9.) ? vec2 (3., 11. - s) : vec2 (12. - s, 2.);\n  cCount = floor (t / 11.);\n  if (mod (cCount, 2.) == 0.) p.x *= -1.;\n  else p.x -= 1.;\n  p.z += 2. * cCount;\n  p.xz *= pLen;\n  return p;\n}\n\nvoid FlyerPM (float s, float rl, float vu)\n{\n  vec3 fpF, fpB, vel, acc, va, ort, ca, sa;\n  float ds, rlFac, elFac, el, az;\n  ds = 0.15;\n  elFac = 0.7;\n  rlFac = 0.02;\n  fpF = TrackPath (s + ds);\n  fpB = TrackPath (s - ds);\n  vel = normalize ((fpF - fpB) / (2. * ds));\n  acc = (fpF - 2. * TrackPath (s) + fpB) / (ds * ds);\n  flPos = 0.5 * (fpF + fpB);\n  va = cross (acc, vel);\n  el = - elFac * asin (vel.y);\n  az = atan (vel.z, vel.x) - 0.5 * pi;\n  rl += rlFac * length (va) * sign (va.y);\n  ort = (vu >= 0.) ? vec3 (el, az, rl) : vec3 (- el, az + pi, - rl);\n  ca = cos (ort);\n  sa = sin (ort);\n  flMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n          mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n }\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat, vuFlyMat;\n  vec4 mPtr, stDat;\n  vec3 ro, rd, col, ori, ca, sa, vd;\n  vec2 mMid[9], ut[9], mSize, canvas, uv, uvv;\n  float zmFac, asp, sr, cTime, centMd, selMd, miniVu, tPos, tBgn;\n  bool mPtrTrk;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  stDat = Loadv4 (0);\n  mPtr = vec4 (stDat.xyz, 0.);\n  tCur = stDat.w;\n  stDat = Loadv4 (1);\n  tPos = stDat.x;\n  selMd = stDat.y;\n  tBgn = stDat.w;\n  flyerCol = 0.01 * mod (33. * tBgn, 100.);\n  centMd = (selMd >= 0.) ? selMd : floor (9. * mod (tCur / 90., 1.));\n  asp = canvas.x / canvas.y;\n  mSize = (1./9.) * vec2 (asp, 1.);\n  for (int k = 0; k < 9; k ++) {\n    mMid[k] = vec2 (1. / mSize.y, 1. / mSize.y - 1.) * mSize *\n       vec2 (-1. + 2. * (float (k) + 0.5) / 9., -1.);\n    ut[k] = abs (uv - mMid[k]) - mSize;\n  }\n  miniVu = -1.;\n  for (int k = 0; k < 9; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      miniVu = float (k);\n      break;\n    }\n  }\n  mPtrTrk = (mPtr.y > -0.5 + mSize.y);\n  modeMv = int (mod (((miniVu < 0.) ? centMd : miniVu), 3.));\n  modeLt = int (floor (((miniVu < 0.) ? centMd : miniVu) / 3.));\n  szFacFl = 0.01;\n  FlyerPM (tPos, 0.2 * pi * (Fbm1 (3.5 * tPos) - 0.5), 1.);\n  flyerPos = flPos;\n  flyerPos.y += 0.04 * (Fbm1 (tPos) - 0.5);\n  flyerMat = flMat;\n  FlyerPM (tPos + ((modeMv == 1) ? 0.3 : -0.3), 0., (modeMv == 0) ? 0. : -1.);\n  ro = flPos;\n  ro.xz += 0.01;\n  vuFlyMat = flMat;\n  zmFac = 1.8;\n  if (mPtr.z > 0. && mPtrTrk && miniVu < 0. && modeMv != 0) zmFac += ((modeMv == 1) ? 10. : 20.) *\n     clamp (mPtr.y, 0., 1.) * (0.2 + 0.8 * smoothstep (1.5, 2.5, flyerPos.y));\n  rd = normalize (vec3 (2. * tan (0.5 * atan (uv.x / (asp * zmFac))) * asp, uv.y / zmFac, 1.));\n  if (modeMv == 0) {\n    ori = vec3 (mix (-0.02 * pi, -0.1 * pi, smoothstep (1.5, 2.5, ro.y)), 0.001 * pi,\n       0.1 * pi * (Fbm1 (2.5 * tPos) - 0.5));\n    if (mPtr.z > 0. && mPtrTrk && miniVu < 0.) ori.xy +=\n       vec2 (clamp (0.5 * pi * mPtr.y, -0.4 * pi, 0.25 * pi), clamp (2. * pi * mPtr.x, - pi, pi));\n    ca = cos (ori);\n    sa = sin (ori);\n    vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n       mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n       mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.);\n  } else {\n    if (modeMv == 2) ro.y = 0.1;\n    vd = normalize (flyerPos - ro);\n    vuMat = mat3 (vec3 (vd.z, 0., - vd.x) / sqrt (1. - vd.y * vd.y),\n       vec3 (- vd.y * vd.x, 1. - vd.y * vd.y, - vd.y * vd.z) / sqrt (1. - vd.y * vd.y), vd);\n  }\n  dstFar = 50.;\n  flrHt = 0.07;\n  fDayLt = (modeLt == 1) ? SmoothBump (0.2, 0.8, 0.1, mod (tCur / 20., 1.)) : ((modeLt == 0) ? 0. : 1.);\n  sunDir = normalize (vec3 (1., 0.5, -1.));\n  cTime = 0.15 * mod (tCur, 80.);\n  cDir = mod (floor (cTime), 2.);\n  cTimeV = vec2 (floor (0.5 * floor (cTime)), mod (cTime, 1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    uvv = uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) * pi);\n    rd = normalize (vec3 (2. * tan (0.5 * atan (uvv.x / (asp * zmFac))) * asp, uvv.y / zmFac, 1.));\n    rd = vuMat * rd;\n    if (modeMv == 0) rd = rd * vuFlyMat;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  uv = abs (uv);\n  if (mPtr.z > 0. && modeMv == 0 && mPtrTrk && max (uv.x, uv.y) < 0.05 && min (uv.x, uv.y) < 0.003)\n     col = mix (col, vec3 (0.1, 1., 0.1), 0.3);\n  for (int k = 0; k < 9; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0. && min (abs (ut[k].x), abs (ut[k].y)) * canvas.y < 2.)\n       col = (float (k) == centMd) ? ((selMd < 0.) ? vec3 (1., 1., 0.1) : vec3 (1., 0.1, 0.1)) :\n       vec3 (0.1, 0.1, 0.8);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat IFbm1 (float p)\n{\n  float s, a;\n  p *= 5.;\n  s = 0.;\n  a = 10.;\n  for (int j = 0; j < 4; j ++) {\n    s += floor (a * Noiseff (p));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return 0.1 * s;\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txFnt iChannel1\n\nfloat FontTexDf (vec2 p)\n{\n  return texture (txFnt, mod ((bIdV + p) * (1. / 16.), 1.)).a - 0.5 + 1. / 256.;\n}\n\nvec2 FontTexNf (vec2 p)\n{\n  vec2 tx;\n  tx = texture (txFnt, mod ((bIdV + p) * (1. / 16.), 1.)).gb - 0.5;\n  return vec2 (tx.x, - tx.y);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Alphapolis\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst float txRow = 128.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, mPtr, mPtrP, dateCur;\n  vec2 canvas, iFrag;\n  float tCur, tCurP, tBgn, tPos, vel, tChMd, selMd;\n  int pxId;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 2) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur = mod (tCur, 18000.);\n  vel = 0.2;\n  if (iFrame <= 5) {\n    tBgn = mod (floor (37. * dateCur.w), 3600.);\n    tCur += tBgn;\n    tCurP = tCur;\n    tChMd = tCur;\n    tPos = vel * tCurP;\n    selMd = -1.;\n  } else {\n    stDat = Loadv4 (0);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    tCurP = stDat.w;\n    stDat = Loadv4 (1);\n    tPos = stDat.x;\n    selMd = stDat.y;\n    tChMd = stDat.z;\n    tBgn = stDat.w;\n    tCur += tBgn;\n  }\n  if (mPtr.z > 0. && (mPtrP.z <= 0. || selMd >= 0.)) {\n    if (mPtr.y < -0.5 + (1./9.)) selMd = floor (9. * clamp (mPtr.x + 0.5, 0., 0.99));\n    tChMd = tCur + 10.;\n  }\n  if (tCur > tChMd) selMd = -1.;\n  tPos += vel * (tCur - tCurP);\n  if (pxId == 0) stDat = vec4 (mPtr.xyz, tCur);\n  else if (pxId == 1) stDat = vec4 (tPos, selMd, tChMd, tBgn);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}