{
    "Shader": {
        "info": {
            "date": "1721413671",
            "description": "sources  https://www.shadertoy.com/view/XflcR2",
            "flags": 0,
            "hasliked": 0,
            "id": "MclyzX",
            "likes": 2,
            "name": "Kaleidoscope 5",
            "published": 3,
            "tags": [
                "kaleidoscope"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 77
        },
        "renderpass": [
            {
                "code": "//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.7, 0.55, 0.6);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nuint murmurHash12(uvec2 src) {\n    const uint M = 0x5bd1e995u;\n    uint h = 1190494759u;\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nfloat hash12(vec2 src) {\n    uint h = murmurHash12(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\nvec2 CenterUV(vec2 fragCoord )//uv的居中与反拉伸https://www.shadertoy.com/view/M3cSDS\n{\n    return (2.0 * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\nvec2 RotateUV(vec2 uv,float angle)//uv旋转\n{\n    return vec2(uv.x * cos(angle) - uv.y * sin(angle),uv.x * sin(angle) + uv.y *cos(angle));\n}\nvec2 RotateUV(vec2 uv,float angle,vec2 point)\n{\n    uv -= CenterUV(point);\n    uv = RotateUV(uv,(1.-clamp(length(uv)*1.5,0.,1.))*sin(iTime)*2.);\n    uv += CenterUV(point);\n    return uv;\n}\nfloat CrateCheckerBoard(vec2 uv,float cellSize)//创建棋盘格https://www.shadertoy.com/view/lXdSzX\n{\n    vec2 checkeruv = step(mod(uv , cellSize * 2.), vec2(cellSize));\n    return mix(checkeruv.x,1.-checkeruv.x,checkeruv.y);\n}\nfloat lerp(float x, float y, float v)\n{\n    if(v<=0.0) return x;\n    else if(v>=1.0) return y;\n    else\n    { \n        return (y - x) * (((v * 6.0 - 15.0) * v + 10.0) * v * v * v) + x;\n    }\n}\nvec2 random_gradient(vec2 uv)\n{\n    float angle = hash12(uv)*2.0*3.14159265358979;\n    return vec2(cos(angle),sin(angle));\n}\nfloat dot_gradient(vec2 i, vec2 uv)\n{\n    vec2 d = uv - i;\n    vec2 grad = random_gradient(vec2(i.x,i.y));\n    return d.x*grad.x + d.y*grad.y;\n}\nfloat pnoise(vec2 uv)\n{\n    vec2 fr = fract(uv);\n    vec2 fl = floor(uv);\n    \n    float n0 = dot_gradient(fl,uv);\n    float n1 = dot_gradient(fl+vec2(1.0,0.0),uv);\n    float o0 = lerp(n0,n1,uv.x-fl.x);\n    \n    n0 = dot_gradient(fl+vec2(0.0,1.0),uv);\n    n1 = dot_gradient(fl+vec2(1.0,1.0),uv);\n    float o1 = lerp(n0,n1,uv.x-fl.x);\n    \n    return lerp(o0,o1,uv.y-fl.y);\n}\nfloat sins(float x, float time)\n{\n    float a =\n    sin(x*20.0-time*8.0) +\n    sin(x*50.0-time*10.0) +\n    sin(x*90.0-time*22.0) +\n    sin(x*67.0-time*20.0) +\n    sin(x*32.0-time*12.0) +\n    sin(x*54.0-time*5.0) +\n    sin(x*120.0-time*11.0)\n    ;\n    return max(0.0,abs(a)-1.5)*0.2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pix_l = 1.0/iResolution.xy;\n    vec2 uv = fragCoord*pix_l;\n    vec4 O = fragColor;\n    vec2 C =fragCoord ;\n     O=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n        p.z+=iTime*6.5;\n        a=10.;\n        p=mod(p-a,a*2.)-a;\n        s=6.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            p.y<p.x?p=p.zyx:p;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 );\n         }\n         g+=e=length(p.yz)/s;\n       //  g+=e=length(p.yx)/s;\n    }\n    uv -= 0.5;\n    uv *= 128.0;\n     vec2 uv3 = CenterUV(uv*10. );\n    uv3 = RotateUV(uv3,0.,2.+vec2(10.*cos(iTime), 10.*sin(iTime)));\n    float checker = CrateCheckerBoard(uv3,0.2);\n\nuv.y+=16.*cos(iTime*5.);\nuv.x+=16.*sin(iTime*5.);\n    uv.x *= iResolution.x/iResolution.y;\n\n    float theta = atan(uv.x,uv.y)+checker;\n    float dist = pow(length(uv),0.2);\n    float ntheta = mod(theta,3.1415926535/4.0)-3.14159265358979/8.0;\n    vec2 uv1 = vec2(cos(ntheta)*dist,sin(ntheta)*dist);\n    vec2 uv2 = vec2(cos(ntheta)*length(uv),sin(ntheta)*length(uv));\n  \n    float ti = floor(iTime*1.0) + pow(mod(iTime*2.0,1.0),0.8);\n    float a = sins(uv1.x,ti*0.5-iTime*0.15);\n    a=pow(a,2.0)*5.0;\n    float b = 1000.0;\n    for(int i = 0; i < 10; i++)\n    {\n        b = min(b,abs(length(uv2+vec2(\n                cos((iTime+ti)*(0.5+1.0*hash12(vec2(i,1.0))))-8.0*hash12(vec2(i,2.0)),\n                sin((iTime+ti)*(0.5+1.0*hash12(vec2(i,1.0))))-8.0*hash12(vec2(i,2.0)))\n                )-10.0*hash12(vec2(i,4.0))\n            ));\n    }\n    b=max(b-0.05,0.0);\n    a=max(a,10.0*exp(-6.0*b));\n    vec3 col = palette(a*.1 + uv1.x*8.0 - ti*0.8-iTime*0.08)*a;\n    col = vec3(pow(col.x,0.5),pow(col.y,1.5),pow(col.x,0.5));\n    fragColor = vec4(col*mod(fragCoord.x, 4.),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}