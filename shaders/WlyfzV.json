{
    "Shader": {
        "info": {
            "date": "1614655111",
            "description": "Shader coded live in Bonzomatic with feedback for CC2021 winter shader jam.\nPoV livecoding video: https://www.youtube.com/watch?v=qJHWzyXCUtw\nJam stream vod: https://www.twitch.tv/videos/923078569?t=01h35m41s",
            "flags": 32,
            "hasliked": 0,
            "id": "WlyfzV",
            "likes": 11,
            "name": "[live] CC2021 winter shader jam ",
            "published": 3,
            "tags": [
                "feedback",
                "live",
                "bonzomatic"
            ],
            "usePreview": 0,
            "username": "w23",
            "viewed": 443
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec3 E=vec3(0.,.01, 1.);\nfloat t, dt;\n\n//#define T(t,s) texture(t,(s)/textureSize(t,0))\n#define N(s) (texture(iChannel1, (s*.5)/vec2(iChannelResolution[1])).r/3.)\n#define ffti(s) (t*5.+.5 *pow(sin(t*s/2.), 2.)) // T(texFFTIntegrated, s).r\n#define ffts(s) (N(t*10.+s*10.)*3.) // T(texFFTSmoothed, s).r\n#define Pf(s) texture(iChannel0, (s)/iResolution.xy)\n\n#define R(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nfloat vmax(vec3 v){return max(max(v.x, v.y), v.z);}\nfloat vmax(vec2 v){return max(v.x, v.y);}\nfloat vmax(float v) { return v; }\n#define box(v, s) vmax(abs(v) - (s))\n//float box(vec2 v, vec2 s) { return vmax(abs(v) - s); }\n#define rep(v,s) (mod((v),(s)) - (s)*.5)\n\nfloat hash(float f){return fract(sin(f)*47382.452378);}\n\nvec3 cp = vec3(0.);\nfloat wd=1e6, wb = 1e6, wr = 1e6, wg = 1e6;\n\nfloat sqr(vec3 pb, float rsb, float thicc, vec2 is, vec2 es, float fftr) {\n  float cb = floor(pb.z / rsb);\n  pb.z = rep(pb.z, rsb);\n  float db = box(pb.z, thicc);\n  pb.xy *= R(.5 + cb*.1 + fftr * ffti(mod(cb+t, 16.)));\n  db = max(db, -box(pb.xy, is));\n  db = max(db, box(pb.xy, es));\n  return db;\n}\n\nfloat w(vec3 p) {\n  wg = p.y + N(p.xz*10.) * 2.;\n  \n  wr = length(cp-p-vec3(.08, 0.1, .6)) - .1;\n  \n  wb = sqr(p, 1.5, .4, vec2(1.), vec2(1.1), .001);\n  wb = min(wb, sqr(p, 7., 1.4, vec2(5.), vec2(5.1), 0.));\n  \n  {\n    vec3 prcss = vec3(5.);\n    vec3 prC = floor(p/prcss);\n    vec3 prc = rep(p, prcss);\n    prc.y += sin(t + prC.z * 10.);\n    prc.xy *= R(hash(prC.z)*70.);\n    prc.xz *= R(hash(prC.x)*60.);\n    wb = min(wb, box(prc, vec3(.1)));\n  }\n\n  return wd = min(min(wb, wr), wg);\n}\n\nvec3 wn(vec3 p) {\n  return normalize(vec3(\n    w(p+E.yxx) - w(p-E.yxx),\n    w(p+E.xyx) - w(p-E.xyx),\n    w(p+E.xxy) - w(p-E.xxy)));\n}\n\nfloat tr(vec3 O, vec3 D, float l, float L) {\n  for(float i=0.;i<100.;++i) {\n    float d=w(O+D*l);l+=d;\n    if (d<.001*l||l>L) break;\n  }\n  return l;\n}\n\n  vec3 pal(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b * cos((t*c + d) * 3.141593*2.);\n  }\n\nvec3 ld;\nvec3 lc = vec3(.9, .7, .5);\n\nvec3 bg(vec3 d) {\n  return mix(vec3(1.), \n    vec3(.5, .6, .9), smoothstep(0., .2, d.y));\n}\n\nfloat ao(vec3 p, vec3 n, float S, float L) {\n  float v = 1.;\n  L /= S;\n  for (float s=1.;s<=S;++s) {\n    float l = L * s;\n    float d = w(p + n * l);\n    v -= max(0., l-d) * l;\n  }\n  return clamp(v / S, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    t = iTime, dt = iTimeDelta;\n    ld = normalize(vec3(sin(t*.1)*3.,1.,-4.*cos(ffti(7.)*.1 + t*.3)));\n    \n    vec2 pix = fragCoord.xy;\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n  \n  vec3 O=vec3(0., .1, 5. - ffti(5.)*.6 - t), D=normalize(vec3(uv, -1.)),C=vec3(0.);\n  cp = O;\n  O.x += (N(t*10.)-.2)*3.*.3;\n  O.y += (N(t*7.)-.2)*1.*.3;\n  O.z += (N(t*3.)-.2)*4.*.3;\n  D.xz *= R((N(t*.3)-.2)*3.);\n  \n  vec3 kc = vec3(1.);\n  for (float r= 0.;r<2.;++r) {\n    float L=30.,l=tr(O,D,0.,L);\n    \n    vec3 bgc = bg(D);\n    \n    if (l > L) {\n      C += kc * bgc;\n      break;\n    }\n    \n    vec3 p = O + D * l;\n      \n    int mat = (wd == wb) ? 1\n      : (wd == wr) ? 2 : 0;\n      \n    vec3 n = wn(p);\n    vec3 md = vec3(1.);\n    \n    if (mat == 0) {\n      md = vec3(.95, .6, .5);\n      //md = vec3(.68, .6, .45);\n    }\n\n    float shl = 30.;\n    float sh = step(shl, tr(p, ld, .1, shl));\n    vec3 c = lc * md * max(0., dot(n, ld)) * sh;\n    float aoc = 0.\n      + ao(p, n, 4., .2)\n      + ao(p, n, 4., .8);\n    aoc /= 2.;\n    c += md * bg(E.xzx) * .3 * aoc;\n    //c = vec3(aoc);\n      \n    C += kc * mix(bgc, c, 1. - l/L);\n    \n    if (mat == 2) {\n      kc *= md * .8;\n      O = p + n * .01;\n      D = reflect(D, n);\n    } else break;\n  }\n  \n  float A = 0.;\n  \n  float a = N(pix/3. + floor(ffti(9.))*40.) * 17.;\n  vec2 off = vec2(cos(a), sin(a)) * 3.;\n  off -= uv * 30.;\n  \n  A += Pf(pix + off).a;\n  A -= dt * 2.;\n  \n  A = clamp(A, 0., 1.);\n  //A = 0.;\n  \n  float ca = dot(C, E.zzz) / 3.;\n  C += .2 * A * E.zzz;//pal(A, vec3(0.,.0,.0), vec3(.5, .1, .8), vec3(.25, .2, .5) * 3., vec3(.1,.2,.3));\n  A += step(.5, ca);\n\n\tfragColor = vec4(sqrt(C), A);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}