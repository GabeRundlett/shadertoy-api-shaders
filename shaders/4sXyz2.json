{
    "Shader": {
        "info": {
            "date": "1488888506",
            "description": "Playing around with a segment SDF to get something a little more life-like.",
            "flags": 0,
            "hasliked": 0,
            "id": "4sXyz2",
            "likes": 31,
            "name": "Organic segment test",
            "published": 3,
            "tags": [
                "test",
                "sdf",
                "demoscene",
                "organic",
                "segment"
            ],
            "usePreview": 0,
            "username": "Zavie",
            "viewed": 24981
        },
        "renderpass": [
            {
                "code": "/*\n\nAn experiment at creating an organic looking segment.\n\nThe function was used for modeling the statue of Poseidon in the\ntemple scene of the 64kB intro \"H - Immersion\", by Ctrl-Alt-Test.\n\n > http://www.ctrl-alt-test.fr/?page_id=444\n > https://www.youtube.com/watch?v=27PN1SsXbjM\n\n-- \nZavie / Ctrl-Alt-Test\n\n*/\n\n#define PI acos(-1.)\n\nfloat exponentialSmoothMmin(float a, float b, float k)\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\nfloat polynomialSmoothMmin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat segmentDistance(vec2 p, vec2 a, vec2 b, out float h)\n{\n\tvec2 ap = p - a;\n\tvec2 ab = b - a;\n\th = clamp(dot(ap, ab) / dot(ab, ab), 0., 1.);\n\treturn length(ap - ab * h);\n}\n\nvec4 limb(vec2 p, vec2 a, vec2 b, float ra, float rb, float fill, float k)\n{\n\tfloat da = length(a - p) - ra;\n\tfloat db = length(b - p) - rb;\n    float h;\n    float dmid = segmentDistance(p, a, b, h);\n\n    float bump = sin(2.*PI * (pow(h, 0.9) - 0.25)) * 0.5 + 0.5;\n    dmid -= mix(ra, rb, h + fill * bump);\n\n    float d = exponentialSmoothMmin(dmid, min(da, db), k);\n    return vec4(d, da, db, dmid);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 8.*fragCoord.xy / iResolution.y;\n\n    vec2 p1 = vec2(sin(2.*iTime), cos(iTime))+vec2(3.);\n    vec2 p2 = vec2(sin(3.*iTime), cos(1.2*iTime))+vec2(10., 4.);\n    \n    vec4 d = limb(uv, p1, p2, 0.85, 1.5, 0.8, 5.);\n\n    \n    vec3 color = 1.\n        * debugDistance(iResolution, d.x, vec3(0.8, 0.8, 0.8))\n        * debugDistance(iResolution, d.y, vec3(0.8, 0.5, 1.))\n        * debugDistance(iResolution, d.z, vec3(0.5, 0.8, 1.))\n        * debugDistance(iResolution, d.w, vec3(0.5, 1.0, 0.5))\n        ;\n\tfragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// See: https://www.shadertoy.com/view/XcVGRR\nvec3 debugDistance(vec3 iResolution, float d, vec3 color)\n{\n    float refWidth = iResolution.y / 1080.;\n\n    float dd1 = fwidth(d);\n    float width1 = 2.5 * dd1 * refWidth;\n    float iso1 = smoothstep(1. - width1 - dd1, 1. - width1 + dd1, abs(fract(d) * 2. - 1.));\n\n    float dd5 = fwidth(5. * d);\n    float width5 = 0.75 * dd5 * refWidth;\n    float iso5 = smoothstep(1. - width5 - dd5, 1. - width5 + dd5, abs(fract(5.*d) * 2. - 1.));\n\n    float dd0 = fwidth(d);\n    float width0 = 3. * dd0 * refWidth;\n    float iso0 = smoothstep(1. - width0 - dd0, 1. - width0 + dd0, 1. - abs(d));\n\n    float isoLines = max(iso0, max(iso1, iso5));\n\n    vec3 background = (d > 0. ? vec3(1.) : mix(vec3(0.8), color, 0.1));\n    vec3 lineColor = mix(color * (d > 0. ? 1. : 0.8), vec3(0.), iso0);\n\n    return mix(background, lineColor, isoLines);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}