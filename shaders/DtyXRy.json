{
    "Shader": {
        "info": {
            "date": "1686156537",
            "description": "just added color via hsb2rgb() -tmm all credit to @mrange\nCC0: Late night truchet hacking\nContinued a bit on the braided truchets\nTinkered around and liked the result\nCode is dirty and it is getting late\n",
            "flags": 0,
            "hasliked": 0,
            "id": "DtyXRy",
            "likes": 3,
            "name": "Late night truchet hacking+Color",
            "published": 3,
            "tags": [
                "2d",
                "truchet"
            ],
            "usePreview": 0,
            "username": "timmaffett",
            "viewed": 163
        },
        "renderpass": [
            {
                "code": "// Fork of \"Late night truchet hacking\" by mrange. https://shadertoy.com/view/DlVSRm\n// 2023-06-07 16:46:44\n\n// CC0: Late night truchet hacking\n//  Continued a bit on the braided truchets\n//  Tinkered around and liked the result\n//  Code is dirty and it is getting late\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n\nvec3 hsb2rgb( in vec3 c )\n{\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return (c.z * mix( vec3(1.0), rgb, c.y));\n}\n\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat modMirror1(inout float p, float size) {\n  float halfsize = size*0.5;\n  float c = floor((p + halfsize)/size);\n  p = mod(p + halfsize,size) - halfsize;\n  p *= mod(c, 2.0)*2.0 - 1.0;\n  return c;\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nfloat modPolar(inout vec2 p, float repetitions) {\n  float angle = TAU/repetitions;\n  float a = atan(p.y, p.x) + angle/2.;\n  float r = length(p);\n  float c = floor(a/angle);\n  a = mod(a,angle) - angle/2.;\n  p = vec2(cos(a), sin(a))*r;\n  // For an odd number of repetitions, fix cell index of the cell in -x direction\n  // (cell index would be e.g. -5 and 5 in the two halves of the cell):\n  if (abs(c) >= (repetitions/2.0)) c = abs(c);\n  return c;\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat pabs(float a, float k) {\n  return -pmin(a, -a, k);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat octogon(vec2 p, float r ) {\n    const vec3 k = vec3(-0.9238795325, 0.3826834323, 0.4142135623 );\n    p = abs(p);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\n// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat segment(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 toPolar(vec2 p) {\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 toRect(vec2 p) {\n  return p.x*vec2(cos(p.y), sin(p.y));\n}\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nfloat smoothKaleidoscope(inout vec2 p, float sm, float rep) {\n  vec2 hp = p;\n\n  vec2 hpp = toPolar(hp);\n  float rn = modMirror1(hpp.y, TAU/rep);\n\n  float sa = PI/rep - pabs(PI/rep - abs(hpp.y), sm);\n  hpp.y = sign(hpp.y)*(sa);\n\n  hp = toRect(hpp);\n\n  p = hp;\n\n  return rn;\n}\n\nfloat ref(inout vec2 p, vec2 r) {\n  float d = dot(p, r);\n  p -= r*min(0.0, d)*2.0;\n  return d < 0.0 ? 0.0 : 1.0;\n}\n\nvec3 braid(vec3 col, vec2 p, vec2 cp, float z, float aa) {\n  const float reps  = 32.0;\n  const float a     = TAU/reps;\n  const float bsz0  = a*0.3;\n  const mat2 rot2   = ROT(a*0.5);\n  const float sa    = a*-0.12;\n  const mat2 rot22   = ROT(sa);\n  const float bw    = 0.04;\n  const vec2 bp0 = -vec2(-0.5, 0.0);\n  const vec2 p00 = bp0*transpose(rot2);\n  const vec2 p01 = bp0*rot2;\n  const vec2 bp1 = -vec2(-0.5/cos(0.5*a+sa), 0.0);\n  const vec2 p10 = bp1*rot22;\n  const vec2 p11 = bp1*transpose(rot22);\n\n  float cd = length(cp)-0.5;\n  vec2 pp = cp;\n\n  pp *= rot2;\n  float n = modPolar(pp, reps);\n\n  float bd0 = segment(pp, p00, p10)-bw;\n  float bd1 = segment(pp, p01, p11)-bw;\n  bd0 = abs(bd0)-0.25*bw;\n  bd1 = abs(bd1)-0.25*bw;\n\n  float h = hash(n + 123.4);\n  if (sign(h-0.5)*cd > 0.) {\n    float tmp = bd0;\n    bd0 = bd1;\n    bd1 = tmp;\n  }\n\n  const float shd = 175.0;\n  col *= 1.0-exp(-shd*max(bd0, 0.0));\n  col = mix(col, vec3(1.0), smoothstep(0.0, -aa, bd0));\n  col *= 1.0-exp(-shd*max(bd1, 0.0));\n  col = mix(col, vec3(1.0), smoothstep(0.0, -aa, bd1));\n  //col = hsb2rgb(col);\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  float l = length(p);\n  const float pr = 10.0;\n  const float z = 1.0-0.25;\n  p /= z;\n\n  p *= ROT(0.05*TIME);\n  float n = smoothKaleidoscope(p, 0.075, 64.0);\n  p *= ROT(-0.05*TIME);\n  p += pr*sin(0.125*vec2(1.0, sqrt(0.5))*TIME/pr);\n\n  float aa = 4.0/(z*RESOLUTION.y);\n\n\n  vec2 cp = p;\n  vec2 np = round(cp);\n  float nh0 = hash(np+123.4);\n  cp -= np;\n  \n  if (nh0 > 0.5) cp = cp*ROT(PI/2.0);\n\n  vec3 col = vec3(0.1)*smoothstep(2.0, 0.0, l);\n  vec2 op = cp;\n  op = abs(op);\n  op -= 0.5;\n  float od1 = octogon(op, 1.0/6.0);\n  od1 = abs(od1)-1./16.0;\n  od1 = abs(od1)-1./32.0;\n  od1 = abs(od1)-1./96.0;\n  float od0 = length(op)-1.0/3.0;\n  \n  const float shd = 25.0;\n  col *= 1.0-exp(-shd*0.5*max(od0, 0.0));\n  col = mix(col, vec3(1.0), smoothstep(0.0, -aa, od0));\n  col *= 1.0-exp(-shd*max(od1, 0.0));\n  col = mix(col, vec3(1.0), smoothstep(0.0, -aa, od1));\n  col = mix(col, vec3(1.0), smoothstep(0.0, -aa, abs(od0)-0.011));\n  vec2 bp = cp;\n  float bn = ref(bp, normalize(vec2(1.0)));\n  bp -= 0.5;\n  col = braid(col, p, bp, z, aa);\n  col *= smoothstep(1.75, 0.5, length(pp));\n  col = sqrt(col);\n  col = hsb2rgb(vec3(col.y,0.9+col.x,0.7+col.z));\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p*= 1.2;\n  \n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}