{
    "Shader": {
        "info": {
            "date": "1583008640",
            "description": "Voronoi particle tracking on a cubemap with geodesic integration.",
            "flags": 48,
            "hasliked": 0,
            "id": "3tVSRG",
            "likes": 10,
            "name": "Particles on a sphere",
            "published": 3,
            "tags": [
                "voronoi",
                "simulation",
                "sphere"
            ],
            "usePreview": 0,
            "username": "michael0884",
            "viewed": 465
        },
        "renderpass": [
            {
                "code": "float sphere_intersection(vec3 r, vec3 p, vec4 sphere)\n{\n\tp = p - sphere.xyz;\n\tif(p == vec3(0)) return sphere.w;\n\t\n\tfloat b = dot(p, r);\n\tfloat c = sphere.w*sphere.w - dot(p,p);\n\tfloat d = b*b + c;\n\t\n\tif((d <= 0.)) //if no intersection\n\t{\n\t\treturn 0.;\n\t}\n\telse\n\t{\n\t\treturn -sqrt(d) - b; //use closest solution in the direction of the ray\n\t}\n}\n\nvec3 particle_func(vec3 sph_pos, vec4 particle)\n{\n    //decode particle\n    vec3 pos, vel;\n    decodePosVel(particle, pos, vel);\n    \n    return exp(-0.1*pow(angle_between(pos, sph_pos)/prad,2.))*sin(80.*vec3(1,2,3)*abs(vel)) + exp(-pow(40.*angle_between(pos, sph_pos)/prad,2.));\n}\n\nconst int KEY_UP = 38;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates \n   \n    vec2 pos = (fragCoord - iResolution.xy*0.5)/max(iResolution.x,iResolution.y);\n    \n    vec2 uv = iMouse.xy/iResolution.xy;\n    vec2 angles = vec2(uv.x*2., uv.y - 0.5)*PI;\n    \n    vec3 camera_z = vec3(cos(angles.x)*cos(angles.y),sin(angles.x)*cos(angles.y),sin(angles.y));\n    vec3 camera_x = normalize(vec3(cos(angles.x+PI*0.5), sin(angles.x+PI*0.5),0.)); \n    vec3 camera_y = -normalize(cross(camera_x,camera_z));\n    \n    vec3 ray = normalize(camera_z + FOV*(pos.x*camera_x + pos.y*camera_y));\n    vec3 cam_pos = -R*vec3(cos(angles.x)*cos(angles.y),sin(angles.x)*cos(angles.y),sin(angles.y));\n    \n    vec4 sphere = vec4(0.,0.,0., 1.);\n    \n    float t = sphere_intersection(ray, cam_pos, sphere);\n    \n    if(t != 0.)\n    {\n        //sphere\n        vec3 sph_pos = normalize(cam_pos + ray*t - sphere.xyz);\n        vec4 particle = texture(iChannel1, sph_pos);\n\t\tvec4 p0 = pixel(ch0, particle.xy);\n        fragColor.xyz = 1. - particle_func(sph_pos, p0) + particle.z;\n    }\n    else\n    {    \n        //background\n      \n        vec3 sph_pos = normalize(cam_pos + ray*t - sphere.xyz);\n        vec4 particle = texture(iChannel1,  ray.yzx);\n\t\tvec4 p0 = pixel(ch0, particle.xy);\n        fragColor.xyz = 1. - particle_func( ray.yzx, p0);\n    }\n \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//voronoi particle id tracking\n\nvoid Check(inout vec2 id, vec3 pos, vec2 dx)\n{\n    vec3 phi_axis = normalize(cross(pos, vec3(0,0,1)));\n    vec3 theta_axis = normalize(cross(pos, phi_axis));\n    \n    vec3 pos0 = particlepos(id);\n    vec2 id1 = texture(iChannel1, pos + dx.x*phi_axis + dx.y*theta_axis).xy;\n    vec3 pos1 = particlepos(id1);\n    \n    //check if the stored neighbouring particle is closer to this position \n    if(angle_between(pos, pos1) < angle_between(pos, pos0))\n    {\n        id = id1; //copy the particle info\n    }\n}\n\nvoid CheckP(inout vec2 id,  vec3 pos, vec2 id1)\n{\n    vec3 pos0 = particlepos(id);\n    vec3 pos1 = particlepos(id1);\n    \n    //check if the stored neighbouring particle is closer to this position \n    if(angle_between(pos, pos1) < angle_between(pos, pos0))\n    {\n        id = id1; //copy the particle info\n    }\n}\n\nvoid CheckRadius(inout vec2 id, vec3 pos, float r)\n{\n    Check(id, pos, vec2(-r,0));\n    Check(id, pos, vec2(r,0));\n    Check(id, pos, vec2(0,-r));\n    Check(id, pos, vec2(0,r));\n}\n\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    //previous value   \n    fragColor = texture(iChannel1, rayDir);\n    \n    for(float i = 0.; i < 6.; i++)\n   \t CheckP(fragColor.xy, rayDir, N*hash23(i*rayDir+iTime)); // check with a random particle\n    CheckRadius(fragColor.xy, rayDir, 1.5/1024.);\n    CheckRadius(fragColor.xy, rayDir, 6./1024.);\n    \n    vec3 pos = particlepos(fragColor.xy);\n    fragColor.z *= 0.99;\n    fragColor.z += exp(-pow(100.*angle_between(pos, normalize(rayDir))/prad,2.));\n    if(isnan( fragColor.z )) fragColor.z = 0.;\n    if(iFrame < 2) fragColor = vec4(0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Cube A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 41
                    }
                ],
                "type": "cubemap"
            },
            {
                "code": "#define PI 3.14159265\n#define FOV 2.\n#define R 2.0\n#define dt 0.25\n#define prad 0.1\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n#define pixel(a, p) texture(a, p/vec2(textureSize(a,0)))\n\n//sqrt of the paticle num\n#define N 25.\n\nvec2 encode2sphere(vec3 pos)\n{\n    pos = normalize(pos);\n    return vec2(atan(pos.y, pos.x), acos(pos.z));\n}\n\nvec3 decodesphere(vec2 angl)\n{\n    return vec3(cos(angl.x)*sin(angl.y), sin(angl.x)*sin(angl.y), cos(angl.y));\n}\n\nvec4 encodePosVel(vec3 pos, vec3 vel)\n{\n    pos = normalize(pos);\n    //phi theta\n    vec2 angl = encode2sphere(pos);\n    //spherical system axis\n    vec3 phi_axis = normalize(cross(pos, vec3(0,0,1)));\n    vec3 theta_axis = normalize(cross(pos, phi_axis));\n\tfloat v = length(vel);\n    //removing the radial component of velocity\n    vel = normalize(vel - dot(vel,pos)*pos);\n    \n    return vec4(angl, v*dot(phi_axis, vel),  v*dot(theta_axis, vel));\n}\n\nvoid decodePosVel(vec4 i, inout vec3 pos, inout vec3 vel)\n{\n    pos = decodesphere(i.xy);\n    //spherical system axis\n    vec3 phi_axis = normalize(cross(pos, vec3(0,0,1)));\n    vec3 theta_axis = normalize(cross(pos, phi_axis));\n    vel = phi_axis*i.z + theta_axis*i.w;\n}\n\nfloat angle_between(vec2 a,vec2 b)\n{\n    return atan(a.x*b.y-a.y*b.x,dot(a,b));\n}\n\nfloat angle_between(vec3 a,vec3 b)\n{\n    return acos(dot(a,b)/(length(a)*length(b)));\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n\n\nuniform sampler2D fake;\n\nvec3 particlepos(vec2 id)\n{\n    vec3 pos, vel;\n    decodePosVel(pixel(fake, id), pos, vel);\n    return pos;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//particle buffer\n\nvoid mainImage( out vec4 P, in vec2 id )\n{\n    if(id.x < N && id.y < N)\n    {\n         P = pixel(ch0, id);\n    \n        //integrate the geodesic eq\n        vec2 pv = P.zw;\n        //update angular velocities \n        float s = sin(P.y), c = cos(P.y);\n        P.z += dt*(-2.*pv.x*pv.y*c*s/(s*s + 0.00001)); //make sure no /0\n        P.w += dt*(pv.x*pv.x*s*c);\n        //update position\n\t\tP.x += dt*P.z;\n        P.y += dt*P.w;\n        \n        if(iFrame < 2)\n        {\n            //decode particle\n            vec3 pos = vec3(0), vel = vec3(0);\n            decodePosVel(P, pos, vel);\n\n            pos = normalize(hash32(id)-0.5);\n           \n            vel = 0.005*normalize(hash33(pos)-0.5);\n            //encode particle back\n            P = encodePosVel(pos, vel); \n        }\n    }\n    else discard;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 41,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a//media/previz/cubemap00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}