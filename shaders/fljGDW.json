{
    "Shader": {
        "info": {
            "date": "1623921408",
            "description": "I found this one was very intuitive and also made a deconstruction of the method (running by default).",
            "flags": 0,
            "hasliked": 0,
            "id": "fljGDW",
            "likes": 5,
            "name": "Maxnorm Distance to Ellipse",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "distance",
                "ellipse",
                "maxnorm",
                "deconstruction"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 167
        },
        "renderpass": [
            {
                "code": "#define DECONSTRUCT\n\n// Drawing utility\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\n\nfloat sdEllipse(in vec2 p, in vec2 ab) {\n    //p = abs(p);\n    //p = max(p, (p - ab).yx);\n    //float ba = ab.y / ab.x, a = ba * ba + 1.0;\n    //float b = p.y - p.x, bb = b * b;\n    //return p.x - (sqrt(bb - (bb - ab.y * ab.y) * a) - b) / a;\n\n    // Simpler ellipse distance by iq\n    p = abs(p);\n    p = max(p, (p - ab).yx);\n    float a = dot(ab, ab);\n    float b = p.y - p.x;\n    return p.x - (ab.y * sqrt(a - b * b) - ab.x * b) * ab.x / a;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    #ifdef DECONSTRUCT\n    float shift = 0.5 - 0.5 * cos(0.1 * iTime);\n    float scale = mix(1.0, 2.0, shift);\n\n    vec2 uv = abs((fragCoord - 0.5 * shift * iResolution.xy) / iResolution.y) * scale;\n    float unit = 2.0 * scale / iResolution.y;\n\n    vec2 ab = vec2(1.25, 0.4);\n    float dist = sdEllipse(uv, ab) / scale;\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(dist) * vec3(0.1, 0.4, 0.7);\n    color *= 1.0 - exp(-4.0 * abs(dist));\n    color *= 0.8 + 0.2 * cos(240.0 * dist);\n    drawSDF(abs(dist) * scale, vec3(1.0));\n\n    // Sample point\n    vec2 p = vec2(1.5, 0.5);\n    float r = (0.5 + 0.5 * sin(0.25 * iTime)) + 0.25;\n    float c = cos(r), s = sin(r);\n    p *= mat2(c * ab.x, -s * ab.x, s * ab.y, c * ab.y);\n\n    // Sample Distance\n    float pDist = abs(sdEllipse(p, ab));\n    drawSDF(length(uv - p) - 0.008, vec3(0.0, 1.0, 0.0));\n    drawSDF(abs(max(abs(uv.x - p.x), abs(uv.y - p.y)) - pDist), vec3(0.0, 1.0, 0.0));\n\n    // Vertical edge touching\n    if (abs(p.x) - ab.x > abs(p.y)) {\n        float seg = length(uv - vec2(p.x - pDist, clamp(uv.y, p.y - pDist, p.y + pDist)));\n        drawSDF(seg - 0.008, vec3(1.0, 0.0, 0.0));\n        if (abs(uv.x) - ab.x > abs(uv.y)) color.b += 0.5;\n        drawSDF(abs(uv.y - uv.x + ab.x) * sqrt(0.5) - 0.003, vec3(0.0));\n    }\n\n    // Horizontal edge touching\n    else if (abs(p.y) - ab.y > abs(p.x)) {\n        float seg = length(uv - vec2(clamp(uv.x, p.x - pDist, p.x + pDist), p.y - pDist));\n        drawSDF(seg - 0.008, vec3(1.0, 0.0, 0.0));\n        if (abs(uv.y) - ab.y > abs(uv.x)) color.b += 0.5;\n        drawSDF(abs(uv.x - uv.y + ab.y) * sqrt(0.5) - 0.003, vec3(0.0));\n    }\n\n    // Corner touching\n    else {\n        drawSDF(abs(uv.y - uv.x + p.x - p.y) * sqrt(0.5) - 0.001, vec3(0.0));\n        drawSDF(length(uv - p + pDist) - 0.015, vec3(1.0, 0.0, 0.0));\n    }\n\n    #else\n    // Alternate reality! :D\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    float time = iTime * 0.5;\n\n    // Default before user interaction\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse = vec2(0.5, 0.5 * sin(time)) * cos(time);\n\n    vec2 dims = vec2(0.3 + 0.05 * sin(iTime), 0.2 + 0.1 * cos(0.5 * iTime));\n    float dist = sdEllipse(uv, dims);\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(dist) * vec3(0.1, 0.4, 0.7);\n    color *= 1.0 - exp(-4.0 * abs(dist));\n    color *= 0.8 + 0.2 * cos(240.0 * dist);\n    drawSDF(abs(dist), vec3(1.0));\n\n    float mDist = abs(sdEllipse(mouse, dims));\n    drawSDF(length(uv - mouse) - 0.008, vec3(0.0, 1.0, 0.0));\n    drawSDF(abs(max(abs(uv.x - mouse.x), abs(uv.y - mouse.y)) - mDist), vec3(0.0, 1.0, 0.0));\n\n    #endif\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}