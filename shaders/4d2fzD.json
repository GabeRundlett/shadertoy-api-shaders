{
    "Shader": {
        "info": {
            "date": "1499805178",
            "description": "Creates HSV color from UV Coordinates. Converts HSV Color to RGB Color.",
            "flags": 0,
            "hasliked": 0,
            "id": "4d2fzD",
            "likes": 4,
            "name": "UV Color Wheel",
            "published": 3,
            "tags": [
                "2d",
                "rgb",
                "hsv"
            ],
            "usePreview": 0,
            "username": "jbracey2004",
            "viewed": 664
        },
        "renderpass": [
            {
                "code": "float pi = 3.14159265358979323846264;\n\nvec3 RGB_fromHSV(vec3 HSV)\n{\n    vec3 retCol;\n\tif ( HSV.y == 0.0 )\n    {\n       retCol.x = HSV.z;\n       retCol.y = HSV.z;\n       retCol.z = HSV.z;\n    }\n    else\n    {\n       float var_h = HSV.x * 6.0;\n       if ( var_h == 6.0 ) {var_h = 0.0;}     //H must be < 1\n       float var_i = floor( var_h );             //Or ... var_i = floor( var_h )\n       float var_1 = HSV.z * ( 1.0 - HSV.y );\n       float var_2 = HSV.z * ( 1.0 - HSV.y * ( var_h - var_i ) );\n       float var_3 = HSV.z * ( 1.0 - HSV.y * ( 1.0 - ( var_h - var_i ) ) );\n       if      ( var_i == 0.0 ) { retCol.x = HSV.z     ; retCol.y = var_3 ; retCol.z = var_1; }\n       else if ( var_i == 1.0 ) { retCol.x = var_2 ; retCol.y = HSV.z ; retCol.z = var_1; }\n       else if ( var_i == 2.0 ) { retCol.x = var_1 ; retCol.y = HSV.z ; retCol.z = var_3; }\n       else if ( var_i == 3.0 ) { retCol.x = var_1 ; retCol.y = var_2 ; retCol.z = HSV.z;     }\n       else if ( var_i == 4.0 ) { retCol.x = var_3 ; retCol.y = var_1 ; retCol.z = HSV.z;     }\n       else                   { retCol.x = HSV.z     ; retCol.y = var_1 ; retCol.z = var_2; }\n    }\n    return retCol;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uvc = -1.0*((2.0*uv) - 1.0);\n    float ang = (atan(uvc.y,uvc.x)+pi)/(2.0*pi);\n    ang = mod(ang - iTime, 1.0);\n    float dist = sqrt(uvc.x*uvc.x + uvc.y*uvc.y);\n    //vec3 colHSV = vec3(uv.x, 1.0, uv.y);\n    //vec3 colHSV = vec3(uvc.x, 1.0, uvc.y);\n    //vec3 colHSV = vec3(uvc.x, 1.0+uvc.y, abs(uvc.y));\n    vec3 colHSV = vec3(ang,1.0, dist);\n    vec3 colRGB = RGB_fromHSV( colHSV );\n    //fragColor = vec4(ang, dist, 0.0, 1.0);\n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    fragColor = vec4(colRGB,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}