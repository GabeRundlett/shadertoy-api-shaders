{
    "Shader": {
        "info": {
            "date": "1628098253",
            "description": "Using a newton-raphson solver to get the distance to a flower shape (only works with 3-12 \"petals\" right now).",
            "flags": 0,
            "hasliked": 0,
            "id": "fljXzK",
            "likes": 19,
            "name": "Distance to Flower",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "flower",
                "distance",
                "iterative"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 223
        },
        "renderpass": [
            {
                "code": "vec3 dMul(in vec3 f, in vec3 g) { return vec3(f.x * g.x, f.y * g.x + f.x * g.y, f.z * g.x + 2.0 * f.y * g.y + f.x * g.z); }\nvec3 dCos(in vec3 f) { float co = cos(f.x), si = sin(f.x); return vec3(co, -si * f.y, -co * f.y * f.y - si * f.z); }\nvec3 dSin(in vec3 f) { float co = cos(f.x), si = sin(f.x); return vec3(si,  co * f.y, -si * f.y * f.y + co * f.z); }\n\n// c: radius\n// a: petal length (amplitude)\n// f: number of petals (frequency)\n#define PI 3.14159265359\nfloat sdFlower(in vec2 p, in float c, in float a, in float f) {\n    float ang = mod(atan(p.y, p.x) + PI / f, 2.0 * PI / f) - PI / f;\n    p = vec2(cos(ang), sin(ang)) * length(p);\n    p.y = abs(p.y);\n\n    float t = 0.5 * PI / f;\n    if (p.x < c - a && a < 0.5 * c) t *= 1.5;\n    if (p.x > c + a) t = f < 4.0 ? 0.25 : 0.1;\n\n    for (int n=0; n < 10; n++) { // 6 seems enough but 10 for extra precision\n        vec3 r = vec3(c, 0.0, 0.0) + a * dCos(f * vec3(t, 1.0, 0.0));\n        vec3 dx = dMul(dCos(vec3(t, 1.0, 0.0)), r) - vec3(p.x, 0.0, 0.0);\n        vec3 dy = dMul(dSin(vec3(t, 1.0, 0.0)), r) - vec3(p.y, 0.0, 0.0);\n        vec3 dist = dMul(dx, dx) + dMul(dy, dy);\n        t -= dist.y / dist.z;\n    }\n\n    float r = c + a * cos(f * ang);\n    return length(p - vec2(cos(t), sin(t)) * (c + a * cos(f * t))) * sign(dot(p, p) - r * r);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 5.0;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 6.0; // Slight lag to maintain visibility\n\n    // Default before interaction\n    if (ivec2(iMouse.xy) == ivec2(0)) mouse = vec2(6.0, 3.0);\n\n    float c = mix(0.5, 1.5, 0.5 + 0.5 * cos(iTime * 0.25));\n    float a = (0.5 + 0.5 * cos(iTime)) * c;\n    float f = floor(mix(3.0, 12.0, 0.5 + 0.5 * sin(iTime * 0.25)));\n    float d = sdFlower(uv, c, a, f);\n    d *= 0.5; // Undo UV scaling and shrink the isolines a bit for visual purposes\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(d) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * d);\n\tcolor = mix(color, vec3(1.0), smoothstep(0.015, 0.0, abs(d)));\n\n    //color = mix(color, vec3(1.0), smoothstep(0.015, 0.0, abs(uv.x - 0.5 * ab.x / sqrt(2.0)) - 0.02));\n    //color = digitIn(color, vec3(0.0, 1.0, 0.0), uv * 0.1, 100.0, ab.y / ab.x);\n\n    fragColor = vec4(color, 1.0);\n    //if (uv.y > tan(PI / f) * uv.x || uv.y < 0.0) fragColor = vec4(0.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}