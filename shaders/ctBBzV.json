{
    "Shader": {
        "info": {
            "date": "1694215339",
            "description": "The skin effect is where the current tends towards the sides of the wire at high frequency. The color indicates the current. Here An emitter induces a current in a receiver. Imagine wires going into the screen. ",
            "flags": 32,
            "hasliked": 0,
            "id": "ctBBzV",
            "likes": 26,
            "name": "Antenna Simulation",
            "published": 3,
            "tags": [
                "maxwell",
                "wire",
                "em"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 279
        },
        "renderpass": [
            {
                "code": "// Fork of \"Simulation vs Prediction\" by wyatt. https://shadertoy.com/view/dtffDM\n// 2023-09-08 21:37:53\n\nMain {\n    float _ = .01;\n    /*if (true) {\n        vec2 r = U-emitter*R;\n        vec2 u = normalize(r);\n        float l = length(r);\n            float x = ((float(iFrame-10)-sqrt(mu*eps)*2.*l)/60.);\n         float dj= eps*(f(x)+df(x));\n\n         Q += 25.*pi*vec4(\n             dj*u.y,\n            -dj*u.x,\n            mu*df(x),\n            1\n        )/(55.+l);\n    }\n    if (true) {\n        vec2 r = U-reciever*R;\n        vec2 u = normalize(r);\n        float l = length(r);\n        float dr = sqrt(mu*eps)*2.*length(emiter*R-reciever*R);\n            float x = ((float(iFrame-20)-sqrt(mu*eps)*2.*l - dr)/60.);\n         float dj= eps*(f(x)+df(x));\n\n         Q += 25.*pi*25.* pi/dr*vec4(\n             dj*u.y,\n            -dj*u.x,\n            mu*df(x),\n            1\n        )/(55.+l);\n    }\n    if (!true) {\n        vec2 r = U-vec2(.3,.3)*R;\n        vec2 u = normalize(r);\n        float l = length(r);\n        float x = ((float(iFrame-10)-sqrt(mu*eps)*2.*l)/60.);\n        vec2 m = g(x);\n        vec2 dm = dg(x)+.5*ddg(x);\n        Q += pi*vec4(\n            .15*vec2(u.y,-u.x)*dm.x*u.y+\n            .15*vec2(-u.y,u.x)*dm.y*u.x+\n            6.*(+2.*m/l-4.*u*dot(u,m)/l)\n            ,\n            .25*(u.y*dm.x-u.x*dm.y),\n            1.\n        )/(55.+l);\n    }\n    vec2 u = U;\n    u -= .5*R;\n    float a = -3.+1.*iTime;\n    u *= mat2(cos(a),sin(a),-sin(a),cos(a));\n    //if (sign(u.x)<0.) */\n    \n    vec4 H = .25*(A(U+vec2(0,1))+A(U+vec2(1,1))+A(U+vec2(1,0))+A(U+vec2(0,0)));\n    \n   \n    H.z *= 5.;\n    Q = 1.-vec4(1)*smoothstep(0.,2.*fwidth(H.z),abs(cos(+1.57+H.z)));\n    //Q *= 1.-exp(-10000.*length(H.w));  \n    //Q.xy += H.xy;\n    if (U.x<50.||U.y<50.||R.x-U.x<55.||R.y-U.y<55.)\n            Q *= .0;\n    if (U.x<2.||U.y<2.||R.x-U.x<2.||R.y-U.y<2.)\n        Q *= 0.;\n    if (length(U-emitter*R) < P*R.y || length(U-reciever*R) < P*R.y) \n        Q = mix(atan(vec4(-H.w,.25*abs(H.w),H.w,1)),vec4(1),.0*Q);\n        \n    // Q = abs(H)*vec4(.001,.001,.003,1);\n     \n     \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define emitter vec2(.65,.5)\n#define reciever vec2(.35,.5)\n\n#define P .1\n\n\n#define R iResolution.xy\n#define A(U) texelFetch(iChannel0,ivec2(U),0)\n#define Main void mainImage(out vec4 Q, in vec2 U)\n#define mu 1.\n#define eps 1.\n#define pi 3.141592659\n\nfloat f (float x) {\n    // Change the input signal here!\n    return 10.*smoothstep(0.,1.,x)*asin(.9*cos(x*.25+10.*sin(.02*x)));\n}\nfloat df (float x) {\n    float e = .1;\n    return (f(x+e)-f(x-e))/(2.*e);\n}\nfloat ddf (float x) {\n    float e = .1;\n    return (df(x+e)-df(x-e))/(2.*e);\n}\n\n\nvec2 g (float x) {\n    // Change the input signal here!\n    \n    return vec2(50.*asin(.9*sin(3.1+2.*x)),\n                50.*asin(.9*sin(3.1+1.5*x)))*step(0.,x);\n}\nvec2 dg (float x) {\n    float e = .1;\n    return (g(x+e)-g(x-e))/(2.*e);\n}\nvec2 ddg (float x) {\n    float e = .1;\n    return (dg(x+e)-dg(x-e))/(2.*e);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "Main {\n    {\n        Q = A(U);\n        vec4 n = A(U+vec2(0,1));\n        vec4 e = A(U+vec2(1,0));\n        vec4 s = A(U-vec2(0,1));\n        vec4 w = A(U-vec2(1,0));\n        if (length(U-emitter*R) < P*R.y) Q.w += 1./R.y*f(float(iFrame*4+0)/R.x);\n        else if (length(U-reciever*R) > P*R.y) Q.w *= 0.;\n        if ((iFrame*4+0)%2==0) {\n            // dB/dt = -curl E\n            Q.x -= .5/mu*(n.z-s.z);\n            Q.y += .5/mu*(e.z-w.z);\n        } else {\n            // dE/dt = curl B - j\n            Q.z -= .5/eps*(n.x-s.x-e.y+w.y) - Q.w;\n        }\n        Q.w -= 2.*Q.z/R.y;\n        if (U.x<50.||U.y<50.||R.x-U.x<50.||R.y-U.y<50.)\n            Q *= .97;\n        if (U.x<2.||U.y<2.||R.x-U.x<2.||R.y-U.y<2.)\n            Q *= 0.;\n        if (length(U-emitter*R) < P*R.y);\n        else if (length(U-reciever*R) > P*R.y) Q.w *= 0.;\n    } \n        \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Main {\n    {\n        Q = A(U);\n        vec4 n = A(U+vec2(0,1));\n        vec4 e = A(U+vec2(1,0));\n        vec4 s = A(U-vec2(0,1));\n        vec4 w = A(U-vec2(1,0));\n        if (length(U-emitter*R) < P*R.y) Q.w += 1./R.y*f(float(iFrame*4+1)/R.x);\n        else if (length(U-reciever*R) > P*R.y) Q.w *= 0.;\n        if ((iFrame*4+1)%2==0) {\n            // dB/dt = -curl E\n            Q.x -= .5/mu*(n.z-s.z);\n            Q.y += .5/mu*(e.z-w.z);\n        } else {\n            // dE/dt = curl B - j\n            Q.z -= .5/eps*(n.x-s.x-e.y+w.y) - Q.w;\n        }\n        Q.w -= 2.*Q.z/R.y;\n        if (U.x<50.||U.y<50.||R.x-U.x<50.||R.y-U.y<50.)\n            Q *= .97;\n        if (U.x<2.||U.y<2.||R.x-U.x<2.||R.y-U.y<2.)\n            Q *= 0.;\n        if (length(U-emitter*R) < P*R.y);\n        else if (length(U-reciever*R) > P*R.y) Q.w *= 0.;\n    } \n        \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Main {\n    {\n        Q = A(U);\n        vec4 n = A(U+vec2(0,1));\n        vec4 e = A(U+vec2(1,0));\n        vec4 s = A(U-vec2(0,1));\n        vec4 w = A(U-vec2(1,0));\n        if (length(U-emitter*R) < P*R.y) Q.w += 1./R.y*f(float(iFrame*4+2)/R.x);\n        else if (length(U-reciever*R) > P*R.y) Q.w *= 0.;\n        if ((iFrame*4+2)%2==0) {\n            // dB/dt = -curl E\n            Q.x -= .5/mu*(n.z-s.z);\n            Q.y += .5/mu*(e.z-w.z);\n        } else {\n            // dE/dt = curl B - j\n            Q.z -= .5/eps*(n.x-s.x-e.y+w.y) - Q.w;\n        }\n        Q.w -= 2.*Q.z/R.y;\n        if (U.x<50.||U.y<50.||R.x-U.x<50.||R.y-U.y<50.)\n            Q *= .97;\n        if (U.x<2.||U.y<2.||R.x-U.x<2.||R.y-U.y<2.)\n            Q *= 0.;\n        if (length(U-emitter*R) < P*R.y);\n        else if (length(U-reciever*R) > P*R.y) Q.w *= 0.;\n    } \n        \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Main {\n    {\n        Q = A(U);\n        vec4 n = A(U+vec2(0,1));\n        vec4 e = A(U+vec2(1,0));\n        vec4 s = A(U-vec2(0,1));\n        vec4 w = A(U-vec2(1,0));\n        if (length(U-emitter*R) < P*R.y) Q.w += 1./R.y*f(float(iFrame*4+3)/R.x);\n        else if (length(U-reciever*R) > P*R.y) Q.w *= 0.;\n        if ((iFrame*4+3)%2==0) {\n            // dB/dt = -curl E\n            Q.x -= .5/mu*(n.z-s.z);\n            Q.y += .5/mu*(e.z-w.z);\n        } else {\n            // dE/dt = curl B - j\n            Q.z -= .5/eps*(n.x-s.x-e.y+w.y) - Q.w;\n        }\n        Q.w -= 2.*Q.z/R.y;\n        if (U.x<50.||U.y<50.||R.x-U.x<50.||R.y-U.y<50.)\n            Q *= .97;\n        if (U.x<2.||U.y<2.||R.x-U.x<2.||R.y-U.y<2.)\n            Q *= 0.;\n        if (length(U-emitter*R) < P*R.y);\n        else if (length(U-reciever*R) > P*R.y) Q.w *= 0.;\n    } \n        \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}