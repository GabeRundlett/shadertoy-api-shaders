{
    "Shader": {
        "info": {
            "date": "1570349498",
            "description": "No longer a tranquil landscape... (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "tdVGWw",
            "likes": 10,
            "name": "Moon Flight",
            "published": 3,
            "tags": [
                "terrain",
                "lunar",
                "moonscape"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 526
        },
        "renderpass": [
            {
                "code": "// \"Moon Flight\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA    0  // optional antialiasing\n\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCapsAnDf (vec3 p, float r, float w, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec3 HexGrid (vec2 p);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nvec2 Hashv2v2 (vec2 p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nmat3 flMat;\nvec3 sunDir, flPos, crMid, qHit;\nvec2 gId, scrMid;\nfloat dstFar, tCur, crFac, hgSize, rScrn;\nint idObj;\nbool isOcc;\nconst int idGrnd = 1, idRkt = 2, idEng = 3, idCage = 4, idScrn = 5;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjCDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, r;\n  dMin = dstFar;\n  d = p.y - 0.8;\n  if (d < 0.1) {\n    q = p;\n    d = q.y - 0.5 * Fbm2 (0.3 * q.xz);\n    if (crFac > 0.) {\n      q.xz -= crMid.xz;\n      r = length (q.xz) / crFac;\n      d -= crFac * (0.03 * (1. - smoothstep (0.9, 1., r)) -\n         0.3 * (1. - smoothstep (0.5, 0.9, r)));\n    }\n    DMIN (idGrnd);\n    if (isOcc) {\n      q = p - crMid;\n      d = PrCapsDf (q.xzy, 0.1, 0.14);\n      DMIN (idRkt);\n      q.xz = abs (q.xz) - 0.08;\n      q.y -= -0.08;\n      d = PrCapsDf (q.xzy, 0.03, 0.06);\n      DMIN (idEng);\n    }\n  } else dMin = d;\n  return dMin;\n}\n\nvoid SetGrndConf ()\n{\n  vec2 fRand;\n  float crFrac;\n  crFrac = 0.6;\n  fRand = Hashv2v2 (gId * vec2 (37.3, 43.1) + 27.1);\n  if (fRand.x < crFrac) crFac = 0.;\n  else {\n    fRand.x = (fRand.x - crFrac) / (1. - crFrac);\n    crFac = hgSize * 0.5 * sqrt3 * (0.55 - 0.4 * clamp (2.2 * (fRand.x - 0.5), -1., 1.));\n    crMid.xz = HexToPix (gId * hgSize) + hgSize * max (0., 0.5 * sqrt3 - crFac) * fRand.x *\n       sin (2. * pi * fRand.y + vec2 (0.5 * pi, 0.));\n    crMid.y = 0.5 * Fbm2 (0.3 * crMid.xz) - 0.3 * crFac + 0.15;\n  }\n  isOcc = (crFac > 0.5 && fRand.y > 0.8);\n}\n\nfloat ObjCRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  eps = 0.0005;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  gIdP = vec2 (-99.);\n  dHit = 0.;\n  for (int j = 0; j < 350; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = Minv3 (hv);\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetGrndConf ();\n    }\n    d = ObjCDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjCNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  v = vec4 (- ObjCDf (p + e.xxx), ObjCDf (p + e.xyy), ObjCDf (p + e.yxy), ObjCDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjCSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  gIdP = vec2 (-99.);\n  for (int j = 0; j < 30; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetGrndConf ();\n    }\n    h = ObjCDf (p);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, len, rad, s, b;\n  dMin = dstFar;\n  len = 1.;\n  rad = 1.;\n  p = flMat * (p - flPos);\n  q = p;\n  q.yz -= vec2 (-0.1 * rad, 0.3 * len);\n  b = length (q.xy);\n  s = (q.z > len) ? 16. * (atan (q.z - len, b) / (2. * pi) + 0.5) : 2. * q.z / len;\n  s = min (abs (fract (s) - 0.5), abs (fract (12. * atan (q.y, - q.x) / (2. * pi)) - 0.5));\n  d = 0.7 * max (max (PrCapsAnDf (q, rad, 0.01 * (1.5 - clamp (20. * s, 0.5, 1.75)), len),\n     -1.25 * len - 0.03 - q.z), 0.2 * rad - b);\n  DMINQ (idCage);\n  q = p;\n  q.yz -= vec2 (-0.14, 0.5);\n  scrMid = q.xy;\n  q.xy = Rot2D (q.xy, pi / 4.);\n  q.xy -= 1.02 * rScrn * sign (q.xy);\n  d = PrCylDf (q, rScrn, 0.003);\n  DMINQ (idScrn);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 80; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 131.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 171.13 * scl * q.yx));\n  return 4. * vec3 (1., 1., 0.8) * pow (f, 16.);\n}\n\nvec3 ErCol (vec3 rd)\n{\n  vec3 erDir, col, vn;\n  float erRad, bs, ts;\n  erDir = normalize (vec3 (0.02, -0.04, 1.));\n  erRad = 0.017;\n  col = vec3 (0.);\n  bs = dot (rd, erDir);\n  ts = bs * bs - 1. + erRad * erRad;\n  if (ts > 0.) {\n    ts = bs - sqrt (ts);\n    if (ts > 0.) {\n      vn = normalize ((ts * rd - erDir) / erRad);\n      col = mix (vec3 (0.3, 0.4, 0.8), vec3 (1., 1., 0.95),\n         smoothstep (0.2, 0.8, Fbm2 (6. * vn.xy + 7.1))) * (0.5 + 0.5 * max (- dot (vn, rd), 0.));\n    }\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  vec2 vf, g;\n  float dstObj, nDotS, sh, s;\n  int idObjS;\n  bool isScrn, showBg;\n  rScrn = 0.03;\n  isScrn = false;\n  showBg = true;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idCage) {\n      col = mix (vec3 (0.45, 0.5, 0.5), vec3 (0.5, 0.5, 0.6), smoothstep (0.4, 0.6,\n         Fbm3 (64. * qHit)));\n      vn = VaryNf (128. * qHit, vn, 0.2);\n    } else if (idObj == idScrn) {\n      if (length (qHit.xy) < 0.95 * rScrn) {\n        ro = flPos;\n        qHit.xy = Rot2D (qHit.xy, - pi / 4.);\n        rd = normalize (vec3 (qHit.xy, - rScrn)).xzy;\n        if (abs (scrMid.y) > abs (scrMid.x)) rd.yz = Rot2D (rd.yz, -0.25 * pi * sign (scrMid.y));\n        else rd.xy = Rot2D (rd.xy, 0.25 * pi * sign (scrMid.x));\n        isScrn = true;\n      } else {\n        col = vec3 (0.6, 0.5, 0.5) * (0.7 + 0.3 * sin (256. * atan (qHit.y, qHit.x)));\n      }\n    }\n    if (! isScrn) {\n      nDotS = max (dot (vn, sunDir), 0.);\n      nDotS *= nDotS;\n      col = col * (0.2 + 0.1 * abs (vn.y) + 0.6 * nDotS * nDotS) +\n         0.2 * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n      showBg = false;\n    }\n  }\n  if (dstObj >= dstFar || isScrn) {\n    dstObj = (rd.y < 0.) ? ObjCRay (ro, rd) : dstFar;\n    if (dstObj < dstFar) {\n      ro += dstObj * rd;\n      vn = ObjCNf (ro);\n      idObjS = idObj;\n      if (idObj == idGrnd) {\n        col4 = vec4 (0.7, 0.6, 0.4, 0.01) * (0.7 + 0.3 * Fbm2 (0.2 * ro.zx));\n        if (crFac > 0.) {\n          g = ro.xz - crMid.xz;\n          s = smoothstep (0.5, 0.9, length (g) / crFac);\n          col4 = mix (col4, vec4 (0.6, 0.5, 0.3, 0.01) * (0.7 + 0.3 * sin (64. * atan (g.y, g.x)) *\n             (0.6 + 0.4 * sin (32. * pi * ro.y)) * s), 1. - s);\n          vf = vec2 (4., 2. + s);\n        } else vf = vec2 (4., 3.);\n        vf.y *= 1. - smoothstep (0.2, 0.6, dstObj / dstFar);\n        if (vf.y > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n        sh = ObjCSShadow (ro, sunDir);\n        col = col4.rgb * (0.2 + 0.1 * max (vn.y, 0.) +\n           0.7 * sh * max (dot (vn, sunDir), 0.)) + col4.a * smoothstep (0.8, 1., sh) *\n           pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n      } else {\n        if (idObj == idRkt) {\n          g = Rot2D (ro.xz - crMid.xz, pi / 8.);\n          col4 = mix (vec4 (0.5, 0.5, 1., 0.2), vec4 (1., 1., 1., 0.2),\n             smoothstep (0.45, 0.55, mod (4. * (((length (g) > 0.) ? atan (g.y, g.x) : 0.) /\n             (2. * pi) + 0.5), 1.)));\n        } else if (idObj == idEng) {\n          col4 = vec4 (1., 0.7, 0.4, 0.2);\n        }\n        col = col4.rgb * (0.2 + 0.8 * max (dot (vn, sunDir), 0.)) + col4.a * \n           pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n      }\n      col *= 1. - smoothstep (0.8, 0.95, dstObj / dstFar);\n      if (isScrn) col *= (dstObj < dstFar && (idObjS == idRkt || idObjS == idEng)) ?\n         vec3 (1.3, 0.3, 0.3) : vec3 (0.4, 0.9, 0.7);\n      showBg = false;\n    } else {\n      col = vec3 (0.);\n      if (! isScrn) col += ErCol (rd);\n    }\n  }\n  if (showBg || idObj == idGrnd && length (col) < 0.03) col += StarPat (rd, 8.);\n  return clamp (col, 0., 1.);\n}\n\nvec3 TrackPath (float t)\n{\n  return t * vec3 (0.1, 0., sqrt (0.99)) + vec3 (2. * cos (0.1 * t), 0., 0.);\n}\n\nvoid VuPM (float t)\n{\n  vec3 fpF, fpB, vel, acc, va, ort, cr, sr;\n  float dt;\n  dt = 1.;\n  flPos = TrackPath (t);\n  fpF = TrackPath (t + dt);\n  fpB = TrackPath (t - dt);\n  vel = (fpF - fpB) / (2. * dt);\n  vel.y = 0.;\n  acc = (fpF - 2. * flPos + fpB) / (dt * dt);\n  acc.y = 0.;\n  va = cross (acc, vel) / length (vel);\n  ort = vec3 (0.2, atan (vel.z, vel.x) - 0.5 * pi, 5. * length (va) * sign (va.y));\n  cr = cos (ort);\n  sr = sin (ort);\n  flMat = mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n     mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, col, c;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  tCur = mod (tCur, 2400.) + 30. * floor (dateCur.w / 7200.) + 11.1;\n  hgSize = 1.;\n  VuPM (2. * tCur);\n  az = 0.;\n  el = -0.03 * pi;\n  if (mPtr.z > 0.) {\n    az += 1.5 * pi * mPtr.x;\n    el += 1.5 * pi * mPtr.y;\n    az = clamp (az, -0.5 * pi, 0.5 * pi);\n    el = clamp (el, -0.4 * pi, 0.4 * pi);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  flPos.y += 5.;\n  ro = flPos;\n  dstFar = 50.;\n  sunDir = normalize (vec3 (1., 0.5, -1.));\n  sunDir.xz = Rot2D (sunDir.xz, 0.3 * pi * sin (0.1 * tCur));\n  zmFac = 2.6;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  if (abs (uv.y) < 0.85) {\n    col = vec3 (0.);\n    sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n    for (float a = 0.; a < naa; a ++) {\n      rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n         sr * (0.667 * a + 0.5) * pi), zmFac));\n      rd = vuMat * rd;\n      rd = rd * flMat;\n      col += (1. / naa) * ShowScene (ro, rd);\n    }\n  } else col = vec3 (0.05);\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrCapsAnDf (vec3 p, float r, float w, float h)\n{\n  p.z = abs (p.z);\n  return max (length (p - vec3 (0., 0., min (p.z, h + w))) - r,\n     - length (p - vec3 (0., 0., min (p.z, h - w))) + r) - w;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HexGrid (vec2 p)\n{\n  vec2 q;\n  p -= HexToPix (PixToHex (p));\n  q = abs (p);\n  return vec3 (p, 0.5 * sqrt3 - q.x + 0.5 * min (q.x - sqrt3 * q.y, 0.));\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e;\n  e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}