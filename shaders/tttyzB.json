{
    "Shader": {
        "info": {
            "date": "1609419079",
            "description": "Electric voodoo (known to the ancients) - mouseable",
            "flags": 0,
            "hasliked": 0,
            "id": "tttyzB",
            "likes": 19,
            "name": "Energy Temple",
            "published": 3,
            "tags": [
                "lightning",
                "helix",
                "architecture",
                "lightbeam"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 584
        },
        "renderpass": [
            {
                "code": "// \"Energy Temple\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat Maxv3 (vec3 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat BumpFbm3 (vec3 p);\nfloat Hashfv3 (vec3 p);\nfloat Noiseff (float p);\nfloat Noisefv3 (vec3 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec4 flPth[4];\nvec3 ltDir, qHit;\nfloat tCur, dstFar, domeRd, oculRd, ringWd, psgWd, psgHt, psgLen, pcGap, wThk, rTor, torScl,\n   rTorEx, nSegTor, aRotTor, crExt, torzFac, illum[4], flRad, flLen;\nint idObj;\nconst int idDom = 1, idPsg = 2, idPil = 3, idPilB = 4, idDomB = 5, idEnt = 6, idFlor = 7,\n   idTorL = 8, idTorR = 9, idTorC = 10, idTorS = 11, idSpkEx = 12, idSpk = 13;\nconst float pi = 3.1415927;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvec2 SphGrid (vec3 p)\n{\n  vec3 q;\n  vec2 a, sc, nSeg;\n  float dMin, d1, d2, r;\n  nSeg = vec2 (16., 19.);\n  sc = sin (0.07 * 2. * pi / nSeg + vec2 (0., 0.5 * pi));\n  q = p.yxz;\n  r = length (q.yz);\n  a = 2. * pi * (floor (nSeg * atan (q.zx, - vec2 (q.y, r)) / (2. * pi)) + 0.5) / nSeg;\n  q.yz = Rot2D (q.yz, a.x);\n  d1 = dot (vec2 (q.y, abs (q.z)), sc);\n  q.yz = Rot2D (vec2 (r, q.x), a.y);\n  d2 = dot (vec2 (q.y, abs (q.z)), sc);\n  return vec2 (d1, d2);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  vec2 d2;\n  float dMin, d, dh, s, zp, rh, cvOrd, a, flshLen;\n  dMin = dstFar;\n  q = p;\n  rh = length (q.xz);\n  q.y -= 2. * psgHt + psgWd + 2. * ringWd;\n  d2 = SphGrid (q);\n  s = abs (domeRd - length (q));\n  d = max (SmoothMax (s - wThk, min (max (d2.x, oculRd - rh), d2.y), 0.02), - q.y);\n  d = min (d, max (max (s - 0.3 * wThk, oculRd - rh), - q.y));\n  DMINQ (idDom);\n  q.xz = mix (q.xz, q.zx, step (abs (q.z), abs (q.x)));\n  q.z = abs (q.z);\n  q.y -= - psgWd - 2. * ringWd;\n  zp = abs (mod (q.z + pcGap, 2. * pcGap) - pcGap);\n  d = max (max (abs (abs (q.x) - psgWd + 3. * wThk) - 4.5 * wThk,\n     abs (abs (q.y + psgHt) - psgHt) - 0.5 * wThk), q.z - psgLen);\n  DMINQ (idPilB);\n  qq = q;\n  q = vec3 (abs (q.x) - psgWd + 5. * wThk, q.y + psgHt, abs (zp) - pcGap);\n  d = max (PrCylDf (q.xzy, 1.5 * wThk, psgHt), qq.z - psgLen);\n  DMINQ (idPil);\n  q = qq;\n  dh = length (vec2 (q.x, max (q.y, 0.))) - psgWd;\n  d = max (SmoothMin (abs (dh) - wThk, max (abs (dh) - 1.7 * wThk, pcGap - zp - 0.02), 0.02),\n     domeRd - rh);\n  d = max (max (d, min (min (0.1 - length (vec2 (max (q.y + 0.4 * psgHt, 0.), zp)), q.y + 1.6 * psgHt),\n     0.3 * psgLen - abs (q.z - 0.6 * psgLen))), max (q.z - psgLen, - 2. * psgHt - q.y));\n  DMINQ (idPsg);\n  d = max (dh - 4. * wThk, abs (q.z - psgLen - 2. * wThk) - 2. * wThk);\n  d = max (max (d, - dh - 7.5 * wThk), - 2. * psgHt - 0.5 * wThk  - q.y);\n  DMINQ (idEnt);\n  d = max (abs (q.x) - psgWd + 7.5 * wThk, 0.);\n  d = max (d, max (q.z - psgLen - 4. * wThk, 0.));\n  d = max (d, max (abs (q.y + 2. * psgHt + 0.25 * wThk) - 0.25 * wThk, 0.));\n  DMINQ (idFlor);\n  d = max (max (abs (domeRd - rh) - wThk, abs (q.y - 4. * ringWd) - 2. * ringWd - wThk), - wThk - dh);\n  d = max (d, 0.7 * ringWd - length (vec2 (q.x, q.y - 5. * ringWd - wThk)));\n  DMINQ (idDomB);\n  d = PrSphDf (q - vec3 (0., 4. * ringWd + 2. * wThk, domeRd - wThk), 0.5 * wThk);\n  DMINQ (idSpkEx);\n  q = p;\n  q.y -= 6. * torScl + 2.5 * wThk;\n  d = PrCylDf (q.xzy, rTor + 6. * torScl, 9. * torScl);\n  if (d < 0.05) { // from \"Plasma Coil\"\n    d = length (abs (abs (vec2 (rh - rTor, q.y)) - 4.5 * torScl)) - 0.5 * torScl;\n    DMINQ (idTorL);\n    qq = q;\n    qq.xz = Rot2D (q.xz, 0.25 * pi);\n    d = PrSphDf (vec3 (abs (qq.xz) - rTor + 1.41 * rTorEx, q.y - 4.5 * torScl), 0.8 * torScl);\n    DMINQ (idSpkEx);\n    d = length (vec2 (rh - rTor, q.y)) - 1.5 * torScl;\n    DMINQ (idTorR);\n    d = PrCylDf (vec3 (abs (qq.xz) - rTor + 0.11 * rTorEx, q.y + 8. * torScl),\n       (0.6 - 1.6 * (q.y + 8. * torScl)) * torScl, 3.5 * torScl);\n    DMINQ (idTorL);\n    q.xz = mix (qq.xz, qq.zx, step (abs (qq.z), abs (qq.x)));\n    q.z = abs (q.z) - rTor;\n    d = (length (vec2 (length (q.yz) - rTorEx, q.x)) - torScl * (1. + crExt));\n    DMINQ (idTorS);\n    q = qq;\n    q.xy = vec2 (q.y, - q.x);\n    q.yz = vec2 (atan (q.y, q.z) * rTor, length (q.yz) - rTor);\n    cvOrd = 7.;\n    a = atan (q.z, q.x) / (2. * pi);\n    q.xz = Rot2D (vec2 (length (q.xz) - 2. * torScl, mod (q.y + (2. * a + 1.) * torScl,\n       2. * torScl) - torScl), 2. * pi * (cvOrd - 1.) * a);\n    d = 0.8 * (length (Rot2D (q.xz, - (floor ((0.5 * pi - atan (q.x, q.z)) + pi / cvOrd))) -\n       vec2 (0.6 * torScl, 0.)) - 0.2 * torScl);\n    DMINQ (idTorC);\n    \n  } else dMin = min (dMin, d);\n  dh = dstFar; // from \"Tesla's Laboratory\"\n  d = dh;\n  flshLen = 1.1;\n  for (int k = VAR_ZERO; k < 4; k ++) {\n    if (illum[k] > 0.) {\n      q = p;\n      q.xz = Rot2D (q.xz, float (k) * 0.5 * pi);\n      q.y -= flshLen + 0.39 + 2. * wThk;\n      q.z -= -0.71;\n      q.yz = Rot2D (q.yz, -0.38 * pi);\n      d = PrCylDf (q, 0.1, flshLen);\n      if (d < dMin) {\n        q.xy -= 0.15 * smoothstep (0., 0.1, flshLen - abs (q.z)) * (2. *\n           vec2 (Fbm2 (8. * (vec2 (0.4 * q.z, 0.) + flPth[k].xy)),\n           Fbm2 (8. * (vec2 (0.3 * q.z, 0.) + flPth[k].zw))) - 1.);\n        dh = min (dh, PrCylDf (q, 0.001, flshLen));\n      }\n    }\n    d = 0.7 * dh;\n  }\n  DMINQ (idSpk);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat TrObjDf (vec3 p)\n{\n  vec3 q;\n  q = p;\n  q.y -= 6. * torScl + 2.5 * wThk;\n  q.xz = Rot2D (q.xz, 2. * pi * aRotTor / nSegTor);\n  q.xz = Rot2D (q.xz, 2. * pi * ((floor (nSegTor * atan (q.z, - q.x) / (2. * pi)) +\n     0.5) / nSegTor));\n  return (length (vec2 (length (vec2 (abs (q.x) - rTor, q.y)) - 2.5 * torScl,\n     q.z * torzFac)) - 2. * torScl);\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 80; j ++) {\n    d = TrObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 TrObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = TrObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec2 CapsHit (vec3 ro, vec3 rd, float cRad, float cLen)\n{\n  float dIn, dOut, d, a, b, bs, w, s, ws, roz;\n  dIn = dstFar;\n  dOut = dstFar;\n  a = dot (rd.xy, rd.xy);\n  b = dot (rd.xy, ro.xy);\n  w = b * b - a * (dot (ro.xy, ro.xy) - cRad * cRad);\n  if (w > 0. && a > 0.) {\n    ws = sqrt (w);\n    d = - (b + ws) / a;\n    s = ro.z + d * rd.z;\n    if (d > 0. && abs (s) < cLen) dIn = d;\n    else {\n      roz = ro.z;\n      ro.z -= cLen * sign (s);\n      bs = dot (rd, ro);\n      w = bs * bs - (dot (ro, ro) - cRad * cRad);\n      if (w > 0.) {\n        d = - bs - sqrt (w);\n        if (d > 0.) dIn = d;\n      }\n      ro.z = roz;\n    }\n  }\n  if (dIn < dstFar) {\n    d = (- b + ws) / a;\n    s = ro.z + d * rd.z;\n    if (abs (s) < cLen) dOut = d;\n    else {\n      ro.z -= cLen * sign (s);\n      bs = dot (rd, ro);\n      w = bs * bs - (dot (ro, ro) - cRad * cRad);\n      if (w > 0.) dOut = - bs + sqrt (w);\n    }\n  }\n  return vec2 (dIn, dOut);\n}\n\nfloat FlmDens (vec3 p)\n{\n  float c;\n  c = max (0., 1.1 * BumpFbm3 (0.2 * vec3 (p.xy / flRad, p.z + 4. * tCur)) - 0.1 +\n     0.4 * smoothstep (-0.5 * flRad, 0.1 * flRad, p.z));\n  return c * (1. - smoothstep (-0.3 * flRad, 0., length (vec3 (p.xy,\n     p.z - clamp (p.z, - 2. * flLen, 0.))) - flRad * (1. + 0.8 * p.z / (2. * flLen)))) *\n     smoothstep (0., flRad, p.z + 2. * flLen);\n}\n\nvec3 FlmCol (vec3 ro, vec3 rd, vec2 dCyl2, float dstObj)\n{   // from \"Cloud Computing\", with mods and color\n  vec4 col4;\n  vec3 q, c;\n  float s, ds, f, fn, r;\n  const float sMax = 20.;\n  ds = min (2. * flRad, dCyl2.y - dCyl2.x) / sMax;\n  s = dCyl2.x;\n  ro.z -= flLen;\n  q = ro + s * rd;\n  r = length (q.xy) / flRad;\n  q.xy = Rot2D (q.xy, 0.5 * r * (2. * smoothstep (0.4, 0.8, r) - 1.) * q.z);\n  f = FlmDens (q);\n  col4 = vec4 (0.);\n  for (float j = float (VAR_ZERO); j < sMax; j ++) {\n    s += ds;\n    q = ro + (s + ds * Hashfv3 (16. * rd)) * rd;\n    r = length (q.xy) / flRad;\n    q.xy = Rot2D (q.xy, 0.5 * r * (2. * smoothstep (0.4, 0.8, r) - 1.) * q.z);\n    fn = FlmDens (q);\n    c = mix (mix (vec3 (0.1, 0.3, 1.), vec3 (0., 0.8, 1.), clamp ((0.3 / ds) * (f - fn), 0., 1.)),\n       vec3 (1.), smoothstep (-0.5 * flRad, 0.5 * flRad, q.z)) *\n       (1. - smoothstep (-0.1, 0., s - dstObj));\n    col4 += (1. - col4.a) * vec4 (c, 1.) * f / sMax;\n    f = fn;\n    if (s > dstObj || col4.a > 1.) break;\n  }\n  return clamp (col4.rgb, 0., 1.);\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{   // from \"Star Globe\"\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 131.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 171.13 * scl * q.yx));\n  return 5. * vec3 (1., 1., 0.8) * pow (f, 16.);\n}\n\nvec3 SkyCol (vec3 rd)\n{\n  vec3 col, mDir, vn;\n  float mRad, bs, ts;\n  mDir = normalize (vec3 (0.03, 0.08, 1.));\n  mRad = 0.015;\n  col = vec3 (0.06, 0.06, 0.03) * pow (clamp (dot (rd, mDir), 0., 1.), 16.);\n  bs = dot (rd, mDir);\n  ts = bs * bs - 1. + mRad * mRad;\n  if (ts > 0.) {\n    ts = bs - sqrt (ts);\n    if (ts > 0.) {\n      vn = normalize ((ts * rd - mDir) / mRad);\n      col += vec3 (1., 0.9, 0.5) * clamp (dot (normalize (vec3 (-0.9, 0.4, 0.5)), vn) *\n         (1. - 0.3 * Noisefv3 (8. * vn)), 0., 1.);\n    }\n  } else col += StarPat (rd, 16.);\n  return col;\n}\n\nvec3 ShStagGrid (vec2 p)\n{\n  vec2 sp, ss;\n  if (2. * floor (0.5 * floor (p.y)) != floor (p.y)) p.x += 0.5;\n  sp = smoothstep (0.03, 0.07, abs (fract (p + 0.5) - 0.5));\n  p = fract (p) - 0.5;\n  ss = 0.5 * smoothstep (0.4, 0.5, abs (p.xy)) * sign (p.xy);\n  if (abs (p.x) < abs (p.y)) ss.x = 0.;\n  else ss.y = 0.;\n  return vec3 (ss.x, sp.x * sp.y, ss.y);\n}\n\nvec4 ShStagGrid3d (vec3 p, vec3 vn)\n{\n  vec3 rg;\n  rg = ShStagGrid ((abs (vn.x) > 0.99) ? p.zy : ((abs (vn.y) > 0.99) ? p.zx : p.xy));\n  if (abs (vn.x) > 0.99) {\n    rg.xz *= sign (vn.x);\n    if (rg.x == 0.) vn.xy = Rot2D (vn.xy, rg.z);\n    else vn.xz = Rot2D (vn.xz, rg.x);\n  } else if (abs (vn.y) > 0.99) {\n    rg.xz *= sign (vn.y);\n    if (rg.x == 0.) vn.yx = Rot2D (vn.yx, rg.z);\n    else vn.yz = Rot2D (vn.yz, rg.x);\n  } else if (abs (vn.z) > 0.99) {\n    rg.xz *= sign (vn.z);\n    if (rg.x == 0.) vn.zy = Rot2D (vn.zy, rg.z);\n    else vn.zx = Rot2D (vn.zx, rg.x);\n  }\n  return vec4 (vn, rg.y);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, rg4, a1, a2, b1, b2;\n  vec3 col, vn, roo, glCol, ltPos, ltDirL, stg, q;\n  vec2 vf, dCyl2, w;\n  float dstObj, dstTrObj, dstGrnd, s, att, nDotL, dSum, sSum, tLitCyc, t, tm, st, sp, f,\n     illTot, fBot, a;\n  bool inBldg, psgDir, isMet;\n  psgWd = 1.;\n  wThk = 0.05;\n  domeRd = psgWd + 0.18;\n  ringWd = 0.25;\n  psgLen = 4.;\n  psgHt = 0.75;\n  pcGap = 0.25;\n  oculRd = 0.28 * psgWd;\n  torScl = 0.04;\n  rTor = (80. / (2. * pi)) * torScl;\n  rTorEx = 5. * torScl;\n  nSegTor = 12.;\n  flRad = oculRd;\n  flLen = 30. * flRad;\n  t = 0.5 * tCur;\n  a1 = vec4 (0.1, 0.17, 0.15, 0.12);\n  a2 = vec4 (0.1, 0.5, -0.2, 0.2);\n  b1 = vec4 (0.8, 0.3, 0.5, 0.4);\n  b2 = vec4 (-1., 0.2, 0.3, -0.2);\n  for (int k = 0; k < 4; k ++) {\n    f = 0.1 * float (k);\n    flPth[k] = vec4 (4. + f + (1.5 + f) * t, sin ((0.11 + 0.1 * f) * t),\n       5. + 2. * f + (1.3 - f) * t, sin ((0.12 - 0.1 * f) * t));\n    for (int j = 0; j < 4; j ++) flPth[k][j] += (b1[j] + b2[j] * f) * sin (a1[j] + a2[j] * f * t);\n  }\n  tLitCyc = 50.;\n  t = 2. * pi * tCur / tLitCyc;\n  tm = mod (tCur / tLitCyc, 1.);\n  aRotTor = -1. * (0.01 * tLitCyc * t + 30. * (sin (t) - t));\n  torzFac = 0.8 + 0.2 * cos (t);\n  crExt = 0.05 * (-1. + sin (512. * tCur)) * SmoothBump (0.2, 0.8, 0.1, tm);\n  illTot = 0.;\n  for (int k = 0; k < 4; k ++) {\n    f = float (k);\n    illum[k] = step (torzFac, 0.95) * step (0.05, Noiseff (16. * tCur + f)) *\n       (0.3 + 0.7 * smoothstep (0.3, 0.9, Fbm1 (4. * tCur + f)));\n    illTot += illum[k];\n  }\n  st = mod (nSegTor * atan (ro.z, - ro.x) / (2. * pi) - aRotTor, 1.);\n  roo = ro;\n  glCol = mix (vec3 (0.9, 0.9, 0.3) * (0.97 + 0.03 * sin (64. * tCur)), vec3 (1., 1., 0.9),\n     SmoothBump (0.3, 0.7, 0.1, tm)) * (0.2 + 0.8 * SmoothBump (0.2, 0.8, 0.15, tm));\n  dstTrObj = TrObjRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    stg = vec3 (0.);\n    sp = length (vec2 (qHit.x, max (qHit.y, 0.))) - psgWd;\n    psgDir = (abs (ro.x) < abs (ro.z));\n    if (idObj == idDom) inBldg = (length (qHit) < domeRd);\n    else if (idObj == idDomB) inBldg = (sp < wThk || length (qHit.xz) < domeRd);\n    else if (idObj == idPsg) inBldg = (sp < 0.5 * wThk);\n    else if (idObj == idPilB) inBldg = (abs (qHit.x) < psgWd);\n    else if (idObj == idEnt) inBldg = (abs (qHit.z) < psgLen + 3.5 * wThk && sp < 0.);\n    else inBldg = true;\n    vf = vec2 (0.);\n    if (idObj == idDom) {\n      col4 = vec4 (0.7, 0.7, 0., 0.2) * (0.7 + 0.3 * step (0.5 * wThk,\n         abs (length (qHit) - domeRd)));\n    } else if (idObj == idDomB) {\n      if (qHit.y < 4. * ringWd + wThk) col4 = 0.7 * vec4 (0.8, 0.5, 0., 0.2);\n      else col4 = vec4 (0.8, 0.7, 0., 0.2) * (0.8 + 0.2 * smoothstep (0., 0.05,\n         abs (mod (16. * qHit.y, 1.) - 0.5)));\n      vf = vec2 (64., 0.5);\n    } else if (idObj == idPsg) {\n      col4 = vec4 (0.8, 0.5, 0., 0.05);\n      if (abs (sp) < wThk + 0.005) {\n        col4 *= 0.7;\n        if (abs (qHit.y + psgHt) < psgHt) {\n          if (abs (sp) > wThk - 0.005) stg = ro;\n          else col4 *= 0.7;\n        } else if (inBldg) col4 *= 0.9 + 0.1 * step (0.1, mod (32. * atan (ro.y - 2. * psgHt,\n           (psgDir ? ro.x : ro.z)) / pi, 1.));\n      } else col4.a = 0.2;\n      vf = vec2 (64., 0.5);\n    } else if (idObj == idPilB) {\n      col4 = vec4 (0.55, 0.55, 0.6, 0.2);\n      vf = vec2 (64., 1.);\n    } else if (idObj == idPil) {\n      col4 = vec4 (0.55, 0.55, 0.6, 0.2);\n      a = mod (32. * (atan (qHit.z, - qHit.x) / (2. * pi)), 1.);\n      vn.xz = Rot2D (vn.xz, -0.15 * pi * sin (pi * a * a));\n      vf = vec2 (128., 0.25);\n    } else if (idObj == idEnt) {\n      if (abs (abs (qHit.y + psgHt) - psgHt) < 0.5 * wThk) col4 = vec4 (0.5, 0.5, 0.6, 0.2);\n      else {\n        col4 = 0.7 * vec4 (0.8, 0.5, 0., 0.2);\n        if (abs (qHit.y + psgHt) < psgHt - 0.02) stg = ro;\n      }\n      vf = vec2 (64., 0.5);\n    } else if (idObj == idFlor) {\n      col4 = vec4 (0.2, 0.2, 0.22, 0.1);\n      if (qHit.z > psgWd - 0.305) stg = vec3 ((psgDir ? ro.zx : ro.xz), ro.y).xzy;\n      vf = vec2 (64., 0.5);\n    } else if (idObj == idSpkEx) {\n      col4 = mix (vec4 (0.5, 0.5, 0.6, 0.2), vec4 (0.8, 0.8, 0.2, -1.), step (0.05, illTot));\n    } else if (idObj == idTorL) {\n      col4 = vec4 (0.45, 0.5, 0.45, 0.2);\n      if (ro.y > 0.17) col4 *= (0.9 + 0.1 * sin (256. * atan (ro.z, - ro.x)));\n      else col4 *= (0.8 + 0.2 * sin (512. * ro.y));\n    } else if (idObj == idTorR) {\n      col4 = mix (vec4 (0.7, 0.7, 0., 0.), vec4 (1., 1., 1., 0.), 0.5 + 0.5 * sin (t)) *\n         (0.4 + 0.6 * SmoothBump (0.35, 0.65, 0.05, st * torzFac));\n    } else if (idObj == idTorC) {\n      col4 = mix (vec4 (0.6, 0.5, 0.5, 0.), mix (vec4 (1., 0., 0., 0.), vec4 (1., 1., 1., 0.),\n         0.5 + 0.5 * cos (t)), SmoothBump (0.25, 0.75, 0.1, st));\n    } else if (idObj == idTorS) {\n      col4 = vec4 (0.7, 0.6, 0.6, 0.) * (0.9 + 0.1 * sin (128. * atan (qHit.z, - qHit.y)));\n    } else if (idObj == idSpk) {\n      col4 = vec4 (vec3 (1., 1., 0.9) * clamp (2. * (0.1 + 0.9 * illTot) *\n         (1. - 0.3 * Fbm1 (5. * qHit.z)) - 0.2, 0., 1.), -1.);\n    } else {\n      col4 = vec4 (1., 1., 0., 0.2);\n    }\n    if (stg != vec3 (0.)) {\n      rg4 = ShStagGrid3d (10. * stg, vn);\n      vn = rg4.xyz;\n      col4.rgb *= 0.8 + 0.2 * rg4.w;\n    }\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    if (col4.a >= 0.) {\n      if (inBldg) {\n        dSum = 0.;\n        sSum = 0.;\n        for (int k = 0; k < 7; k ++) {\n          if (k < 6) {\n            ltPos = vec3 (0., 0.5 * psgHt, 0.8 * rTor);\n            ltPos.xz = Rot2D (ltPos.xz, 2. * pi * (- aRotTor + float (k) / 6.));\n            ltDirL = normalize (ltPos);\n            s = length (ltPos - ro);\n            att = 0.6 * max (dot (ltDirL, ltPos - ro) / s, 0.) / (1. + 0.1 * s * s);\n          } else {\n            ltDirL = - ltDir;\n            att = 0.5;\n          }\n          isMet = (idObj == idTorL || idObj == idTorR || idObj == idSpkEx);\n          nDotL = max (dot (vn, ltDirL), 0.);\n          if (isMet) nDotL *= nDotL;\n          dSum += att * nDotL;\n          sSum += att * pow (max (dot (normalize (ltDirL - rd), vn), 0.), 16.);\n        }\n        col = col4.rgb * (0.1 + 0.5 * dSum) + 0.5 * col4.a * sSum;\n        col = mix (col, vec3 (0.3, 0.3, 1.), 0.1 * (1. - smoothstep (0.7, 0.95, torzFac)));\n        if (idObj == idTorC || idObj == idTorS) col.r += ((idObj == idTorC) ? 0.5 : 0.2) *\n           max (- dot (rd, vn), 0.) * SmoothBump (0.3, 0.7, 0.1, tm);\n        if (idObj == idFlor || idObj == idDom) {\n          w = Rot2D (ro.xz, 2. * pi * aRotTor / nSegTor);\n          w = vec2 (abs (dot (w, sin (2. * pi * (floor (nSegTor * atan (w.y, - w.x) / (2. * pi)) +\n             0.5) / nSegTor + vec2 (0., 0.5 * pi)))), 0.5 * abs (length (ro.xz) - rTor - 0.1));\n          col += 0.2 * glCol * (1. - smoothstep (0.03, 0.12, length (w)));\n        }\n      } else {\n        col = col4.rgb * (0.2 + 0.4 * max (dot (vn, ltDir), 0.)) +\n           col4.a * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n      }\n    } else col = col4.rgb * (0.6 + 0.4 * max (- dot (rd, vn), 0.));\n  } else {\n    dstGrnd = - ro.y / rd.y;\n    if (rd.y < 0. && dstGrnd < dstFar) {\n      ro += dstGrnd * rd;\n      psgDir = (abs (ro.x) < abs (ro.z));\n      f = smoothstep (0.1, 1., dstGrnd / dstFar);\n      col = vec3 (0.05, 0.07, 0.05) * (0.7 + 0.3 * Fbm2 (8. * ro.xz)) * (1. - f);\n      s = length (vec2 (abs (psgDir ? ro.xz : ro.zx) - vec2 (0., psgLen + 4. * wThk)));\n      col += (1. - smoothstep (-0.3, 0., s - 0.8 * psgWd)) * vec3 (0.2, 0.2, 0.3);\n      dstObj = dstGrnd;\n    } else {\n      f = 1.;\n      col = vec3 (0.);\n    }\n    col = mix (col, SkyCol (rd), f);\n  }\n  dstObj = min (dstObj, dstFar);\n  if (dstTrObj < dstObj) col += glCol * smoothstep (0., 0.1, dstObj - dstTrObj) *\n     (0.05 + 0.4 * clamp (- dot (TrObjNf (roo + dstTrObj * rd), rd), 0., 1.));\n  f = 1. - smoothstep (0.7, 0.95, torzFac);\n  if (f > 0.) {\n    ro = roo;\n    ro.yz = Rot2D (ro.yz, -0.5 * pi);\n    rd.yz = Rot2D (rd.yz, -0.5 * pi);\n    fBot = flLen - flRad + 0.4;\n    ro.z += fBot;\n    dCyl2 = CapsHit (ro, rd, flRad, flLen);\n    if (inBldg && col4.a >= 0.) col = clamp (col * vec3 (1. - 0.2 * f, 1. + 0.2 * f,\n       1. + 0.3 * f), 0., 1.);\n    if (dCyl2.x < dstObj && ro.z + dCyl2.x * rd.z < fBot - 0.1)\n       col += 3. * f * FlmCol (ro, rd, dCyl2, dstObj);\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, uvv, mMid[2], ut[2], mSize, msw;\n  float el, az, zmFac, asp, vuId, regId, s, t, sr;\n  int vuMode;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  mSize = (1./7.) * vec2 (asp, 1.);\n  mMid[0] = vec2 (asp, 1.) * (1. - mSize.y) * vec2 (1., -1.);\n  mMid[1] = vec2 (asp, 1.) * (1. - mSize.y) * vec2 (-1., -1.);\n  for (int k = 0; k < 2; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  regId = -1.;\n  if (mPtr.z > 0.) {\n    for (int k = 0; k < 2; k ++) {\n      msw = 2. * mPtr.xy - mMid[k] / vec2 (asp, 1.);\n      if (Maxv2 (abs (msw)) < mSize.y) {\n        regId = 1. + float (k);\n        msw /= 2. * mSize.y;\n        break;\n      }\n    }\n    if (regId == -1.) msw = mPtr.xy;\n  }\n  vuId = 0.;\n  for (int k = 0; k < 2; k ++) {\n    if (Maxv2 (ut[k]) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      vuId = float (k + 1);\n      break;\n    }\n  }\n  if (regId > 0. && (vuId == 0. || vuId == regId)) vuId = regId - vuId;\n  vuMode = int (vuId) + 1;\n  if (vuMode == 1) {\n    t = mod (tCur / 30., 1.);\n    s = SmoothBump (0.25, 0.75, 0.2, t) - 0.5;\n    ro = vec3 (1.6 * sign (t - 0.5) * (0.5 - abs (s)), 1., 8. * s);\n    vd = normalize (vec3 (0., 0.5, 0.) - ro);\n    az = atan (vd.x, vd.z);\n    el = asin (vd.y);\n    if (t > 0.5) el += 0.35 * pi * (1. - smoothstep (0.05, 0.12, abs (abs (t - 0.5) - 0.25)));\n    zmFac = 3.;\n  } else if (vuMode == 2) {\n    az = 0.;\n    el = -0.05 * pi;\n    ro = vec3 (0., 1., -1.5);\n    zmFac = 1.5;\n  } else if (vuMode == 3) {\n    az = 0.02 * pi;\n    el = -0.05 * pi;\n    ro = vec3 (0., 1.5, -20.);\n    zmFac = 6.;\n  }\n  if (mPtr.z > 0.) {\n    az += 2. * pi * msw.x;\n    el += pi * msw.y;\n  }\n  el = clamp (el, -0.35 * pi, 0.45 * pi);\n  vuMat = StdVuMat (el, az);\n  if (vuMode == 3) {\n    ro = vuMat * ro;\n    ro.y = max (0.5, ro.y);\n  }\n  dstFar = 60.;\n  ltDir = normalize (vec3 (0., 1., 0.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi)) / zmFac;\n    rd = vuMat * normalize (vec3 ((2. * tan (0.5 * atan (uvv.x / asp))) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  for (int k = 0; k < 2; k ++) {\n    if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 2.) col = vec3 (0.5);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat PerBumpf (float p)\n{\n  return 0.5 * smoothstep (0., 0.5, abs (fract (p) - 0.5));\n}\n\nvec3 PerBumpv3 (vec3 p)\n{\n  return 0.5 * smoothstep (0., 0.5, abs (fract (p) - 0.5));\n}\n\nfloat BumpFbm3 (vec3 p)\n{  // variation of triangular noise in \"Misty Flight\", adapted from nimitz's \"Oblivion\"\n  vec3 q;\n  float a, f;\n  a = 1.;\n  f = 0.;\n  q = p;\n  for (int j = 0; j < 4; j ++) {\n    p += PerBumpv3 (q + PerBumpv3 (q).yzx);\n    p *= 1.5;\n    f += a * (PerBumpf (p.z + PerBumpf (p.x + PerBumpf (p.y))));\n    q = 2. * q + 0.5;\n    a *= 0.75;\n  }\n  return f;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, vec3 (37., 39., 41.))) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xyz)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}