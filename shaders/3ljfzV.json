{
    "Shader": {
        "info": {
            "date": "1599382255",
            "description": "This attempts to replicate the transition seen in Oddworld - Abe's Oddysee here:\nhttps://www.youtube.com/watch?v=SYL6nxUkuOo&feature=youtu.be&t=68",
            "flags": 0,
            "hasliked": 0,
            "id": "3ljfzV",
            "likes": 34,
            "name": "Ripple Texture Transition",
            "published": 3,
            "tags": [
                "transition",
                "ripple"
            ],
            "usePreview": 0,
            "username": "tb",
            "viewed": 1604
        },
        "renderpass": [
            {
                "code": "/*\nThis attempts to replicate the transition seen in Oddworld - Abe's Oddysee here:\nhttps://www.youtube.com/watch?v=SYL6nxUkuOo&feature=youtu.be&t=68\n*/\n\n// Tweakable parameters\n// I'm not sure they are well named for what they do.\n// I'd like it if period was calculated from the others such that the effect always loops cleanly.\nfloat freq = 8.0;\nfloat period = 8.0;\nfloat speed = 2.0;\nfloat fade = 4.0;\nfloat displacement = 0.2;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 R = iResolution.xy,\n         U = ((2. * fragCoord.xy) - R) / min(R.x, R.y),\n         T = fragCoord / R.y;\n    float D = length(U);\n\n    float frame_time = mod(iTime * speed, period);\n    float pixel_time = max(0.0, frame_time - D);\n\n    float wave_height = (cos(pixel_time * freq) + 1.0) / 2.0;\n    float wave_scale = (1.0 - min(1.0, pixel_time / fade));\n    float frac = wave_height * wave_scale;\n    if (mod(iTime * speed, period * 2.0) > period)\n    {\n        frac = 1. - frac;\n    }\n\n    vec2 tc = T + ((U / D) * -((sin(pixel_time * freq) / fade) * wave_scale) * displacement);\n    \n    fragColor = mix(\n        texture(iChannel0, tc),\n        texture(iChannel1, tc),\n        frac);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}