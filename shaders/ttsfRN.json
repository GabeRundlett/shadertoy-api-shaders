{
    "Shader": {
        "info": {
            "date": "1596375594",
            "description": "This is a basic orbit camera created for my reference and later use. Feel free to use it in your shaders and let me know if this can be optimized further.\n\nControls : \nZ/X - Zoom\nArrow Keys: Orbit\n",
            "flags": 48,
            "hasliked": 0,
            "id": "ttsfRN",
            "likes": 1,
            "name": "Interactive Orbit Cam - Template",
            "published": 3,
            "tags": [
                "interactive",
                "camera"
            ],
            "usePreview": 0,
            "username": "AmarnathMurugan",
            "viewed": 506
        },
        "renderpass": [
            {
                "code": "//Changes zoom level\n#define FocalDistance 2.0 \n\n//Classic sphere hit fuction that returns white on hit or the background otherwise\n\nvec4 SphereHit(const in vec3 ro, const in vec3 rd)\n{\n\tfloat R = 0.1;\n    float b = 2.0 * dot(rd, ro);\n    float c = dot(ro.xyz, ro)- R*R;\n    float d = b*b - 4.0*c;\n\n\tif(d >= 0.0)\n        return vec4(1.0);\n    else \n        return texture(iChannel1,normalize(rd));\n}\n\n\n//==== Transformtion Matrices ===\n\nmat3 RotateY(float theta)\n{\n    float Cos = cos(theta);\n    float Sin = sin(theta);\n\treturn mat3(Cos,0.0,Sin,\n                0.0,1.0,0.0,\n                -Sin,0.0,Cos);\n}\n\nmat3 RotateX(float theta)\n{\n    float Cos = cos(theta);\n    float Sin = sin(theta);\n\treturn mat3(1.0,0.0,0.0,\n                0.0,Cos,-Sin,\n                0.0,Sin,Cos);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = fragCoord/iResolution.xy-0.5;\n\tuv.x*= iResolution.x/iResolution.y;\n    //Get data from buffer\n    vec4 transform = texelFetch(iChannel0,ivec2(0,0),0);     \n    //Calculate the origin with transform data, here the z value is used to set the distance\n    vec3 ro = RotateY(transform.x) * RotateX(-transform.y) * vec3(0.0,0.0,-transform.z);\n    //usual look at calculation\n \tvec3 lp = vec3(0.0);\n    vec3 forward = normalize(lp-ro);\n    vec3 GlobalUp = vec3(0.0,1.0,0.0);\n    vec3 right = normalize(cross(forward,GlobalUp));\n    vec3 localUp = cross(right,forward);    \n    vec3 rd = (ro+forward*FocalDistance) + uv.x * right + uv.y * localUp - ro;    \n    fragColor = SphereHit(ro,normalize(rd));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415926538\nconst int KEY_Z  = 90;\nconst int KEY_X  = 88;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nvec3 offset = vec3(0.0);\n//Used to set the initial offset\nvec3 initOffset = vec3(0.0,0.0,2.5);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    offset = texelFetch(iChannel0,ivec2(0,0),0).xyz; \n    //sets the offset value to initial offset when the program starts\n    if(iTime<0.1) offset = initOffset;    \n    offset.x+= (texelFetch(iChannel1,ivec2(KEY_RIGHT,0),0).x - texelFetch(iChannel1,ivec2(KEY_LEFT,0),0).x)*0.02 ;\n    offset.y+= (texelFetch(iChannel1,ivec2(KEY_UP,0),0).x - texelFetch(iChannel1,ivec2(KEY_DOWN,0),0).x)*0.02 ; \n    //the added value is multiplied by the z value to make it faster over time\n    offset.z+= (texelFetch(iChannel1,ivec2(KEY_X,0),0).x - texelFetch(iChannel1,ivec2(KEY_Z,0),0).x)*0.02 * offset.z; \n    \n    //Change this value to determine x rotation clamping\n    float limit = PI/4.0;\n    offset.y = clamp(offset.y,-limit,limit);\n    //Change this value to fix minimum and maximum distance form lookat point\n    offset.z = clamp(offset.z,1.0,10.0);\n    fragColor = vec4(offset,1.0);\n} ",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}