{
    "Shader": {
        "info": {
            "date": "1643889812",
            "description": "My participation to genuary 2022\nMake something that will look completely different in a year.\nHeavily inspired by https://twitter.com/sergeposters",
            "flags": 32,
            "hasliked": 0,
            "id": "ssjyzh",
            "likes": 15,
            "name": "Genuary 2022 - Day22",
            "published": 3,
            "tags": [
                "generative",
                "genuary",
                "2022"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 273
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n#define TAU (PI*2.0)\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.2;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\nfloat _sqr(vec2 p, vec2 s)\n{\n    vec2 l = abs(p)-s;\n    return max(l.x, l.y);\n}\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y, l.z));\n}\n\n// Stolen from 0b5vr here https://www.shadertoy.com/view/ss3SD8\nfloat hash11(float p)\n{\n    return (fract(sin((p)*114.514)*1919.810));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define BAT_MAT 1.\nfloat seed;\nfloat rand()\n{\n    seed++;\n    return hash11(seed);\n}\nmat2 r2d(float a) { float c= cos(a), s = sin(a); return mat2(c, -s, s, c); }\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000.,-1.);\n    \n    float building = max(p.z, -_sqr(p.xy, vec2(3., .8)));\n    acc = _min(acc, vec2(building, 0.));\n    \n    vec3 pfins = p-vec3(0.,0.,-.2);\n    float repfins = 1.55;\n    pfins.x = mod(pfins.x+repfins*.5, repfins)-repfins*.5;\n    float fins = _cube(pfins, vec3(.01,1.,.2));\n    acc = _min(acc, vec2(fins, 0.));\n\n\n    // Outside\n    acc = _min(acc, vec2(-p.z+1., BAT_MAT));\n    //acc = _min(acc, vec2(length(p)-1., 0.));\n    \n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+=rd*res.x*.25;\n    }\n    return vec3(-1.);\n}\nvec3 gradient(float f)\n{\n    vec3 cols[3];\n    \n    cols[0] = vec3(0.169,0.086,0.816);\n    cols[1] = vec3(0.835,0.216,0.843);\n    cols[2] = vec3(1.,1.,1.);\n    \n    float cnt = 2.;\n    float cur = f*cnt;\n    float curIdx = floor(cur);\n    return mix(cols[int(curIdx)], cols[int(min(curIdx+1., cnt))], sat(fract(cur)));\n}\nvec3 gradient2(float f)\n{\n    vec3 cols[4];\n    \n    cols[0] = vec3(0.008,0.004,0.008);\n    cols[1] = vec3(0.973,0.008,0.027);\n    cols[2] = vec3(0.980,0.780,0.200);\n    cols[3] = vec3(0.973,0.965,0.961);\n    \n    float cnt = 3.;\n    float cur = f*cnt;\n    float curIdx = floor(cur);\n    return mix(cols[int(curIdx)], cols[int(min(curIdx+1., cnt))], sat(fract(cur)));\n}\nvec3 getEnv(vec3 rd)\n{\n    vec2 uv = vec2(atan(rd.z, rd.x), acos(rd.y));\n    float stars = 2.5*pow(texture(iChannel0, uv*5.5).x, 5.)*sat(1.+sin(uv.y*5.2+uv.x*10.));\n    vec3 grad = mix(\n    vec3(0.067,0.086,0.125), \n    vec3(0.145,0.349,0.635), \n    pow(sat(sin((uv.x+uv.y)*10.)*.5+.5), .5));\n    \n    grad += .5*mix(\n    vec3(0.110,0.149,0.122), \n    vec3(0.286,0.592,0.459), \n    pow(sat(sin((uv.x+uv.y)*5.)*.5+.5), .5))*.5*sat((uv.y-1.)*2.);\n    \n    //grad+= gradient(sat((-uv.y+1.6)*7.))*.3;\n    \n    grad += vec3(1.000,0.482,0.141)*(1.-sat(abs((uv.y-1.44+0.02*sin(uv.x+iTime*.25))*7.)));\n    return stars*vec3(1.)+grad*sat(sat((-uv.y+1.8)*5.)+.2);\n}\n\nvec3 getMat(vec3 res, vec3 rd, vec3 p, vec3 n)\n{\n    vec3 col = n*.5+.5;\n    col = vec3(.01);\n    if (res.z == BAT_MAT)\n    {\n        //float bats = sat(_sqr(p.xy-vec2(0.,-1.5), vec2(2.))*100.);\n        vec3 red = vec3(0.969,0.012,0.012);\n        vec3 bats = vec3(0.);\n        float mask = 10000.;\n        p.x += -iTime*.05;\n        p.x += iDate.x*100.+iDate.z;\n        //p.x += float(int(iTime*.5));\n        vec2 pa = p.xy-vec2(0.,.5);\n        float repa = 1.3;\n        float ida = floor((pa.x+repa*.5)/repa); \n        pa += vec2(.1*sin(ida*11.),.2*sin(ida*15.));\n        pa.x = mod(pa.x+repa*.5,repa)-repa*.5;\n        \n        float batA = _sqr(pa, vec2(.4+.2*sin(ida*2.),1.5)*.5);\n        bats = mix(bats, 2.*gradient2(sat(pa.y*1.+.25)), (1.-sat(batA*400.)));\n        mask = min(mask, batA);\n        \n        vec2 pb = p.xy-vec2(0.4,.5);\n        float repb = .7;\n        float idb = floor((pb.x+repb*.5)/repa); \n        pb += vec2(.2*sin(idb*11.),.2*sin(idb*15.));\n        pb.x = mod(pb.x+repb*.5,repb)-repb*.5;\n        \n        float batB = _sqr(pb, vec2(.4+.1*sin(idb*2.),2.5)*.5);\n        batB = max(batB, _sqr(pb*r2d(.5*idb), vec2(1.,.6)));\n        vec3 colB = gradient2(sat(pb.y*.75+.5));\n        colB = mix(colB.yzx, colB.yyz, sat(sin(idb*100.)*10.));\n\n        bats = mix(bats, sat((sin(pb.x*20.)+.5)*100.)*2.*colB, (1.-sat(batB*400.)));\n        mask = min(mask, batB);\n        \n        if (mask > 0.)\n            col = getEnv(rd)*sat(rd.y*5.+1.5);\n        else\n            col = bats;\n    }\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n        vec3 dof = (vec3(rand(), rand(), rand())-.5)*.05;\n    vec3 ro = vec3(0.,0.,-7.)+dof;\n    vec3 ta = vec3(0.,0.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv)-dof*0.005;\n    vec3 res = trace(ro, rd, 256);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = getMat(res, rd, p, n);\n        if (p.y > -.78 && res.z != BAT_MAT)\n        {\n            vec3 refl = normalize(reflect(rd, n)+(vec3(rand(), rand(), rand())-.5)*.5*vec3(.05,1.,0.05));\n            vec3 resrefl = trace(p+n*0.01,refl, 128);\n            if (resrefl.y > 0.)\n            {\n                vec3 prefl = p+refl*resrefl.y;\n                vec3 nrefl = getNorm(prefl, resrefl.x);\n                \n                col += getMat(resrefl, refl, prefl, nrefl)*2.;\n            }\n            else\n                col += getEnv(refl)*.125;\n        }\n    }\n    else\n        col = getEnv(rd);\n    col += .1*rand();\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    seed = texture(iChannel0, uv).x+iTime;\n    vec2 off = (vec2(rand(), rand())-.5)*3.*vec2(1., -1.)/(iResolution.x*1.75);\n    vec3 col = rdr(uv+off);\n    col += vec3(0.302,0.102,0.129)*(1.-sat(length(uv)+rand()));\n    col += vec3(0.102,0.302,0.224)*(1.-sat(length(uv)-.5+rand()))*.1;\n    col *= vec3(0.784,0.976,0.859);\n    col = mix(col, texture(iChannel1, fragCoord/iResolution.xy).xyz, .95);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}