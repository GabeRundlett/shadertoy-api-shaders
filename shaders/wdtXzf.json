{
    "Shader": {
        "info": {
            "date": "1572547189",
            "description": "click to stop dezooming\n\nsee params in Common.\nvariant: hue(iTime*.5)\n\n( yep: no Z-sorting done ;-) )",
            "flags": 32,
            "hasliked": 0,
            "id": "wdtXzf",
            "likes": 11,
            "name": "falling letters 2",
            "published": 3,
            "tags": [
                "fonts"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 778
        },
        "renderpass": [
            {
                "code": "// === dual approach of https://shadertoy.com/view/tsdXzX\n\n    \n// utils adapted from from https://www.shadertoy.com/view/llySRh\n\nvec4 char(vec2 p, int c) {\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1);\n\treturn textureGrad( iChannel1, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx, dFdy );\n}\n#define C(c) char(U,64+c)\n    \n#define hue(v)   ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O = vec4(.5+.5*sin(.3*iTime));                             // background color\n\n    for ( float y = 0.; y < N; y++ )                       // --- foreach particle\n    {\n        vec4  H = T(0,y), H2 = T(1,y),                         // particle params\n              C = mix(vec4(1), hue(H.x), fract(8.*H.x) );      // color\n        float s = H2.x;\n        vec2  U = ( u/R - H.yz ) / (S*s) *R * rot(6.28*H2.y*s) +.5; // random letter location and angle\n        float d = C( 1+int(25.*H.w) ).w - .5,                  // SDF to letter \n              w = fwidth(length(U));                           // true pixel width\n        if (w==0.) w=.01;                                      // for GPU with no fwidth\n        if (w>.1) continue;                                    // glitch occurs if letter < 1 pix ( if random start size )\n        O = mix(O, C, smoothstep( w,-w, d) );                  // blend color letter (with AA)\n        O = mix(O, vec4(0), smoothstep( w,.0, abs(d)) );       // blend black outline (with AA)\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 O, vec2 u )\n{\n    if ( u.x > 2. || u.y > N ) return;                         // treat only particle data\n \n    if (    iFrame == 0                                    // --- initialize particles\n         || T(1,u.y).x < .1                                    // recycles far particles\n       ) {\n        O = hash14( u.y - R.y*(iTime+u.x));                    // x=0: hue, pos.xy, letter\n      //if ( u.x==1.5 ) O.x = iFrame>0 ? 1. :pow(1.-2.*DZ,120.*O.x); // x=1: time, angle\n        return;                              \n    }\n    \n    O = T(u.x,u.y);                                        // --- previous particle status\n    if (u.x == .5) {\n        O.yz =  (O.yz-.5)*A * rot(.005)  / A + .5;             // global rotation\n        if ( iMouse.z <= 0. ) O.yz = margin(O.yz,,-DZ);        // dezooming\n    } else \n        if ( iMouse.z <= 0. ) O.x =  margin(O.x*R.y,,-DZ)/R.y; // dezoom size\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define N       100.                              // number of letters\n#define DZ      .01                               // dzoom amount\n#define S     ( R.y/2. )                          // font size ( attention: BBox is large )\n#define margin(U,A,v) (U A -(v)) / (1. A -2.*(v)) // rescale from/to margins\n#define R      ( iResolution.xy )\n#define A      ( R / R.y )          \n#define T(x,y)  texelFetch(iChannel0, ivec2(x,y), 0 )\n    \n#define hash14(p) fract(sin((p)*vec4(127.1,311.7, 269.5,183.3)) *43758.5453123)\n//#define rot(a)  mat2(cos( a + vec4(0,33,11,0)))          // from https://www.shadertoy.com/view/XlsyWX \n#define rot(a)    mat2(cos( a + 1.571*vec4(0,1,-1,0)))\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}