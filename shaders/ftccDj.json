{
    "Shader": {
        "info": {
            "date": "1660770509",
            "description": "A simple 3D strandbeest.",
            "flags": 0,
            "hasliked": 0,
            "id": "ftccDj",
            "likes": 24,
            "name": "Simple Strandbeest",
            "published": 3,
            "tags": [
                "simple",
                "robot",
                "strandbeest",
                "linkage",
                "quadruped",
                "theojansen"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "// Utilities\n#define PI 3.1415926536\n#define TAU 6.2831853072\n\nmat2 Rotate2D(in float angle) {\n    float co = cos(angle), si = sin(angle);\n    return mat2(co, si, -si, co);\n}\n\nvec2 solveJoint(in vec2 a, in vec2 b, in float ra, in float rb, in float config) {\n    vec2 ba = b - a;\n    float d2 = dot(ba, ba), d = sqrt(d2);\n    float offs = (d2 + ra * ra - rb * rb) / (2.0 * ra * d);\n    return a + (ba * offs + vec2(-ba.y, ba.x) * sqrt(1.0 - offs * offs) * config) * ra / d;\n}\n\n// SDFs\nfloat sdLine(in vec3 a, in vec3 b, in vec3 p) {\n    vec3 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nfloat sdCylinder(in float h, in float r, in vec3 p) {\n    vec2 d = abs(vec2(length(p.xy), p.z)) - vec2(r, h);\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\n// Not exact\nfloat sdFlatCapsule(in float h, in float r, in float t, in vec3 p) {\n    return max(length(vec2(p.x - clamp(p.x, -h, h), p.y)) - r, abs(p.z) - t);\n}\n\nfloat sdBox(in vec3 b, in vec3 p) {\n    p = abs(p) - b;\n    return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdGear(in float r1, in float r2, in float t, in float h, in float n, in vec3 p) {\n    float teeth = (0.5 + 0.5 * cos(atan(p.y, p.x) * n)) * h;\n    float pr = length(p.xy);\n    return max(max(pr - r2 - teeth, abs(p.z) - t), r1 - pr); // Bad extrusion\n}\n\n// Scene\n#define add(dist, id) if (dist < scene.x) { scene = vec2(dist, id); }\nvec2 map(in vec3 p) {\n    // Treadmill\n    vec2 scene = vec2(sdFlatCapsule(16.0, 2.0, 8.0, p + vec3(0.0, 10.4, 0.0)), 0);\n    add(sdFlatCapsule(16.0, 4.0, 1.5, vec3(p.x, p.y + 10.4, abs(p.z) - 9.5)), 1);\n\n    // Main body and axles\n    add(sdBox(vec3(8.0, 1.25, 3.8), p - vec3(0.0, 0.78, 0.0)) - 1.0, 2);\n    add(sdCylinder(5.2, 0.2, p - vec3(0.0, 0.78, 0.0)), 3);\n    add(sdCylinder(5.2, 0.2, vec3(abs(p.x) - 3.8, p.y - 0.78, p.z)), 3);\n\n    // Set crank angle and adjust it for each leg\n    float motorAngle = iTime * 5.0;\n    float crankAngle = motorAngle / 2.0;\n    if (p.x < 0.0) crankAngle = PI - crankAngle; // Offset back leg\n    if (p.z < 0.0) crankAngle += PI;\n\n    // Widthwise symmetry\n    p.z = abs(p.z) - 5.0;\n\n    // Driver gear\n    vec3 driverGearUv = p - vec3(0.0, 0.78, 0.0);\n    driverGearUv.xy *= Rotate2D(motorAngle + TAU / 20.0);\n    add(sdGear(0.2, 0.9, 0.2, 0.4, 10.0, driverGearUv), 4);\n\n    // Lengthwise symmetry\n    p.x = 7.5 - abs(p.x);\n\n    // Crank gears (the ones moving the legs)\n    vec3 crankGearUv = p - vec3(3.8, 0.78, 0.0);\n    crankGearUv.xy *= Rotate2D(crankAngle);\n    add(sdGear(0.2, 2.3, 0.2, 0.4, 20.0, crankGearUv), 4);\n\n    vec2 crankShaft = vec2(3.8, 0.78);\n    vec2 crank = crankShaft + vec2(cos(crankAngle), sin(crankAngle)) * 1.5;\n\n    vec2 fixedPivot = vec2(0.0);\n    vec2 top = solveJoint(crank, fixedPivot, 5.0, 4.15, -1.0);\n    add(sdLine(vec3(crank, 0.4), vec3(top, 0.4), p) - 0.2, 5);\n    add(sdLine(vec3(top, 0.0), vec3(fixedPivot, 0.0), p) - 0.2, 5);\n\n    vec2 hangPivot = solveJoint(crank, fixedPivot, 6.19, 3.93, 1.0);\n    add(sdLine(vec3(crank, 0.8), vec3(hangPivot, 0.8), p) - 0.2, 5);\n    add(sdLine(vec3(fixedPivot, 0.4), vec3(hangPivot, 0.4), p) - 0.2, 5);\n\n    vec2 swingPivot = solveJoint(top, fixedPivot, 5.58, 4.01, -1.0);\n    add(sdLine(vec3(top, 0.0), vec3(swingPivot, 0.0), p) - 0.2, 5);\n    add(sdLine(vec3(fixedPivot, 0.0), vec3(swingPivot, 0.0), p) - 0.2, 5);\n\n    vec2 knee = solveJoint(swingPivot, hangPivot, 3.94, 3.67, -1.0);\n    add(sdLine(vec3(swingPivot, 0.4), vec3(knee, 0.4), p) - 0.2, 5);\n    add(sdLine(vec3(knee, 0.0), vec3(hangPivot, 0.0), p) - 0.2, 5);\n\n    vec2 tip = solveJoint(hangPivot, knee, 4.90, 6.57, 1.0);\n    add(sdLine(vec3(hangPivot, 0.0), vec3(tip, 0.0), p) - 0.2, 5);\n    add(sdLine(vec3(knee, 0.0), vec3(tip, 0.0), p) - 0.2, 5);\n\n    return vec2(scene.x * 0.8, scene.y);\n}\n\nvec3 getNormal(in vec3 p) {\n    vec2 k = vec2(0.001, 0.0);\n    return normalize(vec3(map(p + k.xyy).x, map(p + k.yxy).x, map(p + k.yyx).x) - map(p).x);\n}\n\n// Main\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Initialize output\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y;\n\n    // Default mouse position\n    if (iMouse.xy == vec2(0)) mouse = vec2(-0.15, -0.1);\n\n    // Initialize ray\n    vec3 ro = vec3(0.0, -5.0, 50.0);\n    vec3 rd = normalize(vec3(uv, -1.5));\n\n    // Rotate with mouse\n    mat2 hori = Rotate2D(-mouse.x * 3.14);\n    ro.xz *= hori;\n    rd.xz *= hori;\n\n    mat2 vert = Rotate2D(-mouse.y * 3.14);\n    ro.yz *= vert;\n    rd.yz *= vert;\n\n    vec3 color = texture(iChannel0, rd).rgb;\n\n    // Raymarch\n    float t = 0.0;\n    for (int i=0; i < 250; i++) {\n        vec3 p = ro + rd * t;\n        vec2 scene = map(p);\n        if (abs(scene.x) < 0.001) {\n            vec3 nor = getNormal(p);\n\n            //color = vec3(max(0.0, dot(-rd, nor)) * 0.8);\n            //color += max(0.0, dot(nor, normalize(vec3(0.0, 1.0, -2.0)))) * 0.2;\n            color = vec3(max(0.0, dot(nor, normalize(vec3(0.0, 5.0, 20.0) - p)))) * 0.75;\n            color += max(0.0, dot(nor, normalize(vec3(15.0, 10.0, 15.0) - p))) * 0.25;\n            color += max(0.0, dot(nor, normalize(vec3(-15.0, 10.0, -15.0) - p))) * 0.5;\n\n            // Treadmill texture\n            if (scene.y == 0.0) {\n                 p.y += 10.4; // Convert to object space\n\n                 vec2 treadUv = vec2(p.z + 8.0, 0.0);\n                 if (abs(p.x) < 16.0) treadUv.y = p.y > 0.0 ? p.x + 16.0 : 48.0 - p.x + TAU;\n                 else if (p.x > 16.0) treadUv.y = 32.0 + atan(p.x - 16.0, p.y) * 2.0;\n                 else if (p.x < -16.0) treadUv.y = 64.0 + TAU + atan(-p.x - 16.0, -p.y) * 2.0;\n                 treadUv /= vec2(16.0, 64.0 + 2.0 * TAU);\n\n                 treadUv *= vec2(5.0, 20.0);\n                 treadUv.y += mod(iTime * 1.5, 20.0);\n\n                 color += 0.1; // Ambient\n                 color *= vec2(mod(floor(treadUv.x + treadUv.y), 2.0), 0.0).rrg;\n            }\n\n            else if (scene.y == 1.0) color *= 0.1; // Sides of the treadmill\n            else if (scene.y == 3.0) color *= 0.0; // Axles\n            else if (scene.y == 4.0) color *= 0.15; // Gears\n            else if (scene.y == 5.0) color *= vec3(0.7, 0.3, 0.1); // Legs\n\n            break;\n        }\n\n        if (t > 100.0) {\n            break;\n        }\n\n        t += scene.x;\n    }\n\n    // Tonemap and output\n    fragColor = vec4(pow(color, vec3(0.65)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}