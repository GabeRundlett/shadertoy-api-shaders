{
    "Shader": {
        "info": {
            "date": "1705770458",
            "description": "Glowing arcs and rays.\n\nVisually inspired by https://www.shadertoy.com/view/ltXczj as well as https://www.shadertoy.com/view/fl33Dr",
            "flags": 0,
            "hasliked": 0,
            "id": "MfsSD2",
            "likes": 8,
            "name": "/arcs&rays/glow",
            "published": 3,
            "tags": [
                "noise",
                "rays",
                "glow",
                "arcs"
            ],
            "usePreview": 0,
            "username": "_fov",
            "viewed": 314
        },
        "renderpass": [
            {
                "code": "#define TAU 6.283184\n\nconst vec4 lineColor = vec4(0.25, 0.5, 1.0, 1.0);\nconst vec4[] bgColors = vec4[]\n(\n    lineColor * 0.5,\n    lineColor - vec4(0.2, 0.2, 0.7, 1)\n);\n\n\n// probably can optimize w/ noise, but currently using fourier transform\nfloat random(float t)\n{\n    return (cos(t) + cos(t * 1.3 + 1.3) + cos(t * 1.4 + 1.4)) / 3.0;   \n}\n\nvec2 rotateUV(vec2 uv, float angle) \n{\n    angle = angle*TAU;\n    mat2 matrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    \n    return matrix * uv;\n}\n\n\nfloat arc(float r, vec2 uv, float orientation, float radius, float section)\n{\n    uv = rotateUV(uv, orientation);\n    float theta = atan(uv.x, uv.y)/TAU;\n\n    float t = 100. * section;\n    float value = \n        min(2.0, pow(0.001 / abs(r - radius),2.)) *\n        min(2.0, pow(0.005 / abs(theta / t),t / 1.));\n    \n    return value;\n}\n\nfloat radial(float r, vec2 uv, float orientation, float radius, float section)\n{\n    uv = rotateUV(uv, orientation);\n    float theta = atan(uv.x, uv.y)/TAU;\n\n    //float value = min(2.0, 0.002 / abs(theta)) *;\n\n    float t = 100. * section;\n    float value = \n        min(2.0, 0.00025 / abs(theta)) *\n        min(2.0, pow(0.005 / abs((r - radius) / t),t / 2.));\n\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x = (uv.x -.5) * aspect + .5;\n    uv -= 0.5;\n    \n    float r = length(uv);\n    \n    float value = 0.;\n    for(float i=0.;i<32.;i+=1.)\n    {\n        float radius = 0.3 + random((i * 534.5 + iTime) * 1.)/40.;\n        float orientation = .5 + .5 * random((i * 453.6 + iTime) * 0.07);\n        float section = 0.1 + random((i * 346.3 + iTime) * 0.1)/10.;\n \n        value += arc(r, uv, orientation, radius, section);\n\n        orientation = .5 + .5 * random((i * 823.3 + iTime) * 0.01);\n        value += radial(r, uv, orientation, radius, section);    \n    }\n    \n \n    // Some blueish tone\n    vec3 color = vec3(0.2,0.6,1.0);\n\n    float verticalFade = cos(uv.y * 6.28) * 0.5 + 0.5;\n    fragColor = mix(bgColors[0], bgColors[1], uv.x/1.);\n    fragColor *= verticalFade/2.;\n\n    // Output to screen\n    fragColor += vec4(color * value,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}