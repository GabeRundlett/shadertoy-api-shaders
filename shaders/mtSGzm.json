{
    "Shader": {
        "info": {
            "date": "1673110504",
            "description": "Toy implementation of endlesspaper.app, used by [url]https://twitter.com/vaskange[/url] , with pre-stored stroke shapes.\nup/down key to zoom canvas\nmouse to displace canvas\nSPACE to show LOD = raster cache ",
            "flags": 48,
            "hasliked": 0,
            "id": "mtSGzm",
            "likes": 4,
            "name": "infinite canvas / endless paper",
            "published": 3,
            "tags": [
                "zoom",
                "lod",
                "paint",
                "draw",
                "canvas"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 260
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 u )\n{\n    O *= 0.;\n//  O = T(u); return;                                      // debug\n \n    if ( length(iMouse.xy) > 10. ) u += iMouse.xy - R/2.;  // canvas offset : mouse\n    u -= R/2.;\n    u *= exp2( .01* T(vec2(0,0)).a );                         // canvas move : up/down keys\n    u += R/2.; \n    u = clamp(u,vec2(0),R);\n    \n    vec2 U =   u / R, F, A;\n         F = ( u - .5*R ) / R.y;                           // for local vector drawing\n    \n#if 1\n\n    int i = min(4, int( - log2( 1. + .003*T(vec2(0,0)).a ))) - 1, // LOD level where we use raster cache\n        k;                                                 // rather than drawing everything \n    for ( k = -1; k < i; k++ )                             // --- draw vector objects down to i\n        O = blend( O, draw(F,float(k)) ),\n        U = clamp( 2.*fract(U)- pos[min(k+1,3)], 0.,1.),\n        F = ( U - .5 ) *R/R.y;\n    O = blend(O, node(i) );                                // last: draw object + raster cache\n    A = 2.*fract(U)- pos[min(i+1,3)];\n    if ( keyToggle(32) && i < 3 && A == clamp(A,0.,1.) ) O += (1.-O.a)*.2;\n\n#else\n\n    O = node(-1);  // largest object always drawn as vector ( never cached ).\n    \n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec2 pos[] = vec2[]( vec2(.5,.3), vec2(.3,.8), vec2(.8,.5), vec2(.3,.1) ); // offsets objects -1 ... 3 \n\n#define R             iResolution.xy\n#define T(U)          texelFetch( iChannel0, ivec2(U), 0 )\n#define keyDown(a)   ( texelFetch(iChannel3,ivec2(a,0),0).x > 0.)\n#define keyToggle(a) ( texelFetch(iChannel3,ivec2(a,2),0).x > 0.)\n#define hue(v)        vec4( .6 + .6 * cos( 6.3*(v)  + vec3(0,23,21)  ) , 1 )\n\n#define blend(Cb,Cf) ( Cf + (1.-(Cf).a) * (Cb) )\n\n                   // draw object i in the scene graph,  U ~ local bbox \n#define draw(U,i)     smoothstep( 1.5*fwidth(length(U)), 0., abs( length(U) - .3 -.01*sin(30.*atan(U.y,U.x))  ) -.01 ) * hue( i/4. )\n\n                   // seek for cached image of object i at LOD i , placed around pos[i]\n#define fetch(i)      ( i > 3 ? vec4(0) \\\n                      : texture(iChannel0, .5* ( clamp( 2.*fract(U)- pos[min(i,3)], 0.,1.)  ) + .5*vec2((i)%2,(i)/2) ) )\n\n                   // compose the vector object i at LOD i with the cached objects of LOD i+1\n#define node(i)       blend( draw(F,float(i)), fetch(i+1) )\n\n                   // \"object\" should be the local group of strokes painted at a given region at a given LOD\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// === compute the cache of LOD & objects within the scene graph\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O = T(u);\n    if (u==vec2(.5)) O.a += float(keyDown(40)) - float(keyDown(38)); // top/down arrow keys control zoom.\n    \n    if ( iFrame > 3 ) return;\n    \n    vec2 U = 2.*u/R,                // memory adressing for 4 cache slots. Each slot adressing = fract(U).\n         F = (fract(U)-.5)*R/R.y;   // local coords for local vector drawing\n    int i = int(U) + 2*int(U.y);    // cache slot id. ( deepest = top right, largest = bottom left ) \n    \n    // Each quadrant tile is a cache containing a raster LOD of the lower-scale screen: \n    // Draw local vector object + local background\n    \n    if ( iFrame == 0 && i==3 ) O = node(3); \n    if ( iFrame == 1 && i==2 ) O = node(2);\n    if ( iFrame == 2 && i==1 ) O = node(1);\n    if ( iFrame == 3 && i==0 ) O = node(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}