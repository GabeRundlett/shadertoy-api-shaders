{
    "Shader": {
        "info": {
            "date": "1711915347",
            "description": "132 BPM, adjustable in main file.",
            "flags": 32,
            "hasliked": 0,
            "id": "XctGzS",
            "likes": 3,
            "name": "Fractal colour thing with beats",
            "published": 3,
            "tags": [
                "feedbackmapping"
            ],
            "usePreview": 0,
            "username": "immibis",
            "viewed": 203
        },
        "renderpass": [
            {
                "code": "const float BEATSPEED = 2.2;\n\nmat2 rotmat(float angle) {\n    return mat2(vec2(cos(angle),sin(angle)),vec2(-sin(angle),cos(angle)));\n}\n\nvec4 texelFetch0(ivec2 v) {\n    ivec2 ires = ivec2(iResolution.xy);\n    v = (v+ires*2)%ires;\n    \n    int symmetry = int(iTime*BEATSPEED);\n    symmetry ^= (symmetry * 65539);\n    symmetry ^= symmetry >> 5;\n    \n    if((symmetry & 1) != 0) {\n        if(v.x < ires.x/2) v.x = ires.x - v.x;\n    }\n    if((symmetry & 2) != 0) {\n        if ((symmetry % 3) != 0) {\n            if(v.y < ires.y/2) v.y = ires.y - v.y;\n        } else {\n            if(v.y >= ires.y/2) v.y = ires.y - v.y;\n        }\n    }\n    if((symmetry & 4) != 0) {\n        vec2 uv = vec2(v)/iResolution.xy;\n        if(uv.x > uv.y) {\n            uv.xy = uv.yx;\n            v = ivec2(uv*iResolution.xy);\n        }\n    }\n    \n    return texelFetch(iChannel0, v, 0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \n    //fragCoord.x += iResolution.x/2.0*cos(iTime);\n    fragCoord.x = mod(fragCoord.x, iResolution.x);\n\n    fragCoord /= iResolution.xy;\n    fragCoord -= 0.5;\n    fragCoord *= 2.0;\n    \n    float waviness = fract(length(fragCoord)+iTime);\n    \n    //fragCoord = rotmat(iTime+sin(fragCoord.y*10.0)*0.3 /*sin(iTime*0.01)*/ *sin(iTime)*waviness)*fragCoord;\n    \n    //fragCoord = rotmat(iTime*0.1)*fragCoord;\n    \n    //fragCoord.x += fragCoord.y;\n    \n    \n    /*if(fragCoord.x > fragCoord.y && sin(iTime) > 0.0) {\n        fragCoord *= -1.0;\n    }\n    /*if(fragCoord.x > 0.0) {\n        fragCoord.x = -fragCoord.x;\n    }\n    if(fragCoord.y > 0.0) fragCoord.y *= -1.0;*/\n    //if(fragCoord.x\n    \n    fragCoord /= 2.0;\n    fragCoord += 0.5;\n    fragCoord *= iResolution.xy;\n\n    vec4 a = texelFetch0(ivec2(fragCoord)+ivec2(0,-2));\n    vec4 b = texelFetch0(ivec2(fragCoord)+ivec2(0,2));\n    vec4 c = texelFetch0(ivec2(fragCoord)+ivec2(-2,0));\n    vec4 d = texelFetch0(ivec2(fragCoord)+ivec2(2,0));\n    fragColor = (abs(a-b) + abs(c-d))*3.0 + (a+b+c+d)*0.1; // try *0.01, *0.0, *-0.2\n    \n    switch(((int(iTime*BEATSPEED) * 5) >> 2) % 3) {\n       case 0: break;\n       case 1:\n        fragColor.rgb = fragColor.gbr;\n        break;\n        case 2:\n        fragColor.rgb = fragColor.rbg;\n        break;\n    }\n    \n    //fragColor = a;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 rotate(vec2 v, float angle, vec2 mid) {\n    v -= mid;\n    v = vec2(v.x*cos(angle)+v.y*sin(angle),v.y*cos(angle)-v.x*sin(angle));\n    v += mid;\n    return v;\n}\n\nconst float aspect = 800.0/450.0;\n\nvec2 tunnelMap(vec2 uv) {\n    return vec2(0.1/length(uv), atan(uv.x,uv.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; //uv -= 0.5;\n    vec2 ouv = uv;\n    uv = tunnelMap(uv - 0.5 + vec2(0.4*sin(iTime*1.1),cos(iTime)));\n    \n    // if we do this, the \"simple\" period when the focal point is off the bottom of the screen, the pattern is less minimal.\n   uv.x *= 3.0;\n\n    //uv.x *= iTime;\n    \n    uv = mod(rotate(uv,(sin(iTime)),vec2(0.2)),1.0);\n    vec4 c = texture(iChannel0, uv);\n    c += (vec4(ouv.x,0,ouv.y,1)-c)*0.3;\n    \n    vec2 uv2 = uv*2.0-1.0; uv2.x *= aspect;\n    c.b += 0.05/length(uv2);\n    \n    fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}