{
    "Shader": {
        "info": {
            "date": "1692643273",
            "description": "Attempt at remaking this classic: https://www.youtube.com/watch?v=jziQBWQxvok&t=425s\n\nSeems hard to time sound with picture (delay varies), so it might be out of sync at times...\n\nFullscreen gives bigger impact :)",
            "flags": 40,
            "hasliked": 0,
            "id": "dljyRt",
            "likes": 6,
            "name": "Desert Dream Buzz Saw",
            "published": 3,
            "tags": [
                "amiga",
                "kefrens",
                "reproduction",
                "buzzsaw",
                "buzzsaw",
                "desertdream"
            ],
            "usePreview": 0,
            "username": "misol101",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "// Original rasterizer from https://www.shadertoy.com/view/MdS3Rz by HLorenzi\n\nconst float PI=3.14159265359;\n\nvec4 inTriangle(vec2 p0, vec2 p1, vec2 p2, vec2 p)\n{\n\tfloat a = 0.5*(-p1.y*p2.x + p0.y*(-p1.x + p2.x) + p0.x*(p1.y - p2.y) + p1.x*p2.y);\n\tfloat s = 1.0/(2.0*a)*(p0.y*p2.x - p0.x*p2.y + (p2.y - p0.y)*p.x + (p0.x - p2.x)*p.y);\n\tfloat t = 1.0/(2.0*a)*(p0.x*p1.y - p0.y*p1.x + (p0.y - p1.y)*p.x + (p1.x - p0.x)*p.y);\n\t\n\tif (s > 0.0 && t > 0.0 && 1.0 - s - t > 0.0) {\n\t\treturn vec4(1.0,s,t,1.0-s-t);\n\t} else {\n\t\treturn vec4(0.0,s,t,1.0-s-t);\n\t}\n}\n\nfloat rx=0., ry=PI*0.501, rz=0., dist=2.0;\nfloat xg=0., yg=0.;\n\nvoid triangle(inout vec4 c, vec2 p, int type, sampler2D tex, vec3 p0, vec3 p1, vec3 p2, vec2 t0, vec2 t1, vec2 t2)\n{\n\tfloat cx = cos(rx); float sx = sin(rx);\n\tfloat cy = cos(ry); float sy = sin(ry);\n\tfloat cz = cos(rz); float sz = sin(rz);\n    \n\tmat4 transform1 =\n\t\tmat4(1, 0, 0, 0,\n      \t\t 0, 1, 0, 0,\n      \t\t 0, 0, 1, 0,\n\t\t\t 0, 0, -2.5, 1);\n\t\n\tmat4 transform2 =\n\t\tmat4(cz*cy, -sz*cy, sy, 0,\n\t\t\t sz*cx + cz*sy*sx, cz*cx - sz*sy*sx, -cy*sx, 0,\n\t\t\t sz*sx - cz*sy*cx,cz*sx + sz*sy*cx, cy*cx, 0,\n\t\t\t 0, 0, 0, 1);\n\t\n\tfloat n = dist;\n\tfloat f = 30.0;\n\tfloat r = 1.0 * iResolution.x / iResolution.y;\n\tfloat t = 1.0;\n\tmat4 projection =\n\t\tmat4(n/r, 0, 0, 0,\n      \t\t 0, n/t, 0, 0,\n      \t\t 0, 0, -(f+n)/(f-n), -1,\n\t\t\t 0, 0, -(2.0*f*n)/(f-n), 0);\n\t\n\tvec4 pt0 = vec4(0,0,0,0);\n\tvec4 pt1 = vec4(0,0,0,0);\n\tvec4 pt2 = vec4(0,0,0,0);\n\t\n\tpt0 = projection * transform1 * transform2 * vec4(p0,1);\n\tpt1 = projection * transform1 * transform2 * vec4(p1,1);\n\tpt2 = projection * transform1 * transform2 * vec4(p2,1);\n\t\n    pt0.x += xg; pt0.y += yg;\n    pt1.x += xg; pt1.y += yg;\n    pt2.x += xg; pt2.y += yg;\n\t\n\tvec4 test = inTriangle(pt0.xy / pt0.w, pt1.xy / pt1.w, pt2.xy / pt2.w, p);\n\t\n\tif (test.x != 0.0) {\n\t\tfloat z = ((pt1.z * test.y) / pt1.w +\n\t\t\t\t   (pt2.z * test.z) / pt2.w +\n\t\t\t\t   (pt0.z * test.w) / pt0.w) /\n\t\t\t\t\t(test.y / pt1.w +\n\t\t\t\t\t test.z / pt2.w +\n\t\t\t\t\t test.w / pt0.w);\n\t\tif (z < c.w) {\n\t\t\tfloat tx = ((t1.x * test.y) / pt1.w +\n\t\t\t\t\t\t(t2.x * test.z) / pt2.w +\n\t\t\t\t\t\t(t0.x * test.w) / pt0.w) /\n\t\t\t\t\t   (test.y / pt1.w +\n\t\t\t\t\t\ttest.z / pt2.w +\n\t\t\t\t\t\ttest.w / pt0.w);\n\t\t\t\n\t\t\tfloat ty = ((t1.y * test.y) / pt1.w +\n\t\t\t\t\t\t(t2.y * test.z) / pt2.w +\n\t\t\t\t\t\t(t0.y * test.w) / pt0.w) /\n\t\t\t\t\t   (test.y / pt1.w +\n\t\t\t\t\t\ttest.z / pt2.w +\n\t\t\t\t\t\ttest.w / pt0.w);\n\t\t\t\t\n\t\t\tc = vec4(texture(tex, vec2(tx,ty)).xyz, z);\n\t\t}\n\t}\n}\n\nfloat hash1( float n ) {\n    return fract(sin(n)*138.5453123);\n}\n\nvec4 pixel(vec2 p)\n{\t\n    float time = getTime(iTime);\n\n    float sz = 1.0, pz=0.01;\n    vec4 color = vec4(0,0,0,1000);\n\n    // Zooming and spinning\n    dist = 1.5 + cos(min(5.,max(time-5.3,0.))*1.2) * (0.5+min(5.0,max(0.,(time-9.2)*0.33)*2.)+min(3.0,max(0.,(time-9.7)*0.43)*8.));\n    \n    ry = sin(min(4.2,max(0.,time-5.5))*0.4 - PI*0.5) * (PI*0.501);\n    rz = sin(max(0.,time-5.5)*0.4 + PI*0.5) * (PI*0.501);\n    rz += sin(max(0.,time-11.0)*0.14) * (PI);\n\n    // Final move to the right\n    xg = max(time-15.0,0.) * 4.;\n\n    // Draw plane\n\ttriangle(color, p, 1, iChannel3, vec3(pz,-sz,-sz),  vec3(pz,-sz,sz), vec3(pz,sz,-sz),\n\t\t\t\t\t              vec2(0,0),\t   vec2(1,0),\t  vec2(0,1));\n\t\n\ttriangle(color, p, 1, iChannel3, vec3(pz,-sz,sz),   vec3(pz,sz,sz),  vec3(pz,sz,-sz),\n\t\t\t\t\t              vec2(1,0),\t   vec2(1,1),\t  vec2(0,1));\n\n    // Cutting!\n    if (time > 10.5 && time < 14.3 ) {\n        vec2 pf=p+0.3;\n        if (pf.y > sin(time*5.6) && pf.y < sin(time*12.))\n            color = color*0.7 + 1.65 * (texture(iChannel2, mod(p,0.05+sin(hash1(iTime*43.3)))+sin(hash1(iTime*43.3))));\n    }\n    if (time > 10.5 && time < 15.3 ) {\n        if (iFrame % 33 < 16) color=vec4(1.0)-color;\n        color = (color+0.15) * 0.65 * (texture(iChannel2, p+sin(hash1(iTime*43.3)))) + texture(iChannel1, (p+1.)*(1.3+sin(hash1(iTime*100.3))));\n        if (iFrame % 20 < 6) color*=(vec4(0.,0.8,0.43,1.));\n        if ((iFrame+23) % 96 < 7) color*=(vec4(0.3,0.0,0.05,1.));\n        if ((iFrame+60) % 200 > 130) color=1.-(color);\n        if ((iFrame+123) % 560 > 370 && time < 14.9) color*=(vec4(0.3,0.2,1.45,1.));\n    }\n    // End fade\n    else if (time >= 15.3) { color += vec4(vec3(max(0.,1.0-(time-15.3)*0.5)),1000); }\n\n\treturn color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv * 2.0 - vec2(1.0,1.0);\n\tfragColor = pixel(uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "// Original star drawing function from https://www.shadertoy.com/view/dlSczt by kushnadas\n\n// Function to draw a buzz saw\nfloat saw(vec2 st, float time) {\n    st = st*1.2 - 0.6;\n    \n    // Convert to polar coordinates\n    float r = length(st);\n    float a = atan(st.y, st.x);\n\n    // Adjust angle for rotation over time\n    a += max(0.,(time-2.0)) * 3.0 * min(1.0,(max((time-2.0)*0.7,0.))*0.16);\n\n    // Create shape using modulo and scaling\n    float l = 3.14159/2.5/5.0;\n    float m = min(max(time-0.8,0.)*4.5,6.);\n    float sector = (l-mod(a, l)) * m / 3.14159;\n    r = smoothstep(0.9, 0.41, r * (2.0 - sector));\n\n    return r;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    float time = getTime(iTime);\n\n    fragColor = vec4(vec3(min(time*1.5,1.)) * ceil(saw(uv, time)), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Don't know at all what I'm doing... Basically using https://www.shadertoy.com/view/XsBXWt by Kali\n\n// Help to make a saw sound closer to the original would be appreciated!\n\nvec2 mainSound( in int samp,float time) {\n    time = getTime(time + 0.5);\n\n\tvec2 ut = vec2( fract(sin(3.2831*940.0*time*2.)*100.));\n    if (time < 9.3) ut*=0.0;\n    else if (time < 10.9) ut*=(time-9.3)/(10.9-9.3)*0.3;\n    else if (time > 15.6) ut*=max(0.,16.6-time);\n    return ut;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "const bool BOUNCE_TIME = false;\n\nfloat getTime(float time) {\n    if (!BOUNCE_TIME)\n        time = mod(time, 18.);\n    else {\n        time = mod(time, 36.);\n        if (time >= 18.0) time = 36. - time;\n    }\n    return time;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}