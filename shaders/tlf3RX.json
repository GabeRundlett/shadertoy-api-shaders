{
    "Shader": {
        "info": {
            "date": "1569951120",
            "description": "Releasing as it's national day. \nWanted to see how hard it would be to build chinese characters. Just asking for patience :-D\nMost of functions from https://iquilezles.org/ :)",
            "flags": 0,
            "hasliked": 0,
            "id": "tlf3RX",
            "likes": 1,
            "name": "大龙猫 - 中国",
            "published": 3,
            "tags": [
                "china",
                "hanzi",
                "shadertober",
                "octshader"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 394
        },
        "renderpass": [
            {
                "code": "#define pi 3.141592\n\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2. * s)) - s)));\n}\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sphere(vec3 p, float radius)\n{\n    return length(p)- radius;\n}\n// 中\nfloat zhong(vec3 p){\n \n    vec3 pLeft = p+vec3(2.1,-0.5,0.);\n    float left = sdCappedCylinder(pLeft,vec2(.1,.7));\n    \n    \n    vec3 pRight = p+vec3(.4,-0.5,0.);\n    float right = sdCappedCylinder(pRight,vec2(.1,0.7));\n    \n    vec3 pTop = (p+vec3(1.25,-1.15,0.)).yxz;\n    float top = sdCappedCylinder(pTop,vec2(.1,1.));\n     \n    \n    vec3 pDown = (p+vec3(1.25,0.,0.)).yxz;\n    float down = sdCappedCylinder(pDown,vec2(.1,1.));\n    \n    \n    vec3 pMiddle = p+vec3(1.25,0.,0.);\n    float middle = sdCappedCylinder(pMiddle,vec2(.1,1.5));\n    \n    \n    return fOpUnionStairs(\n                            fOpUnionStairs(\n                  \t\t\t\tfOpUnionStairs(right,left,.1,3.),\n                   \t\t\t\tfOpUnionStairs(top,down,0.1,3.),\n                                .1,\n                                3.),\n                             middle,\n                               .1,\n                               3.);\n\n}\n//国\nfloat guo(vec3 p) {\n\n    vec3 pLeft = p+vec3(2.,0.0,0.);\n    float left = sdCappedCylinder(pLeft,vec2(.1,1.5));\n    \n    \n    vec3 pRight = p+vec3(-.5,0.,0.);\n    float right = sdCappedCylinder(pRight,vec2(.1,1.5));\n    \n    vec3 pTop = (p+vec3(0.9,-1.30,0.)).yxz;\n    float top = sdCappedCylinder(pTop,vec2(.1,1.3));\n     \n    \n    vec3 pDown = (p+vec3(0.9,1.30,0.)).yxz;\n    float down = sdCappedCylinder(pDown,vec2(.1,1.3));\n    \n    \n    \n    \n    vec3 pMiddle = p+vec3(.70,0.,0.);\n    float middle = sdCappedCylinder(pMiddle,vec2(.1,1.));\n    \n    vec3 pMiddleTop = (p+vec3(0.7,-1.,0.)).yxz;\n    float middleTop = sdCappedCylinder(pMiddleTop,vec2(.1,0.9));\n    \n    \n    vec3 pMiddleMiddle = (p+vec3(0.7,.0,0.)).yxz;\n    float middleMiddle = sdCappedCylinder(pMiddleMiddle,vec2(.1,0.7));\n    \n    vec3 pMiddleDown = (p+vec3(0.7,1.,0.)).yxz;\n    float middleDown = sdCappedCylinder(pMiddleDown,vec2(.1,0.9));\n    \n    vec3 pMiddleDot = (p+vec3(-.1,.8,0.)).yxz;\n    pMiddleDot.xy *= rotate2d(-45.);\n    float middleDot= sdCappedCylinder(pMiddleDot,vec2(.1,0.3));\n    \n    float st = 3.;\n    float l = 0.05;\n    float kou = fOpUnionStairs(\n        \t\t\t\t\t\tfOpUnionStairs(\n                                    fOpUnionStairs(right,left,.1,st),\n                                    fOpUnionStairs(top,down,.1,st),\n                                    .1,\n                                    st),\n        \t\t\t\t\t\tmiddleDot,\n    \t\t\t\t\t\t\t.1,\n    \t\t\t\t\t\t\tst);\n    float sheng = fOpUnionStairs(middleDown,fOpUnionStairs(middleMiddle,\n                                     fOpUnionStairs(middleTop,middle,l,st),\n                                     l,\n                      \t\t\t\t st),\n                                 l,\n                                 st);\n    return fOpUnionStairs(kou,sheng,l,st);\n}\nfloat SDF(vec3 p){\n    \n     p *= .5;\n    float s = sphere(p+vec3(0.+sin(iTime+3.)/1.,0.+cos(iTime+3.)/1.,-2.),sin(iTime)/5.+p.z+3.);\n    float zhongguo =  min(zhong(p+vec3(1.,0.,0.)),guo(p+vec3(-3.,0.,0.)));\n    return min(max(s,zhongguo),mix(s,zhongguo,1.+sin(iTime)/5.));\n    \n}\n\n\nvec3 get_normal(vec3 p){\n  vec2 eps = vec2(0.1,0.);\n    return normalize(\n             vec3(\n                  SDF(p+eps.xyy) - SDF(p-eps.xyy), // Diff in X\n                  SDF(p+eps.yxy) - SDF(p-eps.yxy), // Diff in Y\n                  SDF(p+eps.yyx) - SDF(p-eps.yyx)  // Diff in Z\n             )\n            );  // Math Vector\n}\n\nfloat diffuse_directional(vec3 n,vec3 l){\n   float a = dot(n,normalize(l))*.5+.5 ;\n    return a;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n\n     \n    vec3 ro = vec3(0.01,0.01,-10.); vec3 p = ro;\n    vec3 rd = normalize(vec3(uv,1. ));\n    float offset = 0.;\n    if (uv.x < 0.) {\n        offset =pi/2.;\n    }\n\n    p += vec3(0.,0.,tan(offset+iTime*2.));\n    \n\tp.y += sin(p.y+iTime) +cos(p.y+iTime);\n  \n    bool hit = false;\n    float shading = 0.;\n    for(float i=0.;i<1000.;i++){\n   \n          \n        float d = SDF(p);  \n            if(d < 0.001) {  \n                hit = true;\n                shading = i/100.;\n                break;\n\n            }\n            p += d * rd;  \n       \n    }\n    float t = length(ro-p);  \n    vec3 col =  vec3(1.0,0.,0.);\n    if(hit){\n         vec3 n = get_normal(p) ; \n         vec3 l = vec3(0.001+cos(iTime*0.1)*4.,1.,-1.+sin(iTime*0.1)*4.); \n        l = vec3(0.911,.1,-10.);\n        col = vec3(diffuse_directional(n,l));\n      \n         col = mix(vec3(0.1,0.1,0.),vec3(1.,1.,0.), col)*(1.-shading); \n      \n    } else {\n           \n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}