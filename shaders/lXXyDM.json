{
    "Shader": {
        "info": {
            "date": "1726236949",
            "description": "My first competent shader",
            "flags": 0,
            "hasliked": 0,
            "id": "lXXyDM",
            "likes": 3,
            "name": "Dancing Jellyfish",
            "published": 3,
            "tags": [
                "fft",
                "music",
                "star",
                "visualizer",
                "dance",
                "microphone",
                "soundcloud",
                "rythm",
                "virtualdj"
            ],
            "usePreview": 0,
            "username": "DarkReaper231",
            "viewed": 96
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n#define TENTACLES 8.0\n#define FLOATERS 12\n#define SPIKES 8.0\n\nfloat getFFT(float f) {\n    return texture(iChannel0, vec2(f, 0.0)).r;\n}\n\nfloat smoothFFT(float f, float s) {\n    float r = getFFT(f);\n    r = pow(r, 2.5);\n    return mix(r, 0.5, s);\n}\n\n// credits: https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat sdTentacle(vec2 p, float l, float a, float i) {\n    p = vec2(p.x * cos(a) + p.y * sin(a), \n             -p.x * sin(a) + p.y * cos(a));\n    \n    float w = i * sin(p.y * 10.0 + iTime * 5.0);\n    p.x -= w;\n    \n    float t = mix(0.03, 0.001, clamp(p.y / l, 0.0, 1.0));\n    \n    return length(vec2(p.x, max(0.0, p.y))) - t;\n}\n\nfloat sdJellyfish(vec2 p, float r, float t, float w) {\n    float a = atan(p.y, p.x);\n    float l = length(p);\n    \n    float b = l - r * (1.0 + 0.2 * sin(a * SPIKES + iTime));\n    \n    float n = 1e10;\n    for (int i = 0; i < int(t); i++) {\n        float t = float(i) / t;\n        float o = TWO_PI * t;\n        float x = p.x - (r + 0.2) * cos(o);\n        float y = p.y - (r + 0.2) * sin(o);\n        float g = 0.4 + 0.3 * sin(iTime * 2.0 + t * TWO_PI);\n        n = min(n, sdTentacle(vec2(x, y), g, o, w));\n    }\n    \n    return min(b, n);\n}\n\nvec2 rotate2D(vec2 p, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    \n    return vec2(p.x * c - p.y * s, p.x * s + p.y * c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    float bF = smoothFFT(0.1, 0.5);\n    float mF = smoothFFT(0.2, 0.3);\n    float hF = smoothFFT(0.5, 0.3);\n    \n    float r = 0.2 + 0.4 * bF;\n    float t = TENTACLES;\n    vec2 s = vec2(0.2 * cos(iTime * 0.5), 0.1 * sin(iTime * 0.7));\n    float w = 0.05 + 0.1 * bF;\n    \n    uv = rotate2D(uv, iTime * 0.1);\n    \n    float j = sdJellyfish(uv - s, r, t, w);\n    \n    vec3 col = vec3(0.0);\n    if (j < 0.0) {\n        float p = 0.5 + 0.5 * sin(iTime * 5.0 + uv.y * 10.0);\n        vec3 c = hsv2rgb(vec3(\n            fract(iTime * 0.1 + hF * 2.0),\n            0.7 + 0.3 * mF,\n            0.6 + 0.4 * p * bF\n        ));\n        \n        col = c * (1.0 - smoothstep(-0.01, 0.01, j));\n    }\n    \n    vec2 bgUV = uv * 0.5 - 0.1 * vec2(cos(iTime * 0.2), sin(iTime * 0.3));\n    float bgNoise = fract(sin(dot(bgUV, vec2(12.9898, 78.233))) * 43758.5453);\n    vec3 bgColor = hsv2rgb(vec3(\n        fract(0.7 + iTime * 0.02 + bF * 0.1),\n        0.5,\n        0.1 + 0.05 * bgNoise + 0.05 * bF\n    ));\n    \n    col = mix(bgColor, col, smoothstep(0.0, 0.01, -j));\n    \n    col += 0.05 * vec3(0.2, 0.5, 1.0) / (abs(j) + 0.1);\n    \n    float v = 1.0 - smoothstep(0.5, 1.5, length(uv));\n    col *= v;\n    \n    for (int i = 0; i < FLOATERS; i++) {\n        vec2 fS = vec2(\n            sin(iTime * (0.1 + float(i) * 0.05) + float(i)),\n            mod(1.5 - iTime * (0.1 + float(i) * 0.05) + float(i), 3.0) - 1.5\n        );\n        \n        float l = 0.01 + 0.005 * sin(iTime + float(i)) + 0.005 * bF;\n        float f = length(uv - fS) - l;\n        col += vec3(0.2, 0.5, 1.0) * (1.0 - smoothstep(0.0, 0.005, f)) * 0.3;\n    }\n    \n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}