{
    "Shader": {
        "info": {
            "date": "1578482616",
            "description": "Move mouse horizontally to control the camera position and vertically to control the light position.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lKGRW",
            "likes": 30,
            "name": "Translucency Rendering II",
            "published": 3,
            "tags": [
                "translucency",
                "translucent"
            ],
            "usePreview": 0,
            "username": "ikuto",
            "viewed": 849
        },
        "renderpass": [
            {
                "code": "#define AA 2\n#define PI 3.14159\n\nstruct Material\n{\n    vec3 \tdiffuseAlbedo;\n    vec3 \tspecularAlbedo;\n    float \tspecularPower;\n    float   bumpiness;\n};\n    \nMaterial materials[] = Material[] \n(\n    Material(vec3(0.0, 0.2, 0.2), vec3(0.3), 4.0, 0.2),\n    Material(vec3(0.0, 0.1, 0.2), vec3(0.3), 4.0, 0.2),\n    Material(vec3(0.0, 0.2, 0.1), vec3(0.3), 4.0, 0.2),\n    Material(vec3(0.1, 0.2, 0.0), vec3(0.3), 8.0, 0.1),\n    Material(vec3(0.2, 0.0, 0.2), vec3(0.3), 4.0, 0.15),\n    Material(vec3(0.4, 0.3, 0.02), vec3(0.2), 1.0, 0.1),\n    Material(vec3(0.2, 0.0, 0.2), vec3(0.2), 1.0, 0.1),\n    Material(vec3(0.0, 0.1, 0.1), vec3(0.2), 1.0, 0.05)\n);\n\nvec2 rotate(vec2 v, float a) { return cos(a)*v + sin(a)*vec2(v.y,-v.x); }\n\n//noise function from https://www.shadertoy.com/view/MsXGWr\nvec3 texturize( sampler2D sa, vec3 p, vec3 n )\n{\n\tvec3 x = texture( sa, p.yz ).xyz;\n\tvec3 y = texture( sa, p.zx ).xyz;\n\tvec3 z = texture( sa, p.xy ).xyz;\n\treturn x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\nvec2 opUnion(vec2 a, vec2 b) { return a.x < b.x ? a : b; }\n\n//distance function from https://iquilezles.org/articles/distfunctions\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nvec2 map(vec3 p)\n{\n    float objID = 0.0;\n    vec2 res = vec2(sdRoundBox(p-vec3(0.0, 0.0, 0.0), vec3(0.7, 0.7, 0.7), 0.2), objID++);\n    vec3 p2 = p - vec3(0.0, 1.3, 0.0); p2.xz = rotate(p2.xz, PI/6.0);\n    res = opUnion(res, vec2(sdRoundBox(p2, vec3(0.3, 0.3, 0.3), 0.1), objID++));\n    p2 = p - vec3(0.0, 2.2, 0.0); p2.xz = rotate(p2.xz, PI/9.0);\n    res = opUnion(res, vec2(sdRoundBox(p2, vec3(0.5, 0.3, 0.5), 0.2), objID++));\n    p2 = p - vec3(3.0, 0.3, 0.0); p2.xz = rotate(p2.xz, PI/9.0);\n    res = opUnion(res, vec2(sdRoundBox(p2, vec3(0.7, 1.0, 0.7), 0.2), objID++));\n    p2 = p - vec3(-3.0, -0.2, 0.5); p2.xz = rotate(p2.xz, PI/4.0);\n    res = opUnion(res, vec2(sdRoundBox(p2, vec3(0.5, 0.5, 0.5), 0.2), objID++));\n    p2 = p - vec3(-2.8, 1.3, 0.5); p2.xz = rotate(p2.xz, 0.0);\n    res = opUnion(res, vec2(sdRoundBox(p2, vec3(0.6, 0.6, 0.6), 0.2), objID++));\n    p2 = p - vec3(1.0, -0.4, 2.5); p2.xz = rotate(p2.xz, PI/6.0);\n    res = opUnion(res, vec2(sdRoundBox(p2, vec3(0.4, 0.4, 0.4), 0.1), objID++));\n    res = opUnion(res, vec2(p.y + 0.9, objID++));\n    return res;\n}\n\nvec3 calculateTransmittance(vec3 ro, vec3 rd, float tmin, float tmax, vec3 atten)\n{\n    float thickness = 0.0;\n    for (float t = tmin; t < tmax;)\n    {\n        float h = map(ro + t * rd).x;\n        float dt = (abs(h) < 1e-5) ? 0.01 : min(tmax-t, abs(h));\n        if (h < 0.0) thickness += dt; \n        t += dt;\n    }\n    \n    return exp(-atten * thickness);\n}\n\nvec2 rayMarch(vec3 ro, vec3 rd, float tmin, float tmax)\n{\n\tfor (float t = tmin; t < tmax;)\n    {\n        vec3 pos = ro + t * rd;\n        vec2 res = map(pos);\n        \n        float dist = res.x;\n        if (dist < 0.001) return vec2(t, res.y);\n        \n        t += dist;\n    }\n    return vec2(1e6, -1.0);\n}\n\nvec3 calculateNormal(vec3 p)\n{\n    vec3 dt = vec3(0.001, 0.0, 0.0);\n    return normalize( vec3 ( map(p+dt.xyy).x - map(p-dt.xyy).x,\n    \t\t\t\t\t\t map(p+dt.yxy).x - map(p-dt.yxy).x,\n                             map(p+dt.yyx).x - map(p-dt.yyx).x ) );\n}\n\nfloat calculateAO(vec3 pos, vec3 nor) //ambient occlusion\n{\n    float ao = 0.0, sca = 1.0;\n    \n    for (int i = 0; i < 5; ++i)\n    {\n    \tfloat h = 0.01 + 0.11*float(i)/4.0;\n        float d = map(pos+h*nor).x;\n        ao += (h-d)*sca;\n        sca *= 0.95;\n    }\n    \n    return clamp(1.0-2.0*ao, 0.0, 1.0);\n}\n\nvec3 render(vec3 ro, vec3 rd)\n{\n\tvec3 color = vec3(0.0);\n    \n    float an = iMouse.z>0.0 ? 10.0*(iMouse.y/iResolution.y-0.5) : (1.0-0.2*iTime);\n    vec3 lightPos = vec3(3.0*cos(an), 1.3, 3.0*sin(an));\n    vec3 lightColor = vec3(10.0, 8.0+sin(iTime)*6.0, 7.0+cos(iTime)*5.0);\n    \n    vec2 res = rayMarch(ro, rd, 0.01, 15.0);\n    float t = res.x;\n    float objID = res.y;\n    \n    //draw entities\n    if (objID > -0.5)\n    {\n        Material mat = materials[int(objID)];\n        vec3 pos = ro + t * rd;\n        vec3 nor = calculateNormal(pos);\n        vec3 bnor = -1.0 + 2.0 * texturize(iChannel0, 0.5*pos, nor);\n\t\tnor = normalize(nor + mat.bumpiness*bnor);\n       \n        vec3 lightDir = normalize(lightPos - pos);\n        float lightDist = length(lightPos - pos);\t\t\n        float atten = 1.0 / (1.0 + 0.5 * lightDist * lightDist);\n        vec3 light = atten * lightColor;\n        light *= calculateTransmittance(pos+0.01*nor, lightDir, 0.01, min(lightDist, 20.0), vec3(1.0, 0.6, 0.5));\n        \n        float ao = calculateAO(pos, nor);\n        color +=  light * mat.diffuseAlbedo;\n        color += light * mat.specularAlbedo * pow(max(0.0, dot(reflect(lightDir,nor),rd)), mat.specularPower);\n        color *= ao;\n    }\n    \n    //draw lights\n    {\n        vec3 lv = lightPos - ro;\n        float ll = length(lv);\n        if (ll < t)\n        {\n            float angle = acos(clamp(dot(rd, lv/ll), 0.0, 1.0));\n            color += 1e2*lightColor*pow((1.0-smoothstep(0.0, 0.8, angle*ll)), 32.0);    \n        }\n    }\n    \n    return color;\n}\n\nmat3 lookAt(vec3 eye, vec3 target, vec3 up)\n{\n    vec3 w = normalize(target - eye);\n    vec3 u = normalize(cross(w, up));\n    vec3 v = cross(u, w);\n    return mat3(u, v, -w);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float an = iMouse.z>0.0 ? 10.0*(iMouse.x/iResolution.x-0.5) : 0.0;\n    \n\tvec3 ro = 5.0*vec3(1.2*sin(an), 0.3, cos(an)+0.2);\n    mat3 viewMat = lookAt(ro, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n\n    vec3 color = vec3(0.0);\n    for (int i = 0; i < AA; ++i) //super sampling\n    {\n        for (int k = 0; k < AA; ++k)\n        {\n            vec2 offset = vec2(float(i)+0.5,float(k)+0.5) / float(AA) - 0.5;\n            vec2 uv = (2.0*(fragCoord+offset)-iResolution.xy)/iResolution.y;    \n    \t    vec3 rd = viewMat * normalize(vec3(uv, -2.0));\n    \t\t\n            color += render(ro, rd);\n        }\n    }\n    \n\tcolor /= float(AA*AA);\n\tcolor = pow(color, vec3(0.4545));\n    \n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}