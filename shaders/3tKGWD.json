{
    "Shader": {
        "info": {
            "date": "1578968464",
            "description": "Based on Jon's world generator tutorial:\nhttp://www.jgallant.com/procedurally-generating-wrapping-world-maps-in-unity-csharp-part-1/\n\nUses Makio64's noise function:\nhttps://www.shadertoy.com/view/Xd3GRf",
            "flags": 0,
            "hasliked": 0,
            "id": "3tKGWD",
            "likes": 2,
            "name": "procedural topography thing",
            "published": 3,
            "tags": [
                "procedural"
            ],
            "usePreview": 0,
            "username": "MickLH",
            "viewed": 445
        },
        "renderpass": [
            {
                "code": "lowp vec4 permute(in lowp vec4 x) {\n    vec4 z = mod(x*x*34.0+x,vec4(289.0));\n    z = mod(z*z*12.0 + x*z*23.0 + x*x*34.0,vec4(289.0));\n    return z;\n}\nlowp float snoise(in mediump vec3 v) {\n  const lowp vec2 C = vec2(0.16666666666,0.33333333333);\n  const lowp vec4 D = vec4(0,.5,1,2);\n  lowp vec3 i  = floor(C.y*(v.x+v.y+v.z) + v);\n  lowp vec3 x0 = C.x*(i.x+i.y+i.z) + (v - i);\n  lowp vec3 g = step(x0.yzx, x0);\n  lowp vec3 l = (1. - g).zxy;\n  lowp vec3 i1 = min( g, l );\n  lowp vec3 i2 = max( g, l );\n  lowp vec3 x1 = x0 - i1 + C.x;\n  lowp vec3 x2 = x0 - i2 + C.y;\n  lowp vec3 x3 = x0 - D.yyy;\n  i = mod(i,289.);\n  lowp vec4 p = permute( permute( permute(\n\t  i.z + vec4(0., i1.z, i2.z, 1.))\n\t+ i.y + vec4(0., i1.y, i2.y, 1.))\n\t+ i.x + vec4(0., i1.x, i2.x, 1.));\n  lowp vec3 ns = .142857142857 * D.wyz - D.xzx;\n  lowp vec4 j = -49. * floor(p * ns.z * ns.z) + p;\n  lowp vec4 x_ = floor(j * ns.z);\n  lowp vec4 x = x_ * ns.x + ns.yyyy;\n  lowp vec4 y = floor(j - 7. * x_ ) * ns.x + ns.yyyy;\n  lowp vec4 h = 1. - abs(x) - abs(y);\n  lowp vec4 b0 = vec4( x.xy, y.xy );\n  lowp vec4 b1 = vec4( x.zw, y.zw );\n  lowp vec4 sh = -step(h, vec4(0));\n  lowp vec4 a0 = b0.xzyw + (floor(b0)*2.+ 1.).xzyw*sh.xxyy;\n  lowp vec4 a1 = b1.xzyw + (floor(b1)*2.+ 1.).xzyw*sh.zzww;\n  lowp vec3 p0 = vec3(a0.xy,h.x);\n  lowp vec3 p1 = vec3(a0.zw,h.y);\n  lowp vec3 p2 = vec3(a1.xy,h.z);\n  lowp vec3 p3 = vec3(a1.zw,h.w);\n  lowp vec4 norm = inversesqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  lowp vec4 m = max(.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.);\n  return .5 + 12. * dot( m * m * m, vec4( dot(p0,x0), dot(p1,x1),dot(p2,x2), dot(p3,x3) ) );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 pos = fragCoord.xy / iResolution.xy;\n    float noise = 0.0, fac = 0.5, oct = 2.0;\n    for(int i=0;i<6;i++) {\n        noise += fac * snoise(vec3(pos*oct, iTime*0.05 + float(i)*257.0));\n        oct *= 2.0;\n        fac *= 0.5;\n    }\n    noise = smoothstep(0.0, 1.0, noise);\n    vec3 color = vec3(0.0, 0.0, 0.5);\n    if (noise > 0.2) color = vec3( 25.0,  25.0, 150.0) / 255.0;\n    if (noise > 0.4) color = vec3(240.0, 240.0,  64.0) / 255.0;\n    if (noise > 0.5) color = vec3( 50.0, 220.0,  20.0) / 255.0;\n    if (noise > 0.7) color = vec3( 16.0, 160.0,   0.0) / 255.0;\n    if (noise > 0.8) color = vec3(0.5);\n    if (noise > 0.9) color = vec3(1.0);\n    \n\tfragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}