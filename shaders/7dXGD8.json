{
    "Shader": {
        "info": {
            "date": "1636899332",
            "description": "clipping successive shapes on minimum distance.  Simple.  A lot more eye candy could be done here.",
            "flags": 0,
            "hasliked": 0,
            "id": "7dXGD8",
            "likes": 11,
            "name": "2D Distance Clipping",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "kick",
            "viewed": 415
        },
        "renderpass": [
            {
                "code": "#define r(x) fract(sin(x*12.9898)* 43758.5453123)\n#define rs(x) (r(x)*2.-1.)\n#define t iTime\n#define NOCLIP false\n#define I 7\n\nfloat lineWidth;\n\n#define glow(x,f) (1. - pow(smoothstep(0.,(f)*lineWidth,abs(x)),0.2))\n\n// Misc Functions\n\nvoid pR(inout vec2 p,float a) {\n\tp=cos(a)*p+sin(a)*vec2(p.y,-p.x);\n}\n\nvec3 pal(float t) {\n\treturn (0.5+0.5*cos(3.*(1.*t+vec3(0,0.33,0.67))));\n}\n\n// 2D Functions\n\n// IQ's distance to line segment\nfloat sdSegment2( vec2 p, vec2 a, vec2 b ) {\n  vec2 pa = p-a, ba = b-a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h );\n}\n\nvec3 get2dColor( vec2 p ) {\n  vec3 color = vec3(0), c; float d, md=1e2;\n  vec4 l;\n  for( int i=0; i < I; i++ ) {\n    float a = r(float(i)+112.);\n    l = vec4(rs(a+1.),rs(a+2.1),rs(a+3.8),rs(a+6.7))*2.;\n    c = vec3(rs(a+1.),rs(a+2.1),r(a+3.8)*1.5+0.2);\n    pR(l.xy, t*l.x);\n    pR(l.zw, -t*l.z*0.1);\n    d = sdSegment2(p, l.xy, l.zw);\n    if(NOCLIP || d<md){ md = d; color += glow(d, 10.) * (0.5+0.5*cos(3.*(1.*length(l.xz)+vec3(0,0.33,0.67)))); }\n    c.z *= sin(t*(c.z*c.x*2.1+0.1))*0.5+0.7;\n    pR(c.xy,t*c.y);\n    d = dot(p-c.xy,p-c.xy) - c.z;\n    if(NOCLIP || d<md){ md = d; color += glow( d, 10. ) * (0.5+0.5*cos(3.*(1.*c.z*2.+vec3(0,0.33,0.67)))); }\n  }\n  return color;\n}\n\nvoid mainImage( out vec4 oc, in vec2 p ) {\n  float minD = min(iResolution.x, iResolution.y);\n  float maxD = max(iResolution.x, iResolution.y);\n  lineWidth = minD*0.0003;\n  vec2 st = 2.*(p-iResolution.xy*0.5) / maxD;\n\n  vec3 col = get2dColor( 2.*(st) );\n\n  oc = vec4(col*1.0,1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}