{
    "Shader": {
        "info": {
            "date": "1706415744",
            "description": "Maybe I'll be satisfied with this wallpaper.",
            "flags": 0,
            "hasliked": 0,
            "id": "cs3GWj",
            "likes": 2,
            "name": "Twin Dragons",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "been_jamming",
            "viewed": 163
        },
        "renderpass": [
            {
                "code": "#define ZOOM 2.0\n#define ITERATIONS 22\n#define MAX_DETAIL 0.80\n#define MIN_DETAIL 0.4\n#define DETAIL_CHANGE_SPEED 0.25\n#define COLOR_CHANGE_SPEED 0.5\n#define ROTATION 0.02\n#define AA 3\n#define PI 3.1415927\n\nuint lowbias32(uint x){\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nvec3 color(in vec2 fragCoord){\n    int x, y, next_x, i, bits = 0;\n    bool test;\n    float detail, min_res, angle, zoom = 1.0/sqrt(float(1<<ITERATIONS)), period0, period1, period2, period3, period4, period5, phase, coef;\n    vec3 outcolor;\n    \n    outcolor = vec3(0.0);\n    min_res = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord - iResolution.xy/2.0)/(min_res*zoom*ZOOM);\n    angle = (cos(mod(iTime*ROTATION, 2.0*PI)) + cos(mod(iTime*ROTATION/2.71828, 2.0*PI)) + cos(mod(iTime*ROTATION/PI, 2.0*PI)))*2.0*PI/3.0 + 0.3;\n    uv = (2.0 + sin(iTime*ROTATION))*mat2(vec2(cos(angle), sin(angle)), vec2(-sin(angle), cos(angle)))*uv;\n    x = int(uv.x); y = int(uv.y);\n    detail = mix(MAX_DETAIL, MIN_DETAIL, 0.5*(1.0 + sin(iTime*DETAIL_CHANGE_SPEED)));\n    coef = pow(detail, float(ITERATIONS - 1))*(1.0 - detail);\n    for(i = 0; i < ITERATIONS; i++){\n        period0 = float(lowbias32(uint(i)))/float(1<<31) + 1.0;\n        period1 = float(lowbias32(uint(i + ITERATIONS)))/float(1<<31) + 1.0;\n        period2 = float(lowbias32(uint(i + 2*ITERATIONS)))/float(1<<31) + 1.0;\n        period3 = float(lowbias32(uint(i + 3*ITERATIONS)))/float(1<<31) + 1.0;\n        period4 = float(lowbias32(uint(i + 4*ITERATIONS)))/float(1<<31) + 1.0;\n        period5 = float(lowbias32(uint(i + 5*ITERATIONS)))/float(1<<31) + 1.0;\n        if(abs(x)%2 == abs(y)%2){\n            next_x = (y - x)/2;\n            y = (-x - y)/2;\n            if(abs(x)%2 == 1){\n                outcolor += coef*vec3(cos(iTime*period0*COLOR_CHANGE_SPEED), sin(iTime*period1*COLOR_CHANGE_SPEED), cos(iTime*period2*COLOR_CHANGE_SPEED));\n            } else {\n                outcolor += coef*vec3(cos(iTime*period3*COLOR_CHANGE_SPEED), sin(iTime*period4*COLOR_CHANGE_SPEED), cos(iTime*period5*COLOR_CHANGE_SPEED));\n            }\n        } else {\n            next_x = (y - x + 1)/2;\n            y = (-x - y + 1)/2;\n        }\n        x = next_x;\n        coef /= detail;\n    }\n    return clamp(outcolor, 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    int i, j;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    for(i = 0; i < AA; i++){\n        for(j = 0; j < AA; j++){\n            fragColor += vec4(color(fragCoord - vec2(0.5) + vec2(float(i)/float(AA), float(j)/float(AA))), 1.0);\n        }\n    }\n    fragColor /= float(AA)*float(AA);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}