{
    "Shader": {
        "info": {
            "date": "1544804224",
            "description": "My attempt at rendering the Mandelbrot set as a bumpy texture. Multi-pass.\nNormal map is generated using a simple gradient, cleaned up a bit with the help of median filtering.\nThis is as close as I could get to the look I wanted, so I'm calling it done!",
            "flags": 32,
            "hasliked": 0,
            "id": "WdXGR8",
            "likes": 2,
            "name": "Mandelburn",
            "published": 3,
            "tags": [
                "fractal",
                "mandelbrot",
                "light",
                "normalmap",
                "specular",
                "bump"
            ],
            "usePreview": 0,
            "username": "Blokatt",
            "viewed": 850
        },
        "renderpass": [
            {
                "code": "/*\nMandelburn 1.0.2\nBy Blokatt (@blokatt | blokatt.net)\n15/12/18 (happy holidays!)\n\nMacros, camera stuff -> Common\nMandelbrot generation -> Buffer A\nNormal map -> Buffer B\n\nTry a different texture (Image, Buffer A)!\n\n1.0.1 (16/01/19)\n- Fixed dithering\n1.0.2 (17/01/19)\n- Fixed for loop to make it work with Microsoft Edge\n*/\n\n#define RENDER_MODE RENDER_FULL\n\nvec4 dither(vec4 col, vec2 frag, int depth){    \n    float cols = float(depth);\n    float val = texture(iChannel2, mod(frag / 8., 1.)).r;\n\treturn vec4((floor((col.rgb + val * (1. / cols)) * cols) / cols), 1.0);\n}\n\n\nfloat mandelbrot(in vec2 c){\n    //Fetch from buffer\n\treturn texture(iChannel1, c + .5).r;\n}\n\nvec3 mandelNormal(in vec2 c){    \n    //Calculate normal\n    vec3 offset = vec3(1. / iResolution.x, 0., 1. / iResolution.y);    \n    vec3 n = vec3(mandelbrot(c + offset.xy) - mandelbrot(c - offset.zy),\n                  mandelbrot(c + offset.yx) - mandelbrot(c - offset.yz),\n                  1.) ;\n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    Camera mainCam = makeCam(iTime);\n    \n    vec2 uv = fragCoord/iResolution.xy - .5;        \n    vec2 woodUV = cameraSpace((fragCoord.xy - .5 * iResolution.xy) / iResolution.y, mainCam) * BACKGROUND_SIZE;\t      \n    \n    vec2 texUV = uv;\n    uv.x *= iResolution.x / iResolution.y;   \n    \n    //Light maths\n    vec3 lightPos = vec3(vec2(.4, 0.) * rot(iTime), 0.);\n    vec3 localLightAngle = vec3(normalize(uv - lightPos.xy) + .5, 1.);\n    float dotProd = dot(mandelNormal(texUV), localLightAngle);    \n\n    vec3 n;\n    \n    #if RENDER_MODE == RENDER_FULL\n    n = (.25 + .75 * clamp(dotProd, 0., 1.)) * inversesqrt(.2 + 40. * distance(uv, lightPos.xy)) * texture(iChannel0, woodUV).rgb;\n    n *= 1. + smoothstep(1.7, 2.2, pow(1. + clamp(1. - dotProd, 0., 1.), 3.4));\n    n *= 1. - .01 * mandelbrot(texUV);\n    #endif\n    \n    #if RENDER_MODE == RENDER_NORMAL\n\tn = mandelNormal(texUV);\n    #endif\n    \n    #if RENDER_MODE == RENDER_FRACTAL\n    n = vec3(mandelbrot(texUV) * .008);  \n    #endif\n     \n    vec4 col = vec4(n, 1.);    \n    col.rgb *= vec3(1.2, 1.4, 1.5) * 1.4; //tone \n    \n    fragColor = dither(col, fragCoord, 255);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float mandelbrot(in vec2 c){\n    vec2 z = vec2(0.);\n    float f = 0.;      \n    float n = 0.;\n    \n    //Dumb hack to please Edge.\n    float j = 0.;    \n    for (float i = 0.; i < ITERATIONS; ++i){\n    \tz = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + c;\n    \tif (length(z) > 2.) break;\n        n += 1.;\n        j += 1.;\n    }\n    \n    /*\n\t\tSmoothing function shamelessly taken from: \n\t\thttps://iquilezles.org/articles/msetsmooth\n\t\tThanks, iq!\n\t*/\n    return (sqrt(max(j, (n - log2(log2(dot(z,z))) + 4.0)) / ITERATIONS) * 50.) * (1. + .15 * Y((texture(iChannel0, c * BACKGROUND_SIZE) + .15 * texture(iChannel1, c * BACKGROUND_SIZE + .5)).rgb));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    Camera mainCam = makeCam(iTime);    \n    vec2 uv = cameraSpace(((fragCoord.xy - .5 * iResolution.xy) / iResolution.y), mainCam);\t   \n    fragColor = vec4(mandelbrot(uv));\n}\n\n\n/*\nfloat mandelbrot(in vec2 c, in float maxSteps){\n    vec2 z = vec2(0.);\n    float f = 0.;      \n    float n = 0.;    \n    float i;\n    \n    for (i = 0.; i < maxSteps; ++i){\n    \tz = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + c;\n    \tif (length(z) > 2.) break;\n        n += 1.;\n    }  \n    return (sqrt(max(i, (n - log2(log2(dot(z,z))) + 4.0)) / maxSteps) * 50.) * (1. + .15 * Y((texture(iChannel0, c * BACKGROUND_SIZE) + .15 * texture(iChannel1, c * BACKGROUND_SIZE + .5)).rgb));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    Camera mainCam = makeCam(iTime);    \n    vec2 uv = cameraSpace(((fragCoord.xy - .5 * iResolution.xy) / iResolution.y), mainCam);\t   \n    fragColor = vec4(mandelbrot(uv, ITERATIONS));\n}\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define CAM_Y -0.100022\n#define CAM_X 0.748009\n#define ZOOM_BASE 5000.\n#define ZOOM_OFFSET 4000.\n#define BACKGROUND_SIZE 9000.\n#define ITERATIONS 600.\n#define MEDIAN_MIX .75\n#define START_TIME_OFFSET 105.\n\n#define RENDER_FULL 0 \n#define RENDER_NORMAL 1\n#define RENDER_FRACTAL 2\n\nstruct Camera{\n\tvec2 position;\n    float zoom;\n    float angle;\n};\n    \nCamera makeCam(in float t){    \n    Camera c; \n    t += START_TIME_OFFSET;\n    c.position.x = CAM_X + .0005 * sin(t * .025);\n    c.position.y = CAM_Y + .001 * cos(t * .05);\n    c.position *= (1. + .001 * sin(.3 - t * .001));    \n    c.zoom = 1. / (ZOOM_BASE - sin(t * .05) * ZOOM_OFFSET);\n    c.angle = -t * .25;\n    return c;\n}\n    \nmat2 rot(float a){\n\treturn mat2(cos(a), -sin(a),\n        \t\tsin(a), cos(a));\n}\n    \nvec2 cameraSpace(in vec2 p, in Camera c){\n\treturn p * rot(c.angle) * c.zoom - c.position;\n}\n\n\n//Luminance calculation (YUV)\nfloat Y(in vec3 c){\n\treturn c.r * 0.299 + c.g * 0.587 + c.b * 0.114;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define comp(a, b, c) (v[a].c > v[b].c)\n#define swap(a, b, c) temp = v[b].c; v[b].c = v[a].c; v[a].c = temp;\n#define cmpswap(x, y) if (comp(x, y, r)){ swap(x, y, r)}; if (comp(x, y, g)){ swap(x, y, g)}; if (comp(x, y, b)){ swap(x, y, b)};\n\nvec3 medianSub(in vec3[9] v){\n    float temp;  \n        \n    cmpswap(0, 1); \n    cmpswap(3, 4); \n    cmpswap(6, 7); \n    \n    cmpswap(1, 2); \n    cmpswap(4, 5); \n    cmpswap(7, 8); \n    \n    cmpswap(0, 1); \n    cmpswap(3, 4); \n    cmpswap(6, 7); \n    cmpswap(2, 5); \n    \n    cmpswap(0, 3); \n    cmpswap(1, 4); \n    cmpswap(5, 8); \n    \n    cmpswap(3, 6); \n    cmpswap(4, 7); \n    cmpswap(2, 5); \n    \n    cmpswap(0, 3); \n    cmpswap(1, 4); \n    cmpswap(5, 7); \n    cmpswap(2, 6); \n    \n    cmpswap(1, 3); \n    cmpswap(4, 6); \n    \n    cmpswap(2, 4); \n    cmpswap(5, 6); \n    \n    cmpswap(2, 3); \n    \n    return (v[4]);\n}\n\nvec3 median(in vec2 uv){    \n\tvec2 pixel = 1. / iResolution.xy;\n    vec4 o = vec4(pixel.x, 0., pixel.y, -pixel.y); \n    vec3 n[9];\n    \n    //swizzling ftw\n    n[0] = texture(iChannel0, uv - o.xz).rgb;  \n    n[1] = texture(iChannel0, uv - o.yz).rgb;\n    n[2] = texture(iChannel0, uv + o.xw).rgb;\n    n[3] = texture(iChannel0, uv - o.xy).rgb;\n    n[4] = texture(iChannel0, uv + o.xy).rgb;\n    n[5] = texture(iChannel0, uv - o.xw).rgb;\n    n[6] = texture(iChannel0, uv + o.yz).rgb;\n    n[7] = texture(iChannel0, uv + o.xz).rgb;     \n    n[8] = texture(iChannel0, uv).rgb;  \n    return medianSub(n);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = mix(texture(iChannel0, uv), vec4(median(uv), 1.), MEDIAN_MIX);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}