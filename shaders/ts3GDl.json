{
    "Shader": {
        "info": {
            "date": "1569464785",
            "description": "Ray Marching Reflection Demo",
            "flags": 0,
            "hasliked": 0,
            "id": "ts3GDl",
            "likes": 0,
            "name": "Ray Marching Reflection Demo",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "pumachen",
            "viewed": 855
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\n#define PI 3.1415927\n#define WHITE  vec4(1,1,1,1)\n#define BLACK  vec4(0,0,0,1)\n#define RED    vec4(1,0,0,1)\n#define GREEN  vec4(0,1,0,1)\n#define BLUE   vec4(0,0,1,1)\n#define YELLOW vec4(1,1,0,1)\n\n#define UP    vec3( 0, 1, 0)\n#define DOWN  vec3( 0,-1, 0)\n#define RIGHT vec3( 1, 0, 0)\n#define LEFT  vec3(-1, 0, 0)\n#define FRONT vec3( 0, 0, 1)\n#define BACK  vec3( 0, 0,-1)\n\n#define SPHERE_COUNT 2\n#define PLANE_COUNT  6\n\n#define MAX_REFLECT 5\n\n#define CLEAR_COLOR vec4(0.3,0.3,0.3,1)\n#define SPHERE_POS0 vec3(-0.8,-1.5,1.5)\n#define SPHERE_POS1 vec3(1.17,-1.5,0.83)\n\n#define MAX_STEPS 200\n#define SURFACE_DIST 0.01\n#define MAX_DEPTH (CULL_DIST * 2.)\n#define CULL_DIST 1000.\n\n////////////////////////////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////////////////////////////\n\nstruct GBuffer\n{\n    float depth;\n    vec3 pos;\n    vec3 normal;\n    vec4 color;\n};\n\nstruct Sphere\n{\n    vec3 center;\n    float radius;\n    vec4 color;\n};\n\nstruct Plane\n{\n    vec3 normal;\n    float offset;\n    vec4 color;\n};\n\nPlane CreatePlane(vec3 normal, vec3 point, vec4 color)\n{\n    vec3 norm = normalize(normal);\n    return Plane(normal, -dot(normal, point), color);\n}\n\nfloat GetDist(Sphere sph, vec3 p)\n{\n    return length(p - sph.center) - sph.radius;\n}\n\nfloat GetDist(Plane plane, vec3 p)\n{\n    return dot(p, plane.normal) + plane.offset;\n}\n\nvec3 GetNormal(Sphere sph, vec3 p)\n{\n    return normalize(p - sph.center);\n}\n\nvec3 GetNormal(Plane plane, vec3 p)\n{\n    return plane.normal;\n}\n\nvec4 GetColor(Sphere sph, vec3 p)\n{\n    return sph.color;\n}\n\nvec4 GetColor(Plane plane, vec3 p)\n{\n    return plane.color;\n}\n\nfloat GetDist(vec3 p, Sphere spheres[SPHERE_COUNT], Plane planes[PLANE_COUNT], out vec3 normal, out vec4 color)\n{\n    float min = 10000.;\n    GBuffer gbuffer;\n    for(int i = 0; i < SPHERE_COUNT; ++i)\n    {\n        float dist = GetDist(spheres[i], p);\n        if(dist < min)\n        {\n            min = dist;\n            normal = GetNormal(spheres[i], p);\n            color = GetColor(spheres[i], p);\n        }\n    }\n    \n    for(int i = 0; i < PLANE_COUNT; ++i)\n    {\n        float dist = GetDist(planes[i], p);\n        if(dist < min)\n        {\n            min = dist;\n            normal = GetNormal(planes[i], p);\n            color = GetColor(planes[i], p);\n        }\n    }\n    \n    return min;\n}\n\nGBuffer March(vec3 ro, vec3 rd, Sphere spheres[SPHERE_COUNT], Plane planes[PLANE_COUNT])\n{\n    GBuffer o;\n    o.depth = 0.;\n\n    for(int i = 0; i < MAX_STEPS; ++i)\n    {\n        o.pos = o.depth * rd + ro;\n        float dist = GetDist(o.pos, spheres, planes, o.normal, o.color);\n        o.depth += dist;\n        if(dist < SURFACE_DIST)\n            break;\n        if(o.depth > MAX_DEPTH)\n        {\n            o.depth = 10000.;\n            o.pos = o.depth * rd + ro;\n            o.normal = rd;\n            o.color = CLEAR_COLOR;\n            return o;\n        }\n    }\n    return o;\n}\n\nvec3 lambert(vec3 normal, vec3 lightDir, vec3 lightColor)\n{\n    return lightColor * max(dot(normal, lightDir), 0.);\n}\n\nSphere spheres[SPHERE_COUNT];\nPlane  planes[PLANE_COUNT];\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    spheres = Sphere[](\n    Sphere(SPHERE_POS0, 0.5, BLACK),\n    Sphere(SPHERE_POS1, 0.5, BLACK));\n    \n    planes = Plane[](\n    CreatePlane(UP   , 2. * DOWN , WHITE ),\n    CreatePlane(DOWN , 2. * UP   , BLUE  ),\n    CreatePlane(LEFT , 2. * RIGHT, RED   ),\n    CreatePlane(RIGHT, 2. * LEFT , GREEN ),\n    CreatePlane(FRONT, 2. * BACK , YELLOW),\n    CreatePlane(BACK , 2. * FRONT, BLACK ));\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.yy;\n\n    vec3 col = vec3(0);\n    vec4 mouse = iMouse / iResolution.x;\n\n    vec3 ro = vec3(0,0,-1.98);\n    vec2 rot = mouse.xy - mouse.zw;\n    rot *= step(0., mouse.z) * 2.;\n    vec3 rd = normalize(vec3(1. * uv.xy, 1));\n    vec3 sph = vec3(acos(rd.y), atan(rd.z, rd.x), 1.);\n    sph.xy -= vec2(rot.y, rot.x);\n    rd = vec3(sin(sph.x)*cos(sph.y),cos(sph.x),sin(sph.x)*sin(sph.y));\n    rd = normalize(rd);\n\n    GBuffer gbuffers[MAX_REFLECT];\n    for(int i = 0; i < MAX_REFLECT; ++i)\n    {\n        gbuffers[i] = March(ro, rd, spheres, planes);\n        if(gbuffers[i].depth <= CULL_DIST)\n        {\n            ro = gbuffers[i].pos + 0.01 * gbuffers[i].normal;\n            rd = reflect(rd, gbuffers[i].normal);\n        }\n    }\n\n    for(int i = MAX_REFLECT - 1; i > 0; --i)\n    {\n        gbuffers[i - 1].color.rgb = \n            mix(\n                gbuffers[i - 1].color.rgb, \n                gbuffers[i].color.rgb, \n                0.3 * clamp(1. - 0.1 * gbuffers[i].depth, 0., 1.));\n    }\n    col = gbuffers[0].color.rgb;\n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}