{
    "Shader": {
        "info": {
            "date": "1611220871",
            "description": "Mandlebrot",
            "flags": 0,
            "hasliked": 0,
            "id": "tlKyWw",
            "likes": 1,
            "name": "Mandlebrot set",
            "published": 3,
            "tags": [
                "mandlebrot"
            ],
            "usePreview": 0,
            "username": "travisj",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "\nconst float PI = 3.14159265359;\n\nvec3 gammaCorrect(vec3 col)\n{\n\treturn pow(col, vec3(1.0 / 2.2));\n}\n\nstruct complex\n{\n\tfloat real, imag;\n};\n\nint mandlebrot(complex c, int iterations)\n{\n\tcomplex z = c;\n\tint iters = 0;\n\tfor (int i = 0; i < iterations; i++)\n\t{\n\t\tcomplex z2;\n\t\tz2.real = z.real * z.real - z.imag * z.imag;\n\t\tz2.imag = 2.0 * z.real * z.imag;\n\t\tz2.real += c.real;\n\t\tz2.imag += c.imag;\n\t\tz = z2;\n\t\titers++;\n\t\tif (z.real * z.real + z.imag * z.imag > 4.0)\n\t\t\tbreak;\n\t}\n\n\treturn iters;\n}\n\nvec3 getColorFromMandlebrot(int mand)\n{\n\tfloat n = float(mand);\n\tfloat x = log2(n) / 0.1;\n\tvec3 col1 = vec3((1.0 + cos(2.0 * PI * x)) / 2.0);\n\n\tconst float a = 0.1;\n\n\tvec3 col2 = vec3(5.0 * sin(a * n) + 0.5, 0.5 * sin(a * n + 2.094) + 0.5, 0.5 * sin(a * n + 4.188) + 0.5);\n    \n\treturn col1 * col2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 position = (fragCoord / iResolution.xy - 0.5) * 2.0;\n    position.y *= -1.0;\n    position += iMouse.xy / iResolution.xy;\n        \n    complex c = complex(position.x, position.y);\n    \n    float time = iTime - 20.0 * floor(iTime / 20.0);\n    \n    float zoom = pow(time, time * 0.1);\n    zoom *= zoom;\n    \n    c.real /= zoom;\n    c.imag /= zoom;\n    c.real += -1.4746;\n    //c.imag += sin(time) * (1.0 / (time)) * 0.001;\n    //c.real += cos(time) * (1.0 / (time)) * 0.001;\n    \n    \n    int mand = mandlebrot(c, int(time * 10.0) + 1);\n    vec3 color = getColorFromMandlebrot(mand);\n    color = gammaCorrect(color);\n\n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}