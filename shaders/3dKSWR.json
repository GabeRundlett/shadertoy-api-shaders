{
    "Shader": {
        "info": {
            "date": "1573781794",
            "description": "Looking at 3d noise all night",
            "flags": 32,
            "hasliked": 0,
            "id": "3dKSWR",
            "likes": 28,
            "name": "Temploid",
            "published": 3,
            "tags": [
                "rock"
            ],
            "usePreview": 1,
            "username": "leon",
            "viewed": 723
        },
        "renderpass": [
            {
                "code": "\n// everything is in tab Buffer A\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// Temploid\n// Leon Denise aka ponk\n// Cookie Collective\n// 2019/11/12\n// Made with the work of the ShaderToy community\n\n\nconst float PI = 3.14159;\nconst float TAU = 6.28318;\nconst float epsilon = .0001;\nconst float range = 10.;\n#define repeat(p,r) (mod(p,r)-r/2.)\nmat2 rot (float a) { float c=cos(a), s=sin(a); return mat2(c,s,-s,c); }\nvec3 look (vec3 eye, vec3 target, vec2 anchor, float fov) {\n    vec3 forward = normalize(target-eye);\n    vec3 right = normalize(cross(forward, vec3(0,1,0)));\n    vec3 up = normalize(cross(right, forward));\n    return normalize(forward * fov + right * anchor.x + up * anchor.y);\n}\nfloat random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\nfloat noise( in vec3 x ) {\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    vec2 uv = (i.xy+vec2(37.0,17.0)*i.z) + f.xy;\n    vec2 rg = textureLod( iChannel1, (uv+0.5)/256.0, 0.0).yx;\n    return mix( rg.x, rg.y, f.z );\n}\n\nfloat fbm (vec3 p) {\n    float amplitude = 0.5;\n    float result = 0.0;\n    for (int index = 1; index <= 5; ++index) {\n        result += sin(noise(p / amplitude)*TAU*2.) * amplitude;\n        amplitude /= 3.;\n    }\n    return result;\n}\n\nfloat map (vec3 pos) {\n    float salty = fbm(pos*4.0)*0.05;\n    float thin = .3;\n    pos.xz = repeat(pos.xz,1.);\n    return length(pos.xz)-salty-thin;\n}\n\nvec3 getNormal ( vec3 pos ) {\n    vec3 n = vec3(0.0);\n    for( int i=0; i<4; i++ ) {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e);\n    }\n    return normalize(n);\n}\n\nfloat getLight (vec3 normal, vec3 light, float spec, vec3 pos, float rangeMin, float rangeMax) {\n    return pow(clamp(dot(normal, normalize(light-pos)), 0., 1.), spec)\n        * smoothstep(rangeMax,rangeMin,length(light-pos));\n}\n\nvec3 getColor ( vec3 pos ) {\n    vec3 normal = getNormal(pos);\n    vec3 color = vec3(0);\n    color += vec3(0.5) * clamp(dot(normal, normalize(vec3(0.5,2,1)))*.5+.5, 0.0, 1.0);\n    color += vec3(0.4,.5,.5) * clamp(dot(normal, normalize(vec3(-.5,1,-1)))*.5+.5, 0.0, 1.0);\n    color = smoothstep(0.3,0.9,color);\n    pos.z = repeat(pos.z+iTime, range);\n    color += 2.*vec3(.9,.7,.5) * getLight(normal, vec3(0,0,0.), 2., pos, 1., 2.);\n    return color;\n}\n\nvec4 raymarch (vec3 eye, vec3 ray, float dither) {\n    const float count = 20.;\n    float total = dither * .01;\n    for (float index = count; index > 0.0; --index) {\n        float dist = map(eye + ray * total);\n        if (dist < total * .001) {\n            return vec4(eye + ray * total, index / count);\n            break;\n        }\n        total += dist * (0.7 + 0.1 * dither);\n    }\n    return vec4(eye + ray * total, 0.);\n}\n\n\nvoid mainImage( out vec4 color, in vec2 coord ) {\n    color = vec4(0,0,0,1);\n    vec2 uv = (coord.xy-0.5*iResolution.xy)/iResolution.y;\n    float z = floor(iTime/range);\n    float x = (random(vec2(z+1.54))*2.-1.);\n    float y = (random(vec2(z+8.24))*2.-1.)*.5;\n    vec3 eye = vec3(0,y,z);\n    vec3 at = vec3(x,0,z+2.*random(vec2(z)));\n    float dither = random(uv+fract(iTime));\n    vec3 ray = look(eye, at, uv, .5 + random(vec2(z+85.2)));\n    vec4 result = raymarch(eye, ray, dither);\n    color.rgb += result.w * getColor(result.xyz);\n    color.rgb = clamp(color.rgb,0.,1.);\n    color = mix(color, texture(iChannel0, coord.xy/iResolution.xy), clamp(1.0-iTimeDelta,0.,1.));\n}\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}