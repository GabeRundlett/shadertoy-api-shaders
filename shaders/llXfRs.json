{
    "Shader": {
        "info": {
            "date": "1512898738",
            "description": "By special request",
            "flags": 0,
            "hasliked": 0,
            "id": "llXfRs",
            "likes": 16,
            "name": "Sunbeams for Shane",
            "published": 3,
            "tags": [
                "waves",
                "clouds",
                "rays",
                "crepuscular"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 1263
        },
        "renderpass": [
            {
                "code": "// \"Sunbeams for Shane\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// By special request - so many arbitrary parameters (mouseable)\n\nfloat Noisefv2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, dispCloud;\nfloat tCur, dstFar, dstWat;\nconst float pi = 3.14159;\n\nfloat WaveHt (vec2 p)\n{\n  mat2 qRot = mat2 (0.8, -0.6, 0.6, 0.8);\n  vec4 t4, v4;\n  vec2 q, t, tw;\n  float wFreq, wAmp, h;\n  q = 0.5 * p + vec2 (0., tCur);\n  h = 0.2 * sin (q.y) + 0.15 * sin (dot (q, vec2 (0.1, 1.2))) +\n     0.1 * sin (dot (q, vec2 (-0.2, 1.4)));\n  q = p;\n  wFreq = 0.5;\n  wAmp = 0.03;\n  tw = 0.1 * tCur * vec2 (1., -1.);\n  for (int j = 0; j < 4; j ++) {\n    q *= qRot;\n    t4 = q.xyxy * wFreq + tw.xxyy;\n    t = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * t.xxyy - 1.;\n    v4 = (1. - abs (sin (t4))) * (abs (sin (t4)) + abs (cos (t4)));\n    t = 1. - sqrt (v4.xz * v4.yw);\n    t *= t;\n    h += wAmp * dot (t, t);\n    wFreq *= 2.;\n    wAmp *= 0.5;\n  }\n  return h;\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 50; j ++) {\n    p = ro + s * rd;\n    h = p.y - WaveHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (6., h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 6; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - WaveHt (p.xz));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e;\n  e = vec2 (max (0.1, 5e-5 * d * d), 0.);\n  return normalize (vec3 (WaveHt (p.xz) - vec2 (WaveHt (p.xz + e.xy), WaveHt (p.xz + e.yx)), e.x).xzy);\n}\n\nvec3 CloudCol (vec3 ro, vec3 rd)\n{\n  vec3 p, q, cSun, clCol, col, colS;\n  float fCloud, cloudLo, cloudRngI, atFac, colSum, attSum, s, att, a, sd, ds;\n  const int nLay = 60;\n  cloudLo = 300.;  cloudRngI = 1./300.;  atFac = 0.015;\n  fCloud = 0.7;\n  colS = mix (vec3 (0.7, 0.75, 1.), vec3 (0.4, 0.38, 0.38), 1. - max (rd.y, 0.));\n  if (rd.y > 0.) {\n    fCloud = clamp (fCloud, 0., 1.);\n    p = ro + dispCloud;\n    p.xz += (cloudLo - p.y) * rd.xz / rd.y;\n    p.y = cloudLo;\n    ds = 1. / (cloudRngI * rd.y * (2. - rd.y) * float (nLay));\n    colSum = 0.;\n    attSum = 0.;\n    s = 0.;  \n    att = 0.;\n    for (int j = 0; j < nLay; j ++) {\n      q = p + s * rd;\n      att += atFac * max (fCloud - Fbm3 (vec3 (3., 4., 3.) * 0.002 * q), 0.);\n      a = (1. - attSum) * att;\n      colSum += a * (q.y - cloudLo) * cloudRngI;\n      attSum += a;\n      s += ds;\n      if (attSum > 0.95) break;\n    }\n    sd = max (dot (rd, sunDir), 0.);\n    colSum += min ((1. - attSum) * pow (sd, 3.), 1.);\n    clCol = vec3 (1., 0.95, 0.9) * (2.5 * colSum + 0.05);\n    cSun = 0.4 * vec3 (1., 0.9, 0.8) * (pow (sd, 8.) + 0.5 * pow (sd, 512.));\n    col = clamp (mix (colS + cSun, clCol, attSum), 0., 1.);\n    col = mix (col, colS, pow (1. - rd.y, 32.));\n  } else col = colS;\n  return col;\n}\n\nfloat CloudDens (vec3 ro, vec3 rd)\n{\n  vec3 p, q;\n  float fCloud, cloudLo, cloudRngI, atFac,  attSum, s, att, a, sd, ds;\n  const int nLay = 60;\n  cloudLo = 300.;  cloudRngI = 1./300.;  atFac = 0.015;\n  fCloud = 0.7;\n  if (rd.y > 0.) {\n    fCloud = clamp (fCloud, 0., 1.);\n    sd = max (dot (rd, sunDir), 0.);\n    p = ro + dispCloud;\n    p.xz += (cloudLo - p.y) * rd.xz / rd.y;\n    p.y = cloudLo;\n    ds = 1. / (cloudRngI * rd.y * (2. - rd.y) * float (nLay));\n    attSum = 0.;\n    s = 0.;  \n    att = 0.;\n    for (int j = 0; j < nLay; j += 5) {\n      q = p + s * rd;\n      att += atFac * max (fCloud - Fbm3 (vec3 (3., 4., 3.) * 0.002 * q), 0.);\n      a = (1. - attSum) * att;\n      attSum += a;\n      s += ds;\n      if (attSum > 0.95) break;\n    }\n  } else attSum = 0.;\n  return clamp (1. - attSum, 0., 1.);\n}\n\nfloat GRayDens (vec3 ro, vec3 rd)\n{\n  vec3 p, q;\n  float d, s, ds, sd, gDens;\n  sd = max (dot (rd, sunDir), 0.);\n  sd *= 0.15 * sd;\n  gDens = 0.;\n  if (sd > 0.) {\n    p = ro + 100. * rd / max (rd.y, 0.05);\n    ds = 4. / max (rd.y, 0.05);\n    s = 0.;\n    for (int j = 0; j < 24; j ++) {\n      q = p + s * rd;\n      gDens += sd * (1. - gDens) * smoothstep (0.8, 1., CloudDens (q, sunDir));\n      s += ds;\n      if (q.y > 400. || gDens > 0.95) break;\n    }\n  }\n  return gDens;\n}\n\nvec3 WaveCol (vec3 ro, vec3 rd, vec3 vn)\n{\n  vec3 col;\n  float sd;\n  sd = max (dot (rd, sunDir), 0.);\n  col = vec3 (0.15, 0.15, 0.2) * (0.75 * ro.y + 0.35) +\n     0.5 * CloudDens (ro + 300. * rd, rd) * (mix (vec3 (0., 0.1, 0.2), vec3 (0.2, 0.2, 0.3), rd.y) +\n     (1. - rd.y) * vec3 (0.6, 0.6, 0.5) * (pow (sd, 4.) + 2. * pow (sd, 256.)));\n  col += vec3 (0.15) * GRayDens (ro, sunDir) * smoothstep (-0.2, 0., dot (vn, sunDir));\n  col = mix (col, vec3 (0.3, 0.4, 0.5) + vec3 (0.2, 0.1, 0.) * pow (sd, 4.),\n     1. - exp (- pow (0.005 * dstWat, 1.5)));\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  dispCloud = tCur * vec3 (40., 0., 10.);\n  if (rd.y < 0.) dstWat = WaveRay (ro, rd);\n  else dstWat = dstFar;\n  if (dstWat >= dstFar) {\n    col = CloudCol (ro, rd) + 0.9 * vec3 (1., 0.8, 0.6) * GRayDens (ro, rd);\n  } else {\n    ro += dstWat * rd;\n    vn = WaveNf (ro, dstWat);\n    col = WaveCol (ro, reflect (rd, VaryNf (32. * ro, vn, 0.05)), vn);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.7 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.2 * pi, 0.2 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vec3 (0., 10., 0.);\n  rd = vuMat * normalize (vec3 (uv, 2.4));\n  sunDir = normalize (vec3 (0.1, 0.25, 1.));\n  dstFar = 300.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}