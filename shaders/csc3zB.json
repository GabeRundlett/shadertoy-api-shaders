{
    "Shader": {
        "info": {
            "date": "1677436947",
            "description": "A simple tile-based shader",
            "flags": 0,
            "hasliked": 0,
            "id": "csc3zB",
            "likes": 5,
            "name": "Twists",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 151
        },
        "renderpass": [
            {
                "code": "#define TENSION (tanh(sin(iTime*0.75)*5.)*0.5+0.5)\n\n#define PI 3.1415926535\n\nfloat hash21(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdCubicBezier(vec2 uv, vec2 s, vec2 c1, vec2 c2, vec2 e, float res)\n{\n    float r = 1e20;\n    float st = 1./res;\n    vec2 prev = s;\n    for(float i = 0.; i < 1.; i += st)\n    {\n        float j = 1.-i;\n        vec2 point = j*j*j*s+3.*j*j*i*c1+3.*j*i*i*c2+i*i*i*e;\n        r = min(r, sdSegment(uv, prev, point));\n        prev = point;\n    }\n    r = min(r, sdSegment(uv, prev, e));\n    return r;\n}\n\nfloat map(vec2 uv)\n{\n    vec2 fp = floor(uv);\n    uv = abs(fract(uv)-0.5);\n    vec2 scale = vec2(0.25, 0.5);\n    return (hash21(fp) < 0.2? sdCubicBezier(uv, vec2(-1)*scale, vec2(-1, -1.+TENSION)*scale, vec2(1, 1.-TENSION)*scale, vec2(1)*scale, 20.) :\n                              abs(uv.x-scale.x))-0.03;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    vec4 m = vec4((iMouse.xy*2.-iResolution.xy)/iResolution.y, iMouse.zw);\n    float px = 1.5/iResolution.y;\n\n    vec3 col = vec3(0.259,0.580,0.976)*(0.2+smoothstep(px*3., -px*3., map(uv*2.+iTime*0.2)));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}