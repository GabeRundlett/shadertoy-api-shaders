{
    "Shader": {
        "info": {
            "date": "1614558792",
            "description": "ciudad y autos v1",
            "flags": 0,
            "hasliked": 0,
            "id": "ttGBRy",
            "likes": 2,
            "name": "ciudad y autos v1",
            "published": 3,
            "tags": [
                "ciudadyautosv1"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 225
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1-\n\n#define MAX_STEPS 100\n#define MAX_DIST 250.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\n\nfloat iTimeGlobal;\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n\n\n\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n\t{ vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r; }\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\n//----------oPeraciones de Repeticion\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n///------------------------------------\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{\n    float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n\n        \n//Banished by Dave_Hoskins  \nfloat RoofTecho( vec3 p, vec3 medida)\n{\n\tvec3 b = medida;\n\tp.x = abs(p.x);\n  \tp.y += p.x*.75;\n\treturn length(max(abs(p)-b,0.0))-.03;\n}\n\n\n//----------------\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,  vec2(12.9898,78.233)))* 43758.5453123);\n}\n\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp=p;\n    res = vec3(9999.0, -1.0,-1.0);\n   \n    float planeDist1 = p.y+10.5;  //piso inf\n    \n    \n    p.x=opRep1D( p.x, 50.0 );\n    p.z=opRep1D( p.z, 50.0 );\n    \n   \n    float altocasa=5.0;\n    vec3 medidaCasa= vec3(10.0,altocasa,10.0);\n    float db1=sdBox( p-vec3(0.0,1.0,0.0) , medidaCasa +vec3(0.2,0.,0.1));\n    float dbPuertaA=sdBox( p-vec3(0.0,0.0,-10.0) , vec3(3.0,4.0,1.0 ) );\n    float dbPuertaB=sdBox( p-vec3(0.0,0.0,-10.0) , vec3(3.0,4.0,0.5 ) );\n    float dbSuelo=sdBox( p-vec3(0.0,-5.0,0.0) , vec3(15.0,0.5,15.0 ) );\n    float dbCalle=sdBox( p-vec3(0.0,-6.0,0.0) , vec3(25.0,0.5,25.0 ) );\n    \n    \n    float techo1=RoofTecho(p-vec3(0.0,10.0,.0), medidaCasa );\n    float techo2=RoofTecho(p-vec3(0.0,15.0,.0), vec3(10.0,0.5,11.0) );\n      \n    \n    techo1= unionSDF(db1, techo1);\n    techo1=differenceSDF(techo1,dbPuertaA);\n    \n   vec3 p2=pp;\n    p2.z=mod(p2.z+iTime*20.0, 40.0);\n   float dauto1=sdBox( p2-vec3(-20.0,0.5,10.0) ,vec3(2.5,1.,5.0));   //auto\n   float dauto2=sdBox( p2-vec3(-20.0,2.0,10.0) ,vec3(2.5,1.,2.0));  //superior\n   \n   float dauto3=sdBox( p2-vec3(-18.0,-0.5,10.0) ,vec3(0.5,1.5,5.0)); //llanta\n   float dauto4=sdBox( p2-vec3(-22.0,-0.5,10.0) ,vec3(0.5,1.5,5.0)); //llanta\n   float dauto5=sdBox( p2-vec3(-20.0,2.0,10.0) ,vec3(2.0,0.8,2.2));  //vidrio\n   \n    res =opU3(res, vec3(techo1,13.0,-1.0)); \n   res =opU3(res, vec3(techo2,14.0,-1.0)); \n   res =opU3(res, vec3(dbPuertaB,16.0,-1.0)); \n   res =opU3(res, vec3(dbSuelo,12.0,-1.0)); \n   res =opU3(res, vec3(dbCalle,1.0,-1.0)); \n    \n   res =opU3(res, vec3(dauto1,3.0,-1.0)); \n   res =opU3(res, vec3(dauto2,2.0,-1.0)); \n   res =opU3(res, vec3(dauto3,0.0,-1.0)); \n   res =opU3(res, vec3(dauto4,0.0,-1.0)); \n   res =opU3(res, vec3(dauto5,4.0,-1.0)); \n    \n    \n    //res =opU3(res, vec3(1.0,0.0,MATERIAL_NO)); \n    //return (dist, id_color, id_material)\n    return res;\n}\n\n\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro, vec3 col) \n{\n    vec3 l = lp - p;\n   \n    \n    float dist = max(length(l), 0.01);\n    float atten = min(1./(1. + dist*0.5), 0.2);\n    l /= dist;\n    \n    vec3 n = normal;\n   \tvec3 r = reflect(-l, n);\n    \n    float dif = clamp(dot(l, n), 0.0, 1.0);\n    \n    float spe = pow(clamp(dot(r, -rd), 0.0, 1.0), 8.0);\n    float fre = pow(clamp(1.0 + dot(n, rd), 0.0, 1.0), 2.0);\n    float dom = smoothstep(-1.0, 1.0, r.y);\n    \n    vec3 lin = vec3(0.2);\n    lin += 1.0*dif*vec3(1, .97, .85);\n    lin += 2.5*spe*vec3(1, .97, .85)*dif;\n    lin += 2.5*fre*vec3(1);\n    lin += 0.5*dom*col;\n   \n    return lin*atten*col*2.0;\n}\n\n\n\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    \n    mObj.hitbln =false;\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        \n        if ( abs(dS.x)<MIN_DIST)\n        { mObj.hitbln = true; break; }\n        \n        \n        if(dO>MAX_DIST)\n        { mObj.hitbln = false;break; }\n        \n        dO += dS.x;\n        marchCount++;\n    }\n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n//----------------------------------------------------\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    float intensity=1.0;\n     vec3 result;\n     result = lightingv3( nor, p, plight_pos,  rd,ro,colobj);\n    \n    if (mObj.blnShadow==true)\n    {\n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n        \n     }\n    else\n    {  return result; }\n}\n\n//------------------------------------------------\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//Created by dr2 in 2016-01-24\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\n\nvec3 sky(vec3 rd, vec3 L)\n{\n  return vec3(1.-rd.y,0.9,1.+(rd.y-dot(rd,L))*.5)*(0.4*dot(rd,L)+0.6);\n}\n\n//------------------------------------------------\nvec3 getMaterial( vec3 pp, float id_material)\n{\n  vec3 col=vec3(1.0);\n  vec3 p=pp;\n    \n    \n    if(id_material== 1.0 )\n    {\n        float c = 0.8+mod((floor(mObj.p.x) + floor(mObj.p.z) + floor(mObj.p.y)), 2.0);\n        return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 )*c;\n    }\n    \n\n    if (id_material==4.0)\n    { // nothing hit: background gradient\n     return vec3(0.2, 0.2, 0.2) * (-mObj.uv.y+1.2);\n    }\n    \n    if (id_material==5.0)\n    {\n        float escala=0.25;\n    \tfloat d = mod(floor(p.x*escala)+floor(p.z*escala*2.0),2.0);\n        return vec3( clamp(d,0.0,1.0) );\n    }\n    \n    \n    if (id_material==6.0)\n    {\n     //float cc=mObj.id_color;\n     float cc=10.0;\n     float nMol=10.0;\n     return   HsvToRgb (vec3 (mod (1.7 * cc / float (nMol), 1.), 1. - 0.3 * mod (cc, 3.), 1. - 0.3 * mod (cc, 2.))); \n            \n    }\n}\n//-------------------------------------------------\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n    if (id_color<100)\n\t\t{ colobj= getColor(int( id_color)); }\n    \n   \n\n    if (id_material>-1.0 && id_color==-1)\n        { \n            colobj=vec3(0.5);\n            colobj*=getMaterial(p, id_material); \n            return colobj;\n        }\n    return colobj;\n}\n\n// Thanks to Baron for this\nvec3 getSkyCol(vec3 rd) \n{\n    float t = (rd.x + 0.5) / 2.0;\n    return vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n}\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float t;\n    t=mod(iTime*10.0,1000.0);\n    iTimeGlobal=t;\n    \n    itime=t;\n    \n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;    \n    vec3 dir = normalize(vec3(uv, -2.));\n    \n    \n    float t1=mod(iTime, 3.0);\n    float t2=mod(iTime, 6.0);\n    \n    vec3 camera = vec3(-20., 10., -25.+iTime*10.0);\n    if (t1<t2)\n    {\n         camera = vec3(-20., 20., -25.);\n        camera.xz+= rotatev2(camera.xz, iTime);\n    }\n    \n       \n    vec4 mouse = qmouse(iMouse, iResolution, iTime, 0.01);\n    dir = rotate(dir, mouse);\n   \n    mObj.uv=uv;\n    mObj.blnShadow=false;\n    //mObj.blnShadow=true;\n        \n \tlight_pos1= vec3(10.0, 10.0, 10.0 );  light_color1 = vec3( 1.0 );\n \tlight_pos2= vec3( 0.0, 0.0, 20.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n\n    vec3 ro=camera; vec3 rd=dir;\n    rd.xz= rotatev2(rd.xz, radians(180.0));\n    light_pos1+=ro; light_pos2+=ro;\n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;  mObj.ro=ro;\n       float d = RayMarch(ro, rd);\n    Obj=mObj;\n     vec3 p = (ro + rd * d ); \n    \n    if(mObj.hitbln) \n    {\n   \n\n        mObj.p=p;\n        mObj.dist =d;\n        vec3 nor=mObj.normal;\n\n        vec3 colobj;\n\n        colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n\n\n        float dif1=1.0;\n        vec3 result;\n        result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n        result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n         result/=1.25;\n        col=result;\n\n\n        //sugerencia por dean_the_coder,\n        //col *= 1.0 - pow(d / 100.0, 1.5);\n\n        col *= 1.0 - pow(d /(MAX_DIST) , 2.5);    \n        col = pow(col, vec3(0.454545));  \n        \n    \n    }\n    //else if(d>MAX_DIST)\n   vec3 sky = getSkyCol(rd);\n   col = mix(col, sky, smoothstep(0., .99, d/MAX_DIST));\n   \n    \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n    bool hitbln;\n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1) //30\n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n\n\n\n\n//https://www.shadertoy.com/view/3stXR2 \n\n#define M_PI   3.1415926\n#define M_2_PI 6.2831853\n#define M_PI_2 1.5707963\n\n/* quaternions */\n\nvec4 qmult(vec4 p, vec4 q) {\n    vec3 pv = p.xyz, qv = q.xyz;\n    return vec4(p.w * qv + q.w * pv + cross(pv, qv), p.w * q.w - dot(pv, qv));\n}\n\nvec4 qrotor(vec3 axis, float phi) {\n    return vec4(sin(phi*0.5) * axis, cos(phi*0.5));\n}\n\nvec4 qmouse(vec4 iMouse, vec3 iResolution, float iTime, float initRotation) {\n    vec2 init = vec2(0.5 + 0.25*initRotation * sin(iTime), 0.5 + initRotation * cos(iTime));\n    vec2 mouse = mix(init, iMouse.xy / iResolution.xy, step(0.0027, iMouse.y));\n    vec4 rotY = qrotor(vec3(0., 1., 0.), M_PI - M_2_PI * mouse.x);\n    vec4 rotX = qrotor(vec3(1., 0., 0.), M_PI * mouse.y - M_PI_2);\n    return qmult(rotY, rotX);\n}\n\nvec3 rotate(vec3 point, vec4 qrotor) {\n    vec3 rv = qrotor.xyz;\n    return qmult(qrotor, vec4(point * qrotor.w - cross(point, rv), dot(point, rv))).xyz;\n}\n\nvec4 slerp(vec3 u0, vec3 u1, float t) {\n    return qrotor(cross(u0, u1), t * acos(dot(u0, u1)));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}