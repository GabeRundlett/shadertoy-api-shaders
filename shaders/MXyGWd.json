{
    "Shader": {
        "info": {
            "date": "1718395180",
            "description": "shader",
            "flags": 0,
            "hasliked": 0,
            "id": "MXyGWd",
            "likes": 11,
            "name": "flower of fractal",
            "published": 3,
            "tags": [
                "fractal",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 413
        },
        "renderpass": [
            {
                "code": "/*originals from gaz fractal 62*/\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(25,20,21))*2.5+.5)\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nfloat hash( ivec3 p )    // this hash is not production ready, please\n{                        // replace this by something better\n\n    // 3D -> 1D\n    int n = p.x*3 + p.y*113 + p.z*311;\n\n    // 1D hash by Hugo Elias\n\tn = (n << 13) ^ n;\n    n = n * (n * n * 15731 + 789221) + 1376312589;\n    return float( n & ivec3(0x0fffffff))/float(0x0fffffff);\n}\n\nfloat noise( in vec3 x )\n{\n    ivec3 i = ivec3(floor(x));\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+ivec3(0,0,0)), \n                        hash(i+ivec3(1,0,0)),f.x),\n                   mix( hash(i+ivec3(0,1,0)), \n                        hash(i+ivec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+ivec3(0,0,1)), \n                        hash(i+ivec3(1,0,1)),f.x),\n                   mix( hash(i+ivec3(0,1,1)), \n                        hash(i+ivec3(1,1,1)),f.x),f.y),f.z);\n}\n\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n      vec2 uv = ( C - .5*iResolution.xy ) / iResolution.y;\n       float t2 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .51)) * 2.2;\nfloat si = sin(t2);\nfloat co = cos(t2);\nmat2 ma = mat2(co, si, -si, co);\n    vec3 n1,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n     float c2 = noise(n1);\n        n1=g*d+c2;\n       \n        n1.xy*=-ma;\n         vec4 q=vec4(n1,sin(iTime*.15)*.5);\n         q.xy*=ma;\n        for(float j=0.;j++<4.;){\n           for(float k=0.;k++<3.;){\n           \n           n1.x=cos(q.w*i+j);\n            n1.y*=cos(q.x*i+j*q.z);\n           \n        }\n        }\n     \n        a=20.;\n        n1=mod(n1-a,a*2.)-a;\n        s=3.+c2;\n      \n   \n        for(int i=0;i++<8;){\n            n1=.3-abs(n1);\n           \n            n1.x<n1.z?n1=n1.zyx:n1;\n            n1.z<n1.y?n1=n1.xzy:n1;\n            n1.y<n1.x?n1=n1.zyx:n1;\n             \n          \n        \n            q=abs(q);\n            \n             \n            q=q.x<q.y?q.zwxy:q.zwyx;\n            q=q.z<q.y?q.xyzw:q.ywxz;\n               \n           \n       \n        \n         \n            s*=e=1.4+sin(iTime*.234)*.1;\n            n1=abs(n1)*e-\n                vec3(\n                    q.w+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    120.,\n                    8.+cos(iTime*.5)*5.\n                 );\n         }\n   \n         g+=e=length(n1.xy)/s;\n        \n    }\n    \n   \n  \n      uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    O+= vec4(happy_star(uv, anim) * vec3(0.05,1.2,0.15)*0.1, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}