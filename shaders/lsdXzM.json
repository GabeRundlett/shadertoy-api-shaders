{
    "Shader": {
        "info": {
            "date": "1458488422",
            "description": "Explore a modern version of Venice (Canaletto meets Bauhaus)",
            "flags": 32,
            "hasliked": 0,
            "id": "lsdXzM",
            "likes": 25,
            "name": "Canal City",
            "published": 3,
            "tags": [
                "reflection",
                "sunset",
                "projection",
                "cityscape",
                "pannini"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 1260
        },
        "renderpass": [
            {
                "code": "// \"Canal City\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  Vertical slider controls flight speed.\n  Horizontal sliders control zoom and Pannini factor (see \"Pannini's Rotunda\"\n    for details; note that here the transformation is applied to both x and y\n    coordinates).\n  Look around using the mouse (centered marker shows forward direction).\n  Buildings are individually numbered (zoom in to read, there are thousands\n    of them).\n  Each restart is from a different location.\n*/\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + cHashA4.xy) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat IFbm1 (float p)\n{\n  float s, a;\n  p *= 5.;\n  s = 0.;\n  a = 10.;\n  for (int j = 0; j < 4; j ++) {\n    s += floor (a * Noiseff (p));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return 0.1 * s;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrShCylDf (vec3 p, float rIn, float rEx, float h)\n{\n  float s;\n  s = length (p.xy);\n  return max (max (s - rEx, rIn - s), abs (p.z) - h);\n}\n\nfloat PrFlatCylIDf (vec3 p, float w, float r)\n{\n  p.x -= clamp (p.x, - w, w);\n  return length (p.xy) - r;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float txRow = 64.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nmat3 vuMat;\nvec3 vuPos, qHit, sunDir;\nvec2 iqBlk;\nfloat dstFar, tCur, flrHt;\nint idObj;\nconst int idBldg = 1, idArc = 2, idCan = 3, idPlaza = 4, idBrdg = 5, idCurb = 6,\n   idPost = 7, idBoat = 8, idLamp = 9, idBLamp = 10, idFLamp = 11, idPLamp = 12;\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, skyCol, sunCol, p;\n  float ds, fd, att, attSum, d, sd;\n  if (rd.y >= 0.) {\n    p = rd * (200. - ro.y) / max (rd.y, 0.0001);\n    ds = 0.1 * sqrt (length (p));\n    p += ro;\n    fd = 0.002 / (smoothstep (0., 10., ds) + 0.1);\n    p.xz *= fd;\n    p.xz += 0.1 * tCur;\n    att = Fbm2 (p.xz);\n    attSum = att;\n    d = fd;\n    ds *= fd;\n    for (int j = 0; j < 4; j ++) {\n      attSum += Fbm2 (p.xz + d * sunDir.xz);\n      d += ds;\n    }\n    attSum *= 0.3;\n    att *= 0.3;\n    sd = clamp (dot (sunDir, rd), 0., 1.);\n    skyCol = mix (vec3 (0.7, 1., 1.), vec3 (1., 0.4, 0.1), 0.25 + 0.75 * sd);\n    sunCol = vec3 (1., 0.8, 0.7) * pow (sd, 1024.) +\n       vec3 (1., 0.4, 0.2) * pow (sd, 256.);\n    col = mix (vec3 (0.5, 0.75, 1.), skyCol, exp (-2. * (3. - sd) *\n       max (rd.y - 0.1, 0.))) + 0.3 * sunCol;\n    attSum = 1. - smoothstep (1., 9., attSum);\n    col = mix (vec3 (0.4, 0., 0.2), mix (col, vec3 (0.3, 0.3, 0.3), att), attSum) +\n       vec3 (1., 0.4, 0.) * pow (attSum * att, 3.) * (pow (sd, 10.) + 0.5);\n  } else col = vec3 (0.2);\n  return col;\n}\n\nfloat BldgDf (vec3 p)\n{\n  vec3 q, qq;\n  vec2 ip;\n  float dMin, d, db, bWid, bHt, arWid, nFlr, nAr;\n  arWid = 0.5 * flrHt;\n  dMin = dstFar;\n  ip = floor (p.xz);\n  nAr = 2. * floor (3.9 + 4.9 * Hashfv2 (11. * ip)) + 1.;\n  bWid = nAr * arWid;\n  nFlr = floor (2. + 3. * Hashfv2 (13. * ip));\n  bHt = nFlr * flrHt;\n  q = p;  q.xz = fract (q.xz) - vec2 (0.5);  q.y -= 0.5 * flrHt;\n  qq = q;\n  d = PrBoxDf (qq, vec3 (0.5 * bWid, 0.55 * flrHt, 0.5 * bWid));\n  qq.y -= 0.51 * flrHt;\n  d = max (d, - PrBoxDf (qq, vec3 (0.5 * bWid - 0.1 * arWid, 0.05 * flrHt,\n     0.5 * bWid - 0.1 * arWid)));\n  qq = q;  qq.y -= -0.17 * flrHt;\n  qq.x = mod (qq.x + 0.5 * arWid, arWid) - 0.5 * arWid;\n  db = PrFlatCylIDf (qq.yxz, 0.3 * flrHt, 0.32 * arWid);\n  qq = q;  qq.y -= -0.17 * flrHt;\n  qq.z = mod (qq.z + 0.5 * arWid, arWid) - 0.5 * arWid;\n  db = max (min (db, PrFlatCylIDf (qq.yzx, 0.3 * flrHt, 0.32 * arWid)),\n     - q.y - 0.8 * flrHt);\n  d = max (d, - db);\n  if (d < dMin) { dMin = d;  idObj = idArc;  qHit = q;  iqBlk = ip; }\n  if (nFlr > 1.) {\n    qq = q;    qq.y -= 0.5 * flrHt;\n    bWid -= 2. * arWid;\n    d = PrBoxDf (qq, vec3 (0.5 * bWid, 1.05 * flrHt, 0.5 * bWid));\n    qq.y -= 1.01 * flrHt;\n    d = max (d, - PrBoxDf (qq, vec3 (0.5 * bWid - 0.1 * arWid, 0.05 * flrHt,\n       0.5 * bWid - 0.1 * arWid)));\n    if (d < dMin) { dMin = d;  idObj = idBldg;  qHit = q;  iqBlk = ip; }\n  }\n  if (nFlr > 2.) {\n    qq = q;    qq.y -= 0.5 * (flrHt + bHt);\n    bWid -= 2. * arWid;\n    d = PrBoxDf (qq, vec3 (0.5 * bWid, 0.5 * (bHt - 2. * flrHt) + 0.05 * flrHt,\n       0.5 * bWid));\n    qq.y -= 0.5 * (bHt - 2. * flrHt) + 0.01 * flrHt;\n    d = max (d, - PrBoxDf (qq, vec3 (0.5 * bWid - 0.1 * arWid, 0.05 * flrHt,\n       0.5 * bWid - 0.1 * arWid)));\n    if (d < dMin) { dMin = d;  idObj = idBldg;  qHit = q;  iqBlk = ip; }\n  }\n  return dMin;\n}\n\nfloat BldRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 srd, dda, h;\n  float dHit, d;\n  srd = 1. - 2. * step (0., rd.xz);\n  dda = - srd / (rd.xz + 0.0001);\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + dHit * rd;\n    h = fract (dda * fract (srd * p.xz));\n    d = BldgDf (p);\n    dHit += min (d, 0.1 + max (0., min (h.x, h.y)));\n    if (d < 0.0002 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nfloat BoatDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, s, cDir, ds;\n  p.y -= -0.001;\n  q.xz = mod (p.xz + 0.5, 1.) - 0.5;\n  s = 0.11 * tCur;\n  cDir = (max (abs (q.x), abs (q.z)) < 0.1) ? step (0.5, mod (s, 1.)) :\n     step (abs (q.z), abs (q.x));\n  q = p;\n  if (cDir == 0.) {\n    q.xz = q.zx;\n    s = - s;\n  }\n  s += 0.25;\n  q.z = mod (q.z + 0.5, 1.) - 0.5;\n  ds = 2. * step (0., q.z) - 1.;\n  q.x = mod (q.x + 0.5 + ds * s, 1.) - 0.5;\n  q.z = abs (q.z) - 0.03;\n  d = max (PrCapsDf (q.zyx, 0.011, 0.025),\n     - PrCapsDf (q.zyx + vec3 (0., -0.002, 0.), 0.01, 0.024));\n  if (d < dMin) { dMin = d;  idObj = idBoat; }\n  q.y -= 0.007;\n  ds *= (1. - 2. * cDir);\n  q.x -= 0.035 * ds;\n  d = PrSphDf (q, 0.002);\n  if (d < dMin) { dMin = d;  idObj = idFLamp; }\n  q.x -= -0.07 * ds;\n  d = PrSphDf (q, 0.002);\n  if (d < dMin) { dMin = d;  idObj = idBLamp; }\n  return dMin;\n}\n\nfloat CanDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  d = p.y + 0.01;\n  if (d < dMin) { dMin = d;  idObj = idCan; }\n  q = p;  q.xz = fract (q.xz) - 0.5;  q.y -= -0.0015;\n  d = PrBoxDf (q, vec3 (0.4, 0.0015, 0.4));\n  if (d < dMin) { dMin = d;  idObj = idPlaza;  qHit = p; }\n  q.y -= -0.003;\n  if (abs (q.x) < abs (q.z)) q.xz = q.zx;\n  q.x = abs (q.x) - 0.403;\n  d = PrBoxDf (q, vec3 (0.003, 0.01, 0.406));\n  if (d < dMin) { dMin = d;  idObj = idCurb;  qHit = p; }\n  q = p;  q.xz = abs (mod (q.xz + 0.5, 1.) - 0.5) - 0.1;\n  d = PrCylDf (q.xzy, 0.0025, 0.07);\n  if (d < dMin) { dMin = d;  idObj = idPost;  qHit = p; }\n  q.y -= 0.07;\n  d = PrSphDf (q, 0.007);\n  if (d < dMin) { dMin = d;  idObj = idLamp; }\n  q = p;  q.xz = mod (q.xz + 0.5, 1.) - 0.5;  q.y -= -0.01;\n  d = PrCylDf (q.xzy, 0.006, 0.02);\n  if (d < dMin) { dMin = d;  idObj = idPost;  qHit = p; }\n  q.y -= 0.02;\n  d = PrSphDf (q, 0.006);\n  if (d < dMin) { dMin = d;  idObj = idPLamp;  qHit = p; }\n  q.y = p.y - 0.003;\n  if (abs (q.x) > abs (q.z)) q.xz = q.zx;\n  q.z = abs (q.z) - 0.275;  q.y -= -0.17;\n  d = max (PrShCylDf (q, 0.2, 0.22, 0.02), - PrShCylDf (q, 0.21, 0.23, 0.016));\n  if (d < dMin) { dMin = d;  idObj = idBrdg;  qHit = p; }\n  dMin = BoatDf (p, dMin);\n  return dMin;\n}\n\nfloat CanRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = CanDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 qHitT;\n  float dMin, d;\n  int idObjT;\n  dMin = dstFar;\n  d = BldRay (ro, rd);\n  if (d < dMin) dMin = d;\n  idObjT = idObj;\n  qHitT = qHit;\n  d = CanRay (ro, rd);\n  if (d < dMin) dMin = d;\n  else {\n    idObj = idObjT;\n    qHit = qHitT;\n  }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin;\n  dMin = dstFar;\n  dMin = min (dMin, BldgDf (p));\n  dMin = min (dMin, CanDf (p));\n  return dMin;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 qHitT;\n  int idObjT;\n  const vec3 e = vec3 (0.0001, -0.0001, 0.);\n  idObjT = idObj;\n  qHitT = qHit;\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  idObj = idObjT;\n  qHit = qHitT;\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat DigSeg (vec2 q)\n{\n  return step (abs (q.x), 0.12) * step (abs (q.y), 0.6);\n}\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv < 5) {\n    if (iv == -1) k = 8;\n    else if (iv == 0) k = 119;\n    else if (iv == 1) k = 36;\n    else if (iv == 2) k = 93;\n    else if (iv == 3) k = 109;\n    else k = 46;\n  } else {\n    if (iv == 5) k = 107;\n    else if (iv == 6) k = 122;\n    else if (iv == 7) k = 37;\n    else if (iv == 8) k = 127;\n    else k = 47;\n  }\n  q = (q - 0.5) * vec2 (1.5, 2.2);\n  d = 0.;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx - vo);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy - vp);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy - vm);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy + vm);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.xy + vp);\n  k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log (val) / log (10.), 0.)) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (sgn < 0.) {\n      if (idChar == mxChar - nDig - 1.) s = ShowDig (q, -1);\n      else ++ v;\n    }\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nvec4 ObjCol (vec3 ro, vec3 rd, vec3 vn)\n{\n  vec4 objCol;\n  vec2 g, b;\n  float wWid, bn;\n  bool doRefl, isLit;\n  doRefl = false;\n  isLit = false;\n  wWid = 0.5 * flrHt;\n  if (idObj == idBldg || idObj == idArc) {\n    if (abs (vn.y) < 0.05) {\n      vn.z *= -1.;\n      g = vec2 (dot (qHit.xz, normalize (vn.zx)), qHit.y) / vec2 (wWid, flrHt);\n      if (idObj == idBldg) {\n        g = mod (g - 0.25, 1.) * vec2 (wWid / flrHt, 1.);\n        if (step (0.2, g.x) * step (0.3, g.y) *  step (0.015,\n           min (abs (g.x - 0.35), abs (g.y - 0.65))) > 0.) doRefl = true;\n      } else {\n        if (length (vec2 (0.25 * abs (g.x), abs (g.y - 0.42))) < 0.08) {\n          bn = (10. + mod (iqBlk.y, 90.)) * 100. + mod (iqBlk.x, 100.);\n          if (ShowInt (vec2 (g.x - 0.2, g.y - 0.37),\n             vec2 (0.4, 0.1), 4., bn) == 0.) isLit = true;\n        }\n      }\n    }\n    if (doRefl) {\n      rd = reflect (rd, vn);\n      g = Rot2D (rd.xz, 5.1 * atan (0.3 + iqBlk.y, 0.3 + iqBlk.x));\n      objCol = vec4 (0.7 * (0.4 + 0.6 * (step (1., 10. * (ro.y + 2. * rd.y) -\n         0.3 * floor (5. * IFbm1 (0.3 * atan (g.y, g.x) + pi) + 0.05)))) *\n         BgCol (ro, rd), -1.);\n    } else if (isLit) {\n      objCol = vec4 (1., 1., 0.5, -2.);\n    } else {\n      objCol = vec4 (0.1 + 0.8 * HsvToRgb (vec3 (Hashfv2 (19. * iqBlk),\n         0.2 + 0.2 * Hashfv2 (21. * iqBlk),\n         0.6 + 0.2 * Hashfv2 (23. * iqBlk))), 0.3);\n      if (abs (vn.y) > 0.95) {\n        g = step (0.05, fract (qHit.xz * 70.));\n        objCol *= mix (0.8, 1., g.x * g.y);\n      } else objCol *= (0.9 + 0.1 *\n         Noisefv2 (2100. * vec2 (qHit.x + qHit.z, qHit.y)));\n    }\n  } else if (idObj == idPlaza) {\n    g = step (0.05, fract (qHit.xz * 20.));\n    objCol = vec4 (0.4, 0.3, 0.3, 0.1) * mix (0.7, 1., g.x * g.y);\n  } else if (idObj == idBrdg) objCol = vec4 (0.4, 0.4, 0.2, 0.1) *\n     (0.8 + 0.2 * Noisefv2 (1000. * vec2 (qHit.x * qHit.z, qHit.y)));\n  else if (idObj == idCurb) objCol = vec4 (0.3, 0.4, 0.3, 0.1) *\n     (0.8 + 0.2 * Noisefv2 (512. * 512. * vec2 (qHit.x * qHit.z, qHit.y)));\n  else if (idObj == idPost) objCol = vec4 (0.6, 0.6, 0.65, 0.5);\n  else if (idObj == idBoat) objCol = vec4 (0.2, 0.07, 0., 0.2);\n  else if (idObj == idLamp) objCol = vec4 (1., 1., 0.5, -2.);\n  else if (idObj == idFLamp) objCol = vec4 (0., 1., 0., -2.);\n  else if (idObj == idBLamp) objCol = vec4 (1., 0., 0., -2.);\n  else if (idObj == idPLamp) objCol = vec4 (0., 0., 1., -2.);\n  return objCol;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, vn;\n  float dstHit, refFac;\n  dstHit = ObjRay (ro, rd);\n  refFac = 1.;\n  if (dstHit < dstFar) {\n    if (idObj == idCan) {\n      ro += rd * dstHit;\n      vn = VaryNf (10. * ro + 0.3 * tCur, vec3 (0., 1., 0.), 0.05);\n      rd = reflect (rd, vn);\n      ro += 0.001 * rd;\n      dstHit = ObjRay (ro, rd);\n      refFac = 0.7;\n    }\n  }\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    vn = ObjNf (ro);\n    objCol = ObjCol (ro, rd, vn);\n    col = objCol.rgb;\n    if (objCol.a >= 0.) {\n      if (idObj == idCan) vn = VaryNf (500. * qHit, vn, 2.);\n      else if (idObj == idBldg || idObj == idArc)\n         vn = VaryNf (500. * qHit, vn, 0.5);\n      col = col * (0.2 + 0.1 * max (dot (vn, sunDir * vec3 (-1., 1., -1.)), 0.) +\n         0.8 * max (dot (vn, sunDir), 0.) +\n         objCol.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 128.));\n    } else if (objCol.a == -2.) {\n      col *= (0.5 - 0.5 * dot (vn, rd));\n    }\n    col = mix (col, BgCol (ro, rd), smoothstep (0.4, 1., dstHit / dstFar));\n  } else col = BgCol (ro, rd);\n  col *= refFac;\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, float zmVar, float pnVar, float fvVar)\n{\n  vec4 wgBx[3];\n  vec2 ust;\n  float asp;\n  asp = canvas.x / canvas.y;\n  wgBx[0] = vec4 (0.47 * asp, -0.2, 0.012 * asp, 0.15);\n  wgBx[1] = vec4 (0.13 * asp, -0.46, 0.1 * asp, 0.022);\n  wgBx[2] = vec4 (0.37 * asp, -0.46, 0.1 * asp, 0.022);\n  ust = abs (0.5 * uv - wgBx[0].xy) - wgBx[0].zw;\n  if (abs (max (ust.x, ust.y)) * canvas.y < 1.) col = vec3 (0.8);\n  ust = 0.5 * uv - wgBx[0].xy;\n  ust.y -= (fvVar - 0.5) * 2. * wgBx[0].w;\n  if (abs (length (ust) - 0.8 * wgBx[0].z) * canvas.y < 2.)\n     col = (fvVar * canvas.y > 15.) ? vec3 (0.1, 1., 0.1) : vec3 (1., 0.1, 0.1);\n  ust = abs (0.5 * uv - wgBx[1].xy) - wgBx[1].zw;\n  if (abs (max (ust.x, ust.y)) * canvas.y < 1.) col = vec3 (0.8);\n  ust = 0.5 * uv - wgBx[1].xy;\n  ust.x -= (zmVar - 0.5) * 2. * wgBx[1].z;\n  ust = abs (ust) - 0.6 * wgBx[1].ww;\n  if (abs (max (ust.x, ust.y)) * canvas.y < 2.) col = vec3 (1., 0.3, 1.);\n  ust = abs (0.5 * uv - wgBx[2].xy) - wgBx[2].zw;\n  if (abs (max (ust.x, ust.y)) * canvas.y < 1.) col = vec3 (0.8);\n  ust = 0.5 * uv - wgBx[2].xy;\n  ust.x -= (pnVar - 0.5) * 2. * wgBx[2].z;\n  ust = abs (ust) - 0.6 * wgBx[2].ww;\n  if (abs (max (ust.x, ust.y)) * canvas.y < 2.) col =\n     (pnVar > 0.3) ? vec3 (1., 0., 0.1) : ((pnVar > 0.1) ?\n     vec3 (1., 1., 0.1) : vec3 (0.1, 1., 0.1));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa, aa;\n  float el, az, asp, zmVar, pnVar, fvVar, zmFac, pnFac;\n  int wgSel;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  stDat = Loadv4 (0);\n  zmVar = stDat.x;\n  pnVar = stDat.y;\n  el = stDat.z;\n  az = stDat.w;\n  stDat = Loadv4 (1);\n  wgSel = int (stDat.x);\n  fvVar = stDat.y;\n  dstFar = 20.;\n  flrHt = 0.075;\n  stDat = Loadv4 (2);\n  mPtr = vec4 (stDat.xyz, 0.);\n  stDat = Loadv4 (3);\n  ro = stDat.xyz;\n  ori = vec2 (el, az + stDat.w);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  asp = canvas.x / canvas.y;\n  zmFac = 0.3 + 3.7 * zmVar;\n  pnFac = exp (5. * pnVar) - 1.;  \n  aa = atan (uv / zmFac);\n  rd = vuMat * normalize (vec3 ((1. + pnFac) * sin (aa) / (pnFac + cos (aa)), 1.));\n  sunDir = normalize (vec3 (1., 0.2, -1.));\n  col = ShowScene (ro, rd);\n  col = ShowWg (uv, canvas, col, zmVar, pnVar, fvVar);\n  if (mPtr.z > 0. && wgSel < 0) {\n    if (max (abs (uv.x), abs (uv.y)) < 0.05 &&\n       min (abs (uv.x), abs (uv.y)) < 0.005) col = vec3 (0.1, 1., 0.1);\n  }\n  fragColor = vec4 (col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Canal City\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float pi = 3.14159;\n\nconst float txRow = 64.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat tCur, mOff;\n\nvec3 TrackPath (float t)\n{\n  vec3 p;\n  float s, cCount;\n  p.y = 0.08 + 0.05 * SmoothBump (0.4, 0.7, 0.1, mod (0.53 * t, 1.)) +\n     0.07 * SmoothBump (0.4, 0.7, 0.1, mod (0.31 * t, 1.));\n  s = mod (t, 11.);\n  if (s < 7.) p.xz = (s < 4.) ? vec2 (0., s) : vec2 (s - 4., 4.);\n  else p.xz = (s < 9.) ? vec2 (3., 11. - s) : vec2 (12. - s, 2.);\n  cCount = floor (t / 11.);\n  if (mod (cCount, 2.) == 0.) p.x *= -1.;\n  else p.x -= 1.;\n  p.xz += mod (vec2 (mOff, floor (mOff / 100.)), 100.);\n  p.z += 2. * cCount;\n  return p;\n}\n\nvec4 FlyPR (float s)\n{\n  vec3 fpF, fpB, vd;\n  float ds;\n  ds = 0.12;\n  fpF = TrackPath (s + ds);\n  fpB = TrackPath (s - ds);\n  vd = fpF - fpB;\n  return vec4 (0.5 * (fpF + fpB), - (atan (vd.z, vd.x) - 0.5 * pi));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 wgBx[3], stDat, mPtr, mPtrP;\n  vec2 iFrag, canvas, ust;\n  float az, el, asp, zmVar, pnVar, fvVar, flSpd, flMov, tCurP, todCur;\n  int pxId, wgSel, wgReg;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  zmVar = 0.4;\n  pnVar = 0.;\n  fvVar = 0.25;\n  flMov = 0.3;\n  el = 0.;\n  az = 0.;\n  wgSel = -1;\n  wgReg = -2;\n  if (iFrame <= 5) {\n    mPtrP = mPtr;\n    mOff =  (10. +  mod (floor (todCur), 30.)) * 100. +\n     10. + mod (floor (todCur), 80.);\n  } else {\n    stDat = Loadv4 (0);\n    zmVar = stDat.x;\n    pnVar = stDat.y;\n    el = stDat.z;\n    az = stDat.w;\n    stDat = Loadv4 (1);\n    wgSel = int (stDat.x);\n    fvVar = stDat.y;\n    flMov = stDat.z;\n    tCurP = stDat.w;\n    stDat = Loadv4 (2);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    mOff = stDat.w;\n  }\n  asp = canvas.x / canvas.y;\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.47 * asp, -0.2, 0.012 * asp, 0.15);\n    wgBx[1] = vec4 (0.13 * asp, -0.46, 0.1 * asp, 0.022);\n    wgBx[2] = vec4 (0.37 * asp, -0.46, 0.1 * asp, 0.022);\n    ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[0].xy) - wgBx[0].zw;\n    if (max (ust.x, ust.y) < 0.) wgReg = 0;\n    ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[1].xy) - wgBx[1].zw;\n    if (max (ust.x, ust.y) < 0.) wgReg = 1;\n    ust = abs (mPtr.xy * vec2 (asp, 1.) - wgBx[2].xy) - wgBx[2].zw;\n    if (max (ust.x, ust.y) < 0.) wgReg = 2;\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel < 0) {\n    if (mPtr.z > 0.) {\n      az = clamp (2. * pi * mPtr.x, - pi, pi);\n      el = clamp (pi * mPtr.y, - 0.1 * pi, 0.1 * pi);\n    }\n  } else {\n    if (wgSel == 0) {\n      fvVar = clamp (0.5 + 0.5 * (mPtr.y - wgBx[0].y) / wgBx[0].w, 0., 1.);\n    } else if (wgSel == 1) {\n      zmVar = clamp (0.5 + 0.5 * (mPtr.x * asp - wgBx[1].x) / wgBx[1].z, 0., 1.);\n    } else if (wgSel == 2) {\n      pnVar = clamp (0.5 + 0.5 * (mPtr.x * asp - wgBx[2].x) / wgBx[2].z, 0., 1.);\n    }\n  }\n  flSpd = 0.8 * fvVar;\n  if (flSpd < 0.01) flSpd = 0.;\n  flMov += flSpd * (tCur - tCurP);\n  tCurP = tCur;\n  if (pxId == 0) stDat = vec4 (zmVar, pnVar, el, az);\n  else if (pxId == 1) stDat = vec4 (float (wgSel), fvVar, flMov, tCurP);\n  else if (pxId == 2) stDat = vec4 (mPtr.xyz, mOff);\n  else if (pxId == 3) stDat = FlyPR (flMov);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}