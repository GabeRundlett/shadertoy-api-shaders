{
    "Shader": {
        "info": {
            "date": "1646302375",
            "description": "potato  ",
            "flags": 0,
            "hasliked": 0,
            "id": "ssBBDW",
            "likes": 25,
            "name": "Day 802",
            "published": 3,
            "tags": [
                "fractal",
                "volume",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 922
        },
        "renderpass": [
            {
                "code": "// The sdf and cloud rendering was inspired of another shader on the site, but i lost it!\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv ){\n    vec3 dir = normalize(lookAt - ro);\n    vec3 right = normalize(cross(dir,vec3(0,1,0)));\n    vec3 up = normalize(cross(dir,right));\n    return normalize(dir + right*uv.x + up * uv.y);\n}\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvec3 map(vec3 p){\n    vec3 d = vec3(0);\n    \n    p *= 2.;\n    vec3 op = p;\n    float att = 1.;\n    for(float i = 0.; i < 3.; i++){\n        \n        p = abs(p);\n        p *= 1.5;\n        \n        p -= 0.4;\n        p /= clamp(dot(p,p),-0.5,2.4);\n        \n        p += sin(dot(p,cos(p*1. + i + iTime)))*att*0.4;\n        p.yz *= rot(1.6 + i*0.);\n        p.xy *= rot(1.6);\n        \n        \n        \n        d += exp(-abs(dot(op,p))*40.)*att*2.;\n        //d += abs(dot(sin(p*1.),cos(p*1.5 + 15.)))*att;\n        att *= 0.7;\n    }\n    //d = clamp(d,0.,1.);\n    //d = max(d,0.);\n    d *= 1.4;\n    if(false){\n        d = d/(d+1.);\n        d = pow(d,vec3(4.4))*25.;\n    }//d = 1.-abs(d);\n    //d = abs(d);\n    //d = clamp(d,0.,1.);\n    //d = max(d,0.);\n    //d = mix(vec3(1,0.5,1)*0.1,vec3(1,1.5,1),d*5.);\n    \n    //d = mix(vec3(1.4,0.1,0.4),vec3(0,0.4,0.2),d*0.5)*d;\n    d = (0.5 + 0.5*sin(vec3(1,2,5)*1. - cos(d*29.)*0. + 4. + d.x*0.4))*d*1.;\n    //d = exp(d*1000.);\n    //d = pow(d,vec3(5.));\n    return d;\n}\n\nvec3 getMarch(vec3 ro, vec3 rd, vec2 uv){\n\n    vec3 col = vec3(0);\n    \n    float iters = 400.;\n    float maxD = 5.;\n    vec3 accum = vec3(0);\n    //float stepSz = 1./iters*maxD*mix(0.99,1.,hash23(vec3(uv*2000.,110.)).x);\n    \n    ro -= rd * hash23(vec3(uv*2000.,510. + iTime*0.)).x*1./iters*maxD;\n    vec3 p = ro;\n    \n    float t = 0.;\n    float stepSz = 1./iters*maxD;\n    for(float i = 0.; i < iters; i++){\n        vec3 d = map(p);\n        \n        accum += d*stepSz*(1.-dot(accum,accum));\n        stepSz = 1./iters*maxD*mix(1.,0.5,exp(-dot(d,d)*44.));\n    \n        if(dot(accum,accum) > 0.9 || t > maxD)\n            break;\n        t += stepSz;\n        p += rd*stepSz;\n    }\n    \n    //col += accum;\n    col = mix(col,accum,dot(accum,accum)*15.);\n    //col = mix(col,accum,pow(dot(accum,accum)*4.,1.)*144.);\n    \n    col = col/(2. + col*0.7)*1.4;\n    col = pow(col,vec3(0.4545));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    \n    vec3 ro = vec3(0,0,-2);\n    ro.xz *= rot((iTime + sin(iTime*1.4))*0.2);\n    ro.xy *= rot((iTime*0.8 + sin(iTime*1.7)*0.6)*0.1);\n    \n    vec3 lookAt = vec3(0);\n    vec3 rd = getRd(ro,lookAt,uv);\n    \n    \n    col = getMarch(ro, rd, uv);\n    //vec3 rd = normalize(vec3(uv,1));\n    \n    \n    \n\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Hash without Sine\n// MIT License...\n/* Copyright (c)2014 David Hoskins.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 1 in...\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 2 in...\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 3 in...\nvec4 hash43(vec3 p)\n{\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}