{
    "Shader": {
        "info": {
            "date": "1723760670",
            "description": "inspiration https://zalo.github.io/blog/constraints/\nalso https://www.youtube.com/watch?v=qlfh_rv6khY&t=101s&ab_channel=argonaut",
            "flags": 32,
            "hasliked": 0,
            "id": "lcffWN",
            "likes": 5,
            "name": "distance constraint chain",
            "published": 3,
            "tags": [
                "constraint"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 99
        },
        "renderpass": [
            {
                "code": "// Fork of \"basic distance constraint\" by jonasfrey. https://shadertoy.com/view/lfXBWN\n// 2024-08-15 22:02:00\n\n// Fork of \"push points\" by jonasfrey. https://shadertoy.com/view/XcfBD4\n// 2024-08-15 21:15:36\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 f_n_o_rnd_hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_res = iResolution.xy;\n    float n_tau = radians(360.);\n    float n_scl_min = min(o_res.x, o_res.y);\n    vec2 o_trn = (fragCoord.xy-o_res*.5)/n_scl_min;\n    vec2 o_trn_mou = (iMouse.xy-o_res*.5)/n_scl_min;\n    if(sign(iMouse.z) == 0.){\n        o_trn_mou = vec2(\n            sin(iTime*2.), \n            cos(iTime*.5)\n        )*.5;\n    }\n\n    vec2 o_trn1 = fragCoord/iResolution.xy;\n    float naa = 1./n_scl_min;\n\n    //max radius circle \n    float nrm = 0.05;\n    float n_its = 30.;\n\n    if(iFrame == 0){\n       \n        fragColor = (vec4(\n            f_n_o_rnd_hash22(fragCoord.xy),\n            f_n_o_rnd_hash22(fragCoord.yx)\n        )-.5);\n        float n_it_nor = fragCoord.x/n_its;\n        fragColor.z = (1.-n_it_nor)*0.06;//+(sin(((fragCoord.x/n_its)+.75)*n_tau)*.5+.5)*.1;\n        return;\n    }\n    if(fragCoord.y < 1.){\n        vec2 oank = o_trn_mou.xy;\n        vec4 op = texelFetch(\n               iChannel0, \n               ivec2(int(fragCoord.x), 0), \n               0\n        );\n        float nr = nrm;\n        if(fragCoord.x > 1.){\n           oank = texelFetch(\n               iChannel0, \n               ivec2(int(fragCoord.x-1.), 0), \n               0\n            ).xy;\n           nr = op.z;\n\n        }\n        vec2 op2 = op.xy-oank.xy;\n        float nd1 = length(op2);\n        float ntmp = nr;\n        if(nd1 > ntmp){\n            op.xy = oank.xy + normalize(op2.xy)*ntmp;\n        }\n        fragColor = op;\n        \n        \n        return;\n    }\n    \n    float ndm = length(o_trn-o_trn_mou);\n    ndm = smoothstep(0., naa*4., abs(ndm-nrm)); \n    \n    float ndp_min = 1.;\n    for(float n_it_nor = 0.; n_it_nor < 1.; n_it_nor+=(1./n_its)){\n       vec4 op = texelFetch(\n           iChannel0, \n           ivec2(int(n_it_nor*n_its), 0), \n           0\n       );\n       float ndp = length(o_trn - op.xy);\n       ndp = smoothstep(0., naa*4., abs(ndp-op.z)); \n\n       ndp_min = min(ndp, ndp_min);\n    \n    }\n    fragColor = vec4(\n        ndp_min\n        *ndm\n    );\n    fragColor = 1.-fragColor;\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}