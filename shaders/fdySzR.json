{
    "Shader": {
        "info": {
            "date": "1634219877",
            "description": "[url]https://inktober.com/[/url]\n#inktober2021 themes: [img]https://i.imgur.com/QjhAdpd.png[/img]\n\nmouse controls camera\nInspiration: https://www.artyomprops.com/store/daft-punk-helmet-phftk ( see at bottom)",
            "flags": 0,
            "hasliked": 0,
            "id": "fdySzR",
            "likes": 16,
            "name": "Fab15 #inktober2021 \"helmet\"",
            "published": 3,
            "tags": [
                "raymarching",
                "short",
                "reproduction",
                "daftpunk",
                "inktober2021"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 389
        },
        "renderpass": [
            {
                "code": "#define rot(a)  mat2(cos(a+vec4(0,11,33,0)))                       // rotation\n#define rB      length(max(a,0.)) + min(max(a.x,max(a.y,a.z)),0.)  // round cube https://iquilezles.org/articles/distfunctions\n#define C(r,l)  max( length(q.xy) - r, a.z-l )                     // cylinder\nfloat h;                                                           // material id\n\nfloat map( vec3 q) {               // --- scene SDF\n    vec3 a = abs(q) - vec3(1,1,0);                                 // glass part\n    float t = rB - 1., c,b,j;\n    q.xy -= .5,\n    c = min(q.x, j=.5*q.x+q.y),\n    t = h = max(t, -c );\n    \n    t = min(t, length(q-vec3(-.2,.5,0)) - 1. );                    // rear part\n    \n    a = abs(q) - vec3(.5,.5,0),                                    // top & jow arch\n    b = rB - 1.1;\n    b = max( b, abs(c)-.15 );\n    a.x+=.2; b = min( b, max(rB-1., j-.8 ) );                      // rear arch\n    q -= vec3(-.2,.1,0);\n    b = min(b, C(.7,1.1 ) );                                       // ears\n    b = min(b, c = max( abs(length(q.xy)-.45)-.05,a.z-1.2) );\n    b = min(b, max(C(.5,1.2), abs(j+.05)-.1));\n    q.y-=.08; b = min(b, C(.2,1.2) );\n    t = min( t,b );\n    t = max( t, -min(j+.15, rB-.95) );\n    return t;\n}\n\nvoid M(out vec4 O, vec2 U)       // --- mainImage, oversampled below\n{\n    float t=9.,_h;                                                 // hit object id \n    vec3  R = iResolution, e = vec3(-1,1,1)*1e-3, N,\n          D = normalize(vec3(U+U, -3.5*R.y) - R),                  // ray direction\n          p = 9./R, q,                                             // marching point along ray \n          M = iMouse.z > 0. ? iMouse.xyz/R -.5: vec3(20,8,0)/1e2*cos(.3*iTime+vec3(0,11,0)); // auto thumbnail\n     \n    for (O=vec4(1); O.x > 0. && t > .01; O-=.01)\n        q = p,\n        q.yz *= rot(.5-6.*M.y),                                    // rotations\n        q.xz *= rot(2.-6.*M.x), \n        t = map(q),\n        p += .5*t*D;                                               // step forward = dist to obj\n    \n    _h=h;                                                          // normal\n    N = normalize( vec3( map(q+e.xyy)/e.xyy + map(q+e.yxy)/e.yxy + map(q+e.yyx)/e.yyx + map(q+e.xxx)/e.xxx ));\n    N.xz *= rot(-2.+6.*M.x);\n    N.yz *= rot(-.5+6.*M.y);                                       // back to cam space\n\n    if (t>=.01) return;\n  //O = vec4(dot(N,vec3(1,1,1))/1.7);\n    O = texture(iChannel0, reflect(D,N));                          // reflection map\n    t==_h ? O *= 10.*mix(pow(1.+dot(D,N),5.),1., .03)              // glass: Fresnel ( Schlick approx )\n          : O *= 2.*vec4(1,.8,.4,1);                               // metal: gold\n}\n\n\n\n\n// === easy adaptive sampling. === https://shadertoyunofficial.wordpress.com/2021/03/09/advanced-tricks/\n//                           more: https://www.shadertoy.com/results?query=easy+adaptive+sampling\nvoid mainImage(out vec4 O, vec2 U) {\n    M(O,U);\n    if ( fwidth(length(O)) > .01 ) {  // difference threshold between neighbor pixels\n        vec4 o;\n        for (int k=0; k < 9; k+= k==3?2:1 )\n          { M(o,U+vec2(k%3-1,k/3-1)/3.); O += o; }\n        O /= 9.;\n     // O.r++;                        // uncomment to see where the oversampling occurs\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}