{
    "Shader": {
        "info": {
            "date": "1702268531",
            "description": "Approximation of the USGS-GSWA2 hypsometric palette (by Dr. Richard L. Langford) used in cartography.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtGfRV",
            "likes": 11,
            "name": "usgs_gswa2 approximation",
            "published": 3,
            "tags": [
                "heightmap",
                "topography",
                "cartography",
                "hypsometric",
                "usgs"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 230
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n// NOTE: while I place the *approximation* into the public domain,\n// the copyright status of the original palette is not obvious. Use\n// with caution.\n\n// usgs-gswa2 hypsometric palette approximation.\n// Source: http://soliton.vm.bytemark.co.uk/pub/cpt-city/usgs/index.html,\n// with input data interpreted as sRGB color triplets.\n// Range: 0..1, continuous (presumably corresponds to 0..10000 feet).\n// Only positive elevations are supported.\n// Approximation accuracy: max. abs. error is less than 0.034\n// in any color component, max. rel.error is less than 0.063 in\n// any color component.\n// NOTE: output colors are in linear RGB.\nvec3 usgs_gswa2(float x)\n{\n    x=clamp(x,0.0,1.0);\n    return vec3(\n        (x<0.524?0.212-x*(0.632-x*(27.562-x*(78.713-x*58.816))):-27.748+x*(144.705-x*(270.714-x*(221.135-x* 66.379)))),\n        (x<0.524?0.347+x*(0.588+x*(23.609-x*(95.574-x*91.712))): 24.117-x*(143.557-x*(314.521-x*(296.708-x*102.627)))),\n        (x<0.524?0.130-x*(0.442-x*(18.377-x*(67.714-x*67.014))):- 0.178+x*(  1.159-x*(  0.370+x*(  1.519-x*  1.906)))));\n}\n\n//==============================================================================\n// Terrain with derivatives, based on https://www.shadertoy.com/view/DtdyDl\n\n// https://www.shadertoy.com/view/dllSW7\nuint hash(uint x)\n{\n    x^=x>>15;\n    x^=(x*x)|1u;\n    x^=x>>17;\n    x*=0x9E3779B9u;\n    x^=x>>13;\n    return x;\n}\n\nfloat rnd2i(ivec2 v)\n{\n    return float(int(hash(uint(v.x+65536*v.y))))*4.6566129e-10;\n}\n\n// 2D value noise. Gradient in xy, value in z.\nvec3 noise2d(vec2 v)\n{\n    ivec2 i=ivec2(floor(v)),e=ivec2(0,1);\n    v=fract(v);\n    float A=rnd2i(i+e.xx);\n    float B=rnd2i(i+e.yx);\n    float C=rnd2i(i+e.xy);\n    float D=rnd2i(i+e.yy);\n    vec2 d=30.0*v*v*(v*(v-2.0)+1.0);\n    v=v*v*v*(v*(v*6.0-15.0)+10.0);\n    return vec3(\n        vec2(mix(B-A,D-C,v.y),mix(C-A,D-B,v.x))*d,\n        mix(mix(A,B,v.x),mix(C,D,v.x),v.y));\n}\n\n// Terrain function. Height in z, gradient in xy.\nvec3 f(vec2 v)\n{\n    vec3 ret=vec3(0);\n    float w=1.0;\n    mat2 m=mat2(0.6,0.8,-0.8,0.6),A=5.0*m;\n    for(int i=0;i<4;++i)\n    {\n        vec3 r=w*noise2d(A*v);\n        r.xy=r.xy*A;\n        ret+=r;\n        A*=2.0*m;\n        w*=0.5;\n    }\n    ret=0.75*ret+0.25*vec3(2.0*ret.z*ret.xy,ret.z*ret.z);\n    ret=0.5*ret+vec3(0.0,0.0,0.125);\n    return ret;\n}\n\n//==============================================================================\n// Main function.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy=(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 h=f(xy+0.1*iTime);\n    if(false&&xy.y>0.0) // Debug derivatives.\n    {\n        float eps=1e-3;\n        float dx=(f(xy+0.1*iTime+vec2(eps,0.0)).z-f(xy+0.1*iTime-vec2(eps,0.0)).z)/(2.0*eps);\n        float dy=(f(xy+0.1*iTime+vec2(0.0,eps)).z-f(xy+0.1*iTime-vec2(0.0,eps)).z)/(2.0*eps);\n        h.xy=vec2(dx,dy);\n    }\n    vec3 col=usgs_gswa2(h.z);\n    if(xy.x>0.0) col*=max(dot(normalize(vec3(h.xy,8.0)),normalize(vec3(1,-1,2))),0.0); // Hill-shading.\n    col=mix(12.92*col,1.055*pow(col,vec3(1.0/2.4))-0.055,step(0.0031308,col)); // sRGB\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}