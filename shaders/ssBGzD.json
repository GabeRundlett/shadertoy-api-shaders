{
    "Shader": {
        "info": {
            "date": "1617915138",
            "description": "two circular objects, a rectangular light placed in a cube and a sphere, that act like perfect mirrors.",
            "flags": 40,
            "hasliked": 0,
            "id": "ssBGzD",
            "likes": 14,
            "name": "to reflect upon",
            "published": 3,
            "tags": [
                "raymarch",
                "sound",
                "abstract",
                "pathtracing",
                "mirror",
                "synth",
                "whoob",
                "widerspiegeln"
            ],
            "usePreview": 0,
            "username": "nabr",
            "viewed": 514
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 c = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    c.xyz = c.xyz/c.w;\n\tfragColor =   vec4((c.xyz),1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define Fs iSampleRate\n#define _f(x) fract(x)\n// whoob\nfloat whb(float t)\n{\n    int it = int(t) & 3;\n    float f0 = 47.123*float(int[](44,52,50,42)[it]),\n          f1 = 47.123*float(int[](74,68,65,48)[it]);\n    return.25*clamp((sin(f0 * t)+sin(f1 * t))*sin(20.*t),-.5, .5);\n}\n// drums\nvec2 dr(float t)\n{\n    float bd = 0., sn = 0., hh = 0.;\n    t = mod(t, 8.);\n    float m = float[](.5, 2., 1.,.5, 1., 1., 1., 4.)[int(4.*t)%8];\n    float snf0 = _f(2.*t), snf1 = _f(t),snf2 = _f(3.*t),bdf0 = _f(m *t) ,bdf1 =_f(8.*t)\n    ,pf= pow(bdf1, 3.);\n    // snare\n    sn = sin(1508. * t) * cos(1508. * exp(-.06 * snf2 ) + cos(snf1 * 1500.));\n    sn *= min(1.,floor(.5+snf1)) * exp(-14. * snf0);\n    sn += .2*clamp(sn*abs(1.-cos(sn/4./snf0)),-0.1, 0.2);\n    // base drums\n    bd = sin(628.31 *  t) * cos(376.98 * exp(-0.0432 * pow(1.-bdf1, 10. )) );\n    bd *= min(1., 20. * bdf1) * max(0.,1.-bdf1) * exp(-12. * bdf0);\n    // shakers, autopan\n    hh = cos( exp(-10. * (pf-2.*floor(pf)-1.) )  * 6.2831 * 260.) \n          * exp(-45. * bdf1) * min(1., .002 + bdf1);\n    return vec2(.8 * sn, sn)  + 1. * bd + \n           vec2(hh*(cos(t)+sin(t)),hh*(-sin(t)+cos(t)));\n}\n\n//synth\nvec2 f(int s)\n{\n    vec2 y = vec2(1e-6);\n    const float w[19]=float[19](200.,401.,168.,248.,600.,0.,330.,110.,0.,500.,334.,378.,0.,596.,595.,395.,0.,0.,600.);\n    float rt = float(s) / Fs * .5,\n          frt = _f(rt),\n          pfrt = pow(min(sqrt(sqrt(1.-frt)), 100. * frt), 4.),\n          sf = 6.283185 * float(s)/Fs;\n    y.y =  sin(sf * w[int(rt) % 10]);\n    y.y += clamp(y.y+(1.-cos(9.*y.y)),-3.,.3) * pfrt;\n    y.x =  sin(sf * w[int(rt) % 9 + 10]);\n    y.x += clamp(y.x+(1.+sin(6.*y.x)),-.2,.9) * pfrt;\n    y.x += ((y.x-floor(.5*y.x)) * atan(1.-frt,25.*frt));\n    return vec2(y.x,y.y);\n}\nvec2 mainSound(int s, float t)\n{\n    // observation: \n    // the echoes, the synth itself, also introduce phase rotation \n    // with bitreduction -noise, copying, inverse multiplying, finaly adding the original sound\n    // i can control the stereowidth of the output \n    \n    \n    vec4 y = vec4(1e-6),b =y;vec2 d=(s>44100*4)?dr(t):vec2(1e-6);\n    const int k[8] = int[8](83341,68581,78517,102859,87421,95279,86813,73907);\n    int nt0 = 953, nt1 = 1571, nt11 = 1031;\n    for(int ii=0;ii<8;++ii){\n    if(ii<5)y.xw+=vec2(f((s-(nt0+=k[ii]))).x, f((s-(nt1+=k[ii]))).x);\n    if(ii>1)y.yz+=vec2(f((-s+(nt1+=k[ii]))).y, f((-s+(nt11+=k[ii]))).y);\n    }\n    b = y;\n    float bt = pow(.8, 8.);\n    b.x = (bt * floor(y.y/ bt + .5));b.y = (bt * floor(y.x/ bt + .5));\n    return mod(t,23.)<19.?((.03*((b.xy*1.-b.wz) + y.xy) )+d):d+whb(t);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "\n// i started here:\n// https://blog.demofox.org/2020/05/25/casual-shadertoy-path-tracing-1-basic-camera-diffuse-emissive/\n\nuint wang_hash(inout uint seed)\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\nfloat hashf(inout uint state) {\n    return float(wang_hash(state)) / 4294967296.0;\n}\n\n\n#define mR(_a)(mat2(cos(_a+vec4(0,33,11,0))))\n#define repM(_x,_y)(_y*.5-mod(_x,_y))\n#define dmin(a,b)((a.x < b.x) ? a : b)\nfloat sdBox(vec3 p,vec3 s) {\n    p=abs(p)-s;\n    return length(max(p,0.))+min(max(p.x,max(p.y,p.z)),0.);\n}\nvec2 f(vec3 p)\n{\n    // two circular objects, a rectangular light placed in a cube and a sphere\n    float sp = length(vec3(.5 - p.x, .2 + p.y, 1.5 - p.z)) - 3.;//reflective sphere\n    float b = sdBox(vec3(.5-p.x, p.y, 1. + p.z), vec3(3, 4, 5.));//cube\n    float lt = sdBox(vec3(p.xy, 1. + p.z), vec3(.2, .2, .05));//light\n\n    //tunnel\n    vec3 k = vec3(repM(vec2(atan(p.y, p.x) *2.864788, 1.+p.z), vec2(1.1, 6.28)),length(p.xy) - 2.); \n    k = abs(k) - vec3(.1, .5, .5);\n    float fk = length(max(-vec3(-.125, .089, .25), .5 *k)) + min(max(k.x, max(k.y, k.z)), 0.) - .15;\n    \n    //circular cubes\n    float ll = 0.;\n    p.yz *= mR(.5);\n    p.xz *= mR(1.);\n    \n    vec3 vb = p;\n    vb.x = atan(p.x, p.y) * (6. / 3.14159);\n    vb.x -= floor(.5 + vb.x);\n    vb.y = length(p.xy);\n    vb.yz *= mR(0.34907);\n    vb.y -= 1.5;\n    vb.x = max(abs(vb.y), abs(vb.x));\n    vb = abs(vb) - vec3(.21, 1.5, .25);\n    ll = (max(max(vb.x, vb.y), vb.z));\n\n    return\n        dmin(vec2(fk, 3),\n             dmin(vec2(-b, 7),\n                  dmin(vec2(ll, 5),\n                       dmin(vec2(-sp, -1),\n                            vec2(lt, 11)))));\n}\n\n\n// somewhre on stackoverflow\nvec3 obd(vec3 n, vec2 rv)\n{\n    // http://lolengine.net/blog/2013/09/21/picking-orthogonal-vector-combing-coconuts\n    vec3 t = (n.x > n.z) ? vec3(-n.y, n.x, 0.0) : vec3(0.0, -n.z, n.y), bt = cross(n, t);\n    float ph = rv.y,th = rv.x, sth = sin(th);\n    return t * cos(ph) * sth + bt * sin(ph) * sth + n * cos(th);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 col = vec3(1e-3),hput=vec3(1),specrd=vec3(0);\n    vec2 R=iResolution.xy,e = vec2(1e-4, -1e-4);\n    struct M {vec3 alb, emi;float rgh;} m = M(vec3(.98), vec3(0),0.);\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    uint seed =(uint(fragCoord.x)*1973u+uint(fragCoord.y)*9277u+uint(iFrame)*2669u)|1u;\n    float cd = tan(radians(103.*.5));\n    vec2 jt = hashf(seed)+vec2(cos(hashf(seed)),2.*sin(hashf(seed)));\n    vec2 st = vec2(cd, R.y/R.x * cd) * ((fragCoord+jt)/R*2.-1.);\n    vec3 ro = vec3(vec2(.01),3.23),\n         g = normalize(vec3(.2, .1, .001) - ro),\n         u = normalize(cross(g, vec3(0, 1, 0))),\n         v = normalize(cross(u, g));\n    vec3 rd = normalize(g + st.x *u + st.y *v);\n    vec2 h = vec2(0);\n    //if(abs(st.x)<fract(R.y/R.x*cd)) //debug slow machine\n    for (int b = 1; b < 6 + min(iFrame, 0); ++b)\n    {\n\n        float t = 0.;\n        for (int i = 0; i < 60&&t<6.; i++)\n        {\n            h = f(ro + rd * t);\n            if (abs(h.x) < t * .001)\n                break;\n            t += h.x;\n        }\n\n        {\n            switch (int(h.y))\n            {\n            case 3:\n                m.alb = clamp(mix(vec3(.4, .2, .72), vec3(.86, .87, .1),fract(1.2*rd.z+t)), 0., 1.);\n                m.emi = vec3(1e-6);\n                m.rgh = .7;\n                break;\n            case 5:\n                m.alb = (vec3(.2, .9, .79));\n                m.emi = vec3(1e-6);\n                m.rgh = .5;\n                break;\n            case 7:\n                m.alb = vec3(.9);\n                m.rgh = 1e-3;\n                (b>4)?(m.emi = vec3(50.)):(m.emi = vec3(1e-3));\n                break;\n            case 11:\n                m.alb = vec3(1);\n                m.emi = vec3(100);\n                m.rgh = 1e-6;\n                break;\n            }\n            vec3 p = ro + t * rd;\n            vec3 N=normalize(e.yxx*f(p+e.yxx).x+e.xxy*f(p+e.xxy).x+e.xyx*f(p+e.xyx).x+e.yyy*f(p+e.yyy).x);\n            ro = p + N * .01;\n            specrd = mix(reflect(rd, N), obd(N, .2*p.z+vec2(6. + (2. * hashf(seed) - 1.), (6.28318 * hashf(seed)))) /*artistic*/, m.rgh * m.rgh);\n            rd = normalize(specrd);\n            col += m.emi * hput;\n            hput *= m.alb;\n        }\n    }\n    fragColor +=vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}