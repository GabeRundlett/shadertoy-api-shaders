{
    "Shader": {
        "info": {
            "date": "1640227743",
            "description": "More colors and stuff, I suppose, idk. Just stare at it.",
            "flags": 0,
            "hasliked": 0,
            "id": "ftySzW",
            "likes": 1,
            "name": "eindacor_niftysquiggles",
            "published": 3,
            "tags": [
                "cmyk"
            ],
            "usePreview": 0,
            "username": "Eindacor_DS",
            "viewed": 228
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n#define INVERT true\n\n#define CYAN vec3(0., 1., 1.)\n#define MAGENTA vec3(1., 0., 1.)\n#define YELLOW vec3(1., 1., 0.)\n#define BLACK vec3(0.)\n\n\n// from https://www.shadertoy.com/view/4djSRW\nfloat hash(vec2 p)\n{\n\treturn fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 getRandomVector(float seed) {\n    vec2 outVec;\n    if (seed < .25) {\n        outVec = vec2(1., 1.);\n    } else if (seed < .5) {\n        outVec = vec2(-1., 1.);\n    } else if (seed < .75) {\n        outVec = vec2(1., -1.);\n    } else {\n        outVec = vec2(-1., -1.);\n    }\n    \n    return outVec;\n}\n\nfloat biLerp(float f0, float f1, float f2, float f3, float lerpX, float lerpY) {\n    float upper = mix(f1, f2, lerpX);\n    float lower = mix(f0, f3, lerpX);\n    \n    return mix(lower, upper, lerpY);\n}\n\nmat2x2 createRotationMatrix(float rotation) {\n    return mat2x2(\n        cos(rotation), -sin(rotation),\n        sin(rotation), cos(rotation)\n    );\n}\n\nfloat getModifiedDot(vec2 uv, vec2 p, float gridDimension, float pHash) {\n    float rotation = sin(iTime * .1 + pHash) * 2. * PI;\n    if (pHash < .5) {\n        rotation *= -1.;\n    }\n    mat2x2 rotationMatrix = createRotationMatrix(rotation);\n    \n    //return dot((uv - p) / gridDimension, getRandomVector(pHash));\n    return dot((uv - p) / gridDimension, getRandomVector(pHash) * rotationMatrix);\n}\n\nfloat getPerlinIterationValue(vec2 uv, float gridDimension) {\n    float xCoord = floor(uv.x / gridDimension) * gridDimension;\n    float yCoord = floor(uv.y / gridDimension) * gridDimension;\n    \n    float xIndex = floor(uv.x / gridDimension);\n    float yIndex = floor(uv.y / gridDimension);\n    \n    float p0Hash = hash(vec2(xIndex, yIndex));\n    float p1Hash = hash(vec2(xIndex, yIndex + 1.));\n    float p2Hash = hash(vec2(xIndex + 1., yIndex + 1.));\n    float p3Hash = hash(vec2(xIndex + 1., yIndex));\n    \n    vec2 p0 = vec2(xCoord, yCoord);\n    vec2 p1 = vec2(xCoord, yCoord + gridDimension);\n    vec2 p2 = vec2(xCoord + gridDimension, yCoord + gridDimension);\n    vec2 p3 = vec2(xCoord + gridDimension, yCoord);\n    \n    float rotation = sin(iTime * .15) * 2. * PI;\n    mat2x2 rotationMatrix = createRotationMatrix(rotation);\n    \n    float dot0 = getModifiedDot(uv, p0, gridDimension, p0Hash);\n    float dot1 = getModifiedDot(uv, p1, gridDimension, p1Hash);\n    float dot2 = getModifiedDot(uv, p2, gridDimension, p2Hash);\n    float dot3 = getModifiedDot(uv, p3, gridDimension, p3Hash);\n    \n    float xInterp = smoothstep(p0.x, p2.x, uv.x);\n    float yInterp = smoothstep(p0.y, p2.y, uv.y);\n    \n    float val = biLerp(dot0, dot1, dot2, dot3, xInterp, yInterp);\n\n    float xLerp = mod(uv.x / 2., gridDimension);\n    float revealMargin = gridDimension * .95;\n    \n    return val;\n    return pow(mix(-1., 1., (val + 1.) / 2.), .5);\n}\n\nfloat getPerlinValue(vec2 uv, float gridDimension, int iterations) {\n    uv /= 50.;\n    float val = 0.;\n    for (int i=0; i<iterations; i++) {\n        val += getPerlinIterationValue(uv, gridDimension * 1. / pow(2., float(iterations)));\n        uv *= 2.;\n    }\n    \n    return val;\n}\n\nfloat getHoldTransitionValue(float lower, float upper, float holdTime, float transitionTime, float time) {\n    float period = 2. * holdTime + 2. * transitionTime;\n    float halfPeriod = period / 2.;\n    float relativeTime = fract(time / halfPeriod);\n    float halfHoldTime = holdTime / 2.;\n    \n    float val = smoothstep(halfHoldTime, halfHoldTime + transitionTime, relativeTime * halfPeriod);\n    \n    if (int(time / halfPeriod) % 2 == 0) {\n        val = 1. - val;\n    }\n\n    return mix(lower, upper, val);\n}\n\nvec3 getHoldTransitionValue3(vec3 lower, vec3 upper, float holdTime, float transitionTime, float time) {\n    float period = 2. * holdTime + 2. * transitionTime;\n    float halfPeriod = period / 2.;\n    float relativeTime = fract(time / halfPeriod);\n    float halfHoldTime = holdTime / 2.;\n    \n    float val = smoothstep(halfHoldTime, halfHoldTime + transitionTime, relativeTime * halfPeriod);\n    \n    if (int(time / halfPeriod) % 2 == 0) {\n        val = 1. - val;\n    }\n\n    return mix(lower, upper, val);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n    uv.x *= aspectRatio;\n    \n    uv += vec2(iTime * .05);\n   \n    float gridSize = .15;\n    \n    float cyanVal = getPerlinValue(uv, gridSize, 1);\n    vec3 cyan = mix(vec3(1.), getHoldTransitionValue3(CYAN, YELLOW, 5., 5., iTime), cyanVal);\n    \n    float yellowVal = getPerlinValue(uv + vec2(12.3 * gridSize), gridSize, 2);\n    vec3 yellow = mix(vec3(1.), getHoldTransitionValue3(YELLOW, MAGENTA, 5., 5., iTime + 1.), yellowVal);\n    \n    float magentaVal = getPerlinValue(uv + vec2(25.5 * gridSize), gridSize, 3);\n    vec3 magenta = mix(vec3(1.), getHoldTransitionValue3(MAGENTA, CYAN, 5., 5., iTime + 2.), magentaVal);\n    \n    float blackVal = getPerlinValue(uv + vec2(31.8 * gridSize), gridSize, 4);\n    vec3 black = mix(vec3(1.), BLACK, blackVal * getHoldTransitionValue(-1., 1., 0., 10., iTime));\n\n    fragColor = vec4(cyan * yellow * magenta * black,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}