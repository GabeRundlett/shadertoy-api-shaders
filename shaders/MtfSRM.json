{
    "Shader": {
        "info": {
            "date": "1435166496",
            "description": "Quick experiment",
            "flags": 0,
            "hasliked": 0,
            "id": "MtfSRM",
            "likes": 26,
            "name": "Warp and Weave",
            "published": 3,
            "tags": [
                "3d",
                "material",
                "anisotropic"
            ],
            "usePreview": 0,
            "username": "psonice",
            "viewed": 1096
        },
        "renderpass": [
            {
                "code": "// comment out these lines if you need more speed:\n#define SHADOWS\n#define REFLECTIONS\n\n#define R(p,a) p=cos(a)*p+sin(a)*vec2(-p.y,p.x);\nconst float PI = 3.141592653589793;\nconst float threshold = 0.001;\nconst float maxIters = 50.;\nconst float ambient = 0.2;\nconst float maxD = 100.;\n\nvec3 lightPos = vec3(10.);\n\n// materials\nint m; // material index\n\nfloat cube(vec4 cube, vec3 pos){\n\tcube.xyz -= pos;\n\treturn max(max(abs(cube.x)-cube.w,abs(cube.y)-cube.w),abs(cube.z)-cube.w);\n}\n\nfloat df(vec3 p){\n\tvec3 mp = mod(p, 0.1);\n\tmp.y = p.y + sin(p.x*2.+iTime)*.25 + sin(p.z * 2.5 + iTime)*.25;\n\t\n\tfloat s1 = cube(\n\t\tvec4(0.05, 0.05, 0.05, 0.025),\n\t\tvec3(mp.x, mp.y + (sin(p.z * PI * 10.) * sin(p.x * PI * 10.)) * 0.025, 0.05));\n\tfloat s2 = cube(\n\t\tvec4(0.05, 0.05, 0.05, 0.025), \n\t\tvec3(0.05, mp.y + (sin(p.x * PI * 10.) * -sin(p.z * PI * 10.)) * 0.025, mp.z));\n\tm = s1 < s2 ? 0 : 1;\n\treturn min(s1, s2);\n}\n\nvec2 rm(vec3 pos, vec3 dir, float threshold, float td){\n\tvec3 startPos = pos;\n\tvec3 oDir = dir;\n\tfloat l,i, tl;\n\tl = 0.;\n\t\n\tfor(float i=0.; i<=1.; i+=1.0/maxIters){\n\t\tl = df(pos);\n\t\tif(abs(l) < threshold){\n\t\t\tbreak;\n\t\t}\n\t\tpos += (l * dir * 0.7);\n\t}\n\tl = length(startPos - pos);\n\treturn vec2(l < td ? 1.0 : -1.0, min(l, td));\n}\n\nfloat softShadow(vec3 pos, vec3 l, float r, float f, float td) {\n\tfloat d;\n\tvec3 p;\n\tfloat o = 1.0, maxI = 10., or = r;\n\tfloat len;\n\tfor (float i=10.; i>1.; i--) {\n\t\tlen = (i - 1.) / maxI;\n\t\tp = pos + ((l - pos) * len);\n\t\tr = or * len;\n\t\td = clamp(df(p), 0.0, 1.0);\n\t\to -= d < r ? (r -d)/(r * f) : 0.;\n\t\t\n\t\tif(o < 0.) break;\n\t}\n\treturn o;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//vec3 camPos = vec3(0., sin(iTime*.3)+3., iTime);\n\tvec3 camPos = vec3(0., sin(iTime*.3)+3., cos(iTime*.3));\n\tvec3 uv = vec3(fragCoord.xy / iResolution.xy, 1.);\n\tvec3 rayDir = uv;\n\trayDir = normalize(rayDir);\n\trayDir.yz = R(rayDir.yz, sin(iTime*.25)*.25+1.1);\n\trayDir.xz = R(rayDir.xz, sin(iTime*.2));\n\t\n\tfloat camDist = length(camPos);\n\t\n\tfloat gd = maxD;\n\tvec2 march = rm(camPos, rayDir, threshold, gd);\n\t\n\tint lm = m;\n\tvec3 point = camPos + (rayDir * march.g);\n\tvec2 e = vec2(0.01, 0.0);\n\tvec3 n = march.x == 1.0 ? \n\t\t(vec3(df(point+e.xyy),df(point +e.yxy),df(point +e.yyx))-df(point))/e.x :\n\t\tvec3(0., 1., 0.);\n\t\n\tvec3 lightDir = normalize(lightPos);\n\tfloat intensity = max(dot(n, lightDir), 0.0) * 0.5;\n\tvec3 lightPos2 = point + lightDir;\n\t\n#ifdef SHADOWS\n\tintensity *= 3.;\n\tintensity *= softShadow(point, point + n, 2.0, 8., gd); // AO\n#endif\n\t\n\tintensity -= (march.y)*0.02;\n\tintensity = march.y == maxD ? 0. : intensity;\n\tvec4 p = vec4(1.0);\n\tvec3 c;// = clamp(lm == 0 ? vec3(sin(point)) * .25 : vec3(cos(point)), 0., 1.);\n\t\n\t///c += 1.;\n    c = lm==1 ? vec3(0.7, 0.3, 0.4) : vec3(0.3, 0.6, 0.8);\n\tp.rgb = march.x == -1. ? vec3(0.) : vec3(c * (intensity + ambient));\n\t\n\tfragColor = p;\n#ifdef REFLECTIONS\n\tvec4 p2 = vec4(0.,0.,0.,1.);\n\tn = normalize(n);\n\t\n\tvec3 refDir = rayDir - 2. * dot(n,rayDir) * n;\n\t\t\n\tpoint += refDir * 0.01;\n\tmarch = rm(point, refDir, threshold, maxD);\n\tif(march.y < 0.5){\n\t\tpoint += (refDir * march.y);\n\t\tlm = m;\n\t\tn = (vec3(df(point+e.xyy),df(point +e.yxy),df(point +e.yyx))-df(point))/e.x;\n\t\tintensity = max(dot(n, lightDir), 0.0) * 0.5;\n\t\tc = clamp(lm == 0 ? vec3(sin(point)) * .25 : vec3(cos(point)), 0., 1.);\n\t\tc += 1.;\n\t\tp2.rgb = vec3(c * (intensity + ambient));\n\t}\n\tfragColor = mix(p, p2, 0.2);\n#endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}