{
    "Shader": {
        "info": {
            "date": "1642340043",
            "description": "https://genuary.art/prompts#jan3",
            "flags": 32,
            "hasliked": 0,
            "id": "slVSzt",
            "likes": 4,
            "name": "genuary stars",
            "published": 3,
            "tags": [
                "genuary",
                "genuary2022"
            ],
            "usePreview": 0,
            "username": "ml",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 correctedUv = vec2(uv.x*iResolution.x/iResolution.y, uv.y);\n    \n\n    vec4 stars = texture(iChannel1, uv);\n    \n    float cloudLightness = texture(iChannel0, uv).r*pow(texture(iChannel0, uv).g, 2.)*0.76+0.03;\n\n    float r = texture(iChannel0, uv+vec2(0.5, 0.5)).r*0.9+0.23;\n    float g = texture(iChannel0, uv).a*0.9-0.05;\n    float b = texture(iChannel0, uv).b*0.95+0.42;\n\n    vec3 clouds = cloudLightness*vec3(r, g, b);\n    \n    // Output to screen\n    fragColor = stars+vec4(clouds, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// noise\nfloat noise(vec2 pos)\n{\n    pos.x += 100.*seed;\n\treturn fract( sin( dot(pos*0.001 ,vec2(24.12357, 36.789) ) ) * 12345.123);\t\n}\n\n\n// blur noise\nfloat smooth_noise(vec2 pos)\n{\n\treturn   ( noise(pos + vec2(1,1)) + noise(pos + vec2(1,1)) + noise(pos + vec2(1,1)) + noise(pos + vec2(1,1)) ) / 16.0 \t\t\n\t\t   + ( noise(pos + vec2(1,0)) + noise(pos + vec2(-1,0)) + noise(pos + vec2(0,1)) + noise(pos + vec2(0,-1)) ) / 8.0 \t\t\n    \t   + noise(pos) / 4.0;\n}\n\n\n// linear interpolation\nfloat interpolate_noise(vec2 pos)\n{\n\tfloat\ta, b, c, d;\n\t\n\ta = smooth_noise(floor(pos));\t\n\tb = smooth_noise(vec2(floor(pos.x+1.0), floor(pos.y)));\n\tc = smooth_noise(vec2(floor(pos.x), floor(pos.y+1.0)));\n\td = smooth_noise(vec2(floor(pos.x+1.0), floor(pos.y+1.0)));\n\t\t\n\ta = mix(a, b, fract(pos.x));\n\tb = mix(c, d, fract(pos.x));\n\ta = mix(a, b, fract(pos.y));\n\t\n\treturn a;\t\t\t\t   \t\n}\n\n\n\nfloat perlin_noise(vec2 pos)\n{\n\tfloat\tn;\n\t\n\tn = interpolate_noise(pos*0.0625)*0.5;\n\tn += interpolate_noise(pos*0.125)*0.25;\n\tn += interpolate_noise(pos*0.025)*0.225;\n\tn += interpolate_noise(pos*0.05)*0.0625;\n\tn += interpolate_noise(pos)*0.03125;\n\treturn n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 correctedUv = vec2(uv.x*iResolution.x/iResolution.y, uv.y);\n    \n    const float scale = 100.;\n    \n    if(iFrame == 0){\n        fragColor = vec4(\n        perlin_noise(correctedUv*scale), \n        perlin_noise((correctedUv+vec2(3., 0.))*scale),\n        perlin_noise((correctedUv+vec2(6., 0.))*scale),\n        perlin_noise((correctedUv+vec2(9., 0.))*scale));\n    }else{\n        fragColor = texture(iChannel0, uv);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define seed 123.\n#define TAU 6.28318530718\n\n\nfloat hash11(float p)\n{\n    p += seed;\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat hash12(vec2 p)\n{\n    p.x += seed;\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash21(float p)\n{\n    p += seed;\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 hash22(vec2 p)\n{\n    p.x += seed;\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nfloat hash13(vec3 p3)\n{\n    p3.x += seed;\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat dist(vec2 p1,vec2 p2){\n    return sqrt(pow(p1.x-p2.x, 2.) + pow(p1.y-p2.y, 2.));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 col = texture(iChannel1, uv);\n\n    vec2 correctedUv = vec2(uv.x*iResolution.x/iResolution.y, uv.y);\n    \n    float closestDist = 1000000.;\n    \n    \n    for(float i = 0.; i < 100.; i++){\n        vec2 pos = hash22(vec2(i, iFrame));\n        pos.x *= iResolution.x/iResolution.y;\n        \n        float d = dist(pos, correctedUv);\n        if(d < closestDist){\n            closestDist = d;\n        }\n        \n        float r = hash12(vec2(i, iFrame));\n        float r2 = hash12(vec2(i+0.5, iFrame));\n        \n        float starBrightness = pow(r, 100.)*r2*texture(iChannel0, correctedUv).r*r2;\n        \n        \n        float starPixelBrightess = pow(d, -2.)*starBrightness*5e-5;\n        \n\n        \n        if(starPixelBrightess < 0.003) starPixelBrightess = 0.;\n        \n        \n        vec3 starRgb = vec3(1.);\n        float alpha = pow(hash13(vec3(i, iFrame, 4.)), 0.8);\n        \n        r = hash13(vec3(i, iFrame, 0.));\n\n        if(r < 0.04){\n            starRgb = vec3(\n                0.9+hash13(vec3(i, iFrame, 1.))*0.1,\n                0.23+hash13(vec3(i, iFrame, 2.))*0.8,\n                0.23+hash13(vec3(i, iFrame, 3.))*0.04\n            );\n            alpha = pow(alpha, 2.5);\n        }else if(r < 0.07){\n             starRgb = vec3(\n                0.31+hash13(vec3(i, iFrame, 1.))*0.41,\n                0.31+hash13(vec3(i, iFrame, 2.))*0.41,\n                0.9+hash13(vec3(i, iFrame, 3.))*0.1\n             );\n             alpha = pow(alpha, 1.2);\n        }\n        \n        alpha = alpha*0.8+0.2*texture(iChannel0, correctedUv).r;\n        \n        vec4 starColor = vec4(starRgb, alpha);\n        \n        col += starColor*starPixelBrightess*texture(iChannel0, correctedUv).r;\n    }\n\n\n    // Output to screen\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}