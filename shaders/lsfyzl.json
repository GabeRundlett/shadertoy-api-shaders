{
    "Shader": {
        "info": {
            "date": "1489801978",
            "description": "tunnel/grid fx, featuring costy colors",
            "flags": 0,
            "hasliked": 0,
            "id": "lsfyzl",
            "likes": 32,
            "name": "pulsing tunnel grid",
            "published": 3,
            "tags": [
                "tunnel",
                "raymarch",
                "lattice"
            ],
            "usePreview": 0,
            "username": "balkhan",
            "viewed": 1543
        },
        "renderpass": [
            {
                "code": "/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nfloat \tt; // time\nfloat\ta; // angle used both for camera path and distance estimator\nfloat\tid_t; // id used for coloring\n\n#define I_MAX\t\t100\n#define E\t\t\t0.001\n\n#define\tCAM_PATH // pretty slopy (pun intended)\n//#define\tLIGHTS\n//#define\tBAD_TRIP // 30 seconds animation (approximatively)\n//#define\tLOOKING_AROUND\n//#define\tPERF_COLS // only one pair of fancy colors, 6 less sin calls\n\n#define\t\tFWD_SPEED\t-7.\t// the speed at wich the tunnel travel towards you\n\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec2\trot(vec2 p, vec2 ang);\nvoid\trotate(inout vec2 v, float angle);\nvec3\tcalcNormal( in vec3 pos, float e, vec3 dir);\n\n// blackbody by aiekick : https://www.shadertoy.com/view/lttXDn\n\n// -------------blackbody----------------- //\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\n\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// -------------blackbody----------------- //\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    t  = iTime*.125;\n    vec3\tcol = vec3(0., 0., 0.);\n\tvec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(.0, .0, .0);\n\n    pos.z = t*FWD_SPEED;\n\n    #ifdef\tLOOKING_AROUND\n    dir.zy *= mat2(cos(t*.5),sin(t*.5),-sin(t*.5),cos(t*.5) );\n    dir.xy *= mat2(cos(1.57+t*.5),sin(1.57+t*.5),-sin(1.57+t*.5),cos(1.57+t*.5) );\n    #endif\n    \n    vec2\tinter = (march(pos, dir));\n\n    // coloring (empiricism == power)\n    #ifndef PERF_COLS\n    col.xyz = step(id_t, 0.)*blackbody( ( inter.y-.0251*inter.x ) * 500. );\n    col.xyz += step(1.,id_t)*vec3(abs(sin(t+1.04)), abs(sin(t+2.09)), abs(sin(t+3.14)))*inter.x*.01; // .01 == 1./float(I_MAX)\n    #else\n    col.xyz = step(id_t, 0.)*blackbody( ( inter.y-.0251*inter.x ) * 500. )*inter.x*.01*vec3(0.866555, 0.001592, 0.865759);\n    col.xyz += step(1.,id_t)*vec3(0.865759, 0.866555, 0.001592)*inter.x*.01;\n    #endif\n\n    \n    /*\n\t* lighting originally taken from gltracy : https://www.shadertoy.com/view/XsB3Rm\n\t*/\n\t#ifdef\tLIGHTS\n    if (inter.y <= 30.)\n\t{\n        vec3\tv = pos+inter.y*dir;\n        vec3\tn = calcNormal(v, E*.1, dir);\n        vec3\tev = normalize(v - pos);\n\t\tvec3\tref_ev = reflect(ev, n);\n        vec3\tlight_pos   = pos+vec3(0., 0., -100.0);\n        vec3\tvl = normalize(light_pos - v);\n\t\tfloat\tdiffuse  = max(.0, dot(vl, n));\n\t\tfloat\tspecular = pow(max(.0, dot(vl, ref_ev)), 40.);\n        col.xyz += ( (specular + diffuse) * vec3(.25, .25, .25));\n    }\n    #endif\n    c_out =  vec4(col,1.0);\n}\n\nfloat\tde_0(vec3 p)\n{\n\tfloat\tmind = 1e5;\n\tvec3\tpr = p;\n\n    // rotate x and y based on z and time\n\trotate(pr.xy, a);\n\n    // rotate y and z to skew the grid a bit in our face\n\tp.yz *= mat2(0., 1., -1., 0.);\n\n    // take the fractional part of the ray (p), \n    // and offset it to get a range from [0.,1.] to [-.5, .5]\n    // this is a space partitioning trick I saw on \"Data Transfer\" by srtuss : https://www.shadertoy.com/view/MdXGDr\n\tpr.xyz = fract(pr.xyz);\n\tpr -= .5;\n    \n    // magic numbers : .666 == 2/3, 2.09 == 2*(3.14/3), 4.18 == 4*(3.14/3)\n    // dephasing is needed in order to get the lattice\n    pr.y *= sin(t*.666     +p.z+p.y-p.x);\n    pr.x *= sin(t*.666+2.09+p.z+p.y-p.x);\n    pr.z *= sin(t*.666+4.18+p.z+p.y-p.x);\n\n    mind = length(pr.yyxx)-.65025; // this is the grid\n\tid_t = mind;\n    mind = min(mind, (length(pr.xyz)-.65025 ) ); // this is the blobs/stripes/thingys\n    id_t = (id_t != mind)? 1. : 0. ; // used for coloring\n\treturn (mind);\n}\n\nfloat\tde_1(vec3 p) // cylinder\n{\n\tfloat\tmind = 1e5;\n\tvec3\tpr = p;\t\n\tvec2\tq;\n    \n\tq = vec2(length(pr.yx) - 4., pr.z );\n\n    q.y = rot(q.xy, vec2(-1.+sin(t*10.)*6., 0.)).x;\n\n\tmind = length(q) - 4.5;\n    #ifdef\tBAD_TRIP\n    #undef\tCAM_PATH\n    mind -= (sin(t*.75) );\n\t#endif\n\n\treturn mind;\n}\n\n// add 2 distances to constraint the de_0 to a cylinder\nfloat\tde_2(vec3 p)\n{\n    return (de_0(p)-de_1(p)*.125);\n}\n\nfloat\tscene(vec3 p)\n{  \n    float\tmind = 1e5;\n    #ifdef\tCAM_PATH\n    a = ( .8*(p.y*.015 + p.x*.015 + p.z *.15)  + t*3.);\n    vec2\trot = vec2( cos(a+t), sin(a+t) );\n    #else\n    a = ( .8*(p.y*.015 + p.x*.015 + p.z *.15)  + t*3.);\n    vec2\trot = vec2( cos(a), sin(a) );\n    #endif\n\n   \tp.x += rot.x*4.;\n\tp.y += rot.y*4.;\n\n\tmind = de_2(p);\n\t\n    return (mind);\n}\n\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec2\ts = vec2(0.0, 0.0);\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x;\n        if (dist.x < E || dist.y > 30.)\n            break;\n        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\n// Utilities\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec2\trot(vec2 p, vec2 ang)\n{\n\tfloat\tc = cos(ang.x);\n    float\ts = sin(ang.y);\n    mat2\tm = mat2(c, -s, s, c);\n    \n    return (p * m);\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n    return normalize(vec3(\n           march(pos+eps.xyy, dir).y - march(pos-eps.xyy, dir).y,\n           march(pos+eps.yxy, dir).y - march(pos-eps.yxy, dir).y,\n           march(pos+eps.yyx, dir).y - march(pos-eps.yyx, dir).y ));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}