{
    "Shader": {
        "info": {
            "date": "1654361115",
            "description": "Based entirely on original work by David Lowry-Duda: [url]https://davidlowryduda.com/quanta-langlands-viz/[/url]\n\nSelect form to display with FORM macro at start of Image code. Mousable. For other controls, see header.",
            "flags": 16,
            "hasliked": 0,
            "id": "sddcWl",
            "likes": 16,
            "name": "Modular Forms",
            "published": 3,
            "tags": [
                "complex",
                "form",
                "modular"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 387
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n\n// Modular Forms, Matthew Arcus, mla, 2022\n// Based entirely on original work by David Lowry-Duda:\n// https://davidlowryduda.com/quanta-langlands-viz/\n\n// A Modular Form is a complex valued function, defined on\n// the upper half plane, that is invariant (up to a certain\n// scaling factor, determined by the \"weight\" of the form) \n// under the action of the modular group (integer valued\n// Mobius transformations with unit determinant).\n\n// Each form can be evaluated by a Fourier series, but this\n// can result in large numeric errors. A better way (as\n// described by Lowry-Duda) is to pullback or fold the\n// half plane into the fundamental region for the\n// group (the region with |Re(z)| < 0.5 and |z| > 1) and\n// only evaluate the series there, where it can be done\n// with less loss of precision.\n\n// The value of the form is shown with color indicating phase\n// and shading showing magnitude & the boundary of the\n// fundamental region is also shown ('p','m' and 'r' control\n// these).\n\n// By default the upper halfplane is mapped into the unit disk\n// (press 'h' to see the half plane). Use the mouse to apply\n// a Mobius transformation to the disk or plane.\n\n// Controls:\n// <mouse>: apply transform to disk or plane\n// 'h': Half plane\n// 'p': Show phase as color\n// 'm': Show (log) magnitude as shading\n// 'r': Show fundamental region\n// 'f': Use pullback/fold\n// 'c': Continuous coloring\n// 't': color change over time\n// 'l': log contour lines\n// 'x': Progressive Fourier expansion\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Select form to display here\n//#define FORM JINVARIANT\n#define FORM FORM12\n//#define FORM E10\n\n#define FORM4 0\n#define FORM12 1\n#define FORM14 2\n#define FORM20 3\n#define FORM24 4\n#define JINVARIANT 5\n#define E2 6\n#define E10 7\n\n#if FORM == E10\n// E10\nfloat coeffs[] = float[](\n  1.0, -264.0, -135432.0, -5196576.0, -69341448.0, -515625264.0, -2665843488.0, -10653352512.0, -35502821640.0\n);\nint weight = 10;\n#elif FORM == FORM20\nfloat coeffs[] = float[](\n   0.0,1.0,456.0,50652.0,-316352.0,-2377410.0,23097312.0,-16917544.0,\n   -383331840.0,1403363637.0\n);\nint weight = 20;\n#elif FORM == FORM14\nfloat coeffs[] = float[](\n  1.0,-24.0,-196632.0,-38263776.0,-1610809368.0,-29296875024.0, \n  -313495116768.0, -2325336249792.0\n);\nint weight = 14;\n#elif FORM == FORM12\n// Ramanujan's tau function, giving the modular discriminant\nfloat coeffs[] = float[](\n  0.0, 1.0, -24.0, 252.0, -1472.0, 4830.0, -6048.0, -16744.0, 84480.0, -113643.0, -115920.0,\n  534612.0, -370944.0, -577738.0, 401856.0, 1217160.0, 987136.0, -6905934.0, 2727432.0,\n  10661420.0, -7109760.0, -4219488.0, -12830688.0, 18643272.0, 21288960.0, -25499225.0,\n  13865712.0, -73279080.0, 24647168.0, 128406630.0, -29211840.0, -52843168.0, -196706304.0\n);\nint weight = 12;\n#elif FORM == FORM4\nfloat coeffs[] = float[](\n  1.0,240.0,2160.0,6720.0,17520.0,30240.0,60480.0,82560.0,140400.0\n);\nint weight = 4;\n#elif FORM == FORM24\nfloat coeffs[] = float[](\n  0.0,1.0,0.0,195660.0,12080128.0,44656110.0,-982499328.0, -147247240.0,\n  22106234880.0,-8700375483.0,-307849789440.0,407518320132.0,\n  1302498570240.0,1503145514150.0,-20178571198464.0,23514204375720.0,\n  -1899976392704.0,139716078767730.0,-333538871869440.0,-71967740442820.0\n);\nint weight = 24;\n#elif FORM == JINVARIANT\n// Klein's J-Invariant\nfloat coeffs[] = float[](\n  744.0,196884.0,21493760.0,864299970.0,20245856256.0,\n  333202640600.0, 4252023300096.0, 44656994071935.0, 401490886656000.0,\n  3176440229784420.0, 22567393309593600.0, 146211911499519294.0, \n  874313719685775360.0, 4872010111798142520.0, 25497827389410525184.0,\n  126142916465781843075.0);\nint weight = 0;\n#define NEEDINVERSE\n#else\n#error No FORM defined\n#endif\n\nvec2 deltafn(vec2 z) {\n  vec2 w = complex(0);\n  vec2 q = cexp(TWOPI*cmul(vec2(0,1),z)); // The nome squared\n  int N = coeffs.length();\n  if (key(CHAR_X)) N = int(iTime)%(N+1); // Progressive\n  for (int i = N; i > 0; i--) {\n    w = cmul(w,q);\n    w += complex(coeffs[i-1]);\n  }\n#if defined NEEDINVERSE\n  w += cinv(q);\n#endif\n  return w;\n}\n\nvec2 act(mat2 gamma, vec2 z) {\n  // Action of Mobius transformation matrix on z.\n  float a = gamma[0][0], b = gamma[0][1];\n  float c = gamma[1][0], d = gamma[1][1];\n  return cdiv(a*z+complex(b),c*z+complex(d));\n}\n\nvec2 pullback(vec2 z, out mat2 gamma) {\n    //Returns gamma, w such that gamma(z) = w and w is\n    //(essentially) in the fundamental domain.\n    gamma = mat2(1);\n    for (int i = 0; i < 40; i++) {\n      if (abs(z.x) < 0.5 && dot(z,z) > 1.0) break;\n      float xshift = -floor(z.x + 0.5);\n      mat2 shiftmatrix = mat2(1, xshift, 0, 1);\n      gamma *= shiftmatrix;\n      z = act(shiftmatrix, z);\n      if (dot(z,z) < 1.0) {\n         z = -cinv(z);\n         gamma *= mat2(0, -1, 1, 0);\n      }\n    }\n    return z;\n}\n\nfloat clength(vec2 z) {\n  // \"Careful\" length - avoid overflow for very large values\n  if (z == vec2(0)) return 0.0;\n  float t = max(abs(z.x),abs(z.y));\n  z /= t;\n  return t*length(z);\n}\n\nvec3 getcolor(vec2 z) {\n  if (key(CHAR_H)) {\n    z.y += 1.0;\n    if (iMouse.x > 0.0) {\n      vec2 c = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n      z.x -= c.x;\n      z *= (c.y+1.0)/dot(z,z);\n      z.x += c.x;\n      z /= dot(z,z);\n    }\n  } else {\n    if (dot(z,z) > 1.0) return vec3(0);\n    if (iMouse.x > 0.0) {\n      vec2 c = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n      if (dot(c,c) > 1.0) c /= dot(c,c);\n      z -= c;\n      z *= (dot(c,c)-1.0)/dot(z,z);\n      z += c;\n      z /= -dot(z,z);\n    }\n    z.y += 1.0;\n    z *= 2.0/dot(z,z);\n    z.y -= 1.0;\n    z /= dot(z,z);\n  }\n  mat2 gamma = mat2(1);\n  if (!key(CHAR_F)) z = pullback(z,gamma);\n  float a = gamma[0][0], b = gamma[0][1];\n  float c = gamma[1][0], d = gamma[1][1];\n  vec2 w = deltafn(z);\n  if (w == vec2(0)) return vec3(0);\n  // Apply modularity - note that gamma is inverse of mapping\n  // to fundamental region & and has unit determinant.\n  w = cmul(w,cpow(-c*z + complex(a),weight));\n  float h = 0.5+atan(w.y,w.x)/TWOPI;\n  if (!key(CHAR_C)) h *= 0.5; // Use limited color range\n  vec3 col = vec3(1,1,0.5);\n  float t = 0.0;\n  if (!key(CHAR_T)) t = iTime;\n  if (!key(CHAR_P)) col = 0.2+0.8*h2rgb(h+0.0*t);\n  if (!key(CHAR_L)) {\n    vec2 uv = (vec2(t,0)+4.0*clog(w))/PI;\n    float px = fwidth(uv.x);\n    uv = fract(uv);\n    uv = min(uv,1.0-uv);\n    col *= smoothstep(0.0,min(px,0.1),min(uv.x,uv.y));\n  }\n  if (!key(CHAR_M)) col *= 0.65+0.35*cos(t+4.0*log(clength(w)));\n  if (key(CHAR_R)) {\n    //  Fundamental region borders\n    float d = abs(0.5-abs(z.x));\n    d = min(d,abs(length(z)-1.0));\n    d = min(d,abs(z.x));\n    float px = fwidth(d);\n    col *= 0.5+0.5*smoothstep(-px,px,d-0.02);\n  }\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  int AA = 2;\n  vec3 col = vec3(0);\n  for (int i = 0; i < AA; i++){\n      for (int j = 0; j < AA; j++) {\n        vec2 z = (2.0*(fragCoord+vec2(i,j)/float(AA))-iResolution.xy)/iResolution.y;\n        col += getcolor(z);\n      }\n  }\n  col /= float(AA*AA);\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) { if (!b) alert = true; }\n\nconst float PI = 3.14159265359;\nconst float TWOPI = 2.0*3.14159265359;\n\n#define complex(x) (vec2((x),0))\n\nvec2 cmul(vec2 z, vec2 w) {\n  return mat2(z.x,z.y,-z.y,z.x)*w;\n}\n\nvec2 cinv(vec2 z) {\n  return vec2(z.x,-z.y)/dot(z,z);\n}\n\nvec2 cdiv(vec2 z, vec2 w) {\n  return cmul(z,cinv(w));\n}\n\nvec2 cexp(vec2 z) {\n  // If cos and sin were perfect we wouldn't need normalize\n  return exp(z.x)*normalize(vec2(cos(z.y),sin(z.y)));\n}\n\nvec2 clog(vec2 z) {\n  float r2 = dot(z,z);\n  return vec2(0.5*log(r2),atan(z.y,z.x));\n}\n\nvec2 cpow(vec2 z, vec2 w) {\n  return cexp(cmul(clog(z),w));\n}\n\nvec2 cpow(vec2 z, int n) {\n  // Integer powers by repeated squaring, more\n  // for precision than for performance.\n  vec2 res = vec2(1,0);\n  vec2 t = z;\n  while (true) {\n    if ((n&1) == 1) res = cmul(res,t);\n    n >>= 1;\n    if (n == 0) break;\n    t = cmul(t,t);\n  }\n  return res;\n}\n\nvec3 h2rgb(float h) {\n  // Function by iq\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\nconst int KEY_ALT = 18;\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_I = 73;\nconst int CHAR_J = 74;\nconst int CHAR_K = 75;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}