{
    "Shader": {
        "info": {
            "date": "1691020451",
            "description": "This is a naiive Kuwahara filter using a gaussian blur.  Interestingly, it acts like a convolutional neural network doing a min pool!\nIt sure does look like Skyward Sword's depth of field.\n\nMade as shader help for Kyecedar",
            "flags": 32,
            "hasliked": 0,
            "id": "Dtfyzl",
            "likes": 6,
            "name": "Custom Kuwahara Filter",
            "published": 3,
            "tags": [
                "blur",
                "kuwahara"
            ],
            "usePreview": 1,
            "username": "copperbotte",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "\nvec4 sector_data(vec2 uv, vec2 sector_scale)\n{\n    // Compute the mean of a sector\n    vec2 duv = vec2(1)/iResolution.xy;\n    \n    vec3 mean = vec3(0);\n    \n    const int samples = 3;\n    for(int i=0; i<samples; ++i)\n    {\n        float dx = duv.x * float(i+1);\n        for(int j=0; j<samples; j++)\n        {\n            float dy = duv.y * float(j+1);\n            vec2 duv = vec2(dx, dy) * sector_scale;\n            mean += texture(iChannel0, uv + duv).xyz;\n        }\n    }\n    mean /= float(samples*samples);\n    \n    // Compute the variance of a sector\n    float var = 0.0;\n    for(int i=0; i<samples; ++i)\n    {\n        float dx = duv.x * float(i+1);\n        for(int j=0; j<samples; j++)\n        {\n            float dy = duv.y * float(j+1);\n            vec2 duv = vec2(dx, dy) * sector_scale;\n            vec3 dcol = texture(iChannel0, uv + duv).xyz - mean;\n            var += dot(dcol, dcol);\n        }\n    }\n    //var /= float(samples*samples);\n    return vec4(mean, var);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 duv = vec2(9)/iResolution.xy;\n    \n    /*vec4 sec0 = texture(iChannel1, uv + duv*vec2( 1, 1));//sector_data(uv, vec2( 1, 1));\n    vec4 sec1 = texture(iChannel1, uv + duv*vec2(-1, 1));//sector_data(uv, vec2(-1, 1));\n    vec4 sec2 = texture(iChannel1, uv + duv*vec2(-1,-1));//sector_data(uv, vec2(-1,-1));\n    vec4 sec3 = texture(iChannel1, uv + duv*vec2( 1,-1));//sector_data(uv, vec2( 1,-1));\n    \n    vec4 sec = sec0;\n    if(sec1.w < sec.w) sec = sec1;\n    if(sec2.w < sec.w) sec = sec2;\n    if(sec3.w < sec.w) sec = sec3;\n    // sec.xyz is now the minimum std of the 4 sectors\n    \n    vec3 col = sec.xyz;\n    */\n    \n    vec4 minsec = vec4(0,0,0,1e30);\n    minsec = texture(iChannel1, uv);\n    \n    const int sectors = 6;\n    for(int i=0; i<sectors; i++)\n    {\n        const float pi = 3.141592;\n        float angle = pi/4.0 + float(i)*2.0*pi/float(sectors) + iTime;\n        vec4 sec = texture(iChannel1, uv + duv*vec2(cos(angle), sin(angle)));\n        if(sec.w < minsec.w) minsec = sec;\n    }\n    \n    vec3 col = minsec.xyz;\n    //col = texture(iChannel1, uv).xyz;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat kernel(vec2 uv, vec2 duv)\n{\n    const float sigma = 0.01;//9.0;\n    duv /= sigma;\n    return exp(-dot(duv, duv));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Gaussian blur\n    vec2 duv0 = vec2(1)/iResolution.xy;\n    const int samples = 21;\n    float weight = 0.0;\n    for(int i=0; i<samples; ++i)\n    {\n        float dx = float(i - samples/2);\n        for(int j=0; j<samples; j++)\n        {\n            float dy = float(j - samples/2);\n            vec2 duv = vec2(dx, dy) * duv0;\n            weight += kernel(uv, duv);\n        }\n    }\n    \n    vec3 mean = vec3(0);\n    for(int i=0; i<samples; ++i)\n    {\n        float dx = float(i - samples/2);\n        for(int j=0; j<samples; j++)\n        {\n            float dy = float(j - samples/2);\n            vec2 duv = vec2(dx, dy) * duv0;\n            mean += texture(iChannel0, uv + duv).xyz * kernel(uv, duv) / weight;\n        }\n    }\n    \n    // Compute the variance of a sector\n    float var = 0.0;\n    for(int i=0; i<samples; ++i)\n    {\n        float dx = float(i - samples/2);\n        for(int j=0; j<samples; j++)\n        {\n            float dy = float(j - samples/2);\n            vec2 duv = vec2(dx, dy) * duv0;\n            vec3 dcol = texture(iChannel0, uv + duv).xyz - mean;\n            var += dot(dcol, dcol) * kernel(uv, duv) / weight;\n        }\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(mean,var);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}