{
    "Shader": {
        "info": {
            "date": "1541170801",
            "description": "This uses perlin noise to moodulate the position of parts of a dot matrix, which is colored with the default color algorithm.",
            "flags": 0,
            "hasliked": 0,
            "id": "Xt3fWX",
            "likes": 3,
            "name": "Fractal Noise XY Modulation",
            "published": 3,
            "tags": [
                "noise",
                "perlinnoise",
                "dotmatrix"
            ],
            "usePreview": 0,
            "username": "Nihilistic_Furry",
            "viewed": 327
        },
        "renderpass": [
            {
                "code": "#define intensity 1.0\n#define colorswap 1.0\n\n// Random normalized vectors with numbers from random.org (changable)\nconst vec2 x0y0 = vec2 (0.632267, -0.774750);\nconst vec2 x1y0 = vec2 (-0.697355, 0.716726);\nconst vec2 x0y1 = vec2 (0.849160, 0.528136);\nconst vec2 x1y1 = vec2 (0.316228, -0.948683);\n\n// Ease function\nfloat ease (float p) \n{\n    return p * p * p * (p * (p * 6.0 - 15.0) + 10.0); \n}\n\n// Creates perlin noise for \nfloat perlin (float x, float y)\n{\n    x = abs (mod (x, 2.0) - 1.0);\n    y = abs (mod (y, 2.0) - 1.0);\n    \n    vec2 xy00 = vec2 (x, y);\n    vec2 xy10 = vec2 (x - 1.0, y);\n    vec2 xy01 = vec2 (x, y - 1.0);\n    vec2 xy11 = vec2 (x - 1.0, y - 1.0);\n    \n    float s = dot (x0y0, xy00);\n    float t = dot (x1y0, xy10);\n    float u = dot (x0y1, xy01);\n    float v = dot (x1y1, xy11);\n    \n    float sx = ease (x);\n    float sy = ease (y);\n    \n    float a = s + sx * (t - s);\n    float b = u + sx * (v - u);\n    \n    return (a + sy * (b - a));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec2 uvt = (uv - 0.5) * iTime * 3.0;\n    \n    float f = max (0.0, perlin (uvt.x * 5.0, uvt.y * 2.0) - perlin (uvt.y * 3.0, uvt.x * 2.0)) * 2.0;\n    vec4 c = vec4 (f, f, f, f);\n    \n    // Time varying pixel color\n    vec4 col = vec4 (0.5 + 0.5 * cos (iTime+uv.xyx + vec3 (0.0, 2.0, 4.0)), 1.0);\n    \n    // Output to screen\n    fragColor = col * (1.0 - intensity * 2.0) + (c * intensity * 2.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}