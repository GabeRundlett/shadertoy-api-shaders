{
    "Shader": {
        "info": {
            "date": "1646975995",
            "description": "Not responding to mike, or any other sound....... Playing soundcloud allright though.",
            "flags": 64,
            "hasliked": 0,
            "id": "NdjfWG",
            "likes": 4,
            "name": "Something's Not right.... ",
            "published": 3,
            "tags": [
                "oldschool",
                "eq",
                "borked",
                "scrol"
            ],
            "usePreview": 0,
            "username": "deuZige",
            "viewed": 263
        },
        "renderpass": [
            {
                "code": "\nfloat time = 0.0;\nvec2 pos = vec2(0);  //  0 .. 1\nvec2 uv  = vec2(0);  // -1 .. 1\nvec2 tp  = vec2(0);  // text position\n\n//--- font data ---\n#define FONT_SIZE1 0.45\n#define FONT_SIZE2 0.3\n#define FONT_SPACE 0.45\n#define SIN_FREQ 0.75\n#define SIN_SPEED 3.0\n#define SCROLL_LEN 30.\n#define SCROLL_SPEED 2.0\n\n//----- access to the image of ascii code characters ------\n//#define S(a) c+=texture(iChannel0,clamp(tp,0.,1.)/16.+fract(floor(vec2(a,15.999-float(a)/16.))/16.)).x; uv.x-=FONT_SPACE;\n\n#define S(a) c+=char(float(a)); tp.x-=FONT_SPACE;\n\n#define _note  S(10);\n#define _star  S(28);\n#define _smily S(29);\n#define _    S(32);\n#define _exc S(33);\n#define _add S(43);\n#define _dot S(46);\n\n#define _A S(65);\n#define _B S(66);\n#define _C S(67);\n#define _D S(68);\n#define _E S(69);\n#define _F S(70);\n#define _G S(71);\n#define _H S(72);\n#define _I S(73);\n#define _J S(74);\n#define _K S(75);\n#define _L S(76);\n#define _M S(77);\n#define _N S(78);\n#define _O S(79);\n#define _P S(80);\n#define _Q S(81);\n#define _R S(82);\n#define _S S(83);\n#define _T S(84);\n#define _U S(85);\n#define _V S(86);\n#define _W S(87);\n#define _X S(88);\n#define _Y S(89);\n#define _Z S(90);\n\n#define _a S(97);\n#define _b S(98);\n#define _c S(99);\n#define _d S(100);\n#define _e S(101);\n#define _f S(102);\n#define _g S(103);\n#define _h S(104);\n#define _i S(105);\n#define _j S(106);\n#define _k S(107);\n#define _l S(108);\n#define _m S(109);\n#define _n S(110);\n#define _o S(111);\n#define _p S(112);\n#define _q S(113);\n#define _r S(114);\n#define _s S(115);\n#define _t S(116);\n#define _u S(117);\n#define _v S(118);\n#define _w S(119);\n#define _x S(120);\n#define _y S(121);\n#define _z S(122);\n\n#define _0 S(48);\n#define _1 S(49);\n#define _2 S(50);\n#define _3 S(51);\n#define _4 S(52);\n#define _5 S(53);\n#define _6 S(54);\n#define _7 S(55);\n#define _8 S(56);\n#define _9 S(57);\n\n// return character intensity of ch at position tp\nfloat char(float ch)\n{\n  vec4 f = texture(iChannel0,clamp(tp,0.,1.)/16.+fract(floor(vec2(ch,15.999-float(ch)/16.))/16.));\n  if (iMouse.z > 0.0) \n    return f.x;   // 2d \n  else\n    return f.x * (f.y+0.3)*(f.z+0.3)*2.0;   // 3d\n}\n\nvec4 ScrollText1()\n{\n  tp = uv / FONT_SIZE1;  // set font size\n  tp.x = 2.0*(tp.x -4. +mod(time*SCROLL_SPEED, SCROLL_LEN));\n  float SIN_AMP = 1.5 * iMouse.y  / iResolution.y - 0.5;\n  tp.y = tp.y +0.5 +SIN_AMP*sin(tp.x*SIN_FREQ +time*SIN_SPEED);\n\n  float c = 0.0;\n    \n  _d _e _u _Z _i _g _e _  _k _i _c _k _i _n _g _ _exc _exc\n\n  _ _O _L _D _S _C _H _O _O _L _ _1 _9 _9 _1 _ _exc _exc\n\n  _ _T _h _e _9 _0 _s _  _w _e _r _e _  _t _h _e _  _b _e _s _t _ _o _f _  \n\n  _ _h _u _m _a _n _  _h _i _s _t _o _r _y _ _ _G _R _E _E _T _Z\n      \n  _ _g _o _  _t _o _ _a _l _l _ _t _h _e _ _o _n _e _s\n      \n  _ _S _T _I _L _L _ _S _T _A _N _D _I _N _G _\n  \n_ _dot _dot _smily _dot _dot _dot _dot _smily _dot _dot  \n     \n_ _smily  _dot _dot _dot _dot \n\n  return c * vec4(pos, 0.5+0.5*sin(2.0*time),1.0);\n}\n\nvec4 ScrollText2()\n{\n  tp = uv / FONT_SIZE2;  // set font size\n  tp.x = 2.0*(tp.x-5.8+mod(time*SCROLL_SPEED, SCROLL_LEN));\n  tp.y = tp.y + 3.2;\n\n  float c = 0.0;\n  _ _star _ _star _ _star _ _star _ _note _note _note _note _  \n  _d _a _y _u _m _n _  _  _d _i _t _  _b _r _e _n _g _t _  \n  _m _e _m _o _r _i _e _s _ _f _r _o _m _ _l _a _n _g _  _v _e _r _v _l _o _g _e _n _ \n  _t _i _j _d _e _n _star _star _D _E _  _C _o _m _m _o _d _o _r _e _ _A _m _i _g _a _   \n  _note _note _note _note _ _star _ _star _ _star _ _star\n  // _1 _2 _3 _4 _5 _6 _7 _8 _9 _0 \n  return c * vec4(pos, 0.5+0.5*sin(time),1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  time = iTime;\n  pos = fragCoord.xy / iResolution.xy; //  0 .. 1\n  uv = pos*2.0 - 1.0;                  // -1 .. 1\n\n  fragColor  = ScrollText1();\n  fragColor += ScrollText2();\n}\n\n#define PI 3.14159265\n\nfloat rewrap(float r, float rep) {\n    \n    if (r < 0.) {\n        r = -r;\n    }\n    \n    r = mod(r*rep, PI);\n                  \n    return r/(PI);\n}\n\nvoid whatever( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 px = gl_FragCoord.xy / iResolution.xy;\n    \n    const int size = 24;\n                \n    float ar = iResolution.x / iResolution.y;\n    \n    px.y /= ar;\n    \n    vec2 pos = px-vec2(0.5, 0.5/ar);\n    \n    float len = length(pos);\n    \n\tvec3 color = vec3(0,0,0);\n    \n    float rep = 1.;\n    \n    float delta = rewrap(atan(pos.x, pos.y), rep);\n        \n    float div = 100./float(size);\n    \n    float modifier = sin(iTime*0.1);\n    \n    float index = float(int(mod(iTime*0.+delta+modifier, 1.) * 100. / div));\n    \n\tfloat f = texelFetch(iChannel0, ivec2(index/float(size)*512.,0), 0).x;\n    \n    float base = texelFetch(iChannel0, ivec2(0.*512.,0), 0).x;\n    \n    float cpi = smoothstep((0.1 + base*0.05), 0.15 + f * 0.01, len);\n       \n\tif (len < 0.15 + f * 0.1 && len > (0.1 + base*0.05) && mod(delta + modifier, 1./float(size)) < 0.035 && (delta) > 0.009)\n\t\tcolor = vec3(1.-delta, delta*0.3, delta);\n    \n    color *= cpi;\n    \n    if (len < 0.1 + base * 0.05 && len > 0.09 + base * 0.05)\n      color = vec3(1);\n    \n    float eq = texelFetch(iChannel0, ivec2(px.x*512.,1), 0).x;\n        \n    if (abs(px.y*ar-0.54+eq*0.1) < 0.008 && \n        px.x > 0.5-(0.1+base * 0.05-0.01) &&\n        px.x < 0.5+(0.1+base * 0.05-0.01)) {\n        color = vec3(eq,1.-eq,eq*eq);\n    }\n    \n\tfragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 28327,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/twisted-events/mandalorian-darkside-glasgow-ttrp?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}