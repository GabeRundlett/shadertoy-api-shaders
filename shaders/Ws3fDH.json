{
    "Shader": {
        "info": {
            "date": "1692557123",
            "description": "Infinite Space of Torques and some bubbles crawling along them idk\n\nUsing https://www.shadertoy.com/view/WtGXDD raymarching template",
            "flags": 0,
            "hasliked": 0,
            "id": "Ws3fDH",
            "likes": 10,
            "name": "Torques",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "emymin",
            "viewed": 161
        },
        "renderpass": [
            {
                "code": "\n#define MAX_STEPS 1000\n#define MAX_DIST 100000.\n#define SURF_DIST .001\n#define PI 3.14159\n\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,233.53));\n    p += dot(p, p+23.234);\n    return fract(p.x*p.y);\n}\n\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat repeat(float x, float margin){\n    return (mod(x+0.5*margin,margin)-0.5*margin);\n}\n\nvec2 repeat_id(float x, float margin){\n    float p = mod(x+0.5*margin,margin)-0.5*margin;\n    float id = floor((x+0.5*margin)/margin);\n    return vec2(p,id);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\nfloat archimedes(vec3 p){\n    p.y = repeat(p.y,2.);\n    p.xz = p.xz*Rot(p.y*PI*0.5);   \n    float d = sdBox(p, vec3(1));\n    return d-.5;\n}\n\nvec2 GetDist_id(vec3 p) {\n    vec2 ax = repeat_id(p.x,20.);\n    vec2 az = repeat_id(p.z,20.);\n    vec3 repeatedspace = vec3(ax.x,p.y,az.x);\n    vec3 randomoffsetspace = repeatedspace+vec3(0.,1.,0.)*Hash21(vec2(ax.y,az.y))*20.+vec3(0.,1.,0.)*(80.*Hash21(vec2(az.y,ax.y)) + iTime*-10.  );\n    randomoffsetspace.y = (repeat(randomoffsetspace.y,100.))/1.5;\n    float sphered = length(randomoffsetspace)-Hash21(vec2(ax.y,az.y))*8.;\n    float d=archimedes(repeatedspace);\n    float id=0.;\n    d=opSmoothUnion(d,sphered,2.5);\n    return vec2(d*.5,sphered/d);\n}\nfloat GetDist(vec3 p){\n\treturn vec2(GetDist_id(p)).x;   \n}\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    float id=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        vec2 dist = GetDist_id(p);\n        id = dist.y;\n        float dS = dist.x;\n        dO += dS*1.;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return vec2(dO,id);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col;\n    vec3 ro = vec3(5.+sin(iTime/10.)*100., 0,5.+cos(iTime/10.)*100.);\n    //vec3 ro = vec3(10.,0,0);\n    //ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, ro+vec3(2.*PI,0,10), 1.);\n\n    vec2 result = RayMarch(ro, rd);\n    float d = result.x;\n    float id = result.y;\n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        \n        col = clamp(mix(vec3(1,0,0),vec3(0,0,0),id/1000.),vec3(0,0,0),vec3(1,0,0));\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col += dif;\n        col *= 1.-(d/200.);\n            //col*=id/float(MAX_STEPS)*10.;\n            //col=vec3(id);\n    }\n    if(d<0.){col=vec3(0.5,0.5,0.5);}\n    col = pow(col, vec3(.4545));\t// gamma correction\n    //col=vec3(id);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}