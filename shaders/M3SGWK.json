{
    "Shader": {
        "info": {
            "date": "1708881176",
            "description": "Mouse to look around, different modes for development, evvvvil fractals with shane lighting and patterns",
            "flags": 32,
            "hasliked": 0,
            "id": "M3SGWK",
            "likes": 32,
            "name": "Then it already happend..",
            "published": 3,
            "tags": [
                "fractal",
                "truchet",
                "kifs",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 1028
        },
        "renderpass": [
            {
                "code": "/*\nDevelopment Modes\n--------------------------\n1. Object Before Fractal\n2. Fractal Fly Through     \n3. Mouse Adjust Fractal_P\n\n\n//0.72, 0.98\n//0.38, 0.73\n//0.57, 0.89\n0.60,0.83\n*/\n\n#define FAR 50.\n#define DEV_MODE 2.\n\n\nvec2[] Camera_Positions = vec2[](\nvec2(0.37, 0.71),\nvec2(0.63, 0.79),\nvec2(0.72, 0.95),\nvec2(0.72, 0.95),//vec2(0.45, 0.75),\nvec2(0.39, 0.74),\nvec2(0.40, 0.72),\nvec2(0.41, 0.74)\n);\n\nstruct Object \n{ \n    float rough; \n    vec3 color; \n}; \n\nObject[] Materials = Object[](\n    //base material\n    Object(0.6, vec3(0.99,0.55,0.1)),\n    //low reflection material\n    Object(0.2, vec3(0.)),   \n    //no reflection material\n    Object(0.0, vec3(0.99,0.05,0.1)),\n    //bumped texture material\n    Object(0.4, vec3(0.8,0.,0.1)),\n    //cylinders / rings\n    Object(0., vec3(.99,0.,0.))\n);\n\n\nvec3 DEV_POSITION = vec3(0.,1.,-5.);\nfloat glow = 0.;\nvec3 path(float z){ \n    vec3 ro;\n    \n    if(DEV_MODE == 1.){\n        ro = DEV_POSITION;\n    }\n    \n    else if(DEV_MODE > 1.){\n        ro = vec3(0., 1., iTime*2.);;//+vec3(60., -10., 0);\n    }\n    \n    return ro;\n}\nfloat surface1(vec3 p){\n    return 0.1*(abs(fract(p.z*4.)-0.5)+abs(fract(p.x*4.)-0.5)),4.5;\n     \n}\nvec2 tile(vec3 p){\n    if(DEV_MODE == 1.){\n        if(iMouse.z < 0.5){\n            p.zx *= rot(iTime);\n        }\n     }\n     //Black Block\n     float edgeEnd = 0.9;\n     vec2 t = vec2(rbEdge(p,vec3(2.5,0.2,2.5), 0.1, 0.95, edgeEnd),1.);\n     vec2 h = vec2(rb(p,vec3(2.5*edgeEnd,0.2,2.5*edgeEnd), 0.1),3.);\n     addH;\n     h = vec2(rbEdge(p,vec3(2.6,0.15,2.6), 0.05, 1., 0.95),0.);\n     addH;\n     h = vec2(rb(p,vec3(2.62,0.02,2.62), 0.05),1.);\n     addH;\n     \n     \n     //p = p.zyx;\n     //p.x = mod(p.x,1.)-0.5;\n     //p.y -= 1.;\n     float rad = 4.0;\n     h = vec2(ccEdge( p, 0.4, rad),1.);\n     h.x = smax(h.x,-cc( p, 0.6, rad*0.9),0.05);\n     addH;\n     h = vec2(cc( p, 0.23, rad*0.975),4.);\n     h.x = smax(h.x,-cc(p, 0.6, rad*0.925),0.05);\n     addH;\n     \n     return t;\n}\nvec3 fractal_position(vec3 p){\n    \n    float mx = 0.65;//iMouse.x/iResolution.x;\n    float my = 0.8;//iMouse.y/iResolution.y;\n    \n    //0.72, 0.98\n    //0.38, 0.73\n    //0.57, 0.89\n    //.60,0.83\n    //0.68, 0.77\n    vec2 t = vec2(iTime*0.2,iTime*0.2+1.);\n    vec2 tt = (mod(floor(t), 7.));\n    vec2 mm = mix(Camera_Positions[int(tt.x)],\n                   Camera_Positions[int(tt.y)],\n                   smoothstep(0.7,1.,fract(t.x)));\n    //vec2 mm = Camera_Positions[0];\n    \n    if(DEV_MODE == 3.){\n        mm = iMouse.xy/iResolution.xy;\n    }\n    \n    if(DEV_MODE > 1.){\n        \n        p.xz = mod(p.xz,40.)-20.;\n        for(int i=0;i<6;i++){//3,4 or 5 are all good bros\n            p.xz*=rot(mm.x*float(i));\n            p.xy*=rot(mm.y*float(i));\n            //p=abs(p)-vec3(4.9,5.,5.);\n            //p=abs(p)-vec3(4.8,5.,5.5);\n            p=abs(p)-vec3(2.6,5.2,5.1);//this idk\n            p=abs(p)-vec3(4.8,5.,5.5);\n\n        }\n    }\n    return p;\n}\nvec2 map(vec3 p){\n    vec3 op = p;\n    p = fractal_position(p);\n    vec2 t = vec2(tile(p));\n    if(DEV_MODE > 1.){\n        t.x = smax(t.x, -(length(op.xy)-2.), 0.1);\n    }\n    return t;\n}\nvec2 mapUV(vec3 p, vec3 n){\n    if(DEV_MODE == 1.){\n        if(iMouse.z < 0.5){\n            p.zx *= rot(iTime);\n            n.zx *= rot(iTime);\n        }\n    }\n    \n    p = fractal_position(p);\n    p = fract(p*0.3);\n    n = fractal_position(n);\n    n = abs(n);\n    //n = n*0.5+0.5;\n    return (p.xy*n.z + p.xz*n.y + p.yz*n.x)/(n.x+n.y+n.z);  \n}\nvec2 mapCylUV(vec3 p, vec3 n){\n    if(DEV_MODE == 1.){\n        if(iMouse.z < 0.5){\n            p.zx *= rot(iTime);\n            n.zx *= rot(iTime);\n        }\n    }\n    \n    p = fractal_position(p);\n    float y = fract(abs(p.y+0.5))*0.5;\n    float a = fract(((atan(p.z/p.x)+PI)/(2.*PI))*4.);\n    return vec2(a,y);\n}\nvec2 trace(vec3 ro, vec3 rd){\n   \tvec2 t = vec2(0.),dist;\n    for(int i=0; i<96; i++)\n    {\n         dist = map(ro + rd*t.x);\n         \n         if(dist.x<0.01 || t.x > FAR){break;}\n         //turn the step down if we use smoothstep in our map functions\n         t.x += dist.x*0.95;\n         t.y = dist.y;\n       // glow += 0.1/(0.1+dist.x+20.)*float(dist.y>3.);\n       // glow += 0.001/exp(-dist.x*2.);\n    }\n return t;   \n}\nvec3 normal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = map(p).x - \n        vec3(\n            map(p-e.xyy).x, \n            map(p-e.yxy).x,\n            map(p-e.yyx).x\n            );\n    \n    return normalize(n);\n}\nfloat calculateAO(in vec3 pos, in vec3 nor){\n    //function from shane\n\tfloat sca = 2.0, occ = 0.0;\n    for( int i=0; i<5; i++ ){\n    \n        float hr = 0.01 + float(i)*0.5/4.0;        \n        float dd = map(nor * hr + pos).x;\n        occ += (hr - dd)*sca;\n        sca *= 0.7;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\nfloat bumpSurf3D( in vec3 p, in vec3 n, float id){\n    vec2 uv = id == 4. ? mapCylUV(p,n) : mapUV(p,n);\n    return texture(iChannel1,uv).r;\n    \n}\nvec3 doBumpMap(in vec3 p, in vec3 nor, float bumpfactor, float id){\n    //this function is from shane\n    const vec2 e = vec2(0.01, 0);\n    float ref = bumpSurf3D(p, nor,id);                 \n    vec3 grad = (vec3(bumpSurf3D(p - e.xyy, nor,id),\n                      bumpSurf3D(p - e.yxy, nor,id),\n                      bumpSurf3D(p - e.yyx, nor,id) )-ref)/(2.*e.x);                     \n          \n    grad -= nor*dot(nor, grad);          \n                      \n    return normalize( nor + grad*bumpfactor );\n\t\n}\nvec3 lighting(vec3 sp, vec3 sn, vec3 lp, vec3 rd, float id){\n    vec3 color;\n    //vector from hit position to light position (shane)\n    vec3 lv = lp - sp;\n    //length of that vector (shane)\n    float ldist = max(length(lv), 0.00);\n    //direction of that vector (shane)\n    vec3 ldir = lv/ldist;\n    //attenuation (shane)\n    float atte = 1.0/(1. + 0.02*ldist*ldist );\n    //diffuse color\n    if(id == 4.){\n       sn = doBumpMap(sp,sn,0.6,id);\n    }\n    float diff = max(dot(ldir, sn),0.);\n    //specular reflection (shane)\n    float spec = pow(max(dot(reflect(-ldir, sn), -rd), 0.0), 10.);\n\t//ambient occlusion\n    float ao = calculateAO(sp, sn);\n    //reflecton\n    vec3 refl = reflect(rd, sn);\n    //getting reflected and refracted color froma cubemap, only refl is used\n    vec4 reflColor = texture(iChannel0, refl);\n    //orage specular\n    vec3 hotSpec = vec3(0.9,0.5, 0.2);\n    \n    vec2 uv = id == 4. ? mapCylUV(sp,sn) : mapUV(sp,sn);\n    float tex = texture(iChannel1,uv).r;\n\n    //Materials[2].color = mix(vec3(0.,0.7,0.99),vec3(0.9,0.45,0.3),pow((sin(sp.y)+sin(sp.z))+2.,0.9));\n    Materials[3].color = tex*vec3(1.,0.45,0.1);\n    Materials[3].rough = smoothstep(0.9,0.1,tex)*0.8;;    \n    Materials[4].rough = 0.6*smoothstep(0.9,0.1,tex)*0.8;//tex;//*vec3(1.,0.45,0.1);\n    //apply color options and add refl/refr options\n    vec3 obj_color = Materials[int(id)].color;\n    float rough = Materials[int(id)].rough;\n    color = obj_color*0.1+(diff*obj_color +  spec*hotSpec +reflColor.xyz*rough )*atte;\n    return color*ao;   \n    \n}\nfloat vig(vec2 uv){\n    uv *=  1.0 - uv.yx;\n    float vig = uv.x*uv.y * 50.0;\n    return pow(vig, 0.3); \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n\tvec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n\t//uv = normalize(uv) * tan(asin(length(uv) *1.));//fisheye\n    \n\t//Camera Setup.\n\tvec3 lk = path(0.);  \n\tvec3 ro = lk + vec3(0, .05, -.25);\n \tvec3 lp = ro + vec3(0, 3.75, 10);\n    vec2 m = (iMouse.xy - iResolution.xy*.5)/iResolution.y;\n    \n    float FOV = 1.57;\n    vec3 fwd = normalize(lk-ro);\n    vec3 rgt = normalize(vec3(fwd.z, 0., -fwd.x )); \n    vec3 up = cross(fwd, rgt); \n    vec3 rd = normalize(fwd + FOV*uv.x*rgt + FOV*uv.y*up);    \n\t\n    if(iMouse.z > 0.5){\n        //rd.yz *= rot(-m.y*2.);\n        if(DEV_MODE == 1.){\n            ro.xz *= rot(-m.x*4.);\n            rd.xz *= rot(-m.x*4.);\n        }\n        else if(DEV_MODE == 2.){\n            rd.yz *= rot(-m.y*2.);\n            rd.xz *= rot(-m.x*4.);\n        }\n    }\n    else{\n        if(DEV_MODE == 2.){\n            /*float tt = iTime*0.2;\n            float t0 = floor(tt);\n            float t0b = floor(tt+1.);\n            float t1 = hash11(t0)-0.5;\n            float t2 = hash11(t0b)-0.5;//t1+1.;\n            float t = mix(t1,t2,smoothstep(0.5,0.6,fract(tt)));\n            rd.yz *= rot(t*2.);\n            rd.xz *= rot(t*2.);*/\n            rd.xy *= rot(sin(iTime*0.5)*0.1);\n        }\n    }\n    vec3 color = 2.*mix(vec3(0.9, 0.5, 0.2)*4., vec3(0.0)-0.4, pow(abs(rd.y), 1./3.))*(1./pow(abs(length(rd.xy)-0.4), 1./3.))/8.;\n    \n    vec2 t = trace(ro, rd);\n    vec3 sp = ro + rd*t.x;\n    vec3 sn = normal(sp);\n    if(t.x < FAR){\n    color = lighting(sp, sn, lp, rd, t.y)*1.3;\n        float far = smoothstep(0.0, 1.0, t.x/90.);\n        vec3 sky = 2.*mix(vec3(0.9, 0.5, 0.2)*4., vec3(0.0)-0.4, pow(abs(rd.y), 1./3.))/4.;//*(1./pow(abs(length(rd.xy)-0.4), 1./3.))/8.;\n        color = mix(color, sky, far);\n    }\n    \n    color = pow(color,vec3(0.65));\n    //color.xyz *= vig(fragCoord.xy/iResolution.xy);\n    \n    if(DEV_MODE == 3.){\n        color += texture(iChannel2,uv).rgb;\n    }\n\tfragColor = vec4(color,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415926\n#define addH t = t.x < h.x ? t : h;\n#define S smoothstep\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat smax(float a, float b, float k)\n{\n    return smin(a, b, -k);\n}\nfloat rnd(vec2 p){\n    vec2 seed = vec2(13.234, 72.1849);\n    return fract(sin(dot(p,seed))*43251.1234);    \n}\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nfloat rb(vec3 p, vec3 s, float r) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.) - r;\n}\nfloat rbEdge(vec3 p, vec3 s, float r, float start, float end) {\n    vec2 xzEdge = abs(p.xz)/s.xz;\n    s.y -= S(start,end,xzEdge.x)*S(start,end,xzEdge.y)*s.y;\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.) - r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat cc( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - 0.03;\n}\n\nfloat ccEdge( vec3 p, float h, float r )\n{\n  float rEdge = r-smoothstep(0.9,0.8,abs(p.y)/h)*0.1;\n  \n \n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(rEdge,h);\n  float f = min(max(d.x,d.y),0.0) + length(max(d,0.0));\n  \n  return f-0.01;\n  \n}\n\nmat2 rot(float a){\n     float c = cos(a),s = sin(a);\n     return mat2(c, -s, s, c);\n}\n        ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n#define LEVELS 3.\n#define EPS 2./iResolution.y\n#define EPS_N 10./iResolution.y\n\n#define SCALE 3.\n\n/*\n\nThe checkerboard shifting: Deciding which of the two\ncircles in a cell will be on top and below. You start\nwith always the upper right circle ontop and \nthe lower left below. Then view the cells as a checker\nboard and flip the order of all the white squares on \nthe board.\n\nThe part that almost had me was shading because you\nhave to rotate the coordinate systems back the other\nway but only after you do the checkerboard shifting and\ncreation of the circles. \n\nAnd THEN it still matters how you use atan since odd \nmultiples of the result will show a discontinuity at \nthe cell borders when passed through sin.\n\n*/\n\n\n\n\nvec2 concentricCircles(vec2 st, float r, float num, float type, vec2 checker,float scale){\n    float d1 = \n            smax(dot(st,vec2(0.7,-0.7)),\n            smax(dot(st,vec2(-0.7,0.7)),\n            smax(dot(st,-vec2(0.7,0.7)),\n            smax(dot(st,vec2(0.7,0.7)),\n            smax(abs(st.x),\n            abs(st.y),0.1),0.1),0.1),0.1),0.1);\n    float d2 = length(st);\n    \n    float d = type < 0.90 \n              ? mix(d1,d2,sin(iTime*1.9)*0.5+0.5)\n              : mix(d2,d1,cos(iTime*1.99 + type)*0.5+0.5);\n    float cutoff = smoothstep(r+EPS,r-EPS,d*(1.0+0.02*(scale-0.5)));\n    float circles = sin(d*num*PI);\n    return vec2(smoothstep(0.,1.,abs(circles*cutoff))+0.2*cutoff,d);\n}\n\nfloat overlappingConcentricCircles(vec2 st, float r, float num, vec2 checker, float a, float scale){\n    float type = a;\n    vec2 sp1 = st-vec2(1.,1.)+vec2(2.,2.)*checker;\n    vec2 group_1 = concentricCircles(sp1, r, num,type,checker,scale);\n    vec2 sp2 = st+vec2(1.,1.)-vec2(2.,2.)*checker;\n    vec2 group_2 = concentricCircles(sp2, r, num, type,checker,scale);\n    \n    float total = mix(group_1.x, group_2.x, smoothstep(0.1,0.2,group_2.x));\n    \n    \n    return total;\n}\nfloat quadTree(vec2 st){\n\n    float s = 1.;\n    float seed;\n    vec2 fr, fl;\n    float circle_num =  4.;\n    for(float i = 0.; i <= LEVELS; i ++){\n        fr = fract(st)-0.5;\n        fl = floor(st);\n        seed = rnd(fl); \n        seed = seed + 0.2*mod(fl.x,2.) + 0.2*mod(fl.y,2.);\n        if( seed > 0.7 || LEVELS - i == 1.){\n            float a =  (floor(rnd(fl*325.2435)*4.)/4.)*PI*2.;\n            fr *= rot(a);\n            return overlappingConcentricCircles(fr*2.,\n                                                2., \n                                                circle_num,\n                                                mod(fl,2.),\n                                                a,\n                                                s);\n        }\n        \n        s *= 2.;\n        st *= 2.;\n        circle_num /= 2.;\n    }\n    return 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy-iResolution.xy*0.5)/iResolution.y;\n    vec3 col;\n\n    float d = quadTree(uv*SCALE);\n\n    col = mix(vec3(0.,0.,0.), vec3(0.7,0.1,0.1)*1.3,  smoothstep(0.59,.6,d)); \n    //col = mix(col, vec3(0.45,0.3,0.1)*0.8, smoothstep(0.3,0.299,d));\n    //col = mix(col, vec3(0.), smoothstep(0.,3.9,d));\n    col = mix(col, vec3(0.1), smoothstep(.8,.3,abs(d-0.6)));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define LETTER_SIZE 1./16.\n#define STEP_SIZE 1./15.\n#define FIRST_LETTER 64.\n#define FIRST_NUMBER 48.\n\n#define _a 1.\n#define _b 2.\n#define _c 3.\n#define _d 4.\n#define _e 5.\n#define _f 6.\n#define _g 7.\n#define _h 8.\n#define _i 9.\n#define _j 10.\n#define _k 11.\n#define _l 12.\n\n#define _m 13.\n#define _n 14.\n#define _o 15.\n#define _p 16.\n#define _q 17.\n#define _r 18.\n#define _s 19.\n#define _t 20.\n#define _u 21.\n#define _v 22.\n#define _w 23.\n#define _x 24.\n#define _y 25.\n#define _z 26.\n\nvec2 numToCoord(float a){\n    return vec2( mod(a,16.), 15.-floor(a/16.) );\n}\n\nvec3 C(vec2 uv, vec2 start, inout float moveX,float num){\n    moveX -= STEP_SIZE/2.;\n    if(uv.x < start.x           || \n       uv.x > start.x+STEP_SIZE || \n       uv.y < start.y           || \n       uv.y > start.y+STEP_SIZE){\n       \n       return vec3(0.);\n    }\n    \n    uv -= start; uv /= STEP_SIZE; uv *= LETTER_SIZE;\n    uv += vec2(LETTER_SIZE*numToCoord(num));\n    return textureGrad(iChannel1,uv,dFdx(uv),dFdy(uv)).rrr;\n}\n\n//takes a float and prints the first 4 digits\nvoid generateDigits(vec2 uv, vec2 start, float moveX, \n                     float theNumber, float theSign, inout vec3 col){\n    \n    float s = 1.;\n    float count = 0.;\n    \n    float FN = fract(theNumber)*100.;\n    float ones = floor(mod(FN,10.));\n    //after decimal\n    col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER + ones);\n    float tens = floor(FN/10.);\n    col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER + tens);\n    //decimal point\n    col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER -2.);\n    FN = floor(theNumber);\n    //before decimal\n    while(FN >= 1.){\n        float n = floor(mod(FN,10.));\n        col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER + n);\n        FN /= 10.;\n    }\n    \n    //col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER -3. -2.*step(0.,theSign));\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 col = vec3(0.);\n    generateDigits(uv, vec2(0.,0.4), 0.7, m.x, float(1.), col);\n    generateDigits(uv, vec2(0.,0.4), 0.8, m.y, float(1.), col);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}