{
    "Shader": {
        "info": {
            "date": "1454733853",
            "description": "rough 3d smoke filling up a room",
            "flags": 32,
            "hasliked": 0,
            "id": "MdG3Dw",
            "likes": 10,
            "name": "rough 3d smoke simulation",
            "published": 3,
            "tags": [
                "3d",
                "simulation",
                "smoke"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 882
        },
        "renderpass": [
            {
                "code": "//Ethan Shulman 2016\n\n\n//VOLUME_SIZE.x*VOLUME_SIZE.y*VOLUME_SIZE.z must be smaller than iResolution.x*iResolution.y\nconst ivec3 VOLUME_SIZE = ivec3(40,20,40);\nvec3 NORMALIZED_VOLUME_SIZE = normalize(vec3(VOLUME_SIZE));\nvec3 lightDir = normalize(vec3(1,-4,2));\n\n\nvec2 w2t(in vec3 p) {\n    int id = int(p.x)+int(p.y)*VOLUME_SIZE.x+int(p.z)*(VOLUME_SIZE.x*VOLUME_SIZE.y);\n    return vec2(fract(float(id)/iResolution.x), float(id/int(iResolution.x))/iResolution.y)+.5/iResolution.xy;\n}\nvec3 t2w(in vec2 uv) {\n    int id = int(uv.x*iResolution.x)+int(uv.y*iResolution.y)*int(iResolution.x);\n    return vec3( mod(float(id),float(VOLUME_SIZE.x)),\n                 mod(float(id/VOLUME_SIZE.x),float(VOLUME_SIZE.y)),\n                 float(id/(VOLUME_SIZE.x*VOLUME_SIZE.y)) );\n}\n\nvec2 rot(in vec2 v, in float ang) {\n    float si = sin(ang);\n    float co = cos(ang);\n    return v*mat2(si,co,-co,si);\n}\n\n\nfloat rand(vec3 s) {\n    \n    //Thanks to Shane for the improved random function\n    return fract(cos(dot(s, vec3(7, 157, 113)))*43758.5453);\n\n}\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat room(vec3 rp) {\n    \n    float d = udBox(abs(rp)-vec3(0.,4.,0.),vec3(40.,1.25,40.));\n    return min(length(rp)-8.,\n        max(-min(length(rp-vec3(10.,-3.,15.))-5., length(rp-vec3(-10.,3.,-15.))-5.),\n               d));\n}\n\nfloat rayBox(in vec3 rp, in vec3 rd, in vec3 lb, in vec3 rt) {\n    vec3 df = 1./rd;\n    \n\tvec3 t_lb = (lb-rp)*df,\n         t_rt = (rt-rp)*df;\n\n    float tmin = max(max(min(t_lb.x, t_rt.x), min(t_lb.y, t_rt.y)), min(t_lb.z, t_rt.z));\n    float tmax = min(min(max(t_lb.x, t_rt.x), max(t_lb.y, t_rt.y)), max(t_lb.z, t_rt.z));\n\n    if (tmax < 0.) return -1.;\n\tif (tmin > tmax) return -1.;\n\n\treturn tmin;\n}\n\n\nvec3 smokeNormal(vec3 p) {\n    vec2 NE = vec2(2., 0.);\n    #define s(c) length(texture(iChannel0,w2t(c)).xyz*2.-1.)\n\treturn normalize(vec3( s(p+NE.xyy)-s(p-NE.xyy),\n                          s(p+NE.yxy)-s(p-NE.yxy),\n                          s(p+NE.yyx)-s(p-NE.yyx) ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 R = iResolution.xy,\n        uv = (fragCoord*2.-R)/R.y;\n    \n    float rotTime = 2.+iTime*.64;\n    /*if (iMouse.w > 0.) {\n        rotTime = (iMouse.x/iResolution.x)*6.28;\n    }*/\n    \n    vec3 rp = vec3(sin(rotTime)*(float(VOLUME_SIZE.x)+10.),0.,cos(rotTime)*(float(VOLUME_SIZE.z)+10.));\n    \n    vec3 rd = normalize(vec3(uv*.5,-1.));\n    \n    rd.yz = rot(rd.yz,1.5);\n    rd.xz = rot(rd.xz,-rotTime - 4.7);\n    \n        \n    #define PRECISION .5\n    \n    float dst = rayBox(rp,rd,-vec3(VOLUME_SIZE)/2.,vec3(VOLUME_SIZE)/2.);\n    if (dst > -1.) {\n        \n        rp += rd*dst;\n       \n        float traceDst = 0.;\n       \tfor (int i = 0; i < 86; i++) {\n            vec3 p = rp+rd*traceDst;\n            if (abs(p.x) > float(VOLUME_SIZE.x)/2.+.05 ||\n                abs(p.y) > float(VOLUME_SIZE.y)/2.+.05 ||\n                abs(p.z) > float(VOLUME_SIZE.z)/2.+.05) break;\n            \n            float d = room(p);\n            if (d < .01) break;\n            \n            traceDst += d;\n        }\n        vec3 p = rp+rd*traceDst;\n        \n        vec4 c = vec4(0.);\n        float sum = 0., nSamples = 0.;\n        for (int i = 0; i < 128; i++) {\n            float rndStep = .5+.5*rand(rp);\n            rp += rd*rndStep;\n            if (abs(rp.x) > float(VOLUME_SIZE.x)/2. || \n                abs(rp.y) > float(VOLUME_SIZE.y)/2. || \n                abs(rp.z) > float(VOLUME_SIZE.z)/2.) break;\n            \n            sum += rndStep;\n            if (sum > traceDst) break;\n        \t\n            \n            vec3 srp = rp+cos(rp.yzx*1280.345)*rand(rp);\n            vec4 s = texture(iChannel0, w2t(srp+vec3(VOLUME_SIZE)/2.));\n            s.w = length(s.xyz*2.-1.);\n            s.xyz = vec3(.25+max(0.,dot(lightDir,smokeNormal(srp)))*.75);\n            c += s;\n            \n        \tnSamples++;\n        }\n\t\t\n        c = pow((c/nSamples), vec4(.65));\n        c.w = pow(c.w*4., .65);\n        \n        vec3 tc = vec3(length(max(abs(mod(abs(rp),6.)-3.)-2.5,0.)));\n        float roomD;\n        if ((roomD = room(p)) < .05) {\n            tc = vec3(.76,.94,.85)*(.25+.75*max(0., (roomD-room(p+lightDir*.004))/.004));\n        }\n        \n        fragColor = vec4(mix(tc,\n            \t\t\t\t c.xyz, clamp(c.w,0.,1.) ), 1.);\n        \n    } else fragColor = vec4(0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Ethan Shulman 2016\n\n//click and move mouse to interact\n\n\n#define AUTO_CURSOR\n\n//VOLUME_SIZE.x*VOLUME_SIZE.y*VOLUME_SIZE.z must be smaller than iResolution.x*iResolution.y\nconst ivec3 VOLUME_SIZE = ivec3(40,20,40);\n\nvec2 w2t(in vec3 p) {\n    int id = int(p.x)+int(p.y)*VOLUME_SIZE.x+int(p.z)*(VOLUME_SIZE.x*VOLUME_SIZE.y);\n    return vec2(fract(float(id)/iResolution.x), float(id/int(iResolution.x))/iResolution.y)+.5/iResolution.xy;\n}\nvec3 t2w(in vec2 uv) {\n    int id = int(uv.x*iResolution.x)+int(uv.y*iResolution.y)*int(iResolution.x);\n    return vec3( mod(float(id),float(VOLUME_SIZE.x)),\n                 mod(float(id/VOLUME_SIZE.x),float(VOLUME_SIZE.y)),\n                 float(id/(VOLUME_SIZE.x*VOLUME_SIZE.y)) );\n}\n\nvec2 rot(in vec2 v, in float ang) {\n    float si = sin(ang);\n    float co = cos(ang);\n    return v*mat2(si,co,-co,si);\n}\n\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\nfloat room(vec3 rp) {\n    \n    \n    float d = udBox(abs(rp)-vec3(0.,4.,0.),vec3(40.,1.,40.));\n    return min(length(rp)-8.,\n        max(-min(length(rp-vec3(10.,-3.,15.))-5., length(rp-vec3(-10.,3.,-15.))-5.),\n               d));\n\n}\n\n\nvec3 fractmod(vec3 p, vec3 f) {\n    return fract(p/f)*f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float frameTime = float(iFrame)/360000.;\n    if (iFrame < 60) {\n        fragColor = vec4(.5,.5,.5, 0.);\n        //fragColor = texture(iChannel1, fragCoord/iResolution.xy);\n        return;\n    }\n    \n    //const float delay = 5.;\n    //if (mod(float(iFrame),delay+1.) > 1.) {\n    //    discard; return;\n    //}\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n\tvec3 wp = t2w(uv);\n    \n    if (wp.x < 0. || wp.x > float(VOLUME_SIZE.x) ||\n        wp.y < 0. || wp.y > float(VOLUME_SIZE.y) ||\n        wp.z < 0. || wp.z > float(VOLUME_SIZE.z))\n    { discard; return; }\n\n    if (iTime < 5. && length(wp-vec3(VOLUME_SIZE)/2.+vec3(0.,-7.,15.)) < 1.) {\n        fragColor = vec4( (-normalize(.5+wp-vec3(VOLUME_SIZE)/2.+vec3(0.,-3.,0.)))*.5+.5, .4);\n        return;\n    }\n    \n    \n    const float total = 3.*3.*3. - 1.;\n    vec4 c = vec4(0.);\n    for (float x = -1.; x < 2.; x++) {\n        for (float y = -1.; y < 2.; y++) {\n            for (float z = -1.; z < 2.; z++) {\n                vec3 v = vec3(x,y,z);\n                if (length(v) == 0.) continue;\n                vec3 p = v+wp,\n                    ap = abs(p-vec3(VOLUME_SIZE)/2.);\n                if (ap.x > float(VOLUME_SIZE.x)/2. ||\n                    ap.y > float(VOLUME_SIZE.y)/2. ||\n                    ap.z > float(VOLUME_SIZE.z)/2.) continue;\n                if (room(p-vec3(VOLUME_SIZE)/2.) < .05) continue;\n                vec4 n = texture(iChannel0, w2t(p))*2.-1.;\n                c += vec4(normalize(-v),n.w)*length(n.xyz)*.75+2.15*n*ceil(max(0.,dot(normalize(v),normalize(n.xyz))));\n            }\n        }\n    }\n\t\n\n    c.xyz = clamp(c.xyz/total, -1., 1.);\n    c.xyz = c.xyz*.5+.5;\n    \n    fragColor = c;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}