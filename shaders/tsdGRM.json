{
    "Shader": {
        "info": {
            "date": "1568129376",
            "description": "valid for any attractive force ( electrostatic, gravity, etc ), but relativity (for this, see [url]https://www.shadertoy.com/view/wdt3zM[/url]).\n\n( is my Verlet integration scheme correct ? I should get some closed elliptic trajectories... Or needs RK4? )",
            "flags": 32,
            "hasliked": 0,
            "id": "tsdGRM",
            "likes": 11,
            "name": "trajectory - 2D attractor",
            "published": 3,
            "tags": [
                "simulation",
                "physics"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 622
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 U )\n{\n    O = sqrt( T(U) );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2  C = vec2(.5,0);        // attractor location\nfloat E = 10.,               // attractive intensity (in normalized coordinates)\n     dt = 1./600.;           // time step\n\nvec2 F(vec4 O) {             // --- Force ( O.xy = pos )\n    vec2 F = C - O.xy; \n    float d = length(F);\n    return E * F / (d*d*d);\n}\nvec4 physics(vec4 O) {       // --- simple Newton step\n    O.zw += F(O) * dt;       // velocity\n    O.xy += O.zw * dt;       // location\n    return O;\n}\nvoid mainImage( out vec4 O, vec2 u ) // --- simulates trajectories\n{\n    O = T(u);\n    \n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y;\n    \n    if ( T(2).xy != R ) {\n        O -= O;\n        if (u.x<2.) O = vec4(-.5,U.y, 3.,0.);// init positions .xy and velocities .zw\n      //else if (u.x<2.) O = vec4(U,0,0); \n        else if (u==vec2(2.5)) O.xy = R;     // for testing window size change\n            else O += .3*S( length(U-C) - .01 ); // draw object \n        return;\n    }\n    if (u==vec2(2.5)) return;\n    if ( u.x > 3. && iMouse.z > 0. ) O -= O; // click to clear screen\n    \n    if (u.x==.5) {                           // ---simulates physics\n        dt /= 2.; vec4 P = physics(O); dt *= 2.; // https://en.wikipedia.org/wiki/Verlet_integration#Velocity_Verlet\n        O.xy += P.zw * dt;\n        O.zw =  P.zw + F(O)*dt/2.;\n        //O.zw  = 2.*P.zw; O.xy += O.zw * dt;\n    }\n    else if (u.x==1.5)                       // prev position\n        O = T(vec2(.5,u.y));\n    else {                                   // --- draw rays\n        O *= 1. - .4*dt;                     // fade past\n        float d = 1e5, i_, i=0., v;\n        for (; i < R.y; i += 10. ) {\n            v = line( U, T(vec2(1,i)).xy, T(vec2(0,i)).xy);\n            if ( v < d ) d = v, i_ = i;\n        }\n        O += S( sqrt(d) -0./R.y ) * hue(i_/R.y);\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\n\n// utils from https://www.shadertoy.com/view/llySRh\n\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    float h = dot(p, b) / dot(b, b),                  // proj coord on line\n          c = clamp(h, 0., 1.);\n    p -= b * h; return h==c ? dot(p,p): 1e5;          // distÂ² to segment\n}\n\n#define S(v) smoothstep( 3./R.y, 0., v)\n\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}