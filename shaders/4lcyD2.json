{
    "Shader": {
        "info": {
            "date": "1534018013",
            "description": "a dilation kernel run in a feedback loop",
            "flags": 32,
            "hasliked": 0,
            "id": "4lcyD2",
            "likes": 7,
            "name": "dilate dilate",
            "published": 3,
            "tags": [
                "convolution",
                "feedback",
                "dilate",
                "kernel"
            ],
            "usePreview": 0,
            "username": "aferriss",
            "viewed": 907
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 res = iResolution.xy;\n    vec2 uv = fragCoord / res;\n    vec4 t = texture(iChannel0, uv);\n    fragColor = fract(t*0.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float l = length(uv - .5);\n    l = 1.0 - smoothstep(0.2, 0.21, l);\n    fragColor = vec4(l,l,l,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 offset [9];\nfloat kernel [9];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 res = iResolution.xy;\n    vec2 step = 0.99 / res;\n    vec2 uv = fragCoord / res;\n    vec4 base = texture(iChannel1, uv);\n    vec2 coord = uv;    \n    offset[0] = vec2(-step.x, -step.y);\n    offset[1] = vec2(0.0, -step.y);\n    offset[2] = vec2(step.x, -step.y);\n    \n    offset[3] = vec2(-step.x, 0.0);\n    offset[4] = vec2(0.0, 0.0);\n    offset[5] = vec2(step.x, 0.0);\n    \n    offset[6] = vec2(-step.x, step.y);\n    offset[7] = vec2(0.0, step.y);\n    offset[8] = vec2(step.x, step.y);\n    \n    kernel[0] = 1.0; kernel[1] = 1.0; kernel[2] = 1.0;\n    kernel[3] = 1.0; kernel[4] = 1.0; kernel[5] = 1.0;\n    kernel[6] = 1.0; kernel[7] = 1.0; kernel[8] = 1.0;\n    \n    vec4 sum = vec4(0.0);\n    float kernelSum = 0.0;\n    for (int i = 0; i < 9; i++) {\n        vec4 color = texture(iChannel1, coord + offset[i]);\n        sum = max(color, sum);\n    }\n    \n    if(iFrame < 10 ){\n    //if(iFrame < 10 || mod(float(iFrame), 300.0) == 0.0){\n        fragColor = texture(iChannel0, uv);\n    } else {\n    \tfragColor = sum - base*1.01;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}