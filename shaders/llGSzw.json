{
    "Shader": {
        "info": {
            "date": "1487235724",
            "description": "Using integer arithmetic and bit operations to create a hash. Traditionally in Shadertoy and most WebGL demos people used aliasing through fract(sin(dot())) to generate random numbers, which was machine dependent. That approach is no longer needed.",
            "flags": 0,
            "hasliked": 0,
            "id": "llGSzw",
            "likes": 97,
            "name": "Integer Hash11",
            "published": 3,
            "tags": [
                "2d",
                "hash",
                "integers"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 12204
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// See these too: \n//\n// - https://www.shadertoy.com/view/llGSzw\n// - https://www.shadertoy.com/view/XlXcW4\n// - https://www.shadertoy.com/view/4tXyWN\n//\n// Do NOT use this hash as a random number generator. Use it only to inialize\n// the seed of a random number generator. Do NOT call this hash recursivelly,\n// it is NOT a random number generator.\n\n// Enable this for color noise\n#define RGB\n\nfloat hash11( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return float( n & uint(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec3 hash13( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    uvec3 k = n * uvec3(n,n*16807U,n*48271U);\n    return vec3( k & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uvec2 p = uvec2(fragCoord);\n\n#ifdef RGB\n\tvec3 c = hash13( p.x + 1920U*p.y + (1920U*1080U)*uint(iFrame) );\n#else    \n    vec3 c = vec3( hash11( p.x + 1920U*p.y + (1920U*1080U)*uint(iFrame) ) );\n#endif    \n\tfragColor = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}