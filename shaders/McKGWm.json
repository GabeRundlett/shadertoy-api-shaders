{
    "Shader": {
        "info": {
            "date": "1712871335",
            "description": "Faking a 3D effect with Bump Offset (One sample Parallax) and using Wiggle stereoscopy to show it. ",
            "flags": 0,
            "hasliked": 0,
            "id": "McKGWm",
            "likes": 26,
            "name": "Parallax with Wiggle Stereo",
            "published": 3,
            "tags": [
                "3d",
                "parallax",
                "stereogram",
                "bump",
                "height",
                "wiggle",
                "offset",
                "stereoscopy",
                "stereoscopics",
                "bumpoffset"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 301
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2024 Gehtsiegarnixan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n/*\nA simple shader demo showcasing bump offset also known as parallax with a single sample. \nI am also using wiggle stereoscopy in a gyrating motion to show the 3D effect off.\n\nTo really enjoy those thick bumps have a listen to this:\nwww.youtube.com/watch?v=ZPqqWBaWfls\n\nThe shader includes mouse controls to adjust the view angle. There are also \nsome constants defined below that can be modified.\n*/\n\n// Define the strength of the bump offset. Values around 0.01-0.15 work well. Be gentle.\n#define HEIGHTSCALE 0.1\n\n// Define a custom offset for the height map to adjust the vertical position of the result\n#define HEIGHTOFFSET 0.0\n\n// Define a constant to show grid outlines\n#define SHOWGRID\n\n// Parallax offset UVs using height (neutral is 0.5) and camera direction (tangent space)\nvec2 bumpOffset(vec2 uv, vec3 viewDir, float height, float heightScale) {\n    // Calculate the offset\n    vec2 offset = (height - 0.5) * heightScale * viewDir.xy;\n\n    // Return the modified UV coordinates\n    return uv + offset;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Square UVs to have (0.5,0.5) in the center\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y + 0.5; \n        \n    // Apply zoom to the coordinates centered at the point (0.5,0.5)\n    float zoom = 1.2;\n    uv = (uv - 0.5) * zoom + 0.5;    \n    \n    // If the mouse was clicked, scale mouse coordinates to the 0-1 range of the screen\n    vec2 direction;\n    if (iMouse.x > 0.0) {\n        vec2 mouse = (iMouse.xy - iResolution.xy * 0.5) / iResolution.y;\n        direction = clamp(mouse * 2., -1.,1.); \n    } else {\n        // If the mouse was not clicked, animate the direction vector\n        float myTime = iTime * 3.0;\n        direction = vec2(cos(myTime), sin(myTime));        \n    }\n    \n    // Calculate the camera direction in tangent space of your mesh, if you had one\n    vec3 viewDirection = safeNormalize(vec3(direction,2.));\n\n    // Sample the height texture\n    float height = texture(iChannel0, uv, 3.).r; // a little lower mip for smoother offset\n    height -= HEIGHTOFFSET; // apply custom offset to heightmap\n    \n    // Offset the UVs using the height and view direction\n    vec2 bumpUV = bumpOffset(uv, viewDirection, height, HEIGHTSCALE);\n\n    // Sample the texture and apply a fancy colormap because it's pretty\n    vec3 albedo = twilight(texture(iChannel0, bumpUV).x);\n    \n    // Sample the normal texture\n    vec3 normal = heightToNormal(iChannel0, iChannelResolution[0].xy, bumpUV, 50.);\n    \n    // Apply lighting to the albedo\n    vec3 lightDirection = safeNormalize(vec3(1,1,3));\n    vec3 color = phongLighting(albedo, normal, viewDirection, lightDirection);\n\n    #ifdef SHOWGRID\n        // Calculate the anti-aliasing effect\n        vec2 uvFwidth = fwidth(uv);\n        float aa = max(uvFwidth.x, uvFwidth.y);\n    \n        // Create a mask at a certain height for grid lines to blend with the terrain\n        float gridHeight = 0.5; // same as the neutral part of the height blend\n        float heightMask = smoothstep(gridHeight + aa * 10., gridHeight - aa * 10., height);\n        \n        // Add lines on the edges of the grid\n        float thickness = 0.01;\n        vec2 grid = abs(fract(uv) * 2.0 - 1.0);\n        float mask = smoothstep(thickness - aa, thickness + aa, 1. - max(grid.x, grid.y));        \n\n        // Add a second grid for a nice shadow effect\n        vec2 gridOffset = abs(fract(bumpUV) * 2.0 - 1.0);\n        float shadowMask = 1. - smoothstep(thickness * 4., 0., 1. - max(gridOffset.x, gridOffset.y)) * 0.5;\n        \n        // Blend the color with the minimum of the mask and shadow mask, weighted by the height mask\n        color *= mix(1., min(mask, shadowMask), heightMask); \n    #endif\n\n    // Output the final color to the screen\n    fragColor = vec4(color,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Generic Functions ___________________________________________________________\n\n#define SMALLESTFLOAT (1.0 / float(0xffffffffU))\n// Normalization while handling zero vectors\nvec3 safeNormalize(vec3 vector) {\n    // Calculate the square of the length of the vector\n    float lenSq = dot(vector, vector);\n    \n    // Check if the squared length is greater than a tiny threshold\n    if (lenSq > SMALLESTFLOAT) {\n        // If so, normalize the vector resuing the squared length\n        return vector / sqrt(lenSq);\n        \n    } else {\n        // Otherwise, return a default vector\n        return vec3(1,0,0);\n    }\n}\n\n// NoxWings normal generator using 3 texture samples\n// Source: https://www.shadertoy.com/view/3sSSW1\nvec3 heightToNormal(sampler2D heightMap, vec2 res, vec2 uv, float strength) {\n    // Define the resolution scale\n    vec2 s = 1.0 / res;\n    \n    // Define the texture offset\n    float textureOffset = 1.0;\n    \n    // Sample the height map\n    float p = texture(heightMap, uv).x;\n    float h1 = texture(heightMap, uv + s * vec2(textureOffset, 0)).x;\n    float v1 = texture(heightMap, uv + s * vec2(0, textureOffset)).x;\n       \n    // Calculate the difference in height\n    vec2 xy = (p - vec2(h1, v1));\n    \n    // Return the normalized vector\n    return normalize(vec3(xy * strength, 1.));\n}\n\n#define SUN_COLOR vec3(0.808,1.000,0.996)\n// Phong lighting model\nvec3 phongLighting(vec3 albedo, vec3 normal, vec3 cameraDir, vec3 lightDir) {\n    // Ambient\n    float ambientStrength = 0.35;\n    vec3 ambient = ambientStrength * albedo;\n\n    // Diffuse \n    float diff = clamp(dot(normal, lightDir), 0.0, 1.0);\n    vec3 diffuse = diff * albedo;\n\n    // Specular\n    float specularStrength = 0.5;\n    vec3 viewDir = normalize(cameraDir);\n    vec3 reflectDir = reflect(-lightDir, normal);  \n    float spec = pow(clamp(dot(viewDir, reflectDir), 0.0, 1.0), 50.0);\n    vec3 specular = specularStrength * spec * SUN_COLOR;  \n\n    // Combine results\n    return ambient + diffuse + specular;\n}\n\n// makes twilight colormap with polynimal 6\nvec3 twilight(float t) {\n    const vec3 c0 = vec3(0.996106,0.851653,0.940566);\n    const vec3 c1 = vec3(-6.529620,-0.183448,-3.940750);\n    const vec3 c2 = vec3(40.899579,-7.894242,38.569228);\n    const vec3 c3 = vec3(-155.212979,4.404793,-167.925730);\n    const vec3 c4 = vec3(296.687222,24.084913,315.087856);\n    const vec3 c5 = vec3(-261.270519,-29.995422,-266.972991);\n    const vec3 c6 = vec3(85.335349,9.602600,85.227117);\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}