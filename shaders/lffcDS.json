{
    "Shader": {
        "info": {
            "date": "1721500167",
            "description": "a simple loop animation",
            "flags": 0,
            "hasliked": 0,
            "id": "lffcDS",
            "likes": 7,
            "name": "flowery thing",
            "published": 3,
            "tags": [
                "flower"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 164
        },
        "renderpass": [
            {
                "code": "// Fork of \"triangle thing 2\" by jonasfrey. https://shadertoy.com/view/4cXcWN\n// 2024-07-17 08:10:00\n\nfloat f_n_sdf_rectangle( in vec2 o_p, in vec2 o_sidelength )\n{\n    vec2 o_d = abs(o_p)-o_sidelength;\n    return length(max(o_d,0.0)) + min(max(o_d.x,o_d.y),0.0);\n}\n\n\nvec2 f_o_trn_square(float n_nor){\n\n    // Ensure the value is between 0 and 1\n    n_nor = clamp(n_nor, 0.0, 1.0);\n\n    // Calculate the coordinates based on the normalized value\n    float pos = n_nor * 4.0;\n\n    if (pos < 1.0) {\n        return vec2(pos, 1.0); // Top edge\n    } else if (pos < 2.0) {\n        return vec2(1.0, 2.0 - pos); // Right edge\n    } else if (pos < 3.0) {\n        return vec2(3.0 - pos, 0.0); // Bottom edge\n    } else {\n        return vec2(0.0, pos - 3.0); // Left edge\n    }\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_trn = ( fragCoord.xy - iResolution.xy*.5 ) / iResolution.yy;\n    o_trn*=3.;\n    float nt = iTime *0.5;\n    vec2 o_scl = vec2(5.);\n    vec2 o_scl_one = 1./ o_scl; \n    \n    float n_its = o_scl.x*o_scl.y;\n    float n_it_one_nor = 1./n_its;\n    float n_tau = 6.2831;\n    vec4 o_col = vec4(0.);\n    float n_min = 1.;\n\n    for(float n_it_nor = 0.; n_it_nor<1.; n_it_nor+=n_it_one_nor){\n    \n        float n_radius = n_it_nor;\n        vec2 o_p = vec2(0.);\n        vec2 o_p2 = o_p - o_trn;\n        float n_ang = atan(o_p2.y, o_p2.x)/n_tau;\n        float n = length(o_p2);\n        n_radius = .1+n_radius+sin(n_ang*n_tau*9.+iTime*n_it_nor*12.)*.1*n_it_nor+sin(iTime+n_it_nor*2.)*.1;\n        n = abs(n-n_radius)/n_radius;\n        n = pow(n, 1./3.);\n        n_min = min(n, n_min);\n        vec4 o_c = vec4(\n            sin(n_it_nor*n_tau+iTime)*2., \n            sin((n_it_nor+.33+iTime*.01)*n_tau)*2., \n            sin((n_it_nor+.33+iTime*0.1)*n_tau)*2., \n            1.\n        );\n        o_col += vec4(1.-pow(n, 1./9.))*o_c;\n        //o_col = clamp(o_col, 0., 1.);\n    }\n    float n2 = 1.-pow(abs(n_min), 1./9.);\n    fragColor = o_col*n_min*2.+(1.-n_min);//\n    //fragColor *= vec4((1.-length(o_trn)*.5));\n    //fragColor = o_col*vec4(n_min);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}