{
    "Shader": {
        "info": {
            "date": "1713811145",
            "description": "NZXT 3d refraction | Was playing around to make something for wallpaper and got stuck in shader land.",
            "flags": 0,
            "hasliked": 0,
            "id": "4cdXR7",
            "likes": 18,
            "name": "NZXT 3D refraction",
            "published": 3,
            "tags": [
                "raymarching",
                "logo",
                "typography",
                "nzxt"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    NZXT logo with 2d SDF's extruded + with refaction\n    04/21/24 | @byt3_m3chanic\n\n\n*/\n\n#define R \t\tiResolution\n#define T \t\tiTime\n#define M \t\tiMouse\n\n#define PI      3.141592653\n#define PI2     6.283185307\n\n#define MAX_DIST    25.\n\nfloat hash21( vec2 p ) { return fract(sin(dot(p,vec2(23.43,84.21))) *4832.3234); }\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\nvec3 hit, hitpt;\nmat2 rx,ry,r56,r56n;\n\n//@iq box and extrude\nfloat opx( in vec3 p, float d, in float h )\n{\n    vec2 w = vec2( d, abs(p.z) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat box( in vec2 p, in vec2 b ) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat text_(vec2 p){\n    return box(p,vec2(.275,.275));\n}\n\nfloat text_n(vec2 p){\n    float d = box(vec2(abs(p.x)-.17,p.y),vec2(.08,.275));\n    vec2 pv = p*r56;\n    float e = box(pv,vec2(.075,.325));\n\n    return max(min(d, e),text_(p));\n}\n\nfloat text_z(vec2 p){\n    float d = box(p-vec2(-.045,.25),vec2(.2,.115));\n    d = min(d,box(p+vec2(-.045,.25),vec2(.2,.115)) );\n    vec2 pv = p*r56n;\n    float e = box(pv,vec2(.075,.375));\n\n    return max(min(d, e),text_(p));\n}\n\nfloat text_x(vec2 p){\n    vec2 pv = p*r56n;\n    float d = box(pv,vec2(.08,.4));\n    \n    pv = p*r56;\n    float e = box(pv,vec2(.08,.4));\n\n    return max(min(d, e),text_(p));\n}\n\nfloat text_t(vec2 p){\n    float d = box(p,vec2(.085,.275));\n    float e = box(p-vec2(0,.25),vec2(.275,.115));\n\n    return max(min(d, e),text_(p));\n}\n\nfloat swtch;\n\nvec2 map (in vec3 p) {\n    vec2 res = vec2(1e5,-1.);\n\n    vec3 q = p;\n\n    float tt,id;\n\n    if(swtch <1.) {\n        float size = 3.,hlf = size/2.;\n\n        tt = mod(T*.1,1.);\n        p+=T*(hlf/5.);\n        id = floor((p.x+hlf)/size)*.5;\n    \n        q.x+=tt*size;\n        q.x = mod(q.x+hlf,size)-hlf;\n    } else {\n        float size = 1.5,hlf = size/2.;\n    \n        tt = mod(T*.25,1.);\n        p+=T*(hlf/4.);\n        \n        q.y+=tt*size;\n        q.y = mod(q.y+hlf,size)-hlf;\n    }\n\n    float d = text_n(q.xy+vec2(.90,0));\n    d = min(d,text_z(q.xy+vec2(.30,0)));\n    d = min(d,text_x(q.xy-vec2(.30,0)));\n    d = min(d,text_t(q.xy-vec2(.90,0)));\n    \n    float fd = opx(q,d,.18);\n    \n    float e = opx(q,abs(d-.02)-.0085,.15);\n    \n    if(fd<res.x) {\n        res=vec2(fd*.8,1);\n        hit=p;\n    }\n    if(e<res.x&&mod(id,1.)==0.) {\n        res=vec2(e*.75,2);\n        hit=p;\n    }\n\treturn res;\n}\n\n//Tetrahedron technique\n//https://iquilezles.org/articles/normalsSDF\nvec3 normal(vec3 p, float t, float mindist)\n{\n    float e = mindist*t;\n    vec2 h = vec2(1.,-1.)*.5773;\n    return normalize( h.xyy*map( p + h.xyy*e ).x + \n\t\t\t\t\t  h.yyx*map( p + h.yyx*e ).x + \n\t\t\t\t\t  h.yxy*map( p + h.yxy*e ).x + \n\t\t\t\t\t  h.xxx*map( p + h.xxx*e ).x );\n}\n\nvec3 shade(vec3 p, vec3 rd, float d, float m, inout vec3 n)\n{\n    vec3 clr;\n    n = normal(p,d,1.);\n    vec3 lpos = vec3(.1,3,2);\n    vec3 l = normalize(lpos-p);\n\n    float diff = clamp(dot(n,l),0.,1.);\n    float fresnel = pow(clamp(1.+dot(rd, n), 0., 1.), 5.5);\n    fresnel = mix(.01, .7, fresnel);\n\n    float cpx = swtch<1. ? hit.x : hit.y;\n    if(m==1.) clr = .5 + .4 *sin(cpx*.75+ vec3(2.5,1.,.5));\n    if(m==2.) clr = .5 + .4 *sin((cpx+15.25)*1.+ vec3(2.5,1.,.5));\n    \n    vec3 h = mix(vec3(0),clr,diff);\n\n    return h;\n}\n\n\nvec3 renderAll( in vec2 F )\n{   \n    vec2 uv = (2.*F.xy-R.xy)/max(R.x,R.y);\n\n    vec3 C=vec3(.0);\n\n    uv*=rot(.48);\n    vec3 ro = vec3(0,0,2),\n         rd = normalize(vec3(uv,-1));\n\n    float x = M.xy == vec2(0) || M.z <0. ? 0. :  (M.y/R.y * .3 - .15) * PI;\n    float y = M.xy == vec2(0) || M.z <0. ? 0. : -(M.x/R.x * .3 - .15) * PI;\n\n    rx = rot(-.48+x);\n    ry = rot(y);\n    \n    ro.yz *= rx, ro.xz *= ry;\n    rd.yz *= rx, rd.xz *= ry;\n    \n    vec3  p = ro + rd * .1;\n    float atten = .75;\n    float k = 1.;\n    float b = 5.;\n    float iv = 1.;\n    \n    // loop inspired/adapted from @blackle's \n    // marcher https://www.shadertoy.com/view/flsGDH\n    for(int i=0;i<132;i++)\n    {\n        vec2 ray = map(p);\n        vec3 n=vec3(0);\n        float fresnel=0.;\n        float d = ray.x;\n        float m = ray.y;\n\n        p += rd * d *k;\n        \n        if (d*d < 1e-9) {\n\n            C+=shade(p,rd,d,ray.y,n)*atten;\n            if(b<0.)break;\n            \n            atten *= .65;\n            p += rd*.0001;\n            k = sign(map(p).x);\n            \n            b--;\n\n            p += rd*.005;\n            k = sign(map(p).x);\n        \n            vec3 rf=refract(rd,n,iv > 0. ? 1./1.1 : 1.075);\n            iv *= -1.;\n            if(length(rf) == 0.) rf = reflect(rd,n);\n            rd=rf;\n            p+=-n*.001;\n            \n        }  \n        \n        \n        if(distance(p,rd)>50.) { break; }\n    }\n    return C;\n    \n}\n\n\nvoid mainImage( out vec4 O, in vec2 F )\n{   \n\n    \n    swtch = mod(T*.08,2.);\n    r56 = rot(.56);\n    r56n = rot(-.56);\n    \n    vec3 C = renderAll(F);\n    C +=renderAll(F+vec2(.5,.5));\n    C /= 1.5;    \n\n    O = vec4(sqrt(smoothstep(0.,1.,C)),1.0);\n}\n//end",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}