{
    "Shader": {
        "info": {
            "date": "1542308919",
            "description": "purple",
            "flags": 0,
            "hasliked": 0,
            "id": "4lyBD1",
            "likes": 6,
            "name": "smooth purple",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 484
        },
        "renderpass": [
            {
                "code": "// simple plane march\nmat2 rotate(float a)\n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n#define\tTAU 6.28318\n\nfloat map(vec3 p)\n{\n    float d =  length(p.xz);\n\n    float t2 = fract(iTime*0.5) * TAU;\n    \n\tfloat y = 0.5+sin(t2 + d)*0.5;\n\ty = y*=abs(p.x*p.z)*0.125;\n\ty = smoothstep(0.0,4.0,y);\n\t\n\treturn p.y - y*y;\n}\n\nvec3 normal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n}\nvec3 render(vec3 ro, vec3 rd)\n{\n\t// march\t\n\tfloat tmin = 0.1;\n\tfloat tmax = 120.;\n\tvec3 p;\n\tfloat t = tmin;\n\tfor (int i = 0; i < 80; i++)\n\t{\n\t\tp = ro + t * rd;\n\t\tfloat d = map(p);\n\t\tt += d*0.5;\n\t\tif (t > tmax)\n\t\t\tbreak;\t\t\n\t}\n\t\n    // light\n\tif (t < tmax)\n\t{\n\t   \tvec3 lightDir = normalize(vec3(1.5, 1.0, 0.5));\n\t\tvec3 nor = normal(p);\n\t\tvec3 c = vec3(0.3, 0.1, 0.5);\n\t\t\n\t\tfloat dif = max(dot(nor, lightDir), 0.0);\n\t\tc += vec3(0.2) * dif;\n\t\t\n\t\tvec3 ref = reflect(rd, nor);\n\t\tfloat spe = max(dot(ref, lightDir), 0.0);\n\t\tc += vec3(3.0) * pow(spe, 16.);\n\t\t\n\t\treturn c;\n\t}\n\t\n\treturn vec3(0.2,0.2,0.6);\n}\n\nmat3 camera(vec3 ro, vec3 ta, vec3 up)\n{\n\tvec3 nz = normalize(ta - ro);\n\tvec3 nx = cross(nz, normalize(up));\n\tvec3 ny = cross(nx, nz);\n\treturn mat3(nx, ny, nz);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 q = fragCoord.xy / iResolution.xy;\n\tvec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.xy;\n\tp.x *= iResolution.x / iResolution.y;\n    \n\n\tvec3 ro = vec3(0.0, 10.0, 0.0);\n    \n    float ang = radians(-90.0);\n    ro.z = sin(ang)*14.0;\n    ro.x = cos(ang)*14.0;\n    \n\tvec3 ta = vec3(0.0, -2.0, 0.0);\n\t\n\tvec3 rd = camera(ro, ta, vec3(0.0, 1.0, 0.0)) * normalize(vec3(p.xy, 1.0));\n\t\n\tvec3 c = render(ro, rd);\n\n    // vignette\n    c *= 0.4 + 0.6*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\n\tfragColor = vec4(c, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}