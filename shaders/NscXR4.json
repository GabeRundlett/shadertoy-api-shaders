{
    "Shader": {
        "info": {
            "date": "1632702913",
            "description": "riffing on Thomas Hooper's idea, which tweaks iq's simplex gradient [url=http://iquilezles.org/articles/normalsSDF/normalsSDF.htm]here[/url]\nleft=central difference, right=one of my simplex looped",
            "flags": 0,
            "hasliked": 0,
            "id": "NscXR4",
            "likes": 4,
            "name": "Gradient Tetrahedral Looped",
            "published": 3,
            "tags": [
                "gradient",
                "simplex",
                "derivative",
                "tetrahedral",
                "hooper"
            ],
            "usePreview": 0,
            "username": "spalmer",
            "viewed": 328
        },
        "renderpass": [
            {
                "code": "// I made some more variants of iq/Hooper simplex gradient\n\n// iq's looped simplex gradient, loop idea by Thomas Hooper\n// http://iquilezles.org/articles/normalsSDF \"An Important Implementation Detail\"\n\nfloat dscene(vec3 q);\n\n#define IZERO min(0, iFrame)\n\n// floating point variant\nvec3 gscene6(vec3 q, float h)\n{\n\tvec3 n, e;\n\tfor (float i = min(0., iTime) + 4.; i-- > 0.; ) {\n\t\te = mod(floor(.5 * (i + vec3(3, 0, i))), 2.) * 2. - 1.; // have feeling could trim this teeny bit more w effort\n\t\tn += dscene(h * e + q) * e;\n\t}\n\treturn n;\n}\n\n// spalmer updated variant of Thomas Hooper's looped variant of iq's simplex gradient\nvec3 gscene5(vec3 q, float h)\n{\n\tvec3 n; // = vec3(0); // glsl inits locals to 0\n\tfor (int i = IZERO + 4; i-- > 0; ) {\n\t\tvec3 e = vec3((ivec3(i+3, i, i+i)&2) - 1);\n\t\tn += dscene(h * e + q) * e;\n\t}\n\treturn n;\n}\n\n// WIP spalmer variant of Thomas Hooper's looped variant of iq's simplex gradient\n// works, not super efficient though with extra multiply by e.w etc.\nvec3 gscene4(vec3 q, float h)\n{\n\tvec3 n = vec3(0); vec4 e = vec4(1,1,1,-1);\n\tfor (int i = IZERO + 4; i-- > 0; e = e.yzwx)\n\t\tn -= dscene(q - h * e.w * e.xyz) * e.w * e.xyz;\n\treturn n;\n}\n\n// these were originally in March 3D http://shadertoy.com/view/tlGXDK\n\n// spalmer variant of Thomas Hooper's looped variant of iq's simplex gradient\nvec3 gscene3(vec3 q, float h)\n{\n\tvec3 n = vec3(0);\n\tfor (int i = IZERO; i < 4; ++i) {\n\t\tvec3 e = vec3((ivec3(i+3, i, i+i)&2) - 1);\n\t\tn += dscene(q + e * h) * e;\n\t}\n\treturn n;\n}\n\n// a variation of iq/Hooper's simplex gradient made by ClÃ©ment Baticle (a.k.a. Klems):\nvec3 gscene2(vec3 p, float h) // for function f(p)\n{\n\tvec3 n = vec3(0);\n\tfor (int i=IZERO; i<4; ++i)\n\t{\n\t\tvec3 e = (2.*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.);\n\t\tn += e * dscene(p + e*h);\n\t}\n\treturn n;\n}\n\n// unlooped variation for comparison:\n\n// iq's simplex gradient, unlooped, so stresses compiler inlining scene:\n// I took from mandelbulb http://shadertoy.com/view/ltfSWn\nvec3 gscene1(vec3 q, float h)\n{\n\tvec2 e = h * vec2(1,-1);\n\treturn e.xyy * dscene(q + e.xyy) + \n\t       e.yyx * dscene(q + e.yyx) + \n\t       e.yxy * dscene(q + e.yxy) + \n\t       e.xxx * dscene(q + e.xxx);\n}\n\n// standard central difference gradient for comparison\nvec3 gscene0(vec3 q, float h)\n{\n    vec2 e = vec2(h * sqrt(3.), 0);  // sqrt(3.) to match lack of sqrt(1./3.) in others\n    return .5 * (vec3(\n       dscene(q + e.xyy),\n       dscene(q + e.yxy),\n       dscene(q + e.yyx)\n       ) - vec3(\n       dscene(q - e.xyy),\n       dscene(q - e.yxy),\n       dscene(q - e.yyx)\n       ));\n}\n// you can tell on left edge of sphere bottom that it\n// works differently than the simplex gradient does\n\n/* TODO see nimitz norcurv http://shadertoy.com/view/Xts3WM\n// 5 taps total, returns both normal (in xyz) and curvature (in w)\nvec4 norcurv(vec3 p)\n{\n    vec2 e = vec2(-1, 1)*.001;   \n    float t1 = dscene(p + e.yxx), t2 = dscene(p + e.xxy),\n          t3 = dscene(p + e.xyx), t4 = dscene(p + e.yyy);\n    return vec4(normalize(e.yxx*t1 + e.xxy*t2 + e.xyx*t3 + e.yyy*t4), \n        .25/e.y*(t1 + t2 + t3 + t4 - 4. * dscene(p)));\n}\n*/\n\nfloat dscene(vec3 q)\n{\n    return min(min(length(q) - 2., 6. - length(q)), q.y + 1.)\n        // any ideas to exhibit the technique better? maybe some patterned surface?\n        + dot(sin(q*16.), vec3(1)) * .015\n        //+ noise(q*4.) * .05\n    ;\n}\n\n// fork of Nano March http://shadertoy.com/view/3s2fDW (still private because it's still not short enough to compete)\n// fork of Fabrice's helix http://shadertoy.com/view/XsdBW8\n\nvoid mainImage(out vec4 O, vec2 p)\n{\n    O = vec4(1);\n    vec3 R = iResolution, r = R, q = 5./r.yyz;\n    // TODO maybe rotating the camera would allow witnessing artifacts on all sides\n    r = normalize(vec3(.5*r.xy - p, r.y)); // / r.y); // strangely backward\n    q -= 3. * r;\n    for (int i = 96 + IZERO; i-- > 0 && abs(O.a) > .01;\n         q -= r * (O.a = dscene(q)));\n    // really precision shouldn't be constant but should depend on the distance to camera etc.\n    // here just change w time so can see the effect it has.\n    // you can only really notice the gradient methodology when precis is large,\n    // otherwise it tends to just look \"correct\".\n    float precis =\n        //(1. - abs(sin(iTime))) * .1 + // * (1. + blur); // not too small, beware inaccuracies in far distance\n        1e-2; \n    // normalized gradient (normal) of scene at p\n    float split = sin(.3*iTime) * .5 + .5 - p.x / R.x; //r.x - .5*sin(.3*iTime); // splitscreen\n    vec3 g = split < 0. // compare\n        ? gscene5(q, precis) // right\n        : gscene0(q, precis) // left\n    , n = normalize(g);\n//    O.rgb *= dot(n, vec3(sqrt(1./3.))); // lit\n    O.rgb *= n * .5 + .5;\n    O.rgb *= 1. - exp2(-4.* R.y * abs(split));\n//    n *= 1.001; //.999; // TEST\n    O.gb *= exp2(-5e3 * abs(1. - length(n))); // detect unnormalized normals\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}