{
    "Shader": {
        "info": {
            "date": "1684146776",
            "description": "This is my second attempt; the first attempt had 9,062 parameters and 12 feature maps for each layer, but seemed to crash shadertoy.\nI hope this smaller version is gentler for your machines!\nPlease tell me if something isn't working!",
            "flags": 32,
            "hasliked": 0,
            "id": "mtKGDw",
            "likes": 100,
            "name": "Hangman+Alphabet Recognizer CNN",
            "published": 3,
            "tags": [
                "number",
                "convolution",
                "learning",
                "digit",
                "linear",
                "model",
                "ai",
                "machine",
                "neural",
                "recognition",
                "network",
                "convolutional",
                "prediction",
                "ml"
            ],
            "usePreview": 1,
            "username": "kishimisu",
            "viewed": 4103
        },
        "renderpass": [
            {
                "code": "/* Handwritten Alphabet Recognizer CNN + Hangman - https://www.shadertoy.com/view/mtKGDw\n   (Can take several seconds to compile) \n   \n   This shader implements a Convolutional Neural Network trained on uppercase \n   handwritten characters, combined with a hangman game for even more fun!\n   \n   /// HOW TO PLAY / INFOS ///\n   \n   - Draw *uppercase* letters in the right area\n   - Click on \"Try\" to submit the current letter\n   - Click on \"Clear\" to reset the draw area\n   - Click \"Show Neural Network\" to visualize the prediction in real time!\n   \n   - You have a maximum of 7 failed attempts before losing the game!\n     (You can change the difficulty in the \"Common\" tab)\n     \n   - There are 40 different words that can be guessed\n   \n   - The model struggles for the letter \"I\", be sure to add the two horizontal bars.\n   - You can also click on individual characters in the bottom-right alphabet if\n     it really struggles to recognize a letter\n   \n   /// Technical Details ///\n   \n   Python Notebook created for this project: https://colab.research.google.com/drive/18_2SZPejs1BaZH1EofFgEiA9HG2fBR7u\n   \n   This implementation is a bigger version of my previous Handwritten Digit Recognizer.\n   Here's a comparision between the two models:\n   \n                        Digit CNN          Alphabet CNN\n   # of parameters      2,023              6,490\n   # of convolutions    2                  4\n   # of feature maps    8-5                8-8-10-10\n     per layer\n   output size          10                 26\n   \n   I trained the model on two datasets for a total of 445250 training examples: \n       - EMNIST (https://arxiv.org/pdf/1702.05373.pdf)\n       - A-Z Handwritten Alphabets (Available on Kaggle)\n   I first used a combination of lowercase and uppercase letters, but finally ended up\n   keeping only uppercase letters to increase accuracy, while constraining the case.\n   The accuracy on the testing set is around 96%, however there are some disparities\n   within the letters, the model struggles the most on the I, D and V letters.\n   \n   /// Network Architecture ///\n   \n   - All convolutions have a kernel size of 3x3 and a stride of 1.\n   The Buffer  A handles the input\n   The buffers C and D handles all the convolution and max pooling layers\n   The Buffer  D handles the fully connected layer and output\n   \n   - (Buffer A) Input Layer     : 28x28    = 784 inputs\n   - (Buffer B) Convolution     : 28x28    => 8x26x26   \n   - (Buffer C) Convolution     : 8x26x26  => 8x24x24\n   - (Buffer B) Max Pooling     : 8x24x24  => 8x12x12   \n   - (Buffer C) Convolution     : 8x12x12  => 10x10x10   \n   - (Buffer B) Convolution     : 10x10x10 => 10x8x8   \n   - (Buffer C) Max Pooling     : 10x8x8   => 10x4x4\n   - (Buffer D) Fully Connected : 10x4x4   => 26\n   - (Buffer D) Softmax         : 26       => 1\n   \n   I alternated the layers between buffers B and C in order to be able\n   to calculate multpiple layers in a single frame. This way, the prediction\n   happens on a total of 4 frames instead of 8.\n   \n   - When you click on \"Show Neural Network\", only the Convolution feature\n   maps are displayed, not the max pooling ones.\n   \n   /// Hangman Game ///\n   \n   - This is the first time I try to make game logic within shaders. \n   Everything related to the hangman game state (word selection, update, game over) \n   happens inside the Buffer A. It's hard to test all cases and all side effects,\n   please let me know if you encounter something weird!\n   \n   - I split the 40 words into 10 arrays of 4 words (40 chars) because having a single \n   array of 40 words (400 chars) would alter the performances drastically. \n   It seems way more efficient to have 10 if/else rather than one big array lookup\n*/\n\n// Create text strings\nmakeString (printShowNN)      _S _h _o _w __ _N _e _u _r _a _l __ _N _e _t _w _o _r _k _end\nmakeString (printClickAny)    _bl __ _C _l _i _c _k __ _A _n _y _w _h _e _r _e __ _br _end\nmakeString (printShowGame)    _S _h _o _w __ _G _a _m _e __ _S _c _r _e _e _n _end\nmakeString (printFC)          _F _u _l _l _y __ _C _o _n _n _e _c _t _e _d _end\nmakeString (printCongrats)    _C _o _n _g _r _a _t _u _l _a _t _i _o _n _s _end\nmakeString (printOutputLayer) _O _u _t _p _u _t __ _L _a _y _e _r _end\nmakeString (printPrediction)  _P _r _e _d _i _c _t _i _o _n _dd _end\nmakeString (printInputLayer)  _D _r _a _w __ _A _r _e _a _end\nmakeString (printGameOver)    _G _a _m _e __ _O _v _e _r _end\nmakeString (printClear)       _C _l _e _a _r _end\nmakeStringI(printConv)        _C _o _n _v _o _l _u _t _i _o _n __ _dig(i) _end\nmakeStringI(printTry)         _T _r _y __ _qt _ch(i) _qt _end\n\n// Drawing\nfloat rect(vec2 p, vec2 b) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.)) + min(max(d.x,d.y),0.);\n}\nfloat seg(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    return .05/length(pa - ba*(clamp(dot(pa,ba)/dot(ba,ba), 0., 1.)));\n}\nvec3 drawHangman(vec2 uv, float missed) {\n    vec2 d = vec2(0);\n    missed *= max(1., 11./MAX_ATTEMPTS);\n    \n    d += seg(uv,-vec2(1, 0  ), vec2(1,   0  )) * vec2(step(1. , missed), 1);     \n    d += seg(uv, vec2(0, 0  ), vec2(0,   10 )) * vec2(step(1.5, missed), 1);\n    d += seg(uv, vec2(0, 10 ), vec2(7,   10 )) * vec2(step(3. , missed), 1);\n    d += seg(uv, vec2(0, 8  ), vec2(2,   10 )) * vec2(step(4. , missed), 1);\n    d += seg(uv, vec2(5, 10 ), vec2(5,   7.3)) * vec2(step(5. , missed), 1);\n    d += .07/abs(length(uv - vec2(5,6.5))-.75) * vec2(step(6. , missed), 1);\n    d += seg(uv, vec2(5, 5.7), vec2(5  , 3.5)) * vec2(step(7. , missed), 1);\n    d += seg(uv, vec2(5, 3.5), vec2(4.3, 1.5)) * vec2(step(8. , missed), 1);\n    d += seg(uv, vec2(5, 3.5), vec2(5.5, 1.5)) * vec2(step(9. , missed), 1);\n    d += seg(uv, vec2(5, 4.5), vec2(3.5, 6  )) * vec2(step(10., missed), 1);\n    d += seg(uv, vec2(5, 4.5), vec2(6.5, 6  )) * vec2(step(11., missed), 1);\n   \n    return vec3(d.y*.25 + d.x*1.25);\n}\n// Color palette\nvec3 pal(float x) {\n    return cos(6.28318*(vec3(1.18)*x*.1-vec3(2.642, 2.392, 2.322)))*.5+.5;\n}\n\n// Displays a portion of a texture containing feature map data\n// p : normalized uv coordinates (0-1)\n// s : scaling factor\n// r.xy : x/y start (in pixels)\n// r.zw : x/y end   (in pixels)\nvec3 displayFeatureMaps(vec2 p, vec2 s, vec4 r, float feature_maps_count, sampler2D smp) { \n    p = p*s + vec2(1.-s.x,0)/2.; // scale and center uvs\n    \n    float fp = 1./feature_maps_count;\n    float id = floor(p.x*feature_maps_count); // current feature map id\n    float m = 1.1; // border width\n    \n    // check bounds\n    if (min(p.x,p.y) < 0. || max(p.x,p.y) > 1. || abs(mod(p.x, fp) - fp*.5) > fp/m/2. || abs(p.y-.5) > 1./m/2.) \n        return vec3(0);\n    \n    m *= .999;               // fix overflow issue\n    p *= m;                  // scale down\n    p.x -= (m-1.) * id * fp; // offset x from id\n    p.x -= (m-1.) * .5 * fp; // re-center x\n    p.y -= (m-1.) * .5;      // re-center y\n    p *= r.zw / R;           // crop\n    p.xy += r.xy/R;          // offset origin\n    \n    float val = texture(smp, p).r; // Get value\n    return pal(val); // Return mapped color\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / R;\n    vec3 col;\n    \n    vec4 hangData = texelFetch(iChannel0, ivec2(0, R.y-1.), 0);\n    vec2 predData = texelFetch(iChannel2, ivec2(num_classes, 1), 0).rg; // r: index, g: confidence\n        \n    uv.x *= iAspect;\n\n    // Left part of the screen (visualizations)\n    if (uv.x < iAspect - 1.) {\n        // Display Game Screen\n        if (hangData.a == 0.) {\n            // \"Show Neural Network\" button\n            if (uv.y < .11) {      \n                col += printShowNN(uv*11.5 - vec2(0,.1));\n            }\n            else {\n                // Draw hangman\n                float highlightAmount = hangData.b / MAX_ATTEMPTS;\n                vec3 highlightColor = mix(vec3(0,1,0), vec3(1,.4,.1), abs(hangData.r-1.));\n                vec3 hangmanColor = mix(vec3(1), highlightColor*(1.2+sin(iTime*(1.+highlightAmount*3.))*.25), highlightAmount);\n                col += drawHangman(uv*20. - vec2(4,8.5), hangData.b) * hangmanColor;\n\n                uv = fragCoord / R / vec2(iR, 1) - vec2(0, .2);\n                vec2 id = floor(uv*13.);\n                \n                // Draw alphabet\n                if (abs(id.y+.5) < 1.) {\n                    float char_state = texelFetch(iChannel0, ivec2(id.x - id.y*13., R.y-3.), 0).r;\n                    col += char(iChannel3, uv*vec2(13.,13.5) - id, 65 + int(id.x) - int(id.y)*13) *\n                           mix(mix(vec3(1), vec3(0,1,0), char_state), vec3(1,0,0), clamp(char_state-1., 0., 1.));\n                }\n                else {\n                    uv.x -= .13;\n                    uv *= vec2(1.12, .8);\n                    id = floor(uv*13.);\n                    \n                    float current_word_size = texelFetch(iChannel0, ivec2(1, R.y-1.), 0).b;\n                    \n                    // Draw current word\n                    if (id.x >= 0. && id.x < current_word_size && id.y == 1.) {\n                        vec2 char_state = texelFetch(iChannel0, ivec2(id.x, R.y-2.), 0).rg;\n                        vec3 char_color = hangData.r == 1. ? vec3(0,1,0) : hangData.r == 2. ? vec3(1,0,0) : vec3(1);\n                        col += char(iChannel3, (uv*13. - id + vec2(.5,0))*vec2(.55,1), char_state.y == 0. ? 95 : int(char_state.x)) * char_color;\n                    }\n                }\n            }\n        }\n        // Display Neural Network Screen\n        else {\n            // \"Show Game Screen\" button\n            if (uv.y < .11) {      \n                col += printShowGame(uv*11.5 - vec2(.6,.1));\n            }\n            // Prediction panel\n            else if (uv.y < .22) { \n                uv = vec2(uv.x - .1, uv.y - .12) * 12.;\n                col += vec3(1,0,0) * char(iChannel3, uv*.7 - vec2(3.5,-.15), 65 + int(predData.x));\n                col = mix(pal(predData.y*3.), col, length(col));\n                col = mix(col, 1.-col, printPrediction(uv));\n            }\n            // Output panel\n            else if (uv.y < .47) {\n                // Transform to upper right area\n                vec2 tuv = vec2(uv.x / (iAspect - 1.), (uv.y-.22) / (.43-.22));\n                // Current output index\n                float idx = floor(tuv.x * num_classes);\n\n                // Output value for the current index\n                float val = texelFetch(iChannel2, ivec2(int(idx), 1), 0).r;\n                // Apply the softmax function\n                val = val; \n\n                // Draw bars\n                col = mix(vec3(1,0,0), vec3(0,1,0), val) * smoothstep(0., .01, val - tuv.y);   \n                col = pal(val*2.5) * smoothstep(0., .01, val - tuv.y);\n\n                // Draw \"output\" text\n                uv = vec2(uv.x, uv.y-.41) * 22.;\n                col += printOutputLayer(uv);\n\n                // Draw digits\n                tuv = vec2(fract(tuv.x*num_classes), tuv.y*4.);\n                col += vec3(char(iChannel3, tuv, 65 + int(idx))); \n            }\n            // Fully connected layer\n            else if (uv.y < .5) {\n                vec2 tuv = vec2(uv.x / (iAspect - 1.), (uv.y-.47) / (.48-.47));\n                float id = floor(tuv.x * 16. * f6);\n                float x = mod(id, 4.*f6);\n                float y = floor(id / (4.*f6));\n\n                col = pal(texelFetch(iChannel1, ivec2(x,y+24.+10.), 0).r);\n            }\n            // Feature maps\n            else {\n                // Display texts\n                uv = (uv - vec2(0,.96)) * 24.;\n                col += printConv(uv, 1);\n\n                uv.y += 3.;\n                col += printConv(uv, 2);\n\n                uv.y += 2.85;\n                col += printConv(uv, 3);\n\n                uv.y += 2.5;\n                col += printConv(uv, 4);\n\n                uv.y += 2.4;\n                col += printFC(uv);\n\n                // Display feature maps\n                uv  = fragCoord / R;\n                uv.x = uv.x / iR;\n\n                uv.y -= .88;\n                col += displayFeatureMaps(uv, 1.4*vec2(10./f1,12), vec4(0, 0, 26.*f1, 26), f1, iChannel0);\n                uv.y += .115;\n                col += displayFeatureMaps(uv, 1.44*vec2(10./f2,12.), vec4(0, 0, 24.*f2, 24), f2, iChannel1);\n\n                uv.y += .11;\n                col += displayFeatureMaps(uv, 1.48*vec2(10./f4,12.), vec4(0, 24, 10.*f4, 10), f4, iChannel1);\n\n                uv.y += .1;\n                col += displayFeatureMaps(uv, 1.52*vec2(10./f5,12.), vec4(0, 26+12, 8.*f5, 8), f5, iChannel0);\n\n            }\n        }\n    }\n    // Right part of the screen\n    else {\n        // Display input layer\n        uv.x = uv.x - iAspect + 1.;\n        col += printInputLayer((uv-vec2(0,.9))*15.);\n        col += texture(iChannel0, fragCoord / R).r;\n        \n        // \"Clear\" button\n        uv *= 10.;\n        uv.x -= 1.;\n        col += printClear(uv);\n        col += vec3(1,.8,0.2) * .1 / abs(rect(uv - vec2(1.75,0), vec2(2,1)))*.25;\n        \n        // \"Try\" button\n        uv.x -= 4.2;\n        col += printTry(uv, int(predData.x));\n        col += vec3(0.14,1,0.31) * .1 / abs(rect(uv - vec2(2,0), vec2(2,1)))*.25; \n    }\n    \n    // Switch screen button (contour only)\n    uv = fragCoord / R;\n    col += vec3(0.14,1,1.) * .002 / abs(rect(uv-vec2(iR/2.,0), vec2(.95*iR/2.,.1)));\n\n    // Game over messages\n    if (hangData.r > 0.) {\n        vec3 tint = mix(vec3(0,.9,0), vec3(.9,0,0), hangData.r-1.);\n        \n        // WIP: I need to redo all this to properly center\n        // the game over messages\n        uv = fragCoord / R;\n        uv.y -= .5;\n        uv.y *= 4.;\n        uv.y += .5 ;\n        \n        uv.x -= .7 - mix(.22, .15, hangData.r-1.);\n        uv.x *= 3.;\n        uv.y -= .33;\n        uv.x *= iAspect;\n        uv *= 3.;\n        col += (hangData.r == 1. ? printCongrats(uv) : printGameOver(uv)) * tint;\n        \n        uv += vec2(.5, 2.1);\n        uv *= 1.4;\n        col += printClickAny(uv);\n        \n        uv = fragCoord / R;\n        col += .002 / abs(rect(uv - vec2(.7, .5), vec2(.24, .1))) * tint;\n    }\n    \n    col += .001 / abs(uv.x - iR); // Vertical Separator\n         \n    fragColor = vec4(col, 1);    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* This buffers handles the hangman game data and the input layer */\n\n// Is a character at a specific index in the hidden word ?\nbool isCharAtPos(float char, int pos) {\n    float charAtPos = texelFetch(iChannel0, ivec2(pos, R.y-2.), 0).r;\n    return charAtPos-65. == char;\n}\n\n// Is a character part of the hidden word ?\nbool isCharInWord(float char) {    \n    for (int i = 0; i < word_size; i++)\n        if (isCharAtPos(char, i)) \n            return true;     \n    return false;\n}\n\n// Is the hidden word fully discoverd ?\nbool isGameWon(float wordLength) {\n    float charsFound = 0.;\n    for (int i = 0; i < word_size; i++) {\n        charsFound += min(1., texelFetch(iChannel0, ivec2(i, R.y-2.), 0).g);\n    }\n    return charsFound >= wordLength;\n}\n\n// Get the hidden word's total length\nfloat getCurrentWordLength() {\n    for (int i = 0; i < word_size; i++) {\n        if (texelFetch(iChannel0, ivec2(i, R.y-2.), 0).r == 0.) \n            return float(i);\n    }\n    return float(word_size);\n}\n\n// Random value - https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p) {\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    return fract(p*p*2.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / R;\n    vec2  m = iMouse.xy / R;\n    ivec2 F = ivec2(fragCoord - .5);\n\n    vec4 hangData = texelFetch(iChannel0, ivec2(0, R.y-1.), 0);\n    vec4 predData = texelFetch(iChannel0, ivec2(1, R.y-1.), 0);\n    vec4 col = texture(iChannel0, uv);\n    \n    bool clickOnTry = iMouse.z > 0. && m.y < .1 && m.x > iR/2.+.5 && hangData.g == 0.;\n    bool resetGame  = iFrame == 0 ||                                // Reset game on the first frame\n              predData.a != iResolution.x ||                        // Or if the resolution has changed\n              iMouse.z > 0. && hangData.r > 0. && hangData.g == 0.; // Or on the first click after a game over\n    \n    if (resetGame) col *= 0.;\n    \n    // 2 frames after a new game started, fake a click on \"Try\"\n    if (iFrame == int(predData.g)+2) {\n        // Set the prediction to the first letter of the hidden word\n        predData.r = texelFetch(iChannel0, ivec2(0, R.y-2.), 0).r-65.;\n        clickOnTry = true;\n    }\n    \n    // On manual character selection (direct click), fake \"Try\"\n    vec2 id = floor((m  / vec2(iR, 1) - vec2(0, .2))*13.);\n    if (iMouse.z > 0. && abs(id.y+.5) < 1. && id.x < 13. && hangData.g == 0. && !resetGame && float(iFrame)-predData.g > 2.) {\n        // Set the prediction to the character located at the mouse position\n        predData.r = id.x - 13.*id.y;\n        clickOnTry = true;\n    }\n\n    // Game state management 1\n    // r: game state   (0: playing,  1: win, 2: lose), \n    // g: click memory (0: no click, 1: click on last frame + reset canvas flag, 2: click on last frame), \n    // b: missed char count, \n    // a: left panel state (0: game, 1: neural network)\n    if (F.x == 0 && F.y == int(R.y)-1) {        \n        // Wait for mouse release\n        if (col.g >= 1.) {\n            if (iMouse.z <= 0.) col.g = 0.;\n        }\n        // Clicked on \"Try\" button\n        else if (clickOnTry) {\n            // Get current network prediction\n            float char = predData.r;\n            \n            // Is the character in the hidden word ?\n            bool isInWord = isCharInWord(char); \n            // Has the character been already tried ?\n            bool alreadyTried = texelFetch(iChannel0, ivec2(int(char), R.y-3.), 0).r > 0.;\n            \n            // On a new failed attempt, increase the missed character count\n            if (!isInWord && !alreadyTried) col.b++;                    \n\n            // Remember that mouse is clicked\n            col.g = 1.;   \n        }\n        // Clicked on \"Show Game/Neural Network\" button\n        else if (iMouse.z > 0. && m.y < .1 && m.x < iR) {\n            // Invert the left panel state\n            col.a = 1. - col.a;\n            // Remember that mouse is clicked\n            col.g = 2.;\n        }\n        else if (iMouse.z > 0.)\n            col.g = 2.;\n          \n        // Game win\n        if (isGameWon(predData.b) && !resetGame && predData.b > 0. && hangData.r == 0.)\n            col.r = 1.;\n        // Game over\n        else if (col.b >= MAX_ATTEMPTS)\n            col.r = 2.;  \n    }\n    // Game state management 2\n    // r: current prediction \n    // g: frame at game start \n    // b: current word length\n    // a: current resolution x\n    else if (F.x == 1 && F.y == int(R.y)-1) { \n        // Upon starting a new game, store the current frame number\n        if (resetGame) {\n            col.g = float(iFrame);\n        }\n        \n        // 1 frame after starting a new game, store the current word length\n        if (iFrame == int(predData.g)+1) {\n            col.b = getCurrentWordLength();\n        } \n        // On every other frame, retrieve the prediction from Buffer D\n        else {\n            col.r = texelFetch(iChannel1, ivec2(int(num_classes), 1), 0).r;\n        }\n        \n        // Store the current width to detect canvas resize\n        col.a = iResolution.x;\n    }\n    // Hidden word management\n    // [0, word_size-1], \n    // r: char ID, \n    // g: char state (0: undiscovered, >=1: discovered)\n    else if (F.x < word_size && F.y == int(R.y)-2) {\n        // Upon starting a new game, select a new random word from the dictionary\n        if (resetGame) {\n            float rng = hash11(iDate.w) * 10.;\n            float id = floor(rng);\n            int[40] words;\n            \n            if      (id == 0.) words = words0;\n            else if (id == 1.) words = words1;\n            else if (id == 2.) words = words2;\n            else if (id == 3.) words = words3;\n            else if (id == 4.) words = words4;\n            else if (id == 5.) words = words5;\n            else if (id == 6.) words = words6;\n            else if (id == 7.) words = words7;\n            else if (id == 8.) words = words8;\n            else               words = words9;\n\n            id = floor(hash11(rng+iTime+iDate.w) * 4.);\n            int charIndex = int(id) * word_size + F.x;\n            col.r = float(words[charIndex]);\n        }\n        \n        // Update when click \"Try\"\n        if (clickOnTry) {\n            // Increment the current character state upon a click if the\n            // character is valid regarding the current prediction\n            col.g += float(isCharAtPos(predData.r, F.x));\n        }\n        \n        // Force show hidden word on game over\n        if (hangData.b >= MAX_ATTEMPTS && !resetGame) col.g = 1.;\n    }\n    // Alphabet management\n    // for pixels x in [0, 26], 0: not tried, 1: success, 2: failed\n    else if (F.x < 26 && F.y == int(R.y)-3) {\n        // Update only the corresponding character when click \"Try\"\n        if (clickOnTry && float(F.x) == predData.r) {\n            col.r = isCharInWord(predData.r) ? 1. : 2.;\n        }\n    }\n    // Drawing\n    else {\n        bool clickOnClear = iMouse.z > 0. && m.y < .1 && m.x > iR && m.x < iR/2.+.5 && hangData.g == 0.;\n        vec2  m = (iMouse.xy - fragCoord) / R.y;\n        float d = smoothstep(.06, 0., length(m)); // \"Pen\" intensity\n        d *= step(0., iMouse.z);                  // Only draw on mouse press\n        col = clamp(col + d, 0., 1.);             // Clamp in [0-1] range\n                \n        // Clear canvas conditions\n        if (resetGame || clickOnClear || clickOnTry || hangData.g == 1.) col *= 0.;\n    }\n            \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/* This buffers handles:\n   - Convolution #1 (Step 1)\n   - Max Pooling #1 (Step 3)\n   - Convolution #4 (Step 5)\n*/\n\n// Draw area margin\nconst float margin = .15;\n\n// Get normalized input pixel\n// p: [0, input_res-1]\nfloat i(vec2 p) {  \n    p = vec2((p.x+.5) / iAspect, p.y+.5) / input_res;\n    \n    p *= (1. - margin);\n    p.x += margin*.5/iAspect + iR;\n    p.y += margin;    \n    \n    return textureLod(iChannel0, p, log2(iResolution.y/input_res)).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {    \n    vec2 uv = fragCoord / R;\n    vec2 F  = fragCoord -.5; // Pixel coordinates\n\n    // Copy all the game management data from the Buffer A to Buffer B \n    // in order to have access to it inside the Image tab\n    vec4 col = texture(iChannel0, uv); \n    \n    // CNN Step 1: Convolution #1\n    // 1x28x28 => 8x26x26\n    if (F.x < f1 * F1 && F.y < F1) {\n        int fmap = int(F.x / F1);\n        vec2   p = mod(F, F1);\n        float  x;\n      \n        if      (fmap == 0) x = -.1486 *i(p) + .1954 *i(p+vec2(1,0)) + .427  *i(p+vec2(2,0)) - .0972 *i(p+vec2(0,1)) + .6795 *i(p+vec2(1,1)) + .2573 *i(p+vec2(2,1)) + .363  *i(p+vec2(0,2)) + .481  *i(p+vec2(1,2)) + .6536 *i(p+vec2(2,2)) + .0017 ;\n        else if (fmap == 1) x = -.4872 *i(p) - .1346 *i(p+vec2(1,0)) + .2494 *i(p+vec2(2,0)) + .3854 *i(p+vec2(0,1)) + .023  *i(p+vec2(1,1)) - .0038 *i(p+vec2(2,1)) + .3377 *i(p+vec2(0,2)) - .2748 *i(p+vec2(1,2)) + .076  *i(p+vec2(2,2)) + .5066 ;\n        else if (fmap == 2) x = -.0647 *i(p) - .4726 *i(p+vec2(1,0)) - .2256 *i(p+vec2(2,0)) + .4003 *i(p+vec2(0,1)) - .2734 *i(p+vec2(1,1)) + .099  *i(p+vec2(2,1)) + .4775 *i(p+vec2(0,2)) + .4412 *i(p+vec2(1,2)) + .3696 *i(p+vec2(2,2)) + .1814 ;\n        else if (fmap == 3) x = -.05   *i(p) + .0491 *i(p+vec2(1,0)) - .8318 *i(p+vec2(2,0)) - 1.1349*i(p+vec2(0,1)) - .4355 *i(p+vec2(1,1)) + .0529 *i(p+vec2(2,1)) - .7672 *i(p+vec2(0,2)) - .2598 *i(p+vec2(1,2)) + .0783 *i(p+vec2(2,2)) + .6147 ;\n        else if (fmap == 4) x = -.5161 *i(p) + .5607 *i(p+vec2(1,0)) + .2497 *i(p+vec2(2,0)) + .2084 *i(p+vec2(0,1)) + .5713 *i(p+vec2(1,1)) + .5264 *i(p+vec2(2,1)) - .2486 *i(p+vec2(0,2)) + .44   *i(p+vec2(1,2)) + .3286 *i(p+vec2(2,2)) + .0896 ;\n        else if (fmap == 5) x = -.4547 *i(p) - .4105 *i(p+vec2(1,0)) - .343  *i(p+vec2(2,0)) - .0175 *i(p+vec2(0,1)) - .2769 *i(p+vec2(1,1)) - .2417 *i(p+vec2(2,1)) + .5793 *i(p+vec2(0,2)) + .5533 *i(p+vec2(1,2)) + .4434 *i(p+vec2(2,2)) + .2215 ;\n        else if (fmap == 6) x =  .5154 *i(p) + .3763 *i(p+vec2(1,0)) + .339  *i(p+vec2(2,0)) - .0752 *i(p+vec2(0,1)) - .0239 *i(p+vec2(1,1)) - .1771 *i(p+vec2(2,1)) - .2101 *i(p+vec2(0,2)) - .197  *i(p+vec2(1,2)) - .3623 *i(p+vec2(2,2)) + .2826 ;\n        else if (fmap == 7) x =  .4506 *i(p) + .4106 *i(p+vec2(1,0)) - .3482 *i(p+vec2(2,0)) + .2583 *i(p+vec2(0,1)) - .1089 *i(p+vec2(1,1)) + .2302 *i(p+vec2(2,1)) + .0907 *i(p+vec2(0,2)) + .0353 *i(p+vec2(1,2)) - .1514 *i(p+vec2(2,2)) + .3524 ;\n\n        x = max(x, 0.); // ReLU Activation\n        col = vec4(x);\n    }\n    // CNN Step 3: Max Pooling #1\n    // 8x24x24 => 8x12x12\n    else if (F.x < f3 * F3 && F.y >= F1 && F.y < F1+F3) {\n        ivec2 p = ivec2(F - vec2(0, F1)) * 2;\n        \n        float x = max(texelFetch(iChannel2, p, 0).r,\n                  max(texelFetch(iChannel2, p + ivec2(0,1), 0).r,\n                  max(texelFetch(iChannel2, p + ivec2(1,0), 0).r,\n                      texelFetch(iChannel2, p + ivec2(1,1), 0).r)));\n                      \n        col = vec4(x);\n    }\n    // CNN Step 5: Convolution #4\n    // 10x10x10 => 12x8x8\n    else if (F.x < f5 * F5 && F.y >= F1+F3 && F.y < F1+F3+F5) {\n        int fmap = int(F.x / F5);\n        vec2   p = mod(F - vec2(0, F1+F3), F5) + vec2(0,F2);\n        float  x;\n      \n#define i(p) texelFetch(iChannel2, ivec2(p), 0).r\n        if      (fmap == 0) x =  .1717 *i(p) + .0012 *i(p+vec2(1,0)) - .1371 *i(p+vec2(2,0)) + .1847 *i(p+vec2(0,1)) + .2594 *i(p+vec2(1,1)) + .1017 *i(p+vec2(2,1)) - .0267 *i(p+vec2(0,2)) + .0795 *i(p+vec2(1,2)) + .2231 *i(p+vec2(2,2)) - .0583 *i(p+vec2(10,0)) - .1075 *i(p+vec2(11,0)) + .0773 *i(p+vec2(12,0)) - .3083 *i(p+vec2(10,1)) - .1898 *i(p+vec2(11,1)) - .0764 *i(p+vec2(12,1)) + .0002 *i(p+vec2(10,2)) - .0215 *i(p+vec2(11,2)) - .0884 *i(p+vec2(12,2)) + .0629 *i(p+vec2(20,0)) + .0664 *i(p+vec2(21,0)) - .0046 *i(p+vec2(22,0)) - .2799 *i(p+vec2(20,1)) + .0045 *i(p+vec2(21,1)) - .1298 *i(p+vec2(22,1)) - .1148 *i(p+vec2(20,2)) - .0899 *i(p+vec2(21,2)) - .0816 *i(p+vec2(22,2)) - .4166 *i(p+vec2(30,0)) - .0873 *i(p+vec2(31,0)) + .1241 *i(p+vec2(32,0)) - .1414 *i(p+vec2(30,1)) - .5487 *i(p+vec2(31,1)) - .2681 *i(p+vec2(32,1)) + .0039 *i(p+vec2(30,2)) - .2715 *i(p+vec2(31,2)) - .3884 *i(p+vec2(32,2)) - .0653 *i(p+vec2(40,0)) - .2153 *i(p+vec2(41,0)) - .2112 *i(p+vec2(42,0)) - .1116 *i(p+vec2(40,1)) - .1208 *i(p+vec2(41,1)) + .0086 *i(p+vec2(42,1)) + .0283 *i(p+vec2(40,2)) + .0147 *i(p+vec2(41,2)) + .0494 *i(p+vec2(42,2)) - .0927 *i(p+vec2(50,0)) - .077  *i(p+vec2(51,0)) + .0732 *i(p+vec2(52,0)) - .2291 *i(p+vec2(50,1)) - .2871 *i(p+vec2(51,1)) - .526  *i(p+vec2(52,1)) + .1427 *i(p+vec2(50,2)) - .3165 *i(p+vec2(51,2)) + .1353 *i(p+vec2(52,2)) - .0638 *i(p+vec2(60,0)) - .0072 *i(p+vec2(61,0)) + .0515 *i(p+vec2(62,0)) + .1109 *i(p+vec2(60,1)) - .1146 *i(p+vec2(61,1)) + .0734 *i(p+vec2(62,1)) + .0375 *i(p+vec2(60,2)) - .1577 *i(p+vec2(61,2)) + .1842 *i(p+vec2(62,2)) + .2911 *i(p+vec2(70,0)) + .0838 *i(p+vec2(71,0)) + .0689 *i(p+vec2(72,0)) + .1487 *i(p+vec2(70,1)) + .0553 *i(p+vec2(71,1)) + .0174 *i(p+vec2(72,1)) + .0243 *i(p+vec2(70,2)) - .2392 *i(p+vec2(71,2)) + .1613 *i(p+vec2(72,2)) + .1344 *i(p+vec2(80,0)) + .0903 *i(p+vec2(81,0)) - .1227 *i(p+vec2(82,0)) + .0562 *i(p+vec2(80,1)) + .1674 *i(p+vec2(81,1)) - .1393 *i(p+vec2(82,1)) + .0731 *i(p+vec2(80,2)) + .1479 *i(p+vec2(81,2)) + .1782 *i(p+vec2(82,2)) + .0814 *i(p+vec2(90,0)) - .1057 *i(p+vec2(91,0)) - .0821 *i(p+vec2(92,0)) + .0028 *i(p+vec2(90,1)) - .0116 *i(p+vec2(91,1)) - .0844 *i(p+vec2(92,1)) - .0337 *i(p+vec2(90,2)) + .0807 *i(p+vec2(91,2)) + .2533 *i(p+vec2(92,2)) + .2085 ;\n        else if (fmap == 1) x =  .1388 *i(p) + .2866 *i(p+vec2(1,0)) + .1983 *i(p+vec2(2,0)) - .0839 *i(p+vec2(0,1)) - .1087 *i(p+vec2(1,1)) - .2104 *i(p+vec2(2,1)) + .026  *i(p+vec2(0,2)) + .1007 *i(p+vec2(1,2)) + .0632 *i(p+vec2(2,2)) - .2813 *i(p+vec2(10,0)) - .1038 *i(p+vec2(11,0)) - .0926 *i(p+vec2(12,0)) + .1379 *i(p+vec2(10,1)) + .2079 *i(p+vec2(11,1)) + .2068 *i(p+vec2(12,1)) + .0834 *i(p+vec2(10,2)) - .0244 *i(p+vec2(11,2)) - .0722 *i(p+vec2(12,2)) - .2332 *i(p+vec2(20,0)) + .0209 *i(p+vec2(21,0)) - .1158 *i(p+vec2(22,0)) - .1332 *i(p+vec2(20,1)) - .0935 *i(p+vec2(21,1)) - .1898 *i(p+vec2(22,1)) + .1412 *i(p+vec2(20,2)) - .0079 *i(p+vec2(21,2)) - .1441 *i(p+vec2(22,2)) - .1714 *i(p+vec2(30,0)) - .117  *i(p+vec2(31,0)) - .1441 *i(p+vec2(32,0)) + .2259 *i(p+vec2(30,1)) + .0978 *i(p+vec2(31,1)) - .0101 *i(p+vec2(32,1)) + .0245 *i(p+vec2(30,2)) - .006  *i(p+vec2(31,2)) + .0792 *i(p+vec2(32,2)) - .0364 *i(p+vec2(40,0)) - .1046 *i(p+vec2(41,0)) + .1095 *i(p+vec2(42,0)) - .0058 *i(p+vec2(40,1)) + .115  *i(p+vec2(41,1)) + .5827 *i(p+vec2(42,1)) - .1166 *i(p+vec2(40,2)) - .2658 *i(p+vec2(41,2)) + .205  *i(p+vec2(42,2)) - .1491 *i(p+vec2(50,0)) - .2093 *i(p+vec2(51,0)) + .1161 *i(p+vec2(52,0)) + .0342 *i(p+vec2(50,1)) + .0012 *i(p+vec2(51,1)) - .1078 *i(p+vec2(52,1)) - .249  *i(p+vec2(50,2)) - .0472 *i(p+vec2(51,2)) - .4205 *i(p+vec2(52,2)) + .2256 *i(p+vec2(60,0)) + .092  *i(p+vec2(61,0)) + .1221 *i(p+vec2(62,0)) + .2281 *i(p+vec2(60,1)) - .1039 *i(p+vec2(61,1)) - .2234 *i(p+vec2(62,1)) - .0922 *i(p+vec2(60,2)) - .1282 *i(p+vec2(61,2)) - .011  *i(p+vec2(62,2)) + .1871 *i(p+vec2(70,0)) + .2398 *i(p+vec2(71,0)) - .0584 *i(p+vec2(72,0)) - .4436 *i(p+vec2(70,1)) - .4083 *i(p+vec2(71,1)) - .2    *i(p+vec2(72,1)) + .1498 *i(p+vec2(70,2)) - .0439 *i(p+vec2(71,2)) + .0748 *i(p+vec2(72,2)) - .1496 *i(p+vec2(80,0)) - .0846 *i(p+vec2(81,0)) - .1014 *i(p+vec2(82,0)) + .0065 *i(p+vec2(80,1)) - .0029 *i(p+vec2(81,1)) - .022  *i(p+vec2(82,1)) - .106  *i(p+vec2(80,2)) - .0235 *i(p+vec2(81,2)) + .1248 *i(p+vec2(82,2)) + .0463 *i(p+vec2(90,0)) - .1198 *i(p+vec2(91,0)) - .0198 *i(p+vec2(92,0)) + .0643 *i(p+vec2(90,1)) + .0958 *i(p+vec2(91,1)) - .0855 *i(p+vec2(92,1)) + .0257 *i(p+vec2(90,2)) - .0637 *i(p+vec2(91,2)) - .065  *i(p+vec2(92,2)) - .0077 ;\n        else if (fmap == 2) x = -.1831 *i(p) - .0739 *i(p+vec2(1,0)) - .0482 *i(p+vec2(2,0)) - .0522 *i(p+vec2(0,1)) - .1425 *i(p+vec2(1,1)) - .0014 *i(p+vec2(2,1)) - .109  *i(p+vec2(0,2)) - .2125 *i(p+vec2(1,2)) - .162  *i(p+vec2(2,2)) + .1057 *i(p+vec2(10,0)) + .0366 *i(p+vec2(11,0)) - .0064 *i(p+vec2(12,0)) - .0039 *i(p+vec2(10,1)) - .0134 *i(p+vec2(11,1)) - .119  *i(p+vec2(12,1)) - .3047 *i(p+vec2(10,2)) - .0425 *i(p+vec2(11,2)) + .0075 *i(p+vec2(12,2)) + .0817 *i(p+vec2(20,0)) + .0231 *i(p+vec2(21,0)) + .095  *i(p+vec2(22,0)) + .0743 *i(p+vec2(20,1)) + .025  *i(p+vec2(21,1)) - .243  *i(p+vec2(22,1)) - .0114 *i(p+vec2(20,2)) - .087  *i(p+vec2(21,2)) - .0222 *i(p+vec2(22,2)) + .169  *i(p+vec2(30,0)) + .1383 *i(p+vec2(31,0)) + .0737 *i(p+vec2(32,0)) - .032  *i(p+vec2(30,1)) - .0197 *i(p+vec2(31,1)) - .0772 *i(p+vec2(32,1)) - .1133 *i(p+vec2(30,2)) - .1718 *i(p+vec2(31,2)) - .2342 *i(p+vec2(32,2)) - .0867 *i(p+vec2(40,0)) - .0206 *i(p+vec2(41,0)) - .0595 *i(p+vec2(42,0)) + .0946 *i(p+vec2(40,1)) + .0069 *i(p+vec2(41,1)) + .0947 *i(p+vec2(42,1)) + .2194 *i(p+vec2(40,2)) + .0968 *i(p+vec2(41,2)) - .1394 *i(p+vec2(42,2)) + .094  *i(p+vec2(50,0)) + .0779 *i(p+vec2(51,0)) + .0774 *i(p+vec2(52,0)) + .1327 *i(p+vec2(50,1)) + .2157 *i(p+vec2(51,1)) + .1759 *i(p+vec2(52,1)) - .2227 *i(p+vec2(50,2)) - .0284 *i(p+vec2(51,2)) + .0705 *i(p+vec2(52,2)) + .1853 *i(p+vec2(60,0)) - .1505 *i(p+vec2(61,0)) + .1193 *i(p+vec2(62,0)) + .1821 *i(p+vec2(60,1)) + .0678 *i(p+vec2(61,1)) + .1168 *i(p+vec2(62,1)) + .3405 *i(p+vec2(60,2)) + .0973 *i(p+vec2(61,2)) + .2893 *i(p+vec2(62,2)) + .1693 *i(p+vec2(70,0)) + .1193 *i(p+vec2(71,0)) + .1831 *i(p+vec2(72,0)) + .1787 *i(p+vec2(70,1)) + .2097 *i(p+vec2(71,1)) + .1993 *i(p+vec2(72,1)) + .234  *i(p+vec2(70,2)) + .1566 *i(p+vec2(71,2)) + .2383 *i(p+vec2(72,2)) - .0021 *i(p+vec2(80,0)) - .0571 *i(p+vec2(81,0)) - .094  *i(p+vec2(82,0)) + .0641 *i(p+vec2(80,1)) + .0402 *i(p+vec2(81,1)) + .0272 *i(p+vec2(82,1)) - .0084 *i(p+vec2(80,2)) + .1278 *i(p+vec2(81,2)) + .1751 *i(p+vec2(82,2)) - .1039 *i(p+vec2(90,0)) - .1036 *i(p+vec2(91,0)) - .0678 *i(p+vec2(92,0)) + .0692 *i(p+vec2(90,1)) - .2346 *i(p+vec2(91,1)) - .2681 *i(p+vec2(92,1)) - .1256 *i(p+vec2(90,2)) - .1729 *i(p+vec2(91,2)) - .3839 *i(p+vec2(92,2)) - .0125 ;\n        else if (fmap == 3) x =  .0027 *i(p) + .0867 *i(p+vec2(1,0)) - .0223 *i(p+vec2(2,0)) - .2435 *i(p+vec2(0,1)) - .2366 *i(p+vec2(1,1)) - .1966 *i(p+vec2(2,1)) + .0307 *i(p+vec2(0,2)) - .1586 *i(p+vec2(1,2)) - .1794 *i(p+vec2(2,2)) + .1802 *i(p+vec2(10,0)) + .1997 *i(p+vec2(11,0)) - .0889 *i(p+vec2(12,0)) + .014  *i(p+vec2(10,1)) - .1604 *i(p+vec2(11,1)) - .0232 *i(p+vec2(12,1)) - .0783 *i(p+vec2(10,2)) - .1544 *i(p+vec2(11,2)) - .0899 *i(p+vec2(12,2)) + .1446 *i(p+vec2(20,0)) + .0598 *i(p+vec2(21,0)) + .1455 *i(p+vec2(22,0)) + .1949 *i(p+vec2(20,1)) + .0473 *i(p+vec2(21,1)) - .031  *i(p+vec2(22,1)) + .0236 *i(p+vec2(20,2)) + .0463 *i(p+vec2(21,2)) + .1564 *i(p+vec2(22,2)) - .1685 *i(p+vec2(30,0)) + .0249 *i(p+vec2(31,0)) - .0171 *i(p+vec2(32,0)) - .2813 *i(p+vec2(30,1)) - .2186 *i(p+vec2(31,1)) - .228  *i(p+vec2(32,1)) + .1404 *i(p+vec2(30,2)) + .2468 *i(p+vec2(31,2)) + .2146 *i(p+vec2(32,2)) - .008  *i(p+vec2(40,0)) + .2399 *i(p+vec2(41,0)) + .4419 *i(p+vec2(42,0)) - .0344 *i(p+vec2(40,1)) + .0765 *i(p+vec2(41,1)) + .2634 *i(p+vec2(42,1)) - .1237 *i(p+vec2(40,2)) - .1453 *i(p+vec2(41,2)) + .0663 *i(p+vec2(42,2)) + .0224 *i(p+vec2(50,0)) + .0323 *i(p+vec2(51,0)) + .0883 *i(p+vec2(52,0)) - .2062 *i(p+vec2(50,1)) - .1655 *i(p+vec2(51,1)) + .0245 *i(p+vec2(52,1)) - .1144 *i(p+vec2(50,2)) + .0463 *i(p+vec2(51,2)) + .0973 *i(p+vec2(52,2)) + .1838 *i(p+vec2(60,0)) + .2633 *i(p+vec2(61,0)) + .1142 *i(p+vec2(62,0)) - .3107 *i(p+vec2(60,1)) - .1468 *i(p+vec2(61,1)) + .0853 *i(p+vec2(62,1)) + .0703 *i(p+vec2(60,2)) + .0477 *i(p+vec2(61,2)) + .0502 *i(p+vec2(62,2)) - .0259 *i(p+vec2(70,0)) + .1534 *i(p+vec2(71,0)) + .1713 *i(p+vec2(72,0)) - .0275 *i(p+vec2(70,1)) + .0198 *i(p+vec2(71,1)) + .0759 *i(p+vec2(72,1)) - .0529 *i(p+vec2(70,2)) - .1119 *i(p+vec2(71,2)) - .0181 *i(p+vec2(72,2)) - .0454 *i(p+vec2(80,0)) + .0438 *i(p+vec2(81,0)) + .0438 *i(p+vec2(82,0)) + .0515 *i(p+vec2(80,1)) + .0702 *i(p+vec2(81,1)) + .2139 *i(p+vec2(82,1)) + .0153 *i(p+vec2(80,2)) - .0453 *i(p+vec2(81,2)) + .0501 *i(p+vec2(82,2)) - .16   *i(p+vec2(90,0)) - .1239 *i(p+vec2(91,0)) - .0831 *i(p+vec2(92,0)) + .0275 *i(p+vec2(90,1)) - .1382 *i(p+vec2(91,1)) - .0978 *i(p+vec2(92,1)) - .0615 *i(p+vec2(90,2)) + .034  *i(p+vec2(91,2)) - .0646 *i(p+vec2(92,2)) + .0153 ;\n        else if (fmap == 4) x =  .1387 *i(p) + .0721 *i(p+vec2(1,0)) + .046  *i(p+vec2(2,0)) - .082  *i(p+vec2(0,1)) - .1704 *i(p+vec2(1,1)) - .0429 *i(p+vec2(2,1)) - .1359 *i(p+vec2(0,2)) + .0758 *i(p+vec2(1,2)) - .0288 *i(p+vec2(2,2)) - .0414 *i(p+vec2(10,0)) - .0152 *i(p+vec2(11,0)) - .0405 *i(p+vec2(12,0)) + .1386 *i(p+vec2(10,1)) + .0615 *i(p+vec2(11,1)) - .1058 *i(p+vec2(12,1)) + .07   *i(p+vec2(10,2)) - .0085 *i(p+vec2(11,2)) + .1098 *i(p+vec2(12,2)) + .1563 *i(p+vec2(20,0)) + .0777 *i(p+vec2(21,0)) + .0121 *i(p+vec2(22,0)) + .0215 *i(p+vec2(20,1)) + .0036 *i(p+vec2(21,1)) + .1072 *i(p+vec2(22,1)) - .0137 *i(p+vec2(20,2)) + .0705 *i(p+vec2(21,2)) - .074  *i(p+vec2(22,2)) - .13   *i(p+vec2(30,0)) - .1525 *i(p+vec2(31,0)) + .0453 *i(p+vec2(32,0)) - .2191 *i(p+vec2(30,1)) - .2683 *i(p+vec2(31,1)) - .111  *i(p+vec2(32,1)) - .1348 *i(p+vec2(30,2)) + .0868 *i(p+vec2(31,2)) + .1374 *i(p+vec2(32,2)) - .0386 *i(p+vec2(40,0)) - .105  *i(p+vec2(41,0)) - .2427 *i(p+vec2(42,0)) + .1577 *i(p+vec2(40,1)) + .1214 *i(p+vec2(41,1)) + .1003 *i(p+vec2(42,1)) + .2907 *i(p+vec2(40,2)) + .1859 *i(p+vec2(41,2)) + .2077 *i(p+vec2(42,2)) - .1183 *i(p+vec2(50,0)) - .1242 *i(p+vec2(51,0)) - .1365 *i(p+vec2(52,0)) + .1    *i(p+vec2(50,1)) + .0243 *i(p+vec2(51,1)) + .0483 *i(p+vec2(52,1)) + .2559 *i(p+vec2(50,2)) + .0269 *i(p+vec2(51,2)) + .016  *i(p+vec2(52,2)) + .0757 *i(p+vec2(60,0)) + .159  *i(p+vec2(61,0)) + .2101 *i(p+vec2(62,0)) - .1736 *i(p+vec2(60,1)) - .2983 *i(p+vec2(61,1)) - .2183 *i(p+vec2(62,1)) - .0529 *i(p+vec2(60,2)) - .0714 *i(p+vec2(61,2)) - .0361 *i(p+vec2(62,2)) + .0584 *i(p+vec2(70,0)) + .0031 *i(p+vec2(71,0)) + .0459 *i(p+vec2(72,0)) - .054  *i(p+vec2(70,1)) + .0249 *i(p+vec2(71,1)) + .0757 *i(p+vec2(72,1)) - .0806 *i(p+vec2(70,2)) + .0082 *i(p+vec2(71,2)) + .0705 *i(p+vec2(72,2)) - .0756 *i(p+vec2(80,0)) - .1537 *i(p+vec2(81,0)) - .2918 *i(p+vec2(82,0)) - .1167 *i(p+vec2(80,1)) - .1644 *i(p+vec2(81,1)) - .3289 *i(p+vec2(82,1)) + .3718 *i(p+vec2(80,2)) + .2903 *i(p+vec2(81,2)) + .088  *i(p+vec2(82,2)) - .1489 *i(p+vec2(90,0)) - .0731 *i(p+vec2(91,0)) - .1689 *i(p+vec2(92,0)) + .0867 *i(p+vec2(90,1)) - .0945 *i(p+vec2(91,1)) - .0229 *i(p+vec2(92,1)) + .1268 *i(p+vec2(90,2)) + .0571 *i(p+vec2(91,2)) + .0265 *i(p+vec2(92,2)) + .1925 ;\n        else if (fmap == 5) x = -.1357 *i(p) - .1096 *i(p+vec2(1,0)) - .0193 *i(p+vec2(2,0)) - .0206 *i(p+vec2(0,1)) - .0536 *i(p+vec2(1,1)) + .0662 *i(p+vec2(2,1)) - .0432 *i(p+vec2(0,2)) + .1011 *i(p+vec2(1,2)) + .1329 *i(p+vec2(2,2)) + .1413 *i(p+vec2(10,0)) - .036  *i(p+vec2(11,0)) - .0694 *i(p+vec2(12,0)) - .1633 *i(p+vec2(10,1)) - .0484 *i(p+vec2(11,1)) - .0637 *i(p+vec2(12,1)) - .0722 *i(p+vec2(10,2)) - .0552 *i(p+vec2(11,2)) - .197  *i(p+vec2(12,2)) - .0489 *i(p+vec2(20,0)) - .0637 *i(p+vec2(21,0)) + .0289 *i(p+vec2(22,0)) - .2165 *i(p+vec2(20,1)) - .0729 *i(p+vec2(21,1)) - .0419 *i(p+vec2(22,1)) + .0018 *i(p+vec2(20,2)) - .0012 *i(p+vec2(21,2)) + .1395 *i(p+vec2(22,2)) + .0428 *i(p+vec2(30,0)) - .1156 *i(p+vec2(31,0)) - .3186 *i(p+vec2(32,0)) - .3055 *i(p+vec2(30,1)) - .1916 *i(p+vec2(31,1)) - .1304 *i(p+vec2(32,1)) + .1032 *i(p+vec2(30,2)) - .0326 *i(p+vec2(31,2)) - .0356 *i(p+vec2(32,2)) + .1811 *i(p+vec2(40,0)) + .2027 *i(p+vec2(41,0)) + .0592 *i(p+vec2(42,0)) + .3487 *i(p+vec2(40,1)) + .2046 *i(p+vec2(41,1)) + .0115 *i(p+vec2(42,1)) + .2386 *i(p+vec2(40,2)) + .1159 *i(p+vec2(41,2)) + .2392 *i(p+vec2(42,2)) + .1151 *i(p+vec2(50,0)) + .0338 *i(p+vec2(51,0)) + .04   *i(p+vec2(52,0)) - .008  *i(p+vec2(50,1)) - .1031 *i(p+vec2(51,1)) - .028  *i(p+vec2(52,1)) - .0997 *i(p+vec2(50,2)) - .1737 *i(p+vec2(51,2)) - .4336 *i(p+vec2(52,2)) + .064  *i(p+vec2(60,0)) + .0973 *i(p+vec2(61,0)) + .0268 *i(p+vec2(62,0)) - .0526 *i(p+vec2(60,1)) + .0128 *i(p+vec2(61,1)) - .0794 *i(p+vec2(62,1)) + .0571 *i(p+vec2(60,2)) + .0426 *i(p+vec2(61,2)) - .0537 *i(p+vec2(62,2)) - .0279 *i(p+vec2(70,0)) + .049  *i(p+vec2(71,0)) - .0276 *i(p+vec2(72,0)) + .2031 *i(p+vec2(70,1)) + .0894 *i(p+vec2(71,1)) - .0982 *i(p+vec2(72,1)) + .0464 *i(p+vec2(70,2)) - .0166 *i(p+vec2(71,2)) + .0304 *i(p+vec2(72,2)) - .0733 *i(p+vec2(80,0)) + .0092 *i(p+vec2(81,0)) - .0619 *i(p+vec2(82,0)) + .1281 *i(p+vec2(80,1)) + .1384 *i(p+vec2(81,1)) + .0078 *i(p+vec2(82,1)) + .056  *i(p+vec2(80,2)) + .1267 *i(p+vec2(81,2)) + .0299 *i(p+vec2(82,2)) - .1931 *i(p+vec2(90,0)) + .0115 *i(p+vec2(91,0)) + .0063 *i(p+vec2(92,0)) + .042  *i(p+vec2(90,1)) - .0155 *i(p+vec2(91,1)) + .0793 *i(p+vec2(92,1)) + .0886 *i(p+vec2(90,2)) - .0426 *i(p+vec2(91,2)) - .0824 *i(p+vec2(92,2)) - .0693 ;\n        else if (fmap == 6) x = -.178  *i(p) - .0017 *i(p+vec2(1,0)) - .0142 *i(p+vec2(2,0)) + .0227 *i(p+vec2(0,1)) - .1036 *i(p+vec2(1,1)) - .0387 *i(p+vec2(2,1)) + .1756 *i(p+vec2(0,2)) + .0987 *i(p+vec2(1,2)) + .0902 *i(p+vec2(2,2)) + .2976 *i(p+vec2(10,0)) + .2693 *i(p+vec2(11,0)) - .0621 *i(p+vec2(12,0)) + .148  *i(p+vec2(10,1)) + .0548 *i(p+vec2(11,1)) - .0588 *i(p+vec2(12,1)) - .1724 *i(p+vec2(10,2)) - .0229 *i(p+vec2(11,2)) + .0285 *i(p+vec2(12,2)) + .0186 *i(p+vec2(20,0)) + .1608 *i(p+vec2(21,0)) - .3328 *i(p+vec2(22,0)) + .2052 *i(p+vec2(20,1)) + .1804 *i(p+vec2(21,1)) + .0315 *i(p+vec2(22,1)) + .2228 *i(p+vec2(20,2)) - .0364 *i(p+vec2(21,2)) - .0105 *i(p+vec2(22,2)) + .1862 *i(p+vec2(30,0)) - .0444 *i(p+vec2(31,0)) - .1762 *i(p+vec2(32,0)) + .1573 *i(p+vec2(30,1)) + .0186 *i(p+vec2(31,1)) + .0335 *i(p+vec2(32,1)) + .118  *i(p+vec2(30,2)) + .1449 *i(p+vec2(31,2)) + .2762 *i(p+vec2(32,2)) - .0988 *i(p+vec2(40,0)) + .017  *i(p+vec2(41,0)) + .0664 *i(p+vec2(42,0)) - .3941 *i(p+vec2(40,1)) - .2333 *i(p+vec2(41,1)) + .1682 *i(p+vec2(42,1)) + .0283 *i(p+vec2(40,2)) - .0795 *i(p+vec2(41,2)) + .0152 *i(p+vec2(42,2)) + .1508 *i(p+vec2(50,0)) + .0575 *i(p+vec2(51,0)) + .065  *i(p+vec2(52,0)) - .3041 *i(p+vec2(50,1)) + .0351 *i(p+vec2(51,1)) + .0723 *i(p+vec2(52,1)) - .0287 *i(p+vec2(50,2)) - .2766 *i(p+vec2(51,2)) - .3485 *i(p+vec2(52,2)) + .1456 *i(p+vec2(60,0)) - .1952 *i(p+vec2(61,0)) - .1434 *i(p+vec2(62,0)) + .118  *i(p+vec2(60,1)) + .0121 *i(p+vec2(61,1)) - .0334 *i(p+vec2(62,1)) + .1098 *i(p+vec2(60,2)) - .0129 *i(p+vec2(61,2)) + .0221 *i(p+vec2(62,2)) - .0066 *i(p+vec2(70,0)) + .0138 *i(p+vec2(71,0)) - .1323 *i(p+vec2(72,0)) - .0494 *i(p+vec2(70,1)) - .2867 *i(p+vec2(71,1)) - .2088 *i(p+vec2(72,1)) - .3524 *i(p+vec2(70,2)) - .1497 *i(p+vec2(71,2)) + .0017 *i(p+vec2(72,2)) + .0471 *i(p+vec2(80,0)) - .1236 *i(p+vec2(81,0)) - .1049 *i(p+vec2(82,0)) - .0289 *i(p+vec2(80,1)) + .0301 *i(p+vec2(81,1)) - .0017 *i(p+vec2(82,1)) + .0113 *i(p+vec2(80,2)) - .1323 *i(p+vec2(81,2)) - .0764 *i(p+vec2(82,2)) + .02   *i(p+vec2(90,0)) - .0373 *i(p+vec2(91,0)) + .0063 *i(p+vec2(92,0)) - .023  *i(p+vec2(90,1)) + .0726 *i(p+vec2(91,1)) + .1056 *i(p+vec2(92,1)) - .1963 *i(p+vec2(90,2)) - .0837 *i(p+vec2(91,2)) - .0245 *i(p+vec2(92,2)) - .1422 ;\n        else if (fmap == 7) x =  .2059 *i(p) - .0481 *i(p+vec2(1,0)) + .1304 *i(p+vec2(2,0)) + .242  *i(p+vec2(0,1)) + .0784 *i(p+vec2(1,1)) + .2544 *i(p+vec2(2,1)) + .0561 *i(p+vec2(0,2)) + .087  *i(p+vec2(1,2)) + .0915 *i(p+vec2(2,2)) - .1326 *i(p+vec2(10,0)) - .3046 *i(p+vec2(11,0)) - .2378 *i(p+vec2(12,0)) + .2593 *i(p+vec2(10,1)) - .2224 *i(p+vec2(11,1)) - .2745 *i(p+vec2(12,1)) + .1752 *i(p+vec2(10,2)) - .0254 *i(p+vec2(11,2)) + .0045 *i(p+vec2(12,2)) + .0252 *i(p+vec2(20,0)) - .2596 *i(p+vec2(21,0)) - .176  *i(p+vec2(22,0)) - .2964 *i(p+vec2(20,1)) - .2841 *i(p+vec2(21,1)) - .1    *i(p+vec2(22,1)) + .1211 *i(p+vec2(20,2)) + .0426 *i(p+vec2(21,2)) + .0462 *i(p+vec2(22,2)) - .3311 *i(p+vec2(30,0)) + .0527 *i(p+vec2(31,0)) + .082  *i(p+vec2(32,0)) - .0224 *i(p+vec2(30,1)) - .1532 *i(p+vec2(31,1)) - .0252 *i(p+vec2(32,1)) + .1407 *i(p+vec2(30,2)) - .1581 *i(p+vec2(31,2)) - .241  *i(p+vec2(32,2)) - .1697 *i(p+vec2(40,0)) - .1502 *i(p+vec2(41,0)) + .0125 *i(p+vec2(42,0)) + .0085 *i(p+vec2(40,1)) + .002  *i(p+vec2(41,1)) - .0999 *i(p+vec2(42,1)) - .0334 *i(p+vec2(40,2)) - .0176 *i(p+vec2(41,2)) - .171  *i(p+vec2(42,2)) + .0912 *i(p+vec2(50,0)) - .0543 *i(p+vec2(51,0)) + .0482 *i(p+vec2(52,0)) + .0479 *i(p+vec2(50,1)) + .0193 *i(p+vec2(51,1)) + .0976 *i(p+vec2(52,1)) - .1671 *i(p+vec2(50,2)) + .2104 *i(p+vec2(51,2)) + .1478 *i(p+vec2(52,2)) - .3183 *i(p+vec2(60,0)) - .162  *i(p+vec2(61,0)) + .1596 *i(p+vec2(62,0)) - .2833 *i(p+vec2(60,1)) - .1174 *i(p+vec2(61,1)) + .2006 *i(p+vec2(62,1)) - .1148 *i(p+vec2(60,2)) - .1804 *i(p+vec2(61,2)) - .0499 *i(p+vec2(62,2)) - .3077 *i(p+vec2(70,0)) - .0837 *i(p+vec2(71,0)) - .0843 *i(p+vec2(72,0)) - .0289 *i(p+vec2(70,1)) + .0824 *i(p+vec2(71,1)) + .107  *i(p+vec2(72,1)) + .0531 *i(p+vec2(70,2)) - .0422 *i(p+vec2(71,2)) + .0362 *i(p+vec2(72,2)) - .3698 *i(p+vec2(80,0)) + .0344 *i(p+vec2(81,0)) + .1712 *i(p+vec2(82,0)) - .3213 *i(p+vec2(80,1)) + .0174 *i(p+vec2(81,1)) + .1488 *i(p+vec2(82,1)) - .1002 *i(p+vec2(80,2)) + .0213 *i(p+vec2(81,2)) + .0765 *i(p+vec2(82,2)) + .0068 *i(p+vec2(90,0)) + .0262 *i(p+vec2(91,0)) + .1682 *i(p+vec2(92,0)) - .0264 *i(p+vec2(90,1)) + .0057 *i(p+vec2(91,1)) + .1286 *i(p+vec2(92,1)) + .0692 *i(p+vec2(90,2)) - .0488 *i(p+vec2(91,2)) + .0636 *i(p+vec2(92,2)) + .061  ;\n        else if (fmap == 8) x =  .0117 *i(p) + .1351 *i(p+vec2(1,0)) + .0619 *i(p+vec2(2,0)) + .129  *i(p+vec2(0,1)) - .0459 *i(p+vec2(1,1)) + .0854 *i(p+vec2(2,1)) - .2243 *i(p+vec2(0,2)) + .0991 *i(p+vec2(1,2)) + .0596 *i(p+vec2(2,2)) + .0223 *i(p+vec2(10,0)) + .2149 *i(p+vec2(11,0)) + .1969 *i(p+vec2(12,0)) - .0947 *i(p+vec2(10,1)) - .1803 *i(p+vec2(11,1)) - .0379 *i(p+vec2(12,1)) + .1321 *i(p+vec2(10,2)) - .0605 *i(p+vec2(11,2)) - .1092 *i(p+vec2(12,2)) + .2369 *i(p+vec2(20,0)) + .1685 *i(p+vec2(21,0)) - .6484 *i(p+vec2(22,0)) + .1755 *i(p+vec2(20,1)) + .1478 *i(p+vec2(21,1)) - .2681 *i(p+vec2(22,1)) - .0726 *i(p+vec2(20,2)) - .1612 *i(p+vec2(21,2)) - .1977 *i(p+vec2(22,2)) - .0788 *i(p+vec2(30,0)) + .1557 *i(p+vec2(31,0)) + .1981 *i(p+vec2(32,0)) - .1408 *i(p+vec2(30,1)) + .2294 *i(p+vec2(31,1)) + .0968 *i(p+vec2(32,1)) + .0903 *i(p+vec2(30,2)) - .2584 *i(p+vec2(31,2)) - .0717 *i(p+vec2(32,2)) - .1607 *i(p+vec2(40,0)) - .2929 *i(p+vec2(41,0)) - .2501 *i(p+vec2(42,0)) + .0968 *i(p+vec2(40,1)) + .0122 *i(p+vec2(41,1)) - .1602 *i(p+vec2(42,1)) + .2305 *i(p+vec2(40,2)) + .1202 *i(p+vec2(41,2)) + .0676 *i(p+vec2(42,2)) - .1007 *i(p+vec2(50,0)) + .0364 *i(p+vec2(51,0)) + .1113 *i(p+vec2(52,0)) + .1374 *i(p+vec2(50,1)) - .0946 *i(p+vec2(51,1)) + .0703 *i(p+vec2(52,1)) + .0562 *i(p+vec2(50,2)) - .1405 *i(p+vec2(51,2)) - .0604 *i(p+vec2(52,2)) + .0522 *i(p+vec2(60,0)) + .0506 *i(p+vec2(61,0)) - .0415 *i(p+vec2(62,0)) - .0837 *i(p+vec2(60,1)) + .0084 *i(p+vec2(61,1)) - .0156 *i(p+vec2(62,1)) + .1148 *i(p+vec2(60,2)) - .0445 *i(p+vec2(61,2)) + .0063 *i(p+vec2(62,2)) - .1711 *i(p+vec2(70,0)) + .1141 *i(p+vec2(71,0)) + .027  *i(p+vec2(72,0)) - .4357 *i(p+vec2(70,1)) - .2002 *i(p+vec2(71,1)) + .0025 *i(p+vec2(72,1)) + .0151 *i(p+vec2(70,2)) - .1598 *i(p+vec2(71,2)) + .069  *i(p+vec2(72,2)) - .003  *i(p+vec2(80,0)) - .1422 *i(p+vec2(81,0)) - .0689 *i(p+vec2(82,0)) - .1401 *i(p+vec2(80,1)) - .3764 *i(p+vec2(81,1)) - .2045 *i(p+vec2(82,1)) + .0834 *i(p+vec2(80,2)) - .1764 *i(p+vec2(81,2)) + .064  *i(p+vec2(82,2)) + .0193 *i(p+vec2(90,0)) - .0321 *i(p+vec2(91,0)) + .0185 *i(p+vec2(92,0)) - .0939 *i(p+vec2(90,1)) + .0225 *i(p+vec2(91,1)) - .0091 *i(p+vec2(92,1)) - .003  *i(p+vec2(90,2)) + .016  *i(p+vec2(91,2)) + .0728 *i(p+vec2(92,2)) + .0115 ;\n        else if (fmap == 9) x = -.031  *i(p) + .07   *i(p+vec2(1,0)) - .0745 *i(p+vec2(2,0)) + .0205 *i(p+vec2(0,1)) + .0615 *i(p+vec2(1,1)) + .0088 *i(p+vec2(2,1)) - .0868 *i(p+vec2(0,2)) - .06   *i(p+vec2(1,2)) - .0797 *i(p+vec2(2,2)) - .183  *i(p+vec2(10,0)) + .0111 *i(p+vec2(11,0)) - .047  *i(p+vec2(12,0)) + .0295 *i(p+vec2(10,1)) - .0334 *i(p+vec2(11,1)) - .1799 *i(p+vec2(12,1)) + .3414 *i(p+vec2(10,2)) + .1907 *i(p+vec2(11,2)) + .0397 *i(p+vec2(12,2)) - .2755 *i(p+vec2(20,0)) - .5606 *i(p+vec2(21,0)) - .1192 *i(p+vec2(22,0)) - .7573 *i(p+vec2(20,1)) - .5794 *i(p+vec2(21,1)) - .1322 *i(p+vec2(22,1)) - .2965 *i(p+vec2(20,2)) - .1063 *i(p+vec2(21,2)) - .1752 *i(p+vec2(22,2)) - .2784 *i(p+vec2(30,0)) - .0955 *i(p+vec2(31,0)) - .0751 *i(p+vec2(32,0)) - .0285 *i(p+vec2(30,1)) - .0201 *i(p+vec2(31,1)) - .0964 *i(p+vec2(32,1)) + .2737 *i(p+vec2(30,2)) + .0673 *i(p+vec2(31,2)) + .0133 *i(p+vec2(32,2)) + .0082 *i(p+vec2(40,0)) + .1701 *i(p+vec2(41,0)) - .0881 *i(p+vec2(42,0)) + .1932 *i(p+vec2(40,1)) + .0779 *i(p+vec2(41,1)) + .1634 *i(p+vec2(42,1)) + .2334 *i(p+vec2(40,2)) + .1472 *i(p+vec2(41,2)) + .2416 *i(p+vec2(42,2)) - .1409 *i(p+vec2(50,0)) - .0594 *i(p+vec2(51,0)) + .1137 *i(p+vec2(52,0)) + .0426 *i(p+vec2(50,1)) - .0738 *i(p+vec2(51,1)) - .5315 *i(p+vec2(52,1)) - .0487 *i(p+vec2(50,2)) - .3007 *i(p+vec2(51,2)) - .199  *i(p+vec2(52,2)) - .1765 *i(p+vec2(60,0)) - .099  *i(p+vec2(61,0)) + .1    *i(p+vec2(62,0)) - .1392 *i(p+vec2(60,1)) - .0968 *i(p+vec2(61,1)) + .0943 *i(p+vec2(62,1)) + .1189 *i(p+vec2(60,2)) + .0943 *i(p+vec2(61,2)) - .5105 *i(p+vec2(62,2)) - .0159 *i(p+vec2(70,0)) - .0028 *i(p+vec2(71,0)) + .0869 *i(p+vec2(72,0)) - .0355 *i(p+vec2(70,1)) - .0228 *i(p+vec2(71,1)) + .027  *i(p+vec2(72,1)) + .1315 *i(p+vec2(70,2)) - .0879 *i(p+vec2(71,2)) + .1511 *i(p+vec2(72,2)) - .2506 *i(p+vec2(80,0)) + .1907 *i(p+vec2(81,0)) + .1655 *i(p+vec2(82,0)) - .0572 *i(p+vec2(80,1)) + .0478 *i(p+vec2(81,1)) + .165  *i(p+vec2(82,1)) - .057  *i(p+vec2(80,2)) + .0927 *i(p+vec2(81,2)) - .0888 *i(p+vec2(82,2)) + .1744 *i(p+vec2(90,0)) - .0296 *i(p+vec2(91,0)) - .056  *i(p+vec2(92,0)) + .1576 *i(p+vec2(90,1)) + .0385 *i(p+vec2(91,1)) - .222  *i(p+vec2(92,1)) + .1249 *i(p+vec2(90,2)) + .0175 *i(p+vec2(91,2)) - .0731 *i(p+vec2(92,2)) + .0476 ;\n#undef i      \n        x = max(x, 0.); // ReLU Activation\n        col = vec4(x);\n    }\n     \n    // Displays the pixelated version of the input (on the right)\n    else if (uv.x > iR) {\n        uv.x -= iR;\n        uv.x *= iAspect;\n        \n        uv.x -= margin*.5;\n        uv.y -= margin;\n        uv /= (1. - margin);\n        \n        uv = floor(uv * input_res);\n        col = vec4(i(uv));\n\n        if (min(uv.x,uv.y) < 0. || max(uv.x,uv.y) >= input_res) col *= 0.;\n    }\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/* This buffers handles:\n   - Convolution #2 (Step 2)\n   - Convolution #3 (Step 4)\n   - Max Pooling #2 (Step 6)\n*/\n\nfloat i(vec2 p) { \n    return texelFetch(iChannel0, ivec2(p), 0).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {    \n    vec2 uv = fragCoord / R;\n    vec2 F = fragCoord  -.5;\n    vec3 col = vec3(0);\n    \n    // CNN Step 2: Convolution #2\n    // 8x26x26 => 8x24x24\n    if (F.x < f2*F2 && F.y < F2) {\n        int fmap = int(F.x / F2);\n        vec2   p = mod(F, F2);\n        float  x;\n        \n        if      (fmap == 0) x = -.215  *i(p) - .0445 *i(p+vec2(1,0)) + .117  *i(p+vec2(2,0)) + .0736 *i(p+vec2(0,1)) + .0586 *i(p+vec2(1,1)) + .2664 *i(p+vec2(2,1)) + .3496 *i(p+vec2(0,2)) + .102  *i(p+vec2(1,2)) + .2541 *i(p+vec2(2,2)) - .316  *i(p+vec2(26,0)) - .1725 *i(p+vec2(27,0)) + .0295 *i(p+vec2(28,0)) + .056  *i(p+vec2(26,1)) + .0297 *i(p+vec2(27,1)) + .0286 *i(p+vec2(28,1)) + .2464 *i(p+vec2(26,2)) + .2042 *i(p+vec2(27,2)) + .1225 *i(p+vec2(28,2)) - .1762 *i(p+vec2(52,0)) + .0096 *i(p+vec2(53,0)) + .0911 *i(p+vec2(54,0)) + .24   *i(p+vec2(52,1)) + .0079 *i(p+vec2(53,1)) + .1597 *i(p+vec2(54,1)) + .4694 *i(p+vec2(52,2)) + .2169 *i(p+vec2(53,2)) + .0739 *i(p+vec2(54,2)) + .1171 *i(p+vec2(78,0)) + .2064 *i(p+vec2(79,0)) + .0645 *i(p+vec2(80,0)) + .2102 *i(p+vec2(78,1)) + .2812 *i(p+vec2(79,1)) + .2303 *i(p+vec2(80,1)) - .151  *i(p+vec2(78,2)) - .1218 *i(p+vec2(79,2)) - .125  *i(p+vec2(80,2)) - .4364 *i(p+vec2(104,0)) - .1975 *i(p+vec2(105,0)) - .1999 *i(p+vec2(106,0)) - .1012 *i(p+vec2(104,1)) - .0542 *i(p+vec2(105,1)) + .1379 *i(p+vec2(106,1)) + .2816 *i(p+vec2(104,2)) + .2285 *i(p+vec2(105,2)) + .1634 *i(p+vec2(106,2)) + .1753 *i(p+vec2(130,0)) + .1279 *i(p+vec2(131,0)) + .2715 *i(p+vec2(132,0)) + .4227 *i(p+vec2(130,1)) + .1198 *i(p+vec2(131,1)) + .1557 *i(p+vec2(132,1)) + .2033 *i(p+vec2(130,2)) + .1277 *i(p+vec2(131,2)) + .0742 *i(p+vec2(132,2)) - .0082 *i(p+vec2(156,0)) - .2566 *i(p+vec2(157,0)) - .1675 *i(p+vec2(158,0)) - .5319 *i(p+vec2(156,1)) - .6699 *i(p+vec2(157,1)) - .3119 *i(p+vec2(158,1)) - .2501 *i(p+vec2(156,2)) - .1926 *i(p+vec2(157,2)) - .1603 *i(p+vec2(158,2)) - .2567 *i(p+vec2(182,0)) - .1124 *i(p+vec2(183,0)) - .2392 *i(p+vec2(184,0)) - .2393 *i(p+vec2(182,1)) - .2044 *i(p+vec2(183,1)) - .1681 *i(p+vec2(184,1)) + .1197 *i(p+vec2(182,2)) + .0481 *i(p+vec2(183,2)) + .0781 *i(p+vec2(184,2)) - .0855 ;\n        else if (fmap == 1) x =  .2367 *i(p) + .0263 *i(p+vec2(1,0)) - .3914 *i(p+vec2(2,0)) + .3257 *i(p+vec2(0,1)) - .1341 *i(p+vec2(1,1)) - .3699 *i(p+vec2(2,1)) + .2111 *i(p+vec2(0,2)) - .1045 *i(p+vec2(1,2)) - .2385 *i(p+vec2(2,2)) + .0133 *i(p+vec2(26,0)) + .1075 *i(p+vec2(27,0)) + .1111 *i(p+vec2(28,0)) + .143  *i(p+vec2(26,1)) + .1059 *i(p+vec2(27,1)) - .1042 *i(p+vec2(28,1)) + .2355 *i(p+vec2(26,2)) - .0271 *i(p+vec2(27,2)) - .092  *i(p+vec2(28,2)) - .0085 *i(p+vec2(52,0)) + .0886 *i(p+vec2(53,0)) - .0845 *i(p+vec2(54,0)) + .1088 *i(p+vec2(52,1)) + .1813 *i(p+vec2(53,1)) + .0835 *i(p+vec2(54,1)) + .0954 *i(p+vec2(52,2)) - .0261 *i(p+vec2(53,2)) + .1761 *i(p+vec2(54,2)) - .5722 *i(p+vec2(78,0)) + .0887 *i(p+vec2(79,0)) + .3266 *i(p+vec2(80,0)) - .6905 *i(p+vec2(78,1)) - .0459 *i(p+vec2(79,1)) + .5219 *i(p+vec2(80,1)) - .7194 *i(p+vec2(78,2)) + .0673 *i(p+vec2(79,2)) + .2963 *i(p+vec2(80,2)) + .1194 *i(p+vec2(104,0)) - .0504 *i(p+vec2(105,0)) - .2681 *i(p+vec2(106,0)) + .2977 *i(p+vec2(104,1)) - .0278 *i(p+vec2(105,1)) - .5027 *i(p+vec2(106,1)) + .2489 *i(p+vec2(104,2)) - .1133 *i(p+vec2(105,2)) - .1921 *i(p+vec2(106,2)) - .2403 *i(p+vec2(130,0)) - .073  *i(p+vec2(131,0)) - .151  *i(p+vec2(132,0)) - .5006 *i(p+vec2(130,1)) - .1971 *i(p+vec2(131,1)) + .0758 *i(p+vec2(132,1)) - .7742 *i(p+vec2(130,2)) - .2197 *i(p+vec2(131,2)) + .148  *i(p+vec2(132,2)) - .0266 *i(p+vec2(156,0)) + .1793 *i(p+vec2(157,0)) + .0829 *i(p+vec2(158,0)) - .0985 *i(p+vec2(156,1)) + .0645 *i(p+vec2(157,1)) - .1257 *i(p+vec2(158,1)) + .1793 *i(p+vec2(156,2)) + .1565 *i(p+vec2(157,2)) - .1641 *i(p+vec2(158,2)) - .0853 *i(p+vec2(182,0)) - .0326 *i(p+vec2(183,0)) + .0367 *i(p+vec2(184,0)) + .2146 *i(p+vec2(182,1)) + .2115 *i(p+vec2(183,1)) - .081  *i(p+vec2(184,1)) + .303  *i(p+vec2(182,2)) + .2479 *i(p+vec2(183,2)) - .0877 *i(p+vec2(184,2)) + .1819 ;\n        else if (fmap == 2) x =  .0125 *i(p) - .05   *i(p+vec2(1,0)) + .1655 *i(p+vec2(2,0)) + .0227 *i(p+vec2(0,1)) + .1629 *i(p+vec2(1,1)) + .0464 *i(p+vec2(2,1)) + .2536 *i(p+vec2(0,2)) - .0411 *i(p+vec2(1,2)) + .0511 *i(p+vec2(2,2)) + .0707 *i(p+vec2(26,0)) + .0975 *i(p+vec2(27,0)) + .232  *i(p+vec2(28,0)) + .1313 *i(p+vec2(26,1)) + .1221 *i(p+vec2(27,1)) + .0468 *i(p+vec2(28,1)) + .4301 *i(p+vec2(26,2)) + .3981 *i(p+vec2(27,2)) + .139  *i(p+vec2(28,2)) - .0762 *i(p+vec2(52,0)) - .0404 *i(p+vec2(53,0)) + .028  *i(p+vec2(54,0)) + .1441 *i(p+vec2(52,1)) + .1489 *i(p+vec2(53,1)) + .295  *i(p+vec2(54,1)) + .3946 *i(p+vec2(52,2)) + .0322 *i(p+vec2(53,2)) + .0184 *i(p+vec2(54,2)) + .0305 *i(p+vec2(78,0)) + .0891 *i(p+vec2(79,0)) + .1905 *i(p+vec2(80,0)) - .3471 *i(p+vec2(78,1)) - .3672 *i(p+vec2(79,1)) - .2481 *i(p+vec2(80,1)) - .4253 *i(p+vec2(78,2)) - .0682 *i(p+vec2(79,2)) + .1577 *i(p+vec2(80,2)) - .1151 *i(p+vec2(104,0)) - .047  *i(p+vec2(105,0)) + .1958 *i(p+vec2(106,0)) - .029  *i(p+vec2(104,1)) - .0339 *i(p+vec2(105,1)) - .0797 *i(p+vec2(106,1)) + .2763 *i(p+vec2(104,2)) + .1496 *i(p+vec2(105,2)) - .0131 *i(p+vec2(106,2)) - .0253 *i(p+vec2(130,0)) - .3543 *i(p+vec2(131,0)) - .3798 *i(p+vec2(132,0)) - .5635 *i(p+vec2(130,1)) - .3937 *i(p+vec2(131,1)) - .4331 *i(p+vec2(132,1)) - .2936 *i(p+vec2(130,2)) - .2184 *i(p+vec2(131,2)) - .3239 *i(p+vec2(132,2)) - .3206 *i(p+vec2(156,0)) - .0839 *i(p+vec2(157,0)) + .1743 *i(p+vec2(158,0)) - .0825 *i(p+vec2(156,1)) - .0693 *i(p+vec2(157,1)) + .0135 *i(p+vec2(158,1)) - .0618 *i(p+vec2(156,2)) - .0118 *i(p+vec2(157,2)) + .0684 *i(p+vec2(158,2)) - .1237 *i(p+vec2(182,0)) - .0843 *i(p+vec2(183,0)) + .3261 *i(p+vec2(184,0)) + .0503 *i(p+vec2(182,1)) - .0108 *i(p+vec2(183,1)) - .071  *i(p+vec2(184,1)) + .1318 *i(p+vec2(182,2)) + .233  *i(p+vec2(183,2)) + .0178 *i(p+vec2(184,2)) + .1242 ;\n        else if (fmap == 3) x =  .1008 *i(p) + .0866 *i(p+vec2(1,0)) + .0108 *i(p+vec2(2,0)) + .0768 *i(p+vec2(0,1)) - .0445 *i(p+vec2(1,1)) + .2428 *i(p+vec2(2,1)) + .0749 *i(p+vec2(0,2)) - .0641 *i(p+vec2(1,2)) + .3046 *i(p+vec2(2,2)) + .0967 *i(p+vec2(26,0)) + .1572 *i(p+vec2(27,0)) + .1818 *i(p+vec2(28,0)) + .0703 *i(p+vec2(26,1)) + .1129 *i(p+vec2(27,1)) + .2699 *i(p+vec2(28,1)) + .1924 *i(p+vec2(26,2)) + .0259 *i(p+vec2(27,2)) + .3304 *i(p+vec2(28,2)) + .1776 *i(p+vec2(52,0)) - .0431 *i(p+vec2(53,0)) + .1276 *i(p+vec2(54,0)) - .0186 *i(p+vec2(52,1)) + .0213 *i(p+vec2(53,1)) + .3725 *i(p+vec2(54,1)) + .1508 *i(p+vec2(52,2)) - .0094 *i(p+vec2(53,2)) + .1689 *i(p+vec2(54,2)) - .8028 *i(p+vec2(78,0)) - .4112 *i(p+vec2(79,0)) - .0067 *i(p+vec2(80,0)) - .6313 *i(p+vec2(78,1)) - .2954 *i(p+vec2(79,1)) - .2921 *i(p+vec2(80,1)) - .0273 *i(p+vec2(78,2)) - .0223 *i(p+vec2(79,2)) - .138  *i(p+vec2(80,2)) - .0076 *i(p+vec2(104,0)) + .0605 *i(p+vec2(105,0)) + .134  *i(p+vec2(106,0)) - .0515 *i(p+vec2(104,1)) - .0899 *i(p+vec2(105,1)) + .2897 *i(p+vec2(106,1)) - .0716 *i(p+vec2(104,2)) + .0878 *i(p+vec2(105,2)) + .3642 *i(p+vec2(106,2)) - .242  *i(p+vec2(130,0)) - .4484 *i(p+vec2(131,0)) - .1231 *i(p+vec2(132,0)) - .0996 *i(p+vec2(130,1)) - .0642 *i(p+vec2(131,1)) - .0854 *i(p+vec2(132,1)) - .1943 *i(p+vec2(130,2)) - .0696 *i(p+vec2(131,2)) - .0068 *i(p+vec2(132,2)) + .4109 *i(p+vec2(156,0)) + .2593 *i(p+vec2(157,0)) - .0629 *i(p+vec2(158,0)) + .3676 *i(p+vec2(156,1)) + .1375 *i(p+vec2(157,1)) - .0892 *i(p+vec2(158,1)) - .0223 *i(p+vec2(156,2)) + .0945 *i(p+vec2(157,2)) + .012  *i(p+vec2(158,2)) + .204  *i(p+vec2(182,0)) - .04   *i(p+vec2(183,0)) + .0174 *i(p+vec2(184,0)) + .2832 *i(p+vec2(182,1)) + .0702 *i(p+vec2(183,1)) + .0753 *i(p+vec2(184,1)) + .0757 *i(p+vec2(182,2)) + .1403 *i(p+vec2(183,2)) + .1594 *i(p+vec2(184,2)) + .2947 ;\n        else if (fmap == 4) x = -.109  *i(p) - .0226 *i(p+vec2(1,0)) + .0143 *i(p+vec2(2,0)) + .1151 *i(p+vec2(0,1)) + .1058 *i(p+vec2(1,1)) - .0657 *i(p+vec2(2,1)) + .1319 *i(p+vec2(0,2)) - .1815 *i(p+vec2(1,2)) - .2023 *i(p+vec2(2,2)) + .1011 *i(p+vec2(26,0)) + .0994 *i(p+vec2(27,0)) + .1937 *i(p+vec2(28,0)) + .2634 *i(p+vec2(26,1)) + .3413 *i(p+vec2(27,1)) + .2794 *i(p+vec2(28,1)) + .5339 *i(p+vec2(26,2)) + .3487 *i(p+vec2(27,2)) + .1712 *i(p+vec2(28,2)) - .002  *i(p+vec2(52,0)) + .1109 *i(p+vec2(53,0)) + .0263 *i(p+vec2(54,0)) + .3323 *i(p+vec2(52,1)) + .2774 *i(p+vec2(53,1)) + .1673 *i(p+vec2(54,1)) - .0638 *i(p+vec2(52,2)) - .3167 *i(p+vec2(53,2)) - .2739 *i(p+vec2(54,2)) - .6208 *i(p+vec2(78,0)) - .6033 *i(p+vec2(79,0)) - .6426 *i(p+vec2(80,0)) - .5709 *i(p+vec2(78,1)) - .3404 *i(p+vec2(79,1)) - .1653 *i(p+vec2(80,1)) + .0715 *i(p+vec2(78,2)) + .1745 *i(p+vec2(79,2)) + .4318 *i(p+vec2(80,2)) + .0369 *i(p+vec2(104,0)) - .0281 *i(p+vec2(105,0)) + .0495 *i(p+vec2(106,0)) + .1381 *i(p+vec2(104,1)) - .0437 *i(p+vec2(105,1)) + .0514 *i(p+vec2(106,1)) + .138  *i(p+vec2(104,2)) - .1523 *i(p+vec2(105,2)) - .1457 *i(p+vec2(106,2)) - .6407 *i(p+vec2(130,0)) - .6851 *i(p+vec2(131,0)) - .2785 *i(p+vec2(132,0)) - .6453 *i(p+vec2(130,1)) - .4226 *i(p+vec2(131,1)) - .5758 *i(p+vec2(132,1)) - .936  *i(p+vec2(130,2)) - .6795 *i(p+vec2(131,2)) - .3961 *i(p+vec2(132,2)) + .2226 *i(p+vec2(156,0)) + .1491 *i(p+vec2(157,0)) + .2426 *i(p+vec2(158,0)) - .0305 *i(p+vec2(156,1)) + .1919 *i(p+vec2(157,1)) + .0642 *i(p+vec2(158,1)) + .2326 *i(p+vec2(156,2)) + .3181 *i(p+vec2(157,2)) + .1383 *i(p+vec2(158,2)) + .0469 *i(p+vec2(182,0)) + .0658 *i(p+vec2(183,0)) + .1747 *i(p+vec2(184,0)) + .0434 *i(p+vec2(182,1)) + .2202 *i(p+vec2(183,1)) + .1662 *i(p+vec2(184,1)) + .3427 *i(p+vec2(182,2)) + .1359 *i(p+vec2(183,2)) + .0578 *i(p+vec2(184,2)) + .4278 ;\n        else if (fmap == 5) x =  .1407 *i(p) - .0233 *i(p+vec2(1,0)) + .2506 *i(p+vec2(2,0)) + .145  *i(p+vec2(0,1)) - .0395 *i(p+vec2(1,1)) + .1877 *i(p+vec2(2,1)) + .088  *i(p+vec2(0,2)) + .1821 *i(p+vec2(1,2)) + .2738 *i(p+vec2(2,2)) + .0153 *i(p+vec2(26,0)) - .0445 *i(p+vec2(27,0)) + .0015 *i(p+vec2(28,0)) + .2008 *i(p+vec2(26,1)) + .0413 *i(p+vec2(27,1)) + .0781 *i(p+vec2(28,1)) - .0592 *i(p+vec2(26,2)) - .1073 *i(p+vec2(27,2)) + .1839 *i(p+vec2(28,2)) + .0806 *i(p+vec2(52,0)) + .0522 *i(p+vec2(53,0)) + .1612 *i(p+vec2(54,0)) + .1422 *i(p+vec2(52,1)) + .0289 *i(p+vec2(53,1)) + .1604 *i(p+vec2(54,1)) + .0155 *i(p+vec2(52,2)) + .0992 *i(p+vec2(53,2)) + .2086 *i(p+vec2(54,2)) - .1646 *i(p+vec2(78,0)) + .3031 *i(p+vec2(79,0)) + .3184 *i(p+vec2(80,0)) - .4116 *i(p+vec2(78,1)) + .0559 *i(p+vec2(79,1)) + .0792 *i(p+vec2(80,1)) - .326  *i(p+vec2(78,2)) - .1388 *i(p+vec2(79,2)) - .0297 *i(p+vec2(80,2)) - .0087 *i(p+vec2(104,0)) + .082  *i(p+vec2(105,0)) + .128  *i(p+vec2(106,0)) + .0389 *i(p+vec2(104,1)) - .0771 *i(p+vec2(105,1)) + .0944 *i(p+vec2(106,1)) + .112  *i(p+vec2(104,2)) - .0028 *i(p+vec2(105,2)) + .1783 *i(p+vec2(106,2)) - .049  *i(p+vec2(130,0)) - .1688 *i(p+vec2(131,0)) - .1754 *i(p+vec2(132,0)) - .288  *i(p+vec2(130,1)) - .1545 *i(p+vec2(131,1)) - .2355 *i(p+vec2(132,1)) - .154  *i(p+vec2(130,2)) + .0254 *i(p+vec2(131,2)) - .0137 *i(p+vec2(132,2)) - .0954 *i(p+vec2(156,0)) - .017  *i(p+vec2(157,0)) - .2189 *i(p+vec2(158,0)) + .0062 *i(p+vec2(156,1)) - .0917 *i(p+vec2(157,1)) - .1051 *i(p+vec2(158,1)) + .2661 *i(p+vec2(156,2)) - .1862 *i(p+vec2(157,2)) - .0991 *i(p+vec2(158,2)) + .0508 *i(p+vec2(182,0)) + .019  *i(p+vec2(183,0)) + .1056 *i(p+vec2(184,0)) + .1757 *i(p+vec2(182,1)) + .1088 *i(p+vec2(183,1)) - .0706 *i(p+vec2(184,1)) + .2693 *i(p+vec2(182,2)) + .06   *i(p+vec2(183,2)) - .0275 *i(p+vec2(184,2)) - .0053 ;\n        else if (fmap == 6) x =  .0398 *i(p) - .2516 *i(p+vec2(1,0)) - .3615 *i(p+vec2(2,0)) + .1796 *i(p+vec2(0,1)) + .067  *i(p+vec2(1,1)) - .2535 *i(p+vec2(2,1)) + .1863 *i(p+vec2(0,2)) + .0201 *i(p+vec2(1,2)) - .0183 *i(p+vec2(2,2)) - .0122 *i(p+vec2(26,0)) + .0329 *i(p+vec2(27,0)) - .2077 *i(p+vec2(28,0)) + .084  *i(p+vec2(26,1)) + .2674 *i(p+vec2(27,1)) + .1284 *i(p+vec2(28,1)) + .2197 *i(p+vec2(26,2)) + .1318 *i(p+vec2(27,2)) + .1981 *i(p+vec2(28,2)) + .2157 *i(p+vec2(52,0)) + .0923 *i(p+vec2(53,0)) - .1153 *i(p+vec2(54,0)) + .2703 *i(p+vec2(52,1)) + .1983 *i(p+vec2(53,1)) + .0912 *i(p+vec2(54,1)) + .0724 *i(p+vec2(52,2)) + .3362 *i(p+vec2(53,2)) + .3077 *i(p+vec2(54,2)) - .2185 *i(p+vec2(78,0)) + .2015 *i(p+vec2(79,0)) + .6791 *i(p+vec2(80,0)) - .5963 *i(p+vec2(78,1)) - .2612 *i(p+vec2(79,1)) + .1308 *i(p+vec2(80,1)) - .8314 *i(p+vec2(78,2)) - .6128 *i(p+vec2(79,2)) - .013  *i(p+vec2(80,2)) - .0978 *i(p+vec2(104,0)) - .1578 *i(p+vec2(105,0)) - .5974 *i(p+vec2(106,0)) + .194  *i(p+vec2(104,1)) + .0102 *i(p+vec2(105,1)) - .3466 *i(p+vec2(106,1)) + .1633 *i(p+vec2(104,2)) + .1908 *i(p+vec2(105,2)) - .0395 *i(p+vec2(106,2)) + .153  *i(p+vec2(130,0)) + .3857 *i(p+vec2(131,0)) + .2473 *i(p+vec2(132,0)) - .067  *i(p+vec2(130,1)) + .0263 *i(p+vec2(131,1)) + .3086 *i(p+vec2(132,1)) - .1776 *i(p+vec2(130,2)) - .1454 *i(p+vec2(131,2)) + .1647 *i(p+vec2(132,2)) - .1167 *i(p+vec2(156,0)) - .2214 *i(p+vec2(157,0)) - .197  *i(p+vec2(158,0)) - .2269 *i(p+vec2(156,1)) - .2727 *i(p+vec2(157,1)) - .2911 *i(p+vec2(158,1)) + .3415 *i(p+vec2(156,2)) + .091  *i(p+vec2(157,2)) - .1079 *i(p+vec2(158,2)) + .0026 *i(p+vec2(182,0)) - .0452 *i(p+vec2(183,0)) - .1287 *i(p+vec2(184,0)) + .0254 *i(p+vec2(182,1)) - .0763 *i(p+vec2(183,1)) + .0111 *i(p+vec2(184,1)) + .2482 *i(p+vec2(182,2)) + .1252 *i(p+vec2(183,2)) + .0052 *i(p+vec2(184,2)) + .2314 ;\n        else if (fmap == 7) x = -.1999 *i(p) - .1932 *i(p+vec2(1,0)) + .312  *i(p+vec2(2,0)) - .1    *i(p+vec2(0,1)) + .0693 *i(p+vec2(1,1)) + .2129 *i(p+vec2(2,1)) + .0335 *i(p+vec2(0,2)) + .0036 *i(p+vec2(1,2)) - .0783 *i(p+vec2(2,2)) - .0057 *i(p+vec2(26,0)) + .162  *i(p+vec2(27,0)) + .2424 *i(p+vec2(28,0)) + .0075 *i(p+vec2(26,1)) + .1072 *i(p+vec2(27,1)) + .3873 *i(p+vec2(28,1)) + .2043 *i(p+vec2(26,2)) + .1469 *i(p+vec2(27,2)) + .2237 *i(p+vec2(28,2)) - .1763 *i(p+vec2(52,0)) + .1674 *i(p+vec2(53,0)) - .0642 *i(p+vec2(54,0)) + .2099 *i(p+vec2(52,1)) + .1973 *i(p+vec2(53,1)) + .1295 *i(p+vec2(54,1)) - .0877 *i(p+vec2(52,2)) - .088  *i(p+vec2(53,2)) - .1318 *i(p+vec2(54,2)) + .2153 *i(p+vec2(78,0)) - .2231 *i(p+vec2(79,0)) - .4635 *i(p+vec2(80,0)) + .0336 *i(p+vec2(78,1)) - .219  *i(p+vec2(79,1)) - .4759 *i(p+vec2(80,1)) + .0384 *i(p+vec2(78,2)) - .0836 *i(p+vec2(79,2)) - .336  *i(p+vec2(80,2)) - .2286 *i(p+vec2(104,0)) - .0483 *i(p+vec2(105,0)) + .3511 *i(p+vec2(106,0)) + .0793 *i(p+vec2(104,1)) - .1024 *i(p+vec2(105,1)) + .1964 *i(p+vec2(106,1)) + .1628 *i(p+vec2(104,2)) + .1481 *i(p+vec2(105,2)) + .1364 *i(p+vec2(106,2)) + .1573 *i(p+vec2(130,0)) - .0035 *i(p+vec2(131,0)) - .1932 *i(p+vec2(132,0)) + .0544 *i(p+vec2(130,1)) - .0131 *i(p+vec2(131,1)) - .2581 *i(p+vec2(132,1)) - .1552 *i(p+vec2(130,2)) - .2929 *i(p+vec2(131,2)) - .1888 *i(p+vec2(132,2)) - .1291 *i(p+vec2(156,0)) - .0539 *i(p+vec2(157,0)) + .0782 *i(p+vec2(158,0)) - .1249 *i(p+vec2(156,1)) - .0496 *i(p+vec2(157,1)) - .076  *i(p+vec2(158,1)) + .0945 *i(p+vec2(156,2)) + .2936 *i(p+vec2(157,2)) + .3399 *i(p+vec2(158,2)) - .0038 *i(p+vec2(182,0)) - .0531 *i(p+vec2(183,0)) - .0516 *i(p+vec2(184,0)) + .0761 *i(p+vec2(182,1)) + .0635 *i(p+vec2(183,1)) - .1705 *i(p+vec2(184,1)) - .0016 *i(p+vec2(182,2)) + .0619 *i(p+vec2(183,2)) + .1284 *i(p+vec2(184,2)) + .1535 ;\n      \n        x = max(x, 0.); // ReLU Activation\n        col = vec3(x);\n    }\n    // CNN Step 4: Convolution #3\n    // 8x12x12 => 10x10x10\n    else if (F.x < f4*F4 && F.y >= F2 && F.y < F2+F4) {\n        int fmap = int(F.x / F4);\n        vec2   p = mod(F - vec2(0, F2), F4) + vec2(0,F1);\n        float  x;\n        \n        if      (fmap == 0) x =  .1129 *i(p) - .0645 *i(p+vec2(1,0)) + .1294 *i(p+vec2(2,0)) - .4581 *i(p+vec2(0,1)) - .4014 *i(p+vec2(1,1)) - .0061 *i(p+vec2(2,1)) + .1008 *i(p+vec2(0,2)) - .0305 *i(p+vec2(1,2)) + .0272 *i(p+vec2(2,2)) + .4903 *i(p+vec2(12,0)) + .1928 *i(p+vec2(13,0)) - .0099 *i(p+vec2(14,0)) + .5189 *i(p+vec2(12,1)) + .39   *i(p+vec2(13,1)) - .0498 *i(p+vec2(14,1)) + .233  *i(p+vec2(12,2)) + .3543 *i(p+vec2(13,2)) - .0097 *i(p+vec2(14,2)) + .0745 *i(p+vec2(24,0)) - .0766 *i(p+vec2(25,0)) - .1578 *i(p+vec2(26,0)) + .0078 *i(p+vec2(24,1)) - .1648 *i(p+vec2(25,1)) + .072  *i(p+vec2(26,1)) + .1058 *i(p+vec2(24,2)) + .1593 *i(p+vec2(25,2)) + .1972 *i(p+vec2(26,2)) + .0159 *i(p+vec2(36,0)) - .0696 *i(p+vec2(37,0)) + .0916 *i(p+vec2(38,0)) + .0552 *i(p+vec2(36,1)) - .0637 *i(p+vec2(37,1)) + .1525 *i(p+vec2(38,1)) + .0909 *i(p+vec2(36,2)) - .1168 *i(p+vec2(37,2)) - .0501 *i(p+vec2(38,2)) + .1118 *i(p+vec2(48,0)) - .0404 *i(p+vec2(49,0)) - .0685 *i(p+vec2(50,0)) + .1356 *i(p+vec2(48,1)) - .1814 *i(p+vec2(49,1)) + .0226 *i(p+vec2(50,1)) + .0365 *i(p+vec2(48,2)) - .1037 *i(p+vec2(49,2)) + .1971 *i(p+vec2(50,2)) - .0991 *i(p+vec2(60,0)) - .023  *i(p+vec2(61,0)) + .0678 *i(p+vec2(62,0)) - .0145 *i(p+vec2(60,1)) - .0724 *i(p+vec2(61,1)) - .0558 *i(p+vec2(62,1)) - .0013 *i(p+vec2(60,2)) + .1346 *i(p+vec2(61,2)) + .0355 *i(p+vec2(62,2)) + .0939 *i(p+vec2(72,0)) - .0836 *i(p+vec2(73,0)) + .0586 *i(p+vec2(74,0)) + .0325 *i(p+vec2(72,1)) + .0207 *i(p+vec2(73,1)) + .0286 *i(p+vec2(74,1)) + .1686 *i(p+vec2(72,2)) + .0405 *i(p+vec2(73,2)) - .0117 *i(p+vec2(74,2)) + .0575 *i(p+vec2(84,0)) - .2614 *i(p+vec2(85,0)) + .022  *i(p+vec2(86,0)) - .1279 *i(p+vec2(84,1)) - .1913 *i(p+vec2(85,1)) + .2553 *i(p+vec2(86,1)) - .0026 *i(p+vec2(84,2)) + .0306 *i(p+vec2(85,2)) + .2987 *i(p+vec2(86,2)) - .1256 ;\n        else if (fmap == 1) x = -.1407 *i(p) + .1709 *i(p+vec2(1,0)) + .1317 *i(p+vec2(2,0)) - .0521 *i(p+vec2(0,1)) + .0477 *i(p+vec2(1,1)) + .1969 *i(p+vec2(2,1)) - .3761 *i(p+vec2(0,2)) - .4753 *i(p+vec2(1,2)) - .1808 *i(p+vec2(2,2)) - .0491 *i(p+vec2(12,0)) + .0636 *i(p+vec2(13,0)) + .0402 *i(p+vec2(14,0)) - .4029 *i(p+vec2(12,1)) - .2554 *i(p+vec2(13,1)) - .1063 *i(p+vec2(14,1)) - .1296 *i(p+vec2(12,2)) - .275  *i(p+vec2(13,2)) - .1331 *i(p+vec2(14,2)) + .1076 *i(p+vec2(24,0)) - .0416 *i(p+vec2(25,0)) - .0127 *i(p+vec2(26,0)) + .0141 *i(p+vec2(24,1)) + .0341 *i(p+vec2(25,1)) - .0246 *i(p+vec2(26,1)) - .061  *i(p+vec2(24,2)) - .0159 *i(p+vec2(25,2)) - .0809 *i(p+vec2(26,2)) + .3243 *i(p+vec2(36,0)) - .0949 *i(p+vec2(37,0)) - .2142 *i(p+vec2(38,0)) + .2795 *i(p+vec2(36,1)) + .1643 *i(p+vec2(37,1)) - .1943 *i(p+vec2(38,1)) - .0607 *i(p+vec2(36,2)) + .1159 *i(p+vec2(37,2)) - .0104 *i(p+vec2(38,2)) + .076  *i(p+vec2(48,0)) - .0217 *i(p+vec2(49,0)) - .0359 *i(p+vec2(50,0)) + .145  *i(p+vec2(48,1)) + .0509 *i(p+vec2(49,1)) - .1595 *i(p+vec2(50,1)) - .049  *i(p+vec2(48,2)) + .1095 *i(p+vec2(49,2)) - .0326 *i(p+vec2(50,2)) + .2074 *i(p+vec2(60,0)) + .0179 *i(p+vec2(61,0)) - .1501 *i(p+vec2(62,0)) + .163  *i(p+vec2(60,1)) + .1835 *i(p+vec2(61,1)) + .0769 *i(p+vec2(62,1)) - .0729 *i(p+vec2(60,2)) - .1495 *i(p+vec2(61,2)) + .0382 *i(p+vec2(62,2)) + .1805 *i(p+vec2(72,0)) - .008  *i(p+vec2(73,0)) - .2297 *i(p+vec2(74,0)) + .0819 *i(p+vec2(72,1)) + .3086 *i(p+vec2(73,1)) - .0117 *i(p+vec2(74,1)) + .0238 *i(p+vec2(72,2)) + .0423 *i(p+vec2(73,2)) + .1569 *i(p+vec2(74,2)) + .1188 *i(p+vec2(84,0)) - .0431 *i(p+vec2(85,0)) + .0301 *i(p+vec2(86,0)) + .0314 *i(p+vec2(84,1)) + .1979 *i(p+vec2(85,1)) + .1094 *i(p+vec2(86,1)) - .1843 *i(p+vec2(84,2)) + .0296 *i(p+vec2(85,2)) - .02   *i(p+vec2(86,2)) - .141  ;\n        else if (fmap == 2) x = -.3194 *i(p) - .1403 *i(p+vec2(1,0)) + .0489 *i(p+vec2(2,0)) - .0787 *i(p+vec2(0,1)) - .0192 *i(p+vec2(1,1)) - .1877 *i(p+vec2(2,1)) + .1273 *i(p+vec2(0,2)) - .0334 *i(p+vec2(1,2)) + .1125 *i(p+vec2(2,2)) + .1212 *i(p+vec2(12,0)) - .1559 *i(p+vec2(13,0)) - .134  *i(p+vec2(14,0)) - .0765 *i(p+vec2(12,1)) - .1459 *i(p+vec2(13,1)) - .1736 *i(p+vec2(14,1)) - .0359 *i(p+vec2(12,2)) + .2889 *i(p+vec2(13,2)) - .0163 *i(p+vec2(14,2)) - .0487 *i(p+vec2(24,0)) + .0884 *i(p+vec2(25,0)) + .2203 *i(p+vec2(26,0)) - .0983 *i(p+vec2(24,1)) - .2431 *i(p+vec2(25,1)) - .0805 *i(p+vec2(26,1)) + .042  *i(p+vec2(24,2)) - .0431 *i(p+vec2(25,2)) - .1341 *i(p+vec2(26,2)) + .0111 *i(p+vec2(36,0)) + .2019 *i(p+vec2(37,0)) + .1962 *i(p+vec2(38,0)) - .1033 *i(p+vec2(36,1)) - .1768 *i(p+vec2(37,1)) + .215  *i(p+vec2(38,1)) - .0314 *i(p+vec2(36,2)) - .1044 *i(p+vec2(37,2)) - .074  *i(p+vec2(38,2)) + .1167 *i(p+vec2(48,0)) + .1004 *i(p+vec2(49,0)) + .2599 *i(p+vec2(50,0)) - .0471 *i(p+vec2(48,1)) - .1909 *i(p+vec2(49,1)) + .0057 *i(p+vec2(50,1)) - .0102 *i(p+vec2(48,2)) - .1299 *i(p+vec2(49,2)) - .2852 *i(p+vec2(50,2)) + .0682 *i(p+vec2(60,0)) + .033  *i(p+vec2(61,0)) + .3275 *i(p+vec2(62,0)) - .0057 *i(p+vec2(60,1)) - .2512 *i(p+vec2(61,1)) + .0053 *i(p+vec2(62,1)) + .0637 *i(p+vec2(60,2)) + .0868 *i(p+vec2(61,2)) + .0736 *i(p+vec2(62,2)) + .2203 *i(p+vec2(72,0)) + .073  *i(p+vec2(73,0)) + .1408 *i(p+vec2(74,0)) + .0632 *i(p+vec2(72,1)) + .0358 *i(p+vec2(73,1)) + .0504 *i(p+vec2(74,1)) - .0023 *i(p+vec2(72,2)) + .1257 *i(p+vec2(73,2)) + .1422 *i(p+vec2(74,2)) + .1308 *i(p+vec2(84,0)) + .0023 *i(p+vec2(85,0)) + .2425 *i(p+vec2(86,0)) - .1369 *i(p+vec2(84,1)) - .1073 *i(p+vec2(85,1)) + .0188 *i(p+vec2(86,1)) + .082  *i(p+vec2(84,2)) - .1549 *i(p+vec2(85,2)) - .1908 *i(p+vec2(86,2)) + .311  ;\n        else if (fmap == 3) x = -.1158 *i(p) + .0757 *i(p+vec2(1,0)) + .2293 *i(p+vec2(2,0)) - .1174 *i(p+vec2(0,1)) + .0438 *i(p+vec2(1,1)) + .2503 *i(p+vec2(2,1)) - .1428 *i(p+vec2(0,2)) - .3039 *i(p+vec2(1,2)) + .1316 *i(p+vec2(2,2)) - .0909 *i(p+vec2(12,0)) + .0923 *i(p+vec2(13,0)) - .1506 *i(p+vec2(14,0)) + .1421 *i(p+vec2(12,1)) + .1756 *i(p+vec2(13,1)) - .1554 *i(p+vec2(14,1)) + .0959 *i(p+vec2(12,2)) + .2636 *i(p+vec2(13,2)) + .1448 *i(p+vec2(14,2)) + .0644 *i(p+vec2(24,0)) - .0892 *i(p+vec2(25,0)) - .2552 *i(p+vec2(26,0)) + .1969 *i(p+vec2(24,1)) + .0121 *i(p+vec2(25,1)) - .1068 *i(p+vec2(26,1)) + .2016 *i(p+vec2(24,2)) + .1317 *i(p+vec2(25,2)) - .0331 *i(p+vec2(26,2)) + .0554 *i(p+vec2(36,0)) - .0893 *i(p+vec2(37,0)) - .2695 *i(p+vec2(38,0)) + .2652 *i(p+vec2(36,1)) - .0899 *i(p+vec2(37,1)) - .3936 *i(p+vec2(38,1)) + .307  *i(p+vec2(36,2)) + .07   *i(p+vec2(37,2)) - .0103 *i(p+vec2(38,2)) - .0447 *i(p+vec2(48,0)) + .0537 *i(p+vec2(49,0)) + .0293 *i(p+vec2(50,0)) + .1958 *i(p+vec2(48,1)) - .127  *i(p+vec2(49,1)) - .1961 *i(p+vec2(50,1)) + .2447 *i(p+vec2(48,2)) + .0737 *i(p+vec2(49,2)) - .0116 *i(p+vec2(50,2)) + .1842 *i(p+vec2(60,0)) - .0503 *i(p+vec2(61,0)) - .3119 *i(p+vec2(62,0)) + .0715 *i(p+vec2(60,1)) + .1614 *i(p+vec2(61,1)) - .138  *i(p+vec2(62,1)) + .3    *i(p+vec2(60,2)) + .0447 *i(p+vec2(61,2)) - .1455 *i(p+vec2(62,2)) - .064  *i(p+vec2(72,0)) - .1449 *i(p+vec2(73,0)) - .3305 *i(p+vec2(74,0)) + .0963 *i(p+vec2(72,1)) + .0123 *i(p+vec2(73,1)) - .4027 *i(p+vec2(74,1)) + .0889 *i(p+vec2(72,2)) + .1959 *i(p+vec2(73,2)) - .0563 *i(p+vec2(74,2)) + .0075 *i(p+vec2(84,0)) + .0269 *i(p+vec2(85,0)) - .097  *i(p+vec2(86,0)) - .0241 *i(p+vec2(84,1)) + .0548 *i(p+vec2(85,1)) - .3882 *i(p+vec2(86,1)) + .0286 *i(p+vec2(84,2)) + .1081 *i(p+vec2(85,2)) - .1908 *i(p+vec2(86,2)) + .3913 ;\n        else if (fmap == 4) x =  .1114 *i(p) - .2003 *i(p+vec2(1,0)) - .1392 *i(p+vec2(2,0)) - .1026 *i(p+vec2(0,1)) + .1263 *i(p+vec2(1,1)) + .2255 *i(p+vec2(2,1)) + .0778 *i(p+vec2(0,2)) + .13   *i(p+vec2(1,2)) + .1059 *i(p+vec2(2,2)) + .1839 *i(p+vec2(12,0)) + .4135 *i(p+vec2(13,0)) + .1303 *i(p+vec2(14,0)) + .0386 *i(p+vec2(12,1)) - .0704 *i(p+vec2(13,1)) - .3244 *i(p+vec2(14,1)) - .3791 *i(p+vec2(12,2)) - .253  *i(p+vec2(13,2)) - .2754 *i(p+vec2(14,2)) + .1983 *i(p+vec2(24,0)) + .0006 *i(p+vec2(25,0)) + .0126 *i(p+vec2(26,0)) - .092  *i(p+vec2(24,1)) - .2384 *i(p+vec2(25,1)) - .0928 *i(p+vec2(26,1)) + .1648 *i(p+vec2(24,2)) + .0025 *i(p+vec2(25,2)) + .1326 *i(p+vec2(26,2)) + .166  *i(p+vec2(36,0)) - .0707 *i(p+vec2(37,0)) - .0348 *i(p+vec2(38,0)) + .0376 *i(p+vec2(36,1)) - .2379 *i(p+vec2(37,1)) - .1537 *i(p+vec2(38,1)) - .0697 *i(p+vec2(36,2)) + .0651 *i(p+vec2(37,2)) + .0151 *i(p+vec2(38,2)) + .3271 *i(p+vec2(48,0)) + .1621 *i(p+vec2(49,0)) + .1753 *i(p+vec2(50,0)) - .0376 *i(p+vec2(48,1)) - .2155 *i(p+vec2(49,1)) - .2347 *i(p+vec2(50,1)) - .0905 *i(p+vec2(48,2)) - .0696 *i(p+vec2(49,2)) + .1654 *i(p+vec2(50,2)) - .0337 *i(p+vec2(60,0)) - .1694 *i(p+vec2(61,0)) - .0946 *i(p+vec2(62,0)) - 0.    *i(p+vec2(60,1)) - .1322 *i(p+vec2(61,1)) + .0308 *i(p+vec2(62,1)) + .1247 *i(p+vec2(60,2)) + .075  *i(p+vec2(61,2)) + .2016 *i(p+vec2(62,2)) + .1314 *i(p+vec2(72,0)) + .0581 *i(p+vec2(73,0)) - .0744 *i(p+vec2(74,0)) - .1754 *i(p+vec2(72,1)) - .3285 *i(p+vec2(73,1)) - .1941 *i(p+vec2(74,1)) + .0863 *i(p+vec2(72,2)) + .1702 *i(p+vec2(73,2)) + .1535 *i(p+vec2(74,2)) + .2094 *i(p+vec2(84,0)) + .0392 *i(p+vec2(85,0)) + .1197 *i(p+vec2(86,0)) + .0308 *i(p+vec2(84,1)) - .1731 *i(p+vec2(85,1)) - .0504 *i(p+vec2(86,1)) + .0736 *i(p+vec2(84,2)) + .0516 *i(p+vec2(85,2)) + .3111 *i(p+vec2(86,2)) + .0251 ;\n        else if (fmap == 5) x = -.0503 *i(p) - .241  *i(p+vec2(1,0)) - .0064 *i(p+vec2(2,0)) + .0827 *i(p+vec2(0,1)) - .0354 *i(p+vec2(1,1)) - .0822 *i(p+vec2(2,1)) + .1346 *i(p+vec2(0,2)) + .195  *i(p+vec2(1,2)) + .0502 *i(p+vec2(2,2)) + .2663 *i(p+vec2(12,0)) + .1545 *i(p+vec2(13,0)) + .1031 *i(p+vec2(14,0)) + .4316 *i(p+vec2(12,1)) - .0151 *i(p+vec2(13,1)) - .1098 *i(p+vec2(14,1)) - .1993 *i(p+vec2(12,2)) + .1106 *i(p+vec2(13,2)) - .0446 *i(p+vec2(14,2)) - .1259 *i(p+vec2(24,0)) - .2661 *i(p+vec2(25,0)) + .1304 *i(p+vec2(26,0)) + .1344 *i(p+vec2(24,1)) + .0603 *i(p+vec2(25,1)) + .0103 *i(p+vec2(26,1)) + .168  *i(p+vec2(24,2)) + .0955 *i(p+vec2(25,2)) + .0704 *i(p+vec2(26,2)) - .3136 *i(p+vec2(36,0)) - .2648 *i(p+vec2(37,0)) - .0984 *i(p+vec2(38,0)) - .0727 *i(p+vec2(36,1)) - .0338 *i(p+vec2(37,1)) + .1165 *i(p+vec2(38,1)) - .0042 *i(p+vec2(36,2)) + .1092 *i(p+vec2(37,2)) + .2282 *i(p+vec2(38,2)) - .4222 *i(p+vec2(48,0)) - .265  *i(p+vec2(49,0)) + .0218 *i(p+vec2(50,0)) + .0363 *i(p+vec2(48,1)) + .0231 *i(p+vec2(49,1)) + .1812 *i(p+vec2(50,1)) + .1305 *i(p+vec2(48,2)) + .0659 *i(p+vec2(49,2)) + .2352 *i(p+vec2(50,2)) - .1303 *i(p+vec2(60,0)) - .2883 *i(p+vec2(61,0)) + .0651 *i(p+vec2(62,0)) + .0993 *i(p+vec2(60,1)) + .0083 *i(p+vec2(61,1)) + .0024 *i(p+vec2(62,1)) + .2185 *i(p+vec2(60,2)) + .0451 *i(p+vec2(61,2)) + .2177 *i(p+vec2(62,2)) - .1143 *i(p+vec2(72,0)) - .3081 *i(p+vec2(73,0)) + .1015 *i(p+vec2(74,0)) + .0009 *i(p+vec2(72,1)) - .1661 *i(p+vec2(73,1)) + .0828 *i(p+vec2(74,1)) + .0699 *i(p+vec2(72,2)) + .0888 *i(p+vec2(73,2)) + .0641 *i(p+vec2(74,2)) - .2859 *i(p+vec2(84,0)) - .2278 *i(p+vec2(85,0)) - .0629 *i(p+vec2(86,0)) - .0083 *i(p+vec2(84,1)) - .1034 *i(p+vec2(85,1)) + .1629 *i(p+vec2(86,1)) + .0629 *i(p+vec2(84,2)) + .0973 *i(p+vec2(85,2)) + .0391 *i(p+vec2(86,2)) + .2576 ;\n        else if (fmap == 6) x =  .0492 *i(p) - .1815 *i(p+vec2(1,0)) - .0747 *i(p+vec2(2,0)) + .1148 *i(p+vec2(0,1)) - .1139 *i(p+vec2(1,1)) - .0486 *i(p+vec2(2,1)) - .1968 *i(p+vec2(0,2)) + .0975 *i(p+vec2(1,2)) + .2798 *i(p+vec2(2,2)) - .3691 *i(p+vec2(12,0)) + .0921 *i(p+vec2(13,0)) + .2775 *i(p+vec2(14,0)) - .1051 *i(p+vec2(12,1)) + .1756 *i(p+vec2(13,1)) + .1627 *i(p+vec2(14,1)) - .2369 *i(p+vec2(12,2)) + .0744 *i(p+vec2(13,2)) + .2703 *i(p+vec2(14,2)) - .2723 *i(p+vec2(24,0)) + .0961 *i(p+vec2(25,0)) + .0741 *i(p+vec2(26,0)) - .0593 *i(p+vec2(24,1)) + .1887 *i(p+vec2(25,1)) + .0168 *i(p+vec2(26,1)) - .0858 *i(p+vec2(24,2)) - .0478 *i(p+vec2(25,2)) - .04   *i(p+vec2(26,2)) - .1059 *i(p+vec2(36,0)) - .1727 *i(p+vec2(37,0)) + .0864 *i(p+vec2(38,0)) - .1477 *i(p+vec2(36,1)) + .0741 *i(p+vec2(37,1)) + .1391 *i(p+vec2(38,1)) - .0285 *i(p+vec2(36,2)) + .0926 *i(p+vec2(37,2)) + .0563 *i(p+vec2(38,2)) - .4196 *i(p+vec2(48,0)) - .2078 *i(p+vec2(49,0)) + .1335 *i(p+vec2(50,0)) - .2079 *i(p+vec2(48,1)) + .1665 *i(p+vec2(49,1)) + .2411 *i(p+vec2(50,1)) - .106  *i(p+vec2(48,2)) + .0358 *i(p+vec2(49,2)) + .1148 *i(p+vec2(50,2)) - .1836 *i(p+vec2(60,0)) + .0926 *i(p+vec2(61,0)) + .1526 *i(p+vec2(62,0)) - .0819 *i(p+vec2(60,1)) - .0163 *i(p+vec2(61,1)) + .165  *i(p+vec2(62,1)) - .0608 *i(p+vec2(60,2)) - .0131 *i(p+vec2(61,2)) + .0338 *i(p+vec2(62,2)) - .5923 *i(p+vec2(72,0)) - .0566 *i(p+vec2(73,0)) + .0096 *i(p+vec2(74,0)) - .4644 *i(p+vec2(72,1)) - .0662 *i(p+vec2(73,1)) - .1652 *i(p+vec2(74,1)) - .4614 *i(p+vec2(72,2)) + .0355 *i(p+vec2(73,2)) - .1439 *i(p+vec2(74,2)) - .1767 *i(p+vec2(84,0)) + .0756 *i(p+vec2(85,0)) + .2064 *i(p+vec2(86,0)) + .0362 *i(p+vec2(84,1)) + .1226 *i(p+vec2(85,1)) + .0437 *i(p+vec2(86,1)) + .0345 *i(p+vec2(84,2)) - .022  *i(p+vec2(85,2)) - .0102 *i(p+vec2(86,2)) + .0481 ;\n        else if (fmap == 7) x = -.1824 *i(p) + .0893 *i(p+vec2(1,0)) + .0457 *i(p+vec2(2,0)) - .4508 *i(p+vec2(0,1)) - .2718 *i(p+vec2(1,1)) - .3385 *i(p+vec2(2,1)) - .0939 *i(p+vec2(0,2)) + .0205 *i(p+vec2(1,2)) - .1347 *i(p+vec2(2,2)) + .2965 *i(p+vec2(12,0)) + .2752 *i(p+vec2(13,0)) + .397  *i(p+vec2(14,0)) + .1861 *i(p+vec2(12,1)) + .1058 *i(p+vec2(13,1)) - .0606 *i(p+vec2(14,1)) - .0071 *i(p+vec2(12,2)) + .0309 *i(p+vec2(13,2)) - .0233 *i(p+vec2(14,2)) + .1715 *i(p+vec2(24,0)) + .154  *i(p+vec2(25,0)) - .1693 *i(p+vec2(26,0)) - .0108 *i(p+vec2(24,1)) - .0544 *i(p+vec2(25,1)) - .2331 *i(p+vec2(26,1)) + .2375 *i(p+vec2(24,2)) - .1213 *i(p+vec2(25,2)) - .1779 *i(p+vec2(26,2)) + .1799 *i(p+vec2(36,0)) + .1098 *i(p+vec2(37,0)) + .017  *i(p+vec2(38,0)) - .0301 *i(p+vec2(36,1)) - .1156 *i(p+vec2(37,1)) + .0462 *i(p+vec2(38,1)) + .0334 *i(p+vec2(36,2)) + .0447 *i(p+vec2(37,2)) - .1418 *i(p+vec2(38,2)) + .2149 *i(p+vec2(48,0)) + .033  *i(p+vec2(49,0)) - .0314 *i(p+vec2(50,0)) + .1114 *i(p+vec2(48,1)) - .0898 *i(p+vec2(49,1)) + .0116 *i(p+vec2(50,1)) + .0295 *i(p+vec2(48,2)) - .0817 *i(p+vec2(49,2)) - .2452 *i(p+vec2(50,2)) + .2006 *i(p+vec2(60,0)) + .0525 *i(p+vec2(61,0)) - .0352 *i(p+vec2(62,0)) + .0151 *i(p+vec2(60,1)) - .1429 *i(p+vec2(61,1)) - .1813 *i(p+vec2(62,1)) + .2454 *i(p+vec2(60,2)) + .1786 *i(p+vec2(61,2)) - .1424 *i(p+vec2(62,2)) + .1339 *i(p+vec2(72,0)) - .0279 *i(p+vec2(73,0)) + .0358 *i(p+vec2(74,0)) + .0468 *i(p+vec2(72,1)) - .0457 *i(p+vec2(73,1)) - .1322 *i(p+vec2(74,1)) + .268  *i(p+vec2(72,2)) + .1727 *i(p+vec2(73,2)) + .0382 *i(p+vec2(74,2)) + .2195 *i(p+vec2(84,0)) - .0268 *i(p+vec2(85,0)) - .1153 *i(p+vec2(86,0)) - .0072 *i(p+vec2(84,1)) - .0792 *i(p+vec2(85,1)) - .0553 *i(p+vec2(86,1)) + .1365 *i(p+vec2(84,2)) - .1704 *i(p+vec2(85,2)) - .0514 *i(p+vec2(86,2)) + .2505 ;\n        else if (fmap == 8) x =  .1616 *i(p) + .1708 *i(p+vec2(1,0)) + .1729 *i(p+vec2(2,0)) - .0133 *i(p+vec2(0,1)) - .1925 *i(p+vec2(1,1)) - .0317 *i(p+vec2(2,1)) - .125  *i(p+vec2(0,2)) - .2098 *i(p+vec2(1,2)) - .0771 *i(p+vec2(2,2)) - .1864 *i(p+vec2(12,0)) - .1086 *i(p+vec2(13,0)) - .1052 *i(p+vec2(14,0)) + .0394 *i(p+vec2(12,1)) + .032  *i(p+vec2(13,1)) - .1313 *i(p+vec2(14,1)) + .0652 *i(p+vec2(12,2)) - .143  *i(p+vec2(13,2)) + .0473 *i(p+vec2(14,2)) + .06   *i(p+vec2(24,0)) + .1629 *i(p+vec2(25,0)) + .0876 *i(p+vec2(26,0)) + .1929 *i(p+vec2(24,1)) + .1003 *i(p+vec2(25,1)) - .147  *i(p+vec2(26,1)) + .0449 *i(p+vec2(24,2)) - .0305 *i(p+vec2(25,2)) - .3034 *i(p+vec2(26,2)) - .1561 *i(p+vec2(36,0)) + .0547 *i(p+vec2(37,0)) + .0531 *i(p+vec2(38,0)) + .0918 *i(p+vec2(36,1)) + .1571 *i(p+vec2(37,1)) - .0609 *i(p+vec2(38,1)) + .0844 *i(p+vec2(36,2)) - .0956 *i(p+vec2(37,2)) - .1788 *i(p+vec2(38,2)) - .1079 *i(p+vec2(48,0)) + .1297 *i(p+vec2(49,0)) + .0453 *i(p+vec2(50,0)) + .2913 *i(p+vec2(48,1)) + .3307 *i(p+vec2(49,1)) + .0034 *i(p+vec2(50,1)) + .0294 *i(p+vec2(48,2)) - .0864 *i(p+vec2(49,2)) - .2392 *i(p+vec2(50,2)) - .014  *i(p+vec2(60,0)) + .1615 *i(p+vec2(61,0)) + .0817 *i(p+vec2(62,0)) + .0959 *i(p+vec2(60,1)) - .0655 *i(p+vec2(61,1)) - .0695 *i(p+vec2(62,1)) - .0052 *i(p+vec2(60,2)) - .046  *i(p+vec2(61,2)) - .1942 *i(p+vec2(62,2)) - .1561 *i(p+vec2(72,0)) + .0111 *i(p+vec2(73,0)) + .1669 *i(p+vec2(74,0)) + .0501 *i(p+vec2(72,1)) + .0012 *i(p+vec2(73,1)) + .0216 *i(p+vec2(74,1)) + .1776 *i(p+vec2(72,2)) + .188  *i(p+vec2(73,2)) + .1788 *i(p+vec2(74,2)) + .1073 *i(p+vec2(84,0)) + .2582 *i(p+vec2(85,0)) + .1173 *i(p+vec2(86,0)) + .125  *i(p+vec2(84,1)) + .0175 *i(p+vec2(85,1)) - .0183 *i(p+vec2(86,1)) + .0226 *i(p+vec2(84,2)) - .0984 *i(p+vec2(85,2)) - .1497 *i(p+vec2(86,2)) - .0766 ;\n        else if (fmap == 9) x = -.0992 *i(p) - .1965 *i(p+vec2(1,0)) - .0513 *i(p+vec2(2,0)) + .038  *i(p+vec2(0,1)) + .0698 *i(p+vec2(1,1)) + .2064 *i(p+vec2(2,1)) - .13   *i(p+vec2(0,2)) - .2492 *i(p+vec2(1,2)) - .1935 *i(p+vec2(2,2)) + .3379 *i(p+vec2(12,0)) + .0497 *i(p+vec2(13,0)) - .0087 *i(p+vec2(14,0)) + .2843 *i(p+vec2(12,1)) + .1798 *i(p+vec2(13,1)) + .0449 *i(p+vec2(14,1)) + .2568 *i(p+vec2(12,2)) + .1514 *i(p+vec2(13,2)) + .1214 *i(p+vec2(14,2)) + .0078 *i(p+vec2(24,0)) - .0383 *i(p+vec2(25,0)) + .0201 *i(p+vec2(26,0)) + .1352 *i(p+vec2(24,1)) - .0824 *i(p+vec2(25,1)) + .1424 *i(p+vec2(26,1)) - .1625 *i(p+vec2(24,2)) - .0577 *i(p+vec2(25,2)) - .0049 *i(p+vec2(26,2)) + .0494 *i(p+vec2(36,0)) + .018  *i(p+vec2(37,0)) + .0917 *i(p+vec2(38,0)) - .0327 *i(p+vec2(36,1)) + .0252 *i(p+vec2(37,1)) + .1301 *i(p+vec2(38,1)) - .0472 *i(p+vec2(36,2)) - .0529 *i(p+vec2(37,2)) + .1665 *i(p+vec2(38,2)) - .0534 *i(p+vec2(48,0)) - .141  *i(p+vec2(49,0)) + .154  *i(p+vec2(50,0)) + .0262 *i(p+vec2(48,1)) + .0807 *i(p+vec2(49,1)) - .0603 *i(p+vec2(50,1)) - .048  *i(p+vec2(48,2)) - .0257 *i(p+vec2(49,2)) + .1204 *i(p+vec2(50,2)) + .0566 *i(p+vec2(60,0)) + .0702 *i(p+vec2(61,0)) - .0159 *i(p+vec2(62,0)) + .1162 *i(p+vec2(60,1)) - .0202 *i(p+vec2(61,1)) - .0591 *i(p+vec2(62,1)) - .0253 *i(p+vec2(60,2)) - .0645 *i(p+vec2(61,2)) + .2136 *i(p+vec2(62,2)) - .033  *i(p+vec2(72,0)) - .0586 *i(p+vec2(73,0)) + .0523 *i(p+vec2(74,0)) - .0877 *i(p+vec2(72,1)) - .005  *i(p+vec2(73,1)) - .0122 *i(p+vec2(74,1)) + .0359 *i(p+vec2(72,2)) + .005  *i(p+vec2(73,2)) + .1929 *i(p+vec2(74,2)) - .0265 *i(p+vec2(84,0)) + .0475 *i(p+vec2(85,0)) + .1306 *i(p+vec2(86,0)) - .0125 *i(p+vec2(84,1)) + .0439 *i(p+vec2(85,1)) + .0951 *i(p+vec2(86,1)) + .069  *i(p+vec2(84,2)) + .0632 *i(p+vec2(85,2)) + .1637 *i(p+vec2(86,2)) - .0916 ;\n\n        x = max(x, 0.); // ReLU Activation\n        col = vec3(x);\n    }\n    // CNN Step 6: Max Pooling #2\n    // 12x8x8 => 12x4x4\n    else if (F.x < f6 * 4. && F.y >= F2+F4 && F.y < F2+F4+F6) {\n        ivec2 p = ivec2(F - vec2(0, F2+F4)) * 2 + ivec2(0, F1+F3);\n        \n        // Max Pooling on the result of the Convolution\n        float x = max(texelFetch(iChannel0, p, 0).r,\n                  max(texelFetch(iChannel0, p + ivec2(0,1), 0).r,\n                  max(texelFetch(iChannel0, p + ivec2(1,0), 0).r,\n                      texelFetch(iChannel0, p + ivec2(1,1), 0).r)));\n                      \n        col = vec3(x);\n    }\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "////// Difficulty level ///////////\n///                             ///\n    #define MAX_ATTEMPTS     7.\n///                             ///\n///////////////////////////////////\n\n#define R              (iResolution.xy)\n#define iAspect        (iResolution.x/iResolution.y)\n#define iR             (1. - iResolution.y/iResolution.x)\n\n/// Words dictionnary ///\n// Each array contains 4 words\n#define word_size  10\nint[40] words0 = int[40](80,73,88,69,76,0,0,0,0,0,86,69,67,84,79,82,0,0,0,0,83,72,65,68,69,82,0,0,0,0,82,69,78,68,69,82,0,0,0,0);\nint[40] words1 = int[40](86,69,82,84,69,88,0,0,0,0,70,82,65,71,77,69,78,84,0,0,84,69,88,84,85,82,69,0,0,0,66,85,70,70,69,82,0,0,0,0);\nint[40] words2 = int[40](67,65,78,86,65,83,0,0,0,0,83,80,82,73,84,69,0,0,0,0,67,85,82,86,69,0,0,0,0,0,80,79,76,89,71,79,78,0,0,0);\nint[40] words3 = int[40](83,72,65,68,69,82,0,0,0,0,68,69,80,84,72,0,0,0,0,0,67,79,76,79,82,0,0,0,0,0,70,73,76,84,69,82,0,0,0,0);\nint[40] words4 = int[40](76,73,71,72,84,0,0,0,0,0,65,78,73,77,65,84,73,79,78,0,77,79,68,69,76,0,0,0,0,0,77,65,84,82,73,88,0,0,0,0);\nint[40] words5 = int[40](66,76,69,78,68,0,0,0,0,0,70,82,65,77,69,0,0,0,0,0,83,67,69,78,69,0,0,0,0,0,82,65,83,84,69,82,0,0,0,0);\nint[40] words6 = int[40](65,82,82,65,89,0,0,0,0,0,70,85,78,67,84,73,79,78,0,0,86,65,82,73,65,66,76,69,0,0,67,76,65,83,83,0,0,0,0,0);\nint[40] words7 = int[40](79,66,74,69,67,84,0,0,0,0,73,78,72,69,82,73,84,0,0,0,69,86,69,78,84,0,0,0,0,0,81,85,69,85,69,0,0,0,0,0);\nint[40] words8 = int[40](83,84,65,67,75,0,0,0,0,0,65,76,71,79,82,73,84,72,77,0,83,69,65,82,67,72,0,0,0,0,71,82,65,80,72,0,0,0,0,0);\nint[40] words9 = int[40](67,82,89,80,84,79,0,0,0,0,76,79,71,73,67,0,0,0,0,0,78,69,85,82,65,76,0,0,0,0,76,69,65,82,78,73,78,71,0,0);\n\n/// Neural Network Settings ///\n// Input image dimension (28*28 = 784 input nodes)\n#define input_res      28.\n\n// Number of feature maps (filters) per layer\n#define f1 8.\n#define f2 8.\n#define f3 8.\n#define f4 10.\n#define f5 10.\n#define f6 10.\n\n// Output filter dimensions for each layer\n#define F1 26.\n#define F2 24.\n#define F3 12.\n#define F4 10.\n#define F5 8.\n#define F6 4.\n\n// Number of output nodes (26 letters: a-z)\n#define num_classes    26.\n\n/// \"Hack\" to display text easily\n/// (shader coming soon)\n//////////////////////////////////\nfloat char(sampler2D s, vec2 u, int id) {\n    return textureLod(s, (u + vec2(id%16, 15. - floor(float(id)/16.))) / 16.,0.).r * step(abs(u.x-.5),.5) * step(abs(u.y-.5),.5);\n}\n#define makeString(func_name)  float func_name(vec2 u)        { print\n#define makeStringI(func_name) float func_name(vec2 u, int i) { print\n#define FONT_TEXTURE iChannel3\n#define print float d = 0.; (0\n#define _end  ); return  d; }\n#define _     ); u.x -= .4; d += char(FONT_TEXTURE, u, \n#define __    ); u.x -= .4; (0\n#define _ch(i)  _ 65+i\n#define _dig(i) _ 48+i\n#define _qt _ 34\n#define _dd _ 58\n#define _un _ 95\n#define _bl _ 91\n#define _br _ 93\n#define _A _ 65\n#define _B _ 66\n#define _C _ 67\n#define _D _ 68\n#define _E _ 69\n#define _F _ 70\n#define _G _ 71\n#define _H _ 72\n#define _I _ 73\n#define _J _ 74\n#define _K _ 75\n#define _L _ 76\n#define _M _ 77\n#define _N _ 78\n#define _O _ 79\n#define _P _ 80\n#define _Q _ 81\n#define _R _ 82\n#define _S _ 83\n#define _T _ 84\n#define _U _ 85\n#define _V _ 86\n#define _W _ 87\n#define _X _ 88\n#define _Y _ 89\n#define _Z _ 90\n#define _a _ 97\n#define _b _ 98\n#define _c _ 99\n#define _d _ 100\n#define _e _ 101\n#define _f _ 102\n#define _g _ 103\n#define _h _ 104\n#define _i _ 105\n#define _j _ 106\n#define _k _ 107\n#define _l _ 108\n#define _m _ 109\n#define _n _ 110\n#define _o _ 111\n#define _p _ 112\n#define _q _ 113\n#define _r _ 114\n#define _s _ 115\n#define _t _ 116\n#define _u _ 117\n#define _v _ 118\n#define _w _ 119\n#define _x _ 120\n#define _y _ 121\n#define _z _ 122",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/* This buffers handles:\n   - Fully connected layer (Step 7)\n   - Softmax function      (Step 8)\n*/\n\nfloat i(int x, int y) {\n    return texelFetch(iChannel0, ivec2(x,y), 0).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = fragCoord / R;\n    vec3 col = vec3(0);\n\n    ivec2 F = ivec2(fragCoord - .5);\n    \n    // CNN Step 7: Fully connected layer\n    // 10x4x4 => 1x26\n    if (F.x < int(num_classes)  && F.y == 0) {        \n        float x;\n        \n        // Each if/else correspond to an output node\n        if (F.x == 0) {\n            x =  -.3832 *i(0,34) - .4274 *i(1,34) - .4392 *i(2,34) - .3827 *i(3,34) - .1012 *i(0,35) - .0763 *i(1,35) - .0507 *i(2,35) - .0286 *i(3,35) + .0451 *i(0,36) + .0081 *i(1,36) - .0138 *i(2,36) + .0362 *i(3,36) - .0103 *i(0,37) - .0823 *i(1,37) - .1871 *i(2,37) - .1408 *i(3,37);\n            x +=  + .106  *i(4,34) + .13   *i(5,34) + .1046 *i(6,34) + .2426 *i(7,34) + .1028 *i(4,35) + .1104 *i(5,35) + .1201 *i(6,35) + .1486 *i(7,35) + .0295 *i(4,36) - .0144 *i(5,36) + .005  *i(6,36) - .0068 *i(7,36) + .076  *i(4,37) + .0325 *i(5,37) - .0281 *i(6,37) - .2085 *i(7,37);\n            x +=  - .3532 *i(8,34) - .0914 *i(9,34) - .1922 *i(10,34) - .1129 *i(11,34) - .4167 *i(8,35) - .1915 *i(9,35) - .1647 *i(10,35) - .0689 *i(11,35) - .3048 *i(8,36) - .3471 *i(9,36) + .0331 *i(10,36) + .0814 *i(11,36) - .2388 *i(8,37) - .1166 *i(9,37) + .0843 *i(10,37) - .0053 *i(11,37);\n            x +=  - .6653 *i(12,34) - .6401 *i(13,34) - .417  *i(14,34) - .4771 *i(15,34) - .1087 *i(12,35) - .2354 *i(13,35) - .2043 *i(14,35) - .2374 *i(15,35) - .0155 *i(12,36) - .0554 *i(13,36) - .1887 *i(14,36) - .1967 *i(15,36) - .0399 *i(12,37) - .0384 *i(13,37) - .0536 *i(14,37) - .1618 *i(15,37);\n            x +=  - .1103 *i(16,34) - .0015 *i(17,34) + .0458 *i(18,34) - .0235 *i(19,34) - .1374 *i(16,35) + .0335 *i(17,35) + .0915 *i(18,35) + .0342 *i(19,35) - .356  *i(16,36) - .1467 *i(17,36) - .0348 *i(18,36) - .1522 *i(19,36) - .304  *i(16,37) - .0606 *i(17,37) + .0633 *i(18,37) + .0235 *i(19,37);\n            x +=  - .3901 *i(20,34) - .2651 *i(21,34) - .1132 *i(22,34) - .1298 *i(23,34) - .0973 *i(20,35) + .03   *i(21,35) + .0895 *i(22,35) - .0425 *i(23,35) - .0959 *i(20,36) - .0326 *i(21,36) + .0165 *i(22,36) + .0056 *i(23,36) - .1474 *i(20,37) - .1928 *i(21,37) - .1382 *i(22,37) - .0195 *i(23,37);\n            x +=  + .0606 *i(24,34) - .0568 *i(25,34) - .1079 *i(26,34) - .1196 *i(27,34) + .0479 *i(24,35) + .0831 *i(25,35) + .0468 *i(26,35) - .1185 *i(27,35) + .0385 *i(24,36) + .0507 *i(25,36) + .1183 *i(26,36) - .2157 *i(27,36) + .0282 *i(24,37) + .0461 *i(25,37) + .0534 *i(26,37) - .0437 *i(27,37);\n            x +=  + .0358 *i(28,34) + .0871 *i(29,34) + .1218 *i(30,34) + .2048 *i(31,34) - .0655 *i(28,35) + .0273 *i(29,35) + .0618 *i(30,35) + .1203 *i(31,35) - .226  *i(28,36) - .0606 *i(29,36) + .0302 *i(30,36) + .0554 *i(31,36) - .195  *i(28,37) + .0434 *i(29,37) + .0364 *i(30,37) + .0695 *i(31,37);\n            x +=  + .1407 *i(32,34) + .0566 *i(33,34) + .0998 *i(34,34) + .0842 *i(35,34) + .0238 *i(32,35) - .0613 *i(33,35) + .0753 *i(34,35) + .0705 *i(35,35) - .0662 *i(32,36) - .1668 *i(33,36) - .1503 *i(34,36) - .0471 *i(35,36) - .0439 *i(32,37) - .0556 *i(33,37) - .1565 *i(34,37) - .0865 *i(35,37);\n            x +=  - .1995 *i(36,34) - .3543 *i(37,34) - .1131 *i(38,34) + .0726 *i(39,34) - .0755 *i(36,35) - .0845 *i(37,35) - .1285 *i(38,35) - .0691 *i(39,35) - .0621 *i(36,36) + .048  *i(37,36) + .0705 *i(38,36) + .0079 *i(39,36) - .1392 *i(36,37) + .1586 *i(37,37) + .1291 *i(38,37) + .1142 *i(39,37) - .1254 ;\n        } else if (F.x == 1) {\n            x =  -.1235 *i(0,34) + .0029 *i(1,34) + .0901 *i(2,34) + .1541 *i(3,34) - .0798 *i(0,35) - .0687 *i(1,35) - .0213 *i(2,35) - .123  *i(3,35) - .0101 *i(0,36) + .0315 *i(1,36) + .0219 *i(2,36) - .0258 *i(3,36) - .0284 *i(0,37) + .0066 *i(1,37) + .0358 *i(2,37) + .0422 *i(3,37);\n            x +=  + .0598 *i(4,34) + .1005 *i(5,34) - .0048 *i(6,34) - .0578 *i(7,34) - .0225 *i(4,35) + .064  *i(5,35) + .1123 *i(6,35) + .1205 *i(7,35) - .0005 *i(4,36) + .0625 *i(5,36) + .0642 *i(6,36) + .0784 *i(7,36) + .0627 *i(4,37) + .0467 *i(5,37) - .0015 *i(6,37) + .02   *i(7,37);\n            x +=  - .1625 *i(8,34) - .0784 *i(9,34) - .1305 *i(10,34) - .1587 *i(11,34) - .2097 *i(8,35) - .2058 *i(9,35) - .1195 *i(10,35) - .0157 *i(11,35) - .1499 *i(8,36) - .455  *i(9,36) - .3101 *i(10,36) - .1138 *i(11,36) - .2179 *i(8,37) - .2594 *i(9,37) - .1715 *i(10,37) - .0986 *i(11,37);\n            x +=  - .1487 *i(12,34) - .0414 *i(13,34) - .0657 *i(14,34) - .3878 *i(15,34) - .1976 *i(12,35) - .1657 *i(13,35) - .1066 *i(14,35) - .232  *i(15,35) - .1406 *i(12,36) - .2279 *i(13,36) - .2539 *i(14,36) - .1242 *i(15,36) - .0691 *i(12,37) - .0528 *i(13,37) - .071  *i(14,37) - .1567 *i(15,37);\n            x +=  - .1701 *i(16,34) - .0146 *i(17,34) + .0669 *i(18,34) + .0567 *i(19,34) - .1694 *i(16,35) + .0102 *i(17,35) + .0717 *i(18,35) + .0823 *i(19,35) - .0111 *i(16,36) - .0783 *i(17,36) - .0527 *i(18,36) - .0729 *i(19,36) + .1125 *i(16,37) + .0933 *i(17,37) + .1389 *i(18,37) + .095  *i(19,37);\n            x +=  - .0206 *i(20,34) + .0344 *i(21,34) + .0443 *i(22,34) + .0434 *i(23,34) - .1895 *i(20,35) - .0952 *i(21,35) - .0135 *i(22,35) + .0709 *i(23,35) - .0491 *i(20,36) - .0157 *i(21,36) - .0079 *i(22,36) + .0374 *i(23,36) - .0072 *i(20,37) - .0148 *i(21,37) - .0082 *i(22,37) - .0466 *i(23,37);\n            x +=  + .0333 *i(24,34) - .0577 *i(25,34) + .0968 *i(26,34) + .125  *i(27,34) - .077  *i(24,35) - .1176 *i(25,35) - .104  *i(26,35) - .082  *i(27,35) - .0616 *i(24,36) - .0231 *i(25,36) + .0337 *i(26,36) + .0556 *i(27,36) - .1619 *i(24,37) - .0419 *i(25,37) - .0141 *i(26,37) - .0934 *i(27,37);\n            x +=  - .0348 *i(28,34) - .061  *i(29,34) - .2457 *i(30,34) - .1916 *i(31,34) - .0547 *i(28,35) - .0508 *i(29,35) + .021  *i(30,35) + .1101 *i(31,35) + .0119 *i(28,36) - .0131 *i(29,36) + .0066 *i(30,36) + .0144 *i(31,36) - .1351 *i(28,37) - .0478 *i(29,37) - .0284 *i(30,37) - .0196 *i(31,37);\n            x +=  - .1888 *i(32,34) - .2162 *i(33,34) + .0502 *i(34,34) + .1098 *i(35,34) - .0539 *i(32,35) - .175  *i(33,35) + .0382 *i(34,35) + .0431 *i(35,35) - .025  *i(32,36) - .0662 *i(33,36) - .0614 *i(34,36) - .0399 *i(35,36) - .1102 *i(32,37) - .1175 *i(33,37) + .048  *i(34,37) + .0865 *i(35,37);\n            x +=  + .0391 *i(36,34) - .0086 *i(37,34) - .0738 *i(38,34) - .0312 *i(39,34) - .092  *i(36,35) - .014  *i(37,35) + .0897 *i(38,35) + .215  *i(39,35) - .2298 *i(36,36) - .141  *i(37,36) + .0093 *i(38,36) + .1355 *i(39,36) - .2184 *i(36,37) - .0157 *i(37,37) + .0155 *i(38,37) + .0252 *i(39,37) - .7654 ;\n        } else if (F.x == 2) {\n            x =  -.0194 *i(0,34) - .0126 *i(1,34) + .0075 *i(2,34) + .0012 *i(3,34) - .113  *i(0,35) + .0113 *i(1,35) - .0672 *i(2,35) - 0.    *i(3,35) - .4292 *i(0,36) - .2014 *i(1,36) - .0785 *i(2,36) + .0974 *i(3,36) - .3697 *i(0,37) - .3181 *i(1,37) - .1863 *i(2,37) - .0749 *i(3,37);\n            x +=  - .4509 *i(4,34) - .1894 *i(5,34) - .2058 *i(6,34) - .1137 *i(7,34) - .07   *i(4,35) - .1596 *i(5,35) - .2738 *i(6,35) - .192  *i(7,35) + .0886 *i(4,36) + .0058 *i(5,36) - .0867 *i(6,36) - .0887 *i(7,36) + .0674 *i(4,37) + .0381 *i(5,37) - .0711 *i(6,37) - .1125 *i(7,37);\n            x +=  + .1065 *i(8,34) + .1386 *i(9,34) + .096  *i(10,34) + .1273 *i(11,34) + .0518 *i(8,35) + .02   *i(9,35) + .0942 *i(10,35) + .1064 *i(11,35) - .226  *i(8,36) - .0766 *i(9,36) - .1362 *i(10,36) - .0474 *i(11,36) - .1303 *i(8,37) - .0106 *i(9,37) + .0345 *i(10,37) - .0501 *i(11,37);\n            x +=  - .1022 *i(12,34) - .0497 *i(13,34) + .067  *i(14,34) + .0471 *i(15,34) - .354  *i(12,35) - .0682 *i(13,35) + .0331 *i(14,35) + .0292 *i(15,35) - .0715 *i(12,36) - .1055 *i(13,36) - .0471 *i(14,36) + .0811 *i(15,36) + .0313 *i(12,37) + .0106 *i(13,37) - .0439 *i(14,37) - .0792 *i(15,37);\n            x +=  + .0427 *i(16,34) + .005  *i(17,34) - .0103 *i(18,34) + .0396 *i(19,34) - .3467 *i(16,35) - .0331 *i(17,35) + .031  *i(18,35) + .0706 *i(19,35) - .4238 *i(16,36) - .0803 *i(17,36) + .0226 *i(18,36) + .0357 *i(19,36) - .3141 *i(16,37) - .1318 *i(17,37) + .0318 *i(18,37) + .0212 *i(19,37);\n            x +=  + .067  *i(20,34) + .028  *i(21,34) + .0253 *i(22,34) + .0145 *i(23,34) + .0952 *i(20,35) + .0466 *i(21,35) - .0244 *i(22,35) - .0235 *i(23,35) - .2463 *i(20,36) - .2752 *i(21,36) - .3832 *i(22,36) - .4766 *i(23,36) - .5034 *i(20,37) - .2166 *i(21,37) - .2007 *i(22,37) - .2099 *i(23,37);\n            x +=  - .67   *i(24,34) - .0983 *i(25,34) + .0146 *i(26,34) - .0275 *i(27,34) - .3752 *i(24,35) + .0042 *i(25,35) - .03   *i(26,35) - .0208 *i(27,35) + .0674 *i(24,36) + .0968 *i(25,36) - .0261 *i(26,36) - .0165 *i(27,36) + .1577 *i(24,37) + .1234 *i(25,37) + .1219 *i(26,37) - .0063 *i(27,37);\n            x +=  - .0522 *i(28,34) - .3339 *i(29,34) - .3531 *i(30,34) - .4613 *i(31,34) - .0769 *i(28,35) - .053  *i(29,35) + .0644 *i(30,35) - .3123 *i(31,35) - .0311 *i(28,36) + .1251 *i(29,36) + .0463 *i(30,36) - .0865 *i(31,36) - .2165 *i(28,37) + .0116 *i(29,37) + .0161 *i(30,37) - .0336 *i(31,37);\n            x +=  - .7735 *i(32,34) - .7488 *i(33,34) - .4394 *i(34,34) - .328  *i(35,34) - .1409 *i(32,35) - .1236 *i(33,35) - .3537 *i(34,35) - .2844 *i(35,35) + .0146 *i(32,36) + .0405 *i(33,36) - .0012 *i(34,36) - .0977 *i(35,36) - .0162 *i(32,37) + .0262 *i(33,37) + .0601 *i(34,37) + .0176 *i(35,37);\n            x +=  + .0918 *i(36,34) + .0428 *i(37,34) + .0238 *i(38,34) - .2002 *i(39,34) + .1172 *i(36,35) + .0403 *i(37,35) - .1122 *i(38,35) - .5317 *i(39,35) + .011  *i(36,36) - .0675 *i(37,36) - .18   *i(38,36) - .2187 *i(39,36) - .2987 *i(36,37) + .0875 *i(37,37) + .0354 *i(38,37) - .0282 *i(39,37) + .3628 ;\n        } else if (F.x == 3) {\n            x =  -.01   *i(0,34) + .0275 *i(1,34) + .107  *i(2,34) + .091  *i(3,34) + .0024 *i(0,35) + .0195 *i(1,35) + .0662 *i(2,35) + .1103 *i(3,35) - .1009 *i(0,36) - .1757 *i(1,36) - .0074 *i(2,36) + .0392 *i(3,36) - .0829 *i(0,37) - .1263 *i(1,37) - .3069 *i(2,37) - .1925 *i(3,37);\n            x +=  - .0486 *i(4,34) - .0662 *i(5,34) - .123  *i(6,34) - .3876 *i(7,34) - .5237 *i(4,35) - .1675 *i(5,35) - .0892 *i(6,35) - .3113 *i(7,35) - .1259 *i(4,36) + .0124 *i(5,36) + .0261 *i(6,36) - .1327 *i(7,36) + .0878 *i(4,37) + .0812 *i(5,37) + .0399 *i(6,37) - .1003 *i(7,37);\n            x +=  - .119  *i(8,34) - .1282 *i(9,34) - .207  *i(10,34) - .5197 *i(11,34) - .0531 *i(8,35) - .1166 *i(9,35) - .0764 *i(10,35) - .127  *i(11,35) - .0281 *i(8,36) + .0282 *i(9,36) + .1064 *i(10,36) + .0313 *i(11,36) - .1001 *i(8,37) - .0233 *i(9,37) + .0836 *i(10,37) + .0121 *i(11,37);\n            x +=  - .0388 *i(12,34) - .02   *i(13,34) - .0316 *i(14,34) - .4071 *i(15,34) + .0072 *i(12,35) - .184  *i(13,35) - .1335 *i(14,35) - .4161 *i(15,35) - .022  *i(12,36) - .2202 *i(13,36) - .3455 *i(14,36) - .3552 *i(15,36) - .116  *i(12,37) - .0506 *i(13,37) + .0045 *i(14,37) - .0153 *i(15,37);\n            x +=  - .0435 *i(16,34) - .0523 *i(17,34) - .0861 *i(18,34) - .0229 *i(19,34) - .0598 *i(16,35) - .2585 *i(17,35) - .1043 *i(18,35) - .0995 *i(19,35) - .036  *i(16,36) - .0156 *i(17,36) + .0218 *i(18,36) + .0122 *i(19,36) + .0422 *i(16,37) + .01   *i(17,37) + .0301 *i(18,37) + .0425 *i(19,37);\n            x +=  - .016  *i(20,34) - .0146 *i(21,34) + .0198 *i(22,34) - .143  *i(23,34) - .1232 *i(20,35) - .1226 *i(21,35) - .0565 *i(22,35) - .0838 *i(23,35) - .0711 *i(20,36) - .1848 *i(21,36) - .0964 *i(22,36) + .0572 *i(23,36) + .0455 *i(20,37) + .0335 *i(21,37) + .0634 *i(22,37) + .1962 *i(23,37);\n            x +=  + .1374 *i(24,34) + .0327 *i(25,34) + .0618 *i(26,34) + .0744 *i(27,34) + .0261 *i(24,35) - .1878 *i(25,35) + .0437 *i(26,35) + .1529 *i(27,35) - .0814 *i(24,36) - .101  *i(25,36) - .0853 *i(26,36) + .0214 *i(27,36) - .2455 *i(24,37) - .0863 *i(25,37) - .0384 *i(26,37) - .1473 *i(27,37);\n            x +=  - .1462 *i(28,34) - .1389 *i(29,34) - .2649 *i(30,34) - .2983 *i(31,34) - .0726 *i(28,35) - .1318 *i(29,35) + .0216 *i(30,35) + .1045 *i(31,35) - .0035 *i(28,36) - .1    *i(29,36) + .0376 *i(30,36) + .0752 *i(31,36) - .0164 *i(28,37) - .0457 *i(29,37) + .0206 *i(30,37) + .0844 *i(31,37);\n            x +=  - .1671 *i(32,34) - .2144 *i(33,34) - .1143 *i(34,34) + .0615 *i(35,34) + .0249 *i(32,35) - .0328 *i(33,35) - .0641 *i(34,35) + .0362 *i(35,35) + .0554 *i(32,36) + .0718 *i(33,36) - .0387 *i(34,36) + .07   *i(35,36) + .0654 *i(32,37) + .0678 *i(33,37) + .0294 *i(34,37) - .0158 *i(35,37);\n            x +=  - .0322 *i(36,34) - .067  *i(37,34) - .2878 *i(38,34) - .6811 *i(39,34) - .2031 *i(36,35) - .1055 *i(37,35) + .0269 *i(38,35) + .0109 *i(39,35) - .0317 *i(36,36) + .0004 *i(37,36) + .062  *i(38,36) + .1055 *i(39,36) - .0187 *i(36,37) + .152  *i(37,37) + .0945 *i(38,37) + .1441 *i(39,37) - .2943 ;\n        } else if (F.x == 4) {\n            x =   .0219 *i(0,34) - .0108 *i(1,34) + .0203 *i(2,34) - .1142 *i(3,34) - .0569 *i(0,35) - .0543 *i(1,35) - .2044 *i(2,35) - .0718 *i(3,35) - .0217 *i(0,36) + .0137 *i(1,36) + .0087 *i(2,36) - .2117 *i(3,36) - .1397 *i(0,37) - .0525 *i(1,37) - .0305 *i(2,37) - .1811 *i(3,37);\n            x +=  + .0665 *i(4,34) + .1214 *i(5,34) + .1304 *i(6,34) + .1292 *i(7,34) + .0704 *i(4,35) + .0948 *i(5,35) + .1561 *i(6,35) + .2056 *i(7,35) + .0065 *i(4,36) + .0499 *i(5,36) + .0802 *i(6,36) + .1813 *i(7,36) + .0225 *i(4,37) + .0741 *i(5,37) + .0825 *i(6,37) + .1737 *i(7,37);\n            x +=  - .0098 *i(8,34) + .0625 *i(9,34) + .1236 *i(10,34) + .1292 *i(11,34) - .2086 *i(8,35) - .1372 *i(9,35) + .0447 *i(10,35) + .0546 *i(11,35) - .2249 *i(8,36) - .0335 *i(9,36) + .1201 *i(10,36) + .1143 *i(11,36) - .1499 *i(8,37) - .1125 *i(9,37) - .0768 *i(10,37) - .0537 *i(11,37);\n            x +=  - .22   *i(12,34) + .0212 *i(13,34) + .1029 *i(14,34) + .0523 *i(15,34) - .2779 *i(12,35) - .1369 *i(13,35) + .0104 *i(14,35) + .0248 *i(15,35) - .0891 *i(12,36) - .0719 *i(13,36) + .0115 *i(14,36) + .0254 *i(15,36) - .0475 *i(12,37) - .0611 *i(13,37) - .0304 *i(14,37) - .0057 *i(15,37);\n            x +=  - .0661 *i(16,34) - .0581 *i(17,34) - .015  *i(18,34) - .0274 *i(19,34) + .0395 *i(16,35) + .0761 *i(17,35) + .0456 *i(18,35) + .0377 *i(19,35) - .1196 *i(16,36) - .0321 *i(17,36) + .0161 *i(18,36) + .0149 *i(19,36) - .227  *i(16,37) - .0517 *i(17,37) + .0631 *i(18,37) + .0549 *i(19,37);\n            x +=  + .0545 *i(20,34) + .0256 *i(21,34) + .0436 *i(22,34) + .0479 *i(23,34) - .0841 *i(20,35) - .0134 *i(21,35) - .0066 *i(22,35) - .0656 *i(23,35) - .0316 *i(20,36) + .034  *i(21,36) + .0416 *i(22,36) + .0486 *i(23,36) - .2155 *i(20,37) - .0498 *i(21,37) + .0061 *i(22,37) - .0529 *i(23,37);\n            x +=  + .023  *i(24,34) + .0672 *i(25,34) + .0677 *i(26,34) - .045  *i(27,34) + .113  *i(24,35) + .0139 *i(25,35) - .0724 *i(26,35) - .1391 *i(27,35) + .064  *i(24,36) - .0344 *i(25,36) - .1089 *i(26,36) - .2083 *i(27,36) - .0484 *i(24,37) - .045  *i(25,37) - .0274 *i(26,37) - .0122 *i(27,37);\n            x +=  - .182  *i(28,34) - .2536 *i(29,34) - .2922 *i(30,34) - .4924 *i(31,34) - .2158 *i(28,35) - .2815 *i(29,35) - .326  *i(30,35) - .4415 *i(31,35) - .2057 *i(28,36) - .3187 *i(29,36) - .2574 *i(30,36) - .2672 *i(31,36) + .0106 *i(28,37) - .4507 *i(29,37) - .2503 *i(30,37) - .2304 *i(31,37);\n            x +=  - .2772 *i(32,34) - .2263 *i(33,34) - .1887 *i(34,34) - .2433 *i(35,34) - .0522 *i(32,35) - .1023 *i(33,35) - .1749 *i(34,35) - .3411 *i(35,35) + .0013 *i(32,36) - .1246 *i(33,36) - .2125 *i(34,36) - .3128 *i(35,36) - .1552 *i(32,37) - .2085 *i(33,37) - .2767 *i(34,37) - .2969 *i(35,37);\n            x +=  + .0947 *i(36,34) + .0482 *i(37,34) - .0429 *i(38,34) - .1615 *i(39,34) - .0137 *i(36,35) + .0026 *i(37,35) - .0416 *i(38,35) - .192  *i(39,35) + .0214 *i(36,36) + .1113 *i(37,36) + .0471 *i(38,36) - .0377 *i(39,36) - .1316 *i(36,37) + .0326 *i(37,37) - .0043 *i(38,37) - .0557 *i(39,37) - .4208 ;\n        } else if (F.x == 5) {\n            x =  -.3727 *i(0,34) - .4607 *i(1,34) - .4152 *i(2,34) - .5543 *i(3,34) - .0427 *i(0,35) - .1241 *i(1,35) - .0074 *i(2,35) - .0063 *i(3,35) - .0451 *i(0,36) - .0517 *i(1,36) - .0678 *i(2,36) - .1256 *i(3,36) - .0631 *i(0,37) - .1904 *i(1,37) - .0574 *i(2,37) - .2632 *i(3,37);\n            x +=  + .1316 *i(4,34) + .1561 *i(5,34) + .2204 *i(6,34) + .2542 *i(7,34) + .0872 *i(4,35) + .1063 *i(5,35) + .128  *i(6,35) + .15   *i(7,35) - .0039 *i(4,36) + .0208 *i(5,36) + .064  *i(6,36) + .0896 *i(7,36) + .1072 *i(4,37) + .0943 *i(5,37) + .0867 *i(6,37) + .1674 *i(7,37);\n            x +=  - .004  *i(8,34) + .0998 *i(9,34) + .0141 *i(10,34) - .0172 *i(11,34) - .0645 *i(8,35) - .0019 *i(9,35) + .1221 *i(10,35) + .0889 *i(11,35) - .0469 *i(8,36) + .0483 *i(9,36) + .1409 *i(10,36) + .1458 *i(11,36) - .1937 *i(8,37) - .4351 *i(9,37) - .2482 *i(10,37) - .1599 *i(11,37);\n            x +=  + .1473 *i(12,34) - .358  *i(13,34) - .694  *i(14,34) - .6955 *i(15,34) + .0311 *i(12,35) - .1904 *i(13,35) - .1531 *i(14,35) - .0722 *i(15,35) - .0152 *i(12,36) - .1515 *i(13,36) - .0136 *i(14,36) + .059  *i(15,36) - .1116 *i(12,37) - .2521 *i(13,37) - .0589 *i(14,37) - .0058 *i(15,37);\n            x +=  + .0261 *i(16,34) + .0024 *i(17,34) + .0623 *i(18,34) + .0435 *i(19,34) + .13   *i(16,35) + .0051 *i(17,35) + .0383 *i(18,35) + .0278 *i(19,35) - .098  *i(16,36) - .0514 *i(17,36) + .0157 *i(18,36) + .0344 *i(19,36) - .091  *i(16,37) - .0134 *i(17,37) + .094  *i(18,37) + .1029 *i(19,37);\n            x +=  - .0645 *i(20,34) - .16   *i(21,34) - .199  *i(22,34) - .3632 *i(23,34) + .0343 *i(20,35) - .0675 *i(21,35) - .0523 *i(22,35) - .0462 *i(23,35) + .0417 *i(20,36) + .0038 *i(21,36) + .0082 *i(22,36) + .1469 *i(23,36) - .1882 *i(20,37) - .1325 *i(21,37) - .0091 *i(22,37) + .063  *i(23,37);\n            x +=  - .0981 *i(24,34) - .1869 *i(25,34) - .396  *i(26,34) - .4756 *i(27,34) + .0694 *i(24,35) + .0728 *i(25,35) - .0296 *i(26,35) - .1732 *i(27,35) + .0655 *i(24,36) + .0246 *i(25,36) - .0241 *i(26,36) - .1439 *i(27,36) - .1151 *i(24,37) - .0634 *i(25,37) - .0089 *i(26,37) - .0448 *i(27,37);\n            x +=  - .0068 *i(28,34) - .0996 *i(29,34) - .2572 *i(30,34) - .559  *i(31,34) - .073  *i(28,35) - .1227 *i(29,35) - .2391 *i(30,35) - .2676 *i(31,35) - .0723 *i(28,36) - .1596 *i(29,36) - .1275 *i(30,36) + .0161 *i(31,36) + .0906 *i(28,37) - .2288 *i(29,37) - .0429 *i(30,37) + .1029 *i(31,37);\n            x +=  + .176  *i(32,34) + .0951 *i(33,34) - .0358 *i(34,34) - .5179 *i(35,34) + .0348 *i(32,35) - .0055 *i(33,35) - .1051 *i(34,35) - .4536 *i(35,35) - .0304 *i(32,36) - .0847 *i(33,36) - .2491 *i(34,36) - .331  *i(35,36) + .0321 *i(32,37) + .0335 *i(33,37) - .0068 *i(34,37) - .1193 *i(35,37);\n            x +=  - .104  *i(36,34) - .0763 *i(37,34) - .0041 *i(38,34) - .0527 *i(39,34) - .261  *i(36,35) - .1163 *i(37,35) - .1015 *i(38,35) - .1712 *i(39,35) - .0399 *i(36,36) - .0083 *i(37,36) - .01   *i(38,36) - .1271 *i(39,36) + .1116 *i(36,37) + .0543 *i(37,37) - .0374 *i(38,37) - .0351 *i(39,37) + .0021 ;\n        } else if (F.x == 6) {\n            x =   .0768 *i(0,34) + .0784 *i(1,34) + .024  *i(2,34) - .1183 *i(3,34) + .1224 *i(0,35) + .0408 *i(1,35) - .1234 *i(2,35) - .1564 *i(3,35) - .1345 *i(0,36) - .0698 *i(1,36) - .1048 *i(2,36) - .0219 *i(3,36) - .6683 *i(0,37) - .3863 *i(1,37) - .1923 *i(2,37) + .0178 *i(3,37);\n            x +=  - .0091 *i(4,34) + .0499 *i(5,34) + .1511 *i(6,34) + .2807 *i(7,34) - .0115 *i(4,35) + .0062 *i(5,35) + .1283 *i(6,35) + .1833 *i(7,35) + .0293 *i(4,36) - .0632 *i(5,36) - .0522 *i(6,36) - .0147 *i(7,36) + .0171 *i(4,37) + .0123 *i(5,37) - .0241 *i(6,37) - .046  *i(7,37);\n            x +=  - .009  *i(8,34) - .1294 *i(9,34) - .1759 *i(10,34) - .054  *i(11,34) - .2861 *i(8,35) - .2751 *i(9,35) + .0696 *i(10,35) + .0774 *i(11,35) - .4546 *i(8,36) - .1905 *i(9,36) + .0516 *i(10,36) + .0922 *i(11,36) - .2998 *i(8,37) - .2109 *i(9,37) - .0761 *i(10,37) - .1145 *i(11,37);\n            x +=  - .2402 *i(12,34) - .1243 *i(13,34) - .074  *i(14,34) - .2187 *i(15,34) - .4227 *i(12,35) - .11   *i(13,35) + .013  *i(14,35) + .0155 *i(15,35) - .1769 *i(12,36) + .1164 *i(13,36) + .0462 *i(14,36) + .0794 *i(15,36) - .1012 *i(12,37) - .0889 *i(13,37) + .0241 *i(14,37) + .0063 *i(15,37);\n            x +=  - .0802 *i(16,34) + .0123 *i(17,34) + .0681 *i(18,34) + .0604 *i(19,34) - .2159 *i(16,35) + .0051 *i(17,35) + .0191 *i(18,35) + .0725 *i(19,35) - .2787 *i(16,36) - .0509 *i(17,36) + .0057 *i(18,36) - .0034 *i(19,36) - .4141 *i(16,37) - .0764 *i(17,37) + .0378 *i(18,37) + .0252 *i(19,37);\n            x +=  + .0945 *i(20,34) + .0351 *i(21,34) - .0059 *i(22,34) - .1476 *i(23,34) + .0396 *i(20,35) + .0305 *i(21,35) + .0439 *i(22,35) + .0276 *i(23,35) - .1721 *i(20,36) + .0048 *i(21,36) + .0241 *i(22,36) + .0775 *i(23,36) - .5796 *i(20,37) - .2622 *i(21,37) - .1199 *i(22,37) - .1084 *i(23,37);\n            x +=  - .3054 *i(24,34) + .0403 *i(25,34) + .013  *i(26,34) - .0324 *i(27,34) - .1685 *i(24,35) - .1776 *i(25,35) - .0978 *i(26,35) - .1321 *i(27,35) - .0514 *i(24,36) - .1156 *i(25,36) - .0119 *i(26,36) - .0652 *i(27,36) + .0648 *i(24,37) + .0916 *i(25,37) + .1231 *i(26,37) - .0764 *i(27,37);\n            x +=  - .0366 *i(28,34) - .0588 *i(29,34) + .0123 *i(30,34) + .0828 *i(31,34) + .0827 *i(28,35) + .059  *i(29,35) - .0077 *i(30,35) + .1286 *i(31,35) - .0698 *i(28,36) + .0211 *i(29,36) - .0342 *i(30,36) - .0345 *i(31,36) - .1663 *i(28,37) - .0566 *i(29,37) + .0066 *i(30,37) - .009  *i(31,37);\n            x +=  - .495  *i(32,34) + .1265 *i(33,34) + .106  *i(34,34) + .0805 *i(35,34) - .281  *i(32,35) - .0182 *i(33,35) + .0268 *i(34,35) - .0184 *i(35,35) - .1435 *i(32,36) - .1368 *i(33,36) - .2025 *i(34,36) - .3215 *i(35,36) - .0056 *i(32,37) - .0762 *i(33,37) - .0362 *i(34,37) - .096  *i(35,37);\n            x +=  + .1049 *i(36,34) + .0689 *i(37,34) + .0292 *i(38,34) - .0169 *i(39,34) + .0071 *i(36,35) - .0174 *i(37,35) - .0771 *i(38,35) + .002  *i(39,35) - .2054 *i(36,36) - .1264 *i(37,36) - .1497 *i(38,36) - .0823 *i(39,36) - .3496 *i(36,37) - .1373 *i(37,37) - .0078 *i(38,37) - .0806 *i(39,37) - .5544 ;\n        } else if (F.x == 7) {\n            x =  -.1747 *i(0,34) - .1667 *i(1,34) - .2468 *i(2,34) - .3198 *i(3,34) - .1552 *i(0,35) - .0689 *i(1,35) + .0075 *i(2,35) - .1152 *i(3,35) - .0423 *i(0,36) + .0807 *i(1,36) + .0718 *i(2,36) + .0655 *i(3,36) + .0629 *i(0,37) + .1265 *i(1,37) + .1165 *i(2,37) + .0861 *i(3,37);\n            x +=  + .1409 *i(4,34) + .1245 *i(5,34) + .1588 *i(6,34) + .2542 *i(7,34) + .1254 *i(4,35) + .1389 *i(5,35) + .1015 *i(6,35) + .1125 *i(7,35) + .0741 *i(4,36) + .0444 *i(5,36) - .0311 *i(6,36) - .0297 *i(7,36) - .3304 *i(4,37) - .2547 *i(5,37) - .6433 *i(6,37) - .4574 *i(7,37);\n            x +=  - .0279 *i(8,34) + .1195 *i(9,34) - .2609 *i(10,34) - .1104 *i(11,34) - .1303 *i(8,35) - .1412 *i(9,35) - .2852 *i(10,35) - .1316 *i(11,35) - .0421 *i(8,36) - .0107 *i(9,36) - .0981 *i(10,36) - .0478 *i(11,36) + .1106 *i(8,37) + .0661 *i(9,37) + .0437 *i(10,37) - .0602 *i(11,37);\n            x +=  - .5026 *i(12,34) - .7001 *i(13,34) - .4364 *i(14,34) - .3231 *i(15,34) - .2737 *i(12,35) - .144  *i(13,35) - .1387 *i(14,35) - .1306 *i(15,35) - .0767 *i(12,36) - .0554 *i(13,36) + .0224 *i(14,36) - .238  *i(15,36) - .089  *i(12,37) - .0836 *i(13,37) - .1091 *i(14,37) - .2563 *i(15,37);\n            x +=  - .1421 *i(16,34) + .0368 *i(17,34) + .0415 *i(18,34) - .0449 *i(19,34) + .0188 *i(16,35) + .1045 *i(17,35) + .119  *i(18,35) + .0261 *i(19,35) - .0551 *i(16,36) - .0292 *i(17,36) + .0091 *i(18,36) - .2352 *i(19,36) - .2732 *i(16,37) - .5044 *i(17,37) - .5348 *i(18,37) - .8153 *i(19,37);\n            x +=  - .1662 *i(20,34) - .0742 *i(21,34) - .1642 *i(22,34) - .1736 *i(23,34) - .0506 *i(20,35) + .0566 *i(21,35) + .0439 *i(22,35) - .1836 *i(23,35) + .0164 *i(20,36) + .0519 *i(21,36) + .0705 *i(22,36) - .1492 *i(23,36) - .0326 *i(20,37) + .0397 *i(21,37) + .09   *i(22,37) - .2364 *i(23,37);\n            x +=  + .0312 *i(24,34) - .1502 *i(25,34) - .1122 *i(26,34) - .1693 *i(27,34) + .0168 *i(24,35) - .0133 *i(25,35) - .0039 *i(26,35) - .076  *i(27,35) + .0281 *i(24,36) + .0516 *i(25,36) + .1255 *i(26,36) - .1637 *i(27,36) - .1211 *i(24,37) - .2469 *i(25,37) - .3615 *i(26,37) - .3715 *i(27,37);\n            x +=  + .0923 *i(28,34) + .1006 *i(29,34) + .1228 *i(30,34) + .1589 *i(31,34) - .1128 *i(28,35) + .0584 *i(29,35) + .036  *i(30,35) + .0755 *i(31,35) - .2035 *i(28,36) - .0503 *i(29,36) - .0054 *i(30,36) - .0632 *i(31,36) - .1276 *i(28,37) + .0923 *i(29,37) + .073  *i(30,37) - .029  *i(31,37);\n            x +=  + .1208 *i(32,34) + .0768 *i(33,34) + .1128 *i(34,34) + .1161 *i(35,34) + .0273 *i(32,35) - .0407 *i(33,35) + .1003 *i(34,35) + .1012 *i(35,35) - .0688 *i(32,36) - .2387 *i(33,36) - .0645 *i(34,36) - .0267 *i(35,36) + .0694 *i(32,37) - .0041 *i(33,37) - .0758 *i(34,37) - .0272 *i(35,37);\n            x +=  + .0492 *i(36,34) - .1105 *i(37,34) - .0796 *i(38,34) + .0384 *i(39,34) - .075  *i(36,35) - .1408 *i(37,35) - .1705 *i(38,35) - .0562 *i(39,35) - .1597 *i(36,36) - .2203 *i(37,36) - .2548 *i(38,36) - .1029 *i(39,36) + .0142 *i(36,37) - .3596 *i(37,37) - .228  *i(38,37) - .28   *i(39,37) + .1735 ;\n        } else if (F.x == 8) {\n            x =  -.1399 *i(0,34) - .1726 *i(1,34) - .0787 *i(2,34) + .1017 *i(3,34) - .1507 *i(0,35) - .1729 *i(1,35) - .1012 *i(2,35) + .0303 *i(3,35) - .6822 *i(0,36) - .351  *i(1,36) - .3033 *i(2,36) - .2216 *i(3,36) - .1511 *i(0,37) - .289  *i(1,37) - .2947 *i(2,37) - .2856 *i(3,37);\n            x +=  - .1133 *i(4,34) - .1359 *i(5,34) - .0206 *i(6,34) + .1224 *i(7,34) - .2195 *i(4,35) - .1775 *i(5,35) - .2497 *i(6,35) - .3145 *i(7,35) - .2559 *i(4,36) - .2698 *i(5,36) - .0874 *i(6,36) - .0696 *i(7,36) - .1568 *i(4,37) - .0451 *i(5,37) - .0104 *i(6,37) + .0326 *i(7,37);\n            x +=  - .1286 *i(8,34) + .0785 *i(9,34) + .0223 *i(10,34) + .0997 *i(11,34) + .0361 *i(8,35) + .0397 *i(9,35) + .0487 *i(10,35) + .074  *i(11,35) - .0801 *i(8,36) + .0606 *i(9,36) + .0411 *i(10,36) + .0655 *i(11,36) - .0679 *i(8,37) + .0537 *i(9,37) + .1142 *i(10,37) + .0013 *i(11,37);\n            x +=  + .1347 *i(12,34) + .0744 *i(13,34) - .0897 *i(14,34) - .0071 *i(15,34) + .0982 *i(12,35) - .0617 *i(13,35) - .1512 *i(14,35) - .0361 *i(15,35) + .1084 *i(12,36) + .0144 *i(13,36) + .124  *i(14,36) - .0304 *i(15,36) + .0011 *i(12,37) + .0416 *i(13,37) + .0013 *i(14,37) - .0708 *i(15,37);\n            x +=  - .0753 *i(16,34) - .1324 *i(17,34) - .2111 *i(18,34) - .1627 *i(19,34) + .0173 *i(16,35) - .2131 *i(17,35) - .3816 *i(18,35) - .1906 *i(19,35) + .0693 *i(16,36) - .0161 *i(17,36) - .049  *i(18,36) - .0162 *i(19,36) + .0523 *i(16,37) + .0254 *i(17,37) - .0067 *i(18,37) - .0578 *i(19,37);\n            x +=  + .0045 *i(20,34) - .1385 *i(21,34) - .0291 *i(22,34) + .0051 *i(23,34) - .2324 *i(20,35) - .163  *i(21,35) - .113  *i(22,35) - .0484 *i(23,35) - .2253 *i(20,36) - .2808 *i(21,36) - .1414 *i(22,36) - .0681 *i(23,36) + .0251 *i(20,37) - .164  *i(21,37) - .2884 *i(22,37) - .2438 *i(23,37);\n            x +=  + .2043 *i(24,34) + .0654 *i(25,34) - .0188 *i(26,34) - .2422 *i(27,34) + .0163 *i(24,35) + .0839 *i(25,35) - .1957 *i(26,35) - .2123 *i(27,35) - .0898 *i(24,36) + .1707 *i(25,36) - .0665 *i(26,36) - .3445 *i(27,36) - .0766 *i(24,37) + .0453 *i(25,37) + .0015 *i(26,37) - .1405 *i(27,37);\n            x +=  + .0185 *i(28,34) - .128  *i(29,34) - .2958 *i(30,34) - .5016 *i(31,34) + .0609 *i(28,35) - .1517 *i(29,35) - .4362 *i(30,35) - .5865 *i(31,35) + .0713 *i(28,36) - .1153 *i(29,36) - .2632 *i(30,36) - .3816 *i(31,36) + .1108 *i(28,37) - .0738 *i(29,37) - .167  *i(30,37) - .3853 *i(31,37);\n            x +=  + .0176 *i(32,34) + .073  *i(33,34) - .0466 *i(34,34) - .36   *i(35,34) - .0105 *i(32,35) + .0573 *i(33,35) + .0854 *i(34,35) - .1682 *i(35,35) - .0301 *i(32,36) + .0992 *i(33,36) + .0946 *i(34,36) - .1085 *i(35,36) - .047  *i(32,37) + .114  *i(33,37) + .0934 *i(34,37) - .0039 *i(35,37);\n            x +=  - .2216 *i(36,34) - .035  *i(37,34) + .0228 *i(38,34) + .0957 *i(39,34) - .1488 *i(36,35) - .1384 *i(37,35) + .0331 *i(38,35) - .0488 *i(39,35) - .2937 *i(36,36) - .0894 *i(37,36) + .0276 *i(38,36) - .0509 *i(39,36) - .0315 *i(36,37) - .0115 *i(37,37) - .084  *i(38,37) - .2866 *i(39,37) + .7236 ;\n        } else if (F.x == 9) {\n            x =   .0962 *i(0,34) + .0536 *i(1,34) + .0384 *i(2,34) - .1856 *i(3,34) + .097  *i(0,35) + .0238 *i(1,35) - .0509 *i(2,35) - .2978 *i(3,35) - .1304 *i(0,36) - .0778 *i(1,36) - .1997 *i(2,36) - .3673 *i(3,36) - .2673 *i(0,37) - .3597 *i(1,37) - .3271 *i(2,37) - .2098 *i(3,37);\n            x +=  - .0346 *i(4,34) - .0358 *i(5,34) - .1598 *i(6,34) - .3751 *i(7,34) - .0763 *i(4,35) - .1059 *i(5,35) - .2138 *i(6,35) - .1301 *i(7,35) - .084  *i(4,36) - .0664 *i(5,36) + .0061 *i(6,36) + .0126 *i(7,36) - .1099 *i(4,37) - .0233 *i(5,37) + .0321 *i(6,37) + .0286 *i(7,37);\n            x +=  + .0746 *i(8,34) - .0173 *i(9,34) - .1464 *i(10,34) - .0874 *i(11,34) + .148  *i(8,35) + .0687 *i(9,35) + .0481 *i(10,35) + .0334 *i(11,35) + .0731 *i(8,36) + .0787 *i(9,36) + .0906 *i(10,36) + .0686 *i(11,36) - .0532 *i(8,37) - .0174 *i(9,37) + .0578 *i(10,37) + .0243 *i(11,37);\n            x +=  + .1434 *i(12,34) + .169  *i(13,34) - .1114 *i(14,34) - .4716 *i(15,34) + .1316 *i(12,35) + .0857 *i(13,35) - .1167 *i(14,35) - .6005 *i(15,35) + .1286 *i(12,36) + .0872 *i(13,36) - .0167 *i(14,36) - .2024 *i(15,36) - .036  *i(12,37) + .0047 *i(13,37) + .0143 *i(14,37) - .0524 *i(15,37);\n            x +=  + .0004 *i(16,34) - .0634 *i(17,34) - .1379 *i(18,34) - .2052 *i(19,34) + .1464 *i(16,35) - .0256 *i(17,35) - .1722 *i(18,35) - .0431 *i(19,35) + .1207 *i(16,36) + .0191 *i(17,36) - .0564 *i(18,36) + .0265 *i(19,36) + .1332 *i(16,37) + .0724 *i(17,37) + .0078 *i(18,37) - .0232 *i(19,37);\n            x +=  + .0815 *i(20,34) + .0037 *i(21,34) - .0117 *i(22,34) - .4344 *i(23,34) + .1018 *i(20,35) - .0067 *i(21,35) - .0645 *i(22,35) - .1614 *i(23,35) + .0168 *i(20,36) - .0452 *i(21,36) - .1578 *i(22,36) - .0787 *i(23,36) + .1169 *i(20,37) + .001  *i(21,37) - .0888 *i(22,37) - .1229 *i(23,37);\n            x +=  - .0734 *i(24,34) + .07   *i(25,34) - .0181 *i(26,34) - .0876 *i(27,34) - .1059 *i(24,35) - .0324 *i(25,35) - .1073 *i(26,35) - .3223 *i(27,35) - .131  *i(24,36) - .2024 *i(25,36) - .1656 *i(26,36) - .2004 *i(27,36) + .0502 *i(24,37) - .0166 *i(25,37) - .0768 *i(26,37) + .0864 *i(27,37);\n            x +=  - .074  *i(28,34) - .1692 *i(29,34) - .1914 *i(30,34) - .214  *i(31,34) - .1059 *i(28,35) - .0621 *i(29,35) - .0085 *i(30,35) - .065  *i(31,35) + .0112 *i(28,36) + .0237 *i(29,36) - .0309 *i(30,36) - .3268 *i(31,36) + .0715 *i(28,37) + .0417 *i(29,37) - .0477 *i(30,37) - .3539 *i(31,37);\n            x +=  - .2359 *i(32,34) + .0608 *i(33,34) + .0842 *i(34,34) + .0864 *i(35,34) - .1185 *i(32,35) + .0752 *i(33,35) + .0504 *i(34,35) - .0209 *i(35,35) - .1799 *i(32,36) + .0905 *i(33,36) + .0473 *i(34,36) + .0185 *i(35,36) - .5943 *i(32,37) - .0871 *i(33,37) - .0072 *i(34,37) + .0152 *i(35,37);\n            x +=  + .0383 *i(36,34) + .0076 *i(37,34) - .085  *i(38,34) - .0801 *i(39,34) - .0811 *i(36,35) - .0513 *i(37,35) - .0619 *i(38,35) + .0134 *i(39,35) - .5447 *i(36,36) - .036  *i(37,36) - .0476 *i(38,36) - .034  *i(39,36) - .3746 *i(36,37) - .0659 *i(37,37) - .115  *i(38,37) - .2193 *i(39,37) + .0885 ;\n        } else if (F.x == 10) {\n            x =  -.1868 *i(0,34) - .3594 *i(1,34) - .2472 *i(2,34) - .0762 *i(3,34) + .0182 *i(0,35) - .0099 *i(1,35) - .0661 *i(2,35) - .1678 *i(3,35) + .0983 *i(0,36) + .0915 *i(1,36) + .0751 *i(2,36) - .0309 *i(3,36) + .0833 *i(0,37) + .1039 *i(1,37) + .1378 *i(2,37) + .1488 *i(3,37);\n            x +=  + .1241 *i(4,34) + .0774 *i(5,34) + .1269 *i(6,34) + .0071 *i(7,34) + .0533 *i(4,35) + .058  *i(5,35) + .0835 *i(6,35) + .0405 *i(7,35) + .0324 *i(4,36) + .0252 *i(5,36) + .0338 *i(6,36) + .0597 *i(7,36) - .2916 *i(4,37) - .2858 *i(5,37) - .1386 *i(6,37) - .0798 *i(7,37);\n            x +=  - .2159 *i(8,34) + .028  *i(9,34) + .1016 *i(10,34) + .1233 *i(11,34) - .1149 *i(8,35) + .0027 *i(9,35) + .0603 *i(10,35) + .0773 *i(11,35) - .2207 *i(8,36) - .1748 *i(9,36) - .051  *i(10,36) - .003  *i(11,36) - .0106 *i(8,37) - .0251 *i(9,37) - .0882 *i(10,37) - .0717 *i(11,37);\n            x +=  - .3839 *i(12,34) - .1737 *i(13,34) + .1129 *i(14,34) + .1269 *i(15,34) - .2746 *i(12,35) - .1144 *i(13,35) + .0036 *i(14,35) + .0103 *i(15,35) - .1301 *i(12,36) - .1297 *i(13,36) - .0126 *i(14,36) + .0045 *i(15,36) - .1529 *i(12,37) - .1404 *i(13,37) - .0586 *i(14,37) - .0511 *i(15,37);\n            x +=  - .1696 *i(16,34) - .0832 *i(17,34) - .052  *i(18,34) - .0925 *i(19,34) - .1708 *i(16,35) - .0021 *i(17,35) + .0131 *i(18,35) - .0227 *i(19,35) - .4001 *i(16,36) - .096  *i(17,36) - .0628 *i(18,36) - .0089 *i(19,36) - .3645 *i(16,37) - .476  *i(17,37) - .6002 *i(18,37) - .4198 *i(19,37);\n            x +=  - .1578 *i(20,34) - .0384 *i(21,34) + .0476 *i(22,34) + .1301 *i(23,34) - .0925 *i(20,35) - .0141 *i(21,35) + .034  *i(22,35) + .0678 *i(23,35) - .0569 *i(20,36) - .0555 *i(21,36) - .0572 *i(22,36) - .0018 *i(23,36) - .0682 *i(20,37) - .0793 *i(21,37) - .0518 *i(22,37) - .1683 *i(23,37);\n            x +=  - .006  *i(24,34) - .1212 *i(25,34) - .307  *i(26,34) - .2843 *i(27,34) - .0117 *i(24,35) - .1157 *i(25,35) - .0284 *i(26,35) - .0177 *i(27,35) + .0079 *i(24,36) - .0121 *i(25,36) + .0165 *i(26,36) + .0935 *i(27,36) - .2707 *i(24,37) - .1363 *i(25,37) - .0506 *i(26,37) + .0937 *i(27,37);\n            x +=  + .047  *i(28,34) + .0931 *i(29,34) + .1029 *i(30,34) + .1603 *i(31,34) + .0328 *i(28,35) + .066  *i(29,35) + .0382 *i(30,35) + .0193 *i(31,35) - .1642 *i(28,36) - .0204 *i(29,36) - .0337 *i(30,36) - .2441 *i(31,36) - .1072 *i(28,37) - .3592 *i(29,37) - .3612 *i(30,37) - .552  *i(31,37);\n            x +=  + .1558 *i(32,34) + .0321 *i(33,34) - .0055 *i(34,34) - .066  *i(35,34) + .0079 *i(32,35) - .1356 *i(33,35) - .0664 *i(34,35) - .1778 *i(35,35) - .0629 *i(32,36) - .2611 *i(33,36) - .1378 *i(34,36) - .1783 *i(35,36) + .0863 *i(32,37) - .0103 *i(33,37) - .0922 *i(34,37) - .0577 *i(35,37);\n            x +=  + .0315 *i(36,34) + .0842 *i(37,34) + .1174 *i(38,34) + .1621 *i(39,34) + .0995 *i(36,35) + .0955 *i(37,35) + .0812 *i(38,35) + .0945 *i(39,35) - .0855 *i(36,36) + .0161 *i(37,36) + .0388 *i(38,36) + .0191 *i(39,36) - .3972 *i(36,37) - .6863 *i(37,37) - .7047 *i(38,37) - .7502 *i(39,37) + .1032 ;\n        } else if (F.x == 11) {\n            x =   .0477 *i(0,34) - .0854 *i(1,34) - .0432 *i(2,34) + .0397 *i(3,34) - .2075 *i(0,35) - .0741 *i(1,35) - .0442 *i(2,35) + .0203 *i(3,35) - .3733 *i(0,36) - .1958 *i(1,36) - .1848 *i(2,36) - .1602 *i(3,36) - .2048 *i(0,37) - .2264 *i(1,37) - .3201 *i(2,37) - .2375 *i(3,37);\n            x +=  - .0128 *i(4,34) - .0228 *i(5,34) - .0122 *i(6,34) - .183  *i(7,34) - .2458 *i(4,35) - .2017 *i(5,35) - .115  *i(6,35) - .2655 *i(7,35) - .4516 *i(4,36) - .4128 *i(5,36) - .0603 *i(6,36) + .0637 *i(7,36) - .4494 *i(4,37) - .3871 *i(5,37) - .2775 *i(6,37) - .3323 *i(7,37);\n            x +=  - .0048 *i(8,34) + .107  *i(9,34) + .1177 *i(10,34) + .1774 *i(11,34) - .0796 *i(8,35) + .0567 *i(9,35) + .1076 *i(10,35) + .1445 *i(11,35) + .1198 *i(8,36) + .1051 *i(9,36) + .0076 *i(10,36) + .0438 *i(11,36) + .0649 *i(8,37) + .0771 *i(9,37) + .0669 *i(10,37) - .0973 *i(11,37);\n            x +=  + .0875 *i(12,34) + .0539 *i(13,34) + .1457 *i(14,34) + .112  *i(15,34) + .0512 *i(12,35) - .0879 *i(13,35) + .0746 *i(14,35) + .0812 *i(15,35) + .0775 *i(12,36) + .0185 *i(13,36) + .0327 *i(14,36) + .082  *i(15,36) - .0292 *i(12,37) - .0575 *i(13,37) - .1202 *i(14,37) - .1325 *i(15,37);\n            x +=  - .0949 *i(16,34) - .1578 *i(17,34) - .0506 *i(18,34) + .025  *i(19,34) - .0007 *i(16,35) - .2657 *i(17,35) - .2492 *i(18,35) - .0492 *i(19,35) - .4205 *i(16,36) - .3292 *i(17,36) - .2997 *i(18,36) - .391  *i(19,36) - .3736 *i(16,37) - .5533 *i(17,37) - .4997 *i(18,37) - .4512 *i(19,37);\n            x +=  + .0195 *i(20,34) + .0074 *i(21,34) + .0671 *i(22,34) + .1207 *i(23,34) - .1326 *i(20,35) - .0424 *i(21,35) - .0068 *i(22,35) + .0656 *i(23,35) - .1805 *i(20,36) - .0198 *i(21,36) - .1702 *i(22,36) - .2542 *i(23,36) - .3496 *i(20,37) - .2172 *i(21,37) - .4522 *i(22,37) - .6332 *i(23,37);\n            x +=  + .1723 *i(24,34) + .0772 *i(25,34) + .0371 *i(26,34) - .0222 *i(27,34) + .0948 *i(24,35) + .0371 *i(25,35) - .0023 *i(26,35) - .1404 *i(27,35) + .0038 *i(24,36) + .0301 *i(25,36) - .0259 *i(26,36) - .0091 *i(27,36) - .1792 *i(24,37) - .113  *i(25,37) - .0328 *i(26,37) - .1169 *i(27,37);\n            x +=  - .0101 *i(28,34) - .0442 *i(29,34) - .0331 *i(30,34) - .0031 *i(31,34) + .0248 *i(28,35) - .0838 *i(29,35) - .1482 *i(30,35) - .1123 *i(31,35) + .0634 *i(28,36) - .183  *i(29,36) - .5126 *i(30,36) - .3389 *i(31,36) + .1249 *i(28,37) - .1272 *i(29,37) - 1.0097*i(30,37) - .4947 *i(31,37);\n            x +=  + .094  *i(32,34) + .1073 *i(33,34) - .0923 *i(34,34) - .2023 *i(35,34) + .0967 *i(32,35) + .1309 *i(33,35) + .0759 *i(34,35) - .2721 *i(35,35) + .0948 *i(32,36) + .1258 *i(33,36) + .0956 *i(34,36) - .0867 *i(35,36) + .1836 *i(32,37) + .122  *i(33,37) + .1227 *i(34,37) + .0467 *i(35,37);\n            x +=  + .0294 *i(36,34) + .0187 *i(37,34) - .002  *i(38,34) + .0285 *i(39,34) + .0221 *i(36,35) - .0743 *i(37,35) - .0714 *i(38,35) - .0292 *i(39,35) - .1194 *i(36,36) - .1937 *i(37,36) - .1497 *i(38,36) - .3115 *i(39,36) + .0303 *i(36,37) - .1169 *i(37,37) - .16   *i(38,37) - .3165 *i(39,37) + 1.0283;\n        } else if (F.x == 12) {\n            x =  -.373  *i(0,34) - .2998 *i(1,34) - .3054 *i(2,34) - .1623 *i(3,34) - .0538 *i(0,35) - .0103 *i(1,35) - .0695 *i(2,35) + .0313 *i(3,35) + .1133 *i(0,36) + .0537 *i(1,36) + .0359 *i(2,36) + .0212 *i(3,36) + .1699 *i(0,37) + .0398 *i(1,37) + .0826 *i(2,37) + .0687 *i(3,37);\n            x +=  - .0511 *i(4,34) - .2927 *i(5,34) - .6771 *i(6,34) - .2937 *i(7,34) + .002  *i(4,35) - .0621 *i(5,35) - .2695 *i(6,35) - .2553 *i(7,35) + .1098 *i(4,36) - .0412 *i(5,36) - .0706 *i(6,36) - .0724 *i(7,36) + .0621 *i(4,37) - .1109 *i(5,37) - .1118 *i(6,37) - .1729 *i(7,37);\n            x +=  - .489  *i(8,34) - .4397 *i(9,34) - .6256 *i(10,34) - .2085 *i(11,34) - .3682 *i(8,35) - .2242 *i(9,35) - .383  *i(10,35) - .3661 *i(11,35) - .0352 *i(8,36) - .0618 *i(9,36) + .0236 *i(10,36) - .0272 *i(11,36) + .1027 *i(8,37) + .0537 *i(9,37) + .0639 *i(10,37) + .0118 *i(11,37);\n            x +=  - 1.0886*i(12,34) - .5125 *i(13,34) - .1275 *i(14,34) - .013  *i(15,34) - 1.2091*i(12,35) - .6248 *i(13,35) - .6193 *i(14,35) - .2515 *i(15,35) - .2612 *i(12,36) - .1182 *i(13,36) - .023  *i(14,36) + .003  *i(15,36) - .0229 *i(12,37) - .0192 *i(13,37) + .0076 *i(14,37) + .0051 *i(15,37);\n            x +=  + .0153 *i(16,34) + .0459 *i(17,34) + .032  *i(18,34) + .0028 *i(19,34) - .2327 *i(16,35) - .0234 *i(17,35) - .0093 *i(18,35) - .1074 *i(19,35) - .1789 *i(16,36) - .0278 *i(17,36) - .0742 *i(18,36) - .0154 *i(19,36) - .1774 *i(16,37) - .1719 *i(17,37) - .2048 *i(18,37) - .2154 *i(19,37);\n            x +=  - .5221 *i(20,34) - .3625 *i(21,34) - .3142 *i(22,34) - .1014 *i(23,34) - .3891 *i(20,35) - .1346 *i(21,35) - .0977 *i(22,35) - .2725 *i(23,35) - .0006 *i(20,36) + .0305 *i(21,36) - .0117 *i(22,36) - .0558 *i(23,36) + .0581 *i(20,37) + .0453 *i(21,37) + .0566 *i(22,37) + .0902 *i(23,37);\n            x +=  - .0128 *i(24,34) - .3335 *i(25,34) - .1454 *i(26,34) - .1494 *i(27,34) + .0459 *i(24,35) - .1439 *i(25,35) - .0377 *i(26,35) - .1577 *i(27,35) + .0572 *i(24,36) - .0434 *i(25,36) - .0842 *i(26,36) - .124  *i(27,36) + .0579 *i(24,37) - .0321 *i(25,37) - .2182 *i(26,37) - .0919 *i(27,37);\n            x +=  + .0607 *i(28,34) + .0844 *i(29,34) + .1523 *i(30,34) + .365  *i(31,34) + .1098 *i(28,35) + .1225 *i(29,35) + .061  *i(30,35) + .2765 *i(31,35) - .0323 *i(28,36) + .1466 *i(29,36) + .0496 *i(30,36) + .214  *i(31,36) - .1907 *i(28,37) + .1301 *i(29,37) - .0101 *i(30,37) + .0253 *i(31,37);\n            x +=  + .0607 *i(32,34) - .197  *i(33,34) - .1208 *i(34,34) + .0563 *i(35,34) + .0481 *i(32,35) - .0557 *i(33,35) - .0183 *i(34,35) + .1518 *i(35,35) + .0676 *i(32,36) - .0281 *i(33,36) - .0348 *i(34,36) - .0048 *i(35,36) + .024  *i(32,37) - .2107 *i(33,37) - .277  *i(34,37) - .3343 *i(35,37);\n            x +=  - .3194 *i(36,34) - .3736 *i(37,34) - .3171 *i(38,34) - .0236 *i(39,34) + .1398 *i(36,35) - .0308 *i(37,35) - .238  *i(38,35) + .1241 *i(39,35) + .2111 *i(36,36) + .0583 *i(37,36) - .1485 *i(38,36) + .082  *i(39,36) + .1483 *i(36,37) - .0081 *i(37,37) - .1129 *i(38,37) - .0387 *i(39,37) - .1691 ;\n        } else if (F.x == 13) {\n            x =  -.2015 *i(0,34) - .027  *i(1,34) + .0246 *i(2,34) + .0995 *i(3,34) - .2937 *i(0,35) + .028  *i(1,35) + .0499 *i(2,35) + .106  *i(3,35) - .2735 *i(0,36) - .0367 *i(1,36) + .0683 *i(2,36) + .0935 *i(3,36) - .0534 *i(0,37) - .0172 *i(1,37) + .1026 *i(2,37) + .1111 *i(3,37);\n            x +=  + .077  *i(4,34) - .0241 *i(5,34) - .3479 *i(6,34) - .3496 *i(7,34) + .0669 *i(4,35) + .003  *i(5,35) - .5067 *i(6,35) - .8627 *i(7,35) + .1409 *i(4,36) - .0001 *i(5,36) - .3639 *i(6,36) - .3795 *i(7,36) + .0473 *i(4,37) - .1363 *i(5,37) - .2468 *i(6,37) - .1527 *i(7,37);\n            x +=  - .2719 *i(8,34) - .2533 *i(9,34) - .0964 *i(10,34) - .148  *i(11,34) - .0504 *i(8,35) - .0431 *i(9,35) - .0782 *i(10,35) - .2722 *i(11,35) + .1225 *i(8,36) + .1607 *i(9,36) - .0499 *i(10,36) - .1433 *i(11,36) + .0975 *i(8,37) + .0912 *i(9,37) + .0499 *i(10,37) - .018  *i(11,37);\n            x +=  - 1.0408*i(12,34) - .705  *i(13,34) - .2138 *i(14,34) - .3931 *i(15,34) - .2181 *i(12,35) - .1289 *i(13,35) - .2078 *i(14,35) - .5134 *i(15,35) - .0316 *i(12,36) + .1004 *i(13,36) + .0037 *i(14,36) - .4968 *i(15,36) - .0128 *i(12,37) + .0035 *i(13,37) + .0068 *i(14,37) - .0756 *i(15,37);\n            x +=  - .0859 *i(16,34) - .0684 *i(17,34) - .0257 *i(18,34) - .0188 *i(19,34) - .5492 *i(16,35) - .4091 *i(17,35) - .2517 *i(18,35) - .272  *i(19,35) - .1488 *i(16,36) - .1304 *i(17,36) - .2168 *i(18,36) - .2902 *i(19,36) - .0516 *i(16,37) - .0775 *i(17,37) - .3904 *i(18,37) - .3608 *i(19,37);\n            x +=  - .3242 *i(20,34) - .1117 *i(21,34) - .0163 *i(22,34) - .0103 *i(23,34) - .3954 *i(20,35) - .051  *i(21,35) - .0039 *i(22,35) - .1089 *i(23,35) - .1935 *i(20,36) + .0458 *i(21,36) + .0499 *i(22,36) - .112  *i(23,36) - .0482 *i(20,37) + .1097 *i(21,37) + .1256 *i(22,37) + .0293 *i(23,37);\n            x +=  + .0988 *i(24,34) - .1574 *i(25,34) - .0743 *i(26,34) + .072  *i(27,34) + .065  *i(24,35) - .0833 *i(25,35) - .0908 *i(26,35) + .0678 *i(27,35) + .0632 *i(24,36) + .0063 *i(25,36) - .1564 *i(26,36) - .0659 *i(27,36) + .0081 *i(24,37) - .123  *i(25,37) - .4212 *i(26,37) - .3024 *i(27,37);\n            x +=  + .091  *i(28,34) + .1297 *i(29,34) + .0764 *i(30,34) - .092  *i(31,34) + .0809 *i(28,35) + .1205 *i(29,35) + .0692 *i(30,35) - .0438 *i(31,35) - .1081 *i(28,36) + .133  *i(29,36) + .0717 *i(30,36) + .0401 *i(31,36) - .2126 *i(28,37) + .0811 *i(29,37) + .0151 *i(30,37) + .0207 *i(31,37);\n            x +=  + .149  *i(32,34) + .0671 *i(33,34) - .157  *i(34,34) - .1017 *i(35,34) + .0747 *i(32,35) - .0052 *i(33,35) - .0793 *i(34,35) + .0289 *i(35,35) + .0734 *i(32,36) - .0805 *i(33,36) - .1169 *i(34,36) + .0598 *i(35,36) - .0553 *i(32,37) - .2511 *i(33,37) - .1636 *i(34,37) - .0371 *i(35,37);\n            x +=  - .0282 *i(36,34) + .0206 *i(37,34) - .0591 *i(38,34) - .1086 *i(39,34) + .1721 *i(36,35) + .1045 *i(37,35) - .0108 *i(38,35) - .2019 *i(39,35) + .1802 *i(36,36) + .1363 *i(37,36) + .0249 *i(38,36) - .0773 *i(39,36) + .0882 *i(36,37) + .047  *i(37,37) - .0146 *i(38,37) - .0062 *i(39,37) + .1046 ;\n        } else if (F.x == 14) {\n            x =   .0768 *i(0,34) + .0466 *i(1,34) + .0649 *i(2,34) - .0416 *i(3,34) - .138  *i(0,35) + .084  *i(1,35) + .066  *i(2,35) - .1421 *i(3,35) - .1105 *i(0,36) - .1982 *i(1,36) - .1323 *i(2,36) - .0971 *i(3,36) - .1702 *i(0,37) - .1057 *i(1,37) - .2185 *i(2,37) - .1658 *i(3,37);\n            x +=  - .5273 *i(4,34) - .3216 *i(5,34) - .3286 *i(6,34) - .4719 *i(7,34) + .0106 *i(4,35) - .0057 *i(5,35) - .1348 *i(6,35) - .3134 *i(7,35) + .0782 *i(4,36) + .0603 *i(5,36) + .0222 *i(6,36) - .1879 *i(7,36) + .0471 *i(4,37) + .0464 *i(5,37) - .007  *i(6,37) - .1233 *i(7,37);\n            x +=  + .0905 *i(8,34) + .0787 *i(9,34) - .2449 *i(10,34) - .5492 *i(11,34) - .0613 *i(8,35) - .0052 *i(9,35) - .1585 *i(10,35) - .139  *i(11,35) - .4076 *i(8,36) - .2354 *i(9,36) + .0263 *i(10,36) + .0294 *i(11,36) - .3661 *i(8,37) - .2767 *i(9,37) - .003  *i(10,37) + .0332 *i(11,37);\n            x +=  - .1398 *i(12,34) - .0464 *i(13,34) - .0915 *i(14,34) - .5276 *i(15,34) - .3407 *i(12,35) - .0952 *i(13,35) - .0839 *i(14,35) - .5843 *i(15,35) - .0607 *i(12,36) - .1829 *i(13,36) - .3637 *i(14,36) - .4465 *i(15,36) + .0064 *i(12,37) + .0146 *i(13,37) - .0309 *i(14,37) - .1058 *i(15,37);\n            x +=  + .015  *i(16,34) - .0701 *i(17,34) - .0897 *i(18,34) - .0352 *i(19,34) - .3891 *i(16,35) - .0013 *i(17,35) - .0044 *i(18,35) - .0793 *i(19,35) - .1987 *i(16,36) - .0152 *i(17,36) + .0432 *i(18,36) + .0105 *i(19,36) - .0725 *i(16,37) - .094  *i(17,37) + .0184 *i(18,37) + .0228 *i(19,37);\n            x +=  + .0714 *i(20,34) + .0058 *i(21,34) - .0184 *i(22,34) - .2953 *i(23,34) + .0376 *i(20,35) + .0386 *i(21,35) + .0126 *i(22,35) - .2065 *i(23,35) - .2814 *i(20,36) - .2042 *i(21,36) - .1328 *i(22,36) - .0079 *i(23,36) - .1996 *i(20,37) - .0992 *i(21,37) - .0161 *i(22,37) + .0675 *i(23,37);\n            x +=  - .7128 *i(24,34) + .051  *i(25,34) + .0755 *i(26,34) + .0556 *i(27,34) - .1261 *i(24,35) - .007  *i(25,35) + .0692 *i(26,35) + .0864 *i(27,35) + .0937 *i(24,36) + .0696 *i(25,36) + .0317 *i(26,36) - .1456 *i(27,36) + .1789 *i(24,37) + .13   *i(25,37) + .1086 *i(26,37) - .05   *i(27,37);\n            x +=  - .0492 *i(28,34) - .4698 *i(29,34) - .5665 *i(30,34) - .5019 *i(31,34) + .0392 *i(28,35) - .1995 *i(29,35) + .0066 *i(30,35) - .1071 *i(31,35) - .1573 *i(28,36) + .0119 *i(29,36) + .0767 *i(30,36) + .0905 *i(31,36) - .2867 *i(28,37) + .0043 *i(29,37) + .0412 *i(30,37) + .0861 *i(31,37);\n            x +=  - .8068 *i(32,34) - .1518 *i(33,34) - .0284 *i(34,34) + .077  *i(35,34) - .3355 *i(32,35) - .2057 *i(33,35) + .0296 *i(34,35) + .0346 *i(35,35) - .0186 *i(32,36) + .0086 *i(33,36) + .0559 *i(34,36) + .0618 *i(35,36) + .0105 *i(32,37) + .0214 *i(33,37) - .1062 *i(34,37) - .0506 *i(35,37);\n            x +=  + .0558 *i(36,34) - .0238 *i(37,34) - .1363 *i(38,34) - .7216 *i(39,34) + .0916 *i(36,35) + .0958 *i(37,35) - .0274 *i(38,35) - .1148 *i(39,35) + .0686 *i(36,36) + .0348 *i(37,36) + .0919 *i(38,36) + .1129 *i(39,36) - .286  *i(36,37) + .071  *i(37,37) + .1167 *i(38,37) + .1423 *i(39,37) - .2139 ;\n        } else if (F.x == 15) {\n            x =  -.1363 *i(0,34) - .221  *i(1,34) - .4392 *i(2,34) - .8526 *i(3,34) - .0772 *i(0,35) - .0862 *i(1,35) + .0123 *i(2,35) + .0002 *i(3,35) - .134  *i(0,36) + .0184 *i(1,36) + .0425 *i(2,36) + .088  *i(3,36) - .1138 *i(0,37) + .0196 *i(1,37) + .0851 *i(2,37) + .0708 *i(3,37);\n            x +=  + .085  *i(4,34) + .1396 *i(5,34) + .0671 *i(6,34) - .0266 *i(7,34) + .0324 *i(4,35) + .093  *i(5,35) + .1039 *i(6,35) - .0403 *i(7,35) - .0476 *i(4,36) + .0832 *i(5,36) + .0941 *i(6,36) - .0416 *i(7,36) + .0887 *i(4,37) + .0728 *i(5,37) + .0462 *i(6,37) + .0234 *i(7,37);\n            x +=  - .1916 *i(8,34) + .1747 *i(9,34) + .0364 *i(10,34) - .0697 *i(11,34) - .0375 *i(8,35) + .0791 *i(9,35) + .0328 *i(10,35) - .1843 *i(11,35) - .054  *i(8,36) + .0259 *i(9,36) - .1917 *i(10,36) - .1511 *i(11,36) - .2136 *i(8,37) - .1825 *i(9,37) - .0639 *i(10,37) - .0634 *i(11,37);\n            x +=  - .2225 *i(12,34) - .0458 *i(13,34) - .5216 *i(14,34) - .362  *i(15,34) - .1962 *i(12,35) - .1106 *i(13,35) - .2863 *i(14,35) - .7371 *i(15,35) - .0601 *i(12,36) - .1717 *i(13,36) - .1953 *i(14,36) - .7179 *i(15,36) - .0743 *i(12,37) - .0471 *i(13,37) - .1232 *i(14,37) - .2381 *i(15,37);\n            x +=  - .2794 *i(16,34) - .0869 *i(17,34) + .1101 *i(18,34) + .1191 *i(19,34) - .0296 *i(16,35) - .1566 *i(17,35) + .047  *i(18,35) + .0783 *i(19,35) - .0163 *i(16,36) - .0911 *i(17,36) - .013  *i(18,36) - .0737 *i(19,36) + .0769 *i(16,37) + .0241 *i(17,37) + .126  *i(18,37) + .1022 *i(19,37);\n            x +=  - .2436 *i(20,34) - .1836 *i(21,34) - .2264 *i(22,34) - .3439 *i(23,34) - .1684 *i(20,35) - .0112 *i(21,35) + .0186 *i(22,35) - .3455 *i(23,35) - .0577 *i(20,36) - .0167 *i(21,36) - .0171 *i(22,36) - .115  *i(23,36) - .0658 *i(20,37) - .0494 *i(21,37) + .0247 *i(22,37) + .1535 *i(23,37);\n            x +=  - .177  *i(24,34) - .3636 *i(25,34) - .1807 *i(26,34) - .0315 *i(27,34) - .0699 *i(24,35) - .043  *i(25,35) + .0898 *i(26,35) + .1706 *i(27,35) - .0538 *i(24,36) + .0011 *i(25,36) + .147  *i(26,36) + .17   *i(27,36) - .067  *i(24,37) - .0159 *i(25,37) - .0046 *i(26,37) + .035  *i(27,37);\n            x +=  - .0413 *i(28,34) - .1277 *i(29,34) - .3359 *i(30,34) - .795  *i(31,34) + .0902 *i(28,35) - .0565 *i(29,35) - .1917 *i(30,35) - .8109 *i(31,35) + .111  *i(28,36) - .0076 *i(29,36) - .0445 *i(30,36) - .0684 *i(31,36) + .053  *i(28,37) - .0442 *i(29,37) + .024  *i(30,37) + .0838 *i(31,37);\n            x +=  + .1196 *i(32,34) + .0094 *i(33,34) - .3821 *i(34,34) - .6425 *i(35,34) + .042  *i(32,35) + .0666 *i(33,35) - .2007 *i(34,35) - .0783 *i(35,35) - .0248 *i(32,36) + .0088 *i(33,36) - .0309 *i(34,36) + .0524 *i(35,36) - .0563 *i(32,37) - .0359 *i(33,37) + .0968 *i(34,37) + .0666 *i(35,37);\n            x +=  - .3115 *i(36,34) - .2044 *i(37,34) - .1706 *i(38,34) - .1232 *i(39,34) - .162  *i(36,35) - .0674 *i(37,35) - .1652 *i(38,35) - .4797 *i(39,35) - .0771 *i(36,36) + .0236 *i(37,36) + .0605 *i(38,36) - .0736 *i(39,36) - .014  *i(36,37) + .184  *i(37,37) + .1576 *i(38,37) + .1561 *i(39,37) + .6938 ;\n        } else if (F.x == 16) {\n            x =   .0511 *i(0,34) + .0494 *i(1,34) + .0876 *i(2,34) + .133  *i(3,34) + .1622 *i(0,35) + .0661 *i(1,35) + .0518 *i(2,35) + .1495 *i(3,35) + .0231 *i(0,36) - .0087 *i(1,36) + .0207 *i(2,36) + .116  *i(3,36) - .2117 *i(0,37) - .2157 *i(1,37) - .2151 *i(2,37) - .1721 *i(3,37);\n            x +=  - .1183 *i(4,34) - .0333 *i(5,34) + .0178 *i(6,34) + .1015 *i(7,34) - .0632 *i(4,35) - .0634 *i(5,35) + .003  *i(6,35) - .0992 *i(7,35) + .063  *i(4,36) - .0821 *i(5,36) - .0251 *i(6,36) - .3109 *i(7,36) + .0327 *i(4,37) - .0082 *i(5,37) - .0155 *i(6,37) - .121  *i(7,37);\n            x +=  + .0087 *i(8,34) - .0776 *i(9,34) - .3863 *i(10,34) - .052  *i(11,34) - .1011 *i(8,35) - .1202 *i(9,35) - .1664 *i(10,35) - .2592 *i(11,35) - .4294 *i(8,36) - .22   *i(9,36) - .1171 *i(10,36) - .0744 *i(11,36) - .4609 *i(8,37) - .3093 *i(9,37) - .0532 *i(10,37) - .0983 *i(11,37);\n            x +=  - .0282 *i(12,34) - .0894 *i(13,34) - .2726 *i(14,34) - .1689 *i(15,34) - .3724 *i(12,35) - .0506 *i(13,35) - .0876 *i(14,35) - .3928 *i(15,35) - .314  *i(12,36) + .0333 *i(13,36) - .003  *i(14,36) - .2574 *i(15,36) - .1288 *i(12,37) - .1364 *i(13,37) - .0996 *i(14,37) - .2348 *i(15,37);\n            x +=  + .1455 *i(16,34) + .0928 *i(17,34) - .0506 *i(18,34) - .0758 *i(19,34) - .1325 *i(16,35) + .0271 *i(17,35) - .1077 *i(18,35) - .2073 *i(19,35) - .248  *i(16,36) + .0377 *i(17,36) + .0245 *i(18,36) - .011  *i(19,36) - .1854 *i(16,37) - .0171 *i(17,37) + .0601 *i(18,37) + .051  *i(19,37);\n            x +=  + .0898 *i(20,34) + .0206 *i(21,34) - .0732 *i(22,34) + .0435 *i(23,34) + .098  *i(20,35) + .037  *i(21,35) + .0587 *i(22,35) + .0039 *i(23,35) - .0759 *i(20,36) + .0188 *i(21,36) + .0654 *i(22,36) + .0377 *i(23,36) - .5634 *i(20,37) - .1719 *i(21,37) - .0016 *i(22,37) + .0687 *i(23,37);\n            x +=  - .5039 *i(24,34) + .0787 *i(25,34) + .0485 *i(26,34) - .0814 *i(27,34) - .3095 *i(24,35) - .0638 *i(25,35) - .1629 *i(26,35) - .0136 *i(27,35) - .0407 *i(24,36) - .0574 *i(25,36) - .1463 *i(26,36) - .0391 *i(27,36) + .1339 *i(24,37) + .0961 *i(25,37) + .0825 *i(26,37) - .0636 *i(27,37);\n            x +=  - .0728 *i(28,34) - .0156 *i(29,34) + .0134 *i(30,34) + .1512 *i(31,34) + .0595 *i(28,35) + .0713 *i(29,35) + .0148 *i(30,35) - .0035 *i(31,35) - .0913 *i(28,36) + .0578 *i(29,36) - .0083 *i(30,36) + .0433 *i(31,36) - .3403 *i(28,37) - .0004 *i(29,37) + .0275 *i(30,37) + .0727 *i(31,37);\n            x +=  - .1379 *i(32,34) + .0678 *i(33,34) + .0104 *i(34,34) - .1127 *i(35,34) - .3352 *i(32,35) - .1164 *i(33,35) - .1139 *i(34,35) - .0187 *i(35,35) - .1016 *i(32,36) - .2245 *i(33,36) - .0588 *i(34,36) + .0217 *i(35,36) + .1356 *i(32,37) + .0283 *i(33,37) - .0423 *i(34,37) + .002  *i(35,37);\n            x +=  + .0828 *i(36,34) - .0741 *i(37,34) + .0806 *i(38,34) + .1334 *i(39,34) + .0698 *i(36,35) - .0577 *i(37,35) - .0372 *i(38,35) + .0309 *i(39,35) - .0642 *i(36,36) - .0195 *i(37,36) - .0452 *i(38,36) + .0011 *i(39,36) - .2698 *i(36,37) - .0016 *i(37,37) + .069  *i(38,37) + .1053 *i(39,37) - .3733 ;\n        } else if (F.x == 17) {\n            x =  -.2503 *i(0,34) - .4196 *i(1,34) - .2551 *i(2,34) - .0772 *i(3,34) - .0248 *i(0,35) - .0966 *i(1,35) - .1128 *i(2,35) - .0441 *i(3,35) - .0051 *i(0,36) + .0215 *i(1,36) + .0287 *i(2,36) + .074  *i(3,36) - .012  *i(0,37) + .0057 *i(1,37) - .0071 *i(2,37) - .0101 *i(3,37);\n            x +=  + .0828 *i(4,34) + .0687 *i(5,34) + .0539 *i(6,34) + .1156 *i(7,34) + .0696 *i(4,35) + .0652 *i(5,35) + .0748 *i(6,35) + .0656 *i(7,35) + .0044 *i(4,36) + .0077 *i(5,36) + .0095 *i(6,36) + .0578 *i(7,36) + .0896 *i(4,37) + .0564 *i(5,37) + .0353 *i(6,37) - .0027 *i(7,37);\n            x +=  - .3075 *i(8,34) - .0221 *i(9,34) + .0827 *i(10,34) + .116  *i(11,34) - .3431 *i(8,35) - .2126 *i(9,35) - .0622 *i(10,35) + .0494 *i(11,35) - .268  *i(8,36) - .3885 *i(9,36) - .2649 *i(10,36) - .1477 *i(11,36) - .3244 *i(8,37) - .1614 *i(9,37) + .0223 *i(10,37) - .0693 *i(11,37);\n            x +=  - .7503 *i(12,34) - .2254 *i(13,34) - .0061 *i(14,34) + .0487 *i(15,34) - .5508 *i(12,35) - .2942 *i(13,35) - .0204 *i(14,35) + .0563 *i(15,35) - .126  *i(12,36) - .103  *i(13,36) - .165  *i(14,36) - .0529 *i(15,36) - .0633 *i(12,37) - .015  *i(13,37) + .0262 *i(14,37) - .1305 *i(15,37);\n            x +=  - .138  *i(16,34) - .0342 *i(17,34) + .0008 *i(18,34) - .0353 *i(19,34) - .2978 *i(16,35) - .1227 *i(17,35) + .0034 *i(18,35) - .0459 *i(19,35) - .1348 *i(16,36) - .0251 *i(17,36) - .012  *i(18,36) - .1211 *i(19,36) + .0405 *i(16,37) + .0546 *i(17,37) + .1041 *i(18,37) + .0962 *i(19,37);\n            x +=  - .2949 *i(20,34) - .0507 *i(21,34) + .0307 *i(22,34) + .1138 *i(23,34) - .1153 *i(20,35) - .03   *i(21,35) + .0256 *i(22,35) + .042  *i(23,35) - .0662 *i(20,36) - .0105 *i(21,36) - .0178 *i(22,36) - .0899 *i(23,36) - .106  *i(20,37) - .1303 *i(21,37) - .0453 *i(22,37) - .0086 *i(23,37);\n            x +=  + .0283 *i(24,34) - .1684 *i(25,34) - .2203 *i(26,34) - .104  *i(27,34) + .0394 *i(24,35) - .0706 *i(25,35) - .1082 *i(26,35) + .0144 *i(27,35) + .0645 *i(24,36) + .0321 *i(25,36) + .0255 *i(26,36) + .0971 *i(27,36) + .0352 *i(24,37) - .0138 *i(25,37) + .032  *i(26,37) - .0598 *i(27,37);\n            x +=  + .0648 *i(28,34) + .0915 *i(29,34) + .0948 *i(30,34) + .0996 *i(31,34) + .0281 *i(28,35) + .0723 *i(29,35) + .0695 *i(30,35) + .0313 *i(31,35) - .1332 *i(28,36) - .0047 *i(29,36) - .0507 *i(30,36) - .1236 *i(31,36) - .2309 *i(28,37) + .0016 *i(29,37) - .0274 *i(30,37) + .0336 *i(31,37);\n            x +=  + .1197 *i(32,34) + .0108 *i(33,34) - .1135 *i(34,34) - .2066 *i(35,34) + .0437 *i(32,35) - .0674 *i(33,35) - .1053 *i(34,35) - .2041 *i(35,35) - .0544 *i(32,36) - .0828 *i(33,36) - .0107 *i(34,36) + .0341 *i(35,36) - .2148 *i(32,37) - .1272 *i(33,37) + .064  *i(34,37) + .059  *i(35,37);\n            x +=  - .029  *i(36,34) + .0587 *i(37,34) + .0998 *i(38,34) + .1628 *i(39,34) + .0723 *i(36,35) + .086  *i(37,35) + .0501 *i(38,35) + .1422 *i(39,35) - .0702 *i(36,36) - .0314 *i(37,36) - .0033 *i(38,36) - .0367 *i(39,36) - .1146 *i(36,37) - .0159 *i(37,37) + .0783 *i(38,37) + .0907 *i(39,37) - .896  ;\n        } else if (F.x == 18) {\n            x =   .0593 *i(0,34) + .0289 *i(1,34) + .0097 *i(2,34) - .022  *i(3,34) + .1712 *i(0,35) + .0046 *i(1,35) - .1148 *i(2,35) - .1321 *i(3,35) + .0851 *i(0,36) - .2103 *i(1,36) - .1085 *i(2,36) - .2047 *i(3,36) - .6587 *i(0,37) - .3877 *i(1,37) - .3085 *i(2,37) - .2712 *i(3,37);\n            x +=  + .0159 *i(4,34) - .0406 *i(5,34) - .1391 *i(6,34) - .2937 *i(7,34) - .108  *i(4,35) - .0253 *i(5,35) - .0475 *i(6,35) - .2028 *i(7,35) - .1256 *i(4,36) + .0051 *i(5,36) + .0484 *i(6,36) + .0577 *i(7,36) - .049  *i(4,37) + .0998 *i(5,37) + .0987 *i(6,37) + .0983 *i(7,37);\n            x +=  + .0665 *i(8,34) - .0607 *i(9,34) - .1085 *i(10,34) - .0133 *i(11,34) + .1189 *i(8,35) + .0156 *i(9,35) + .1328 *i(10,35) + .0904 *i(11,35) + .0802 *i(8,36) - .005  *i(9,36) + .0528 *i(10,36) + .0495 *i(11,36) - .3502 *i(8,37) - .3326 *i(9,37) - .1838 *i(10,37) - .0777 *i(11,37);\n            x +=  + .1116 *i(12,34) + .0536 *i(13,34) - .0997 *i(14,34) - .5211 *i(15,34) + .1511 *i(12,35) + .0746 *i(13,35) - .0476 *i(14,35) - .1075 *i(15,35) + .1499 *i(12,36) + .0306 *i(13,36) - .0177 *i(14,36) + .0319 *i(15,36) - .0514 *i(12,37) - .041  *i(13,37) - .0622 *i(14,37) - .0732 *i(15,37);\n            x +=  - .0329 *i(16,34) - .0457 *i(17,34) - .0208 *i(18,34) - .0674 *i(19,34) + .1584 *i(16,35) + .0662 *i(17,35) + .0238 *i(18,35) + .0515 *i(19,35) - .0335 *i(16,36) - .0963 *i(17,36) - .0299 *i(18,36) + .0325 *i(19,36) - .6634 *i(16,37) - .2701 *i(17,37) - .0074 *i(18,37) + .0052 *i(19,37);\n            x +=  + .0795 *i(20,34) + .0159 *i(21,34) - .0462 *i(22,34) - .2247 *i(23,34) + .1019 *i(20,35) + .0406 *i(21,35) + .0208 *i(22,35) + .0582 *i(23,35) + .084  *i(20,36) + .0424 *i(21,36) + .0115 *i(22,36) + .0746 *i(23,36) - .2654 *i(20,37) - .2706 *i(21,37) - .1761 *i(22,37) - .0889 *i(23,37);\n            x +=  + .1371 *i(24,34) + .1301 *i(25,34) + .0682 *i(26,34) + .0405 *i(27,34) - .1016 *i(24,35) - .0661 *i(25,35) - .0877 *i(26,35) - .1045 *i(27,35) - .3211 *i(24,36) - .2062 *i(25,36) - .0648 *i(26,36) - .2151 *i(27,36) - .1589 *i(24,37) + .0052 *i(25,37) + .0875 *i(26,37) + .0487 *i(27,37);\n            x +=  - .1396 *i(28,34) - .2497 *i(29,34) - .3878 *i(30,34) - .4134 *i(31,34) - .1987 *i(28,35) - .2027 *i(29,35) - .1174 *i(30,35) + .0054 *i(31,35) + .1136 *i(28,36) - .116  *i(29,36) - .1376 *i(30,36) - .0694 *i(31,36) + .1649 *i(28,37) - .1338 *i(29,37) - .1071 *i(30,37) + .0138 *i(31,37);\n            x +=  - .0604 *i(32,34) + .0627 *i(33,34) + .089  *i(34,34) + .0892 *i(35,34) - .1351 *i(32,35) + .0726 *i(33,35) + .0718 *i(34,35) + .0016 *i(35,35) - .5848 *i(32,36) - .276  *i(33,36) - .071  *i(34,36) - .1271 *i(35,36) - .7285 *i(32,37) - .3546 *i(33,37) - .1006 *i(34,37) - .0969 *i(35,37);\n            x +=  + .0099 *i(36,34) - .0383 *i(37,34) - .0021 *i(38,34) - .0786 *i(39,34) - .0231 *i(36,35) + .0702 *i(37,35) + .0937 *i(38,35) + .1107 *i(39,35) + .1121 *i(36,36) + .148  *i(37,36) + .1131 *i(38,36) + .0594 *i(39,36) + .0035 *i(36,37) + .0442 *i(37,37) + .0342 *i(38,37) + .0465 *i(39,37) - .8138 ;\n        } else if (F.x == 19) {\n            x =  -.9082 *i(0,34) - .5555 *i(1,34) - .5225 *i(2,34) - .5396 *i(3,34) - .8155 *i(0,35) - .5933 *i(1,35) - .5637 *i(2,35) - .3568 *i(3,35) - .1579 *i(0,36) - .4374 *i(1,36) - .5427 *i(2,36) - .3001 *i(3,36) + .0161 *i(0,37) - .2789 *i(1,37) - .278  *i(2,37) - .0665 *i(3,37);\n            x +=  - .6598 *i(4,34) - .3898 *i(5,34) - .2804 *i(6,34) - .4504 *i(7,34) - .1245 *i(4,35) - .083  *i(5,35) + .0165 *i(6,35) + .0675 *i(7,35) - .0885 *i(4,36) - .0303 *i(5,36) + .04   *i(6,36) + .0455 *i(7,36) + .1054 *i(4,37) + .0864 *i(5,37) + .0735 *i(6,37) + .0992 *i(7,37);\n            x +=  - .3152 *i(8,34) + .147  *i(9,34) + .0008 *i(10,34) - .0172 *i(11,34) + .1144 *i(8,35) + .0328 *i(9,35) + .0294 *i(10,35) + .0445 *i(11,35) + .1682 *i(8,36) - .0056 *i(9,36) - .0226 *i(10,36) + .0616 *i(11,36) + .0749 *i(8,37) - .013  *i(9,37) - .008  *i(10,37) + .0434 *i(11,37);\n            x +=  - .1537 *i(12,34) - .1014 *i(13,34) - .3532 *i(14,34) - .4729 *i(15,34) - .1692 *i(12,35) - .1234 *i(13,35) - .3155 *i(14,35) - .3707 *i(15,35) - .031  *i(12,36) - .0004 *i(13,36) - .0344 *i(14,36) + .1109 *i(15,36) + .0129 *i(12,37) - .0384 *i(13,37) - .0489 *i(14,37) - .0063 *i(15,37);\n            x +=  + .071  *i(16,34) - .0282 *i(17,34) - .037  *i(18,34) - .0272 *i(19,34) + .2181 *i(16,35) + .0566 *i(17,35) + .0047 *i(18,35) + .1119 *i(19,35) + .1837 *i(16,36) + .1119 *i(17,36) + .0686 *i(18,36) + .0785 *i(19,36) + .2194 *i(16,37) + .1365 *i(17,37) + .0642 *i(18,37) + .0034 *i(19,37);\n            x +=  - .8161 *i(20,34) - .3415 *i(21,34) - .2753 *i(22,34) - .2538 *i(23,34) - .2041 *i(20,35) - .1646 *i(21,35) - .2459 *i(22,35) - .2266 *i(23,35) + .0914 *i(20,36) - .1645 *i(21,36) - .2427 *i(22,36) - .1047 *i(23,36) + .2093 *i(20,37) + .0127 *i(21,37) - .0141 *i(22,37) + .0425 *i(23,37);\n            x +=  - .1108 *i(24,34) - .2114 *i(25,34) - .3947 *i(26,34) - .5901 *i(27,34) - .0016 *i(24,35) + .0112 *i(25,35) - .0702 *i(26,35) - .4957 *i(27,35) - .0001 *i(24,36) - .0352 *i(25,36) - .006  *i(26,36) - .1956 *i(27,36) + .1377 *i(24,37) - .0151 *i(25,37) - .068  *i(26,37) - .0216 *i(27,37);\n            x +=  + .0203 *i(28,34) - .0451 *i(29,34) - .1205 *i(30,34) - .1276 *i(31,34) + .0351 *i(28,35) - .0216 *i(29,35) - .1393 *i(30,35) - .2572 *i(31,35) + .0361 *i(28,36) + .0416 *i(29,36) - .0626 *i(30,36) - .1547 *i(31,36) - .007  *i(28,37) + .0993 *i(29,37) - .0446 *i(30,37) - .2213 *i(31,37);\n            x +=  + .08   *i(32,34) + .0056 *i(33,34) - .0085 *i(34,34) - .2219 *i(35,34) + .0988 *i(32,35) + .0539 *i(33,35) - .032  *i(34,35) - .2402 *i(35,35) + .1657 *i(32,36) + .1516 *i(33,36) + .0835 *i(34,36) - .0788 *i(35,36) + .1031 *i(32,37) + .1101 *i(33,37) + .0469 *i(34,37) - .1208 *i(35,37);\n            x +=  - .3274 *i(36,34) - .1594 *i(37,34) - .0847 *i(38,34) + .0854 *i(39,34) - .3726 *i(36,35) - .1313 *i(37,35) - .1223 *i(38,35) - .0968 *i(39,35) - .2831 *i(36,36) - .0568 *i(37,36) - .1093 *i(38,36) - .231  *i(39,36) - .1259 *i(36,37) - .0573 *i(37,37) - .1416 *i(38,37) - .1693 *i(39,37) + .3399 ;\n        } else if (F.x == 20) {\n            x =   .1154 *i(0,34) + .0601 *i(1,34) + .0143 *i(2,34) + .0412 *i(3,34) + .0967 *i(0,35) + .0877 *i(1,35) + .0238 *i(2,35) + .0271 *i(3,35) + .0877 *i(0,36) + .1028 *i(1,36) + .0477 *i(2,36) - .0216 *i(3,36) + .1593 *i(0,37) + .1064 *i(1,37) + .149  *i(2,37) + .1139 *i(3,37);\n            x +=  - .418  *i(4,34) - .326  *i(5,34) - .3121 *i(6,34) - .1042 *i(7,34) - .3194 *i(4,35) - .2629 *i(5,35) - .2424 *i(6,35) - .2242 *i(7,35) - .1254 *i(4,36) - .2534 *i(5,36) - .4809 *i(6,36) - .3164 *i(7,36) - .1363 *i(4,37) - .1943 *i(5,37) - .4136 *i(6,37) - .1373 *i(7,37);\n            x +=  + .1001 *i(8,34) + .023  *i(9,34) - .2106 *i(10,34) + .0331 *i(11,34) - .0201 *i(8,35) + .0198 *i(9,35) - .2751 *i(10,35) - .0868 *i(11,35) + .0421 *i(8,36) + .0198 *i(9,36) + .1025 *i(10,36) + .0141 *i(11,36) + .1112 *i(8,37) + .0782 *i(9,37) + .0631 *i(10,37) + .0574 *i(11,37);\n            x +=  - .2547 *i(12,34) - .1014 *i(13,34) - .1269 *i(14,34) - .2479 *i(15,34) - .6039 *i(12,35) - .1911 *i(13,35) - .1199 *i(14,35) - .2279 *i(15,35) - .3098 *i(12,36) - .3469 *i(13,36) - .1405 *i(14,36) - .2445 *i(15,36) - .0233 *i(12,37) - .0845 *i(13,37) + .0263 *i(14,37) - .0228 *i(15,37);\n            x +=  + .0723 *i(16,34) - .0076 *i(17,34) - .057  *i(18,34) - .0439 *i(19,34) - .0951 *i(16,35) - .3604 *i(17,35) - .1883 *i(18,35) - .2628 *i(19,35) + .0627 *i(16,36) - .2918 *i(17,36) - .1574 *i(18,36) - .2197 *i(19,36) + .124  *i(16,37) - .1868 *i(17,37) - .3965 *i(18,37) - .3477 *i(19,37);\n            x +=  + .1022 *i(20,34) + .0136 *i(21,34) - .0069 *i(22,34) + .0712 *i(23,34) + .0341 *i(20,35) - .0003 *i(21,35) - .0625 *i(22,35) + .0218 *i(23,35) - .1402 *i(20,36) - .1996 *i(21,36) - .3717 *i(22,36) - .1571 *i(23,36) + .087  *i(20,37) + .0919 *i(21,37) + .0474 *i(22,37) - .0327 *i(23,37);\n            x +=  - .1372 *i(24,34) + .1303 *i(25,34) + .0909 *i(26,34) + .0636 *i(27,34) - .1508 *i(24,35) + .1045 *i(25,35) + .0925 *i(26,35) + .0617 *i(27,35) + .0304 *i(24,36) - .0678 *i(25,36) + .0493 *i(26,36) + .0581 *i(27,36) + .0692 *i(24,37) - .1187 *i(25,37) - .4065 *i(26,37) - .1775 *i(27,37);\n            x +=  - .0787 *i(28,34) + .0474 *i(29,34) + .1028 *i(30,34) + .1086 *i(31,34) - .1685 *i(28,35) - .0296 *i(29,35) + .0592 *i(30,35) + .0503 *i(31,35) - .1387 *i(28,36) - .0136 *i(29,36) + .0795 *i(30,36) - .1467 *i(31,36) - .2028 *i(28,37) + .0104 *i(29,37) + .0469 *i(30,37) - .0279 *i(31,37);\n            x +=  - .7179 *i(32,34) - .1949 *i(33,34) + .0039 *i(34,34) + .0411 *i(35,34) - .1796 *i(32,35) - .2817 *i(33,35) + .0701 *i(34,35) + .0491 *i(35,35) + .1151 *i(32,36) - .1197 *i(33,36) + .0674 *i(34,36) + .0903 *i(35,36) + .1771 *i(32,37) + .0154 *i(33,37) - .1627 *i(34,37) + .0031 *i(35,37);\n            x +=  + .0819 *i(36,34) - .0269 *i(37,34) + .0655 *i(38,34) + .0813 *i(39,34) + .0806 *i(36,35) + .0033 *i(37,35) + .0585 *i(38,35) + .0519 *i(39,35) + .0838 *i(36,36) - .139  *i(37,36) - .1296 *i(38,36) - .0854 *i(39,36) - .0636 *i(36,37) - .2552 *i(37,37) - .2739 *i(38,37) - .1159 *i(39,37) + .6637 ;\n        } else if (F.x == 21) {\n            x =   .1185 *i(0,34) + .0726 *i(1,34) + .0907 *i(2,34) + .1243 *i(3,34) + .1704 *i(0,35) + .1013 *i(1,35) + .0433 *i(2,35) + .0957 *i(3,35) + .0881 *i(0,36) + .1503 *i(1,36) + .0704 *i(2,36) - .0185 *i(3,36) + .1649 *i(0,37) + .2079 *i(1,37) + .1471 *i(2,37) + .0209 *i(3,37);\n            x +=  - .1507 *i(4,34) - .459  *i(5,34) - .5374 *i(6,34) - .5736 *i(7,34) - .2841 *i(4,35) - .3892 *i(5,35) - .4837 *i(6,35) - .2576 *i(7,35) - .4255 *i(4,36) - .3821 *i(5,36) - .1684 *i(6,36) - .0493 *i(7,36) - .3125 *i(4,37) - .3248 *i(5,37) - .0908 *i(6,37) + .0534 *i(7,37);\n            x +=  + .0388 *i(8,34) + .1378 *i(9,34) - .1091 *i(10,34) - .2992 *i(11,34) + .1305 *i(8,35) + .1654 *i(9,35) - .2824 *i(10,35) - .3675 *i(11,35) + .0989 *i(8,36) + .0683 *i(9,36) - .0418 *i(10,36) - .236  *i(11,36) + .1364 *i(8,37) + .0367 *i(9,37) - .1618 *i(10,37) - .0673 *i(11,37);\n            x +=  - .1524 *i(12,34) + .0681 *i(13,34) - .3394 *i(14,34) - .5398 *i(15,34) - .5398 *i(12,35) - .5922 *i(13,35) - .4288 *i(14,35) - .847  *i(15,35) - .2976 *i(12,36) - .3654 *i(13,36) - .1099 *i(14,36) - .1337 *i(15,36) - .0902 *i(12,37) - .1641 *i(13,37) + .0138 *i(14,37) - .0735 *i(15,37);\n            x +=  - .1339 *i(16,34) - .4069 *i(17,34) - .2795 *i(18,34) - .0069 *i(19,34) - .1149 *i(16,35) - .6296 *i(17,35) - .6217 *i(18,35) + .0335 *i(19,35) + .0144 *i(16,36) - .2091 *i(17,36) - .4676 *i(18,36) - .1363 *i(19,36) + .0832 *i(16,37) - .1666 *i(17,37) - .5197 *i(18,37) - .3808 *i(19,37);\n            x +=  + .0215 *i(20,34) - .0231 *i(21,34) + .0044 *i(22,34) - .3023 *i(23,34) + .0788 *i(20,35) + .042  *i(21,35) + .0507 *i(22,35) - .2686 *i(23,35) + .0994 *i(20,36) + .0499 *i(21,36) + .054  *i(22,36) - .1102 *i(23,36) + .1743 *i(20,37) + .1144 *i(21,37) - .0369 *i(22,37) - .2496 *i(23,37);\n            x +=  - .1304 *i(24,34) - .0147 *i(25,34) - .0873 *i(26,34) - .3194 *i(27,34) - .0874 *i(24,35) + .0849 *i(25,35) + .0605 *i(26,35) - .0135 *i(27,35) - .0411 *i(24,36) - .0061 *i(25,36) + .0922 *i(26,36) + .1315 *i(27,36) - .059  *i(24,37) - .2469 *i(25,37) + .0918 *i(26,37) + .1498 *i(27,37);\n            x +=  + .0184 *i(28,34) - .088  *i(29,34) - .2188 *i(30,34) - .2695 *i(31,34) + .0363 *i(28,35) - .0965 *i(29,35) - .1315 *i(30,35) - .082  *i(31,35) - .0249 *i(28,36) - .0992 *i(29,36) - .0636 *i(30,36) - .0315 *i(31,36) - .0501 *i(28,37) - .1392 *i(29,37) - .0575 *i(30,37) - .1107 *i(31,37);\n            x +=  - .0538 *i(32,34) - .0563 *i(33,34) - .1038 *i(34,34) - .0839 *i(35,34) - .1007 *i(32,35) - .1197 *i(33,35) + .0582 *i(34,35) - .0229 *i(35,35) - .0027 *i(32,36) - .0802 *i(33,36) + .0773 *i(34,36) + .0738 *i(35,36) + .0945 *i(32,37) - .0778 *i(33,37) - .0014 *i(34,37) + .0178 *i(35,37);\n            x +=  - .2899 *i(36,34) - .2632 *i(37,34) - .2101 *i(38,34) - .1982 *i(39,34) - .0345 *i(36,35) - .0314 *i(37,35) - .1278 *i(38,35) - .2063 *i(39,35) + .1891 *i(36,36) + .0836 *i(37,36) + .0482 *i(38,36) - .2023 *i(39,36) + .1946 *i(36,37) + .0799 *i(37,37) - .389  *i(38,37) - .3937 *i(39,37) + .5877 ;\n        } else if (F.x == 22) {\n            x =   .1285 *i(0,34) - .0392 *i(1,34) + .0696 *i(2,34) + .0794 *i(3,34) + .1765 *i(0,35) + .0538 *i(1,35) + .057  *i(2,35) + .1222 *i(3,35) + .1894 *i(0,36) + .1329 *i(1,36) + .0488 *i(2,36) + .1496 *i(3,36) + .2926 *i(0,37) + .1592 *i(1,37) + .0641 *i(2,37) + .1704 *i(3,37);\n            x +=  - .0284 *i(4,34) - .0442 *i(5,34) - .0977 *i(6,34) - .3674 *i(7,34) - .0132 *i(4,35) - .0699 *i(5,35) - .2565 *i(6,35) - .4869 *i(7,35) - .0935 *i(4,36) - .1817 *i(5,36) - .2033 *i(6,36) - .1929 *i(7,36) - .2562 *i(4,37) - .2803 *i(5,37) - .2457 *i(6,37) - .0258 *i(7,37);\n            x +=  - .0968 *i(8,34) - .3325 *i(9,34) - .311  *i(10,34) - .5529 *i(11,34) - .2259 *i(8,35) + .0301 *i(9,35) + .0485 *i(10,35) - .7469 *i(11,35) + .0403 *i(8,36) + .0988 *i(9,36) + .0337 *i(10,36) - .2648 *i(11,36) + .1521 *i(8,37) + .0816 *i(9,37) + .0084 *i(10,37) - .0688 *i(11,37);\n            x +=  - .4946 *i(12,34) - .416  *i(13,34) - .2292 *i(14,34) - .4813 *i(15,34) - .992  *i(12,35) - .0273 *i(13,35) - .1949 *i(14,35) - .9198 *i(15,35) - .299  *i(12,36) + .0053 *i(13,36) + .0982 *i(14,36) - .366  *i(15,36) - .0523 *i(12,37) - .0303 *i(13,37) + .0458 *i(14,37) + .0377 *i(15,37);\n            x +=  - .0238 *i(16,34) - .0497 *i(17,34) - .0301 *i(18,34) - .0219 *i(19,34) - .411  *i(16,35) - .3954 *i(17,35) - .3213 *i(18,35) - .2771 *i(19,35) - .1958 *i(16,36) - .2548 *i(17,36) - .1977 *i(18,36) - .221  *i(19,36) + .0653 *i(16,37) - .055  *i(17,37) - .2762 *i(18,37) - .5759 *i(19,37);\n            x +=  + .0545 *i(20,34) - .0903 *i(21,34) - .0148 *i(22,34) - .0304 *i(23,34) + .0813 *i(20,35) - .0259 *i(21,35) - .0432 *i(22,35) - .0711 *i(23,35) + .1069 *i(20,36) + .067  *i(21,36) + .1149 *i(22,36) + .031  *i(23,36) + .1579 *i(20,37) + .0112 *i(21,37) + .1125 *i(22,37) + .1232 *i(23,37);\n            x +=  + .0562 *i(24,34) + .0923 *i(25,34) + .0078 *i(26,34) + .1091 *i(27,34) - .072  *i(24,35) - .0314 *i(25,35) - .1481 *i(26,35) + .0633 *i(27,35) - .2094 *i(24,36) - .3053 *i(25,36) - .3465 *i(26,36) - .0451 *i(27,36) - .2902 *i(24,37) - .6183 *i(25,37) - .5303 *i(26,37) - .1913 *i(27,37);\n            x +=  + .059  *i(28,34) + .127  *i(29,34) + .1013 *i(30,34) + .1137 *i(31,34) - .0099 *i(28,35) + .1148 *i(29,35) + .0868 *i(30,35) + .0713 *i(31,35) - .0176 *i(28,36) + .0802 *i(29,36) + .0421 *i(30,36) + .0748 *i(31,36) - .1884 *i(28,37) - .0027 *i(29,37) - .0999 *i(30,37) + .036  *i(31,37);\n            x +=  + .051  *i(32,34) + .0062 *i(33,34) - .1395 *i(34,34) - .0752 *i(35,34) - .1105 *i(32,35) - .1025 *i(33,35) - .0971 *i(34,35) + .0118 *i(35,35) - .2127 *i(32,36) - .1941 *i(33,36) - .1355 *i(34,36) + .0515 *i(35,36) - .0142 *i(32,37) - .4098 *i(33,37) - .313  *i(34,37) - .0272 *i(35,37);\n            x +=  - .1883 *i(36,34) + .0137 *i(37,34) - .0438 *i(38,34) - .1946 *i(39,34) - .124  *i(36,35) - .014  *i(37,35) - .0272 *i(38,35) - .2238 *i(39,35) - .1433 *i(36,36) - .1232 *i(37,36) - .0689 *i(38,36) - .0881 *i(39,36) - .086  *i(36,37) - .2685 *i(37,37) - .1969 *i(38,37) - .0984 *i(39,37) + .3834 ;\n        } else if (F.x == 23) {\n            x =  -.231  *i(0,34) - .3376 *i(1,34) - .2263 *i(2,34) - .1138 *i(3,34) - .104  *i(0,35) - .045  *i(1,35) - .1532 *i(2,35) - .0468 *i(3,35) - .0035 *i(0,36) + .0613 *i(1,36) + .0532 *i(2,36) - .1698 *i(3,36) + .1364 *i(0,37) + .1392 *i(1,37) + .1362 *i(2,37) + .0967 *i(3,37);\n            x +=  + .0751 *i(4,34) - .0233 *i(5,34) + .0294 *i(6,34) + .0907 *i(7,34) - .0767 *i(4,35) - .1011 *i(5,35) - .0416 *i(6,35) - .1237 *i(7,35) - .3392 *i(4,36) - .2977 *i(5,36) - .1033 *i(6,36) - .0661 *i(7,36) - .2549 *i(4,37) - .2844 *i(5,37) - .1477 *i(6,37) - .0385 *i(7,37);\n            x +=  - .5306 *i(8,34) - .4461 *i(9,34) + .042  *i(10,34) + .0967 *i(11,34) + .1237 *i(8,35) - .1956 *i(9,35) + .0352 *i(10,35) + .0794 *i(11,35) + .1543 *i(8,36) - .0109 *i(9,36) - .167  *i(10,36) - .067  *i(11,36) + .0873 *i(8,37) + .0201 *i(9,37) - .1366 *i(10,37) - .124  *i(11,37);\n            x +=  + .0364 *i(12,34) - .7388 *i(13,34) - .0501 *i(14,34) - .1445 *i(15,34) + .0435 *i(12,35) - .4874 *i(13,35) - .3496 *i(14,35) - .0572 *i(15,35) - .0717 *i(12,36) - .2753 *i(13,36) - .2944 *i(14,36) - .0252 *i(15,36) - .1113 *i(12,37) - .2039 *i(13,37) - .1291 *i(14,37) - .1021 *i(15,37);\n            x +=  - .0922 *i(16,34) - .1085 *i(17,34) - .0214 *i(18,34) + .0006 *i(19,34) + .1061 *i(16,35) - .1382 *i(17,35) - .218  *i(18,35) - .0918 *i(19,35) + .0404 *i(16,36) - .0637 *i(17,36) - .3487 *i(18,36) - .0946 *i(19,36) + .0141 *i(16,37) - .0918 *i(17,37) - .285  *i(18,37) - .5449 *i(19,37);\n            x +=  - .2439 *i(20,34) - .1456 *i(21,34) + .0303 *i(22,34) + .0728 *i(23,34) - .0684 *i(20,35) - .0263 *i(21,35) - .0253 *i(22,35) + .0429 *i(23,35) + .0776 *i(20,36) + .0805 *i(21,36) - .0228 *i(22,36) + .0218 *i(23,36) + .1439 *i(20,37) + .1351 *i(21,37) + .1228 *i(22,37) - .2171 *i(23,37);\n            x +=  + .2119 *i(24,34) + .1046 *i(25,34) + .0499 *i(26,34) - .111  *i(27,34) + .1299 *i(24,35) + .0787 *i(25,35) - .0179 *i(26,35) - .1746 *i(27,35) - .0344 *i(24,36) + .0442 *i(25,36) + .0236 *i(26,36) - .0153 *i(27,36) - .1174 *i(24,37) - .388  *i(25,37) - .0385 *i(26,37) + .0795 *i(27,37);\n            x +=  - .0836 *i(28,34) + .0821 *i(29,34) + .0742 *i(30,34) + .077  *i(31,34) - .0892 *i(28,35) + .0511 *i(29,35) + .0421 *i(30,35) + .0609 *i(31,35) + .0527 *i(28,36) - .1313 *i(29,36) - .0688 *i(30,36) - .0585 *i(31,36) + .1654 *i(28,37) - .0048 *i(29,37) - .2651 *i(30,37) - .4792 *i(31,37);\n            x +=  + .1002 *i(32,34) + .032  *i(33,34) - .0327 *i(34,34) - .2268 *i(35,34) + .0984 *i(32,35) + .066  *i(33,35) - .1414 *i(34,35) - .3257 *i(35,35) + .0557 *i(32,36) + .0679 *i(33,36) + .001  *i(34,36) - .1547 *i(35,36) - .3378 *i(32,37) - .1079 *i(33,37) - .0299 *i(34,37) - .0869 *i(35,37);\n            x +=  - .0596 *i(36,34) + .1349 *i(37,34) + .1001 *i(38,34) + .1676 *i(39,34) - .0386 *i(36,35) + .1072 *i(37,35) + .0862 *i(38,35) + .1102 *i(39,35) + .2003 *i(36,36) + .0594 *i(37,36) + .0524 *i(38,36) + .0681 *i(39,36) + .1287 *i(36,37) - .0973 *i(37,37) - .3025 *i(38,37) - .5154 *i(39,37) - .775  ;\n        } else if (F.x == 24) {\n            x =  -.1524 *i(0,34) - .1004 *i(1,34) - .0919 *i(2,34) - .3928 *i(3,34) - .0231 *i(0,35) - .0128 *i(1,35) - .1293 *i(2,35) - .4388 *i(3,35) + .1408 *i(0,36) + .1072 *i(1,36) + .0353 *i(2,36) - .2563 *i(3,36) + .1151 *i(0,37) + .1947 *i(1,37) + .1589 *i(2,37) + .1067 *i(3,37);\n            x +=  - .1016 *i(4,34) - .1782 *i(5,34) - .1289 *i(6,34) - .0849 *i(7,34) - .1627 *i(4,35) - .0876 *i(5,35) - .0922 *i(6,35) - .0978 *i(7,35) - .3831 *i(4,36) - .1411 *i(5,36) - .1298 *i(6,36) - .2457 *i(7,36) - .3984 *i(4,37) - .3344 *i(5,37) - .2645 *i(6,37) - .1407 *i(7,37);\n            x +=  - .0496 *i(8,34) + .0176 *i(9,34) + .0012 *i(10,34) - .119  *i(11,34) + .1128 *i(8,35) + .1637 *i(9,35) + .0091 *i(10,35) - .1089 *i(11,35) + .0789 *i(8,36) + .0785 *i(9,36) - .2262 *i(10,36) - .1745 *i(11,36) + .0676 *i(8,37) + .0099 *i(9,37) - .0579 *i(10,37) - .0823 *i(11,37);\n            x +=  + .0517 *i(12,34) + .2095 *i(13,34) - .1883 *i(14,34) - .1111 *i(15,34) + .0862 *i(12,35) + .1099 *i(13,35) - .1521 *i(14,35) - .4429 *i(15,35) - .0393 *i(12,36) - .1343 *i(13,36) - .1406 *i(14,36) - .4379 *i(15,36) - .1521 *i(12,37) - .2169 *i(13,37) - .1988 *i(14,37) - .214  *i(15,37);\n            x +=  + .0505 *i(16,34) + .045  *i(17,34) - .0227 *i(18,34) - .0637 *i(19,34) + .1591 *i(16,35) + .081  *i(17,35) - .0067 *i(18,35) - .056  *i(19,35) + .0727 *i(16,36) + .0732 *i(17,36) + .1077 *i(18,36) - .0675 *i(19,36) - .1831 *i(16,37) - .0632 *i(17,37) - .0871 *i(18,37) - .4307 *i(19,37);\n            x +=  - .0183 *i(20,34) - .0397 *i(21,34) - .087  *i(22,34) - .4697 *i(23,34) + .0045 *i(20,35) + .0177 *i(21,35) - .0552 *i(22,35) - .3414 *i(23,35) + .1101 *i(20,36) + .1065 *i(21,36) - .0148 *i(22,36) - .2891 *i(23,36) + .1534 *i(20,37) + .1667 *i(21,37) + .0773 *i(22,37) - .3736 *i(23,37);\n            x +=  + .0386 *i(24,34) - .0104 *i(25,34) - .144  *i(26,34) - .2732 *i(27,34) + .0082 *i(24,35) + .0033 *i(25,35) + .0795 *i(26,35) - .1196 *i(27,35) - .3089 *i(24,36) - .0519 *i(25,36) + .1381 *i(26,36) + .0776 *i(27,36) - .4952 *i(24,37) - .389  *i(25,37) - .0429 *i(26,37) + .1007 *i(27,37);\n            x +=  - .0736 *i(28,34) - .1023 *i(29,34) - .1464 *i(30,34) - .2387 *i(31,34) + .0085 *i(28,35) - .0807 *i(29,35) - .064  *i(30,35) - .0858 *i(31,35) + .1341 *i(28,36) - .0386 *i(29,36) - .033  *i(30,36) - .0992 *i(31,36) + .2612 *i(28,37) + .0994 *i(29,37) - .0334 *i(30,37) - .2294 *i(31,37);\n            x +=  + .1524 *i(32,34) + .1051 *i(33,34) + .0628 *i(34,34) + .0849 *i(35,34) + .1309 *i(32,35) + .1084 *i(33,35) + .05   *i(34,35) - .0264 *i(35,35) + .0033 *i(32,36) + .1497 *i(33,36) + .088  *i(34,36) - .0125 *i(35,36) - .0315 *i(32,37) - .1139 *i(33,37) - .0065 *i(34,37) - .033  *i(35,37);\n            x +=  - .0282 *i(36,34) - .1585 *i(37,34) - .2113 *i(38,34) - .182  *i(39,34) + .0426 *i(36,35) - .1024 *i(37,35) - .1544 *i(38,35) - .1329 *i(39,35) + .1674 *i(36,36) - .0064 *i(37,36) + .0155 *i(38,36) - .0542 *i(39,36) + .1516 *i(36,37) - .0611 *i(37,37) - .2697 *i(38,37) - .301  *i(39,37) + .6181 ;\n        } else if (F.x == 25) {\n            x =  -.1885 *i(0,34) - .0965 *i(1,34) - .0557 *i(2,34) - .047  *i(3,34) - .6042 *i(0,35) - .2396 *i(1,35) - .1815 *i(2,35) - .0439 *i(3,35) - .3279 *i(0,36) - .2747 *i(1,36) - .1765 *i(2,36) - .1197 *i(3,36) - .1054 *i(0,37) - .2166 *i(1,37) - .1971 *i(2,37) - .074  *i(3,37);\n            x +=  - .0051 *i(4,34) + .0581 *i(5,34) + .0868 *i(6,34) + .1423 *i(7,34) - .0831 *i(4,35) - .0566 *i(5,35) + .0497 *i(6,35) + .1082 *i(7,35) - .0712 *i(4,36) - .1179 *i(5,36) - .0912 *i(6,36) - .0371 *i(7,36) - .0745 *i(4,37) - .1039 *i(5,37) - .1642 *i(6,37) - .1978 *i(7,37);\n            x +=  - .0645 *i(8,34) + .057  *i(9,34) + .0334 *i(10,34) + .1274 *i(11,34) - .2449 *i(8,35) - .316  *i(9,35) - .0326 *i(10,35) + .1114 *i(11,35) + .0174 *i(8,36) - .1335 *i(9,36) - .1497 *i(10,36) - .0539 *i(11,36) + .0623 *i(8,37) + .0253 *i(9,37) + .0339 *i(10,37) - .046  *i(11,37);\n            x +=  - .058  *i(12,34) - .0493 *i(13,34) + .0804 *i(14,34) + .0978 *i(15,34) - .0141 *i(12,35) - .1097 *i(13,35) + .0223 *i(14,35) + .0377 *i(15,35) + .0463 *i(12,36) - .0392 *i(13,36) - .0896 *i(14,36) + .0486 *i(15,36) - .0189 *i(12,37) - .0307 *i(13,37) - .0235 *i(14,37) - .0966 *i(15,37);\n            x +=  + .0232 *i(16,34) - .0293 *i(17,34) - .0106 *i(18,34) + .0565 *i(19,34) + .2028 *i(16,35) + .0118 *i(17,35) - .0373 *i(18,35) - .0226 *i(19,35) + .1284 *i(16,36) + .0503 *i(17,36) + .0184 *i(18,36) - .2067 *i(19,36) + .1802 *i(16,37) + .1009 *i(17,37) + .1199 *i(18,37) + .0152 *i(19,37);\n            x +=  - .068  *i(20,34) - .0228 *i(21,34) + .0452 *i(22,34) + .0825 *i(23,34) - .1154 *i(20,35) - .0755 *i(21,35) - 0.    *i(22,35) + .0658 *i(23,35) + .0724 *i(20,36) - .029  *i(21,36) - .1514 *i(22,36) - .0661 *i(23,36) + .1327 *i(20,37) + .0618 *i(21,37) + .0022 *i(22,37) - .1261 *i(23,37);\n            x +=  + .0657 *i(24,34) + .0367 *i(25,34) + .0618 *i(26,34) - .0018 *i(27,34) + .1465 *i(24,35) + .0936 *i(25,35) + .0338 *i(26,35) - .0228 *i(27,35) - .0295 *i(24,36) + .0473 *i(25,36) + .0563 *i(26,36) + .0554 *i(27,36) + .0183 *i(24,37) - .0729 *i(25,37) - .2233 *i(26,37) - .2739 *i(27,37);\n            x +=  - .1484 *i(28,34) - .184  *i(29,34) - .0295 *i(30,34) + .0227 *i(31,34) - .1752 *i(28,35) - .2507 *i(29,35) - .2127 *i(30,35) - .2664 *i(31,35) - .2136 *i(28,36) - .096  *i(29,36) - .1914 *i(30,36) - .2766 *i(31,36) - .0186 *i(28,37) - .0265 *i(29,37) - .0376 *i(30,37) - .1263 *i(31,37);\n            x +=  - .4    *i(32,34) - .3295 *i(33,34) - .1216 *i(34,34) - .2115 *i(35,34) + .0261 *i(32,35) - .0756 *i(33,35) - .0222 *i(34,35) - .1928 *i(35,35) + .0976 *i(32,36) + .0908 *i(33,36) + .0895 *i(34,36) + .01   *i(35,36) - .1006 *i(32,37) + .0715 *i(33,37) + .1235 *i(34,37) + .0651 *i(35,37);\n            x +=  + .005  *i(36,34) - .0264 *i(37,34) - .0217 *i(38,34) - .0118 *i(39,34) - .1775 *i(36,35) - .0455 *i(37,35) - .0286 *i(38,35) - .0836 *i(39,35) - .4369 *i(36,36) - .1238 *i(37,36) - .0813 *i(38,36) - .0584 *i(39,36) - .0247 *i(36,37) + .0142 *i(37,37) - .0159 *i(38,37) - .0818 *i(39,37) - .8506 ;\n        }\n        x = exp(x); // Pre-calculate the first step of the Softmax function\n        \n        col.r = x;\n    }\n    // CNN Step 7: Softmax + prediction\n    // 1x26 => 1 character\n    else if (F.x <= int(num_classes)  && F.y == 1) {\n        vec3 res = vec3(0); // r: prediction index, g: prediction confidence, b: sum of confidences\n        \n        // Calculate sum of confidences for Softmax\n        // and the prediction with highest confidence\n        for (float i = 0.; i < num_classes; i++) {\n            float val = texelFetch(iChannel1, ivec2(int(i), 0), 0).r;\n            res.b += val;\n            if (val > res.g) {\n                res.xy = vec2(i, val);\n            }\n        }\n        \n        // Store result of Softmax function for each output\n        if (F.x < int(num_classes))\n            col.r = texelFetch(iChannel1, ivec2(F.x, 0), 0).r / res.b; \n        // Store highest confidence prediction\n        else \n            col.rg = vec2(res.r, res.g / res.b);\n    }\n    \n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}