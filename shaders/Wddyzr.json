{
    "Shader": {
        "info": {
            "date": "1600440604",
            "description": "I tried making the Brofist but only got the outline. \nI want to try to make the fingers too but im not sure how to get the sdf of them. ",
            "flags": 0,
            "hasliked": 0,
            "id": "Wddyzr",
            "likes": 6,
            "name": "PewDiePie Brofist",
            "published": 3,
            "tags": [
                "pewdiepie",
                "pewdiepiepattern",
                "brofist"
            ],
            "usePreview": 0,
            "username": "manu210404",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "#define PUNCH\n\nconst vec3 Black = vec3(.1, .0, .15);\nconst vec3 Red   = vec3(1., .2, .2);\nconst vec3 BG    = vec3(.3, .1, .2);\n\nfloat smoother(float t) {\n    t = clamp(t, 0.0,1.0);\n    // 6t^{5}-15t^{4}+10t^{3}; polynomial used for smooth interpolation (from the same family of curves as the smoothstep function)\n    // this function has a continuous second derivative which makes it very useful for many applications\n    return 6.0*(t*t*t*t*t) - 15.0*(t*t*t*t) + 10.0*(t*t*t);\n}\n\nvec2 hash22(vec2 co) {\n    return fract(sin(vec2(dot(co,vec2(167.1,311.7)),dot(co,vec2(269.5,183.3))))*737.5453);\n}\n\nfloat perlin(vec2 co) {    float i0 = floor(co.x);\n    float j0 = floor(co.y);\n    float i1 = ceil(co.x);\n    float j1 = ceil(co.y);\n\n    vec2 g00 = normalize(hash22(vec2(i0, j0)) * 2.0 - 1.0);\n    vec2 g10 = normalize(hash22(vec2(i1, j0)) * 2.0 - 1.0);\n    vec2 g01 = normalize(hash22(vec2(i0, j1)) * 2.0 - 1.0);\n    vec2 g11 = normalize(hash22(vec2(i1, j1)) * 2.0 - 1.0);\n    \n    vec2 uv = fract(co);\n    \n    float n00 = dot(g00, vec2(uv.x, uv.y));\n    float n10 = dot(g10, vec2(uv.x - 1.0, uv.y));\n    float n01 = dot(g01, vec2(uv.x, uv.y - 1.0));\n    float n11 = dot(g11, vec2(uv.x - 1.0, uv.y - 1.0));\n    \n    float su = smoother(uv.x);\n    float sv = smoother(uv.y);\n\n    float nx0 = (1.0 - su) * n00 + n10 * su;\n    float nx1 = (1.0 - su) * n01 + n11 * su;\n    \n    float n = (1.0 - sv) * nx0 + nx1 * sv;\n\n    return n;\n}\n\nmat2 rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat sdBox(vec2 p, vec2 r) {\n    vec2 q = abs(p)-r;\n    return length(max(q,0.0))+min(max(q.x, q.y),0.);\n}\n\n\nfloat dist(vec2 p) {\n    //return mix(sdBox(p, vec2(1)), length(p)-1.0, smoothstep(0.0,.5, p.x));\n    float thickness = .15;\n    p=rot(0.1)*p;\n    float r = 0.25;\n    \n    // Ellipse from Inigo Quilez: https://www.shadertoy.com/view/MdfGWn\n    vec2 hw = vec2(1.5,1.0);\n    float re = r+.5;\n    vec2 ce = p-vec2(.5, 0.3333);\n    float f = length( ce*hw );\n    float g = length( ce*hw*hw );\n    float e = (f-.6667)*f/g;\n    \n    float b0 = (mix(sdBox(p-vec2(1.0,0.333), vec2(2., 0.6667)), e, (sign(p.x-0.5)+1.0)/2.0))-r;\n\n    float b1 = sdBox(p-vec2(-0.5,0), vec2(0.5, 0.9))-r;\n    float s = length(p-vec2(-0.2,0.0))-1.0;\n    float v = mix(min(b0, b1), s, 0.25);\n    v = abs(v)- thickness;\n    e = length(p*vec2(1.5,1.0)-vec2(.75,0.333))-.6667;\n\n    return v;\n}\n\nfloat osc(vec2 p) {\n    return smoothstep(.0,.5,abs(fract(p.x/4.)*4.-2.)-.25);\n}\n\nfloat pewdieNoise(vec2 p, float t) {\n    vec2 w = sqrt(vec2(perlin(p/2.), perlin(p/2.+100.0))+1.0);\n    vec2 s = vec2(p+w)*12.;\n    s *= rot((w.x+w.y)*3.14159265/4.0);\n    return osc(s*1.0+iTime);\n    return sin(s.x+s.y);\n}\n\nfloat punch(float x) {\n    #ifdef PUNCH\n    float t = fract(x/2.);\n    return 2.0-(clamp(smoothstep(.3, .6, t)*6.,0.,1.)-smoothstep(.4, .6, t));\n    #endif\n    #ifndef PUNCH\n    return 1.9;\n    #endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.0)/iResolution.y*2.;\n    \n    // for animation\n    float p = punch(iTime);\n    uv *= 1.0+p;\n    \n    float d = dist(uv.rg);\n    \n    // render fist\n    float v = smoothstep(0.02, 0.0, d);\n    vec3 col = mix(Black * v, Red, vec3(v) * pewdieNoise(uv, iTime));\n    col += (1. - v) * mix(Black, BG, (1.0 - smoothstep(.02 + .5 * (2. - p), -.25 * (2. - p), dist(uv + vec2(-1., 1.) * (2. - p)))));\n\n    // vignette\n    vec2 nuv = fragCoord/iResolution.xy-0.5;\n    col = mix(Black, col, 1.-length(nuv));\n    \n    fragColor = vec4(vec3(col),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}