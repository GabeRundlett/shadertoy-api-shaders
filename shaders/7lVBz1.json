{
    "Shader": {
        "info": {
            "date": "1664109476",
            "description": "\"shadow\": refracts into shape and finds exit point, uses direction vector from first hit and exit point to raymarch away from shape and find \"reflected\" hit. i think.\n\neverything else is just random stuff",
            "flags": 0,
            "hasliked": 0,
            "id": "7lVBz1",
            "likes": 10,
            "name": "Shadow Test F",
            "published": 3,
            "tags": [
                "f"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 237
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n// RayMarching from TheArtOfCode\n\n// From BlackleMori\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdBox(in vec2 p, in vec2 b){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.))+min(max(d.x,d.y),0.);\n}\n\nvec3 GetRayOrigin() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    float r = 4.;\n    float a = 0.15 * iTime;\n    vec3 ro = vec3(r * cos(a), 1. + 1. * cos(0.4 * iTime), r * sin(a));\n    //ro.yz *= rot(-m.y*3.14+1.);\n    //ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat GetDist(vec3 p) {\n    p.xz *= rot(0.5 * iTime);\n    p.x -= 1.;\n    p.xz *= rot(-1.25 * iTime); \n    float r1 = 0.5;\n    float r2 = 0.2;\n    float td1 = length(p.xy) - r1;\n    float td2 = length(vec2(td1, p.z)) - r2;\n   \n    float sd1 = td2;//sdBox(p - vec3(0,0.25 * cos(iTime),0), vec3(.6,.5,.2)) - 0.1;\n    p.xz *= rot(1.25 * iTime);\n    p.x += 1.;\n    float sd2 = length(p + vec3(1,0.25 * sin(iTime),0)) - 0.5;\n    float d = p.y + 1. - 0.001 * dot(p.xz,p.xz);\n    d = min(d,sd1);\n    d = min(d,sd2);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    float s = sign(z);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    vec3 ro = GetRayOrigin();\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n    \n    vec3 p = ro + rd * d;\n    float IOR = 1.5;\n    if(d<MAX_DIST) {        \n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        if (p.y > -0.9)\n            r = reflect(rd, n * 50. * exp(-3. * length(p.xz)));\n\n        vec3 pIn = p - 4. * SURF_DIST * n;\n        vec3 rdIn = refract(rd, n, 1./IOR);\n        float dIn = RayMarch(pIn, rdIn, -1.);\n        \n        vec3 pExit = pIn + dIn * rdIn;\n        vec3 nExit = -GetNormal(pExit); // *-1.; ?\n\n        vec3 p2 = p + 4. * SURF_DIST * n;\n        vec3 cr = normalize(p - pExit);\n        float d2 = RayMarch(p2, cr, 1.);\n        vec3 p3 = p2 + d2 * cr;\n        vec3 n2 = GetNormal(p3);\n        \n\n        float dif = dot(n, normalize(vec3(.5*cos(iTime),1,.5*sin(iTime))))*.5+.5;\n        float dif2 = dot(n2, normalize(vec3(1,2,3)))*.5+.5;\n        //dif2 = pow(dif2, 5.);\n        col = vec3(1);\n        col *= dif;\n        float k = 0.35;\n       // col *= smoothstep(-k, k, dif2 - 0.8);\n        col *= 0.5 + 0.5 * thc(4., 2. * iTime - 0.5 * length(p.xz) + 50. * abs(dif));//* abs(2. * dif-dif2));\n        col *= exp(-0.5 * length(p));\n        col *= 2. * dif2;\n        float fres = pow(1. + dot(rd, n), 5.);\n        float fres2 = pow(1. + dot(rd, nExit), 4.);\n        float fog = 1.-exp(-length(p));\n\n        float spec = pow(dif, 15.);\n        float csh = 1. / cosh(0.2 * length(p.xz));\n        col = clamp(col, 0., 1.);\n        col = mix(col, vec3(abs(r)) * csh, fres);\n        if (p.y < -0.9) {\n            float tns = 1.;\n            col += 0.6 * thc(4., iTime + 6. * log(length(p.xz))) * csh;\n        }\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(2. * pi * (c * t + d));\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat sfloor(float a, float b) {\n    return floor(b) + 0.5 + 0.5 * tanh(a * (fract(b) - 0.5)) / tanh(0.5 * a);\n}\n\n// From iq, k = 0.12 is good\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}