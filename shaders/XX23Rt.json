{
    "Shader": {
        "info": {
            "date": "1708731238",
            "description": "friday fun shader, playing with smooth vs. noise background",
            "flags": 0,
            "hasliked": 0,
            "id": "XX23Rt",
            "likes": 7,
            "name": "Hamster Weave",
            "published": 3,
            "tags": [
                "noise",
                "zoom",
                "aa",
                "pattern",
                "relaxing"
            ],
            "usePreview": 0,
            "username": "starmole2",
            "viewed": 126
        },
        "renderpass": [
            {
                "code": "uvec3 pcg3d(uvec3 v) {\n    v = v * 1664525u + 1013904223u;\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n    v ^= v >> 16u;\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n    return v;\n}\n\nfloat smoothedge(float x, float x0, float x1, float sd) {\n    float s0 = smoothstep(x0-sd,x0+sd,x);\n    float s1 = 1.0 - smoothstep(x1-sd,x1+sd,x);\n    return s0*s1;\n}\n\nfloat drawTile( vec2 p, int idx, float sw ) {\n    if ( (idx&1)==1 ) {\n        float t = p.x;\n        p.x = 1.0 - p.y;\n        p.y = t;\n    }\n    float r = 0.0;\n    float w = .17;\n    float w2 = .05;\n    if ( idx<=1 ) {\n        r += smoothedge(length(p), .5-w, .5+w, sw);        \n        r += smoothedge(length(p - vec2(1.0)), .5-w, .5+w, sw);        \n    } else {\n        r += smoothedge(p.x, .5-w, .5+w, sw);\n        r += smoothedge(p.y, .5-w, .5+w, sw) * (1.-smoothedge(p.x, .5-w-w2, .5+w+w2, sw));\n    }\n    return r;\n}\n\nfloat evaluv(vec2 uv) {\n    vec2 d = fwidth(uv);\n    float s = max(d.x, d.y); \n    vec2 fuv = fract(uv);\n    vec2 iuv = ceil(uv);\n    int tidx = int(pcg3d(uvec3(iuv.x+123456.0, iuv.y+123456.0, 23)).x);\n    return drawTile(fuv, tidx&3, s);\n}\n\nvec2 roa(vec3 noise) {\n    float r = noise.z;\n    mat2 m = mat2 ( cos(r), -sin(r), sin(r), cos(r));\n    return noise.xy * m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord /iResolution.xy - vec2(.5);\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 col;\n\n    uvec3 noise = pcg3d(uvec3(fragCoord.x*1000.0, fragCoord.y*1000.0, 656.0));\n    vec3 fnoise = fract(vec3(noise & uvec3(0xffff)) / 65.535);\n    col = mix ( vec3(150, 80, 60)/255.0, vec3(98, 60, 33)/255.0, fnoise.x );\n    uvec3 noise2 = pcg3d(uvec3(fragCoord.x*1076.0, fragCoord.y*1060.0, 11.0));\n    vec3 fnoise2 = fract(vec3(noise2 & uvec3(0xffff)) / 65.535);\n    \n    \n    float r = iTime*.02;\n    mat2 m = mat2 ( cos(r), -sin(r), sin(r), cos(r));\n    float s = (sin(iTime*.123)+1.2)*20.0;\n    uv *= s;\n    uv *= m;\n    uv.y += iTime * 2.0;\n    \n    float sh = 1.0;\n    sh *= 1.-evaluv(uv+roa(fnoise.xyz)*.24)*.5;\n    sh *= 1.-evaluv(uv-roa(fnoise.zxy)*.1)*.5;\n    sh *= 1.-evaluv(uv+roa(fnoise2.yzx)*.16)*.5;\n    sh *= 1.-evaluv(uv-roa(fnoise2.xyz)*.05)*.5;\n    col = mix(vec3(0,0,.15), col, sh);\n\n    col = mix(col, vec3(1,1,1), evaluv(uv));\n   \n    // Output to screen\n    fragColor = vec4(pow(col, vec3(1.0/2.2)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}