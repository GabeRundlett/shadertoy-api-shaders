{
    "Shader": {
        "info": {
            "date": "1638066453",
            "description": "Playing around with some scattering equations.",
            "flags": 0,
            "hasliked": 0,
            "id": "7lyGz3",
            "likes": 7,
            "name": "Foggy Glass Ball",
            "published": 3,
            "tags": [
                "raymarching",
                "noise",
                "reflection",
                "volume",
                "lighting",
                "glass",
                "foggy",
                "ball",
                "scattering",
                "cloudy",
                "phase",
                "henyeye",
                "greenstein"
            ],
            "usePreview": 0,
            "username": "BeardThings",
            "viewed": 326
        },
        "renderpass": [
            {
                "code": "const float pi=3.1415;\n\n// Henyey-Greenstein\nfloat hg(float g,float lDotV)\n{\n    return 1./(4.*pi)*(1.-g*g)/pow(1.+g*g-2.*g*lDotV,3./2.);\n}\n\n// Forward+back scatter approx\nfloat phase(float ldotv)\n{\n    return mix(hg(0.6,ldotv),hg(-0.3,ldotv),0.3);\n}\n\n// Simple noise for some nice variety\nfloat noise(vec3 p)\n{\n    // Some curl noise here could be interesting\n    return 1.0-texture(iChannel1,p*0.25+vec3(iTime*0.03,0.,0.)).r*0.35;\n}\n\nbool sphere(vec3 o, vec3 v, float r, out vec2 t)\n{\n    float a=1.0;//dot(v,v); v is expected to be normalized\n    float b=2.*dot(v,o);\n    float c=dot(o,o)-r*r;\n    float d=b*b-4.*a*c;\n    \n    t=vec2((-b-sqrt(d))/(2.*a), (-b+sqrt(d))/(2.*a));\n    return d>=0.;\n}\n\nfloat fresnel(float r1, float r2, vec3 n, vec3 i)\n{\n\tfloat r0 = (r1 - r2) / (r1 + r2);\n\tr0 *= r0;\n\tfloat a = min(1.0 - dot(n, i), 1.0);\n\treturn r0 + (1.0 - r0)*a*a*a*a*a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n    float aspect = iResolution.y / iResolution.x;\n    vec3 v=normalize(vec3(0.,0.,1.)+vec3(uv.x,0.,0.)+vec3(0.,uv.y*aspect,0.));\n    vec3 o=vec3(0.,0.,-2.);\n    float r=0.9;\n    vec3 ab=vec3(3.0, 5.0, 4.0)*0.45;\n    float radiance=80.0;\n    \n    vec3 tex=pow(texture(iChannel0,v).rgb,vec3(1.0/2.2));\n    \n    fragColor.rgb = tex.rgb;\n    vec2 t;\n    if(sphere(o, v,r, t))\n    {   \n        vec3 o2s=-o;\n        float w=length(o2s)/dot(normalize(o2s),v);\n        float d2e=r-sqrt(w*w-dot(o2s,o2s));\n        \n        vec3 sp=v*t.x+o;\n        vec3 n = normalize(sp);\n        \n        float rot=iTime*0.5;\n        vec3 lp = normalize(vec3(cos(rot),0.2,-sin(rot)))*1.8;\n        vec3 l = normalize(lp-sp);\n        \n        int steps=64;\n        float depth=(t.y-t.x);\n        float s=depth/float(steps);\n        vec3 irradiance=vec3(0.);\n        float tcc=0.;\n        for(int i=0;i<steps;i++)\n        {\n            vec3 p=(s*float(i)+t.x)*v+o;\n            // Bit of noise for texture\n            float n=noise(p);\n            tcc+=s*n;\n            // TODO: Could simplify this branch\n            vec2 t2;\n            if(sphere(p,l,r,t2))\n                irradiance+=exp((-tcc-t2.y)*ab);\n            else\n                irradiance+=exp(-tcc*ab);\n        }\n        \n        vec3 sl=reflect(v,n);\n        vec3 sc=pow(texture(iChannel0,sl).rgb,vec3(1.0/2.2));\n        \n        vec3 h=normalize(sl-v);\n        float fres=fresnel(1.0,2.0,h,-v);\n        vec3 indirectSpec=sc;\n        \n        float ldotv=dot(l,v);\n        // TODO: Add some specular highlights\n        vec3 diffuse=tex*exp(-tcc*ab)+irradiance*phase(ldotv)*phase(1.)*radiance*s;\n        fragColor.rgb=mix(diffuse,indirectSpec,fres);\n    }  \n    \n    // Linear->SRGB\n    fragColor.rgb = pow(fragColor.rgb,vec3(2.2));\n    // Simple reinhard\n    fragColor.rgb = fragColor.rgb/(fragColor.rgb+vec3(1.0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}