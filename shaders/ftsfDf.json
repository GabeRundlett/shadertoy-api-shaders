{
    "Shader": {
        "info": {
            "date": "1651593709",
            "description": "A slight variation on traditional simplex noise using a very fast hash function.",
            "flags": 0,
            "hasliked": 0,
            "id": "ftsfDf",
            "likes": 8,
            "name": "Fast, High-Quality Noise",
            "published": 3,
            "tags": [
                "procedural",
                "noise",
                "fast"
            ],
            "usePreview": 0,
            "username": "zesterer",
            "viewed": 408
        },
        "renderpass": [
            {
                "code": "// 0 = linear, 1 = smoothstep, 2 = cosine\n#define LERP 1\n\n// Very fast hash function\nfloat hash(ivec2 p) {\n    ivec2 q = p * ivec2(1317301, 1712759) + p.yx;\n    return float((((q.x ^ q.y) * 3536471) & 0xFFFF)) * 0.00001526;\n}\n\nfloat lerp(float a, float b, float x) {\n    #if (LERP == 1)\n        return a + (b - a) * smoothstep(0.0, 1.0, x);\n    #elif (LERP == 2)\n        return mix(a, b, 0.5 - cos(x * 3.1415) * 0.5);\n    #else\n        return mix(a, b, x);\n    #endif\n}\n\nfloat layer(vec2 p0) {\n    const float f = 0.35;\n    vec2 p = p0 + (p0.x + p0.y) * f;\n    \n    const ivec2 iota = ivec2(0, 1);\n    \n    ivec2 ip = ivec2(p);\n    float v00 = hash(ip + iota.xx);\n    float v11 = hash(ip + iota.yy);\n    \n    vec2 fp = fract(p);\n    if (fp.x > fp.y) {\n        float v10 = hash(ip + iota.yx);\n        return lerp(\n            lerp(v00, v10, (fp.x - fp.y) / (1.0 - fp.y)),\n            v11,\n            fp.y\n        );\n    } else {\n        float v01 = hash(ip + iota.xy);\n        return lerp(\n            v00,\n            lerp(v01, v11, fp.x / fp.y),\n            fp.y\n        );\n    }\n}\n\nfloat noise(vec2 p) {\n    const float layer_scale = 0.5;\n    const float detail = 0.05;\n    \n    float total = 0.0;\n    float cap = 0.0;\n    for (float scale = 1.0; scale > detail; scale *= layer_scale) {\n        total += layer(p / scale) * scale;\n        cap += scale;\n    }\n    return total / cap;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    if (uv.x < 0.25) {\n        fragColor = vec4(vec3(hash(ivec2(floor(fragCoord * 0.2 + iTime * 10.0)))), 1.0);\n    } else if (uv.x < 0.5) {\n        fragColor = vec4(vec3(layer(fragCoord * 0.2 + iTime * 10.0)), 1.0);\n    } else if (uv.x < 0.75) {\n        fragColor = vec4(vec3(noise(fragCoord * 0.02 + iTime * 1.0)), 1.0);\n    } else {\n        fragColor = vec4(vec3(sin(noise(fragCoord * 0.02 + iTime * 1.0) * 30.0) * 0.5 + 0.5), 1.0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}