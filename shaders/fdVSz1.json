{
    "Shader": {
        "info": {
            "date": "1634377084",
            "description": "Some trees",
            "flags": 0,
            "hasliked": 0,
            "id": "fdVSz1",
            "likes": 10,
            "name": "Trees 3",
            "published": 3,
            "tags": [
                "trees"
            ],
            "usePreview": 0,
            "username": "guil",
            "viewed": 360
        },
        "renderpass": [
            {
                "code": "// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n#define igt iTime\n\nvec4 ot=vec4(1.);\nfloat g=1.25;\n\nconst int MaxIter = 12;\n\nfloat zoom=1.3;\n\n\nfloat a1 = 1.25;\nfloat a2 = -.53;\nfloat a3 = 2.15;\nvec2 vr1; \nvec2 vr2; \nvec2 vr3;\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\n\n\nfloat capsule( vec3 p)\n{\n   \tp.y -= clamp( p.y, 0.0, 6.0 );\n    return length( p-.05 ) - .6;\n}\n\nfloat sphere( vec3 p, float r)\n{\n   \tp.y *= .4;\n    return length( p ) - r;\n}\n\n\nfloat branches(in vec3 p,in float l, in float dr, in int maxi , in int type)\n{ \n    l= min(l,capsule(p));\n    //float b = sphere(p,11./dr);if(b>.5)return min(b,l);\n    for(int i=0;i<maxi;i++) {\n        p.y-=2.5;   \t\t\n        p.xz = abs(p.xz);\n        p.xz = cmul(vr1,p.xz);\n        p.xy = cmul(vr2,p.xy);\t\n        if (type==0)\n            if (i<maxi-2)p =  p * g; else p *=.8;\n        else if (type==1)\n            p *= g;\n        else\n            if (i>0 && i<maxi-1)p =  p * g; else p *=.9;\n        dr *= g;\n        l= min (l ,capsule(p) / dr);\n    }\n\treturn l;\n}\n\nfloat map(vec3 p)\n{ \n   \n    int a = int(floor(mod(p.x/20.+.5,3.)));\n    int b = int(floor(mod(p.z/20.+.5,4.)));\n    p.xz=mod(10.+p.xz,20.)-10.; \n    p.xz=cmul(p.xz, vec2(cos(float(b)),sin(float(b))));\n    float dr = 1.0;  \t\n    float l=p.y;\n   \n    if(p.y>.15){   \n\t\tfor(int i=0;i<5+b;i++){\n            l=branches(p,l,dr,MaxIter-i-b,a);\n            p.xz = cmul(vr3,p.xz);  \n            p.y-=5.5-float(b);\n            if(p.y<0.)break;\n            p*=g,dr*=g;   \n        }\n    }\t\t\t\n    return l;   \n}\n\nvec4 branchesOt(in vec3 p,in vec4 ot, in int maxi, in int type)\n{ \n   \n \n    for(int i=0;i<maxi;i++) {\n        p.y-=2.5;   \t\t\n        p.xz = abs(p.xz);\n        p.xz = cmul(vr1,p.xz);\n        p.xy = cmul(vr2,p.xy);\t\n        if (type==0)\n            if (i<maxi-2)p =  p * g; else p *=.8;\n        else if (type==1)\n            p *= g;\n        else\n            if (i>0 && i<maxi-1)p =  p * g; else p *=.9;\n        ot=min(ot,vec4(abs(p),1./float(1+i)));\n    }\n\treturn ot;\n}\n\nvec4 mapOt(vec3 p)\n{ \n   \n    int a = int(floor(mod(p.x/20.+.5,3.)));\n    int b = int(floor(mod(p.z/20.+.5,4.)));\n    p.xz=mod(10.+p.xz,20.)-10.; \n    p.xz=cmul(p.xz, vec2(cos(float(b)),sin(float(b))));\n    float dr = 1.0;\n    ot = vec4(1.);    \t\n   \n    if(p.y>.15){   \n\t\tfor(int i=0;i<5;i++){\n            ot=branchesOt(p,ot,MaxIter-i-b,a);\n            p.xz = cmul(vr3,p.xz);  \n            p.y-=5.5-float(b);\n            p*=g;dr*=g;   \n        }\n    }\t\t\t\n    return ot;   \n}\n\nfloat trace( in vec3 ro, in vec3 rd )\n{\n    float maxd = 120.;\n    float precis = 0.001;\n    float k = .5;\n      \n    float dt=1.;\n    float t = 0.0;\n    for( int i=0; i<128; i++ )\n    {\n\t\tif( t>maxd ||  dt<precis*(.1+t)) continue;             \n        t += dt*k;\n        k *= 1.01;\n\t\tdt = map( ro+rd*t );\n    }\n\n    if( t>maxd ) t=-1.0;\n    return t;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3  eps = vec3(.0001,0.0,0.0);\n\tvec3 nor;\n\tnor.x = map(pos+eps.xyy) - map(pos-eps.xyy);\n\tnor.y = map(pos+eps.yxy) - map(pos-eps.yxy);\n\tnor.z = map(pos+eps.yyx) - map(pos-eps.yyx);\n\treturn normalize(nor);\n}\n\nfloat softShadow( in vec3 ro, in vec3 rd, in float tmin, in float tmax)\n{\n\tfloat res = 1.0;\n        float precis = 0.1;\n\tfloat t = tmin;\n\tfor (int i = 0; i < 8; i++)\n\t{\n\t\tfloat dt = 2.*map( ro + rd*t );\n\t\tres = min(res, 16.0*dt/t);\n\t\tt += dt;\n\t\tif( dt<precis || t>tmax ) break;\n\t}\n\treturn clamp(res*t/tmax, 0.0, 1.0);\t\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = -1.0 + 2.0*fragCoord.xy / iResolution.xy;\n\tp.x *= iResolution.x/iResolution.y;\n\t\n\tvec2 m = vec2(-0.5)*6.28;\n\tm = (iMouse.xy/iResolution.xy-.5)*6.28;\n\tm += .5*vec2(cos(0.15*igt),cos(0.09*igt))+.3; \n    \n\tvr1 = vec2(cos(a1),sin(a1));\n    vr2 = vec2(cos(a2),sin(a2));\n    vr3 = vec2(cos(a3),sin(a3));\n    // camera\n\n\t\n\tvec3 ta = vec3(.5*igt,8.,4.);\n\tvec3 ro =ta  + zoom*4.*(5.+sin(.2*igt))*vec3( cos(m.x)*cos(m.y), 1.+sin(m.y), sin(m.x)*cos(m.y));\n\t\n\t\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(0.,1.,0.0);\n\tvec3 cu = normalize(cross(cw,cp));\n\tvec3 cv = normalize(cross(cu,cw));\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 2.5*cw );\n\n\n    // trace\n\n   \n\t\n\tvec3 col = vec3(0.8,0.8,1.);\n\tfloat t = trace( ro, rd );\n\tif( t>0.0 )\n\t{\n\t\tvec3 pos = ro + t*rd;\n\t\tvec3 nor = calcNormal( pos );\n        ot = mapOt(pos);\n\t\t\n\t\t// lighting\n        \n        vec3  light1 = normalize(vec3( 0.4, 0.9,0.4  ));\n\t\tfloat key = clamp( dot( light1, nor ), 0.0, 1.0 );\n\t\tif(pos.y<.15){\n            key*=softShadow(pos,light1,1.,25.);\n            ot=texture(iChannel0,(pos.xz / 16.0));\n            ot.a=0.;\n        }\n\t\t\n\t\tfloat amb = (0.4+0.6*nor.y);\n\t\tfloat ao = pow( clamp(1.-.5*ot.a,0.2,1.0), 1.2 );\t\t\n        vec3 brdf = vec3(ao)*(.6*amb+key);\n\n        // material\t\t\t\t\n\t\tot.g=max(ot.g,.8*ot.b);\n        vec3 rgb =ot.rgb*vec3(1.,.7,.2);        \n        if(pos.y>.15)rgb.rb = clamp(rgb.rb,0.,1.5*rgb.g);\n            \n        \n        \n        \n\t\t// color\n        col = rgb*brdf;\n\t\tcol = mix(vec3(0.8,0.8,1.),col,exp(-0.01*t));\n        \n\n\t}\n\n\tfragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}