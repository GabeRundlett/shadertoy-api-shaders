{
    "Shader": {
        "info": {
            "date": "1673523554",
            "description": "Just playing around really. Mouse changes colour parameters. I can't believe no one has made a shader called \"Loop\" before!",
            "flags": 16,
            "hasliked": 0,
            "id": "ctS3zV",
            "likes": 10,
            "name": "Loop",
            "published": 3,
            "tags": [
                "sdf",
                "loop",
                "xor"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "float circle(vec2 p, vec2 centre, float r) {\n  p -= centre;\n  return length(p) - r;\n}\n\nfloat xor(float d0, float d1) {\n  return min(max(d0,d1),max(-d0,-d1));\n}\n\nvec2 dup(vec2 p, float k) {\n  return mod(p+k,2.0*k)-k;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  float scale = 10.0;\n  if (key(CHAR_Z)) scale *= 2.0;\n  vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  p *= scale;\n  float px = 0.5*fwidth(p.x);\n  float d = 1e8;\n  float t = -log2(length(p));\n  float loop = 64.0;\n  t += mod(0.5*iTime,loop);\n  t = round(t);\n  int t0 = int(mod(t,loop));\n  t -= mod(0.5*iTime,loop);\n  float r = exp2(-t);\n  float k = 0.25;\n  k *= 2.0*float(ihash(uint(t0)))/exp2(32.0);\n  k = exp2(k);\n  float e = circle(p,vec2(0),r/k);\n  float f = circle(p,vec2(0),r*k);\n  d = min(d,max(f,-e));\n  vec3 fg = vec3(0.5);\n  vec3 bg = vec3(1);\n  if (!key(CHAR_C) && d < 0.0) {\n    float h = float(ihash(uint(t0^1)))/exp2(32.0);\n    float inc = iMouse.x <= 0.0 ? 0.5 : iMouse.x/iResolution.x;\n    float s = iMouse.x <= 0.0 ? 1.0 : iMouse.y/iResolution.y;\n    fg = hsv2rgb(h,s,1.0); bg = hsv2rgb(h+inc,s,1.0);\n  }\n  vec2 p1 = dup(p,1.0);\n  float d1 = circle(p1,vec2(0),1.0);\n  d = xor(d,d1);\n  float s = max(abs(p.x),abs(p.y));\n  s -= 2.0;\n  s *= 0.25;\n  s = round(s);\n  s /= 0.25;\n  s += 2.0;\n  e = max(abs(p.y)-s+1.0,abs(p.x)-s+1.0);\n  f = max(abs(p.y)-s-1.0,abs(p.x)-s-1.0);\n  d = xor(d,max(f,-e));\n  vec3 col = mix(fg,bg,smoothstep(-px,px,d));\n  col *= smoothstep(0.0,2.0*px,abs(d)-0.01);\n  float dir = mod(0.5*dot(round(p-p1),vec2(1)),2.0) < 0.5 ? -1.0 : 1.0;\n  if (length(p1) < 1.0) col *= 0.5-0.5*cos(0.3*PI*d1/px+2.0*dir*(PI*iTime+atan(p1.y,p1.x)));\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const int CHAR_A = 65;\nconst int CHAR_C = 67;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n\nconst float PI = 3.141592654;\n\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing       \n  return v * mix( vec3(1.0), rgb, s);\n}\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n  x += 0x12345678u;\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}