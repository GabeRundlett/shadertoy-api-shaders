{
    "Shader": {
        "info": {
            "date": "1723279477",
            "description": "tunne remakel from glslsanbox",
            "flags": 0,
            "hasliked": 0,
            "id": "McsBRr",
            "likes": 1,
            "name": "tunell to white house",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 96
        },
        "renderpass": [
            {
                "code": "\n#define dmin(a,b) a.x < b.x ? a : b\n#define pmod(a,x) mod(a, x) - x*0.5\n\n#define mx (0.*iTime+20.*iMouse.x/iResolution.x)\n#define pi acos(-1.)\n\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n\n\nfloat speed = 0.1750;\n#define time iTime\n#define resolution iResolution.xy\nfloat ball(vec2 p, float fx, float fy, float ax, float ay)\n{\n\tvec2 r = vec2(p.x + sin(time*speed / 2.0 * fx) * ax * 4.0, p.y + cos(time*speed/ 2.0 * fy) * ay * 4.0);\t\n\treturn .027 / length(r / sin(fy * time * 0.1));\n}\n//check out variations!\n//#define VAR1\n//#define VAR2\n#define VARENDLESS\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0), dir));\n\tvec3 up = normalize(cross(dir, right));\n\treturn normalize(dir + right*uv.x + up*uv.y);\n}\n\nfloat sdBox(vec3 p, vec3 s){\n\tp = abs(p) - s;\n\treturn max(p.x, max(p.z, p.y));\n}\nvec3 u;\nfloat zid;\nfloat repD = 1.;\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e5);\n\tvec3 o = p;\n    zid = floor(p.z/repD);\n    p.z = mod(p.y, repD);\n\n    vec3 q = p;\n    u = p*(2. + floor(mod(p.x, repD*2.)/(repD*2.)));\n    \n    p = abs(p);\n    \n    p.x -= 2.15;\n    p.y -= 2.13;\n    p = abs(p);\n    p.yz *= rot(zid*pi*0.25);\n    p.xy *= rot(0.25*pi);\n       p.yz *= rot(0.15*pi*iTime);\n    \n  \n   \t\n    d = dmin(d, vec2(sdBox(p, vec3(1,2,1)), 1.));\n  \n    d.x = max(d.x, -u.z  );\n  \n    d.x = max(d.x, u.z - 4.9  );\n    d.x *= 0.5;\n    return d;\n}\n\nvec3 getNormal(vec3 p){\n\n\tvec2 t = vec2(0.001, 0);\n    return normalize(map(p).x - vec3(\n    \tmap(p - t.xyy).x,\n    \tmap(p - t.yxy).x,\n    \tmap(p - t.yyx).x\n    ));\n    \n}\nvec3 glow = vec3(0);\n\nvec2 march(vec3 ro, vec3 rd, inout float t,inout bool hit, inout vec3 p){\n\tvec2 d;\n      ro.z+=iTime;\n\tp = ro + rd;\n    \n    for (int i = 0; i < 270; i++){\n    \td = map(p);\n        glow += exp(-d.y);\n        if(d.x < 0.001){\n        \thit = true;\n            break;\n        }\n        //if (t > 60.){break;}\n        t += d.x;\n        p = ro + rd*t;\n    }\n    \n\treturn d;\n}\n\n\n#define pal(a,b,c,d,e) (a + b*cos( (c*d + e)))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\n\tvec2 p = ( gl_FragCoord.xy / resolution.xy ) * 2.0 - 1.0;\n\tp.x *= resolution.x / resolution.y;\n\t\n\tfloat col4 = 0.0 ,col2 = 0.0;\n\tcol += ball(p, 31.0, 22.0, 0.03, 0.09);\n\tcol += ball(p, 22.5, 22.5, 0.04, 0.04);\n\tcol += ball(p, 12.0, 23.0, 0.05, 0.03);\n\tcol += ball(p, 32.5, 33.5, 0.06, 0.04);\n\tcol += ball(p, 23.0, 24.0, 0.07, 0.03);\t\n\tcol += ball(p, 21.5, 22.5, 0.08, 0.02);\n\tcol += ball(p, 33.1, 21.5, 0.09, 0.07);\n\tcol += ball(p, 23.5, 32.5, 0.09, 0.06);\n\tcol += ball(p, 14.1, 13.5, 0.09, 0.05);\n\t\n\tcol2 += ball(p, 22.0, 27.0, 0.03, 0.05);\n\tcol2 += ball(p, 12.5, 17.5, 0.04, 0.06);\n\tcol2 += ball(p, 23.0, 17.0, 0.05, 0.02);\n\tcol2 += ball(p, 19.5, 23.5, 0.06, 0.09);\n\tcol2 += ball(p, 33.0, 14.0, 0.07, 0.01);\t\n\tcol2 += ball(p, 11.5, 12.5, 0.08, 0.04);\n\tcol2 += ball(p, 23.1, 11.5, 0.09, 0.07);\n\tcol2 += ball(p, 13.5, 22.5, 0.09, 0.03);\n\tcol2 += ball(p, 14.1, 23.5, 0.09, 0.08);\n    vec3 ro = vec3(0.,0.,0. + mx);\n    vec3 lookAt = ro + vec3(0,0,1.);\n  \n    vec3 rd = getRd(ro, lookAt, uv);\n\n    vec3 p2;\n    float t = 0.; bool hit = false;\n    vec2 d = march(ro, rd, t, hit, p2);\n    \n    vec3 n = getNormal(ro + rd.x*t);\n    \n    if(hit){\n    \t//col += n;\n    \t//u.xy *= rot(0.15*pi + iTime);\n        if (d.y == 1.){\n        \tvec3 q = p2;\n            \n            float repD=7.;\n            float w = 2.8;\n         \n            q *= 2.;\n           \n    \t\tzid = floor(p2.z/repD);\n            \n            q = abs(q);\n            \n\n           \n            float id = floor(max(abs(q.x)*repD, abs(q.y)*repD)*0.95) + 1.;\n            float sqs = abs((mod(max(abs(q.x), max(abs(q.y),q.z)) , 1.) - 0.5)*repD); \n            sqs = abs((mod(max(abs(q.x), max(abs(q.y),q.z)) , 1.) - 0.5)*repD); \n            \n            w += sin(id*9.)*3.;\n       \n        \tcol += smoothstep(w,w*0.5, sqs)*pal(0.5,0.5,vec3(2,3,3),id ,iTime*1. + zid*0.6 + 9.*id);\n        \tcol -= abs(sin(id*5. + iTime))*0.4;\n        }\n    }\n   \n    col += pow(glow*0.03,vec3(6.))*0.1;\n   \n    col = pow(col, vec3(1.0,1.0,2.0));\n    //col.b *= 0.8;\n    \n    col *= pow(glow*0.03,vec3(1.))*0.28;\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}