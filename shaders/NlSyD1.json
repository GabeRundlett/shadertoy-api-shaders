{
    "Shader": {
        "info": {
            "date": "1649580367",
            "description": "See these sites.  https://www.osar.fr/notes/logspherical/, https://github.com/pac-dev/notes/blob/master/content/logspherical/logpolar_polka.glsl",
            "flags": 0,
            "hasliked": 0,
            "id": "NlSyD1",
            "likes": 7,
            "name": "log polar polka",
            "published": 3,
            "tags": [
                "fold",
                "logpolar"
            ],
            "usePreview": 0,
            "username": "takahiroando",
            "viewed": 259
        },
        "renderpass": [
            {
                "code": "#define PI 3.14151692\n\n#define rho_offset fract(0.5 + 0.5 * iTime) //dspnote param: 0 - 1\n#define theta_offset fract(0.5 + 0.5 * iTime) //dspnote param: 0 - 1\n\nfloat scale = 6.0/PI;\nvec3 diskColor = vec3(0.4, 0.4, 0.3);\nvec3 hBarColor = vec3(0.2, 1.0, 0.2);\nvec3 vBarColor = vec3(1.0, 0.2, 0.2);\n\nvec2 logPolar(vec2 p) {\n\tp = vec2(log(length(p)), atan(p.y, p.x));\n\treturn p;\n}\n\nfloat line(float pos, float aaSize) {\n\treturn smoothstep(-1.3*aaSize, -0.5*aaSize, pos) - \n\t\tsmoothstep(0.5*aaSize, 1.3*aaSize, pos);\n}\n\nfloat disk(vec2 pos, float aaSize) {\n\treturn 1.0-smoothstep(0.3-aaSize, 0.3+aaSize, length(pos));\n}\n\nvec3 polka(vec2 p, float aaSize) {\n\tp *= scale;\n\tvec2 diskP = p - vec2(rho_offset, theta_offset)*3.0;\n\tdiskP = fract(diskP) * 2.0 - 1.0;\n\tvec3 ret = vec3(1.0);\n\tret = mix(ret, diskColor, disk(diskP, aaSize));\n\tret = mix(ret, hBarColor, line(p.x, aaSize));\n\tret = mix(ret, vBarColor, line(p.y, aaSize));\n\treturn ret;\n}\n\nvec3 cartesianPolka(vec2 p) {\n\tp *= 4.0;\n\tfloat aaSize = length(1.0/iResolution.xy) * 7.0;\n\tvec3 ret = polka(p, aaSize);\n    \n    // <darken outside>\n\tif (p.y < -PI || p.y > PI)\n\t\tret *= 0.6;\n    // </darken outside>\n    // <darken negative area>\n\telse if (p.x < -0.0)\n\t\tret *= 0.8;\n    // </darken negative area>\n    \n    return ret;\n}\n\nvec3 logPolarPolka(vec2 p) {\n\tp *= 4.0;\n    vec2 lpp = logPolar(p);\n\tfloat aaSize = length(lpp - logPolar(p+1.0/iResolution.xy)) * 7.0;\n\tvec3 ret = polka(lpp, aaSize);\n\n    // <darken outside> (no meaning)\n\tif (lpp.y < -PI || lpp.y > PI)\n\t\tret *= 0.6;\n    // </darken outside>\n    // <darken negative area>\n\tif (lpp.x < -0.0)\n\t\tret *= 0.8;\n    // </darken negative area>\n\n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (2.0 * gl_FragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec2 quarter = vec2(1.0, 0.0);\n\tvec3 ret;\n\tif (p.x < 0.0)\n\t\tret = cartesianPolka(p + quarter);\n\telse\n\t\tret = logPolarPolka(p - quarter);\n\tfragColor = vec4(ret, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}