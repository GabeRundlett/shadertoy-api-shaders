{
    "Shader": {
        "info": {
            "date": "1550254900",
            "description": "analytical ray-intersection, allowing free antialiasing and all 2D-shaders goodies.\nColor = intersection levels. ( texture ignores it and is mapped on nearest surface ).\n\nMouse controls shape (or auto-demo ).",
            "flags": 0,
            "hasliked": 0,
            "id": "tsBGWt",
            "likes": 19,
            "name": "analytical ray-sink intersection",
            "published": 3,
            "tags": [
                "cubic",
                "polynomial",
                "tuto",
                "solve",
                "degree3"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 669
        },
        "renderpass": [
            {
                "code": "// variant of  https://shadertoy.com/view/ws23D3\n// analytical ray - sink intersection ( solving cubic polynomial ).\n\n// NB: cleaner code in this version: https://www.shadertoy.com/view/wsBGWd\n\n// --- render scene\n// sink shape: P.z = m / ( h + |P.xy|²)  ; solve with ray P = P0+lD\nfloat m =  1.,       // amplitude factor\n      h = 1./3.;     // inv heap\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    float t = iTime-9.2;\n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y,\n         M = iMouse.z > 0. ? iMouse.xy / R \n                           : vec2(.4+.3*sin(4.7*t),.5+.5*cos(t));\n    m = 20.*M.x;\n    h = m/M.y/4.;\n    \n    // --- set camera     \n    vec3 P = .8*vec3(0., 5.5, 6),\n      look = normalize( vec3(0,0,1.7) - P ),\n    //vec3 P = .8*vec3(0., 7.5, 4),\n    //  look = normalize( vec3(0,0,-1.5) - P ),\n     right = normalize(cross(look, vec3(0,0,1))),\n        up = cross( right, look ),\n         D = normalize( look*3. + U.x*right + U.y*up );\n   \n    // --- Solving a*x³ +b*x³ +c*x +d = 0. -> l = min(3 solutions)\n    // using \"solving cubic polynomial\"  https://shadertoy.com/view/3d23Dc\n    // here: ( h + P² +2lP.D + l²D²)xy * (P  + lD)z = m\n    float a =   dot(D.xy,D.xy)*D.z,\n          b = ( dot(D.xy,D.xy)*P.z +2.*dot(P.xy,D.xy)*D.z ) /a, \n          c = ( dot(P.xy,P.xy)*D.z +2.*dot(P.xy,D.xy)*P.z +h*D.z ) /a, \n          d = ( dot(P.xy,P.xy)*P.z +h*P.z - m ) /a,\n        p = ( 3.*c - b*b ) / 3.,\n        q = ( 9.*b*c - 27.*d - 2.*b*b*b) / 27., // -\n        Q = p/3., r = q/2., \n        v,z, l, A, k = -1.;\n    \n    if ( Q*Q*Q + r*r < 0.) {                    // --- if 3 sol\n        A = acos(r/sqrt(-Q*Q*Q)), \n        k = round(1.5-A/6.283); // k = 0,1,2 ; we want min l\n#define sol(k) ( 2.*sqrt(-Q)* cos((A+(k)*6.283)/3.) - b/3. )\n        l = sol(k);\n    }\n    else                                        // --- if 1 sol\n        if (p>0.) v = -2.*sqrt(p/3.), \n#define asinh(z) ( sign(z)*asinh(abs(z)) )      // fix asinh() symetry error \n                  l = -v* sinh(asinh(3.*-q/p/v)/3.) -b/3.; \n        else      v = -2.*sqrt(-p/3.), \n                  l = sign(-q)*v* cosh(acosh(3.*abs(q)/p/v)/3.) -b/3.;\n\n    // --- display\n\n    if (l<0.) { O-=O; return; }\n    vec3 W,X;// = P + l*D;\n    P.xy += t; \n                                                 // draw grid\n#define draw(l) ( X = P + (l)*D  ,                      \\\n               /* X = abs(1.-2.*fract(4.*X)) -.8, */    \\\n                  X = 1. - abs(.5-fract(4.*X))/fwidth(4.*X),\\\n               /* X = sin(15.*X)-.9, */                 \\\n                  W = fwidth(X),                        \\\n                  X = smoothstep(-.75,.75,X/W),         \\\n                  max(X.x,X.y) )\n    O = vec4( draw(l));\n    if (k>=0.) {                                 // hidden parts in color\n        O.ra += (1.-O.a)* draw(sol(mod(k+1.,3.)));\n        O.ba += (1.-O.a)* draw(sol(mod(k+2.,3.)));\n    }\n    O.rgb *= exp(-.1*l);\n    \n#if 1    \n    P += l*D;                                    // draw texture\n    O += (1.-O.a)* 2.*texture(iChannel0,.3*P.xy) * exp(-.1*l);\n  //O = vec4( exp(-.1*l));\n  //O = vec4(.5+.5*sign(P)*fract(3.*P),0);\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}