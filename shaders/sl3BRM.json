{
    "Shader": {
        "info": {
            "date": "1662790176",
            "description": "Yet another fractal mosaic pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "sl3BRM",
            "likes": 17,
            "name": "Fractal mosaic 14",
            "published": 3,
            "tags": [
                "fractal",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 393
        },
        "renderpass": [
            {
                "code": "#define fmod(x,y) mod(floor(x),y)\n\nvec2 f1(vec2 a){\n    return\n        fract(a)\n        //fract(a-floor(a.y)/2.)\n    ;\n}\n\nvec2 triangle_wave(vec2 a){\n    \n\n    vec2 a2 = //change this constant to get other interesting patterns\n        vec2(1.,0.5)\n        //vec2(-2.,.5+mod(floor(a.x),2.))\n\n        \n        //vec2(1.5,0.)\n        //vec2(2.5,-1.)\n        //vec2(1.25,1.75)\n        //vec2(abs(mod(a.x-.5,2.)-1.),abs(mod(a.y-.5,2.)-1.))\n    ,\n    \n    a1 =\n        a+a2\n        //a+a2+floor(a.x)\n        //a+a2+floor(a.y)\n    ;\n    //a1 += (distance(floor(a1),round(a1)))/1.5;\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n    return\n        abs(f1((a1)*(a2.x+a2.y))-.5)\n        //abs(fract(a)-.5)\n    ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 16.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.x += iTime/t1/12.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    for(int k = 0; k < 12; k++){\n        //uv += floor(uv+vec2(1.,.5))/1.5;\n        //bool c1 = t2.x < uv.x;\n        uv =\n            (uv+t2)/scale\n            //max(abs(.5+uv+t2),abs(-.5+uv+t2))/scale\n        ;\n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*1.5)-.5)/1.5;\n        //uv += (distance(floor(uv),round(uv+.5)));\n        //uv += floor(uv);\n        \n        //uv = uv.yx;\n        t2 =\n            triangle_wave(uv+.5)\n            //triangle_wave(uv+.5+floor(uv.y+.5))\n        ;\n        uv =\n            t2-triangle_wave(uv.yx)\n            \n            //this pattern is amazing!\n            //t2-triangle_wave(uv.yx+floor(uv.y-uv.x))\n            \n            //t2-triangle_wave(uv.yx)-fract(t2/2.)\n            \n            //t2*length(uv)-triangle_wave(uv.yx)\n        ;\n        \n        //uv.x += sign(uv.y-uv.x)-.5;\n\n        //uv.x -= max(uv.y,-uv.x)/2.;\n\n        \n        col.x = max(max(max(t2.y,t2.x),abs(uv.y-uv.x))/3.,col.x);\n        col =\n            abs(col-(1.-col.x));\n            //abs(col*col-(1.-col.x));\n            //abs(col-(1.-col.x*col.x));\n        //if(c1) col = abs(abs(col.yzx-1.)-col);\n    }\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod2(float a, float b){\n    return mod(floor(a),b)*b;\n}\n\nfloat fmod1(float a, float b){\n    //a += fmod2(a,2.);\n    for(float i = 1.; i < mod(floor(a/b),5.); i++){\n        a += mod(floor(a/2.),b)*i;\n        a *= 1.+mod(floor(a)*2.,2.);\n        i /= 1.+mod(floor(a)*2.,2.);\n    }\n    float a1 = a;\n    return\n        mod(floor(a),b)\n        //mod(floor(floor(floor(a)*b)/3.),b)\n        //abs(2.-mod(floor(a+2.),b*2.))\n        //mod(mod(floor(a/2.),b+4.),b)\n        //mod(mod(floor(a+4.),floor(a/8.+4.)),b)\n        //mod(floor(a*sign(.5-mod(floor(a*4./b),2.))),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    return\n        fmod1(a,b)\n        //mod(fmod1(a/2.,b)*fmod1(a,b*4.),8.)\n    ;\n}\n\n\nvec2 mainSound(int samp, float time){\n  float tempo = .5;\n  \n  float s1 =\n      8.;\n  for(float i = 1.; i < mod(floor(time),5.); i++){\n      time += mod(floor(time/2.),s1)*i;\n      tempo *= 1.+fmod(floor(time)*2.,2.);\n      time /= 1.+fmod(floor(time/tempo)*2.,2.);\n  }\n  time /= tempo;\n  float s2 = 8.,\n  t=\n      time,\n  m1 =\n      fmod(t,s2)\n  ,\n  m3 =\n      fmod(t,1.+m1)+fmod(t/8.,2.);\n  /*\n  for(int i = 0; i < 2; i++){\n      t += mod(floor(t*4.),2.);\n  }\n  */\n  t /=\n      (1.+fmod(t/s1,2.))*4./s1/s1\n  ;\n  float m2 =\n      1. + fmod(t/s1,s1)\n  ;\n  float a=\n      64.*(1.-sqrt(fract(t/s1)/1.25))*.2\n  ,\n  nb = time*tempo*pow(2.,floor((m3+m2)/2.)/5.+6.5);\n  return\n      abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a\n  ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}