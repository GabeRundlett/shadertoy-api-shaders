{
    "Shader": {
        "info": {
            "date": "1725924006",
            "description": "shader",
            "flags": 0,
            "hasliked": 0,
            "id": "l3lyz4",
            "likes": 1,
            "name": "shader)",
            "published": 3,
            "tags": [
                "shader"
            ],
            "usePreview": 0,
            "username": "olegg",
            "viewed": 94
        },
        "renderpass": [
            {
                "code": "struct Surface {\n  float sd;\n  vec3 color;\n};\n\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nSurface minSD(in Surface s1, in Surface s2) {\n    if (s1.sd < s2.sd) {\n        return s1;\n    }\n    return s2;\n}\n\nSurface sphere ( in vec3 p, in vec3 offset )\n{\n    return Surface(length ( p - offset ) - 1.0, vec3(1, 0.5, 0.5));\n}\n\nSurface torus ( in vec3 pos, in vec2 t, in vec3 offset ) {\n    vec3 pt = (pos - offset) * rotateX(iTime * 0.3) * rotateY(iTime * 0.2) * rotateX(iTime * 0.5);\n    vec2 q  = vec2 ( length ( pt.xz) - t.x, pt.y );\n\n    return Surface(length ( q ) - t.y, vec3(0, 1, 0));\n}\n\nSurface cube ( in vec3 pos, in vec3 offset)\n{\n    vec3 pt = abs ((pos - offset) * rotateX(iTime) * rotateY(iTime) * rotateZ(iTime)) - 1.0;\n    Surface cube1 = Surface(length ( max ( pt, 0.0 ) ) + min ( max ( pt.x, max ( pt.y, pt.z ) ), 0.0 ), vec3(0, 0, 1));\n    vec3 pt2 = abs ((pos - offset) * rotateX(iTime + 1.) * rotateY(iTime) * rotateZ(iTime)) - 1.0;\n    Surface cube2 = Surface(length ( max ( pt2, 0.0 ) ) + min ( max ( pt2.x, max ( pt2.y, pt2.z ) ), 0.0 ), vec3(0, 0, 1));\n\n    return minSD(cube1, cube2);\n}\n\nSurface sdfFloor(vec3 p) {\n  return Surface(p.y + 10., vec3(cos(p.x), 0, cos(p.z)) + vec3(1));\n}\n\n\nSurface sdfScene(in vec3 p) {\n    return minSD(minSD(minSD(torus(p, vec2(1, 0.5), vec3(-3, 0, -4)), sphere(p, vec3(4, 1, -3))), sdfFloor(p)), cube(p, vec3(1, 0, -2)));\n}\n\n\n\nvec3 generateNormal ( vec3 z )\n{\n    float e = 0.001;\n    float dx1 = sdfScene(z + vec3(e, 0, 0)).sd;\n    float dx2 = sdfScene(z - vec3(e, 0, 0)).sd;\n    float dy1 = sdfScene(z + vec3(0, e, 0)).sd;\n    float dy2 = sdfScene(z - vec3(0, e, 0)).sd;\n    float dz1 = sdfScene(z + vec3(0, 0, e)).sd;\n    float dz2 = sdfScene(z - vec3(0, 0, e)).sd;\n    \n    return -normalize ( vec3 ( dx1 - dx2, dy1 - dy2, dz1 - dz2 ) );\n}\n\n\n#define MAX_ITERS   250\n#define MAX_DIST    200.0\nvec3 trace ( vec3 from, vec3 dir, out bool hit, out int steps )\n{\n    vec3     p         = from;\n    float    totalDist = 0.0;\n    \n    hit = false;\n    \n    for ( steps = 0; steps < MAX_ITERS; steps++ )\n    {\n        Surface    dist = sdfScene( p );\n        \n        if ( dist.sd < 0.00001 )\n        {\n            hit = true;\n            break;\n        }\n        \n        totalDist += dist.sd;\n        \n        if ( totalDist > MAX_DIST )\n            break;\n            \n        p += dist.sd * dir;\n    }\n    \n    return p;\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n    vec3 cd = normalize(lookAtPoint - cameraPos); // camera direction\n    vec3 cr = normalize(cross(vec3(0, 1, 0), cd)); // camera right\n    vec3 cu = normalize(cross(cd, cr)); // camera up\n\n    return mat3(-cr, cu, -cd);\n}\n\nmat2 rotate2d(float theta) {\n  float s = sin(theta), c = cos(theta);\n  return mat2(c, -s, s, c);\n}\n\nvec3 powVec3(vec3 vec, float num) {\n    vec.x = pow(vec.x, num);\n    vec.y = pow(vec.y, num);\n    vec.z = pow(vec.z, num);\n    return vec;\n}\n\n\n#define PI 3.14159\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec2 mouseUV = iMouse.xy/iResolution.xy;\n  if (mouseUV == vec2(0, 0)) {\n      mouseUV = vec2(0.5, 0.5);\n  }\n  vec3 col = vec3(0.1, 0.1, 0.1);\n  vec3 lp = vec3(0, 0, 0); // lookat point (aka camera target)\n  vec3 ro = vec3(0, 3, 3); // ray origin that represents camera position\n  float cameraRadius = 2.;\n  ro.yz = ro.yz * cameraRadius * rotate2d(mix(PI/2., 0., mouseUV.y));\n  ro.xz = ro.xz * rotate2d(mix(-PI, PI, mouseUV.x)) + vec2(lp.x, lp.z); \n  vec3 rd = camera(ro, lp) * normalize(vec3(uv, -1)); // ray direction\n  vec3 light = vec3(1, 6, 6);\n  bool hit;\n  int steps;\n  vec3 p = trace(ro, rd, hit, steps);\n  vec3 light_dir = normalize(p - light);\n  vec3 normal = generateNormal(p);\n  if (hit) {\n      vec3 specular = pow(max(0., dot(normalize(light_dir + normalize(rd)), normal)), 500.) * vec3(1, 1, 1); \n      col = max(0.25, dot(normal, light_dir)) * sdfScene(p).color + specular;\n      vec3 light_p = trace(light, light_dir, hit, steps);\n      if (length(light_p - p) > 0.1) {\n          col *= 0.5;\n      }\n      \n  }\n  fragColor = vec4(powVec3(col, 1.2), 1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}