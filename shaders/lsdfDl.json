{
    "Shader": {
        "info": {
            "date": "1528005910",
            "description": "Mouse moves the camera",
            "flags": 32,
            "hasliked": 0,
            "id": "lsdfDl",
            "likes": 6,
            "name": "Refract",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "refraction",
                "antialiasing",
                "refract"
            ],
            "usePreview": 1,
            "username": "felipunkerito",
            "viewed": 663
        },
        "renderpass": [
            {
                "code": "//FXAA Shader taken from this great example by reinder - from https://www.shadertoy.com/view/ls3GWS\n//Original code - http://www.geeks3d.com/20110405/fxaa-fast-approximate-anti-aliasing-demo-glsl-opengl-test-radeon-geforce/3/\n\n#define ON\n\n\n#define FXAA_SPAN_MAX 128.0\n#define FXAA_REDUCE_MUL   (1.0/FXAA_SPAN_MAX)\n#define FXAA_REDUCE_MIN   (1.0/256.0)\n#define FXAA_SUBPIX_SHIFT (1.0/8.0)\n\nmat2 rot( float a )\n{\n    \n    return mat2( cos( a ), -sin( a ),\n                 sin( a ),  cos( a )\n                );\n    \n}\n\nvec3 FxaaPixelShader( vec4 uv, sampler2D tex, vec2 rcpFrame) {\n    \n    vec3 rgbNW = textureLod(tex, uv.zw, 0.0).xyz;\n    vec3 rgbNE = textureLod(tex, uv.zw + vec2(1,0)*rcpFrame.xy, 0.0).xyz;\n    vec3 rgbSW = textureLod(tex, uv.zw + vec2(0,1)*rcpFrame.xy, 0.0).xyz;\n    vec3 rgbSE = textureLod(tex, uv.zw + vec2(1,1)*rcpFrame.xy, 0.0).xyz;\n    vec3 rgbM  = textureLod(tex, uv.xy, 0.0).xyz;\n\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n\n    float dirReduce = max(\n        (lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),\n        FXAA_REDUCE_MIN);\n    float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);\n    \n    dir = min(vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),\n          max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n          dir * rcpDirMin)) * rcpFrame.xy;\n\n    vec3 rgbA = (1.0/2.0) * (\n        textureLod(tex, uv.xy + dir * (1.0/3.0 - 0.5), 0.0).xyz +\n        textureLod(tex, uv.xy + dir * (2.0/3.0 - 0.5), 0.0).xyz);\n    vec3 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (\n        textureLod(tex, uv.xy + dir * (0.0/3.0 - 0.5), 0.0).xyz +\n        textureLod(tex, uv.xy + dir * (3.0/3.0 - 0.5), 0.0).xyz);\n    \n    float lumaB = dot(rgbB, luma);\n\n    if((lumaB < lumaMin) || (lumaB > lumaMax)) return rgbA;\n    \n    return rgbB; \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 rcpFrame = 1./iResolution.xy;\n  \tvec2 uv = fragCoord.xy / iResolution.xy;  \n    \n    #ifdef ON\n        fragColor.rgb = FxaaPixelShader( vec4( uv, uv - (rcpFrame * (0.5 + FXAA_SUBPIX_SHIFT))), iChannel0, 1./iResolution.xy );\n        fragColor.a = texture( iChannel0, uv ).a;\n    #else\n    \tfragColor = texture(iChannel0, uv);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define EPS      0.002\n#define STEPS     1028\n#define FAR      100.0\n#define PI acos( -1.0 )\n#define TWOPI PI * 2.0\n\nfloat hash( float n ) { return fract(sin(n)*43758.5453123); }\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n\nfloat fbm(vec3 uv)\n{\n\tfloat f;\n\tmat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\tf  = 0.5000*noise( uv ); uv = m*uv*2.01;\n\tf += 0.2500*noise( uv ); uv = m*uv*2.02;\n\tf += 0.1250*noise( uv ); uv = m*uv*2.03;\n\tf += 0.0625*noise( uv ); uv = m*uv*2.01;\n//\tf = 0.5 + 0.5*f;\n\treturn f;\n}\n\n\nfloat sph( vec3 p, float r )\n{\n\n    return length( p ) - r;\n    \n}\n\nfloat pla( vec3 p, float d )\n{\n\n    return p.y + d;\n\n}\n\nvec2 map( vec3 p )\n{\n\n    float r = 1.0 + 0.5 * cos( 5.0 * p.x + iTime ) * cos( 2.0 * p.y + iTime ) * cos( 4.0 * p.z + iTime );\n    float wav = texture( iChannel1, vec2( 0.0, 0.15 ) ).x;\n    float siz = 5.0;\n    float hal = siz * 0.5;\n    //p = mod( p, siz ) - hal;\n    vec2 sp = vec2( sph( p, 1.0 + fbm( p + iTime * 0.1 + wav ) * 0.1 ), 0.0 );\n    vec2 pl = vec2( pla( p, 2.0 ), 1.0 );\n    //if( sp.x < pl.x ) pl = sp;\n    return sp;\n\n}\n\nvec3 norm( vec3 p )\n{\n\n    vec2 e = vec2( EPS, 0.0 );\n    return normalize( vec3( map( p + e.xyy ).x - map( p - e.xyy ).x,\n                            map( p + e.yxy ).x - map( p - e.yxy ).x,\n                            map( p + e.yyx ).x - map( p - e.yyx ).x\n                          ) );\n    \n}\n\nfloat ray( vec3 ro, vec3 rd, out float d )\n{\n\n    float t = 0.0;\n    d = EPS;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n        d = 0.5 * map( ro + rd * t ).x;\n        if( d < EPS || t > FAR ) break;\n        t += d;\n    \n    }\n    \n    return t;\n\n}\n\nvec3 shad( vec3 ro, vec3 rd )\n{\n\n    float d = 0.0;\n    float t = ray( ro, rd, d );\n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n    vec3 text = ( texture( iChannel0, refract( rd, n, 1.0 / 1.460 ) ).rgb );\n    vec3 texR = texture( iChannel0, reflect( rd, n ) ).rgb;\n    vec3 ref = reflect( rd, n );\n    vec3 lig = normalize( vec3( 1.0, 0.8, 0.6 ) );\n    vec3 blig = vec3( -lig.x, -lig.y, -lig.z );\n    vec3 col = vec3( 0.0 );\n    float spe = pow( clamp( dot( lig, ref ), 0.0, 1.0 ), 16.0 );\n    float speO = pow( clamp( dot( blig, ref ), 0.0, 1.0 ), 16.0 );\n    \n    //rd = texture( iChannel0, refract( rd, n, 1.352 ) ).rgb * 0.05;\n    \n    col = text;\n    col += 1.0 * spe;\n    col += 1.0 * speO;\n    \n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n    \n    vec2 mou = iMouse.xy / iResolution.xy;\n    \n    if( mou.x == 0.0 ) mou = vec2( 0.0, 0.7 );\n    \n    vec3 ro = 3.0 * mou.y * vec3( sin( mou.x * TWOPI ), 0.0, cos( -mou.x * TWOPI ) );\n    vec3 ww = normalize( vec3( 0.0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0.0, 1.0, 0.0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n    \n    //vec3 rd = normalize( vec3( uv, -1.0 ) );\n\n    float d = 0.0;\n    float t = ray( ro, rd, d );\n    \n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n    \n    vec3 tex = texture( iChannel0, rd ).rgb;\n    \n    // Time varying pixel color\n    vec3 col = d < EPS ? shad( ro, rd ) : tex;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}