{
    "Shader": {
        "info": {
            "date": "1626836762",
            "description": "the game pong\nleft uses shift and ctrl to move, right uses up and down arrows",
            "flags": 48,
            "hasliked": 0,
            "id": "7tsSWl",
            "likes": 3,
            "name": "Pong as a shader",
            "published": 3,
            "tags": [
                "game",
                "pong"
            ],
            "usePreview": 0,
            "username": "BigChungus21220",
            "viewed": 297
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    ivec2 iCoord = ivec2(fragCoord);\n    if (iCoord.y == 0) {\n        col = vec4(1); //color over data pixels\n    }\n    fragColor = vec4(col.rgb, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nto do\n- add enemy ai option\n*/\n\n//vars\nfloat ball_screen_per_frame = 0.1;\nfloat paddle_screen_per_frame = 0.05;\nvec2 score;\nconst int ARROW_UP = 38;\nconst int ARROW_DOWN = 40;\nconst int SHIFT = 16;\nconst int CTRL = 17;\nconst int R = 82;\n\nfloat rand(vec2 uv){ // generate random numbers\n    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nbool scorepx( vec2 uv, vec2 offset){ // pixels for numbers\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    if (x <= 0.011 && x >= -0.011 && y <= 0.011 && y >= -0.011){\n        return true;\n    }\n    return false;\n}\n\nbool letter(vec2 uv, vec2 winpos, vec2 losepos){\nif(scorepx(uv,vec2(0,0)+winpos)||scorepx(uv,vec2(0,0.02)+winpos)||scorepx(uv,vec2(0,0.04)+winpos)||\nscorepx(uv,vec2(00,0.08)+winpos)||scorepx(uv,vec2(0.04,0)+winpos)||scorepx(uv,vec2(0.04,0.02)+winpos)||scorepx(uv,vec2(0.04,0.04)+winpos)||\nscorepx(uv,vec2(0.04,0.06)+winpos)||scorepx(uv,vec2(0.06,0.06)+winpos)||scorepx(uv,vec2(0.08,0)+winpos)||scorepx(uv,vec2(0.08,0.02)+winpos)||\nscorepx(uv,vec2(0.08,0.04)+winpos)||scorepx(uv,vec2(0.08,0.06)+winpos)||scorepx(uv,vec2(-0.04,0)+winpos)||scorepx(uv,vec2(-0.04,0.02)+winpos)||\nscorepx(uv,vec2(-0.04,0.04)+winpos)||scorepx(uv,vec2(-0.04,0.06)+winpos)||scorepx(uv,vec2(-0.06,0)+winpos)||scorepx(uv,vec2(-0.08,0)+winpos)||\nscorepx(uv,vec2(-0.08,0.02)+winpos)||scorepx(uv,vec2(-0.08,0.04)+winpos)||scorepx(uv,vec2(-0.08,0.06)+winpos)||scorepx(uv,vec2(-0.1,0)+winpos)||\nscorepx(uv,vec2(-0.12,0)+winpos)||scorepx(uv,vec2(-0.12,0.02)+winpos)||scorepx(uv,vec2(-0.12,0.04)+winpos)||scorepx(uv,vec2(-0.12,0.06)+winpos)){return true;}\nif(scorepx(uv,vec2(0,0)+losepos)||scorepx(uv,vec2(0,0.02)+losepos)||scorepx(uv,vec2(0,0.04)+losepos)||scorepx(uv,vec2(0,0.06)+losepos)||\nscorepx(uv,vec2(-0.02,0.06)+losepos)||scorepx(uv,vec2(-0.02,0)+losepos)||scorepx(uv,vec2(-0.04,0)+losepos)||scorepx(uv,vec2(-0.04,0.02)+losepos)||\nscorepx(uv,vec2(-0.04,0.04)+losepos)||scorepx(uv,vec2(-0.04,0.06)+losepos)||scorepx(uv,vec2(-0.08,0)+losepos)||scorepx(uv,vec2(-0.08,0.02)+losepos)||\nscorepx(uv,vec2(-0.08,0.04)+losepos)||scorepx(uv,vec2(-0.08,0.06)+losepos)||scorepx(uv,vec2(-0.08,0.08)+losepos)||scorepx(uv,vec2(0.04,0.06)+losepos)||\nscorepx(uv,vec2(0.06,0.06)+losepos)||scorepx(uv,vec2(0.08,0.06)+losepos)||scorepx(uv,vec2(0.04,0)+losepos)||scorepx(uv,vec2(0.06,0)+losepos)||\nscorepx(uv,vec2(0.08,0)+losepos)||scorepx(uv,vec2(0.08,0.02)+losepos)||scorepx(uv,vec2(0.06,0.04)+losepos)||scorepx(uv,vec2(0.04,0.04)+losepos)||\nscorepx(uv,vec2(0.12,0)+losepos)||scorepx(uv,vec2(0.14,0)+losepos)||scorepx(uv,vec2(0.16,0)+losepos)||scorepx(uv,vec2(0.12,0.02)+losepos)||\nscorepx(uv,vec2(0.12,0.04)+losepos)||scorepx(uv,vec2(0.14,0.04)+losepos)||scorepx(uv,vec2(0.16,0.04)+losepos)||scorepx(uv,vec2(0.12,0.06)+losepos)||\nscorepx(uv,vec2(0.14,0.06)+losepos)||scorepx(uv,vec2(0.16,0.06)+losepos)){return true;}\nreturn false;\n}\n\nbool num(float num, vec2 offset, vec2 uv){ // dump for num coords\nif(num==1.0&&(scorepx(uv,vec2(0,0)+offset)||scorepx(uv,vec2(0,0.02)+offset)||scorepx(uv,vec2(0,0.04)+offset)||scorepx(uv,vec2(0,0.06)+offset)\n||scorepx(uv,vec2(0,0.08)+offset)||scorepx(uv,vec2(-0.02,0.06)+offset)||scorepx(uv,vec2(0.02,0)+offset)||scorepx(uv,vec2(-0.02,0)+offset))){return true;}\nif(num==2.0&&(scorepx(uv,vec2(-0.02,0)+offset)||scorepx(uv,vec2(0.02,0)+offset)||scorepx(uv,vec2(0,0)+offset)||scorepx(uv,vec2(-0.02,0.02)+offset)\n||scorepx(uv,vec2(-0.02,0.04)+offset)||scorepx(uv,vec2(0.02,0.06)+offset)||scorepx(uv,vec2(0.02,0.08)+offset)||scorepx(uv,vec2(0,0.04)+offset)\n||scorepx(uv,vec2(0.02,0.04)+offset)||scorepx(uv,vec2(0,0.04)+offset)||scorepx(uv,vec2(0,0.08)+offset)||scorepx(uv,vec2(-0.02,0.08)+offset))){return true;}\nif(num==3.0&&(scorepx(uv,vec2(-0.02,0)+offset)||scorepx(uv,vec2(0.02,0)+offset)||scorepx(uv,vec2(0,0)+offset)||scorepx(uv,vec2(0.02,0.02)+offset)\n||scorepx(uv,vec2(-0.02,0.04)+offset)||scorepx(uv,vec2(0.02,0.06)+offset)||scorepx(uv,vec2(0.02,0.08)+offset)||scorepx(uv,vec2(0,0.04)+offset)\n||scorepx(uv,vec2(0.02,0.04)+offset)||scorepx(uv,vec2(0,0.04)+offset)||scorepx(uv,vec2(0,0.08)+offset)||scorepx(uv,vec2(-0.02,0.08)+offset))){return true;}\nif(num==4.0&&(scorepx(uv,vec2(0.02,0)+offset)||scorepx(uv,vec2(0.02,0.02)+offset)||scorepx(uv,vec2(-0.02,0.04)+offset)||scorepx(uv,vec2(-0.02,0.06)+offset)\n||scorepx(uv,vec2(0.02,0.06)+offset)||scorepx(uv,vec2(0.02,0.08)+offset)||scorepx(uv,vec2(0,0.04)+offset)||scorepx(uv,vec2(0.02,0.04)+offset)\n||scorepx(uv,vec2(0,0.04)+offset)||scorepx(uv,vec2(-0.02,0.08)+offset))){return true;}if(num>=5.0&&(scorepx(uv,vec2(-0.02,0)+offset)\n||scorepx(uv,vec2(0.02,0)+offset)||scorepx(uv,vec2(0,0)+offset)||scorepx(uv,vec2(0.02,0.02)+offset)||scorepx(uv,vec2(-0.02,0.04)+offset)\n||scorepx(uv,vec2(-0.02,0.06)+offset)||scorepx(uv,vec2(0.02,0.08)+offset)||scorepx(uv,vec2(0,0.04)+offset)||scorepx(uv,vec2(0.02,0.04)+offset)\n||scorepx(uv,vec2(0,0.04)+offset)||scorepx(uv,vec2(0,0.08)+offset)||scorepx(uv,vec2(-0.02,0.08)+offset))){return true;}\nreturn false;\n}\n\nbool winlose(vec2 uv){\n    vec2 winpos, losepos;\n    if (score.x >= 5.0){\n        winpos = vec2(-0.4,0);\n        losepos = vec2(0.4,0);\n        return letter(uv, winpos, losepos);\n    }\n    if (score.y >= 5.0){\n        winpos = vec2(0.4,0);\n        losepos = vec2(-0.4,0);\n        return letter(uv, winpos, losepos);\n    }\n    return false;\n}\n\nbool draw_score(vec2 uv) { // displays scores\n    bool score_r;\n    bool score_l;\n    vec2 r_offset = vec2(-0.1, 0.35);\n    vec2 l_offset = vec2(0.1, 0.35);\n    if (num(score.x, r_offset, uv)){ return true; }\n    if (num(score.y, l_offset, uv)){ return true; }\n    return false;\n}\n\nvoid paddleposition(inout vec2 paddlepos, inout vec2 paddlepos2){ // test inputs, move paddles\n    if (texelFetch(iChannel1, ivec2(ARROW_UP, 0), 0).x == 1.0 && paddlepos.y + 0.1 < 0.47){\n        paddlepos.y += paddle_screen_per_frame/6.0;\n    } else if (texelFetch(iChannel1, ivec2(ARROW_DOWN, 0), 0).x == 1.0 && paddlepos.y - 0.1 > -0.47){\n        paddlepos.y -= paddle_screen_per_frame/6.0;\n    }\n    if (texelFetch(iChannel1, ivec2(SHIFT, 0), 0).x == 1.0 && paddlepos2.y + 0.1 < 0.47){\n        paddlepos2.y += paddle_screen_per_frame/6.0;\n    } else if (texelFetch(iChannel1, ivec2(CTRL, 0), 0).x == 1.0 && paddlepos2.y - 0.1 > -0.47){\n        paddlepos2.y -= paddle_screen_per_frame/6.0;\n    }\n}\n\nvoid pos(inout vec2 pos, in vec2 paddlepos, in vec2 paddlepos2, inout vec2 direction){ // check ball collision, move ball\n    float ball_radius = 0.01;\n   \n    //hit barrier\n    if (pos.y <= -(0.48) || pos.y >= 0.48 + ball_radius){\n        direction = vec2(direction.x, -direction.y);\n    }\n   \n    //hit paddle\n    if (\n        pos.x <= paddlepos.x + 0.01 + ball_radius &&\n        pos.x >= paddlepos.x - (0.01 + ball_radius) &&\n        pos.y <= paddlepos.y + 0.1 + ball_radius &&\n        pos.y >= paddlepos.y-(0.1 + ball_radius)\n    ){\n        float hitpos = (pos.y-paddlepos.y)*9.0;\n        direction = normalize(vec2( -( 1.0 - hitpos), hitpos));\n        pos += sign(direction.x) * 0.01;\n    }\n   \n    //hit paddle 2\n    if (\n        pos.x <= paddlepos2.x + 0.01 + ball_radius &&\n        pos.x >= paddlepos2.x - (0.01 + ball_radius) &&\n        pos.y <= paddlepos2.y + 0.1 + ball_radius &&\n        pos.y >= paddlepos2.y-(0.1 + ball_radius)\n    ){\n        direction = vec2(-direction.x, direction.y);\n        pos += sign(direction.x) * 0.01;\n    }\n   \n    //leave map\n    if (pos.x < -1.0) { //leave to left\n        pos = vec2(0);\n        direction = vec2(0);\n        score.y ++;\n    }\n    if (pos.x > 1.0){ //leave to right\n        pos = vec2(0);\n        direction = vec2(0);\n        score.x ++;\n    }\n   \n    if (score.x < 5.0 && score.y < 5.0){\n        pos += direction*ball_screen_per_frame/6.0;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) //main\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 col;\n\n    //get frame data\n    vec2 direction = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n    vec2 currentpos = texelFetch(iChannel0, ivec2(1, 0), 0).xy;\n    vec2 paddlepos = texelFetch(iChannel0, ivec2(2, 0), 0).xy;\n    vec2 paddlepos2 = texelFetch(iChannel0, ivec2(3, 0), 0).xy;\n    score = texelFetch(iChannel0, ivec2(4, 0), 0).xy;\n\n    //fix missing data\n    if (direction == vec2(0)){\n        float ran_direction = rand( vec2( iTime)) - 0.5;\n        float ran_side = sign( round( mod( rand( vec2( iTime)), 0.01)*100.0) - 0.5);\n        direction = vec2((1.0 - ran_direction*sign(ran_direction))*ran_side, ran_direction);\n    }\n    if (paddlepos == vec2(0)){\n        paddlepos = vec2(0.8, 0.0);\n    }\n    if (paddlepos2 == vec2(0)){\n        paddlepos2 = vec2(-0.8, 0.0);\n    }\n   \n    //set pos\n    paddleposition(paddlepos, paddlepos2);\n    pos(currentpos, paddlepos, paddlepos2, direction);\n   \n    //color in\n    if (currentpos.x+0.01 >= uv.x && currentpos.x-0.01 <= uv.x && currentpos.y+0.01 >= uv.y && currentpos.y-0.01 <= uv.y){ col = vec3(1); } //ball\n   \n    if (uv.y>0.48 || uv.y<-0.48){ col = vec3(1); } //top + bottom border\n   \n    if (paddlepos.x+0.01 >= uv.x && paddlepos.x-0.01 <= uv.x && paddlepos.y+0.1 >= uv.y && paddlepos.y-0.1 <= uv.y){ col = vec3(1); } //paddle\n   \n    if (paddlepos2.x+0.01 >= uv.x && paddlepos2.x-0.01 <= uv.x && paddlepos2.y+0.1 >= uv.y && paddlepos2.y-0.1 <= uv.y){ col = vec3(1); } //paddle 2\n   \n    if (uv.x<0.005 && uv.x>-0.005 && mod(uv.y,0.04)>0.02){ col = vec3(1); } //middle border\n   \n    if ( draw_score(uv) ){ col = vec3(1); } // score\n   \n    if ( winlose(uv) ){ col = vec3(1); } //win / lose\n   \n    //check for restart\n    if (texelFetch(iChannel1, ivec2(R, 0), 0).x == 1.0){\n        score = vec2(0);\n        paddlepos = vec2(0);\n        paddlepos2 = vec2(0);\n        currentpos = vec2(0);\n        direction = vec2(0);\n    }\n   \n    //store frame data\n    ivec2 iCoord = ivec2(fragCoord);\n   \n    if (iCoord == ivec2(0,0)) {\n        col = vec3(direction, 0.0); //ball direction\n    }\n    if (iCoord == ivec2(1,0)) {\n        col = vec3(currentpos, 0.0); //ball position\n    }\n    if (iCoord == ivec2(2,0)) {\n        col = vec3(paddlepos, 0.0); //paddle position\n    }\n    if (iCoord == ivec2(3,0)) {\n        col = vec3(paddlepos2, 0.0); //paddle 2 position\n    }\n    if (iCoord == ivec2(4,0)) {\n        col = vec3(score, 0.0); //scores\n    }\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}