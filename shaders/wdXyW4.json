{
    "Shader": {
        "info": {
            "date": "1584780936",
            "description": "Here's a variation on [url]https://www.shadertoy.com/view/3dlyD8[/url] that adds a bit of twist to the sliding tiles pattern. Other angles should be possible, need to work out the details. Interesting that it looks like a Mobius tranformation.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdXyW4",
            "likes": 17,
            "name": "Mercator Spiral",
            "published": 3,
            "tags": [
                "spiral",
                "loxodrome",
                "mercator"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 497
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Spherical texturing with Mercator projection.\n//\n// Adding a spiral (a loxodrome in fact, a curve of constant compass bearing.\n//\n// Matthew Arcus, 2020.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI = 3.14159;\n\nvec2 rotate(vec2 p, float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nvec3 tiling(vec2 p) {\n  p *= 8.0;\n  p = mod(p,2.0)-1.0;\n  if (p.x*p.y < 0.0) p = p.yx;\n  p = 1.0-2.0*abs(abs(p)-0.5);\n  float t = 0.5*iTime;\n  vec2 n = vec2(sin(t),cos(t));\n  vec2 m = vec2(-n.y,n.x);\n  float d = dot(p,n), e = dot(p,m);\n  float k = min(abs(d),abs(e));\n  if (d < 0.0) k = min(k,abs(p.x-1.0));\n  if (e < 0.0) k = min(k,abs(p.y-1.0));\n  return smoothstep(0.025,0.05,k)*vec3(0.5,0.5,0);\n}\n\nvec3 mirror(vec2 uv) {\n  uv.y -= 0.1*iTime;\n  uv = mod(uv,2.0);\n  uv = min(uv,2.0-uv);\n  return texture(iChannel1,uv).rgb;\n}\n\nvec3 slider(vec2 uv) {\n  uv *= 4.0;\n   float t = 0.25*PI;\n  uv = rotate(uv,t);\n    uv /= cos(t);\n vec2 iv = floor(uv);\n  if (true) {\n    // Slide around a little\n    float t = 0.3*iTime;\n    if (mod(t,2.0) < 1.0) {\n      uv.x += floor(mod(iv.y,2.0))*fract(t);\n    } else {\n      uv.y += floor(mod(iv.x,2.0))*fract(t);\n    }\n  }\n  uv = mod(uv,1.0);\n  vec2 dv = min(uv,1.0-uv);\n  float d = min(dv.x,dv.y);\n  vec3 col = texture(iChannel0,uv).rgb;\n  col = mix(vec3(0),col,smoothstep(0.01,0.02,d));\n  return col;\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint IHash(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nvec3 indexed(vec2 uv) {\n  uv *= 8.0;\n  uv.y += iTime;\n  ivec2 iv = ivec2(floor(uv));\n  float rnd = float(IHash((uint(iv.x)<<16) ^ uint(iv.y)))/pow(2.0,32.0);\n  uv = mod(uv,1.0);\n  vec2 dv = min(uv,1.0-uv);\n  float d = min(dv.x,dv.y);\n  vec3 col = hsv2rgb(vec3(rnd,1,1));\n  col = mix(vec3(0),col,smoothstep(0.01,0.02,d));\n  return col;\n}\n\nconst int ncolors = 4;\nvec3 getColor(int i, vec2 uv) {\n  return slider(uv);\n  i = i%ncolors;\n  if (i == 0) return slider(uv);\n  if (i == 1) return tiling(uv);\n  if (i == 2) return indexed(uv);\n  if (i == 3) return mirror(uv);\n  return vec3(1,0,0);\n}\n\nvec3 getColor(vec3 p) {\n  float x = atan(p.x,p.z);       // Longitude\n  float y = asin(p.y/length(p)); // Latitude\n  y = log(tan(0.25*PI+0.5*y));   // Mercator\n  vec2 uv = vec2(x,y);\n  uv /= PI;\n  float period = 10.0;\n  float t = mod(iTime,float(ncolors)*period);\n  int i = int(t/period);\n  t = mod(t,period);\n  return mix(getColor(i,uv),getColor(i+1,uv),smoothstep(period-1.0,period,t));\n}\n\nstruct Ray {\n  vec3 q;               // origin\n  vec3 d;               // direction\n};\n\nstruct Hit {\n  float t;      // solution to p=q+t*d\n  vec3 n;       // normal\n};\n\nstruct Sphere {\n  float r;      // radius\n  vec3 p;       // centre\n};\n\nbool intersectSphere(Sphere s, Ray ray, out Hit hit) {\n  vec3 p = s.p;\n  float r = s.r;\n  float c = length(p);\n  vec3 q = ray.q, d = ray.d;\n  // |q + t*d - p|^2 = r^2\n  float B = dot(q-p,d);\n  float C = dot(q,q)-2.0*dot(q,p)+(c+r)*(c-r);\n  float D = B*B - C;\n  if (D < 0.0) return false;\n  D = sqrt(D);\n  float t,t1;\n  if (B >= 0.0) {\n    t = -B-D; t1 = C/t;\n  } else {\n    t1 = -B+D; t = C/t1;\n  }\n  if (t < 0.0) t = t1;\n  if (t < 0.0) return false;\n  // Normal is the radial vector of sphere\n  hit = Hit(t, (q+t*d-p)/r);\n  return true;\n}\n\nbool intersectScene(Ray r, out Hit hit) {\n  Sphere s = Sphere(1.0, vec3(0));\n  if (intersectSphere(s,r,hit)) {\n    return true;\n  }\n  return false;\n}\n\nvec3 light;\nfloat ambient;\nfloat diffuse;\n\nvec3 solve(Ray r) {\n  Hit hit;\n  if (!intersectScene(r,hit)) {\n    return vec3(0);\n  } else {\n    vec3 n = hit.n;\n    if (dot(r.d,n) > 0.0) n *= -1.0;\n    vec3 baseColor = getColor(hit.n);\n    vec3 color = baseColor.xyz*(ambient+diffuse*max(0.0,dot(light,n)));\n    float specular = pow(max(0.0,dot(reflect(light,n),r.d)),10.0);\n    color += 0.5*specular*vec3(1);\n    color *= clamp(1.0 - (hit.t-3.0)/5.0,0.0,1.0);\n    return color;\n  }\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = -(2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = -(2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  if (true) {\n    p.yz = rotate(p.yz,iTime * 0.125);\n    p.zx = rotate(p.zx,iTime * 0.2);\n  }\n  return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  light = normalize(vec3(0.5,1.0,-1.0));\n  light = transform(light);\n  ambient = 0.5;\n  diffuse = 1.0-ambient;\n  vec3 col = vec3(0);\n  float AA = 2.0;\n  for (float i = 0.0; i < AA; i++) {\n    for (float j = 0.0; j < AA; j++) {\n      vec2 uv = (2.0*(fragCoord+vec2(i,j)/AA)-iResolution.xy)/iResolution.y;\n      vec3 p = vec3(0,0,-6);\n      vec3 r = vec3(uv,6);\n      p = transform(p);\n      r = transform(r);\n      r = normalize(r); // Normalize after transform\n      col += solve(Ray(p,r));\n    }\n  }\n  fragColor = vec4(pow(col/(AA*AA),vec3(0.4545)),1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}