{
    "Shader": {
        "info": {
            "date": "1593881406",
            "description": "The end result of a YouTube tutorial I made.",
            "flags": 0,
            "hasliked": 0,
            "id": "tljcRW",
            "likes": 49,
            "name": "Feathers in the Wind",
            "published": 3,
            "tags": [
                "tutorial",
                "wind",
                "feather",
                "feathers",
                "artofcode"
            ],
            "usePreview": 0,
            "username": "BigWIngs",
            "viewed": 1555
        },
        "renderpass": [
            {
                "code": "// Feathers in the Wind - by Martijn Steinrucken aka BigWings 2020\n// Email:countfrolic@gmail.com Twitter:@The_ArtOfCode\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// An effect created for a YouTube tutorial. You can watch it here:\n// Part 1: https://youtu.be/68IFmCCy_AM\n// Part 2: https://youtu.be/hlM940IqpRU\n\n#define S smoothstep\n#define T (iTime*.5)\n\nmat2 Rot(float a) {\n\tfloat s=sin(a), c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat Feather(vec2 p) {\n\tfloat d = length(p-vec2(0,clamp(p.y, -.3, .3)));\n    float r = mix(.1, .03, S(-.3, .3, p.y));\n    float m = S(.01, .0, d-r);\n    \n    float side = sign(p.x);\n    float x = .9*abs(p.x)/r;\n    float wave = (1.-x)*sqrt(x) + x*(1.-sqrt(1.-x));\n    float y = (p.y-wave*.2)*80.+side*56.;\n    float id = floor(y+20.);\n    float n = fract(sin(id*564.32)*763.); \n    float shade = mix(.5, 1., n);\n    float strandLength = mix(.7, 1., fract(n*34.));\n    \n    float strand = S(.4, .0, abs( fract(y)-.5 )-.35);\n    strand *= S(.1,-.2, x-strandLength);\n    \n    d = length(p-vec2(0,clamp(p.y, -.45, .1)));\n    float stem = S(.01,.0, d+p.y*.025);\n    \n    return max(strand*m*shade, stem);\n}\n\nvec3 Transform(vec3 p, float angle) {\n\tp.xz *= Rot(angle);\n    p.xy *= Rot(angle*.7);\n    \n    return p;\n}\n\nvec4 FeatherBall(vec3 ro, vec3 rd, vec3 pos, float angle) {\n\t\n    vec4 col = vec4(0);\n    \n    float t = dot(pos-ro, rd);\n    vec3 p = ro + rd * t;\n    float y = length(pos-p);\n    \n    if(y<1.) {\n        float x = sqrt(1.-y*y);\n        vec3 pF = ro + rd * (t-x) - pos; // front intersection\n        float n = pF.y*.5+.5;\n        \n        pF = Transform(pF, angle);\n        vec2 uvF = vec2(atan(pF.x, pF.z), pF.y); // -pi<>pi, -1<>1\n        uvF *= vec2(.25,.5);\n        float f = Feather(uvF);\n        vec4 front = vec4(vec3(f), S(0., .6, f));\n        \n        front.rgb *= n*n;\n        \n        vec3 pB = ro + rd * (t+x) - pos; // back intersection\n        n = pB.y*.5+.5;\n        pB = Transform(pB, angle);\n        vec2 uvB = vec2(atan(pB.x, pB.z), pB.y); // -pi<>pi, -1<>1\n        uvB *= vec2(.25, .5);\n        float b = Feather(uvB);\n        vec4 back = vec4(vec3(b), S(0., .6, b));\n        back.rgb *= n*n;//*.5+.5;\n        \n    \tcol = mix(back, front, front.a);\n    }\n    col.rgb = sqrt(col.rgb);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 M = iMouse.xy/iResolution.xy -.5;\n    \n    vec3 bg = vec3(.2, .2, .7)*(uv.y+.5)*2.5;\n    bg += vec3(.8, .6, .4)*(-uv.y+.5);\n    \n    vec4 col = vec4(bg, 0);\n\t\n    vec3 ro = vec3(0,0,-3);\n    vec3 rd = normalize(vec3(uv, 1));\n   \n    for(float i=0.; i<1.; i+=1./80.) {\n        \n        float n = fract(sin(i*564.3)*4570.3);\n        float x = mix(-8., 8., fract(fract(n*10.)+T*.1))+M.x;\n        float y = mix(-2., 2., n)+M.y;\n        float z = mix(5., 0., i);\n        float a = T+i*563.34;\n        \n    \tvec4 feather = FeatherBall(ro, rd, vec3(x, y, z), a);\n        \n        feather.rgb = mix(bg, feather.rgb, mix(.3, 1., i));\n        feather.rgb = sqrt(feather.rgb);\n        \n        col = mix(col, feather, feather.a);\n    }\n    \n    col = pow(col, vec4(.4545)); // gamma correction\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}