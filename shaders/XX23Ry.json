{
    "Shader": {
        "info": {
            "date": "1708592796",
            "description": "This is a visual educational demonstration of refraction of a wave passing through a transparent medium. I hope it is useful for learning what refraction actually looks like.",
            "flags": 0,
            "hasliked": 0,
            "id": "XX23Ry",
            "likes": 3,
            "name": "Simple Refraction Demo",
            "published": 3,
            "tags": [
                "simple",
                "refraction",
                "visualization",
                "demo",
                "educational"
            ],
            "usePreview": 0,
            "username": "milesWaugh",
            "viewed": 53
        },
        "renderpass": [
            {
                "code": "#define phi iTime * 5.\n#define f 5.\n#define pii 0.318309886184 // 1/pi\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 uv = 2. * fragCoord / iResolution.xy - 1.;\n    vec3 col, g;\n    // Color palette\n    vec3 c1 = vec3(.42, .54, .15),\n         c2 = vec3(.54, .70, .20),\n         c3 = vec3(.52, .60, .33),\n         c4 = vec3(.62, .73, .41);\n    float wave, d, e;\n\n    if(uv.y > 0.) {\n        d = uv.x + uv.y;\n        e = uv.x - uv.y;\n        wave = cos(e * 30. - phi) * exp(-d * d * f);         // Incoming\n        wave += cos(d * 30. - phi) * exp(-e * e * f) * 0.12; // Reflection\n        col = mix(c1, c2, wave * .5 + .5);   // This shows the electric field value\n        // col = mix(c1, c2, wave * wave * 5.); // This shows light intensity\n    } else {\n        d = uv.x + uv.y * .5;\n        e = uv.x - uv.y * 2.;\n        wave = cos(e * 30. - phi) * exp(-d * d * f) * 0.88;  // Refraction\n        col = mix(c3, c4, wave * .5 + .5);   // This shows the electric field value\n        // col = mix(c1, c2, wave * wave * 5.); // This shows light intensity\n    }\n\n    // Overlay\n    g = col;\n    col *= abs(uv.y) < .01 ? .5 : 1.;\n    col += abs(uv.x + uv.y) < .01 && uv.y > 0. ? vec3(.5, 0., 0.) : vec3(0.);\n    col += abs(uv.x - uv.y) < .01 && uv.y > 0. ? vec3(.15, 0., 0.) : vec3(0.);\n    col += abs(uv.x + .5 * uv.y) < .01 && uv.y < 0. ? vec3(.4, 0., 0.) : vec3(0.);\n    col = mix(g, col, atan(45. * (cos(phi * .1) - .85)) * pii + .5);\n\n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}