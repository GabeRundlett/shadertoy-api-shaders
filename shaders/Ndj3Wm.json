{
    "Shader": {
        "info": {
            "date": "1617499158",
            "description": "Shader livecoded at Revision Shader Jam 2021 with DJ messy",
            "flags": 0,
            "hasliked": 0,
            "id": "Ndj3Wm",
            "likes": 10,
            "name": "Revision 2021 DJ messy Jam",
            "published": 3,
            "tags": [
                "revision",
                "jam",
                "2021"
            ],
            "usePreview": 0,
            "username": "sp4ghet",
            "viewed": 580
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265\n#define TAU 2.*PI\n#define time iTime\n#define saturate(x) clamp(x, 0., 1.)\n\nmat3 getOrtho(vec3 z, vec3 up){\n  z = normalize(z);\n  vec3 cu = normalize(cross(z,up));\n  vec3 cv = cross(cu,z);\n  return mat3(cu,cv,z);\n}\n\nconst vec3 up = vec3(0,1,0);\nfloat noise(vec3 p, float t){\n  float ns=0., amp=1., trk=1.5 + t;\n  const vec3 seed = vec3(-4,-2,.5);\n  mat3 rot = getOrtho(seed, up);\n  for(int i=0; i<4; i++){\n    p += sin(p.zxy + trk)*1.6;\n    ns += sin(dot(cos(p), sin(p.zxy)))*amp;\n    p *= rot;\n    p *= 2.3;\n    trk *= 1.5;\n    amp *= .5;\n  }\n  return ns*.5;\n}\n\nfloat fs(vec2 p){\n  return fract(sin(dot(p, vec2(12.41245, 78.233))) * 421251.543123);\n}\n\nfloat random(float x){\n  return fs(vec2(x));\n}\n\nvec2 seed;\nfloat rnd(){\n  return fs(seed);\n}\n\nvec3 rndSphere(){\n  float t = PI*rnd();\n  float p = TAU*rnd();\n  return vec3(cos(t)*cos(p), sin(t), cos(t)*sin(p));\n}\n\nvec3 rndHemi(vec3 n){\n  vec3 v = rndSphere();\n  return dot(n,v) > 0. ? v : -v;\n}\n\nvoid chmin(inout vec4 a, vec4 b){\n  a = a.x < b.x ? a : b;\n}\n\nfloat box(vec3 p, vec3 b){\n  p = abs(p) - b;\n  return min(0., max(p.x, max(p.y, p.z))) + length(max(p,0.));\n}\n\nmat2 r2d(float t){\n  float c=cos(t), s=sin(t);\n  return mat2(c,s,-s,c);\n}\n\n\nfloat lng, shrt;\n\nvec4 map(vec3 q){\n  vec3 p = q;\n  vec4 d = vec4(100000, 0,0,0);\n\n\n  float bx = box(p, vec3(5, 3.25, 7));\n  float bx2 = box(p, vec3(4, 3, 6));\n  bx = max(bx, -bx2);\n  bx2 = box(p - vec3(0,5,-1), vec3(1,2,1)) - .5;\n  bx = max(bx, -bx2);\n  bx -= .05*noise(p, shrt);\n  chmin(d, vec4(bx, 0,0,0));\n\n  p=q - vec3(-1., 0., -2.);\n  p.y -= shrt*2. - 1.;\n  p.xy *= r2d(PI*.2);\n  for(int i=0; i<10; i++){\n    p.zy *= r2d(-PI*.35*(.3 + shrt));\n    p.xy *= r2d(-PI*.4*(1.3 - shrt*shrt));\n    p.y -= .15;\n    p = abs(p);\n  }\n\n  bx = box(p, vec3(.01, .2, .01));\n  chmin(d, vec4(bx, 1,0,0));\n\n  return d;\n}\n\nvec3 normal(vec3 p){\n  vec2 e = vec2(0, 0.07678);\n  return normalize(vec3(\n    map(p + e.yxx).x - map(p - e.yxx).x,\n    map(p + e.xyx).x - map(p - e.xyx).x,\n    map(p + e.xxy).x - map(p - e.xxy).x\n  ));\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n\tvec2 pt = uv - 0.5;\n\tpt /= vec2(iResolution.y / iResolution.x, 1);\n\n  seed = vec2(noise(vec3(pt*37., time), 15.3), noise(vec3(pt*25., time), 1.2));\n\n  float bps = 120./60.;\n\n  float tm = time*bps*.5;\n  float pre = random(floor(tm) - 1.);\n  float now = random(floor(tm));\n  lng = fract(tm);\n  lng = 0.5 + 0.5*cos(PI*exp(-8.*lng));\n  lng = mix(pre, now, lng);\n\n  tm = time*bps*2.;\n  pre = random(floor(tm) - 1.);\n  now = random(floor(tm));\n  shrt = fract(tm);\n  shrt = 0.5 + 0.5*cos(PI*exp(-3.*shrt));\n  shrt = mix(pre, now, shrt);\n\n  vec3 c = vec3(0.);\n\n  float longAngle = .4 * TAU * (lng - .5) + PI*.5;\n  vec3 ro = vec3(0.,0.,3.);\n\n  vec3 fo = vec3(-1., 2.*shrt - 1.,-2.);\n\n  vec3 rov = normalize(fo - ro);\n  vec2 pt2 = pt*r2d((lng - .5)*PI*.3);\n  vec3 rd = getOrtho(rov, up) * normalize(vec3(pt2, 1.));\n\n  float t=0.;\n  vec3 p=ro;\n  vec4 d;\n  for(int i=0; i<64; i++){\n    p = ro + rd*t;\n    d = map(p);\n    if(abs(d.x) < 0.01){\n      break;\n    }\n    t += d.x;\n  }\n\n  vec3 l = normalize(vec3(1,4,1));\n  if(abs(d.x) < 0.01){\n    vec3 n = normal(p);\n    c += max(0., dot(n,l));\n    float fre = pow(1. - abs(dot(n,rd)) , 5.);\n    c += fre;\n\n    float ao=0.,ss=0.;\n    vec3 h = normalize(l-rd);\n    for(int i=1;i<=10;i++){\n      float aot = 0.1*float(i) + .05*rnd();\n      float sst = 0.3*float(i) + .5*rnd();\n      vec3 nd = mix(n,rndHemi(n),.2);\n      ao += map(p+nd*aot).x/aot;\n      ss += map(p+h*sst).x/sst;\n    }\n    c += ss*.1;\n    c *= ao*.1;\n\n    if(d.y == 1.){\n      c *= vec3(25, 1, 1.5);\n    }\n\n    vec3 hitp = p;\n    float sh=1., tt=.1;\n    for(int i=0; i<24; i++){\n      hitp = p + l*tt;\n      float d = map(hitp).x;\n      tt += d + .2*rnd();\n      if(d < 0.001){\n        sh = 0.;\n        break;\n      }\n      if(tt > 30.){\n        break;\n      }\n      sh = min(sh, 8.*d/tt);\n    }\n\n    c *= saturate(.2+sh);\n  }\n\n\n  float od=0.;\n  vec3 acc=vec3(0.), fogC = vec3(1, .8, .8);\n  int n=16;\n  float st=min(2., t/float(n)), tt=0.;\n  for(int i=0; i<n; i++){\n    p = ro + rd*tt;\n    tt += st*(.95+.1*rnd());\n    od += .2*(1. + abs(noise(p*3., time))) * st;\n\n    vec3 pp=p; float t=0.1;\n    float sh=2.;\n    for(int j=0; j<24; j++){\n      pp = p + l*t;\n      float d = map(pp).x;\n      t += d;\n      if(d < 0.01){\n        sh=0.;\n        break;\n      }\n    }\n    acc += exp(-od*fogC)*sh*st;\n  }\n  c *= exp(-.3*od);\n  c += acc;\n\n  c = c/(1. + c);\n\n  c = pow(c, vec3(.4545));\n  c = smoothstep(.05, 1.4, c);\n  float lum = dot(c, vec3(.2126, .7152, .0722));\n  float shad = smoothstep(.4, .01, lum);\n  float high = smoothstep(.3, 1., lum);\n  c = c*shad*vec3(.4, 1.2, 1.2) + c*(1.-shad*high) + c*high*vec3(.9, .8,.8);\n\n  c *= 1. - length(pt);\n\n\tfragColor = vec4(c,1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}