{
    "Shader": {
        "info": {
            "date": "1706970176",
            "description": ":) ",
            "flags": 2,
            "hasliked": 0,
            "id": "MfBSDt",
            "likes": 6,
            "name": "GF with Escher Spiral",
            "published": 3,
            "tags": [
                "math",
                "escher",
                "gray",
                "spirograph",
                "hypocycloid"
            ],
            "usePreview": 0,
            "username": "AlreadyTaken",
            "viewed": 298
        },
        "renderpass": [
            {
                "code": "float pi = 3.14159;\nfloat theta = 0.5773503;\n\nmat2 rot(float a) \n{\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nmat2 shear(vec2 v)\n{\n  return mat2(1,v.x,v.y,1);\n}\n\nbool isInsideHypocycloid(vec2 p, float r, float k, float angle, vec2 hui) {\n    // Shift the point to center the hypocycloid\n    p -= hui; //vec2(0.5);\n\n\n    // Rotate the point\n    float cosAngle = cos(angle);\n    float sinAngle = sin(angle);\n    p = vec2(p.x * cosAngle - p.y * sinAngle, p.x * sinAngle + p.y * cosAngle);\n\n    // Convert the point to polar coordinates\n    float theta = atan(p.y, p.x);\n    float ro = length(p);\n    \n \n\n    // Calculate the radius of the hypocycloid at the given angle\n    float r_hypocycloid = r * (k + cos((k) * theta));\n\n    // The point is inside the hypocycloid if its radial distance is less than\n    // the radius of the hypocycloid at the given angle\n    return ro <= r_hypocycloid;\n}\n\n\n//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n//Taken from https://www.shadertoy.com/view/WtSSDd\n//Thanks to kb again \n\n// complex logarithm \nvec2 logc(vec2 v)\n{\n    return vec2(log(length(v)),atan(v.y,v.x));\n}\n// map from logarithmic spiral to time coordinates  \nvec2 spiral(vec2 uv, float spd, int amnt)\n{\n    float ts = iTime*spd;\n    uv *= rot(-ts); // rotate\n    \n    uv = logc(uv.xy); // map from complex exp\n\n    // scale\n    vec2 uv2 = uv*vec2(0.1,1./(2.*pi));\n    \n    \n    float st = mod(ts,float(amnt));\n\n    // shear (y factor needs to be integer to avoid seams)\n    // uncomment to see why :)\n    //uv.x = float(st)*uv2.x + 9.*uv2.y;\n    //uv.y = float(st)*uv2.y - 9.*uv2.x;\n    \n    uv.x = float(amnt)*uv2.x + 9.*uv2.y;\n    uv.y = float(amnt)*uv2.y - 9.*uv2.x;\n    // tile and shift\n    return mod(uv,1.)-0.75;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float slowTime = iTime *0.5;\n    vec2 hui = vec2( ((sin(slowTime*0.125)+1.)/2.), ((cos(slowTime*0.5)+1.)/2.) );\n    vec2 ho = abs(hui.yx)/2.;\n    vec2 hey = vec2(ho.x-0.25*cos(slowTime), ho.y - (sin(slowTime)*0.125));\n    vec2 center = vec2(0.5);\n    hui *= 0.75;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 orig = uv;\n        uv.xy -= .5; // center around 0\n    uv.x /= iResolution.y/iResolution.x; // apply aspect\n    int mod = 36;\n    float modtime = iTime >= float(mod) ? float(int(iTime+1.) % mod) +1.+(iTime+1.-float(int(iTime+1.))) : iTime +1.;   \n    uv.xy*= modtime;    \n    uv= spiral(uv.xy, 0.05, 6);\n    uv *= rot(0.2);\n    \n    //uv *= hexagon(uv*5.0);\n    uv = abs(uv);\n\n\n\n// Define the colors\nvec3 black = palette(slowTime*0.125);\nvec3 white = vec3(1.0, 1.0, 1.0);\nvec3 bluegrey = vec3((cos(iTime)+1.)/2., black.z, black.x);\nvec2 uv_reflected = vec2(uv.x*0.5+0.1 ,uv.y*0.5+0.1);\nvec2 uv_trace =vec2(uv.x-0.25, uv.y+cos(slowTime)*0.125);\n\nuv.xy*= (0.1*(sin(slowTime)+1.)/2.) + 1.;\ncenter.xy *=  (0.1*(sin(slowTime)+1.)/2.) + 1.;\nuv_reflected.xy *=  0.1*(cos(slowTime)+1.)/2. +1.;\n\n\n\n\nfloat k = 10.;\nfloat kk = 7.;\nfloat mk = 5.;\nvec3 curcol = white;\nint amnt =12;\nint cur = 1;\nfor(int ii=0; ii <=amnt; ii++){\n    float r= float(ii)/200.;\n    // Cycle between black, white, and red\n    vec3 color = black;\n    float time = ii%2 == 0 ? slowTime*0.25 : 0.25*slowTime*-1.;\n    \n\n        //vec2 uv_used = (ii % 2 == 0) ? uv : uv_reflected;\n    \n    if (isInsideHypocycloid(uv,r, k, time, center) || \n        isInsideHypocycloid(uv_reflected,r, kk, time, center) ||\n        isInsideHypocycloid(uv_trace, r, mk, time, hey)) {\n        curcol += color;\n        cur++;     \n    }\n    \n}\ncurcol /= float(amnt);// Output to screen\n\ncurcol = vec3(1.) -curcol;\nfragColor= texture(iChannel0, uv);\nfragColor -=   vec4(curcol, 1.0);\nfragColor = vec4(1.-fragColor.x, 1.-fragColor.y, 1.-fragColor.z, 1.);\n//fragColor.x = fragColor.y = fragColor.z;\nfragColor = mix(fragColor, vec4(curcol,1.), 0.7);\nvec4 cam =  texture(iChannel0, orig);\ncam.x=cam.y=cam.z;\n fragColor =   mix(cam, vec4(curcol,1.), 1.);\nif(int(fragCoord.y) % 2 == 0){\n//fragColor = vec4(1.,1.,1.,1.) - fragColor;\n}\n\n\n\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}