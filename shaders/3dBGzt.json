{
    "Shader": {
        "info": {
            "date": "1549646509",
            "description": "move mouse in X to increase/reduce detail\nthe effect is fast but it needs several passes, which i spread over several frames (hence the low vid-framerate)\n(original: [url]https://www.shaderoo.org/?shader=yC8Ej3[/url])",
            "flags": 32,
            "hasliked": 0,
            "id": "3dBGzt",
            "likes": 37,
            "name": "multi scale subdivision",
            "published": 3,
            "tags": [
                "effect",
                "kdtree",
                "subdivision"
            ],
            "usePreview": 0,
            "username": "flockaroo",
            "viewed": 3596
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// multi scale subdivision\n\n// actually the algorithm is written for pow of 2 videos, but apart from some\n// minor artifacts it works ok here\n// (the subdivisions on different scales would be all aligned for pow of 2)\n\n// the effect is fast enough for realtime, but the video framerate is reduced due \n// to \"emulated passes\" (1 pass per frame - unfortunetely there's no passes in shadertoy)\n\n// display Buff C\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor=texture(iChannel0,fragCoord/iResolution.xy);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// created by florian berger (flockaroo) - 2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// multi scale subdivision\n\n// copy every NumPasses'th frame of video to Buffer\n// (emulating multiple passes by dedicating each frame to a different pass)\n\n#define iPassIndex (iFrame%NumPasses)\n\n#define Res0 vec2(textureSize(iChannel0,0))\n#define Res1 vec2(textureSize(iChannel1,0))\n#define Res2 vec2(textureSize(iChannel2,0))\n\nvec4 getCol(vec2 pos)\n{\n    vec2 tres = Res0;\n    // use max(...) for fitting full image or min(...) for fitting only one dir\n    vec2 tpos = (pos-.5*Res1)*min(tres.y/Res1.y,tres.x/Res1.x);\n    vec2 uv = (tpos+tres*.5)/tres;\n\tvec4 col=texture(iChannel0,uv);\n\tvec4 bg=texture(iChannel2,uv,0.);\n    //col=mix(col,bg,dot(col.xyz,vec3(-.8,1.6,-.8)));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iPassIndex==0)\n        fragColor=getCol(fragCoord);\n    else\n        fragColor=texture(iChannel1,fragCoord/iResolution.xy);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// created by florian berger (flockaroo) - 2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// multi scale subdivision\n\n// recursively find min and max pixel brightness in a certain region\n// going from small scales to higher scales\n// (emulating multiple passes by dedicating each frame to a different pass)\n\n#define iPassIndex (iFrame%NumPasses)\n\n#define Res iResolution.xy\n#define Res0 vec2(textureSize(iChannel0,0))\n#define Res1 vec2(textureSize(iChannel1,0))\n#define Res2 vec2(textureSize(iChannel2,0))\n\nbool getNBPixPos(ivec2 coord, int level, inout ivec2 pos1, inout ivec2 pos2)\n{\n    if (level==0) { pos1=coord*ivec2(2,1); pos2=pos1+ivec2(1,0); return coord.x<int(Res1.x)/2; }\n    \n    ivec2 dir = ivec2(1,0);\n    ivec2 s = ivec2(Res1)/(dir+1);\n    ivec2 sp = s;\n    ivec2 o = ivec2(0);\n    ivec2 op = o;\n    for(int i=0;i<level;i++) {\n        op=o; o+=s*dir;\n        dir=(dir+1)&1;\n        sp=s; s/=dir+1;\n    }\n    \n    ivec2 c = coord-o;\n    pos1=op+c*(dir+1);\n    pos2=pos1+dir;\n    return c.x>=0 && c.x<s.x && c.y>=0 && c.y<s.y;\n}\n\nvec2 getLevelCoords(vec2 coord, int level, inout vec2 frameCoord)\n{\n\n    ivec2 dir = ivec2(1,0);\n    ivec2 s = ivec2(Res1)/(dir+1);\n    ivec2 sp = s;\n    ivec2 o = ivec2(0);\n    ivec2 op = o;\n    for(int i=0;i<level;i++) {\n        op=o; o+=s*dir;\n        dir=(dir+1)&1;\n        sp=s; s/=dir+1;\n    }\n\n    vec2 c = coord*vec2(s)+vec2(o);\n    frameCoord=fract(c);\n    return (floor(c)+.5)/Res1;\n}\n\n\nfloat colDist(vec4 c1, vec4 c2)\n{\n    return dot(c1.xyz-c2.xyz,vec3(.3333));\n}\n\nbool isBigger(vec4 c1, vec4 c2)\n{\n    return colDist(c1,c2)>0.;\n}\n\nvec4 getCol(vec2 coord)\n{\n    return texture(iChannel0,coord/Res1.xy);\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    if(iPassIndex==0) {vec2 coord=fragCoord; fragColor=vec4(coord,coord); return; }\n    \n    int isVert = (iPassIndex+1)&1;\n    ivec2 dir = (ivec2(0,1)+iPassIndex+1)&1;\n    \n    ivec2 coord=ivec2(fragCoord);\n\n    // copy previous pass\n    fragColor=texelFetch(iChannel1,coord,0);\n    \n    // who are the neighbours?\n    ivec2 pos1, pos2;\n    if (!getNBPixPos(coord,iPassIndex-1,pos1,pos2)) { return; }\n    \n    vec4 coordMinMax1 = texelFetch(iChannel1,pos1,0);\n    vec4 coordMinMax2 = texelFetch(iChannel1,pos2,0);\n    vec4 cmin1=getCol(coordMinMax1.xy);\n    vec4 cmin2=getCol(coordMinMax2.xy);\n    vec4 cmax1=getCol(coordMinMax1.zw);\n    vec4 cmax2=getCol(coordMinMax2.zw);\n    \n    fragColor.xy = isBigger(cmin2,cmin1)?coordMinMax1.xy:coordMinMax2.xy;\n    fragColor.zw = isBigger(cmax1,cmax2)?coordMinMax1.zw:coordMinMax2.zw;\n    // debug pass levels\n    //fragColor.xyz = vec3(0) + float(iPassIndex)/15.;\n    //fragColor.w = 1.;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// created by florian berger (flockaroo) - 2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// multi scale subdivision\n\n// display subdivisions depending on detail of video\n// start with big scale and reduce scale until min and max are close enough\n\n#define iPassIndex (iFrame%NumPasses)\n\n#define Res iResolution.xy\n#define Res0 vec2(textureSize(iChannel0,0))\n#define Res1 vec2(textureSize(iChannel1,0))\n#define Res2 vec2(textureSize(iChannel2,0))\n\n#define PI2 6.28318530718\n#define sc (iResolution.x/600.)\n    \nbool getNBPixPos(ivec2 coord, int level, inout ivec2 pos1, inout ivec2 pos2)\n{\n    if (level==0) { pos1=coord*ivec2(2,1); pos2=pos1+ivec2(1,0); return coord.x<int(Res1.x)/2; }\n    \n    ivec2 dir = ivec2(1,0);\n    ivec2 s = ivec2(Res1)/(dir+1);\n    ivec2 sp = s;\n    ivec2 o = ivec2(0);\n    ivec2 op = o;\n    for(int i=0;i<level;i++) {\n        op=o; o+=s*dir;\n        dir=(dir+1)&1;\n        sp=s; s/=dir+1;\n    }\n    \n    ivec2 c = coord-o;\n    pos1=op+c*(dir+1);\n    pos2=pos1+dir;\n    return c.x>=0 && c.x<s.x && c.y>=0 && c.y<s.y;\n}\n\nvec2 getLevelCoords(vec2 coord, int level, inout vec2 frameCoord)\n{\n\n    ivec2 dir = ivec2(1,0);\n    ivec2 s = ivec2(Res1)/(dir+1);\n    ivec2 sp = s;\n    ivec2 o = ivec2(0);\n    ivec2 op = o;\n    for(int i=0;i<level;i++) {\n        op=o; o+=s*dir;\n        dir=(dir+1)&1;\n        sp=s; s/=dir+1;\n    }\n\n    vec2 c = coord*vec2(s)+vec2(o);\n    frameCoord=fract(c);\n    return (floor(c)+.5)/Res1;\n}\n\n\nfloat colDist(vec4 c1, vec4 c2)\n{\n    return dot(c1.xyz-c2.xyz,vec3(.3333));\n}\n\nbool isBigger(vec4 c1, vec4 c2)\n{\n    return colDist(c1,c2)>0.;\n}\n\nvec4 getRand(vec2 pos)\n{\n    return textureLod(iChannel2,pos/Res2,0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // just render a new frame every NumPasses'th fame, otherwise copy old frame\n    if (iPassIndex!=NumPasses-1) \n    {\n    \tfragColor=texture(iChannel3,fragCoord/Res);\n        return;\n    }\n    \n    vec4 r = getRand(fragCoord*1.2/sqrt(sc))-getRand(fragCoord*1.2/sqrt(sc)+vec2(1,-1)*1.5);\n    //fragCoord+=1.5*sqrt(sc)*(getRand(fragCoord*.135).xy-.5+.5*(getRand(fragCoord*.3).xy-.5));\n    vec4 coords=texelFetch(iChannel1,ivec2(fragCoord.xy),0);\n    fragColor = vec4(0);\n    float sum=0.;\n    vec2 frameCoord;\n    for(int i=NumPasses-2;i>=3;i--)\n    {\n        vec4 coordMinMax=textureLod(iChannel1,getLevelCoords(fragCoord/iResolution.xy,i,frameCoord),0.);\n        vec4 mi = textureLod(iChannel0,coordMinMax.xy/Res1,0.);\n        vec4 ma = textureLod(iChannel0,coordMinMax.zw/Res1,0.);\n        fragColor=mix(mi,ma,1.)*.95+.15;\n        //fragColor.xyz=vec3(0)+dot(fragColor.xyz,vec3(.3333));\n        float detail=(iMouse.x>=1.)?1./(1.+25.*iMouse.x/iResolution.x):1./10.;\n        if( abs(colDist(mi,ma))<detail /**float(i+10)/30.*/ ) break;\n    }\n\n    vec3 mask=vec3(0);\n    \n    mask+=smoothstep(.0,.15,   frameCoord.x)*vec3(1.2,1,.8);\n    mask+=smoothstep(.0,.3, 1.-frameCoord.y)*vec3(.8,1,1.2);\n    \n    mask+=smoothstep(.0,fwidth(frameCoord.x)*1.4,   frameCoord.x)*.25;\n    mask+=smoothstep(.0,fwidth(frameCoord.y)*1.4,1.-frameCoord.y)*.25;\n    mask+=smoothstep(.0,fwidth(frameCoord.x)*1.4,1.-frameCoord.x)*.25;\n    mask+=smoothstep(.0,fwidth(frameCoord.y)*1.4,   frameCoord.y)*.25;\n    \n    //mask+=(1.-smoothstep(.0,fwidth(frameCoord.x)*2.,1.-frameCoord.x))*.5;\n    //mask+=(1.-smoothstep(.0,fwidth(frameCoord.y)*2.,frameCoord.y))*.5;\n\n    mask/=3.;\n    \n    //mask*=1.2-.2*smoothstep(.0,.2,1.-frameCoord.x);\n    //mask*=1.2-.2*smoothstep(.0,.2,frameCoord.y);\n    float br = dot(fragColor.xyz,vec3(.3333));\n    fragColor.xyz=(fragColor.xyz-br)*1.2+br;\n    fragColor.xyz=clamp(fragColor.xyz,0.,1.);\n    fragColor.xyz*=mask;\n    //paper tex\n    fragColor.xyz *= .95+.06*r.xxx+.06*r.xyz;\n\n    // vignetting\n    if(true)\n    {\n        vec2 scc=(fragCoord-.5*iResolution.xy)/iResolution.x;\n        float vign = 1.-.5*dot(scc,scc);\n        vign*=1.-.7*exp(-sin(fragCoord.x/iResolution.x*3.1416)*20.);\n        vign*=1.-.7*exp(-sin(fragCoord.y/iResolution.y*3.1416)*10.);\n        fragColor.xyz *= vign;\n    }\n    \n    fragColor.w=1.;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// created by florian berger (flockaroo) - 2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// multi scale subdivision\n\n// emulating multiple passes by dedicating each frame to a different pass\nconst int NumPasses = 13;\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}