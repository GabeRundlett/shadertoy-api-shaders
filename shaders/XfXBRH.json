{
    "Shader": {
        "info": {
            "date": "1723303333",
            "description": "[url=https://www.shadertoy.com/view/MfffRr]iterative normalize per pixel[/url] but with [url=https://www.shadertoy.com/view/XcXBRH]taylor series normalization[/url]. starting value is position on screen.",
            "flags": 0,
            "hasliked": 0,
            "id": "XfXBRH",
            "likes": 2,
            "name": "taylor normalize per pixel",
            "published": 3,
            "tags": [
                "approximation",
                "normalize"
            ],
            "usePreview": 0,
            "username": "janpitokiala",
            "viewed": 85
        },
        "renderpass": [
            {
                "code": "// Fork of \"iterative normalize per pixel\" by janpitokiala. https://shadertoy.com/view/MfffRr\n// 2024-08-10 15:19:50\n\n#define ITERATIONS 1\n#define TAYLOR_ITERATIONS 10.\nfloat invsqrt(float x) {\n  float mul = 1.;\n  float sum = 1.;\n  for(float i=1.;i<=TAYLOR_ITERATIONS;i++) {\n    mul *= -(2.*i-1.)*x/(2.*i);\n    sum += mul;\n  }\n  return sum;\n}\nvec2 normalizeStep(vec2 x) {\n    return x*invsqrt(dot(x,x)-1.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord*2./iResolution.y+vec2(-iResolution.x/iResolution.y,-1.);\n    uv *= 1.9;\n    for(int i=0;i<ITERATIONS;i++) {\n      uv=normalizeStep(uv);\n    }\n\n    // Output to screen\n    fragColor = vec4(.5*(uv+1.),0.,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}