{
    "Shader": {
        "info": {
            "date": "1497652697",
            "description": "i accidentally a shader",
            "flags": 96,
            "hasliked": 0,
            "id": "MslBzs",
            "likes": 7,
            "name": "Volatile Serenity",
            "published": 3,
            "tags": [
                "visualization",
                "music",
                "abstract"
            ],
            "usePreview": 1,
            "username": "Akaricchi",
            "viewed": 626
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n   \tfragColor = vec4(0.0);\n    \n    vec4 c0 = texture(iChannel0, uv);\n    vec4 c1 = texture(iChannel1, uv);\n    vec4 c2 = texture(iChannel2, uv);\n    vec4 c3 = texture(iChannel3, uv);\n    \n\tfragColor += c0 * c1 * c2;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    uv.x += 0.01 * sin(uv.y * 32.0 + iTime);\n    uv.y += 0.01 * sin(uv.x + 1.1 * iTime);\n    \n    /*\n    float level = texture(iChannel0, vec2(uv.x, 0.0)).r;\n    fragColor = texture(iChannel1, vec2(uv.x, uv.y - 0.1* iTime));\n    fragColor *= pow((1.0 - 6.0 * (uv.y - level * 1.0)), 2.1);\n    fragColor = clamp(fragColor, 0.0, 1.0);\n\t*/\n    \n\tvec2 center = vec2(0.5, 0.5);\n    float rad = length(center - uv);\n    float level = pow(texture(iChannel0, vec2(rad, 0.0)).r, 4.0);\n    //fragColor = texture(iChannel1, vec2(uv.x, uv.y - 0.1* iTime));\n    //fragColor = texture(iChannel1, uv);\n    fragColor = vec4(1);\n    fragColor *= pow((1.0 - (5.0 - rad * 5.0) * abs(rad - level * 0.75)), 2.1);\n    // fragColor = clamp(fragColor, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nfloat hue2rgb(float f1, float f2, float hue) {\n    if (hue < 0.0)\n        hue += 1.0;\n    else if (hue > 1.0)\n        hue -= 1.0;\n    float res;\n    if ((6.0 * hue) < 1.0)\n        res = f1 + (f2 - f1) * 6.0 * hue;\n    else if ((2.0 * hue) < 1.0)\n        res = f2;\n    else if ((3.0 * hue) < 2.0)\n        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n    else\n        res = f1;\n    return res;\n}\n\nvec3 hsl2rgb(vec3 hsl) {\n    vec3 rgb;\n    \n    if (hsl.y == 0.0) {\n        rgb = vec3(hsl.z); // Luminance\n    } else {\n        float f2;\n        \n        if (hsl.z < 0.5)\n            f2 = hsl.z * (1.0 + hsl.y);\n        else\n            f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n            \n        float f1 = 2.0 * hsl.z - f2;\n        \n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n        rgb.g = hue2rgb(f1, f2, hsl.x);\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n    }   \n    return rgb;\n}\n\nfloat psin(float x) {\n    return sin(x) * 0.5 + 0.5;\n}\n\nfloat hue(float h, float a) {\n    return mod(h * 0.1 + a, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 pos = vec2(fragCoord);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    float scl = 500.0;\n    pos = scl * uv;\n    \n    float s = sin(iTime * 0.4) * 3.0 * scl * 0.05;\n    float x = pos.x + s * sin(pos.y * 0.03 + sin(iTime) * 1.1213);\n    float y = pos.y + s * sin(pos.x * 0.03 + iTime * 1.1534);\n\n    pos = vec2(x, y);\n\n    float dist = 5.0 * length(uv - vec2(0.5, 0.5));\n\n    float w = scl; //iResolution.x;\n    float h = scl; //iResolution.y;\n\n    float b = 1.0 - 1.0 * min(1.0, dist * 0.00075);\n\n    fragColor = vec4(0);\n    \n    fragColor += vec4(hsl2rgb(vec3(\n        hue(iTime, 0.0),\n        0.5 + 0.5 * psin(iTime * -0.74),\n        b * psin(0.05 * dist * 0.5 - 2.0 * iTime + 3.14)\n    )), 1.0);\n\n    fragColor += vec4(hsl2rgb(vec3(\n        hue(iTime, 0.1),\n        0.5 + 0.5 * psin(iTime * -0.63),\n        b * psin(0.05 * dist * 0.5 - 2.0 * iTime)\n    )), 1.0);\n\n    fragColor += vec4(hsl2rgb(vec3(\n        hue(iTime, 0.3),\n        1.0,\n        0.5 * pow((1.0 - b), 2.0) * psin(0.05 * dist * 1.0 + 10.0 * iTime + 3.14)\n    )), 1.0);\n\n    fragColor += vec4(hsl2rgb(vec3(\n        hue(iTime, 0.2),\n        1.0,\n        0.5 * pow((1.0 - b), 2.0) * psin(0.05 * dist * 1.0 + 10.0 * iTime)\n    )), 1.0);\n\n    float o = 3.14 * sin(dist) * 2.0 * 3.14;\n\n    s = 0.1 + 0.9 * pow((\n        psin(o + 0.015 * (pos.x+100.0*psin(iTime+pos.x*0.02-o) + pos.y+5.0*psin(iTime-o*0.34))) +\n        psin(o + 0.015 * (pos.x - pos.y+50.0+50.0*psin(-iTime+pos.y*0.02+o)))\n    ), 1.0);\n\n    s = pow(s, 3.0 + 2.0 * psin(iTime * 0.743 + dist * 0.001));\n\n    fragColor = fragColor * vec4(s, s, s, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 center = vec2(0.5, 0.5);\n    float rad = length(center - uv);\n\n   \tfragColor = vec4(0.0);\n    \n    float t = iTime * 0.1;\n    \n    vec4 c0 = texture(iChannel0, uv + vec2(t, rad));\n    vec4 c1 = texture(iChannel1, uv - vec2(t, rad));\n    \n\tfragColor += mix(c0, c1, 0.5 + 0.5 * sin(t * 53.0 - 10.0 * rad)) / (max(c0, c1) * max(c0, c1));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv) * 0.4;\n    fragColor += texture(iChannel1, uv) * 0.6;\n    \n    //fragColor = texture(iChannel1, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "musicstream",
                        "id": 10587,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/b-complex/beautiful-lies"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}