{
    "Shader": {
        "info": {
            "date": "1461549032",
            "description": "Just trying to make something that sounds like music without any if statements.",
            "flags": 8,
            "hasliked": 0,
            "id": "XstSDj",
            "likes": 18,
            "name": "Music no ifs",
            "published": 3,
            "tags": [
                "music"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 800
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n#define bps 6.0\nfloat nofs(float n){//the song's \"random\" ring\n    return floor(sin(mod(n,8.0)*4.0)*5.0);\n}\n\nfloat scale(float note){//throws out dissonant tones\n   float n2=mod(note,12.0);\n   //n2=mod(n2,5.0);n2=mod(n2,3.0);n2=mod(n2,2.0);return note*step(0.5,n2);//minor\n   n2=mod(n2,5.0);n2=mod(n2,2.0);return note*step(0.5,n2);//blues\n   //if((n2==1.0)||(n2==3.0)||(n2==6.0)||(n2==8.0)||(n2==10.0))note=-100.0;//major\n   //if((n2==1.0)||(n2==4.0)||(n2==6.0)||(n2==9.0)||(n2==11.0))note=-100.0;//minor\n   //return note;\n}\n// note number to frequency  from https://www.shadertoy.com/view/ldfSW2\nfloat ntof(float n){return (n>0.0)?440.0 * pow(2.0, (n - 67.0) / 12.0):0.0;}\n\nfloat Saw(float t,float s){s*=0.5;return smoothstep(0.0,s,fract(t))*smoothstep(1.0,s,fract(t))*2.0-1.0;}\nfloat Sin(float t){return sin(t*PI);}\nfloat Square(float t,float s){s*=0.25;return smoothstep(0.25-s,0.25+s,fract(t))*smoothstep(0.75+s,0.75-s,fract(t))*2.0-1.0;}\nfloat Env(float t,float s){s*=0.5;return smoothstep(0.0,s,t)*smoothstep(1.0,s,t);}\nfloat Env(float t,float s,float e){return smoothstep(0.0,s,t)*smoothstep(e,s,t);}\nfloat rand(float t){return fract(sin(mod(t,4321.123)*4321.123)*4321.123);}\nfloat noise(float t){float f=fract(t);t=floor(t);return mix(rand(t),rand(t+1.0),f);}\nfloat snoise(float t){float f=fract(t);t=floor(t);return mix(rand(t),rand(t+1.0),f*f*(3.0-2.0*f));}\nfloat drive(float a, float d){return a*d/(1.0+abs(a*d));}\nfloat spow(float a, float p){return sign(a)*pow(abs(a),p);}\n\n#define TAU 6.283185\n#define wav cosine\nvec2 cosine(vec2 t){return cos(TAU*t);}\n\nfloat I(float tf, float c, float s){// taken from jnorberg https://www.shadertoy.com/view/lt2GRy\n   float wf=c*24.0;//# of harmonics to simulate, s is smoothing\n   vec2 w=vec2(0.125,1.125)+vec2(floor(wf));w*=2.0;\n   float p=fract(tf),sw=1.0-2.0*p,ip=1.0-p;\n   vec2 sinc=-wav(w*p)/(1.0+s*p)+wav(w*ip)/(1.0+s*ip);\n   return (sw+mix(sinc.x,sinc.y,fract(wf)))*0.5;\n}\nfloat hihat(float t, float o, float n){\n   float bt=fract(fract(t-o));\n   return Env(bt*2.0,0.1)*n*(1.0-fract(t*0.5));\n}\nfloat tamb(float t, float o, float n){\n   float bt=fract(fract(t-o)*1.5);\n   float f=t*3500.0+bt*75.0*n-noise(bt*75.0*(1.0-0.9*bt))*7.0;\n   float a2=Square(f,bt);\n   return a2*Env(bt*(2.0+2.0*n),0.01)*Sin(1.0/(0.02+2.0*bt*bt));\n}\nfloat flute(float bt,float t,float f){\n   float e=Env(bt,0.1,0.5),m=(1.0-e)*sin(t*40.0)*0.08;\n   return Env(bt,0.4)*(snoise(t*1000.0)*e*0.15+m+0.5)*Square(t*f+m,0.3+bt*0.5);\n}\nfloat strings(float bt,float t,float f){\n   float e=Env(bt,0.1,0.5),m=(1.0-e)*sin(t*50.0)*0.0001*f;\n   return Env(bt,0.5)*(m+0.5)*I(t*f+m,0.1-bt*0.2,0.9);\n}\nfloat drum(float t, float o, float b, float f, float fd){\n   float bt=fract(fract(t-o)*b),n=snoise(bt*f*(1.0-bt));\n   return Env(bt*fd,0.1)*(n*sin(exp(-bt * 100.0) * 60.0));\n}\nfloat sound(float time){\n   float tim=time*bps;\n   float b=floor(tim);\n   float n=nofs(b*0.0078125),n0=n+nofs(b*0.0625),n1=n0+nofs(b*0.25),n2=n1+nofs(b);\n   float bt=fract(tim);\n   n0=scale(n0+32.0);if(n0<1.0)n0=scale(nofs(b*0.0625)+33.0);//keep base going\n   float a=strings(fract(tim*0.25),time,ntof(n0));\n   a=spow(a,0.25+fract(tim*0.5))*48.0/max(1.0,n0);\n   float vol=0.5/max(0.25*n1,1.0);\n   a+=strings(fract(tim*0.5),time,ntof(scale(n1+72.0)))*vol;\n   a+=strings(fract(tim*0.5),time,ntof(scale(n1+75.0)))*vol;\n   a+=strings(fract(tim*0.5),time,ntof(scale(n1+79.0)))*vol;\n   a+=flute(fract(tim),time,ntof(scale(n2+60.0)))*0.8;\n   a+=hihat(tim,0.125,rand(mod(time,10.0)))*0.5;\n   a+=drum(tim*0.125,0.5,1.5,8000.0,4.0);\n   a+=drum(tim*0.125,0.0,1.125,500.0,6.0)*0.75;\n   a=clamp(a*0.25,-1.0,1.0);\n   return a;\n}\nvec2 mainSound( in int samp,float time){\n   vec2 v=vec2(sound(time));\n   return v;\n}\n#define iSampleRate 44100.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n   float tym=2.0*(fragCoord.x+fragCoord.y*iResolution.x)/iSampleRate;\n   if(abs(tym-iTime)<0.01){fragColor=vec4(1.0,0.0,0.0,1.0);return;}\n   fragColor=vec4(mainSound( in int samp,tym)*0.5+0.5,0.0,1.0);//mainSound( in int samp,tym+1.0/iSampleRate)*0.5+0.5);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159\n#define bps 6.0\nfloat nofs(float n){//the song's \"random\" ring\n    return floor(sin(mod(n,8.0)*4.0)*5.0);\n}\n\nfloat scale(float note){//throws out dissonant tones\n   float n2=mod(note,12.0);\n   //n2=mod(n2,5.0);n2=mod(n2,3.0);n2=mod(n2,2.0);return note*step(0.5,n2);//minor\n   n2=mod(n2,5.0);n2=mod(n2,2.0);return note*step(0.5,n2);//blues\n   //if((n2==1.0)||(n2==3.0)||(n2==6.0)||(n2==8.0)||(n2==10.0))note=-100.0;//major\n   //if((n2==1.0)||(n2==4.0)||(n2==6.0)||(n2==9.0)||(n2==11.0))note=-100.0;//minor\n   //return note;\n}\n// note number to frequency  from https://www.shadertoy.com/view/ldfSW2\nfloat ntof(float n){return (n>0.0)?440.0 * pow(2.0, (n - 67.0) / 12.0):0.0;}\n\nfloat Saw(float t,float s){s*=0.5;return smoothstep(0.0,s,fract(t))*smoothstep(1.0,s,fract(t))*2.0-1.0;}\nfloat Sin(float t){return sin(t*PI);}\nfloat Square(float t,float s){s*=0.25;return smoothstep(0.25-s,0.25+s,fract(t))*smoothstep(0.75+s,0.75-s,fract(t))*2.0-1.0;}\nfloat Env(float t,float s){s*=0.5;return smoothstep(0.0,s,t)*smoothstep(1.0,s,t);}\nfloat Env(float t,float s,float e){return smoothstep(0.0,s,t)*smoothstep(e,s,t);}\nfloat rand(float t){return fract(sin(mod(t,4321.123)*4321.123)*4321.123);}\nfloat noise(float t){float f=fract(t);t=floor(t);return mix(rand(t),rand(t+1.0),f);}\nfloat snoise(float t){float f=fract(t);t=floor(t);return mix(rand(t),rand(t+1.0),f*f*(3.0-2.0*f));}\nfloat drive(float a, float d){return a*d/(1.0+abs(a*d));}\nfloat spow(float a, float p){return sign(a)*pow(abs(a),p);}\n\n#define TAU 6.283185\n#define wav cosine\nvec2 cosine(vec2 t){return cos(TAU*t);}\n\nfloat I(float tf, float c, float s){// taken from jnorberg https://www.shadertoy.com/view/lt2GRy\n   float wf=c*24.0;//# of harmonics to simulate, s is smoothing\n   vec2 w=vec2(0.125,1.125)+vec2(floor(wf));w*=2.0;\n   float p=fract(tf),sw=1.0-2.0*p,ip=1.0-p;\n   vec2 sinc=-wav(w*p)/(1.0+s*p)+wav(w*ip)/(1.0+s*ip);\n   return (sw+mix(sinc.x,sinc.y,fract(wf)))*0.5;\n}\nfloat hihat(float t, float o, float n){\n   float bt=fract(fract(t-o));\n   return Env(bt*2.0,0.1)*n*(1.0-fract(t*0.5));\n}\nfloat tamb(float t, float o, float n){\n   float bt=fract(fract(t-o)*1.5);\n   float f=t*3500.0+bt*75.0*n-noise(bt*75.0*(1.0-0.9*bt))*7.0;\n   float a2=Square(f,bt);\n   return a2*Env(bt*(2.0+2.0*n),0.01)*Sin(1.0/(0.02+2.0*bt*bt));\n}\nfloat flute(float bt,float t,float f){\n   float e=Env(bt,0.1,0.5),m=(1.0-e)*sin(t*40.0)*0.08;\n   return Env(bt,0.4)*(snoise(t*1000.0)*e*0.15+m+0.5)*Square(t*f+m,0.3+bt*0.5);\n}\nfloat strings(float bt,float t,float f){\n   float e=Env(bt,0.1,0.5),m=(1.0-e)*sin(t*50.0)*0.0001*f;\n   return Env(bt,0.5)*(m+0.5)*I(t*f+m,0.1-bt*0.2,0.9);\n}\nfloat drum(float t, float o, float b, float f, float fd){\n   float bt=fract(fract(t-o)*b),n=snoise(bt*f*(1.0-bt));\n   return Env(bt*fd,0.1)*(n*sin(exp(-bt * 100.0) * 60.0));\n}\nfloat sound(float time){\n   float tim=time*bps;\n   float b=floor(tim);\n   float n=nofs(b*0.0078125),n0=n+nofs(b*0.0625),n1=n0+nofs(b*0.25),n2=n1+nofs(b);\n   float bt=fract(tim);\n   n0=scale(n0+32.0);if(n0<1.0)n0=scale(nofs(b*0.0625)+33.0);//keep base going\n   float a=strings(fract(tim*0.25),time,ntof(n0));\n   a=spow(a,0.25+fract(tim*0.5))*48.0/max(1.0,n0);\n   float vol=0.5/max(0.25*n1,1.0);\n   a+=strings(fract(tim*0.5),time,ntof(scale(n1+72.0)))*vol;\n   a+=strings(fract(tim*0.5),time,ntof(scale(n1+75.0)))*vol;\n   a+=strings(fract(tim*0.5),time,ntof(scale(n1+79.0)))*vol;\n   a+=flute(fract(tim),time,ntof(scale(n2+60.0)))*0.8;\n   a+=hihat(tim,0.125,rand(mod(time,10.0)))*0.5;\n   a+=drum(tim*0.125,0.5,1.5-0.5*floor(mod(tim*0.125,4.0)/3.0),8000.0,4.0);\n   a+=drum(tim*0.125,0.0,1.125,500.0,6.0)*0.75;\n   a=clamp(a*0.25,-1.0,1.0);\n   return a;\n}\nvec2 mainSound( in int samp,float time){\n   vec2 v=vec2(sound(time),sound(time+0.01));\n   //time-=0.1;\n   //v+=vec2(sound(time),sound(time+0.005))*0.4;\n   v+=dFdy(v)*(time*0.01);\n   \n   return v;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 38
                    }
                ],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}