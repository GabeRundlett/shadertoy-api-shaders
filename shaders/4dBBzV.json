{
    "Shader": {
        "info": {
            "date": "1501086055",
            "description": "This rules are not trusted for EVERY number ( that's the Collatz conjecture). I think this is not the best implementation in performance terms, but it can calculate concrete numbers. I'm not an expert on this and every suggestion will be received!",
            "flags": 112,
            "hasliked": 0,
            "id": "4dBBzV",
            "likes": 17,
            "name": "[SH17C]Collatz sequences ",
            "published": 3,
            "tags": [
                "tutorial",
                "rays",
                "learning",
                "collatz",
                "sh17c",
                "anemonas"
            ],
            "usePreview": 0,
            "username": "Nesvi7",
            "viewed": 1221
        },
        "renderpass": [
            {
                "code": "//Thanks to Numberphile for initiating me in such cool effect! Check this: https://www.youtube.com/watch?v=LqKpkdRRLZw\n//The duration of the \"tutorial\" is around 3 minutes (~190 secs)\n\n#define lsize 0.0625\n\nconst float INTRO_TIME = 5.;\nconst float INTRO_TIME2 = 10.+INTRO_TIME;\nconst float INTRO_TIME3 = 10.+INTRO_TIME2;\nconst float SEQUENCE_TIME = 99.+INTRO_TIME3;\nconst float BRANCH_TIME = 50. + SEQUENCE_TIME;\nconst float BIDI_COLLATZ = 10. + BRANCH_TIME;\nconst float TRIDI_COLLATZ = 50. + BIDI_COLLATZ;\n    \nconst vec2 N0 = vec2(0.,12.)*lsize;\nconst vec2 N1 = vec2(1.*lsize,lsize*12.);\nconst vec2 N2 = vec2(2.*lsize,lsize*12.);\nconst vec2 N3 = vec2(3.*lsize,lsize*12.);\nconst vec2 N4 = vec2(4.*lsize,lsize*12.);\nconst vec2 N5 = vec2(5.*lsize,lsize*12.);\nconst vec2 N6 = vec2(6.*lsize,lsize*12.);\nconst vec2 N7 = vec2(7.*lsize,lsize*12.);\nconst vec2 N8 = vec2(8.*lsize,lsize*12.);\nconst vec2 N9 = vec2(9.*lsize,lsize*12.);\n\nconst vec2 LA = vec2(1.,11.)*lsize;\nconst vec2 LB= vec2(2.,11.)*lsize;\nconst vec2 LC = vec2(3.,11.)*lsize;\nconst vec2 LD = vec2(4.,11.)*lsize;\nconst vec2 LE = vec2(5.,11.)*lsize;\nconst vec2 LF = vec2(6.,11.)*lsize;\nconst vec2 LG = vec2(7.,11.)*lsize;\nconst vec2 LH = vec2(8.,11.)*lsize;\nconst vec2 LI = vec2(9.,11.)*lsize;\nconst vec2 LJ = vec2(10.,11.)*lsize;\nconst vec2 LK = vec2(11.,11.)*lsize;\nconst vec2 LL = vec2(12.,11.)*lsize;\nconst vec2 LN = vec2(14.,11.)*lsize;\nconst vec2 LM = vec2(13.,11.)*lsize;\nconst vec2 LO = vec2(15.,11.)*lsize;\n\nconst vec2 LP = vec2(0.,10.)*lsize;\nconst vec2 LQ= vec2(1.,10.)*lsize;\nconst vec2 LR = vec2(2.,10.)*lsize;\nconst vec2 LS = vec2(3.,10.)*lsize;\nconst vec2 LT = vec2(4.,10.)*lsize;\nconst vec2 LU = vec2(5.,10.)*lsize;\nconst vec2 LV = vec2(6.,10.)*lsize;\nconst vec2 LW = vec2(7.,10.)*lsize;\nconst vec2 LX = vec2(8.,10.)*lsize;\nconst vec2 LY = vec2(9.,10.)*lsize;\nconst vec2 LZ = vec2(10.,10.)*lsize;\n\nconst vec2 SPA = vec2(0.,13.)*lsize;\nconst vec2 SP = vec2(11.,13.)*lsize;\nconst vec2 SE = vec2(13.,12.)*lsize;\nconst vec2 SA = vec2(10.,13.)*lsize;\nconst vec2 SD = vec2(15.,13.)*lsize;\nconst vec2 SAR = vec2(18,14)*lsize;\n\n#define Label(p,uv, scale, array) ((int(floor((p = ((uv-p)*scale)+vec2(float(array.length())*.5,.5)).x) ) >= array.length() || int(floor(p.x) ) < 0 || p.y > 1. || p.y < 0.) ? vec4(0) : texture( iChannel0, mod(p*lsize,lsize) + array[int(p.x)]))\n#define IntToText(val,array) for( int i = 0; i < array.length(); i++){\tarray[i] = N0 + vec2( mod(floor(val/pow(10.,float(array.length()-i-1))),10.)*lsize,0.); }\n\nconst vec3 backgroundColor = vec3(239,234,204)/255.;\nconst vec3 color1 = vec3(122.,106.,70.)/255.;\nconst vec3 color2 = vec3(162.,54.,7.)/255.;\nconst vec3 color3 = vec3(78,32,9)/255.;\n\nconst vec2 even[] = vec2[](LE,LV,LE,LN);\nconst vec2 odd[] = vec2[](LO,LD,LD);\n\nconst vec2 oddFormula[] = vec2[](LO,LD,LD,SAR,LX,SE,N3,SA,LX, SP,N1);\nconst vec2 evenFormula[] = vec2[](LE,LV,LE,LN,SAR,LX,SE,LX, SD,N2);\n\nconst vec2 TURN_RIGHT[] = vec2[](LE,LV,LE,LN,SAR,LT,LU,LR,LN,SPA,LR,LI,LG,LH,LT);\nconst vec2 TURN_LEFT[] = vec2[](LO,LD,LD,SAR,LT,LU,LR,LN,SPA,LL,LE,LF,LT);\n\nconst vec2 INTRO1[] = vec2[](LH,LO,LW,SPA,LT,LO,SPA,LC,LA,LL,LC,LU,LL,LA,LT,LE,SPA,LA,LN,LD,SPA,LR,LE,LP,LR,LE,LS,LE,LN,LT,SPA);\nconst vec2 INTRO2[] = vec2[](LA,SPA,LC,LO,LL,LL,LA,LT,LZ,SPA,LS,LE,LQ,LU,LE,LN,LC,LE);\nconst vec2 INTRO3[] = vec2[](LF,LO,LL,LL,LO,LW,LI,LN,LG,SPA,LT,LH,LE,SPA,LN,LE,LX,LT,SPA,LR,LU,LL,LE,LS,SPA,LE,LV,LE,LR,LY);\nconst vec2 INTRO4[] = vec2[](LP,LO,LS,LI,LT,LI,LV,LE,SPA,LI,LN,LT,LE,LG,LE,LR,SPA,LN,LU,LM,LB,LE,LR,SPA,LW,LI,LL,LL,SPA,LR,LE,LA,LC,LH,SPA,LO,LN,LE);\nconst vec2 INTRO5[] = vec2[](LT,LH,LE,SPA,LF,LI,LN,LA,LL,SPA,LS,LE,LQ,LU,LE,LN,LC,LE,SPA,LC,LA,LN,SPA,LB,LE,SPA,LU,LS,LE,LD,SPA);\nconst vec2 INTRO6[] = vec2[](LT,LO,SPA,LG,LE,LN,LE,LR,LA,LT,LE,SPA,LB,LE,LA,LU,LT,LI,LF,LU,LL,SPA,LB,LR,LA,LN,LC,LH,LE,LS,SPA,LA,LN,LD,SPA,LL,LI,LN,LE,LS);\nconst vec2 INTRO7[] = vec2[](LL,LE,LT,LS,SPA,LS,LT,LA,LR,LT,SPA,LW,LI,LT,LH,SPA,N4,N9,N8);\n\nconst vec2 ROTATION[] = vec2[](LN,LO,LW,SPA,LL,LE,LT,LS,SPA,LB,LU,LI,LL,LD,SPA,LT,LH,LE,SPA,LT,LR,LE,LE,SPA);\nconst vec2 ROTATION2[] = vec2[](LS,LT,LA,LR,LT,LI,LN,LG,SPA,LW,LI,LT,LH,SPA,N1,SPA,LA,LN,LD,SPA);\nconst vec2 ROTATION3[] = vec2[](LR,LO,LT,LA,LT,LI,LN,LG,SPA,LR,LI,LG,LH,LT,SPA,LA,LN,LD,SPA,LL,LE,LF,LT,SPA,LW,LH,LE,LN);\nconst vec2 ROTATION4[] = vec2[](SPA,LT,LH,LE,SPA,LV,LA,LL,LU,LE,SPA,LI,LS,SPA,LE,LV,LE,LN,SPA,LO,LR,SPA,LO,LD,LD);\n    \nconst vec2 RESULT2D[] = vec2[](LT,LH,LI,LS,SPA,LI,LS,SPA,LT,LH,LE,SPA,LR,LE,LS,LU,LL,LT,SPA,LW,LI,LT,LH,SPA,LM,LU,LL,LT,LI,LP,LL,LE,SPA,LB,LR,LA,LN,LC,LH,LE,LS);\n\nconst vec2 RESULT3D[] = vec2[](LA,LN,LD,SPA,LY,LO,LU,SPA,LC,LA,LN,SPA,LT,LW,LE,LA,LK,SPA,LT,LH,LE,SPA,LM,LE,LT,LH,LO,LD,SPA);\nconst vec2 RESULT3D2[] = vec2[](LT,LO,SPA,LG,LE,LN,LE,LR,LA,LT,LE,SPA,LI,LN,LT,LE,LR,LE,LS,LT,LI,LN,LG,SPA,N3,LD,SPA,LP,LA,LT,LH,LS);\n\nconst vec2 USEARROWS[] = vec2[](LU,LS,LE,SPA,LA,LR,LR,LO,LW,LS,SPA,LT,LO,SPA,LN,LA,LV,LI,LG,LA,LT,LE);\n\nfloat series[50];\n\nfloat Line(vec2 a, vec2 b, vec2 c){\n    vec2 ac = c-a;\n    vec2 ab = b-a;\n    vec2 bc = c-b;\n    float abl = length(ab);\n    float acl = length(ac);\n    float bcl = length(bc);\n    float dotacab= dot(ac,ab)/abl;\n    \n    float dist = acl > abl? bcl : bcl > abl ? acl : sqrt(acl*acl - dotacab*dotacab);\n    \n    return 1.-smoothstep(dist, 0.0, 0.003);\n}\n\nfloat Circunference(vec2 c, float r, vec2 p){\n    return 1.-smoothstep(abs(length(c-p)-r), 0.0, 0.003);\n}\n\nfloat Circle(vec2 c, float r, vec2 p){\n    return length(c-p)-r<0. ? 1.: 0.;\n}\n\nvec4 CircleWithBorder(vec2 c, float r, vec2 p, vec3 color1, vec3 color2){\n\tfloat circle = Circle(c,r,p);    \n    float circunference = Circunference(c,r,p);\n    return vec4(circle*color1*(1.-circunference) + circunference*color2, 1.-max(circle,circunference));\n}\n\nvec4 NumberCircle(vec2 p, vec2 uv, float number){\n    \n\tvec2 intNumber[] = vec2[](N0,N1,N3);\n    IntToText(number,intNumber);    \n    vec4 result = CircleWithBorder(p,.2,uv,color2,color3);\n    \n    vec2 numberp = p;\n    vec2 evenoddp = p - vec2(0,.1);\n    \n    result += Label( numberp, uv, 9., intNumber).r;\n    \n    if( floor(mod(number,2.)) == 0.)\n    \tresult += Label( evenoddp, uv, 20., even).r;\n    else\n        result += Label( evenoddp, uv, 20., odd).r;\n    \n    return result;\n}\n\nfloat Collatz(float x){//13->40->20->10->5->16->8->4->2->1\n    if(mod(x,2.0) == 0.0){\n    \treturn x/2.0;\n    }\n    else{\n        return 3.0*x+1.0;\n    }\n}\n\nvec4 CollatzLabels(vec2 uv){\n    \n    float time = iTime + texture(iChannel1,vec2(0,0)).a;\n    \n    vec4 fragColor = vec4(backgroundColor,0);\n\tconst float offset = 1.;\n    float d = 99999.0;\n    float iters = 0.0;\n    \n    vec2 collatzUV = uv;\n    \n    float collatzValue = 498.;\n    vec2 lastPos = vec2(0,0);\n    vec2 pos = vec2(0,0);\n    float angleOffset = 0.3;\n    float angle = 0.;\n    int lastIndex;\n    \n    const int limit = 50;\n    for( int i = 0; i < limit; i++){\n\t\t\n        collatzValue = i == 0 ? collatzValue : Collatz(collatzValue);\n\t\tseries[i] = collatzValue;\n        if( collatzValue == 1.0){\n\t\t\tlastIndex = i;\n            break;\n        }\n        \n    }\n    \n    if( time < INTRO_TIME ){\n        //Background\n        float collatz2D = texture(iChannel1, uv).r;\n        collatz2D = collatz2D >.01 ? collatz2D : 0.;\n        fragColor.rgb = fragColor.rgb*(1.-collatz2D) + collatz2D*color2;\n        \n        vec2 introTextPos = vec2(.9,.5);\n    \tfloat introText = Label(introTextPos,collatzUV, 26., INTRO1).r;  \n        introTextPos = vec2(.9,.45);\n        introText = max( introText, Label(introTextPos,collatzUV, 26., INTRO2).r );\n        \n        introTextPos = vec2(.9,.45);\n        introText = max( introText, Label(introTextPos,collatzUV, 26., INTRO2).r );\n        \n        introTextPos = vec2(.9,.35);\n        introText = max( introText, Label(introTextPos,collatzUV, 26., USEARROWS).r*(sin(time*10.)*.5+.5) );\n        \n        fragColor = fragColor*(1.-introText);\n        \n    }\n    else if( time < INTRO_TIME2 ){\n        float collatz2D = texture(iChannel1, uv).r;\n        collatz2D = collatz2D >.01 ? collatz2D : 0.;\n        fragColor.rgb = fragColor.rgb*(1.-collatz2D) + collatz2D*color2;\n        \n        vec2 introTextPos = vec2(.9,.5);\n    \tfloat introText = Label(introTextPos,collatzUV, 26., INTRO3).r;  \n        introTextPos = vec2(.9,.45);\n        introText = max( introText, Label(introTextPos,collatzUV, 26., INTRO4).r );\n        introTextPos = vec2(.9,.35);\n        introText = max( introText,Label(introTextPos,collatzUV, 15., oddFormula).r);\n        introTextPos = vec2(.9,.25);\n        introText = max( introText,Label(introTextPos,collatzUV, 15., evenFormula).r);\n        fragColor = fragColor*(1.-introText);\n    }\n    else if( time < INTRO_TIME3 ){\n        float collatz2D = texture(iChannel1, uv).r;\n        collatz2D = collatz2D >.01 ? collatz2D : 0.;\n        fragColor.rgb = fragColor.rgb*(1.-collatz2D) + collatz2D*color2;\n        \n        vec2 introTextPos = vec2(.9,.5);\n    \tfloat introText = Label(introTextPos,collatzUV, 26., INTRO5).r;  \n        introTextPos = vec2(.9,.45);\n        introText = max( introText, Label(introTextPos,collatzUV, 26., INTRO6).r );        \n        \n        fragColor = fragColor*(1.-introText);\n    }\n    else if( time < SEQUENCE_TIME ){\n        \n        const float speed = .5;\n        float clock = (time-INTRO_TIME3) * speed;\n        collatzUV -=  vec2(.6,.5-clock*.5);\n        for( int i = 0; i <= lastIndex; i++){\n            if( i == (int( clock )+1) || i == int( clock ) || i == (int( clock ) - 1)){ \n                vec4 circle = NumberCircle(vec2(0.,float(i)*.5), collatzUV, series[i]);\n                float mixValue = i == int( clock )+1 ?  fract(clock): i <= int(clock)? 1. : 0.;\n                fragColor.rgb = mix( fragColor.rgb, circle.rgb + fragColor.rgb * circle.a, mixValue);\n\n                float l= Line(vec2(.6,float(i)*.5+.1-.5),vec2(.2,float(i)*.5-.1),collatzUV);\n                l = max(l,Line(vec2(.2,float(i)*.5+.4-.5),vec2(.3,float(i)*.5-.1),collatzUV));\n                l = max(l,Line(vec2(.2,float(i)*.5+.4-.5),vec2(.2,float(i)*.5-.2),collatzUV));\n                l = i == 0 ? 0. : l;\n                vec4 line = vec4(color3*l,1.-l);\n                fragColor.rgb =  mix(fragColor.rgb, line.rgb*(1.-line.a) + fragColor.rgb * (line.a), mixValue);\n\n                vec2 oddPosition = vec2(.7,float(i)*.5), evenPosition = oddPosition + vec2(-.04,0.);\n                float oddFormulaText = min(Label(oddPosition,collatzUV, 15., oddFormula).r,mixValue);            \n                float evenFormulaText = min(Label(evenPosition,collatzUV, 15., evenFormula).r,mixValue);\n                fragColor = fragColor*(1.-(mod(series[i],2.)==0.?evenFormulaText: oddFormulaText));\n            }\n        }\n        \n        \n    }\n    else if( time < BRANCH_TIME){\n        vec2 degreesUV = uv;\n        collatzUV -=  vec2(.6,-1.);\n        vec4 collatzLabels[50];\n        \n        for( int i = lastIndex; i >= 0 ; i--){\n\n                collatzValue = series[i];        \n\n                if( mod( collatzValue, 2.0 ) == 0.0 ){\n                    angle += angleOffset*1.;\n                    pos += vec2( sin( angle ), cos( angle ) ) * offset;\n                }\n                else{\n                    angle -= angleOffset * 2.5;\n                    pos += vec2( sin(angle), cos(angle) ) * offset;\n                }\n\n                collatzLabels[lastIndex-i] = vec4(pos,collatzValue,angle);\n\n                lastPos = pos;\n        }\n\n\n\n        const float speed = 1.;\n        float time = time - SEQUENCE_TIME;\n        float clock = min(float( time) * speed,float(lastIndex));\n\n        float scale = (time) > 40. ? min((time - 40.)*10.+2.,100.) : 2.;   \n        collatzUV = uv*scale - vec2(.5)*scale + mix(collatzLabels[int( clock )].xy,\n                                        collatzLabels[ int( clock )+1].xy,\n                                        fract( clock ) );\n\n\n        for( int i = 0; i <= lastIndex; i++){\n            float l= Line(collatzLabels[i-1].xy,collatzLabels[i].xy,collatzUV);\n            vec4 line = vec4(color3*l,1.-l);\n            float mixValue = i == int( clock )+1 ?  fract(clock): i <= int(clock)? 1. : 0.;\n            fragColor.rgb =  mix(fragColor.rgb, line.rgb*(1.-line.a) + fragColor.rgb * (line.a), mixValue);\n        }\n\n        for( int i = 0; i <= lastIndex; i++){\n            vec4 circle = NumberCircle(collatzLabels[i].xy, collatzUV, collatzLabels[i].z);\n            float mixValue = i == int( clock )+1 ?  fract(clock): i <= int(clock)? 1. : 0.;\n            fragColor.rgb = mix( fragColor.rgb, circle.rgb + fragColor.rgb * circle.a, mixValue);\n        }\n        \n    \tvec2 evenp = vec2(1.2,.5);\n        vec2 oddp = vec2(1.2,.5);\n    \tfloat turnRight = Label( evenp, degreesUV, 16., TURN_RIGHT).r;\n        float turnLeft = Label( oddp, degreesUV, 16., TURN_LEFT).r;\n        \n        vec2 rotationTextPos = vec2(1.2,.3);\n        float rotationText = Label( rotationTextPos, uv, 25., ROTATION ).r;\n        rotationTextPos = vec2(1.2,.25);\n        rotationText = max(rotationText,Label( rotationTextPos, uv, 25., ROTATION2 ).r);\n        rotationTextPos = vec2(1.2,.2);\n        rotationText = max(rotationText,Label( rotationTextPos, uv, 25., ROTATION3 ).r);\n        rotationTextPos = vec2(1.2,.15);\n        rotationText = max(rotationText,Label( rotationTextPos, uv, 25., ROTATION4 ).r);\n        \n        fragColor = fragColor*(1.-rotationText);\n        \n        \n        fragColor *= 1.-(mod(collatzLabels[int( clock )+1].b,2.)==0. ? turnRight : turnLeft)*fract(clock);\n    }\n    else if( time < BIDI_COLLATZ){\n        fragColor = texture(iChannel1,(uv*iResolution.y)/iResolution.xy);\n        \n        vec2 textPos = vec2(.9,.9);\n        float text = Label( textPos, uv, 25., RESULT2D ).r * max(0., 1.-(time-BRANCH_TIME-2.)/2.);        \n        fragColor = fragColor*(1.-text) + text;\n        \n    }\n    else {\n     \tfragColor = clamp(texture(iChannel2,(uv*iResolution.y)/iResolution.xy),vec4(0,0,0,0),vec4(1,1,1,1));\n        \n        vec2 textPos = vec2(.9,.9);\n        float text = Label( textPos, uv, 25., RESULT3D ).r * max(0., 1.-(time-BIDI_COLLATZ-6.)/2.);\n        textPos = vec2(.9,.85);\n        text = max(text,Label( textPos, uv, 25., RESULT3D2 ).r * max(0., 1.-(time-BIDI_COLLATZ-6.)/2.));\n        fragColor.rgb = fragColor.rgb*(1.-text) + text;\n    }\n    \n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv =fragCoord.xy/iResolution.y;\n    \n    fragColor = CollatzLabels(uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "musicstream",
                        "id": 11566,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/giorgioiannelli/yann_tiersen-amelie_piano_version"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n#define type1\n#define bubbles\n\nconst float INTRO_TIME = 5.;\nconst float INTRO_TIME2 = 10.+INTRO_TIME;\nconst float INTRO_TIME3 = 10.+INTRO_TIME2;\nconst float SEQUENCE_TIME = 99.+INTRO_TIME3;\nconst float BRANCH_TIME = 50. + SEQUENCE_TIME; \nconst float BIDI_COLLATZ = 10. + BRANCH_TIME;\nconst float TRIDI_COLLATZ = 50. + BIDI_COLLATZ;\n\n\n// ray marching\nconst int max_iterations = 100;\nconst float stop_threshold = 0.02;\nconst float grad_step = 0.01;\nconst float clip_far = 2000.;\nconst float clip_near = 1.;\n\n// math\nconst float PI = 3.14159265359;\nconst float TWOPI = PI*2.0;\nconst float DEG_TO_RAD = PI / 180.0;\n\n//Normals \nconst float normal_step = 0.02;\t\nconst vec3 dx = vec3( normal_step, 0.0, 0.0 );\nconst vec3 dy = vec3( 0.0, normal_step, 0.0 );\nconst vec3 dz = vec3( 0.0, 0.0, normal_step );\n\n//Light \nconst vec3 light_dir = vec3(1,1,0);\n\nstruct IntersectResult{\n\tvec3 p;\n\tfloat depth;\n    float matID;\n    vec3 n;\n};\n\n\nfloat line(vec3 a, vec3 b, vec3 c){\n    #ifdef bubbles\n    float width = .06+sin(c.y)/20.*10.;\n    width *= width;\n    return min(length(a-c)-width,length(b-c)-width);\n    #else\n    float width = .01;\n    #endif\n    vec3 ac = c-a;\n    vec3 ab = b-a;\n    vec3 bc = c-b;\n    float abl = length(ab);\n    float acl = length(ac);\n    float bcl = length(bc);\n    float dotacab= dot(ac,ab)/abl;        \n    return (acl > abl? bcl : bcl > abl ? acl : sqrt(acl*acl - dotacab*dotacab))-width;\n}\n\n\n\nconst int collatzIterlimit = 100;\nfloat serieA[collatzIterlimit];\nfloat serieB[collatzIterlimit];\nint lastIndexA = -1;\nint lastIndexB = -1;\n\nfloat Collatz(float x){//13->40->20->10->5->16->8->4->2->1\n    return mod(x,2.0) == 0.0 ? x/2.0 : 3.0 * x + 1.0;\n}\n\nvoid CalculateSeries(float value){\n    float collatzValueA = value;\n    float collatzValueB = value + 213452.;\n    \n    for( int i = 0; i <= collatzIterlimit; i++){        \n        collatzValueA = Collatz(collatzValueA);        \n\t\tserieA[i] = collatzValueA;        \n        if( collatzValueA == 1.){\n            lastIndexA = i;\n            break;\n        }\n    }\n    \n    for( int i = 0; i <= collatzIterlimit; i++){        \n        collatzValueB = Collatz(collatzValueB);        \n        serieB[i] = collatzValueB;        \n        if( collatzValueB == 1.){\n            lastIndexB = i;\n            break;\n        }\n    }\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\n\nvec2 CollatzSDF(vec3 p){\n    float collatzValueA;\n    float collatzValueB;\n    \n    vec3 pos = vec3(0),lastPos = vec3(0);\n    const float angleOffset = 0.12;\n    const float offset = 0.4;\n    float angle = 0., angle2 = 0.;\n    float iters = 0., d= 99999.;\n    \n\tfor( int i = collatzIterlimit; i >= 0; i--){\n        if(i < lastIndexA){\n            collatzValueA = serieA[i];\n            collatzValueB = serieB[i];\n\n            if( collatzValueA == 1.0 || collatzValueB == 1.0)\n                break;\n            \n            angle += mod(collatzValueA,2.0) == 0.0 ? angleOffset*1. : -angleOffset*2.5;\n            #ifdef type1\n            \tangle2 += mod(collatzValueB,2.0) == 0.0 ? -angleOffset*2. : angleOffset*3.5;\n            #else\n\t\t\t\tangle2 += float(i)*.01;\n            #endif\n            \n            \n            pos += vec3(sin(angle)*cos(angle2),cos(angle),sin(angle2))*offset;\n\t\t\t\n            \n            float lineDist = line(pos, lastPos, p);\n            if( lineDist <  d){\n                d = lineDist; //smin(lineDist,d,4.);\n                iters = float(i)/100.0f;\n            }    \n\n            lastPos = pos;\n        }\n    }   \n    \n    return vec2(d,iters);\n}\n\nvec2 Floor(in vec3 p){\n    return vec2(p.y,1);\n}\nvec2 MapMat( in vec3 p){\n    vec2 theFloor = Floor(p);\n    vec2 collatzSDF = CollatzSDF(p);\n    //theFloor.x = min(theFloor.x, .x);\n    return collatzSDF;\n}\n\nvec3 Normal( vec3 pos, in vec3 dir ){\n\tint aux;\n    vec3 aux2;\n\treturn normalize (\n\t\tvec3(\n\t\t\tMapMat( pos + dx ).x - MapMat( pos - dx ).x,\n\t\t\tMapMat( pos + dy ).x - MapMat( pos - dy ).x,\n\t\t\tMapMat( pos + dz ).x - MapMat( pos - dz ).x\t\t\t\n\t\t)\n\t);\n}\n\n\nIntersectResult Intersect(vec3 camPos, vec3 dir){\n    IntersectResult result;\n    result.p = vec3(0);\n    result.depth = clip_near;\n    result.matID = 0.;\n    \n    int detectedID = 0;\n    \n    for(int i = 0; i < max_iterations; i++){\n        vec2 map = MapMat(camPos + result.depth * dir);\n        float dist = map.x;\n        result.matID = map.y;\n\t\tresult.depth += dist;\n        if(result.depth >= clip_far){\n            result.depth = clip_far;\n            result.matID = -1.;\n            result.p = camPos+dir * result.depth;\n    \t\tresult.n = Normal(result.p,dir);\n            return result;\n        }\n        \n        if( dist < stop_threshold){\n            result.p = camPos+dir * result.depth;\n    \t\tresult.n = Normal(result.p,dir);\n            return result;\n        }\n        \t\n    }\n    \n    result.depth = clip_far;\n    result.matID = -1.;\n    result.p = camPos+dir * result.depth;\n    result.n = Normal(result.p,dir);\n    return result;    \n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec4 ProcessMaterials( in IntersectResult ir ){\n    float l = dot(light_dir, ir.n);\n    l = l*.5+.8;    \n    return vec4(l*palette( float(iFrame)*0.12341+ir.matID, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67)),1);;\n\t\n}\n\nvec4 Sky( in vec3 dir ){\n    return vec4(0);\n    return mix(vec4(.3,.5,.3,1),vec4(.3,.5,1,1),dot(dir,vec3(0,1,0))*.5+.5);\n}\n\nvec4 Fog(in vec4 color, in IntersectResult ir, in vec3 dir ){\n    \n    float f = pow(clamp(ir.depth*0.001,0.,1.),.1);\n    const float distancef = 30.0;\n    f = (length(ir.p))/distancef;\n    return mix( color, Sky(dir),pow(f,.8));\n}\n\nmat3 rotationXY( vec2 angle ) {\n\tvec2 c = cos( angle );\n\tvec2 s = sin( angle );\n\t\n\treturn mat3(\n\t\tc.y      ,  0.0, -s.y,\n\t\ts.y * s.x,  c.x,  c.y * s.x, \n\t\ts.y * c.x, -s.x,  c.y * c.x\n\t);\n}\n\nvec3 RayDir( float fov, vec2 size, vec2 pos ) {\n\tvec2 xy = pos - size * 0.5;\n\n\tfloat cot_half_fov = tan( ( 90.0 - fov * 0.5 ) * DEG_TO_RAD );\t\n\tfloat z = size.y * 0.5 * cot_half_fov;\t\n\treturn normalize( vec3( xy, z ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float time = iTime + texture(iChannel1,vec2(0,0)).a;\n    \n    if(  time > BIDI_COLLATZ ) {\n\n        #ifdef type1\n        vec3 dir = RayDir( 45.0, iResolution.xy, fragCoord.xy );    \n\n        mat3 rot = rotationXY( vec2( -PI*.5,-.5 ) );\n\n\n        vec3 cameraPosition = rot*vec3( 0.0, 0.0, 0.01 );\n        dir = rot* dir;\n        cameraPosition += vec3(1.,-10.,0);\n        #else\n            vec3 dir = RayDir( 45.0, iResolution.xy, fragCoord.xy );    \n\n        mat3 rot = rotationXY( vec2( .0,-.5 ) );\n\n\n        vec3 cameraPosition = rot*vec3( 0.0, 0.0, 0.01 );\n        dir = rot* dir;\n\n        cameraPosition += vec3(24.,9.,-20);\n\n        mat3 rot2 = rotationXY( vec2(0.,-PI*.5 ) );\n        cameraPosition = cameraPosition * rot2;\n        dir =  dir * rot2;\n        #endif\n\n\n\n        CalculateSeries(float(iFrame));\n        IntersectResult result = Intersect(cameraPosition,dir);    \n\n\n        fragColor = texture(iChannel0,uv);\n        vec4 colorCandidate = Fog( ProcessMaterials( result ), result, dir);\n        if( fragColor.a - result.depth > .1){\n            fragColor.rgb = colorCandidate.rgb;\n            fragColor.a = result.depth;   \n        }\n\t\t\n    }\n    else\n        fragColor = vec4(0.,0.,0., 999999.);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nconst float INTRO_TIME = 5.;\nconst float INTRO_TIME2 = 10.+INTRO_TIME;\nconst float INTRO_TIME3 = 10.+INTRO_TIME2;\nconst float SEQUENCE_TIME = 99.+INTRO_TIME3;\nconst float BRANCH_TIME = 50. + SEQUENCE_TIME;\nconst float BIDI_COLLATZ = 10. + BRANCH_TIME;\nconst float TRIDI_COLLATZ = 50. + BIDI_COLLATZ;\n\nconst float KEY_LEFT  = 37.5/256.0;\nconst float KEY_RIGHT = 39.5/256.0;\n\nfloat series[100];\n\nfloat Collatz(float x){//13->40->20->10->5->16->8->4->2->1\n    if(mod(x,2.0) == 0.0){\n    \treturn x/2.0;\n    }\n    else{\n        return 3.0*x+1.0;\n    }\n}\n\nfloat line(vec2 a, vec2 b, vec2 c){\n    vec2 ac = c-a;\n    vec2 ab = b-a;\n    float abl = length(ab);\n    float acl = length(ac);\n    float dotacab= dot(ac,ab)/abl;\n    \n    if( length(c-a) > length(b-a))\n        return length(c-b);\n    \n    if( length(c-b) > length(b-a) ){\n        return length(c-a);\n    }\n        \n    return sqrt(acl*acl - dotacab*dotacab);\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float time = iTime + texture(iChannel0,vec2(0,0)).a;\n    \n\tvec2 uv = fragCoord.xy/iResolution.xy; \n    \n\tfragColor = texture(iChannel0, uv);\n    \n    if( (time >= BRANCH_TIME && time < BIDI_COLLATZ) || time < INTRO_TIME3){\n\n\n        const float offset = 0.01;\n        float d = 99999.0;\n        float iters = 0.0;\n\n        vec2 collatzUV = uv - vec2(.5,.1);\n\n        float collatzValue = 1.0*float(iFrame+1);\n        vec2 lastPos = vec2(0,0);\n        vec2 pos = vec2(0,0);\n        float angleOffset = 0.15;//0.15;\n        float angle = 0.;\n        int lastIndex;\n\n        const int limit = 100;\n        for( int i = 0; i <= limit; i++){\n\n            collatzValue = Collatz(collatzValue);\n            series[i] = collatzValue;\n            if( collatzValue == 1.0){\n                lastIndex = i;\n                break;\n            }\n\n        }\n\n        for( int i = limit; i >= 0; i--){\n            if(i < lastIndex){\n            collatzValue = series[i];\n            if( collatzValue == 1.0)\n                break;\n            if( mod(collatzValue,2.0) == 0.0){\n                angle += angleOffset*1.;\n                pos += vec2(sin(angle),cos(angle))*offset;\n            }\n            else{\n                angle -= angleOffset*2.5;//2.5\n                pos += vec2(sin(angle),cos(angle))*offset;\n            }\n\n            float lineDist = line(pos, lastPos, collatzUV);\n            if( lineDist <  d){\n                d = lineDist;\n                iters = float(i)/100.0f;\n            }    \n\n            lastPos = pos;\n            }\n        }\n\n        //This is for iterative version\n\n        const float len = 0.002;    \n        vec3 color = mix(  palette( float(iFrame)*.712312, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25)),vec3(0.0,0.0,0.0),d/len);\n        color *= vec3(iters*2.);\n        color = clamp(color,vec3(0.),vec3(1.));\n        \n        fragColor = vec4(mix(fragColor.rgb,color,length(color)),fragColor.a);\n    }\n\t\n    \n    if( texture( iChannel1, vec2(KEY_LEFT,0.5/3.0)).x == 1.0 ){\n    \tfragColor.a =  fragColor.a - .5 ;\n    }\n    else if( texture( iChannel1, vec2(KEY_RIGHT,0.5/3.0)).x == 1.0 ){\n    \tfragColor.a =  fragColor.a + .5 ;\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}