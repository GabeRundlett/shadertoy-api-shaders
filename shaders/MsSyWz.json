{
    "Shader": {
        "info": {
            "date": "1491580487",
            "description": "Seeing if I can make mandalas with polar coordinates.",
            "flags": 4,
            "hasliked": 0,
            "id": "MsSyWz",
            "likes": 4,
            "name": "Mandala Study 1",
            "published": 3,
            "tags": [
                "raymarch",
                "mandala"
            ],
            "usePreview": 0,
            "username": "lherm",
            "viewed": 1074
        },
        "renderpass": [
            {
                "code": "#define eps 0.005\n#define far 40.\n#define time iTime\n\n#define polar\n\n#define PSD pow(abs(textureLod(iChannel0, vec2(.5), 0.).r), 2.)\n\n#define audio;\n\nvec2 rotate(vec2 p, float a)\n{\n    float t = atan(p.y, p.x)+a;\n    float l = length(p);\n    return vec2(l*cos(t), l*sin(t));\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\nfloat trap;\n    \nfloat map(vec3 p)\n{\n    float d = 0.;\n    float s = .5;\n    p.z -= time;\n    for (int i = 0; i < 3; i++)\n    {\n        vec3 q = mod(p * s + 1., 2.)-1.;\n        d = max(d, .25-.22*sdHexPrism(q, vec2(s,s)));\n        #ifdef audio\n        trap = sin(dot(sin(p), q));\n        #else\n        trap = sin(dot(sin(p), q));\n        #endif\n        s *= .8;\n    }\n    return d;\n}\n\nvec3 calcNormal(vec3 p)\n{\n    vec2 e = vec2(eps, 0);\n    return normalize(vec3(\n        map(p+e.xyy)-map(p-e.xyy),\n        map(p+e.yxy)-map(p-e.yxy),\n        map(p+e.yyx)-map(p-e.yyx)\n        ));\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n\tvec2 R=iResolution.xy, u =(g+g-R)/R.y;\n    \n    #ifdef audio\n    u *= sin(PSD*5.);\n    #endif\n    \n    #ifdef polar\n    u = rotate(u, atan(u.y, u.x)*2. + time*.1);\n    #endif\n    \n    vec3 r=vec3(0, 0, 1), d=normalize(vec3(u, -1)), p, n, col=r-r;\n    \n    float t=0., m;\n    for (int i = 0; i < 100; i++)\n    {\n        p = r + d * t;\n        m = map(p);\n        t += m;\n        if (t > far || m < eps) break;\n    }\n    n = calcNormal(p);\n    \n    if (t < far)\n    {\n        vec3 objcol = vec3(trap, 1.-trap, trap*trap);\n        vec3 lp = vec3(1, 4, 6);\n        vec3 ld = lp - p;\n        float len = length(ld);\n        ld /= len;\n        float amb = .25;\n        float atten = max(1., 1./(len*len));\n        float diff = max(0., dot(ld, n));\n        float spec = max(0., dot(reflect(-ld, n), r));\n        col = objcol * (((diff + amb*.5)*atten)*spec*.8);\n    }\n    f = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}