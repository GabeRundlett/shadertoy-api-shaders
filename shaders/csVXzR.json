{
    "Shader": {
        "info": {
            "date": "1680643270",
            "description": "once again porting a desmos into poorly written shadertoy for some of those ✨effects✨\ntweet link: https://twitter.com/Pixelated_Donut/status/1643253675320655872?s=20\ngraph: https://www.desmos.com/calculator/2rmfalx3s0",
            "flags": 0,
            "hasliked": 0,
            "id": "csVXzR",
            "likes": 13,
            "name": "circular random tiling",
            "published": 3,
            "tags": [
                "tiling",
                "desmos"
            ],
            "usePreview": 0,
            "username": "ronwnor",
            "viewed": 302
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926\n// le random\nfloat rand(vec2 uv){\n    return fract(sin(dot(uv,vec2(12.9898,78.233)))*43758.5453123);\n}\n// le rotate\nvec2 rot(vec2 uv, float a){\n    return vec2(uv.x*cos(a) - uv.y*sin(a), uv.y*cos(a) + uv.x*sin(a));\n}\n\n// 4 different tiles, selected by the choose variable\nfloat tile(vec2 xy, int choose){\n    float x = xy.x;\n    float y = xy.y;\n    \n    float tile = \n      choose == 0 \n    ? abs(sqrt((pow(abs(x+y)-2.,2.) + pow(x-y,2.))*.5)-1.)\n    : choose == 1\n    ? abs(sqrt((pow(abs(x-y)-2.,2.) + pow(x+y,2.))*.5)-1.)\n    : choose == 2\n    ? min(max(abs(x),.75-abs(y)),abs(y))\n    : min(max(abs(y),.75-abs(x)),abs(x));\n    \n    return max(tile, max(abs(.23*x),abs(.23*y)));\n}\n\nfloat f(float x, float y, int choose, float time){\n    return tile(\n        rot(mod(vec2(x,y)-1.,2.)-1., \n        .25*(PI + PI*tanh(15.*sin(time)))),\n        choose) < .25\n        ? 1.\n        : 0.;\n}\n\nvec3 f(vec3 x, vec3 y, int choose, float time){\n    return vec3(\n        f(x.x,y.x, choose, time),\n        f(x.y,y.y, choose, time),\n        f(x.z,y.z, choose, time));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    uv *= 8.;\n    \n    float x = log2(length(uv)) - iTime*.25;\n    float y = atan(uv.y, uv.x)/PI;\n    x *= 5.;\n    y *= 24.;\n    y += 1.;\n    float temp = rand(round(vec2(x,y)*.5));\n    float time = iTime*.5 + 2.*PI*temp;\n    int random = int(4.*temp);\n\n    vec3 col = vec3(0.);\n    vec3 offset;\n    for(float i=0.; i<10.; ++i){\n        offset = i+vec3(-5, 0, 5);\n        col += .1*f(x-offset*.007, vec3(y), random, time + i*.002);\n    }\n    col += exp(.1-length(uv));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}