{
    "Shader": {
        "info": {
            "date": "1676221726",
            "description": "I bashed Michael's shader with a brick and used it to make flow fields :)\n\nIt uses 3D noise from iq's shader:\nhttps://www.shadertoy.com/view/4sfGzS",
            "flags": 32,
            "hasliked": 0,
            "id": "dtBSWm",
            "likes": 21,
            "name": "Flow Field CA",
            "published": 3,
            "tags": [
                "particles",
                "ca",
                "flowfield"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 439
        },
        "renderpass": [
            {
                "code": "#define texel(a, p) texelFetch(a, ivec2(mod(p,iResolution.xy)), 0)\n\n// this code is bad \nvoid mainImage( out vec4 col, in vec2 pos )\n{ \n    vec2 uv = (pos - 0.5 * iResolution.xy) / iResolution.y;\n    float a = noise(vec3(0.02 * pos, floor(spd * iTime)));\n    vec4 data = texel(iChannel0, pos);\n    vec3 pl = .55+.45*cos(2.*PI*(0.25 * cos(PI*a) + 0.35 + 0.5 * data.w + vec3(data.w,0.5,0.5)/3.));\n    pl = mix(pl, vec3(.5+.5*data.w), 0.85);\n    \n    pl = vec3(0.1*(1.+a)/pl);mix(pl, vec3(a), .5-.5*cos(PI*a+vec3(0,1,2)/3.));\n    pl -= 0.2 * (a+1.);\n    pl += vec3(0.15,0.15,0.2);\n    //pl = clamp(pl, 0., 1.);\n    //pl = pow(pl, vec3(1./1.4));\n    pl = tanh((1.+vec3(1.8,1.6,1.4)) * pl);\n    pl = mix(pl, vec3(0.08), 1.-clamp(3.*exp(-2.*length(uv)), 0., 1.));\n    col = vec4(pl, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265\n\n#define spd 0.15\n\nvec3 hash32(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nfloat hash(vec3 p)  // replace this by something better\n{\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+vec3(0,0,0)), \n                        hash(i+vec3(1,0,0)),f.x),\n                   mix( hash(i+vec3(0,1,0)), \n                        hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+vec3(0,0,1)), \n                        hash(i+vec3(1,0,1)),f.x),\n                   mix( hash(i+vec3(0,1,1)), \n                        hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define texel(a, p) texelFetch(a, ivec2(mod(p,iResolution.xy)), 0)\n\n// [0, 4] is a good range. lower values -> more octagonal curves\n#define soft1 0.6\n\n// diffuse, higher values -> more fluid-like, more blurry\n#define dif 0.6\n\n// zoom of the noise field\n#define fieldScale 0.02\n\n// [0, 2] a good range, lower values -> softer\n#define soft2 0.35\n\nvec3 distribution(vec2 x, vec2 p, float K) {\n    vec4 aabb0 = vec4(p - 0.5, p + 0.5);\n    vec4 aabb1 = vec4(x - K*0.5, x + K*0.5);\n    vec4 aabbX = vec4(max(aabb0.xy, aabb1.xy), min(aabb0.zw, aabb1.zw));\n    vec2 center = 0.5*(aabbX.xy + aabbX.zw); //center of mass\n    vec2 size = max(aabbX.zw - aabbX.xy, 0.); //only positive\n    float m = size.x*size.y/(K*K); //relative amount\n    //if any of the dimensions are 0 then the mass is 0\n    return vec3(center, m);\n}\n\nvec4 Reintegration(sampler2D ch, vec4 data, vec2 pos) {\n    data.xyz *= 0.;\n    \n    for (int i = -2; i <= 2; i++)\n    for (int j = -2; j <= 2; j++)\n    {\n        vec2 tpos = pos + vec2(i,j) + soft1 * (hash32(pos + iTime).x - 0.5); \n        \n        vec4 data0 = texel(ch, tpos);      \n        data0.xy = tpos;\n       \n        vec3 D = distribution(data0.xy, pos, dif);\n        \n        //the deposited mass into this cell\n        float m = data0.z*D.z;\n        \n        //add weighted by mass\n        data.xy += D.xy*m;\n      \n        //add mass\n        data.z += m;\n    }\n    \n    // hacky way to get data.w to converge to a value.\n    // data.w \"trails\" the mass data.z\n    float f = 1.-fract(spd * iTime);\n    data.w = mix(data.w, data.z, 0.04 * f);\n   \n    return data;\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    vec4 data = texel(iChannel0, pos);   \n    \n    float a = noise(vec3(fieldScale * pos, floor(spd * iTime)));\n    a *= PI;    \n    \n    pos += vec2(0, 1);\n    pos += vec2(cos(a), sin(a));\n\n    data = Reintegration(iChannel0, data, pos);     \n\n    data.z += soft2 * (hash32(pos).x - 0.5);\n    data.z = clamp(data.z, -1., 1.);\n\n    U = data;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}