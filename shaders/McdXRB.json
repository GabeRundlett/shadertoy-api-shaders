{
    "Shader": {
        "info": {
            "date": "1717111418",
            "description": "A Mandelbrot set.",
            "flags": 0,
            "hasliked": 0,
            "id": "McdXRB",
            "likes": 0,
            "name": "mandelbrot 0",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "ArolaunTech",
            "viewed": 67
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float m0 = min(iResolution.x, iResolution.y);\n    float m1 = max(iResolution.x, iResolution.y);\n    \n    vec2 uv = fragCoord/m0;\n    uv.x -= ((m1/m0) - 1.)/2.;\n    vec2 c = uv * 2. - 1.;\n    c *= 2.;\n    \n    int iters = 0;\n    vec2 x = c;\n    float nx = 0.;\n    float ny = 0.;\n    for (int i = 0; i < 200; i++) {\n        nx = x.x * x.x - x.y * x.y;\n        ny = 2. * x.x * x.y;\n        \n        x = vec2(nx, ny) + c;\n        if (dot(x,x) < 4.0) {\n            iters += 1;\n        }\n    }\n\n    // Time varying pixel color\n    vec3 col = vec3(1.-exp(-float(iters)/20.), 1.-exp(-float(iters)/50.), 1.-exp(-float(iters)/10.));\n\n    // Output to screen\n    fragColor = vec4(col,1.);\n    \n    if (dot(c,c) > 4.) {\n        fragColor = vec4(0., 0., 0., 1.);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}