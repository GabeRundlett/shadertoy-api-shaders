{
    "Shader": {
        "info": {
            "date": "1627231033",
            "description": "Blueprint Shader",
            "flags": 0,
            "hasliked": 0,
            "id": "7tjSzW",
            "likes": 3,
            "name": "Blueprint Test",
            "published": 3,
            "tags": [
                "blueprint"
            ],
            "usePreview": 0,
            "username": "Yerti",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "/*\nfloat stripes(float spacing, float thickness, float alpha, float position) {\n    return alpha * step(spacing-thickness, mod(position, spacing));\n}\n\nfloat grid(float spacing, float thickness, float alpha, vec2 position) {\n    vec2 lines = alpha * step(vec2(spacing-thickness), mod(position, vec2(spacing)));\n    return max(lines.x, lines.y);\n}\n\n// asymmetric\nvec2 grid2(vec2 spacing, vec2 thickness, vec2 alpha, vec2 position) {\n    return alpha * step(mod(position, spacing), spacing-thickness);\n}*/\n\nfloat smoothgrid(float spacing, float thickness, float alpha, vec2 position) {\n    vec2 posrep = mod(position, vec2(spacing))-.5*thickness;\n    vec2 lines = alpha * max(vec2(0.0), min(thickness+posrep, thickness-posrep)/thickness);\n    return max(lines.x, lines.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-iMouse.xy) / iResolution.xx;\n    vec3 blue = vec3(0.13, 0.13, 0.13);\n      \n    vec2 spacing   = vec2(0.1  , 0.02); \n    vec2 thickness = vec2(0.002, 0.001);\n    vec2 alpha     = vec2(0.9  , 0.5);\n    \n    float thick_lines = smoothgrid(spacing.s, thickness.s, alpha.s, uv);\n    float thin_lines  = smoothgrid(spacing.t, thickness.t, alpha.t, uv);\n    \n    float erasure = 0.1;\n    \n    vec4 background = vec4(0);\n    vec3 paper = max(blue, 0.35*length(background.rgb));\n    \n    vec3 color = vec3(max(paper, sqrt(erasure*background.b+(1.-erasure))*max(thick_lines, thin_lines)));\n    \n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}