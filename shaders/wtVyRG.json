{
    "Shader": {
        "info": {
            "date": "1611257725",
            "description": "Spherical repetition operator. No more messing with polar coordinates any more!",
            "flags": 0,
            "hasliked": 0,
            "id": "wtVyRG",
            "likes": 35,
            "name": "Spherical Repetition (Polar)",
            "published": 3,
            "tags": [
                "repetition",
                "mod",
                "spherical",
                "polar"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 509
        },
        "renderpass": [
            {
                "code": "#define TAU 6.28318530718 // 2 * pi\n#define PHI 1.57079632679 // pi / 2\n\n// r: vec2(horizontal repeats, vertical repeats)\nvoid pModSpherical(inout vec3 p, in vec2 r) {\n    vec2 a = TAU / r, ha = 0.5 * a;\n    p.xz = sin(mod(atan(p.z, p.x) + ha.x, a.x) - ha.x + vec2(PHI, 0.0)) * length(p.xz);\n    p.xy = sin(mod(atan(p.y, p.x) + ha.y, a.y) - ha.y + vec2(PHI, 0.0)) * length(p.xy);\n}\n\nfloat mapScene(in vec3 p) {\n    float c = cos(iTime), s = sin(iTime);\n    p.xz *= mat2(c, -s, s, c);\n    p.yz *= mat2(c, -s, s, c);\n\n    pModSpherical(p, vec2(27.0 + 23.0 * sin(iTime), 27.0 + 23.0 * cos(iTime)));\n    vec3 q = abs(p - vec3(2.0, 0.0, 0.0)) - 0.1;\n    float boxes = max(q.x, max(q.y, q.z));\n\n    return boxes;\n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 e = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(mapScene(p + e.xyy) - mapScene(p - e.xyy),\n                          mapScene(p + e.yxy) - mapScene(p - e.yxy),\n                          mapScene(p + e.yyx) - mapScene(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float t = 0.0;\n    for (int i=0; i < 150; i++) {\n        vec3 p = ro + rd * t;\n        float d = mapScene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n            vec3 l = vec3(-0.58, 0.58, 0.58);\n            fragColor.rgb += max(0.1, dot(n, l));\n            break;\n        }\n\n        if (t > 100.0) {\n            break;\n        }\n\n        t += d;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}