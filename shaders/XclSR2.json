{
    "Shader": {
        "info": {
            "date": "1705458531",
            "description": "3D rectangular tunnel effect with movement and diagonal wall lines",
            "flags": 0,
            "hasliked": 0,
            "id": "XclSR2",
            "likes": 7,
            "name": "Rectangular Tunnel Grid",
            "published": 3,
            "tags": [
                "tunnel",
                "grid",
                "retro",
                "rectangle"
            ],
            "usePreview": 0,
            "username": "artcreativecode",
            "viewed": 309
        },
        "renderpass": [
            {
                "code": "// 3D rectangular tunnel effect with movement and diagonal wall lines\nprecision highp float;\n\n// Define line color and background color as constants\nconst vec3 color1 = vec3(0.03137, 0.17647, 0.25882);\nconst vec3 color2 = vec3(0.72157, 0.58431, 0.77255);\nconst vec3 color3 = vec3(0.0, 0.64314, 0.69412);\n\nconst vec3 uLineColor = color2; \nconst vec3 uBackgroundColor = color1;\nconst float uSpeed = 2.5;\n\n// Function to draw a line given two endpoints, line width, and uv coordinates\nvoid drawLine(vec2 uv, vec2 start, vec2 end, float lineWidth, inout vec3 color) {\n    float lineDist;\n\n    if (start.x == end.x) {\n        // Handle vertical line\n        lineDist = abs(uv.x - start.x);\n    } else {\n        // Non-vertical line\n        float m = (end.y - start.y) / (end.x - start.x);\n        float b = end.y - m * end.x;\n        lineDist = abs(uv.y - m * uv.x - b) / sqrt(m * m + 1.0);\n    }\n\n    // Anti-aliasing factor\n    float aaWidth = 1.0 / iResolution.y; // Adjust for screen resolution\n\n    // Calculate line intensity based on distance from the line and apply anti-aliasing\n    float alpha = smoothstep(lineWidth, lineWidth + aaWidth, lineDist);\n    // Blend the line color with the background\n    color = mix(color, uLineColor, 1.0 - alpha);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    float time = -iTime * 2.5;\n\n    // Tunnel parameters\n    float depth = 10.0; // Total depth of the tunnel\n    float numRects = 10.0; // Number of rectangles in the tunnel\n    float spacing = depth / numRects; // Spacing between rectangles\n\n    // Calculate the depth of the nearest and farthest rectangles\n    float nearestDepth = mod(time, spacing);\n    float farthestDepth = depth;\n\n    // Initialize color\n    vec3 color = uBackgroundColor;\n\n    // Aspect ratio for the rectangles (making them wider)\n    float aspectRatio = 1.5; // Width is 1.5 times the height\n\n    // Bounds of the nearest and farthest rectangles\n    vec2 nearestLowerBound = -vec2(0.8 * aspectRatio, 0.8) * (1.0 / nearestDepth);\n    vec2 nearestUpperBound = vec2(0.8 * aspectRatio, 0.8) * (1.0 / nearestDepth);\n    vec2 farthestLowerBound = -vec2(0.8 * aspectRatio, 0.8) * (1.0 / farthestDepth);\n    vec2 farthestUpperBound = vec2(0.8 * aspectRatio, 0.8) * (1.0 / farthestDepth);\n\n    // Fixed and farthest points for the rectangle corners\n    vec2 nearestFixedUpperRight = vec2(0.8 * aspectRatio, 0.8);\n    vec2 nearestFixedUpperLeft = vec2(-0.8 * aspectRatio, 0.8);\n    vec2 farthestUpperLeft = vec2(-0.8 * aspectRatio, 0.8) * (1.0 / farthestDepth);\n    vec2 nearestFixedLowerRight = vec2(0.8 * aspectRatio, -0.8);\n    vec2 farthestLowerRight = vec2(0.8 * aspectRatio, -0.8) * (1.0 / farthestDepth);\n    vec2 farthestUpperRight = vec2(0.8 * aspectRatio, 0.8) * (1.0 / farthestDepth);\n\n    float lineWidth = .2 / iResolution.y; // Width of the lines\n    \n    // Draw the main diagonal lines\n    drawLine(uv, farthestUpperBound, nearestFixedUpperRight, lineWidth, color);\n    drawLine(uv, farthestUpperLeft, nearestFixedUpperLeft, lineWidth, color);\n    \n    // Draw the additional lines between the main diagonal lines\n    for (int i = 0; i < 8; i++) {\n        float t = float(i) / 8.0; // Normalized position for each line\n        vec2 start = mix(farthestUpperLeft, farthestUpperBound, t);\n        vec2 end = mix(nearestFixedUpperLeft, nearestFixedUpperRight, t);\n        drawLine(uv, start, end, lineWidth, color);\n    }\n\n    // Draw the diagonal lines on the right side\n    for (int i = 0; i < 8; i++) {\n        float t = float(i) / 8.0; // Normalized position for each line\n        vec2 startRight = mix(farthestLowerRight, farthestUpperRight, t);\n        vec2 endRight = mix(nearestFixedLowerRight, nearestFixedUpperRight, t);\n        drawLine(uv, startRight, endRight, lineWidth, color);\n    }\n    \n    if (uv.x > farthestLowerBound.x && uv.x < farthestUpperBound.x &&\n        uv.y > farthestLowerBound.y && uv.y < farthestUpperBound.y) {\n        color = uBackgroundColor; \n    }\n    \n    // Check for border (1 pixel wide)\n      float borderWidth = 1.0 / iResolution.y;\n\n    // Draw each moving rectangle and the constant farthest rectangle\n    for (float i = 0.0; i <= numRects; ++i) {\n        float currentDepth = (i < numRects) ? (nearestDepth + i * spacing) : farthestDepth;\n        float scale = 1.0 / currentDepth;\n\n        // Rectangle bounds\n        vec2 lowerBound = -vec2(0.8 * aspectRatio, 0.8) * scale;\n        vec2 upperBound = vec2(0.8 * aspectRatio, 0.8) * scale;\n            // Check if the current pixel is within the rectangle bounds\n        if (uv.x > lowerBound.x && uv.x < upperBound.x &&\n        uv.y > lowerBound.y && uv.y < upperBound.y) {\n\n          \n          if (abs(uv.x - lowerBound.x) < borderWidth || abs(uv.x - upperBound.x) < borderWidth ||\n              abs(uv.y - lowerBound.y) < borderWidth || abs(uv.y - upperBound.y) < borderWidth) {\n              color = uLineColor; \n          }\n      }\n\t}\n\n\n  fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}