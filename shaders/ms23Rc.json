{
    "Shader": {
        "info": {
            "date": "1667987144",
            "description": "Mouse drag vortices.\nplay with comments:21-24 for variants.\ninteractive variant of https://shadertoy.com/view/cdfGz7\nanimated version: see https://www.shadertoy.com/view/cdX3z7",
            "flags": 32,
            "hasliked": 0,
            "id": "ms23Rc",
            "likes": 36,
            "name": "flow streamlines - interactive",
            "published": 3,
            "tags": [
                "flow",
                "irrotational",
                "vorticity",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 687
        },
        "renderpass": [
            {
                "code": "// interactive variant of https://shadertoy.com/view/cdfGz7\n\nvoid mainImage( out vec4 O, vec2 u )  { \n    O = sqrt(T(u));\n // O = sqrt(1.-exp(-T(u)*vec4(4,2,1,1)));                    // color\n \n // O = vec4( .5+.5*field(u/iResolution.y,iChannel1), 0,1);   // debug\n // field(u/iResolution.y,iChannel1); O=C;                    // debug\n // O*=0.; for (float i=0.; i<Nvort;i++) O += .01/length(u/iResolution.y-texelFetch(iChannel1,ivec2(i,1),0).xy); // debug\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// ---- compute BBoxs of next curves / manage interactive vortices\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    R = iResolution.xy;\n    vec2 M = iMouse.xy/R.y;\n    if (u-.5==vec2(2)) {     // T(2,2).a = vortex closest to mouse ( if clicked )\n        float l, m = R.x, v;\n        for (float i=0.; i<Nvort; i++ ) {\n            l = length( M - T(vec2(i,1)).xy );\n            if (l < m ) m = l, v = i;\n           // l < m ? m = l, v = i : v;\n            }\n        O.a = iMouse.z>0. ? v : -1.;\n    } \n    \n    if (u.y==1.5) {                                // --- manage vortices\n        O.xy = iFrame<1 ?        H(u.x-.5)         // init vortex\n             : u.x-.5==T(2).a ?  M                 // closest follow mouse ( if clicked )\n         //  :                   T(u).xy;          // startionary\n             :       mod( T(u).xy + (H(u.x)-.5)/1e3, R/R.y); // evolving\n    }\n    if (u.y==.5) {                                 // --- compute BBoxs of next curves\n        float l = 9., p = 1./R.y;\n        vec2  P = H(u.x-iTime), _P=P, m=P; M=P;    // random start point\n\n        for( int t=0; t <len; t++, _P = P )        // follow trajectory\n            P += field(P,iChannel0),\n            m = min(m,P), M = max(M,P);        \n\n        O = vec4(m-p,M+p);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "int     len = 20;  // curve length ( i.e. number of samples )\nfloat Nvort = 30., // number of vortices \n      Nline = 80.;\n\nvec2 R; // can't #define because used in field (via H) but Common is stupidely not an include\n\n#define T(U)   texelFetch( iChannel0, ivec2(U), 0 )\n#define H(p) ( fract(sin(mod(float(p)*vec2(269.5,183.3),6.283)) *1e4)*R/R.y )\n#define hue(v)( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\nfloat L(vec2 p, vec2 a,vec2 b) { // --- draw line  ( squared distance )\n    p -= a, b -= a;\n    float h = dot(p, b) / dot(b, b), \n          c = clamp(h, 0., 1.);     \n    return h==c ? dot(p -= b*h ,p) : 1e5; \n}\n\nvec4 C = vec4(0);  // returns color field\n\nvec2 field(vec2 U, sampler2D ch) {  // --- velocity field induced by vortices ( Biot & Savart )\n    vec2 V = vec2(0), P;\n    float w;\n    for( float i=0.; i < Nvort; i++ ) { // N random vortices ( same strength )\n        P = texelFetch(ch,ivec2(i,1),0).xy - U; // don't use ',' or bug on Windows !\n        w = min( 1., .001 / pow(length(P),3.) ), \n        C += hue(i/Nvort)    * w ,        // colored influence\n        V += vec2(-P.y,P.x)  * w          // velocity influence\n                 // * sign(H(i+.3).y-.5)  // random sign\n                 // * (2.*H(i+.3).y-1.)   // random sign & strength\n                 // * H(i+.3).y*2.        // random strength\n                          // * min(100.,.2/dot(P,P) )\n                ;}\n    return V*.1;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// --- draw only curves which BBox covers the pixel\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    R = iResolution.xy;\n    vec2 U = u / R.y, P, _P, b;\n    O =  .98*T(u);                         // cumulates previous draw\n   \n    for( float i=0.,l; i < Nline; i++ ) {  // draw N streamlines per frame\n        vec4 B = texelFetch(iChannel1,ivec2(i,0),0); // curve bbox\n        b = step(B.xy,U)*step(U,B.zw);\n     // if (b.x*b.y == 0.) continue;       // ← this form crashes Firefox !\n        if (b.x*b.y == 1.)\n        {               // pixel not in BBox: skip draw\n            _P = P = H(i+.5-iTime);             // random start point\n            l = 9.;\n            for( int t=0; t <len; t++, _P = P ) // follow trajectory\n                P += field(P,iChannel1),\n                l = min( l, L(U,_P,P) );\n        O += .2*max(0., 1.-R.y*sqrt(l))         // draw the curve\n             * ( .4 + C*.02 );                  // color field\n       }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}