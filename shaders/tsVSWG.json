{
    "Shader": {
        "info": {
            "date": "1574990569",
            "description": "Just experimenting with some tileable 2D perlin noise.",
            "flags": 32,
            "hasliked": 0,
            "id": "tsVSWG",
            "likes": 3,
            "name": "Perlin Noise 2D Tiled",
            "published": 3,
            "tags": [
                "noise",
                "fbm",
                "texture",
                "perlin",
                "tiling",
                "tile"
            ],
            "usePreview": 0,
            "username": "piyushslayer",
            "viewed": 563
        },
        "renderpass": [
            {
                "code": "/**\nJust experimenting with some tileable 2D perlin noise.\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 m = iMouse.xy / iResolution.xy ;\n    uv.x *= 2.;\n    m.x *= 2.;\n    st -= .1 * iTime;\n    vec3 col = vec3(0.);\n    float divPos = 1.;\n    if (iMouse.z > 0.)\n        divPos = m.x;\n    // left fbm noise\n    if (uv.x < divPos)\n\t\tcol += textureLod(iChannel0, st * .5, 0.).g;\n    // right gradient perlin noise\n    else\n        col += textureLod(iChannel0, st, 0.).r;\n    \n    float div = smoothstep(0., .005, abs(uv.x - divPos));\n    \n    col = mix(col, vec3(0., 0., .866), 1. - div);\n    \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/**\nJust experimenting with some tileable 2D perlin noise.\n*/\n\n// Hash functions by Dave_Hoskins\nfloat hash12(vec2 p, float f)\n{\n    p = abs(mod(p, f)); // we want the same random points for each subsection\n\tuvec2 q = uvec2(ivec2(p)) * uvec2(1597334673U, 3812015801U);\n\tuint n = (q.x ^ q.y) * 1597334673U;\n\treturn float(n) * (1.0 / float(0xffffffffU));\n}\n\n// Noise function by morgan3d (modified)\nfloat perlinNoise(vec2 x, float freq) \n{\n    x *= freq; // tile\n    \n    vec2 f = fract(x);\n    x = floor(x);\n\n\tfloat a = hash12(x, freq);\n    float b = hash12(x + vec2(1.0, 0.0), freq);\n    float c = hash12(x + vec2(0.0, 1.0), freq);\n    float d = hash12(x + vec2(1.0, 1.0), freq);\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat perlinFbm (vec2 uv, float freq, int octaves)\n{\n    float amp = .5;\n    float noise = 0.;\n    \n    for (int i = 0; i < octaves; ++i)\n    {\n        noise += amp * perlinNoise(uv, freq);\n        amp *= .5;\n        freq *= 2.;\n    }\n    return noise;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame > 1)\n        discard;\n    vec2 uv = fragCoord / iResolution.xy - .5;\n    vec3 col = vec3(0.);\n    float freq = 20.;\n    col.r += perlinNoise(uv, freq);\n    col.g += perlinFbm(uv, freq, 8);\n    fragColor = vec4(.2 + .8 * col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}