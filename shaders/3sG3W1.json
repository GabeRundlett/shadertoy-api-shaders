{
    "Shader": {
        "info": {
            "date": "1570943326",
            "description": "Very simple ray tracer",
            "flags": 0,
            "hasliked": 0,
            "id": "3sG3W1",
            "likes": 0,
            "name": "Jake's Raytracer",
            "published": 3,
            "tags": [
                "raytracer"
            ],
            "usePreview": 0,
            "username": "JakeLockey",
            "viewed": 194
        },
        "renderpass": [
            {
                "code": "vec3 CamPos = vec3(2.0,0.0,0.0);\nvec3 LookAt = vec3(0.0,0.0,0.0);\nvec3 CamAng = vec3(0.0,0.0,0.0);\nvec3 SpherePos = vec3(0.0,0.0,0.0);\nvec3 LightPos = vec3(0.0,5.0,0.0);\nfloat SphereRad = 1.0;\n\n\n\nfloat checkCollide(vec3 Origin, vec3 rayDir){\n    vec3 L = (SpherePos-Origin);\n    float tca = dot(L,rayDir);\n    \n    \n    if(tca<0.0){\n        return -1.0;\n    }\n    \n    float d = sqrt(dot(L,L)-(tca*tca));\n    \n    if(d>SphereRad){\n        return -1.0;\n    }\n    \n    float thc = sqrt((SphereRad*SphereRad)-(d*d));\n    float t0= tca-thc;\n    return t0;\n    \n}\n\nbool checkShadow(vec3 P){\n    vec3 ray = LightPos-P;\n    vec3 rayDir = ray/length(ray);\n    \n    \n    vec3 L = (SpherePos-P);\n    float tca = dot(L,rayDir);\n    \n    float d = sqrt(dot(L,L)-(tca*tca));\n    \n    if(d==SphereRad || tca<0.0){\n        return false;\n    }\n    return true;\n}\n\n\nint castRay(vec2 xy){\n    float ratio = CamAng.z/length(CamAng.xy);\n    vec3 VertPerp = vec3(-CamAng.x*ratio, -CamAng.y*ratio, length(CamAng.xy));\n    vec3 yComp = VertPerp * xy.y;\n    \n    vec3 HoriPerp = vec3(CamAng.y,-CamAng.x,0.0)/length(vec3(CamAng.y,-CamAng.x,0.0));\n    vec3 xComp = HoriPerp * xy.x;\n    \n    vec3 ray = (CamAng*3.0)+xComp+yComp;\n    vec3 rayDir = (ray/length(ray));\n    \n    float t1 = checkCollide(CamPos,rayDir);\n    if(t1>0.0){\n        vec3 P1 = CamPos + (rayDir*t1);\n       \tif(checkShadow(P1)){\n            return 2;\n        }\n        return 1;\n    }\n    return 0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    SpherePos = vec3(0.0,sin(2.0*iTime),0.0);\n    //LookAt= SpherePos;\n    LightPos = vec3(0.0,0.0,5.0);\n    CamPos = vec3(6,0.0,0.0);\n    CamAng = LookAt-CamPos;\n    //CamAng = vec3(0.0,-1.0,-1.0);\n    CamAng = CamAng/length(CamAng);\n    \n    \n    \n    \n    vec2 xy = vec2((2.0*(iResolution.x/iResolution.y)) * fragCoord.x/iResolution.x - (iResolution.x/iResolution.y), 2.0 * fragCoord.y/iResolution.y - 1.0);\n    //vec2 xy = 2.0 * fragCoord/iResolution.xy - 1.0;\n    vec3 col = vec3(0.5,0.5,0.5);\n    \n    int rayColor = castRay(xy);\n    \n    if(rayColor==1){\n        col = vec3(1.0,0.0,0.0);\n    }\n    else if(rayColor==2){\n        col = vec3(0.0,0.0,0.0);\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}