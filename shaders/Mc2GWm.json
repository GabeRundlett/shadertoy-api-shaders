{
    "Shader": {
        "info": {
            "date": "1704311731",
            "description": "truchet3d grid - torodial hexagonal grid - logarithmic spiral arm",
            "flags": 0,
            "hasliked": 0,
            "id": "Mc2GWm",
            "likes": 12,
            "name": "truchet hexagonal logspiral arm",
            "published": 3,
            "tags": [
                "3d",
                "sdf",
                "hexagon",
                "truchet",
                "logarithmic",
                "schwarzchristoffel"
            ],
            "usePreview": 0,
            "username": "cyperus",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License.\n//\n// \"truchet hexagonal logspiral arm\"\n//\n// created by Colling Patrik (cyperus) in 2024\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float\n    CAM_DIST = 8.,\n    CAM_FLE = 2.,\n    BB_DIST = 8.,\n    RAY_MIN_DIST = 0.1,\n    RAY_MAX_DIST = CAM_DIST+1.1*BB_DIST;\n\nconst int MAX_MARCHING_STEPS = 600;\nconst float\n    RAY_STEP_FACTOR = 0.039,\n    RAY_PRECISION = 1.E-1;\n\n// data from sdf\nvec3 mat_to = vec3(0);\nvec3 mat_to_id = vec3(0);\nvec4 mat_tc = vec4(0);\n\nfloat map(in vec3 p) {\n    float rxy = 0., au = 0.0, av = 0.0;\n    vec2 z = vec2(0.);\n    float d = 1.E6;   \n    \n    float k_t = cosh(2.5*sin(PI2*iTime/60.)); \n    vec2 sp_k = 3.*vec2(k_t,3.*PI_2);\n    \n    #if 1  \n    // clog spiral\n    //p.z *= sqrt(4.*k_t)/length(p.xy); // TODO: Does not behave correctly!\n    rxy = length(p.xy);\n    p.z *= 1./log(1. + 0.7*pow(rxy,1.2));\n    //p.xy = clog(p.xy)/PI2;\n    p.xy = vec2(log(rxy),atan(p.y,p.x))/PI2;\n    p.xy = cmul(p.xy,sp_k);\n    p.xy -= PI2*vec2(1.,-1.) * k_t;\n    //vec2 sp_id = floor( vec2(-p.y,p.x) - floor(-p.y/sp_k.x) * sp_k );\n    #endif\n    \n    #if 1\n    // repeat in y-direction\n    float k0 = sp_k.x;\n    float p_id = floor((p.y+k0/2.)/k0)*k0;\n    p.y -= p_id;\n    # endif\n    \n    p.zxy = p;\n    \n    #if 1\n    // cylinder-julia\n    z = p.xy; au = p.z;   \n    z = cmul(z,z);\n\n    av = atan(z.y, z.x);\n    rxy = length(z);\n    \n    p = vec3(1.*vec2(4.,1.) * vec2(au, sqrt(3.)* av), log(rxy))/PI;\n    #endif\n\n    #if 1\n    // regular hexagonal tiles \n    p.xy = hexgrid2hex(p.xy, mat_to_id);    \n    p.xy = inversesc(p.xy, int(6.));\n\n    // torus,sphere,2spheres       \n    rxy = length(p.xy); au = atan(p.y, p.x);    \n    z = 2.*ccos(PI*vec2(rxy,2.*p.z));\n    z.x += 1.95;\n            \n    p = vec3(log(length(z)-0.1),vec2(au, atan(z.y,z.x))*0.5/PI);\n  \n    vec2 to_uv = p.yz;\n    float to_d = log(length(z)+0.8);\n    mat_to = vec3(to_uv,to_d);\n    d = min(d,to_d);\n    #endif    \n\n    #if 1\n    p = p.yzx ;    \n    // truchet 3D box grid\n    p *= vec3(18.,4.,1.);\n    ivec3 l0 = -ivec3(18./2.,4./2.,0);\n    ivec3 l1 = +ivec3(18./2.,4./2.,1.)-ivec3(1.);\n    vec3 tc_id = floor(p);\n    tc_id = clamp(tc_id, vec3(l0), vec3(l1));\n    p -= tc_id +0.5;\n    #else\n    vec3 tc_id = vec3(1.);\n    #endif\n    \n    // truchet 3D box tiles\n    float rnd = hash21(tc_id.xy);\n    \n    if(rnd<.5) p.x = -p.x;\n    mat_tc = vec4(p,rnd);\n    \n    float tc_d = -1.; float r1 = 0.125;\n    if(fract(rnd*77.57+iTime/6.)>.75) {       \n       p.xy = length(p.xy-.5)<length(p.xy+.5)\n                ? vec2(p.xy-.5) \n                : vec2(p.xy+.5);\n       tc_d = sdTorus(p.xzy, vec2(0.5,r1));\n    } else {\n       tc_d = opSmoothUnion( sdCylinder( p, r1 ), sdCylinder( p.yxz, r1 ), 0.05 );\n    }    \n    d = min(d,tc_d);\n   \n    // return\n    return d;\n}\n\n// intersect\nfloat intersect(in vec3 ro, in vec3 rd, in float px) {\n    float res = -1.0;\n    \n    // bb\n    vec2 dis = isphere( ro, rd , abs(BB_DIST));    \n    if( dis.y<0.0 ) return -1.0;\n    dis.x = max( dis.x, RAY_MIN_DIST );\n    dis.y = min( dis.y, RAY_MAX_DIST );\n\n    // raymarch signed distance field    \n\tfloat fh = RAY_STEP_FACTOR;\n    float t = dis.x;\n    //for( int i=0; i<MAX_MARCHING_STEPS; i++  ) {\n    for (int i=0; i<MAX_MARCHING_STEPS+min(0,iFrame); i++) {\n        vec3 pos = ro + rd*t;\n        float th = RAY_PRECISION * px * t;\n        float h = map( pos);\n        if( t>dis.y || h<th ) break;\n        t += h*fh;\n    }\n    if( t<dis.y ) {\n        res = t;\n    }\n    return res;\n}\n\nvec3 calcNormal( in vec3 p, in float prec ) {\n    vec2 e = vec2( prec, 0. );\n    return normalize(vec3(\n\t\tmap(p+e.xyy) - map(p-e.xyy),\n\t\tmap(p+e.yxy) - map(p-e.yxy),\n\t\tmap(p+e.yyx) - map(p-e.yyx) )\n    \t);\n}\n\nvec3 transform(in vec3 p, in float time) { \n\tif (iMouse.x > 0.0) {\n        vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\t\tp.yz = crot(p.yz,-PI*m.y);\n\t\tp.zx = crot(p.zx,-PI*m.x);\n\t}\n    //p.yz = crot(p.yz,-1.*PI*(time+10.));\n    //p.zx = crot(p.zx,-2.*PI*(time+15.));\n\treturn p.xyz;\n}\n\n// textures\nfloat grid_uv(in vec2 uv) {\n    // uv grid alpha mask\n    vec2 sw = abs(fract(uv-0.25)-0.5)-0.25;\n    float sdf = min(sw.x,sw.y)*-max(sw.x,sw.y);\n    float pp = fwidth(sdf);\n    return smoothstep(+pp,-pp,sdf);\n}\n            \nvec4 cells(in vec2 uv, in float h) {\n    // sectors, uv-grid\n    vec4 C;\n    C.a = 1.;\n    C.rgb = h2rgb(h);\n    C.rgb *= (0.5+ 0.5 * grid_uv(uv))*0.7;\n    return C;\n}\n\nvec4 ribbon(in float uv_x, in float time) {\n    float sdf = -(2.*pulsecollision(1.,1./3. * uv_x, time, 2./6.)-1.);\n    float px = fwidth(sdf); float a = smoothstep(px+0.1,-px-0.1,sdf+0.2);    \n    return vec4( h2rgb(sdf -2./6.),a );\n}\n\nvec4 truchet3D(in vec3 p, in float rnd ,in float time) {\n    float sdf = sdBox( p, vec3(0.5*0.9));\n    float px = fwidth(sdf); float a = smoothstep(px,-px,sdf);\n    return mix(vec4(1.), vec4(h2rgb( fract(abs(rnd)*22.93 + time)),1.), a);\n}\n\n// main\nvoid mainImage(out vec4 O, in vec2 fragCoord) {\n    // normalized time\n    float ntime = iTime/360.;\n\n    // anti-aliasing to take a picture\n    vec3 tot = vec3(0.0);\n    #define AA 1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ ) {       \n        // normalized coordinates viewport\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 uv = (2.0*(fragCoord+o) - iResolution.xy)/iResolution.y;\n        \n        // camera viewport --> worldspace\n        vec3 ro = vec3(0,0,-CAM_DIST);\n        vec3 rd = vec3(-uv.x,uv.y,CAM_FLE);\n             ro = transform(ro,ntime);\n             rd = normalize(transform(rd,ntime));\n        \n        // distance hit ray surface\n        float px = 2.0/( iResolution.y*CAM_FLE );\n        float t = intersect( ro, rd, px );\n\n        // background\n        //vec3 sky_col = rd*.2+.8;\n        vec3 sky_col = vec3(0);\n        vec4 C = vec4(sky_col,1.);\n        O = C;\n        \n        // object surface\n        if (t >= 0.) {\n            // surface properties\n            vec3 p = ro + rd * t;\n            vec3 n = calcNormal( p, 0.001);\n            \n            const float r0 = 0.5;\n            float a_rpt_tc = 0.5+0.5*sin(PI2*ntime);\n            \n            // draw textures\n            O = vec4(0);\n\n            if(O.a<1.) {          \n                float hue = (mat_to_id.x + 2.)/4. + (mat_to_id.z )/8.;\n                C = cells(mat_to.xy/2., hue);\n                C.a = mat_to.z>r0 ? 1.-a_rpt_tc : O.a;\n                O += (1.-O.a) * vec4( C.rgb, 1 ) * C.a;\n            }\n\n            if(O.a<1.) {\n                C =  mat_to.z<r0 ? ribbon( 6.*3.* mat_to.x,  6.*ntime) : vec4(0.);\n                C.rgb *= 0.7;\n                O += (1.-O.a) * vec4( C.rgb, 1 ) * C.a;\n            }\n\n            if(O.a<1.) {\n                C = truchet3D(mat_tc.xyz, mat_tc.w, ntime);\n                C.a = a_rpt_tc; C.rgb *= 0.5;\n                O += (1.-O.a) * vec4( C.rgb, 1 ) * C.a;\n            }\n\n            C = O;\n                       \n            // lighting\n            vec3  came_li_o   = transform(vec3(-10.,10.,-10.),ntime); // origine\n            vec3  came_li_dir = normalize(p - came_li_o);             // direction\n            vec3  came_li_col = vec3(1.,1.,.5);                       // color\n            float came_li_shi = 10.;                                  // shininess            \n\n            float cosa = 1.;\n            O.rgb += 0.1 * cosa * C.rgb * sky_col;           // amb\n            cosa = clamp(dot(-came_li_dir, n), 0., 1.);\n            O.rgb += 0.5 * cosa * C.rgb * came_li_col;       // dif       \n            cosa = pow(clamp(dot(reflect(came_li_dir, n), -rd), 0., 1.), came_li_shi);           \n            O.rgb += 0.4 *(cosa>0.? cosa:0.) * came_li_col ; // spec\n            \n            // fog\n            O.rgb = mix(O.rgb, sky_col, 1.0 - exp(-0.12E-2 * pow(t,3.)));    \n        }\n        tot += O.rgb;\n    }\n    tot /= float(AA*AA);\n    \n    // gamma correction\n    O = vec4(rgb2srgb(tot),1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// const\nconst float\n    PI = abs(atan(0.,-1.)),\n    PI_2 = PI/2.,\n    PI2 = PI*2.;   \n\n// 1D transformations\nfloat pulsecollision(in float pf, in float x, in float x0, in float pw) {\n    float ntriw_p = abs( fract( pf*(x - x0) )-0.5);\n    float ntriw_n = abs( fract( pf*(x + x0) )-0.5);\n    float pp = smoothstep( 0.5*pw, 0., ntriw_p );\n    float pn = smoothstep( 0.5*pw, 0., ntriw_n );\n    return (pp+pn);\n}\n\nfloat hash21(in vec2 p) {\n    return fract(sin(dot(p, vec2(27.609, 57.583)))*43758.5453);\n}\n\nfloat func0(in float x, in float x0, in float k) {\n    x = abs(x/x0);\n    return x > 1. ? 1./x : -pow(x,k)/k + (1.+ 1./k);\n}\n\n// complex\nvec2 expi(in float x) {\n  return vec2(cos(x),sin(x));\n}\n\nvec2 cmul(in vec2 za, in vec2 zb) {\n    return za*mat2(zb.x,-zb.y,zb.yx);\n}\n\nvec2 crot(in vec2 z, in float a) {\n    return cmul(expi(a),z);\n}\n\nvec2 cinv(in vec2 z) {\n    return z*vec2(1,-1)/dot(z,z);\n}\n    \nvec2 cdiv(in vec2 z, in vec2 w) {\n    return cmul(z,cinv(w));\n}\n    \nvec2 cpow(in vec2 z, in int n) {\n  float r = length(z);\n  float theta = atan(z.y,z.x);\n  return pow(r,float(n))*normalize(vec2(cos(float(n)*theta),sin(float(n)*theta)));\n}\n  \nvec2 csqr(in vec2 z) {\n    return vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y );\n}\n\nvec2 ccos(in vec2 z) {\n    vec2 d=vec2(exp(z.y),exp(-z.y));\n\treturn vec2(cos(z.x)*(d.x+d.y)*.5,-sin(z.x)*(d.x-d.y)*.5);\n}\n\nvec2 clog(in vec2 z) {\n    return vec2(0.5*log(z.x*z.x+z.y*z.y),atan(z.y,z.x));\n}\n\n// https://www.shadertoy.com/view/tsfyRj by mla\n// \"Schwarz-Christoffel Mapping\"\nfloat binomial(in float a, in int n) {\n   float s = 1.0;\n   for (int i = n; i >= 1; i--,a--) {\n     s *= float(a)/float(i);\n   }\n   return s;\n}\n\nfloat gamma(in float z) {\n  const float[8] p = float[](\n    676.5203681218851,\n    -1259.1392167224028,\n    771.32342877765313,\n    -176.61502916214059,\n    12.507343278686905,\n    -0.13857109526572012,\n    9.9843695780195716e-6,\n    1.5056327351493116e-7\n  );\n  z -= 1.0;\n  float x = 0.99999999999980993;\n  for (int i = 0; i < 8; i++) {\n    float pval = p[i];\n    x += pval/(z+float(i+1));\n  }\n  float t = z + 8.0 - 0.5;\n  return sqrt(2.0*PI) * pow(t,z+0.5) * exp(-t) * x;\n}\n\nfloat beta(in float a, in float b) {\n  return (gamma(a)*gamma(b))/gamma(a+b);\n}\n\nvec2 inversesc(in vec2 z, in int K) {\n  float cn[6];\n  for (int n = 1; n <= 5; n++) {\n    cn[n] = binomial(float(n)-1.0+2.0/float(K),n)/float(1+n*K);\n  }\n  float C = beta(1.0/float(K),1.0-2.0/float(K))/float(K);\n  z *= C;\n  vec2 h = cpow(z,int(K));\n  float T1 = -cn[1];\n  float T2 = -cn[2]+float(K+1)*pow(cn[1],2.0);\n  float T3 = -cn[3]+float(3*K+2)*(cn[1]*cn[2]-float(K+1)/2.0*pow(cn[1],3.0));\n  float T4 = -cn[4]+float(2*K+1)*(2.0*cn[1]*cn[3]+pow(cn[2],2.0)-float(4*K+3)*\n                                  (pow(cn[1],2.0)*cn[2]-float(K+1)/3.0*pow(cn[1],4.0)));\n  float T5 = -cn[5]+float(5*K+2)*(cn[1]*cn[4]+cn[2]*cn[3]+float(5*K+3)*\n            (-0.5*pow(cn[1],2.0)*cn[3]-0.5*cn[1]*pow(cn[2],2.0)+float(5*K+4)*\n            (pow(cn[1],3.0)*cn[2]/6.0-float(K+1)*pow(cn[1],5.0)/24.0)));\n  vec2 X = vec2(1,0)+h/pow(C,float(K));\n  vec2 w = cmul(z,vec2(1,0) + T1*h + T2*cpow(h,2) + T3*cpow(h,3) + T4*cpow(h,4) + cdiv(T5*cpow(h,5),X));\n  return w;\n}\n\n// 2D\nvec2 hexgrid2hex(in vec2 Z, out vec3 U_id) {\n    const float\n        SQRT3 = sqrt(3.),\n        SQRT_3 = 1./SQRT3;\n\tconst mat2\n        M = mat2(SQRT_3,-1.,-SQRT_3,-1.),\n        iM = 0.5*mat2(SQRT3,-SQRT3,-1.,-1.);\n    Z = crot(Z,PI/6.);\n    Z = iM*Z/0.75;\n    vec3 U = vec3(Z.x,-Z.x-Z.y,Z.y);\n    U_id = 2.*floor(U*0.5+0.5);\n    vec3 U_lo = U-U_id;\n    vec3 aU_lo = abs(U_lo);\n    if (aU_lo.x > aU_lo.y && aU_lo.x > aU_lo.z) {\n        U_lo.x = -U_lo.y-U_lo.z;\n        U_id.x = -U_id.y-U_id.z;\n    }\n    if (aU_lo.y > aU_lo.z) {\n        U_lo.y = -U_lo.x-U_lo.z;\n        U_id.y = -U_id.x-U_id.z;\n    }\n    else {\n        U_lo.z = -U_lo.x-U_lo.y;\n        U_id.z = -U_id.x-U_id.y;\n    }\n    Z = U_lo.rb;\n    Z = M*Z*0.75;\n    return crot(Z,-PI/6.);\n}\n\n// 3D\nvec3 rot3(in vec3 P, in vec3 A, in float a) {\n    return mix( A*dot(P,A), P, cos(a) ) + sin(a)*cross(P,A);\n}\n\n// BB\nvec2 isphere(in vec3 ro, in vec3 rd, in float r) {\n\tfloat b = dot(ro,rd);\n\tfloat c = dot(ro,ro) - r*r;\n    float h = b*b - c;   \n    if( h<0.0 ) return vec2(-1.0);\n    h = sqrt( h );\n    return -b + vec2(-h,h);\n}\n\n// sdf\nfloat sdBox( in vec3 p, in vec3 b ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdCylinder( vec3 p, float r ) {\n  return length(p.xz)-r;\n}\n\nfloat sdTorus( in vec3 p, in vec2 t ) {\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat opIntersection( in float d1, in float d2 ) {\n    return max(d1,d2); }\n\nfloat opSmoothUnion( in float d1, in float d2, in float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n// color\nvec3 h2rgb(in float h) {\n    vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\n}\n\n// srgb <--> rgb (linear)\nvec3 rgb2srgb(vec3 col) {\n    return pow(col, vec3(1./2.2));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}