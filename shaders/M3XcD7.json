{
    "Shader": {
        "info": {
            "date": "1726246331",
            "description": "tracing clifford parallels with balls in space.\n\nuse some lie groups to make in interesting",
            "flags": 0,
            "hasliked": 0,
            "id": "M3XcD7",
            "likes": 2,
            "name": "Hopf + clifford + lie",
            "published": 3,
            "tags": [
                "hopf",
                "clifford",
                "lie"
            ],
            "usePreview": 0,
            "username": "nbardy",
            "viewed": 124
        },
        "renderpass": [
            {
                "code": "// Author: OpenAI Assistant\n// Title: Progressive Hopf Fibration Visualization\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n// Constants\nconst float PI = 3.14159265359;\n\n\n\n// Helper function for looping fscale up and down over multiple cycles\nfloat loopUpDownFscale(float t, float startFscale, int numCycles, float totalDuration) {\n    float cycleDuration = totalDuration / float(numCycles * 2); // Duration of each up/down step\n    float fscale = startFscale;\n    int currentCycle = int(t / cycleDuration); // Determine which cycle we're in\n\n    // If we're in the first half (dividing cycles)\n    if (currentCycle < numCycles) {\n        fscale = startFscale / pow(2.0, float(currentCycle)); // Divide by 2 for each cycle\n    }\n    // If we're in the second half (multiplying cycles)\n    else if (currentCycle < numCycles * 2) {\n        fscale = startFscale / pow(2.0, float(numCycles - (currentCycle - numCycles))); // Multiply back by 2\n    } else {\n         fscale = 0.125;\n         }\n\n    return fscale;\n}\n\n// Main schedule for numFibers and fscale with timing vars\nvec2 getFibersAndFscale(float t) {\n    float openingDuration = 1.8; // duration for each opening phase\n    float loopDuration = 6.0;    // total duration for loop up/down of fscale\n    int numCycles = 3;           // number of cycles for fscale division (first two phases)\n\n    int numFibers = 1;\n    float fscale = 0.5;\n\n    // Phase 1: numFibers increments (opening 1.2s each) up to 128\n    if (t < openingDuration) {\n        numFibers = 1;\n    } else if (t < 2.0 * openingDuration) {\n        numFibers = 2;\n    } else if (t < 3.0 * openingDuration) {\n        numFibers = 4;\n    } else if (t < 4.0 * openingDuration) {\n        numFibers = 8;\n    } else if (t < 5.0 * openingDuration) {\n        numFibers = 16;\n    } else if (t < 6.0 * openingDuration) {\n        numFibers = 32;\n    } else if (t < 7.0 * openingDuration) {\n        numFibers = 64;\n    } else if (t < 8.0 * openingDuration) {\n        numFibers = 128;\n    }\n    \n    // Phase 2: numFibers stays at 512 and fscale starts looping up and down (3 cycles)\n    else if (t < 8.0 * openingDuration + loopDuration) {\n        numFibers = 512;\n        fscale = loopUpDownFscale(t - 8.0 * openingDuration, 0.5, numCycles, loopDuration);\n    }\n    \n    // Phase 3: numFibers stays at 1028 and fscale starts another loop (3 cycles)\n    else {\n        numFibers = 1028;\n        fscale = loopUpDownFscale(t - (8.0 * openingDuration + loopDuration), 0.5, numCycles*4, loopDuration);\n    }\n\n   \n\n    return vec2(float(numFibers), fscale);\n}\n\n\n// Camera setup\nvec3 cameraPos = vec3(0.0, 0.0, 5.0);\nvec3 lightPos = vec3(5.0, 2.0, 5.0);\n\n// Quaternion multiplication\nvec4 quatMul(vec4 q1, vec4 q2) {\n    return vec4(\n        q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y,\n        q1.w*q2.y - q1.x*q2.z + q1.y*q2.w + q1.z*q2.x,\n        q1.w*q2.z + q1.x*q2.y - q1.y*q2.x + q1.z*q2.w,\n        q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z\n    );\n}\n\n// Stereographic projection from S^n to R^3\nvec3 stereographicProjection(vec4 q, int dimension) {\n    // Generalized stereographic projection based on dimension\n    // For simplicity, project higher dimensions by ignoring extra components\n    return q.xyz / (1.0 - q.w);\n}\n\n// Hopf fibration mapping from S^n to S^2\nvec3 hopfMap(vec4 q, int dimension) {\n    // Adjust mapping based on dimension\n    // For S3, S7, S15\n    float numerator, denominator, theta, phi;\n    if (dimension == 3) {\n        numerator = 2.0 * (q.x * q.z + q.w * q.y);\n        denominator = q.w * q.w + q.x * q.x - q.y * q.y - q.z * q.z;\n    } else if (dimension == 7) {\n        // Simplified example for higher dimensions\n        numerator = q.x * q.z - q.y * q.w;\n        denominator = q.w * q.w + q.x * q.x + q.y * q.y - q.z * q.z;\n    } else { // dimension == 15\n        numerator = q.x * q.z + q.y * q.w;\n        denominator = q.w * q.w - q.x * q.x - q.y * q.y - q.z * q.z;\n    }\n    theta = atan(numerator, denominator);\n    phi = asin(2.0 * (q.w * q.x - q.y * q.z));\n\n    // Convert spherical coordinates to Cartesian coordinates\n    vec3 p;\n    p.x = cos(phi) * cos(theta);\n    p.y = cos(phi) * sin(theta);\n    p.z = sin(phi);\n    return p;\n}\n\n\n// Function to determine current phase based on time\nint currentPhase(float time) {\n    float cycleTime = 6000.0; // Total cycle duration for S3, S7, S15\n    float phaseDuration = 1000.0;\n    float t = mod(time, cycleTime);\n    \n    if (t < phaseDuration) {\n        return 3;\n    } else if (t < 2.0 * phaseDuration) {\n        return 7;\n    } else {\n        return 15;\n    }\n}\n\n// Main rendering function\nvec3 answer_operator(vec3 ro, vec3 rd) {\n    vec3 color = vec3(0.0);\n    vec2 fibertv = getFibersAndFscale(iTime);\n\n    \n    int dimension = currentPhase(iTime);\n    int numFibers = int(fibertv.x);\n    float fscale = fibertv.y;\n    \n    \n    \n    for (int i = 0; i < numFibers; i++) {\n        float t = iTime;\n        sin(t) + 8.*t;\n        t = iTime * 2.0 + float(i) * (8. * PI / (float(numFibers)*fscale));\n        t = sin(t) + 2.*t;\n        // Generate a point on S^n using quaternions\n        vec4 q;\n        if (dimension == 3) {\n            q = vec4(\n                sin(t),\n                cos(t),\n                sin(t * 0.6125),\n                cos(t * 0.225)\n            );\n        } else if (dimension == 7) {\n            q = vec4(\n                sin(t),\n                cos(t),\n                sin(t * 1.5),\n                cos(t * 2.0)\n            );\n        } else { // dimension == 15\n            q = vec4(\n                sin(t),\n                cos(t),\n                sin(t * 1.3),\n                cos(t * 1.8)\n            );\n        }\n        q = normalize(q);\n        float t3 = sin(iTime);\n        float t2 = iTime + t3*0.2 * sin(iTime*0.2) + t3*cos(iTime*0.5)*4.;\n        // Apply rotation inspired by higher-dimensional mapping\n        vec4 rotation = vec4(\n            sin(t2 * 0.125/4.),\n            cos(t2 * 0.125),\n            sin(t2 * 0.25),\n            cos(t2 * 2.)\n        );\n        rotation = normalize(rotation);\n        q = quatMul(q, rotation);\n        \n        // Map using Hopf fibration\n        vec3 p = hopfMap(q, dimension);\n        \n        // Project to 3D space\n        vec3 pos = stereographicProjection(q, dimension);\n        \n        // Calculate distance from ray origin to point\n        vec3 toPoint = pos - ro;\n        float t_ray = dot(toPoint, rd);\n        if (t_ray > 0.0) {\n            vec3 closestPoint = ro + rd * t_ray;\n            float dist = length(closestPoint - pos);\n            float radius = 0.05;\n            \n            // If the ray passes close to the point, add color\n            if (dist < radius) {\n                float intensity = 1.0 - dist / radius;\n                vec3 fiberColor = 0.5 + 0.5 * sin(vec3(float(i) * 0.1 + iTime, float(i) * 0.2 - iTime, float(i) * 0.3 + iTime));\n                color += fiberColor * intensity;\n            }\n        }\n    }\n    \n    // Lighting and color adjustments\n    color = clamp(color, 0.0, 0.96);\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Ray origin and direction\n    vec3 ro = cameraPos;\n    vec3 rd = normalize(vec3(uv, -2.9));\n    \n    // Trace ray\n    vec3 color = answer_operator(ro, rd);\n    \n    // Gamma correction\n    color = pow(color, vec3(1.0 / 2.2));\n    \n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}