{
    "Shader": {
        "info": {
            "date": "1645579092",
            "description": "basic movement and camera rotation, use WASD keys, space, and mouse to navigate",
            "flags": 48,
            "hasliked": 0,
            "id": "7slfWX",
            "likes": 6,
            "name": "first person camera controls",
            "published": 3,
            "tags": [
                "interactive",
                "camera",
                "controls"
            ],
            "usePreview": 0,
            "username": "icantcomeupwithausername",
            "viewed": 325
        },
        "renderpass": [
            {
                "code": "//#define debug\n\n/*\n * Buffer A: Camera Controls\n * Buffer B: Rendering\n */\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 c = texture(iChannel0, uv).xyz;\n    \n    #ifdef debug\n        fragColor = texture(iChannel0, uv)+texture(iChannel1, uv)+texture(iChannel2, uv);\n    #else\n        fragColor = texture(iChannel0, uv);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define initialPos vec3(0.0,1.0,0.0) //starting position\n#define initialRot vec3(0.0)\n#define mouseSensitivity 0.8\n#define plrHeight 0.5 \n#define gravity 2.0 \n#define moveSpeed 1.8 \n\n#define wkey 87.0\n#define akey 65.0\n#define skey 83.0\n#define dkey 68.0\n#define spacekey 32.0\n\n//detects keypresses\nbool keyDown(float keyCode) {\n    keyCode = (keyCode + 0.5) / 256.0;\n    vec2 uv = vec2(keyCode, 0.25);\n    return texture(iChannel0, uv).x > 0.0;\n}\n\n/*\n * position is stored at pixel 0,0\n * rotation is stored at pixel 0,1\n * rotation before mouse click is stored at pixel 0,2\n */\n\nvec4 getPosition(){\n    vec4 p = texelFetch(iChannel1, ivec2(0,0), 0) * 255.0 - 100.0;    \n    return p.xyzw;\n}\n\nvec3 getRotation(){\n   vec4 r = texelFetch(iChannel1, ivec2(0,1), 0) * 255.0 - 100.0;     \n   return r.xyz;\n}\n\nvec3 getPRotation(){\n   vec4 r = texelFetch(iChannel1, ivec2(0,2), 0) * 255.0 - 100.0;     \n   return r.xyz;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){ \n    //discard unused fragments\n    if(int(fragCoord.x) > 0 || int(fragCoord.y) > 2){\n        discard;\n    }\n\n    if(iFrame > 0){ \n        vec3 rot = getRotation();\n                \n        //handle movement and position\n        switch(int(fragCoord.y)){\n            case 0:\n                vec4 posb = getPosition();\n                vec3 pos = posb.xyz;\n\n                raycastReturn collide = raycast(Ray(vec3(pos.x, pos.y - 0.1, pos.z), normalize(vec3(1.0,-1.0,1.0))));\n\n                //gravity\n                if(collide.dist > plrHeight && posb.w >= 0.0){\n                    pos.y -= gravity * posb.w * iTimeDelta;\n                    posb.w += 0.02; //slowly accelerate fall\n                }else if(posb.w > 0.0){\n                    posb.w = 0.0; //reset w \n                }\n\n                //reset fall\n                if(pos.y < -4.0){\n                    pos = initialPos;\n                }\n\n                if(keyDown(wkey)){ \n                    pos = pos + vec3(0.0,0.0,1.0) * rotate(vec2(0.0,rot.y)) * moveSpeed * iTimeDelta;\n                } \n                \n                if(keyDown(skey)){\n                    pos = pos + vec3(0.0,0.0,-1.0) * rotate(vec2(0.0,rot.y)) * moveSpeed * iTimeDelta;\n                } \n                \n                if(keyDown(akey)){\n                    pos = pos + vec3(-1.0,0.0,0.0) * rotate(vec2(0.0,rot.y)) * moveSpeed * iTimeDelta;\n                } \n                \n                if(keyDown(dkey)){\n                    pos = pos + vec3(1.0,0.0,0.0) * rotate(vec2(0.0,rot.y)) * moveSpeed * iTimeDelta;\n                } \n                \n                if(keyDown(spacekey) && collide.dist <= plrHeight){\n                    posb.w = -1.0; //start a jump if space is pressed\n                }\n\n                if(posb.w < 0.0){\n                    pos.y += 0.04 * -posb.w;\n                    posb.w += gravity * iTimeDelta;\n                }\n\n                fragColor = vec4((pos + 100.0) / 255.0, (posb.w + 100.0) / 255.0);\n            break;\n            \n            case 1:\n                if(iMouse.z > 0.0){\n                    rot = getPRotation() - vec3(((iMouse.xy-abs(iMouse.zw)) * vec2(-1.0,1.0)).yx * mouseSensitivity, 0.0);\n                    rot.x = clamp(rot.x, -100.0, 100.0); //prevent camera from flipping\n                }\n\n                fragColor = vec4((rot + 100.0) / 255.0, 1.0);\n            break;\n            \n            case 2: \n                if((iMouse.z > 0.0) == false){\n                    fragColor = vec4((rot + 100.0) / 255.0, 1.0);\n                }else{\n                    fragColor = vec4((getPRotation() + 100.0) / 255.0, 1.0);\n                }\n            break;\n        } \n    }else{\n        //initialize\n        switch(int(fragCoord.y)){\n            case 0:\n                fragColor = vec4((initialPos + 100.0) / 255.0, 100.0 / 255.0);\n            break;\n            \n            case 1:\n                fragColor = vec4((initialRot + 100.0) / 255.0, 1.0);\n            break;\n            \n            case 2:\n                fragColor = vec4((initialRot + 100.0) / 255.0, 1.0);\n            break;\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define sunDirection vec3(0.0, 1.0, 0.0)\n\n//used for fetching camera properties\nvec3 getPosition(){\n    vec4 p = texelFetch(iChannel0, ivec2(0,0), 0) * 255.0 - 100.0;    \n    return p.xyz;\n}\n\nvec2 getRotation(){\n   vec4 r = texelFetch(iChannel0, ivec2(0,1), 0) * 255.0 - 100.0;     \n   return r.xy;\n}\n\nvec3 sky(vec3 raydir){ //very crappy sky\n    vec3 col;\n    if(raydir.y > 0.0){\n        float i = max(1.0-dot(vec3(0.0,1.0,0.0), raydir*30.0),0.0);\n        col = vec3(0.271, 0.345, 0.482)+i+(1.0-raydir.y)*0.48;\n    }else{\n        float i = max(1.0-dot(vec3(0.0,1.0,0.0), -raydir*30.0),0.0);\n        col = vec3(0.416, 0.396, 0.382)+i+raydir.y*0.1;\n    }\n    \n    return clamp(col, 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    vec2 js[4];\n    js[0] = vec2(0.25,0.75);\n    js[1] = vec2(0.75,-0.25);\n    js[2] = vec2(-0.25,-0.75);\n    js[3] = vec2(-0.25,0.75);\n    \n    //get camera position from Buffer A texture\n    vec3 origin = getPosition();\n    \n    vec3 color;\n    for(int i=0; i<js.length(); i++){\n        vec3 dir = normalize(vec3(uv+(js[i]/iResolution.xy),1.0))*rotate(getRotation()); //rotate view rays\n        Ray ray = Ray(origin, dir);\n        raycastReturn rcast = raycast(ray); //cast ray into scene\n\n        if(length(rcast.normal) > 0.0){ //check ray collision\n            color += rcast.color*max(dot(sunDirection, rcast.normal),0.5); //perform basic shading\n        }else{\n            color += sky(ray.direction) + 0.2;\n        }\n    }\n    color/=float(js.length());\n    \n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\n * matrix math\n */\n \nmat3 rotate(vec2 rot){\n    float rotationy = radians(rot.y);\n\tfloat ys = sin(rotationy);\n\tfloat yc = cos(rotationy);\n\tfloat yoc = 1.0-yc;\n\tmat3 y = mat3(yc,0.0,ys,\n\t\t\t\t0.0,yoc+yc,0.0,\n\t\t\t\t-ys,0.0,yc);\n                \n    float rotationx = radians(rot.x);\n\tfloat xs = sin(rotationx);\n\tfloat xc = cos(rotationx);\n\tfloat xoc = 1.0-xc;\n\tmat3 x = mat3(xoc+xc,0.0,0.0,\n\t\t\t    0.0,xc,-xs,\n\t\t\t\t0.0,xs,xc);\n                \n    return x*y; //z rotation isnt needed\n}\n\n/*\n * raycasting\n */\n \nstruct Ray{\n    vec3 origin, direction;\n};\n\nstruct Box{\n    vec3 position, size, color;\n};\n\nstruct raycastReturn{\n    vec3 endp, normal, color;\n    float dist;\n};\n \n//box intersection\nvec4 box(Ray ray,Box box) {\n    mat4 translate = mat4(1.0,0.0,0.0,0.0, //box matrix\n                          0.0,1.0,0.0,0.0,\n                          0.0,0.0,1.0,0.0,\n                          box.position,1.0);\n\n    vec3 q = (inverse(translate)*vec4(ray.origin,1.0)).xyz;\n    vec3 m = 1.0/(inverse(translate)*vec4(ray.direction,0.0)).xyz; \n    vec3 n = m*q;  \n    vec3 k = abs(m)*box.size;\n    vec3 t1 = -n-k;\n    vec3 t2 = -n+k;\n    float tn = max(max(t1.x,t1.y),t1.z);\n    float tf = min(min(t2.x,t2.y),t2.z);\n    if(tn>tf||tf<0.0) return vec4(-1.0); //ray missed\n    vec3 normal = sign(q)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n    return vec4(normal,tn);\n}\n\nraycastReturn raycast(Ray ray){\n    float depth = 9e20; \n    raycastReturn hit = raycastReturn(vec3(0.0), vec3(0.0), vec3(0.0), 9e20);\n    \n    for(int o = 0; o < 20; o+=2){ //stairs\n        Box bx = Box(vec3(sin(float(o)*0.3)*2.0,float(o)*0.2+0.101,cos(float(o)*0.3)*2.0), vec3(0.4,0.1,0.4), vec3(0.8));\n        \n        vec4 bdist = box(ray, bx);\n        if(bdist.w > 0.0 && bdist.w < depth){\n            vec3 end = ray.origin+ray.direction*bdist.w;\n            vec3 normal = bdist.xyz;\n            hit = raycastReturn(end, normal, bx.color, bdist.w);\n            depth = bdist.w;\n        }\n    }\n    \n    //platform\n    Box fbx = Box(vec3(0.0,4.0,0.0), vec3(1.0,0.1,1.0), vec3(0.25, 0.75, 0.25));        \n    vec4 bdist = box(ray, fbx);\n    if(bdist.w > 0.0 && bdist.w < depth){\n        vec3 end = ray.origin+ray.direction*bdist.w;\n        vec3 normal = bdist.xyz;\n        hit = raycastReturn(end, normal, fbx.color, bdist.w);\n        depth = bdist.w;\n    }\n    \n    //floor\n    float pd = -ray.origin.y/ray.direction.y;\n    if(pd>.0&&pd<depth){ \n        vec3 end = ray.origin+ray.direction*pd;\n        \n        if(end.x < 3.0 && end.z < 3.0 && end.x > -3.0 && end.z > -3.0){\n            //grid\n            vec2 tcoord = floor(end.xz);\n            float pmask = mod(tcoord.x+mod(tcoord.y, 2.0), 2.0);\n            hit = raycastReturn(end, vec3(0.0,1.0,0.0), vec3(clamp(pmask * 1.0, 0.5, 0.9)), pd);\n        }\n    }\n    \n    return hit;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}