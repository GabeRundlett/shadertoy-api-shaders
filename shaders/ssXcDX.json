{
    "Shader": {
        "info": {
            "date": "1642788973",
            "description": "click to move\n\nLooks like voronoi stuff - fractal used only for colors (was used for object before)\n(messy code)",
            "flags": 0,
            "hasliked": 0,
            "id": "ssXcDX",
            "likes": 6,
            "name": "Fractal Ball E",
            "published": 3,
            "tags": [
                "raymarching",
                "template",
                "artofcode"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 248
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 10.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec3 Rotate(vec3 p, float a) {\n    p.xy *= Rot(a - 2. * pi / 3.);\n    p.yz *= Rot(a);\n    p.zx *= Rot(a + 2. * pi / 3.);\n    return p;\n}\n\nvec3 GetCol(vec3 p) {       \n    float time = 0.05 * iTime;\n    p = Rotate(p, time);\n    time += 0.1 * iTime;\n    \n    uvec3 id = uvec3(1);\n    float m = 1.;   \n    float n = 5.;\n    \n    for (float i = 0.; i < n; i++) {\n        id *= uvec3(2);\n        id += uvec3(step(p.x,0.), step(p.y,0.), step(p.z,0.));\n        time += 2. * pi / n; // + 10. * length(p);\n        p = abs(p) - m;\n        p = Rotate(p, time);      \n        //m *= 0.5;\n        m *= 0.6 + 0.4 * thc(8., 0.2 * iTime + time);\n    }\n    \n    // h31 function?\n    /*\n    float i = h21(id.xy);\n    float j = h21(id.yz);\n    float k = h21(vec2(i, j));*/\n    float k = hash(id).x;\n    return hash(id);\n}\n\nfloat GetDist(vec3 p) {\n    /*\n    float h = 12.;\n    float time = iTime;\n    p.xz *= Rot(4. * length(p.xz) - 0.4 * iTime);\n    p.xy *= Rot(4. * length(p.xy) + 0.5 * iTime);\n    float sc = 10.;\n    float r = 0.2;// * h21(floor(p.xz * sc)) + 0.1 * cos(iTime);\n    \n    float c = 1.;//0.5 + 0.5 * thc(h, time);\n    float s = 0.5 + 0.5 * ths(h, time);\n    p.x += r * c * (h21(floor(p.xy * sc)) - 0.5);\n    p.z += r * c * (h21(floor(p.yz * sc)) - 0.5);\n    */\n    float d = length(p) - 1.8;\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nfloat GetLight(vec3 p, vec3 lightPos) {\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    dif = 0.15 + 0.85 * dif * step(length(lightPos-p), d);\n \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        //vec3 n = GetNormal(p);\n       // vec3 r = reflect(rd, n);\n\n        col = GetCol(p);\n        \n        // shouldnt be using shadows?\n        //float dif = GetLight(p, vec3(2.,4.,2.));\n        //col *= vec3(dif);\n        \n        vec3 e = 0.85 * col;//vec3(1.);\n        //col = pal(0.5 * dif + 0.1 * iTime,  e, e, e, 0.5 * col);  \n        col = pal(0.1 * iTime, e, e, e, 0.5 * col);  \n        \n        //float dif2 = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        //col += 0.4 * pow(max(0., dif2), 10.);\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec2 thc(float a, vec2 b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nvec2 ths(float a, vec2 b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nconst uint k = 1103515245U;\n// stolen from here: https://www.shadertoy.com/view/XlXcW4\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 p) {\n    return max(max(abs(p.x), abs(p.y)), abs(p.z));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}