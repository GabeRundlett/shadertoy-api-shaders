{
    "Shader": {
        "info": {
            "date": "1589994692",
            "description": "WARNING: FLASHING LIGHTS\n\nJust a little project I wanted to work on for a while now and it was a lot easier than I thought\n\nUpdate: improved the random flashing lights to not repeat as often, due to bad randomizing.",
            "flags": 96,
            "hasliked": 0,
            "id": "wdBfW1",
            "likes": 6,
            "name": "Audio Visualizer MB",
            "published": 3,
            "tags": [
                "sound",
                "music",
                "vis",
                "visualizer",
                "audiovisualizer"
            ],
            "usePreview": 0,
            "username": "MarvelousBilly",
            "viewed": 504
        },
        "renderpass": [
            {
                "code": "//for decay and attack rates, look in Buf A\n\nint barWidth = 1; //width of each bar,each bar uses the left most value inside it's bar\n\nvec3 color(float w){\n    float b = 1.-smoothstep(0. ,1.,w);\n    float g = smoothstep(-0.5,0.61,w);\n    if(w > 0.61){\n        g = 1.-smoothstep(0.61,1.,w);\n    }\n    float r = smoothstep(0.,1.,w);    \n    return vec3(r,g,b);\n}\n\nvec3 colForm(vec2 fragC){\n    vec3 col;\n    vec2 fragCoord = fragC;\n    \n    float bass;\n    bass =  texelFetch( iChannel0, ivec2(0,0), 0 ).x;\n    bass += texelFetch( iChannel0, ivec2(1,0), 0 ).x;\n    bass += texelFetch( iChannel0, ivec2(2,0), 0 ).x;\n    bass /= 6.; //average bass from first 3 values\n    bass = max(0.3,bass);\n    \n    //draw particle\n    if(bass >= 0.43){\n    \n        float T = iTime;\n        T = floor(T+(bass/10.));\n        \n        float width = iChannelResolution[1].x;\n        \n        vec2 index  = vec2(mod(float(bass+T),width),    floor(float(bass+T) / width));\n        vec2 indexP = vec2(mod(float(bass+T+1.),width), floor(float(bass+T+1.) / width));\n        \n        vec2 A = texelFetch( iChannel1, ivec2(index), 0 ).rg * iResolution.xy;\n        vec2 AP = texelFetch( iChannel1, ivec2(indexP), 0 ).rg * iResolution.xy;\n\n        vec2 B = texelFetch( iChannel1, ivec2(index), 0 ).gb * iResolution.xy;\n        vec2 BP = texelFetch( iChannel1, ivec2(indexP), 0 ).gb * iResolution.xy;\n\n        vec2 C = texelFetch( iChannel1, ivec2(index), 0 ).rb * iResolution.xy;\n        vec2 CP = texelFetch( iChannel1, ivec2(indexP), 0 ).rb * iResolution.xy;\n\n        vec2 posA = mix(A, AP, smoothstep(0.,1.,mod(iTime, 1.1)));\n        vec2 posB = mix(B, BP, smoothstep(0.,1.,mod(iTime, 1.1)));\n        vec2 posC = mix(C, CP, smoothstep(0.,1.,mod(iTime, 1.1)));\n\n\t\tcol = vec3(1.-distance(fragC, posA)/(bass*posA.x),1.-distance(fragC, posB)/(bass*posB.x),1.-distance(fragC, posC)/(bass*posC.x));\n        col = max(col,-0.65);\n    }\n    \n    fragC -= iResolution.xy/2.; //translate to center\n    fragC *= (bass*2.)+(0.7/1.75); //scale\n    fragC += iResolution.xy/2.; //translate back\n    \n    fragC = max(fragC,0.); //clamp the bars and extend them if zoomed out\n    fragC = min(fragC,iResolution.xy-vec2(1.,0.)); \n    \n    //avoid weird length bars\n    if(barWidth > 1){\n    \tfragC = floor(fragC); \n    }\n    \n    vec2 BarFragC = fragC;\n    BarFragC.x -= float(int(BarFragC.x) % barWidth); //strech each bar to be barWidth wide\n    \n    vec2 uv = BarFragC / iResolution.xy;\n    \n    // the sound texture is 512x2\n    int tx = int(uv.x*512.0);\n    float fft;\n    float wave;\n    // first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n    fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n    // second row is the sound wave, one texel is one mono sample\n    wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x;\n        \n    if(uv.y < fft/1.3){ //if showing bar, smooth color transition\n        return col + color(fft);\n    }\n    else{ //if not showing bar, draw circle (which uses the wave)\n        float bassCircSize = distance(fragCoord, iResolution.xy/2.) - (iResolution.x/2. * wave * bass); //circle size in bg\n        if(bassCircSize < 1.){ //if pixel contains circle,\n           return min(vec3(1.),col + vec3(0.8));\n        }\n        else{ //if background\n        \treturn col;\n        }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    //generate bars\n    vec3 col = colForm(fragCoord);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Current song: https://soundcloud.com/teresa-tesla/operation-pyrite-arknights\n// Operation Pyrite (Arknights) - Monster Siren Records; Jason Walsh; Alan Day\n\nfloat decay = 0.02;\nfloat attack = 0.1;\nbool doDecay = true;\nbool doAttack = true;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.y == 0.5){\n        vec4 ffv = texelFetch( iChannel0, ivec2(fragCoord), 0 ); \n        vec4 ffvP = texelFetch( iChannel1, ivec2(fragCoord), 0);\n        if(ffv.x < ffvP.x && doDecay){ //if new value is less than previous value (i.e. value decreases)\n            if(ffvP.x - decay >= ffv.x){ //if decreasing previous value by decay does not reach the new value,\n            \tffv.x = ffvP.x - decay; //set the new value to the decayed value\n            }\n        }\n        else if(ffv.x > ffvP.x && doAttack){ //if new value is more than previous value (i.e. value increases)\n            if(ffvP.x + attack <= ffv.x){ //if raising the previous value by attack does not surpass the new value,\n            \tffv.x = ffvP.x + attack; //set the new value to the increased value\n            }\n        }\n\n        fragColor = ffv;\n    }\n    if(fragCoord.y == 1.5){ //return wave as-is\n        vec4 wave = texelFetch( iChannel0, ivec2(fragCoord), 0 ); \n        fragColor = wave;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 35508,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/teresa-tesla/operation-pyrite-arknights"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}