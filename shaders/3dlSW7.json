{
    "Shader": {
        "info": {
            "date": "1551425680",
            "description": "A lighting shader I've been working on for abit. using distance fields. More improvements may follow.",
            "flags": 48,
            "hasliked": 0,
            "id": "3dlSW7",
            "likes": 13,
            "name": "Raymarched lighting",
            "published": 3,
            "tags": [
                "raytracing",
                "distancefield",
                "ray",
                "raymarch",
                "shadow",
                "sky",
                "raytrace",
                "distance",
                "pathtracing",
                "ao",
                "field",
                "march",
                "trace",
                "signed",
                "solid"
            ],
            "usePreview": 0,
            "username": "robobo1221",
            "viewed": 1450
        },
        "renderpass": [
            {
                "code": "// from https://github.com/TheRealMJP/BakingLab/blob/master/BakingLab/ACES.hlsl\nconst mat3 ACESInputMat = mat3(\n    0.59719, 0.35458, 0.04823,\n    0.07600, 0.90834, 0.01566,\n    0.02840, 0.13383, 0.83777\n);\n\nconst mat3 ACESOutputMat = mat3(\n     1.60475, -0.53108, -0.07367,\n    -0.10208,  1.10813, -0.00605,\n    -0.00327, -0.07276,  1.07602\n);\n\nvec3 RRTAndODTFit( in vec3 v ) {\n    vec3 a = v * (v + 0.0245786) - 0.000090537;\n    vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n    return a / b;\n}\n\nvec3 ACESFitted( in vec3 color ) {\n    color = color * ACESInputMat;\n    color = RRTAndODTFit(color);\n    color = color * ACESOutputMat;\n    color = clamp(color, 0.0, 1.0);\n    color = pow(color, vec3(1.0 / 2.2));\n    return color;\n}\n\nconst mat3 RGB_2_XYZ = mat3(\n\t0.4124564, 0.3575761, 0.1804375,\n\t0.2126729, 0.7151522, 0.0721750,\n\t0.0193339, 0.1191920, 0.9503041\n);\n\nconst mat3 XYZ_2_RGB = mat3(\n\t3.2404542,-1.5371385,-0.4985314,\n\t-0.9692660, 1.8760108, 0.0415560,\n\t0.0556434,-0.2040259, 1.0572252\n);\n\nconst mat3 ACES2065_1_2_XYZ = mat3(\n\t0.9525523959, 0.0000000000, 0.0000936786,\n\t0.3439664498, 0.7281660966, -0.0721325464,\n\t0.0000000000, 0.0000000000, 1.0088251844\n);\n\nconst mat3 XYZ_2_ACES2065_1 = mat3(\n\t1.0498110175, 0.0000000000, -0.0000974845,\n\t-0.4959030231, 1.3733130458, 0.0982400361,\n\t0.0000000000, 0.0000000000, 0.9912520182\n);\n\nconst mat3 RGB_2_ACES2065_1 = RGB_2_XYZ * XYZ_2_ACES2065_1;\nconst mat3 ACES2065_1_2_RGB = ACES2065_1_2_XYZ * XYZ_2_RGB;\n\nvec3 ACESFitted2(vec3 color ) {\n    color = color * RGB_2_ACES2065_1;\n    color = RRTAndODTFit(color);\n    color = color * ACES2065_1_2_RGB;\n    color = clamp(color, 0.0, 1.0);\n    color = pow(color, vec3(1.0 / 2.2));\n    \n\t\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n\tvec2 position = fragCoord.xy / iResolution.xy;\n    vec4 sampler0 = texture(iChannel0, position);\n    \n    vec3 color = sampler0.rgb;\n    float depth = sampler0.a;\n    \n    color = ACESFitted(color);\n    \n    //color /= color + 1.0;\n    //color = pow(color, vec3(1.0 / 4.4)); //4.4 because converting from linear to gamma\n\n\tfragColor = vec4(color, 1.0 );\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define k iChannel1\n\nmat3 rotate(){\n    vec2 rotationMouse = iMouse.xy / iResolution.xy;\n    \t rotationMouse.x = rotationMouse.x - 0.5;\n    \t rotationMouse.y = rotationMouse.y * 2.0 - 1.0;\n    \t rotationMouse *= vec2(TAU, hPI);\n    \n    mat3 rotatexz = rotationMatrix(vec3(0.0, 1.0, 0.0), rotationMouse.x);\n    mat3 rotatey = rotationMatrix(vec3(1.0, 0.0, 0.0), -rotationMouse.y);\n    \n    return rotatexz * rotatey;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n\tvec2 position = fragCoord.xy / iResolution.xy;\n    vec3 movementBuffer = texture(iChannel0, position).rgb;\n    \n    mat3 rotMat = rotate();\n    \n    vec3 horDir = rotMat * vec3(0.0, 0.0, 1.0);\n    vec3 vertDir = rotMat * vec3(1.0, 0.0, 0.0);\n    \n    vec4 movementControls = vec4(ReadKey(k,Key_W), ReadKey(k,Key_S), ReadKey(k,Key_A), ReadKey(k,Key_D));\n    \n    if (int(fragCoord.x) == 1) {\n        vec4 movement = movementSpeed * movementControls * iTimeDelta * 60.0;\n        \n        movement *= ReadKey(k, Key_Shift) + 1.0;\n        \n\t\tmovementBuffer += movement.x * horDir;\n        movementBuffer -= movement.y * horDir;\n        movementBuffer -= movement.z * vertDir;\n        movementBuffer += movement.w * vertDir;\n    } else if (int(fragCoord.x) == 2) {\n    \tmovementBuffer.x = float(iFrame > 1 && iMouse.z < 1.0 && !any(greaterThan(movementControls, vec4(0.0))));\n    }\n    \n    movementBuffer.y = 0.0;\n\n\tfragColor = vec4(movementBuffer, 1.0 );\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float maxDist = 30.0;\nconst float epsilon = 0.001;\n\nconst int geometrySteps = 256;\nconst int intersectionSteps = 30;\n\nconst int AORays = 8;\nconst int reflectionRays = 8;\nconst int shadowRays = 8;\n\nconst float rAORays = 1.0 / float(AORays);\nconst float rReflectionRays = 1.0 / float(reflectionRays);\nconst float rShadowRays = 1.0 / float(shadowRays);\n\n//#define sunlight_2nd_bounce\n\n//#define enable_reflections\nconst float roughness = 0.1;\nconst float alpha2 = roughness * roughness * roughness * roughness;\nconst float f0 = 0.021;\n\nconst float sunAngularDiameter = 0.5;\n\nconst float sunIluminance = 1.5;\nconst vec3 lightDir = normalize(vec3(0.5, 1.0, 1.0));\n\nconst float goldenAngle = TAU / PHI / PHI;\n\nfloat checker(vec3 p){\n    vec3 fp = floor(p);\n\treturn mod(fp.x + fp.y + fp.z, 2.0) < 1.0 ? 0.0 : 1.0;\n}\n\nvec3 calculateAlbedo(vec3 p){\n\tvec3 albedo = vec3(1.0);\n    \n    return albedo;\n}\n\nvec3 calculateEmissive(vec3 p){\n\tvec3 emissive = vec3(0.0);\n    \n    return emissive;\n}\n\nfloat hGPhase(float cosTheta, const float g){\n\tfloat g2 = g * g;\n    \n    return 0.25 * (1.0 - g2) * pow(g2 - 2.0 * g * cosTheta + 1.0, -1.5);\n}\n\nvec3 calculateSunColor(float sunZenith){\n\treturn mix(vec3(1.0, 0.4, 0.05), vec3(1.0), max(sunZenith, 0.0));\n}\n\nfloat calculateSun(float lDotV){\n    const float cosRad = cos(radians(sunAngularDiameter));\n    const float sunLuminance = sunIluminance / ((1.0 - cosRad) * TAU);\n    \n    return step(cosRad, lDotV) * sunLuminance;\n}\n\nvec3 calculateSky(vec3 background, float lDotU, float lDotV){\n    float phaseMie = hGPhase(lDotV, 0.8);\n    \n    float zenith = max(lDotU, 0.0);\n    \n    float sunZenith = lightDir.y;\n    const vec3 topCol = vec3(0.1, 0.34, 1.0);\n    const vec3 bottomCol = vec3(1.0);\n    \n    vec3 sky = mix(topCol, (bottomCol + topCol), exp2(-zenith * 8.0));\n         sky += phaseMie * exp2(-zenith * 6.0);\n    \n    vec3 absorbColor = calculateSunColor(1.0 - exp2(-zenith * 2.0));\n    \n    sky = sky * mix(absorbColor * 0.9 + 0.1, vec3(1.0), sunZenith);\n    \n\treturn background * absorbColor + sky * sunIluminance * (1.0 - clamp(-sunZenith * 10.0, 0.0, 1.0));\t\n}\n\nmat3 rotate(){\n    vec2 rotationMouse = iMouse.xy / iResolution.xy;\n    \t rotationMouse.x = rotationMouse.x - 0.5;\n    \t rotationMouse.y = rotationMouse.y * 2.0 - 1.0;\n    \t rotationMouse *= vec2(TAU, hPI);\n    \n    mat3 rotatexz = rotationMatrix(vec3(0.0, 1.0, 0.0), rotationMouse.x);\n    mat3 rotatey = rotationMatrix(vec3(1.0, 0.0, 0.0), -rotationMouse.y);\n    \n    return rotatexz * rotatey;\n}\n\nfloat calculateBox(vec3 p, vec3 bp, vec3 br){\n\tvec3 ab = abs(p + bp) - br;\n    \n    return max(max(ab.x, ab.z), ab.y);\n}\n\nfloat calculateBox(vec3 p, vec3 bp, float br){\n\tvec3 ab = abs(p + bp) - br;\n    \n    return max(max(ab.x, ab.z), ab.y);\n}\n\nfloat calculateDistanceField(vec3 position){\n\tfloat plane = position.y + 1.0;\n\tfloat sphere = length(position + vec3(0.0, 0.0, -5.1)) - 1.0;\n\t\n\tfloat box = calculateBox(position, vec3(-4.0, 0.0, -7.0), 1.0);\n\t\n\tfloat closest = plane;\n\t\t  closest = min(closest, sphere);\n\t\t  closest = min(closest, box);\n\t\n\treturn closest;\n}\n\nvec3 calculateConeVector(const float i, const float angularRadius, const int steps) {\n    float x = i * 2.0 - 1.0;\n    float y = i * float(steps) * 16.0 * 16.0 * goldenAngle;\n    \n    float angle = acos(x) * radians(angularRadius) * rPI;\n    float c = cos(angle);\n    float s = sin(angle);\n\n    return vec3(cos(y) * s, sin(y) * s, c);\n}\n\nvec3 calculateRoughSpecular(const float i, const float alpha2, const int steps) {\n\n    float x = (alpha2 * i) / (1.0 - i);\n    float y = i * float(steps) * 16.0 * 16.0 * goldenAngle;\n\n    float c = inversesqrt(x + 1.0);\n    float s = sqrt(x) * c;\n\n    return vec3(cos(y) * s, sin(y) * s, c);\n}\n\nmat3 calculateTangentMatrix(vec3 direction){\n\tvec3 c1 = cross(direction, vec3(0.0, 0.0, 1.0));\n\tvec3 c2 = cross(direction, vec3(0.0, 1.0, 0.0));\n    \n    vec3 tangent = dot(c1, c1) > dot(c2, c2) ? c1 : c2;\n    vec3 biDir = cross(direction, tangent);\n    \n    return mat3(tangent, biDir, direction);\n}\n\nfloat calculateFresnel(float cosTheta, float f0){\n    cosTheta = 1.0 - cosTheta;\n\tcosTheta = cosTheta * cosTheta * cosTheta * cosTheta * cosTheta;\n    \n    return cosTheta * (1.0 - f0) + f0;\n}\n\nvec3 calculateNormal(vec3 p) {\n    const float delta = 0.001;\n    \n    return normalize(vec3(\n        calculateDistanceField(vec3(p.x + delta, p.y, p.z)) - calculateDistanceField(vec3(p.x - delta, p.y, p.z)),\n        calculateDistanceField(vec3(p.x, p.y + delta, p.z)) - calculateDistanceField(vec3(p.x, p.y - delta, p.z)),\n        calculateDistanceField(vec3(p.x, p.y, p.z  + delta)) - calculateDistanceField(vec3(p.x, p.y, p.z - delta))\n    ));\n}\n\nfloat calculateRayIntersect(vec3 position, out vec3 rayPosition, vec3 direction, float dither){\n\tfloat shadow = 0.0;\n    float depth = 0.0;\n    \n    float epsilon = epsilon * 20.0;\n    rayPosition = position;\n    \n    rayPosition += direction * epsilon * 2.0;\n\t\n\tfor (int i = 0; i < intersectionSteps; ++i){\n\t\tfloat nextDist = calculateDistanceField(rayPosition) + epsilon;\n\t\t\n\t\tshadow = 0.0;\n\t\t\n        rayPosition += nextDist * direction;\n\t\tif (nextDist < epsilon) break;\n        \n        depth += nextDist;\n\t\tshadow = 1.0;\n        \n        if (depth > 8.0) break;\n\t}\n\t\n\treturn shadow;\n}\n\nfloat calculateRayIntersect(vec3 position, vec3 direction, float dither){\n\treturn calculateRayIntersect(position, position, direction, dither);\n}\n\nvec3 calculateSunLight(vec3 position, vec3 direction, vec3 normal, float dither, vec3 sunColor){\n\tvec3 shadow = vec3(0.0);\n    \n     mat3 tbl = calculateTangentMatrix(direction);\n\t\n\tfor (int i = 0; i < shadowRays; ++i){\n\t\tvec3 dir = tbl * calculateConeVector((float(i) + dither) * rShadowRays, sunAngularDiameter, shadowRays);\n\t\t\n        float lDotN = dot(dir, normal);\n        if (lDotN <= 0.0) continue;\n        \n        lDotN = sqrt(clamp(lDotN, 0.0, 1.0));\n        \n\t\tvec3 light = vec3(sunIluminance) * lDotN;\n        float rayHit = calculateRayIntersect(position, dir, dither);\n\t\t\n\t\tshadow += rayHit * light;\n\t}\n    \n    return shadow * rShadowRays * sunColor;\n}\n\nvec3 calculateLighting(vec3 position, vec3 worldVector, vec3 normal, vec3 sunColor, float dither){\t\n\tvec3 AO = vec3(0.0);\n    \n    #ifdef sunlight_2nd_bounce\n    \tvec3 bouncedLight = vec3(0.0);\n    #endif\n    \n    mat3 tbn = calculateTangentMatrix(normal);\n\t\n\tfor (int i = 0; i < AORays; ++i){\n\t\tvec3 dir = tbn * calculateConeVector((float(i) + dither) * rAORays, 90.0, AORays);\n\t\t\n        float lDotN = dot(dir, normal);\n        if (lDotN <= 0.0) continue;\n        \n        lDotN = sqrt(clamp(lDotN, 0.0, 1.0));\n        float lDotU = dot(dir, upVec);\n        float lDotV = dot(dir, lightDir);\n        \n\t\tvec3 light = calculateSky(vec3(0.0), lDotU, lDotV) * lDotN;\n        \n        #ifdef sunlight_2nd_bounce\n            vec3 bouncePos = position;\n            float rayHit = calculateRayIntersect(position, bouncePos, dir, dither);\n        \n        \tvec3 bounceNormal = calculateNormal(bouncePos);\n        \n            vec3 bouncedAlbedo = calculateAlbedo(bouncePos);\n            vec3 bouncedEmissive = calculateEmissive(bouncePos);\n        \tvec3 bouncedLighting = calculateSunLight(bouncePos, lightDir, bounceNormal, dither, sunColor);\n        \t     bouncedLighting += bouncedEmissive;\t\n        \n        \tbouncedLight += bouncedLighting * (1.0 - rayHit) * lDotN;\n\t\t#else\n        \tfloat rayHit = calculateRayIntersect(position, dir, dither);\n        #endif\n        \n\t\tAO += rayHit * light;\n\t}\n    \n    #ifdef enable_reflections\n        vec3 reflection = vec3(0.0);\n        float fresnel = 0.0;\n\n        for (int i = 0; i < reflectionRays; ++i){\n            vec3 dir = tbn * calculateRoughSpecular((float(i) + dither) * rReflectionRays, alpha2, reflectionRays);\n            dir = reflect(worldVector, dir);\n\n            float lDotN = dot(dir, normal);\n            float f = lDotN;\n            if (lDotN <= 0.0) continue;\n\n            float lDotU = dot(dir, upVec);\n            float lDotV = dot(dir, lightDir);\n\n            fresnel += calculateFresnel(f, f0);\n\n            vec3 light = calculateSky(vec3(0.0), lDotU, lDotV);\n            float rayHit = calculateRayIntersect(position, dir, dither);\n\n            reflection += rayHit * light;\n        }\n    #endif\n    \n    #ifdef enable_reflections\n        reflection = reflection * rReflectionRays;\n        fresnel = fresnel * rReflectionRays;\n    #endif\n    \n    #ifdef sunlight_2nd_bounce\n    \tbouncedLight = bouncedLight * rAORays;\n    #endif\n    \n    AO = AO * rAORays * rPI;\n    \n    vec3 sunLighting = calculateSunLight(position, lightDir, normal, dither, sunColor);\n    vec3 totalLighting = AO + sunLighting;\n    \n    #ifdef sunlight_2nd_bounce\n    \ttotalLighting += bouncedLight;\n    #endif\n    \n    #ifdef enable_reflections\n    \ttotalLighting = mix(totalLighting, reflection, fresnel);\n    #endif\n\t\n\treturn totalLighting;\n}\n\nvoid calculateRaymarchedPosition(inout vec3 position, vec3 worldVector, out bool rayHit){\n    float depth = 0.0;\n    \n    mat3 rotateMat = rotate();\n    mat3 invRotateMat = inverse(rotateMat);\n\t\n\tfor (int i = 0; i < geometrySteps; ++i){\n\t\tfloat nextDist = calculateDistanceField(position);\n\t\t\n\t\trayHit = true;\n\t\t\n        depth += nextDist;\n\t\tif (nextDist < epsilon) break;\t\n\t\t\n\t\trayHit = false;\n        if (depth > maxDist) break;\n\t\t\n\t\tposition += nextDist * worldVector;\n\t}\n}\n\nfloat calculateScatterIntegral(float stepTransmittance){\n\treturn stepTransmittance * -1.0 + 1.0;\n}\n\nvec3 raymarchVolume(vec3 backGround, vec3 position, vec3 movementBuffer, vec3 sunColor, float lDotV, float dither){\n\tconst int steps = 10;\n    const float rSteps = 1.0 / float(steps);\n    \n    vec3 start = vec3(0.0);\n    vec3 end = position;\n    float endDepth = length(end);\n    end /= endDepth;\n    endDepth = min(length(position), 10.0);\n    end *= endDepth;\n    \n    vec3 increment = (end - start) * rSteps;\n    vec3 rayPosition = dither * increment + start;\n    \n    float rayLength = length(increment);\n    float scatter = 0.0;\n    float transmittance = 1.0;\n    \n    float phaseMie = hGPhase(lDotV, 0.8);\n    \n    for (int i = 0; i < steps; i++, rayPosition += increment){\n\t\tfloat od = 0.2 * rayLength * exp2(-max(rayPosition.y + 1.0, 0.0) * 2.0) * 4.0;\n        \n        float stepTransmisttance = exp(-od);\n        \n        float volumetricShadow = calculateRayIntersect(rayPosition + movementBuffer, lightDir, dither);\n        float scatterIntegral = calculateScatterIntegral(stepTransmisttance);\n        \n        scatter += volumetricShadow * scatterIntegral * transmittance;\n        \n        transmittance *= stepTransmisttance;\n    }\n    \n    return backGround * transmittance + scatter * sunColor * phaseMie;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n\tvec2 position = fragCoord.xy / iResolution.xy;\n    vec2 wvecPos = (position * 2.0 - 1.0) * vec2(1.0, iResolution.y / iResolution.x);\n\n\tvec3 worldVector = normalize(vec3(wvecPos, 1.0));\n    vec4 movementControls = vec4(ReadKey(iChannel2,Key_W), ReadKey(iChannel2,Key_S), ReadKey(iChannel2,Key_A), ReadKey(iChannel2,Key_D));\n    \n    if (iMouse.x > 1.0) {\n        mat3 rotateMat = rotate();\n        worldVector = rotateMat * worldVector;\n    }\n    \n    float frameChange = texelFetch(iChannel1, ivec2(2.0, 0.0), 0).r;\n    \n\tvec3 worldPosition = vec3(0.0);\n    vec3 movementBuffer = texelFetch(iChannel1, ivec2(1.0, 0.0), 0).rgb;\n    \n    vec3 unTransformedWorldPos = worldPosition;\n    worldPosition += movementBuffer;\n\t\n\tbool rayHit = false;\n\t\n\tfloat dither = texture(iChannel2, iTime + (fragCoord.xy / iChannelResolution[2].xy)).x;\n          dither = fract(iTime * (1.0 / 8.0) + dither);\n        \n\tcalculateRaymarchedPosition(worldPosition, worldVector, rayHit);\n    vec3 normal = calculateNormal(worldPosition);\n    \n    vec3 sunColor = calculateSunColor(lightDir.y);\n\tvec3 shadow = calculateLighting(worldPosition, worldVector, normal, sunColor, dither);\n\n\tvec3 color = calculateAlbedo(worldPosition) + calculateEmissive(worldPosition);\n\t     color *= shadow;\n\t\n\tfloat lDotU = dot(worldVector, upVec);\n\tfloat lDotV = dot(worldVector, lightDir);\n\t\n    if (!rayHit) {\n        color = vec3(0.0);\n        color += calculateSun(lDotV);\n        color = calculateSky(color, lDotU, lDotV);\n    }\n    \n    //color = raymarchVolume(color, worldPosition - movementBuffer, movementBuffer, sunColor, lDotV, dither);\n\t\n    color = max(color, 0.0);\n    \n    vec3 backColor = texture(iChannel0, position).rgb;\n    color = mix(color, backColor, 0.95 * frameChange);\n    color = max(color, 0.0);\n\n\tfragColor = vec4(color, length(worldPosition - movementBuffer));\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const vec3 upVec = vec3(0.0, 1.0, 0.0);\n\nconst float PI = acos(-1.0);\nconst float rPI = 1.0 / PI;\nconst float hPI = PI * 0.5;\nconst float TAU = PI * 2.0;\nconst float rTAU = 1.0 / TAU;\n\nconst float PHI\t\t= sqrt(5.0) * 0.5 + 0.5;\nconst float rLOG2\t= 1.0 / log(2.0);\n\nconst float movementSpeed = 0.05;\n\nconst int Key_A = 65; const int Key_B = 66; const int Key_C = 67; const int Key_D = 68; const int Key_E = 69;\nconst int Key_F = 70; const int Key_G = 71; const int Key_H = 72; const int Key_I = 73; const int Key_J = 74;\nconst int Key_K = 75; const int Key_L = 76; const int Key_M = 77; const int Key_N = 78; const int Key_O = 79;\nconst int Key_P = 80; const int Key_Q = 81; const int Key_R = 82; const int Key_S = 83; const int Key_T = 84;\nconst int Key_U = 85; const int Key_V = 86; const int Key_W = 87; const int Key_X = 88; const int Key_Y = 89;\nconst int Key_Z = 90;\nconst int Key_0 = 48; const int Key_1 = 49; const int Key_2 = 50; const int Key_3 = 51; const int Key_4 = 52;\nconst int Key_5 = 53; const int Key_6 = 54; const int Key_7 = 55; const int Key_8 = 56; const int Key_9 = 57;\nconst int Key_Space = 32;\nconst int Key_Shift = 16;\n\nfloat ReadKeyInternal(sampler2D sampleTexture, int key, bool toggle )\n{\n\treturn textureLod( sampleTexture, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ), 0.0 ).x;\n}\n\nfloat ReadKey(sampler2D sampleTexture, int key )\n{\n\treturn ReadKeyInternal(sampleTexture,key,false);\n}\n\nfloat ReadKeyToggle(sampler2D sampleTexture, int key )\n{\n\treturn ReadKeyInternal(sampleTexture,key,true);\n}\n\nmat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    float xx = axis.x * axis.x;\n    float yy = axis.y * axis.y;\n    float zz = axis.z * axis.z;\n    \n    float xy = axis.x * axis.y;\n    float xz = axis.x * axis.z;\n    float zy = axis.z * axis.y;\n    \n    return mat3(oc * xx + c, oc * xy - axis.z * s, oc * xz + axis.y * s,\n                oc * xy + axis.z * s, oc * yy + c, oc * zy - axis.x * s, \n                oc * xz - axis.y * s, oc * zy + axis.x * s, oc * zz + c);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}