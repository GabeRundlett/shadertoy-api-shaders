{
    "Shader": {
        "info": {
            "date": "1642132239",
            "description": "Belabored walking of a dumb robot :/ Maybe it will get smarter on the next iteration",
            "flags": 32,
            "hasliked": 0,
            "id": "sslcD4",
            "likes": 14,
            "name": "Robot Creation",
            "published": 3,
            "tags": [
                "physics"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 376
        },
        "renderpass": [
            {
                "code": "// Fork of \"Brick Wall Physics\" by wyatt. https://shadertoy.com/view/sdsyD8\n// 2022-01-13 22:23:09\nMain\n    //if (iFrame%4==0)discard;\n    vec4 pos = A(POS);\n    Q = .2*max(sign(sin((pos.x+U.xxxx)/R.x*10.)-.999),0.);\n    U.x += pos.x-.5*R.x;\n    U.y -= .1*R.y;\n    Q += smoothstep(2.,1.,abs(U.y));\n    Q += .1*sin(U.x/R.x+vec4(1,2,3,4));\n    vec4 vel = A(VEL);\n    vec4 ang = A(ANG);\n    vec4 le = pos;\n    vec4 ri = pos;\n    float d = 1e9;\n    for (int i = 0; i < 3; i++) {\n        {\n            d = map(U,ri,W);\n            Q += vec4(1)*smoothstep(2.,0.,abs(d));\n            vec2 pivot = ri.xy + vec2(1,-1)*W*ei(ri.z);\n            ri.xy += vec2(2,0)*W*ei(ri.z);\n            ri.xy -= pivot;\n            ri.xy *= ei(ang[i]);\n            ri.z  += ang[i];\n            ri.xy += pivot;\n        }\n        {\n            \n            d = map(U,le,W);\n            Q += vec4(1)*smoothstep(2.,0.,abs(d));\n            vec2 pivot = le.xy + vec2(-1,-1)*W*ei(le.z);\n            le.xy += vec2(-2,0)*W*ei(le.z);\n            le.xy -= pivot;\n            le.xy *= ei(-ang[2+i]);\n            le.z  += -ang[2+i];\n            le.xy += pivot;\n        }\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 R; float T; int I; vec4 M;\n#define A(U) texture(iChannel0,(U)/R)\n#define pi 3.14159265359\n#define Main void mainImage(out vec4 Q, in vec2 U) {R=iResolution.xy;I=iFrame;M=iMouse;T=float(I)/60.;\n#define ei(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define an(a) vec2(cos(a),sin(a))\n\n#define N 3.\n#define dt .2\n#define W (.07*R)\n\n#define F1 vec2(2.+1.5*cos(-4.*(T+z/1200.)),-3.-1.5*sin(-4.*(T+z/1200.)))\n#define F2 vec2(2.+1.5*cos(3.*(T+z/1200.)),-3.-1.5*sin(3.*(T+z/1200.)))\n\n#define POS vec2(.5,2.5)\n#define VEL vec2(.5,1.5)\n#define ANG vec2(0.5,.5)\n\nvec2 velo (vec2 u, vec4 p, vec4 v) {\n    vec2 w = u.xy-p.xy;\n    if (length(w)>0.) w = vec2(-w.y,w.x);\n    return v.xy + w*v.z;\n}\n\nfloat map ( vec2 p, vec4 a, vec2 b )\n{ //iquilezles.org/articles/distfunctionsl\n  p = (p-a.xy)*ei(-a.z);\n  vec2 q = (abs(p) - b);\n  return length(max(q,0.0)) + min(max(q.x,q.y),0.0)-4.;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\nMain\n    if (U.x>4.||U.y>4.)discard;\n    vec4 pos = A(POS);\n    vec4 vel = A(VEL);\n    vec4 ang = A(ANG);\n    for (float z = 0.; z <40.; z++) {\n        vec4 ong = ang;\n        vec4 f = vec4(0);\n        {\n            vec2 pivot = pos.xy + vec2(1,-1)*W*ei(pos.z);\n            vec2 Y = pivot.xy+F1*W;\n            vec2 r = Y-pivot.xy;\n            if (length(r)>4.*W.x) r = 4.*W.x*normalize(r);\n            float theta = atan(r.y,r.x);\n            float l     = length(r);\n            float t = -acos(.25*l/W.x);\n            ang.x = theta-t;\n            ang.y = 2.*t;\n        }\n        {\n            vec2 pivot = pos.xy + vec2(-1,-1)*W*ei(pos.z);\n            vec2 Y = pivot.xy+F2*W;\n            vec2 r = Y-pivot.xy;\n            if (length(r)>4.*W.x) r = 4.*W.x*normalize(r);\n            float theta = atan(r.y,r.x);\n            float l     = length(r);\n            float t = -acos(.25*l/W.x);\n            ang.z = theta-t;\n            ang.w = 2.*t;\n        }\n        vec4 dang = ang-ong;\n        vec4 le = pos;\n        vec4 ri = pos;\n        float h = 0.;\n        for (int i = 0; i < 3; i++) {\n            {\n                vec2 pivot = ri.xy + vec2(1,-1)*W*ei(ri.z);\n                for (int x = 0; x <= 1; x++)\n                for (int y = 0; y <= 1; y++)\n                {\n                    vec2 v = ri.xy+(vec2(x,y)*2.-1.)*W*ei(ri.z);\n                    if (v.y<0.) {\n                        vec2 r = v-pos.xy;\n                        if (length(r)>0.) {\n                            vec2 dv = velo(v,pos,vel);\n                            vec2 im = vec2(0,1)-dv;\n                             f.z -= dot(r,vec2(-im.y,im.x))/(10.*W.x*W.y);\n                             f.xy += im*abs(dot(normalize(r),im));\n                             f.x += (v-pivot).y*dang[i];\n                             h++;\n                        }\n                    }\n                }\n                ri.xy += vec2(2,0)*W*ei(ri.z);\n                ri.xy -= pivot;\n                ri.xy *= ei(ang[i]);\n                ri.z  += ang[i];\n                ri.xy += pivot;\n            }\n            {\n                vec2 pivot = le.xy + vec2(-1,-1)*W*ei(le.z);\n                for (int x = 0; x <= 1; x++)\n                for (int y = 0; y <= 1; y++)\n                {\n                    vec2 v = le.xy+(vec2(x,y)*2.-1.)*W*ei(le.z);\n                    if (v.y<0.) {\n                        vec2 r = v-pos.xy;\n                        if (length(r)>0.) {\n                            vec2 dv = velo(v,pos,vel);\n                            vec2 im = vec2(0,1)-dv;\n                             f.z -= dot(r,vec2(-im.y,im.x))/(10.*W.x*W.y);\n                             f.xy += im*abs(dot(normalize(r),im));\n                             f.x += -(v-pivot).y*dang[i+2];\n                             h++;\n                        }\n                    }\n                }\n                le.xy += vec2(-2,0)*W*ei(le.z);\n                le.xy -= pivot;\n                le.xy *= ei(-ang[2+i]);\n                le.z  += -ang[2+i];\n                le.xy += pivot;\n            }\n        }\n\n\n        vel.y -= 3e-3;\n        if (h>0.) f /= h;\n        vel += dt*f;\n        pos += dt*(vel);\n    }\n   if (length(U-POS)<.5) Q = I<1?vec4(.5*R,0,0):pos;\n   else\n   if (length(U-VEL)<.5) Q = I<1?vec4(0):vel;\n   else\n   if (length(U-ANG)<.5) Q = ang;//A(THA);\n   else\n   discard;\n   \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}