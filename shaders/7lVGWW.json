{
    "Shader": {
        "info": {
            "date": "1637746961",
            "description": "testing out voronoi in 3d space",
            "flags": 0,
            "hasliked": 0,
            "id": "7lVGWW",
            "likes": 5,
            "name": "The Cell Void",
            "published": 3,
            "tags": [
                "voronoi",
                "sdf",
                "cellular",
                "void"
            ],
            "usePreview": 0,
            "username": "lambmeow",
            "viewed": 384
        },
        "renderpass": [
            {
                "code": "#define time (iTime + 100.)\n\n//color\n//#define COLOR\n\n//see all spheres\n//#define SHOW_ALL\n\n\nvec3 rand(vec3 p)\n{\n    float x = dot(p, vec3(105.2523, 323.6236, 246.634)),\n    y = dot(p , vec3(225,123.35235,352.235)),\n    z = dot(p, vec3(373,164.352,273.46343));\n    \n    return fract(sin(vec3(x,y,z))* 45364.623624);\n}\n\nmat2 rot(float a)\n{\n    float c= cos(a), s = sin(a);\n    \n    return mat2(c,-s,s,c);\n}\nvec4 voro(vec3 p)\n{\n    vec3 ip = floor(p), fp = fract(p);\n    \n    float dd = 1.;\n    vec3 pos = vec3(0);\n    for(int i = -1; i <= 1; i++)\n    {\n        for(int j = -1; j <= 1; j ++)\n        {\n            for(int k = -1; k <= 1; k++)\n            {\n                vec3 n = vec3 (j, i ,k); \n                vec3 o = ip + n;\n                //o.xy *= rot(iTime * 0.01) *0.01;\n                vec3 p = rand(o);\n                \n                //p.xz += 0.25 * sin(iTime + p.x) + cos(p.z + iTime) * 0.25;\n                float d = length(n + p - fp);\n            \n                if(d < dd)\n                {\n                    dd = d;\n                    pos = n + p - fp;\n                }\n            }\n        }\n    }\n    return vec4(pos,dd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 r = iResolution.xy,uv = (2. * fragCoord - r)/r.y;\n    \n    \n    vec3 ro = vec3(0, time* 0.01, time),rd = normalize(vec3 (uv,2.));\n    \n    // Time varying pixel color\n    \n    vec3 col = vec3(0);\n    \n    float dd = 0.;\n\n    for(int i = 0; i < 255; i ++)\n    {\n        vec3 p = ro + rd * dd;\n       // p.xy -= ro.xy;\n        //p.xy *= mat2(cos(iTime + p.z), -sin(iTime + p.z), sin(iTime + p.z), cos(iTime + p.z)) * 0.5;\n       //p.xy += ro.xy;\n        vec4 vp = voro(p);\n        float ll = vp.w - length(p - ro)* 0.03 + length(uv) * 0.1;\n        \n        if ( ll < 0.001)\n        {\n            col = 1.-vec3(max(dot(vp.xyz, p), 0.)) * 1.- length(p - ro) * .01; //col = vec3(1) * 100/;\n#ifdef COLOR\n            col.gb *= 0.5 + sin(time * 5. + length(ro-p) ) * 0.3;\n#endif\n\n#ifdef SHOW_ALL\n            col = 1.-vec3(length(p - ro) * 0.01);\n#endif\n\n            break;\n        }\n        dd += ll;\n        \n        if(dd > 100.)\n            break;\n    }\n\n    // Output to screen\n    \n#ifdef SHOW_ALL\n    fragColor = vec4(col,1.0);\n#else\n    fragColor = vec4(col * length(uv /2.) ,1.0);\n#endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}