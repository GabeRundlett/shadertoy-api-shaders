{
    "Shader": {
        "info": {
            "date": "1610741518",
            "description": "Explore the scene using mouse drag + WASD/arrow keys.",
            "flags": 48,
            "hasliked": 0,
            "id": "tlKczm",
            "likes": 1,
            "name": "Cloud [Explorable]",
            "published": 3,
            "tags": [
                "3d",
                "ray",
                "volume",
                "march",
                "trace",
                "path",
                "explore"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 291
        },
        "renderpass": [
            {
                "code": "/*Ethan Alexander Shulman January 7, 2021 - xaloez.com\n4k 60fps video https://www.youtube.com/watch?v=9M18q0ohwtg \n4k wallpaper xaloez.com/art/2021/Cloud.jpg\n\nControls:\nLook - Mouse Drag\nMove - WASD or Arrow Keys\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 c = texelFetch(iChannel0,ivec2(fragCoord),0);\n    fragColor = pow(c/c.w,vec4(1./2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*Buffer A stores dynamic camera position and rotation.\n\n0 = camera position(xyz), w = 1 frame of camera change\n1 = camera yaw/pitch(xy) and last mouse position(zw)\n*/\n\n#define MOUSE_SENSITIVITY 2.\n\n#define MOVEMENT_SPEED 5.\n\n\nmat2 r2(float a) {\n\tfloat s = sin(a), c = cos(a);\n\treturn mat2(c,-s,s,c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.y < 1.) {\n        vec4 rot = texelFetch(iChannel0,ivec2(1,0),0);\n        float camChanged = (iMouse.z > 0. && iMouse.w < 1.)?\n                            (length(rot.zw-iMouse.xy)>0.?1.:0.):\n                            0.;\n        \n        if (fragCoord.x < 1.) {\n            //camera position\n            vec3 pos = texelFetch(iChannel0,ivec2(0),0).xyz;\n            if (iFrame == 0) pos = vec3(0,0,-4);//default position\n            \n            #define kb(i) texelFetch(iChannel1,ivec2(i,0),0).x\n            \n            //left/right/A/D arrows\n            float right = max(kb(39),kb(68))-max(kb(37),kb(65));\n            if (right != 0.) {\n                vec3 rt = vec3(right*iTimeDelta*MOVEMENT_SPEED,0,0);\n                rt.yz *= r2(rot.y);\n                rt.xz *= r2(rot.x);\n                pos += rt;\n                camChanged = 1.;\n            }\n            \n            //space key\n            if (kb(32) > 0.) {\n                vec3 up = vec3(0,iTimeDelta*MOVEMENT_SPEED,0);\n                up.yz *= r2(rot.y);\n                up.xz *= r2(rot.x);\n                pos += up;\n                camChanged = 1.;\n            }\n            \n            //up/down/W/S arrows\n            float forward = max(kb(38),kb(87))-max(kb(40),kb(83));\n            if (forward != 0.) {\n                vec3 fwd = vec3(0,0,forward*iTimeDelta*MOVEMENT_SPEED);\n                fwd.yz *= r2(rot.y);\n                fwd.xz *= r2(rot.x);\n                pos += fwd;\n                camChanged = 1.;\n            }\n            \n            fragColor = vec4(pos,camChanged);\n        } else {\n            //camera rotation\n            if (iFrame == 0) rot = vec4(0);\n            \n            //rotate on mouse drag\n            if (iMouse.z > 0. && iMouse.w < 1.) {\n                rot.xy -= (iMouse.xy-rot.zw)/iResolution.y*MOUSE_SENSITIVITY;\n            }\n            fragColor = vec4(rot.xy,iMouse.xy);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*Ethan Alexander Shulman January 7, 2021 - xaloez.com\n4k 60fps video https://www.youtube.com/watch?v=9M18q0ohwtg \n4k wallpaper xaloez.com/art/2021/Cloud.jpg\n\nControls:\nLook - Mouse Drag\nMove - WASD or Arrow Keys\n*/\n\n#define time iTime\n#define frame iFrame\n\n#define FIELD_OF_VIEW 1.\n\n#define HAS_OPACITY 1\n\n#define STEPS 60\n#define EPS 1e-2\n#define REFRACTION_SKIP 5.\n#define PI 3.14159265\n\nmat2 r2(float a) {\n\tfloat s = sin(a), c = cos(a);\n\treturn mat2(c,-s,s,c);\n}\n\nmat2x3 tangentBinormal(vec3 norm) {\n\tmat2x3 t;\n\tif (abs(norm.x) > abs(norm.y)) t[0] = normalize(vec3(-norm.z,0,norm.x));\n\telse t[0] = normalize(vec3(0,norm.z,-norm.y)); \n\tt[1] = cross(norm,t[0]);\n\treturn t;\n}\n\n//Credit: IQ, integer hash 2 https://www.shadertoy.com/view/XlXcW4\nvec3 hash(uvec3 x) {\n    x = ((x>>8U)^x.yzx)*1103515245U;\n    x = ((x>>8U)^x.yzx)*1103515245U;\n    x = ((x>>8U)^x.yzx)*1103515245U;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nvec3 hsvToRGB(vec3 hsv) {\n\treturn mix(clamp(abs(mod(hsv.x*6.0+vec3(0.,4.,2.),6.)-3.0)-1.0,0.,1.),vec3(1),hsv.y)*hsv.z;\n}\n\nfloat twave(float x) {\n\treturn 1.-abs(fract(x)-.5)*2.;\n}\n\nfloat nsampling;\n\n//volumetric opacity via distance dithering\n#define START_VOLUME(posSeed) vec3 opacityRand = hash(uvec3(abs(posSeed)*1000.)+uvec3(frame,frame*3,frame*7))\n#define VOLUME(dst,skip,alpha,anisotropy) max(dst,-1e3+(skip*(.5+opacityRand.y)+1e3)*step(alpha+nsampling*anisotropy,opacityRand.x))\n\nfloat geometry(vec3 p) {\n\tfloat d = abs(length(p)-2.)-.7;//sphere base shape\n\t\n\t//cloud distortion\n\td += twave(length(p-vec3(-4.81, 9.58, 5.85))*1.21)*.24;\n\td += twave(length(p-vec3(-8.82, -1.95, 6.94))*.98)*.21;\n\td += twave(length(p-vec3(2.69, 3.32, 7.48))*4.98)*.1;\n\td += twave(length(p-vec3(6.71, -6.07, -0.94))*6.36)*.08;\n\td += twave(length(p-vec3(-3.42, 7.45, 9.32))*5.042)*.1;\n\t\n\t//volume dither\n\tSTART_VOLUME(p);\n\treturn VOLUME(d, .03, .1, 1.);\n}\n\n    \n//chromatic separation dither\n#define START_CHROMA(posSeed) float chromaFrame = float(fract(hash(uvec3(abs(posSeed)*1000.)+uvec3(frame,frame*3,frame*7)).x)*3.)\n#define CHROMA(mat,rc,gc,bc) if (chromaFrame < 1.) {mat[0]*=vec3(3,0,0);rc;}\\\nelse if (chromaFrame < 2.) {mat[0]*=vec3(0,3,0);gc;}\\\nelse {mat[0]*=vec3(0,0,3);bc;}\n\n/*mat[0] = color\nmat[1].x = forward roughness, mat[1].y = emission, mat[1].z = backward roughness\nmat[2].x = opacity, mat[2].y = refraction index\n*/\nmat3 material(vec3 p) {\n\tmat3 m = mat3(vec3(.88), vec3(1e-4,0.,1e-4), vec3(.3,1.3,0.));//1.517,0.));\n\t//START_CHROMA(p);\n\t//CHROMA(m, m[2].y=1.3, m[2].y=1.25, m[2].y=1.35);\n\treturn m;\n}\nvec3 normal(vec3 p) {\n\t#define NEPS vec3(EPS,0,0)\n\tnsampling = 1.;\n\tvec3 n = normalize(vec3(geometry(p+NEPS),geometry(p+NEPS.yxz),geometry(p+NEPS.yzx))-geometry(p));\n\tnsampling = 0.;\n\treturn n!=n?vec3(0,1,0):n;\n}\n\nvec3 background(vec3 rp, vec3 rd) {\n\treturn mix(vec3(.00013,.00014,.00012),vec3(.001,.002,.006),clamp(rd.y*10.,0.,1.))+\n\t\t\tvec3(1.,.85,.6)*10.*max(0.,1.-length(rd-vec3(0,.3,.2)))*max(0.,rd.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    vec4 camPos = texelFetch(iChannel1,ivec2(0),0);\n   \n\tvec3 rp = camPos.xyz,//camera position\n\t\trd = normalize(vec3(uv.xy+(hash(uvec3(fragCoord,frame)).xy*4.-2.)/iResolution.y,FIELD_OF_VIEW)),\n\t\tc = vec3(1);\n\t\n\t//camera rotation\n    vec2 camRot = texelFetch(iChannel1,ivec2(1,0),0).xy;\n\trd.yz *= r2(camRot.y);\n   \trd.xz *= r2(camRot.x);\n\n\tfloat l = 0.;\n\tint i;\n\tbool flipRefraction = false;\n\tnsampling = 0.;\n\tfor (i = 0; i < STEPS; i++) {\n\t\tfloat dst = geometry(rp);\n\t\tif (dst <= EPS) {\n\t\t\tmat3 mat = material(rp);\n\t\t\tl += mat[1].y;\n\t\t\tc *= mat[0];\n\t\t\t\n\t\t\trp -= rd*(EPS*2.-dst);\n\t\t\tvec3 nrm = normal(rp);\n\t\t\tmat2x3 tangBinorm = tangentBinormal(nrm);\n\t\t\t\n\t\t\tvec3 rnd = hash(uvec3(abs(rp)*1000.)+uvec3(frame,frame*3,frame*7));\n\t\t\tfloat ct = pow(rnd.x,flipRefraction?mat[1].z:mat[1].x),\n\t\t\t\tst = sqrt(1.-ct*ct),\n\t\t\t\tpt = rnd.y*PI*2.;\n\t\t\tvec3 surf = normalize(nrm*ct+tangBinorm[0]*(st*cos(pt))+tangBinorm[1]*(st*sin(pt)));\n\t\t\t#if HAS_OPACITY\n\t\t\tif (mat[2].x < rnd.z) {\n\t\t\t\trp += rd*(EPS*2.-dst);\n\t\t\t\trd = refract(rd,surf,flipRefraction?mat[2].y:1./mat[2].y);\n\t\t\t\tdst = EPS*REFRACTION_SKIP*(1.+rnd.z);\n\t\t\t\tflipRefraction = !flipRefraction;\n\t\t\t} else {\n\t\t\t#endif\n\t\t\t\trd = reflect(rd,surf);\n\t\t\t\tdst = 0.;\n\t\t\t#if HAS_OPACITY\n\t\t\t}\n\t\t\t#endif\n\t\t}\n\t\trp += rd*dst;\n        \n        if (length(rp) > 3.) break;\n\t}\n\t\n\t//background + final lighting\n\tc = min(c,vec3(10.));\n\tc *= l+background(rp,rd);\n    fragColor = (camPos.w>.5?vec4(0):texelFetch(iChannel0,ivec2(fragCoord),0))+vec4(c,1)*1e-2;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}