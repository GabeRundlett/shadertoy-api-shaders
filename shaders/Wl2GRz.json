{
    "Shader": {
        "info": {
            "date": "1558392723",
            "description": "The version from dmmn is quite cartoony, and the one from sickbow is slow and only black and white. This is my attempt to make a fast version closer to the original material.\nChange AA to 1 if it's too slow.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wl2GRz",
            "likes": 33,
            "name": "Jump to lightspeed (Star Wars)",
            "published": 3,
            "tags": [
                "space",
                "starwars",
                "lightspeed"
            ],
            "usePreview": 0,
            "username": "nyri0",
            "viewed": 2154
        },
        "renderpass": [
            {
                "code": "/* Created by Louis Sugy, 2019\n * You can use it under the terms of the MIT license\n * (free to use even in commercial projects, attribution required)\n */\n\n// Change the anti-aliasing to 1 if it's too slow\n#define AA 2\n#define PI 3.14159265\n#define ATAN5 1.37340076695\n\nvec2 cart2polar(vec2 cart) {\n    return vec2(atan(cart.y, cart.x), length(cart));\n}\n\n// From https://www.shadertoy.com/view/4sc3z2\n// and https://www.shadertoy.com/view/XsX3zB\n#define MOD3 vec3(.1031,.11369,.13787)\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat simplexNoise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n    \n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n\tvec3 i1 = e * (1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy * (1.0 - e);\n    \n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n    \n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n    \n    return dot(vec4(31.316), n);\n}\n\n\nfloat linearstep(float low, float high, float val)\n{\n    return clamp((val-low) / (high-low), 0.0, 1.0);\n}\nfloat jumpstep(float low, float high, float val)\n{\n    if(2.0 * val < high + low) {\n        return clamp(atan(10.0 * (val-low) / (high-low) - 5.0) / (2.0 * ATAN5) + 0.5, 0.0, 1.0);\n    }\n    else {\n        return (10.0 * (val-low) / (high-low) - 5.0) / (2.0 * ATAN5) + 0.5;\n    }\n}\n\nvec3 pixelVal(vec2 coord)\n{    \n    // Pixel to point (the center of the screen is (0,0)\n    vec3 resolution = iResolution * float(AA);\n    vec2 uv = (2.0*coord - resolution.xy) / resolution.x;\n    vec2 ad = cart2polar(uv);\n    \n    // Loop forever\n    float time = mod(iTime, 8.0);\n    \n    vec3 bg = vec3(0,0,0.05);\n    vec3 col = bg;\n \n    // Initial step, just roaming in space\n    if(time < 3.5) {\n        float r = ad.y / (1.0+0.042*time);\n    \tfloat noiseVal = simplexNoise(vec3(60.0*ad.x,50.0*r, 0.0));\n        float whiteIntensity = smoothstep(0.7, 1.0, noiseVal)\n                               * (1.0 - smoothstep(2.8,3.5,time));\n        col = mix(col, vec3(1,1,1), whiteIntensity);\n    }\n    // The effect starts\n    if(time >= 2.8 && time < 4.5) {\n        float blueTime = 1.0 - 1.0*smoothstep(2.8, 5.0, time);\n        float whiteTime = 1.0 - 0.6*smoothstep(3.0, 5.0, time);\n        float r = ad.y / (1.0+0.15*linearstep(0.0, 3.5, time))\n                  *(40.0 / (3.0 + 20.0*jumpstep(2.8, 6.0, 0.5*pow(time,1.5))));\n        float noiseVal = simplexNoise(vec3(40.0*ad.x,r, 0.0));\n        col = mix(col, vec3(0.5,0.7,1), smoothstep(2.8, 3.5, time)\n                                        *smoothstep(0.4*blueTime, blueTime, noiseVal));\n        col = mix(col, vec3(1,1,1), smoothstep(2.8, 3.5, time)\n                                    *smoothstep(0.7 * whiteTime, whiteTime, noiseVal));\n        \n        // Dark at the center\n    \tcol = mix(col, bg, smoothstep(2.8, 3.4, time) * (1.0 - ad.y));\n    }\n    // Fade to white\n    if(time > 4.2 && time < 4.5) {\n        col = mix(col, vec3(0.9,0.95,1.0), smoothstep(4.2,4.5, time));\n    }\n    // Fade to black with stars (decelerating)\n    else if(time > 4.5) {\n        float r = ad.y / (1.0 + 2.0/PI*atan(-0.042*(8.0-time))/cos((8.0-time)/2.2));\n    \tfloat noiseVal = simplexNoise(vec3(60.0*ad.x,50.0*r, 0.0));\n        float whiteIntensity = smoothstep(0.7, 1.0, noiseVal);\n        col = mix(col, vec3(1,1,1), whiteIntensity);\n        col = mix(col, vec3(0.9,0.95,1.0), 1.0-smoothstep(4.5,5.0, time));\n    }\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 avgcol = vec3(0.0);\n    \n    for(int i = 0; i < AA; i++)\n        for(int j = 0; j < AA; j++)\n            avgcol += pixelVal(float(AA)*fragCoord + vec2(i, j));\n        \n    avgcol /= float(AA*AA);\n    \n    \n    // Output to screen\n    fragColor = vec4(avgcol, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}