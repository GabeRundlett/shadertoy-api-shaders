{
    "Shader": {
        "info": {
            "date": "1665150190",
            "description": "Drawing spirals using a 3x3 kernel, inspired by Conway's Game of Life",
            "flags": 32,
            "hasliked": 0,
            "id": "stGBWy",
            "likes": 6,
            "name": "Cellular Spirals",
            "published": 3,
            "tags": [
                "spiral",
                "cellular",
                "pattern",
                "cell",
                "buffer",
                "kernel",
                "gameoflife"
            ],
            "usePreview": 0,
            "username": "MysteryPancake",
            "viewed": 207
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Stored as color, segment length, direction (radians), length until rotation\n    vec4 self = texture(iChannel0, fragCoord / iResolution.xy);\n    \n    // Colorize based on length and color\n    fragColor = vec4(self.y * 0.25, self.x, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI_4 = 0.785398163397448309616;\n\nfloat rand(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    if (iFrame < 1) {\n    \n        // Initialize with noise\n        float noise = rand(fragCoord / iResolution.xy);\n        float noise2 = rand(fragCoord / iResolution.xy * 0.5);\n        \n        // Stored as color, segment length, direction (radians), length until rotation\n        fragColor = vec4(noise > 0.997 ? noise2 : 0.0, 0.0, round(noise2 * 8.0) * PI_4, 16.0);\n        \n    } else {\n        \n        // Sample current pixel directly\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        \n        // Sample in a 3 x 3 kernel\n        for (int x = -1; x <= 1; ++x) {\n            for (int y = -1; y <= 1; ++y) {\n            \n                // Ignore self\n                if (x == 0 && y == 0) continue;\n                \n                // Sample neighbour\n                ivec2 pos = ivec2(x, y);\n                vec4 neighbour = texelFetch(iChannel0, ivec2(fragCoord) + pos, 0);\n                \n                // For some reason neighbour.x > 0.0 breaks\n                if (neighbour.x > fragColor.x || fragColor.w > neighbour.w) {\n                    \n                    // Find where each neighbour wants to move next\n                    ivec2 target = ivec2(round(sin(neighbour.z)), round(cos(neighbour.z)));\n                    \n                    // Neighbour wants to move to us, we have to update ourselves\n                    if (pos.x + target.x == 0 && pos.y + target.y == 0) {\n                    \n                        fragColor = neighbour; // Transfer properties from neighbour to us\n                        ++fragColor.y; // Increase segment length\n                        \n                        // Rotate when segment length > length until rotation\n                        if (fragColor.y > fragColor.w) {\n                            fragColor.y = 0.0; // New segment, reset segment length\n                            fragColor.w -= 0.5; // Shrink spiral whenever we rotate\n                            fragColor.z += PI_4; // Rotate 45 degrees (PI/4 radians)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}