{
    "Shader": {
        "info": {
            "date": "1676402545",
            "description": "Trying to make a really simple way to display text on screen.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtjSRc",
            "likes": 5,
            "name": "Easy Text Test",
            "published": 3,
            "tags": [
                "2d",
                "transparency",
                "text",
                "font",
                "scale",
                "print",
                "align",
                "texturedfont"
            ],
            "usePreview": 0,
            "username": "Calgon",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "// Forked from\n// https://www.shadertoy.com/view/XlfyRr\n\n\nint _= 32; \nint _0 = 48;\nint _1 = 49;\nint\t_2 = 50;\nint\t_3 = 51;\nint\t_4 = 52;\nint _5 = 53;\nint _6 = 54;\nint _7 = 55;\nint _8 = 56;\nint _9 = 57;\nconst int A = 65;\nconst int B = 66;\nconst int C = 67;\nconst int D = 68;\nconst int E = 69;\nconst int F = 70;\nconst int G = 71;\nconst int H = 72;\nconst int I = 73;\nconst int J = 74;\nconst int K = 75;\nconst int L = 76;\nconst int M = 77;\nconst int N = 78;\nconst int O = 79;\nconst int P = 80;\nconst int Q = 81;\nconst int R = 82;\nconst int S = 83;\nconst int T = 84;\nconst int U = 85;\nconst int V = 65;\nconst int W = 66;\nconst int X = 67;\nconst int Y = 68;\nconst int Z = 69;\nconst int a = 97;\nconst int b = 98;\nconst int c = 99;\nconst int d = 100;\nconst int e = 101;\nconst int f = 102;\nconst int g = 103;\nconst int h = 104;\nconst int i = 105;\nconst int j = 106;\nconst int k = 107;\nconst int l = 108;\nconst int m = 109;\nconst int n = 110;\nconst int o = 111;\nconst int p = 112;\nconst int q = 113;\nconst int r = 114;\nconst int s = 115;\nconst int t = 116;\nconst int u = 117;\nconst int v = 118;\nconst int w = 119;\nconst int x = 120;\nconst int y = 121;\nconst int z = 122;\n\n/*\nascii table:\nhttp://www.theasciicode.com.ar/american-standard-code-information-interchange/ascii-codes-table.png\n*/\n\n\n\n\n// char size 64*64   16 char per row\nvoid WriteChar(vec2 screenCoord, vec2 pos, float charValue, float fontSize, vec4 fontColor, inout vec4 pixel)\n{\n  if (screenCoord.x >=pos.x && screenCoord.x <=pos.x+fontSize && screenCoord.y >=pos.y && screenCoord.y <=pos.y+fontSize)\n  {\n      // calculate texture grab position of character\n      float col = mod(charValue,16.0);\n      vec2 charPos = vec2(col,(charValue-col)/16.0);\n      charPos *= 64.0;\n      \n      vec2 dist = screenCoord-pos;\n\n//      vec2 steps = (vec2(1.0,-1.0) / iChannelResolution[0].xy);\n      vec2 steps = (vec2(1.0,-1.0) / vec2(1024,1024));\n      vec2 startOffset = charPos *steps;\n      // scale texture uv step by fontSize\n      steps*=(1.0/(fontSize/64.0));\n      dist *=steps;\n      vec4 ccc = texture(iChannel0,startOffset+dist);\n\n      // Check if texture is a part of the character\n      if(ccc.r>0.6)\n      {\n        pixel=mix(pixel,fontColor, fontColor.w);\n      }      \n  }\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float frame = radians(iTime)*120.0;\n    float cosValue = cos(frame);\n    float sinValue = sin(frame);\n    \n    vec2 screenCoord = vec2(fragCoord.x, iResolution.y-fragCoord.y);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 color; \n        \n    // backdrop effect\n    if (mod(screenCoord.x,50.0)+mod(screenCoord.y,50.0) < 50.0)\n    {\n         color = vec4(0.15);\n    }\n    else\n    {\n         color = vec4(0);\n    }\n        \n    // SET TEXT VARIABLES ********************\n    vec2 textPos = vec2(-1150.0+(mod(frame*200.0,2000.0)),40.0+cos(frame+uv.x*5.0)*25.0);\n    float fontSize = 112.0;\n    float charSpacing = fontSize*0.5;\n    vec4 fontColor = vec4(uv.x,uv.x*4.0, 1.0-uv.x,1.0);\n\n    // write text by storing as an array of ascii values (table above)\n    // A SMALL TEST OF\n    int text[15] = int[](A,_,s,m,a,l,l,_,T,E,S,T,_,O,F);\n    \n    for(int iii=0; iii<15; iii++)\n    {\n    WriteChar(screenCoord,textPos+vec2(float(iii)*charSpacing,0.0),float(text[iii]),fontSize, fontColor, color);\n    }  \n    // THE BELOW CODE IS JUST VARIATIONS\n    // ****************************************\n    \n    \n    // CENTER SCALE TEST ******************** \n    textPos = iResolution.xy*0.5;\n    fontSize = 78.0 + (cosValue*32.0);\n    charSpacing = fontSize*0.5;\n    fontColor = vec4(0.5-cosValue*0.5,0.5+cosValue*0.5, uv.x*1.0,1.0);\n    \n    // center text \n    // FONTS &\n    int text2[7] = int[](f,o,n,t,s,_,38);\n    textPos.x -= (7.0*charSpacing)*0.5;\n    textPos.y -= fontSize*0.5;\n    \n    for(int iii=0; iii<7; iii++)\n    {\n    WriteChar(screenCoord,textPos+vec2(float(iii)*charSpacing,0.0),float(text2[iii]),fontSize, fontColor, color);\n    }\n  \n    \n    // NUMBERS AND TRANSPARENCY ******************** \n    textPos = vec2(180.0+cos(frame+uv.x*25.0)*5.0,320.0+sin(frame+uv.x*25.0)*5.0);\n    fontSize = 76.0;\n    charSpacing = fontSize*0.5;\n    fontColor = vec4(uv.x*4.0,2.0-uv.x, 2.0*uv.y,0.2);\n    \n    // # 123456789\n    int text3[12] = int[](35,_,_1,_2,_3,_4,_5,_6,_7,_8,_9,_0);\n    \n    for(int iii=0; iii<12; iii++)\n    {\n    WriteChar(screenCoord,textPos+vec2(float(iii)*charSpacing,0.0),float(text3[iii]),fontSize, fontColor, color);\n    }\n    \n    fragColor = color;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}