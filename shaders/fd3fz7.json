{
    "Shader": {
        "info": {
            "date": "1656546766",
            "description": "Tiny Shader 004 - an isometric view of a menger spong iterations.",
            "flags": 0,
            "hasliked": 0,
            "id": "fd3fz7",
            "likes": 19,
            "name": "Tiny Menger Shader 004",
            "published": 3,
            "tags": [
                "raymarching",
                "fractal",
                "menger"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 313
        },
        "renderpass": [
            {
                "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n   \n    Tiny Menger Shader 004 | an isometric view of a menger spong iterations.\n    06/29/22 | byt3_m3chanic\n\n    Some golfing tricks from @dean_the_coder @Fabrice @iq\n*/\n\n#define T           iTime\n#define PI          3.14159265359\n#define PI2         6.28318530718\n\n#define S smoothstep\n#define L length\n\n#define N(p,e) vec3(map(p-e.xyy),map(p-e.yxy),map(p-e.yyx))\n#define Q(a)      mat2(cos(a+vec4(0,11,33,0)))\n#define H(hs)     .5 + .4* cos( PI2*hs + vec3(4,8.7,1.6) )\n#define lsp(b,e,t) clamp((t-b)/(e-b),0.,1.)\n#define box(p,d) L(max(abs(p)-d,0.))-.025\n\nvec3 hit,hp;\nfloat time,tmod,ga1,ga2,ft;\n\nconst float size =12.;\nconst float hlf =size/2.;\n\nfloat map(vec3 p) {\n\n    p.y+=ga1*size;\n    float id =floor((p.y+hlf)/size);\n    if(ft==id-1.) p.xz*=Q(PI*ga2);\n    p.y=mod(p.y+hlf,size)-hlf;\n\n    float r = 1e5;\n    float scale = 3.;\n \tvec3 cxz = vec3(scale);\n    float ss=.75;\n    hit=p;\n    int iz = int(id)%4 + 1;\n    for (int i = 0;i<iz;i++) {\n        p=abs(p);\n        \n        if (p.x<p.y) p.yx = p.xy;\n        if (p.x<p.z) p.zx = p.xz;\n        if (p.y<p.z) p.zy = p.yz;\n        if(i==iz-2)hit=p;\n\n        p.x=scale * p.x-cxz.x*(scale-1.);\n        p.y=scale * p.y-cxz.y*(scale-1.);\n        p.z=scale * p.z;\n\n        if (p.z>0.5*cxz.z*(scale-1.)) p.z-=cxz.z*(scale-1.);\n        ss /= scale;\n    }\n    \n    r = box(p,scale);\n    return r*ss;\n}\n\nvoid mainImage(out vec4 O, vec2 F)\n{\n    time = T;\n    ft = floor(time*.1);\n    tmod = mod(time, 10.);\n    float t1 = lsp(0.0, 5.0, tmod);\n    float t2 = lsp(5.25, 9.75, tmod);\n    ga1 = (t1)+ft;\n    ga2 = (t2);\n    \n    vec2  R = iResolution.xy,\n         uv = ( F+F - R ) / max(R.x,R.y);\n    vec3 C = vec3(.0),\n         p = vec3(0),\n         c = vec3(0),\n        ro = vec3(uv*10.,-15.),\n        rd = vec3(0,0,1);\n\n    mat2 rx = Q(-.78),\n         ry = Q(-.78);\n\n    ro.yz*=rx; ro.xz*=ry; \n    rd.yz*=rx; rd.xz*=ry;\n\n        float d=0.,fm=0.;\n\n        for(int i=0; i++<100 && d<100.;) {\n            p = ro + rd * d;\n            float x = map(p);\n            d+=x;\n        }\n        \n        hp=hit;\n        float t = map(p);\n        vec2 e = vec2(d*.001,0);\n        vec3 l = normalize(vec3(2,5,-5)-p),\n             n = t - N(p,e);\n             n = normalize(n);\n        vec3 clr = H(floor(hp.z*.25)),\n             fg  = H(abs(uv.x*.75));\n        float diff = clamp(dot(n,l),.1,.9);\n\n        float px = 8./R.x;\n        float f = length(hp.z)-1.;\n        f=S(px,-px,f);\n        clr=mix(clr, H(12.-floor(hp.z*5.25)),f);\n\n        C = d<30. ? diff*clr : fg;\n\n    O = vec4(pow(C,vec3(.4545)),1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}