{
    "Shader": {
        "info": {
            "date": "1673997703",
            "description": "radial",
            "flags": 0,
            "hasliked": 0,
            "id": "dlSGWc",
            "likes": 2,
            "name": "radial neighbors",
            "published": 3,
            "tags": [
                "radial"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 164
        },
        "renderpass": [
            {
                "code": "float f_n_rand(float n){\n    n = fract(n * .1031);\n    n *= n + 33.33;\n    n *= n + n;\n    return fract(n);\n}\nvec2 f_o_idx(vec2 o_trn, vec2 o_scl){\n    //calculate an index based on a o_trn translation and o_scl scale\n    float n_idx_flr = floor(o_trn.x)\n        + floor(o_trn.y) * floor(o_scl.x);\n    return vec2(\n        n_idx_flr, \n        n_idx_flr / (floor(o_scl.x)*floor(o_scl.y))\n    );\n}\nfloat f_n_radial(vec2 o_fc_nor_off, float n_its, float n_it){\n    float n_rand = f_n_rand(n_it);//*sin(iTime)*0.01;\n    float n_tau = 6.2831;\n    float n_one_it_nor = 1./n_its;\n    float n_it_nor = n_it/ n_its;\n    float n_dcntr = length(o_fc_nor_off);\n    float n_ang_off = sin(n_dcntr*12.+iTime*4.)*n_one_it_nor*n_rand*5.;\n\n    vec2 o = vec2(\n        cos((n_it_nor+n_one_it_nor*0.5+n_ang_off) * n_tau) * n_dcntr,\n        sin((n_it_nor+n_one_it_nor*0.5+n_ang_off) * n_tau) * n_dcntr\n    );\n    \n    float n_len = length(o_fc_nor_off - o);\n    float n_thick = sin(n_dcntr*n_tau*10.+iTime)*(n_dcntr)*0.1;\n    float n_aa = (1./ iResolution.x)*200.;\n    float n_circumfence_one = (n_tau * iResolution.x);\n    float n_circumfence_cur = n_circumfence_one * n_dcntr;\n    float n_circumfence_cur_nor = n_circumfence_cur/n_circumfence_one;\n    float n_len_nor = n_len / (1./n_dcntr);\n    n_len_nor = n_len / 0.1;\n    \n    //n_len_nor *= sin(n_dcntr*10.+iTime+n_it_nor*2.);\n    //n_len = pow(n_len, 1./3.);\n    //n_len = 1.-n_len;\n    //n_len_nor = pow(n_len, 1./floor(n_rand*10.));//((sin(n_dcntr*10.+iTime)*0.5+0.5)*4.));\n    //n_len_nor = smoothstep(n_thick, n_thick+n_aa, n_len);\n    \n    return n_len_nor;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float n_dscl = 1.;// dscl down scale\n    vec2 o_lires = iResolution.xy * n_dscl;// lres low resolution\n    vec2 o_lfc = fragCoord.xy * n_dscl;\n    float n_t = iTime*0.5; \n    \n\n    float n_ratio_1to_iresx = 1./ o_lires.x;\n\n    vec2 o_lfc_nor = floor(o_lfc) / o_lires; // low frag coord normalized\n    vec2 o_lfc_nor_off = (floor(o_lfc)-0.5*o_lires.xy)/ o_lires.y;\n    vec2 o_fc_nor = fragCoord.xy / iResolution.xy;\n    vec2 o_fc_nor_off = (fragCoord.xy-0.5*iResolution.xy) / iResolution.y;\n    vec2 o_mo_nor_off = (iMouse.xy-0.5*iResolution.xy) / iResolution.y;\n    \n    o_fc_nor_off *= 2.;\n    float n_its = 50.;\n    float n_tau = 6.283185;\n    \n    float n_ang_nor = fract(atan(o_fc_nor_off.y, o_fc_nor_off.x)/n_tau);\n\n    float n_dcntr = length(o_fc_nor_off);\n\n    float n_one_it_nor = 1./n_its;\n    float n_it = floor(n_ang_nor/n_one_it_nor);\n    float n_it_nor = n_it / n_its;\n    float n_nei = floor((1.-n_dcntr)*n_its);\n    float n_len_min = 1.;\n    float n_it_min = 0.;\n\n    for(float n = 0.; n < n_nei ; n+=1.){\n        float n_pm = n - floor(n_nei/2.);\n        float n_it_new = mod(n_it+n_pm, n_its);\n        float n_len = f_n_radial(o_fc_nor_off, n_its, n_it_new);\n        if(n_len < n_len_min){\n            n_len_min = n_len;\n            n_it_min = n_it_new;\n        }\n    }\n\n    if(iMouse.z == 0.){\n        o_mo_nor_off = vec2(sin(n_t), cos(n_t)*0.5+0.5);\n    }\n    float n_rand = f_n_rand(n_it_min);\n    float n_rand1 = f_n_rand(n_rand);\n    float n_rand2 = f_n_rand(n_rand1);\n    //n_len = sin(n_len*0.5 * n_tau);\n    fragColor = vec4(n_len_min);\n    if(o_fc_nor_off.x > o_mo_nor_off.x){\n        fragColor = (1.-fragColor)*vec4(\n            n_rand,\n            n_rand1 ,//* (n_it_min / n_its),\n            n_rand2 ,//* (n_it_min / n_its),\n            1.\n        );\n    }\n    \n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}