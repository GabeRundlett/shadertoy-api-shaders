{
    "Shader": {
        "info": {
            "date": "1573342518",
            "description": "rfr",
            "flags": 4,
            "hasliked": 0,
            "id": "WddXDl",
            "likes": 6,
            "name": "music shader 1",
            "published": 3,
            "tags": [
                "music"
            ],
            "usePreview": 0,
            "username": "ArthurSango",
            "viewed": 465
        },
        "renderpass": [
            {
                "code": "float random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nmat2 rot(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\nmat2 fuck(float _angle){\n    return mat2(acos(_angle),-sin(_angle),\n                -sin(_angle),tan(_angle));\n}\n#define time iTime\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n  \n   \n     \n   \n    uv = abs( 2. * uv - 1. );\n    \n    // uv *= rot(   time / 10.);\n      uv *= rot( fbm(uv) * time / 10.);\n    \n   //  uv *= rot(   uv.x * 3.14);\n   \n    vec3 col = vec3( 0.);\n   \n    vec4 t = texture( iChannel0, uv);\n   \n   \n    float m = t.x + fbm(uv);\n   // m = t.x + 0.3;\n    uv *= fuck(m);\n    float r = m * 6.28;\n    \n    float c = ( sin(iTime) + 1. ) * m; \n    \n    \n    uv = fract( m * 10. * uv);\n    \n    float dist = distance( uv, vec2(0.5 * m ) );\n    \n    \n  //  col = l.xyz;\n  \n    // uv *= mat2( cos(r), sin(r), -sin(r), cos(r) );\n    \n    col.x += uv.x;\n    col.z = dist ;\n    col.y = dot( vec2(c), uv);\n    \n   \n   \n   // col.z += abs(sin(r));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}