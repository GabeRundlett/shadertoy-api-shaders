{
    "Shader": {
        "info": {
            "date": "1622918396",
            "description": "just a doodle",
            "flags": 0,
            "hasliked": 0,
            "id": "NtX3zl",
            "likes": 5,
            "name": "Line Fractal",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "zoom",
                "infinite"
            ],
            "usePreview": 0,
            "username": "scry",
            "viewed": 303
        },
        "renderpass": [
            {
                "code": "#define iTime iTime*0.5\n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nfloat line(vec2 uvu, float l, float w) {\n    return smoothstep(w, 0.,abs(uvu.x-0.5)-0.005)*smoothstep(0.001,0.,abs(uvu.y-0.5)-l);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    uv -= 0.5;\n    uv.x *= ar;\n    uv += 0.5;\n    //\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    //col.r += smoothstep(0.01,0.,abs(uv.x-0.5));\n    //col.r *= smoothstep(0.01,0.,abs(uv.y-0.5)-0.4);\n    uv -= 0.5;\n    float c = length(uv);\n    float cc = c;\n    //uv.y -= 0.5;\n    //uv = abs(uv)-(sin(iTime*0.5)*0.5+0.5)*0.5;\n    //uv = abs(uv);\n    //uv = fract(uv);\n    //uv.x += 0.5;\n    //c = fract(c);\n    //uv.x += iTime;\n    uv = vec2(log(c),atan(uv.x,uv.y));\n    //uv.x *= 0.1;\n    //uv.x *= 0.5;\n    //uv.x /= c;\n    uv.x -= sin(c+iTime*0.25);\n    //uv.x -= sin(uv.y*4.+iTime);\n    uv.x *= 0.5;\n    //uv.x *= 2.;\n    uv.x -= iTime;\n    //uv.x *= 0.5;\n    uv.x += 1.;\n    //uv = abs(uv)-0.5;\n    //uv *= r2d(iTime*0.1);\n    //uv.x  = abs(uv.x);\n    //uv.y *= 4./3.14;\n    float vt = uv.x;\n    //vt = c*20.;\n    //float sy = float(int(fract(uv.x*0.05)*4.+0.9));\n    float sy = floor(fract(uv.x*0.05)*4.+0.9);\n    //uv.x -= sin(uv.y+iTime)*0.2;\n    //sy = floor(fract(uv.x)*4.);\n    //uv.x /= 8.-sy;\n    //uv.x *= .0000001;\n    //uv *= 0.25;\n    uv.y *= sy/3.14;\n    vt += iTime*0.025;\n    float ux = uv.x;\n    //vt += iTime+uv.y*0.1;\n    //uv.y *= 4./3.14;\n   // vt *= c*0.001;\n    //uv.x -= iTime;\n    //float vt = uv.x;\n    uv = fract(uv)-0.5;\n    c = length(uv);\n    //uv = vec2(log(c),atan(uv.x,uv.y))*0.1;\n    //uv.x += iTime;\n    //uv.y *= 2.;\n    //uv.x += 1.5;\n    //uv.x += 0.5;\n    int steps = 8;\n    //float c = length(uv);\n    //uv -= 0.5;\n    //uv = abs(uv+0.5)-0.5;\n    //uv += 0.5;\n    int s2 = 6;\n    s2 = int(mod(ux*1.,18.));\n    for (int i=0;i<s2;i++) {\n        uv = abs(uv)-(sin(vt*0.5)*0.5+0.5)*0.5;\n        uv *= r2d(float(i)+vt);\n    }\n    //uv -= 0.5;\n    //uv += 0.5;\n    //float c = length(uv);\n    uv *= r2d(sin(c*8.*sin(vt*0.5)+vt*0.5));\n    for (int i=0;i<steps;i++) {\n        uv *= r2d(-vt*0.1);\n        col.r += line(uv+0.5,0.4,(sin(uv.x*04.91)*0.5+0.5)*0.01)*21.;\n    }\n    \n    //col.r -= 4.5;\n    //col.r = fract(col.r*0.01+iTime*0.1);\n    //col.r *= 0.01;\n    //col.r = sin(col.r+iTime*0.1);\n    col.bg = col.rr;\n    col.r *= 0.05;\n    col.r += ux*0.2;\n    //col.r -= iTime*4.;\n    col = vec3(sin(col.r),cos(col.r+0.2),cos(-col.r))*0.8;\n    //col = sin(col+uv.x);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}