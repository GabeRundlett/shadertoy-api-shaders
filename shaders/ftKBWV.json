{
    "Shader": {
        "info": {
            "date": "1665266647",
            "description": "Good now",
            "flags": 32,
            "hasliked": 0,
            "id": "ftKBWV",
            "likes": 2,
            "name": "Good matrix rain",
            "published": 3,
            "tags": [
                "rain",
                "wallpaper"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 363
        },
        "renderpass": [
            {
                "code": "vec4 bokeh(sampler2D tex, vec2 p, float radius, float ratio, float gamma, float samples)\n{\n    vec4 acc = vec4(0);\n    float m = 1./sqrt(samples);\n    for(float i = 0.; i < samples; i++)\n    {\n        vec2 th = vec2(2.399*i, sqrt(i)*m);\n        th = vec2(cos(th.x)*ratio, sin(th.x))*th.y*radius;\n        acc += pow(texture(tex, p+th), vec4(gamma));\n    }\n    return pow(acc/samples, 1./vec4(gamma));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = vec4(bokeh(iChannel0, uv, max(0.0, length(uv-0.5)-DEADZONE)*BLUR, 1., 3., 16.).rgb, 1.0);\n    //fragColor = texture(iChannel1, uv)+0.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "ivec2[] chars = ivec2[](\n                ivec2(1, 11),\n                ivec2(2, 11),\n                ivec2(3, 11),\n                ivec2(4, 11),\n                ivec2(5, 11),\n                ivec2(6, 11),\n                ivec2(0, 12),\n                ivec2(1, 12),\n                ivec2(2, 12),\n                ivec2(3, 12),\n                ivec2(4, 12),\n                ivec2(5, 12),\n                ivec2(6, 12),\n                ivec2(7, 12),\n                ivec2(8, 12),\n                ivec2(9, 12)\n                );\n\n\nvec4 getChar(ivec2 pos, vec2 uv)\n{\n    return texture(iChannel0, (vec2(pos)+uv)*0.0625);\n}\n\nvec4 getRandomChar(vec2 seed, vec2 uv)\n{\n    int index = int(hash21(seed)*float(chars.length()));\n    return getChar(chars[index], uv);\n}\n\nfloat getCol(vec2 uv, float time, float px, float activated)\n{\n    float col = 1.0-smoothstep(0.0, px, getRandomChar(hash22(floor(uv)), fract(uv)).w - 0.5);\n    col = floor(uv.y) <= activated? 0.0 : col-pow(min(1.0, (max(0., (floor(uv.y)-activated))-1.0)/TRAIL), 1./FALLOFF);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = (uv.x-0.5)*iResolution.x/iResolution.y+0.5;\n    uv *= COUNT;\n    float px = 1.777/iResolution.y*COUNT;\n    float margin = 1.0 + TRAIL/COUNT;\n    float activated = floor(COUNT-fract(\n                            (COUNT-(floor(hash21(floor(uv.xx))*COUNT*2.0)/COUNT-iTime*SPEED))/margin\n                            )*margin*COUNT);\n    \n    float col = 0.0;\n    \n    col = getCol(uv, iTime, px, activated);\n    \n    fragColor = vec4(vec3(clamp(col, 0., 1.)), 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define COUNT 50.0\n#define SPEED 0.3\n#define TRAIL 20.0\n#define FALLOFF 2.0\n#define DISTORTION 0.5\n\n#define BLUR 0.007\n#define DEADZONE 0.2\n\nfloat hash21(in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\nvec2 hash22(vec2 p)\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 uvDistort(in vec2 uv, float str, float aspect)\n{\n    uv -= 0.5;\n    uv.y *= aspect;\n    \n    uv *= str;\n    uv += atan(uv)*length(uv)/str;\n    uv.y /= aspect;\n    uv += 0.5;\n    \n    if(hash21(floor(uv*100.0)) < 0.5)\n        uv += (hash22(floor(uv*100.0)) - 0.5)*0.002;\n    \n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float px = 1.777/iResolution.y;\n    uv = mix(uv, uvDistort(uv, 0.8, iResolution.y/iResolution.x), DISTORTION);\n    fragColor = texture(iChannel0, uv)*vec4(0.172549019608, 0.878431372549, 0.0, 1.0);\n    //fragColor = texture(iChannel1, uv);\n    fragColor *= smoothstep(px, 0.0, length(clamp(uv, vec2(0.0), vec2(1.0)) - uv));\n    fragColor *= smoothstep(-1., 1., sin(uv.y*500.0 + iTime * 20.)) * 0.3 + 0.7;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}