{
    "Shader": {
        "info": {
            "date": "1724614517",
            "description": "it works now :D (thanks spalmer!)",
            "flags": 0,
            "hasliked": 0,
            "id": "4cfBzn",
            "likes": 1,
            "name": "xo raymarching 2",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "x_540",
            "viewed": 72
        },
        "renderpass": [
            {
                "code": "const int mainSdfLength = 2;\n\nvec4 add(vec4 a, vec4 b) {\n    return(vec4(a.xyz,min(a.w,b.w)));\n}\n//c - capped (for usually infinite shapes), h - hollow\nfloat CcylSdf( vec3 pos, vec3 cylPos, float h, float r ) {\n    vec2 d = abs(vec2(length(pos.xz - cylPos.xz),pos.y - cylPos.y)) - vec2(r,h);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat HCcylSdf( vec3 pos, vec3 cylPos, float h, float r, float ww ) {\n    vec2 d = vec2(abs(length(pos.xz - cylPos.xz) - (r - ww/2.0)) - ww/2.0 ,abs(pos.y - cylPos.y) - h);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec4[mainSdfLength] mainSdf(vec3 pos) {\n    vec4 col[mainSdfLength];\n    //sdf(s)\n    //format: r - red, g - green, b - blue, a - distance\n    col[0] = vec4(0.9,0.0,0.9,HCcylSdf(pos.xyz, vec3(0.0,2.0,7.0), 3.0, 1.0, 0.2));\n    col[1] = vec4(0.9,0.9,0.9,pos.y+2.0);\n    return col;\n}\n\nvec4 getMinW(vec4[mainSdfLength] array) {\n    //get vec4 with the smallest w\n    vec4 minDist = vec4(0.0,0.0,0.0,900000.0);\n\n    for(int i = 0; i < array.length(); i++) {\n        if (minDist.w > array[i].w) {\n            minDist = array[i];\n        }\n    }\n    \n    return(minDist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float fov = 2.094395;\n    vec3 origin = vec3(0.0);\n    //make sure to adjust infinity to whatever works best!\n    const float epsilon = 0.01;\n    const float infinity = 7.0;\n    //more = higher quality image, but worse performence\n    const int maxBounces = 50;\n    const int maxItters = 10000;\n    //debug stuff, sometimes can produce cool results\n    int debugMode = 0;\n    \n    vec2 angle = (fragCoord/iResolution.xy - 0.5) * vec2(fov,fov * iResolution.y/iResolution.x);\n    vec3 dir = vec3(sin(angle.x) * cos(angle.y),sin(angle.y),cos(angle.x)*cos(angle.y));\n    vec3 col = vec3(1.0);\n    \n    \n    int itter;\n    \n    \n    for(int bounce = 0; bounce < maxBounces + 1; bounce++) {\n        float dist;\n        \n        if(bounce == 0) {\n            dist = 0.0;\n        } else {\n            dist = 2.0 * epsilon;\n        }\n        bool hit = false;\n        \n        for(itter = 0; itter < maxItters; itter++) {\n            vec4[mainSdfLength] distances = mainSdf(dir * dist + origin);\n\n            vec4 minDist = getMinW(distances);\n            dist += minDist.w;\n            \n            if(minDist.w >= infinity) {\n                col *= vec3(0.8,0.9,0.9);\n                \n                break;\n            }\n\n            if(minDist.w <= epsilon) {\n                col *= minDist.xyz;\n                hit = true;\n                break;\n            } \n        }\n        \n        if(!hit) {\n            break;\n        }\n        \n        origin = (dir * dist) + origin;\n        \n        vec3 normal = normalize(vec3(\n        getMinW(mainSdf(origin + vec3(epsilon,0.0,0.0))).w - getMinW(mainSdf(origin - vec3(epsilon,0.0,0.0))).w,\n        getMinW(mainSdf(origin + vec3(0.0,epsilon,0.0))).w - getMinW(mainSdf(origin - vec3(0.0,epsilon,0.0))).w,\n        getMinW(mainSdf(origin + vec3(0.0,0.0,epsilon))).w - getMinW(mainSdf(origin - vec3(0.0,0.0,epsilon))).w));\n        \n        dir = reflect(dir,normal);\n        \n        if(debugMode == 1) {\n            col = normal/2.0+vec3(0.5);\n            break;\n        }\n        if(debugMode == 2) {\n            col = dir/2.0+vec3(0.5);\n            break;\n        }\n    }\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}