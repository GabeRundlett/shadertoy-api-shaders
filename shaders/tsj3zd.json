{
    "Shader": {
        "info": {
            "date": "1550056719",
            "description": "no dave",
            "flags": 0,
            "hasliked": 0,
            "id": "tsj3zd",
            "likes": 1,
            "name": "Toxic Banned",
            "published": 3,
            "tags": [
                "nodave"
            ],
            "usePreview": 0,
            "username": "beefburrito",
            "viewed": 343
        },
        "renderpass": [
            {
                "code": "#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265\n#define TWO_PI 6.283185\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\nfloat random(in float x) {\n    return fract(sin(x)*43758.54);\n}\n\nfloat random(in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,12.9898))));\n}\n\nfloat grid(vec2 st, float res) {\n    vec2 grid = fract(st*res);\n    return 1.-(step(res,grid.x) * step(res,grid.y));\n}\n\nfloat box(in vec2 st, in vec2 size) {\n    size = vec2(0.5) - size*0.5;\n    vec2 uv = smoothstep(size,size+vec2(0.001),st);\n    uv *= smoothstep(size, size + vec2(0.001), vec2(1.0) - st);\n    return uv.x*uv.y;\n}\n\nfloat cross1(in vec2 st, vec2 size) {\n    return clamp(box(st,vec2(size.x*0.5,size.y*0.125)) + \n                 box(st, vec2(size.y*0.125,size.x*0.5)),0.,1.);\n}\n\nfloat polygon( vec2 uv, vec2 pos, float size, float blur, int sides) {\n    uv = uv - pos;\n    float angle = atan(uv.x,uv.y)+PI+.79;\n    float rad = TWO_PI/float(sides);\n    float dist = cos(floor(0.5+angle/rad)*rad-angle)*length(uv);\n    float poly = smoothstep(size, size-blur, dist);\n    return poly;\n}\n\nmat2 scale(vec2 _scale) {\n    return mat2(_scale.x,0.,0.,_scale.y);\n}\n\nvec2 translation(vec2 _t) {\n    mat3 m = mat3(\n        1.,0.,0.,\n        0.,1.,0.,\n        _t.x,_t.y,0.\n        );\n    return vec2(_t.x,_t.y);\n}\n\n\n\nvec4 moveShape(vec4 try,vec2 uv) {\n    uv -= translation(vec2(.1));\n    float x = uv.x;\n    float y = uv.y;\n    \n    uv -= translation(vec2(-.2));\n    \n    \n    uv = scale(vec2(3.))*uv;\n    uv += translation(vec2(.2));\n    float rectangle = polygon(uv, vec2(.933,.93),0.1,0.001,4);\n    float circle = polygon(uv, vec2(0.1,.1),.02,.000001,20);\n    vec3 giveColor = vec3(.0,1.,0.)* rectangle;\n    giveColor -= vec3(1.,0.,.4) * circle;\n    try = vec4(giveColor,1.);\n    \n    return try;\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    float x = uv.x;\n    vec3 color = vec3(0.);\n    \n    vec2 grid_st = uv*300.;\n    color += vec3(0.5,0.,0.)*grid(grid_st,0.01);\n    color += vec3(0.1,0.,0.)*grid(grid_st,.017);\n    color += vec3(.2)*grid(grid_st,.07);\n    \n    vec2 crosses_st = uv + .5;\n    crosses_st *= 3.;\n    vec2 crosses_st_f = fract(crosses_st);\n    color *= 1.-cross1(crosses_st_f,vec2(.3,.3));\n    color += vec3(.9)*cross1(crosses_st_f,vec2(.2,.2));\n    \n    vec2 blocks_st = floor(uv*6.);\n    float t = u_time*.8+random(blocks_st);\n    float time_i = floor(t);\n    float time_f = fract(t);\n    color.rgb += step(.9,random(blocks_st+time_i))*(1.-time_f);\n    \n    fragColor = vec4(color,1.);\n    fragColor += moveShape(fragColor,uv);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}