{
    "Shader": {
        "info": {
            "date": "1588690590",
            "description": "Basic 2D FBM example in reply to [url=https://www.facebook.com/groups/IndieGameDevs/permalink/10156876829611573/]this Facebook post[/url].\nUse the mouse to zoom & pan.",
            "flags": 0,
            "hasliked": 0,
            "id": "3dXfRX",
            "likes": 3,
            "name": "2D FBM example",
            "published": 3,
            "tags": [
                "fbm"
            ],
            "usePreview": 0,
            "username": "Nrx",
            "viewed": 463
        },
        "renderpass": [
            {
                "code": "// This is a very basic 2D FBM example in reply to this Facebook post:\n// https://www.facebook.com/groups/IndieGameDevs/permalink/10156876829611573/\n// Comment out line 26 to get a triangular look.\n\n#define SPEED\t\t0.2\n#define SCALE\t\t3.0\n#define WIDTH\t\t0.005\n#define DX\t\t\t0.001\n#define STAR_SIZE\t0.005\n\n// PRNG (1D)\nfloat rand (in float seed) {\n\treturn fract (sin (seed * 12.9898) * 137.5453);\n}\n\n// PRNG (2D)\nfloat rand (in vec2 seed) {\n\tseed = fract (seed * vec2 (5.3983, 5.4427));\n\tseed += dot (seed.yx, seed.xy + vec2 (21.5351, 14.3137));\n\treturn fract (seed.x * seed.y * 95.4337);\n}\n\n// Noise\nfloat noise (in float p) {\n\tfloat f = fract (p);\n//\tf = f * f * (3.0 - 2.0 * f); // Comment this to get a triangular look.\n\tp = floor (p);\n\treturn mix (rand (p), rand (p + 1.0), f);\n}\n\n// FBM\nfloat fbm (in float p) {\n\tp *= SCALE;\n\treturn (noise (p) + noise (p * 2.0) / 2.0 + noise (p * 4.0) / 4.0) / (1.0 + 1.0 / 2.0 + 1.0 / 4.0);\n}\n\n// Main\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n\t// Define the local coordinates\n\tvec2 uv = fragCoord / iResolution.y;\n\tuv.x -= iMouse.x / iResolution.y;\n\tuv *= 1.0 + iMouse.y / iResolution.y;\n\tuv.x += iTime * SPEED;\n\n\t// Call the FBM function to define the profile of the mountain\n\tfloat y = fbm (uv.x);\n\n\t// Compute the distance of the fragment to the mountain, to draw a nice line\n#ifdef DX\n\tfloat dy = (fbm (uv.x + DX) - fbm (uv.x - DX)) / (2.0 * DX);\n#else\n\tfloat dy = dFdx (y) / dFdx (uv.x);\n#endif\n\tfloat dist = abs (uv.y - y) / sqrt (1.0 + dy * dy);\n\tfloat mountain = smoothstep (WIDTH * 1.1, WIDTH, dist);\n\n\t// Add some (blocky) stars above the mountain\n\tfloat star = step (0.995, rand (floor (uv / STAR_SIZE)));\n\tstar *= step (y, uv.y) * step (WIDTH, dist);\n\n\t// Final color\n\tfragColor = vec4 (mountain + star, star, star, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}