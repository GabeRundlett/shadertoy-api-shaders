{
    "Shader": {
        "info": {
            "date": "1522771533",
            "description": "shadertoy-adapted code for the barcode scene from my 16k intro \"No 64k, Just 16k\" released at Revision 2018.\nhttp://www.pouet.net/prod.php?which=75756\n\nI know the code could be better - it was mostly hacked together the week before the party :)",
            "flags": 32,
            "hasliked": 0,
            "id": "ldyyzc",
            "likes": 21,
            "name": "Barcode from \"No 64k Just 16k\"",
            "published": 3,
            "tags": [
                "revision"
            ],
            "usePreview": 1,
            "username": "yx",
            "viewed": 1124
        },
        "renderpass": [
            {
                "code": "#define R iResolution\n#define iAspect (R.x/R.y)\n\nvoid mainImage(out vec4 fragColor, in vec2 f)\n{\n\tvec2 uv = f.xy/R.xy;\n\tfragColor = texture(iChannel1, uv);\n\n\tuv -= .5;\n\n\tfloat cinematicAspect = 2.35;\n\tfragColor = (fragColor*.9+.05)+texture(iChannel0,f.xy/256.)*.004;\n\n\tif (abs(uv.y)>.5*(iAspect/cinematicAspect))\n\t\tfragColor*=0.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// tTime was supplied by my C code and is the music tick timer\n#define tTime (1536.+iTime*12.)\n#define nTime ((tTime-1536.)/512.)\n#define R iResolution\n\nvec2 rotate(vec2 p,float a){return cos(a)*p+sin(a)*vec2(-p.y,p.x);}\n\n// yucky hacks to do the beat sync\nint particlesAtTime(float time){\n\tint offset = int(floor(time/32.))*6;\n\ttime = mod(time,32.);\n\tif(time<6.)return 1+offset;\n\tif(time<12.)return 2+offset;\n\tif(time<18.)return 3+offset;\n\tif(time<24.)return 4+offset;\n\tif(time<28.)return 5+offset;\n\tif(time<32.)return 6+offset;\n}\n\nvoid light(int index, out vec4 lpos, out vec3 lcol){\n\tint i = index;\n\n   \t// fun fact:\n    // the vertical beams use the same positions as the bokeh dots\n    // from the start of the demo, just stretched vertically :)\n    \n\tvec4 smpl = texture(iChannel0,vec2(i,float(i)*.1)/256.);\n\tvec3 ppos = smpl.xyz*30.-15.;\n\n    // in the original, this just does a max(0,time) because it's not intended to last very long\n\tppos*=mix(.5,.8,clamp((nTime-.5)/.5,0.,1.));\n\n\tppos.xz=rotate(ppos.xz,iTime);\n\tppos.z+=10.;\n\tppos.xy*=1.5;\n\n\tvec3 cpos = vec3(0,0,0);\n\tfloat focalDistance = 8.;\n\tfloat aperture = mix(.0,.1,clamp((nTime-.25)/.5,0.,1.));\n\tfloat t=ppos.z-cpos.z;\n\tfloat coc=abs(focalDistance-t)*aperture+.05;\n\tfloat a=.03/(coc*coc);\n\ta=min(1.,a);\n\n\tcoc *= .1;\n\tppos *= .3;\n\tppos.xy=rotate(ppos.xy,iTime*.1);\n    // lpos is structured as (minx, maxx, maxy, miny)\n    // for the light rect bounds on the wall plane\n\tlpos = vec4(ppos.x-coc,ppos.x+coc,1000,0);\n\tlcol = vec3(a);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 f)\n{   \n\tfloat occluderZ = -1.;\n\n\tint numParticles = particlesAtTime(tTime-1536.);\n\n\tfloat pi=acos(-1.);\n\tvec2 uv=f/R.xy-.5;\n\tuv.x*=R.x/R.y;\n\tfloat time=iTime*.1;\n\tvec3 cam=vec3(sin(time)*4.,.7,-5)*.5;\n\tvec3 dir=normalize(vec3(uv*.5,1));\n\tdir.xz=rotate(dir.xz,sin(time)*.6);\n\n\n\tcam=vec3(0,1,(-2.*2.35)/(iResolution.x/iResolution.y));\n\tdir=normalize(vec3(uv,1));\n\tif(tTime >= 1536.+128.){\n\t\tcam.z *= mix(1.,2.,smoothstep(0.,1.,(tTime-1536.-128.)/128.));\n\t}\n\n\tfloat tw=-cam.z/dir.z;\n\tfloat tf=-cam.y/dir.y;\n\tvec3 col1=vec3(1);\n\n\t// silhouette\n\tvec2 occluderHit = (cam+dir*(occluderZ-cam.z)/dir.z).xy;\n\tvec2 occluderUv = (occluderHit*4.+vec2(.2,0.))/vec2(.4,1.2);\n\tif(occluderUv.x>.0&&occluderUv.x<1.&&occluderUv.y<1.&&occluderUv.y>.0){\n        // adapted into a black rect for shadertoy,\n        // since I can't use the silhouette texture here \n        if(true){//texture2D(t4,occluderUv).r>.0){\n            fragColor = vec4(0,0,0,1);\n            return;\n        }\n    }\n\n\tvec3 color=vec3(0);\n    \n    // if we hit the floor, solve for the lighting\n\tif((tf<tw||tw<.0)&&tf>.0)\n    {\n\t\tvec3 hit=cam+dir*tf;\n\t\tfor(int i=0;i<64;++i){\n            if(i>=numParticles)continue;\n\t\t\tvec4 l1;\n\t\t\tvec3 col1;\n\t\t\tlight(i,l1,col1);\n\n\t\t\t// if the pixel is behind the occluder,\n            // do some ray tests to establish how occluded we are\n\t\t\tif(hit.z < occluderZ){\n\t\t\t\tfloat hx = mix(l1.x,hit.x,occluderZ/hit.z)*4.;\n\t\t\t\tfloat scalar = 1.;\n\t\t\t\tif(abs(hx)<.2){\n\t\t\t\t\tfor(float wy = 0.; wy < 100.; wy += 10.)\n\t\t\t\t\t{\n\t\t\t\t\t\tfloat hy = mix(wy,0.,occluderZ/hit.z)*4.;\n\t\t\t\t\t\tvec2 girlUv = vec2((hx+.2),hy)/.4;\n                        // adapted into a black rect for shadertoy,\n    \t\t\t\t\t// since I can't use the silhouette texture here \n\t\t\t\t\t\tscalar -= .2 * 1.;//texture2D(t4,girlUv).r;\n\t\t\t\t\t}\n\t\t\t\t\tcol1 *= scalar;\n\t\t\t\t}\n\t\t\t}\n\n            // the magical pseudo-correct analytical lighting \n\t\t\tvec4 i1=atan(hit.zzzz,vec4(hit.xxyy-l1.xyzw));\n\t\t\tfloat w1=max(0.,((i1.x-i1.y)*(i1.w-i1.z)));\n\t\t\tcolor+=w1*col1;\n\t\t}\n        // fudge factor\n\t\tcolor/=pi*pi*.75;\n\t}\n    // otherwise we hit the wall, solve for the beams \n    else if(tw>.0)\n    {\n\t\tvec3 hit=cam+dir*tw;\n\t\tfor(int i=0;i<64;++i){\n            if(i>=numParticles)continue;\n\t\t\tvec4 l1;\n\t\t\tvec3 col1;\n\t\t\tlight(i,l1,col1);\n\t\t\tvec2 mid=(l1.xz+l1.yw)*.5;\n\t\t\tvec2 rad=(l1.yz-l1.xw)*.5;\n\t\t\tvec2 a=(rad-abs(hit.xy-mid))*R.y*.25+.5;\n\t\t\tcolor+=clamp(min(a.x,a.y),0.,1.)*col1;\n\t\t}\n\t}\n\n\tfragColor=vec4(color,1)+texture(iChannel0,f/256.)*.004;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}