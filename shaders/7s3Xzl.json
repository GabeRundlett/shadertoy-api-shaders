{
    "Shader": {
        "info": {
            "date": "1633703936",
            "description": "Inspired by the cover of the \"Atlas\" album by FM-84",
            "flags": 0,
            "hasliked": 0,
            "id": "7s3Xzl",
            "likes": 5,
            "name": "Atlas â€“ FM-84",
            "published": 3,
            "tags": [
                "sunset"
            ],
            "usePreview": 0,
            "username": "raphaelameaume",
            "viewed": 641
        },
        "renderpass": [
            {
                "code": "float aastep(float threshold, float value) {\n    float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\n}\n\nfloat circle(vec2 st, float radius) {\n    return aastep(radius, length(st - vec2(0.5)));\n}\n\nfloat mapRange(float value, float low1, float high1, float low2, float high2) {\n    return low2 + (value - low1) * (high2 - low2) / (high1 - low1);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nconst float sunRadius = 0.35;\nconst float sunLightRadius = sunRadius * 0.95;\nconst float sunLightSpread = 0.15;\n\nconst float seaLimit = 0.2;\nconst float seaSpread = 0.1;\nconst float seaRadius = 0.3;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 circleUv = vec2(\n        uv.x * iResolution.x / iResolution.y - ((iResolution.x - iResolution.y) * 0.5) / iResolution.y,\n        uv.y\n    );\n\n    \n    vec3 backgroundColor = vec3(0.172, 0.129, 0.254);\n    vec3 color = backgroundColor;\n    \n    // stars\n    float stars = 1. - clamp(rand(uv) * 1000., 0., 1.);\n    stars = mix(0., stars, 1. - step(uv.y, seaLimit));\n    color = mix(color, vec3(0.631, 0.603, 0.745), stars);\n    \n    // sun\n    float sunLight = 1. - smoothstep(sunLightRadius - sunLightSpread, sunLightRadius + sunLightSpread, length(circleUv - vec2(0.5)));\n    color = mix(color, vec3(1., 0.145, 0.729), sunLight * 0.9);\n    vec3 sunColor = mix(vec3(0.996, 0.984, 0.227), vec3(1., 0.008, 0.729), 1. - uv.y);\n    float sunCut = step(1. - uv.y, 0.75);\n    float sun = (1. - circle(circleUv, sunRadius)) * sunCut;\n    color = mix(color, sunColor, sun);\n    \n    // sea\n    float y = mapRange(uv.y, 0., seaLimit, 0., 1.) - 0.04;\n    float seaStrips = step(fract(y * 13.), 0.5);\n    seaStrips = mix(seaStrips, 1., step(1. - uv.y, 1. - seaLimit));\n\n    float seaGradient = mapRange(uv.y, 0., seaLimit, 0., 1.);\n    float seaFade = smoothstep(seaRadius - seaSpread, seaRadius + seaSpread, length(uv - vec2(0.5, 0.35)));\n    vec3 seaColor = mix(vec3(0.212, 0.263, 0.467), vec3(0.208, 0.376, 0.761), seaGradient);\n    seaColor = mix(seaColor, backgroundColor, seaFade);\n    \n    float seaStripsFade = 1. - smoothstep(0.32 - seaSpread * 2., 0.32 + seaSpread * 2., length(circleUv - vec2(0.5, 0.45)));;\n    seaStrips *= seaStripsFade;\n    vec3 seaReflectColor = mix(vec3(1., 0.588, 0.357), vec3(1., 0.106, 0.729), 1. - mapRange(uv.y, seaLimit * 0.5, seaLimit, 0., 1.));\n    seaColor = mix(seaColor, seaReflectColor, seaStrips);\n    color = mix(color, seaColor, step(uv.y, seaLimit));\n    \n    // noise\n    float noise = rand(uv * 10.);\n    color = mix(color, vec3(noise), .1);\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}