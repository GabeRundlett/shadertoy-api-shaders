{
    "Shader": {
        "info": {
            "date": "1620666697",
            "description": "image: curved rails in the middle a metal ball reflecting square lights\nsound: dirty punchy drums with fast arpeggios brass-like synth",
            "flags": 40,
            "hasliked": 0,
            "id": "sdSSRK",
            "likes": 14,
            "name": "off the tracks",
            "published": 3,
            "tags": [
                "sound",
                "fm",
                "reflections",
                "pathtracer",
                "drums",
                "pm"
            ],
            "usePreview": 0,
            "username": "nabr",
            "viewed": 598
        },
        "renderpass": [
            {
                "code": "\n#ifndef SOUNDONLY\n\nvoid mainImage(out vec4 c, in vec2 p) \n{\n    c = 3.*texelFetch(iChannel0, ivec2(p), 0);\n    c /= float(iFrame+1);\n}\n\n\n#else\nvoid mainImage(out vec4 c, in vec2 p) {}\n#endif",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define _f(x)fract(x)\nvoid f(float ft, float t, inout float y)\n{\n    float f = 0., ftf1 = _f(.25 * t), ftf0 = _f(.125 * ft);\n    f = sin(4084.015 * t) * exp(-1. * ftf0);\n    //pulse\n    f *= cos(t + t + 376.98 * exp(-0.03 * pow(1. - ftf0, 20.)));\n    f *= cos(ft * 15. * exp(-0.05 * pow(1. - ftf1, 10.)));\n    f *= min(1., 630. * ftf1) * max(0., 1. - ftf1);\n    //eq,noise\n    f = (f / (1.3 - cos(37.7 * f))) / (1.5 + sin(12. * f));\n    f *= min(1., 3675. * _f(ft)) * max(0., 1. - _f(ft));\n    \n    y += .05*f;\n}\nvec2 mainSound(int samp, float time)\n{\n    vec2 y = vec2(1e-6), d = y;\n\n    //stereo width l,r 45Â°=1\n    const float a = radians(30.);\n    mat2 v = mat2(cos(a) + sin(a), cos(a) - sin(a), cos(a) - sin(a), cos(a) + sin(a));\n    v *= .707106;\n    \n    float Fs = (1. / iSampleRate);\n    float t = (float(samp) * Fs), x = Fs,\n          mt = mod((vec3(2, 3, 1)[int(-.5*t) % 3] * t), (vec3(4, 2, .5)[int(t) % 3])), //playback speed\n          t0 = mt;\n\n    for (int j = 0; j < 2; j++)\n        for (int i = 0; i < 6; i++)\n        {\n            t0 *= abs(1. - x);\n            x = Fs + .125;\n            // ----- left\n            f((.2 * t0 + _f(4. * t0)), ( .1 + .5 * t0  + x), d.x);\n            f(.5 * (t0 - .21), .06 + t0, y.x);\n            x += .16667;\n            // ----- right\n            f((.2 * t0 + _f(8. * t0)), (.02 + .5 * t0 + x), d.y);\n            f(.5 * (t0 - .25), .08 + t0, y.y);\n        }\n    float am = 1.,ad = 1.,at = 2.;\n    \n    if (time < 4.)//intro\n    {\n        at = 4.;\n        am = float(mod(t, 2.) < 1.);\n    }\n    else {\n        d = d * v;//narrow\n        ad = .8;\n        }\n        \n    vec2 env = vec2(.2 * mt, -.1 * mt * at);\n    d *= max(0., 1. - dot(env, env));\n        \n    return (ad * d*min(.5*t, 1.) + am * y);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#ifndef SOUNDONLY\n\n//some suff by iq>website\nvec2 hash21(uint q)\n{\n    uvec2 n=q*uvec2(1597334697U,3812015801U);\n    n=(n.x^n.y)*uvec2(1597334697U,3812015801U);\n    return vec2(n)*(1.0/float(0xffffffffU));\n}\nfloat sdBox(vec3 p, vec3 s) {p=abs(p)-s;return length(max(p,0.))+min(max(p.x,max(p.y,p.z)),0.);}\n#define dmin(a,b)((a.x<b.x)?a:b)\nvec2 f(vec3 p)\n{\n  #define lz(c,l)(p.z-c*clamp(round(p.z/c ),-l,l))\n  #define frp(_x,_y)(_y*.5-mod(_x,_y))\n  //sphere\n  float b = length(vec3(p.xy, p.z+7.5));\n  //room\n  float rm = abs(sdBox(p, vec3(3, 2.5, 10)));\n  vec3 v = p;\n  //rails\n  float r = cos(.45*p.z)+atan(p.y, p.x)*1.91;\n  v = abs(vec3(frp(r, 2.4),length(v.xy)-2.,lz(1., 8.))) -vec3(.65, .1, .45);\n  float rls = length(max(vec3(-.18,1e-3,1e-3), v)) + min(max(v.x, max(v.y, v.z) ), 0.)-.125;\n  v = p;\n  //lights\n  v = abs(vec3(frp(r+1., 2.4), lz(2., 3.), length(p.xy) - 1.8));\n  float fli = max(v.x-.1, max(v.y, v.z))-.05;\n  //seconds sphere is a hidden to the eye lightsource\n  return dmin(vec2(fli, 5),dmin(vec2(min(b-1.71,min(rm, rls)), 3), vec2(b-1.7, 7)));\n}\nvec3 calcNormal(in vec3 pos){vec3 eps=vec3(.0001,0,0);return normalize(vec3((f(pos+eps.xyy)-f(pos-eps.xyy)).x,(f(pos+eps.yxy)-f(pos-eps.yxy)).x,(f(pos+eps.yyx)-f(pos-eps.yyx)).x));}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    if(iFrame > 0)\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec2 R = iResolution.xy, h = vec2(0);\n    //seed by demofox \n    uint seed = (uint(fragCoord.x) * 1973u + uint(fragCoord.y) * 9277u + uint(iFrame) * 2669u) | 1u;\n    float a = max(abs(R.x), abs(R.y));\n    vec2 jjt = vec2(.3*cos(a*hash21(seed).x),sin(a*hash21(seed).y)),\n         st = ((fragCoord +jjt) * 2. - R ) /R.y;\n    vec3 col = vec3(1e-6),cmat = vec3(.974),\n    ro = vec3(.5, -1.,1./(2.+length(st)*jjt)),\n    rd = normalize(vec3(st,-1.7));\n    \n    if(abs(st.x)<1.3)\n    for(int b = 1; b < 6 + min(iFrame, 0); b++)\n    {\n        float t = 0.;\n        for(int i = 0; i < 60; i++)\n        {\n            h = f(ro + t * rd);\n            if(abs(h.x) < t *.0001 || t > 20. )break;\n            t += h.x;\n        }\n        ro += t * rd;\n       vec3 n = calcNormal(ro);\n       ro+=n*.001;\n       //lights\n       float phi =hash21(seed).y*6.283185,th =hash21(seed).x,sth = sin(th);\n       vec3 ld = normalize(vec3(1e-4, 1e-4, 2.1) + n ),\n              u = vec3(1e-4, 1e-4, ld.z),\n              v = cross(ld, u);\n        rd =  normalize(u * cos(phi) * sth + v * sin(phi) * sth + ld * cos(th));\n       //shade \n       float em = h.y == 5.?1.:h.y==7.?.1:0.;\n       col += em * (cmat*=cmat);\n    }\n    //reinhard gamma\n    col = (col/(1.+col));\n    fragColor += vec4(pow(col,vec3(0.4545)),1);\n}\n\n#else\nvoid mainImage(out vec4 c, in vec2 p) {}\n#endif",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n\n\n//#define SOUNDONLY",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}