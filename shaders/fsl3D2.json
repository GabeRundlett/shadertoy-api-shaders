{
    "Shader": {
        "info": {
            "date": "1616742506",
            "description": "exp",
            "flags": 0,
            "hasliked": 0,
            "id": "fsl3D2",
            "likes": 0,
            "name": "Ligth in the dark",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "Arseny",
            "viewed": 231
        },
        "renderpass": [
            {
                "code": "#define S smoothstep\n#define pi (3.14159265359)\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n    p += vec2(523.124, 244.155);\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 toPolar(vec2 uv){ // 0 <= x and -pi <= y <= pi\n    return vec2(length(uv), atan(uv.y, uv.x));\n}\n\nvec2 toNormalizedPolar(vec2 uv){ // 0 <= res.x and 0 <= res.y <= 1\n    vec2 res = toPolar(uv);\n    res.y = fract(res.y / pi / 2. + 1.);\n    return res;\n}\n\nvec4 roundedSquare(vec2 uv){\n    vec2 pv = toNormalizedPolar(uv);\n    //return vec4(pv.x, vec3(uv * step(pv.x, 1.), sqrt(1. - pv.x * step(pv.x, 1.))));\n    float t = pv.y;\n    t = fract(t * 4.);\n    t = 2. * abs(t - 0.5);\n    float maxval = mix(1., sqrt(2.), cos(iTime));\n    maxval = mix(1., sqrt(2.), 0.25);    \n    float needD = mix(maxval, 1., S(0., 1., t));\n    float d = pv.x - needD;\n    //return vec4(d / needD, vec3(0.));\n    float l = smoothstep(0., 1., -d / needD);\n    //l = pow(l, 1.5);\n    float k = sqrt(max(1. - l*l, 0.));\n    k *= step(0., -d);\n    l = step(0., -d) * l + step(-d, 0.);\n    return vec4(d, vec3(normalize(uv) * k, l));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // uv.y in range(-0.5, 0.5) uv.x proportionately\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float k = 2.5;\n    uv *= k;\n    float pix = 3. / iResolution.y;\n    pix *= k;\n    \n    vec3 lightDir = normalize(vec3(0.4 * sin(iTime * 1.5), 0.4 * cos(iTime * 1.), -1.));\n    //lightDir = vec3(0., 0.2, -1.);\n    vec4 sqrInfo = roundedSquare(uv);\n    fragColor = vec4(sqrInfo.yzw * 0.5 + 0.5, 0.);\n    fragColor = vec4(smoothstep(0., -1., dot(sqrInfo.yzw, lightDir)) * 0.4 + 0.3);\n    \n    return;\n    vec3 ref = reflect(lightDir, sqrInfo.yzw);\n    \n    float d = sqrInfo.x;\n    fragColor = vec4(S(0., pix, abs(d + 0.5 * sin(iTime) + 0.5)));\n    //fragColor = vec4(-d);\n    //return;\n    fragColor = vec4(abs(sqrInfo.yzw), 0.);\n    fragColor = vec4(ref, 0.);\n    \n    //fragColor = vec4(step(0., ref.z) * ref.z * ref.z * ref.z);\n    fragColor = vec4(pow(ref.z, 1.));\n    fragColor = vec4(max(-dot(sqrInfo.yzw, lightDir), 0.) * ref.z * ref.z);\n    //fragColor = vec4(ref.z);\n    //fragColor = vec4(smoothstep(0., 0.01, abs(sqrInfo.x - 0.5 + 0.5 * cos(iTime))));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}