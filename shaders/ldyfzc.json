{
    "Shader": {
        "info": {
            "date": "1529787201",
            "description": "Hastily coded live in 25 minutes at NOVA 2018. Coded in Bonzomatic, adapted here for shadertoy.",
            "flags": 64,
            "hasliked": 0,
            "id": "ldyfzc",
            "likes": 5,
            "name": "NOVA 18 Showdown Semifinal - yx",
            "published": 3,
            "tags": [
                "showdown",
                "nova18"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 795
        },
        "renderpass": [
            {
                "code": "float noise(vec2 i)\n{\n  return fract(sin(dot(i, vec2(12.432432,5.54763)))*45632.43253)*2.-1.;\n}\n\nfloat M(vec2 uv)\n{\n  vec2 c = floor(uv);\n  vec2 e = fract(uv);\n  float n = normalize(noise(c));\n  float d = fract(e.y+n*e.x);\n  return (.5-abs(d-.5))/sqrt(2.) - .01;\n}\n\nvec4 plas( vec2 v, float time )\n{\n  float c = 0.5 + sin( v.x * 10.0 ) + cos( sin( time + v.y ) * 20.0 );\n  return vec4( sin(c * 0.2 + cos(time)), c * 0.15, cos( c * 0.1 + time / .4 ) * .25, 1.0 );\n}\n\n// fuck you :)\n#define pi (acos(-1.))\n\nvec2 r(vec2 a, float b)\n{\n  float c = cos(b);\n  float s = sin(b);\n  return vec2(\n    a.x*c-a.y*s,\n    a.y*c+a.x*s\n  );\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n  vec2 fc = fragCoord.xy;\n  //fc -= mod(fc, vec2(8,4));\n  vec2 uv = vec2(fc.x / iResolution.x, fc.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 cam = vec3(.5,0,iTime*.3);\n  vec3 dir = normalize(vec3(uv,1));\n\n  cam.x += cos(iTime*.3);\n  dir.xy = r(dir.xy, sin(iTime*.1)*.1);\n  dir.xz = r(dir.xz, sin(iTime)*.3);\n\n  float t = 0.;\n  for(int i=0;i<64;++i)\n  {\n    float k = M(cam.xz+dir.xz*t);\n    t += k;\n  }\n  float tc = .2/dir.y;\n  float tf = -.2/dir.y;\n  if(tc > 0.) t = min(t,tc);\n  if(tf > 0.) t = min(t,tf);\n  vec3 h = cam+dir*t;\n  \n  vec4 c1 = vec4(.6,.6,1,1);\n  vec4 c2 = vec4(.3,.2,.8,1);\n\n  out_color = vec4(fract(h),1);\n  if(abs(h.y)>.199)\n  {\n    out_color = vec4(normalize(sin(M(h.xz)*pi*32.)-.8)*.5+.5);\n    out_color *= fract(h.x-iTime*3.);\n    out_color *= texture(iChannel0, vec2(0.01,1)).rrrr*3.;\n    out_color *= c2;\n  }\n  else\n  {\n    //out_color = texture(texTex1,h.xy*.6-.1)+vec4(1,0,0,1);\n    vec2 wuv = h.xy*100.-vec2(0,iTime*15.);\n    float w = normalize(M(wuv)-.1)*.5+.5;\n    wuv=fract(wuv+.05);\n    if(min(wuv.x,wuv.y)<.1)\n      w=1.;\n    out_color = mix(c1,c2,clamp(w,0.,1.));\n  }\n\n  // color proc\n  out_color = pow(out_color, vec4(1.1,1.05,1,1));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 14991,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/space-laces/space-laces-dungeons-and-dragons"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}