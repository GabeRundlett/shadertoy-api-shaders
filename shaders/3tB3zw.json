{
    "Shader": {
        "info": {
            "date": "1558786646",
            "description": "üòèüçô",
            "flags": 0,
            "hasliked": 0,
            "id": "3tB3zw",
            "likes": 2,
            "name": "[liliilli] RayMarching Test 1",
            "published": 3,
            "tags": [
                "liliilli"
            ],
            "usePreview": 0,
            "username": "liliilli",
            "viewed": 1302
        },
        "renderpass": [
            {
                "code": "/// @brief Rotate position (pos) with radian on counter-clockwise.\nvec3 RotateY(vec3 pos, float radian)\n{\n    return vec3(\n        cos(radian) * pos.x + sin(radian) * pos.z, \n        pos.y,\n        -sin(radian) * pos.x + cos(radian) * pos.z);\n}\n\n/// @brief Get shortest distance from point to infinity line.\nfloat DistLineToPoint(vec3 ro, vec3 rd, vec3 pos)\n{\n    vec3 ap = pos - ro;\n    return length(cross(ap, rd)) / length(rd);\n}\n\n/// @brief Directional light structure.\nstruct DLight \n{\n    vec3 mDir;\n    vec3 mCol;\n};\n\n/// @brief Plane structure.\nstruct DPlane\n{\n    vec3 mCenterPos;\n    vec3 mNormal;\n    vec3 mCol;\n};\n\n/// @brief Get signed-distance funciton weight value of plane.\nfloat sdfPlane(vec3 pos, DPlane plane)\n{\n    // Calculus Early Transcendentals 7th p823.\n    float denom = length(plane.mNormal);\n    float numem = abs(dot(plane.mNormal, pos - plane.mCenterPos));\n    return numem / denom;\n}\n\n/// @brief Get normal vector of plane.\nvec3 GetNormalPlane(vec3 pos, vec3 dir, DPlane plane)\n{\n    return plane.mNormal;\n}\n\n/// @brief Sphere structure.\nstruct DSphere\n{\n    vec3 mPos;\n    vec3 mCol;\n    float mRadius;\n};\n\n/// @brief Get signed-distance function weight value of sphere.\n/// 0 is isosurface, and negative value is in sphere.\nfloat sdfSphere(vec3 pos, DSphere sphere)\n{\n    return distance(pos, sphere.mPos) - sphere.mRadius;\n}\n\n/// @brief Get proper normal vector from intersection of ray with sphere,\n/// when ray is intersected with sphere.\nvec3 GetNormalSphere(vec3 pos, vec3 dir, DSphere sphere)\n{\n    float longHypot  = distance(pos, sphere.mPos);\n    float shortDist2 = pow(DistLineToPoint(pos, dir, sphere.mPos), 2.0);\n    \n    float t = sqrt(pow(longHypot, 2.0) - shortDist2);\n    float minusT = sqrt(pow(sphere.mRadius, 2.0) - shortDist2);\n    t -= minusT;\n    \n    return normalize((pos + t * dir) - sphere.mPos);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / min(iResolution.x, iResolution.y);\n    uv.x -= (iResolution.x - iResolution.y) / (2. * min(iResolution.x, iResolution.y)); \n    uv -= 0.5;\n    \n    vec3 camera = RotateY(vec3(0, 3, 5), iTime);\n    vec3 view   = vec3(0, 0, 0);\n    vec3 up     = vec3(0, 1, 0);\n    \n    // Setting up View matrix (don't make view matrix itself, We just need v,s,u element).\n    vec3 forward = normalize(view - camera);\n    vec3 side    = cross(forward, up);\n    vec3 camUp   = cross(side, forward);\n\n    float zoom = 2.0f;\n\n    // Setting up virtual screen, and lay direction of virtual screen pixel.\n    vec3 scrOrg = camera + zoom * forward;\n    vec3 pxlPos = scrOrg + (side * uv.x) + (camUp * uv.y);\n    vec3 rayDir = normalize(pxlPos - camera);\n    \n    DPlane far;\n    far.mCenterPos = camera + 10.0 * forward;\n    far.mNormal = -forward;\n    \n    // Setting up light\n    DLight dirLight;\n    dirLight.mDir = normalize(vec3(0, 1, 1));\n    dirLight.mCol = vec3(1, 1, 1);\n    \n    // Setting up background color.\n    vec3 result = vec3(0);\n    result = vec3(0., 56. / 255., 91. / 255.);\n    \n    // Setting up structure (model)\n    DPlane plane;\n    plane.mCenterPos = vec3(0, -1, 0);\n    plane.mNormal = vec3(0, 1, 0);\n    plane.mCol = vec3(1, .5, 0);\n    \n    DSphere sphere;\n    sphere.mPos = vec3(0, 0, 1);\n    sphere.mCol = vec3(0, .5, 1);\n    sphere.mRadius = 0.5;\n    \n    DSphere sphere2;\n    sphere2.mPos = RotateY(vec3(0, 0, 1), 0.78);\n    sphere2.mCol = vec3(0, 1, 0);\n    sphere2.mRadius = 0.25;\n    \n    DSphere sphere3;\n    sphere3.mPos = RotateY(vec3(0, 0, 1), 1.17);\n    sphere3.mCol = vec3(1, 0, 0);\n    sphere3.mRadius = 0.125;\n\n    // Raycasting & marching & rendering.\n    for (int i = 0; i < 64 && sdfPlane(camera, far) > 0.5f; ++i)\n    {\n        float shortestDist = sdfPlane(camera, far);\n        shortestDist = min(shortestDist, sdfSphere(camera, sphere));\n        if (shortestDist < 0.01)\n        {\n            vec3 normal = GetNormalSphere(camera, rayDir, sphere);\n            vec3 qLambert = \n                clamp(dot(dirLight.mDir, normal) * sphere.mCol * dirLight.mCol, 0., 1.) \n              * 0.75 + 0.25;\n            result = qLambert;\n            break;\n        }\n        \n        shortestDist = min(shortestDist, sdfSphere(camera, sphere2));\n        if (shortestDist < 0.01)\n        {\n            vec3 normal = GetNormalSphere(camera, rayDir, sphere2);\n            vec3 qLambert = \n                clamp(dot(dirLight.mDir, normal) * sphere2.mCol * dirLight.mCol, 0., 1.) \n              * 0.75 + 0.25;\n            result = qLambert;\n            break;\n        }\n        \n        shortestDist = min(shortestDist, sdfSphere(camera, sphere3));\n        if (shortestDist < 0.01)\n        {\n            vec3 normal = GetNormalSphere(camera, rayDir, sphere3);\n            vec3 qLambert = \n                clamp(dot(dirLight.mDir, normal) * sphere3.mCol * dirLight.mCol, 0., 1.) \n              * 0.75 + 0.25;\n            result = qLambert;\n            break;\n        }\n        \n        shortestDist = min(shortestDist, sdfPlane(camera, plane));\n        if (shortestDist < 0.01)\n        {\n            vec3 normal = GetNormalPlane(camera, rayDir, plane);\n            vec3 qLambert = \n                clamp(dot(dirLight.mDir, normal) * plane.mCol * dirLight.mCol, 0., 1.) \n              * 0.75 + 0.25f;\n            result = qLambert;\n            break;\n        }\n        \n        camera += shortestDist * rayDir;\n    }\n    \n    fragColor = vec4(result, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}