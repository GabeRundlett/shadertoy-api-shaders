{
    "Shader": {
        "info": {
            "date": "1600126685",
            "description": "rly?",
            "flags": 0,
            "hasliked": 0,
            "id": "ttBBDt",
            "likes": 0,
            "name": "Hip",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "Arseny",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "// \"RayMarching starting point\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\n#define pi (3.14159265359)\n\nconst float R = 0.4;\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,233.53));\n    p += dot(p, p+23.234);\n    return fract(p.x*p.y);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n  vec3 q = abs(p);\n  return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat sdInfTriPrism( vec3 p, float r )\n{\n  vec3 q = abs(p);\n  return q.x*0.866025+p.y*0.5-r*0.5;\n}\n\nfloat sdScrewPrism(vec3 p){\n    const float k = 0.5; // or some other amount\n    float c = cos(k*p.z);\n    float s = sin(k*p.z);\n    mat2  m = mat2(c,-s,s,c);\n    p.z = abs(p.z) + 1.;\n    vec3  q = vec3((m*p.xy), p.z);//vec3(m*p.xz,p.y);\n    return sdTriPrism(q, vec2(0.5, 10.));\n}\n\nfloat GetDist(vec3 p) {\n    //float d = sdTriPrism(p, vec2(0.5, 20.));\n    float d = -sdScrewPrism(p);\n   \t\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvec2 myRot(float d){\n    return vec2(0., 1.) * Rot((d / R / 3.) * pi * 2.) * d;\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    /*vec3 ro = vec3(0, 0, 0.5 + mod(iTime / 3., 4.5 + 0.5 - 0.25 - 0.125 + 0.125 / 2.));\n    //ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0., 0., -1.3), 0.5);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        \n    \tfloat dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n    \t//col += dif * (-(p.z - 4.) / 10.);\n        col += sin(p.z * 40.);\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    */\n    // experimental\n    /*\n    float r = length(uv);\n    vec2 pv = vec2(r, 1. - atan(uv.x, uv.y) / pi / 2. - 0.5);\n    //uv *= Rot(r);\n    vec2 lv = pv;\n    pv.y += r / R / 3.;\n    \n    vec2 nv = vec2(-1., 0.) * Rot(pv.y * pi * 2.) * pv.x;\n    \n    col = vec3(nv, 0.);\n    vec2 tmpPoint = vec2(0., max(0., nv.y));\n    float di = length(nv - tmpPoint);\n    di = min(di, abs(lv.y - 1. / 3.));\n    \n    float k = 10.;\n    float id = floor(pv.x / R * k + 0.5) / k;\n    float tmpd = (id) * R;\n    \n    float mask = smoothstep(0., 0.01, di);\n    \n    mask = abs(pv.x - tmpd) * 100.;mix(10., 40., sin(iTime) / 2. + 0.5);//20.;\n    mask = min(length(myRot(tmpd) - uv) * 100., 1.);\n    */\n    //mask = abs(nv.x - 0.25) * 100.;\n    //mask *= id;\n    \n    //mask *= pv.x;\n    \n    //mask = nv\n    \n    float k = 3.;\n    \n    // polar coordinates normalized from 0. to 1. angle. zero angle at vec2(0, -1.)\n    vec2 lv = vec2(length(uv), 1. - atan(uv.x, uv.y) / pi / 2. - 0.5); \n    \n    lv.y = fract(lv.y + 1. / k / 2.); // little shift of angle for\n    \n    vec2 nv = uv * Rot(-floor(lv.y * k) / k * pi * 2.); // rotating to bottom segment  \n    \n    float mask = abs(nv.y + 0.2) * 100.; // distance to side in bottom segment\n    \n    float t = mix(0.07, 0.3, sin(iTime) / 2. + 0.5);\n    //nv = nv * Rot(0.1 * pi * 2. / k); // rotating to bottom segment\n    //mask = min(mask, abs(nv.y + 0.15) * 100.);\n    vec2 first = vec2(0., -R) * Rot(-1. / k / 2. * pi * 2.);\n    vec2 second = first * Rot(1. / 3. * pi * 2.);\n    vec2 third = second * Rot(1. / 3. * pi * 2.);\n    for (float i = 0.; i < 50.; i++){\n        vec2 nfirst = mix(first, second, vec2(t));\n        vec2 nsecond = mix(second, third, vec2(t));\n        vec2 nthird = mix(third, first, vec2(t));\n        //mask = sdSegment(nv, first, second) * 100.;\n        mask = min(mask, sdSegment(uv, nfirst, nsecond) * 100.);\n        mask = min(mask, sdSegment(uv, nsecond, nthird) * 100.);\n        mask = min(mask, sdSegment(uv, nthird, nfirst) * 100.);\n        first = nfirst;\n        second = nsecond;\n        third = nthird;\n    }\n    \n    \n    col = vec3(mask);\n    //col = vec3(uv, 0.);\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}