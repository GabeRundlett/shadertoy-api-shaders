{
    "Shader": {
        "info": {
            "date": "1660130751",
            "description": "testing integration",
            "flags": 0,
            "hasliked": 0,
            "id": "NldyRj",
            "likes": 6,
            "name": "BMtesting04",
            "published": 3,
            "tags": [
                "cineshader"
            ],
            "usePreview": 0,
            "username": "thebtype",
            "viewed": 3284
        },
        "renderpass": [
            {
                "code": "/**\n * Fractal Brownian Motion\n *\n * Reference: https://thebookofshaders.com/13/\n * \n * See also: https://iquilezles.org/articles/morenoise\n */\n\n#define NUM_OCTAVES 5\n\nconst vec3 color = vec3(.90, 0.745, 0.9);\n\n\n// Get random value\nfloat random(in vec2 st)\n{\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n// Get noise\nfloat noise(in vec2 st)\n{\n    // Splited integer and float values.\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n    \n    float a = random(i + vec2(0.0, 0.0));\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    \n    // -2.0f^3 + 3.0f^2\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    \n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n// fractional brown motion\n//\n// Reduce amplitude multiplied by 0.5, and frequency multiplied by 2.\nfloat fbm(in vec2 st)\n{\n\tfloat v = 0.0;\n    float a = 0.5;\n    \n    for (int i = 0; i < NUM_OCTAVES; i++)\n    {\n    \tv += a * noise(st);\n        st = st * 2.0;\n        a *= 0.5;\n    }\n    \n    return v;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Calculate normalized UV values.\n    vec2 st = fragCoord / iResolution.xy;\n        \n    vec2 q = vec2(0.0);\n    q.x = fbm(st + vec2(0.0));\n    q.y = fbm(st + vec2(1.0));\n    \n    // These numbers(such as 1.7, 9.2, etc.) are not special meaning.\n    vec2 r = vec2(0.0);\n    r.x = fbm(st + (1.0 * q) + vec2(1.7, 9.2) + (0.15 * iTime));\n    r.y = fbm(st + (1.0 * q) + vec2(8.3, 2.8) + (0.12 * iTime));\n    \n    // Calculate 'r' is that getting domain warping.\n    float f = fbm(st + r);\n    \n    // f^3 + 0.6f^2 + 0.5f\n    float coef = (f * f * f + (0.6 * f * f) + (0.5 * f));\n    \n    fragColor = vec4(coef * color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}