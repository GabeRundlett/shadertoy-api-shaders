{
    "Shader": {
        "info": {
            "date": "1667899875",
            "description": "sound, \n",
            "flags": 64,
            "hasliked": 0,
            "id": "dsSGzK",
            "likes": 4,
            "name": "aphex twin visualized",
            "published": 3,
            "tags": [
                "test",
                "sound",
                "equalizer"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 250
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n const float N_TAU = 6.283185307179586476;\n \n     vec2 a_n_frag_coords_normalized = fragCoord.xy / iResolution.xy; \n     float n_amp_base = 100.0; \n     float n_angle = 0.0;\n     float n_channels = 2.0;\n\n     float n_brightness = 0.0;\n     float n_distance_min = 1.0;\n     \n     float n_len_a_n_freq = iChannelResolution[0].x;\n     float n_amp_max_norm = 1.0 / iChannelResolution[0].x;\n     float n_freqs_to_display = 99.0;\n     int n_count = 0;\n     float n_sound_amplitude_saved = 0.0;\n     for(float n_index_freq_norm = 0.0; n_index_freq_norm < 1.0; n_index_freq_norm+=(1.0/n_freqs_to_display)){\n            n_count+=1;\n             \n            //float n_sound_amplitude = texelFetch(iChannel0, ivec2(float(n_index),  0), 0).r; \n             //float n_index = 0.0;\n             float n_index_freq = n_index_freq_norm * n_len_a_n_freq;\n             float n_sound_amplitude = texelFetch(iChannel0, ivec2(n_index_freq,  0), 0).x;     \n             float n_phase_factor = 1.0;\n             if(mod(float(n_count), 2.0) == 0.0){\n                 n_phase_factor = -1.0;\n             } \n             float n_y = sin(\n                 N_TAU \n                 * a_n_frag_coords_normalized.x \n                 * n_index_freq_norm * n_freqs_to_display\n                 + sin(iTime*(n_sound_amplitude/255.0)*n_index_freq_norm) \n                 // + (iTime*0.1*n_index_freq + n_index_freq)* n_phase_factor // overkill\n                 ) \n                 * n_sound_amplitude \n                 * (1.0 / n_freqs_to_display)\n                 //* (1.0-n_index_freq_norm)*2.0 //overkill\n                 + n_index_freq_norm + (n_amp_max_norm);\n\n                 \n             float n_dist_to_n_y = abs(a_n_frag_coords_normalized.y - n_y);\n             float n_dist_to_n_y_norm = n_dist_to_n_y / (1.0 / n_freqs_to_display);\n             //float n_dist_to_n_y_norm_smoothstep = smoothstep(0.0, (1.0-n_index_freq_norm), n_dist_to_n_y_norm);\n             //fragColor *= vec4(n_dist_to_n_y_step);\n             if(n_dist_to_n_y_norm < n_distance_min){\n                 //n_distance_min = n_dist_to_n_y_norm_smoothstep;\n                 n_distance_min = n_dist_to_n_y_norm;\n                 n_sound_amplitude_saved = n_sound_amplitude;\n             }\n         \n         \n     \n     }\n     fragColor = vec4(1.0-(n_distance_min/(n_sound_amplitude_saved*1.0)));\n\n     \n\n\n     \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 30154,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/user-832040388/aphex-twin-soundlab20"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}