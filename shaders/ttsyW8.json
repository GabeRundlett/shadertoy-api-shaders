{
    "Shader": {
        "info": {
            "date": "1592003555",
            "description": "Of course this is more efficient of code than [url]https://www.shadertoy.com/view/WtsyWr[/url] but listing the values in a table makes a clear demonstration of the absolute absence of any modulation on the sinusoid components.",
            "flags": 40,
            "hasliked": 0,
            "id": "ttsyW8",
            "likes": 11,
            "name": "Sine melody (source)",
            "published": 3,
            "tags": [
                "sound",
                "music",
                "interference",
                "sines",
                "sampleprecise"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 490
        },
        "renderpass": [
            {
                "code": "                                                                                                                                                                                                                                                                /*\n\n    Main source is in the Common tab.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*/\n\n\n\n\n/* \n\nExpression Plotter\n\nUsage: PLOT_CONTINUOUS( fragColor, uv, window, domain,\n                        linecolor, side, blend, linewidth, expression );\n\n  fragColor - output (linear RGB)\n  uv - coordinate system for window\n  window - mat2, first col: window corner, second col: window size\n  domain - mat2, first col: min x,y, second col: max x,y\n  linecolor - RGB\n  side - 0 = line, 1 = below, -1 = above (see demo)\n  blend - 0=paint, 1=light-trace, 2=ink (see demo)\n  linewidth - measured in units of uv.x; only for side=0\n  expression - uses x as the independent variable\n\nThis file may be used and copied under the terms of the ISC License;\nsee end of file.  As an exception, the full permission notice may be\nomitted where this file is copied within Shadertoy and the full URL,\n\"https://www.shadertoy.com/view/3t3XWf\", is displayed within the source.\n\n*/\n\n\n\n// https://www.shadertoy.com/view/3t3XWf by ttg\nvoid PLOT_CONTINUOUS_CHECK_ARGS(inout vec3 fcolor, vec2 fcoord, mat2 window,\n  mat2 domain, vec3 color, int side, int blend, float linewidth) {}\n#define PLOT_CONTINUOUS(_fcolor, _Afcoord, _Awindow, \\\n  _Adomain, _Acolor, _Aside, _Ablend, _Alinewidth, _function) \\\n  { \\\n    PLOT_CONTINUOUS_CHECK_ARGS(_fcolor, _Afcoord, _Awindow, \\\n      _Adomain, _Acolor, _Aside, _Ablend, _Alinewidth); \\\n    vec2 _fcoord = (_Afcoord); \\\n    mat2 _window = (_Awindow); \\\n    mat2 _domain = (_Adomain); \\\n    vec3 _color = (_Acolor); \\\n    int _side = (_Aside); \\\n    int _blend = (_Ablend); \\\n    float _alinewidth = (_Alinewidth); \\\n    vec2 _rcoord = _fcoord-_window[0]; \\\n    vec2 _res = _window[1]/(_domain[1]-_domain[0])/ \\\n        vec2(dFdx(_fcoord.x),dFdy(_fcoord.y)); \\\n    float _linerpa = min(10.,(_alinewidth*_res.x)*.5); \\\n    float _linerp = max(.5,_linerpa); \\\n    if (all(bvec4(greaterThan(_rcoord,vec2(0)), \\\n                  lessThan(_rcoord,_window[1])))) { \\\n      float _pixmixsum = 0.; \\\n      int _passes = 0; \\\n      if (_side==0) _passes = min(10,int(floor(_linerp))); \\\n      vec2 _x = _rcoord/_window[1]*(_domain[1]-_domain[0])+_domain[0]; \\\n      float _ylast; \\\n      for (int _i = -_passes-1; _i <= _passes; _i++) { \\\n        float offset = float(_i) ; \\\n        vec2 _x = _x + vec2(1,0)*offset/_res; \\\n        float _dx = .5/_res.x; \\\n        float _y1, _y2, _ddx; \\\n        float x = _x.x+_dx; _y1 = (_function); \\\n        _y2 = _ylast; _ylast = _y1; \\\n        if (_i==-_passes-1) continue; \\\n        _ddx = ((_y1-_y2)/(_dx*2.))*_res.y/_res.x; \\\n        float _y = (_y1+_y2)/2.; \\\n        float hdiff = (_y-_x.y) *_res.y; \\\n        if (_side==0) hdiff = \\\n          .7*(abs(hdiff)+.5-_linerp*sqrt(1.-pow(offset/_linerp,2.))); \\\n        float pixmix = hdiff/sqrt(1.+_ddx*_ddx); \\\n        if (_side!=0) pixmix = pixmix*sign(float(_side))+0.5; \\\n        if (_side==0) pixmix = 1.-pixmix; \\\n        pixmix = clamp(pixmix,0.,1.); \\\n        if (_blend==1 && _side==0) pixmix /= sqrt(1.+_ddx*_ddx); \\\n        if (_passes!=0 && abs(_i)==_passes) pixmix *= fract(_linerp); \\\n        if (_side==0) pixmix *= \\\n          1./(1.+max(0.,_linerp-2.)/pow(1.+_ddx*_ddx,2.0)); \\\n        _pixmixsum += pixmix; \\\n      } \\\n      if (_blend!=1) _pixmixsum = clamp(_pixmixsum,0.,1.); \\\n      if (_side==0 && _linerpa<.5) _pixmixsum*=max(0.,_linerpa*2.); \\\n      if (_blend==0) _fcolor = mix( _fcolor, _color, _pixmixsum ); \\\n      if (_blend==1) _fcolor = _fcolor + _color*_pixmixsum; \\\n      if (_blend==2) _fcolor = _fcolor * mix( vec3(1.), _color, _pixmixsum ); \\\n      _fcolor = max(vec3(0.), _fcolor); \\\n    } \\\n  }\n\n/*\nCopyright 2020 Theron Tarigo\n\nPermission to use, copy, modify, and/or distribute this software for any \npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH \nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.);\n    PLOT_CONTINUOUS(col, uv, mat2(0,0,1,1), mat2(0.,-1.,1.,1.), vec3(1.), 0, 1, .002, texture(iChannel0, vec2(x,0.)).x );\n    PLOT_CONTINUOUS(col, uv, mat2(0,0,1,1), mat2(0.,-1.,1.,1.), .04*vec3(.1,1.,.1), 0, 1, .02, texture(iChannel0, vec2(x,0.)).x );\n    col += .003*vec3(.1,1.,.1);\n\n    // Output to screen\n    fragColor = vec4(pow(col,vec3(1./2.2)),1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvec2 mainSound( in int samp, float time_DO_NOT_USE)\n{\n    return mainSound(samp);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "void mainImage( out vec4 v, in vec2 fc )\n{\n    if (int(fc.y)!=0) discard;\n    float x = fc.x/iResolution.x-.5;\n    v.x = mainSound(int((.02*x+round(iTime*264.)/264.)*iSampleRate)).x;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nfloat intfract(int s, float p);\nconst float pi = 3.1415927;\n\nfloat sineosc(int s, float f, float p) {\n    float a = 2.*pi*intfract(s, iSampleRate/f);\n    return cos(a-p);\n}\n\nvec2 mainSound( int s) {\n  float v = 0.;\n\n// PASTE BELOW INTO SH \\\ncc -xc -DC - && ./a.out | sort -t, -k2 -n\n#ifdef C\n#include <stdio.h>\nint main () {\n#define intc(x) ((int)(x))\n#define floatc(x) ((float)(x))\n#define QUOTE(X) #X\n#define EXPAND(...) __VA_ARGS__\n#define ARRV(a,i) ((float[]){EXPAND a}[i])\n#define SINE(G,F,P) printf(QUOTE(vec3(%2.f,%11.6f,%6.3f)\\054), G,F,P);\n#define NEWLINE printf(QUOTE(\\n));\n#else\n#define intc(x) (int(x))\n#define floatc(x) (float(x))\n#define ARRV(a,i) (float[]a[i])\n#define SINE(g,f,p) v += (g)/320.*sineosc(s,(f),2.*pi*(p));\n#define NEWLINE\n#endif\n\n  float f0 = 264.;\n\n  for (int i3=0; i3<=3; i3+=3) // loop over overtones\n  for (int i0=0; i0<10; i0++) // loop over composition\n  for (float h=1.; h<9.1; h+=2.) { // loop over pulse harmonic\n\n    float f = f0*ARRV((.5,1.,2.,1.5,.75, .5,1.,1.25,1.5,0.75), i0)*\n      ARRV((1.,4./3.),i0/5) * floatc(i3+1);\n    float p = 0.;\n    float g = 1.+1.*floatc((i0%5)==0);\n    float pf = 1.+1.*floatc((i0%5)==0);\n    float pp = ARRV((0.,0.,.25,.5,.75),i0%5);\n    float fp = .25*floatc(i0/5);\n\n    for (float f0=-1.; f0<=1.; f0+=2.)\n    for (float f1=-1.; f1<=1.; f1+=2.)\n    for (float f2=-1.; f2<=1.; f2+=2.)\n      SINE(f2*g, f+f0*h*pf/2.+f1*.1+f2*.002778, f0*h*pp/2.+f1*fp)\n    NEWLINE\n  }\n#ifdef C\nreturn 0; }\n#endif\n// END.  ^D to complete.\n\n  return vec2(v);\n}\n\nfloat intfract(int s, float p) {\n  // Implements fract(s/n)\n  // Explanation and copyright: shadertoy.com/view/4ltfRN\n  // Given sample number and period, calculate phase with high accuracy.\n  // Uses integer overflow for modulo.\n  int sp = int(p), a = s%sp, b = (s/sp);\n  const float MAXF = float(uint(-1))+1.;\n  return fract(  (float(a)/p) + float((uint(b)*uint(MAXF*float(sp)/p)))/MAXF );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}