{
    "Shader": {
        "info": {
            "date": "1535314965",
            "description": "WASD+Mouse to move around. Spacebar to reset. Based on my previous shadertoy, https://www.shadertoy.com/view/XddBD2",
            "flags": 48,
            "hasliked": 0,
            "id": "ltGcRW",
            "likes": 30,
            "name": "Sponza pt2",
            "published": 3,
            "tags": [
                "raymarching",
                "lighting",
                "wasd",
                "sponza"
            ],
            "usePreview": 0,
            "username": "mmerchante",
            "viewed": 1409
        },
        "renderpass": [
            {
                "code": "// Sponza with WASD camera. Move around!\n// I optimized my previous sponza sdf, although it's even less legible now.\n// Some of the tricks I used can be seen through some of the artifacts.\n#define MAX_STEPS 100\n#define MAX_STEPS_F float(MAX_STEPS)\n\n#define MAX_DISTANCE 30.0\n#define MIN_DISTANCE 0.25\n#define EPSILON .01\n#define EPSILON_NORMAL .01\n\n// Remove if you want fullscreen :)\n#define CINEMATIC_BARS\n\n// Play with the amount of lights\n#define CELL_SIZE 2.0\n\n// hg\nfloat vmax(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\n// hg\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax(min(d, vec3(0)));\n} \n\n// hg\nfloat vmax(vec2 v) {\n\treturn max(v.x, v.y);\n}\n\n// hg\nfloat fCylinder(vec3 p) {\n    float d = length(p.xz) - .5;\n    d = max(d, abs(p.y) - 1.0);\n    return d;\n}\n\nfloat domainRepeat1D(float p, float size)\n{\n    return mod(abs(p) + size * .5, size) - size * .5;\n}\n\n// hg\nvec2 pModPolar(vec2 p, float repetitions) {\n\tfloat angle = 2.0 * 3.1415 / repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\treturn vec2(cos(a), sin(a))*r;\n}\n\n// hg\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nvec3 rdX(vec3 p)\n{\n    return vec3(p.x, p.z, -p.y);\n}\n\nvec3 rdY(vec3 p)\n{\n    return vec3(-p.z, p.y, p.x);\n}\n\nvec3 rdZ(vec3 p)\n{\n    return vec3(-p.y, p.x, p.z);\n}\n\n// hg\nfloat fCylinder(vec3 p, float r, float height) {\n\tfloat d = length(p.xz) - r;\n\td = max(d, abs(p.y) - height);\n\treturn d;\n}\n\n// A shorter, uglier but faster version of https://www.shadertoy.com/view/XddBD2\nfloat sdf(vec3 p)\n{\n\tvec3 a0 = p;\n\ta0.xz = abs(a0.xz) * vec2(-1.0,1.0);\n\tvec3 a1 = a0 - vec3(6.24,.0,2.5);\n\ta1.xz = pModPolar(a1.xz, 4.0);    \n\tfloat d1 = -(a1 - vec3(11.49,.0,.0)).x;    \n\tvec3 a2 = a1 - vec3(11.02,2.15,7.28);\n\ta2.z = domainRepeat1D(a2.z, 2.0);\n\tfloat d3 = fBox(a2 - vec3(-2.64,5.05,.0),vec3(.5,.5,.228));\n\td3 = min(d3,fBox(a2 - vec3(-2.275,5.05,.0),vec3(.383,.383,.175)));\n\td3 = min(d3,fBox(a2 - vec3(-2.64,6.97,.0),vec3(.5,.283,.111)));\n\tfloat d2 = max(-d3,fBox(a2 - vec3(-1.28,6.38,.287),vec3(1.5,1.893,6.673)));\n\tvec3 a4 = a1 - vec3(9.18,-4.5,-.032);\n\ta4.y = domainRepeat1D(a4.y, 4.5);\n\tvec3 a5 = vec3(a4.x, a4.y, domainRepeat1D(a4.z, 2.5));\n\tvec3 a6 = vec3(-a5.x, a5.y, a5.z);\n\tvec3 a8 = rdZ(a6 - vec3(.05,-.62,.0));\n\tfloat d8 = (fCylinder(a8, 1.398,1.361)*.75);\n\td8 = max(-d8,(fCylinder(a8 - vec3(.0,.152,.0), 1.434,.531)*.75));\n\tfloat d7 = max(d8,fBox(a6 - vec3(.786,.46,.0),vec3(.523,.747,1.415)));\n\tfloat d9 = fBox(a6 - vec3(.47,1.953,.0),vec3(.5,.075,1.5));\n\td9 = min(d9,fBox(a6 - vec3(.58,2.2,.0),vec3(.5,.1,1.5)));\n\td9 = min(d9,fBox(a6 - vec3(-.45,-2.3,.0),vec3(1.5,.1,1.5)));\n    vec3 a10 = a6 - vec3(.463,-.51,1.179);\n\ta10.z = domainRepeat1D(a10.z, 2.35);\n\tfloat d10 = fBox(a10,vec3(.24,.033,.24));\n\td10 = min(d10,fBox(a10 - vec3(.0,-.093,.0),vec3(.24,.033,.24)));\n\td10 = min(d10,fBox(a10 - vec3(-2.8,-.03,.0),vec3(.25,.075,.25)));\n\tvec3 a11 = vec3(a10.y, pModPolar(a10.xz , 8.0)).yxz;\n\tfloat d11 = fBox(a11 - vec3(.002,-1.07,.0),vec3(.17,1.053,.424));\n\tvec3 a12 = a6 - vec3(-1.03,-.518,.0);\n\tvec3 a13 = rdZ(a12);\t\n\tfloat d13 = fCylinder(vec3(a13.x, -a13.z, a13.y), 1.225,3.0);\n\td13 = min(d13,fCylinder(a13, 1.094,2.061));\n\tfloat d12 = max(-d13,fBox(a12 - vec3(.12,1.27,.0),vec3(1.5,1.355,1.551)));\n\tvec3 a14 = a6 - vec3(.463,1.57,1.61);    \n\tfloat d14 = fCylinder(vec3(a14.y, -a14.x, a14.z) - vec3(-.19, -.13, -1.08), .105,.046);    \n    vec3 polePos = vec3(-a14.y, a14.x, a14.z) - vec3(.042, .596, -1.08);\n\tpolePos.xy += 0.3428 * vec2(polePos.y, -polePos.x);\n    d14 = min(d14,fCylinder(polePos, .025,.582));\n\treturn min(min(min(d1,d2),min(min(d7,min(min(d9,min(d10,d11)),d12)),d14)),(a0 - vec3(.0,-2.0,.0)).y);\n}\n\n// iq and Paul Malin, tetrahedron (https://iquilezles.org/articles/normalsSDF)\nvec3 sdfNormal(vec3 p, float epsilon)\n{\n    float h = epsilon; // or some other value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*sdf(p + k.xyy*h) + \n                      k.yyx*sdf(p + k.yyx*h) + \n                      k.yxy*sdf(p + k.yxy*h) + \n                      k.xxx*sdf(p + k.xxx*h) );\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nvec3 Render(Ray ray, Intersection isect, vec2 uv)\n{\n    vec3 pos = ray.origin + ray.direction * isect.totalDistance;\n    vec3 original = pos;\n    vec3 normal = sdfNormal(pos, EPSILON_NORMAL);\n   \n    vec3 outColor = vec3(0.0);\n    float cellSize = CELL_SIZE;\n    \n    pos += iTime * .5;\n    \n    vec3 fP = floor(pos / cellSize);\n    ivec3 from = ivec3(fP) - ivec3(1);\n    ivec3 to = ivec3(fP) + ivec3(1);\n    \n    for(int x = from.x; x <= to.x; ++x)\n    {\n    \tfor(int y = from.y; y <= to.y; ++y)\n        {\n            for(int z = from.z; z <= to.z; ++z)\n            {\n\t\t\t\tvec3 cellPos = vec3(x,y,z) * cellSize;\n                \n                vec3 lightPos = cellPos + vec3(cellSize * .5) + hash33(cellPos) * cellSize * .5;\n    \t\t\tvec3 toLight = lightPos - pos;\n                vec3 lightDir = normalize(toLight);\n                float atten = 1.0 - clamp(length(toLight) / cellSize, 0.0, 1.0);\n\n                float diffuse = max(0.0, dot(lightDir, normal) * .75 + .25) * atten;\n                \n                vec3 lightColor = hash33(cellPos * 123.0) * 1.5;\n                \n                outColor += lightColor * diffuse;\n            }\n        }   \n    }\n    \n\n    return outColor;\n}\n\nIntersection Raymarch(Ray ray)\n{    \n    Intersection outData;\n    outData.sdf = 0.0;\n    outData.totalDistance = MIN_DISTANCE;\n        \n\tfor(int j = 0; j < MAX_STEPS; ++j)\n\t{\n        vec3 p = ray.origin + ray.direction * outData.totalDistance;\n\t\toutData.sdf = sdf(p);\n\t\toutData.totalDistance += outData.sdf;\n\n\t\tif(outData.sdf < EPSILON || outData.totalDistance > MAX_DISTANCE)\n            break;\n\t}\n    \n    return outData;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 rawUV = fragCoord / iResolution.xy;\n    vec2 uv = (-iResolution.xy + (fragCoord*2.0)) / iResolution.y;   \n    fragColor = vec4(0.0);\n    \n    #ifdef CINEMATIC_BARS\n    if(abs(uv.y) > .75)\n        return;\n    #endif\n    \n    Camera cam = LoadCamera(iChannel0);    \n    Ray ray = GetRay(cam, uv, .5, iTime);\n    Intersection isect = Raymarch(ray);\n    vec3 color = Render(ray, isect, uv);\n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define saturate(x) clamp(x, 0.0, 1.0)\n\nvec3 Debug(float t)\n{\n    vec3 c = vec3(0.478, 0.500, 0.500);\n    c += .5 * cos(6.28318 * (vec3(0.688, 0.748, 0.748) * t + vec3(0.318, 0.588, 0.908)));\n    return clamp(c, vec3(0.0), vec3(1.0));\n}\n\nstruct Intersection\n{\n    float totalDistance;\n    float sdf;\n    int materialID;\n};\n\nstruct Ray\n{\n\tvec3 origin;\n    vec3 direction;\n};\n\nstruct Camera\n{\n\tvec3 position;\n    vec3 direction;\n};\n    \nCamera LoadCamera(sampler2D tex)\n{\n\tCamera cam;\n    cam.position = texelFetch(tex, ivec2(0,0), 0).rgb;\n    cam.direction = normalize(texelFetch(tex, ivec2(0,1), 0).rgb);\n    return cam;\n}\n\nRay GetRay(Camera cam, vec2 uv, float zoom, float time)\n{\n    vec3 forward = normalize(cam.direction);\n    vec3 left = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));\n    vec3 up = normalize(cross(forward, left));\n\n    Ray ray;   \n    ray.origin = cam.position;\n    ray.direction = normalize(forward - left * uv.x * zoom - up * uv.y * zoom);        \n    return ray;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Controls\n#define KEY_W 87\n#define KEY_A 65\n#define KEY_S 83\n#define KEY_D 68\n\n#define KEY_UP 38\n#define KEY_DOWN 40\n#define KEY_LEFT 37\n#define KEY_RIGHT 39\n\n#define KEY_SPACEBAR 32\n\n#define KB_SENSITIVITY 0.1\n#define MOUSE_SENSITIVITY 2.0\n\nbool IsKeyPressed(int c)\n{\n\treturn texelFetch(iChannel0, ivec2(c, 0), 0).r > 0.0;\n}\n\nfloat GetKey(int c)\n{\n\treturn IsKeyPressed(c) ? KB_SENSITIVITY : 0.0;\n}\n\nCamera InitializeCamera()\n{\n    Camera cam;\n    cam.position = vec3(0.4, -.75, 10.0);\n    cam.direction = vec3(0.0, 0.0, -1.0);    \n    return cam;\n}\n\nvoid MoveCamera(inout Camera cam)\n{\n    cam.position += cam.direction * (GetKey(KEY_W) + GetKey(KEY_UP));\n    cam.position -= cam.direction * (GetKey(KEY_S) + GetKey(KEY_DOWN));\n    \n    vec3 right = cross(cam.direction, vec3(0.0, 1.0, 0.0));    \n    cam.position += right * (GetKey(KEY_A) + GetKey(KEY_LEFT));\n    cam.position -= right * (GetKey(KEY_D) + GetKey(KEY_RIGHT));\n}\n\n// iq / rodriguez\n// (yeah it's not the optimized version, this is camera logic)\nmat3x3 rotationAxisAngle( vec3 v, float a )\n{\n    float si = sin( a );\n    float co = cos( a );\n    float ic = 1.0f - co;\n\n    return mat3x3( v.x*v.x*ic + co,       v.y*v.x*ic - si*v.z,    v.z*v.x*ic + si*v.y,\n                   v.x*v.y*ic + si*v.z,   v.y*v.y*ic + co,        v.z*v.y*ic - si*v.x,\n                   v.x*v.z*ic - si*v.y,   v.y*v.z*ic + si*v.x,    v.z*v.z*ic + co );\n}\n\nvec4 HandleMouse(out vec2 mouseDelta)\n{\n\tvec4 prevMouse = texelFetch(iChannel1, ivec2(0, 2), 0);\n    vec4 mouse = iMouse;\n    mouseDelta = vec2(0.0);\n    \n    if(iMouse.z > 0.0)\n    {\n        if(prevMouse.z > 0.0)\n        \tmouseDelta = mouse.xy - prevMouse.xy;\n        \n        return mouse;\n    }\n    \n    return vec4(0.0);\n}\n\n\nvoid RotateCamera(inout Camera cam, vec2 mouseDelta)\n{\n\tvec2 mouse = -mouseDelta.xy * MOUSE_SENSITIVITY / iResolution.xy;\n    \n    // Add more sensitivity over edges coz the screen is small D:\n    float distanceToEdges = length((iMouse.xy / iResolution.xy) * 2.0 - 1.0);\n    mouse *= 1.0 + distanceToEdges;\n    \n    vec3 right = cross(cam.direction, vec3(0.0, 1.0, 0.0));\n    cam.direction = rotationAxisAngle(vec3(0.0, 1.0, 0.0), mouse.x) * cam.direction;\n    cam.direction = rotationAxisAngle(right, mouse.y) * cam.direction;\n}\n\nvoid mainImage( out vec4 outColor, in vec2 fragCoord )\n{    \n    ivec2 coord = ivec2(fragCoord);\n    outColor = vec4(0.0,0.0,0.0,1.0);\n    Camera cam = LoadCamera(iChannel1);\n    \n    if(iFrame == 0 || IsKeyPressed(KEY_SPACEBAR))\n        cam = InitializeCamera();\n    \n    vec2 mouseDelta;\n    vec4 mouse = HandleMouse(mouseDelta);\n    MoveCamera(cam);\n    RotateCamera(cam, mouseDelta);\n    \n    if(coord.y == 0)\n        outColor = vec4(cam.position, 0.0);\n    else if(coord.y == 1)\n        outColor = vec4(cam.direction, 0.0);\n    else if(coord.y == 2)\n        outColor = mouse;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}