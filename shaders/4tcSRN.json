{
    "Shader": {
        "info": {
            "date": "1478301843",
            "description": "Newton Fractal example",
            "flags": 0,
            "hasliked": 0,
            "id": "4tcSRN",
            "likes": 2,
            "name": "Procedural Newton Fractal",
            "published": 3,
            "tags": [
                "procedural",
                "fractal",
                "newton"
            ],
            "usePreview": 0,
            "username": "maldicion069",
            "viewed": 660
        },
        "renderpass": [
            {
                "code": "vec2 o = vec2(.0);\nconst int t = 100;\nfloat z = 3.;\n\nvec2 g(vec2 n) {\n    return vec2(\n        n.x*n.x*n.x - 3.*n.x*n.y*n.y - 1.,\n        -n.y*n.y*n.y + 3.*n.x*n.x*n.y\n    );\n}\nvec2 dg(vec2 n) {\n    return 3. * vec2(\n        n.x*n.x - n.y*n.y,\n        2. * n.x * n.y\n    );\n}\nvec2 cdiv(vec2 a, vec2 b) {\n    float d = dot(b, b);\n    if(d == 0.) return a;\n    else return vec2(\n        (a.x*b.x + a.y*b.y),\n        (a.y*b.x - a.x*b.y)) / d;;\n}\n\nint it(vec2 z) {\n    for(int i = 0; i < t; ++i) {\n        vec2 n = z - cdiv(g(z), dg(z)) + o;\n        if(distance(n, z) < .00001) return i;\n        z = n;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 c, vec2 f )\n{\n    int i = it(vec2(z * (f / iResolution.xy - .5)));\n    c = vec4(vec3(float(i) / float(t)), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}