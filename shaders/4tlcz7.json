{
    "Shader": {
        "info": {
            "date": "1504116007",
            "description": "Assemble your toy train, watch it run day and night, then put it away (based on \"Toy Train\", mouse enabled)",
            "flags": 0,
            "hasliked": 0,
            "id": "4tlcz7",
            "likes": 15,
            "name": "Train Builder",
            "published": 3,
            "tags": [
                "raymarching",
                "modeling",
                "font",
                "train"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 785
        },
        "renderpass": [
            {
                "code": "// \"Train Builder\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txFnt iChannel0\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nint GetTxChar (vec2 p);\nfloat SmoothMin (float a, float b, float r);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nfloat Noisefv2 (vec2 p);\n\nmat3 trainMat[3], trMat;\nvec3 trainPos[3], trPos, qHit, qtTxt, ltDir;\nvec2 fntSize, qnFnt, qnTxt;\nfloat tCur, dstFar, tRun, tPlay, tBuild, trVel, trkRad, trkLin, trkWid, gHt, azRot, rngBlk;\nint idObj, idTxt;\nbool showObj[8], onTxt, onTrk, sigStop, isShad, isDark;\nconst float pi = 3.14159;\n\n#define ID_Eng    1\n#define ID_Cabin  2\n#define ID_Coal   3\n#define ID_Base   4\n#define ID_Band   4\n#define ID_Axle   4\n#define ID_Car    5\n#define ID_Roof   6\n#define ID_Wheel  7\n#define ID_Spoke  7\n#define ID_Crod   8\n#define ID_Funl   9\n#define ID_Funt   10\n#define ID_Stripe 10\n#define ID_Lamp   11\n#define ID_Rail   12\n#define ID_Tie    13\n#define ID_Plat   14\n#define ID_Sig    15\n#define ID_SigV   16\n#define ID_Cpl    17\n#define ID_Tun    18\n#define ID_Grnd   19\n#define ID_Tree   20\n#define ID_Trunk  21\n\n#define SH_Engn  0\n#define SH_Cars  1\n#define SH_TrkCv 2\n#define SH_TrkSt 3\n#define SH_Plat  4\n#define SH_Sig   5\n#define SH_Tun   6\n#define SH_Tree  7\n\nfloat EngDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float wRad, d, aw, sx;\n  wRad = 0.8;\n  q = p - vec3 (0., -0.2, 0.5);\n  d = max (PrCapsDf (q, 1., 2.), - (q.z + 1.7));\n  if (d < dMin) { dMin = d;  idObj = ID_Eng; }\n  q = p;  q.z = abs (q.z - 0.85);  q -= vec3 (0., -0.2, 1.8);\n  d = PrCylDf (q, 1.05, 0.05);\n  if (d < dMin) { dMin = d;  idObj = ID_Band; }\n  q = p - vec3 (0., -1.3, -0.25);\n  d = PrBoxDf (q, vec3 (1., 0.1, 3.2));\n  if (d < dMin) { dMin = d;  idObj = ID_Base; }\n  q = p - vec3 (0., -1.4, 3.);\n  d = PrBoxDf (q, vec3 (1.1, 0.2, 0.07));\n  if (d < dMin) { dMin = d;  idObj = ID_Base; }\n  q.x = abs (q.x);  q -= vec3 (0.6, 0., 0.1);\n  d = PrCylDf (q, 0.2, 0.1);\n  if (d < dMin) { dMin = d;  idObj = ID_Roof; }\n  q = p - vec3 (0., 0.01, -1.75);\n  d = max (max (PrBoxDf (q, vec3 (1., 1.4, 0.6)),\n     - PrBoxDf (q - vec3 (0., 0., -0.2), vec3 (0.95, 1.3, 0.65))),\n     - PrBoxDf (q - vec3 (0., 0.7, 0.), vec3 (1.1, 0.4, 0.5)));\n  q.x = abs (q.x);  q -= vec3 (0.4, 1., 0.4);\n  d = max (d, - PrBoxDf (q, vec3 (0.35, 0.15, 0.3)));\n  if (d < dMin) { dMin = d;  idObj = ID_Cabin;  qHit = q; }\n  q = p - vec3 (0., -2.4, -1.75);\n  d = max (PrCylDf (q, 4., 0.65), - (q.y - 3.75));\n  if (d < dMin) { dMin = d;  idObj = ID_Roof; }\n  q = p - vec3 (0., -0.5, -3.15);\n  d = PrBoxDf (q, vec3 (1., 0.7, 0.3));\n  if (d < dMin) { dMin = d;  idObj = ID_Coal;  qHit = q; }\n  q = p - vec3 (0., -1.4, -3.5);\n  d = PrCylDf (q.xzy, 0.4, 0.03);\n  if (d < dMin) { dMin = d;  idObj = ID_Cpl; }\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (trkWid - 0.12, -1.4, 1.1);\n  d = min (max (min (PrCylDf (q.zyx, wRad, 0.1),\n     PrCylDf (q.zyx - vec3 (0.,0., -0.07), wRad + 0.05, 0.03)),\n     - PrCylDf (q.zyx, wRad - 0.1, 0.12)), PrCylDf (q.zyx, 0.15, 0.10));\n  if (d < dMin) { dMin = d;  idObj = ID_Wheel; }\n  if (! isShad) {\n    q = p;  q.x = abs (q.x);  q -= vec3 (trkWid - 0.17, -1.4, 1.1 * sign (q.z));\n    aw = - (trVel / wRad) * tRun;\n    q.yz = Rot2D (q.yz, aw);  \n    q.yz = Rot2D (q.yz, 2. * pi * floor ((atan (q.y, q.z) + pi) * 8. /\n       (2. * pi) + 0.5) / 8.);\n    q.z += 0.5 * wRad;\n    d = PrCylDf (q, 0.05, 0.5 * wRad);\n    if (d < dMin) { dMin = d;  idObj = ID_Spoke; }\n    q = p;\n    sx = sign (q.x);\n    q.x = abs (q.x);  q -= vec3 (trkWid + 0.08, -1.4, 0.);\n    aw -= 0.5 * pi * sx; \n    q.yz -= 0.3 * vec2 (cos (aw), - sin (aw));\n    d = PrCylDf (q, 0.04, 1.2);\n    if (d < dMin) { dMin = d;  idObj = ID_Crod; }\n    q.z = abs (q.z);  q -= vec3 (-0.1, 0., 1.1);\n    d = PrCylDf (q.zyx, 0.06, 0.15);\n    if (d < dMin) { dMin = d;  idObj = ID_Crod; }\n    q = p;  q.z = abs (q.z);  q -= vec3 (0., -1.4, 1.1);\n    d = PrCylDf (q.zyx, 0.1, trkWid - 0.1);\n    if (d < dMin) { dMin = d;  idObj = ID_Axle; }\n    q = p - vec3 (0., 1.1, 2.15);\n    d = PrCylDf (q.xzy, 0.3, 0.5);\n  }\n  if (d < dMin) { dMin = d;  idObj = ID_Funl; }\n  q = p - vec3 (0., 1.5, 2.15);\n  d = max (PrCylDf (q.xzy, 0.4, 0.15), - PrCylDf (q.xzy, 0.3, 0.2));\n  if (d < dMin) { dMin = d;  idObj = ID_Funt; }\n  q = p - vec3 (0., 0.8, 0.55);\n  d = PrCapsDf (q.xzy, 0.3, 0.2);\n  if (d < dMin) { dMin = d;  idObj = ID_Funt; }\n  q = p;  q.x = abs (q.x);  q -= vec3 (1., -0.2, 0.85);\n  d = PrBoxDf (q, vec3 (0.05, 0.1, 1.8));\n  if (d < dMin) { dMin = d;  idObj = ID_Stripe; }\n  q = p;  q.x = abs (q.x);  q -= vec3 (1., -0.2, -1.75);\n  d = PrBoxDf (q, vec3 (0.05, 0.1, 0.6));\n  if (d < dMin) { dMin = d;  idObj = ID_Stripe; }\n  q = p;  q.x = abs (q.x);  q -= vec3 (1., -0.2, -3.15);\n  d = PrBoxDf (q, vec3 (0.05, 0.1, 0.3));\n  if (d < dMin) { dMin = d;  idObj = ID_Stripe; }\n  q = p - vec3 (0., -0.2, 3.5);\n  d = PrCylDf (q, 0.2, 0.1);\n  if (d < dMin) { dMin = d;  idObj = ID_Lamp; }\n  return dMin;\n}\n\nfloat CarDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float wRad, d;\n  wRad = 0.35;\n  q = p;\n  d = max (max (PrBoxDf (q, vec3 (1.3, 1.4, 2.8)),\n     - PrBoxDf (q, vec3 (1.2, 1.3, 2.7))), - PrBoxDf (q, vec3 (0.5, 1., 2.9)));\n  q.z = abs (q.z);  q -= vec3 (0., 0.6, 1.2);\n  d = max (d, - PrBoxDf (q, vec3 (1.4, 0.7, 1.1)));\n  if (d < dMin) { dMin = d;  idObj = ID_Car; qHit = q; }\n  q = p;  q.y -= -2.35;\n  d = max (PrCylDf (q, 4., 2.8), - (q.y - 3.75));\n  if (d < dMin) { dMin = d;  idObj = ID_Roof; }\n  q = p;  q.z = abs (q.z);  q -= vec3 (0., -0.2, 2.75);\n  d = PrCylDf (q.zyx, 0.05, 0.5);\n  if (d < dMin) { dMin = d;  idObj = ID_Roof;  qHit = q; }\n  q = p;  q.y -= -1.6;\n  d = PrBoxDf (q, vec3 (0.8, 0.3, 2.));\n  if (d < dMin) { dMin = d;  idObj = ID_Base; }\n  q = p;  q.z = abs (q.z);  q -= vec3 (0., -1.4, 2.9);\n  d = PrCylDf (q.xzy, 0.4, 0.03);\n  if (d < dMin) { dMin = d;  idObj = ID_Cpl; }\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (trkWid - 0.12, -1.85, 1.1);\n  d = min (min (PrCylDf (q.zyx, wRad, 0.1),\n     PrCylDf (q.zyx - vec3 (0.,0., -0.07), wRad + 0.05, 0.03)),\n     PrCylDf (q.zyx, 0.15, 0.10));\n  q.x -= 0.1;\n  d = max (d, - PrCylDf (q.zyx, 0.2, 0.05));\n  if (d < dMin) { dMin = d;  idObj = ID_Wheel; }\n  q = p;  q.z = abs (q.z);  q -= vec3 (0., -1.85, 1.1);\n  d = PrCylDf (q.zyx, 0.1, trkWid - 0.15);\n  if (d < dMin) { dMin = d;  idObj = ID_Axle; }\n  q = p;  q.x = abs (q.x);  q -= vec3 (1.3, -0.2, 0.);\n  d = PrBoxDf (q, vec3 (0.05, 0.1, 2.8));\n  if (d < dMin) { dMin = d;  idObj = ID_Stripe; }\n  return dMin;\n}\n\nfloat TrackDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, dbs, dbc, nt, gap;\n  q = p;\n  if (onTrk) {\n    if (! showObj[SH_TrkSt]) dbs = PrBox2Df (q.xz, vec2 (trkRad + 1.4 * trkWid, 0.6 * trkLin));\n    if (! showObj[SH_TrkCv]) dbc = PrBox2Df (vec2 (q.x, abs (q.z) - 0.6 * trkLin - 0.5 * trkRad - trkWid),\n       vec2 (trkRad + 1.4 * trkWid, 0.5 * trkRad + 1.4 * trkWid));\n    q.z -= 0.5 * trkLin * clamp (p.z / (0.5 * trkLin), -1., 1.);\n    q.x = abs (length (q.xz) - trkRad);\n    q -= vec3 (trkWid - 0.03, - gHt + 0.45, 0.);\n    d = length (max (abs (q.xy) - vec2 (0.07, 0.13), 0.));\n    if (! showObj[SH_TrkSt]) d = max (d, - dbs);\n    if (! showObj[SH_TrkCv]) d = max (d, - dbc);\n  } else {\n    q.x = abs (q.x);  q -= vec3 (trkWid - 0.03, - gHt + 0.45, 0.);\n    d = max (length (max (abs (q.xy) - vec2 (0.07, 0.13), 0.)),\n       abs (q.z) - 0.5 * trkLin);\n  }\n  if (d < dMin) { dMin = d;  idObj = ID_Rail; }\n  q = p;\n  if (onTrk) q.x = abs (q.x) - trkRad;\n  q -= vec3 (0., - gHt + 0.2, 0.);\n  nt = 2.;\n  gap = trkLin / nt;\n  q.z = mod (q.z + 0.5 * gap, gap) - 0.5 * gap;\n  d = PrBoxDf (q, vec3 (trkWid + 0.5, 0.2, 0.4));\n  q = p;  q.y -= - gHt + 0.2;\n  d = max (d, PrBoxDf (q, vec3 (trkRad + 3., 2., 0.5 * trkLin + 2.)));\n  if (onTrk) {\n    if (! showObj[SH_TrkSt]) d = max (d, - dbs);\n  }\n  if (d < dMin) { dMin = d;  idObj = ID_Tie; }\n  if (onTrk) {\n    q = p;  q.x = abs (q.x);  q -= vec3 (0., - gHt + 0.2, 0.5 * trkLin * sign (q.z));\n    nt = 12.;\n    q.xz = Rot2D (q.xz, 2. * pi * floor ((atan (q.x, q.z) + pi) *\n       nt / (2. * pi) + 0.5) / nt);\n    q.z -= - trkRad;\n    d = PrBoxDf (q, vec3 (0.4, 0.2, trkWid + 0.5));\n    q = p;  q.y -= - gHt + 0.2;\n    d = max (d, - PrBoxDf (q, vec3 (trkRad + 3., 2., 0.5 * trkLin + 2.)));\n    if (! showObj[SH_TrkCv]) d = max (d, - dbc);\n    if (d < dMin) { dMin = d;  idObj = ID_Tie; }\n    if (showObj[SH_Plat]) {\n      q = p - vec3 (trkRad - trkWid - 2., - gHt + 0.6, 0.);\n      d = 0.8 * max (PrBoxDf (q, vec3 (trkWid, 0.4, 14.)), 0.5 * (abs (q.z) - 8.) + q.y);\n      q -= vec3 (-1.2, 1.9, 0.);\n      d = min (d, PrBoxDf (q, vec3 (0.2, 1.8, 5.)));\n      q.z = abs (q.z) - 2.4;\n      d = max (d,  - PrBoxDf (q, vec3 (0.3, 1.3, 1.7)));\n      if (d < dMin) { dMin = d;  idObj = ID_Plat;  qHit = q; }\n    }\n    if (showObj[SH_Sig]) {\n      q = p - vec3 (trkRad - trkWid - 2.5, 0.8, 6.);\n      d = PrCylDf (q.xzy, 0.15, 3.);\n      if (d < dMin) { dMin = d;  idObj = ID_SigV; }\n      q.y -= 3.;\n      d = PrSphDf (q, 0.35);\n      if (d < dMin) { dMin = d;  idObj = ID_Sig; } \n    }\n    if (showObj[SH_Tun]) {\n      q = p - vec3 (0., - gHt, trkRad + 0.5 * trkLin - 0.5 * trkWid);\n      d = max (PrCylAnDf (q.yzx, 5.5, 0.2, 6.), - q.y);\n      if (d < dMin) { dMin = d;  idObj = ID_Tun;  qHit = q; } \n    }\n    q = p;  q.y -= - gHt;\n    d = PrBoxDf (q, vec3 (trkRad + trkWid + 4., 0.1,\n       trkRad + 0.5 * trkLin + trkWid + 4.));\n    if (d < dMin) { dMin = d;  idObj = ID_Grnd;  qHit = q; } \n    if (showObj[SH_Tree]) {\n      q = p;  q.xz = abs (q.xz) - vec2 (0.4 * trkRad, 0.7 * trkLin);  q.y -= - gHt + 3.;\n      d = PrCylDf (q.xzy, 0.3, 3.);\n      if (d < dMin) { dMin = d;  idObj = ID_Trunk;  qHit = q; } \n      q.y -= 2.5;\n      d = SmoothMin (PrSphDf (q, 1.5), PrSphDf (q - vec3 (0., 1.4, 0.), 1.2), 0.5);\n      if (d < dMin) { dMin = d;  idObj = ID_Tree;  qHit = q; } \n    }\n  }\n  return dMin;\n}\n\nvoid TrainCarPM (float s)\n{\n  float a, ca, sa;\n  if (onTrk) {\n    s = mod (s, 2. * (pi * trkRad + trkLin));\n    if (s < trkLin) {\n      trPos = vec3 (trkRad, 0., s - 0.5 * trkLin);\n      ca = 1.;  sa = 0.;\n    } else if (s < trkLin + pi * trkRad) {\n      a = (s - trkLin) / trkRad;\n      ca = cos (a);  sa = sin (a);\n      trPos = vec3 (trkRad * ca, 0., 0.5 * trkLin + trkRad * sa);\n    } else if (s < 2. * trkLin + pi * trkRad) {\n      trPos = vec3 (- trkRad, 0., 1.5 * trkLin + pi * trkRad - s);\n      ca = -1.;  sa = 0.;\n    } else {\n      a = (s - (pi * trkRad + 2. * trkLin)) / trkRad + pi;\n      ca = cos (a);  sa = sin (a);\n      trPos = vec3 (trkRad * ca, 0., - 0.5 * trkLin + trkRad * sa);\n    }\n  } else {\n    trPos = vec3 (0., 0., 0.3 * trkLin + s);\n    ca = 1.;  sa = 0.;\n  }\n  trMat = mat3 (ca, 0., - sa, 0., 1., 0., sa, 0., ca);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  for (int k = 0; k < 3; k ++) {\n    if (k == 0 && showObj[SH_Engn] || k > 0 && showObj[SH_Cars]) {\n      q = p - trainPos[k];\n      d = PrCylDf (q.xzy, 4., 2.);\n      dMin = (isShad || d < 0.2) ? ((k == 0) ? EngDf (trainMat[k] * q, dMin) :\n         CarDf (trainMat[k] * q, dMin)) : min (dMin, d);\n    }\n  }\n  dMin = TrackDf (p, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  const float dTol = 0.001;\n  float d;\n  float dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < dTol || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy),\n     ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dMax)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += 0.3;\n    if (sh < 0.05 || d > dMax) break;\n  }\n  return sh;\n}\n\nvec3 BrickSurfCol (vec2 p) \n{\n  vec2 q = p * (1. / 20.);\n  vec2 i = floor (q);\n  if (2. * floor (i.y / 2.) != i.y) {\n    q.x += 0.5;\n    i = floor (q);\n  }\n  q = smoothstep (0.02, 0.04, abs (fract (q + 0.5) - 0.5));\n  return (1. + Noisefv2 (10. * p)) * (0.5 + 0.5 * q.x * q.y) *\n     (0.3 + 0.2 * sin (2. * Hashfv2 (i) + vec3 (1., 1.2, 1.4)));\n}\n\nvec3 BrickCol (vec3 p, vec3 n)\n{\n  n = abs (n);\n  p *= 60.;\n  return BrickSurfCol (p.zy) * n.x + BrickSurfCol (p.xz) * n.y +\n     BrickSurfCol (p.xy) * n.z;\n}\n\nvec4 ObjCol (vec3 n)\n{\n  const vec4 cLo = vec4 (0.4, 0.2, 0.1, 0.3), cHi = vec4 (0., 0.8, 0., 0.5),\n     cBlk = vec4 (vec3 (0.01), 0.1), cCab = vec4 (0.2, 0.2, 0.8, 0.5),\n     cRf = vec4 (0.8, 0.1, 0.1, 0.5);\n  vec4 col4;\n  if (idObj == ID_Grnd) col4 =\n     vec4 (0., 0.2, 0., 0.) + 0.03 * Noisefv2 (10. * qHit.xz);\n  else if (idObj == ID_Tun) col4 = vec4 (0.4, 0.3, 0.2, 0.03) *\n     (1. - 0.4 * Noisefv2 (vec2 (500. * (1. + atan (qHit.y, qHit.z) / pi), 25. * qHit.x)));\n  else if (idObj == ID_Eng) col4 = cHi;\n  else if (idObj == ID_Cabin) col4 = (qHit.y > -1.3) ? cCab : cLo;\n  else if (idObj == ID_Coal)\n     col4 = (qHit.y > 0.3) ? ((n.y > 0.9) ? cBlk : cCab) : cLo;\n  else if (idObj == ID_Base || idObj == ID_Band || idObj == ID_Axle)\n     col4 = vec4 (0.3, 0.2, 0.2, 0.3);\n  else if (idObj == ID_Car) col4 = (qHit.y > -0.8) ? cHi : cLo;\n  else if (idObj == ID_Roof) col4 = cRf;\n  else if (idObj == ID_Wheel || idObj == ID_Spoke) col4 = vec4 (0.5, 0.5, 0.6, 1.);\n  else if (idObj == ID_Crod) col4 = vec4 (0.7, 0.7, 0.1, 1.);\n  else if (idObj == ID_Funl) col4 = (n.y > 0.9) ? cBlk : cRf;\n  else if (idObj == ID_Stripe || idObj == ID_Funt) col4 = vec4 (1., 1., 0., 0.5);\n  else if (idObj == ID_Lamp)\n     col4 = (isDark || mod (tCur, 2.) < 1.) ? vec4 (1., 1., 0.7, -1.) : vec4 (0.8, 0.8, 0.4, -1.);\n  else if (idObj == ID_Rail) col4 = vec4 (0.8, 0.8, 0.8, 0.5);\n  else if (idObj == ID_Tie) col4 = vec4 (0.4, 0.2, 0.1, 0.1);\n  else if (idObj == ID_Plat)\n     col4 = vec4 (vec3 (0.5, 0.3, 0.3) * BrickCol (0.3 * qHit, n), 0.1);\n  else if (idObj == ID_Sig)\n     col4 = sigStop ? vec4 (1., 0., 0., -1.) : vec4 (0., 1., 0., -1.);\n  else if (idObj == ID_Cpl) col4 = vec4 (0.2, 0.1, 0.2, 0.2);\n  else if (idObj == ID_SigV) col4 = vec4 (0.8, 0.4, 0.2, 0.5);\n  else if (idObj == ID_Tree) col4 = vec4 (0., 0.4, 0., 0.) *\n     (1. - 0.5 * Noisefv2 (vec2 (50. * (1. + atan (qHit.x, qHit.z) / pi), 20. * qHit.y)));\n  else if (idObj == ID_Trunk) col4 = vec4 (0.4, 0.1, 0., 0.1) *\n     (1. - 0.3 * Noisefv2 (vec2 (30. * (1. + atan (qHit.x, qHit.z) / pi), 10. * qHit.y)));\n  return col4;\n}\n\nfloat FontTexDf (vec2 p)\n{\n  vec3 tx;\n  float d;\n  int ic;\n  ic = GetTxChar (p);\n  if (ic != 0) {\n    tx = texture (txFnt, mod ((vec2 (mod (float (ic), 16.),\n       15. - floor (float (ic) / 16.)) + fract (p)) * (1. / 16.), 1.)).gba - 0.5;\n    qnFnt = vec2 (tx.r, - tx.g);\n    d = tx.b + 1. / 256.;\n  } else d = 1.;\n  return d;\n}\n\nfloat ObjRayT (vec3 ro, vec3 rd)\n{\n  vec3 p, rdi;\n  vec2 srd, h;\n  float dHit, d;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  srd = - sign (rd.xy);\n  rdi = 1. / abs (rd.xyz);\n  dHit = 0.;\n  ro.xy /= fntSize.x;\n  rd.xy /= fntSize.x;\n  for (int j = 0; j < 100; j ++) {\n    p = ro + dHit * rd;\n    h = rdi.xy * fract (srd * p.xy);\n    d = max (min (fntSize.x, 1.) * FontTexDf (p.xy), abs (p.z) - 0.5 * fntSize.y);\n    dHit += min (d, 0.01 + fntSize.x * min (h.x, h.y));\n    if (d < 0.0001 || dHit > rngBlk) break;\n  }\n  if (d >= 0.0001) dHit = dstFar;\n  return dHit;\n}\n\nfloat BlkHit (vec3 ro, vec3 rd, vec3 bSize)\n{\n  vec3 v, tm, tp;\n  float dMin, dn, df;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    rngBlk = df - dn;\n  }\n  return dMin;\n}\n\nfloat DstTxt (vec3 ro, vec3 rd)\n{\n  vec3 q, qt;\n  float db, d, dstTxt;\n  rd.xz = Rot2D (rd.xz, - azRot);\n  dstTxt = dstFar;\n  for (int k = 0; k <= 7; k ++) {\n    idTxt = -1;\n    if (k == 0 && showObj[SH_Engn]) {\n      qt = trainPos[k] + vec3 (0., 2.5, 0.);\n      idTxt = k;\n    } else if (k < 3 && showObj[SH_Cars]) {\n      qt = trainPos[k] + vec3 (0., 2.5, 0.);\n      idTxt = k;\n    } else if (k == 3 && (onTrk && showObj[SH_TrkSt] || ! onTrk)) {\n      qt = (onTrk) ? vec3 (- trkRad + trkWid + 5., - gHt + 1., 0.) : vec3 (trkWid + 1., -3., 0.);\n      idTxt = k;\n    } else if (k == 4 && onTrk && showObj[SH_Plat]) {\n      qt = vec3 (trkRad - trkWid - 3., 3., 0.);\n      idTxt = k;\n    } else if (k == 5 && onTrk && showObj[SH_Sig]) {\n      qt = vec3 (trkRad - trkWid - 3., 5., 6.);\n      idTxt = k;\n    } else if (k == 6 && onTrk && showObj[SH_Tun]) {\n      qt = vec3 (0., 4., trkRad + 0.5 * trkLin - trkWid);\n      idTxt = k;\n    } else if (k == 7 && onTrk && showObj[SH_Tree]) {\n      qt = vec3 (-0.4 * trkRad, - gHt + 1., -0.7 * trkLin + 3.);\n      idTxt = k;\n    }\n    if (idTxt >= 0) {\n      qt.y -= 0.5 * fntSize.x;\n      q = ro - qt;\n      q.xz = Rot2D (q.xz, - azRot);\n      db = BlkHit (q, rd, vec3 (4. * fntSize.x, fntSize.x, 0.5 * fntSize.y));\n      if (db < dstFar) {\n        d = db + ObjRayT (q + db * rd, rd);\n        if (d < dstTxt) {\n          dstTxt = d;\n          qtTxt = qt;\n          qnTxt = qnFnt;\n        }\n      }\n    }\n  }\n  return dstTxt;\n}\n\nvoid SetState ()\n{\n  float t;\n  tBuild = 14.;\n  t = mod (tCur, tPlay);\n  onTrk = (t < 8. || t > tBuild);\n  onTxt = (t < tBuild + 9.);\n  if (t < 0.5 * tPlay) {\n    showObj[SH_TrkSt] = (t > 2.);\n    showObj[SH_TrkCv] = (t > 3.);\n    showObj[SH_Plat] = (t > 4.);\n    showObj[SH_Sig] = (t > 5.);\n    showObj[SH_Tun] = (t > 6.);\n    showObj[SH_Tree] = (t > 7.);\n    showObj[SH_Engn] = (t > 9.);\n    showObj[SH_Cars] = (t > 10.);\n  } else {\n    t = tPlay - t + 0.5;\n    showObj[SH_TrkSt] = (t > 1.);\n    showObj[SH_TrkCv] = (t > 2.);\n    showObj[SH_Plat] = (t > 3.);\n    showObj[SH_Sig] = (t > 3.);\n    showObj[SH_Tun] = (t > 4.);\n    showObj[SH_Tree] = (t > 5.);\n    showObj[SH_Engn] = (t > 6.);\n    showObj[SH_Cars] = (t > 7.);\n  }\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 vn, objCol, col, ds, ld;\n  float dstHit, dstTxt, sh, lDist, f;\n  bool isBg;\n  isBg = false;\n  dstTxt = (onTxt) ? DstTxt (ro, rd) : dstFar;\n  isShad = false;\n  dstHit = ObjRay (ro, rd);\n  if (min (dstHit, dstTxt) < dstFar) {\n    if (dstHit < dstTxt) {\n      ro += rd * dstHit;\n      vn = (idObj != ID_Grnd) ? ObjNf (ro) : vec3 (0., 1., 0.);\n      col4 = ObjCol (vn);\n      isShad = true;\n      col = col4.xyz;\n      if (col4.w >= 0.) {\n        if (isDark) {\n          ld = ro - (trainPos[0] + vec3 (0., -0.2, 3.6) * trainMat[0]);\n          lDist = length (ld);\n          ld = normalize (ld);\n          f = pow (max (dot (ld, vec3 (0., 0., 1.) * trainMat[0]), 0.), 1.5);\n          sh = (f > 0.) ? ObjSShadow (ro, - ld, lDist - 0.5) : 1.;\n          col *= 0.2 + 0.2 * max (vn.y, 0.) + sh * f * min (1., 100. * pow (1. + lDist, -2.));\n          if (f > 0.) col += sh * col4.w * pow (max (dot (normalize (- ld - rd), vn), 0.), 64.);\n        } else {\n          sh = (onTrk) ? 0.4 + 0.6 * ObjSShadow (ro, ltDir, dstFar) : 1.;\n          col *= 0.2 + 0.1 * max (dot (vn, - normalize (vec3 (ltDir.x, 0., ltDir.z))), 0.) +\n             sh * 0.8 * max (dot (vn, ltDir), 0.);\n          col += sh * col4.w * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.);\n        }\n      } else col *= clamp (0.6 - 0.5 * dot (rd, vn), 0., 1.);\n    } else if (dstTxt < dstFar) {\n      ro += rd * dstTxt;\n      ds = ro - qtTxt;\n      ds.xz = Rot2D (ds.xz, - azRot);\n      if (abs (ds.z) < 0.49 * fntSize.y) {\n        col = vec3 (0.3, 0.3, 1.);\n        vn = normalize (vec3 (qnTxt, 0.00001));\n      } else {\n        col = vec3 (0.7, 0.7, 1.);\n        vn = vec3 (0., 0., sign (ds.z));\n      }\n      ld = normalize (vec3 (1., 1., -1.));\n      col = col * (0.5 + 0.5 * max (dot (ld, vn), 0.)) +\n         0.5 * pow (max (dot (normalize (ld - rd), vn), 0.), 64.);\n    } else isBg = true;\n  } else isBg = true;\n  if (isBg) col = vec3 (0.1, 0.1, 0.2) * (0.6 + 0.4 * rd.y) * (isDark ? 0.5 : 1.);\n  col = pow (clamp (col, 0., 1.), vec3 (0.8));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, dist, tCirc, tPause, tHalt, s;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  trkRad = 20.;\n  trkLin = 20.;\n  trkWid = 1.42;\n  gHt = 2.8;\n  trVel = 6.;\n  tPlay = 120.;\n  SetState ();\n  fntSize = vec2 (0.8, 0.1);\n  if (onTrk) fntSize *= 1.5;\n  tCirc = 2. * (pi * trkRad + trkLin) / trVel;\n  tPause = 0.1 * tCirc;\n  tCirc += tPause;\n  if (onTrk) {\n    tRun = mod (tCur, tPlay);\n    s = floor ((tRun - tBuild) / tCirc);\n    isDark = (s == 1.);\n    tRun = (tRun > tBuild) ? mod (tRun - tBuild, tCirc) : 0.;\n    tHalt = trkLin / trVel;\n    sigStop = (tRun < tHalt + 0.8 * tPause);\n    if (tRun > tHalt + tPause) tRun = tRun - tPause;\n    else if (tRun > tHalt) tRun = tHalt;\n  } else {\n    tRun = 0.;\n    isDark = false;\n  }\n  for (int k = 0; k < 3; k ++) {\n    s = trVel * tRun;\n    if (k == 1) s -= 7.;\n    else if (k == 2) s -= 13.4;\n    TrainCarPM (s);\n    trainPos[k] = trPos;\n    trainMat[k] = trMat;\n  }\n  if (onTrk) {\n    dist = 2. * (trkRad + 0.5 * trkLin + 10.);\n  } else {\n    dist = 1.5 * trkLin;\n    trVel = 1.;\n    tRun = tCur;\n  }\n  ro = vec3 (0., 0., - dist);\n  rd = normalize (vec3 (uv, 3.2));\n  el = 0.15 * pi;\n  az = 0.5 * pi;\n  if (mPtr.z > 0.) {\n    el -= pi * mPtr.y;\n    el = (onTrk) ? clamp (el, 0., 0.45 * pi) : clamp (el, -0.4 * pi, 0.4 * pi);\n    az -= 2.3 * pi * mPtr.x;\n  } else {\n    el -=  0.05 * pi * sin (0.02 * pi * tCur);\n    az -= -0.4 * pi + (4. * pi / tPlay) * tCur;\n  }\n  azRot = az;\n  ltDir = normalize (vec3 (0.3, 0.4, -1.));\n  rd.yz = Rot2D (rd.yz, el);\n  ro.yz = Rot2D (ro.yz, el);\n  rd.xz = Rot2D (rd.xz, az);\n  ro.xz = Rot2D (ro.xz, az);\n  ltDir.yz = Rot2D (ltDir.yz, el);\n  ltDir.xz = Rot2D (ltDir.xz, az);\n  if (onTrk) ro.y -= gHt + 0.2;\n  dstFar = 150.;\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n\n#define CP(i) _nc += i\n#define C(c) _ic = (_nc -- == 0) ? (c) : _ic;\n\n#define _SP    C(0x20)\n#define _EXCL  C(0x21)\n#define _QUOT  C(0x22)\n#define _NUM   C(0x23)\n#define _DOLLR C(0x24)\n#define _PCENT C(0x25)\n#define _AMP   C(0x26)\n#define _SQUOT C(0x27)\n#define _LPAR  C(0x28)\n#define _RPAR  C(0x29)\n#define _AST   C(0x2A)\n#define _PLUS  C(0x2B)\n#define _COMMA C(0x2C)\n#define _MINUS C(0x2D)\n#define _PER   C(0x2E)\n#define _SLASH C(0x2F)\n#define _0     C(0x30)\n#define _1     C(0x31)\n#define _2     C(0x32)\n#define _3     C(0x33)\n#define _4     C(0x34)\n#define _5     C(0x35)\n#define _6     C(0x36)\n#define _7     C(0x37)\n#define _8     C(0x38)\n#define _9     C(0x39)\n#define _COLON C(0x3A)\n#define _SEMI  C(0x3B)\n#define _LT    C(0x3C)\n#define _EQUAL C(0x3D)\n#define _GT    C(0x3E)\n#define _QUEST C(0x3F)\n#define _AT    C(0x40)\n#define _A     C(0x41)\n#define _B     C(0x42)\n#define _C     C(0x43)\n#define _D     C(0x44)\n#define _E     C(0x45)\n#define _F     C(0x46)\n#define _G     C(0x47)\n#define _H     C(0x48)\n#define _I     C(0x49)\n#define _J     C(0x4A)\n#define _K     C(0x4B)\n#define _L     C(0x4C)\n#define _M     C(0x4D)\n#define _N     C(0x4E)\n#define _O     C(0x4F)\n#define _P     C(0x50)\n#define _Q     C(0x51)\n#define _R     C(0x52)\n#define _S     C(0x53)\n#define _T     C(0x54)\n#define _U     C(0x55)\n#define _V     C(0x56)\n#define _W     C(0x57)\n#define _X     C(0x58)\n#define _Y     C(0x59)\n#define _Z     C(0x5A)\n#define _LSQB  C(0x5B)\n#define _BSLSH C(0x5C)\n#define _RSQB  C(0x5D)\n#define _CARET C(0x5E)\n#define _USCOR C(0x5F)\n#define _GRAVE C(0x60)\n#define _a     C(0x61)\n#define _b     C(0x62)\n#define _c     C(0x63)\n#define _d     C(0x64)\n#define _e     C(0x65)\n#define _f     C(0x66)\n#define _g     C(0x67)\n#define _h     C(0x68)\n#define _i     C(0x69)\n#define _j     C(0x6A)\n#define _k     C(0x6B)\n#define _l     C(0x6C)\n#define _m     C(0x6D)\n#define _n     C(0x6E)\n#define _o     C(0x6F)\n#define _p     C(0x70)\n#define _q     C(0x71)\n#define _r     C(0x72)\n#define _s     C(0x73)\n#define _t     C(0x74)\n#define _u     C(0x75)\n#define _v     C(0x76)\n#define _w     C(0x77)\n#define _x     C(0x78)\n#define _y     C(0x79)\n#define _z     C(0x7A)\n#define _LBRC  C(0x7B)\n#define _VBAR  C(0x7C)\n#define _RBRC  C(0x7D)\n#define _TILDE C(0x7E)\n\nint GetTxChar (vec2 p)\n{\n  vec2 fp;\n  ivec2 ip;\n  float d;\n  int _ic, _nc;\n  fp = floor (p);\n  ip = ivec2 (fp);\n  _ic = 0;\n  _nc = ip.x;\n  if (ip.y == 0) {\n    if (idTxt < 3) {\n      CP(3);\n      if (idTxt == 0) {\n        _E _n _g _i _n _e\n      } else if (idTxt == 1) {\n        _C _a _r _SP _NUM _1\n      } else if (idTxt == 2) {\n        _C _a _r _SP _NUM _2\n      }\n    } else if (idTxt == 3) {\n      CP(3);\n      _T _r _a _c _k\n    } else if (idTxt == 4) {\n      CP(4);\n      _P _l _a _t _f _o _r _m\n    } else if (idTxt == 5) {\n      CP(3);\n      _S _i _g _n _a _l\n    } else if (idTxt == 6) {\n      CP(3);\n      _T _u _n _n _e _l\n    } else if (idTxt == 7) {\n      CP(2);\n      _T _r _e _e\n    }\n  }\n  return _ic;\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}