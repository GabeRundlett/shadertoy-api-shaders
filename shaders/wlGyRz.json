{
    "Shader": {
        "info": {
            "date": "1610413267",
            "description": "f",
            "flags": 0,
            "hasliked": 0,
            "id": "wlGyRz",
            "likes": 1,
            "name": "some coll weird thingy",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "Angramme",
            "viewed": 274
        },
        "renderpass": [
            {
                "code": "\nfloat noise(const vec2 C){\n    //vec2 diff = iMouse.xy-C;\n    vec2 c = C*1.2;\n    return .5+.25*sin(c.x*30.+c.y*6.+sin(iTime*.31+ c.x*7.+c.y*16.5)) \n            + .25*sin(c.y*27.+sin(iTime*.11+c.x*18.+c.y*12.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    \n    const float eps = 0.0005;\n    vec3 N = normalize(vec3(\n        (vec2(noise(uv+vec2(eps, 0.)), noise(uv+vec2(0., eps))) -vec2(noise(uv)))/eps, 1.));\n    \n    //col += N;\n    col += (.8*(N)+.2*vec3(1))*(.3-.7*(dot(N, normalize(vec3(cos(iTime*.35), sin(iTime*.35), 1)))));\n    const float rd_pulse = 2.;\n    col.r *= .5+.5*sin(uv.x*2.-uv.y*1.2+iTime*rd_pulse);\n    \n    col *= vec3(1.5, 1.2, 1.7);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}