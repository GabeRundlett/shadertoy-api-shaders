{
    "Shader": {
        "info": {
            "date": "1598046689",
            "description": "Game of life with a special rule added. If two parents are present, they may reproduce. See \"Buf A\" to change the settings.",
            "flags": 32,
            "hasliked": 0,
            "id": "ttfBDs",
            "likes": 2,
            "name": "Game of life with colonization!",
            "published": 3,
            "tags": [
                "2d",
                "gameoflife",
                "simluation"
            ],
            "usePreview": 0,
            "username": "vipiao",
            "viewed": 377
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = texelFetch(iChannel0, ivec2(fragCoord), 0);\n\n    // Output to screen\n    fragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// -SETTINGS-\n\n// The initial density of the life.\n# define INIT_DENSITY 0.03\n// Usually two parents is not enought to reproduce according to the vanilla rules.\n// Set the below define to \"0.\" if you want vanilla rules.\n// If the below define is higher, the walkers will be able to colonize.\n# define TWO_PARENT_REPRODUCE_CHANCE 0.0002\n\n// Noise function found at https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\nuint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\nuint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)); }\nuint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)); }\n//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 pC = texelFetch(iChannel0, ivec2(fragCoord), 0); // Previous color.\n    \n    if(iTime < 1.){ // Initialize with random noise.\n        float prob = float(hash(uvec2(fragCoord))) / 4294967295.;\n        bool alive = prob < INIT_DENSITY;\n    \tfragColor = vec4( alive, alive, alive, 1.0);\n        return;\n    }\n    \n    // Game of life logic.\n    ivec2 myC = ivec2(fragCoord);\n    bool alive;\n    int numNeighbors =\n\t\tint(texelFetch(iChannel0, myC + ivec2(-1, 1), 0).x > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2( 0, 1), 0).x > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2( 1, 1), 0).x > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2(-1,0), 0).x > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2( 1,0), 0).x > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2(-1,-1), 0).x > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2( 0,-1), 0).x > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2( 1,-1), 0).x > 0.5)\n    ;\n    if(pC.x > 0.5){ // Is alive.\n        if(numNeighbors < 2){\n        \talive = false;\n        } else if (numNeighbors < 4){\n        \talive = true;\n        } else {\n        \talive = false;\n        }\n    } else { // Is dead.\n    \tif(numNeighbors  == 3){\n        \talive = true;\n        } else {\n        \talive = false;\n        }\n        // Special rule.\n        float prob = float(hash(uvec2(fragCoord) + uvec2(iTime*60.))) / 4294967295.;\n        if(numNeighbors == 2 && prob < TWO_PARENT_REPRODUCE_CHANCE){\n        \talive = true;\n        }\n    }\n    if(alive){\n    \tfragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    }else{\n    \tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}