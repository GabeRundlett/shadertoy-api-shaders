{
    "Shader": {
        "info": {
            "date": "1460376324",
            "description": "A combination of some earlier subjects; use the mouse to look around and  control the drone.",
            "flags": 32,
            "hasliked": 0,
            "id": "MsdSRj",
            "likes": 18,
            "name": "Boats with Drone",
            "published": 3,
            "tags": [
                "simulation",
                "interactive",
                "drone",
                "boat"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 1166
        },
        "renderpass": [
            {
                "code": "// \"Boats with Drone\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + cHashA4.xy) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Noisefv3a (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t1 = Hashv4v3 (ip);\n  t2 = Hashv4v3 (ip + vec3 (0., 0., 1.));\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\n\nvec2 Noisev2v4 (vec4 p)\n{\n  vec4 i, f, t1, t2;\n  i = floor (p);\n  f = fract (p);\n  f = f * f * (3. - 2. * f);\n  t1 = Hashv4f (dot (i.xy, cHashA3.xy));\n  t2 = Hashv4f (dot (i.zw, cHashA3.xy));\n  return vec2 (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n               mix (mix (t2.x, t2.y, f.z), mix (t2.z, t2.w, f.z), f.w));\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbm3 (vec3 p)\n{\n  const mat3 mr = mat3 (0., 0.8, 0.6, -0.8, 0.36, -0.48, -0.6, -0.48, 0.64);\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3a (p);\n    a *= 0.5;\n    p *= 4. * mr;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  const vec3 e = vec3 (0.1, 0., 0.);\n  vec3 g;\n  float s;\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrRCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nfloat PrFlatCyl2Df (vec2 p, float rhi, float rlo)\n{\n  return length (p - vec2 (rhi * clamp (p.x / rhi, -1., 1.), 0.)) - rlo;\n}\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nmat3 boatMat[3], droneMat;\nvec3 boatPos[3], dronePos, vuPos, qHit, sunDir, waterDisp;\nvec2 aTilt;\nfloat boatAng[3], tCur, dstFar;\nint idObj, idObjGrp;\nbool droneVu;\n\nvec3 SkyHrzCol (vec3 rd)\n{\n  vec3 col;\n  float a, sd;\n  a = atan (length (rd.xz), rd.y);\n  if (a > 0.5 * pi + 0.012 * (Fbm1 (20. * abs (0.25 * pi +\n     atan (rd.z, rd.x))) - 1.9375)) {\n    col = vec3 (0.22, 0.3, 0.33) *\n       (0.7 + 0.3 * Noisefv2 (1000. * vec2 (5. * atan (rd.z, rd.x), rd.y)));\n  } else {\n    sd = max (dot (rd, sunDir), 0.);\n    rd.xz *= tan (0.9 * a);\n    rd.y = 1.;\n    rd = normalize (rd);\n    col = mix (vec3 (0.5, 0.5, 0.8), vec3 (1.),\n       clamp (0.8 * Fbm2 (vec2 (0.05 * tCur + 2. * rd.xz / rd.y)) - 0.5, 0., 1.));\n    col += 0.1 * pow (sd, 16.) + 0.2 * pow (sd, 256.);\n  }\n  return col;\n}\n\nfloat WaveHt (vec3 p)\n{\n  const mat2 qRot = mat2 (1.6, -1.2, 1.2, 1.6);\n  vec4 t4, t4o, ta4, v4;\n  vec2 q2, t2, v2;\n  float wFreq, wAmp, pRough, ht;\n  wFreq = 0.2;  wAmp = 0.3;\n  t4o.xz = tCur * vec2 (1., -1.);\n  q2 = p.xz + waterDisp.xz;\n  ht = 0.;\n  for (int j = 0; j < 3; j ++) {\n    t4 = (t4o.xxzz + vec4 (q2, q2)) * wFreq;\n    t2 = Noisev2v4 (t4);\n    t4 += 2. * vec4 (t2.xx, t2.yy) - 1.;\n    ta4 = abs (sin (t4));\n    v4 = (1. - ta4) * (ta4 + sqrt (1. - ta4 * ta4));\n    v2 = pow (1. - pow (v4.xz * v4.yw, vec2 (0.65)), vec2 (8.));\n    ht += (v2.x + v2.y) * wAmp;\n    q2 *= qRot;  wFreq *= 2.;  wAmp *= 0.2;\n  }\n  return ht;\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 50; j ++) {\n    p = ro + s * rd;\n    h = p.y - WaveHt (p);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.5, 1.3 * h) + 0.01 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - WaveHt (p));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e = vec2 (max (0.1, 1e-4 * d * d), 0.);\n  float h = WaveHt (p);\n  return normalize (vec3 (h - WaveHt (p + e.xyy), e.x, h - WaveHt (p + e.yyx)));\n}\n\nfloat BoatDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  p.y -= 0.7;\n  q = p;\n  d = max (max (PrRCylDf (q, 1.2, 2., 3.5),\n     - max (PrRCylDf (q - vec3 (0., 0.1, 0.), 1.15, 2., 3.5),\n     max (q.y - 0.1, - q.y - 0.1))), max (q.y - 0., - q.y - 0.2));\n  q.y -= -0.2;\n  d = max (SmoothMin (d, max (PrRCylDf (q, 1., 2., 3.3), q.y), 0.1), q.z - 2.);\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 1;  qHit = q; }\n  q = p;\n  q.yz -= vec2 (-0.5, -0.2);\n  d = max (PrRCylDf (q, 1., 1.1, 2.3), max (0.4 - q.y, q.z - 1.2));\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 2;  qHit = q; }\n  q = p;\n  q.yz -= vec2 (0.8, -1.);\n  d = PrCylDf (q.xzy, 0.04, 0.3);\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 3; }\n  q = p;\n  q.x = abs (q.x) - 0.3;\n  q.yz -= vec2 (-1.1, 1.6);\n  d = PrRoundBoxDf (q, vec3 (0.02, 0.3, 0.1), 0.03);\n  q.y -= -0.4;\n  d = min (d, PrCapsDf (q, 0.1, 0.25));\n  if (d < dMin) { dMin = d;  idObj = idObjGrp + 4; }\n  return dMin;\n}\n\nfloat DroneDf (vec3 p, float dMin)\n{\n  vec3 q, qq;\n  float d;\n  const float dSzFac = 2.;\n  dMin *= dSzFac;\n  qq = dSzFac * (p - dronePos);\n  qq.yz = Rot2D (qq.yz, - aTilt.y);\n  qq.yx = Rot2D (qq.yx, - aTilt.x);\n  q = qq;  q.y -= 0.05;\n  d = PrRCylDf (q.xzy, 0.2, 0.03, 0.07);\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  q.y -= 0.07;\n  d = PrRoundBoxDf (q, vec3 (0.06, 0.02, 0.12), 0.04);\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  q = qq;  q.y -= -0.05;\n  d = PrSphDf (q, 0.17);\n  if (d < dMin) { dMin = d;  idObj = 3; }\n  q = qq;  q.xz = abs (q.xz) - 0.7;\n  d = min (PrCylAnDf (q.xzy, 0.5, 0.05, 0.05), PrCylDf (q.xzy, 0.1, 0.03));\n  q -= vec3 (-0.4, -0.15, -0.4);\n  d = min (d, PrRCylDf (q.xzy, 0.05, 0.03, 0.2));\n  q -= vec3 (-0.3, 0.2, -0.3);\n  q.xz = Rot2D (q.xz, 0.25 * pi);\n  d = min (d, min (PrRCylDf (q, 0.05, 0.02, 1.), PrRCylDf (q.zyx, 0.05, 0.02, 1.)));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  return dMin / dSzFac;\n}\n\nfloat RockDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, a, r, rb, h;\n  const float rSzFac = 0.3;\n  dMin *= rSzFac;\n  q = p * rSzFac;\n  q.y -= 0.25;\n  rb = 1.8;\n  h = 2.;\n  d = PrCylDf (q.xzy, rb, h + 0.02);\n  if (d < dMin) {\n    h += 0.02 * cos (23. * q.x * q.z);\n    r = max (0., rb - 0.5 * q.y / h - 0.005 * sin (61. * q.y / h));\n    a = atan (q.z, q.x) + 0.03 * sin (16.2 * q.y / h);\n    d = PrRCylDf (q.xzy, r + 0.04 * max (r - rb + 0.6, 0.) * sin (30. * a),\n       0.5, h);\n    q *= 1. + 0.02 * sin (43. * atan (q.y, length (q.xz)) +\n       sin (22.2 * length (q.xz) / rb));\n    d = max (d, - SmoothMin (PrFlatCyl2Df (q.yx, 0.4, 0.5),\n       PrFlatCyl2Df (q.yz, 0.4, 0.5), 0.1));\n    if (d < dMin) { dMin = d;  idObj = 11;  qHit = q; }\n    dMin *= 0.9;\n  }\n  return dMin / rSzFac;;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float d, dMin, dLim;\n  const float bSzFac = 1.5;\n  dMin = dstFar;\n  dLim = 0.5 * bSzFac;\n  dMin *= bSzFac;\n  for (int k = 0; k < 3; k ++) {\n    q = p - boatPos[k];\n    idObjGrp = (k + 1) * 256;\n    d = PrCylDf (q.xzy, 2., 2.);\n    dMin = (d < dLim) ? BoatDf (bSzFac * boatMat[k] * q, dMin) : min (dMin, d);\n  }\n  dMin /= bSzFac;\n  if (! droneVu) dMin = DroneDf (p, dMin);\n  dMin = RockDf (p, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 25; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 1., 20. * h / d));\n    d += min (0.3, 3. * h);\n    if (h < 0.001) break;\n  }\n  return sh;\n}\n\nvec4 BoatCol (vec3 n)\n{\n  vec4 objCol;\n  vec3 nn;\n  int ig, id;\n  ig = idObj / 256;\n  id = idObj - 256 * ig;\n  if (ig == 1) nn = boatMat[0] * n;\n  else if (ig == 2) nn = boatMat[1] * n;\n  else nn = boatMat[2] * n;\n  if (id == 1) {\n    if (qHit.y < 0.1 && nn.y > 0.99) {\n      objCol.rgb = vec3 (0.8, 0.5, 0.3) *\n         (1. - 0.4 * SmoothBump (0.42, 0.58, 0.05, mod (7. * qHit.x, 1.)));\n      objCol.a = 0.5;\n    } else if (qHit.x * nn.x > 0. && nn.y < 0. && qHit.z < 1.99 &&\n       abs (qHit.y - 0.1) < 0.095) objCol = vec4 (1., 1., 0.2, 0.3);\n    else {\n      if (qHit.y > -0.3) objCol.rgb = (ig == 1) ? vec3 (0.3, 0.9, 0.3) :\n         ((ig == 2) ? vec3 (0.9, 0.3, 0.3) : vec3 (0.3, 0.3, 0.9));\n      else objCol.rgb = vec3 (0.7, 0.7, 0.8);\n      objCol.a = 0.7;\n    }\n  } else if (id == 2) {\n    if (abs (abs (qHit.x) - 0.4) < 0.36 && qHit.y > 0.45 && \n       length (vec2 (abs (qHit.x) - 0.1, qHit.y - 0.2)) < 0.7 ||\n       abs (abs (qHit.z + 0.2) - 0.6) < 0.5 && abs (qHit.y - 0.65) < 0.2)\n       objCol = vec4 (0., 0., 0.1, -1.);\n    else objCol = vec4 (1.);\n  } else if (id == 3) objCol = vec4 (1., 1., 1., 0.3);\n  else if (id == 4) objCol = vec4 (0.5, 0.5, 0.2, 0.1);\n  return objCol;\n}\n\nvec4 DroneCol ()\n{\n  vec4 objCol;\n  if (idObj == 1) objCol = vec4 (1., 1., 0.5, 1.);\n  else if (idObj == 2) objCol = mix (vec4 (0.3, 0.3, 1., -2.),\n     vec4 (1., 0., 0., 0.2), step (0., sin (10. * tCur)));\n  else if (idObj == 3) objCol = vec4 (0.1, 0.1, 0.1, 1.);\n  return objCol;\n}\n\nfloat WakeFac (vec3 row)\n{\n  vec2 tw[3], twa;\n  float twLen[3], wkFac, ba;\n  for (int k = 0; k < 3; k ++) {\n    tw[k] = row.xz - (boatPos[k].xz - Rot2D (vec2 (0., 2.5), boatAng[k]));\n    twLen[k] = length (tw[k]);\n  }\n  if (twLen[0] < min (twLen[1], twLen[2])) {\n    twa = tw[0];\n    ba = boatAng[0];\n  } else if (twLen[1] < twLen[2]) {\n    twa = tw[1];\n    ba = boatAng[1];\n  } else {\n    twa = tw[2];\n    ba = boatAng[2];\n  }\n  twa = Rot2D (twa, - ba);\n  wkFac = 0.;\n  if (length (twa * vec2 (1., 0.5)) < 1.) wkFac =\n     clamp (1. - 1.5 * abs (twa.x), 0., 1.) * clamp (1. + 0.5 * twa.y, 0., 1.);\n  return wkFac;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, vn, vnw, rdd, row, rdw;\n  float dstObj, dstWat, wkFac, reflFac, sh;\n  int idObjT;\n  bool waterRefl;\n  dstObj = ObjRay (ro, rd);\n  dstWat = WaveRay (ro, rd);\n  waterRefl = (dstWat < min (dstFar, dstObj));\n  if (waterRefl) {\n    ro += rd * dstWat;\n    row = ro;\n    rdw = rd;\n    wkFac = WakeFac (row);\n    vnw = WaveNf (ro, dstWat);\n    if (wkFac > 0.) vnw = VaryNf (10. * row, vnw, 5. * wkFac);\n    rd = reflect (rd, vnw);\n    ro += 0.1 * rd;\n    dstObj = ObjRay (ro, rd);\n  }\n  reflFac = 0.;\n  if (dstObj < dstWat) {\n    ro += rd * dstObj;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj >= 1 && idObj <= 3) objCol = DroneCol ();\n    else if (idObj == 11) {\n      vn = VaryNf (21.1 * qHit, vn, 5.);\n      objCol.rgb = mix (vec3 (0.45, 0.4, 0.4), vec3 (0.3, 0.3, 0.35),\n         clamp (Fbm2 (vec2 (50. * (atan (qHit.z, qHit.x) / pi + 1.),\n         21. * qHit.y)) - 0.6, 0., 1.));\n      objCol.rgb *= mix (vec3 (0.5, 0.6, 0.5), vec3 (1.),\n         smoothstep (-0.2, -0.15, qHit.y));\n      objCol.a = 0.4;\n    } else if (idObj >= 256) {\n      objCol = BoatCol (vn);\n      if (objCol.a == -1.) {\n        objCol.a = 1.;\n        reflFac = 0.3;\n        rdd = reflect (rd, vn);\n      }\n    }\n    if (objCol.a != -2.) {\n      sh = 0.5 + 0.5 * ObjSShadow (ro, sunDir);\n      col = objCol.rgb * (0.2 +\n         0.2 * max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.) +\n         0.8 * sh * max (dot (vn, sunDir), 0.) +\n         objCol.a * sh * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.));\n    } else col = objCol.rgb;\n  } else col = SkyHrzCol (rd);\n  if (reflFac > 0.) col = mix (col, 0.7 * SkyHrzCol (rdd), reflFac);\n  if (waterRefl) {\n    col = mix (vec3 (0.12, 0.24, 0.28), col,\n       0.5 * pow (1. - abs (dot (rdw, vnw)), 5.));\n    col = mix (col, vec3 (0.9),\n       pow (clamp (1.1 * WaveHt (row) + 0.1 * Fbm3 (16. * row), 0., 1.), 8.) *\n       (1. - smoothstep (-0.06, -0.04, rdw.y)));\n    if (wkFac > 0.) col = mix (col, vec3 (0.9),\n       wkFac * clamp (0.1 + 0.5 * Fbm3 (4.1 * row), 0., 1.));\n  }\n  if (waterRefl) {\n    col = mix (col, SkyHrzCol (rdw), smoothstep (0.8, 1., dstWat / dstFar));\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid BoatPM (out mat3 bMat, inout vec3 bPos, float bAng)\n{\n  vec3 bd;\n  float h[5], bAz, c, s;\n  bAz = 0.5 * pi - bAng;\n  bd = vec3 (0., 0., 1.);\n  bd.xz = Rot2D (bd.xz, bAz);\n  h[0] = WaveHt (bPos);\n  h[1] = WaveHt (bPos + 0.5 * bd);\n  h[2] = WaveHt (bPos - 0.5 * bd);\n  bd.xz = Rot2D (bd.xz, -0.5 * pi);\n  h[3] = WaveHt (bPos + 1.3 * bd);\n  h[4] = WaveHt (bPos - 1.3 * bd);\n  bPos.y = 0.13 + (2. * h[0] + h[1] + h[2] + h[3] + h[4]) / 6.;\n  bMat[2] = normalize (vec3 (2., h[2] - h[1], 0.));\n  bMat[0] = normalize (vec3 (0., max (0.6 + h[3] - h[4], 0.), 4.));\n  bMat[1] = cross (bMat[0], bMat[2]);\n  c = cos (bAz);\n  s = sin (bAz);\n  bMat *= mat3 (c, 0., s, 0., 1., 0., - s, 0., c);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, us, uc, ori, ca, sa;\n  float zmFac, asp, aLim, mRad, el, az, elV, azV, vuMode, f;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= iResolution.x / iResolution.y;\n  tCur = iTime;\n  dstFar = 70.;\n  aTilt = Loadv4 (0).xy;\n  stDat = Loadv4 (2);\n  vuPos.xz = stDat.xy;\n  vuPos.y = 3.;\n  el = stDat.z;\n  az = stDat.w;\n  stDat = Loadv4 (3);\n  dronePos = stDat.xyz;\n  vuMode = stDat.w;\n  for (int k = 0; k < 3; k ++) {\n    stDat = Loadv4 (5 + k);\n    boatPos[k].xz = stDat.xy;\n    boatPos[k].y = 0.;\n    boatAng[k] = stDat.z;\n    BoatPM (boatMat[k], boatPos[k], boatAng[k]);\n  }\n  asp = canvas.x / canvas.y;\n  mRad = 0.45;\n  uc = uv - vec2 (0.73, 0.53) * vec2 (asp, 1.);\n  droneVu = (length (uc) < mRad);\n  if (droneVu) {\n    ro = dronePos;\n    zmFac = 0.7;\n    uv = - uc / mRad;\n    rd = normalize (vec3 ((1./0.9) * sin (0.9 * uv), zmFac));\n    rd.yz = Rot2D (rd.yz, 0.5 * pi + aTilt.y);\n    rd.yx = Rot2D (rd.yx, aTilt.x);\n  } else {\n    if (vuMode == 0.) vd = 0.5 * (boatPos[0] + boatPos[1]);\n    else if (vuMode == 1.) vd = 0.5 * (boatPos[2] + boatPos[1]);\n    else if (vuMode == 2.) vd = dronePos;\n    ro = vuPos;\n    if (vuMode == 2.) {\n      ro.y = 9.;\n      zmFac = 1.5 + clamp (0.1 * length (vd - ro) - 1., 0., 8.);\n    } else zmFac = 2.5;\n    vd = normalize (vd - ro);\n    azV = 0.5 * pi - atan (vd.z, - vd.x);\n    elV = - asin (vd.y);\n    if (vuMode == 2.) {\n      az = azV;\n      el = elV;\n    } else {\n      az += azV;\n      el += -0.03 * pi + elV;\n      el = clamp (el, -0.15 * pi, 0.15 * pi);\n    }\n    ori = vec2 (el, az);\n    ca = cos (ori);\n    sa = sin (ori);\n    vuMat = mat3 (ca.y, 0., sa.y, 0., 1., 0., - sa.y, 0., ca.y) *\n            mat3 (1., 0., 0., 0., ca.x, sa.x, 0., - sa.x, ca.x);\n    rd = vuMat * normalize (vec3 (uv, zmFac));\n  }\n  sunDir = normalize (vec3 (-0.5, 0.5, -1.));\n  waterDisp = 0.1 * tCur * vec3 (-1., 0., 1.);\n  col = ShowScene (ro, rd);\n  us = 0.5 * uv - vec2 (0.4, -0.32) * vec2 (asp, 1.);\n  f = (length (us) - 0.135) * canvas.y;\n  if (abs (f) < 1.5 || f < 0. && min (abs (us.x), abs (us.y)) * canvas.y < 1.)\n     col = vec3 (0., 0.7, 0.);\n  if (f < 0. && abs (length (us + (1./5.5) * aTilt) - 0.02) * canvas.y < 1.)\n     col = vec3 (1., 1., 0.);\n  if (droneVu && (length (uc) - mRad) * canvas.y > -3.) col = vec3 (0., 0., 1.);\n  fragColor = vec4 (col, 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Boats with Drone\" by dr2 - 2016\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float pi = 3.14159;\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nfloat ti[13], tCyc;\n\n#define SLIN(k,d) ti[k + 1] = ti[k] + d\n#define SCRV(k) ti[k + 1] = ti[k] + tc\n\nvoid TrSetup ()\n{\n  float tc;\n  tc = 0.25 * pi;\n  ti[0] = 0.;\n  SCRV(0);   SLIN(1, 1.);  SCRV(2);  SLIN(3, 3.);  SCRV(4);  SLIN(5, 1.);\n  SCRV(6);  SLIN(7, 1.);  SCRV(8);  SLIN(9, 3.);  SCRV(10);  SLIN(11, 1.);\n  tCyc = ti[12];\n}\n\nvec2 TrackPath (float t)\n{\n  vec2 r, dr;\n  float tc, a;\n  tc = 0.25 * pi;\n  t = mod (t, tCyc);\n  dr = vec2 (0.);\n  a = 99.;\n  if (t < ti[1]) {\n    r = vec2 (0., 0.);  dr.xy = vec2 (1.);  a = 0.5 * tc + 0.25 * (t - ti[0]);\n  } else if (t < ti[2]) {\n    r = vec2 (1., 0.5);  dr.x = (t - ti[1]);\n  } else if (t < ti[3]) {\n    r = vec2 (2., 0.);  dr.y = 1.;  a = 0.75 * tc + 0.25 * (t - ti[2]);\n  } else if (t < ti[4]) {\n    r = vec2 (2.5, 1.);  dr.y = (t - ti[3]);\n  } else if (t < ti[5]) {\n    r = vec2 (2., 4.);  dr.x = 1.;  a = 0.5 * tc - 0.25 * (t - ti[4]);\n  } else if (t < ti[6]) {\n    r = vec2 (3., 4.5);  dr.x = (t - ti[5]);\n  } else if (t < ti[7]) {\n    r = vec2 (4., 4.);  a = 0.25 * tc - 0.25 * (t - ti[6]);\n  } else if (t < ti[8]) {\n    r = vec2 (4.5, 4.);  dr.y = - (t - ti[7]);\n  } else if (t < ti[9]) {\n    r = vec2 (4., 2.);  dr.y = 1.;  a = 0. * tc - 0.25 * (t - ti[8]);\n  } else if (t < ti[10]) {\n    r = vec2 (4., 2.5);  dr.x = - (t - ti[9]);\n  } else if (t < ti[11]) {\n    r = vec2 (0., 2.);  dr.x = 1.;  a = 0.25 * tc + 0.25 * (t - ti[10]);\n  } else if (t < ti[12]) {\n    r = vec2 (0.5, 2.);  dr.y = - (t - ti[11]);\n  }\n  if (a != 99.) {\n    a *= 2. * pi / tc;\n    r += 0.5 * vec2 (cos (a), sin (a));\n  }\n  r += dr - 2.5;\n  r *= 20.;\n  return r;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 dronePos, droneVel, boatPos, vuPos, pp, pm;\n  vec2 iFrag, canvas, aTilt, um, ud;\n  float tCur, tCurP, autoFly, boatAng, boatSpd, vuMode, bGap, dt, asp, el, az, bb;\n  int pxId, wgSel, wgReg;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 8) discard;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  wgSel = -1;\n  wgReg = -2;\n  asp = canvas.x / canvas.y;\n  TrSetup ();\n  boatSpd = 0.1;\n  bGap = 0.6;\n  vuMode = 1.;\n  if (iFrame <= 5) {\n    aTilt = vec2 (0.);\n    dronePos = vec3 (0.);\n    droneVel = vec3 (0.);\n    autoFly = 1.;\n    az = 0.;\n    el = 0.;\n  } else {\n    stDat = Loadv4 (0);\n    aTilt = stDat.xy;\n    tCurP = stDat.z;\n    autoFly = stDat.w;\n    stDat = Loadv4 (1);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n    dronePos = Loadv4 (3).xyz;\n    droneVel = Loadv4 (4).xyz;\n    if (autoFly > 0.) {\n      droneVel.xz = clamp (TrackPath (boatSpd * tCur + 0.05 +\n         bGap * floor (abs (2. - mod (0.04 * tCur, 5.)))) - dronePos.xz, -0.3, 0.3);\n      dronePos.xz += droneVel.xz;\n      aTilt = clamp (mix (aTilt, (0.5/0.15) * droneVel.xz, 0.05), -0.5, 0.5);\n    }\n    if (mPtr.z > 0.) {\n      um = vec2 (0.4, -0.32) * vec2 (asp, 1.);\n      ud = mPtr.xy * vec2 (asp, 1.) - um;\n      if (length (ud) < 0.13 + 0.03) {\n        wgReg = 0;\n        if (mPtrP.z <= 0.) wgSel = wgReg;\n      }\n      if (wgSel == 0) {\n        autoFly = - tCur;\n        aTilt = mix (aTilt, - min (0.7, 5.5 * length (ud)) * normalize (ud), 0.2);\n      } else {\n        az = -2. * pi * mPtr.x;\n        el = - pi * mPtr.y;\n      }\n    } else {\n      wgSel = -1;\n      wgReg = -2;\n    }\n    if (autoFly < 0.) {\n      dt = 20. * (tCur - tCurP);\n      dronePos.xz += dt * droneVel.xz;\n      droneVel.xz = 0.15 * aTilt;\n      dronePos.xz += dt * droneVel.xz;\n      if (tCur + autoFly > 2.) autoFly = 1.;\n    }\n    dronePos.y = 10. - (6. * smoothstep (12., 20., length (dronePos.xz)) +\n      0.3 * sin (0.07 * tCur) + 0.1 * sin (0.17 * tCur));\n  }\n  bb = boatSpd * tCur + bGap * float (pxId - 5);\n  boatPos.xz = TrackPath (bb);\n  pp.xz = TrackPath (bb + 0.005);\n  pm.xz = TrackPath (bb - 0.005);\n  boatAng = 0.5 * pi - atan ((pp - pm).z, - (pp - pm).x);\n  if (wgSel != 0) vuMode = step (0.5, mod (0.009 * tCur, 1.));\n  else vuMode = 2.;\n  if (vuMode != 2.) {\n    if (vuMode == 0.) bb = boatSpd * tCur - 0.4;\n    else if (vuMode == 1.) bb = boatSpd * tCur + 1.8;\n    vuPos.xz = TrackPath (bb);\n  } else vuPos.xz = vec2 (0.);\n  if (pxId == 0) stDat = vec4 (aTilt, tCur, autoFly);\n  else if (pxId == 1) stDat = vec4 (mPtr.xyz, float (wgSel));\n  else if (pxId == 2) stDat = vec4 (vuPos.xz, el, az);\n  else if (pxId == 3) stDat = vec4 (dronePos, vuMode);\n  else if (pxId == 4) stDat = vec4 (droneVel, 0.);\n  else if (pxId >= 5) stDat = vec4 (boatPos.xz, boatAng, 0.);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}