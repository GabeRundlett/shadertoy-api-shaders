{
    "Shader": {
        "info": {
            "date": "1704393278",
            "description": "Just a torus interior with a gyroid \"revolved\" around the surface.",
            "flags": 0,
            "hasliked": 0,
            "id": "XcS3zK",
            "likes": 165,
            "name": "Inside the torus",
            "published": 3,
            "tags": [
                "raymarching",
                "torus",
                "gyroid",
                "offset"
            ],
            "usePreview": 0,
            "username": "liamegan",
            "viewed": 9566
        },
        "renderpass": [
            {
                "code": "\n  /* Shading constants */\n  /* --------------------- */\n  const vec3 LP = vec3(-0.6, 0.7, -0.3);  // light position\n  const vec3 LC = vec3(.85,0.80,0.70);    // light colour\n  const vec3 HC1 = vec3(.5, .4, .3);      // hemisphere light colour 1\n  const vec3 HC2 = vec3(0.1,.1,.6)*.5;    // hemisphere light colour 2\n  const vec3 HLD = vec3(0,1,0);           // hemisphere light direction\n  const vec3 BC = vec3(0.25,0.25,0.25);   // back light colour\n  const vec3 FC = vec3(1.30,1.20,1.00);   // fresnel colour\n  const float AS = .5;                    // ambient light strength\n  const float DS = 1.;                    // diffuse light strength\n  const float BS = .3;                    // back light strength\n  const float FS = .3;                    // fresnel strength\n  /* Raymarching constants */\n  /* --------------------- */\n  const float MAX_TRACE_DISTANCE = 10.;             // max trace distance\n  const float INTERSECTION_PRECISION = 0.0001;       // precision of the intersection\n  const int NUM_OF_TRACE_STEPS = 64;               // max number of trace steps\n  const float STEP_MULTIPLIER = 1.;                 // the step mutliplier - ie, how much further to progress on each step\n  \n  /* Structures */\n  /* ---------- */\n  struct Camera {\n    vec3 ro;\n    vec3 rd;\n    vec3 forward;\n    vec3 right;\n    vec3 up;\n    float FOV;\n  };\n  struct Surface {\n    float len;\n    vec3 position;\n    vec3 colour;\n    float id;\n    float steps;\n    float AO;\n  };\n  struct Model {\n    float dist;\n    vec3 colour;\n    float id;\n  };\n  \n  /* Utilities */\n  /* ---------- */\n  vec2 toScreenspace(in vec2 p) {\n    vec2 uv = (p - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n    return uv;\n  }\n  mat2 R(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, c);\n  }\n  Camera getCamera(in vec2 uv, in vec3 pos, in vec3 target) {\n    vec3 f = normalize(target - pos);\n    vec3 r = normalize(vec3(f.z, 0., -f.x));\n    vec3 u = normalize(cross(f, r));\n    \n    float FOV = 1.+cos(iTime*.1)*.8;\n    \n    return Camera(\n      pos,\n      normalize(f + FOV * uv.x * r + FOV * uv.y * u),\n      f,\n      r,\n      u,\n      FOV\n    );\n  }\n  \n  \n  //--------------------------------\n  // Modelling\n  //--------------------------------\n  float G( vec3 p ) {\n    return dot(sin(p.yzx), cos(p.zxy));\n  }\n  Model model(vec3 p) {\n    float t = iTime*.1;\n    p.xz *= R(t);\n    p.xy *= R(.3);\n    p.xy -= .5;\n    float d = abs(-(length(vec2(p.y, length(p.xz)-2.))-1.8+cos(t)*.3));\n    \n    // x variability\n    //float gs = 3.+p.x;\n    //float g = G(p.yxz*gs)/max(4.,gs);\n    // mixing on the y\n    //float g = mix(g, abs(g)-.4, cos(p.y*2.));\n    // regular\n    float g = G(p.yxz*4.)/4.;\n    \n    d=length(vec2(d,g))-.3;\n    vec3 colour = vec3(g);\n    \n    return Model(d, colour, 1.);\n  }\n  Model map( vec3 p ){\n    return model(p);\n  }\n  \n  /* Modelling utilities */\n  /* ---------- */\n  // I *think* I borrowed this from Shane, but probably orginally comes from IQ. \n  // Calculates the normal by taking a very small distance,\n  // remapping the function, and getting normal for that\n  vec3 calcNormal( in vec3 pos ){\n    vec3 eps = vec3( 0.001, 0.0, 0.0 );\n    vec3 nor = vec3(\n      map(pos+eps.xyy).dist - map(pos-eps.xyy).dist,\n      map(pos+eps.yxy).dist - map(pos-eps.yxy).dist,\n      map(pos+eps.yyx).dist - map(pos-eps.yyx).dist );\n    return normalize(nor);\n  }\n  \n  //--------------------------------\n  // Raymarcher\n  //--------------------------------\n  Surface march( in Camera cam ){\n    float h = 1e4; // local distance\n    float d = 0.; // ray depth\n    float id = -1.; // surace id\n    float s = 0.; // number of steps\n    float ao = 0.; // march space AO. Simple weighted accumulator. Not really AO, but ¯\\_(ツ)_/¯\n    vec3 p; // ray position\n    vec3 c; // surface colour\n\n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ) {\n      if( abs(h) < INTERSECTION_PRECISION || d > MAX_TRACE_DISTANCE ) break;\n      p = cam.ro+cam.rd*d;\n      Model m = map( p );\n      h = m.dist;\n      d += h * STEP_MULTIPLIER;\n      id = m.id;\n      s += 1.;\n      ao += max(h, 0.);\n      c = m.colour;\n    }\n\n    if( d >= MAX_TRACE_DISTANCE ) id = -1.0;\n\n    return Surface( d, p, c, id, s, ao );\n  }\n  \n  //--------------------------------\n  // Shading\n  //--------------------------------\n  /*\n   * Soft shadows and AO curtesy of Inigo Quilez\n   * https://iquilezles.org/articles/rmshadows\n  */\n  float softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax ) {\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ ) {\n      float h = map( ro + rd*t ).dist;\n      res = min( res, 8.0*h/t );\n      t += clamp( h, 0.02, 0.10 );\n      if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n  }\n  float AO( in vec3 pos, in vec3 nor ) {\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n      float hr = 0.01 + 0.12*float(i)/4.0;\n      vec3 aopos =  nor * hr + pos;\n      float dd = map( aopos ).dist;\n      occ += -(dd-hr)*sca;\n      sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n  }\n  vec3 shade(vec3 col, vec3 pos, vec3 nor, vec3 ref, Camera cam) {\n    \n    vec3 plp = LP - pos; // point light\n    \n    float o = AO( pos, nor );                 // Ambient occlusion\n    vec3  l = normalize( plp );                    // light direction\n    \n    float d = clamp( dot( nor, l ), 0.0, 1.0 )*DS;   // diffuse component\n    float b = clamp( dot( nor, normalize(vec3(-l.x,0,-l.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0)*BS; // back light component\n    float f = pow( clamp(1.0+dot(nor,cam.rd),0.0,1.0), 2.0 )*FS; // fresnel component\n\n    vec3 c = vec3(0.0);\n    c += d*LC;                           // diffuse light integration\n    c += mix(HC1,HC2,dot(nor, HLD))*AS;        // hemisphere light integration (ambient)\n    c += b*BC*o;       // back light integration\n    c += f*FC*o;       // fresnel integration\n    \n    return col*c;\n  }\n  vec3 render(Surface surface, Camera cam, vec2 uv) {\n    vec3 colour = vec3(.04,.045,.05);\n    colour = vec3(.35, .5, .75);\n    vec3 colourB = vec3(.9, .85, .8);\n    \n    colour = mix(colourB, colour, pow(length(uv), 2.)/1.5);\n\n    if (surface.id > -1.){\n      vec3 surfaceNormal = calcNormal( surface.position );\n      vec3 ref = reflect(cam.rd, surfaceNormal);\n      colour = surfaceNormal;\n      vec3 pos = surface.position;\n      \n      float t = iTime;\n      vec3 col = mix(\n        mix(\n          vec3(.8,.3,.6), \n          vec3(.6,.3,.8), \n          dot(surfaceNormal,surfaceNormal.zxy)\n        ),\n        vec3(1), \n        smoothstep(0., .1, cos(surface.colour.r*40.))\n      );\n      \n      colour = shade(col, pos, surfaceNormal, ref, cam);\n    }\n\n    return colour;\n  }\n  \n  \n  void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 c = vec3(0);\n    for(int x=0; x<2; x++) {\n      for(int y=0; y<2; y++) {\n        vec2 uv = toScreenspace(fragCoord+vec2(x,y)*.5);\n\n        Camera cam = getCamera(uv, vec3(1.5, 0, 1.5), vec3(0));\n        Surface surface = march(cam);\n\n        c += render(surface, cam, uv);\n      }\n    }\n    \n    fragColor = vec4(c*.25,1);\n  }\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}