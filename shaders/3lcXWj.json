{
    "Shader": {
        "info": {
            "date": "1581661774",
            "description": "How my recent simulations work.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lcXWj",
            "likes": 16,
            "name": "Voronoi Triangulation*",
            "published": 3,
            "tags": [
                "voronoi",
                "triangulation"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 584
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\n#define O 3.\nvec2 hash22(vec2 p) // Dave H\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nvec2 cell (vec2 u) {\n\tvec2 V = floor(u*O+0.5)/O;\n    vec2 h = hash22(V);\n    return V + h.x*vec2(cos(6.2*h.y+iTime),sin(6.2*h.y+iTime))/O;\n}\nfloat pie (vec2 p, vec2 a, vec2 b) {\n\tvec2 m = 0.5*(a+b); // midpoint\n    //if (length(a-b)<1e-3) return 1e3; // ignore self\n\treturn abs(dot(p-m,b-m)/dot(b-m,b-m)); // pojection\n}\nfloat line (vec2 p, vec2 a, vec2 b) {\n    float i = clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.);\n\treturn (length(p-a-(b-a)*i));\n}\nvec2 cc (vec2 a, vec2 b, vec2 c) {\n    vec2 ab = 0.5*(a+b), ac = 0.5*(a+c);\n\tfloat m1 = (a.x-b.x)/(b.y-a.y), m2 = (a.x-c.x)/(c.y-a.y);\n    float b1 = ab.y-m1*ab.x, b2 = ac.y-m2*ac.x;\n    float x = (b1-b2)/(m2-m1);\n    return vec2(x,m1*x+b1);\n}\nfloat sg (vec2 p, vec2 a, vec2 b) {\n    float i = clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.);\n\treturn length(p-a-(b-a)*i);\n}\nfloat tri (vec2 U, vec2 a, vec2 aa, vec2 aaa) {\n    vec2 m = cc(a,aa,aaa);\n    float v = length(a-m), w = length(U-m);\n    return w-v;\n}\nvoid mainImage (out vec4 Q, vec2 U) {\n\tU = 2.*(U-0.5*R)/R.y;\n    vec2 V = vec2(1e3);\n    for (int x = -3; x <= 3; x++)\n    for (int y = -3; y <= 3; y++) {\n\t\tvec2 c = cell(U+vec2(x,y)/O);\n        if (length(c-U) < length(V-U))\n            V=c;\n    }\n    vec2 W = vec2(1e3);\n    for (int x = -3; x <= 3; x++)\n    for (int y = -3; y <= 3; y++) {\n\t\tvec2 c = cell(U+vec2(x,y)/O);\n        if (pie(U,V,c) < pie(U,V,W))\n            W=c;\n    }\n    vec2 Z = vec2(1e3);\n    for (int x = -3; x <= 3; x++)\n    for (int y = -3; y <= 3; y++) {\n\t\tvec2 c = cell(U+vec2(x,y)/O);\n        if (tri(U,V,W,c) < tri(U,V,W,Z))\n            Z=c;\n    }\n    \n    Q = 0.5+0.3*sin(30.*(tri(U,V,W,Z))+vec4(1,2,3,4));\n\tQ *= smoothstep(0.01,0.02,pie(U,W,V)*length(W-V));\n    Q += vec4(.5)*smoothstep(0.03,0.00,min(line(U,W,V),min(line(U,W,Z),line(U,V,Z))));\n    Q *= smoothstep(0.03,0.04,length(U-V));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}