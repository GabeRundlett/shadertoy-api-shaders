{
    "Shader": {
        "info": {
            "date": "1481840676",
            "description": "Inspired by this painting by  Piet Mondrian: https://en.wikipedia.org/wiki/Broadway_Boogie_Woogie",
            "flags": 0,
            "hasliked": 0,
            "id": "XtdSWX",
            "likes": 11,
            "name": "Broadway Boogie Woogie",
            "published": 3,
            "tags": [
                "2d",
                "art"
            ],
            "usePreview": 0,
            "username": "antoineMoPa",
            "viewed": 769
        },
        "renderpass": [
            {
                "code": "#define PI2 6.28318530718\n\nfloat sini(int i){\n\treturn sin(float(i));\n}\n\n// Some pseudorandom pattern for the colored \n// squares over the yellow roads\nfloat squares(int x, int y){\n    float fx = float(x);\n    float fy = float(y);\n    float num = sin(fx * 2.0 * fy * 0.3+ iTime);\n\t\n    num *= cos(fx);\n    num *= cos(fx * 3.0);\n    \n    if(num < 0.0){\n    \tnum = 0.0;\n    }\n    \n    return num;\n}\n\n// The \"buildings\" that lie outside of the roads \n// (and may cross them) \nvec4 blocks(int x, int y){\n    vec4 col = vec4(0.0);\n    float fx = float(x);\n    float fy = float(y);\n\n    if(cos(fx/2.0) * cos(fy/4.0) < 0.0){\n        if(cos(fx / 5.0) * cos(fy / 3.0) < 0.0){\n            if(cos(fx / 1.5) * cos(fy / 2.0) < 0.0){\n                if(cos(fx/6.0) * cos(fy / 7.0) < 0.0){\n                    if(cos(fx/5.0) * cos(fy / 8.0) < 0.0){\n                        col.b = 1.0;\n                        col.r = 0.1;\n                        col.g = 0.1;\n                        col.a = 1.0;\n                    } else if (cos(fx/8.0) * cos(fy / 7.0) < 0.0) {\n                        col.r = 0.9;\n                        col.g = 0.8;\n                        col.a = 1.0;\n                    } else {\n                        col.r = 1.0;\n                        col.a = 1.0;\n                    }\n                }\n            }\n        }\n    }\n    \n    return col;\n}\n\n// Broadway Boogie Woogie\nvec4 bbw(int x, int y){\n    vec4 col = vec4(0.0);\n    \n    int color = 0;\n    \n    // Create yellow roads\n    \n    if(sini(30000 * x) + abs(sini(200 * x)) < 0.0){\n    \t// Yellow x\n        color = 1;\n    }\n    \n    if(sini(30000 * y) + abs(sini(200 * y)) < 0.0){\n    \t// Yellow y\n    \tcolor = 1;\n    }\n    \n    // Then add other colors\n    if( (color == 1 || color == 2)){\n        col = vec4(0.0, 0.0, 0.0, 1.0);\n        \n    \tfloat blue = squares(x, y) - squares(x - 2, y - 1);\n        \n        if(blue < 0.4){\n        \tblue = 0.0;\n            \n            float red = squares(x - 2, y - 3);\n            \n            if(red < 0.2){\n                float gray = squares(-x - 3, y - 4);\n                gray += squares(-x - 4, y - 1);\n                gray += squares(-x - 2, y - 1);\n                gray += squares(-x - 4, y - 2);\n                \n                if(gray > 0.9){\n                    col = gray * vec4(0.6, 0.6, 0.6, 1.0);\n                }\n            } else {\n                col.r += red;\n                col.g -= red;\n                col.b -= red;\n            }\n\n            blue = 0.0;\n        } else {\n            col.b += blue;\n            col.r -= 0.8 * blue;\n            col.g -= 0.8 * blue;\n        }\n\n        if(col.r < 0.0){\n            col.r = 0.0;\n        }\n        \n        if(col.g < 0.0){\n            col.g = 0.0;\n        }\n        \n        if(col.b < 0.0){\n            col.b = 0.0;\n        }\n\n        if(col.r + col.g + col.b < 0.3){\n            col = vec4(1.0, 0.8, 0.0, 1.0);\n        }\n        \n    } else {\n        // There are \"blocks\" outside of roads \n        // in the original painting\n        // (buildings?)\n        col = vec4(0.9, 0.9, 0.9, 1.0);\n        vec4 blocksvar = blocks(x, y);\n        col = blocksvar.a * blocksvar + (1.0 - blocksvar.a) * col;\n    }\n\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Adapt from shadergif variables\n    vec2 UV = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    \n    float xs = UV.x * ratio;\n    float ys = UV.y;\n\n    float size = 40.0;\n    \n    int x = int(floor(xs * size));\n    int y = int(floor(ys * size));\n    \n    vec4 col = vec4(0.0);\n\n    col += bbw(x, y);\n\n    // edges detail\n    vec2 square_pos = vec2(xs * size - float(x), ys * size - float(y));\n    square_pos -= vec2(0.5, 0.5);\n    col *= (1.0 - pow(length(1.0 * square_pos), 2.0)) * 0.1 + 0.9;\n\n    // Some horizontal line shading\n    if(square_pos.y > 0.4){\n        vec4 other_col = bbw(x, y + 1);\n        if(length(abs(other_col - col)) > 0.1){\n            float pos = (square_pos.y - 0.4)/0.1;\n            col = pos * other_col + (1.0 - pos) * col;\n            col -= 0.1;\n        }\n    }\n    \n    col.a = 1.0;\n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}