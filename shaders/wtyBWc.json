{
    "Shader": {
        "info": {
            "date": "1615170312",
            "description": "Simple bloom filter based on a LearnOpenGL tutorial: [url=https://learnopengl.com/Advanced-Lighting/Bloom]https://learnopengl.com/Advanced-Lighting/Bloom[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "wtyBWc",
            "likes": 4,
            "name": "Simple Bloom w/Jitter Blur",
            "published": 3,
            "tags": [
                "simple",
                "blur",
                "light",
                "random",
                "effect",
                "postprocess",
                "bloom",
                "jitter"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 418
        },
        "renderpass": [
            {
                "code": "#define BLOOM_THRESHOLD 0.5\n#define BLOOM_BLEED 0.25\n#define BLOOM_SAMPLES 500\n#define TIME_JITTER 0\n\n// Hash from \"Hash without Sine\" by Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec2 Hash12(in float x) {\n    vec3 p3 = fract(x * vec3(0.1031, 0.109, 0.09792));\n\tp3 += dot(p3, p3.yzx + 33.0);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvec4 getBloom(in vec2 uv) {\n    vec4 bloom = vec4(0.0);\n    for (int i=0; i < BLOOM_SAMPLES; i++) {\n        float s = float(i);\n\n        #if TIME_JITTER == 1\n        s += iTime;\n        #endif\n\n        vec2 pos = uv + (Hash12(s) - 0.5) * BLOOM_BLEED;\n        vec4 samp = texture(iChannel1, pos);\n        bloom += samp;\n    }\n\n    return bloom / float(BLOOM_SAMPLES);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = vec4(0.0);\n    for (int i=0; i < BLOOM_SAMPLES; i++) {\n        float j = float(i);\n\n        #if TIME_JITTER == 1\n        j += iTime;\n        #endif\n\n        vec4 samp = texture(iChannel0, uv + (Hash12(j) - 0.5) * BLOOM_BLEED);\n        fragColor += max(sign(samp - BLOOM_THRESHOLD), 0.0);\n    }\n\n    fragColor /= float(BLOOM_SAMPLES);\n    fragColor += texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// One of my previous shaders: https://www.shadertoy.com/view/3ldcD7\nstruct Light {\n    vec3 pos; // Position of the light\n    vec3 col; // Color of the light\n    float Kc; // Constant attenuation term\n    float Kl; // Linear attenuation term\n    float Kq; // Quadratic attenuation term\n};\n\nvec3 getIllumination(in vec3 p, in Light light) {\n    float d = length(p - light.pos);\n    float b = 1.0 / (light.Kc + light.Kl * d + light.Kq * d * d);\n    return light.col * b;\n}\n\nmat2 Rotate(in float a) {\n    float rad = radians(a);\n    float c = cos(rad), s = sin(rad);\n    return mat2(c, -s, s, c);\n}\n\n#define t1 0.5 * iTime\n#define t3 1.5 * iTime\n\n#define c1 cos(t1) * 2.0\n#define s1 sin(t1) * 2.0\n#define c2 cos(iTime) * 2.0\n#define s2 sin(iTime) * 2.0\n#define c3 cos(t3) * 2.0\n#define s3 sin(t3) * 2.0\n\n#define blink round(fract(iTime * 3.0))\n#define second fract(iTime)\n#define bounce 4.0 * (second - second * second)\n\n#define light1 Light(vec3(c1, c3, s2), vec3(1.0, 0.0, 0.0) * blink, 1.0, 0.0, 0.5)\n#define light2 Light(vec3(s2, c1, s3), vec3(0.0, 1.0, 0.0) * bounce, 1.0, 0.0, 0.5)\n#define light3 Light(vec3(s2, s3, c1), vec3(0.0, 0.0, 1.0), 1.0, 0.0, 0.5)\n\nfloat mapScene(in vec3 p) {\n    vec3 q = abs(p) - 2.5;\n    float box1 = max(abs(max(q.x, max(q.y, q.z))) - 0.05, p.z - 2.0);\n\n    p.xz *= Rotate(30.0);\n    p -= vec3(0.25, -1.0, -2.0);\n    q = abs(p) - vec3(0.75, 1.5, 0.75);\n    float box2 = max(q.x, max(q.y, q.z));\n\n    p -= vec3(0.8, -0.7, 2.0);\n    p.xz *= Rotate(-55.0);\n    q = abs(p) - 0.8;\n    float box3 = max(q.x, max(q.y, q.z));\n\n    p.y -= 1.3;\n    float sphere1 = length(p) - 0.5;\n\n    p -= vec3(-2.0, -1.0, 1.5);\n    float sphere2 = length(p) - 1.0;\n\n    return min(box1, min(box2, min(box3, min(sphere1, sphere2))));\n}\n\nvec3 getNormal(in vec3 p) {\n    return normalize(vec3(mapScene(p + vec3(0.001, 0.0, 0.0)) - mapScene(p - vec3(0.001, 0.0, 0.0)),\n                          mapScene(p + vec3(0.0, 0.001, 0.0)) - mapScene(p - vec3(0.0, 0.001, 0.0)),\n                          mapScene(p + vec3(0.0, 0.0, 0.001)) - mapScene(p - vec3(0.0, 0.0, 0.001))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float t = 0.0;\n    for (int i=0; i < 150; i++) {\n        vec3 p = ro + rd * t;\n        float d = mapScene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n\n            vec3 l = normalize(light1.pos - p);\n            float diffuse = max(0.0, dot(n, l));\n            fragColor.rgb += getIllumination(p, light1) * diffuse;\n\n            l = normalize(light2.pos - p);\n            diffuse = max(0.0, dot(n, l));\n            fragColor.rgb += getIllumination(p, light2) * diffuse;\n\n            l = normalize(light3.pos - p);\n            diffuse = max(0.0, dot(n, l));\n            fragColor.rgb += getIllumination(p, light3) * diffuse;\n\n            l = normalize(vec3(-1.0, 1.0, 1.0));\n            diffuse = max(0.1, dot(n, l));\n            fragColor.rgb += 0.25 * diffuse;\n\n            break;\n        }\n\n        float ld1 = length(p - light1.pos) - 0.05;\n        float ld2 = length(p - light2.pos) - 0.05;\n        float ld3 = length(p - light3.pos) - 0.05;\n\n        if (ld1 < 0.001) {\n            fragColor.rgb = light1.col;\n        }\n\n        if (ld2 < 0.001) {\n            fragColor.rgb = light2.col;\n        }\n\n        if (ld3 < 0.001) {\n            fragColor.rgb = light3.col;\n        }\n\n        if (t > 20.0) {\n            break;\n        }\n\n        t += min(d, min(ld1, min(ld2, ld3)));\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}