{
    "Shader": {
        "info": {
            "date": "1480065262",
            "description": "An excuse to finally try out ShaderToy's multipass/buffer feature.",
            "flags": 32,
            "hasliked": 0,
            "id": "4tdXWM",
            "likes": 5,
            "name": "psychedelic metaballs",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "wave",
                "metaballs",
                "multipass"
            ],
            "usePreview": 0,
            "username": "MacSlow",
            "viewed": 2323
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Trying out 2D \"isosurfaces\" (metaballs) in a fragment-shader\n//\n// Copyright 2016 Mirco M端ller\n//\n// Author(s):\n//   Mirco \"MacSlow\" M端ller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float PI     = 3.14159265358979323846;\nconst vec4 red     = vec4 (1.0, 0.0, 0.0, 1.0);\nconst vec4 green   = vec4 (0.0, 1.0, 0.0, 1.0);\nconst vec4 blue    = vec4 (0.0, 0.0, 1.0, 1.0);\nconst vec4 white   = vec4 (1.0, 1.0, 1.0, 1.0);\nconst vec4 orange  = vec4 (1.0, 0.4, 0.125, 1.0);\nconst vec4 black   = vec4 (0.0, 0.0, 0.0, 1.0);\nconst vec4 cyan    = vec4 (0.0, 1.0, 1.0, 1.0);\nconst vec4 magenta = vec4 (1.0, 0.0, 1.0, 1.0);\nconst vec4 yellow  = vec4 (1.0, 1.0, 0.0, 1.0);\nconst float SCALE  = 11.;\n\n// metaballs - abusing vec3 to store x, y and r of a metaball\nvec3 ball0 = vec3 (-.5, .5, .1);\nvec3 ball1 = vec3 (.3, .2, .06);\nvec3 ball2 = vec3 (-.6, .7, .08);\nvec3 ball3 = vec3 (1.1, .4, .04);\nvec3 ball4 = vec3 (.9, -.4, .1);\nvec3 ball5 = vec3 (-.4, .4, .09);\nvec3 ball6 = vec3 (1.2, -.8, .07);\n\nvec4 gradient (float v) {\n    float steps = 7.;\n    float step = 1. / steps;\n    vec4 col = green;\n\n    if (v >= .0 && v < step) {\n        col = mix (yellow, orange, v * steps);\n    } else if (v >= step && v < 2.0 * step) {\n        col = mix (orange, red, (v - step) * steps);\n    } else if (v >= 2.0 * step && v < 3.0 * step) {\n        col = mix (red, magenta, (v - 2.0 * step) * steps);\n    } else if (v >= 3.0 * step && v < 4.0 * step) {\n        col = mix (magenta, cyan, (v - 3.0 * step) * steps);\n    } else if (v >= 4.0 * step && v < 5.0 * step) {\n        col = mix (cyan, blue, (v - 4.0 * step) * steps);\n    } else if (v >= 5.0 * step && v < 6.0 * step) {\n        col = mix (blue, green, (v - 5.0 * step) * steps);\n    }\n    \n    return col;\n}\n\n// this is to make a metaball move around a little\nvec2 getPos (vec2 pos, float tick)\n{\n    float c = .25 * cos (tick);\n    float s = .25 * sin (tick);\n    vec2 offset = vec2 (c, s);\n\treturn pos + offset;\n}\n\nfloat getIso (vec3 ball, vec2 curr, float tick)\n{\n\treturn ball.b / distance (curr, getPos (ball.rg, tick));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    // normalize, center and aspect-correct texture-space\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv *= vec2 (iResolution.x / iResolution.y, 1.0);\n\n    // \"scale\" the resulting pattern\n    vec2 uv2 = fragCoord.xy / iResolution.xy;\n    uv2 *= vec2 (iResolution.x / iResolution.y, 1.0);\n    uv2 = uv2 * .5;\n\n    // rotate texture-space clockwise\n    float rad = .125 * iTime * PI;\n    float c = cos (rad);\n    float s = sin (rad);\n    uv *= mat2 (vec2 (c, -s), vec2 (s, c));\n\n    // pull and sum up iso-values from all metaballs\n    float col = getIso (ball0, uv, .5 * iTime);\n    col += getIso (ball1, uv, -.6 * iTime);\n    col += getIso (ball2, uv, .7 * iTime);\n    col += getIso (ball3, uv, -.8 * iTime);\n    col += getIso (ball4, uv, .6 * iTime);\n    col += getIso (ball5, uv, -.5 * iTime);\n    col += getIso (ball6, uv, .7 * iTime);\n\n    vec4 col1 = gradient (col);\n    vec4 col2 = texture (iChannel0, uv2);\n\n    fragColor = col1 + col2;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Trying out random wavy stuff in a fragment-shader\n//\n// Copyright 2016 Mirco M端ller\n//\n// Author(s):\n//   Mirco \"MacSlow\" M端ller <macslow@gmail.com>\n//\n// This program is free software: you can redistribute it and/or modify it\n// under the terms of the GNU General Public License version 3, as published\n// by the Free Software Foundation.\n//\n// This program is distributed in the hope that it will be useful, but\n// WITHOUT ANY WARRANTY; without even the implied warranties of\n// MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR\n// PURPOSE.  See the GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program.  If not, see <http://www.gnu.org/licenses/>.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst float SCALE = 11.;\nconst float DETAIL = 7.;\n\nconst vec3 ruby  = vec3 ( 84. / 255.,  31. / 255.,  20. / 255.);\nconst vec3 nude  = vec3 (147. / 255., 129. / 255., 114. / 255.);\nconst vec3 nylon = vec3 (204. / 255., 158. / 255.,  97. / 255.);\nconst vec3 pony  = vec3 ( 98. / 255., 98. / 255., 102. / 255.);\n\nfloat wave (vec2 p, float angle)\n{\n    vec2 dir = vec2 (cos (angle), sin(angle));\n    return cos (dot (p, dir));\n}\n\nfloat wrap (float value)\n{\n\treturn abs (mod (value, 2.) - 1.);\n}\n\nvec3 gradient (float value)\n{\n    if (value < 0.25) {\n        return mix (ruby, nude, value / 0.25);\n    } else if (value >= 0.25 && value < 0.5) {\n        return mix (nude, nylon, (value - 0.25) / 0.25);\n    } else if (value >= 0.5 && value < 0.75) {\n        return mix (nylon, pony, (value - 0.5) / 0.25);\n    } else {\n        return mix (pony, ruby, (value - 0.75) / 0.25);\n    }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    // normalize, center and aspect-correct texture-space\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv *= vec2 (iResolution.x / iResolution.y, 1.0);\n\n    // \"scale\" the resulting pattern\n    vec2 p = uv * SCALE;\n    \n    float brightness = .0;\n    for (float i = 1.; i < DETAIL; i++) {\n        brightness += wave (p, iTime / i);\n    }\n\n    brightness = wrap (brightness);\n    vec3 color = gradient (brightness);\n\n    fragColor = vec4 (color, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}