{
    "Shader": {
        "info": {
            "date": "1610225511",
            "description": "A tone editor like photoshop's tone curve.\nInterpolation funcs from:\nhttps://www.shadertoy.com/view/MsXGDj",
            "flags": 32,
            "hasliked": 0,
            "id": "WttyDs",
            "likes": 18,
            "name": "Tone curve",
            "published": 3,
            "tags": [
                "contrast",
                "colorcorrection",
                "tool",
                "tonecurve"
            ],
            "usePreview": 1,
            "username": "iY0Yi",
            "viewed": 1199
        },
        "renderpass": [
            {
                "code": "float fivePointToneCurve(float col, float low, float lmid, float mid, float hmid, float high){\n    float VU = -0.25+low;\n\tfloat V1 =  0.0 +low;\n\tfloat V2 =  0.25+lmid;\n\tfloat V3 =  0.5 +mid;\n\tfloat V4 =  0.75+hmid;\n\tfloat V5 =  1.0 +high;\n\tfloat VO =  1.25+high;\n\tif(col<.25)\n\t\treturn INTP( col*4.,      VU, V1, V2, V3);\n\telse if(col<.5)\n\t\treturn INTP((col-.25)*4., V1, V2, V3, V4);\n    else if(col<.75)\n\t\treturn INTP((col- .5)*4., V2, V3, V4, V5);\n\telse if(col<1.)\n\t\treturn INTP((col-.75)*4., V3, V4, V5, VO);\n    else\n        return 0.;\n}\n\nvec3 fivePointToneCurve(vec3 col, float low, float lmid, float mid, float hmid, float high){\n\tvec3 res;\n\tres.x = fivePointToneCurve(col.r, low, lmid, mid, hmid, high);\n\tres.g = fivePointToneCurve(col.g, low, lmid, mid, hmid, high);\n\tres.b = fivePointToneCurve(col.b, low, lmid, mid, hmid, high);\n\treturn res;\n}\n\nfloat drawTCGraph(vec2 gv, float low, float lmid, float mid, float hmid, float high){    \n    float line = 1.;\n    if(gv.x>0. && gv.x<1.){\n        line = fivePointToneCurve(gv.x, low, lmid, mid, hmid, high);\n        line = sms(.0,.005,abs(line-gv.y));\n\n        line *= sms(.005,.0055,abs(0.001-gv.x));\n        line *= sms(.0,.0025,abs(0.25-gv.x));\n        line *= sms(.0,.0025,abs(0.5-gv.x));\n        line *= sms(.0,.0025,abs(0.75-gv.x));\n        line *= sms(.005,.0055,abs(.999-gv.x));\n\n        line *= sms(.005,.0055,abs(0.001-gv.y));\n        line *= sms(.0,.0025,abs(0.25-gv.y));\n        line *= sms(.0,.0025,abs(0.5-gv.y));\n        line *= sms(.0,.0025,abs(0.75-gv.y));\n        line *= sms(.005,.0055,abs(.999-gv.y));\n    }\n    \n    float hndls = 1.;\n    hndls *= sms(.01,.012, distance(gv, vec2(0., low)));\n    hndls *= sms(.01,.012, distance(gv, vec2(.25, lmid+.25)));\n    hndls *= sms(.01,.012, distance(gv, vec2(.5, mid+.5)));\n    hndls *= sms(.01,.012, distance(gv, vec2(.75, hmid+.75)));\n    hndls *= sms(.01,.012, distance(gv, vec2(1., high+1.)));\n\n    return line * hndls;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    #define fetch(st) u2s(texelFetch(iChannel1, ivec2(st,0), 0).r)*.5\n    float low = fetch(0);\n    float lmid = fetch(1);\n\tfloat mid = fetch(2);\n    float hmid = fetch(3);\n\tfloat high = fetch(4);\n\n\tvec3 tex = fivePointToneCurve(texture(iChannel0, fragCoord.xy / iResolution.xy).rgb, low, lmid, mid, hmid, high);\n    \n    float gui = drawTCGraph(normalizeUVx(fragCoord.xy/iResolution.xy, iResolution.xy), low, lmid, mid, hmid, high);\n    \n\tfragColor = vec4(mix(vec3(1), tex, gui),1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    if(iFrame<=1){\n        fragColor = vec4(.5); \n        return;\n    }\n    \n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    if(iMouse.z>0.){\n        vec2 mou = normalizeUVx(iMouse.xy/iResolution.xy, iResolution.xy);\n        \n        #define isIn(range) abs(mou.x-range) <= .1\n        \n        if(floor(fragCoord.x)==0. && isIn(.0)){\n            fragColor.r = mou.y+.5;\n        }\n        else\n        if(floor(fragCoord.x)==1. && isIn(.25)){\n            fragColor.r = mou.y+.25;\n        }\n        else\n        if(floor(fragCoord.x)==2. && isIn(.5)){\n            fragColor.r = mou.y;\n        }\n        else\n        if(floor(fragCoord.x)==3. && isIn(.75)){\n            fragColor.r = mou.y-.25;\n        }\n        else\n        if(floor(fragCoord.x)==4. && isIn(1.)){\n            fragColor.r = mou.y-.5;\n        }\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define sat(x) clamp(x, 0.0, 1.0)\n#define sms(min, max, x) smoothstep(min, max, x)\n#define s2u(x) (x*.5+.5)\n#define u2s(x) ((x*2.)-1.)\n\nvec2 normalizeUVx(vec2 uv, vec2 res){\n    uv.x*=res.x/res.y;\n    uv.x-=.5*res.x/res.y-.5;\n    return uv;\n}\n\n// Interpolation funcs from:\n// https://www.shadertoy.com/view/MsXGDj\nfloat tcCatmullRom(float x, float v0,float v1, float v2,float v3){\n    //if(abs(v1-v2)<.001)return v1; // edited\n    float c2 = -.5 * v0\t+ 0.5*v2;\n\tfloat c3 = v0\t\t+ -2.5*v1 + 2.0*v2 + -.5*v3;\n\tfloat c4 = -.5 * v0\t+ 1.5*v1 + -1.5*v2 + 0.5*v3;\n\t//return mix(min(v1,v2), (((c4 * x + c3) * x + c2) * x + v1), sms(.0,0.01,abs(v1-v2))); // edited 2023.08.04\n    return (((c4 * x + c3) * x + c2) * x + v1);\n}\nfloat tcThirdOrderSpline(float x, float L1,float L0, float H0,float H1){\n\treturn \t\t  L0 +.5 *\n\t\t\tx * ( H0-L1 +\n\t\t\tx * ( H0 + L0 * -2.0 +  L1 +\n\t\t\tx * ((H0 - L0)* 9.0\t + (L1 - H1)*3.0 +\n\t\t\tx * ((L0 - H0)* 15.0 + (H1 - L1)*5.0 +\n\t\t\tx * ((H0 - L0)* 6.0\t + (L1 - H1)*2.0 )))));\n}\nfloat tcCubic(float x, float v0,float v1, float v2,float v3){\n\tfloat p = (v3 - v2) - (v0 - v1);\n\treturn p*(x*x*x) + ((v0 - v1) - p)*(x*x) + (v2 - v0)*x + v1;\n}\nfloat tcSmoothstep(float x, float v0, float v1, float v2,float v3){\n\tx = x*x*(3.0-2.0*x);\n\treturn (v2-v1)*x + v1;\n}\nfloat tcLinear(float x, float v0, float v1, float v2,float v3){\n\treturn (v2-v1)*x + v1;\n}\n\nfloat tcCatmullRomLinear(float x, float v0, float v1, float v2,float v3){\n    float l = tcLinear(x, v0, v1, v2, v3);\n    float c = tcCatmullRom(x, v0, v1, v2, v3);\n\treturn mix(c,l,sms(0.,1.,abs(v1-v2)));\n}\n\n\n#define INTP tcCatmullRom\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}