{
    "Shader": {
        "info": {
            "date": "1511810161",
            "description": "Lots of balls",
            "flags": 0,
            "hasliked": 0,
            "id": "MtsBW8",
            "likes": 34,
            "name": "Buoyant Balls",
            "published": 3,
            "tags": [
                "raymarch",
                "underwater"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 6023
        },
        "renderpass": [
            {
                "code": "// \"Buoyant Balls\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat Hashfv2 (vec2 p);\nvec3 Hashv3v3 (vec3 p);\n\nvec3 ltDir;\nfloat tCur, dstFar;\nconst vec3 bGrid = vec3 (2.);\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p, vec3 cId)\n{\n  vec3 h;\n  float s, d, r, a;\n  d = dstFar;\n  h = Hashv3v3 (cId);\n  if (h.x * step (2., length (cId.xz)) > 0.5) {\n    p -= bGrid * (cId + 0.5);\n    s = fract (64. * length (h));\n    s *= s;\n    r = 0.2 + 0.2 * bGrid.x * h.x * (1. - s) * abs (sin (3. * pi * h.y * (1. - s)));\n    a = h.z * tCur + h.x;\n    d = length (p - r * vec3 (cos (a), 0., sin (a))) - 0.4 + 0.3 * s;\n  }\n  return d;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, cId, s;\n  float dHit, d, eps;\n  eps = 0.0005;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  dHit = eps;\n  for (int j = 0; j < 120; j ++) {\n    p = ro + rd * dHit;\n    cId.xz = floor (p.xz / bGrid.xz);\n    p.y -= tCur * (1. + Hashfv2 (cId.xz));\n    cId.y = floor (p.y / bGrid.y);\n    d = ObjDf (p, cId);\n    s = (bGrid * (cId + step (0., rd)) - p) / rd;\n    d = min (d, abs (min (min (s.x, s.y), s.z)) + eps);\n    if (d < eps || dHit > dstFar) break;\n    dHit += d;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nfloat ObjDfN (vec3 p)\n{\n  vec3 cId;\n  cId.xz = floor (p.xz / bGrid.xz);\n  p.y -= tCur * (1. + Hashfv2 (cId.xz));\n  cId.y = floor (p.y / bGrid.y);\n  return ObjDf (p, cId);\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDfN (p + e.xxx), ObjDfN (p + e.xyy), ObjDfN (p + e.yxy), ObjDfN (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 BgCol (vec3 rd)\n{\n  float t, gd, b;\n  t = tCur * 4.;\n  b = dot (vec2 (atan (rd.x, rd.z), 0.5 * pi - acos (rd.y)), vec2 (2., sin (rd.x)));\n  gd = clamp (sin (5. * b + t), 0., 1.) * clamp (sin (3.5 * b - t), 0., 1.) +\n     clamp (sin (21. * b - t), 0., 1.) * clamp (sin (17. * b + t), 0., 1.);\n  return mix (vec3 (0.25, 0.5, 1.), vec3 (0., 0.4, 0.3), 0.5 * (1. - rd.y)) *\n     (0.24 + 0.44 * (rd.y + 1.) * (rd.y + 1.)) * (1. + 0.15 * gd);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, bgCol, vn;\n  float dstObj;\n  bgCol = BgCol (rd);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col = mix (vec3 (0.15, 0.35, 0.7), BgCol (reflect (rd, vn)), 0.8);\n    col = col * (0.4 + 0.1 * max (vn.y, 0.) + 0.5 * max (dot (vn, ltDir), 0.)) +\n       0.05 * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n    col *= 0.3 + 0.7 * min (rd.y + 1., 1.5);\n    col = mix (col, bgCol, smoothstep (0.5 * dstFar, dstFar, dstObj));\n  } else col = bgCol;\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.03 * pi * tCur;\n  el = 0.2 * pi * sin (0.02 * pi * tCur);\n  if (mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = 0.6 * pi * mPtr.y;\n  }\n  tCur += 100.;\n  el = clamp (el, -0.3 * pi, 0.3 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vec3 (0.5);\n  rd = vuMat * normalize (vec3 (uv, 3.));\n  ltDir = normalize (vec3 (0.2, 1., -0.2));\n  dstFar = 50.;\n  fragColor = vec4 (pow (ShowScene (ro, rd), vec3 (0.8)), 1.);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec3 Hashv3v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (vec3 (dot (p, cHashVA3), dot (p + vec3 (1., 0., 0.), cHashVA3),\n     dot (p + vec3 (0., 1., 0.), cHashVA3))) * cHashM);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}