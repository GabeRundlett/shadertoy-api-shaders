{
    "Shader": {
        "info": {
            "date": "1541970199",
            "description": "greets",
            "flags": 0,
            "hasliked": 0,
            "id": "ltyfRD",
            "likes": 9,
            "name": "Greetings",
            "published": 3,
            "tags": [
                "tunnel",
                "raymarch",
                "text",
                "greets",
                "dan"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 574
        },
        "renderpass": [
            {
                "code": "// dirty tunnel scroller :)\n// Del 11/11/2018 - Greetings to Dan! (added mobile fix)\n// yes, it seems you really can raymarch just about anything... :)\n// press mouse to remove sin displacement\n\n//--- font data ---\n#define FONT_SIZE 4.0\n#define FONT_SPACE 0.42\n#define SCROLL_LEN 20.\n#define SCROLL_SPEED 2.0\n\nfloat objID;\nfloat svObjID;\n\n#define S(b,a) c=max(c,char(b,float(a))); b.x-=FONT_SPACE;\n#define _ S(tp,32);\n#define _dot S(tp,46);\n#define _A S(tp,65);\n#define _B S(tp,66);\n#define _C S(tp,67);\n#define _D S(tp,68);\n#define _E S(tp,69);\n#define _F S(tp,70);\n#define _G S(tp,71);\n#define _H S(tp,72);\n#define _I S(tp,73);\n#define _J S(tp,74);\n#define _K S(tp,75);\n#define _L S(tp,76);\n#define _M S(tp,77);\n#define _N S(tp,78);\n#define _O S(tp,79);\n#define _P S(tp,80);\n#define _Q S(tp,81);\n#define _R S(tp,82);\n#define _S S(tp,83);\n#define _T S(tp,84);\n#define _U S(tp,85);\n#define _V S(tp,86);\n#define _W S(tp,87);\n#define _X S(tp,88);\n#define _Y S(tp,89);\n#define _Z S(tp,90);\n#define _a S(tp,97);\n#define _b S(tp,98);\n#define _c S(tp,99);\n#define _d S(tp,100);\n#define _e S(tp,101);\n#define _f S(tp,102);\n#define _g S(tp,103);\n#define _h S(tp,104);\n#define _i S(tp,105);\n#define _j S(tp,106);\n#define _k S(tp,107);\n#define _l S(tp,108);\n#define _m S(tp,109);\n#define _n S(tp,110);\n#define _o S(tp,111);\n#define _p S(tp,112);\n#define _q S(tp,113);\n#define _r S(tp,114);\n#define _s S(tp,115);\n#define _t S(tp,116);\n#define _u S(tp,117);\n#define _v S(tp,118);\n#define _w S(tp,119);\n#define _x S(tp,120);\n#define _y S(tp,121);\n#define _z S(tp,122);\n#define _0 S(tp,48);\n#define _1 S(tp,49);\n#define _2 S(tp,50);\n#define _3 S(tp,51);\n#define _4 S(tp,52);\n#define _5 S(tp,53);\n#define _6 S(tp,54);\n#define _7 S(tp,55);\n#define _8 S(tp,56);\n#define _9 S(tp,57);\n\n// return distance of ch at position tp\nconst float TEX_BIAS = 127./255.;\nfloat char(vec2 tp, float ch)\n{\n    vec2 _uv = vec2(clamp(tp,0.,1.)/16.+fract(floor(vec2(ch,15.999-float(ch)/16.))/16.));\n\tfloat f = textureLod(iChannel0, _uv, 0.).w + TEX_BIAS;\n    return clamp(1.0-f,0.0,0.5);\n}\n\n// return distance of scrolltext...\nfloat ScrollText(vec2 uv,float time)\n{\n\tvec2 tp = uv / FONT_SIZE;  // set font size\n\ttp.x = 2.0*(tp.x-4.4+mod(time*SCROLL_SPEED, SCROLL_LEN));\n\ttp.y = tp.y + (FONT_SIZE*0.5);\n\tfloat c = -1000.0;\n\t_ _G _r _e _e _t _i _n _g _s _ _ _t _o _ _D _a _n _dot _dot _dot _ _ _\n\treturn c;\n}\n\nmat2 rotate(float a)\n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\nvec2 path(in float z)\n{ \n    vec2 path = vec2(sin(iTime*0.9+z*0.25)*1.25,cos(iTime*0.7+z*0.4)*1.95);\n    return path;\n}\n\n\n// internal cylinder\nfloat DirtyTunnel(vec3 p, float d)\n{\n\tfloat d2 = d - length(p.xy);\n    // tunnel noise...\n    if (iMouse.z<0.5)\n    {\n        float k = dot(sin(p*1.25 - cos(p.yzx*0.667)), vec3(.333))*.387;\n        k += dot(sin(p*0.5 - cos(p.yzx*1.24)), vec3(.333))*.69;\n        d2-=k;\n    }\n    return d2;\n}\n\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\n\nfloat map(vec3 p)\n{\n\tvec2 pth = path(iTime*0.3+p.z);   \n    p.xy *= rotate(p.z*0.15);\n    vec3 p2 = p;\n    p2.xy += pth;\n    p2.z += iTime*0.6;\n    float d2 = DirtyTunnel(p2,9.0 + sin(iTime*0.5+p.z*0.5)*0.75 );\n    vec2 uv3 = (p.zy)+vec2(0.0,-6.5);\n    uv3.y += sin(iTime+p.z*0.6)*1.8;\n    uv3.x *= -sign(p.x);\n    float k = ScrollText(uv3,3.51+iTime)*3.5;\n    objID = 0.5;\n    if (k>0.0)\n    {\n        float d3 = d2-k;\n        objID = 0.0;\n        d2 = smin(d2,d3,0.3);\n    }\n\treturn d2;\n}\n\nvec3 normal(vec3 p)\n{\n\t//vec2 e = vec2(.001, 0.);\n\t//vec3 n;\n\t//n.x = map(p + e.xyy) - map(p - e.xyy);\n\t//n.y = map(p + e.yxy) - map(p - e.yxy);\n\t//n.z = map(p + e.yyx) - map(p - e.yyx);\n\t//return normalize(n);\n    \n    vec2 e = vec2(0.0025, -0.0025); \n    return normalize(\n        e.xyy * map(p + e.xyy) + \n        e.yyx * map(p + e.yyx) + \n        e.yxy * map(p + e.yxy) + \n        e.xxx * map(p + e.xxx));    \n}\n\nvec3 render(vec2 uv)\n{\n\tvec3 ro = vec3(0.0,0.0,0.0);\n\tvec3 rd = normalize(vec3(uv, .5));\n\tvec3 p = vec3(0.);\n\tfloat t = 0.;\n\tfor (int i = 0; i < 32; i++)\n    {\n\t\tp = ro + rd * t;\n\t\tfloat d = map(p);\n\t\tif (d < .001 || t > 100.) break;\n\t\tt += 0.5 * d;\n\t}\n\tvec3 l = ro;\n\n    svObjID = objID; // Save the object ID, for the coloring\n    \n\tvec3 n = normal(p);\n\tvec3 lp = normalize(l - p);\n    \n    lp.x += sin(iTime)*0.25;\n    lp.y += cos(iTime)*0.25;\n    \n\tfloat diff = .5 * max(dot(lp, n), 0.);\n    float lv = (1. + t * t * .01);\n    \n    if (svObjID < 0.5)\n\t\treturn vec3(2.54,2.2,0.65)*diff / lv;\n\treturn vec3(0.94,1.6,1.95)*diff / lv;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec3 col = render(uv);\n\tfragColor = vec4(col, 1.);\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}