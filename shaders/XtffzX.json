{
    "Shader": {
        "info": {
            "date": "1513062761",
            "description": "An experiment with an idea I had during a live-coding session. Mouse-enabled.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtffzX",
            "likes": 64,
            "name": "Androgynous bolts",
            "published": 3,
            "tags": [
                "raymarching",
                "motionblur",
                "antialiasing",
                "screw",
                "bolt",
                "nut"
            ],
            "usePreview": 1,
            "username": "s23b",
            "viewed": 3724
        },
        "renderpass": [
            {
                "code": "// twist density\n#define SCREW 12.\n\n// animation speed\n#define SPEED 1.\n\n// field of view\n#define FOV 3.\n\n// set to 0 to disable motion blur\n#define MOTION_BLUR 1\n\n// set the antialiasing amount\n#define AA 2.\n\n#define MAX_STEPS 80\n#define SHADOW_STEPS 200\n#define SHADOW_SOFTNESS 20.\n#define EPS .0001\n#define RENDER_DIST 20.\n#define AO_SAMPLES 5.\n#define AO_RANGE 10.\n#define LIGHT_COLOR vec3(1.,.8,.6)\n\n#define PI 3.14159265359\n#define SQRT1_2 0.70710678118\n#define saturate(x) clamp(x, 0., 1.)\n\nfloat time;\n\n// simple 3D hash function\nfloat hash(vec3 uv) {\n    float f = fract(sin(dot(uv, vec3(.09123898, .0231233, .0532234))) * 1e5);\n    return f;\n}\n\n// rotate 2d space with given angle\nvoid tRotate(inout vec2 p, float angel) {\n    vec2 s = sin(vec2(angel, angel + PI * .5));\n\tp *= mat2(s.y, -s.x, s);\n}\n\n// divide 2d space into s chunks around the center\nvoid tFan(inout vec2 p, float s) {\n    float k = s / PI / 2.;\n    tRotate(p, -floor((atan(p.y, p.x)) * k + .5) / k);\n}\n\n// union\nfloat opU(float a, float b) {\n    return min(a, b);\n}\n\n// intersection\nfloat opI(float a, float b) {\n    return max(a, b);\n}\n\n// substraction\nfloat opS(float a, float b) {\n    return max(a, -b);\n}\n\n// distance function for the androgynous bolt\nfloat bolt(vec3 p) {\n    float radius = length(p.xz) - .25;\n    \n    // basically a triangle wave spun around Oy, offset by the angle between x and z\n    float thread = (radius - abs(fract(p.y * SCREW - atan(p.z, p.x) / PI / 2.) - .5) / SCREW) * SQRT1_2;\n    \n    // clip the top and bottom\n    float screw = opS(thread, .5 - abs(p.y + .5));\n    float cone = (p.y - radius) * SQRT1_2;\n    \n    // add a diagonal clipping for more realism\n    screw = opS(screw, cone + 1. * SQRT1_2);\n    \n    // the hole is the same thing, but substracted frome the whole thing\n    float hole = opS(thread, cone + .5 * SQRT1_2);\n    hole = opU(hole, -cone - .05 * SQRT1_2);\n    \n    // create the hexagonal geometry for the head\n    tFan(p.xz, 6.);\n    float head = p.x - .5;\n    \n    // the top is also rouded down with a cone\n    head = opI(opI(head, abs(p.y + .25) - .25), (p.y + radius - .22) * SQRT1_2);\n    return opS(opU(screw,head), hole);\n}\n\n// transform for the top screw\nvoid tNextBolt(inout vec3 p) {\n    float t = mod(time, 5.);\n    const float limit = 1. / SCREW;\n    if (t < 1.) {\n        // fall\n        p.y -= smoothstep(1., 0., t) * 2. + 1. - limit;\n    } else if (t < 1.5) {\n        // hold\n        p.y -= 1. - limit;\n    } else if (t < 4.) {\n        // twist\n        float progress = smoothstep(4., 1.5, t);\n        p.y -= .5 + progress * (.5 - limit);\n        tRotate(p.xz, -progress * (SCREW / 2. - 1.) * 2. * PI);\n    } else if (t < 4.5) {\n        // hold\n        p.y -= .5;\n    } else {\n        // drop\n        p.y += .5 * smoothstep(4.5, 5., t) -.5;\n    }\n}\n\n// distance to the top bolt\nfloat nextBolt(vec3 p) {\n    tNextBolt(p);\n    return bolt(p);\n}\n\n// transform for the bottom screw\nvoid tPrevBolt(inout vec3 p) {\n    float t = mod(time, 5.);\n    p.y += .5 * smoothstep(4.5, 5., t);\n}\n\nfloat prevBolt(vec3 p) {\n    tPrevBolt(p);\n    return bolt(p);\n}\n\nfloat map(vec3 p) {\n    p.y += .25;\n\treturn opU(nextBolt(p), prevBolt(p));\n}\n\n// trace the scene from ro (origin) to rd (direction, normalized)\n// until hit or reached maxDist, outputs distance traveled and the number of steps\nfloat trace(vec3 ro, vec3 rd, float maxDist, out float steps) {\n    float total = 0.;\n    steps = 0.;\n    \n    for (int i = 0; i < MAX_STEPS; ++i) {\n        ++steps;\n        float d = map(ro + rd * total);\n        total += d;\n        if (d < EPS || maxDist < total) break;\n    }\n    \n    return total;\n}\n\n// get the soft shadow value\nfloat softShadow(vec3 ro, vec3 rd, float maxDist) {\n    float total = 0.;\n    float s = 1.;\n    \n    for (int i = 0; i < SHADOW_STEPS; ++i) {\n        float d = map(ro + rd * total);\n        if (d < EPS) {\n            s = 0.;\n            break;\n        }\n        if (maxDist < total) break;\n        s = min(s, SHADOW_SOFTNESS * d / total);\n        total += d;\n    }\n    \n    return s;\n}\n\n// calculate the normal vector\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(.005, 0);\n    return normalize(vec3(\n        map(p + e.xyy) - map(p - e.xyy),\n        map(p + e.yxy) - map(p - e.yxy),\n        map(p + e.yyx) - map(p - e.yyx)\n\t));\n}\n\n// ambient occlusion\nfloat calculateAO(vec3 p, vec3 n) {\n    \n    float r = 0., w = 1., d;\n    \n    for (float i = 1.; i <= AO_SAMPLES; i++){\n        d = i / AO_SAMPLES / AO_RANGE;\n        r += w * (d - map(p + n * d));\n        w *= .5;\n    }\n    \n    return 1.-saturate(r * AO_RANGE);\n}\n\n// texture function\nvec3 _texture(vec3 p) {\n    p.y += .25;\n    if (prevBolt(p) <= nextBolt(p)) {\n        tPrevBolt(p);\n    } else {\n        tNextBolt(p);\n    }\n    p *= 1.;\n    \n    // yay, looks like we can sneakily get away with a single sample here\n    return pow(texture(iChannel0, p.xy * 2. + p.zz).rgb, vec3(2.2));\n    return vec3(1);\n}\n\nfloat bumpTexture(vec3 p) {\n    return 1. - _texture(p).g;\n}\n\n// bump mapping from Shane\nvec3 doBumpMap(vec3 p, vec3 nor, float bumpfactor) {\n    \n    vec2 e = vec2(.0001, 0);\n    float ref = bumpTexture(p);                 \n    vec3 grad = vec3(bumpTexture(p - e.xyy) - ref,\n                     bumpTexture(p - e.yxy) - ref,\n                     bumpTexture(p - e.yyx) - ref) / e.x;\n             \n    grad -= nor * dot(nor, grad);          \n                      \n    return normalize(nor + grad * bumpfactor);\n\t\n}\n\nvec4 frame(vec2 fragCoord) {\n    vec4 fragColor = vec4(0);\n    \n    // set up global time variable\n    time = iTime * SPEED;\n    \n    // add hash value to create the motion blur effect\n    #if MOTION_BLUR\n    time = time + hash(vec3(fragCoord, time)) / iFrameRate * SPEED;\n    #endif\n    \n    // transform screen coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // transform mouse coordinates\n\tvec2 mouse = iMouse.xy / iResolution.xy * 2. - 1.;\n    mouse.x *= iResolution.x / iResolution.y * 4.;\n    \n    // we are sneaky af, we can't let anyone know, that there's only two bolts the entire time ;)\n    mouse.y = clamp(mouse.y, -.3, .5);\n    \n    // set up camera position\n    vec3 ro =  vec3(0, 0, -2);\n    vec3 rd = normalize(vec3(uv, FOV));\n    \n    // light position\n    vec3 light = vec3(-.4, .3, -1.);\n    \n    vec2 rot = vec2(0);\n    if (iMouse.z > 0.) {\n    \t// rotate the scene using the mouse\n        rot = -mouse;\n    } else {\n        // set a nice angle as default\n        rot = vec2(.6, .05);\n    }\n    \n    tRotate(rd.yz, rot.y);\n    tRotate(rd.xz, rot.x);\n    tRotate(ro.yz, rot.y);\n    tRotate(ro.xz, rot.x);\n    \n    // march\n    float steps, dist = trace(ro, rd, RENDER_DIST, steps); \n    \n    // calculate hit point coordinates\n    vec3 p = ro + rd * dist;\n    \n    // calculate normal\n    vec3 normal = getNormal(p);\n    normal = doBumpMap( p, normal, .005);\n    \n    // light direction\n    vec3 l = normalize(light - p);\n    \n    // calculate shadow\n    vec3 shadowStart = p + normal * EPS * 10.;\n    float shadowDistance = distance(shadowStart,light);\n    float shadow = softShadow(shadowStart, l, shadowDistance);\n    \n    // ambient light\n    float ambient = .02;\n    \n    // diffuse light\n    float diffuse = max(0., dot(l, normal) * 2.);\n    \n    // specular light\n    float specular = pow(max(0., dot(reflect(-l, normal), -rd)), 4.);\n    \n    // \"ambient occlusion\"\n    float ao = calculateAO(p, normal) * .5 + .5;\n    \n    // add this all up\n\tfragColor.rgb = (ao * _texture(p)) * (ambient * (2. - LIGHT_COLOR) * .5 + (specular + diffuse) * shadow * LIGHT_COLOR);\n    \n    // fog\n    vec4 fogColor = vec4(mix(vec3(.0, .025, .05), LIGHT_COLOR * 2., pow(max(0., dot(normalize(light), rd)), 10.)), 1);\n    fragColor = mix(fragColor, fogColor, saturate(dist * dist * .01 - .1));\n    \n    // if we passed the bolts, then apply a dark glow, this makes the bolts pop out\n    if (length(p) > 1.) \n        fragColor *= saturate(1. - sqrt(steps / float(MAX_STEPS)));\n    \n    // add some vignetting\n    fragColor *= smoothstep(2., 0., length(uv));\n    \n    return fragColor;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0);\n    float increment = 1. / AA;\n    for (float i = 0.; i < 1.; i += increment) {\n        for (float j = 0.; j < 1.; j += increment) {\n            fragColor += frame(fragCoord + vec2(i,j));\n        }\n    }\n    \n    // divide with subpixel count and apply gamma correction\n    fragColor = pow(fragColor / AA / AA, vec4(1. / 2.2));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}