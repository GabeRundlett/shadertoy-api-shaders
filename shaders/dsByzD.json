{
    "Shader": {
        "info": {
            "date": "1688368016",
            "description": "This is my rendition of how I imagine earth from P0\nThis code is well commented for you to follow an introductory solution to Ray Marching.\n\n\n#earth #sun #space #nothingforchandrayaan #nomoon #moonmissing #starrysky #raymarching #shading #ai #tensorflow",
            "flags": 0,
            "hasliked": 0,
            "id": "dsByzD",
            "likes": 2,
            "name": "Introduction to Ray Marching",
            "published": 3,
            "tags": [
                "sdf"
            ],
            "usePreview": 0,
            "username": "rohtas",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "const int STEPS = 50;\nconst float TRACE_DISTANCE = 200.0;\nconst float HIT_DISTANCE = 1e-3;\nconst float SPHERE_RADIUS = 1.0;\nconst float LIGHT_RADIUS = 0.1;\nconst float TILE_SIZE = 8.0;\nconst float PI = 3.14;\n\nvec3 GetSphere() {\n    vec3 sphere = vec3(0., 0., 3.);\n    // float omega = 1e-2;\n    // float freq = 2.0 * PI * omega;\n    // sphere.x = 2.0 * ( mod(freq*iTime, 1.0) - 0.5 );\n    return sphere;\n}\n\nfloat SdSphere(vec3 p) {\n    vec3 sphere = GetSphere();\n    \n    float d = length(p-sphere.xyz) - SPHERE_RADIUS;\n    return d;\n}\n\nvec3 GetLightPos() {\n    vec3 pos = GetSphere();\n    //pos.xy += vec2(cos(iTime * 0.2), sin(iTime * 5.8));\n    float freq = 2.0*PI*0.01;\n    pos.xz += 4.9*vec2(sin(freq*iTime), cos(freq*iTime));\n    return pos;\n}\n\nvec3 GetLight(vec3 p, vec3 n, float power) {\n    vec3 lightColor = vec3(1.0, 1.0, 1.0);\n    vec3 pos = GetLightPos();\n    vec3 l = normalize(pos-p);\n    // Diffuse Light\n    float diffuse = max(0.0, dot(n, l));\n    vec3 intensity = diffuse*lightColor;\n    return power*intensity; \n}\n\nfloat SdLight(vec3 p) {\n    vec3 pos = GetLightPos();\n    float d = length(p-pos) - LIGHT_RADIUS;\n    return d;\n}\n\nvec2 GetScene(vec3 p) {\n\n      // Check Spheres\n     float sdSphere = SdSphere(p);\n     \n     // Check Light\n     float sdLight = SdLight(p);\n     \n     // Return Map\n     if ( sdLight < sdSphere ) {\n         return vec2(sdLight, 2.0);\n     } else {\n         return vec2(sdSphere, 1.0);\n     }\n}\n\nfloat BloomEffect(float sd, float amp, float sigma, float falloff) {\n    return amp/pow((2.0*PI*sigma*sigma), 0.5)*exp(-falloff*sd*sd);\n}\n\n// Shader Ops\nvec3 GetNormal(vec3 p) {\n    vec2 delta = vec2(1e-2, 0.0);\n    vec3 n = vec3(\n        GetScene(p+delta.xyy).s - GetScene(p-delta.xyy).s,\n        GetScene(p+delta.yxy).s - GetScene(p-delta.yxy).s,\n        GetScene(p+delta.yyx).s - GetScene(p-delta.yyx).s\n    );\n    return normalize(n);\n}\n\nvec2 LambertAzimuthalProjection(vec3 p) {\n    vec3 normalizedPoint = normalize(p);\n    float theta = atan(normalizedPoint.y, normalizedPoint.x);\n    float phi = acos(normalizedPoint.z);\n\n    // Normalize theta and phi to the range [0, 1]\n    float u = (theta + PI) / (2.0 * PI);\n    float v = phi / PI;\n    \n    return vec2(u, v);\n}\n\nvec3 RotatePlanet(vec3 p, float thetaX, float thetaY, float thetaZ) {\n\n    float cosThetaX = cos(thetaX);\n    float sinThetaX = sin(thetaX);\n    mat3 rotationMatrixX = mat3(\n        1.0,  0.0,       0.0,\n        0.0,  cosThetaX, -sinThetaX,\n        0.0,  sinThetaX, cosThetaX\n    );\n\n    float cosThetaY = cos(thetaY);\n    float sinThetaY = sin(thetaY);\n    mat3 rotationMatrixY = mat3(\n        cosThetaY, 0.0, -sinThetaY,\n        0.0,       1.0,  0.0,\n        sinThetaY, 0.0, cosThetaY\n    );\n\n    float cosThetaZ = cos(thetaZ);\n    float sinThetaZ = sin(thetaZ);\n    mat3 rotationMatrixZ = mat3(\n        cosThetaZ, -sinThetaZ, 0.0,\n        sinThetaZ, cosThetaZ,  0.0,\n        0.0,       0.0,        1.0\n    );\n\n    // Apply the rotations in the desired order (Z, then Y, then X)\n    mat3 combinedRotationMatrix = rotationMatrixZ * rotationMatrixY * rotationMatrixX;\n\n    return combinedRotationMatrix * p;\n}\n\nvec3 GetPlanetCoordinate(vec3 p) {\n   p = normalize(p-GetSphere());\n   vec3 theta = vec3(-105., -0., iTime*-10.);      \n   p = RotatePlanet(p, radians(theta.x), radians(theta.y), radians(theta.z));\n   return p;\n}\nvec3 PlanetColor(vec3 p, vec3 light) {\n    p = GetPlanetCoordinate(p); \n    vec2 angular = LambertAzimuthalProjection(p); \n    vec3 col = mapEarth(vec3(p.y,p.x,p.z));\n    col = smoothstep(0.,1.,sqrt(col));\n    col = smoothstep(0.,1.,col);\n    if (length(light) < 1e-2 ) {\n        float time = 1.;\n        float temp = NoiseT(time*0.004, p.xyz, 4.0);\n        temp = mix(temp, NoiseT(time*0.008, p.xyz, 34.0), 0.8);\n        temp = mix(temp, NoiseT(time*0.01, p.xyz, 164.0), 0.4);\n        temp = smoothstep(0.76, .82, temp);\n        float value = temp*length(col.rg)/pow(2., 0.5);\n        col = value*vec3(1.0, 1.0, 0.0);\n    } else {\n        col = col*light;\n    }\n    return col;   \n}\n\nvec3 SunColor(vec3 p, vec2 uv)\n{\n    float time = iTime;\n    p = normalize(p - GetLightPos());\n    float temp = NoiseT(time*0.004, p.xyz, 4.0);\n    temp = mix(temp, NoiseT(time*0.008, p.xyz, 34.0), 0.8);\n    temp = mix(temp, NoiseT(time*0.01, p.xyz, 164.0), 0.4);\n    float spots = NoiseT(time*0.004, p.xyz, 4.0);\n    float h = 0.75;\n    float c = 0.2;\n    if(true && spots < c)\n        temp = mix(temp, 0.0, min(1.0, 2.0 * (c-spots)*(1.0/c)));\n    else if(true && spots > h)\n    \ttemp = temp * (1.0 + min(1.0, 2.0 * (spots-h)*(1.0/(1.0-h))));\n    temp = pow(temp, 2.0) ;\n   \tvec3 col = vec3(min(1.0, sqrt(temp) * 3.5), min(1.0, temp * 1.2), min(1.0, temp * 0.0));\n    float w = 0.38;\n    if(temp > w)\n        col = mix(col, vec3(1.0),  (temp-w)*(1.0/(1.0-w))); \n        \n    float k = (1.0 + cnoise(vec4(normalize(uv),time*0.01, 0.0) * 64.0)) * 0.5;\n    float d = k - 0.999;\n    if(d >= 0.0)\n    {\n        col = mix(col, vec3(2.0,0.9*k,0.05), 1.0 * min(1.0, sqrt(d)) );\n    }    \n    return col;\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd, vec2 uv) {\n    // Fragment Color\n    vec3 C = vec3(0.0);\n    // Distance To Scene\n    float dS = 0.0;\n    // Loop\n    vec2 bounce;\n    for(int i=0; i<STEPS; i+=1) {\n        vec3 p = ro + dS*rd;\n        bounce = GetScene(p);\n        if(bounce.s < HIT_DISTANCE || dS > TRACE_DISTANCE) {\n            break;\n        }\n        dS += bounce.s;\n    }\n    // Position\n    vec3 p = ro+dS*rd;\n    vec3 n = GetNormal(p);\n    \n    // Color Shading\n    if(bounce.s < HIT_DISTANCE) {     \n        // Check Object on Ray Bounce\n        if ( bounce.t == 1.0 ) {\n            vec3 light = GetLight(p, n, 1.0);\n            C = PlanetColor(p, light);\n        } else if ( bounce.t == 2.0) {\n            C = SunColor(p, uv);\n        }\n    // Environment Shading        \n    } else {\n        // Star Field\n        vec2 pos = (uv + 1.) * 1. / 2.0;\n        pos.x += iTime*1e-1;\n        vec3 texel = texture(iChannel1, pos).rgb;\n        float value = length(texel) / 3.0;\n        value = smoothstep(0.30, 0.35, value)*3.0;\n        C = vec3(value);   \n        // Sun Field\n        vec3 center = GetLightPos().xyz;\n        value = dot(normalize(p), normalize(center));\n        value = pow(value, 55.0);\n        float b = value * (1.0 + cnoise(vec4(uv, iTime*0.06, 0.0)*1.5)) * 0.5; \n        float k = (1.5 + cnoise(vec4(normalize(uv),iTime*0.01, 0.0) * 32.0)) * 0.5;\n        vec3 bloom = vec3(b*1.5, pow(b, 3.0) * k, b*0.0) ;\n        C = mix(C, bloom, 0.5);\n    }\n\n    return vec4(C, dS);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (uv - 0.5) * 2.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Ray Marching\n    // Ray Origin\n    vec3 ro = vec3(0.0, 0.0, -2.0);\n    // Ray Direction\n    vec3 rd = vec3(uv, 2.0);\n    rd = normalize(rd);\n    // Transform Based on Mouse Movement\n    vec2 mm = ( iMouse.xy / iResolution.xy - 0.5 ) * 2.0;\n    ro.z += max(mm.y, 0.0) * SPHERE_RADIUS; // Adjust the scaling factor as needed\n    // Transform the ray direction based on mouse movement\n    // rd.xy += mm * 0.1; // Adjust the scaling factor as needed\n\n    // Bounce the Ray\n    vec4 bounce = RayMarch(ro, rd, uv);\n    // Bounce Color\n    vec3 C = bounce.xyz;\n    float sd = bounce.w;\n    \n    fragColor = vec4(C,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define sigmoid(x) (1./(1.+exp(-(x))))\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 fade(vec4 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n\n\n// Classic Perlin noise\nfloat cnoise(vec4 P)\n{\n  vec4 Pi0 = floor(P); // Integer part for indexing\n  vec4 Pi1 = Pi0 + 1.0; // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = vec4(Pi0.zzzz);\n  vec4 iz1 = vec4(Pi1.zzzz);\n  vec4 iw0 = vec4(Pi0.wwww);\n  vec4 iw1 = vec4(Pi1.wwww);\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n  vec4 ixy00 = permute(ixy0 + iw0);\n  vec4 ixy01 = permute(ixy0 + iw1);\n  vec4 ixy10 = permute(ixy1 + iw0);\n  vec4 ixy11 = permute(ixy1 + iw1);\n\n  vec4 gx00 = ixy00 * (1.0 / 7.0);\n  vec4 gy00 = floor(gx00) * (1.0 / 7.0);\n  vec4 gz00 = floor(gy00) * (1.0 / 6.0);\n  gx00 = fract(gx00) - 0.5;\n  gy00 = fract(gy00) - 0.5;\n  gz00 = fract(gz00) - 0.5;\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\n  vec4 sw00 = step(gw00, vec4(0.0));\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\n\n  vec4 gx01 = ixy01 * (1.0 / 7.0);\n  vec4 gy01 = floor(gx01) * (1.0 / 7.0);\n  vec4 gz01 = floor(gy01) * (1.0 / 6.0);\n  gx01 = fract(gx01) - 0.5;\n  gy01 = fract(gy01) - 0.5;\n  gz01 = fract(gz01) - 0.5;\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\n  vec4 sw01 = step(gw01, vec4(0.0));\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\n\n  vec4 gx10 = ixy10 * (1.0 / 7.0);\n  vec4 gy10 = floor(gx10) * (1.0 / 7.0);\n  vec4 gz10 = floor(gy10) * (1.0 / 6.0);\n  gx10 = fract(gx10) - 0.5;\n  gy10 = fract(gy10) - 0.5;\n  gz10 = fract(gz10) - 0.5;\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\n  vec4 sw10 = step(gw10, vec4(0.0));\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\n\n  vec4 gx11 = ixy11 * (1.0 / 7.0);\n  vec4 gy11 = floor(gx11) * (1.0 / 7.0);\n  vec4 gz11 = floor(gy11) * (1.0 / 6.0);\n  gx11 = fract(gx11) - 0.5;\n  gy11 = fract(gy11) - 0.5;\n  gz11 = fract(gz11) - 0.5;\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\n  vec4 sw11 = step(gw11, vec4(0.0));\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\n\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\n\n  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\n  g0000 *= norm00.x;\n  g0100 *= norm00.y;\n  g1000 *= norm00.z;\n  g1100 *= norm00.w;\n\n  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\n  g0001 *= norm01.x;\n  g0101 *= norm01.y;\n  g1001 *= norm01.z;\n  g1101 *= norm01.w;\n\n  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\n  g0010 *= norm10.x;\n  g0110 *= norm10.y;\n  g1010 *= norm10.z;\n  g1110 *= norm10.w;\n\n  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\n  g0011 *= norm11.x;\n  g0111 *= norm11.y;\n  g1011 *= norm11.z;\n  g1111 *= norm11.w;\n\n  float n0000 = dot(g0000, Pf0);\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\n  float n1111 = dot(g1111, Pf1);\n\n  vec4 fade_xyzw = fade(Pf0);\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\n  return 2.2 * n_xyzw;\n}\n\nfloat NoiseT(float T, vec3 loc, float scale)\n{\n    return (1.0 + cnoise(vec4(loc, T*1.) * scale)) * 0.5;\n}\n\n// Color, neural network\n// https://github.com/harry7557558/Graphics/blob/master/fitting/neural-earth.ipynb\nvec3 mapEarth(vec3 p) {\n  // (12, 3) (12,)\n  vec4 v00 = sin(vec4(2.18,2.07,-.05,.04)*p.x+vec4(-1.16,2.08,1.81,-.2)*p.y+vec4(-.05,.05,-.81,-.96)*p.z+vec4(.59,-.09,-.03,-.77));\n  vec4 v01 = sin(vec4(-.53,.36,.87,-1.57)*p.x+vec4(-1.84,-2.31,-.71,1.15)*p.y+vec4(.53,.02,-1.08,-.41)*p.z+vec4(.16,.15,-.68,-.43));\n  vec4 v02 = sin(vec4(.75,-2.02,-.46,2.03)*p.x+vec4(-.64,1.16,-.56,-.29)*p.y+vec4(.75,.47,-.6,-.91)*p.z+vec4(-.69,-.53,.98,-.8));\n  // (12, 12) (12,)\n  vec4 v10 = sin(mat4(-1.98,2.1,-.12,-.7,-.17,.55,.35,-1.75,-.92,-.03,-.79,1.02,.21,-1.14,.01,1.08)*v00+mat4(-.27,2.59,-.41,.37,-1.55,-.59,-1.15,.88,.8,.8,0,.19,.22,1.48,.66,.49)*v01+mat4(-1.7,-1.18,1.5,.63,-1.35,1.04,-.39,-.32,.68,2.29,-.28,-.68,-2.15,-1.66,-.37,-1.34)*v02+vec4(-.22,-.5,-.02,1.34));\n  vec4 v11 = sin(mat4(1.09,1.62,-.72,2.4,.74,-.86,2.04,-.07,.65,-.85,1.16,.34,-1.85,1.28,1.14,.3)*v00+mat4(2.43,-2.37,1.71,-2.44,-.74,.51,-1.83,1.02,-.28,-.2,-2.83,1.08,-1.04,.83,.33,1.27)*v01+mat4(.05,-.43,-.77,1.04,1.77,1.44,-2.19,1.4,-3.9,1.1,1.22,1.57,.48,.55,2.61,1.01)*v02+vec4(-.4,.69,-2.1,-.43));\n  vec4 v12 = sin(mat4(-.15,.75,1.32,-.29,-.18,.21,.01,-2.14,.95,-1.85,1.95,-2.53,.94,.54,1.2,1.19)*v00+mat4(.31,-.66,1.91,-1.75,.87,-1.56,1.28,1.72,-.07,-1.4,-1.21,-.07,.96,-.56,-.28,1.24)*v01+mat4(.93,-1.07,2.83,-1.15,-1.29,1.83,1.59,-.15,2.55,-1.7,-2.03,-2.1,.26,-.5,1.05,-.01)*v02+vec4(-1.11,.33,3.23,2.4));\n  // (12, 12) (12,)\n  vec4 v20 = sin(mat4(-1.22,1.04,-.4,.05,.61,-1.16,-1.25,-.9,-.41,-.48,-1.4,.6,-1.37,.45,-.1,-1.82)*v10+mat4(-.53,-1.64,1.07,-.02,1.93,.9,.55,-2.21,1.2,1.01,-.92,-.92,.46,.11,-1.88,-2.65)*v11+mat4(-1.03,.62,-1.22,-.89,-2.27,-.92,-.59,.02,-.43,-1.38,2.93,1.32,2.02,.84,-.57,.91)*v12+vec4(-.6,.73,-1.59,.64));\n  vec4 v21 = sin(mat4(-3.2,.97,-.82,-.94,.42,-.26,-1.6,1.28,-.26,-2.17,.28,1.62,1.6,-.63,-1.1,.57)*v10+mat4(.81,1.76,-1.23,-1.59,-1.88,-.75,-.9,.13,-2.21,1.07,-.39,-1.54,-3.04,.5,-.56,-2.26)*v11+mat4(-.98,-.73,.83,-2.97,-1.61,-.3,1.55,-2.04,1.46,.09,-.13,.88,-.18,.5,-.43,-.2)*v12+vec4(-.08,-2.18,-1.3,1.15));\n  vec4 v22 = sin(mat4(2,.27,.01,-.38,-.11,-.9,.38,-1.35,.3,3.89,-.1,.9,-1.36,-.66,-.52,-.22)*v10+mat4(-.09,-.52,.42,.15,2.85,.16,-.53,-1.15,.27,.32,.81,1.42,-.6,-.22,1.11,2.13)*v11+mat4(-1.96,-1.06,.06,.68,-.58,-1.41,.43,.43,-1.77,-.66,-1.72,-1.22,.19,1.11,1.15,.24)*v12+vec4(.05,.85,-.72,-1.05));\n  // (8, 12) (8,)\n  vec4 v30 = sigmoid(mat4(3.74,2.98,-2.85,1.67,2.69,2.42,-2,2.01,-6.28,-1.99,4.83,-1.36,-5.06,-3.07,1.08,-6.41)*v20+mat4(-2.42,-.87,1.32,-.82,1.25,-6.41,-.49,-5.09,-.04,-.47,3.35,6.26,-3.75,-5.87,3.62,-3.36)*v21+mat4(-4.54,.41,-1.18,-3.14,-8.28,-.79,7.43,-2.98,8.06,-2.25,3.2,.48,-7.99,-3.18,1.12,-7.99)*v22+vec4(5.54,1.15,-2.06,2.02));\n  vec4 v31 = sigmoid(mat4(4.2,-6.97,1.37,2.04,3.42,.97,4.22,1.71,-6.85,2.56,-4,-2.37,-2.77,-2.33,.46,-1.98)*v20+mat4(-2.43,1.87,-2.57,-1.06,-6.1,3.38,-2.83,-2.97,.16,9.4,-4.07,-.43,-4.72,4.07,-3.46,-3.17)*v21+mat4(-1.52,5.93,-1.74,-.6,-3.53,-1.03,-2.08,-1.59,-2.03,6.98,-.7,-.64,-5.34,2.52,-2.22,-2.92)*v22+vec4(.07,-4.84,.67,.98));\n  // (3, 8) (3,)\n  float v40 = sigmoid(dot(vec4(-.93,-3.13,1.01,-1.07),v30)+dot(vec4(-1.65,2.54,-1.78,5.45),v31)+.43);\n  float v41 = sigmoid(dot(vec4(-.26,-2.16,.86,-.87),v30)+dot(vec4(-1.08,2.09,-1.23,3.8),v31)+.01);\n  float v42 = sigmoid(dot(vec4(1.31,-1.13,.97,-.65),v30)+dot(vec4(-.61,1.37,-1.19,2.14),v31)+-.71);\n  return vec3(v40, v41, v42);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}