{
    "Shader": {
        "info": {
            "date": "1643949743",
            "description": ".",
            "flags": 32,
            "hasliked": 0,
            "id": "fdjczd",
            "likes": 10,
            "name": "Hyperboloid Twister",
            "published": 3,
            "tags": [
                "lines",
                "hyperbola",
                "twisting"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 220
        },
        "renderpass": [
            {
                "code": "#define FX\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    #ifdef FX\n    // Layering mipmaps to create a bloom effect\n    fragColor = texture(iChannel0, uv, 5.0);\n    fragColor += texture(iChannel0, uv, 4.0);\n    fragColor += texture(iChannel0, uv, 3.0);\n    fragColor += texture(iChannel0, uv, 2.0);\n    fragColor /= 4.0;\n\n    // Chromatic aberration 'cause why not\n    fragColor.r += texture(iChannel0, uv - vec2(0.01, 0.01)).r;\n    fragColor.g += texture(iChannel0, uv - vec2(-0.01, 0.02)).g;\n    fragColor.b += texture(iChannel0, uv - vec2(0.0, -0.005)).b;\n\n    #else\n    fragColor = texture(iChannel0, uv);\n\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.1415926536\n#define TAU 6.2831853072\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\n#define drawSDF(dist, col) color = max(color, col * smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 0.6;\n    float unit = 1.2 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    float len = 2.0;\n    float twist = sin(0.25 * iTime) * PI / 2.0;\n\n    // Convert twist angle to a rotation matrix\n    float co = cos(twist), si = sin(twist);\n    mat2 rot = mat2(co, -si, si, co);\n\n    // Calculate height to keep line length constant\n    float chord = 2.0 * sin(twist);\n    float halfHeight = sqrt(len * len - chord * chord) / 2.0;\n\n    for (float a=0.0; a < TAU; a += TAU / 50.0) {\n        vec3 p1 = vec3(cos(a), -halfHeight, sin(a));\n        vec3 p2 = vec3(p1.x, halfHeight, p1.z);\n\n        p1.xz *= transpose(rot); // Rotate in opposite direction\n        p2.xz *= rot;\n\n        // Project\n        p1.xy /= p1.z + 5.0;\n        p2.xy /= p2.z + 5.0;\n\n        drawSDF(sdLine(uv, p1.xy, p2.xy), vec3(1.0));\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}