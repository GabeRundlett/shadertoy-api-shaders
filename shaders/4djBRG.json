{
    "Shader": {
        "info": {
            "date": "1503775065",
            "description": "A secluded planet and it's mysterious sun drift through the outer reaches of the galaxy. WASD to move and mouse to look around.",
            "flags": 112,
            "hasliked": 0,
            "id": "4djBRG",
            "likes": 2,
            "name": "A Strange World",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "noise",
                "terrain"
            ],
            "usePreview": 0,
            "username": "Ebanflo",
            "viewed": 950
        },
        "renderpass": [
            {
                "code": "#define rayDirectionOptimization\n//render terrain only if rd.y<0\n\n#define pi 3.14159265359\n#define pi2 1.5707963268\n\n#define threshold .01\n#define epsilon .01\n#define stepsize .05\n#define far 30.0\n\n#define sunRad 150.0\n#define sunPos vec3(100, 200, 200)\n\n#define fbm13Iters 3\n#define fbm32Iters 7\n#define fbm33Iters 3\n#define cloudSpeed 0.05\n#define cloudThickness .7\n    \nvec3 r(vec3 v, vec2 r){//rodolphito's rotation\n    vec4 t = sin(vec4(r, r + 1.5707963268));\n    float g = dot(v.yz, t.yw);\n    return vec3(v.x * t.z - g * t.x,\n                v.y * t.w - v.z * t.y,\n                v.x * t.x + g * t.z);\n}\n\nvec2 proj(vec3 v){return v.xz/v.y;}\n\nvec4 iSphere(vec3 ro, vec3 rd, vec4 sphere){\n    vec3 oc = ro - sphere.xyz;\n    float loc = dot(rd, oc);\n    float disc = loc*loc - dot(oc, oc) + sphere.w*sphere.w;\n    if(disc < 0.0) return vec4(9e9);\n    disc = sqrt(disc);\n    float d = disc - loc;\n    return vec4(d*rd + oc, d);\n}\n\nvec2 hash22(vec2 p)//Dave Hoskins https://www.shadertoy.com/view/4djSRW\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return 2.0*fract((p3.xx+p3.yz)*p3.zy) - 1.0;\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat noise13(vec3 x)\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0 - 2.0*f);\n\t\n    return mix(mix(mix(hash13(p + vec3(0, 0, 0)), \n                       hash13(p + vec3(1, 0, 0)), f.x),\n                   mix(hash13(p + vec3(0, 1, 0)), \n                       hash13(p + vec3(1, 1, 0)), f.x), f.y),\n               mix(mix(hash13(p + vec3(0, 0, 1)), \n                       hash13(p + vec3(1, 0, 1)), f.x),\n                   mix(hash13(p + vec3(0, 1, 1)), \n                       hash13(p + vec3(1, 1, 1)), f.x), f.y), f.z);\n}\n\nvec3 noise33(vec3 x)\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0 - 2.0*f);\n\t\n    return mix(mix(mix(hash33(p + vec3(0, 0, 0)), \n                       hash33(p + vec3(1, 0, 0)), f.x),\n                   mix(hash33(p + vec3(0, 1, 0)), \n                       hash33(p + vec3(1, 1, 0)), f.x), f.y),\n               mix(mix(hash33(p + vec3(0, 0, 1)), \n                       hash33(p + vec3(1, 0, 1)), f.x),\n                   mix(hash33(p + vec3(0, 1, 1)), \n                       hash33(p + vec3(1, 1, 1)), f.x), f.y), f.z);\n}\n\nfloat noise12(vec2 p){//iq's simplex noise\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = step(a.yx,a.xy);    \n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n\tvec3 n = h*h*h*h*vec3( dot(a,hash22(i+0.0)), dot(b,hash22(i+o)), dot(c,hash22(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n\t\n}\n\nvec3 fbm33(vec3 p){\n    vec3 acc = vec3(0);\n    float scale = 0.5;\n    for(int i = 0; i < fbm33Iters; i++){\n        acc += scale*noise33(r(p, vec2(i))/scale);\n        scale *= 0.5;\n    }\n    return acc;\n}\n\nfloat fbm13(vec3 pos){\n    float acc = 0.0;\n    float scale = 1.0;\n    for(int n = 0; n < fbm13Iters; n++){\n        acc += noise13(scale * pos) / scale;\n        scale *= 2.0;\n    }\n    return 0.5 * acc;\n}\n\nvec3 clouds(vec3 rd){\n    rd.y += 0.15;\n    rd = normalize(rd);\n    vec2 p = proj(rd);\n    p += cloudSpeed*iTime;\n    vec3 col = smoothstep(1.0 - cloudThickness, 1.0, fbm33(vec3(p, cloudSpeed*iTime)));\n    col = mix(col, vec3(1, 0, 1), pow(1.0 - abs(rd.y), 8.0));\n    return col;\n}\n\nvec3 density(vec3 pos){\n    float fn = fbm13(pos * 10.0);\n    fn = 3.0 * smoothstep(.5, 1.0, fn);\n    vec3 col = pow(vec3(fn), .5 + .5 * sin(fn + vec3(0.0, pi * .666, pi * 1.333)));\n    return col;\n}\n\nfloat heightmap(vec2 p){\n    float result = 0.0;\n    result += .25*noise12(p);\n    p *= .1;\n    float n = noise12(p);\n    result *= n;\n    result += 2.0*n;\n    return result;\n}\n\nfloat potential(vec3 p){return p.y - heightmap(p.xz);}\n\nvec3 getNormal(vec3 p){\n    vec2 e = vec2(0, epsilon);\n    return normalize(vec3(potential(p + e.yxx), \n                          potential(p + e.yxy),\n                          potential(p + e.yyx))\n                          - potential(p));\n}\n#ifdef rayDirectionOptimization\nvec4 render(vec3 ro, vec3 rd){\n    if(rd.y < 0.0){\n    \tvec3 p;\n    \tfor(float t = 0.0; t < far; t += stepsize){\n    \t    p = t*rd + ro;\n    \t    float h = potential(p);\n            if(h < threshold){\n                vec3 n = getNormal(p);\n    \t\t\treturn vec4(0.5*n + 0.5, 1);\n            }\n    \t}\n        return vec4(clouds(rd), 1);\n    }\n    else {\n        vec3 col = clouds(rd);\n    \tvec4 intersect = iSphere(ro, rd, vec4(ro + sunPos, sunRad));\n    \tif(intersect.x < 9e9){\n            col += density(.01*intersect.xyz + .01*iTime);\n            col += density(.001*intersect.yzx + .005*iTime);\n            col += density(.005*intersect.zxy + .0075*iTime);\n            col += density(.0075*intersect.xzy + .005*iTime);\n            col += density(.0025*intersect.yxz + .001*iTime);\n    \t}\n    \treturn vec4(col, 1);\n    }\n}\n#else\nvec4 render(vec3 ro, vec3 rd){\n    vec3 p;\n    for(float t = 0.0; t < far; t += stepsize){\n    \tp = t*rd + ro;\n    \tfloat h = potential(p);\n    \tif(h < threshold){\n    \t    vec3 n = getNormal(p);\n    \t\treturn vec4(0.5*n + 0.5, 1);\n    \t}\n    }\n    vec3 col = clouds(rd);\n    vec4 intersect = iSphere(ro, rd, vec4(ro + sunPos, sunRad));\n    if(intersect.x < 9e9){\n        col += density(.01*intersect.xyz + .01*iTime);\n        col += density(.001*intersect.yzx + .005*iTime);\n        col += density(.005*intersect.zxy + .0075*iTime);\n        col += density(.0075*intersect.xzy + .005*iTime);\n        col += density(.0025*intersect.yxz + .001*iTime);\n   \t}\n   \treturn vec4(col, 1);\n}\n#endif\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 xy = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    \n    vec3 rd = normalize(vec3(xy, 2.0));\n    \n    vec2 pos = texture(iChannel0, vec2(0.)).xy;\n    vec3 ro = vec3(pos.x, heightmap(pos) + 2.5, pos.y);\n    \n    vec2 m = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n    if(iMouse.xy == vec2(0)) m = vec2(0);\n    \n    rd = r(rd, m);\n    \n    fragColor = render(ro, rd);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 11803,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/arailwayinourvillage/fourside-super-smash-bros-melee"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi2 1.5707963268\nconst float KEY_A = 65.5/256.0;\nconst float KEY_D = 68.5/256.0;\nconst float KEY_S = 83.5/256.0;\nconst float KEY_W = 87.5/256.0;\n\nvec3 r(vec3 v, vec2 r){//rodolphito's rotation\n    vec4 t = sin(vec4(r, r + 1.5707963268));\n    float g = dot(v.yz, t.yw);\n    return vec3(v.x * t.z - g * t.x,\n                v.y * t.w - v.z * t.y,\n                v.x * t.x + g * t.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 dir = vec2(0, 1);\n    \n    float m = (2.0*iMouse.x - iResolution.x)/iResolution.x;\n    if(iMouse.x == 0.0) m = 0.0;\n    \n    vec2 tr = sin(vec2(m, m + pi2)).yx;\n    dir.x = tr.x*dir.x - tr.y*dir.y;\n    dir.y = tr.y*dir.x + tr.x*dir.y;\n    \n    vec2 sideways = vec2(-dir.y, dir.x);\n    \n    fragColor -= fragColor;\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    \n    fragColor.xy += .25*sideways*texture(iChannel1, vec2(KEY_A, 0.2)).x;\n\tfragColor.xy -= .25*sideways*texture(iChannel1, vec2(KEY_D, 0.2)).x;\n    fragColor.xy -= .25*dir*texture(iChannel1, vec2(KEY_S, 0.2)).x;\n    fragColor.xy += .25*dir*texture(iChannel1, vec2(KEY_W, 0.2)).x;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}