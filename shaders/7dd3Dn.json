{
    "Shader": {
        "info": {
            "date": "1629606277",
            "description": "chess",
            "flags": 0,
            "hasliked": 0,
            "id": "7dd3Dn",
            "likes": 2,
            "name": "Chess table",
            "published": 3,
            "tags": [
                "chess"
            ],
            "usePreview": 0,
            "username": "TestCoder",
            "viewed": 249
        },
        "renderpass": [
            {
                "code": "float getSquareSine(float x) {\n    return sign(sin(x));\n}\n\nfloat getRotatingMagnifier(vec2 uv, float radius, float rotationDisplacement) {\n    return distance(\n        uv,\n        vec2(\n            sin(iTime + rotationDisplacement),\n            cos(iTime + rotationDisplacement)\n        )\n    ) * radius;\n}\n\n\nfloat getChessPattern(vec2 uv, float size) {\n    return (\n        (\n            getSquareSine(-uv.x * size) + getSquareSine(-uv.y * size)\n        ) * -1. * (\n            getSquareSine(uv.x * size) + getSquareSine(uv.y * size)\n        )\n    );\n}\n\nfloat getDistortedTable(vec2 uv, float radius, float size, float rotationDisplacement) {\n    float magnifier = getRotatingMagnifier(uv, radius, rotationDisplacement);\n\n    return (\n        getChessPattern(\n            uv\n\n            // table distortion\n            * magnifier\n            ,\n            size\n        ) * magnifier * (1. - magnifier)\n    );\n}\n\nfloat getDistortionStack(vec2 uv, float slicingSteps) {\n    float distortionStack = 0.;\n    \n    for (float timeSlice = 1.; timeSlice <= pow(2., slicingSteps); timeSlice += timeSlice) {\n        distortionStack +=\n             getDistortedTable(uv, 1., 50., sin(iTime / timeSlice))\n           + getDistortedTable(uv, 1., 50., cos(iTime / timeSlice));\n    }\n\n    return distortionStack;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy-.5;\n    \n    uv.y *= iResolution.y / iResolution.x;\n    \n    float distortionStack = getDistortionStack(uv, 3.);\n\n    vec3 col = distortionStack * vec3(1);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}