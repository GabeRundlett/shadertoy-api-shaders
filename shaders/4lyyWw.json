{
    "Shader": {
        "info": {
            "date": "1536402568",
            "description": "Several variants in comments",
            "flags": 0,
            "hasliked": 0,
            "id": "4lyyWw",
            "likes": 13,
            "name": "3D curves: spiral on sphere",
            "published": 3,
            "tags": [
                "3dcurves"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 756
        },
        "renderpass": [
            {
                "code": "#define S(d,r) smoothstep( r*3./R.y, 0., d)   // antialiased draw\n\n// --- line segment with disc ends: seamless distance to segment https://www.shadertoy.com/view/4dcfW8 \nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n\tfloat h = clamp(dot(p, b) / dot(b, b), 0., 1.);   // proj coord on line\n\treturn length(p - b * h);                         // dist to segment\n}\n\n// --- rotation https://www.shadertoy.com/view/XlsyWX\n#define rot(a) mat2(cos( a + vec4(0,33,11,0)))\n    \n// --- 3D->2D\nvec2 proj( vec3 P ) {\n    return 2. * P.xy / (3.+P.z);\n}\n#define dist(P) ( 2.5+P.z )          // for darken & thickness\n\n// --- 3D curve drawing\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U = ( U+U - R ) / R.y;\n    \n    vec3 P, Pm; \n    vec2 _p, p;\n    float d = 1e9, d0,   a=0.,b=0., dl=.03, da=.2;\n    \n    for (float i=0.; i<1e3; i++, _p=p) { // --- draw curve\n\n        // --- 3D equation\n        P = vec3(cos(b)*sin(a), cos(a), sin(b)*sin(a)); // live on sphere\n      //da = 6.28*dl / (.1+sin(a));  // optim: const size segments\n        b += da; \n        a += .25/6.28 *da; if (a>3.14) break;\n      //a = i*dl; P = vec3(cos(a),cos(2.73*a),cos(5.91*a)); // simple curve\n\n        // --- to screen \n        P.xz *= rot(-2.*iTime);                   // rotation\n        P.yz *= rot(-.8);                         // tilt\n        p = proj(P);                              // screen projection\n\n      //if (mod(i,2.)==0.) continue; // display 1 segment / 2\n        if (i==0.) continue;         // skip 1st point (1st seg unfinished)\n        d0 = line( U, _p, p);                     // cur segment\n        d0 /= 5./dist(P);                         // thicken when near\n        if (d0<d) { d=d0; Pm = P; }               // if closest to pix, memo\n      //O +=  vec4( S(d0, 1.) ) *2./ dist(P);     // direct draw\n    }\n    d = S(d, 1.);                                 // 1 pixel-thick line\n    O = vec4( d ) *2./ dist(Pm)\n                  * mix(vec4(1,.8,.8,0),vec4(.8,1,.8,0),.5+.5*Pm.y);\n               // * vec4(normalize(.5+.5*Pm),1);  // color\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}