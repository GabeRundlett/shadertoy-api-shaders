{
    "Shader": {
        "info": {
            "date": "1583095020",
            "description": "I want to make Top-Down shooter in a shader. TODO: Enemies, GOOOORE, more bullets\nWASD + LMB ",
            "flags": 48,
            "hasliked": 0,
            "id": "WlyXRK",
            "likes": 6,
            "name": "Alien Shooter (WIP)",
            "published": 3,
            "tags": [
                "game",
                "interactive",
                "physics"
            ],
            "usePreview": 0,
            "username": "quizcanners",
            "viewed": 641
        },
        "renderpass": [
            {
                "code": "vec4 loadValue( in vec2 savePos )\n{\n    return texture( iChannel1, savePos);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 bg = texture(iChannel0, uv);\n    vec4 dta = texture(iChannel1, uv);\n    \n   float aspect = iResolution.x/iResolution.y;\n    \n    uv -= .5;\n\n    uv.x *= aspect;\n\n    vec4 player =  loadValue(PLAYER_POS);\n    vec4 bulletZero = loadValue(BULLETS);\n    vec4 cameraPos = loadValue(CAMERA_POS);\n    \n    \n    uv.xy += cameraPos.xy;\n    \n    vec2 fromPlayer = player.xy - uv.xy;\n    \n    float toPlayer = 0.02 /(length(fromPlayer) + 0.001);\n        \n    float toBullet = 0.002 / DistToLine(uv, bulletZero.xy + cameraPos.zw, bulletZero.xy+bulletZero.zw * BULLET_SPEED*0.91); \n\n    uv += normalize(fromPlayer) * toBullet * toBullet * 20.;\n    \n    vec4 cleanSoil = texture(iChannel2, uv*3.);//vec4(0.,0.,0.,1.); //texture(iChannel0, uv);\n\n    float scorged = min(1., bg.g);\n    \n    vec4 scorgedSoil = texture(iChannel3, uv*3.)/(1.+bg.g*bg.g * 0.2);\n    \n    \n    vec3 col = vec3(toBullet, toBullet, toPlayer) + vec3(bg.r,0.,0.) + (cleanSoil.rgb  * (1.-scorged)\n        + scorgedSoil.rgb * scorged) * (1.-toPlayer)\n        ;\n    \n    \n    vec3 mixing = col.gbr+col.brg;\n    \n    col.rgb+= mixing * mixing * 0.1;\n    \n    //col.rgb += dta.rgb; // Debug\n    \n    fragColor = vec4(col.rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Buffer for special effects:\n// R: Fire Bullet trace\n// G: Burn Marks\n// B: Blood Marks\n\nvec4 loadValue( in vec2 savePos )\n{\n    return texture( iChannel2, savePos);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 MousePos = iMouse.xy/iResolution.xy;\n    \n    vec2 persistanceUV = uv;\n    \n    float aspect = iResolution.x/iResolution.y;\n\n    uv -= .5;\n    uv.x *= aspect;\n    \n    vec4 cameraPos = loadValue(CAMERA_POS);\n    vec4 player =  loadValue(PLAYER_POS);\n    vec4 bulletZero = loadValue(BULLETS);\n    \n    vec2 M = MousePos - .5;\n    M.x *= aspect;\n    M+= cameraPos.xy;\n    \n    vec2 prev = cameraPos.xy;\n    cameraPos.xy = mix(cameraPos.xy, player.xy + M.xy - cameraPos.xy, iTimeDelta*5.);\n    cameraPos.zw = cameraPos.xy - prev;\n    \n    vec2 srcColor = persistanceUV + vec2(cameraPos.z / aspect, cameraPos.w);\n\n    vec2 edge = clamp((0.49 - abs(srcColor-0.5))*1000., 0., 1.);\n\n    vec4 col = texture(iChannel0,srcColor) * edge.x * edge.y;\n\n    uv.xy += cameraPos.xy;\n\n    float toBullet = DistToLine(uv, bulletZero.xy //+ cameraPos.zw\n                                , bulletZero.xy+bulletZero.zw * BULLET_SPEED*0.91); \n\n    float toPlayer = 0.02 /(length(player.xy - uv.xy) + 0.001);\n\n    col.r *= 0.9;\n\n    col.r += max(0.,(0.01 - toBullet) * 100.);\n\n    col.g = clamp(max(toPlayer * .1/toBullet, col.g),0.,5.);\n\n    fragColor = col;  \n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const int KEY_SPACE = 32;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nconst int KEY_W = 87;\nconst int KEY_A = 65;\nconst int KEY_S = 83;\nconst int KEY_D = 68;\n\nconst float PLAYER_SPEED = 0.01;\nconst float BULLET_SPEED = 0.1;\nconst float CAMERA_SPEED = 0.1;\n    \nconst float PRSST_STEP = 10.;\nconst float HALF_STEP = PRSST_STEP * .5;\nconst vec2 PRST_SIZE = vec2(800., 450.);\n\n\n// Line 1\nconst vec2 P_MOUSEPOS = (\tvec2(0., 0.) \t\t\t\t+ HALF_STEP) / PRST_SIZE;\nconst vec2 PLAYER_POS = (\tvec2(PRSST_STEP, 0.) \t\t+ HALF_STEP) / PRST_SIZE;\nconst vec2 BULLET_COUNT = (\tvec2(PRSST_STEP*2., 0.) \t+ HALF_STEP) / PRST_SIZE;\nconst vec2 CAMERA_POS = (\tvec2(PRSST_STEP*3., 0.) \t+ HALF_STEP) / PRST_SIZE;\n\n// Line 2\nconst vec2 BULLETS = (\tvec2(0., PRSST_STEP) \t\t+ HALF_STEP) / PRST_SIZE;\n\nconst float PERSST_AREA_LINES = 2.;\n\n\n//Functions\n\nbool isStoreArea( in vec2 savePos, in vec2 fragCoord)\n{\n    vec2 r = savePos - fragCoord;\n    return length(r) < (1./200.);\n}\n\nvoid storeValue( in vec2 savePos, in vec4 va, inout vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 r = savePos - fragCoord;\n    fragColor = ( length(r) < (1./200.)) ? va : fragColor;\n}\n\nfloat DistToLine(vec2 pos, vec2 a, vec2 b) \n{\n\t\tvec2 pa = pos - a;\n\t\tvec2 ba = b - a;\n\t\tfloat t = clamp(dot(pa, ba)/dot(ba,ba), 0., 1.);\n\t\treturn length(pa - ba * t);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// LOGIC BUFFER (BULLETS, PLAYER, ENEMIES)\n\nvec4 loadValue( in vec2 savePos )\n{\n    return texture( iChannel0, savePos);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 persistanceUV = uv;\n\n    const float PERSIST_AREA = PERSST_AREA_LINES * PRSST_STEP;\n    \n    if (persistanceUV.y < PERSIST_AREA){\n\n        vec2 MousePos = iMouse.xy/iResolution.xy;\n\n        float aspect = iResolution.x/iResolution.y;\n\n        uv -= .5;\n        uv.x *= aspect;\n\n        vec4 cameraPos = loadValue(CAMERA_POS);\n        vec4 player =  loadValue(PLAYER_POS);\n        vec4 bulletZero = loadValue(BULLETS);\n\n        vec2 M = MousePos - .5;\n        M.x *= aspect;\n        M+= cameraPos.xy;\n\n        vec2 prev = cameraPos.xy;\n        cameraPos.xy = mix(cameraPos.xy, player.xy + M.xy - cameraPos.xy, iTimeDelta*5.);\n        cameraPos.zw = cameraPos.xy - prev;\n        \n        vec4 prevM = loadValue(P_MOUSEPOS);\n      \n        vec4 bulletCount =  loadValue(BULLET_COUNT); // x - active, z - delay\n\n        float force = prevM.z; \n        prevM.xy -= 0.5;\n\n        float down = clamp(iMouse.z * 800., 0. , 1.);\n    \n    \tfloat click = down * max(0.,1. - force*100.); // Not down previous frame\n      \n        \n        \n        bulletZero.xy += bulletZero.zw * BULLET_SPEED;\n        \n        bulletCount.y += iTimeDelta; // To have delay between bullets\n        \n        if (down * bulletCount.y > 0.5)\n        {\n        \tbulletCount.x +=1.;\n            bulletZero = vec4(player.xy, normalize(M.xy - player.xy));\n            bulletCount.y = 0.; \n        }\n\n    \tforce = clamp(down*iTimeDelta * 5. + force, 0. , 1.) * down;\n\n        storeValue(BULLETS, bulletZero, fragColor, persistanceUV);\n\n        storeValue(BULLET_COUNT, bulletCount, fragColor, persistanceUV);\n        \n        storeValue(P_MOUSEPOS, vec4(M + 0.5, force, 0), fragColor, persistanceUV);\n        \n        if (isStoreArea( PLAYER_POS, persistanceUV)){\n            \n            vec2 off;\n\n            off.x -=  texelFetch( iChannel1, ivec2(KEY_A,0), 0 ).x;\n            off.x +=  texelFetch( iChannel1, ivec2(KEY_D,0), 0 ).x;\n            off.y +=  texelFetch( iChannel1, ivec2(KEY_W,0), 0 ).x;\n            off.y -=  texelFetch( iChannel1, ivec2(KEY_S,0), 0 ).x;\n\n            if (length(off)>0.0001){\n                player.xy += normalize(off) * PLAYER_SPEED;\n            }\n            \n            fragColor = player;\n        } \n        \t\n            \n          \n         storeValue(CAMERA_POS, cameraPos, fragColor, persistanceUV);\n          \n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}