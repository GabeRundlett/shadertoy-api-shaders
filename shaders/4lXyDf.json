{
    "Shader": {
        "info": {
            "date": "1506603329",
            "description": "Like [url]https://www.shadertoy.com/view/llsyD2[/url] with different settings.\n\nvisualizing LCS/FTLE around a vortex plume.\nbase flow field from trirop [url]https://www.shadertoy.com/view/MsScWD[/url]\n\nNB: learning; not sure it's correct ;-)",
            "flags": 0,
            "hasliked": 0,
            "id": "4lXyDf",
            "likes": 6,
            "name": "lagrangian coherent structures 2",
            "published": 3,
            "tags": [
                "deformation",
                "flow",
                "lyapunov",
                "fluids",
                "visu",
                "lcs",
                "ftle",
                "strain",
                "cauchygreen"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 1090
        },
        "renderpass": [
            {
                "code": "// Like https://www.shadertoy.com/view/llsyD2 with different setting:\n// here, we show stable and unstable regions around a vortex.\n\n// visualizing LCS/FTLE on flow field.\n//     base flow field: trirop's https://www.shadertoy.com/view/MsScWD\n// about LCS/FTLE:\n//     http://georgehaller.com/reprints/annurev-fluid-010313-141322.pdf\n//     https://en.wikipedia.org/wiki/Lagrangian_coherent_structure\n// deformation/strain tensors: https://en.wikipedia.org/wiki/Finite_strain_theory#The_right_Cauchy.E2.80.93Green_deformation_tensor\n\n#define FRAC false // true: fractal motion\n#define FLOW 1     // animates either flow deformation (1) or details (0)\n\nvec2 v(vec2 p,float s){\t                    // --- advection vector field\n#if 0                                       // base flow: better with FRAC = true\n    return vec2(sin(s*p.y),cos(s*p.x));\n#else                                       // vortex plume :  better with FRAC = false\n    #define vort(p) vec2( -(p).y, (p).x ) / dot(p,p)\n    return .1 * ( vort(p-vec2(.2,.2)) - vort(p-vec2(-.2,.2)) ) -vec2(0,-.2); \n#endif\n}\n\nvec2 RK4(vec2 p, float s, float h){         // order 4 Runge-Kutta motion integrator\n    vec2 k1 = v( p         , s ),\n         k2 = v( p +.5*h*k1, s ),\n         k3 = v( p +.5*h*k2, s ),\n         k4 = v( p +   h*k3, s );\n    return h/3.* ( .5*k1 + k2 + k3 + .5*k4 );\n}\n\nvoid mainImage(out vec4 O, vec2 C)\n{\n\tvec2  R = iResolution.xy, \n          U = ( 2.*C - R ) / R.y, V = U;\n    float s = 2. , scale = 1.,\n#if FLOW                                    // animates flow deformation\n          h = log(1./(exp(8.* -fract(iTime*.5/3.1415))+exp(-2.))+exp(-2.))/8.,\n          n = 5.*3.; \n#else                                       // animates detail resolution\n          h =  .25,      \n\t      n = mod(4.*iTime,48.); n = 1.+ min(n, 48.-n);\n#endif\n    for(int i = 0; i < int(n); i++){        // step in time or scales\n        if (FRAC) scale = exp2(floor(float(i+4)/5.)); // fractal scaling\n \t\tV += RK4( V, s*scale, h/scale );\n    }\n    if (FRAC) scale = exp2(floor((n+4.)/5.)); // fractal scaling\n    V += fract(n) * RK4(V,s*scale,h/scale);   // partial step for continuity\n    \n    n = fract(4.*iTime/48.);\n    if (n<.5) \n    //   O = vec4(.4*length(V));               // display mapping\n         O = .7+.3*texture(iChannel0,V/4.-.5); // variant\n    else O = vec4(1);\n    \n    // --- compute right Cauchy-Green deformation tensor\n     mat2 J = mat2(dFdx(V),dFdy(V)),        // grad(V) (should be transpose, but same final eigens)\n          D = transpose(J)*J;               // right Cauchy-Green deformation tensor\n    float a = 1., b = -D[0][0]-D[1][1], c = determinant(D), // compute eingenvalues\n          d = sqrt(b*b-4.*a*c),\n          l1 = (-b+d)/2., l2 = (-b-d)/2.;   // l1 > l2\n    l1 = sqrt(l1); l2 = sqrt(l2);           // shears\n    \n  //n = mod(4.*iTime/48.,2.);               // display deformation measures\n  //if (n<1.)\n        O.gb -=  2.*l1;            \n            //O.gb -=  10.*l2;\n  //else      O.gb -= .7+.05*( log(l1)/h ); // Lyapunov exponent ( FTLE ) \n\n  //O = -.05*vec4( log(l1)/h );             // Lyapunov exponent ( FTLE ) \n \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}