{
    "Shader": {
        "info": {
            "date": "1662457041",
            "description": "https://en.wikipedia.org/wiki/Lyapunov_fractal\n\nChange S to different sequences to generate different diagrams",
            "flags": 32,
            "hasliked": 0,
            "id": "NlKcDt",
            "likes": 3,
            "name": "Lyapunov's Fractal",
            "published": 3,
            "tags": [
                "fractal",
                "lyapunov"
            ],
            "usePreview": 0,
            "username": "incription",
            "viewed": 251
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float minRes = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / minRes;\n\n    vec4 data = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    float sum = data.y;\n    sum /= data.z;\n    \n    float l = 1. - 1. / pow(2., abs(sum));\n\n    vec3 col = vec3(0);\n    if(sign(sum) > 0.) col = mix(col, vec3(0.380,0.380,0.839), l);\n    else col = mix(col, vec3(1.000,0.855,0.141), 1.-l);\n    if(abs(uv.x) > 0.5) col= vec3(0);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 data = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    float xn = data.x;\n    float sum = data.y;\n    float n = data.z;\n    \n    float minRes = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / minRes + .5;\n    vec2 pos = uv * 4. - .5 / minRes;\n    \n    float r, xn1;\n    xn1 = xn;\n    int Sl = S.length();\n    if(iFrame == 0) xn1 = .5;\n    for(int i = 0; i < 1; i++) {\n        for(int j = 0; j < Sl; j++) {\n            r = pos.yx[S[j]];\n            xn1 = r * xn1 * (1. - xn1);\n            sum += log(abs(r*(1.-2.*xn1)));\n            n += 1.;\n        }\n    }\n\n    fragColor = vec4(xn1, sum, n, data.w);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define A 0\n#define B 1\n\nint S[] = int[](A,B); ",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}