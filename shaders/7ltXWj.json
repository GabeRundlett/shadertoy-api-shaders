{
    "Shader": {
        "info": {
            "date": "1639831740",
            "description": "This is my second shader, it's a long way to learn shader, hope I can keep it up. \nSome functions from iq and one from FabriceNeyret2.",
            "flags": 0,
            "hasliked": 0,
            "id": "7ltXWj",
            "likes": 8,
            "name": "A simple pi menu",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "ololeecn",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "#define NUM 8\n#define R 0.5\n#define SMALLR 0.2\n#define ROTATESPEED -2.0\n#define PI 3.14159265358979\n\n\n//from iq\nfloat sdCircle(vec2 p, float r){\n    return length(p) - r;\n}  \n\n//from iq\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\n//from iq\nfloat sdArc( in vec2 p, in vec2 sca, in vec2 scb, in float ra, float rb )\n{\n    p *= mat2(sca.x,sca.y,-sca.y,sca.x);\n    p.x = abs(p.x);\n    float k = (scb.y*p.x>scb.x*p.y) ? dot(p,scb) : length(p);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\n\n//from FabriceNeyret2\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    float h = dot(p, b) / dot(b, b);   // proj coord on line\n    h = clamp(h, 0.,1.);               // round end\n    return length(p - b * h);          // dist to segment\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(0.0);\n    vec3 eyeCol = vec3(1.0);\n\n   \n    float part = 2.0*PI/float(NUM);\n    for(int i = 0; i < NUM; i++){\n        float index = float(i);\n        float rad = part * index + (iTime*ROTATESPEED);\n        float d = sdCircle(p - (R-0.1) * vec2(cos(rad),sin(rad)),SMALLR);\n        col = mix(vec3(eyeCol),col,smoothstep(0.0,0.01,d));\n    }\n     col = mix(vec3(0.0),col,smoothstep(0.0,0.01,sdCircle(p,R+0.01)));\n     col = mix(vec3(eyeCol),col,smoothstep(0.0,0.01,abs(sdCircle(p,R-0.01))));\n     col = mix(vec3(eyeCol),col,smoothstep(0.0,0.04,abs(sdCircle(p,R-0.04))));\n     \n     \n     \n     //draw mouse\n     float startRad = 1.0*PI;\n     float stopRad = 0.001;\n     float mouse = sdArc(p-vec2(0.0,0.1),vec2(cos(startRad),sin(startRad)),vec2(0.001,0.001),0.16,0.005);\n     col = mix(vec3(eyeCol),col,smoothstep(0.0,0.01,mouse));\n     \n     \n     //draw saliva\n     float saliva = line(p,vec2(0.0,0.1)+0.16*vec2(cos(1.7*PI),sin(1.7*PI)),vec2(0.0,0.1)+0.176*vec2(cos(1.71*PI),sin(1.65*PI)));\n     col = mix(vec3(eyeCol),col,smoothstep(0.0,0.01,saliva));\n     \n     \n      //draw eye\n     float eyesize = 0.5 + sin(4.0*iTime) * 0.5;\n     p.x=abs(p.x);\n     float eye = sdEllipse(p+vec2(-0.18,-0.15),vec2(0.04,0.07-0.02*eyesize));\n     col = mix(vec3(eyeCol),col,smoothstep(0.0,0.01,eye));\n     \n    fragColor =vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}