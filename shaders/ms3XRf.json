{
    "Shader": {
        "info": {
            "date": "1680167075",
            "description": " slice variant of [url]https://shadertoy.com/view/DdcXRj[/url]\ninspiration:  [url]https://twitter.com/JasonHise64/status/780237713068863488[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ms3XRf",
            "likes": 27,
            "name": "flex links radial - slice2",
            "published": 3,
            "tags": [
                "raymarching",
                "short",
                "reproduction",
                "spinor",
                "antitwister",
                "diracsbelt"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "// orthogonal slice of https://shadertoy.com/view/mscXzX\n// slice variant of https://shadertoy.com/view/DdcXRj\n\n#define rot3(P,A,a)  ( mix( A*dot(P,A), P, cos(a) ) + sin(a)*cross(P,A) ) // 3D rot around an arbitrary axis\n\n#define d(q)                                                                   \\\n        min( length(q) - 1.7,                             /* sphere  */        \\\n        abs(atan((q).y,length((q).xz)))<.1 ? ( length(q) * length( fract(vec2( atan((q).z,(q).x), atan((q).y,length((q).xz))-.42) /.628*2.) - .5) \\\n                       - .2 ) : 1e3 )                        \nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.;\n    vec3  R = iResolution,\n          D = normalize(vec3(U+U, -12.*R.y) - R).xzy,          // ray direction\n          p = vec3(0,60,0), q;                                 // marching point along ray \n\n    for ( O=vec4(1); O.x > 0. && t > .01 && p.y>-4.; O-=.001 )        // march scene  \n        q = rot3( p, vec3(sin(iTime),0,cos(iTime)), 3.14 *smoothstep(.05, .6, 1./length(p)) ), // the magic is there\n        t = d(q),\n        p += .03*t*D;                                      // step forward = dist to obj      \n\n                                                           // color scheme\n   D = vec3(-1,1,0)*1e-3,                                  //   efficient FD normals https://iquilezles.org/articles/normalsSDF/\n   O.rgb = .5 - .5*normalize(  D.xxy* d( q + D.xxy ) + D.xyx* d( q + D.xyx ) + D.yxx* d( q + D.yxx ) + D.yyy * d( q + D.yyy ) );\n} \n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}