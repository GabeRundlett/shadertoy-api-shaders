{
    "Shader": {
        "info": {
            "date": "1620158852",
            "description": "Quick crystals parallax occlusion - unoptimized",
            "flags": 0,
            "hasliked": 0,
            "id": "sd2SWh",
            "likes": 6,
            "name": "Fork Parallax SpectaJin 012",
            "published": 3,
            "tags": [
                "parallaxocclusion"
            ],
            "usePreview": 0,
            "username": "spectajin",
            "viewed": 260
        },
        "renderpass": [
            {
                "code": "// Made by Darko Supe (omegasbk) 3.5.2021.\n// Sub here youtube.com/c/DarkoSupe for educational videos\n\nstruct Camera\n{\n    vec3 position;\n    vec3 direction;\n    float focalDistance;\n};\n\nCamera camera = Camera(\n    vec3(0., 0., -.3), \n    vec3(1., 0., 1.),\n    0.5);\n    \nstruct Material \n{\n    float diffuse;\n    float specular;\n    float shininess;\n    float ambience;\n    float reflection;\n};\n\nconst Material material = Material(0.4, 0.2, 76.8, 0.8, 0.1);\n\nstruct Plane \n{\n    vec3 position;\n    vec3 normal;\n    vec3 color;\n    Material material;\n};\n\nPlane plane = Plane(\n    vec3(0., -0.3, 0.), \n    vec3(0., 1., 0.), \n    vec3(0.2, 0.2, 0.2), \n    material);\n    \nstruct PointLight\n{\n    vec3 position;\n    float intensity;\n};\n\nPointLight light = PointLight(\n    vec3(0.12, 11.5, 10.), // position\n    10.);              // intensity\n\nvec3 getLitColor(in vec3 viewDir, in vec3 surfacePointPosition, in vec3 objectColor, in PointLight pointLight, in vec3 surfaceNormal, in Material material)\n{\n    vec3 lightVector = surfacePointPosition - pointLight.position;\n    vec3 lightDir = normalize(lightVector);   \n    \n   \tfloat lightIntensity = (pow(0.05, 12.) / pow(length(lightVector), 12.)) * pointLight.intensity;\n    \n    float coeff = -dot(lightDir, surfaceNormal);     \n    \n    vec3 ambient = material.ambience * objectColor;\n        \n    vec3 diffuse = material.diffuse * max(coeff, 0.) * objectColor * lightIntensity;\n       \n    vec3 halfwayDir = normalize(lightDir + viewDir);  \n    vec3 specular = pow(max(-dot(surfaceNormal, halfwayDir), 0.2), material.shininess) * material.specular * objectColor * lightIntensity;\n    \n    vec3 color = ambient + diffuse + specular;\n    \n    return color;\n}\n\nbool intersectPlane(in Plane plane, in vec3 origin, in vec3 rayDirection, out float t, out vec3 pHit) \n{    \n    // Assuming vectors are all normalized\n    float denom = dot(plane.normal, rayDirection); \n    if (denom < 1e-6) \n    { \n        vec3 p0l0 = plane.position - origin; \n        t = dot(p0l0, plane.normal)  - normalize(denom / iTime);\n        \n        if (t >= 0.)\n        {\n            pHit = origin + rayDirection * t;\n            return true;\n        }             \n    } \n \n    return false; \n} \n\n#define RESOLUTION 0.1\n#define MAP_SCALE 2.\n\nfloat getDepth(vec2 coord, float scale)\n{\n    return (.0000013602 - texture(iChannel1, coord).r) * scale ;\n}\n\nvec3 getParallax(vec3 pHit, vec3 direction, float scale)\n{\n    float height = getDepth(pHit.xz, scale);\n    \n    vec3 newPoint = pHit;\n    newPoint.y = height;\n    \n    const float layerCount = 10.;\n    const float layerSize = 1.5 / layerCount;\n    \n    for (int i = 0; i < int(layerCount); i++)\n    {\n        vec3 point = pHit + direction * layerSize * float(i) * iTime;\n        float sampleDepth = getDepth(point.xz, scale);\n        if (sampleDepth < float(i) * layerSize)\n        {\n            newPoint = point;\n            newPoint.y = sampleDepth;\n            return newPoint;\n        }\n    }\n    \n    return newPoint;\n}\n\nvec3 rayTrace(vec3 origin, vec3 direction, float scale)\n{\n    float dist;\n    vec3 pHit;\n\n    Plane parallaxPlane = plane; \n    \n    if (intersectPlane(parallaxPlane, origin, direction, dist, pHit))\n    {\n        pHit *= MAP_SCALE * cos(iTime/-50.1) / sin(iTime/-50.1);\n        \n        pHit = getParallax(pHit, direction, scale);        \n        \n        vec3 right = pHit + vec3(RESOLUTION, 10., 0.34);\n        right = getParallax(right, normalize(right - pHit), scale);\n        right.y = getDepth(right.xz, scale);\n        vec3 down = pHit + vec3(0., 0., RESOLUTION); \n        down = getParallax(down, normalize(down - pHit), scale);\n        down.y = getDepth(down.xz, scale);\n        \n        vec3 a = normalize(right - pHit);\n        vec3 b = normalize(down - pHit);\n        \n        vec3 normal = cross(a, b);\n                        \n        vec3 texColor = texture(iChannel1, pHit.xz).rrr;\n        texColor = mix(texture(iChannel2, pHit.zz * pHit.y).rrr, texColor, -4.5);\n        texColor *= vec3(-0.4197614, 0.3396, -0.13944) * 1.0;\n        vec3 baseColor = getLitColor(direction, pHit, texColor, light, normal, plane.material).rgb;\n         \n        vec3 refl = reflect(direction, normal);\n        vec3 reflColor = texture(iChannel0, refl).rgb;\n        \n        return mix(baseColor, reflColor, plane.material.reflection);\n    }\n    \n    return texture(iChannel0, direction).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = fragCoord/iResolution.xy - cos(iTime * 0.00015);\n    uv.x *= (iResolution.x / iResolution.y); \n    \n    float rotation = cos(iTime / 93.);\n    camera.position = vec3(cos(rotation), 0.00195, sin(rotation)) * camera.focalDistance;\n    camera.direction = normalize(vec3(0., clamp((iMouse.y / 200.) - 4., -4., -2.), 0.) + camera.position);\n    vec3 right = normalize(cross(camera.direction, vec3(0., 1., 0.)));\n    vec3 up = cross(right, camera.direction);\n   \tvec3 dir =  normalize(uv.x * right + uv.y * up + camera.direction);\n    \n    light.position = camera.position;\n                 \n    vec3 finalColor = rayTrace(camera.position, dir, 20.7); \n     \n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}