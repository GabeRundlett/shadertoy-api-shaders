{
    "Shader": {
        "info": {
            "date": "1636684570",
            "description": "i dont know what this is",
            "flags": 0,
            "hasliked": 0,
            "id": "ft33Wj",
            "likes": 5,
            "name": "spiralllll",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 240
        },
        "renderpass": [
            {
                "code": "float thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy )/iResolution.y;\n    \n    float a = atan(uv.y, uv.x);\n    float r = length(uv) + 0.1 * thc(4., 50. * length(uv) + \n    \n    thc(8., thc(2., 16. * length(uv) + 3. * a - iTime) + 4. * a + iTime) - iTime);\n    uv = r * vec2(cos(a), sin(a));\n    \n    float sc = 120.;\n    vec2 ipos = floor(sc * uv) + 0.5;\n    vec2 fpos = fract(sc * uv) - 0.5;\n    \n    float d = length(ipos / sc) + 0.4 * length(fpos);\n    float s = smoothstep(-0., \n    0.1 + 2.4 * thc(4., 5. * d * cos(iTime) + 13. * a  + 5. * iTime), \n    0.3 + 0.1 * thc(2., r * cos(100. * r) + iTime) - d);\n    \n    float s2 = smoothstep(-0., \n    0.1 + 2.4 * thc(4., 5. * d * cos(iTime) + 5. * a + 4. * iTime), \n    0.3 + 0.1 * thc(2., r * cos(100. * r) + iTime) - d);\n    \n    s = max(s,s2);\n    s = 6. * s/cosh(s + 3. * cos(2. * d+  iTime));\n    //vec3 col = vec3(s);\n    vec3 col = 1.5 * lerpCol(.5 + .5 * thc(2., d/s + iTime), s);\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.1415\n#define val 1.\n\nvec3 midCol(float t) {\n    float colTime = fract(val * t);\n    vec3 col;\n    if (colTime < 1./3.)\n        col = vec3(0., 220., 244.) / 255.;\n    else if (colTime < 2./3.)\n        col = vec3(245., 208., 0.) / 255.;\n    else\n        col = vec3(219., 0., 255.) / 255.;\n    return col;\n}\n\nvec3 darkCol(float t) {\n    float colTime = fract(val * t);\n    vec3 col;\n    if (colTime < 1./3.)\n        col = vec3(0., 172., 246.) / 255.;\n    else if (colTime < 2./3.)\n        col = vec3(236., 182., 0.) / 255.;\n    else\n        col = vec3(172., 0., 255.) / 255.;\n    return col;\n\n}\n\nvec3 lightCol(float t) {\n    float colTime = fract(val * t);\n    vec3 col;\n    if (colTime < 1./3.)\n        col = vec3(0., 255., 195.) / 255.;\n    else if (colTime < 2./3.)\n        col = vec3(238., 243., 0.) / 255.;\n    else\n        col = vec3(255., 58., 235.) / 255.;\n    return col;\n}\n\nvec3 lerpCol(float t, float l) {\n    vec3 col;\n    // assuming 0 <= l <= 1\n    if (l < 1./3.) \n        col = mix(vec3(28, 28, 51) / 255., darkCol(t), vec3(3. * l));\n    else if (l < 2./3.)\n        col = mix(darkCol(t), midCol(t), vec3(3. * l - 1.));\n    else\n        col = mix(midCol(t), lightCol(t), vec3(3. * l - 2.));\n    \n    return col;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}