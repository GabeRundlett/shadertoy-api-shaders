{
    "Shader": {
        "info": {
            "date": "1677191988",
            "description": "Ripoff of graphtoy.\nMove camera using mouse.\nSpace restart camera and zoom.\nz + mouse for zooming.",
            "flags": 48,
            "hasliked": 0,
            "id": "dsd3z7",
            "likes": 0,
            "name": "Graph maker",
            "published": 3,
            "tags": [
                "graph",
                "plot"
            ],
            "usePreview": 0,
            "username": "maras",
            "viewed": 86
        },
        "renderpass": [
            {
                "code": "#define DRAW_F1 true\n#define DRAW_F2 true\n#define DRAW_F3 true\n#define DRAW_F4 true\n#define DRAW_F5 true\n\nfloat ZOOM_OUT;\n\n#define LINE_WIDTH ZOOM_OUT / 50.0\n#define AA_WIDTH LINE_WIDTH / 5.0\n\n// functions\n\nfloat f1(float x) {\n    return 4.0 + 4.0*smoothstep(0.0,0.7,sin(x+iTime));\n}\n\nfloat f2(float x) {\n    return sqrt(pow(9.0, 2.0) - pow(x,2.0));\n}\n\nfloat f3(float x) {\n    return 3.0*sin(x)/x;\n}\n\n\n// plotter\n\nfloat plotF(float fx, float y) {\n    return smoothstep(LINE_WIDTH, LINE_WIDTH - AA_WIDTH, abs(y - fx));\n}\n\nvoid drawPlots(vec2 uv, inout vec3 col) {\n    if (DRAW_F1) col = mix(col, vec3(0.8, 0.0, 0.0), plotF(f1(uv.x), uv.y));\n    if (DRAW_F2) col = mix(col, vec3(0.0, 0.0, 0.8), plotF(f2(uv.x), uv.y));\n    if (DRAW_F3) col = mix(col, vec3(0.0, 0.8, 0.0), plotF(f3(uv.x), uv.y));\n}\n\nfloat drawAxis(vec2 uv) {\n    vec2 axises = step(vec2(0.05), abs(uv));\n    return axises.x * axises.y;\n}\n\nfloat drawDottedAxis(vec2 uv) {\n    vec2 dotted = mod(uv * 4.0, 2.0);\n    uv = mod(uv, 1.0);\n    \n    vec2 axises = step(vec2(0.05), abs(uv));\n        \n    return max(axises.x, step(1.0, dotted.y)) * max(axises.y, step(1.0, dotted.x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ZOOM_OUT = texture(iChannel0, vec2(0.8)).x;\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    uv *= ZOOM_OUT;\n    \n    //vec2 mouse = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n    \n    //uv += (mouse * 5.0);\n    vec2 mouse = texture(iChannel0, vec2(0.0)).xy;\n    uv += mouse;\n    \n    \n    // Time varying pixel color\n    vec3 col = vec3(1.0);\n    col *= drawAxis(uv);\n    col *= drawDottedAxis(uv);\n    //col = vec3(uv.x);\n    drawPlots(uv, col);    \n                    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float MOUSE_SPEED = 10.0; // less means faster\nfloat ZOOM_SPEED = 50.0; // less means faster\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord / iResolution.xy;\n    \n    if (iFrame == 0 || texelFetch( iChannel1, ivec2(32,1),0 ).x > 0.5) {\n        if (uv.x <= 0.25) fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        else if (uv.x <= 0.5) fragColor = vec4(-1000.0, 0.0, 0.0, 0.0);\n        else if (uv.x <= 1.0) fragColor = vec4(10.0, 0.0, 0.0, 0.0);\n        return;\n    }\n\n    vec2 act_offset = texture(iChannel0, vec2(0.0)).xy;\n    vec2 act_mouse = texture(iChannel0, vec2(0.35)).xy;\n    float act_zoom = texture(iChannel0, vec2(0.8)).x;\n\n    fragColor = texture(iChannel0, vec2(0.0));\n    \n    \n    if (iMouse.z > 0.0) {\n        if (act_mouse.x < -999.0) {\n            act_mouse = iMouse.xy / MOUSE_SPEED;\n        }\n        \n        bool z_pressed = texelFetch( iChannel1, ivec2(90,0),0 ).x > 0.5;\n        \n        vec2 move = act_mouse - iMouse.xy / MOUSE_SPEED;\n        \n        if (uv.x <= 0.25) {\n            if (!z_pressed) {\n                fragColor = vec4(act_offset + move / MOUSE_SPEED, 0.0, 0.0);\n            }\n            else {\n                fragColor = vec4(act_offset, 0.0, 0.0);\n            }\n        }\n        else if (uv.x <= 0.5) {\n            if (!z_pressed) {\n                fragColor = vec4(iMouse.xy / MOUSE_SPEED, 0.0, 0.0);\n            }\n            else {\n                fragColor = vec4(act_mouse, 0.0, 0.0);\n            }\n        }\n        if (uv.x > 0.5) {\n            fragColor = vec4(act_zoom, 0.0, 0.0, 0.0);\n            if (z_pressed) {\n                fragColor = vec4(act_zoom + move.y / ZOOM_SPEED, 0.0, 0.0, 0.0);\n            }\n        }\n        \n        return;\n    }\n\n    if (uv.x > 0.25 && uv.x <= 0.5) fragColor = vec4(-1000.0, 0.0, 0.0, 0.0);\n    else if (uv.x > 0.5) fragColor = texture(iChannel0, vec2(0.8));\n    \n    //fragColor = texture(iChannel0, fragCoord);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}