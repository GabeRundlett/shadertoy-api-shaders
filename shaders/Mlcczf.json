{
    "Shader": {
        "info": {
            "date": "1534777235",
            "description": "...britney in oil\nif you change to webcam or another video, don't forget to enable mipmap again on that texture (gives better quality)",
            "flags": 32,
            "hasliked": 0,
            "id": "Mlcczf",
            "likes": 68,
            "name": "oil on glcanvas",
            "published": 3,
            "tags": [
                "effect",
                "painting",
                "oil",
                "npr"
            ],
            "usePreview": 1,
            "username": "flockaroo",
            "viewed": 4005
        },
        "renderpass": [
            {
                "code": "// created by florian berger (flockaroo) - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// some relief lighting\n\n#define Res  iResolution.xy\n#define Res0 vec2(textureSize(iChannel0,0))\n#define Res1 vec2(textureSize(iChannel1,0))\n#define Res2 vec2(textureSize(iChannel2,0))\n#define Res3 vec2(textureSize(iChannel3,0))\n\nvec4 getRand(vec2 pos) \n{\n    vec2 uv=pos/Res1;\n    return texture(iChannel1,uv);\n}\n\nfloat getVal(vec2 uv)\n{\n\tfloat r = getRand(uv*iResolution.xy*.02).x*2.-1.;\n\tr=0.*exp(-abs(r)/0.05);\n\t\n    return mix(1.,\n    //length(textureLod(iChannel0,uv,1.7+.5*log2(iResolution.x/1920.)).xyz)\n    length(textureLod(iChannel0,uv,2.5+.5*log2(iResolution.x/1920.)).xyz)*.6+\n    length(textureLod(iChannel0,uv,1.5+.5*log2(iResolution.x/1920.)).xyz)*.3+\n    length(textureLod(iChannel0,uv,.5+.5*log2(iResolution.x/1920.)).xyz)*.2\n    ,1.-r);\n}\n    \nvec2 getGrad(vec2 uv,float delta)\n{\n    vec2 d=vec2(delta,0);\n    return vec2(\n        getVal(uv+d.xy)-getVal(uv-d.xy),\n        getVal(uv+d.yx)-getVal(uv-d.yx)\n    )/delta;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/Res;\n    vec3 n = vec3(getGrad(uv,1.0/iResolution.y),150.0);\n    //n *= n;\n    n=normalize(n);\n    fragColor=vec4(n,1);\n    vec3 light = normalize(vec3(1,-1,.8));\n    float diff=clamp(dot(n,light),0.,1.0);\n    float spec=clamp(dot(reflect(light,n),vec3(0,0,-1)),0.0,1.0);\n    spec=pow(spec,12.0)*.5;\n    float sh=clamp(dot(reflect(light*vec3(-1,-1,1),n),vec3(0,0,-1)),0.0,1.0);\n    sh=pow(sh,4.0)*.1;\n    //spec=0.0;\n\tfragColor = texture(iChannel0,uv)*mix(diff,1.,.8)+spec*vec4(.85,1.,1.15,1.)-sh*vec4(.85,1.,1.15,1.);\n\tfragColor.w=1.;\n    \n    if(true)\n    {\n        vec2 scc=(fragCoord-.5*iResolution.xy)/iResolution.x;\n        float vign = 1.3-2.5*dot(scc,scc);\n        vign*=1.-.8*exp(-sin(fragCoord.x/iResolution.x*3.1416)*20.);\n        vign*=1.-.8*exp(-sin(fragCoord.y/iResolution.y*3.1416)*10.);\n        fragColor.xyz *= vign;\n    }\n    \n\t//fragColor = texture(iChannel3,fragCoord/Res3);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// created by florian berger (flockaroo) - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// trying to resemble oil painting style\n\n#define PI2 6.28318531\n\n#define Res  iResolution.xy\n#define Res0 vec2(textureSize(iChannel0,0))\n#define Res1 vec2(textureSize(iChannel1,0))\n#define Res2 vec2(textureSize(iChannel2,0))\n\nvec4 getCol(vec2 pos, float level)\n{\n    // preserve aspect ratio of original vid\n\tvec2 uv = (pos-Res*.5)*min(Res0.x/Res.x,Res0.y/Res.y)/Res0+.5;\n    \n    vec4 c1 = textureLod(iChannel0,uv,level);\n    //return c1;\n\n    // green screen and bg\n    uv = uv*vec2(-1,-1)*2.7+0.015*vec2(sin(iTime*1.1),sin(iTime*0.271));\n    // had to use .xxxw because tex on channel2 seems to be a GL_RED-only tex now (was probably GL_LUMINANCE-only before)\n    vec4 c2 = vec4( vec3(0.5,0.7,1.0)*.5*(.3*textureLod(iChannel2,uv,level).xyz+.7*textureLod(iChannel2,uv*.33,level).xyz), 1 );\n    float d=clamp(dot(c1.xyz,vec3(-0.5,1.0,-0.5)),0.0,1.0);\n    return mix(c1,c2,1.8*d);\n    return c1;\n}\n\nfloat getVal(vec2 pos, float level)\n{\n    return length(getCol(pos,level).xyz)+0.0002*length(pos-0.5*Res);\n}\n    \nvec2 getGrad(vec2 pos,float delta)\n{\n    float l = log2(delta*Res0.x/Res.x);\n    vec2 d=vec2(delta,0);\n    return vec2(\n        getVal(pos+d.xy,l)-getVal(pos-d.xy,l),\n        getVal(pos+d.yx,l)-getVal(pos-d.yx,l)\n    )/delta;\n}\n\nvec4 getRand(vec2 pos) \n{\n    vec2 uv=pos/Res1;\n    return texture(iChannel1,uv);\n}\n\nvec4 getRandBlueS(vec2 pos) \n{\n    vec2 uv=pos/Res1;\n    return texture(iChannel1,uv)-texture(iChannel1,uv+.5);\n}\n\nvec4 getRandBlue(vec2 pos) \n{\n    vec2 uv=pos/Res1;\n    vec4 c = clamp((texture(iChannel1,uv)-texture(iChannel1,uv+.5))*1.2+.5,0.,1.);\n    //return c;\n    return mix(c.xxxx,c,.3);\n}\n\nvec4 getPatt(vec2 pos) \n{\n    vec2 uv=pos/Res1;\n    vec4 s = sin(.23*pos.xyxy*PI2-vec4(0,0,PI2/4.,PI2/4.))*.5+.5;\n    return vec4(\n        dot(s.xy,vec2(.5)),\n        dot(s.zw,vec2(.5)),\n        dot(s.yz,vec2(.5)),\n        dot(s.wx,vec2(.5))\n        )\n    ;\n}\n\nvec4 getColDist(vec2 pos)\n{\n\t//return smoothstep(0.5,1.5,getCol(pos,0.)+getRand(pos).xxxx);\n\treturn 1.-smoothstep(0.5,1.5,(1.-getCol(pos,0.))+pow(getRandBlue(pos),vec4(.75))*.75);\n\t//return smoothstep(0.5,1.5,getCol(pos,0.)+mix(getPatt(pos),getRandBlue(pos),.75));\n}\n\n#define SampNum 24\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos0 = fragCoord;\n    vec2 pos = pos0;\n    vec3 col=vec3(0);\n    float cnt=0.0;\n    float fact=1.0;\n    for(int i=0;i<SampNum;i++)\n    {\n        col+=fact*getColDist(pos).xyz;\n        vec2 gr=vec2(0);\n        gr+=getGrad(pos,8.0*iResolution.x/600.);\n        gr+=getGrad(pos,4.0*iResolution.x/600.);\n        gr+=getGrad(pos,2.0*iResolution.x/600.);\n        //gr+=getGrad(pos,1.0*iResolution.x/600.);\n        \t\n        vec2 d = gr.yx*vec2(1,-1);\n        \n        pos+=.5*iResolution.x/600.*normalize(d);\n        //fact/=1.1;\n        cnt+=fact;\n    }\n    col/=cnt;\n\tfragColor = vec4(col,1.0);\n\t//fragColor.xyz = getPatt(pos0).xyz;\n\t//float r = getRand(pos0*.07).x*2.-1.;\n\t//r=exp(-r*r/0.03);\n\t//fragColor.xyz = vec3(0)+r;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}