{
    "Shader": {
        "info": {
            "date": "1635390295",
            "description": "just a simple visualizer with coloring based on iq's 2d sdf shaders\n[Mouse enabled]",
            "flags": 0,
            "hasliked": 0,
            "id": "ssySD3",
            "likes": 5,
            "name": "Raymarcher Visual [Reflection]",
            "published": 3,
            "tags": [
                "2d",
                "visual"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "#define pi acos(-1.)\n#define eps 1./iResolution.y\n#define FAR 10.\n#define circlePos vec2(cos(iTime)*0.6,-0.9)\n#define squarePos vec2(.9,sin(iTime)*0.4)\n#define S(d) 1.-smoothstep(-eps,+eps, abs(d)-0.01)\n\n#define purp vec3(159,174,216)/255.\n#define blu vec3(160,132,179)/255.\n#define pink vec3(0.9,0.6,0.6)\n\nmat2 rot(float a){\n    float c = cos(a), s = sin(a); return mat2(c,-s,s,c);}\n    \n    \nfloat drawPoint(vec2 uv, vec2 p, float r){\n     return 1.-smoothstep(r-eps, r+eps, length(uv - p));\n}\n\nfloat distLine(vec2 p, vec2 A, vec2 B){\n  vec2 AB = B-A;\n  float t =  clamp(dot(AB,p-A)/dot(AB,AB),0.,1.);\n  vec2 P3 = A + (B-A)*t;\n  return length(P3-p);\n}\n\nfloat drawLine(vec2 uv, vec2 A, vec2 B, float r){\n    return smoothstep(r+eps, r-eps, distLine(uv,A,B));\n}\n\nfloat map(vec2 p){\n    float c = length(p - circlePos)-0.2;\n    vec2 sp = abs(p-squarePos);\n    float s = max(sp.x,sp.y)-0.2;\n    return min(s,c);\n}\n\nvec2 normal(vec2 p){\n    vec2 e = vec2(eps,0.);\n    \n    return normalize(vec2(\n           map(p-e) - map(p+e),\n           map(p-e.yx) - map(p+e.yx) \n           ));\n           \n           \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(1.);\n    \n    vec2 ro = vec2(-0.8,0.);\n    vec2 rd = normalize(vec2(1.,-.2));\n    float a = iTime/3.;\n    //rd *= rot(a);\n    \n    if(iMouse.z > 0.5) \n        rd = normalize((iMouse.xy*2.-iResolution.xy)/iResolution.y - ro);\n    \n   // col = mix(col, vec3(0.8,0.,0.3),drawPoint(uv,ro,0.02));\n      \n    //raymarcher\n    float t = 0., d; vec2 last, next; //last and next pos for drawing lines\n    next = ro + rd*t;\n    float mapDistances = map(uv);\n    float gradient = mapDistances;\n    \n\n    //based on iq's coloring style\n    col = sign(gradient)*purp;\n    col = mix(col, blu, clamp(1.-sign(gradient),0.,1.));\n\tcol *= clamp(pow(gradient,0.6),0.,1.);\n\tcol *= 0.7 + 0.3*cos(130.0*gradient);\n    //draw the map objects as smooth outlines\n    col = mix(col, vec3(1.), S(mapDistances));                     \n    col = mix(col, vec3(0.8,0.,0.3),drawPoint(uv,ro,0.02));\n    \n\n    vec2 pos = ro;\n    \n    //basic ray marcher                   \n    for(float i = 0.; i < 15.; i ++){\n        \n        d = map(next);\n        if(t > FAR) break;\n        //t += d*0.75; \n        last = next;\n        //next = ro + rd*t;\n        next += rd*(d*0.75);\n        //draw line from last to next\n        col = mix(col, vec3(0.,0.7,0.99), drawLine(uv,last,next,0.01));\n        //draw point at next\n        col = mix(col, vec3(0.,0.7,0.99)*0.5,drawPoint(uv,next,0.02));\n        //draw circle based on d, distance to hit the map\n        col = mix(col, 0.5+0.5*cos(vec3(1.,2.,4.).xyx + i*80.)/(1.+i/5.), S(length(uv - last)-d)+0.01);\n        \n        //check for hit and reflect\n        if(d < 0.001){\n            vec2 n = normal(next);\n            rd = reflect(rd, n);\n            next -= n*0.01;\n            //t *= 0.9;\n        }\n        \n    }\n    \n    // Output to screen\n    //vignette\n    uv = fragCoord/iResolution.xy;\n    uv *=  1.0 - uv.yx;\n    float vig = uv.x*uv.y * 15.0; // multiply with sth for intensity\n    \n    vig = pow(vig, 0.25); \n    \n    fragColor = vec4(col*vig,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}