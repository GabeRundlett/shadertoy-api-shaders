{
    "Shader": {
        "info": {
            "date": "1668656696",
            "description": "just playing about, very messy code. buffer + noise hides overstepping/artifacts quite well, looks cool i think",
            "flags": 32,
            "hasliked": 0,
            "id": "DslSz7",
            "likes": 16,
            "name": "Bendy Glass Cube",
            "published": 3,
            "tags": [
                "f"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 322
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord)/iResolution.xy;\n\tvec3 col = texture(iChannel0, uv).rgb;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(2. * pi * (c * t + d));\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat sfloor(float a, float b) {\n    return floor(b) + 0.5 + 0.5 * tanh(a * (fract(b) - 0.5)) / tanh(0.5 * a);\n}\n\n// From iq, k = 0.12 is good\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n// RayMarching from TheArtOfCode\n\n// From BlackleMori\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdBox(in vec2 p, in vec2 b){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.))+min(max(d.x,d.y),0.);\n}\n\nvec3 rayOri() {\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 ro = vec3(0, 3, -3);\n    ro.xz *= rot(-pi/2.);\n    ro.yz *= rot(-m.y*3.14+1.);\n    ro.xz *= rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat dist(vec3 p) {\n    float o = 2. * pi / 3.;\n    float t = exp(-2. * length(p)) + 0.25 * iTime;\n    p.xy *= rot(pi * thc(4., t + o));\n    p.yz *= rot(pi * thc(4., t));\n    p.zx *= rot(pi * thc(4., t -o));\n    float sd = length(p) - 1.6;\n    p = erot(p, normalize(vec3(1,2,3)), iTime);\n    //p.xz *= rot(-21.4 * iTime);\n    //p.xy *= rot(-11.4 * iTime);\n    float bd = sdBox(p, vec3(0.75)) - 0.;\n    //p.xz *= rot(10.4 * iTime);\n    p = erot(p, normalize(vec3(3,2,1)), -1. * iTime);\n    float c = 0.5 + 0.5 * cc(1.5, 0. * log(length(p)) + iTime);\n    c = pow(4. * c * (1.-c), 2.);\n    float bd2 = sdBox(p, vec3(0.3 + 0.15 * c)) - 0.1 * c;//(0.5 - 0.5 * c);\n    bd = -min(-bd, bd2);\n    return -min(-sd, bd);\n}\n\nfloat march(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    float s = sign(z);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = dist(p);\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        //dS *= .5 + .5 * h21(vec2(h21(p.xz + iTime),p.y + iTime));\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 normal(vec3 p) {\n\tfloat d = dist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        dist(p-e.xyy),\n        dist(p-e.yxy),\n        dist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 rayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec3 tx = texelFetch(iChannel0, ivec2(fragCoord - 0. * vec2(2,3)), 0).rgb;//texture(iChannel0, uv).rgb;\n    vec3 ro = rayOri();\n    \n    vec3 rd = rayDir(uv, ro, vec3(0), 1.25);\n    vec3 col = vec3(0);\n   \n    float d = march(ro, rd, 1.);\n    \n    vec3 p = ro + rd * d;\n    float IOR = 1.2;\n    if(d<MAX_DIST) {        \n        vec3 n = normal(p);\n        vec3 r = reflect(rd, n);\n\n        vec3 q = p - 4. * SURF_DIST * n;\n        vec3 rd2 = refract(rd, n, 1./IOR);\n        float d2 = march(q, rd2, -1.);       \n        vec3 p2 = q + d2 * rd2;\n        vec3 n2 = -normal(p2); \n        \n        vec3 q2 = p2 - 4. * SURF_DIST * n2;\n        vec3 rd3 = refract(rd2, n2, 1./IOR);\n        float d3 = march(q2, rd3, 1.);       \n        vec3 p3 = q2 + d3 * rd3;\n        vec3 n3 = normal(p3);\n\n        vec3 lightDir = normalize(vec3(1,2,3));//normalize(vec3(cos(iTime),0.5 * sqrt(2.),sin(iTime)));\n        float dif  = dot(n,  lightDir)*.5+.5;\n        float dif2 = dot(n2, lightDir)*.5+.5;\n        float dif3 = dot(n3, lightDir)*.5+.5;       \n       \n        float fres  = pow(1. + dot(rd, n),  5.);\n        float fres2 = pow(1. + dot(rd, n2), 5.);\n        float fres3 = pow(1. + dot(rd, n3), 5.); // hmm\n\n        //dif2 = pow(4. * dif2 * (1.-dif2), 8.);\n        //dif3 = pow(4. * dif3 * (1.-dif3), 8.);\n\n        float spec  = pow(dif,  32.);\n        float spec2 = pow(dif2, 32.);\n        float spec3 = pow(dif3, 32.);\n        \n        float t = iTime;\n        float th = pi * h21(t + vec2(h21(t + p.xy), p.z));\n        float th2 = 2. * pi * h21(t + vec2(h21(t - p.xy), -11. + p.z));\n        float m = 1.;\n        vec3 w = length(p3) * vec3(cos(th) * sin(th2), sin(th) * sin(th2), cos(th2));\n        col = 0.5 + 0.5 * normalize(p3 - w);\n        col += 0.5 * dif3;\n        float test = abs(dot(n3,n2));\n        // dividing by zero is fun\n        col /= 0.5 + 0.5 * thc(8., 4. * cross(p2,p3).y);\n        col *= clamp((dif3 + spec3) * vec3(test), 0., 1.);\n        \n        \n        //col *= 0.5 + 0.5 * thc(4., 2. * iTime);\n        col = clamp(col, 0., 1.);\n        col *= step(length(p3), MAX_DIST);\n        col = 4. * col * (1.-col);\n        col = pow(col, vec3(0.5));\n        col *= 0.8 + 0.4 * h21(uv + mod(iTime, 301.));\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    //col = mix(tx, col, exp(-0.5 * iTime));\n    //col = normalize(col);\n    col = mix(tx, col,0.25);//exp(-0.5 * iTime));\n   \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}