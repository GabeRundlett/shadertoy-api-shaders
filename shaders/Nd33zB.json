{
    "Shader": {
        "info": {
            "date": "1630026712",
            "description": "The idea comes from a picture on my art teacher's color theory intro slide.\nIgnore my terrible tracing skill.",
            "flags": 0,
            "hasliked": 0,
            "id": "Nd33zB",
            "likes": 7,
            "name": "Natural RYB Color Wheel",
            "published": 3,
            "tags": [
                "color",
                "space",
                "rgb",
                "wheel",
                "ryb"
            ],
            "usePreview": 0,
            "username": "harry7557558",
            "viewed": 448
        },
        "renderpass": [
            {
                "code": "// Desmos version:\n// https://www.desmos.com/calculator/w4thzt4ofr\n\n#define PI 3.1415926\n\n// RYB/RGB\n#define RYB 1\n\n// smoothed color gradient or not\n#define SMOOTH 0\n\n\n// Color space conversion\n\nfloat hue2rgb(float p, float q, float t) {\n    if (t < 0.) t += 1.;\n    if (t > 1.) t -= 1.;\n    if (t < 1./6.) return mix(p, q, 6. * t);\n    if (t < 1./2.) return q;\n    if (t < 2./3.) return mix(p, q, (2./3. - t) * 6.);\n    return p;\n}\nvec3 hsl2rgb(float h, float s, float l) {\n    float q = l < 0.5 ? l * (1.0 + s) : l + s - l * s;\n    float p = 2. * l - q;\n    return vec3(\n        hue2rgb(p, q, h + 1./3.),\n        hue2rgb(p, q, h),\n        hue2rgb(p, q, h - 1./3.)\n    );\n}\n\nvec3 ryb2rgb(vec3 ryb) {\n    const vec3 ryb000 = vec3(1, 1, 1);\n    const vec3 ryb001 = vec3(0.163, 0.373, 0.6);\n    const vec3 ryb010 = vec3(1, 1, 0);\n    const vec3 ryb100 = vec3(1, 0, 0);\n    const vec3 ryb011 = vec3(0, 0.66, 0.2);\n    const vec3 ryb101 = vec3(0.5, 0, 0.5);\n    const vec3 ryb110 = vec3(1, 0.5, 0);\n    const vec3 ryb111 = vec3(0, 0, 0);\n    return mix(mix(\n        mix(ryb000, ryb001, ryb.z),\n        mix(ryb010, ryb011, ryb.z),\n        ryb.y), mix(\n        mix(ryb100, ryb101, ryb.z),\n        mix(ryb110, ryb111, ryb.z),\n        ryb.y), ryb.x);\n}\n\n\n// Mask layer - please ignore my terrible tracing skill\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\nfloat smax(float a, float b, float k) {\n    return -smin(-a, -b, k);\n}\n\nfloat mask(float x, float y) {\n    float head = smax(x+0.25*y-0.65, -0.27*x+y-0.94-0.01*cos(3.0*x), 0.6); // head back\n    float face = -x-0.08*y-0.6 + 0.03*cos(6.0*y-1.0);  // face\n    face -= -0.2+0.2*tanh(18.0*(y+0.4)) + 0.1*exp(-3.0*y-2.2); // chin/neck\n    face -= 0.04*exp(-100.0*(y-0.1)*y)*(0.8-x+10.0*y);  // nose\n    face -= 0.03*sin(40.0*(y-0.03))*exp(-100.0*y*y);  // mouth\n    float d = smax(head, face, 0.2);\n    d = smax(d, 0.3*x-y-0.87 - 0.1*x*x, 0.05);  // bottom\n    float back = x+0.7*y+0.05 - 0.1*exp(-3.0*y-2.2);  // bottom-right block\n    back = smax(-back, -0.6*x+y+0.72-0.05*sin(8.0*x), 0.02);\n    d = smax(d, -back, 0.02);\n    return d;\n}\n\n\n// Noise\n\nvec2 hash22(vec2 p) {\n    // from David Hoskins's https://www.shadertoy.com/view/4djSRW\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat SimplexNoise(vec2 xy) {\n    const float K1 = 0.3660254038;  // (sqrt(3)-1)/2\n    const float K2 = 0.2113248654;  // (-sqrt(3)+3)/6\n    vec2 p = xy + (xy.x + xy.y)*K1;\n    vec2 i = floor(p);\n    vec2 f1 = xy - (i - (i.x + i.y)*K2);\n    vec2 s = f1.x < f1.y ? vec2(0.0, 1.0) : vec2(1.0, 0.0);\n    vec2 f2 = f1 - s + K2;\n    vec2 f3 = f1 - 1.0 + 2.0*K2;\n    vec2 n1 = 2.0 * hash22(i) - 1.0;\n    vec2 n2 = 2.0 * hash22(i + s) - 1.0;\n    vec2 n3 = 2.0 * hash22(i + 1.0) - 1.0;\n    vec3 v = vec3(dot(f1, n1), dot(f2, n2), dot(f3, n3));\n    vec3 w = max(-vec3(dot(f1, f1), dot(f2, f2), dot(f3, f3)) + 0.5, vec3(0.0));\n    return dot((w*w*w*w) * v, vec3(32.0));\n}\n\n\n// Main\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Cartesian coordinate\n    vec2 pos = 2.0 * fragCoord/iResolution.xy - 1.0;\n    pos *= iResolution.xy / min(iResolution.x, iResolution.y);\n\n    // polar coordinate\n    vec2 p = pos - vec2(-0.0, 0.15);\n    float r = length(p);\n    float a = atan(p.x, p.y) / (2.0*PI);\n    if (a < 0.0) a += 1.0;\n\n    // color\n    float noise = SimplexNoise(vec2(40.0*a, 8.0*sqrt(r)));\n#if !SMOOTH\n    a = round(12.0*a)/12.0;\n    r = round(3.0*r)/3.0;\n#endif\n    vec3 col = hsl2rgb(a, 1.0, (1.0-0.1*noise)*(1.0-0.8*exp(-0.8*r)));\n#if RYB\n    col = ryb2rgb(col);\n#endif\n\n    // apply mask\n    float m = mask(pos.x, pos.y);\n    if (m > 0.0) col = vec3(1.0);\n\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}