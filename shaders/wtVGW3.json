{
    "Shader": {
        "info": {
            "date": "1580093618",
            "description": "27 Jan 2020: day001\nLooking to draw a basic sphere using sdf.\nUsing parallel projectsion.",
            "flags": 0,
            "hasliked": 0,
            "id": "wtVGW3",
            "likes": 3,
            "name": "Hello Sphere",
            "published": 3,
            "tags": [
                "sdf",
                "sphere"
            ],
            "usePreview": 0,
            "username": "samhattangady",
            "viewed": 299
        },
        "renderpass": [
            {
                "code": "/*\nday001: Sphere\n27 Jan 2020\n\nLooking to draw a basic sphere using sdf.\nUsing parallel projections\n*/\n\n\nfloat sdfSphere(vec3 position) {\n    vec3 center = vec3(0.0);\n    float radius = 0.25;\n    return distance(position, center) - radius;\n}\n\nvec3 calcNormal( vec3 p ) \n{\n    // We calculate the normal by finding the gradient of the field at the\n    // point that we are interested in. We can find the gradient by getting\n    // the difference in field at that point and a point slighttly away from it.\n    const float h = 0.0001;\n    return normalize( vec3(\n        \t\t\t       -sdfSphere(p)+ sdfSphere(p+vec3(h,0.0,0.0)),\n                           -sdfSphere(p)+ sdfSphere(p+vec3(0.0,h,0.0)),\n                           -sdfSphere(p)+ sdfSphere(p+vec3(0.0,0.0,h)) \n    \t\t\t\t ));\n}\n\nfloat raymarch( vec3 direction, vec3 start) {\n    // We need to cast out a ray in the given direction, and see which is\n    // the closest object that we hit. We then move forward by that distance,\n    // and continue the same process. We terminate when we hit an object\n    // (distance is very small) or at some predefined distance.\n    float far = 15.0;\n    float d = 0.0;\n    vec3 pos = start;\n    for (int i=0; i<100; i++) {\n    \tfloat sphereDistance = sdfSphere(pos);\n        pos += sphereDistance*direction;\n\n        d += sphereDistance;\n        if (sphereDistance < 0.01) {\n        \tbreak;\n        }\n        if (d > far) {\n        \tbreak;\n        }\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalise and set center to origin.\n    vec2 p = fragCoord/iResolution.xy;\n    p -= 0.5;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 q = p - vec2(0.0, 0.0);\n    \n    vec3 planePosition = vec3(0.0, 0.0, -5.0);\n    vec3 lookingDirection = vec3(0.0, 0.0, 1.0);\n    \n    // Rotate light around origin in xz plane\n    float angle = iTime;\n    vec2 lightPos2D = mat2(cos(angle),-sin(angle),sin(angle),cos(angle))*vec2(0.0,1.0); \n    vec3 lightPoint = vec3(lightPos2D.x, 0.0, lightPos2D.y);\n    vec3 lightFacing = lightPoint - vec3(0.0);\n    \n    // raymarch to check for colissions.\n    vec3 start = vec3(p, planePosition.z);\n    float dist = raymarch(lookingDirection, start);\n    float color = 0.0;\n    if (dist < 15.0) {\n    \tvec3 normal = calcNormal(start+ dist*lookingDirection);\n        color = -dot(lightFacing, normal);\n    }\n    fragColor = vec4(vec3(color),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}