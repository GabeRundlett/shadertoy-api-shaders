{
    "Shader": {
        "info": {
            "date": "1719534166",
            "description": "Common stars effect.",
            "flags": 0,
            "hasliked": 0,
            "id": "X3cXWj",
            "likes": 4,
            "name": "Pentagram stars",
            "published": 3,
            "tags": [
                "stars",
                "pentagram",
                "pentacle"
            ],
            "usePreview": 0,
            "username": "clicker",
            "viewed": 160
        },
        "renderpass": [
            {
                "code": "\nfloat N21(vec2 p) {\n\tvec3 a = fract(vec3(p.xyx) * vec3(213.897, 653.453, 253.098));\n    a += dot(a, a.yzx + 79.76);\n    return fract((a.x + a.y) * a.z);\n}\n\nmat2 Rotate(float angle) {\n\tfloat s = sin(angle), c = cos(angle);\n    return mat2(c, s, s, -c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy ) / iResolution.y;\n\n    uv = uv * 18.0;\n\n    vec2 gu = fract(uv)-.5;\n    \n    vec3 col = vec3(0);\n    \n    float w = fwidth(uv.y);\n    \n    vec2 id = floor(uv);\n    \n    float pi2 = radians(360.0);\n\n    float a1 = pi2 / 5.0;\n    float a2 = a1 * 2.0;\n    float a3 = a1 * 3.0;\n\n    for(int y=-1;y<=1;y++) {\n    \tfor(int x=-1;x<=1;x++) {\n            vec2 offs = vec2(x, y);\n            vec2 guv = gu;\n            float index = N21(id + offs);\n\n            vec3 color = vec3(index, fract(index*34.32), fract(index*123.353));\n\n            vec2 posOffset = vec2(index, fract(index * 2424.852)) - vec2(0.5);\n\n            guv -= offs - posOffset;\n\n            guv *= Rotate(iTime * sign(index - 0.9) * 2.0);\n\n            guv.x = abs(guv.x);\n\n            float d0 = dot(guv, vec2(0.0, 1.0));\n            float d1 = dot(guv, vec2(sin(a1), cos(a1)));\n            float d2 = dot(guv, vec2(sin(a2), cos(a2)));\n            float d3 = dot(guv, vec2(sin(a3), cos(a3)));\n\n            float d = min(max(d1, d3), max(d0, d2));\n\n            float size = sin(iTime * (index - 0.5) * 10.0) * 0.25 * index;\n\n            col += color * vec3(smoothstep(w, -w, d - size));\n        }\n    }\n    \n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}