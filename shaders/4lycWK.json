{
    "Shader": {
        "info": {
            "date": "1537941863",
            "description": "Vortex shedding demonstration of my new fluid solving algorithm. Best results in full screen.\nfor an explanation of this algorithm : https://www.shadertoy.com/view/XtGcDK",
            "flags": 32,
            "hasliked": 0,
            "id": "4lycWK",
            "likes": 15,
            "name": "Unsteady Flow",
            "published": 3,
            "tags": [
                "fluid"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 791
        },
        "renderpass": [
            {
                "code": "vec4 t (vec2 v) {return texture(iChannel0,v/iResolution.xy);}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec4 me = t(U);\n    vec2 dw = vec2(\n    \tt(U+vec2(1,0)).w-t(U-vec2(1,0)).w,\n    \tt(U+vec2(0,1)).w-t(U-vec2(0,1)).w\n    );\n    vec3 n = normalize(vec3(dw,.07));\n    C = sin(vec4(1.5,2.5,3,4)*me.w*4.);\n    float l = dot(n,normalize(vec3(3,1,0)));\n    C *= 0.7+0.3*(0.3+0.7*l)*texture(iChannel2, reflect(vec3(0,0,-1),n));\n\tC = (0.9+0.1*l)*sqrt(C)*sqrt(sqrt(C));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 R;\nvec4 T ( vec2 U ) {return texture(iChannel0,U/R);}\nvoid mainImage( out vec4 Q, in vec2 U )\n{   R = iResolution.xy;\n \t\n \tvec2 O = U,A = U+vec2(1,0),B = U+vec2(0,1),C = U+vec2(-1,0),D = U+vec2(0,-1);\n \tvec4 u = T(U), a = T(A), b = T(B), c = T(C), d = T(D);\n \tvec4 p;\n \tvec2 g = vec2(0);\n \t#define I 2\n \tfor (int i = 0; i < I; i++) {\n        U -=u.xy; A -=a.xy; B -=b.xy; C -=c.xy; D -=d.xy; \n        p += vec4(length(U-A),length(U-B),length(U-C),length(U-D))-1.;\n        g += vec2(a.z-c.z,b.z-d.z);\n        u = T(U);a = T(A); b = T(B); c = T(C); d = T(D);\n \t}   \n \tQ = T(U);\n \tvec4 N = 0.25*(a+b+c+d);\n \tQ = mix(Q,N, vec4(0,0,1,0));\n \tQ.xy -= g/8./float(I);\n \tQ.z += (p.x+p.y+p.z+p.w)/8.;\n \tQ.z *= 0.9995;\n \tfloat o = .15; // CHANGE THIS TO CHANGE SPEED\n \tif (U.x < 2.) Q.x = o;\n \tif (iFrame < 1) Q = vec4(o,0,0,0);\n \tif (length(U/R.y-vec2(0.1,0.5)) < .025) Q.xyw = vec3(0,0,1);\n \t\n \tif (U.x<2.||U.y<2.||R.x-U.x<2.||R.y-U.y<2.) Q=vec4(o,0,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 R;\nvec4 T ( vec2 U ) {return texture(iChannel0,U/R);}\nvoid mainImage( out vec4 Q, in vec2 U )\n{   R = iResolution.xy;\n \t\n \tvec2 O = U,A = U+vec2(1,0),B = U+vec2(0,1),C = U+vec2(-1,0),D = U+vec2(0,-1);\n \tvec4 u = T(U), a = T(A), b = T(B), c = T(C), d = T(D);\n \tvec4 p;\n \tvec2 g = vec2(0);\n \t#define I 2\n \tfor (int i = 0; i < I; i++) {\n        U -=u.xy; A -=a.xy; B -=b.xy; C -=c.xy; D -=d.xy; \n        p += vec4(length(U-A),length(U-B),length(U-C),length(U-D))-1.;\n        g += vec2(a.z-c.z,b.z-d.z);\n        u = T(U);a = T(A); b = T(B); c = T(C); d = T(D);\n \t}   \n \tQ = T(U);\n \tvec4 N = 0.25*(a+b+c+d);\n \tQ = mix(Q,N, vec4(0,0,1,0));\n \tQ.xy -= g/8./float(I);\n \tQ.z += (p.x+p.y+p.z+p.w)/8.;\n \tQ.z *= 0.9995;\n \tfloat o = .15; // CHANGE THIS TO CHANGE SPEED\n \tif (U.x < 2.) Q.x = o;\n \tif (iFrame < 1) Q = vec4(o,0,0,0);\n \tif (length(U/R.y-vec2(0.1,0.5)) < .025) Q.xyw = vec3(0,0,1);\n \t\n \tif (U.x<2.||U.y<2.||R.x-U.x<2.||R.y-U.y<2.) Q=vec4(o,0,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 R;\nvec4 T ( vec2 U ) {return texture(iChannel0,U/R);}\nvoid mainImage( out vec4 Q, in vec2 U )\n{   R = iResolution.xy;\n \t\n \tvec2 O = U,A = U+vec2(1,0),B = U+vec2(0,1),C = U+vec2(-1,0),D = U+vec2(0,-1);\n \tvec4 u = T(U), a = T(A), b = T(B), c = T(C), d = T(D);\n \tvec4 p;\n \tvec2 g = vec2(0);\n \t#define I 2\n \tfor (int i = 0; i < I; i++) {\n        U -=u.xy; A -=a.xy; B -=b.xy; C -=c.xy; D -=d.xy; \n        p += vec4(length(U-A),length(U-B),length(U-C),length(U-D))-1.;\n        g += vec2(a.z-c.z,b.z-d.z);\n        u = T(U);a = T(A); b = T(B); c = T(C); d = T(D);\n \t}   \n \tQ = T(U);\n \tvec4 N = 0.25*(a+b+c+d);\n \tQ = mix(Q,N, vec4(0,0,1,0));\n \tQ.xy -= g/8./float(I);\n \tQ.z += (p.x+p.y+p.z+p.w)/8.;\n \tQ.z *= 0.9995;\n \tfloat o = .15; // CHANGE THIS TO CHANGE SPEED\n \tif (U.x < 2.) Q.x = o;\n \tif (iFrame < 1) Q = vec4(o,0,0,0);\n \tif (length(U/R.y-vec2(0.1,0.5)) < .025) Q.xyw = vec3(0,0,1);\n \t\n \tif (U.x<2.||U.y<2.||R.x-U.x<2.||R.y-U.y<2.) Q=vec4(o,0,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 R;\nvec4 T ( vec2 U ) {return texture(iChannel0,U/R);}\nvoid mainImage( out vec4 Q, in vec2 U )\n{   R = iResolution.xy;\n \t\n \tvec2 O = U,A = U+vec2(1,0),B = U+vec2(0,1),C = U+vec2(-1,0),D = U+vec2(0,-1);\n \tvec4 u = T(U), a = T(A), b = T(B), c = T(C), d = T(D);\n \tvec4 p;\n \tvec2 g = vec2(0);\n \t#define I 2\n \tfor (int i = 0; i < I; i++) {\n        U -=u.xy; A -=a.xy; B -=b.xy; C -=c.xy; D -=d.xy; \n        p += vec4(length(U-A),length(U-B),length(U-C),length(U-D))-1.;\n        g += vec2(a.z-c.z,b.z-d.z);\n        u = T(U);a = T(A); b = T(B); c = T(C); d = T(D);\n \t}   \n \tQ = T(U);\n \tvec4 N = 0.25*(a+b+c+d);\n \tQ = mix(Q,N, vec4(0,0,1,0));\n \tQ.xy -= g/8./float(I);\n \tQ.z += (p.x+p.y+p.z+p.w)/8.;\n \tQ.z *= 0.9995;\n \tfloat o = .15; // CHANGE THIS TO CHANGE SPEED\n \tif (U.x < 2.) Q.x = o;\n \tif (iFrame < 1) Q = vec4(o,0,0,0);\n \tif (length(U/R.y-vec2(0.1,0.5)) < .025) Q.xyw = vec3(0,0,1);\n \t\n \tif (U.x<2.||U.y<2.||R.x-U.x<2.||R.y-U.y<2.) Q=vec4(o,0,0,0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}