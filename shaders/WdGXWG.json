{
    "Shader": {
        "info": {
            "date": "1574803131",
            "description": "If no scrambling matrix is used between scales (i.e. original Perlin noise), the noise is exactly 0 on grid vertex.\nThis can be used to stochastically interpolate a mesh or polyline, still passing through control points (mouseY).\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WdGXWG",
            "likes": 10,
            "name": "Perlin noise vs interpolation 2",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "noise",
                "perlin",
                "gradient",
                "lightning"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 796
        },
        "renderpass": [
            {
                "code": "// curve variant of 2D https://shadertoy.com/view/wdKXzd\n// see also smoother animation using flownoise: https://www.shadertoy.com/view/WsGXDy\n\n// gradient noise derived from https://www.shadertoy.com/view/XdXGW8\n\nvec2 hash( vec2 x ) \n{\n    const vec2 k = vec2( .3183099, .3678794 );\n    x = x*k + k.yx;\n    return -1. + 2.*fract( 16. * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat noise( vec2 p )\n{\n    vec2 i = floor( p ),\n         f = fract( p ),\n\t     u = f*f*(3.-2.*f);\n\n#define P(x,y) dot( hash( i + vec2(x,y) ), f - vec2(x,y) )\n    return mix( mix( P(0,0), P(1,0), u.x),\n                mix( P(0,1), P(1,1), u.x), u.y);\n}\n\nfloat perlin( vec2 p )  //fractal noise\n{\t\n    mat2 m = mat2(2.); // mat2( 1.6,  1.2, -1.2,  1.6 );\n    float v  = 0.,s = 1.;\n    for( int i=0; i < 7; i++, s /= 2. ) {\n        v += s*noise( p ); p *= m;\n    }\n    return v;\n}\n\n// -----------------------------------------------\n\n#define S(v) smoothstep( pix, 0., v )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = ( u -.5*R ) / R.y * 2.,\n         M = iMouse.xy; if (M!=vec2(0)) M = ( M -.5*R ) / R.y * 2.;\n    O -= O;\n    float pix = 3./R.y,\n          y = perlin(vec2(U.x,iFrame/4)) + U.x*M.y;\n    \n    O += S(abs(y - U.y));\n\n    O.g += S(length(U)-.03);\n    O.r += S(length(U-vec2(1,M.y))-.03);\n    O.b += S(length(U+vec2(1,M.y))-.03);\n  //O.b += S(abs(U.y - U.x*M.y));\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}