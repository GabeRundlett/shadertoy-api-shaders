{
    "Shader": {
        "info": {
            "date": "1508777619",
            "description": "tried to do a frozen ground :)",
            "flags": 0,
            "hasliked": 0,
            "id": "llScWw",
            "likes": 21,
            "name": "Frozen Ground",
            "published": 3,
            "tags": [
                "ground",
                "frozen"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 869
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2017 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n// link : https://www.shadertoy.com/view/llScWw\n\n#define path(t) sin(t * 0.1) * 2.\n\n//--------------------------------------------------------------------------\n// Grab all sky information for a given ray from camera\n// from Dave Hoskins // https://www.shadertoy.com/view/Xsf3zX\nvec3 GetSky(in vec3 rd, in vec3 sunDir, in vec3 sunCol)\n{\n\tfloat sunAmount = max( dot( rd, sunDir), 0.0 );\n\tfloat v = pow(1.0-max(rd.y,0.0),6.);\n\tvec3  sky = mix(vec3(.1, .2, .3), vec3(0.6,0.8,1.), v);\n\tsky = sky + sunCol * sunAmount * sunAmount * .25;\n\tsky = sky + sunCol * min(pow(sunAmount, 800.0)*1.5, .3);\n\treturn clamp(sky, 0.0, 1.0);\n}\n\nvec4 df(vec3 p)\n{\n    vec3 tex = texture(iChannel0, p.xz * 0.5).rgb;\n    float disp = dot(tex, vec3(0.01));\n    \n    p.xy += path(p.z);\n    \n    float plane = p.y + cos(p.x * .1) - 0.8 + disp;\n\n    return vec4(plane, vec3(0));\n}\n\nvec3 nor( vec3 pos, float prec )\n{\n\tvec3 eps = vec3( prec, 0., 0. );\n\tvec3 nor = vec3(\n\t    df(pos+eps.xyy).x - df(pos-eps.xyy).x,\n\t    df(pos+eps.yxy).x - df(pos-eps.yxy).x,\n\t    df(pos+eps.yyx).x - df(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// get density of the df at surfPoint\n// ratio between constant step and df value\nfloat SubDensity(vec3 surfPoint, float ms) \n{\n\tvec3 n = nor(surfPoint,0.0001); \n\treturn df(surfPoint - n * ms).x/ms;\n}\n\n// from shane shaders\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.html\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n )\n{\n    n = max((abs(n) - .2)*7., .001);\n    n /= (n.x + n.y + n.z );  \n    p = (texture(tex, p.yz)*n.x + texture(tex, p.zx)*n.y + texture(tex, p.xy)*n.z).xyz;\n    return p*p;\n}\n\n// from shane shaders\n// Texture bump mapping. Four tri-planar lookups, or 12 texture lookups in total. I tried to \n// make it as concise as possible. Whether that translates to speed, or not, I couldn't say.\nvec3 doBumpMap( sampler2D tx, in vec3 p, in vec3 n, float bf)\n{\n    const vec2 e = vec2(0.001, 0);\n    mat3 m = mat3( tex3D(tx, p - e.xyy, n), tex3D(tx, p - e.yxy, n), tex3D(tx, p - e.yyx, n));\n    vec3 g = vec3(0.299, 0.587, 0.114)*m; // Converting to greyscale.\n    g = (g - dot(tex3D(tx,  p , n), vec3(0.299, 0.587, 0.114)) )/e.x; g -= n*dot(n, g);\n    return normalize( n + g*bf ); // Bumped normal. \"bf\" - bump factor.\n}\n\n// shading func\nvec3 shade(vec3 ro, vec3 rd, float d, vec3 ld, float li)\n{\n\tvec3 p = ro + rd * d;\t\t\n\tvec3 n = nor(p, 0.1);\t\t\n    \n    n = doBumpMap(iChannel0, p*.5, n, 0.005);\n\t\n\tvec3 refl = reflect(rd,n);\t\n\t\n\tfloat amb = 0.6; \t\t\t\t\t\t\t\t\t\t\t\n\tfloat diff = clamp( dot( n, ld ), 0.0, 1.0 ); \t\t\t\t\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 4. ); \t\t\n\tfloat spe = pow(clamp( dot( refl, ld ), 0.0, 1.0 ),16.); \t\n\tfloat sss = 1. - SubDensity(p, 1.); \t\t\t\t\t\t\n\t\n    return vec3(\n        (diff + fre + spe * 2.) * amb * li,\n        (diff + fre + sss) * amb * li + spe * 1.2,\n        (diff + fre - spe * 0.2 + sss * .8) * amb * li\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // vars\n\tvec2 g = fragCoord;\n\tvec2 si = iResolution.xy;\n\tvec2 mo = iMouse.xy;\n\tfloat time = iTime * 1.2;\n\t\n\tvec3 col = vec3(0);\n            \n\tvec3 ro = vec3(0,0,time);\n\tro.xy -= path(ro.z);\n    \n\tvec3 lp = ro + vec3(0,2,5);\n\t\n    vec3 cv = ro + vec3(0,-.3,1);\n\tvec3 cu = normalize(vec3(0,1,0));\n  \tvec3 z = normalize(cv-ro);\n    vec3 x = normalize(cross(cu,z));\n  \tvec3 y = cross(z,x);\n    \n  \tvec2 uv = (g+g-si)/si.y;\n   \tvec3 rd = normalize(z + uv.x*x + uv.y*y);\n\n\tfloat md = 100.;\n\n\tfloat s = 1., d = 0.;\n\tfor (float i=0.; i<80.; i++)\n\t{\n\t\tif (d*d/s > 1e6 || d > md) break;\n\t\ts = df(ro+rd*d).x;\n\t\td += s * 0.8;\n\t}\n\t\n    vec3 ld = normalize(lp - ro-rd*d);\n\t\n    vec3 sky = GetSky(rd, ld, vec3(1.5));\n    \n    if (d < md)\n    {\n        vec3 p = ro+rd*d; // surf point\n        vec3 mat = vec3(0.3,0.5,0.8);\n        \n        // sub surface\n        for (float i = 0.; i < 1.; i+=0.1)\n        {\n            float y = shade(p, rd, i, ld, i).y;\n            mat = blackbody(1000. + y * 900.).bgr * 0.8;\n            col = mix(col, y * mat, i);\n        }\n        \n        // surface\n        float x = shade(ro, rd, d, ld, 3.).x;\n        mat = blackbody(2000. + x * 900.).bgr * 0.2;\n        col = mix(col, x * mat, 0.7);\n    \t\n        // snow\n        vec3 tex = texture(iChannel0, p.xz*.2).rgb;\n        tex = smoothstep(tex+0.5, tex, vec3(.7));\n    \tfloat z = shade(ro, rd, d, ld, 1.).z;\n        col = mix(col, vec3(0.9,0.9,1.0) * z, tex.r);\n    }\n    \n\tcol = mix(col, sky, 1.0-exp(-0.01*d*d));\n\n    col = sqrt(col * col * .8);\n\n\tvec2 v = g/si;\n    col *= 0.5 + 0.5*pow( 16.0*v.x*v.y*(1.0-v.x)*(1.0-v.y), 0.25 ); // iq vignette\n    fragColor = vec4(col, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}