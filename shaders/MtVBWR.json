{
    "Shader": {
        "info": {
            "date": "1542246932",
            "description": "it works now!\n",
            "flags": 0,
            "hasliked": 0,
            "id": "MtVBWR",
            "likes": 4,
            "name": "ray-tracing demo",
            "published": 3,
            "tags": [
                "raytracing"
            ],
            "usePreview": 0,
            "username": "Arthas_me",
            "viewed": 704
        },
        "renderpass": [
            {
                "code": "const float PI = 3.141592653589793;\n\nconst vec3 ambient = vec3(0.01);\nconst vec3 lightColor = vec3(1.);\nvec3 lightOrigin = vec3(4.,4.,4.);\nconst float lightRadius = 3.;\nconst float lightIntensity = 10.;\n\nuint seed;\n\nuint pcg_hash(uint seed) {\n    uint state = seed * 747796405u + 2891336453u;\n    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n    return (word >> 22u) ^ word;\n}\nfloat rand_float() {\n    seed = pcg_hash(seed);\n    return float(seed) * (1.0 / 4294967296.0);\n}\nvec2 rand_vec2() {\n    float r = rand_float() * 2.0 * PI;\n    return vec2(cos(r), sin(r));\n}\nvec3 rand_vec3() {\n    float r = rand_float() * 2. * PI;\n    float z = rand_float() * 2. - 1.;\n    float z_scale = sqrt(1.0-z*z);\n    return vec3(cos(r)*z_scale, sin(r)*z_scale, z);\n}\nuint initSeed() {\n    uint seed = pcg_hash(uint(gl_FragCoord.x));\n    seed = pcg_hash(seed + uint(gl_FragCoord.y));\n    seed = pcg_hash(seed + uint(iTime*1000.));\n    return seed;\n}\n\nvec2 sphIntersect( in vec3 ro, in vec3 rd, in vec3 ce, float ra) {\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - ra*ra;\n    float h = b*b - c;\n    if( h < 0.0 ) return vec2(-1.0); // no intersection\n    h = sqrt( h );\n    return vec2( -b-h, -b+h );\n}\n\nfloat plaIntersect(in vec3 ro, in vec3 rd, in vec4 p) {\n    return -(dot(ro,p.xyz)+p.w)/dot(rd,p.xyz);\n}\n\nmat3 setCamera(in vec3 ro, in vec3 ta, in float cr) {\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr), 0.);\n\tvec3 cu = normalize(cross(cw, cp));\n\tvec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nbool intersect(in vec3 ro, in vec3 rd,\n    out vec3 pos, out vec3 normal, out vec3 color,\n    out float roughness, out bool light) {\n\n        vec3 sphPostions[4];\n        sphPostions[0] = vec3(-0.5, 0.25, -0.5);\n        sphPostions[1] = vec3(-0.5, 0.25, 0.5);\n        sphPostions[2] = vec3(0.5, 0.25, -0.5);\n        sphPostions[3] = vec3(0.5, 0.25, 0.5);\n\n        vec3 sphColors[4];\n        sphColors[0] = vec3(0.0, 0.5, 1.0);\n        sphColors[1] = vec3(1.0, 0.0, 0.5);\n        sphColors[2] = vec3(0.5, 1.0, 0.0);\n        sphColors[3] = vec3(1.0, 0.5, 0.5);\n\n        vec3 sphCenter;\n        float sphRadius = 0.25;\n\n        float tmin = 1e38, t;\n        bool hit = false;\n\n        vec4 plane = vec4(0.,1.,0.,0.);\n\n        t = plaIntersect(ro, rd, plane);\n        // t = (0.0 - ro.y) / rd.y;\n        if (t > 0.0 && t<tmin) {\n            tmin = t;\n            pos = ro + rd * t;\n            normal = vec3(0,1,0);\n            // coffee color\n            color = vec3(.8, .2, .2) * 0.25;\n            // coffee roughness\n            roughness = 0.;\n            light = false;\n            hit = true;\n        }\n        for (int i = 0; i < 4; i++) {\n            sphCenter = sphPostions[i];\n            t = sphIntersect(ro, rd, sphCenter, sphRadius).x;\n            if (t>0.0 && t<tmin) {\n                tmin = t;\n                pos = ro + t*rd;\n                normal = normalize(pos - sphCenter);\n\n                roughness = 0.1;\n                color = sphColors[i];\n\n                light = false;\n                hit = true;\n            }\n        }\n\n\n        t = sphIntersect(ro, rd, lightOrigin, lightRadius).x;\n        if (t>0.0 && t<tmin) {\n            tmin = t;\n            pos = ro + t*rd;\n            normal = normalize(pos - lightOrigin);\n            roughness = 0.;\n            color = lightColor;\n            light = true;\n            hit = true;\n        }\n\n        return hit;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    seed = initSeed();\n    vec2 jitter = vec2(rand_float(), rand_float()) ;\n\n    vec2 uv = (gl_FragCoord.xy + jitter) / iResolution.xy; // 0 <> 1\n    vec2 p = (-iResolution.xy + 2. * (gl_FragCoord.xy + jitter)) / iResolution.y; // -1 <> 1 by height\n\n    vec3 ro = vec3(2.*sin(iTime), 2., -2.*cos(iTime));\n    vec3 ta = vec3(0., 0., 0.);\n\n    lightOrigin = vec3(4.* cos(iTime/.7), 4., 4.* sin(iTime/.7));\n    \n    mat3 camera = setCamera(ro, ta, 0.);\n\n    vec3 rd = camera * normalize(vec3(p.xy, 2.2));\n\n\n    // rt\n    vec3 accum = vec3(0.);\n    vec3 mask = vec3(1.);\n    for (int i = 0; i < 10; i++) {\n        vec3 pos, normal, color;\n        float roughness;\n        bool light;\n\n        if (!intersect(ro, rd, pos, normal, color, roughness, light)) {\n            // hit nothing\n            accum += ambient * mask;\n            break;\n        }\n\n        // hit light\n        if (light) {\n            accum += lightColor * mask;\n            break;\n        }\n\n        // hit obj\n        mask *= color;\n\n\n        // pos to light origin ray test\n        vec3 _v3;\n        float _f;\n        vec3 lo = lightOrigin + rand_vec3() * lightRadius;\n        vec3 ld = normalize(lo - pos);\n        if (intersect(pos + ld * 0.0001, ld, _v3, _v3, _v3, _f, light) && light) {\n            float d = clamp(dot(normal, ld), 0.0, 1.0);\n            d *= pow(asin(lightRadius/distance(pos, lightOrigin)), 2.0);\n            accum += d * lightIntensity * lightColor * mask;\n        }\n\n        rd = normalize(mix(reflect(rd, normal), normal + rand_vec3(), roughness));\n        ro = pos + 0.0001 * rd;\n\n    }\n    accum = pow( accum, vec3(0.4545) );\n    fragColor = vec4(accum, 1.);\n\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}