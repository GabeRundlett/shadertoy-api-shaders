{
    "Shader": {
        "info": {
            "date": "1695265901",
            "description": "what a beautiful thing! ",
            "flags": 32,
            "hasliked": 0,
            "id": "Dd3yRX",
            "likes": 16,
            "name": "Quaternion Julia Density",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 245
        },
        "renderpass": [
            {
                "code": "\nMain {\n    Q = vec4(1.,.7,1.1,1)*A(U)/float(iFrame);\n    \n    Q *= 1.+6.*fwidth(length(Q));\n    Q = pow(max(Q,0.),vec4(1.25));\n    if (length(Q.xyz)>0.) \n    Q.xyz = normalize(Q.xyz) * .8*atan(2.4*length(Q)); else Q = vec4(0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define Main void mainImage(out vec4 Q, in vec2 U) \n#define A(U) texture(iChannel0,(U)/R)\nvec4 mul (vec4 a, vec4 b) {\n    \n    // (a + bi + cj + dk) * (e + f*i + g*j + h*k)\n    \n    return vec4 (\n        \n        a.x*b.x - a.y*b.y - a.z*b.z - a.w*b.w  ,\n    \n        a.x*b.y + b.x*a.y + a.z*b.w - a.w*b.z  ,\n        \n        a.x*b.w + b.x*a.z + a.w*b.y - b.w*a.y  ,\n       \n        a.x*b.z + b.x*a.w + a.y*b.z - b.y*a.z\n    \n    ); \n    \n\n}\nvec4 fractal (vec4 u) {\n    vec4 c = vec4(0);\n    vec4 q = u;\n    for (float i = 0.; i < 120.; i++) {\n        u = mul(u,u) - vec4(.8,.15,0,.0);\n        if (length(u) < 20.) \n            c += 2.*max(sin(sqrt(1.+i*10.)+vec4(1,2,3,4)),0.)*exp(-300.*dot(u,u));\n        else break;\n    }\n    return 7.*(c);\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\nMain {\n    Q = A(U);\n    U = 2.*(U+vec2(sin(422.*iTime),sin(1453.*iTime))-.5*R)/R.y;\n    vec3 p = vec3(0,0,-2.8);\n    vec3 d = normalize(vec3(U,3));\n    float t = .3;\n    p.x -= .1;\n    p.xy *= mat2(cos(t),sin(t),-sin(t),cos(t));\n    d.xy *= mat2(cos(t),sin(t),-sin(t),cos(t));\n    t = .2;\n    p.xz *= mat2(cos(t),sin(t),-sin(t),cos(t));\n    d.xz *= mat2(cos(t),sin(t),-sin(t),cos(t));\n    \n    p += d*(2.9+.7*(fract(.5+float(iFrame)/500.))*2.-1.);\n    Q += fractal(vec4(p,0));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}