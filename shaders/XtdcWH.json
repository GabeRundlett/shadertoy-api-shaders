{
    "Shader": {
        "info": {
            "date": "1532471587",
            "description": "Attempt to simplify an effect I had made previously.\n\nThe key is to have very good blurring.",
            "flags": 32,
            "hasliked": 0,
            "id": "XtdcWH",
            "likes": 11,
            "name": "Simple Transparent 2D Metaballs",
            "published": 3,
            "tags": [
                "2d",
                "metaballs",
                "transparent"
            ],
            "usePreview": 0,
            "username": "luluco250",
            "viewed": 943
        },
        "renderpass": [
            {
                "code": "//\tDisplay\n\nconst float pi = 3.1415926535897932384626433832795;\n\nfloat normal(float x, float mean, float variance) {\n    float v = variance * variance;\n    float a = 1.0 / sqrt(2.0 * pi * v);\n    float b = ((x - mean) * (x - mean)) / (2.0 * v);\n    return a * exp(-b);\n}\n\nfloat rand(vec2 uv, float t) {\n    const float a = 34.3454;\n    const float b = 45.5675;\n    const float c = 5432.1384;\n    float d = dot(uv, vec2(a, b));\n    return fract(sin(d) * c + t);\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 uv = coord / iResolution.xy;\n    \n    //\tGenerate a star field\n    //\tWanted to do flickering stars but it's not working yet\n    float stars = rand(uv, 0.0);\n    stars = normal(stars, 0.0, 0.0001);\n    color = vec4(vec3(stars), 1.0);\n    \n    //\tMix the two images according to the alpha\n    vec4 circles = texture(iChannel0, uv);\n    color.rgb = mix(color.rgb, circles.rgb, circles.a);\n    \n    //\tGamma correction\n    color.rgb = pow(color.rgb, vec3(1.0 / 2.2));\n}    \n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//\tGenerate circles\n\nconst float circle_sizes = 0.1;\n\nstruct Circle {\n    vec3 color;\n    vec2 pos;\n    float size;\n};\n\nvec2 scale(vec2 uv, vec2 scale, vec2 center) {\n    return (uv - center) * scale + center;\n}\n\nvoid draw_circle(inout vec4 color, vec2 uv, Circle c) {\n    uv = scale(uv, vec2(iResolution.x / iResolution.y, 1.0), vec2(0.5));\n    c.pos = scale(c.pos, vec2(iResolution.x / iResolution.y, 1.0), vec2(0.5));\n    float visible = step(distance(uv, c.pos), c.size);\n    color.rgb += pow(c.color, vec3(2.2)) * visible;\n    color.a = max(color.a, visible);\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 uv = coord / iResolution.xy;\n    color = vec4(0.0);\n    \n    uv = scale(uv, vec2(4.0), vec2(0.5));\n    \n    draw_circle(color, uv, Circle(\n        vec3(1.0, 0.0, 0.0),\n        vec2(sin(iTime) * 0.333 + 0.5, 0.5),\n        circle_sizes\n    ));\n    \n    draw_circle(color, uv, Circle(\n        vec3(0.0, 0.0, 1.0),\n        vec2(1.0 - sin(iTime + 1.0) * 0.333 - 0.5, 0.5),\n        circle_sizes\n    ));\n    \n    draw_circle(color, uv, Circle(\n        vec3(1.0, 0.0, 1.0),\n        vec2(0.5, 0.5 + sin(iTime + 2.0) * 0.5),\n        circle_sizes\n    ));\n    \n    draw_circle(color, uv, Circle(\n        vec3(0.0, 1.0, 1.0),\n        vec2(0.5, 0.5 - sin(iTime + 3.0) * 0.5),\n        circle_sizes\n    ));\n    \n    draw_circle(color, uv, Circle(\n        vec3(1.0, 1.0, 0.0),\n        vec2(0.5 - sin(iTime + 4.0) * 0.333, 0.5 - sin(iTime) * 0.333),\n        circle_sizes\n    ));\n    \n    draw_circle(color, uv, Circle(\n        vec3(0.0),\n        vec2(0.5 + sin(iTime + 5.0) * 0.333, 0.5 - sin(iTime) * 0.333),\n        circle_sizes\n    ));\n    \n    draw_circle(color, uv, Circle(\n        vec3(1.0),\n        vec2(0.5 - sin(iTime + 6.0) * 0.333, 0.5 + sin(iTime) * 0.333),\n        circle_sizes\n    ));\n    \n    draw_circle(color, uv, Circle(\n        vec3(0.0, 1.0, 0.0),\n        vec2(0.5 + sin(iTime + 7.0) * 0.333, 0.5 + sin(iTime) * 0.333),\n        circle_sizes\n    ));\n    \n    if (iMouse.z > 0.0)\n        draw_circle(color, uv, Circle(\n            vec3(1.0),\n            iMouse.xy / iResolution.xy,\n            circle_sizes\n\t\t));\n    \n    //color.rgb = vec3(color.a);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//\tHorizontal blur\n\nconst float pi = 3.1415926535897932384626433832795;\n\nfloat gaussian(float x, float sigma) {\n    float s = sigma * sigma;\n    float a = 1.0 / sqrt(2.0 * pi * s);\n    float b = (x * x) / (2.0 * s);\n    return a * exp(-b);\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    const int samples = 35;\n    const int half_samples = samples / 2;\n    const float sigma = pi * 2.5;\n    float scale = iResolution.y / 512.0;\n    scale *= 1.25;\n    const float start_offset = float(half_samples) - 1.0;\n    \n    vec2 ps = vec2(1.0) / iResolution.xy;\n    \n    color = vec4(0.0);\n    coord.x -= start_offset * scale;\n    \n    for (int i = 0; i < samples; ++i) {\n        color += texture(iChannel0, coord * ps) * gaussian(float(i - half_samples), sigma);\n        coord.x += scale;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//\tVertical blur\n\nconst float pi = 3.1415926535897932384626433832795;\n\nfloat gaussian(float x, float sigma) {\n    float s = sigma * sigma;\n    float a = 1.0 / sqrt(2.0 * pi * s);\n    float b = (x * x) / (2.0 * s);\n    return a * exp(-b);\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    const int samples = 35;\n    const int half_samples = samples / 2;\n    const float sigma = pi * 2.5;\n    float scale = iResolution.y / 512.0;\n    scale *= 1.25;\n    const float start_offset = float(half_samples) - 1.0;\n    \n    vec2 ps = vec2(1.0) / iResolution.xy;\n    \n    color = vec4(0.0);\n    coord.y -= start_offset * scale;\n    \n    for (int i = 0; i < samples; ++i) {\n        color += texture(iChannel0, coord * ps) * gaussian(float(i - half_samples), sigma);\n        coord.y += scale;\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//\tGenerate metaballs\n\nvec2 scale(vec2 uv, vec2 scale, vec2 center) {\n    return (uv - center) * scale + center;\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 uv = coord / iResolution.xy;\n    uv = scale(uv, vec2(1.0 / 4.0), vec2(0.5));\n    color = texture(iChannel0, uv);\n    \n    //\tOnly generate metaballs if the alpha is above a certain threshold\n    if (color.a > 0.1) {\n        //\tInvert the alpha to get the fresnel effect\n        color.a = 1.0 - color.a;\n        //\tThis is just some arbitrary fresnel adjustments, they don't interfere with the process\n        color.a = pow(color.a, 8.0) * 4.0;\n    } else {\n        //\tRemove alpha from outside the threshold\n        //\tand make a small outline effect.\n        color.a = color.a > 0.0825 ? 20.0 : 0.0;\n    }\n    \n    //\tNote that we have put the alpha in HDR space,\n    //\tthis gives it a nice neon effect because it over-exposes\n    //\tthe original colors of the circles.\n}    \n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}