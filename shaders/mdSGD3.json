{
    "Shader": {
        "info": {
            "date": "1668312994",
            "description": "Making the impossible possible!\n\nObject from another realm..\n\nInspired by the awesome trick of Luna (https://www.shadertoy.com/view/WslyzX)\nand using jarble's amazing fractal texture https://www.shadertoy.com/view/csl3zl\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mdSGD3",
            "likes": 30,
            "name": "[phreax] geometric dissolution",
            "published": 3,
            "tags": [
                "raymarching",
                "escher",
                "moebius",
                "impossiblegeometry"
            ],
            "usePreview": 0,
            "username": "phreax",
            "viewed": 367
        },
        "renderpass": [
            {
                "code": "/* Creative Commons Licence Attribution-NonCommercial-ShareAlike \n   phreax 2022\n*/\n\n#define PI 3.141592\n#define TAU (2.*PI)\n#define SIN(x) (sin(x)*.5+.5)\n#define PHI 1.618033988749895\n\n\nfloat tt, g_mat, flip;\nfloat g_gl = 0.;\n\nmat2 rot2(float a) { return mat2(cos(a), -sin(a), sin(a), cos(a)); }\n\nfloat fadeInOut(float t1, float t2, float fadeTime) {\n    return smoothstep(t1, t1+fadeTime, iTime)-smoothstep(t2-fadeTime, t2, iTime);\n}\n\n\n// Amazing fractal texture from jarble https://www.shadertoy.com/view/csl3zl\nvec2 triangle_wave(vec2 a){\n    \n    vec2 a2 = vec2(1.,0.5),\n    \n    a1 = a-a2;\n    \n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\n\nvec3 fractex(vec2 uv) {\n    \n    vec3 col = vec3(0.);\n    \n    uv *= rot2(-tt*.5);\n    \n    float t1 = 2.;    \n    vec2 t2 = vec2(0.);\n        \n    for(int k = 0; k < 6; k++){\n        \n        uv = abs(.5*sign(uv.y-uv.x)+uv+t2);\n                \n        t2 = -triangle_wave(uv-.5*sign(uv.y-uv.x)) ;\n        \n        uv = t2-triangle_wave(uv.yx);\n\n        float c1 = abs(uv.x-uv.y);\n        \n        col = col.yzx;\n                \n        if(uv.y < uv.x) col = vec3(col.yz,c1);\n        \n    }\n    \n    col = min(col*2.,vec3(1.));\n    return col;\n}\n\n\n// from https://mercury.sexy/hg_sdf/\n#define GDFVector3 normalize(vec3(1, 1, 1 ))\n#define GDFVector4 normalize(vec3(-1, 1, 1))\n#define GDFVector5 normalize(vec3(1, -1, 1))\n#define GDFVector6 normalize(vec3(1, 1, -1))\n\n#define GDFVector7 normalize(vec3(0, 1, PHI+1.))\n#define GDFVector8 normalize(vec3(0, -1, PHI+1.))\n#define GDFVector9 normalize(vec3(PHI+1., 0, 1))\n#define GDFVector10 normalize(vec3(-PHI-1., 0, 1))\n#define GDFVector11 normalize(vec3(1, PHI+1., 0))\n#define GDFVector12 normalize(vec3(-1, PHI+1., 0))\n\n#define GDFVector13 normalize(vec3(0, PHI, 1))\n#define GDFVector14 normalize(vec3(0, -PHI, 1))\n#define GDFVector15 normalize(vec3(1, 0, PHI))\n#define GDFVector16 normalize(vec3(-1, 0, PHI))\n#define GDFVector17 normalize(vec3(PHI, 1, 0))\n#define GDFVector18 normalize(vec3(-PHI, 1, 0))\n\n#define fGDFBegin float d = 0.;\n#define fGDF(v) d = max(d, abs(dot(p, v)));\n#define fGDFEnd return d - r;\n\n\nfloat icosahedron(vec3 p, float r) {\n    fGDFBegin\n    fGDF(GDFVector3) fGDF(GDFVector4) fGDF(GDFVector5) fGDF(GDFVector6)\n    fGDF(GDFVector7) fGDF(GDFVector8) fGDF(GDFVector9) fGDF(GDFVector10)\n    fGDF(GDFVector11) fGDF(GDFVector12)\n    fGDFEnd\n}\n\n\n// by Nusan\nfloat curve(float t, float d) {\n  t/=d;\n  return mix(floor(t), floor(t)+1., pow(smoothstep(0.,1.,fract(t)), 10.));\n}\n\nfloat box(vec3 p, vec3 r) {\n    vec3 d = abs(p) - r;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat rect( vec2 p, vec2 b, float r ) {\n    vec2 d = abs(p) - (b - r);\n    return length(max(d, 0.)) + min(max(d.x, d.y), 0.) - r;\n}\n\n// fold space for toroid\nvec3 transform(vec3 p) {\n    float time = tt*flip;\n\n    p.x *= 1.3;\n    p.yz *= rot2(PI*.25*flip);\n\n    vec3 a = vec3(\n\t\tlength(p.xz),\n        p.y,\n        atan(p.x,p.z)\n\t);\n\n    a.z = fract((a.z/TAU)*10.+time*.5)-.5;\n    a.x -= mix(1.2, 1.9, SIN(tt));\n    \n    float deformF = fadeInOut(20., 30., 2.);\n  \n    a.xy *= rot2(abs(p.x)*deformF*.2+time*.5);\n\n    a.xy = abs(a.xy)-.5*SIN(tt);\n    \n    float rotateF = fadeInOut(10., 53., .0001); \n    float deform2F = fadeInOut(15., 50., 2.);\n    a.xy *= rot2(p.x*p.y*.3*deform2F+.33*(iTime-10.)*flip*rotateF);\n    \n    a.xy = abs(a.xy) -0.3*SIN(.25*tt);\n    return a;\n}\n\n\nfloat map(vec3 p) {   \n\n    vec3 a = transform(p);\n    float r = .01;\n    float b = mix(.3, .15, SIN(tt));\n    \n    float fizzleF = fadeInOut(20., 50., 3.); \n    b -= .13*sin(p.x+tt*.33)*fizzleF;\n\n    float w = mix(.2, .6, SIN(.6*tt- PI));\n    \n    float db = box(a, vec3(b, b, w)) - r;\n   \n    float dr = rect(a.xy, vec2(b*.8), r);\n    \n    g_mat = db < dr ? 1. : 0.;\n    float d = min(dr, db);;\n    return .7*d;\n}\n\n\nvec3 getNormal(vec3 p) {\n\n    vec2 eps = vec2(0.001, 0.0);\n    return normalize(vec3(map(p + eps.xyy) - map(p - eps.xyy),\n                          map(p + eps.yxy) - map(p - eps.yxy),\n                          map(p + eps.yyx) - map(p - eps.yyx)\n                         )\n                     );\n}\n\n\nvec2 raymarch(vec3 ro, vec3 rd, float steps) {\n\n    float mat = 0.,\n          t   = 0.,\n          d   = 0.;\n    vec3 p = ro;\n    for(float i=.0; i<steps; i++) {\n    \n        d = map(p);\n        mat = g_mat;  // save global material\n        \n        if(d < 0.0001 || t > 50.) break;\n        \n        t += d;\n        p += rd*d;\n    }\n    \n    return vec2(t, mat);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    flip = step(gl_FragCoord.x,iResolution.x*.5)*2.-1.;\n    //flip = 1.;\n    tt = iTime + 17.;\n    vec3 ro = vec3(uv*mix(5., 5., SIN(.1*tt)),-4.),\n          rd = vec3(0,0,1.),\n          lp = vec3(0., 0., -15);\n\n    vec3 col;\n       \n    float mat = 0.,\n          t   = 0.,\n          d   = 0.;\n \n\n    vec2 e = vec2(0.0035, -0.0035);\n     \n    vec3 c1 = vec3(0.365,0.796,0.722);\n    vec3 c2 = vec3(0.961,0.667,0.161);\n    \n    for(float i = 0.; i < 2.; i++) {\n        float steps = i > 0. ? 50. : 100.;\n        vec2 rm = raymarch(ro, rd, steps);\n        mat = rm.y;\n        \n        vec3 p = ro + rm.x*rd;\n\n        if(rm.x < 50.) {\n        \n            vec3 rcol = vec3(0);\n                    \n            vec3 n = normalize( e.xyy*map(p+e.xyy) + e.yyx*map(p+e.yyx) +\n                                e.yxy*map(p+e.yxy) + e.xxx*map(p+e.xxx));\n            \n            vec3 l = normalize(lp-p);\n            float dif = max(dot(n, l), .0);\n            float spe = pow(max(dot(reflect(-rd, n), -l), .0), 40.);\n            float sss = smoothstep(0., 1., map(p + l * .4)) / .4;\n\n            vec3 tex = fractex(p.xy*.1);\n            vec3 al = mix(c2,  c1 + .4*tex, mat)*.5 + .5*(.5+.5*n);\n\n            rcol += al*mix(1., dif, .8) + .0*spe +  + .4*al*sss;\n           \n            ro = p + n*0.001; \n            if(mat == 0.) {\n                rd = reflect(rd, n);\n            } \n\n\t\t\tif(i == 0.)\n                col = rcol;\n            else  \n                col *= mix(rcol, vec3(1), 1.0 - exp(-.8*i));  // from https://www.shadertoy.com/view/7dsfDl\n\n        } else {\n            \n            if(i == 0.) {\n               col =  mix(c1, c2-.9, (.9-pow(dot(uv, uv), .3)))*.3+.8; // background\n               break;\n            } else {\n                col = texture(iChannel0, rd).rgb*c2;\n            }\n        }   \n    }\n\n\n    col *= mix(.2, 1., (1.5-pow(dot(uv, uv), .5)));\n    col = pow(col, vec3(.6));\n   \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}