{
    "Shader": {
        "info": {
            "date": "1544088455",
            "description": "Rendering some cheap and dirty clouds, add a sound texture to iChannel1 to get some audio-reactive bullshit.",
            "flags": 0,
            "hasliked": 0,
            "id": "llyBDV",
            "likes": 4,
            "name": "AboveTheClouds",
            "published": 3,
            "tags": [
                "ray",
                "marching",
                "volumetrics"
            ],
            "usePreview": 1,
            "username": "felipunkerito",
            "viewed": 1537
        },
        "renderpass": [
            {
                "code": "// Thanks MacSlow, XT95 and iq\n\n//#define PROCEDURAL\n#define WAV texture( iChannel1, vec2( 0.0, 0.3 ) ).x * 0.2\n#define FRE texture( iChannel1, vec2( 0.3, 0.5 ) ).x * 0.4\n\nfloat hash( float n )\n{\n\n    return fract( sin( n ) * 45843.349 );\n    \n}\n\n// iq's\n\n#ifdef PROCEDURAL\n\nfloat noise( in vec3 x )\n{\n    \n    vec3 p = floor( x );\n    vec3 k = fract( x );\n    \n    k *= k * k * ( 3.0 - 2.0 * k );\n    \n    float n = p.x + p.y * 57.0 + p.z * 113.0; \n    \n    float a = hash( n );\n    float b = hash( n + 1.0 );\n    float c = hash( n + 57.0 );\n    float d = hash( n + 58.0 );\n    \n    float e = hash( n + 113.0 );\n    float f = hash( n + 114.0 );\n    float g = hash( n + 170.0 );\n    float h = hash( n + 171.0 );\n    \n    float res = mix( mix( mix ( a, b, k.x ), mix( c, d, k.x ), k.y ),\n                     mix( mix ( e, f, k.x ), mix( g, h, k.x ), k.y ),\n                     k.z\n    \t\t\t\t );\n    \n    return res;\n    \n}\n\n#else\n\nfloat noise( in vec3 x )\n{\n\n\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\n    vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n    vec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n    return mix( rg.x, rg.y, f.z );\n    \n}\n\n#endif\n\n// Here we do the stacking of noise at different octaves.\nfloat fbm( in vec3 p )\n{\n\n    float f = 0.0;\n    f += 0.5000 * noise( p ); p *= 2.02; p -= iTime * 0.05;\n    f += 0.2500 * noise( p ); p *= 2.03; p += iTime * 0.025;\n    f += 0.1250 * noise( p ); p *= 2.01; p -= iTime * 0.01;\n\tf += 0.0625 * noise( p );\n    return f / 0.9375;\n\n}\n\n\nfloat map( vec3 p )\n{\n\n    float f = 3.0 * fbm( p * 1.5 );\n    \n    return 1.0 - ( p.y + f );\n\n}\n\nfloat ray( vec3 ro, vec3 rd, out float den )\n{\n\n    float t = 0.0, maxD = 0.0; den = 0.0; \n    \n    for( int i = 0; i < 64; ++i )\n    {\n    \n        vec3 p = ro + rd * t;\n        den = 0.6 * map( p );\n        maxD = maxD < den ? den : maxD;\n        if( maxD > 1.0 || t > 5.0 ) break;\n        t += 0.02;\n                \n    }\n    \n    den = maxD;\n    return t;\n\n}    \n\nvec3 shad( vec3 ro, vec3 rd )\n{\n\n    float den = 0.0;\n    float t = ray( ro, rd, den );\n\n    vec3 col = mix( vec3( 0.5, 0.1, 0.1 ), vec3( 1.0 - FRE ), den );\n    \n    \n    return col;\n\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n    vec2 mou = iMouse.xy / iResolution.xy;\n    \n    vec3 ro = vec3( 0, -0.5, iTime * 0.05 + FRE * 0.5 );\n    vec3 rd = normalize( vec3( uv, 1.0 ) );\n    \n    float d = 0.0;\n    float den = 0.0;\n    float t = ray( ro, rd, den );\n    \n    \n    vec3 bac = mix( vec3( 0.1, 0.4, 0.6 ) + WAV * 0.2, vec3( 0.31, 0.53, 0.7 ), -uv.y ); \n\tvec3 col = mix( bac, shad( ro, rd ), den );\n    \n    col *= sqrt( col );\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}