{
    "Shader": {
        "info": {
            "date": "1603462585",
            "description": "Just some visual stuff of my random path generator [url]https://www.shadertoy.com/view/wdKczV[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "WdGyzt",
            "likes": 1,
            "name": "Beautified Random Path",
            "published": 3,
            "tags": [
                "procedural",
                "2d"
            ],
            "usePreview": 0,
            "username": "Arseny",
            "viewed": 328
        },
        "renderpass": [
            {
                "code": "#define pi (3.14159265359)\n\n#define gridScale (10.) // must be integer\n\nmat2 Rot(float a) {\n    a *= pi * 2.;\n    float s=sin(a), c=cos(a);\n    return mat2(c, s, -s, c);\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n    p += vec2(523.124, 244.155);\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat f(float x){\n    return 16. * pow(x - 0.5, 5.) + 0.5;\n}\n\n// must be idb.x <= idp.x <= ide.x && idb.y <= idp.y <= ide.y\nfloat IsOnRandomPath(vec2 idp, vec2 idb, vec2 ide, float seed){\n    if (idp.x < idb.x || idp.y < idb.y || idp.x > ide.x || idp.y > ide.y) return 0.;\n    vec2 sz = ide - idb;\n    vec2 id = idp - idb;\n    float need = id.x + id.y;\n    float l = 0.;\n    float r = sz.x + sz.y + 1.;\n    vec2 lb = vec2(0.), ur = sz;\n    vec2 as = vec2(0.);\n    while (r - l > 1.){\n        float m = floor((r + l) / 2.);\n        float miny = max(lb.y, m - ur.x), maxy = min(m - lb.x, ur.y);\n        float rnd = miny + floor((maxy - miny + 0.999) * f(hash12(vec2(m, seed))));\n        if (need < m){\n            r = m;\n            ur = vec2(m - rnd, rnd);\n            //ur = vec2(m - rnd, rnd);\n        } else {\n            l = m;\n            lb = vec2(m - rnd, rnd);\n        }\n    }\n    return (lb == id) ? 1. : 0.;\n}\n\nvec2 hexGrid(vec2 uv){\n    vec2 cid = floor(uv * gridScale - 0.5) + 0.5;\n   \tvec2 lcuv = uv * gridScale - cid;\n    //lcuv = vec2(min(lcuv.x, 1. - lcuv.x), min(lcuv.y, 1. - lcuv.y));\n    vec2 slcuv = vec2(max(lcuv.x, lcuv.y), min(lcuv.x, lcuv.y));\n    vec2 n = Rot(1. / 16.) * vec2(1., 0.);\n    vec2 add = vec2(0.);\n    add -= vec2(0.5) * step(dot(slcuv, n) - dot(vec2(0.5, 0.), n), 0.);\n    slcuv = vec2(1. - slcuv.y, 1. - slcuv.x);\n    add += vec2(0.5) * step(dot(slcuv, n) - dot(vec2(0.5, 0.), n), 0.);\n\tif (length(add) > 0.) return (cid + add);\n    return step(lcuv.x, lcuv.y) * (cid + vec2(-0.5, 0.5)) + \n        step(lcuv.y, lcuv.x) * (cid + vec2(0.5, -0.5));\n    /*if (lcuv.y > lcuv.x){\n        return (cid + vec2(-0.5, 0.5)) / 10.;\n    }\n    return (cid + vec2(0.5, -0.5)) / 10.;*/\n}\n\nvec4 CellSegment(vec2 id, vec2 idb, vec2 ide, float seed){\n    vec2 beg = vec2(0.);\n    beg += IsOnRandomPath(id + vec2(-1., 0.), idb, ide, seed) * vec2(-1., 0.) / 2.;\n    beg += IsOnRandomPath(id + vec2(0., -1.), idb, ide, seed) * vec2(0., -1.) / 2.;\n    vec2 end = vec2(0.);\n    end += IsOnRandomPath(id + vec2(1., 0.), idb, ide, seed) * vec2(1., 0.) / 2.;\n    end += IsOnRandomPath(id + vec2(0., 1.), idb, ide, seed) * vec2(0., 1.) / 2.;\n    return vec4(beg, end) / gridScale;\n}\n\nfloat beautifier(vec2 uv, vec2 idb, vec2 ide, float seed){\n    vec2 id = hexGrid(uv);\n    if (IsOnRandomPath(id, idb, ide, seed) < 0.5){\n        return 0.;\n    }\n    /*vec2 beg = vec2(0.);\n    beg += IsOnRandomPath(id + vec2(-1., 0.), idb, ide, seed) * vec2(-1., 0.) / 2.;\n    beg += IsOnRandomPath(id + vec2(0., -1.), idb, ide, seed) * vec2(0., -1.) / 2.;\n    vec2 end = vec2(0.);\n    end += IsOnRandomPath(id + vec2(1., 0.), idb, ide, seed) * vec2(1., 0.) / 2.;\n    end += IsOnRandomPath(id + vec2(0., 1.), idb, ide, seed) * vec2(0., 1.) / 2.;*/\n    vec4 s = CellSegment(id, idb, ide, seed);\n    //return vec3(beg, 0.);\n    id += vec2(0.5);\n    id /= gridScale;\n    //beg /= gridScale;\n    //end /= gridScale;\n    return (1. - min(sdSegment(uv, id + s.xy, id + s.zw) * 30., 1.));\n    \n    return 1.;\n}\n\nfloat pathSegment(vec2 uv, vec2 idb, vec2 ide, float seed, float beg, float end){\n    vec2 idp = hexGrid(uv);\n    vec2 sz = ide - idb;\n    vec2 id = idp - idb;\n    float d = (uv.x + uv.y) * gridScale - (idb.x + idb.y) - 1.;\n    if (beg * (sz.x + sz.y) < d && d < end * (sz.x + sz.y + 2.)){\n        return beautifier(uv, idb, ide, seed);\n    }\n    /*if (floor(beg * (sz.x + sz.y) - 0.0001) < id.x + id.y && id.x + id.y < ceil(end * (sz.x + sz.y) + 0.0001)){\n        return beautifier(uv, idb, ide, seed);\n    }*/\n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    uv *= 3.;\n    \n    float T = iTime / 4.;\n    \n    uv += vec2(T, T / 2.);\n    \n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    //fragColor = vec4(IsOnRandomPath(id, vec2(-8., -5.), vec2(7., 6.)));\n    float k = 1.8;\n    vec2 id = floor(uv / k) * k;\n    vec2 lv = uv - id;\n    //float d = beautifier(lv, vec2(0., 0.), vec2(7., 6.), floor(T + hash12(id)));\n    float d = pathSegment(lv, vec2(0., 0.), vec2(15., 13.), \n                          floor(T + hash12(id)) + hash12(id), \n                          (fract(T + hash12(id)) - 0.5) * 2., \n                          fract(T + hash12(id)) * 2.);\n    //d = max(d, beautifier(uv, vec2(-8., -5.), vec2(7., 6.), floor(iTime) + 0.24));\n    //fragColor = d * vec4(0., 1., 0., 0.);\n    fragColor = mix(vec4(1., 0.7, 0., 0.), vec4(0., .5, 1., 0.), d);d * vec4(0., 1., 0., 0.);\n    //fragColor.r = 1.;\n    //fragColor = min(ll.x, ll.y) < 0.005 ? vec4(0., 1., 0., 0.) : fragColor ;\n\treturn;\n    // Output to screen\n    fragColor = vec4(id / 10., 0.,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}