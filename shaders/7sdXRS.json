{
    "Shader": {
        "info": {
            "date": "1633673536",
            "description": "I wanted to try out [url=https://www.shadertoy.com/view/Wt3fzB]TinyTexel's Panini Projection[/url] and ended up here.\nThe panini thing works like a charm!\nMouse Y to adjust Panini Factor, Mouse X for FOV.",
            "flags": 0,
            "hasliked": 0,
            "id": "7sdXRS",
            "likes": 6,
            "name": "weird world, blue snake",
            "published": 3,
            "tags": [
                "panini"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 300
        },
        "renderpass": [
            {
                "code": "#define RES    (iResolution.xy)\n#define MINRES (min(RES.x, RES.y))\n\nconst vec3 UP  = vec3(0.0, 1.0, 0.0);\nconst vec3 ONE = vec3(1.0, 1.0, 1.0);\nconst float Pi = 3.14159265359;\n\nfloat gTime    = 0.0;\nvec3  gPosCam  = vec3(0.0, 4.0, -2.0);\nvec3  gPosSph1 = UP;\nfloat gSizSph1 = 1.0;\n\nconst float gZoom = 0.8;\n\nfloat Pow2(float x) {return x*x;}\n\nvec3 posSph1(float time, float noiseAmt) {\n    \n    vec3 noise = texture(iChannel1, vec2(time * 0.051, time * 0.05), 0.0).rgb;\n    \n    return vec3(cos(time * 1.3), 0.0, sin(time * 0.7)) * 9.0 + UP + noise * noiseAmt;\n}\n\nvoid composeScene(float time) {\n    gTime    = time;\n    gPosSph1 = posSph1(gTime, 0.0);\n    \n    gPosCam  = posSph1(gTime + 0.0, 0.0);\n    gPosCam.xz  += normalize(gPosCam).xz * 6.0;\n    gPosCam  *= 1.0;\n    gPosCam  += UP * 3.0;\n}\n\nvec3 sky(in vec3 rd) {\n    vec3 ret = rd * 0.5 + 0.5;\n    ret.rg *= sin(rd.y * 20.0) * 0.2 + 0.8;\n    ret.gb *= sin(atan(rd.z, rd.x) * 10.0) * 0.3 + 0.7;\n    ret  = ONE * length(ret);\n    return ret;\n}\n\nvec3 shootRay(in vec3 ro, in vec3 rd) {\n    if (rd.y > -0.001) {\n        return sky(rd);\n    }\n    \n    vec2 planePt2  = -vec2(rd.xz * ro.y / rd.y) + ro.xz;\n    vec3 planePt   = vec3(planePt2.x, 0.0, planePt2.y);\n    float planeDst = length(planePt.xz);\n    float planeAng = atan(planePt.z, planePt.x);\n    float camDist  = length(planePt2 - ro.xz);\n    float blur     = smoothstep(0.0, 80.0, camDist);\n\n    const float txLim = 8.8;\n    float pa = planeAng;\n    float pd = planeDst;\n    if (pd < txLim) {\n        pa += Pow2((pd - txLim) * 0.2);\n    }\n    float planeCol = smoothstep(-blur, blur, sin(pa * 10.0) * sin(log(pd) * 4.0)) * (0.4 * (1.7 - blur)) + 0.6;\n    \n    \n    planeCol *= smoothstep(3.0, 5.0, camDist) * 0.4 + 0.6;\n    \n    vec3 ret = vec3(planeCol);\n    \n    ret = mix(ret, sky(rd), smoothstep(20.0, 1160.0, planeDst));\n    \n    vec2 planePt3  = -vec2(rd.xz * (ro.y - 1.0) / rd.y) + ro.xz;\n    \n    float shadwSum = 0.0;\n    float snakeSum = 0.0;\n    for (float dt = -6.0; dt < 1.0; dt += 0.02) {\n        float f = smoothstep(-6.0, 0.0, dt);\n        vec2 pos = posSph1(gTime + dt, 1.0 - f).xz;\n        float rad = f * gSizSph1;\n        rad *= sin(rad * 40.0 + gTime) * 0.1 + 0.9;\n        snakeSum += smoothstep(0.5, 0.1, abs(length(planePt3 - pos) - rad));\n        shadwSum += smoothstep(rad, 0.0, abs(length(planePt2 - pos) - rad * 0.5));\n    }\n    \n    ret *= 0.7 + 0.3 * smoothstep(3.0, 0.0, shadwSum);\n    ret = mix(ret, vec3(0.0, 0.0, 0.3), 0.9 * smoothstep(0.0, 11.0, snakeSum));\n    \n    return ret;\n}\n\n\n\n// From TinyTexel\n// https://www.shadertoy.com/user/TinyTexel\n// https://www.shadertoy.com/view/Wt3fzB\n// tc ∈ [-1,1]² | fov ∈ [0, π) | d ∈ [0,1]\nvec3 PaniniProjection(vec2 tc, float fov, float d)\n{\n    float d2 = d*d;\n\n    {\n        float fo = Pi / 2.0 - fov * 0.5;\n\n        float f = cos(fo)/sin(fo) * 2.0;\n        float f2 = f*f;\n\n        float b = (sqrt(max(0.0, Pow2(d+d2)*(f2+f2*f2))) - (d*f+f)) / (d2+d2*f2-1.0);\n\n        tc *= b;\n    }\n    \n    /* http://tksharpless.net/vedutismo/Pannini/panini.pdf */\n    float h = tc.x;\n    float v = tc.y;\n    \n    float h2 = h*h;\n    \n    float k = h2/Pow2(d+1.0);\n    float k2 = k*k;\n    \n    float discr = max(0.0, k2*d2 - (k+1.0)*(k*d2-1.0));\n    \n    float cosPhi = (-k*d+sqrt(discr))/(k+1.0);\n    float S = (d+1.0)/(d+cosPhi);\n    float tanTheta = v/S;\n    \n    float sinPhi = sqrt(max(0.0, 1.0-Pow2(cosPhi)));\n    if(tc.x < 0.0) sinPhi *= -1.0;\n    \n    float s = inversesqrt(1.0+Pow2(tanTheta));\n    \n    return vec3(sinPhi, tanTheta, cosPhi) * s;\n}\n\nvoid mainImage(out vec4 RGBA, in vec2 XY)\n{\n    composeScene(iTime * 0.6);\n\n    float pixelSize = 1.0 / MINRES / gZoom;\n    vec2  xy        = (XY - (RES * 0.5)) * pixelSize * 2.0;\n    \n    vec3 camPt      = gPosCam;\n    vec3 lukPt      = gPosSph1;\n    vec3 cam2luk    = lukPt - camPt;\n    vec3 camFw      = normalize(cam2luk);\n    vec3 camRt      = normalize(cross(camFw, UP));\n    vec3 camUp      = normalize(cross(camRt, camFw));\n    mat3 wldFrmCam  = mat3(camRt, camUp, camFw);\n    \n    // Ray direction in camera space\n    vec2 ms = vec2(0.5);\n    if (length(iMouse.xy) > 50.0) {\n        ms = iMouse.xy / RES;\n    }\n    float paniniFOV = mix(0.2, Pi/4.0, ms.x);\n    float paniniD   = mix(0.0, 2.0, ms.y);\n    vec3 rayDirCam  = PaniniProjection(xy, paniniFOV, paniniD);\n    \n    // Ray direction in world space\n    vec3 rayDir     = wldFrmCam * rayDirCam;\n    \n    vec3 rgb        = shootRay(camPt, rayDir);\n        \n    RGBA = vec4(rgb, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}