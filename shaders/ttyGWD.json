{
    "Shader": {
        "info": {
            "date": "1578940930",
            "description": "golfing https://shadertoy.com/view/wly3DW  ( 909 chars )\n",
            "flags": 32,
            "hasliked": 0,
            "id": "ttyGWD",
            "likes": 9,
            "name": "pseudo-Tron screensaver ( 399c )",
            "published": 3,
            "tags": [
                "tron",
                "particles",
                "short",
                "golf",
                "3tweets"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 625
        },
        "renderpass": [
            {
                "code": "// golfing https://shadertoy.com/view/wly3DW  ( 909 chars )\nvoid mainImage(out vec4 O, vec2 U) { mi }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 O, vec2 U) { mi }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// +6: wow: a windows Angle compatibility bug forbids using (cond)?: for iFrame==0 || O.w < 0.\n//                                            cf: https://www.shadertoy.com/view/wtV3DW\n\n#define T(U) texture( iChannel0, U / H.xy )                    //\n#define mi                                                      \\\n    vec4 H = iResolution.xyzz;   int t = iFrame;                \\\n    O = T(U);                                                   \\\n    if (U.y < 1.)  /* move particles */                         \\\n        if ( t < 1 || O.w < 0. )                                \\\n            H = fract( sin( (iTime+U.x) * H ) *4e4 ),           \\\n            O.z = t < 1 ? O = H, H.z*4.                         \\\n                        : mod( O + sign(H-.5), 4.).z,           \\\n            O.w = fract(H.z*4.)*60. ;                           \\\n        else O[ t = int(O.z)%2 ] = fract( O + sign(O.z-2.) * H.y/2e2/H )[t], \\\n            O.w-- ;                                             \\\n    else           /* draw trajectories */                      \\\n        for( H--, O *= .99; H.z++ < 30.; )                      \\\n            O = mix( O, .6 + .6 * cos( H.z + vec4(0,23,21,0) ), \\\n                     clamp( H.y/2e2 - length( U - (H*T(H.zw)).xy )/2., 0.,1. ) ); /*\n\n\n\n\n\n// --- 416 chars\n\n#define T(U) texture( iChannel0, U/H.xy )                    //\n#define mainImage(O,U)                                        \\\n    vec3 h, H = iResolution;                                  \\\n    float i=.5, r = H.y/2e2; int s;                           \\\n    O = T(U);                                                 \\\n    if (U.y < 1.)  /* move particles * /                       \\\n        if ( iFrame==0 || O.w < 0. )                          \\\n            h = fract( sin( (iTime+U.x) * H ) *4e4 ),         \\\n            i = h.z*4.,                                       \\\n            O.z = iFrame==0 ? O.xy = h.xy, i                  \\\n                            : mod( O.z + sign(i-2.), 4.),     \\\n            O.w = fract(i)*60. ;                              \\\n        else O[ s= int(O.z)%2 ] = fract( O[s] + sign(O.z-2.) * r/H[s] ), \\\n            O.w-- ;                                           \\\n    else           /* draw trajectories * /                    \\\n        for( O *= .99; i++ < 30.; )                           \\\n            O = mix( O, .6 + .6 * cos( i + vec4(0,23,21,0) ), \\\n                     clamp( r - length( U - H.xy* T(vec2(i,0)).xy )/2., 0.,1. ) ) /*\n\n\n\n\n\n// --- 452 chars \n\n#define T texture(iChannel0//\n#define mainImage(O,U)                                        \\\n    vec2 R = iResolution.xy;                                  \\\n    float i=.5, r = R.y/2e2; int s; vec3 h;                   \\\n    O = T,U/R);                                               \\\n    if (U.y<1.)  /* move particles * /                         \\\n        if ( iFrame==0 || O.w < 0. )                          \\\n            h = fract( sin( vec2(iTime,U)* mat3x2(12.1,7.7,  29.3,46.1,  13.3,24.6))*4e4), \\\n            i = h.z*4.,                                       \\\n            O.z = iFrame==0 ? O.xy = h.xy, i                  \\\n                            : mod( O.z + sign(i-2.), 4.),     \\\n            O.w = fract(i)*60. ;                              \\\n         else O[ s= int(O.z)%2 ] = fract( O[s] + sign(O.z-2.) * r/R[s] ), \\\n            O.w-- ;                                           \\\n    else         /* draw trajectories * /                      \\\n        for( O *= .99; i++ < 30.; )                           \\\n            O = mix( O, .6 + .6 * cos( i + vec4(0,23,21,0) ), \\\n                     clamp( r - length( U - R* T,vec2(i,0)/R).xy )/2., 0.,1. ) ) /*\n\n\n\n\n\n// --- 477 chars \n\n#define mainImage(O,U)                                        \\\n    vec2 R = iResolution.xy;                                  \\\n    float i=.5; int s; vec3 h;                                \\\n    O = texture(iChannel0,U/R);                               \\\n    if (U.y<1.)  /* move particles * /                         \\\n        iFrame==0 || O.w < 0.                                 \\\n          ? h = fract( sin( vec2(iTime,U)* mat3x2(127.1,74.7,  269.5,246.1,  113.5,124.6))*4e5), \\\n            i = floor(h.z*=4.),                               \\\n            O.z = iFrame==0 ? O.xy = h.xy, i                  \\\n                            : mod( O.z + sign(i-1.5), 4.),    \\\n            O.w = fract(h.z)*60.                              \\\n         :( O[ s= int(O.z)%2 ] = fract(O.xy + sign(O.z-1.5) * R.y/R/2e2 ) [s], \\\n            O.w-- );                                          \\\n    else         /* draw trajectories * /                      \\\n        for( O *= .99; i++ < 30.; )                           \\\n            O = mix( O, .6 + .6 * cos( i + vec4(0,23,21,0) ), \\\n                     clamp( R.y/2e2 - length( U - R*texture(iChannel0,vec2(i,0)/R).xy )/2., 0.,1. ) ) /*\n\n/**/",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}