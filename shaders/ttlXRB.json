{
    "Shader": {
        "info": {
            "date": "1563445920",
            "description": "Simulate waves on the texture.\nClick on the screen to generate waves.",
            "flags": 32,
            "hasliked": 0,
            "id": "ttlXRB",
            "likes": 2,
            "name": "Texture waves",
            "published": 3,
            "tags": [
                "2d",
                "wave"
            ],
            "usePreview": 0,
            "username": "Eseris",
            "viewed": 457
        },
        "renderpass": [
            {
                "code": "// The buffer A is used to compute a height map. An acceleration is applied on texels using\n// the height difference from the neighbours\n// The Image uses this generated texture to compute an offset on the texture coordinates\n\nconst vec2 kern[] = vec2[](\n    vec2(1,0), vec2(-1,0), vec2(0,1), vec2(0,-1)\n);\nconst int kernSize = 4;\n\n\nvec3 getState(vec2 p) {\n    return texelFetch(iChannel0, ivec2(p), 0).xyz;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float pos = getState(fragCoord).x;\n    \n    // compute an offset from the gradient of the height map\n    vec2 offset = vec2(0);\n    for(int i = 0; i < kernSize; ++i)\n        offset += (getState(fragCoord + kern[i]).x - pos) * kern[i];\n    \n    vec2 uv = fragCoord / iResolution.yy;\n    vec3 col = texture(iChannel1, uv + 3. * offset).xyz;\n    \n    fragColor = vec4(pow(col, vec3(1./2.2)),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define DIAG_NEIGHBOURS\n\nconst float accelCoef = 30.;\nconst float velMax = 10.;\nconst float posDamping = .98;\n\nconst vec2 kern[] = vec2[](\n    vec2(0,0),\n    vec2(1,0), vec2(-1,0), vec2(0,1), vec2(0,-1),\n    vec2(1,1), vec2(-1,1), vec2(1,-1), vec2(-1,-1)\n);\n\n#ifdef DIAG_NEIGHBOURS\nconst int kernSize = 9;\nconst float weights[] = float[](-6.828,  1., 1., 1., 1., .707, .707, .707, .707);\n#else\nconst int kernSize = 5;\nconst float weights[] = float[](-4.,  1., 1., 1., 1.);\n#endif\n\nvec3 getState(vec2 p) {\n    //return texelFetch(iChannel0, ivec2(p), 0).xyz;\n    return texture(iChannel0, p / iResolution.xy).xyz;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 state = getState(fragCoord);\n    float pos = state.x, vel = state.y;\n    float ac = accelCoef * accelCoef * iTimeDelta;\n    \n    // acceleration induced by the neighbours\n    for(int i = 0; i < kernSize; ++i) {\n        float nPos = getState(fragCoord + 2.5 * kern[i]).x;\n        vel += ac * weights[i] * nPos;\n        //vel += accelCoef * accelCoef * iTimeDelta * (nPos - pos);\n    }\n    \n    vel = clamp(vel, -velMax, velMax);\n    //vel *= .97;\n    \n    // apply velocity to the position\n    pos = clamp(pos + iTimeDelta * vel, -1., 1.);\n    pos *= posDamping; // damping\n    \n    if(iMouse.z > 0.) {\n        vec2 uv = (fragCoord - iMouse.xy) / iResolution.yy;\n        pos = mix(pos, sin(10. * iTime), smoothstep(.0, .1, .06 - length(uv)));\n    }\n    \n    fragColor = vec4(pos, vel, 0, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}