{
    "Shader": {
        "info": {
            "date": "1626256308",
            "description": "Apple logo uses cubic bezier. This approximates it to a high fidelity with only circles + smoothing. Maybe it's better to just use the cubic beziers?\n\nSee comment for details. Original sizes at https://www.shadertoy.com/view/NtsXRM",
            "flags": 0,
            "hasliked": 0,
            "id": "ftXSzX",
            "likes": 6,
            "name": "Apple Logo SDF",
            "published": 3,
            "tags": [
                "raytracing",
                "sdf",
                "logo",
                "apple"
            ],
            "usePreview": 0,
            "username": "chenglou",
            "viewed": 526
        },
        "renderpass": [
            {
                "code": "/*\nThe circles over the Apple logo are manually approximated in a Figma file:\nhttps://www.figma.com/file/ywGtT2aMhG04cuvz2MKF0d/Apple-soft-3D-Community?node-id=0%3A1\nThen converted from Figma's coordinate system, where:\n- y increases downward\n- sizes aren't normalized\n- origin of the circles are on the upper left\n- circles are specified using width instead of radius\n*/\n\nfloat sdCircle( vec2 p, float r ) { return length(p) - r; }\n\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); \n}\n\nfloat opExtrussion( in vec3 p, in float sdf, in float h ) {\n    vec2 w = vec2( sdf, abs(p.z) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat sdApple(vec2 coord, float ra) {\n    float leaf1 = sdCircle(coord - vec2(-0.0161, 0.9658) * ra, 0.4447 * ra);\n    float leaf2 = sdCircle(coord - vec2(0.4628, 0.5473) * ra, 0.4567 * ra);\n\n    float shoulderLeft = sdCircle(coord - vec2(-0.3340, 0.0644) * ra, 0.4608 * ra);\n    float shoulderRight = sdCircle(coord - vec2(0.3964, 0.0382) * ra, 0.4909 * ra);\n\n    float bodyLeft = sdCircle(coord - vec2(-0.1227, -0.1831) * ra, 1.006 * ra);\n    float bodyCenter = sdCircle(coord - vec2(0.0141, -0.4889) * ra, 0.9256 * ra);\n    float bodyRight = sdCircle(coord - vec2(0.3662, -0.0483) * ra, 1.2052 * ra);\n    float bodyShoulderLeft = sdCircle(coord - vec2(-0.1791, -0.0624) * ra, 0.6640 * ra);\n\n    float bite = sdCircle(coord - vec2(1.0080, -0.0543) * ra, 0.4427 * ra);\n    float bottom = sdCircle(coord - vec2(0.0382, -1.4145) * ra, 0.4950 * ra);\n\n    float delimiterLeft = sdCircle(coord - vec2(-0.6398390342052314, 0.0201) * ra, 0.3320 * ra);\n\n    // assemble!\n    float leaf = opIntersection(leaf1, leaf2);\n    float tinyPieceLeft = opIntersection(delimiterLeft, bodyShoulderLeft) + 0.002 * ra; // random constant\n    float lowerPart = opIntersection(bodyLeft, opIntersection(bodyCenter, bodyRight));\n    float body;\n    body = opUnion(shoulderLeft, shoulderRight);\n    body = opSmoothUnion(body, lowerPart, 0.121 * ra); // random constant\n    body = opUnion(body, tinyPieceLeft);\n    body = opUnion(body, leaf);\n    body = opSubtraction(bite, body);\n    body = opSmoothSubtraction(bottom, body, 0.189 * ra); // random constant\n\n    return body;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 mouse = (2. * iMouse.xy - iResolution.xy) / iResolution.y;\n\n    float body = sdApple(coord, .5);\n    \n    vec3 col = vec3(1.0) - sign(body) * vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-3.0 * abs(body));\n    col *= 0.8 + 0.2 * cos(150.0 * body);\n    col = mix(col, vec3(1.0), 1.0 - smoothstep(0.0,0.01, abs(body)));\n    \n    if(iMouse.z > 0.001) {\n        vec2 m = mouse; vec2 p = coord;\n        float d = sdApple(m, .5);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}