{
    "Shader": {
        "info": {
            "date": "1625065148",
            "description": "An evolving mandelbrot",
            "flags": 0,
            "hasliked": 0,
            "id": "NtsSRn",
            "likes": 3,
            "name": "Evolving mandelbrot",
            "published": 3,
            "tags": [
                "mandelbrot",
                "complex",
                "evolving"
            ],
            "usePreview": 0,
            "username": "Swiiz",
            "viewed": 199
        },
        "renderpass": [
            {
                "code": "float carg(vec2 Z)   {return   atan( (Z).y, (Z).x ) ;}\nvec2 CS(float a) {return vec2( cos(a), sin(a) ); }\nvec2 cmul(vec2 A,vec2 B) {return ( mat2( A, -(A).y, (A).x ) * (B) ) ;}  // by deMoivre formula\nvec2 pol2cart(vec2 U) { return (U).x * CS( (U).y ); }\nvec2 cpow(vec2 Z, float v) {return   pol2cart( vec2( pow(length(Z),v) , (v) * carg(Z) ) ) ;}\n\nconst vec4 colorPalette = -vec4(0,23,21,0);\nconst vec4 finalColor = vec4(.0);\nconst int hueModulus = 30;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float zoom = 5.;\n    int recursion = 50, i = 0;\n    vec2 c = (fragCoord / iResolution.x - .5) * -zoom + -iMouse.xy/iResolution.xy, z = c;\n    for(; i <= recursion && length(z) <= 10. ; i++ ) z = cpow(z, iTime / 5. + 1.) + c;\n    fragColor =  i - 1 == recursion ? finalColor : .6 + .6 * cos( 6.3 *  (float((i - 1) % hueModulus) / float(hueModulus)) + colorPalette);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}