{
    "Shader": {
        "info": {
            "date": "1727966089",
            "description": "originals https://www.shadertoy.com/view/mtyGWy",
            "flags": 0,
            "hasliked": 0,
            "id": "MXsfzn",
            "likes": 6,
            "name": "color spheric Shader Art Coding",
            "published": 3,
            "tags": [
                "shader",
                "art",
                "coding"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 69
        },
        "renderpass": [
            {
                "code": "\n//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n#define Q(p) p *= r(round(atan(p.x, p.y) * 4.) / 4.)\n#define r(a) mat2(cos(a + asin(vec4(0,1,-1,0))))\n\nfloat parabola( float x, float k ){\n    return pow( 4.0f*x*(1.0f-x), k );\n}\nfloat distortion = 0.01;      // the bias of the barrel distortion\nconst float iterations = 20.0;  // how many samples to use for edge blur\nfloat strength = 0.15;      // how much edge blur is applied (to obscure the r, g, b separation)\nfloat separation = 0.65;      // how much to separate the r, g and b\nfloat powerRainbow = 1.0; // powerRainbow = [0.0, 1.0] \n\nvec4 Aberrate(sampler2D source, vec2 texuv, vec2 squareUv, float amount) {\n    return texture(source, 0.5 + texuv / sqrt(1.0 + amount * dot(texuv, squareUv)));\n}\n\n\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 12.0 - c;\n\n\treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0.0,\n\t\toc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0.0,\n\t\toc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0.0,\n\t\t0.3, 0.2, 0.2, 1.2);\n}\n\nvec3 rotate(vec3 v, vec3 axis, float angle)\n{\n\tmat4 m = rotationMatrix(axis, angle);\n\treturn (m * vec4(v, 1.0)).xyz;\n}\n\n#define time iTime\n#define PI 3.141592653\n#define TWO_PI 2.0*PI\n#define t time*0.3\n//https://www.shadertoy.com/view/mtyGWy\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n   uv*=fract(iTime*0.2);    \n    vec2 uv2 = uv;\n\tuv2 *= 5.;\n\t\n    \n\tvec3 c = vec3(0.);\n\t\t\n\tfloat e = 0.0;\n\tfor (float i1=0.0;i1<=PI;i1+=0.3) {\n\t\tfloat mindist = 1e10;\t\t\n\t\tfor (float i2=0.0;i2<=TWO_PI;i2+=0.3) {\n\t\t\tfloat x = sin(i1)*cos(i2);\n\t\t\tfloat y = sin(i1)*sin(i2);\n\t\t\tfloat z = cos(i1);\n\t\t\tvec3 p = vec3(.5) - vec3(x,y,z);\n\t\t\t\n\t\t\tp = rotate(p, vec3(1., 1., 1.), TWO_PI*sin(t));\n\t\t\t\t\t\n\t\t\tfloat dist = distance(p, vec3(uv2.x,uv2.y,0.));\t\t\t\t\n\t\t\tmindist = min(mindist,dist);\n\t\t\t\n\t\t\t//e += 0.001/abs(p.x+dist);\n\t\t\t//e += 0.001/abs(p.y+dist);\n\t\t\te += .003/abs(p.z+mindist);\n\t\t\t//c += normalize(p);\n\t\t}\n\t\t\n\t\t\n\t}\n\t\n  Q(uv.xy);\n  uv+=step(uv, uv);\n    for (float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n   Q(uv.xy);\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n\n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d+e*0.1;\n    }\n        \n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}