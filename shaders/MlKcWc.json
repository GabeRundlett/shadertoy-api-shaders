{
    "Shader": {
        "info": {
            "date": "1538592204",
            "description": "Basic Camera Tutorial from this video https://www.youtube.com/watch?v=2SaGgTlkhSs",
            "flags": 0,
            "hasliked": 0,
            "id": "MlKcWc",
            "likes": 0,
            "name": "Basic Camera",
            "published": 3,
            "tags": [
                "basic",
                "3dgfs"
            ],
            "usePreview": 0,
            "username": "birkal",
            "viewed": 510
        },
        "renderpass": [
            {
                "code": "vec2 mapRange(vec2 v, vec2 ab, vec2 cd)\n{\n    return (v-ab.x)/(ab.y-ab.x) * (cd.y-cd.x)+cd.x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = mapRange(uv, vec2(0.,1.), vec2(-1.,1.));\n\n    // fix streching by square to rect\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec4 m = iMouse / iResolution.xxxx;\n    vec3 ro = vec3(0.,0.,1.);\n    // focus of the camera, where the camera is looking \"at\"\n    //vec3 at = vec3(uv-m.xy,0.);\n    vec2 span = mapRange(m.xy, vec2(0.,.5), vec2(-2.,2.));\n    vec3 at = vec3(span,0.);\n    //vec3 at = vec3(-2.*m.x,2.*m.y,0.);\n    vec3 cam_z = normalize(at - ro);\n    vec3 y_axis = vec3(0.,1.,0.);\n    vec3 cam_x = normalize(cross(y_axis, cam_z));\n    vec3 cam_y = cross(cam_z, cam_x);\n    \n    // normalize cause direction\n    vec3 rd = normalize(uv.x * cam_x + uv.y * cam_y + sqrt(3.) * cam_z);\n\n    // Output to screen\n    fragColor = vec4(texture(iChannel0, rd).rgb, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}