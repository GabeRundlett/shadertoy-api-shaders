{
    "Shader": {
        "info": {
            "date": "1568138561",
            "description": "Trying out the Truchet effect with hexagonal tiling.\nInspired by the latest video from the art of code ;)",
            "flags": 0,
            "hasliked": 0,
            "id": "tdt3zM",
            "likes": 5,
            "name": "Hexagonal Truchet Test",
            "published": 3,
            "tags": [
                "truchet"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 433
        },
        "renderpass": [
            {
                "code": "// smin by iq\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\n\nfloat hash21(vec2 p) {\n\tp = fract(p*vec2(234.34, 435.345));\n    p += dot(p, p+34.23);\n    return fract(p.x*p.y);\n}\n\nfloat hexDist(vec2 p) {\n\tp = abs(p);\n    \n    float c = dot(p, normalize(vec2(1,1.73)));\n    c = max(c, p.x);\n    \n    return c;\n}\n\nvec4 hexCoord(vec2 uv)\n{\n    vec2 r = vec2(1.,1.73);\n    vec2 h = r * .5;\n    vec2 a = mod(uv, r) - h;\n    vec2 b = mod(uv - h, r) - h;\n    \n    vec2 gv;\n    if(length(a) < length(b))\n    {\n        gv = a;\n    }\n    else\n    {\n        gv = b;\n    }\n    \n    vec2 id = uv - gv;\n    \n    return vec4(gv, id);\n}\n\nvec2 upperLedgeCenter = vec2(.5, 0.866);\nvec2 rightLedge = vec2(1., 0.);\nvec2 upperCorner = vec2(0., 1.1547);\nvec2 rightCorner = vec2(1., .57735);\nfloat edgeSize = 1.1547;\nfloat halfEdgeSize = 0.57735;\n\nfloat tiling(vec2 p)\n{\n    \n    vec4 hexG = hexCoord(p);\n    vec2 hexId = ceil(abs(hexG.zw) + 1.);\n    \n    float flip = step(hash21(hexId), .5) * 2. - 1.;\n    \n    vec2 hxuv = hexG.xy * 2.;\n    \n    hxuv.y *= flip;\n    \n    float lineWidth = .05;// fragCoord.y / iResolution.y * .05 + .05;\n\n    float hexType = mod(hash21(hexId * 2.), 2.);\n    float crest = 0.;\n    \n    if(hexType < .5)\n    {\n        float path = min(length(hxuv - rightCorner ), length(hxuv + rightCorner));\n        path = abs(halfEdgeSize - path);\n        float diagLine = hxuv.x / upperLedgeCenter.x + hxuv.y / upperLedgeCenter.y;\n        diagLine = abs(diagLine) / 2.22; // Don't know where this 2.22 factor comes from.\n        path = smin(path, diagLine, .25);\n\n        crest = path;\n    }\n    else\n    {\n        float circles = length(hxuv - upperCorner);\n        circles = smin(circles, length(hxuv + rightCorner), .25);\n        circles = smin(circles, length(hxuv - vec2(rightCorner.x, -rightCorner.y)), .25);\n\n        circles = abs(halfEdgeSize - circles);\n        crest = circles;\n    }\n    \n    crest *= 2.;\n    //crest = crest * crest + sin(p.y + iTime * 1.4) * .1;\n    \n    \n\tif(length(hexDist(hexG.xy)) > .49 && iMouse.z > 0.)\n    {\n\t\tcrest = 1.;\n    }\n    \n    return crest;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float zoom = .25;\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    uv+= iTime * .05;\n\tvec3 col = vec3(0.);\n    \n    uv *= 1. / zoom;\n    \n    float crest = tiling(uv);\n    \n    float delta = fwidth(crest);\n    float waveFreq = .5;\n    crest += sin(uv.y * waveFreq- uv.x * waveFreq- iTime * .3);\n    \n    col = mix(vec3(.7,.7,.2), vec3(.01,.01,.01), 1. - crest * crest * .3);\n    \n    \n    fragColor = vec4(col,0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}