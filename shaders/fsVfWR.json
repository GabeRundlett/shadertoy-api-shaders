{
    "Shader": {
        "info": {
            "date": "1657989395",
            "description": "images you can hear\n\nclick around to play with parameters",
            "flags": 32,
            "hasliked": 0,
            "id": "fsVfWR",
            "likes": 3,
            "name": "Slipgate",
            "published": 3,
            "tags": [
                "retro",
                "distortion",
                "quake",
                "shearing"
            ],
            "usePreview": 0,
            "username": "HazelTheWolf",
            "viewed": 296
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //square aspect ratio centered canvas\n    vec2 uv = fragCoord/iResolution.xx;\n    uv -= 0.5;\n    \n    //mouse controls\n    //zoom *= (floor(min(iMouse.x/iResolution.x,iMouse.y/iResolution.y)*16.0)/16.0)*3.0 +0.5;\n    scale += (iMouse.x/iResolution.x/48.0) - 0.3*scale;\n    phaseOffset += iMouse.xy/iResolution.xy*3.14;\n    pixelSize *= (floor(iMouse.x/iResolution.x*32.0)/32.0)*1.0 +1.0;\n    brightness += iMouse.y/iResolution.y;\n        \n    uv /= zoom;\n    \n\n    vec2 distortion = sin((uv.yx/wavelength + iTime*speed)*6.28 + phaseOffset) + uv/wavelength;\n    distortion *= scale;\n    uv += distortion;\n    \n    //quantize uvs\n    if (pixelSize > 0.0) uv = floor(uv/(pixelSize/128.0))*pixelSize/128.0;\n    \n    fragColor = texture(iChannel0,uv)*(tint+brightness);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float stars = smoothstep(1.0-starDensity,1.0,pow(pcg2d(uvec2(fragCoord)),8.0));\n    fragColor = vec4(stars);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float wavelength = 1.0;\nfloat speed = .1;\nfloat scale = .06;\nfloat pixelSize = .6;\nfloat starDensity = .8;\nfloat brightness = .3;\nvec2 zoom = vec2(1.0);\nvec2 phaseOffset = vec2(0.0,3.14);\nvec4 tint = vec4(.038,.024,.014,1.0)*9.0;\n\n\n\n//https://www.shadertoy.com/view/XlGcRh\nfloat pcg2d(uvec2 v)\n    {\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    return (vec2(v)/float(0xffffffffu)).x;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}