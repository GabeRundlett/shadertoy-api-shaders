{
    "Shader": {
        "info": {
            "date": "1539541213",
            "description": "One day i needed polar/cartesian coordinates of cells in a hexagon grid. \nThis is my result of that function. It should be fairly fast. IFs and steps \nshould be translated into simple conditional move instructions.",
            "flags": 0,
            "hasliked": 0,
            "id": "lldfWH",
            "likes": 32,
            "name": "Hexagon cell uv",
            "published": 3,
            "tags": [
                "grid",
                "uv",
                "hexagon",
                "polar",
                "hex",
                "coordinates"
            ],
            "usePreview": 0,
            "username": "TDM",
            "viewed": 2101
        },
        "renderpass": [
            {
                "code": "/*\n\t\"Hexagon cell uv\" by Alexander Alekseev aka TDM - 2018\n\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n*/\n\n// ret.x  - distance to border, \n// ret.y  - distance to center\n// ret.zw - cell uv\n// id - cell coordinates\nvec4 hex(vec2 uv, out vec2 id) {\n    uv *= mat2(1.1547,0.0,-0.5773503,1.0);\n    vec2 f = fract(uv);\n    float triid = 1.0;\n\tif((f.x+f.y) > 1.0) { f = 1.0 - f; triid = -1.0; }\n    \n    vec2 co = step(f.yx,f) * step(1.0-f.x-f.y,max(f.x,f.y));\n    id = floor(uv) + (triid < 0.0 ? 1.0 - co : co);\n    co = (f - co) * triid * mat2(0.866026,0.0,0.5,1.0);    \n    \n    uv = abs(co);    \n    return vec4(0.5-max(uv.y,abs(dot(vec2(0.866026,0.5),uv))),length(co),co);\n}\n\n\n// misc stuff\nconst float PI\t \t= 3.141592;\nfloat diffuse(vec3 n,vec3 l) {\n    return max(dot(n,l), 0.0);\n}\nfloat specular(vec3 n,vec3 l,vec3 e,float s) {    \n    float nrm = (s + 8.0) / (PI * 8.0);\n    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;\n}\nfloat hash( float p ) {\n\tfloat h = p * 127.1;\t\n    return fract(sin(h)*43758.5453123);\n}\nfloat hash( vec2 p ) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\nfloat vnoise(in float p) {\n    float i = floor( p );\n    float f = fract( p );\t\n\tfloat u = f*f*(3.0-2.0*f);\n    return mix( hash( i ), hash( i + 1.0 ), u);\n}\nfloat vnoise(in vec2 p) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.x += 0.5;\n\n    // get hexagon info\n    vec2 id0, id1;\n    vec4 h = hex(uv*4.0, id0);\n    vec4 hl = hex(uv*2.0, id1);\n    \n    // color\n    vec3 n = vec3(h.zw * 1.8, 1.0);\n    n.z = sqrt(abs(1.0 - dot(n.xy,n.xy)));\n    vec3 l = normalize(vec3(sin(iTime*0.3),cos(iTime*0.3),1.0));\n    \n    // roughness modifier using polar coords\n    float cell_rnd = hash(id0) * 4.0 - 2.0;\n    float rough = smoothstep(-0.2,0.2, sin(iTime*cell_rnd+atan(h.w,h.z)*3.0+h.y*20.0));\n    float gm = rough * smoothstep(-0.4,0.4, sin(iTime*cell_rnd+atan(h.w,h.z)*3.0+h.y*20.0+2.5));\n    rough = 0.3 + 0.7 * rough;\n    \n    vec3 col = vec3(0.01,0.01,0.02) * (1.0 - rough);\n    col += diffuse(n,l) * 0.04;\n    col += specular(n,l,normalize(vec3(uv,-1.0)),3.0*rough) * 0.2;\n    col += specular(n,l,normalize(vec3(uv,-1.0)),20.0*rough) * 0.05;    \n    \n    // glow\n    float ga = min(pow(min(h.x*8.0,1.0), 1.0/8.0), 1.0-gm*0.1);\n    ga = 1.0 - (1.0 - ga) * pow(vnoise(uv*2.0+vec2(iTime,0.0))*1.1, 4.0) *\n        smoothstep(0.1,0.15,hl.x);    \n    col = mix(vec3(1.4,0.0,0.3), col, ga);\n    col += 5.0 * pow(1.0-ga, 2.0);\n    \n    // ao\n    col *= 1.0 - (1.0 - pow(h.x*8.0, 1.0/3.0)) * ga;\n\n    // Output to screen\n    fragColor = vec4(pow(col,vec3(1.0/2.2)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}