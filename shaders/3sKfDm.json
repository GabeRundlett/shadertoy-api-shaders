{
    "Shader": {
        "info": {
            "date": "1607387546",
            "description": "My attempt at simulating a mechanical system.",
            "flags": 32,
            "hasliked": 0,
            "id": "3sKfDm",
            "likes": 9,
            "name": "Mechanical System",
            "published": 3,
            "tags": [
                "simulation",
                "kinematics",
                "mechanical"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 194
        },
        "renderpass": [
            {
                "code": "/*\nAfter watching a video on chaos by Derek Muller (Veritasium), I was captivated by\nthe triple pendulum and wanted to recreate it with a shader but unfortunately I know\nvery little about physics or kinematics. As a result, I ended up either coming up\nwith an intuitive answer or searching google for one so this is probably far from\naccurate. I think it is visually appealling enough for now though :)\n*/\n\nfloat line(in vec2 p, in vec2 a, in vec2 b, in float width) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0)) - width;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    color += 0.5 * max(smoothstep(unit, 0.0, line(uv, pole.xy, pole.zw, 0.05)), smoothstep(unit, 0.0, uv.y - pole.w));\n\n    vec2 linkageOrigin = pole.xy;\n    for (int i=0; i < linkages.length(); i++) {\n        vec2 linkage = getLinkage(i);\n        vec2 linkageEnd = linkageOrigin + vec2(cos(linkage.x), sin(linkage.x)) * linkages[i].z;\n        vec3 linkageColor = vec3(0.0, 0.0, 0.0);\n        linkageColor[int(mod(float(i), 3.0))] = smoothstep(unit, 0.0, line(uv, linkageOrigin, linkageEnd, 0.16 * linkages[i].z));\n        color = mix(color, linkageColor, clamp(dot(linkageColor, vec3(1)), 0.0, 1.0));\n        linkageOrigin = linkageEnd;\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 fragTexAddr = ivec2(fragCoord);\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    if (iFrame == 0) {\n        if (fragTexAddr.x < linkages.length() && fragTexAddr.y == 0) {\n            fragColor.xy = linkages[fragTexAddr.x].xy;\n        }\n    }\n\n    if (iFrame > 0) {\n        if (fragTexAddr.x < linkages.length() && fragTexAddr.y == 0) {\n            vec2 linkage = getLinkage(fragTexAddr.x);\n\n            // Total force:\n            float ftotal = 0.0;\n\n            // Gravitational force:\n            ftotal += -cos(linkage.x) * GRAVITY;\n\n            // The linkage should tend towards aligning with the linkage before it:\n            if (fragTexAddr.x > 0) {\n                int linkageBeforeIndex = fragTexAddr.x - 1;\n                vec2 linkageBefore = getLinkage(linkageBeforeIndex);\n\n                // Centrifugal force:\n                ftotal += -sin(linkage.x - linkageBefore.x) * linkages[linkageBeforeIndex].w * linkageBefore.y * linkageBefore.y * linkages[linkageBeforeIndex].z;\n            }\n\n            // The linkage should be pulled by the linkage after it:\n            if (fragTexAddr.x < linkages.length() - 1) {\n                int linkageAfterIndex = fragTexAddr.x + 1;\n                vec2 linkageAfter = getLinkage(linkageAfterIndex);\n\n                // Centrifugal force:\n                ftotal += cos(linkage.x - linkageAfter.x) * linkages[linkageAfterIndex].w * linkageAfter.y * linkageAfter.y * linkages[linkageAfterIndex].z;\n            }\n\n            // Acceleration:\n            linkage.y += ftotal / linkages[fragTexAddr.x].w;\n\n            // Friction:\n            linkage.y *= FRICTION; // How to include centripetal force?\n\n            linkage.x += linkage.y;\n            fragColor = vec4(linkage, 0.0, 1.0);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Gravitational and frictional constants:\nconst float GRAVITY = 0.01;\nconst float FRICTION = 0.99;\n\n// The top and bottom of the pole the first linkage is suspended from:\nconst vec4 pole = vec4(0.0, 0.25, 0.0, -0.375);\n\n// Starting conditions for each linkage (angle, angular velocity, length, mass):\nconst vec4[3] linkages = vec4[](vec4( 2.5, -0.18,  0.3, 2.0),\n                                vec4(4.82,  0.25, 0.25, 1.2),\n                                vec4( 4.1, -0.15,  0.2, 1.0));\n\n// Helper function for loading linkage information:\n#define getLinkage(id) texelFetch(iChannel0, ivec2(id, 0), 0).xy",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}