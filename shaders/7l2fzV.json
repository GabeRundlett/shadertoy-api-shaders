{
    "Shader": {
        "info": {
            "date": "1652463108",
            "description": "dancing color lights",
            "flags": 0,
            "hasliked": 0,
            "id": "7l2fzV",
            "likes": 2,
            "name": "Dancing color lights",
            "published": 3,
            "tags": [
                "dancing"
            ],
            "usePreview": 0,
            "username": "fpiaggio",
            "viewed": 322
        },
        "renderpass": [
            {
                "code": "#define PI  3.14159265359\nfloat random (vec2 p) {\n    return fract(sin(dot(p.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nmat2 r2d(float a) {\n\tfloat c = cos(a), s = sin(a);\n\t// https://en.wikipedia.org/wiki/Rotation_matrix\n    return mat2(\n        c, s,\n        -s, c\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( fragCoord -.5*iResolution.xy )/iResolution.y;\n    uv *= r2d(iTime*0.25);\n\tvec2 p = vec2(0.,0.) - uv;\n\tvec3 color = vec3(0.0);\n\tfloat maxH = map(sin(iTime), -1., 1., 1600., 1820.);\n    float maxp2 = map(sin(iTime*2.), -1., 1., 1., 2.);\n    float maxq =  map(sin(iTime*0.01), -1., 1., 2., 6.);\n\tfor (float i = 0.0; i < 5.0; i += 0.1) {\n\t\tvec2 p2 = p;\n\t\tvec2 inf = vec2(0.);\n        /*\n        Probar\n        inf.x += cos((iTime * 0.5 + i + cos(iTime*0.01+i*2.)*0.5+0.6) / maxq * PI);\n\t\tinf.y += sin((iTime * 0.5 + i + cos(iTime*0.01+i*2.)*0.5+0.6) / maxq * PI * 2.0) / 2.0;\n        */\n\t\tinf.x += cos((iTime * 1.2 + i + cos(iTime*0.4+uv.x+i*1.5) + cos(iTime*0.4+i*2.)) / maxq * PI);\n\t\tinf.y += sin((iTime * 1.2 + i + sin(iTime*0.4+uv.y+i*1.5) + cos(iTime*0.4+i*2.)) / maxq * PI * 2.0) / 2.0;\n\t\tp2 *= p2;\n\t\tp2.x += inf.x/4.8;\n\t\tp2.y += inf.y/4.8;\n\t\tp2 += random(p2) * p2 * maxp2;\n\t\tfloat h = (0.006 + i / 900.0) / abs(0.001 + i / maxH - length(p2));\n\t\tcolor += vec3(h);\n\t}\n    \n\tfragColor = vec4(color * vec3(uv.x, uv.y, .2), 1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}