{
    "Shader": {
        "info": {
            "date": "1698386506",
            "description": "A program to generate real-time images from a rudimentary randomized neural network. Click and drag to change the output. The instructions (comments in the code) should tell you what the important listed parameters mean so you can mess with it yourself!",
            "flags": 6,
            "hasliked": 0,
            "id": "DdyBzw",
            "likes": 0,
            "name": "Neural Network Filter",
            "published": 3,
            "tags": [
                "experiment",
                "webcam",
                "microphone",
                "neuralnet"
            ],
            "usePreview": 0,
            "username": "BenzeneRachel",
            "viewed": 123
        },
        "renderpass": [
            {
                "code": "float rand(float co) { return sin(co*(91.3458) * 47453.5453); }\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const int inputs = 8;\n    const int outputs = 3;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 cam = texture(iChannel0, uv).rgb;\n    vec3 mic = texture(iChannel1, uv).rgb*5.0;\n    uv = fragCoord/iResolution.xy-.5;\n    uv[0] *= iResolution.x/iResolution.y;\n    vec2 mv = iMouse.xy/iResolution.xy-.5;\n    mv[0] *= iResolution.x/iResolution.y;\n    \n    // !! INSTRUCTIONS ABOUT WHAT THE VARIABLES MEAN FOR PEOPLE WHO WANT TO MESS WITH THE CODE !!\n    // note: if a variable uses \"any real number,\" then ALWAYS use a decimal (example: \"5.\" or \"5.0\", but NOT \"5\")\n    // if a variable uses integer values only, do not use a decimal\n    // enjoy!\n    \n    // seed: any real number - the random seed that generates the network parameters\n    float seed = 7.;\n    \n    // layers: integer values only - is the number of hidden layers in the neural network (recommended: 3-10)\n    const int layers = 8;\n    \n    // density: integer values only - is the number of neurons per hidden layer (recommended: 3-10)\n    const int density = 8;\n    \n    // wr (weight range): any positive number - the range of possible values of weights from -wr to +wr (experiment!)\n    float wr = 3.*sin(iTime);\n   \n    // br (bias range): any positive number or zero - the range of possible values of biases from -br to +br (experiment!)\n    float br = 1.;\n    \n    // smoothness: any real number - the higher the smoothness value, the less discrete the output is (depends on the layers, density, wr, and br) \n    float smoothness = 20.0;\n    \n    // uv[0] and uv[1]: any real number - the input weights of the x and y values of the screen respectively (experiment!)\n    uv[0] *= 1.0;\n    uv[1] *= 1.0;\n    \n    // mv[0] and mv[0]: any real number - the input weights of the x and y coordinates of the mouse cursor respectively (recommended: 5.0)\n    mv[0] *= 5.0;\n    mv[1] *= 5.0;\n    \n    // cam[0], cam[1], and cam[2]: any real number - the input weights of the red, green, and blue components from the iChannel0 Webcam respectively (recommended: 1.0)\n    cam[0] *= 1.0;\n    cam[1] *= 1.0;\n    cam[2] *= 1.0;\n    \n    // mic[0]: any real number - the input weight from the iChannel1 Microphone (experiment!)\n    mic[0] *= 0.0;\n    \n    // I'm too lazy to comment consistently on the rest of my code so good luck past this point\n    float[layers*density] network;\n    float[] inpt = float[](uv[0],uv[1],mv[0],mv[1],cam[0],cam[1],cam[2],mic[0]);\n    vec3 col;\n    float x;\n    float outpt;\n    float ep;\n    float en;\n    for (int h = 0; h < density; h += 1)\n    //neural network input loop\n    {\n        x = rand(seed);\n        outpt = x*br;\n        seed += x;\n        for (int i = 0; i < inputs; i += 1)\n        {\n            x = rand(seed);\n            outpt += inpt[i]*x*wr;\n            seed += x;\n        }\n        ep = exp(outpt);\n        en = exp(-1.0*outpt);\n        network[h] = (ep-en)/(ep+en);\n    }\n    //neural network hidden layers loop\n    for (int h = 0; h < layers-1; h += 1)\n    {\n        for (int i = 0; i < density; i += 1)\n        {\n            x = rand(seed);\n            outpt = x*br;\n            seed += x; \n            for (int j = 0; j < density; j += 1)\n            {\n                x = rand(seed);\n                outpt += network[h*density+j]*x*wr;\n                seed += x;\n            }\n            ep = exp(outpt);\n            en = exp(-1.0*outpt);\n            network[(h+1)*density+i] = (ep-en)/(ep+en);\n        }\n    }\n    //neural network output loop\n    for (int h = 0; h < outputs; h += 1)\n    {\n        for (int i = 0; i < density; i += 1)\n        {\n            x = rand(seed);\n            outpt += network[density*(layers-1)+i]*x*wr;\n            seed += x;\n        }\n        ep = exp(outpt/smoothness);\n        en = exp(-1.0*outpt/smoothness);\n        col[h] = (ep-en)/(ep+en)+1.0/2.0;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}