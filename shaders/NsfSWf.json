{
    "Shader": {
        "info": {
            "date": "1619313029",
            "description": "A spinoff of my 2D version: [url=https://www.shadertoy.com/view/NdfXWX]https://www.shadertoy.com/view/NdfXWX[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "NsfSWf",
            "likes": 3,
            "name": "Autonomous Camera 3D",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "camera",
                "random",
                "autonomous"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 140
        },
        "renderpass": [
            {
                "code": "struct Camera {\n    vec3 pos;\n    mat3 ori;\n};\n\n// https://www.shadertoy.com/view/4djSRW\nvec3 Hash13(in float t) {\n   vec3 p3 = fract(t * vec3(0.1031, 0.1030, 0.0973));\n   p3 += dot(p3, p3.yzx + 33.33);\n   return fract((p3.xxy + p3.yzz) * p3.zyx); \n}\n\nCamera getCamera(in float t) {\n    float id = floor(t), local = fract(t);\n    vec3 a = Hash13(id), b = Hash13(id + 1.0), c = Hash13(id + 2.0);\n    vec3 mid1 = 0.5 * (a + b), mid2 = 0.5 * (b + c);\n\n    float tInv = 1.0 - local;\n    vec3 pos = mid1 * tInv * tInv + 2.0 * b * tInv * local + mid2 * local * local;\n\n    vec3 f = normalize(mid1 * (local - 1.0) + (1.0 - 2.0 * local) * b + mid2 * local);\n    vec3 r = vec3(-f.z, 0.0, f.x) / sqrt(1.0 - f.y * f.y);\n    vec3 u = cross(r, f);\n\n    return Camera(pos, mat3(r, u, f));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0);\n\n    Camera cam = getCamera(iTime * 0.25);\n\n    vec3 ro = cam.pos * 100.0 - 50.0;\n    vec3 rd = normalize(vec3(uv, 1.0)) * transpose(cam.ori);\n\n    float t = 0.0, k = 0.0, d;\n    for (int i=0; i < 100; i++) {\n        vec3 p = ro + rd * t;\n        d = length(mod(p, 2.0) - 1.0) - 0.25;\n        if (d < 0.001 || t > 100.0) break;\n        t += d;\n        k++;\n    }\n\n    fragColor = vec4(0.5 - k / 100.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}