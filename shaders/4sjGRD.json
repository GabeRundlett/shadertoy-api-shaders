{
    "Shader": {
        "info": {
            "date": "1384629256",
            "description": "Fake floyd-steinberg dithering; each pixel's error should flow into the next, but I'm getting close enough by looking up the previous few for each pixel. Not having a consistent (or square) history introduces some artifacts, but still looks pretty cool!",
            "flags": 0,
            "hasliked": 0,
            "id": "4sjGRD",
            "likes": 79,
            "name": "Classic Mac floyd-steinberg-ish",
            "published": 3,
            "tags": [
                "retro",
                "grayscale",
                "filter",
                "bw"
            ],
            "usePreview": 1,
            "username": "RavenWorks",
            "viewed": 8878
        },
        "renderpass": [
            {
                "code": "const int lookupSize = 64;\nconst float errorCarry = 0.3;\n\nfloat getGrayscale(vec2 coords){\n\tvec2 uv = coords / iResolution.xy;\n\tuv.y = 1.0-uv.y;\n\tvec3 sourcePixel = texture(iChannel0, uv).rgb;\n\treturn length(sourcePixel*vec3(0.2126,0.7152,0.0722));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\n\tint topGapY = int(iResolution.y - fragCoord.y);\n\t\n\tint cornerGapX = int((fragCoord.x < 10.0) ? fragCoord.x : iResolution.x - fragCoord.x);\n\tint cornerGapY = int((fragCoord.y < 10.0) ? fragCoord.y : iResolution.y - fragCoord.y);\n\tint cornerThreshhold = ((cornerGapX == 0) || (topGapY == 0)) ? 5 : 4;\n\t\n\tif (cornerGapX+cornerGapY < cornerThreshhold) {\n\t\t\t\t\n\t\tfragColor = vec4(0,0,0,1);\n\t\t\n\t} else if (topGapY < 20) {\n\t\t\t\n\t\t\tif (topGapY == 19) {\n\t\t\t\t\n\t\t\t\tfragColor = vec4(0,0,0,1);\n\t\t\t\t\n\t\t\t} else {\n\t\t\n\t\t\t\tfragColor = vec4(1,1,1,1);\n\t\t\t\t\n\t\t\t}\n\t\t\n\t} else {\n\t\t\n\t\tfloat xError = 0.0;\n\t\tfor(int xLook=0; xLook<lookupSize; xLook++){\n\t\t\tfloat grayscale = getGrayscale(fragCoord.xy + vec2(-lookupSize+xLook,0));\n\t\t\tgrayscale += xError;\n\t\t\tfloat bit = grayscale >= 0.5 ? 1.0 : 0.0;\n\t\t\txError = (grayscale - bit)*errorCarry;\n\t\t}\n\t\t\n\t\tfloat yError = 0.0;\n\t\tfor(int yLook=0; yLook<lookupSize; yLook++){\n\t\t\tfloat grayscale = getGrayscale(fragCoord.xy + vec2(0,-lookupSize+yLook));\n\t\t\tgrayscale += yError;\n\t\t\tfloat bit = grayscale >= 0.5 ? 1.0 : 0.0;\n\t\t\tyError = (grayscale - bit)*errorCarry;\n\t\t}\n\t\t\n\t\tfloat finalGrayscale = getGrayscale(fragCoord.xy);\n\t\tfinalGrayscale += xError*0.5 + yError*0.5;\n\t\tfloat finalBit = finalGrayscale >= 0.5 ? 1.0 : 0.0;\n\t\t\n\t\tfragColor = vec4(finalBit,finalBit,finalBit,1);\n\t\t\t\n\t}\n\t\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}