{
    "Shader": {
        "info": {
            "date": "1642988436",
            "description": "khgcf",
            "flags": 48,
            "hasliked": 0,
            "id": "sdBcRR",
            "likes": 2,
            "name": "dambreak 2",
            "published": 3,
            "tags": [
                "cahnhilliard"
            ],
            "usePreview": 0,
            "username": "Kitesurf_m8s",
            "viewed": 195
        },
        "renderpass": [
            {
                "code": "// Fork of \"dambreak\" by Kitesurf_m8s. https://shadertoy.com/view/7dfyWf\n// 2022-01-23 21:35:20\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 p = ivec2(fragCoord);\n    \n    //vec4 res = texelFetch(iChannel0,p,0);\n    //vec3 col = vec3(0.5+10.*(res.x-1.0));\n    \n    //vec4 res = texelFetch(iChannel0,p,0);\n    //vec3 col = (vec3(0.5+1.*(res.w-0.5),0.5+10.*(res.y/res.x),0.5+10.*(res.z/res.x)));\n    \n    vec4 res = texelFetch(iChannel0,p,0);\n    vec3 col = 2.*res.w*vec3(0.5+5.*res.yz/res.x,1.0);\n    \n    //vec4 res = texelFetch(iChannel0,p,0);\n    //vec3 col = vec3(0.5+10.*res.yz,res.w);\n\n    //vec4 res = texelFetch(iChannel0,p,0);\n    //vec3 col = vec3(0.5+10.*(res.yz),10.*(res.x-1.0));\n    \n    //vec4 res = texelFetch(iChannel1,p,0);\n    //vec3 col = res.xyz;\n    \n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 p = ivec2(fragCoord);\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 uu = texture(iChannel0,uv+vec2(0.,2.)/iResolution.xy);\n    vec4 u = texture(iChannel0,uv+vec2(0.,1.)/iResolution.xy);\n    vec4 c = texture(iChannel0,uv+vec2(0.,0.)/iResolution.xy);\n    vec4 d = texture(iChannel0,uv+vec2(0.,-1.)/iResolution.xy);\n    vec4 dd = texture(iChannel0,uv+vec2(0.,-2.)/iResolution.xy);\n    vec4 ll = texture(iChannel0,uv+vec2(-2.,0.)/iResolution.xy);\n    vec4 l = texture(iChannel0,uv+vec2(-1.,0.)/iResolution.xy);\n    vec4 r = texture(iChannel0,uv+vec2(1.,0.)/iResolution.xy);\n    vec4 rr = texture(iChannel0,uv+vec2(2.,0.)/iResolution.xy);\n    vec4 ul = texture(iChannel0,uv+vec2(-1.,1.)/iResolution.xy);\n    vec4 ur = texture(iChannel0,uv+vec2(1.,1.)/iResolution.xy);\n    vec4 dl = texture(iChannel0,uv+vec2(-1.,-1.)/iResolution.xy);\n    vec4 dr = texture(iChannel0,uv+vec2(1.,-1.)/iResolution.xy);\n    \n    vec4 res = c;\n    res -= 0.9*CFL*(20.*D4(c)+(D4(uu)+D4(dd)+D4(ll)+D4(rr))+2.0*(D4(ul)+D4(ur)+D4(dl)+D4(dr))-8.0*(D4(u)+D4(d)+D4(l)+D4(r)));\n    res -= 0.9*CFL*((1./12.)*(Fx(ll)-Fx(rr))-(2./3.)*(Fx(l)-Fx(r)));\n    res -= 0.9*CFL*((1./12.)*(Fy(dd)-Fy(uu))-(2./3.)*(Fy(d)-Fy(u)));\n    \n    res += 0.9*CFL*((-1./12.)*(D2(ll)+D2(rr)+D2(uu)+D2(dd))+(4./3.)*(D2(l)+D2(r)+D2(u)+D2(d))-(5.)*D2(c));\n    \n    \n    \n    res.z -= 0.9*CFL*0.0001*c.w/(c.x+0.001);\n    //res.z -= 0.9*CFL*0.0001*c.x;\n    \n    \n    vec4 map = texelFetch(iChannel2,p,0);\n    if(map.x>0.5){\n        //res.x -= 0.5*(res.x-1.0);\n        res.y *= 0.;\n        res.z *= 0.;\n        //res.w = min(1.0,max(0.,res.w));\n    }\n    \n    fragColor = res;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 p = ivec2(fragCoord);\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 uu = texture(iChannel0,uv+vec2(0.,2.)/iResolution.xy);\n    vec4 u = texture(iChannel0,uv+vec2(0.,1.)/iResolution.xy);\n    vec4 c = texture(iChannel0,uv+vec2(0.,0.)/iResolution.xy);\n    vec4 d = texture(iChannel0,uv+vec2(0.,-1.)/iResolution.xy);\n    vec4 dd = texture(iChannel0,uv+vec2(0.,-2.)/iResolution.xy);\n    vec4 ll = texture(iChannel0,uv+vec2(-2.,0.)/iResolution.xy);\n    vec4 l = texture(iChannel0,uv+vec2(-1.,0.)/iResolution.xy);\n    vec4 r = texture(iChannel0,uv+vec2(1.,0.)/iResolution.xy);\n    vec4 rr = texture(iChannel0,uv+vec2(2.,0.)/iResolution.xy);\n    vec4 ul = texture(iChannel0,uv+vec2(-1.,1.)/iResolution.xy);\n    vec4 ur = texture(iChannel0,uv+vec2(1.,1.)/iResolution.xy);\n    vec4 dl = texture(iChannel0,uv+vec2(-1.,-1.)/iResolution.xy);\n    vec4 dr = texture(iChannel0,uv+vec2(1.,-1.)/iResolution.xy);\n    \n    vec4 res = texelFetch(iChannel1,p,0);\n    res -= CFL*(20.*D4(c)+(D4(uu)+D4(dd)+D4(ll)+D4(rr))+2.0*(D4(ul)+D4(ur)+D4(dl)+D4(dr))-8.0*(D4(u)+D4(d)+D4(l)+D4(r)));\n    res -= CFL*((1./12.)*(Fx(ll)-Fx(rr))-(2./3.)*(Fx(l)-Fx(r)));\n    res -= CFL*((1./12.)*(Fy(dd)-Fy(uu))-(2./3.)*(Fy(d)-Fy(u)));\n    \n    res += CFL*((-1./12.)*(D2(ll)+D2(rr)+D2(uu)+D2(dd))+(4./3.)*(D2(l)+D2(r)+D2(u)+D2(d))-(5.)*D2(c));\n    \n    res.z -= CFL*0.0001*c.w/(c.x+0.001);\n    //res.z -= CFL*0.0001*c.x;\n    \n    vec4 map = texelFetch(iChannel2,p,0);\n    if(iFrame <2){\n        if(map.z>0.5){\n            res.x = 1.0;\n            res.y = 0.0;\n            res.z = 0.0;\n            res.w = 1.0;\n        }\n        else{\n            res.x = 1.0;\n            res.y = 0.0;\n            res.z = 0.0;\n            res.w = 0.0;\n        }\n    }\n    if(map.x>0.5){\n        //res.x -= 0.5*(res.x-1.0);\n        res.y *= 0.;\n        res.z *= 0.;\n        //res.w = min(1.0,max(0.,res.w));\n    }\n\n    fragColor = res;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define biharm 0.01\n#define CFL 0.45\n#define sharpen 0.1\n\n//Flux function x part\nvec4 Fx(vec4 a){\n    vec4 res;\n    res.x = a.y;\n    res.y = a.y*a.y/(a.x+0.001) + 1.0*(a.x-1.);\n    res.z = a.z*a.y/(a.x+0.001);\n    res.w = a.w*a.y/(a.x+0.001);\n    return res;\n}\n//Flux function y part\nvec4 Fy(vec4 a){\n    vec4 res;\n    res.x = a.z;\n    res.y = a.y*a.z/(a.x+0.001);\n    res.z = a.z*a.z/(a.x+0.001) + 1.0*(a.x-1.);\n    res.w = a.w*a.z/(a.x+0.001);\n    return res;\n}\n\n//Flux for Laplacian\nvec4 D2(vec4 a){\n    vec4 res = vec4(0.);\n    res.y = 0.002*a.y/(a.x+0.001);\n    res.z = 0.002*a.z/(a.x+0.001);\n    //Cahn-Hilliard\n    float alpha = a.w/(a.x+0.001);\n    // this should be set to 0.05\n    res.w = 0.00*(alpha-3.0*alpha*alpha+2.0*alpha*alpha*alpha);\n    return res;\n    \n}\n\n//Flux for Harmonic operator \"Laplacian*Laplacian\"\nvec4 D4(vec4 a){\n    vec4 res =vec4(0.);\n    res.x = a.x;\n    res.y = a.y/(a.x+0.001);\n    res.z = a.z/(a.x+0.001);\n    res.w = a.w/(a.x+0.001);\n    return biharm*res;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.x;\n    \n    vec4 res = texelFetch(iChannel0,ivec2(fragCoord),0);\n    \n    if(iFrame<1){\n        if (fragCoord.x<3.\n         || fragCoord.x>(iResolution.x-3.)\n         || fragCoord.y<3.\n         || fragCoord.y>(iResolution.y-3.)){\n            res.x = 1.0;\n        }\n        \n        if (fragCoord.x>=0.45*(iResolution.x-3.)\n         && fragCoord.x<0.55*(iResolution.x-3.)\n         && fragCoord.y>=0.2*(iResolution.y-3.)\n         && fragCoord.y<1.0*(iResolution.y-3.)){\n            res.z = 1.0;\n        }\n        \n        if (true &&\n            fragCoord.x>=0.7*(iResolution.x-3.)\n         && fragCoord.x<0.8*(iResolution.x-3.)\n         && fragCoord.y>=0.0*(iResolution.y-3.)\n         && fragCoord.y<0.1*(iResolution.y-3.)){\n            res.x = 1.0;\n            res.z = 0.0;\n        }\n    }\n    \n    if(iMouse.z > 0.){\n        vec2 d2 = fragCoord-iMouse.xy;\n        if(dot(d2,d2) < 100.){\n            if(texelFetch(iChannel3,ivec2(37,1),0).y>0.){\n                res.z = 0.0;\n            }else{\n                res.z = 1.0;\n            }\n        }\n    }\n\n    fragColor = vec4(res);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}