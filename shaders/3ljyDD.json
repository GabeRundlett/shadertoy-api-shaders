{
    "Shader": {
        "info": {
            "date": "1594399136",
            "description": "License CC0: Hexagonal tiling + cog wheels\nNothing fancy, just hexagonal tiling + cog wheels\n",
            "flags": 0,
            "hasliked": 0,
            "id": "3ljyDD",
            "likes": 45,
            "name": "Hexagonal tiling + cog wheels",
            "published": 3,
            "tags": [
                "2d",
                "tiling",
                "cogs"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 921
        },
        "renderpass": [
            {
                "code": "// License CC0: Hexagonal tiling + cog wheels\n//  Nothing fancy, just hexagonal tiling + cog wheels\n\n#define PI      3.141592654\n#define TAU     (2.0*PI)\n#define MROT(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n\nfloat hash(in vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\nfloat pcos(float a) {\n  return 0.5 + 0.5*cos(a);\n}\n\nvoid rot(inout vec2 p, float a) {\n  float c = cos(a);\n  float s = sin(a);\n  p = vec2(c*p.x + s*p.y, -s*p.x + c*p.y);\n}\n\nfloat modPolar(inout vec2 p, float repetitions) {\n  float angle = 2.0*PI/repetitions;\n  float a = atan(p.y, p.x) + angle/2.;\n  float r = length(p);\n  float c = floor(a/angle);\n  a = mod(a,angle) - angle/2.;\n  p = vec2(cos(a), sin(a))*r;\n  // For an odd number of repetitions, fix cell index of the cell in -x direction\n  // (cell index would be e.g. -5 and 5 in the two halves of the cell):\n  if (abs(c) >= (repetitions/2.0)) c = abs(c);\n  return c;\n}\n\nfloat pmin(float a, float b, float k) {\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nconst vec2 sz       = vec2(1.0, sqrt(3.0));\nconst vec2 hsz      = 0.5*sz;\nconst float smallCount = 16.0;\n\nvec2 hextile(inout vec2 p) {\n  // See Art of Code: Hexagonal Tiling Explained!\n  // https://www.youtube.com/watch?v=VmrIDyYiJBA\n\n  vec2 p1 = mod(p, sz)-hsz;\n  vec2 p2 = mod(p - hsz*1.0, sz)-hsz;\n  vec2 p3 = mix(p2, p1, vec2(length(p1) < length(p2)));\n  vec2 n = p3 - p;\n  p = p3;\n\n  return n;\n}\n\nfloat circle(vec2 p, float r) {\n  return length(p) - r;\n}\n\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat unevenCapsule(vec2 p, float r1, float r2, float h) {\n  p.x = abs(p.x);\n  float b = (r1-r2)/h;\n  float a = sqrt(1.0-b*b);\n  float k = dot(p,vec2(-b,a));\n  if( k < 0.0 ) return length(p) - r1;\n  if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n  return dot(p, vec2(a,b) ) - r1;\n}\n\nfloat cogwheel(vec2 p, float innerRadius, float outerRadius, float cogs, float holes) {\n  float cogWidth  = 0.25*innerRadius*TAU/cogs;\n  \n  float d0 = circle(p, innerRadius);  \n    \n  vec2 icp = p;\n  modPolar(icp, holes);\n  icp -= vec2(innerRadius*0.55, 0.0);\n  float d1 = circle(icp, innerRadius*0.25);  \n\n  vec2 cp = p;\n  modPolar(cp, cogs);\n  cp -= vec2(innerRadius, 0.0);\n  float d2 = unevenCapsule(cp.yx, cogWidth, cogWidth*0.75, (outerRadius-innerRadius));\n\n  float d3 = circle(p, innerRadius*0.20);  \n  \n  float d = 1E6;  \n  d = min(d, d0);\n  d = pmin(d, d2, 0.5*cogWidth);\n  d = min(d, d2);\n  d = max(d, -d1);\n  d = max(d, -d3);\n  \n  return d;\n}\n\nfloat ccell1(vec2 p, float r) {\n  float d = 1E6;\n  const float bigCount = 60.0;\n  \n  vec2 cp0 = p;\n  rot(cp0, -iTime*TAU/bigCount);\n  float d0 = cogwheel(cp0, 0.36, 0.38, bigCount, 5.0);\n  \n  vec2 cp1 = p;\n  float nm = modPolar(cp1, 6.0);\n\n  cp1 -= vec2(0.5, 0.0);\n  rot(cp1, 0.2+TAU*nm/2.0 + iTime*TAU/smallCount);\n  float d1 = cogwheel(cp1, 0.11, 0.125, smallCount, 5.0);\n\n  d = min(d, d0);\n  d = min(d, d1);\n  return d;\n}\n\nfloat ccell2(vec2 p, float r) {\n  float d = 1E6;\n  vec2 cp0 = p;\n  float nm = modPolar(cp0, 6.0);\n  vec2 cp1 = cp0;\n  const float off = 0.275;\n  const float count = smallCount + 2.0;\n  cp0 -= vec2(off, 0.0);\n  rot(cp0, 0.+TAU*nm/2.0 - iTime*TAU/count);\n  float d0 = cogwheel(cp0, 0.09, 0.105, count, 5.0);\n  \n\n  cp1 -= vec2(0.5, 0.0);\n  rot(cp1, 0.2+TAU*nm/2.0 + iTime*TAU/smallCount);\n  float d1 = cogwheel(cp1, 0.11, 0.125, smallCount, 5.0);\n  \n  float l = length(p);\n  float d2 = l - (off+0.055);\n  float d3 = d2 + 0.020;;\n  \n  vec2 tp0 = p;\n  modPolar(tp0, 60.0);\n  tp0.x -= off;\n  float d4 = box(tp0, vec2(0.0125, 0.005));\n\n  float ctime = -(iTime*0.05 + r)*TAU;\n\n  vec2 tp1 = p;\n  rot(tp1, ctime*12.0);\n  tp1.x -= 0.13;\n  float d5 = box(tp1, vec2(0.125, 0.005));\n\n  vec2 tp2 = p;\n  rot(tp2, ctime);\n  tp2.x -= 0.13*0.5;\n  float d6 = box(tp2, vec2(0.125*0.5, 0.0075));\n\n  float d7 = l - 0.025;\n  float d8 = l - 0.0125;\n\n  d = min(d, d0);\n  d = min(d, d1);\n  d = min(d, d2);\n  d = max(d, -d3);\n  d = min(d, d4);\n  d = min(d, d5);\n  d = min(d, d6);\n  d = min(d, d7);\n  d = max(d, -d8);\n\n  return d;\n}\n\nfloat df(vec2 p, float scale, inout vec2 nn) {\n  p /= scale;\n  nn = hextile(p);\n  nn = round(nn);\n  float r = hash(nn);\n\n  float d;;\n  \n  if (r < 0.5) {\n    d = ccell1(p, r);  \n  } else {\n    d = ccell2(p, r);\n  }\n  \n  return d*scale;\n}\n\nvec3 postProcess(vec3 col, vec2 q)  {\n  //col = saturate(col);\n  col=pow(clamp(col,0.0,1.0),vec3(0.75)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // satuation\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p = -1.0 + 2.0*q;\n  p.x *= iResolution.x/iResolution.y;\n  float tm = iTime*0.1;\n  p += vec2(cos(tm), sin(tm*sqrt(0.5)));\n  float z = mix(0.5, 1.0, pcos(tm*sqrt(0.3)));\n  float aa = 4.0 / iResolution.y;\n\n  vec2 nn = vec2(0.0);\n  float d = df(p, z, nn);\n\n  vec3 col = vec3(160.0)/vec3(255.0);\n  vec3 baseCol = vec3(0.3);\n  vec4 logoCol = vec4(baseCol, 1.0)*smoothstep(-aa, 0.0, -d);\n  col = mix(col, logoCol.xyz, pow(logoCol.w, 8.0));  \n  col += 0.4*pow(abs(sin(20.0*d)), 0.6);  \n  \n  col = postProcess(col, q);\n  \n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}