{
    "Shader": {
        "info": {
            "date": "1548874009",
            "description": "Because aliasing is bad, animated aliasing is worse, while patterns analytical antialiasing often easy ;-)\n\nconstruction: see DesmosGraph: [url]https://www.desmos.com/calculator/2s6muqefse[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "tsBGDD",
            "likes": 17,
            "name": "smooth modulo",
            "published": 3,
            "tags": [
                "2d",
                "antialiasing",
                "mod",
                "fract",
                "smooth",
                "tuto",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1402
        },
        "renderpass": [
            {
                "code": "#define S(v) smoothstep( 0., 30./R.y, v )     // antialiased clamp\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y;\n    float l = 10.*length(U) + .3*iTime;\n    \n    O = U.x < 0. \n          ? vec4( int(l) % 2 )                         // left: brutal mod\n          : vec4( S( .5- abs( mod(l-.5, 2.) - 1.) ) ); // right: smooth mod\n    \n    if (u.x-.5==floor(R.x/2.) ) O = vec4(1,0,0,0);     // red separator\n    O = sqrt(O);                                       // sRGB conversion\n}\n\n// To obtain: (indeed, a smooth version of it)\n//       _    _\n//    ..| |..| |..\n//    __| |__| |__\n\n// Arrange a chainsaw function like this:\n//    ../\\../\\..\n//    \\/  \\/  \\/\n\n// then smoothstep(-eps,eps) it. AA: eps = pixel size",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}