{
    "Shader": {
        "info": {
            "date": "1678880745",
            "description": "Not me",
            "flags": 0,
            "hasliked": 0,
            "id": "csVGR3",
            "likes": 3,
            "name": "GPT4 wrote this",
            "published": 3,
            "tags": [
                "sdf",
                "ai",
                "gpt"
            ],
            "usePreview": 0,
            "username": "andybak",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "mat3 rotateX(in float a) {\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0, cos(a), -sin(a),\n        0.0, sin(a), cos(a));\n}\n\nmat3 rotateY(in float a) {\n    return mat3(\n        cos(a), 0.0, sin(a),\n        0.0, 1.0, 0.0,\n        -sin(a), 0.0, cos(a));\n}\n\nfloat sdfBox(in vec3 p, in vec3 size) {\n    vec3 d = abs(p) - size;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat map(in vec3 p) {\n    vec3 boxSize = vec3(1.0);\n    vec3 q = rotateY(iTime) * rotateX(0.5 * iTime) * p;\n    return sdfBox(q, boxSize);\n}\n\nvec3 raymarch(in vec3 ro, in vec3 rd) {\n    float t = 0.0;\n    for (int i = 0; i < 64; i++) {\n        vec3 p = ro + t * rd;\n        float d = map(p);\n        if (d < 0.001) return p;\n        t += d;\n    }\n    return vec3(0.0);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    float time = iTime;\n\nvec3 cameraPos = vec3(0.0, 0.0, 4.0);\nvec3 rd = normalize(vec3(uv, -1.0));\nvec3 ro = cameraPos;\n\nvec3 p = raymarch(ro, rd);\nvec3 normal = normalize(vec3(\n    map(p + vec3(0.001, 0.0, 0.0)) - map(p - vec3(0.001, 0.0, 0.0)),\n    map(p + vec3(0.0, 0.001, 0.0)) - map(p - vec3(0.0, 0.001, 0.0)),\n    map(p + vec3(0.0, 0.0, 0.001)) - map(p - vec3(0.0, 0.0, 0.001))\n));\n\nvec3 light = vec3(0.0, 5.0, 5.0);\nvec3 lightDir = normalize(light - p);\nfloat diff = clamp(dot(lightDir, normal), 0.1, 1.0);\nvec3 col = vec3(0.5, 0.7, 1.0) * diff;\n\nfragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}