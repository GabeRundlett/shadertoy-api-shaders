{
    "Shader": {
        "info": {
            "date": "1678359495",
            "description": "Tubeworms on the rocks in the sea (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "csGGWR",
            "likes": 19,
            "name": "Snapping Rockworms",
            "published": 3,
            "tags": [
                "voronoi",
                "wave",
                "worm",
                "rock"
            ],
            "usePreview": 1,
            "username": "dr2",
            "viewed": 253
        },
        "renderpass": [
            {
                "code": "// \"Snapping Rockworms\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n#define AA    0  // (= 0/1) optional antialiasing\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrEllips2Df (vec3 p, vec2 r);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nmat3 StdVuMat (float el, float az);\nfloat Minv2 (vec2 p);\nfloat Minv3 (vec3 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec3 HsvToRgb (vec3 c);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nvec4 Hashv4v2 (vec2 p);\nfloat Noisefv3 (vec3 p);\nvec2 Noisev2v4 (vec4 p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nstruct VVec {\n  vec2 d;\n  float r;\n};\nVVec vVec[7];\nvec4 vVal;\nvec3 qHit, cMid, sunDir, waterDisp;\nvec2 gVec[7], hVec[7], ipp, cId, bkAopCs, tubRotCs, tubRotNCs, aLoopCs;\nfloat dstFar, tCur, gSize, vorAmp, dLoop, aLoop, hBase, lEnd, szFac;\nint idObj;\nbool isRefl;\nconst int idRok = 1, idCyl = 2, idTube = 3, idEx = 4, idEnd = 5, idBk = 6, idCen = 7;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n#define CosSin(x) (sin ((x) + vec2 (0.5 * pi, 0.)))\n\nfloat TWormDf (vec3 p, float dMin)\n{  // (based on \"Metallic Tubeworms\")\n  vec3 q;\n  float d, rCyl, dc, dy;\n  rCyl = 0.7;\n  q = p;\n  dy = - q.y;\n  q.y -= 0.3;\n  d = max (PrRoundCylDf (q.xzy, rCyl + 0.4, 0.1, 0.3), dy);\n  DMIN (idEx);\n  q = p;\n  q.y -= 2. * lEnd + hBase + 0.3;\n  d = max (max (length (q.xz) - rCyl * (1. - 0.03 * SmoothBump (0.2, 0.8, 0.15,\n     fract (3. * q.y + 0.5))), abs (q.y + lEnd) - lEnd - 0.01), dy);\n  DMIN (idEnd);\n  q.xz = Rot2Cs (q.xz, tubRotCs);\n  q.xy = Rot2Cs (Rot2Cs (Rot2Cs (q.xy, CosSin (0.5 * pi)) - vec2 (0., dLoop), aLoopCs),\n     CosSin (-0.5 * pi));\n  dc = dot (vec2 (q.x, abs (q.y)), sin (aLoop + vec2 (0., 0.5 * pi)));\n  d = max (max (length (Rot2Cs (vec2 (length (q.xy) - dLoop, q.z), tubRotCs)) - rCyl * (1. -\n     0.03 * SmoothBump (0.2, 0.8, 0.15, fract (3. * dLoop * atan (q.y, - q.x) + 0.5))), dc), dy);\n  DMIN (idTube);\n  q.xy = Rot2Cs (q.xy, aLoopCs) + vec2 (dLoop, 0.);\n  q.xz = Rot2Cs (q.xz, tubRotNCs);\n  d = max (max (length (q.xz) - rCyl * (1. - 0.03 * SmoothBump (0.2, 0.8, 0.15,\n     fract (3. * q.y + 0.5))), abs (q.y - lEnd) - lEnd - 0.01), dy);\n  DMIN (idEnd);\n  q.y -= 2. * lEnd + 0.1;\n  d = PrRoundCylDf (q.xzy, rCyl + 0.1, 0.05, 0.05);\n  DMIN (idEx);\n  q.y -= 0.5;\n  d = PrCapsDf (q.xzy, 0.25, 0.8);\n  DMINQ (idCen);\n  q.xz = Rot2Cs (abs (q.xz), CosSin (0.25 * pi));\n  q.yz = Rot2Cs (q.yz - vec2 (0.2, 0.), bkAopCs) - vec2 (0.9, 0.);\n  d = abs (PrEllips2Df (q.xzy, vec2 (0.8, 1.1))) - 0.02;\n  if (bkAopCs.y != 0.) d = max (d, - Minv2 (Rot2Cs (q.xz, CosSin (-0.25 * pi))));\n  DMIN (idBk);\n  return 0.8 * dMin;\n}\n\nfloat GObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  q = p;\n  q.xz -= cMid.xz;\n  q.y -= 0.1 + 0.6 * cMid.y;\n  d = max (length (q.xz) - 0.05, q.y);\n  DMIN (idCyl);\n  if (! isRefl) dMin = szFac * TWormDf (q / szFac, dMin / szFac);\n  return dMin;\n}\n\nvoid SetGConf ()\n{\n  vec4 r4;\n  vec2 u;\n  float tCyc, t, tt, tubRot, sLoop;\n  u = Hashv2v2 (cId);\n  cMid.xz = HexToPix (cId * gSize) + vorAmp * (0.4 + 0.6 * u.x) * CosSin (2. * pi * (u.y - 0.5));\n  cMid.y = 0.8 * (1. + Hashfv2 (u));\n  r4 = Hashv4v2 (19.1 * cId + 99.1);\n  tCyc = 20. + 10. * r4.x;\n  t = (tCur + 13.1) / tCyc;\n  tubRot = mod ((10. + 5. * r4.y) * t, 2. * pi) * sign (r4.z - 0.5);\n  tubRotCs = CosSin (tubRot);\n  tubRotNCs = CosSin (- tubRot);\n  t = fract (t);\n  sLoop = (1. / (1. + 0.25 * r4.w)) / (0.01 + 0.9 * SmoothBump (0.25, 0.75, 0.15, t));\n  dLoop = 6. * sLoop;\n  aLoop = 0.25 * pi / sLoop;\n  aLoopCs = CosSin (aLoop);\n  lEnd = 1.;\n  hBase = - (6. * (0.5 * pi) + 4. * lEnd) * (1. - SmoothBump (0.1, 0.9, 0.08, t));\n  tt = fract ((12. - 0.6 * r4.y) * t);\n  bkAopCs = CosSin (-0.4 * pi * (smoothstep (0.1, 0.4, tt) - smoothstep (0.7, 0.8, tt)) *\n     SmoothBump (0.3, 0.7, 0.1, t));\n  szFac = 0.04 * (0.7 + 0.3 * r4.w);\n}\n\nfloat GObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, cIdP;\n  float dHit, d, s, eps;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  eps = 0.001;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = gSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / gSize;\n  pM = HexToPix (PixToHex (ro.xz / gSize));\n  hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n  s = Minv3 (hv);\n  cIdP = vec2 (-999.);\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    cId = PixToHex (p.xz / gSize);\n    if (cId != cIdP) {\n      cIdP = cId;\n      SetGConf ();\n    }\n    d = GObjDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = Minv3 (hv);\n    }\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 GObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.0002, -0.0002);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = GObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat WaveHt (vec2 p)\n{ // (based on \"Spruce Goose\")\n  const mat2 qRot = mat2 (1.6, -1.2, 1.2, 1.6);\n  vec4 t4;\n  vec2 q, t, tw;\n  float wFreq, wAmp, h;\n  wFreq = 1.;\n  wAmp = 0.1;\n  q = p + waterDisp.xz;\n  tw = 0.5 * tCur * vec2 (1., -1.);\n  h = 0.;\n  for (int j = VAR_ZERO; j < 3; j ++) {\n    t4 = wFreq * (q.xyxy + tw.xxyy);\n    t4 = abs (sin (t4 + 2. * Noisev2v4 (t4).xxyy - 1.));\n    t4 = (1. - t4) * (t4 + sqrt (1. - t4 * t4));\n    t = 1. - sqrt (t4.xz * t4.yw);\n    t *= t;\n    h += wAmp * dot (t, t);\n    q *= qRot;\n    wFreq *= 2.;\n    wAmp *= 0.25;\n  }\n  return 0.2 + h;\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  dHit = dstFar;\n  if (rd.y < 0.) {\n    s = 0.;\n    sLo = 0.;\n    for (int j = VAR_ZERO; j < 80; j ++) {\n      p = ro + s * rd;\n      h = p.y - WaveHt (p.xz);\n      if (h < 0.) break;\n      sLo = s;\n      s += max (0.3, h) + 0.005 * s;\n      if (s > dstFar) break;\n    }\n    if (h < 0.) {\n      sHi = s;\n      for (int j = VAR_ZERO; j < 5; j ++) {\n        s = 0.5 * (sLo + sHi);\n        p = ro + s * rd;\n        h = step (0., p.y - WaveHt (p.xz));\n        sLo += h * (s - sLo);\n        sHi += (1. - h) * (s - sHi);\n      }\n      dHit = sHi;\n    }\n  }\n  return dHit;\n}\n\nvec4 WaveNf (vec3 p, float d)\n{\n  vec2 e;\n  float h;\n  e = vec2 (max (0.01, 0.005 * d * d), 0.);\n  h = WaveHt (p.xz);\n  return vec4 (normalize (vec3 (h - vec2 (WaveHt (p.xz + e.xy),\n     WaveHt (p.xz + e.yx)), e.x)).xzy, h);\n}\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvoid SetVorp (vec2 ip)\n{\n  vec2 u;\n  ipp = ip;\n  for (int k = VAR_ZERO; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    vVec[k].d = hVec[k] + vorAmp * (0.4 + 0.6 * u.x) * CosSin (2. * pi * (u.y - 0.5));\n    vVec[k].r = Hashfv2 (u);\n  }\n}\n\nvec4 HexVor (vec2 fp)\n{\n  vec4 sd;\n  vec2 d, dm;\n  float r;\n  sd = vec4 (4.);\n  dm = vec2 (4.);\n  for (int k = VAR_ZERO; k < 7; k ++) {\n    d = vVec[k].d - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      dm = d;\n      r = vVec[k].r;\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.2) - sd.x, dm, r);\n}\n\nfloat VObjDf (vec3 p)\n{ // (based on \"Voronoi Rocks\")\n  vec2 ip;\n  float dMin, d, h;\n  dMin = dstFar;\n  ip = PixToHex (p.xz);\n  if (ipp != ip) SetVorp (ip);\n  vVal = HexVor (p.xz - HexToPix (ip));\n  h = 0.8 * (1. + vVal.w);\n  d = p.y - max (SmoothMin (0.6, SmoothMax (0., vVal.x, 0.6), 0.3) * h *\n     (1. - dot (vVal.yz, vVal.yz)), 0.);\n  DMIN (idRok);\n  return 0.5 * dMin;\n}\n\nfloat VObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    d = VObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 VObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = VObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float sd, f;\n  ro.x += 0.5 * tCur;\n  f = Fbm2 (0.05 * (rd.xz * (100. - ro.y) / rd.y + ro.xz));\n  sd = pow (max (dot (rd, sunDir), 0.), 64.);\n  col = vec3 (0.1, 0.2, 0.5) + 0.1 * pow (1. - max (rd.y, 0.), 4.) +\n     (0.35 * sd + 0.65 * min (pow (sd, 4.), 0.3)) * vec3 (1., 1., 0.3);\n  return mix (col, vec3 (0.85), clamp (f * rd.y + 0.1, 0., 1.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, vh4;\n  vec3 vn, col;\n  float dstObj, dstObjV, dstObjG, dstWat, hWat, hRok, s, nDotL;\n  int idObjG;\n  bool waterRefl;\n  HexVorInit ();\n  vorAmp = 0.5;\n  gSize = 1.;\n  ipp = vec2 (-999.);\n  dstWat = WaveRay (ro, rd);\n  isRefl = false;\n  for (int k = VAR_ZERO; k < 2; k ++) {\n    dstObjG = GObjRay (ro, rd);\n    idObjG = idObj;\n    dstObjV = VObjRay (ro, rd);\n    dstObj = min (dstObjV, dstObjG);\n    if (k == 0) {\n      waterRefl = (dstWat < min (dstObj, dstFar));\n      if (waterRefl) {\n        ro += dstWat * rd;\n        vh4 = WaveNf (ro, dstWat);\n        hWat = vh4.w;\n        rd = reflect (rd, vh4.xyz);\n        ro += 0.1 * rd;\n        isRefl = true;\n      }\n    } else break;\n  }\n  if (dstObj < dstFar) {\n    if (dstObjV < dstObjG) {\n      ro += dstObjV * rd;\n      vn = VObjNf (ro);\n    } else {\n      ro += dstObjG * rd;\n      vn = GObjNf (ro);\n      idObj = idObjG;\n    }\n    if (idObj == idRok) vn = VaryNf (32. * ro, vn, 10. * (1. -\n       smoothstep (0.7, 0.9, dstObj / dstFar)));\n    nDotL = max (dot (vn, sunDir), 0.);\n    if (idObj == idRok) {\n      hRok = vVal.w;\n      s = Noisefv3 (16. * (1. + hRok) * ro);\n      if (ro.y > 0.05) col4 = vec4 (mix (vec3 (0.3, 0.4, 0.3) * (0.8 + 0.4 * hRok),\n         vec3 (0.5 * (1. + 0.2 * hRok), 0.6, 0.6), smoothstep (0.3, 0.5, s) *\n         smoothstep (0.3, 0.4, ro.y)) * (1. - 0.1 * s) * (0.6 + 0.4 *\n         smoothstep (0.3, 0.5, ro.y)), 0.);\n      else col4 = vec4 (0.1, 0.2, 0.1, 0.);\n    } else if (idObj == idCyl) {\n      col4 = vec4 (0.5, 0.2, 0., 0.1);\n    } else if (idObj == idCen && qHit.y > 0.1) {\n      col4 = vec4 (0.8 + 0.2 * sin (32. * pi * tCur), 0., 0., -1.);\n    } else {\n      col4 = vec4 (HsvToRgb (vec3 (0.9 * Hashfv2 (17.1 * cId), 0.3, 0.9)), 0.2);\n      nDotL *= nDotL;\n    }\n    if (col4.a >= 0.) col = col4.rgb * (0.2 + 0.1 * max (vn.y, 0.) + 0.8 * nDotL) +\n       col4.a * pow (max (dot (reflect (sunDir, vn), rd), 0.), 32.);\n    else col = col4.rgb * (0.6 - 0.4 * dot (vn, rd));\n  } else col = SkyCol (ro, rd);\n  if (waterRefl) {\n    col = mix (mix (vec3 (0.1, 0.15, 0.1), vec3 (0.1, 0.1, 0.12),\n       smoothstep (0.4, 0.6, Fbm2 (10. * ro.xz))), 0.8 * col, 1. - pow (abs (rd.y), 3.));\n    col = mix (col, vec3 (0.7), pow (clamp (hWat + 0.75 * Fbm3 (2. * ro), 0., 1.), 8.));\n  } else {\n    col = mix (col, SkyCol (ro, rd), smoothstep (0.8, 1., dstObj / dstFar));\n  }\n  return pow (clamp (col, 0., 1.), vec3 (0.9));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvv;\n  float el, az, asp, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  az = 0.3 * pi * sin (0.02 * pi * tCur);\n  el = -0.15 * pi + 0.05 * pi * sin (0.022 * pi * tCur);\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.4 * pi, 0.05 * pi);\n  vuMat = StdVuMat (el, az);\n  zmFac = 3.;\n  ro = vec3 (0.01, 2., -0.2 * tCur);\n  dstFar = 40.;\n  sunDir = vuMat * normalize (vec3 (-0.5, 1., -1.));\n  waterDisp = 0.1 * tCur * vec3 (1., 0., 1.);\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi)) / zmFac;\n    rd = vuMat * normalize (vec3 ((2. * tan (0.5 * atan (uvv.x / asp))) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrEllips2Df (vec3 p, vec2 r)\n{\n  return (length (p / r.xxy) - 1.) * min (r.x, r.y);\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1.,\n     0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + vec4 (0., 1., 57., 58.)) * cHashM);\n}\n\nvec4 Hashv4v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39);\n  return fract (sin (dot (p, cHashVA2) + vec4 (0., cHashVA2.xy, cHashVA2.x + cHashVA2.y)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xy, cHashVA3.x + cHashVA3.y)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nvec2 Noisev2v4 (vec4 p)\n{\n  vec4 ip, fp, t1, t2;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t1 = Hashv4f (dot (ip.xy, vec2 (1., 57.)));\n  t2 = Hashv4f (dot (ip.zw, vec2 (1., 57.)));\n  return vec2 (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n               mix (mix (t2.x, t2.y, fp.z), mix (t2.z, t2.w, fp.z), fp.w));\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p = 2. * p.yzx;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n)) * (1. / 1.9375);\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}