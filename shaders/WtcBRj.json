{
    "Shader": {
        "info": {
            "date": "1613011109",
            "description": "fork- ShyGuys in SMB2 -v2",
            "flags": 8,
            "hasliked": 0,
            "id": "WtcBRj",
            "likes": 5,
            "name": "fork- ShyGuys in SMB2 -v2",
            "published": 3,
            "tags": [
                "forkshyguysinsmb2v2"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 273
        },
        "renderpass": [
            {
                "code": "//modificado por jorge2017a1 ...jorge flores p.!!!\n///fork- ShyGuys in SMB2\n//https://www.shadertoy.com/view/wl3cWS\n// ShyGuys in SMB2\n///Created by IWBTShyGuy in 2021-01-04\n\n\n\n\nconst int SCREEN_BLOCK = 8;\nconst int GROUND_HEIGHT = 1;\nconst float SHYGUY_VELOCITY = 6.5;\n\nconst float fSCREEN_BLOCK = float(SCREEN_BLOCK);\n\nconst vec4 BACKGROUND = vec4(60, 188, 252, 255) / 255.0;\n\n\n\n///------------------\n\n#define PI 3.14159265359\n#define PI2 PI*2.0\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n\n\n//https://www.shadertoy.com/view/wl3cWS\n// ShyGuys in SMB2\n\n\n// ---------------- Ground Tile ---------------- //\nconst int N_GBD = 10;\nconst ivec2 groundBlockDot[N_GBD] = ivec2[](\n    ivec2(2, 0), ivec2(11, 1), ivec2(6, 2), ivec2(15, 3), ivec2(3, 4),\n    ivec2(10, 5), ivec2(0, 6), ivec2(5, 6), ivec2(13, 6), ivec2(8, 7)\n);\n\n\nconst vec4 LIGHT_BROWN = vec4(248, 184, 0, 255) / 255.0;\nconst vec4 DARK_BROWN = vec4(83, 48, 0, 255) / 255.0;\n\nvec4 groundTile(in vec2 uv) \n{\n    uv.y = 1.0 - uv.y;\n    \n    uv *= 16.0;\n    ivec2 st = ivec2(floor(uv));\n    st %= ivec2(16, 8);\n    \n    for (int i = 0; i < N_GBD; i++) {\n        if (st == groundBlockDot[i])\n            return DARK_BROWN;\n    }\n    return LIGHT_BROWN;\n    //return vec4(1.0);\n}\n\n\n\nconst vec4 BLACK = vec4(0, 0, 0, 1);\nconst vec4 SEMI_WHITE = vec4(252, 252, 252, 255) / 255.0;\n\nconst vec4 LIGHT_GREEN = vec4(128, 208, 16, 255) / 255.0;\nconst vec4 MIDDLE_GREEN = vec4(0, 168, 0, 255) / 255.0;\nconst vec4 DARK_GREEN = vec4(0, 80, 0, 255) / 255.0;\n\n\n// ---------------- Grass Tile ---------------- //\nvec4 grassTile(in vec2 uv) {\n    uv.y = 1.0 - uv.y;\n    ivec2 iuv = ivec2(uv * 16.0);\n    \n    switch (iuv.y) \n    {\n    case 0: case 15:\n        return DARK_GREEN;\n        \n    case 2: switch (iuv.x) \n    {\n        case 12: case 14: return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    \n    case 3: switch (iuv.x) {\n        case 5: case 13: return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 4: switch (iuv.x) {\n        case 2: case 3: case 5: case 7: case 8:\n            return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 5: switch (iuv.x) {\n        case 3: case 4: case 5: case 6: case 7:\n            return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 6: switch (iuv.x) {\n        case 4: case 5: case 6: return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 10: switch (iuv.x) {\n        case 5: case 14: return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 11: switch (iuv.x) {\n        case 1: case 5: case 10: case 14:\n            return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 12: switch (iuv.x) {\n        case 3: case 4: case 7: case 8: case 12: case 15:\n            return LIGHT_GREEN;\n        default: return MIDDLE_GREEN;\n    }\n    case 13: switch (iuv.x) {\n        case 3: return LIGHT_GREEN;\n        case 1: case 5: case 10: case 14:\n            return DARK_GREEN;\n        default: return MIDDLE_GREEN;\n    }\n    case 14: switch (iuv.x) {\n        case 0: case 3: case 7: case 8: case 12:\n            return MIDDLE_GREEN;\n        default: return DARK_GREEN;\n    }\n    default:\n        return LIGHT_GREEN;\n    }\n}\n\n\n\n\n///--------------------------------\n// ---------------- Tree ---------------- //\nconst vec4 STEM_BROWN = vec4(200, 76, 12, 255) / 255.0;\n\nvec4 stem(in vec2 uv) {\n    ivec2 iuv = ivec2(uv * 16.0);\n    switch (iuv.x) {\n        case 7: return STEM_BROWN;\n        case 6:\n        case 8:\n        case 9: return BLACK;\n        default: return vec4(0);\n    }\n}\n\n\nconst int LEAF_BITMAP[256] = int[](\n3,3,3,3,3,3,1,1,1,1,1,3,3,3,3,3,\n3,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,\n3,1,1,0,0,1,1,1,0,1,1,1,1,1,1,3,\n1,1,1,0,0,1,1,1,0,1,1,1,1,1,1,3,\n1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,3,\n3,1,1,1,1,1,1,1,1,1,1,0,1,1,1,3,\n3,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,\n3,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,\n3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,3,\n3,3,3,1,1,1,1,1,1,1,1,3,3,3,3,3,\n3,3,3,3,3,1,1,1,1,3,3,3,3,3,3,3,\n3,3,3,3,3,3,2,2,2,3,3,3,3,3,3,3,\n3,3,3,3,3,3,2,2,2,3,3,3,3,3,3,3,\n3,3,3,3,3,3,2,2,2,3,3,3,3,3,3,3,\n3,3,3,3,3,3,2,2,2,3,3,3,3,3,3,3,\n3,3,3,3,3,3,2,2,2,3,3,3,3,3,3,3\n);\n\nint readLeafBitMap(in vec2 uv) {\n    uv.y = 1.0 - uv.y;\n    uv *= 16.0;\n    return LEAF_BITMAP[int(uv.y) * 16 + int(uv.x)];\n}\n\nvec4 leaf(in vec2 uv)\n{\n    switch (readLeafBitMap(uv)) \n     {\n        \n        \n        case 0: return vec4(1.0,0.0,0.0,1.0);\n        case 1: return vec4(1.0,1.0,0.0,1.0);\n        case 2: return LIGHT_GREEN;\n        case 3: return vec4(0);\n        \n        default: return vec4(0);\n    }\n}\n\n\n\n///----leeer mario\n\nconst int MARIO_BITMAP[256] = int[](\n6,6,6,6,1,1,1,1,1,1,1,1,6,6,6,6,\n6,6,6,1,1,1,1,1,1,1,1,1,1,1,1,6,\n6,6,6,0,0,0,0,3,3,3,3,5,3,6,6,6,\n6,6,0,3,0,3,3,3,3,3,3,5,3,3,3,6,\n6,6,0,3,0,0,3,3,3,3,3,3,5,3,3,3,\n6,6,0,0,3,3,3,3,3,3,5,5,5,5,5,6,\n6,6,6,6,3,3,3,3,3,3,3,3,3,3,6,6,\n6,6,6,1,1,2,1,1,1,1,2,1,6,6,6,6,\n6,6,1,1,1,2,1,1,1,1,2,1,1,1,6,6,\n6,1,1,1,1,2,2,2,2,2,2,1,1,1,1,6,\n6,3,3,1,2,4,2,2,2,2,4,2,1,3,3,6,\n6,3,3,3,2,2,2,2,2,2,2,2,3,3,3,6,\n6,3,3,2,2,2,2,2,2,2,2,2,2,3,3,6,\n6,6,6,2,2,2,6,6,6,6,2,2,2,6,6,6,\n6,6,0,0,0,6,6,6,6,6,6,0,0,0,6,6,\n6,0,0,0,0,6,6,6,6,6,6,0,0,0,0,6\n);\n\nint readMarioBitMap(in vec2 uv) \n{\n    uv.y = 1.0 - uv.y;\n    uv *= 16.0;\n    return MARIO_BITMAP[int(uv.y) * 16 + int(uv.x)];\n}\n\nvec4 mario(in vec2 uv)\n{\n    switch (readMarioBitMap(uv)) \n     {\n     \n \n        case 0: return vec4(0.627, 0.408, 0.0,1.0);\n        case 1: return vec4(1.0,0.0,0.0,1.0);\n        case 2: return vec4(0,0.698,0.922,1.0);\n        case 3: return vec4(0.976,0.804,0.541,1.0);\n        case 4: return vec4(0.976,0.957,0,1.0);\n        case 5: return vec4(0,0,0,1.0);\n        //case 6: return vec4(1,1,1,1);\n\n        default: return vec4(0);\n    }\n}\n\n///---------------\n\n\n///--------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n   float t1=mod(iTime, 3.0);\n   float t2=mod(iTime, 2.0);\n   float t3=mod(iTime, 1.0);\n   vec2 uv;\n   if (t2<t1)\n       if (t3<t2)\n         uv = fragCoord/iResolution.xy;\n       else\n        uv = ((2.0 * fragCoord - iResolution.xy) / iResolution.y + 1.0) / 3.0;\n   else\n        uv = ((2.0 * fragCoord - iResolution.xy) / iResolution.y + 1.0) / 1.5;\n    \n   \n    \n    vec3 colOut=vec3(0.5,0.3,1.0);\n\n    \n    uv *= fSCREEN_BLOCK;\n    ivec2 iuv = ivec2(floor(uv));\n    \n   \n   vec4 fcol=vec4(0.0);\n   \n    uv = fract(uv);\n     vec2 uv2=uv;\n    uv2.x=mod(uv.x,2.0);\n    \n    if (iuv.y < GROUND_HEIGHT) fcol = groundTile(uv);\n    else if (iuv.y == GROUND_HEIGHT) fcol = grassTile(uv);\n    \n    else if (iuv.x == SCREEN_BLOCK - 2)\n    {\n        fcol = stem(uv);\n    } else if (iuv.x == SCREEN_BLOCK - 3) \n    {\n        if (iuv.y < SCREEN_BLOCK - 3) \n        {\n            fcol = stem(uv);\n        } else if (iuv.y == SCREEN_BLOCK - 3) \n        {\n            fcol = leaf(uv);\n            \n        }\n    }\n    \n    \n   if (iuv.y == 2 && iuv.x==4) fcol =  mario(uv);\n   if (iuv.y == 2 && iuv.x==1) fcol = leaf(uv); \n   if (iuv.y == 2 && iuv.x==7) fcol = leaf(uv);\n    \n     if (fcol.w == 0.0) fcol = BACKGROUND;\n    colOut=fcol.xyz;\n    \n    vec4 color =vec4(colOut, 1.0);\n  \tfragColor = color;\n\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//modificado por jorge.flores.p.\n//I don't remember the reference ..\n//.. I don't have the author's name .... I forgot to save\n\nfloat fm(float time){\n  return sin(1000.*time+sin(300.*time));\n}\nfloat rhy(float time,float f){\n  return pow(fract(mod(-time*8.,8.)/3.),6.-3.*f);\n}\nvec2 dfm(float time,float dt){\n    return exp(-3.0*dt)*\n        fm(8.*time)*\n        vec2(rhy(time-.3*dt,dt),rhy(time-.5*dt,dt));\n}\nvec2 mainSound( in int samp,float time){\n  vec2 s;\n  s += vec2(3.0*sin(3e2*time)*pow(fract(-time*2.),4.))*2.0;\n  s += vec2(0.5*sin(4e5*time)*fract(-time*2.+.5))*10.0;\n  s += dfm(time,0.0);\n  s += dfm(time,0.5);\n  s += dfm(time,1.0);\n  s += dfm(time,2.0);\n  s += dfm(time+2.0*sin(mod(time*0.5,6.)),8.0);\n  s += dfm(time+4.0*cos(mod(time*0.5,5.)),16.0);\n    \n  vec2 s2=  vec2((fract(sin(time*1e3)*1e6)-.5)*pow(fract(-time*4.),mod(time*4.,2.)*8.))*8.0;\n  return 0.3*s+s2;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}