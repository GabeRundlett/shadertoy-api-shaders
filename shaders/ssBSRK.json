{
    "Shader": {
        "info": {
            "date": "1620559000",
            "description": "click for new seeds.\nAnother illustration of how MIPmap on not power-of-2 texture is wrong:\na few dots are drawn in white in the Buffer.\nsquares = where LOD 4,5,6 > 0 in the MIPmap of Buffer.\nâ†’ squares sometime out of dot, + dot location in squares biased",
            "flags": 32,
            "hasliked": 0,
            "id": "ssBSRK",
            "likes": 5,
            "name": "how MIPmap is wrong",
            "published": 3,
            "tags": [
                "glsl",
                "mipmap",
                "bug"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 393
        },
        "renderpass": [
            {
                "code": "// compare to Cubemap version ( power-of-2 texture ) : https://www.shadertoy.com/view/ssjXzK\n\n#define col(l)   m = T(U,l).w * float(1<<(2*l)); if (m > 0.01 ) O\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = vec4(T(U,0).w);        // particles\n    float m;\n    \n#if 0                          // ( better with texelFetch ) \n    col(4).g += .3;\n    col(5).r += .2 + .2* m;\n    col(6).b += .2 + .1* m;\n // col(4).g += m/2.; col(5).r += m/2.; col(6).b += m/2.; // cloud color scheme\n#else\n    col(4).g += .3;\n    col(5).r += .4; // .2 + .2* m*2.;// (.5+.5*cos(24.*m))*m*2.;\n    col(6).b += .5; // .2 + .1* m*2.;\n // col(1).b -= .5;            // more LODs\n // col(2).r -= .4; \n // col(3).g -= .3;\n#endif\n\n// if (m>0.) O +=  ( .6 + .6 * cos( 6.3*(m/6.)  + vec4(0,23,21,0)  ) ) * (m>6. ? 1. : .5);  // hue\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// .xy = particle coords  .w = density field : +1 at particle location then MIPmap\n\n#define hash2(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n        if (iFrame == 0 || iMouse.w > 0. ) {                  // --- initialization\n            O = vec4( hash2(U+iTime) *R ,  0,-1 );            // random coords\n            return;\n        }\n        \n        O = T(U,0);                                           // recover previous state\n        \n        if ( O.w < 0. ) {                                     // new coords not yet splated \n            O.w = 0.;\n            for ( float y = .5; y < .01*R.y; y++ )            // splat some particles on screen\n                for ( float x = .5; x < .01*R.x; x++ )\n                    if( floor(T(vec2(x,y),0).xy) == floor(U) )    // if point in pixel, splat \n                        { O.w++; return; }\n          }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define R        iResolution.xy\n\n//#define T(U,l)   texelFetch( iChannel0, ivec2(U) / (1<<(l)), l ) // using texelFetch array\n//#define T(U,l)   texelFetch( iChannel0, ivec2( (U)/R*vec2(textureSize(iChannel0,l).xy) ), l ) \n\n  #define T(U,l)   textureLod( iChannel0, (U)/R, float(l) )        // using texture interpolation\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}