{
    "Shader": {
        "info": {
            "date": "1626759973",
            "description": "Simple example of plants revolving along the sun. \nOne this not implemented right now is to handle what happens when objects go behind each other. That will be handled in another example. ",
            "flags": 0,
            "hasliked": 0,
            "id": "ftXSWs",
            "likes": 0,
            "name": "Revolving Planets",
            "published": 3,
            "tags": [
                "plantes",
                "simpleraytracing"
            ],
            "usePreview": 0,
            "username": "napsternxg",
            "viewed": 222
        },
        "renderpass": [
            {
                "code": "float PI = radians(180.);\n\nfloat makeCircle(vec3 p, vec3 rd, float r){\n    /**\n    Find inside of circle based on position vector and ray direction\n    Remember each point on screen gets its own ray direction\n    We use the normal vector of the point to control its brightness on screen.\n    **/ \n    float n = length(cross(p, rd));\n    n = smoothstep(r-0.02, r, n);\n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv = fract(5.*uv);\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    \n    // Camera Source - Ray Source\n    vec3 ro = vec3(0., 0., -1.);\n    \n    // Ray Direction\n    vec3 rd = vec3(uv.x, uv.y, 0);\n    rd -= ro; // Vector\n    rd /= length(rd); // Normalize\n    \n    int numC = 5;\n    \n    vec3 p = vec3(0.);\n    float n = 0.;\n    vec3 cCol = vec3(1., 0., 0.);\n    \n    vec3 sceneCenter = vec3(0., 0., 5.);\n    sceneCenter -= ro;\n    \n    p = sceneCenter;\n    //p -= ro; // position vector with respect to camera\n    cCol = vec3(1., 1., 0.);\n    float nScene = makeCircle(p, rd, 0.5);\n    n = nScene;\n    col = mix(cCol, col, n);\n    float theta = PI/4.;\n    mat2 rot = mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n    \n    for(int i=0; i < numC; i++){\n        float id = smoothstep(0., float(numC), float(i+1));\n        p = vec3(cos(id*1.*iTime), 0.0*(id), 5.*sin(id*1.*iTime));\n        // Define a new plane of rotation around the sun for the planet\n        theta = (id-.5)*PI/4.;\n        rot = mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n        p.xy *= rot;\n        p += sceneCenter;\n        //p *= 3.;\n        //p -= ro; // position vector with respect to camera\n        cCol = vec3(id, 1.-id, id*id);\n        //cCol = vec3((id+0.5));\n        n = makeCircle(p, rd, 0.2*(0.5+id));\n        //n = min(nScene, n);;\n        //if(n>0. && nScene > 0. && dot(p - sceneCenter, rd) > 0.){\n        //    n = nScene;\n        //}\n        // step(0., -dot(p - sceneCenter, rd)\n        //n *= mix(nScene, n, step(0., -length(p) + nScene*length(sceneCenter)));\n        //n /= 2.;\n        //n = makeCircle(p, rd, 0.5);\n        col = mix(cCol, col, n);\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}