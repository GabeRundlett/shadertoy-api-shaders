{
    "Shader": {
        "info": {
            "date": "1570473197",
            "description": "Exercise in implementation of Gaussian filters (from left to right):\n - Gaussian Blur\n - Bilateral Gaussian Blur\n - Joined Bilateral Gaussian Blur\n - unfiltered image for comparison",
            "flags": 0,
            "hasliked": 0,
            "id": "3stGWl",
            "likes": 9,
            "name": "Joined Bilateral Gaussian Blur",
            "published": 3,
            "tags": [
                "2d",
                "blur",
                "filter",
                "gaussian",
                "bilateral",
                "joined",
                "klos"
            ],
            "usePreview": 0,
            "username": "spolsh",
            "viewed": 1447
        },
        "renderpass": [
            {
                "code": "// Copyright Â© 2019 Michal 'spolsh' Klos\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// Exercise in implementation of Gaussian filters (from left to right):\n//  - Gaussian Blur\n//  - Bilateral Gaussian Blur\n//  - Joined Bilateral Gaussian Blur\n//  - Unfiltered image for comparison\n//\n// Not used separability and parameters are left not hardcoded for sake of no performance \n//  to allow interactive preview for different values - move the mouse.\n//\n// based on DF Gaussian Blur by demofox https://www.shadertoy.com/view/MtlSWj\n\n#define F gl_FragCoord\n#define R iResolution\n#define M iMouse\n\nconst float c_halfSamplesX = 16.;\nconst float c_halfSamplesY = 16.;\n\nfloat g_sigmaX = 1.;\nfloat g_sigmaY = 1.;\nfloat g_sigmaV = 1.;\n\nvec2 g_pixelSize = vec2(0.001);\nvec2 g_pixelSizeGuide = vec2(0.001);\n\nfloat Luminance(vec3 rgb)\n{\n    return dot(rgb, vec3(0.2125, 0.7154, 0.0721));\n}\n\nfloat Gaussian(float sigma, float x)\n{\n    return exp(-(x*x) / (2.0 * sigma*sigma));\n}\n\nvec3 GaussianBlur(vec2 uv)\n{   \n    float total = 0.0;\n    vec3 ret = vec3(0);\n        \n    for (float iy = -c_halfSamplesY; iy <= c_halfSamplesY; iy++)\n    {\n        float fy = Gaussian(g_sigmaY, iy);\n        float offsety = iy * g_pixelSize.y;\n\n        for (float ix = -c_halfSamplesX; ix <= c_halfSamplesX; ++ix)\n        {\n            float fx = Gaussian(g_sigmaX, ix);\n            float offsetx = ix * g_pixelSize.x;\n            \n            total += fx*fy;            \n            ret += fx*fy * texture(iChannel0, uv + vec2(offsetx, offsety)).rgb;\n        }\n    }\n        \n    return ret / total;\n}\n\nvec3 BilateralGaussianBlur(vec2 uv)\n{   \n    float total = 0.0;\n    vec3 ret = vec3(0);\n\n    float LPivot = Luminance( texture(iChannel0, uv).rgb );\n    \n    for (float iy = -c_halfSamplesY; iy <= c_halfSamplesY; iy++)\n    {\n        float fy = Gaussian( g_sigmaY, iy );\n        float offsety = iy * g_pixelSize.y;\n\n        for (float ix = -c_halfSamplesX; ix <= c_halfSamplesX; ++ix)\n        {\n            float fx = Gaussian( g_sigmaX, ix );\n            float offsetx = ix * g_pixelSize.x;\n            \n            vec3 value = texture(iChannel0, uv + vec2(offsetx, offsety)).rgb;\n                        \n            float fv = Gaussian( g_sigmaV, abs(Luminance(value) - LPivot) );\n            \n            total += fx*fy*fv;\n            ret += fx*fy*fv * value;\n        }\n    }\n        \n    return ret / total;\n}\n\nvec3 JoinedBilateralGaussianBlur(sampler2D source, sampler2D guide, vec2 uv)\n{   \n    float total = 0.0;\n    vec3 ret = vec3(0);\n\n    float LPivot = Luminance( texture(guide, uv).rgb );\n    \n    for (float iy = -c_halfSamplesY; iy <= c_halfSamplesY; iy++)\n    {\n        float fy = Gaussian( g_sigmaY, iy );\n        float offsety = iy * g_pixelSize.y;\n        float offsetyguide = iy * g_pixelSizeGuide.y;\n\n        for (float ix = -c_halfSamplesX; ix <= c_halfSamplesX; ++ix)\n        {\n            float fx = Gaussian( g_sigmaX, ix );\n            float offsetx = ix * g_pixelSize.x;\n            float offsetxguide = ix * g_pixelSizeGuide.x;\n            \n            vec3 value = texture(source, uv + vec2(offsetx, offsety)).rgb;\n            vec3 valueGuide = texture(guide, uv + vec2(offsetxguide, offsetyguide)).rgb;\n            float luminanceGuide = Luminance(valueGuide);\n            float fv = Gaussian( g_sigmaV, abs(luminanceGuide - LPivot) );\n            \n            total += fx*fy*fv;\n            ret += fx*fy*fv * value;\n        }\n    }\n        \n    return ret / total;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = F.xy / R.xy;\n    \n    g_pixelSize      = 1.0 / iChannelResolution[0].xy;\n    g_pixelSizeGuide = 1.0 / iChannelResolution[1].xy;\n    \n    g_sigmaX      = M.z > 0.0 ? 5.0 * M.x / R.x : 5.0;\n\tg_sigmaY      = g_sigmaX;\n    g_sigmaV      = M.z > 0.0 ? 0.2 * M.y / R.y : 0.05;        \n    \n    if (uv.x < 0.25)\n    \tfragColor = vec4(GaussianBlur(uv), 1.0);\n    else if (uv.x < 0.5)\n    \tfragColor = vec4(BilateralGaussianBlur(uv), 1.0);\n    else if (uv.x < 0.75)\n    \tfragColor = vec4(JoinedBilateralGaussianBlur(iChannel0, iChannel1, uv), 1.0);\n    else\n    \tfragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}