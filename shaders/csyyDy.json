{
    "Shader": {
        "info": {
            "date": "1696523968",
            "description": "a random steps and color extracts of graphene art",
            "flags": 0,
            "hasliked": 0,
            "id": "csyyDy",
            "likes": 4,
            "name": "graphene extracts",
            "published": 3,
            "tags": [
                "generativeart",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "chenxianming",
            "viewed": 916
        },
        "renderpass": [
            {
                "code": "#define I iResolution\n#define PI 3.1415926\n#define T( s ) fract( iTime * s ) * PI * 4.\n#define rot( r ) mat2(cos(r), sin(r), -sin(r), cos(r) )\n\nfloat cg( vec3 p ){\n    float py = p.y;\n\n    py = abs( py ) - .5; // equal to each side\n    py = abs( py );\n    \n    return max(\n      max( abs( p.x ) - .5 * py, abs( p.z ) - .5 * py ),\n      abs( p.y ) - .5\n    );\n}\n\nfloat df(vec3 p)\n{\n\n  p.z -= 2.5;\n  p.xz *= rot( T( .005 ) );\n  \n  float k = .8;\n  \n  for( float i = 0.; i < 16.; i++ ){\n      p.xz *= rot( i );\n      k += i / 5.;\n      p.xz = abs( p.xz ) - .01 * i;\n      p.y -= ( k * .01 ) * ( round( fract( iTime * .05 + .12345 * i ) * 10. ) * .1 );\n      p.zy *= -rot( i );\n  }\n\n  return cg( p );\n}\n\nvec3 l(in vec3 b) {\n  vec2 a = vec2(1, -2) * 2.;\n  return normalize(a.xyy * df(b + a.xyy * 5e-4) + a.yyx * df(b + a.yyx * 5e-4) +\n                   a.yxy * df(b + a.yxy * 5e-4) + a.xxx * df(b + a.xxx * 5e-4));\n}\n\nvoid mainImage( out vec4 U, in vec2 V )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 u = (V * 2.0 - I.xy) / I.y;\n    \n    vec3 c = vec3( 1. - smoothstep( 0., 2., length( u ) - .5 ) ) * vec3( .4, .6, .9 ) * .2, p, n, o = vec3( 0., 0., -3. ), r = vec3( u * .2, 1. );\n    float t, d, i, dp, e = sqrt( 1e-4 );\n    for( ; i < 32.; i++ )\n        p = o + r * t,\n        d = df( p ),\n        dp = ( 1. - abs( d ) / e ),\n        c += ( dp > 0. ) ? .1 * dp / t : 0., // sub but color not rich\n        t += max( abs( d ), e * 2. );\n\n    p = vec3( 0. );\n    t = 0.,\n    i = 0.,\n    dp = 0.;\n    \n    for( ; i < 16.; i++ )\n        p = o + r * t,\n        d = df( p ),\n        dp = ( 1. - abs( d ) / e ),\n        n = dp > 0. ? l( p ) : vec3( 0. ),\n        n = normalize( reflect( p, n ) ) * .25,\n        n += dot( reflect( p, r ), n ) * .7,\n        c += ( dp > 0. ) ? ( n + .25 * ( dp / t ) ) * .6 : vec3(0.),\n        t += max( abs( d ) * .88889, e * .6 );\n\n    // Output to screen\n    U = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}