{
    "Shader": {
        "info": {
            "date": "1681832736",
            "description": "Left-click in highlighted square to set B (=y) and C (=x) filter coefficients.",
            "flags": 0,
            "hasliked": 0,
            "id": "Dlc3Rn",
            "likes": 2,
            "name": "Interactive Mitchell-Netravali",
            "published": 3,
            "tags": [
                "filter",
                "bicubic",
                "mitchell"
            ],
            "usePreview": 1,
            "username": "FordPerfect",
            "viewed": 342
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Interactive Mitchell-Netravali filter demo. See\n//   https://en.wikipedia.org/wiki/Mitchell%E2%80%93Netravali_filters\n//   https://www.cs.utexas.edu/~fussell/courses/cs384g-fall2013/lectures/mitchell/Mitchell.pdf\n// for details on these filetrs (also known as BC-splines).\n\n// Left-click in the highlighted square to set filter coeficients:\n//   B - y position (cyan)\n//   C - x position (yellow)\n\n// For comparison, left hand side shows nearest (bottom), and\n// linear (top) filtering.\n\n// Coefficients for some popular filters:\n//   Catmull-Rom:                               B=  0, C=1/2\n//   Mitchell-Netravali (recommended in paper): B=1/3, C=1/3\n\n// White line is B+2*C=1, recommended in paper.\n\n#define SCALE 4.0\n#define SPEED 0.0\n\nvec3 getTexel(ivec2 xy)\n{\n    return texture(iChannel0,(vec2(xy)+0.5)/vec2(textureSize(iChannel0,0))).rgb;\n}\n\nvec4 getWeights(mat4 W,float t)\n{\n\treturn W*vec4(1.0,t,t*t,t*t*t);\n}\n\nvec3 filterX(ivec2 inputPosFloor,int dy,vec4 w)\n{\n\treturn\n\t\tw.x*getTexel(ivec2(inputPosFloor.x-1,inputPosFloor.y+dy))+\n\t\tw.y*getTexel(ivec2(inputPosFloor.x  ,inputPosFloor.y+dy))+\n\t\tw.z*getTexel(ivec2(inputPosFloor.x+1,inputPosFloor.y+dy))+\n\t\tw.w*getTexel(ivec2(inputPosFloor.x+2,inputPosFloor.y+dy));\n}\n\nvec3 filterBC(vec2 uv,float B,float C)\n{\n\tvec2 xy=(uv-0.5);\n\tivec2 ixy=ivec2(floor(xy));\n\n\tfloat x=xy.x-float(ixy.x);\n\tfloat y=xy.y-float(ixy.y);\n    // Matrix for computing weights.\n    // WARNING: column-major.\n\tmat4 W=mat4(\n\t\tB/6.0      , 1.0-B/3.0   , B/6.0           , 0.0    ,\n\t\t-C-0.5*B   , 0.0         , C+0.5*B         , 0.0    ,\n\t\t2.0*C+0.5*B, C+2.0*B-3.0 , -2.0*C-2.5*B+3.0, -C     ,\n\t\t-C-B/6.0   , -C-1.5*B+2.0, C+1.5*B-2.0     , C+B/6.0);\n\tvec4 Wx=getWeights(W,x);\n\tvec4 Wy=getWeights(W,y);\n\n\treturn\n\t\tWy.x*filterX(ixy,-1,Wx)+\n\t\tWy.y*filterX(ixy, 0,Wx)+\n\t\tWy.z*filterX(ixy,+1,Wx)+\n\t\tWy.w*filterX(ixy,+2,Wx);\n}\n\nfloat line(vec2 pos,float A,float B,float C,float w)\n{\n    float x=dot(pos,vec2(A,B))+C;\n    x/=w;\n    return exp(-0.5*x*x);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    float G=float(iResolution.y)/2.0;\n    float w=1.0/float(SCALE);\n    float v=float(SPEED);\n    vec2 xy=fragCoord;\n    vec2 uv=w*xy+v*float(iResolution.y)*vec2(sin(0.5*iTime),sin(0.37*iTime));\n    vec2 BC=clamp(abs(iMouse.yx),0.0,G)/G;\n\n    vec3 col=fragCoord.x<iResolution.x/2.0?\n        (fragCoord.y<iResolution.y/2.0?\n            getTexel(ivec2(floor(uv))).rgb:\n            texture(iChannel0,(uv)/vec2(textureSize(iChannel0,0))).rgb):\n        filterBC(uv,BC.x,BC.y);\n\n    if(xy.x<G&&xy.y<G)\n    {\n        vec2 mouse=BC.yx*G;\n        col+=0.25;\n        col+=vec3(0.0,1.0,0.0)*exp(-dot(xy-mouse,xy-mouse)/4.0);\n        col+=vec3(1.0,1.0,0.0)*line(xy,1.0,0.0,-mouse.x,0.5);\n        col+=vec3(0.0,1.0,1.0)*line(xy,0.0,1.0,-mouse.y,0.5);\n        col+=vec3(0.5,0.5,0.5)*line(xy,2.0,1.0,-G,1.0);\n    }\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}