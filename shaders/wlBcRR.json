{
    "Shader": {
        "info": {
            "date": "1593601678",
            "description": "variant of [url]https://shadertoy.com/view/wlByRR[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "wlBcRR",
            "likes": 4,
            "name": "Logarithmic Moebius Transform 10",
            "published": 3,
            "tags": [
                "zoom",
                "spiral",
                "mobius",
                "transform",
                "logarithm",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 348
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/wlByRR\n\nvoid mainImage(out vec4 O,  vec2 u ){\n\n    vec2 R = iResolution.xy,  I,\n         U = (u - .5*R) / R.y,                                // normalized coordinates\n         z = U - vec2(-1,0);  U.x -= .5;                      // Moebius transform\n#if 1\n    U *= mat2(z,-z.y,z.x) / dot(U,U);             \n                  // offset   spiral, zoom   phase            // spiraling\n    U =   log(length(U+=.5))*vec2(.5, -.5) + iTime/8.\n        + atan(U.y, U.x)/6.283 * vec2(6, 1); // n    \n#else\n    U.x +=.022; U *= vec2(2.2,1);                             // test in the plane\n    if(u.x/R.y>sqrt(3.)/2.) return;\n#endif\n // U *= vec2(10,14.82)/1.43;// /(.5+iMouse.x/R.x);\n    U *= vec2(11./3., 2./sqrt(3.)*7.5) *2.;                   // thanks Shane !\n    U *= mat2(1,0,.5,sqrt(3.)/2.);                            // triangular mesh\n    z = fwidth(U);\n    I = floor(U); U = fract(U); \n // O = fract(vec4(I.x,I.y,1.-I.x-I.y,0.)/3.)+.33*float(U.x-U.y>0.); return;\n    float s = float(U.x-U.y>0.), v,                           // parallelogram = 2 triangles\n          i = mod( I.x + I.y , 3.), id; \n    I += i==0.? vec2(0) : i==1. ? vec2(1) : vec2(s,1.-s);  id = I.x +7.81*I.y;\n // id = i;\n // id = 6.28*( I.y/6.+I.x/11.)*2.+s*91.;\n    vec4 V = vec4( 1.-2.*abs(U.x-U.y) , abs(U*2.-1.) , 0 );\n // O = smoothstep(-.7,.7, (V-.95)/( abs(z.x-z.y)>1.?.1:z.y*4.));  if (length(O)>.0) return;\n    v = V[i<2. ? 2-int(i+s)%2 : 0 ];\n // v = 1.-2.*abs(U.x-U.y); U = abs(U*2.-1.); v = max(v,max(U.x,U.y)); // dist to border\n    O =   smoothstep(.7,-.7, (v-.95)/( abs(z.x-z.y)>1.?.1:z.y*4.))  // draw AA tiles\n        * (.6 + .6 * cos( id  + vec4(0,23,21,0)  ) );         // color\n // O /= .8+.3*s;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}