{
    "Shader": {
        "info": {
            "date": "1618517463",
            "description": "shaded variant of [url]https://shadertoy.com/view/NdfXR7[/url]\n\nreference: [img]https://i.imgur.com/oxv28g9.png[/img]",
            "flags": 0,
            "hasliked": 0,
            "id": "7sfSDr",
            "likes": 13,
            "name": "impossible boxes piles 2",
            "published": 3,
            "tags": [
                "illusion",
                "escher",
                "isometric",
                "short",
                "reproduction",
                "paradoxical",
                "tomgauld"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 293
        },
        "renderpass": [
            {
                "code": "// shaded variant of https://shadertoy.com/view/NdfXR7\n\n\n#define rot(a)    mat2( cos(a+vec4(0,-1.57,1.57,0)) )    // rotation                  \n\nvoid mainImage(out vec4 O, vec2 U) {    \n    float t=9., T = iTime;\n    vec3  R = iResolution, W = vec3(4,5,4), q,r,a,\n          M = iMouse.z > 0. ? 2.*iMouse.xyz/R -1. :      // try mouse control to see the trick :-)\n                               vec3(.785,.41,0),\n          p = vec3( 10.*(U+U-R.xy)/R.y, 20 );            // ray start. dir = (0,0,-1)\n                                       \n    for ( O-=O ; O.x < 1. && t > .01 ; O+=.01 ) {        // marching point along ray\n        q = p, t = 1.,\n        q.yz *= rot(M.y),                                // rotations\n        q.xz *= rot(M.x);\n        a = abs( r = round(q/W) );                       // box id\n        r = p.y<0. ? r : -r;                             // for \"vertical\" connections\n    \n        if ( a.x*a.z == 0. )\n            if (  a.y == 0. && max(a.x,a.z) < 5.         // 2 rows of boxes\n               || r == vec3(4,1,0) || r == vec3(0,1,4)   // \"vertical\" connections\n               )  q = mod(q+W/2.,W) - W/2.,  \n               // q.xz *= rot(.5*iTime),                 // box rot: try me !\n                  a = abs(q) - 1.2,\n                  t = max( a.x, max(a.y-1.,a.z) );       // box SDF\n        \n        p.z -= .5*t;                                     // step forward = dist to obj          \n    }\n\n                                                         // shading & coloring\n    vec3 N = t<.01 ? sign(q)*vec3(equal(t+vec3(0,1,0),a)) : vec3(0,-1,0),// normal in object space\n         L = 20.*normalize( vec3(cos(.7*T), sin(1.2*T),cos(T+1.)) - vec3(0,0,1.1) ), // light pos\n         V = vec3(0,0,1), H;                             // view dir\n    N.xz *= rot(-M.x),  N.yz *= rot(-M.y);               // to camera space\n\n    p.z *= smoothstep(1.,0.,abs(p.x)/(4.*W.x/sqrt(2.)) );// trick for continuous lighting\n\n    L = normalize( L - p );                              // get light direction\n    H = normalize( L + V );                              // half-vector for specular\n                                                         // shade surface : \n    O =   ( .2 + max(0.,dot(N,L)) ) * ( t < .01 ? vec4(1,0,0,0): vec4(.9,.9,1,1) ) // amb + diff\n        +   pow(max(0.,dot(N,H)),150.);                  // specular\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}