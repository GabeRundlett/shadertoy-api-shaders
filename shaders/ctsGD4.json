{
    "Shader": {
        "info": {
            "date": "1672772790",
            "description": "\"Densor Notation\" is a pun on \"Tensor Notation\" used in Tensor Calculus. \nThe notation is a work in progress, and I plan to update it as I go (:\nI would love input form my betters on how these variables may be designated.",
            "flags": 0,
            "hasliked": 0,
            "id": "ctsGD4",
            "likes": 3,
            "name": "Densor Notation",
            "published": 3,
            "tags": [
                "syntax",
                "notation",
                "densor"
            ],
            "usePreview": 0,
            "username": "Dirk",
            "viewed": 209
        },
        "renderpass": [
            {
                "code": "\n\n    //////////////////////////////\n    //                          //\n    //  DIRK'S DENSOR NOTATION  //\n    //                          //\n    //////////////////////////////\n\n\n    #define  loop mainImage\n\n    #define  iR iResolution\n    #define  iM iMouse\n    #define  iT iTime\n    \n    #define  v2 vec2\n    #define  v3 vec3\n    #define  v4 vec4\n    \n    #define  i2 ivec2\n    #define  i3 ivec3\n    #define  i4 ivec4\n    \n    #define  m2 mat2\n    #define  m3 mat3\n    #define  m4 mat4\n\n    #define  A  abs\n    #define  B  break\n    #define  C  clamp\n    #define  D  dot\n    #define  E  floor\n    #define  F  float\n    #define  G  texelFetch(iChannel0,i2(xy),0)\n    #define H(k) texelFetch(iChannel1,i2(k,0),0)\n    #define  I  int\n    #define  J  \n    #define  K  fract\n    #define  L  length\n    #define  M  max\n    #define  N  normalize\n    #define O(c) for( i=0; i<c; i++ )\n    #define  P  pow\n    #define  Q  mix\n    #define  R  return\n    #define  S  step\n    #define  SS smoothstep\n    #define  T  texture( iChannel2, p )\n    #define U(p) (2.0*p-iR.xy)/iR.y\n    #define  V  void\n    #define  W  min\n    #define  X  cross\n    #define  Y  mirror\n    #define  Z  reflect\n\n\nV loop( out v4 pixar, in v2 pixel )\n{\n    v2 uv = (2.0*pixel-iR.xy)/iR.y;\n    v2 uv2 = K( sin( iT+uv*3.0+cos(iT*2.7+uv))+uv*10.0)-0.5;\n    \n    F f = L( uv2 ) - 0.01;\n    f = SS( 0.02, 0.03, f );\n\n    v3 c = v3( 0.0, 0.7, 0.0 )*( 0.5 + 0.5*f );\n\n    pixar = v4(c,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}