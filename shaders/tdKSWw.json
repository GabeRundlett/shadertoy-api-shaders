{
    "Shader": {
        "info": {
            "date": "1574192494",
            "description": "My participation at Codevember \"shape\"",
            "flags": 0,
            "hasliked": 0,
            "id": "tdKSWw",
            "likes": 4,
            "name": "Codevember07 - Shape",
            "published": 3,
            "tags": [
                "abstract",
                "pattern",
                "rotation",
                "codevember",
                "goa"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 184
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nconst float PI = 3.14159265;\n\nmat2 r2d(float a){float sa = sin(a);float ca=cos(a);return mat2(ca,sa,-sa,ca);}\n\nfloat lenny(vec2 uv)\n{\n  return abs(uv.x)+abs(uv.y);\n}\n\nfloat sat(float a)\n{\n  return clamp(a,0.,1.);\n}\n\nvec3 sat(vec3 v)\n{\n  return vec3(sat(v.x),sat(v.y), sat(v.z));\n}\n\nfloat _sub(float a, float b)\n{\n  return max(-a,b);\n}\n\nfloat _union(float a, float b)\n{\n  return max(a,b);\n}\n\nfloat sdf_sqr(vec2 uv, float sz)\n{\n  return lenny(uv*r2d(PI/4.))-sz;\n}\n\nfloat sdf_sqrborder(vec2 uv, float sz, float th)\n{\n  return _sub(sdf_sqr(uv,sz-th),sdf_sqr(uv,sz));\n}\n\nvec3 rdr(vec2 uv)\n{\n  vec3 col;\n  vec3 acc=vec3(1.);\n  const int cnt = 8;\n  float r=0.2;\n  for (int i=0;i<cnt;++i)\n  {\n    float fi =float(i);\n    float fc = float(cnt);\n    vec2 pos = vec2(sin(iTime+fi),cos(iTime+fi))*r;\n    acc *=sat((vec3(sin(iTime+fi)*0.5+0.9)*sdf_sqrborder(uv-pos,0.9,0.01)*20.));\n  }\n  acc*= sat(sdf_sqr(uv, 0.6)*100.);\n  return col + acc*0.2;\n}\n\nvec3 rdrCross(vec2 uv, float sharp)\n{\n  uv *= r2d(PI/4.);\n  float len = 9.*sin(iTime)*(sin(iTime*7.37));\n  float a = (1.-sat(sdf_sqr(uv*vec2(1.,len), 0.5)*sharp));\n  float b = (1.-sat(sdf_sqr(uv*vec2(len,1.), 0.5)*sharp));\n\n  return vec3(1.)*_union(a,b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xx;\n  uv -= vec2(.5)*(iResolution.xy/iResolution.xx);\n\n  vec3 col;\n  uv*=1.5;\nuv.y = abs(uv.y);\n  uv = uv*r2d(iTime*sign(uv.x)*0.5);\n\n  uv.y = mix(abs(uv.x*uv.y),uv.y,0.5*sin(iTime)+0.5);\n  float modsz = .9*(sin(sign(uv.y)*iTime)*0.2+0.9);\n  uv = mod(uv, vec2(modsz))-vec2(modsz/2.);\n\n  col = rdr(uv);\n  col += 0.5*mix(rdrCross(uv,200.),vec3(1.)*(1.-sat(sdf_sqr(uv,.5)*100.)),-1.);\n\n  col += 0.5*rdrCross(uv*r2d(iTime*3.),10.)*vec3(1.,0.7,0.2);\ncol += 0.5*rdrCross(uv*r2d(-iTime),5.)*vec3(1.,0.7,0.2).xzy;\ncol += vec3(1.,0.9,0.7)*(1.-sat(lenny(uv*2.)))*2.;\n  col *= 1.-lenny(uv*1.)*2.;\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}