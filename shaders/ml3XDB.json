{
    "Shader": {
        "info": {
            "date": "1685735900",
            "description": "Test shader following youtube video",
            "flags": 0,
            "hasliked": 0,
            "id": "ml3XDB",
            "likes": 3,
            "name": "ShadowJ14_ShaderTest",
            "published": 3,
            "tags": [
                "pattern"
            ],
            "usePreview": 0,
            "username": "ShadowJ14",
            "viewed": 292
        },
        "renderpass": [
            {
                "code": "vec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return (a + b * cos(6.28318 * (c * t + d)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    \n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n    \n        float dist = length(uv) * exp(-length(uv0));\n    \n        vec3 a = vec3(0.5, 0.5, 0.5);\n        vec3 b = vec3(0.5, 0.5, 0.5);\n        vec3 c = vec3(1.0, 1.0, 1.0);\n        vec3 d = vec3(0.263, 0.416, 0.557);\n\n    \n        vec3 col = palette(length(uv0) + i * 0.4 + iTime * 0.4, a, b, c, d);\n    \n        dist = sin(dist * 8.0 + iTime) / 8.0;\n        dist = abs(dist);\n    \n        dist = pow(0.01 / dist, 1.2);\n    \n        finalColor += col * dist;\n        //col *= dist;\n\n        // Time varying pixel color\n        //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    }\n\n    \n    \n\n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}