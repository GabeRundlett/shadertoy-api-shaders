{
    "Shader": {
        "info": {
            "date": "1510768613",
            "description": "Another architectural folly; mouse enabled",
            "flags": 0,
            "hasliked": 0,
            "id": "ltXfzr",
            "likes": 8,
            "name": "White Folly 2",
            "published": 3,
            "tags": [
                "raymarch",
                "symmetry",
                "architecture"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 591
        },
        "renderpass": [
            {
                "code": "// \"White Folly 2\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nvoid HexVorInit ();\nvec4 HexVor (vec2 p);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, qHit;\nfloat dstFar, tCur, tWav;\nint idObj;\nconst int idStr = 1, idRail = 2, idFlr = 3, idPil = 4;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qs;\n  float dMin, d, s, aq, a, db;\n  const float flGap = 4., flShift = 3.9, flRad = 9.85, flWid = 1.7, bcRadV = 0.04,\n     bcRadH = 0.07, bcLen = 1.1;\n  dMin = dstFar;\n  q = p;\n  aq = (length (q.xz) > 0.) ? atan (q.z, - q.x) : 0.;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (4. * aq / (2. * pi) + 0.5) / 4.));\n  qs.y = q.y;\n  qs.xz = Rot2D (q.xz + vec2 (11.3, 6.), -0.25 * pi);\n  db = PrBox2Df (qs.yz + vec2 (-8.9, 0.), vec2 (1.4, 0.5));\n  qs.xz = Rot2D (q.xz + vec2 (11.3, -6.), 0.25 * pi);\n  db = min (db, PrBox2Df (qs.yz + vec2 (-1.1, 0.), vec2 (1.2, 0.5)));\n  qs.y = q.y - flGap;\n  qs.xz = Rot2D (vec2 (q.x + 11.3, abs (q.z) - 6.), -0.25 * pi);\n  q.xz = vec2 (- q.z, q.x + 6.);\n  a = (length (q.xz) > 0.) ? atan (q.z, - q.x) : 0.;\n  q.xz = vec2 (28. * a / (2. * pi), length (q.xz) - 8.);\n  q.y += 3.;\n  q.xy = Rot2D (q.xy, 0.25 * pi);\n  s = mod (q.x, 0.5 * sqrt (2.));\n  d = 0.3 * max (max (max (q.y - min (s, 0.5 * sqrt (2.) - s), abs (q.z) - 1.5), -0.07 - q.y), qs.x - 0.1);\n  if (d < dMin) { dMin = d;  idObj = idStr;  qHit = q; }\n  q.z = abs (q.z);\n  q -= vec3 (-11.3, 1.4, 1.43);\n  d = max (min (PrBoxDf (q, vec3 (5.8, 0.9 * bcRadH, bcRadH)),\n     PrBoxDf (vec3 (0.5 * mod (17.8 * a + 0.5, 1.) - 0.25, q.y + 0.7, q.z),\n     vec3 (bcRadV, 0.7, bcRadV))), qs.x - 0.1);\n  if (d < dMin) { dMin = d;  idObj = idRail; }\n  q = p;  q.y = abs (qs.y + 0.05) - flShift;\n  d = PrCylAnDf (q.xzy, flRad, flWid, 0.15);\n  q.xz = qs.xz + vec2 (-2., 0.2);\n  d = min (d, PrBoxDf (q, vec3 (2.1, 0.15, 1.7)));\n  if (d < dMin) { dMin = d;  idObj = idFlr;  qHit = q; }\n  q = vec3 (p.x, abs (qs.y - 2.1) - flShift, p.z);\n  d = min (PrCylAnDf (q.xzy, flRad - flWid + 0.15, bcRadH, bcRadH),\n     max (PrCylAnDf (q.xzy, flRad + flWid - 0.15, bcRadH, bcRadH), 2. - abs (qs.x - 2.)));\n  q.y = abs (qs.y - 1.) - flShift;\n  q.xz = Rot2D (p.xz, 2. * pi * (floor (128. * aq / (2. * pi) + 0.5) / 128.));\n  d = min (min (d, PrBoxDf (vec3 (q.x + flRad - flWid + 0.15, q.yz), vec3 (bcRadV, bcLen, bcRadV))),\n     max (PrBoxDf (vec3 (q.x + flRad + flWid - 0.15, q.yz), vec3 (bcRadV, bcLen, bcRadV)), 2. - abs (qs.x - 2.)));\n  d = min (d, max (min (PrBoxDf (vec3 (qs.x - 2., abs (qs.y - 2.1) - flShift, qs.z - 1.45),\n     vec3 (2., bcRadH, bcRadH)), PrBoxDf (vec3 (mod (qs.x + 0.25, 0.5) - 0.25,\n     abs (qs.y - 1.) - flShift, qs.z - 1.45), vec3 (bcRadV, bcLen, bcRadV))), abs (qs.x - 2.) - 2.));\n  d = min (d, max (min (PrBoxDf (vec3 (qs.x, abs (qs.y - 2.1) - flShift, qs.z), vec3 (bcRadH, bcRadH, 1.45)),\n     max (PrBoxDf (vec3 (qs.x, abs (qs.y - 1.) - flShift,\n     mod (qs.z + 0.25, 0.5) - 0.25), vec3 (bcRadV, bcLen, bcRadV)), abs (qs.z) - 1.45)), - db));\n  if (d < dMin) { dMin = d;  idObj = idRail; }\n  d = min (PrCapsDf (vec3 (qs.x, abs (qs.y - bcLen) - flShift, qs.z - 1.43).xzy, 0.15, 1.2),\n     PrCapsDf (vec3 (qs.x, qs.y - bcLen, qs.z + 1.43).xzy, 0.15, flShift + 1.2));\n  if (d < dMin) { dMin = d;  idObj = idPil;  qHit = q; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 160; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 32; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += max (0.01, h);\n    if (sh < 0.05) break;\n  }\n  return sh;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float f;\n  if (rd.y > 0.) {\n    ro.xz += 2. * tCur;\n    col = vec3 (0.2, 0.3, 0.6) + 0.2 * (1. - max (rd.y, 0.)) +\n       0.1 * pow (max (dot (rd, sunDir), 0.), 16.);\n    f = Fbm2 (0.02 * (ro.xz + rd.xz * (100. - ro.y) / rd.y));\n    col = mix (col, vec3 (1.), 0.2 + 0.8 * f * rd.y);\n  } else {\n    col = mix (0.6 * mix (vec3 (0.3, 0.4, 0.1), vec3 (0.4, 0.5, 0.2), Fbm2 (ro.xz)) *\n       (1. - 0.2 * Noisefv2 (32. * ro.xz)), vec3 (0.18, 0.28, 0.48), pow (1. + rd.y, 5.));\n    f = 1. - smoothstep (0.1, 1., length (ro.xz) / dstFar);\n    vn = VaryNf (ro, vec3 (0., 1., 0.), 2. * f);\n    col = col * (0.1 + 0.1 * max (vn.y, 0.) + 0.8 * max (dot (vn, sunDir), 0.));\n  }\n  return col;\n}\n\nfloat WaveHt (vec2 p)\n{\n  mat2 qRot = mat2 (0.8, -0.6, 0.6, 0.8);\n  vec4 t4, v4;\n  vec2 t;\n  float wFreq, wAmp, ht;\n  wFreq = 1.;\n  wAmp = 1.;\n  ht = 0.;\n  for (int j = 0; j < 3; j ++) {\n    p *= qRot;\n    t = tWav * vec2 (1., -1.);\n    t4 = (p.xyxy + t.xxyy) * wFreq;\n    t = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * t.xxyy - 1.;\n    v4 = (1. - abs (sin (t4))) * (abs (sin (t4)) + abs (cos (t4)));\n    ht += wAmp * dot (pow (1. - sqrt (v4.xz * v4.yw), vec2 (8.)), vec2 (1.));\n    wFreq *= 2.;\n    wAmp *= 0.5;\n  }\n  return ht;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec3 vn;\n  vec2 e;\n  e = vec2 (max (0.01, 0.005 * d * d), 0.);\n  p *= 0.5;\n  vn.xz = 3. * (WaveHt (p.xz) - vec2 (WaveHt (p.xz + e.xy),  WaveHt (p.xz + e.yx)));\n  vn.y = e.x;\n  return normalize (vn);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 vc;\n  vec3 vn, col;\n  float dstObj, r, s, sh;\n  bool isBg;\n  HexVorInit ();\n  tWav = 0.2 * tCur;\n  isBg = true;\n  sh = 1.;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    isBg = false;\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    if (idObj == idFlr) {\n      col = vec3 (1.);\n      r = length (ro.xz);\n      if (abs (vn.y) > 0.99) col *= 0.8 + 0.2 * SmoothBump (0.1, 0.9, 0.03,\n         ((r < 11.6) ? mod (2.42 * r, 1.) : mod (2. * qHit.x, 1.)));\n      else if (abs (vn.y) < 0.01) col *= 0.8 +\n         0.2 * SmoothBump (0.2, 0.8, 0.03, mod (12. * ro.y, 1.));\n      vn = VaryNf (100. * ro, vn, 0.2); \n    } else if (idObj == idStr) {\n      col = vec3 (0.95, 0.95, 1.);\n    } else if (idObj == idRail) {\n      col = vec3 (0.8, 0.8, 1.);\n    } else if (idObj == idPil) {\n      col = vec3 (0.8, 0.8, 1.);\n    }\n    sh = 0.5 + 0.5 * ObjSShadow (ro, sunDir);\n  } else if (rd.y < 0.) {\n    ro += (- ro.y / rd.y) * rd;\n    sh = 0.5 + 0.5 * ObjSShadow (ro, sunDir);\n    if (length (ro.xz) < 8.1) {\n      isBg = false;\n      rd = refract (rd, WaveNf (ro, 20.), 1./1.333);\n      ro += rd;\n      vc = HexVor (2. * ro.xz);\n      vn.xz = - 0.9 * vc.yz;\n      vn.y = 1.;\n      vn = normalize (vn);\n      s = mod (16. * vc.w, 1.);\n      col = HsvToRgb (vec3 (0.1 + 0.3 * step (2. * s, 1.) + 0.1 * mod (5. * s, 1.),\n        0.5 + 0.5 * mod (17. * s, 1.), 0.7 + 0.3 * mod (12. * s, 1.))) *\n        (0.6 + 0.4 * smoothstep (0., 0.2, vc.x)) * (1. - 0.2 * Noisefv2 (128. * ro.xz));\n    }\n  }\n  if (! isBg) col = col * (0.3 + 0.1 * max (dot (- sunDir.xz, vn.xz), 0.) +\n     0.7 * sh * max (dot (sunDir, vn), 0.)) +\n     0.1 * sh * pow (max (dot (normalize (sunDir - rd), vn), 0.), 64.);\n  else col = sh * BgCol (ro, rd);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 120.;\n  az = 0.;\n  el = -0.2 * pi;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += 1. * pi * mPtr.y;\n  } else {\n    az += 2.5 * pi * sin (0.003 * pi * tCur);\n    el += 0.1 * pi * cos (0.03 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, -0.1 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  zmFac = 7. - 2. * cos (az);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  ro = vuMat * vec3 (0., 5., -70.);\n  sunDir = vuMat * normalize (vec3 (1., 1., -1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nvec2 gVec[7], hVec[7];\n#define SQRT3 1.7320508\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./SQRT3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (SQRT3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.7;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 2. * pi * (u.y - 0.5);\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * vec2 (cos (a), sin (a)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.3) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);  \n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;  \n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}