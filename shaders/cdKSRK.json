{
    "Shader": {
        "info": {
            "date": "1681463173",
            "description": "4k exe gfx (16/22)\nSo yeah, no fancy Sub surface scattering  or volumetric stuff that I have no clue what it is.\nTrick is like photography long exposure, the central platnet and ring are running and it's accumulating. Then by adding some shadow and bump.",
            "flags": 32,
            "hasliked": 0,
            "id": "cdKSRK",
            "likes": 24,
            "name": "[Revision 2023] Voyager: the 6th",
            "published": 3,
            "tags": [
                "revision"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 577
        },
        "renderpass": [
            {
                "code": "\n/*\nInspiration https://youtu.be/Yht48rTHwAU?t=1372\n\nGreetings to all the folks that are inspiring to me, help me and keep me hooked to the scene !\n\nFlopine, Nusan, Evvvvil, z0rg, cosa, yx, blackle, 0b5vr, ps, jeenio, alien, zavie, alkama, aldroid, kamoshika\nthe entire Rev 2023 French Corner, The PT folks, the JP scene, The lovebyte crazy sceners, Ghostclub awesome VTubers\n\nand all the other I forgot !\n\n\n*/\n\n/* \n\n \nBase is actually from this shader https://www.shadertoy.com/view/fsyGDw\n\nFrom comments I saw:\n- Yes it's not a scientific representation of Saturn\n- The missing moons are behind the planet that's why they are not shown\n\n\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n      fragColor = texture(iChannel0,fragCoord/iResolution.xy);\n    fragColor /= fragColor.a;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n/*\n\nGreetings to all the folks that are inspiring to me, help me and keep me hooked to the scene !\n\nFlopine, Nusan, Evvvvil, z0rg, cosa, yx, blackle, 0b5vr, ps, jeenio, alien, zavie, alkama, aldroid, kamoshika\nthe entire Rev 2023 French Corner, The PT folks, the JP scene, The lovebyte crazy sceners, Ghostclub awesome VTubers\n\nand all the other I forgot !\n\n\n*/\n\n/* \n\nBase is actually from this shader https://www.shadertoy.com/view/fsyGDw\n\nFrom comments I saw:\n- Yes it's not a scientific representation of Saturn\n- The missing moons are behind the planet that's why they are not shown\n\n\n\n*/\n\n\n \nfloat seed;\nfloat hash() {\n\tfloat p=fract((seed++)*.1031);\n\tp+=(p*(p+19.19))*3.;\n\treturn fract((p+p)*p);\n}\nvec3 erot(vec3 p,vec3 ax,float t){return mix(dot(ax,p)*ax,p,cos(t))+cross(ax,p)*sin(t);}\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(49.3, 69.51))) * 4420.1234);\n}\n\nfloat diam(vec3 p,float s){\n     p = abs(p);\n     return (p.x+p.y+p.z-s)*inversesqrt(3.);\n}\nvec2 sdf(vec3 p){\nvec3 op=p;\np.xz*=rot(.7+fract(hash())*.1);\np.yz*=rot(.2);\n\n    p.xz*=rot(float(iFrame)*.01+fract(hash()));\n    vec2 h;\n    h.x = 1000.+length(p)-1.;\n    vec4 pp = vec4(p,1.);\n    float s = 0.;\n    for(float i=0.;i<=11.;i++){\n        pp.xyz = abs(pp.xyz)-4.95;;\n        pp*=1.7;\n        pp.xz*=rot(.785+i);\n        pp.xy*=rot(-.785+i);\n        float q = (diam(pp.xyz,1.95))/pp.a;\n        h.x = mod(i,2.)==0. ? mix(q,h.x,0.75): min(q,h.x);\n        s+=clamp(cos(pp.y)+sin(pp.x),0.,1.);\n    }\n    s/=pp.a*1.8;\n    float qq = abs(length(p.xz)-2.5)-.75;\n    qq = max(abs(p.y)-.05+dot(sin(op.xz*2.+float(iFrame)),cos(op.zx*3.))*.05,qq);\n    h.x = max(qq,h.x);\n        h.x = min(h.x, length(op-vec3(1.,-.1,-.5))-.05);\n        h.x = min(h.x, length(op-vec3(-1.9,.2,2.5))-.02-s);\n        h.x = min(h.x, length(op-vec3(2.5,1.1,2.5))-.07-s);\n         h.x = min(h.x, length(op-vec3(2.0,0.15,-1.7))-.1+s);\n           h.x = min(h.x, length(op-vec3(-2.0,0.0,.5))-.1+s);\n    h.x = min(length(p)-1.-s,h.x);\n\n    h.y = 1.;\n    return h;\n}\nvec3 qo(vec3 s, vec3 p){ return s*sdf(p+s).x;}\n\nvec3 norm(vec3 p,float ee){vec2 e=vec2(-ee,ee); return normalize(qo(e.xyy,p)+qo(e.yxy,p)+qo(e.yyx,p)+qo(e.xxx,p));}\n\n\n// hash functions adapted from Devour\n// https://www.shadertoy.com/view/3llSzM\n\nvec2 hash2(){return vec2(hash(),hash());}\nfloat ao(vec3 rp, vec3 n, float k){return clamp(sdf(rp+n*k).x/k,.0,1.) ;}\nfloat gao(vec3 rp,vec3 n){ return (ao(rp,n,.1)+ao(rp,n,1.5)+ao(rp,n,2.7) );  }\nvec3 pal(float q, float t){return vec3(q,0.5,.5)+vec3(.5,.2,.5)*cos(6.28*(1.*t+vec3(.0,.5,.9)));}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tseed = float(((iFrame*73856093)^int(gl_FragCoord.x)*19349663^int(gl_FragCoord.y)*83492791)%38069);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv*=.5;\n        vec4 pframe = vec4(texture(iChannel0,fragCoord.xy/iResolution.xy));\n        fragColor = pframe;\n  if(rand(float(iFrame)*uv) <= .5f) discard;\n    // Time varying pixel color\n vec3 ro = vec3(0.1,0.1,-5.);\n    vec3 rp = ro;\n    vec3 rd = normalize(vec3(uv,1.-.7*sqrt(length(uv))));\n\n    vec3 col = vec3(.0);\n    vec3 light = vec3(20.,5.,3.);\n    for(float i=0.;i<=99.;i++){\n        vec2 d = sdf(rp);\n           rp+=rd*d.x;\n        if(d.x <=.001){\n            vec3 n = norm(rp,.0003);\n            float diff =max(0.,dot(normalize(light),n));\n            float spc = pow(max(0.,dot(rd,reflect(-normalize(light),n))),8.);\n            col = vec3(1.+fract(hash()))*diff+spc*20.;\n            col = mix(vec3(.01),col,gao(rp,n)/3.);\n            break;\n        }\n    }\n    \n    rd = normalize(light-rp);\n    rp+=rd*.002;\n    float mm=10.;\n    for(float i=0.;i<=99.;i++){\n        vec2 d = sdf(rp);\n    \n        mm=min(distance(rp,light),mm);\n            if(d.x < .0001){ col*=0.;break;}\n         d.x = abs(d.x);\n          rp+=rd*d.x;\n        if(d.x <=.001){\n            col*=.5;\n            \n        } \n\n      \n    \n    }\n    if(mm >1.1){\n            col*=.7;\n    } else {\n        col*=10.;\n    }\n\n\n\tcol =(col+pframe.xyz/float(iFrame));\n   \n    //Output to screen\n   fragColor.rgb += col; \n    fragColor.a ++;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}