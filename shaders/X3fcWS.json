{
    "Shader": {
        "info": {
            "date": "1726589444",
            "description": "Crude, tanh-based, approximation of gaussian-filtered square wave, that serves as a one-liner alternative to much more accurate [url]https://www.shadertoy.com/view/4c2BRG[/url].",
            "flags": 0,
            "hasliked": 0,
            "id": "X3fcWS",
            "likes": 3,
            "name": "conv(gauss,square) via tanh(...)",
            "published": 3,
            "tags": [
                "wave",
                "filtering",
                "square",
                "analytical",
                "gaussian"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 83
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Crude, tanh-based, approximation of gaussian-filtered square wave,\n// that serves as a one-liner alternative to much more accurate\n// https://www.shadertoy.com/view/4c2BRG (no claims as to which one is faster).\n// Plots (largely coincide, producing gray):\n//     orange - reference\n//     blue   - approximation\n// Uses gaussian-filtered checkerboard background, similar to\n//     https://iquilezles.org/articles/checkerfiltering/\n\n//==============================================================================\n\nconst float pi=3.14159265358979;\n\n// Approximation of complementary error function from\n// \"Numerical Recipes in Fortran 77: The Art of Scientific Computing\" (ISBN 0-521-43064-X), 1992, page 214, Cambridge University Press.\n// See also https://www.shadertoy.com/view/ml3yWj\nfloat erfc(float x)\n{\n    float t=1.0/(1.0+0.5*abs(x));\n    float y=t*exp(\n        -x*x-1.26551223\n        +t*(+1.00002368\n        +t*(+0.37409196\n        +t*(+0.09678418\n        +t*(-0.18628806\n        +t*(+0.27886807\n        +t*(-1.13520398\n        +t*(+1.48851587\n        +t*(-0.82215223\n        +t*(+0.17087277))))))))));\n    return x<0.0?2.0-y:y;\n}\n\n// Reasonably accurate approximation of gaussian-filtered square wave\n//     Q(σ,x) = 1/(sqrt(2*π)*|σ|) * ∫ sgn(cos(2*π*t))*exp(-(t-x)^2/(2*σ^2)) dt\n// from https://www.shadertoy.com/view/4c2BRG.\nfloat Q(float sigma,float x)\n{\n    sigma=abs(sigma);\n    x=fract(abs(x));\n    x=min(x,1.0-x);\n    if(sigma<0.18)\n    {\n        float s=sign(0.25-x);\n        x=min(x,0.5-x);\n        float a=sqrt(0.5)/sigma;\n        return s*(      (erfc(a*(x+0.75))+erfc(a*(0.75-x)))\n                  +(1.0-(erfc(a*(0.25-x))+erfc(a*(x+0.25)))));\n    }\n    else\n    {\n        float a=exp(-2.0*(pi*sigma)*(pi*sigma)),a2=a*a,a4=a2*a2;\n        float b=cos(2.0*pi*x);\n        return 4.0*a*b/pi*(1.0-a4*a4*(4.0/3.0*b*b-1.0));\n\n    }\n}\n\n//==============================================================================\n\n// A crude approximation of gaussian-filtered square wave\n//     Q(σ,x) = 1/(sqrt(2*π)*|σ|) * ∫ sgn(cos(2*π*t))*exp(-(t-x)^2/(2*σ^2)) dt\n// Accuracy:\n//     |f(σ,x)-Q(σ,x)|        < 0.09 (absolute error)\n//     |f(σ,x)-Q(σ,x)|/Q(σ,0) < 0.09\n//     |f(σ,x)/Q(σ,x)-1|      < 0.20 (relative error)\nfloat f(float sigma,float x)\n{\n    return tanh((4.0/pi)/length(vec2(8.0*sigma,exp(2.0*pi*pi*sigma*sigma)-1.0))*cos(2.0*pi*x));\n}\n\n//==============================================================================\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 xy=(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 ro=vec3(cos(iTime),1.0,sin(iTime));\n    vec3 ez=normalize(ro-vec3(0)),ex=normalize(cross(vec3(0,1,0),ez)),ey=cross(ez,ex);\n    vec3 rd=normalize(xy.x*ex+xy.y*ey-ez);\n    // Grid.\n    xy=(ro-ro.y/rd.y*rd).xz;\n    float sigma=0.5*length(fwidth(xy)); // We basically ignore anisotropy.\n    vec3 col=vec3(0.5)+0.3125*(fragCoord.x<0.5*iResolution.x?\n        f(sigma,xy.x)*f(sigma,xy.y):\n        Q(sigma,xy.x)*Q(sigma,xy.y));\n    // Plots.\n    sigma=0.5*(1.0+sin(iTime));\n    col+=exp(-0.0625*xy.x*xy.x-0.5*xy.y*xy.y)*0.375*(\n        vec3(1,0.5,0)*smoothstep(0.0,1.5*fwidth(xy.y),Q(sigma,xy.x)-2.0*xy.y)+\n        vec3(0,0.5,1)*smoothstep(0.0,1.5*fwidth(xy.y),f(sigma,xy.x)-2.0*xy.y)-0.5);\n    col=mix(12.92*col,1.055*pow(col,vec3(1.0/2.4))-0.055,step(0.0031308,col)); // sRGB\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}