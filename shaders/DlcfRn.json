{
    "Shader": {
        "info": {
            "date": "1706791538",
            "description": "a",
            "flags": 0,
            "hasliked": 0,
            "id": "DlcfRn",
            "likes": 3,
            "name": "_ID",
            "published": 3,
            "tags": [
                "a"
            ],
            "usePreview": 0,
            "username": "pk1234",
            "viewed": 155
        },
        "renderpass": [
            {
                "code": "\n#define PI 3.141592\n\nfloat hash( ivec3 p )    // this hash is not production ready, please\n{                        // replace this by something better\n\n    // 3D -> 1D\n    int n = p.x*3 + p.y*113 + p.z*311;\n\n    // 1D hash by Hugo Elias\n\tn = (n << 13) ^ n;\n    n = n * (n * n * 15731 + 789221) + 1376312589;\n    return float( n & ivec3(0x0fffffff))/float(0x0fffffff);\n}\n\nfloat noise( in vec3 x )\n{\n    ivec3 i = ivec3(floor(x));\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+ivec3(0,0,0)), \n                        hash(i+ivec3(1,0,0)),f.x),\n                   mix( hash(i+ivec3(0,1,0)), \n                        hash(i+ivec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+ivec3(0,0,1)), \n                        hash(i+ivec3(1,0,1)),f.x),\n                   mix( hash(i+ivec3(0,1,1)), \n                        hash(i+ivec3(1,1,1)),f.x),f.y),f.z);\n}\n\n\nfloat samplenoise(vec3 p){\n    return noise(p);\n}\n\n\nmat3 Rot_x(float a) {\n    float s=sin(a), c=cos(a);\n    return mat3(\n    1.0, 0.0, 0.0,  \n    0.0, c, -s,\n    0.0, s, c);\n}\nmat3 Rot_y(float a) {\n    float s=sin(a), c=cos(a);\n    return mat3(\n    c, 0.0, -s,    \n    0.0, 1.0, 0.0,\n    s, 0.0, c);\n}\n\nmat3 TotalRot(float x, float y){\n    return Rot_x(x) * Rot_y(y);\n    //return Rot_y(y) * Rot_x(x);\n    }\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 clipspace = (2.0 * fragCoord.xy - iResolution.xy)/iResolution.y;\n    \n    vec3 dir = vec3(clipspace.x, clipspace.y, 1.0);\n    dir = normalize(dir);\n\n    // rotate dir\n    vec2 halfres = 0.5 * iResolution.xy;\n    \n    if (iMouse.z > 0.){\n\tvec2 m = (iMouse.xy - halfres) / halfres;\n    dir *= TotalRot(-m.y*0.5*PI, -m.x*PI); \n    }   \n    \n    vec3 p = vec3(0.0);\n    p.z += iTime * 4.0;\n    \n    vec3 base_pos = p;\n    \n    \n    float alpha = 0.0;\n    \n    \n    float NUMITS = 40.;\n    for(float i = 0.; i <NUMITS; i += 1.){\n        float sampledvalue = samplenoise(p);\n        alpha += sampledvalue / NUMITS;\n        p += dir * 0.5;\n    }\n    \n\n    vec3 col = vec3(length(clipspace));\n    \n    // \n    vec3 biaseddir = dir;\n    biaseddir.y *= 2.0;\n    biaseddir = normalize(biaseddir);\n    float factor = abs(biaseddir.x);\n    \n    \n    // beams going along the path\n    factor *= 0.2 / (pow(abs(dir.y), 1.));\n    \n    \n    factor = pow(factor, 1.2) + 0.0;\n    col = vec3(alpha * factor);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}