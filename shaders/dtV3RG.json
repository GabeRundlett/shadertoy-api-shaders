{
    "Shader": {
        "info": {
            "date": "1684280216",
            "description": "Experimental, tryng to make something psychedelic",
            "flags": 0,
            "hasliked": 0,
            "id": "dtV3RG",
            "likes": 3,
            "name": "Psychedelic raybox",
            "published": 3,
            "tags": [
                "raymarching",
                "rotating",
                "mandlebox"
            ],
            "usePreview": 0,
            "username": "NikolaErceg",
            "viewed": 142
        },
        "renderpass": [
            {
                "code": "vec4 lastFragColor;\nfloat zoom = 1.0;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    vec3 ray_origin = vec3(0.0, 0.0, -2.0);\n    vec3 ray_dir = normalize(vec3(p.xy, 1.0));\n    \n    const int MAX_STEPS = 256;\n    const float MAX_DIST = 25.0;\n    float distance = 0.0;\n    vec3 pos = ray_origin;\n    \n    float t = iTime * 0.5;\n    mat3 rotationX = mat3(\n        vec3(1.0, 0.0, 0.0),\n        vec3(0.0, cos(t), -sin(t)),\n        vec3(0.0, sin(t), cos(t))\n    );\n    \n    mat3 rotationY = mat3(\n        vec3(cos(t), 0.0, sin(t)),\n        vec3(0.0, 1.0, 0.0),\n        vec3(-sin(t), 0.0, cos(t))\n    );\n    \n    mat3 rotationZ = mat3(\n        vec3(cos(t), -sin(t), 0.0),\n        vec3(sin(t), cos(t), 0.0),\n        vec3(0.0, 0.0, 1.0)\n    );\n    \n    // Automatic zoom in and out\n    float bpm = 60.0; // Beats per minute\n    float beatTime = mod(iTime, 60.0 / bpm);\n    float scale = mix(1.2, 1.34, abs(beatTime - 0.5) * 2.0);\n    zoom *= scale;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n        distance = length(pos);\n        if(distance > MAX_DIST) break;\n        \n        // Mandlebox formula\n        vec3 z = abs(pos * zoom);\n        z = (z * z * z) - 0.1;\n        distance = length(z);\n        \n        pos += ray_dir * distance * 0.5;\n        pos = rotationX * rotationY * rotationZ * pos;\n    }\n    \n    vec3 color = vec3(0.5) + 0.5 * sin(3.0 * (pos.xzy + vec3(0.0, 2.0, 4.0) + iTime));\n    fragColor = vec4(color, 1.0);\n    \n    // Add feedback effect\n    fragColor = mix(lastFragColor, fragColor, 0.88);\n    lastFragColor = fragColor;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}