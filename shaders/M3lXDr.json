{
    "Shader": {
        "info": {
            "date": "1709397173",
            "description": "Planet generator, supports terrestrial planet, gaseous planet, sun, moon, 3 moon shadows, 2 sun lights, 5 biomes, clouds, fake atmosphere, rotation axis, rotation speed, virtual camera. no raymarching, hence very fast. Made for Fiverr client @lumiey",
            "flags": 0,
            "hasliked": 0,
            "id": "M3lXDr",
            "likes": 24,
            "name": "Planet Gen",
            "published": 3,
            "tags": [
                "sun",
                "earth",
                "planet",
                "moon",
                "generator",
                "atmosphere",
                "jupiter"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 526
        },
        "renderpass": [
            {
                "code": "const float SEED = 0.0;\n\nvec3 CAMERA = vec3(0, 0, -1);\n\nconst float PLANET_RADIUS = 0.75;\n\nconst vec3 ROTATION_AXIS = vec3(0.3, 1, 0);\nconst float ROTATION_SPEED = 0.2;\n\nconst float MOON1_RADIUS = 0.2;\nconst vec3 MOON1_POS = vec3(14, 4, -4);\n\nconst float MOON2_RADIUS = 0.2;\nconst vec3 MOON2_POS = vec3(12.6, 2.3, -3);\n\nconst float MOON3_RADIUS = 0.2;\nconst vec3 MOON3_POS = vec3(12.5, 1.3, -2);\n    \nconst vec3 LAND_COLOR = vec3(0.2, 0.4, 0.0);\nconst vec3 JUNGLE_COLOR = vec3(0.0, 0.2, 0.0);\nconst vec3 DESERT_COLOR = vec3(1, 0.8, 0.6);\nconst vec3 SNOW_COLOR = vec3(0.85, 0.85, 0.9);\n\nconst float OCEAN_SIZE = 0.57;\nconst vec3 OCEAN_COLOR = vec3(0.1, 0.15, 0.35);\n\nconst vec3 ATMOSPHERE_COLOR = vec3(0.4, 0.6, 1);\nconst float ATMOSPHERE_DENSITY = 1.8;\nconst vec3 DAWN_COLOR = vec3(1, 0.7, 0.0);\nconst vec3 SUNSET_COLOR = vec3(1, 0.1, 0.0);\nconst vec3 CLOUD_COLOR = vec3(1);\n\nconst float AMBIENT_LIGHT = 0.0;\nconst float SHADOW_STRENGTH = 0.5;\n\nconst vec3 LIGHT1_POS = vec3(8, 8, -8);\nconst vec4 LIGHT1_COLOR = vec4(1, 1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(8, 12, 4);\nconst vec4 LIGHT2_COLOR = vec4(1, 1, 1, 1);\n\nconst int TYPE = 0; // 0 Terrestrial | 1 Gaseous | 2 Star | 3 Moon\n    \nconst float PI = 3.14159265;\nconst float TAU = 6.2831853;\n\nfloat hash12(vec2 p, float scale) {\n\tp = mod(p, scale);\n    p.y += SEED;\n\treturn fract(sin(dot(p, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p, float scale) {\n\tp *= scale;\n\tvec2 f = fract(p);\n    p = floor(p);\n    return mix(mix(hash12(p, scale),\n                   hash12(p + vec2(1, 0), scale), f.x),\n               mix(hash12(p + vec2(0, 1), scale),\n                   hash12(p + vec2(1, 1), scale), f.x), f.y);\n}\n\nfloat fbm(vec2 p, float scale, int octaves) {\n\tfloat s = 0.0, m = 0.0, a = 1.0;\n\tfor(int i = 0; i < octaves; i++) {\n\t\ts += a * noise(p, scale);\n\t\tm += a;\n\t\ta *= 0.6;\n\t\tscale *= 2.0;\n\t}\n\treturn s / m;\n}\n\nfloat swirly_fbm(vec2 p, float scale, int octaves) {\n    p -= iTime * 0.004;\n\tfloat s = 0.0, m = 0.0, a = 1.0;\n\tfor(int i = 0; i < octaves; i++) {\n\t\ts += a * noise(p + iTime * 0.004 * a, scale);\n\t\tm += a;\n\t\ta *= 0.6;\n\t\tscale *= 2.0;\n        p += vec2(cos(s * TAU), sin(s * TAU)) / scale * 0.4;\n\t}\n\treturn s / m;\n}\n\nvec2 hash22(vec2 p, float scale) {\n\tp = mod(p, scale);\n    p.y += SEED;\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat crater_noise(vec2 p, float scale) {\n\tp *= scale;\n    vec2 f = fract(p);\n    p = floor(p);\n    float va = 0.;\n    float wt = 0.;\n    for (int i = -1; i <= 1; i++) \n        for (int j = -1; j <= 1; j++) {\n                vec2 g = vec2(i, j);\n                vec2 o = hash22(p + g, scale);\n                float d = distance(f - g, o);\n                float w = exp(-4. * d);\n                va += w * sin(TAU * sqrt(max(d, 0.06)));\n                wt += w;\n            }\n    return abs(va / wt);\n}\n\nfloat crater_fbm(vec2 x) {\n    float craters = crater_noise(x, 7.0) * 0.6 + crater_noise(x, 20.0) * 0.2;\n    return 1.0 - (craters + fbm(x, 48.0, 3) * 0.35) * 0.4;\n}\n\nvec3 lookat(vec3 v) {\n    vec3 f = normalize(CAMERA);\n    vec3 s = normalize(vec3(-f.z, 0, f.x));\n    return v * mat3(s, cross(s, f), -f);\n}\n\nvec3 rot_axis(vec3 v, vec3 axis, float angle) {\n    vec4 q = vec4(cos(angle * 0.5), axis * sin(angle * 0.5));\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\nvec3 get_norm(vec2 uv, float z) {\n    vec2 _m = vec2(iMouse) / iResolution.xy * 2.0 - 1.0;\n    vec3 n = rot_axis(vec3(uv, z), normalize(ROTATION_AXIS), (_m.x * 16.0 + iTime) * ROTATION_SPEED);\n    return lookat(n);\n}\n\nvec2 mercator(vec3 n) {\n    return vec2(atan(n.z, n.x) * 0.5, acos(-n.y)) / PI;\n}\n\nfloat ray_sphere_intersect(vec3 ro, vec3 rd, vec3 so, float sr) {\n    float a = dot(rd, rd);\n    vec3 so_ro = ro - so;\n    float b = 2.0 * dot(rd, so_ro);\n    float c = dot(so_ro, so_ro) - (sr * sr);\n    if (b * b - 4.0 * a * c < 0.0) {\n        return -1.0;\n    }\n    return (-b - sqrt(b * b - 4.0 * a * c)) / (2.0 * a);\n}\n\nvec4 planet(vec2 uv) {\n    float len = length(uv);\n    float f = fwidth(len);\n    if (len > 1.0 - f * 0.3) \n        return vec4(0);\n    float z = -sqrt(0.999 - len * len);\n    vec3 norm = get_norm(uv, z);\n    vec2 muv = mercator(norm);\n    if (TYPE == 1) {\n        muv.y += fbm(muv, 16.0, 4) * 0.125;\n        muv.y *= 5.0;\n    }\n    float smooth_edge = smoothstep(1.0, 1.0 - f * 2.0, len);\n    f *= 2.0;\n\n    vec3 col = vec3(0);\n    if (TYPE == 0 || TYPE == 1) {\n        float continent = 0.0;\n        float temp = 0.0;\n        float humid = 0.0;\n        if (TYPE == 0) {\n            continent = fbm(muv, 4.0, 7);\n        } else {\n            continent = fbm(vec2(muv.y, 0), 2.0, 7);\n        }\n        temp = fbm(muv * 3.0 + vec2(31.33), 1.0, 4);\n        humid = fbm(muv * 3.0 - vec2(54.1), 1.0, 4);\n\n        float sqrt_continent = sqrt(continent);\n\n        float land = smoothstep(f, 0.0, OCEAN_SIZE - continent);\n        col += LAND_COLOR;\n\n        float desert = smoothstep(0.25, 0.1, humid);\n        col = mix(col, DESERT_COLOR, desert);\n\n        float jungle = smoothstep(0.1, 0.3, humid) * smoothstep(0.3, 0.4, temp);\n        col = mix(col, JUNGLE_COLOR, jungle);\n\n        float snow = smoothstep(0.3, 0.2, temp);\n        col = mix(col, SNOW_COLOR, snow);\n        col *= sqrt_continent * land * 1.2 * smoothstep(1.0, 0.99, abs(norm.y));\n\n        float ocean = smoothstep(OCEAN_SIZE, OCEAN_SIZE - f, continent);\n        col += (1.0 - continent) * ocean * OCEAN_COLOR;\n\n        col.rgb *= sqrt(1.0 + 0.1 * cos(sqrt(continent) * 512.0));\n    } else if (TYPE == 2) {\n        float surface = 0.5 + pow(fbm(muv, 40.0, 4), 2.0) * smoothstep(1.0, 0.99, abs(norm.y));\n        col = (surface + pow(len, 8.0)) * 1.5 * LAND_COLOR;\n    } else if (TYPE == 3) {\n        float d = crater_fbm(muv);\n        vec3 normal = normalize(vec3(\n            d - vec2(crater_fbm(muv - vec2(0.007, 0)),\n                     crater_fbm(muv - vec2(0, 0.007))), -0.1));\n        float light = max(0.0, dot(normalize(LIGHT1_POS), normal));\n        light += max(0.0, dot(normalize(LIGHT2_POS), normal));\n        col = d * LAND_COLOR * (1.0 + light * smoothstep(1.0, 0.99, abs(norm.y)));\n    }\n    return vec4(col, smooth_edge);\n}\n\nvec4 clouds(vec2 uv) {\n    float len = length(uv);\n    float f = fwidth(len);\n    if (len > 1.0 - f * 0.3) \n        return vec4(0);\n    float z = -sqrt(0.999 - len * len);\n    vec3 norm = get_norm(uv, z);\n    uv = mercator(norm);\n    float clouds = swirly_fbm(-uv, 11.0, 6) * smoothstep(1.0, 0.99, abs(norm.y));\n    clouds = exp(-pow(clouds, 6.) * 32.0);\n    return vec4(CLOUD_COLOR, clouds);\n}\n\nvec4 atmosphere(vec2 uv) {\n    float len = length(uv);\n    float altitude = max(0.0, len - PLANET_RADIUS);\n    float sunset_amount = 0.0;\n    float l2 = len * len;\n    if (TYPE == 2) {\n        l2 = 1.;\n    } else {\n        float z = -sqrt(0.999 - len * len);\n        vec3 norm = lookat(vec3(uv, z));\n        sunset_amount = smoothstep(0.5, -0.3, dot(norm, normalize(LIGHT1_POS)));\n        sunset_amount = min(sunset_amount, smoothstep(0.5, -0.3, dot(norm, normalize(LIGHT2_POS))));\n    }\n    float density = exp(-altitude * 7.0 * (1.0 + sunset_amount));\n    density *= l2 * ATMOSPHERE_DENSITY;\n    vec3 col = vec3(0);\n    if (TYPE != 2) {\n        vec3 sunset = mix(DAWN_COLOR, SUNSET_COLOR, exp(-altitude * 32.0) * sunset_amount);\n        col = mix(ATMOSPHERE_COLOR, sunset, exp(-altitude * 16.0) * smoothstep(PLANET_RADIUS - 0.01, PLANET_RADIUS, len) * sunset_amount * 1.5);\n    } else {\n        density *= noise(normalize(uv) + iTime * 0.05, 24.0) * 0.15 + 0.85;\n        col = LAND_COLOR * (pow(density, 5.0) * 0.5 + density * density * density + density) * 0.25;\n    }\n    \n    return vec4(col, density);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float min_res = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min_res;\n    float len = length(uv);\n    if (len > 1.3)\n        discard;\n    vec4 planet = planet(uv / PLANET_RADIUS);\n    \n    if (TYPE != 2) {\n        float z = -sqrt(0.999 - len * len);\n        vec3 norm = lookat(vec3(uv, z));\n        vec3 light = vec3(0);\n        float shadow = 1.0;\n        \n        float dist = 0.0;\n        #define S(lp, mp, mr, n)\\\n            dist = ray_sphere_intersect(lp, n, mp, mr);\\\n            if (dist >= 0.0)\\\n                shadow *= 1.0 - SHADOW_STRENGTH * smoothstep(0.0, 0.5, -(dist - distance(mp, lp)) / mr)\n        vec3 n = normalize(norm - LIGHT1_POS);\n        S(LIGHT1_POS, MOON1_POS, MOON1_RADIUS, n);\n        S(LIGHT1_POS, MOON2_POS, MOON2_RADIUS, n);\n        S(LIGHT1_POS, MOON3_POS, MOON3_RADIUS, n);\n        \n        n = normalize(norm - LIGHT2_POS);\n        S(LIGHT2_POS, MOON1_POS, MOON1_RADIUS, n);\n        S(LIGHT2_POS, MOON2_POS, MOON2_RADIUS, n);\n        S(LIGHT2_POS, MOON3_POS, MOON3_RADIUS, n);\n        \n        light += max(0.0, dot(norm, normalize(LIGHT1_POS)) * 0.8 + 0.2) * LIGHT1_COLOR.rgb * LIGHT1_COLOR.a;\n        light += max(0.0, dot(norm, normalize(LIGHT2_POS)) * 0.8 + 0.2) * LIGHT2_COLOR.rgb * LIGHT2_COLOR.a;\n      \n        vec4 clouds_col = vec4(0);\n        vec4 atmosphere_col = vec4(0);\n        if (TYPE == 0) {\n            clouds_col = clouds(uv / PLANET_RADIUS);\n            clouds_col.rgb *= shadow * light + AMBIENT_LIGHT;\n            atmosphere_col = atmosphere(uv);\n        } else if (TYPE == 1) {\n            atmosphere_col = atmosphere(uv);\n        }\n        planet.rgb *= shadow * light + AMBIENT_LIGHT;\n        atmosphere_col.rgb *= light;\n        fragColor = mix(planet, clouds_col, clouds_col.a);\n        fragColor = mix(fragColor, atmosphere_col, atmosphere_col.a);\n    } else {\n        vec4 atmosphere_col = atmosphere(uv);\n        fragColor = mix(atmosphere_col, planet, planet.a);\n    }\n    fragColor = clamp(fragColor, 0.0, 1.0);\n    fragColor.rgb *= fragColor.a;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}