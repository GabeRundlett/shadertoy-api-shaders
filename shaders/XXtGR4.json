{
    "Shader": {
        "info": {
            "date": "1716169968",
            "description": "I was super happy today to finally understand how camera space works and implement some of \"Ray Tracing in a Weekend\" concepts by my own.\nYou can move the camera (note, not the sphere) using your mouse.\nThe color of the sphere is the surface normal.",
            "flags": 0,
            "hasliked": 0,
            "id": "XXtGR4",
            "likes": 1,
            "name": "016 - Playing with camera space",
            "published": 3,
            "tags": [
                "raytracing",
                "mouse",
                "raytracer",
                "ray",
                "beginner"
            ],
            "usePreview": 0,
            "username": "PiGIon",
            "viewed": 150
        },
        "renderpass": [
            {
                "code": "// 2024.05.19 rev 1\n// 2024.06.02 rev 2 optimized sphere intersect function in GLSL\n\n// returns x value of a noise texture\nfloat rand(int idx) {\n    return texelFetch(iChannel0, ivec2(idx, 0), 0).x - 0.5;\n}\n\n// returns t for a vector\n// o - origin of the vector\n// dir - direction of the vector\n// t - can be read as \"time\"\nvec3 at(vec3 o, vec3 dir, float t) {\n    return o + t*dir;\n}\n\n// length squared\n// optmized function for dot(v, v)\nfloat length_squared(vec3 v) {\n    return v.x * v.x + v.y * v.y + v.z * v.z;\n}\n\n// from Ray Tracing in One Weekend\n// coord - sphere coord\n// radius - sphere radius\n// o - ray origin\n// d - ray direction\n// t - distance from o to sphere border\nbool hit_sphere(vec3 coord, float radius, vec3 o, vec3 d, out float t) {\n    vec3 oc = coord - o;\n    float a = length_squared(d);\n    float b = dot(d, oc);\n    float c = length_squared(oc) - radius*radius;\n    float discriminant = b*b - a*c;\n    if (discriminant < 0.) {\n        t = -1.0;\n        return false;\n    } else {\n        t = (b - sqrt(discriminant)) / a;\n        return true;\n    }\n}\n\n// returns a range of vec2(-1) to vec2(1) based on mouse and screen size\n// deals with first frame and returns vec2(0) if so\nvec2 uvMouse() {\n    if (length(iMouse.xy) == 0.) {\n        return vec2(0, 0);\n    }\n    return ((iMouse.xy / iResolution.xy) - 0.5) * 2.;\n}\n\n// function that returns the color of a sphere\nvec4 sphere(vec3 cam, vec3 dir, vec3 pos, float radius) {\n    float t;\n    bool hit = hit_sphere(pos, radius, cam, dir, t);\n    if (!hit) {\n        return vec4(0.);\n    }\n    \n    vec3 N = normalize(at(cam, dir, t) - pos);\n    return vec4(0.5*vec3(N.x+1., N.y+1., N.z+1.), 1.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    vec3 origin = vec3(0.);\n    vec4 O = fragColor;\n    vec2 mouse = uvMouse();\n\n    // world space, x=horizontal, y=vertical, z=depth\n    vec3 posW = vec3(0., 0., -1.);\n    vec3 camW = vec3(-mouse, 0.);\n    \n    // move everything to camera/view space\n    vec3 camC = origin;\n    // camera always points \n    vec3 camDir = vec3(0., 0., -1.);\n\n    // we already have the NDC, which is uv from -1 to 1 at xy\n    // we just place a plane at the front of the camera here\n    // get the direction from camera to the uv plane\n    vec3 dir = vec3(uv, -1.);\n\n    // from Ray Tracing in One Weekend\n    // blue background\n    vec3 unit_direction = normalize(dir);\n    float t = 0.5*(unit_direction.y + 1.0);\n    t = 0.5*(unit_direction.y + 1.0);\n    vec4 bgColor = vec4((1.0-t)*vec3(1.0, 1.0, 1.0) + t*vec3(0.5, 0.7, 1.0), 1.);\n    O = bgColor;\n    \n    // the spheres are always the same, they just go back to the top when not needed\n    for (int i = 0; i < 200; i++) {\n        float radius = abs(rand(i+3)) * 0.2 + 0.2;\n        // cycle sphere Y from top to bottom\n        float sphereY = mod((rand(i+1)*10. + iTime), 8.);\n        vec3 posW = vec3(rand(i)* 10., 4. - sphereY, -1. - rand(i+2));\n        // move sphere to camera space\n        vec3 posC = posW - camW;\n        vec4 hit = sphere(camC, dir, posC, radius);\n        O = mix(O, hit, hit.w);\n    }\n\n    fragColor = O;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}