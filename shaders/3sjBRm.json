{
    "Shader": {
        "info": {
            "date": "1590000130",
            "description": "A bunch of rotated and scaled rectangulars",
            "flags": 0,
            "hasliked": 0,
            "id": "3sjBRm",
            "likes": 5,
            "name": "Rectangularity",
            "published": 3,
            "tags": [
                "rectangles"
            ],
            "usePreview": 0,
            "username": "abelu",
            "viewed": 468
        },
        "renderpass": [
            {
                "code": "#define PI      \t3.14159265359\n#define QUARTER_PI \t0.78539816339\n\nfloat lineSegment(\n    vec2 point, \n    vec2 pointA, \n    vec2 pointB,\n    float width\n) {\n    vec2 pa = point - pointA;\n    vec2 ba = pointB - pointA;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n\n    return smoothstep(width, 0.0, length(pa - ba * h));\n}\n\nfloat rect(\n    vec2 point, \n    float size, \n    float startAngle,\n    float lineWidth,\n    float index\n) {\n    float angle = startAngle;\n    float nextAngle = 0.;\n    float angleStep = PI / 2.;\n    float color = 0.;\n\n    for (int i = 0; i < 4; i++) {\n        nextAngle = angle + angleStep;\n        \n        color += lineSegment(\n            point, \n            vec2(cos(angle) * size, sin(angle) * size), \n            vec2(cos(nextAngle) * size, sin(nextAngle) * size),\n            lineWidth\n        );\n        \n        angle = nextAngle;\n    }\n    \n    return color;\n}\n\nfloat getSize(float size, float R, float iteration) {\n\treturn size * pow(\n        R,\n        iteration\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = fragCoord/iResolution.xy - vec2(0.5);\n    \n    float d = 32. + sin(iTime) * 16.;\n    float deltaAngle = PI / d * (0.5 + 0.5 * sin(iTime * 0.5));\n    float R = sin(QUARTER_PI) / cos(QUARTER_PI - deltaAngle);\n    float D = pow(R, d / 2.);\n    float lineWidth = 1. / iResolution.x * 2.;\n    \n    float size = 0.5 / D;// + mod(iTime, 0.5 / (D * D) - 0.5 / D);\n\n    float color = 0.;\n    float angle = -iTime * 0.6;\n    \n    for (float i = 0.; i < 100.0; i += 1.) {\n        color += rect(\n            st, \n            getSize(size, R, i), \n            angle, \n            lineWidth,\n            i\n        );\n        angle += deltaAngle;\n    }\n\n    fragColor = vec4(\n        color * (.5 + sin(iTime * 0.3) * .5 - length(st)),\n        color * (.5 + cos(iTime * 0.5) * .5 - length(st)),\n        color * (.5 + sin(iTime * 1.2) * .5 - length(st)),\n        1.0\n    );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}