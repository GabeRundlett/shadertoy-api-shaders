{
    "Shader": {
        "info": {
            "date": "1548611606",
            "description": "re-release",
            "flags": 0,
            "hasliked": 0,
            "id": "3s23WR",
            "likes": 16,
            "name": "Dragon Egg",
            "published": 3,
            "tags": [
                "raymarch",
                "egg"
            ],
            "usePreview": 0,
            "username": "movAX13h",
            "viewed": 532
        },
        "renderpass": [
            {
                "code": "// Dragon Egg, fragment shader by movAX13h, March 2015\n// everything is fake\n\n#define time iTime\n\nfloat rand(float n)\n{\n    return fract(sin(n * 0.84949385) * 43758.5453123);\n}\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n// polynomial smooth min (k = 0.1); by iq\nfloat smin(float a, float b, float k)\n{\n    float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n    return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat egg(vec3 p, float r)\n{\n\tp.y *= 0.8;\n\treturn length(p) - r;\n}\n\nvec3 eggTex(vec3 p, vec3 col)\n{\n\tvec2 uv = vec2(atan(p.x,p.z) / 1.57079632, 3.8197186342 * acos(p.y/(10.0*length(p.xz))));\n\t\n\tfloat c = texture(iChannel1, uv * 0.4).r;\n\tcol *= min(1.0, (1.3 - c));\n\t\n\treturn col;\n}\n\nvec3 floorTex(vec2 uv)\n{\n\treturn texture(iChannel0, uv * 0.4).b * vec3(0.6, 0.4, 0.2);\n}\n\nvec4 scene(vec3 p)\n{\n\tfloat d, d1;\n\tvec3 col = vec3(0.0);\n\t\n\t// plane\n\tvec3 ft = floorTex(p.xz);\n    float r = length(p.xz);\n    float b = smoothstep(0.0, 0.5, ft.b);\n\td = abs(p.y - 0.08 + 0.25*r + 0.14*cos(5.0*r) + 0.3 - 0.3*b);\n\tcol = ft*2.4*smoothstep(0.2*abs(sin(time)), 0.5, r) - 0.5*abs(sin(p.x));\n    //col = mix(col, vec3(0.0, 1.0, 0.0), 1.2*b);\n    \n\t// egg\n\td1 = egg(p-vec3(0.0,-0.1,0.0), 0.3);\n\tif (d1 < d) col = eggTex(p, vec3(0.71, 0.173, 0.071));\n\td = smin(d, d1, 0.01);\n\t\n\treturn vec4(col, d);\n}\n\nvec3 lightScene(vec3 p, vec3 col)\n{\n\tif (p.y < -0.3) return col;\n\n\tfloat angle = time + p.y * 14.0;\n\tp.xz = vec2(p.x * cos(angle) - p.z * sin(angle), p.z * cos(angle) + p.x * sin(angle));\n\n\tvec3 pos;\n\tfloat intensity = 3.0 * smoothstep(0.7, 0.0, col.r);\n\tvec3 lightCol = vec3(0.8, 0.8, 0.6);\n\t\n\tvec3 r = time * (vec3(0.234, 0.55477, 0.732454) * 4.0 - 2.0);\n\tpos = 0.1*vec3(sin(r.x), cos(r.y), sin(r.z));\n\tcol += lightCol * intensity * smoothstep(0.3, 0.0, length(p - pos));\n\t\n\tr = time * (vec3(0.745656, 0.23445, 0.43534) * 4.0 - 2.0);\n\tpos = 0.1*vec3(sin(r.x), cos(r.y), cos(r.z));\n\tcol += lightCol * intensity * smoothstep(0.3, 0.0, length(p - pos));\n\t\n\treturn col;\n}\t\n\t\nvec3 normal(vec3 p)\n{\n\tfloat c = scene(p).w;\n\tvec2 h = vec2(0.01, 0.0);\n\treturn normalize(vec3(scene(p + h.xyy).w - c, \n\t\t\t\t\t\t  scene(p + h.yxy).w - c, \n\t\t                  scene(p + h.yyx).w - c));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec2 pos = (fragCoord.xy*2.0 - iResolution.xy) / iResolution.y;\n    float focus = 3.14;\n    float far = 8.5;\n\tfloat dist = 0.0;\n\tfloat t = 0.2*time;\n    float a = 0.8*sin(0.2*time);\n\tvec3 cp = vec3((a+2.0)*sin(t), 0.4+0.4*a, (a+1.6)*cos(t));\n\tvec3 ct = vec3(0.0, 0.0, 0.0);\n\t\n\tif (iMouse.z > 0.0)\n\t{\n        vec2 m = iMouse.xy / iResolution.xy;\n        float d = 4.0*m.y+0.5;\n\t\tcp = vec3(sin(4.0*m.x)*d, 1.4*sin(2.8+m.y*0.2)*d, cos(4.0*m.x)*d);\n\t}\n\t\n\tvec3 cd = normalize(ct-cp);\n\tvec3 cu  = vec3(0.0, 1.0, 0.0);\n\tvec3 cs = cross(cd, cu);\n\tvec3 dir = normalize(cs*pos.x + cu*pos.y + cd*focus);\n\tvec3 ray = cp;\n\tbool hit = false;\n\tvec3 col = vec3(0.0);\n\tvec4 s;\n    \n    for(int i=0; i < 90; i++) \n\t{\n        if (hit) \n\t\t{\n\t\t\ts.rgb = lightScene(ray, col);\n\t\t\tray += dir * 0.002;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ts = scene(ray);\n            s.w *= 0.6;\n\t\t\tdist += s.w;\n\t\t\tray += dir * s.w;\n\t\t\t\n\t\t\tif(s.w < 0.01) \n\t\t\t{\n\t\t\t\tcol = s.rgb;\n\t\t\t\thit = true;\n\t\t\t}\n\t\t}\n\t\t\n        if(dist > far) \n\t\t{\n\t\t\tdist = far;\n\t\t\tbreak;\n\t\t}\n    }\n\t\n    float b = 1.0 - dist/far;\n\tcol = b * s.rgb;\n\n    if (!hit)\n    {\n        vec3 q = 0.9*texture(iChannel2, dir).rgb;\n        q.b *= smoothstep(0.5, 0.7, q.g);\n    \tcol = q;\n    }\n \t\n\tcol = clamp(col, vec3(0.0), vec3(1.0));\n\tcol = pow(col, vec3(2.2, 2.4, 2.5)) * 3.5;\n\tcol = pow(col, vec3(1.0 / 2.2));    \n\tcol -= smoothstep(0.4, 1.8, abs(pos.x));\n    col *= 1.0 - 0.2*rand(pos);\n    \n\tfragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}