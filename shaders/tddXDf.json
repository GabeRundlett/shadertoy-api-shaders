{
    "Shader": {
        "info": {
            "date": "1573076611",
            "description": "WIP.\nref: https://cdn.the-scientist.com/assets/articleNo/66623/hImg/34228/mitochondria-banner-x.png\nMouse control or click bottom-left for back to auto-rot.",
            "flags": 0,
            "hasliked": 0,
            "id": "tddXDf",
            "likes": 6,
            "name": "mitochondria - base",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 374
        },
        "renderpass": [
            {
                "code": "// reusing base ray-marcher https://shadertoy.com/view/XstBWn\n\nfloat K = 4.;\n//#define smin(a,b) pow( pow(a,-K) + pow(b,-K), -1./K ) \n#define ell(v)    length( (v) / vec3(1,2,2) ) \n//#define body(P) min( min(P.x,P.y), min(P.z,P.w))\n//#define body(P) smin( smin(P.x,P.y), smin(P.z,P.w))\n#define rot(a)    mat2(cos(a),-sin(a),sin(a),cos(a) )\n\nvoid mainImage(out vec4 O, vec2 U) {\n    \n    float t = iTime+1.,v0,v1, r,l=1.;\n    vec3  q = iResolution, R,\n          D = vec3(.3*(U+U-q.xy)/q.y, -1),      // ray direction\n          p = 30./q, q0;                        // marching point along ray \n    vec2  M = 10.* iMouse.xy / q.xy;\n    mat2  Rx = rot(length(iMouse.xy)<20. ? -t : -M.y ),\n          Ry = rot(length(iMouse.xy)<20. ? -t : M.x );\n    vec4 P;\n    O-=O;\n    for ( O++; O.x > 0. && t > .01 ; O-=.01 ) {\n        q = p,\n        q.xz *= Ry, q.yz *= Rx,                 // camera rotation\n        v0 = v1 = 0.;\n        for (float x = -4.; x <= 2.; x++ ) {    // for each segments\n           //q0 = q-vec3(3.*x,0,0);\n            r = 9., R = 3.*vec3(x,0,sqrt(r*r-x*x)-r);   // vector dist to rotation axis\n            q0 = q - R;                                 // offset\n            q0.xz *= rot(asin(x/r));                    // and rotate\n            l = length(q0)/r;\n            K = 8., v0 += pow( ell(q0), -K );           // inner membrane\n            K = 2., v1 += pow( ell(q0), -K );           // outer membrane\n          //K = 2., v1 += pow( ell(q0)*2.*l, -K );      // (with rot jacobian)\n        }\n        K = 8., v0 = pow(v0, -1./K) - 2.,\n        K = 2., v1 = pow(v1, -1./K) - 2.,\n        v0 = max(v0, -(v0+.15)),  v0 = max(v0, q.y), t = v0,        // thick inner membrane \n        v1 = max(v1, -(v1+.15)),  v1 = max(v1, q.y), t = min(t,v1), // thick outer membrane \n     /* P = vec4( ell(q), ell(q-vec3(3,0,0)), ell(q+vec3(3,0,0)) , ell(q+vec3(6,0,0)) ),\n        K = 8., v = body(P) -2., v = max(v, -(v+.15)),  v = max(v, q.y), t = v,\n        K = 2., v = body(P) -2., v = max(v, -(v+.15)),  v = max(v, q.y), t = min(t,v),\n     */\n       // t = max(t, q.y),\n        p += t*D;                             // step forward = dist to obj\n    }\n    if ( t < .01 )\n        O = t==v1 ? O*vec4(.8,.3,.4,1) + vec4(.2,0,0,0)\n                  : O*vec4(.7,.7,.2,1) + vec4(.4,0,0,0);  // color membranes\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}