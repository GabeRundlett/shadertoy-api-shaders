{
    "Shader": {
        "info": {
            "date": "1654833629",
            "description": "i see you @Xor with all of your golfing, this is the perfect shader for you. :>",
            "flags": 0,
            "hasliked": 0,
            "id": "NdyyWD",
            "likes": 9,
            "name": "Infinite Xor Golf",
            "published": 3,
            "tags": [
                "fractal",
                "zoom",
                "loop",
                "xor",
                "gif",
                "golf",
                "seamless"
            ],
            "usePreview": 0,
            "username": "shyshokayu",
            "viewed": 305
        },
        "renderpass": [
            {
                "code": "/* @Xor - 239 chars: */\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    vec2 r=iResolution.xy,\n         u=(I-r*.5)/r.y+.5,\n         c=r-r+exp2(fract(iTime)),\n         i=u/c,\n         b=i*512.;\n    \n    for(c *= vec2(int(b) ^ int(b.y),0)*i/b; c.y++<9.; i+=i)\n        b = smoothstep(.5,.0,abs(fract(i)-.5)),\n        c.x *= .8+.2*b.x*b.y;\n    \n    o = c.x*vec4(u.x<1.);\n}\n\n/* @Xor - 255 chars:\n\n#define s smoothstep(.0,.5,fract(\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    vec2 r=iResolution.xy,\n         u=(I-r*.5)/r.y+.5,\n         c=r-r+exp2(fract(iTime)),\n         i=u/c,\n         b=i*512.;\n    \n    b = vec2(int(b) ^ int(b.y))/512.;\n    \n    \n    for(int j=0;j++<9;i+=i)\n        r=s i))*s-i)),\n        b*=.8+.2*r.x*r.y;\n    \n    o=b.x*c.x*vec4(u.x<1.);\n}\n\n*/\n\n/* @shyshokayu - 286 chars, original:\n\n#define s smoothstep(.0,.5,fract(\n\nvoid mainImage(out vec4 o,vec2 i){\n    vec2 r=iResolution.xy,\n    // Scale uv\n         u=(i-r*.5)/r.y+.5,\n         c;\n    \n    // Time\n    c+=exp2(fract(iTime));\n    \n    // Zoom\n    i=u/c;\n    \n    // Xor pattern\n    ivec2 e=ivec2(i*512.);\n    c.y=float(e.x^e.y)/512.;\n    \n    // Pattern smoothing - this isnt exactly correct, slight change of brightness on every loop, but it works\n    for(int j=0;j<9;++j,i*=2.)\n        c.y*=.8+.2*s i.x))*s-i.x))*s i.y))*s-i.y));\n    \n    // Swap lines if you have problems viewing this shader:\n    \n    // Multiply with time & square view\n    o+=c.y*c.x*step(abs(u.x-.5),.5);\n    \n    // ---\n\n    //o=vec4(c.y*c.x*step(abs(u.x-.5),.5));\n}\n\n*/\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}