{
    "Shader": {
        "info": {
            "date": "1505511302",
            "description": "demonstrating how to perform CSG on brushes without z-sorting by evaluating distances to brush intervals using a virtual machine with 4 registers. mouse down displays distance estimate for that position and evaluations performed.",
            "flags": 0,
            "hasliked": 0,
            "id": "MtXyz2",
            "likes": 21,
            "name": "Interval CSG Register Machine",
            "published": 3,
            "tags": [
                "raymarching",
                "csg",
                "1d",
                "interval",
                "machine",
                "register",
                "vm"
            ],
            "usePreview": 1,
            "username": "paniq",
            "viewed": 1320
        },
        "renderpass": [
            {
                "code": "// CSG on Intervals\n// using 2d vector graphics library (https://www.shadertoy.com/view/lslXW8)\n\n// note that this version is verbose and purposefully lacks \n// any form of optimization for the sake of education.\n\n// the general principle here is that we first evaluate the near and\n// far boundaries of the brushes that cross our line of sight, \n// so we end up with a list of 1D intervals for each brush.\n//\n// then we can perform CSG in rayspace and raymarch towards the\n// nearest resulting visible surface by repeatedly evaluating\n// a distance estimator that gives us the distance to the \n// nearest horizon.\n//\n// the distance estimator evaluates the CSG tree to receive \n// a lower bound on the distance to the edge closest to \n// the right of a given 1D scalar t.\n//\n// the CSG tree evaluation is sped up by transforming the tree\n// to an instruction list first (here done manually) that operates\n// on up to four virtual registers A, B, C, D to store temporary\n// values; after the instruction list has been executed, the\n// final result can be found in register A.\n//\n// the VM executing the instruction list needs only four operators:\n// SET A B (copy)\n// OR A B (boolean union)\n// AND A B (boolean intersection)\n// ANDN A B (boolean subtraction)\n// each operator can be encoded as a function that receives\n// a 4-bit bitmask encoding the comparisons a0>b0 a1>b0 a0>b1 a1>b1\n// for the two intervals passed to the operator, and returns\n// a new interval in D that sources one of the four possible values\n// for d0 d1 based on the bitmask.\n//\n// the complexity is O(n) for n union-only instructions,\n// but can reach O(n*n) in the worst case; the performance in\n// practice however is typically around O(3n). Through hierarchical\n// culling one can aggressively reduce the number of instructions\n// required to solve a tile:\n//\n// it is possible, not demonstrated here, to source the brush \n// intervals from a primitive-frustum intersection instead, and\n// to cull/rewrite instructions that yield no result, allowing\n// for hierarchical quadtree-style raymarching using\n// per-tile linked lists for tiles that contain more than one \n// instruction.\n\n\n// evaluation interval legend:\n// green: union\n// orange: intersection\n// magenta: subtraction\n\n// set to 1 to show CSG operator debug setup\n#define DEBUG_CSG_OPS 0\n#define DEBUG_CSG_OP CSG_ANDN\n#define TEST_SETUP 0\n\nconst vec2 ray_origin = vec2(0.0);\nconst vec2 ray_dir = vec2(1.0,0.0);\n\nconst int op_set = 0;\nconst int op_or = 1;\nconst int op_and = 2;\nconst int op_and_not = 3;\n\nconst int reg_a = -1;\nconst int reg_b = -2;\nconst int reg_c = -3;\nconst int reg_d = -4;\nconst int empty = -5;\n\nconst float infinity = 1.0/0.0;\nconst vec2 empty_interval = vec2(infinity);\n\n// these brushes are usually imported using a SSBO\n// here we provide a small local array\n#if DEBUG_CSG_OPS\n#define NUM_BRUSHES 2\n#elif TEST_SETUP\n#define NUM_BRUSHES 3\n#else\n#define NUM_BRUSHES 7\n#endif\nvec3 brushes[NUM_BRUSHES];\nvec2 brush_intervals[NUM_BRUSHES];\n\nvec2 iCircle(vec2 o_ro, vec2 rd, vec3 params) {\n\tvec2 ro = o_ro - params.xy / params.z;\n\tfloat k = dot(ro, rd);\n    float q = sqrt(k*k - dot(ro, ro) + 1.0);\n    vec2 d = (vec2(-q,q) - k) * params.z;\n    return (d.x != d.x)?empty_interval:d;\n}\n\nfloat dCircle(vec2 p, vec3 params) {\n    return length(p - params.xy) - params.z;\n}\n\n// dynamic array index hack\nvec3 get_brush(int brushid) {\n    for (int i = 0; i < NUM_BRUSHES; ++i) {\n        if (i == brushid)\n            return brushes[i];\n    }\n    return vec3(0.0);\n}\n\n// dynamic array index hack\nvec2 get_brush_interval(int brushid) {\n    for (int i = 0; i < NUM_BRUSHES; ++i) {\n        if (i == brushid)\n            return brush_intervals[i];\n    }\n    return empty_interval;\n}\n\n// dynamic array index hack\nfloat get_reg(vec4 regs, int regid) {\n    for (int i = 0; i < 4; ++i) { if (i == reg_a-regid) return regs[i]; }\n    return infinity;\n}\nvoid set_reg(inout vec4 regs, int regid, float val) {\n    for (int i = 0; i < 4; ++i) { if (i == reg_a-regid) { regs[i] = val; return; } }\n}\n\n#if DEBUG_CSG_OPS\n#define NUM_CSG_OPS 2\n#elif TEST_SETUP\n#define NUM_CSG_OPS 3\n#else\n#define NUM_CSG_OPS 9\n#endif\n#define CSG_OP ivec3\n// opcode, src1, src2\n// src1 must be register\n// src2 must be register, empty or brush\n// computation result will be written to src1\n// in a realworld example, this would be a SSBO\nCSG_OP csg_ops[NUM_CSG_OPS];\nvoid setup_globals(float t) {\n#if DEBUG_CSG_OPS\n    brushes[0] = vec3(0.5,0.0,0.08);\n    brushes[1] = vec3(mix(0.26,0.74,sin(t)*0.5+0.5),0.0,0.1);\n#elif TEST_SETUP\n    vec2 c = vec2(0.5,0.05);\n    float r0 = 0.21;\n    float a0 = t;\n    float a1 = a0 + radians(90.0);\n    brushes[0] = vec3(c.x + cos(a0)*r0, c.y + sin(a0)*r0,0.2);\n    brushes[1] = vec3(c.x - cos(a0)*r0, c.y - sin(a0)*r0,0.2);\n    brushes[2] = vec3(c.x, c.y, 0.1);\n#else\n\tbrushes[0] = vec3(0.3,0.0,0.1);\n    brushes[1] = vec3(mix(0.25,0.35,sin(t*0.7)*0.5+0.5),0.26,0.29);\n    brushes[6] = vec3(0.3,mix(0.0,0.1,sin(t*0.6)*0.5+0.5),0.12);\n    vec2 c = vec2(0.8,0.03);\n    float r0 = 0.08;\n    float r1 = 0.09;\n    float a0 = t;\n    float a1 = a0 + radians(90.0);\n    brushes[2] = vec3(c.x + cos(a0)*r0, c.y + sin(a0)*r0,0.1);\n    brushes[3] = vec3(c.x - cos(a0)*r0, c.y - sin(a0)*r0,0.1);\n    brushes[4] = vec3(c.x + cos(a1)*r1, c.y + sin(a1)*r1,0.1);\n    brushes[5] = vec3(c.x - cos(a1)*r1, c.y - sin(a1)*r1,0.1);\n#endif\n\n// dynamic array indexing hack just so we can squeeze out a little convenience\n#define CSG_INSTR(OP, A, B) if (i == k) { csg_ops[i] = CSG_OP(OP, A, B); } k++;\n#define CSG_SET(A, B) CSG_INSTR(op_set, A, B)\n#define CSG_OR(A, B) CSG_INSTR(op_or, A, B)\n#define CSG_AND(A, B) CSG_INSTR(op_and, A, B)\n#define CSG_ANDN(A, B) CSG_INSTR(op_and_not, A, B)\n    for (int i = 0; i < NUM_CSG_OPS; ++i) {\n\t    int k = 0;\n#if DEBUG_CSG_OPS\n        CSG_SET(reg_a, 0);\n        DEBUG_CSG_OP(reg_a, 1);\n#elif TEST_SETUP\n        CSG_SET (reg_a, 0);\n        CSG_OR\t(reg_a, 1);\n        CSG_AND\t(reg_a, 2);\n#else\n        CSG_SET\t(reg_a, 2);\n        CSG_AND\t(reg_a, 3);\n        CSG_SET\t(reg_b, 4);\n        CSG_AND\t(reg_b, 5);\n        CSG_OR\t(reg_a,\treg_b);\n        CSG_SET (reg_b, 0);\n        CSG_ANDN(reg_b, 1);\n        CSG_OR  (reg_a, reg_b);\n        CSG_ANDN(reg_a, 6);\n#endif\n    }\n#undef CSG_INSTR\n#undef CSG_OR\n#undef CSG_AND\n#undef CSG_AND_NOT\n\n    // precalculate brush intervals\n    for (int i = 0; i < NUM_BRUSHES; ++i) {\n        brush_intervals[i] = iCircle(ray_origin, ray_dir, brushes[i]);\n    }\n}\n\nfloat interval_edge(vec2 range, float t) {\n    if (range.x > t) {\n    \treturn range.x; \n\t} else if (range.y > t) {\n        return -range.y;\n    } else {\n        return infinity;\n    }\n}\n\n// given a ray scalar, compute a lower bound on the\n// distance to the next fully occluding interval\n// when the distance is near 0, we have hit a surface.\nfloat scene_next_feature(float t) {\n    vec4 regs;\n    for (int i = 0; i < NUM_CSG_OPS; ++i) {\n        CSG_OP op = csg_ops[i];\n        int opcode = op[0];\n        float d = get_reg(regs, op[1]);\n        float src;\n        if (op[2] < 0) {\n            src = get_reg(regs, op[2]);\n        } else {\n            src = interval_edge(get_brush_interval(op[2]), t);\n        }\n        if (opcode == op_or) {\n            d = min(d, src);\n        } else if (opcode == op_and) {\n            d = max(d, src);\n        } else if (opcode == op_and_not) {\n            d = max(d, -src);\n        } else if (opcode == op_set) {\n            d = src;\n        }\n        set_reg(regs, op[1], d);\n    }\n    return regs[0];\n}\n\n// interface\n//////////////////////////////////////////////////////////\n\n// set color source for stroke / fill / clear\nvoid set_source_rgba(vec4 c);\nvoid set_source_rgba(float r, float g, float b, float a);\nvoid set_source_rgb(vec3 c);\nvoid set_source_rgb(float r, float g, float b);\nvoid set_source_linear_gradient(vec3 color0, vec3 color1, vec2 p0, vec2 p1);\nvoid set_source_linear_gradient(vec4 color0, vec4 color1, vec2 p0, vec2 p1);\nvoid set_source_radial_gradient(vec3 color0, vec3 color1, vec2 p, float r);\nvoid set_source_radial_gradient(vec4 color0, vec4 color1, vec2 p, float r);\nvoid set_source(sampler2D image);\n// control how source changes are applied\nconst int Replace = 0; // default: replace the new source with the old one\nconst int Alpha = 1; // alpha-blend the new source on top of the old one\nconst int Multiply = 2; // multiply the new source with the old one\nvoid set_source_blend_mode(int mode);\n// if enabled, blends using premultiplied alpha instead of\n// regular alpha blending.\nvoid premultiply_alpha(bool enable);\n\n// set line width in normalized units for stroke\nvoid set_line_width(float w);\n// set line width in pixels for stroke\nvoid set_line_width_px(float w);\n// set blur strength for strokes in normalized units\nvoid set_blur(float b);\n\n// add a circle path at P with radius R\nvoid circle(vec2 p, float r);\nvoid circle(float x, float y, float r);\n// add an ellipse path at P with radii RW and RH\nvoid ellipse(vec2 p, vec2 r);\nvoid ellipse(float x, float y, float rw, float rh);\n// add a rectangle at O with size S\nvoid rectangle(vec2 o, vec2 s);\nvoid rectangle(float ox, float oy, float sx, float sy);\n// add a rectangle at O with size S and rounded corner of radius R\nvoid rounded_rectangle(vec2 o, vec2 s, float r);\nvoid rounded_rectangle(float ox, float oy, float sx, float sy, float r);\n\n// set starting point for curves and lines to P\nvoid move_to(vec2 p);\nvoid move_to(float x, float y);\n// draw straight line from starting point to P,\n// and set new starting point to P\nvoid line_to(vec2 p);\nvoid line_to(float x, float y);\n// draw quadratic bezier curve from starting point\n// over B1 to B2 and set new starting point to B2\nvoid curve_to(vec2 b1, vec2 b2);\nvoid curve_to(float b1x, float b1y, float b2x, float b2y);\n// connect current starting point with first\n// drawing point.\nvoid close_path();\n\n// clear screen in the current source color\nvoid clear();\n// fill paths and clear the path buffer\nvoid fill();\n// fill paths and preserve them for additional ops\nvoid fill_preserve();\n// stroke paths and clear the path buffer\nvoid stroke_preserve();\n// stroke paths and preserve them for additional ops\nvoid stroke();\n// clears the path buffer\nvoid new_path();\n\n// return rgb color for given hue (0..1)\nvec3 hue(float hue);\n// return rgb color for given hue, saturation and lightness\nvec3 hsl(float h, float s, float l);\nvec4 hsl(float h, float s, float l, float a);\n\n// rotate the context by A in radians\nvoid rotate(float a);\n// uniformly scale the context by S\nvoid scale(float s);\n// non-uniformly scale the context by S\nvoid scale(vec2 s);\nvoid scale(float sx, float sy);\n// translate the context by offset P\nvoid translate(vec2 p);\nvoid translate(float x, float y);\n// clear all transformations for the active context\nvoid identity_matrix();\n// transform the active context by the given matrix\nvoid transform(mat3 mtx);\n// set the transformation matrix for the active context\nvoid set_matrix(mat3 mtx);\n\n// return the active query position for in_fill/in_stroke\n// by default, this is the mouse position\nvec2 get_query();\n// set the query position for subsequent calls to\n// in_fill/in_stroke; clears the query path\nvoid set_query(vec2 p);\n// true if the query position is inside the current path\nbool in_fill();\n// true if the query position is inside the current stroke\nbool in_stroke();\n\n// return the transformed coordinate of the current pixel\nvec2 get_origin();\n// draw a 1D graph from coordinate p, result f(p.x),\n// and gradient1D(f,p.x)\nvoid graph(vec2 p, float f_x, float df_x);\n// draw a 2D graph from coordinate p, result f(p),\n// and gradient2D(f,p)\nvoid graph(vec2 p, float f_x, vec2 df_x);\n// adds a custom distance field as path\n// this field will not be testable by queries\nvoid add_field(float c);\n\n// returns a gradient for 1D graph function f at position x\n#define gradient1D(f,x) (f(x + get_gradient_eps()) - f(x - get_gradient_eps())) / (2.0*get_gradient_eps())\n// returns a gradient for 2D graph function f at position x\n#define gradient2D(f,x) vec2(f(x + vec2(get_gradient_eps(),0.0)) - f(x - vec2(get_gradient_eps(),0.0)),f(x + vec2(0.0,get_gradient_eps())) - f(x - vec2(0.0,get_gradient_eps()))) / (2.0*get_gradient_eps())\n// draws a 1D graph at the current position\n#define graph1D(f) { vec2 pp = get_origin(); graph(pp, f(pp.x), gradient1D(f,pp.x)); }\n// draws a 2D graph at the current position\n#define graph2D(f) { vec2 pp = get_origin(); graph(pp, f(pp), gradient2D(f,pp)); }\n\n// represents the current drawing context\n// you usually don't need to change anything here\nstruct Context {\n    // screen position, query position\n    vec4 position;\n    vec2 shape;\n    vec2 clip;\n    vec2 scale;\n    float line_width;\n    bool premultiply;\n    vec2 blur;\n    vec4 source;\n    vec2 start_pt;\n    vec2 last_pt;\n    int source_blend;\n    bool has_clip;\n};\n\nfloat AA;\nfloat AAINV;\n\n// save current stroke width, starting\n// point and blend mode from active context.\nContext _save();\n// restore stroke width, starting point\n// and blend mode to a context previously returned by save()\nvoid restore(Context ctx);\n\n#define save(name) Context name = _save();\n\n// draws a half-transparent debug gradient for the\n// active path\nvoid debug_gradient();\nvoid debug_clip_gradient();\n// returns the gradient epsilon width\nfloat get_gradient_eps();\n\nvoid paint() {\n    float t = iTime;\n    setup_globals(t);    \n        \n    float rdot = AAINV*1.0;\n\n    scale(3.);\n    translate(-0.5,0.0);\n    \n    set_line_width_px(1.0);\n\n    // compute CSG field per pixel\n    vec4 regs = vec4(infinity);\n    vec2 p = get_origin();\n    for (int i = 0; i < NUM_CSG_OPS; ++i) {\n        CSG_OP op = csg_ops[i];\n        int opcode = op[0];\n        float src1 = get_reg(regs, op[1]);\n        float src2 = (op[2] < 0)?get_reg(regs, op[2]):dCircle(p, get_brush(op[2]));\n        float dst;\n        if (opcode == op_or) {\n            dst = min(src1, src2);\n        } else if (opcode == op_and) {\n            dst = max(src1, src2);\n        } else if (opcode == op_and_not) {\n            dst = max(src1, -src2);\n        } else if (opcode == op_set) {\n            dst = src2;\n        }\n        set_reg(regs, op[1], dst);\n    }    \n    add_field(regs[0]);\n    set_source_rgb(hsl(0.6,0.7,0.95));\n    fill_preserve();\n    set_source_rgb(hsl(0.6,0.2,0.5));\n    stroke();\n    \n    // paint brushes\n    set_source_rgba(hsl(0.6,0.2,0.5,0.3));\n    for (int i = 0; i < NUM_BRUSHES; ++i) {\n        vec3 brush = brushes[i];\n\t\tcircle(brush.xy, brush.z);\n\t    stroke();\n    }   \n    \n    // paint ray    \n    set_source_rgba(0.0,0.0,0.0,0.2);\n\tmove_to(0.0, 0.0);\n    line_to(1.0, 0.0);\n    stroke();    \n    set_source_rgb(vec3(0.0));\n    circle(0.0, 0.0, rdot);\n    fill();    \n    move_to(1.0, rdot);\n    line_to(1.0, -rdot);\n    line_to(1.0+rdot*3.0, 0.0);\n    close_path();\n    fill();\n\n    vec2 m = get_query();\n    if (iMouse.z > 0.5) {\n        // paint brush ranges\n        vec4 iregs;\n        for (int i = 0; i < 4; ++i) { iregs[i] = infinity; }\n        const float h = 0.005;\n        float y = h * float(NUM_CSG_OPS * 5);\n        for (int i = 0; i < NUM_CSG_OPS; ++i) {\n            CSG_OP op = csg_ops[i];\n            int opcode = op[0];        \n            float src1 = get_reg(iregs, op[1]);\n            float src2 = (op[2] < 0)?get_reg(iregs, op[2]):interval_edge(get_brush_interval(op[2]), m.x);\n            float dst;\n            vec3 color;\n            if (opcode == op_or) {\n                color = hsl(0.4,0.7,0.5);\n                dst = min(src1, src2);\n            } else if (opcode == op_and) {\n                color = hsl(0.1,1.0,0.5);\n                dst = max(src1, src2);\n            } else if (opcode == op_and_not) {\n                color = hsl(0.9,0.7,0.5);\n                dst = max(src1, -src2);\n            } else if (opcode == op_set) {\n                color = hsl(0.6,0.7,0.5);\n                dst = src2;\n            } else {\n                dst = infinity;\n                color = vec3(1.0,0.0,0.0);\n            }\n            set_reg(iregs, op[1], dst);\n\n            vec2 total_range = vec2(infinity,-infinity);\n            if (src1 != infinity) {\n                total_range[0] = min(total_range[0], abs(src1));\n                total_range[1] = max(total_range[1], abs(src1));\n            }\n            if (src2 != infinity) {\n                total_range[0] = min(total_range[0], abs(src2));\n                total_range[1] = max(total_range[1], abs(src2));\n            }\n            if (dst != infinity) {\n                total_range[0] = min(total_range[0], abs(dst));\n                total_range[1] = max(total_range[1], abs(dst));\n            }\n\n            float y1 = y;\n            y = y - h;\n            float y2 = y;\n            y = y - h;\n            float y3 = y;\n            y = y - 3.0*h;\n\n            set_source_rgba(0.0,0.0,0.0,0.1);\n            move_to(total_range.x, y1);\n            line_to(total_range.y, y1);\n            move_to(total_range.x, y2);\n            line_to(total_range.y, y2);\n            move_to(total_range.x, y3);\n            line_to(total_range.y, y3);\n            stroke();\n\n            const float R = h*0.5;\n            set_source_rgb(color);\n            circle(abs(src1), y1, R);\n            circle(abs(src2), y2, R);\n            circle(abs(dst), y3, R);\n            fill();\n\n            move_to(abs(src1),y1);\n            line_to(abs(src1),0.0);\n\n            move_to(abs(src2),y2);\n            line_to(abs(src2),0.0);\n\n            move_to(abs(dst),y3);\n            line_to(abs(dst),0.0);\n            stroke();\n        }\n        \n        set_source_rgba(0.0,0.0,0.0,0.2);\n        move_to(m.x, -1.0);\n        line_to(m.x, 1.0);\n        stroke();\n\t    float rd = scene_next_feature(m.x);\n        set_source_rgb(vec3(0.0));\n        circle(rd, 0.0, rdot);\n        stroke();\n    } else {\n        float t = 0.0;\n        for (int i = 0; i < (NUM_CSG_OPS + 1); ++i) {\n            float dv = scene_next_feature(t);\n            if (dv <= 0.0) {\n                set_source_rgb(vec3(0.0));\n                circle(t, 0.0, rdot);\n                stroke();                \n                break;\n            }\n            t = dv;\n            if (t == infinity) break;\n            float cf = float(i) / float(NUM_CSG_OPS + 1);\n            set_source_rgb(hsl(cf,0.8,0.7));\n            circle(t, 0.0, rdot);\n            fill();\n        }\n    }\n}\n\n// implementation\n//////////////////////////////////////////////////////////\n\nvec2 aspect;\nvec2 uv;\nvec2 position;\nvec2 query_position;\nfloat ScreenH;\n\n//////////////////////////////////////////////////////////\n\nfloat det(vec2 a, vec2 b) { return a.x*b.y-b.x*a.y; }\n\n//////////////////////////////////////////////////////////\n\nvec3 hue(float hue) {\n    return clamp(\n        abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0,\n        0.0, 1.0);\n}\n\nvec3 hsl(float h, float s, float l) {\n    vec3 rgb = hue(h);\n    return l + s * (rgb - 0.5) * (1.0 - abs(2.0 * l - 1.0));\n}\n\nvec4 hsl(float h, float s, float l, float a) {\n    return vec4(hsl(h,s,l),a);\n}\n\n//////////////////////////////////////////////////////////\n\n#define DEFAULT_SHAPE_V 1e+20\n#define DEFAULT_CLIP_V -1e+20\n\nContext _stack;\n\nvoid init (vec2 fragCoord) {\n    uv = fragCoord.xy / iResolution.xy;\n    vec2 m = iMouse.xy / iResolution.xy;\n\n    position = (uv*2.0-1.0)*aspect;\n    query_position = (m*2.0-1.0)*aspect;\n\n    _stack = Context(\n        vec4(position, query_position),\n        vec2(DEFAULT_SHAPE_V),\n        vec2(DEFAULT_CLIP_V),\n        vec2(1.0),\n        1.0,\n        false,\n        vec2(0.0,1.0),\n        vec4(vec3(0.0),1.0),\n        vec2(0.0),\n        vec2(0.0),\n        Replace,\n        false\n    );\n}\n\nvec3 _color = vec3(1.0);\n\nvec2 get_origin() {\n    return _stack.position.xy;\n}\n\nvec2 get_query() {\n    return _stack.position.zw;\n}\n\nvoid set_query(vec2 p) {\n    _stack.position.zw = p;\n    _stack.shape.y = DEFAULT_SHAPE_V;\n    _stack.clip.y = DEFAULT_CLIP_V;\n}\n\nContext _save() {\n    return _stack;\n}\n\nvoid restore(Context ctx) {\n    // preserve shape\n    vec2 shape = _stack.shape;\n    vec2 clip = _stack.clip;\n    bool has_clip = _stack.has_clip;\n    // preserve source\n    vec4 source = _stack.source;\n    _stack = ctx;\n    _stack.shape = shape;\n    _stack.clip = clip;\n    _stack.source = source;\n    _stack.has_clip = has_clip;\n}\n\nmat3 mat2x3_invert(mat3 s)\n{\n    float d = det(s[0].xy,s[1].xy);\n    d = (d != 0.0)?(1.0 / d):d;\n\n    return mat3(\n        s[1].y*d, -s[0].y*d, 0.0,\n        -s[1].x*d, s[0].x*d, 0.0,\n        det(s[1].xy,s[2].xy)*d,\n        det(s[2].xy,s[0].xy)*d,\n        1.0);\n}\n\nvoid identity_matrix() {\n    _stack.position = vec4(position, query_position);\n    _stack.scale = vec2(1.0);\n}\n\nvoid set_matrix(mat3 mtx) {\n    mtx = mat2x3_invert(mtx);\n    _stack.position.xy = (mtx * vec3(position,1.0)).xy;\n    _stack.position.zw = (mtx * vec3(query_position,1.0)).xy;\n    _stack.scale = vec2(length(mtx[0].xy), length(mtx[1].xy));\n}\n\nvoid transform(mat3 mtx) {\n    mtx = mat2x3_invert(mtx);\n    _stack.position.xy = (mtx * vec3(_stack.position.xy,1.0)).xy;\n    _stack.position.zw = (mtx * vec3(_stack.position.zw,1.0)).xy;\n    _stack.scale *= vec2(length(mtx[0].xy), length(mtx[1].xy));\n}\n\nvoid rotate(float a) {\n    float cs = cos(a), sn = sin(a);\n    transform(mat3(\n        cs, sn, 0.0,\n        -sn, cs, 0.0,\n        0.0, 0.0, 1.0));\n}\n\nvoid scale(vec2 s) {\n    transform(mat3(s.x,0.0,0.0,0.0,s.y,0.0,0.0,0.0,1.0));\n}\n\nvoid scale(float sx, float sy) {\n    scale(vec2(sx, sy));\n}\n\nvoid scale(float s) {\n    scale(vec2(s));\n}\n\nvoid translate(vec2 p) {\n    transform(mat3(1.0,0.0,0.0,0.0,1.0,0.0,p.x,p.y,1.0));\n}\n\nvoid translate(float x, float y) { translate(vec2(x,y)); }\n\nvoid clear() {\n    _color = mix(_color, _stack.source.rgb, _stack.source.a);\n}\n\nvoid blit(out vec4 dest) {\n    dest = vec4(_color, 1.0);\n}\n\nvoid blit(out vec3 dest) {\n    dest = _color;\n}\n\nvoid add_clip(vec2 d) {\n    d = d / _stack.scale;\n    _stack.clip = max(_stack.clip, d);\n    _stack.has_clip = true;\n}\n\nvoid add_field(vec2 d) {\n    d = d / _stack.scale;\n    _stack.shape = min(_stack.shape, d);\n}\n\nvoid add_field(float c) {\n    c = c / _stack.scale.x;\n    _stack.shape.x = min(_stack.shape.x, c);\n}\n\nvoid new_path() {\n    _stack.shape = vec2(DEFAULT_SHAPE_V);\n    _stack.clip = vec2(DEFAULT_CLIP_V);\n    _stack.has_clip = false;\n}\n\nvoid debug_gradient() {\n    vec2 d = _stack.shape;\n    _color = mix(_color,\n        hsl(d.x * 6.0,\n            1.0, (d.x>=0.0)?0.5:0.3),\n        0.5);\n}\n\nvoid debug_clip_gradient() {\n    vec2 d = _stack.clip;\n    _color = mix(_color,\n        hsl(d.x * 6.0,\n            1.0, (d.x>=0.0)?0.5:0.3),\n        0.5);\n}\n\nvoid set_blur(float b) {\n    if (b == 0.0) {\n        _stack.blur = vec2(0.0, 1.0);\n    } else {\n        _stack.blur = vec2(\n            b,\n            0.0);\n    }\n}\n\nvoid write_color(vec4 rgba, float w) {\n    float src_a = w * rgba.a;\n    float dst_a = _stack.premultiply?w:src_a;\n    _color = _color * (1.0 - src_a) + rgba.rgb * dst_a;\n}\n\nvoid premultiply_alpha(bool enable) {\n    _stack.premultiply = enable;\n}\n\nfloat min_uniform_scale() {\n    return min(_stack.scale.x, _stack.scale.y);\n}\n\nfloat uniform_scale_for_aa() {\n    return min(1.0, _stack.scale.x / _stack.scale.y);\n}\n\nfloat calc_aa_blur(float w) {\n    vec2 blur = _stack.blur;\n    w -= blur.x;\n    float wa = clamp(-w*AA*uniform_scale_for_aa(), 0.0, 1.0);\n    float wb = clamp(-w / blur.x + blur.y, 0.0, 1.0);\n\treturn wa * wb;\n}\n\nvoid fill_preserve() {\n    write_color(_stack.source, calc_aa_blur(_stack.shape.x));\n    if (_stack.has_clip) {\n\t    write_color(_stack.source, calc_aa_blur(_stack.clip.x));        \n    }\n}\n\nvoid fill() {\n    fill_preserve();\n    new_path();\n}\n\nvoid set_line_width(float w) {\n    _stack.line_width = w;\n}\n\nvoid set_line_width_px(float w) {\n    _stack.line_width = w*min_uniform_scale() * AAINV;\n}\n\nfloat get_gradient_eps() {\n    return (1.0 / min_uniform_scale()) * AAINV;\n}\n\nvec2 stroke_shape() {\n    return abs(_stack.shape) - _stack.line_width/_stack.scale;\n}\n\nvoid stroke_preserve() {\n    float w = stroke_shape().x;\n    write_color(_stack.source, calc_aa_blur(w));\n}\n\nvoid stroke() {\n    stroke_preserve();\n    new_path();\n}\n\nbool in_fill() {\n    return (_stack.shape.y <= 0.0);\n}\n\nbool in_stroke() {\n    float w = stroke_shape().y;\n    return (w <= 0.0);\n}\n\nvoid set_source_rgba(vec4 c) {\n    if (_stack.source_blend == Multiply) {\n        _stack.source *= c;\n    } else if (_stack.source_blend == Alpha) {\n    \tfloat src_a = c.a;\n    \tfloat dst_a = _stack.premultiply?1.0:src_a;\n\t    _stack.source =\n            vec4(_stack.source.rgb * (1.0 - src_a) + c.rgb * dst_a,\n                 max(_stack.source.a, c.a));\n    } else {\n    \t_stack.source = c;\n    }\n}\n\nvoid set_source_rgba(float r, float g, float b, float a) {\n    set_source_rgba(vec4(r,g,b,a)); }\n\nvoid set_source_rgb(vec3 c) {\n    set_source_rgba(vec4(c,1.0));\n}\n\nvoid set_source_rgb(float r, float g, float b) { set_source_rgb(vec3(r,g,b)); }\n\nvoid set_source(sampler2D image) {\n    set_source_rgba(texture(image, _stack.position.xy));\n}\n\nvoid set_source_linear_gradient(vec4 color0, vec4 color1, vec2 p0, vec2 p1) {\n    vec2 pa = _stack.position.xy - p0;\n    vec2 ba = p1 - p0;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    set_source_rgba(mix(color0, color1, h));\n}\n\nvoid set_source_linear_gradient(vec3 color0, vec3 color1, vec2 p0, vec2 p1) {\n    set_source_linear_gradient(vec4(color0, 1.0), vec4(color1, 1.0), p0, p1);\n}\n\nvoid set_source_radial_gradient(vec4 color0, vec4 color1, vec2 p, float r) {\n    float h = clamp( length(_stack.position.xy - p) / r, 0.0, 1.0 );\n    set_source_rgba(mix(color0, color1, h));\n}\n\nvoid set_source_radial_gradient(vec3 color0, vec3 color1, vec2 p, float r) {\n    set_source_radial_gradient(vec4(color0, 1.0), vec4(color1, 1.0), p, r);\n}\n\nvoid set_source_blend_mode(int mode) {\n    _stack.source_blend = mode;\n}\n\nvec2 length2(vec4 a) {\n    return vec2(length(a.xy),length(a.zw));\n}\n\nvec2 dot2(vec4 a, vec2 b) {\n    return vec2(dot(a.xy,b),dot(a.zw,b));\n}\n\nvoid rounded_rectangle(vec2 o, vec2 s, float r) {\n    s = (s * 0.5);\n    r = min(r, min(s.x, s.y));\n    o += s;\n    s -= r;\n    vec4 d = abs(o.xyxy - _stack.position) - s.xyxy;\n    vec4 dmin = min(d,0.0);\n    vec4 dmax = max(d,0.0);\n    vec2 df = max(dmin.xz, dmin.yw) + length2(dmax);\n    add_field(df - r);\n}\n\nvoid rounded_rectangle(float ox, float oy, float sx, float sy, float r) {\n    rounded_rectangle(vec2(ox,oy), vec2(sx,sy), r);\n}\n\nvoid rectangle(vec2 o, vec2 s) {\n    rounded_rectangle(o, s, 0.0);\n}\n\nvoid rectangle(float ox, float oy, float sx, float sy) {\n    rounded_rectangle(vec2(ox,oy), vec2(sx,sy), 0.0);\n}\n\nvoid circle(vec2 p, float r) {\n    vec4 c = _stack.position - p.xyxy;\n    add_field(vec2(length(c.xy),length(c.zw)) - r);\n}\nvoid circle(float x, float y, float r) { circle(vec2(x,y),r); }\n\n// from https://www.shadertoy.com/view/4sS3zz\nfloat sdEllipse( vec2 p, in vec2 ab )\n{\n\tp = abs( p ); if( p.x > p.y ){ p=p.yx; ab=ab.yx; }\n\t\n\tfloat l = ab.y*ab.y - ab.x*ab.x;\n    if (l == 0.0) {\n        return length(p) - ab.x;\n    }\n\t\n    float m = ab.x*p.x/l; \n\tfloat n = ab.y*p.y/l; \n\tfloat m2 = m*m;\n\tfloat n2 = n*n;\n\t\n    float c = (m2 + n2 - 1.0)/3.0; \n\tfloat c3 = c*c*c;\n\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n\n    float co;\n\n    if( d<0.0 )\n    {\n        float p = acos(q/c3)/3.0;\n        float s = cos(p);\n        float t = sin(p)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = ( ry + sign(l)*rx + abs(g)/(rx*ry) - m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow( abs(q+h), 1.0/3.0 );\n        float u = sign(q-h)*pow( abs(q-h), 1.0/3.0 );\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        float p = ry/sqrt(rm-rx);\n        co = (p + 2.0*g/rm - m)/2.0;\n    }\n\n    float si = sqrt( 1.0 - co*co );\n \n    vec2 r = vec2( ab.x*co, ab.y*si );\n\t\n    return length(r - p ) * sign(p.y-r.y);\n}\n\nvoid ellipse(vec2 p, vec2 r) {\n    vec4 c = _stack.position - p.xyxy;\n    add_field(vec2(sdEllipse(c.xy, r), sdEllipse(c.zw, r)));\n}\n\nvoid ellipse(float x, float y, float rw, float rh) {\n    ellipse(vec2(x,y), vec2(rw, rh));\n}\n\nvoid move_to(vec2 p) {\n    _stack.start_pt = p;\n    _stack.last_pt = p;\n}\n\nvoid move_to(float x, float y) { move_to(vec2(x,y)); }\n\n// stroke only\nvoid line_to(vec2 p) {\n    vec4 pa = _stack.position - _stack.last_pt.xyxy;\n    vec2 ba = p - _stack.last_pt;\n    vec2 h = clamp(dot2(pa, ba)/dot(ba,ba), 0.0, 1.0);\n    vec2 s = sign(pa.xz*ba.y-pa.yw*ba.x);\n    vec2 d = length2(pa - ba.xyxy*h.xxyy);\n    add_field(d);\n    add_clip(d * s);\n    _stack.last_pt = p;\n}\n\nvoid line_to(float x, float y) { line_to(vec2(x,y)); }\n\nvoid close_path() {\n    line_to(_stack.start_pt);\n}\n\n// from https://www.shadertoy.com/view/ltXSDB\n\n// Test if point p crosses line (a, b), returns sign of result\nfloat test_cross(vec2 a, vec2 b, vec2 p) {\n    return sign((b.y-a.y) * (p.x-a.x) - (b.x-a.x) * (p.y-a.y));\n}\n\n// Determine which side we're on (using barycentric parameterization)\nfloat bezier_sign(vec2 A, vec2 B, vec2 C, vec2 p) {\n    vec2 a = C - A, b = B - A, c = p - A;\n    vec2 bary = vec2(c.x*b.y-b.x*c.y,a.x*c.y-c.x*a.y) / (a.x*b.y-b.x*a.y);\n    vec2 d = vec2(bary.y * 0.5, 0.0) + 1.0 - bary.x - bary.y;\n    return mix(sign(d.x * d.x - d.y), mix(-1.0, 1.0,\n        step(test_cross(A, B, p) * test_cross(B, C, p), 0.0)),\n        step((d.x - d.y), 0.0)) * test_cross(A, C, B);\n}\n\n// Solve cubic equation for roots\nvec3 bezier_solve(float a, float b, float c) {\n    float p = b - a*a / 3.0, p3 = p*p*p;\n    float q = a * (2.0*a*a - 9.0*b) / 27.0 + c;\n    float d = q*q + 4.0*p3 / 27.0;\n    float offset = -a / 3.0;\n    if(d >= 0.0) {\n        float z = sqrt(d);\n        vec2 x = (vec2(z, -z) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        return vec3(offset + uv.x + uv.y);\n    }\n    float v = acos(-sqrt(-27.0 / p3) * q / 2.0) / 3.0;\n    float m = cos(v), n = sin(v)*1.732050808;\n    return vec3(m + m, -n - m, n - m) * sqrt(-p / 3.0) + offset;\n}\n\n// Find the signed distance from a point to a quadratic bezier curve\nfloat bezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{\n    B = mix(B + vec2(1e-4), B, abs(sign(B * 2.0 - A - C)));\n    vec2 a = B - A, b = A - B * 2.0 + C, c = a * 2.0, d = A - p;\n    vec3 k = vec3(3.*dot(a,b),2.*dot(a,a)+dot(d,b),dot(d,a)) / dot(b,b);\n    vec3 t = clamp(bezier_solve(k.x, k.y, k.z), 0.0, 1.0);\n    vec2 pos = A + (c + b*t.x)*t.x;\n    float dis = length(pos - p);\n    pos = A + (c + b*t.y)*t.y;\n    dis = min(dis, length(pos - p));\n    pos = A + (c + b*t.z)*t.z;\n    dis = min(dis, length(pos - p));\n    return dis * bezier_sign(A, B, C, p);\n}\n\nvoid curve_to(vec2 b1, vec2 b2) {\n    vec2 shape = vec2(\n        bezier(_stack.last_pt, b1, b2, _stack.position.xy),\n        bezier(_stack.last_pt, b1, b2, _stack.position.zw));\n    add_field(abs(shape));\n    add_clip(shape);\n\t_stack.last_pt = b2;\n}\n\nvoid curve_to(float b1x, float b1y, float b2x, float b2y) {\n    curve_to(vec2(b1x,b1y),vec2(b2x,b2y));\n}\n\nvoid graph(vec2 p, float f_x, float df_x) {\n    add_field(abs(f_x - p.y) / sqrt(1.0 + (df_x * df_x)));\n}\n\nvoid graph(vec2 p, float f_x, vec2 df_x) {\n    add_field(abs(f_x) / length(df_x));\n}\n\n//////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t aspect = vec2(iResolution.x / iResolution.y, 1.0);\n\t ScreenH = min(iResolution.x,iResolution.y);\n\t AA = ScreenH*0.4;\n\t AAINV = 1.0 / AA;\n\n    init(fragCoord);\n\n    paint();\n\n    blit(fragColor);\n}\n\n#ifdef GLSLSANDBOX\nvoid main() {\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}\n#endif\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}