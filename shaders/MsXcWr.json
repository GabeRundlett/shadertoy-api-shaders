{
    "Shader": {
        "info": {
            "date": "1488524997",
            "description": "Diamonds for Hours, small gems for Minuites and Seconds.\nDrag to move diamonds. #define MORE_PRESICE_IMAGE for hi-spec PC.\nThe perfect brilliant cut model as a study on original distance function. Caclulation of all facets were quite tough work for me...",
            "flags": 32,
            "hasliked": 0,
            "id": "MsXcWr",
            "likes": 58,
            "name": "Gem clock",
            "published": 3,
            "tags": [
                "reflection",
                "refraction",
                "glass",
                "diamond",
                "gem",
                "jewelry"
            ],
            "usePreview": 1,
            "username": "keim",
            "viewed": 3094
        },
        "renderpass": [
            {
                "code": "const float BLUR = 0.008;\nconst vec3  GAMMA = vec3(1./2.2);\n\nvec4 gamma(in vec4 i) { return vec4(pow(i.xyz, GAMMA), i.w); }\nvec4 img(vec2 d) { return textureLod(iChannel0, d/iResolution.xy, 0.); }\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec4 col = img(fragCoord);\n  vec3 b = vec3(1,-1,0) * col.w * BLUR * iResolution.x;\n  fragColor = gamma((col + img(fragCoord+b.xx) \n                         + img(fragCoord+b.xy)\n                         + img(fragCoord+b.yx)\n                         + img(fragCoord+b.yy))/5.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MORE_PRESICE_IMAGE\n\n// Constants ----------\n#define PI 3.14159265358979\n#define P2 6.28318530717959\n\nconst int   MAX_TRACE_STEP = 120;\nconst float MAX_TRACE_DIST = 40.;\nconst float NO_HIT_DIST    = 100.;\nconst float TRACE_PRECISION = .001;\nconst float FUDGE_FACTOR = .9;\nconst vec3  GAMMA = vec3(1./2.2);\n\nconst float GI_LENGTH = 1.6;\nconst float GI_STRENGTH = 1.;\nconst float AO_STRENGTH = .4;\nconst int   SHADOW_MAX_TRACE_STEP = 4;\nconst float SHADOW_MAX_TRACE_DIST = 10.;\nconst float SHADOW_MIN_MARCHING = .4;\nconst float SHADOW_SHARPNESS = 1.;\nconst float CAUSTIC_STRENGTH = 1.6;\nconst float CAUSTIC_SHARPNESS = 4.;\n\n\n// Structures ----------\nstruct Surface {\n  float d;              // distance\n  vec3  kd, tc, rl, rr; // diffusion, transparent-color, reflectance, refractance\n};\nSurface near(Surface s,Surface t) {if(s.d<t.d)return s;return t;}\n\nstruct Ray {\n  vec3  org, dir, col; // origin, direction, color\n  float len, stp, sgn; // length, marching step, sign of distance function\n};\nRay ray(vec3 o, vec3 d) { return Ray(o,d,vec3(1),0.,0.,1.); }\nRay ray(vec3 o, vec3 d, vec3 c, float s) { return Ray(o,d,c,0.,0.,s); }\nvec3 _pos(Ray r) {return r.org+r.dir*r.len;}\n\nstruct Hit {\n  vec3 pos,nml; // position, normal\n  Ray ray;      // ray\n  Surface srf;  // surface\n};\nHit nohit(Ray r) { return Hit(vec3(0), vec3(0), r, Surface(NO_HIT_DIST, vec3(1), vec3(0), vec3(0), vec3(0))); }\n\nstruct Camera {\n  vec3 pos, tgt;  // position, target\n  float rol, fcs; // roll, focal length\n};\nmat3 _mat3(Camera c) {\n  vec3 w = normalize(c.pos-c.tgt);\n  vec3 u = normalize(cross(w,vec3(sin(c.rol),cos(c.rol),0)));\n  return mat3(u,normalize(cross(u,w)),w);\n}\n\nstruct AABB { vec3 bmin, bmax;};\nstruct DLight { vec3 dir, col; };\nvec3 _lit(vec3 n, DLight l){return clamp((dot(n, l.dir)+1.)*.5,0.,1.)*l.col;}\n\n\n// Grobal valiables ----------\nconst float bpm = 144.;\nconst DLight amb = DLight(vec3(0,1,0), vec3(.7));\nconst DLight dif = DLight(normalize(vec3(0,1,1)), vec3(5.));\nfloat phase;\n\n\n// Utilities ----------\nvec3  _rgb(vec3 hsv) { return ((clamp(abs(fract(hsv.x+vec3(0,2,1)/3.)*2.-1.)*3.-1.,0.,1.)-1.)*hsv.y+1.)*hsv.z; }\nmat3  _smat(vec2 a) { float x=cos(a.y),y=cos(a.x),z=sin(a.y),w=sin(a.x); return mat3(y,w*z,-w*x,0,x,z,w,-y*z,y*x); }\nmat3  _pmat(vec3 a) {\n  float sx=sin(a.x),sy=sin(a.y),sz=sin(a.z),cx=cos(a.x),cy=cos(a.y),cz=cos(a.z);\n  return mat3(cz*cy,sz*cy,-sy,-sz*cx+cz*sy*sx,cz*cx+sz*sy*sx,cy*sx,sz*sx+cz*sy*cx,-cz*sx+sz*sy*cx,cy*cx);\n}\nfloat _checker(vec2 uv, vec2 csize) { return mod(floor(uv.x/csize.x)+floor(uv.y/csize.y),2.); }\nfloat len2(vec3 v) { return dot(v,v); }\nfloat smin(float a, float b, float k) { return -log(exp(-k*a)+exp(-k*b))/k; }\nfloat smax(float a, float b, float k) { return log(exp(k*a)+exp(k*b))/k; }\nfloat vmin(vec3 v) { return min(v.x, min(v.y, v.z)); }\nfloat vmax(vec3 v) { return max(v.x, max(v.y, v.z)); }\nvec2  cycl(float t, vec2 f, vec2 r) { return vec2(cos(t*f.x)*r.x+cos(t*f.y)*r.y,sin(t*f.x)*r.x+sin(t*f.y)*r.y); }\nvec3  fresnel(vec3 f0, float dp) { return f0+(1.-f0)*pow(1.-abs(dp),5.); }\nfloat rr2rl(float rr) { float v=(rr-1.)/(rr+1.); return v*v; }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\n// Intersect functions ----------\nvec2 hitAABB(Ray r, AABB b) { \n  vec3 t1=(b.bmin-r.org)/r.dir, t2=(b.bmax-r.org)/r.dir;\n  return vec2(vmax(min(t1, t2)), vmin(max(t1, t2)));\n}\n\nfloat ifPln(Ray r, vec3 n, float d) {\n  float v = -dot(r.dir, n), l;\n  if (abs(v)<TRACE_PRECISION) return NO_HIT_DIST;\n  return (0.<(l=dot(r.org-n*d, n)/v))?l:NO_HIT_DIST;\n}\n\nfloat ifSph(Ray r, vec3 c, float s) {\n  vec3 A=r.org-c;\n  float B=dot(A,r.dir),D=B*B+s*s-dot(A,A), l;\n  if (D<0.) return NO_HIT_DIST;\n  return (0.<(l=-B-sqrt(D)))?l:NO_HIT_DIST;\n}\n\nfloat ifBox(Ray r, vec3 b) {\n  vec2 v=hitAABB(r,AABB(-b,b));\n  return (0.<=v.y&&v.x<=v.y)?v.x:NO_HIT_DIST;\n}\n\nfloat ifTri(Ray r, vec3 v0, vec3 v1, vec3 v2) {\n  vec3 a=v1-v0,b=v2-v0,t=r.org-v0,p=cross(r.dir,b),q=cross(t,a);\n  float det=dot(a,p);\n  if (abs(det)<TRACE_PRECISION) return NO_HIT_DIST;\n  vec3 uvt=vec3(dot(p,t),dot(q,r.dir),dot(q,b))/det;\n  return (0.<=uvt.x&&0.<=uvt.y&&uvt.x+uvt.y<=1.)?uvt.z:NO_HIT_DIST;\n}\n\n\n// Distance Functions ----------\nfloat dfPln(vec3 p, vec3 n, float d) { return dot(p,n) + d; }\nfloat dfBox(vec3 p, vec3 b, float r) { return length(max(abs(p)-b,0.))-r;}\nfloat dfHex(vec3 p, vec2 h, float r) { vec3 q=abs(p); q.x=max(q.x*0.866025+q.z*0.5,q.z); return length(max(q.xy-h.xy,0.))-r; }\nvec3 repXZ(vec3 p, vec2 r){ vec2 hr=r*.5; return vec3(mod(p.x+hr.x, r.x)-hr.x, p.y, mod(p.z+hr.y, r.y)-hr.y); }\n\nconst vec4 ddp = vec4(-.8506508,.8506508,.5257311,0);\nfloat dfDdc(vec3 p, float r) {\n  float dp0=abs(dot(p,ddp.wyz)),dp1=abs(dot(p,ddp.wxz)),dp2=abs(dot(p,ddp.zwy)),\n        dp3=abs(dot(p,ddp.zwx)),dp4=abs(dot(p,ddp.yzw)),dp5=abs(dot(p,ddp.xzw));\n  return max(vmax(vec3(dp0,dp1,dp2)),vmax(vec3(dp3,dp4,dp5)))-r;\n}\nfloat dfDdcr(vec3 p, float r, float e) {\n  float dp0=abs(dot(p,ddp.wyz)),dp1=abs(dot(p,ddp.wxz)),dp2=abs(dot(p,ddp.zwy)),\n        dp3=abs(dot(p,ddp.zwx)),dp4=abs(dot(p,ddp.yzw)),dp5=abs(dot(p,ddp.xzw));\n  return log(exp(dp0*e)+exp(dp1*e)+exp(dp2*e)+exp(dp3*e)+exp(dp4*e)+exp(dp5*e))/e-r;\n}\n\n/*\nfloat dfBC (in vec3 p, float r) {\n  float angleStep = P2/8.;\n  float crownAngle = radians(33.0);\n  float pavilionAngle = radians(41.0);\n  float tableArea = 0.58;\n  float starArea  = 0.5;\n  float starAngle = crownAngle * 0.640;\n  float bezlAngle = crownAngle;\n  float ugrdAngle = crownAngle * 1.209;\n  float pavlAngle = pavilionAngle;\n  float lgrdAngle = pavilionAngle * 1.049;\n\n  vec3 vHlfStep = vec3(cos(angleStep/2.), 0, sin(angleStep/2.));\n  vec3 vQrtStep = vec3(cos(angleStep/4.), 0, sin(angleStep/4.));\n\n  float a = floor(atan(p.z,p.x)/angleStep+.5)*angleStep, c=cos(a), s=sin(a);\n  mat3  m = mat3(c,0,s,  0,1,0,  -s,0,c) * r;\n  vec3  q = inverse(m) * p;\n  q.z = abs(q.z);\n\n  vec3 nmlBezel = vec3(sin(bezlAngle), cos(bezlAngle),0);\n  float fcBezel = dot(q, nmlBezel) -  sin(bezlAngle);\n \n  vec3 nmlUGird = normalize(vec3(vQrtStep.x*sin(ugrdAngle),  cos(ugrdAngle)*vQrtStep.x, vQrtStep.z*sin(ugrdAngle)));\n  vec3 nmlLGird = normalize(vec3(vQrtStep.x*sin(lgrdAngle), -cos(lgrdAngle)*vQrtStep.x, vQrtStep.z*sin(lgrdAngle)));\n  float fcUGird = dot(q, nmlUGird) -  dot(nmlUGird, vQrtStep*vQrtStep.x);\n  float fcLGird = dot(q, nmlLGird) -  dot(nmlLGird, vQrtStep*vQrtStep.x);\n\n  vec3 nmlStar  = vec3(sin(starAngle)*vHlfStep.x,cos(starAngle),sin(starAngle)*vHlfStep.z);\n  float starDst = (1.-tableArea) * (1.-starArea) * (tan(ugrdAngle)/tan(starAngle)-1.) + 1.;\n  float fcStar  = dot(q, nmlStar) -  starDst * sin(starAngle);\n\n  vec3 nmlPMain = vec3(sin(pavlAngle), -cos(pavlAngle),0);\n  float fcPMain = dot(q, nmlPMain) -  sin(pavlAngle);\n\n  float fcTable = q.y -  (1.-tableArea) * tan(bezlAngle);\n  float fcCulet = - q.y -  tan(pavlAngle) * .96;\n  float fcGirdl = length(q.xz) - .975;\n\n  return max(fcGirdl, max(fcCulet, max(fcTable, max(fcBezel, max(fcStar, max(fcUGird, max(fcPMain,fcLGird)))))));\n}\n//*/\n\n//*\nfloat dfBC(in vec3 p, float r) {\n  float a = floor(atan(p.z,p.x)/(PI*.25)+.5)*PI*.25, c = cos(a), s = sin(a);\n  vec3  q = vec3(c*p.x+s*p.z, p.y, abs(-c*p.z+s*p.x)) / r;\n  float fcBezel = dot(q, vec3(.544639035, .8386705679, 0))           - .544639035;\n  float fcUGird = dot(q, vec3(.636291199, .7609957358, .1265661887)) - .636291199;\n  float fcLGird = dot(q, vec3(.675808237,-.7247156073, .1344266163)) - .675808237;\n  float fcStar  = dot(q, vec3(.332894535, .9328278154, .1378894313)) - .448447409;\n  float fcPMain = dot(q, vec3(.656059029,-.7547095802, 0))           - .656059029;\n  float fcTable =   q.y - .2727511892;\n  float fcCulet = - q.y - .8692867378 * .96;  \n  float fcGirdl = length(q.xz) - .975;\n  return max(fcGirdl, max(fcCulet, max(fcTable, max(fcBezel, max(fcStar, max(fcUGird, max(fcPMain,fcLGird)))))));\n}\n//*/\n\nvec3 repC_XZ(vec3 p, float r, int n){\n  float t=P2/float(n),atn=(atan(p.z,p.x))/t+.5;\n  float a=(fract(atn)-.5)*t,l=length(p.xz);\n  return vec3(cos(a)*l-r, p.y, sin(a)*l);\n}\n\nfloat esBounce(float t) { t=(t-1./3.5)*3.5;return min(t*t,min((t-1.5)*(t-1.5)+.75,(t-2.25)*(t-2.25)+.9375)); }\n\n\n// Sphere tracing ----------.\nvec3 hmsUnit = vec3(12,60,60);\nSurface map(vec3 p){\n  vec3 now = mod(vec3(iDate.w)/vec3(3600,60,1),hmsUnit);\n  vec3 idx = floor(mod(vec3(1.-atan(p.z,p.x)/P2)*hmsUnit-.5,hmsUnit));\n  vec3 hmsFlag = clamp(now-idx,0.,1.);\n  float s12 = clamp(mod(now.z/5.+6.,12.)-idx.x,0.,1.);\n\n  vec3 hcol = _rgb(vec3(idx.x/12.,hmsFlag.x*.6,.9));\n  vec3 mcol = _rgb(vec3(idx.y/60.,hmsFlag.y*.3,.9));\n  float sm = mod(now.z-idx.y,60.), ism=1.-(sm-1.)/59.;\n  vec2 sp = (sm<1.)?vec2(sm,esBounce(sm)):vec2((1.-cos(ism*PI))*.5,(3.+cos(ism*P2))*.25);\n  vec3 spos = vec3(6.*sp.x,sp.y*2.8-3.0,0);\n  vec3 ms = vec3((1.-hmsFlag.x)*((cos(s12*P2)+1.)*.45+.1),1.25-cos(s12*PI)*2.,0);\n\n  if (iMouse.z > .5) {\n    ms.xy = clamp(iMouse.yx/iResolution.yx*1.4-0.2,vec2(0),vec2(1));\n    hcol = _rgb(vec3(idx.x/12.,.6,.9));\n  }\n  mat3 mat = _pmat(ms*PI*vec3(41./180.,2,1));\n  vec3 ri = vec3(2.4,2.425,2.45);\n  vec3 pos = vec3(2,1.0,2);\n  vec3 fcl = textureLod(iChannel1,p.xz*0.1,0.).rgb*(_checker(p.xz,vec2(2.5))*.5+.2);\n  return near(\n    Surface(dfBox(p-vec3(0,-.52,0), vec3(10,0,10), .5), fcl, vec3(0), vec3(.2), vec3(0)), \n    near(\n      Surface(dfBC(repC_XZ(p,7.2,12)*mat+vec3(0,-.86,0), 1.0), vec3(0), hcol, vec3(rr2rl(ri.x)), ri),\n      Surface(dfDdc(repC_XZ(p,9.5,60)+spos, 0.2), vec3(0), mcol, vec3(rr2rl(ri.x)), ri)\n    )\n//    Surface(dfBC(repC_XZ(p,8.,12)*m+vec3(5.,-.86,0), 1.0), col*.1, vec3(0), vec3(.9), ri)\n  );\n}\n\nvec3 calcNormal(in vec3 p){\n  vec3 v=vec3(.001,0,map(p).d);\n  return normalize(vec3(map(p+v.xyy).d-v.z,map(p+v.yxy).d-v.z,map(p+v.yyx).d-v.z));\n}\n\n\n// Lighting ----------\nvec4 cs(in vec3 pos, in vec3 dir) {\n  vec4 col=vec4(0,0,0,1);\n  float len=SHADOW_MIN_MARCHING;\n  for( int i=0; i<SHADOW_MAX_TRACE_STEP; i++ ) {\n    Surface s = map(pos + dir*len);\n    col.a   = min(col.a, SHADOW_SHARPNESS*s.d/len);\n    col.rgb = s.tc;\n    len += max(s.d, SHADOW_MIN_MARCHING);\n    if (s.d<TRACE_PRECISION || len>SHADOW_MAX_TRACE_DIST) break;\n  }\n  col.a = clamp(col.a, 0., 1.);\n  col.rgb = pow((1.-col.a), CAUSTIC_SHARPNESS) * col.rgb * CAUSTIC_STRENGTH;\n  return col;\n}\n\nvec4 gi(in vec3 pos, in vec3 nml) {\n  vec4 col = vec4(0);\n  for (int i=0; i<4; i++) {\n    float hr = .01 + float(i) * GI_LENGTH / 4.;\n    Surface s = map(nml * hr + pos);\n    col += vec4(s.kd, 1.) * (hr - s.d);\n  }\n  col.rgb *= GI_STRENGTH / GI_LENGTH;\n  col.w = clamp(1.-col.w * AO_STRENGTH / GI_LENGTH, 0., 1.);\n  return col;\n}\n\nvec3 lighting(in Hit h) {\n  if (h.ray.len > MAX_TRACE_DIST) return pow(textureLod(iChannel0, -h.ray.dir, 0.).rgb,vec3(0.4));\n  vec4 fgi = gi(h.pos, h.nml);    // Fake Global Illumination\n  vec4 fcs = cs(h.pos, dif.dir);  // Fake Caustic Shadow\n  //   lin = ([Ambient]        + [Diffuse]        * [SS] + [CAUSTICS]) * [AO] + [GI]\n  vec3 lin = (_lit(h.nml, amb) + _lit(h.nml, dif) * fcs.w + fcs.rgb) * fgi.w + fgi.rgb;\n  return  h.srf.kd * lin;\n}\n\n\n// Ray ----------\nRay rayScreen(in vec2 p, in Camera c) {\n  return ray(c.pos, normalize(_mat3(c) * vec3(p.xy, -c.fcs)));\n}\n\nRay rayReflect(Hit h, vec3 rl) {\n  return ray(h.pos + h.nml*.01, reflect(h.ray.dir, h.nml), h.ray.col*rl, h.ray.sgn);\n}\n\nRay rayRefract(Hit h, float rr) {\n  vec3 r = refract(h.ray.dir, h.nml, (h.ray.sgn>0.)?(1./rr):rr);\n  if (len2(r)<.001) return ray(h.pos+h.nml*.01, reflect(h.ray.dir, h.nml), h.ray.col, h.ray.sgn);\n  return ray(h.pos - h.nml*.01, r, h.ray.col*((h.ray.sgn>0.)?h.srf.tc:vec3(1)), -h.ray.sgn);\n}\n\n\n// renderer ----------\nHit sphereTrace(in Ray r) {\n  Surface s;\n  for(int i=0; i<MAX_TRACE_STEP; i++) {\n    s = map(_pos(r));\n    s.d *= r.sgn;\n    r.len += s.d * FUDGE_FACTOR;\n    r.stp = float(i);\n    if (s.d < TRACE_PRECISION || r.len > MAX_TRACE_DIST) break;\n  }\n  vec3 p = _pos(r);\n  if (r.len > MAX_TRACE_DIST) return nohit(r);\n  return Hit(p, calcNormal(p)*r.sgn, r, s);\n}\n\nHit trace(in Ray r) {\n  return sphereTrace(r);\n}\n\n// D=Diffuse/Draw, R=Reflect, T=Transmit, *_REP=Repeating, CT=cheap trick for black pixels\n#define FRL      fresnel(h[lv].srf.rl,dot(h[lv].ray.dir,h[lv].nml))\n#define PATH(lm) vec3 col=vec3(0),rl,c;Hit h[lm];h[0]=trace(r);float l0=h[0].ray.len;int lv=0;\n#define D        if (len2(h[lv].srf.kd)>=.001) {col+=lighting(h[lv])*h[lv].ray.col;h[lv].ray.col*=(1.-h[lv].srf.kd);}\n#define R        h[lv+1]=h[lv];rl=FRL;h[lv].ray.col*=(1.-rl);   ++lv;if(len2(h[lv].srf.rl)>=.001){h[lv]=trace(rayReflect(h[lv],rl));\n#define T        h[lv+1]=h[lv];h[lv].ray.col*=(1.-h[lv].srf.tc);++lv;if(len2(h[lv].srf.tc)>=.001){h[lv]=trace(rayRefract(h[lv],h[lv].srf.rr.x));\n#define R_REP(c) h[lv+1]=h[lv];rl=FRL;h[lv].ray.col*=(1.-rl);   ++lv;for(int i=c;i!=0;--i){if(len2(h[lv].srf.rl)<.001)break;h[lv]=trace(rayReflect(h[lv],rl));rl=FRL;\n#define T_REP(c) h[lv+1]=h[lv];h[lv].ray.col*=(1.-h[lv].srf.tc);++lv;for(int i=c;i!=0;--i){if(len2(h[lv].srf.tc)<.001)break;h[lv]=trace(rayRefract(h[lv],h[lv].srf.rr.x));\n#define CT       c=h[lv+1].ray.col;if(len2(c)>=.25)col+=textureLod(iChannel0,-h[lv+1].ray.dir,0.).rgb*c*c;\n#define LEND     }--lv;\n#define PATHEND  return vec4(col, l0);\n\nvec4 render(in Ray r){\n  PATH(3)\n  D\n#ifdef MORE_PRESICE_IMAGE\n  R\n    D\n    T_REP(7)\n      D\n    LEND\n  LEND\n  T_REP(12)\n    D\n  LEND\n  CT\n#else\n  R\n    D\n  LEND\n  T_REP(4)\n    D\n  LEND\n  CT\n#endif\n  PATHEND\n}\n\nvec4 gamma(in vec4 i) {\n  return vec4(pow(i.xyz, GAMMA), i.w);\n}\n\n\n// Entry point ----------\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  phase = iTime * bpm / 60. * P2;\n\n  vec2   m = vec2(cos(phase/128.), sin(phase/128.))*20.;\n  Camera c = Camera(vec3(m.x,sin(phase/32.)*4.+6.,m.y), vec3(0), 0., 1.73205081);\n  Ray    r = rayScreen((fragCoord.xy * 2. - iResolution.xy) / iResolution.x, c);\n\n  vec4 res = render(r);\n  res.w = min(abs(res.w - length(c.pos)+8.)/100., 1.);\n\n  fragColor = res;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}