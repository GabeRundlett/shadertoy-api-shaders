{
    "Shader": {
        "info": {
            "date": "1528256151",
            "description": "Playing with mercury's functions\nMouse moves the camera.",
            "flags": 0,
            "hasliked": 0,
            "id": "lsKyDz",
            "likes": 4,
            "name": "SDFun",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "sdf",
                "reflections"
            ],
            "usePreview": 0,
            "username": "felipunkerito",
            "viewed": 581
        },
        "renderpass": [
            {
                "code": "// iq's\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nfloat fbm( in vec3 p )\n{\n\n    float f = 0.0;\n    f += 0.5000 * noise( p ); p *= 2.02;\n    f += 0.2500 * noise( p ); p *= 2.03;\n    f += 0.1250 * noise( p ); p *= 2.01;\n    f += 0.0625 * noise( p );\n    f += 0.0125 * noise( p );\n    return f / 0.9375;\n    \n}\n\nvec2 map( vec3 p )\n{\n \n    vec2 pla = vec2( p.y + 2.0 + fbm( p + iTime ) * 0.02, 0.0 );\n    vec3 pTem = p;\n    pTem.xz = mod( p.xz, 5.0 ) - 2.5;\n    vec2 sph = vec2( length( pTem ) - cos( iTime ), 3.0 );\n    pMirrorOctant( p.xz, vec2( iTime ) );\n    pModMirror2( p.xz, vec2( 10.0, 8.0 ) );\n    pModPolar( p.xz, 7.0 );\n    p.x = -abs( p.x ) + 3.0;\n\tp.z = fMod1( p.z, 3.0 );\n    p.z = abs( p.z ) + 0.4;\n    float box = fBox( vec3( p.x, p.y, p.z ) - vec3( 0.0, -1.0, 0.0 ) , vec3( 0.5, 2.0, 0.5 ) );\n    float cyl = fCylinder( p.yxz - vec3( 1.0, 0.0, 0.0 ), 0.5, 0.5 );\n    float win = min( box, cyl );\n    float wal = fBox2( p.xy, vec2( 0.3, 2.6 ) );\n    float uni = fOpDifferenceStairs( wal, win, 0.9, 12.0 );\n    pMod1( p.z, 1.0 );\n    p.y -= 3.05;\n    p.x -= 1.2;\n    pR( p.xy, -1.2 );\n    vec2 roo = vec2( fBox2( p.xy, vec2( 0.1, 2.1 ) ), 1.0 );\n    float s = 1.0;\n    \n    float d = sdBox(p,vec3(1.0));\n    for( int m=0; m<4; m++ )\n    {\n    \tvec3 a = mod( p*s, 2.0 )-1.0;\n        s *= 2.0;\n        vec3 r = 2.0 - 3.0*abs(a);\n        float c = sdSph( r )/s;\n        d = max(d,-c);\n    }\n    \n    roo = vec2( max( roo.x, d ), 1.0 );\n    \n    vec2 fin = vec2( uni, 2.0 );\n    if( roo.x < fin.x ) fin = roo;\n    if( fin.x < pla.x ) pla = fin;\n    if( sph.x < pla.x ) pla = sph;\n    return pla;\n    /*vec2 pla = vec2( p.y + 2.3, 0.0 );\n    vec2 sph = vec2( length( p ) - 1.0, 1.0 );\n    if( sph.x < pla.x ) pla = sph;\n    return pla;*/\n\n}\n\nvec3 norm( vec3 p )\n{\n\n    vec2 e = vec2( EPS, 0.0 );\n    return normalize( vec3( map( p + e.xyy ).x - map( p - e.xyy ).x,\n                            map( p + e.yxy ).x - map( p - e.yxy ).x,\n                            map( p + e.yyx ).x - map( p - e.yyx ).x\n                          )\n                     );\n\n}\n\nfloat softShadows( vec3 ro, vec3 rd )\n{\n\n    float res = 1.0;\n    for( float t = 0.1; t < 8.0; ++t )\n    {\n        float h = map( ro + rd * t ).x;\n    \tif( h < EPS ) return 0.0;\n        res = min( res, 8.0 * h / t );\n\n    } \n    \n    return res;\n}\n\nfloat ray( vec3 ro, vec3 rd, out float d )\n{\n\n    vec3 col = vec3( 0.0 );\n    float t = 0.0;\n    for( int i = 0; i < STEPS; ++i )\n    {\n    \n    \td = 0.5 * map( ro + rd * t ).x;\n        if( d < EPS || t > FAR ) break;\n        t += d;\n        \n    }\n\n    return t;\n\n}\n\nvec3 shad( vec3 ro, vec3 rd )\n{\n\n    float d = 0.0;\n    float t = ray( ro, rd, d );\n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n    vec3 lig = normalize( vec3( 1.0, 0.8, 0.6 ) );\n    vec3 blig = vec3( -lig.x, -lig.y, -lig.z );\n    vec3 col = vec3( 0.0 );\n    vec3 ref = reflect( rd, n );\n    \n    float amb = 0.5 + 0.5 * n.y;\n    float bac = max( 0.0, 0.5 + 0.2 * dot( blig, n ) );\n    float dif = max( 0.0, dot( lig, n ) );\n    float sha = softShadows( p, lig );\n    float spe = pow( clamp( dot( ref, lig ), 0.0, 1.0 ), 16.0 );\n    float speO = pow( clamp( dot( ref, blig ), 0.0, 1.0 ), 16.0 );\n    \n    col += 0.2 * amb; \n    col += 0.4 * dif;\n    col += 0.2 * bac;\n    col += 0.05 * spe;\n    col += 0.05 * speO;\n    col += 0.2 * sha;\n    col = sqrt( col );\n    if( map( p ).y == 0.0 ) col *= vec3( 0.1, 0.2, 0.3 );\n    if( map( p ).y == 1.0 ) col *= vec3( 0.6, 0.5, 0.5 );\n    if( map( p ).y == 2.0 ) col *= mix( vec3( 2.0 ), vec3( 0.0, 0.1, 0.0 ), \n                                        fbm( p * fbm( p * fbm( p ) ) )\n                                      );   \n    \n    col *= 8.0 / ( 8.0 + t * t * 0.05 );\n    col *= sqrt( col );\n    \n    return col;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = ( -iResolution.xy + 2.0 * fragCoord ) / iResolution.y;\n    \n    vec2 mou = iMouse.xy / iResolution.xy;\n    mou.y = clamp( mou.y,-TAU/4.0, 1.5 );\n    \n    vec3 ro = vec3( 0.0 );\n    if( mou.x == 0.0 )\n    \tro = 5.0 * vec3( sin( -2.0 + iTime * 0.2 ), mou.y, cos( 2.0 + iTime * 0.2 ) );\n    else if( mou.x != 0.0 )\n        ro = 5.0 * vec3( sin( mou.x * PI * 2.0 ), mou.y, cos( -mou.x * PI * 2.0 ) );\n    vec3 ww = normalize( vec3( 0.0 ) - ro );\n    vec3 uu = normalize( cross( vec3( 0.0, 1.0, 0.0 ), ww ) );\n    vec3 vv = normalize( cross( ww, uu ) );\n    vec3 rd = normalize( uv.x * uu + uv.y * vv + 1.5 * ww );\n    //vec3 rd = normalize( vec3( uv, -1.0 ) );\n    \n    float d = 0.0;\n    float t = ray( ro, rd, d );\n    vec3 p = ro + rd * t;\n    vec3 n = norm( p );\n    \n    vec3 col = d < EPS ? shad( ro, rd ) : vec3( 0.0 );\n    \n    if( map( p ).y == 0.0 || map( p ).y == 3.0 )\n\n    rd = normalize( reflect( rd, n ) );\n    ro = p + rd * 0.02;\n    \n\tif( d < EPS )\n    col += shad( ro, rd );\n    \n    col *= sqrt( col * 0.5 );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define EPS          0.002\n#define STEPS          128\n#define FAR           30.0\n#define PI    acos( -1.0 )\n#define TAU  atan(1.0)*8.0\n#define HASHSCALE .1031\n\nfloat hash(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nmat2 rot( float a )\n{\n\n    return mat2( cos( a ), -sin( a ),\n                 sin( a ),  cos( a )\n               );\n\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    \n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n\n}\n\nfloat sdSph( vec3 p )\n{\n\n    return length( p ) - 1.0;\n\n}\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x<0.)?-1.:1.;\n}\n\nvec2 sgn(vec2 v) {\n\treturn vec2((v.x<0.)?-1.:1., (v.y<0.)?-1.:1.);\n}\n\n\n// Shortcut for 45-degrees rotation\nvoid pR45(inout vec2 p) {\n\tp = (p + vec2(p.y, -p.x))*sqrt(0.5);\n}\n\nfloat pMod1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\nfloat vmax(vec2 v) {\n\treturn max(v.x, v.y);\n}\n\nfloat vmax(vec3 v) \n{\n    \n\treturn max(max(v.x, v.y), v.z);\n\n}\n\nfloat fMod1( float p, float t )\n{\n\n    float hal = t * 0.5;\n    return mod( p + hal, t ) - hal;\n\n}\n\nfloat fOpUnionStairs(float a, float b, float r, float n) \n{\n    \n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2.0 * s)) - s)));\n\n}\n\n\nfloat fOpDifferenceStairs(float a, float b, float r, float n) \n{\n    \n\treturn -fOpUnionStairs(-a, b, r, n);\n\n}\n\n// We can just call Union since stairs are symmetric.\nfloat fOpIntersectionStairs(float a, float b, float r, float n) {\n\treturn -fOpUnionStairs(-a, -b, r, n);\n}\n\nfloat fOpDifferenceColumns(float a, float b, float r, float n) \n\n{\n\ta = -a;\n\tfloat m = min(a, b);\n\t//avoid the expensive computation where not needed (produces discontinuity though)\n\tif ((a < r) && (b < r)) {\n\t\tvec2 p = vec2(a, b);\n\t\tfloat columnradius = r*sqrt(2.0)/n/2.0;\n\t\tcolumnradius = r*sqrt(2.0-0.0)/((n-1.0)*2.0+sqrt(2.0));\n\n\t\tpR45(p);\n\t\tp.y += columnradius;\n\t\tp.x -= sqrt(2.0)/2.0*r;\n\t\tp.x += -columnradius*sqrt(2.0)/2.0;\n\n\t\tif (mod(n,2.0) == 1.0) {\n\t\t\tp.y += columnradius;\n\t\t}\n\t\tpMod1(p.y,columnradius*2.0);\n\n\t\tfloat result = -length(p) + columnradius;\n\t\tresult = max(result, p.x);\n\t\tresult = min(result, a);\n\t\treturn -min(result, b);\n\t} else {\n\t\treturn -m;\n\t}\n}\n\n// Mirror at an axis-aligned plane which is at a specified distance <dist> from the origin.\nfloat pMirror (inout float p, float dist) {\n\tfloat s = sgn(p);\n\tp = abs(p)-dist;\n\treturn s;\n}\n\n// Mirror in both dimensions and at the diagonal, yielding one eighth of the space.\n// translate by dist before mirroring.\nvec2 pMirrorOctant (inout vec2 p, vec2 dist) {\n\tvec2 s = sgn(p);\n\tpMirror(p.x, dist.x);\n\tpMirror(p.y, dist.y);\n\tif (p.y > p.x)\n\t\tp.xy = p.yx;\n\treturn s;\n}\n\n// Same, but mirror every second cell so they match at the boundaries\nfloat pModMirror1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize,size) - halfsize;\n\tp *= mod(c, 2.0)*2. - 1.;\n\treturn c;\n}\n\nvec2 pModMirror2(inout vec2 p, vec2 size) {\n\tvec2 halfsize = size*0.5;\n\tvec2 c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\tp *= mod(c,vec2(2.))*2. - vec2(1.);\n\treturn c;\n}\n\n// Repeat around the origin by a fixed angle.\n// For easier use, num of repetitions is use to specify the angle.\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n\n// Repeat in two dimensions\nvec2 pMod2(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5,size) - size*0.5;\n\treturn c;\n}\n\n// Repeat in three dimensions\nvec3 pMod3(inout vec3 p, vec3 size) {\n\tvec3 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5, size) - size*0.5;\n\treturn c;\n}\n\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat fBox2(vec2 p, vec2 b) {\n\tvec2 d = abs(p) - b;\n\treturn length(max(d, vec2(0))) + vmax(min(d, vec2(0)));\n}\n\n// Cylinder standing upright on the xz plane\nfloat fCylinder(vec3 p, float r, float height) {\n\tfloat d = length(p.xz) - r;\n\td = max(d, abs(p.y) - height);\n\treturn d;\n}\n\nfloat fBox(vec3 p, vec3 b)\n{\n    \n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax(min(d, vec3(0)));\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}