{
    "Shader": {
        "info": {
            "date": "1720578060",
            "description": "seven segment 2d display number station\nhave to add a nice glow on top eventually, but wanted to keep it simple. ",
            "flags": 0,
            "hasliked": 0,
            "id": "4XyXDc",
            "likes": 13,
            "name": "Hamster 7 Segment",
            "published": 3,
            "tags": [
                "lcd",
                "2dl",
                "segmentseven"
            ],
            "usePreview": 0,
            "username": "starmole2",
            "viewed": 141
        },
        "renderpass": [
            {
                "code": "\nint digits[10] = int[10](\n    1|4|8|16|32|64, // 0\n    16|64, // 1\n    1|8|2|64|4, // 2\n    1|8|2|32|4, // 3\n    8|2|16|8|32, // 4\n    1|16|2|32|4, // 5\n    1|16|2|32|64|4, // 6\n    1|8|32, // 7\n    1|2|4|8|16|32|64, // 8\n    1|8|2|16|32 // 9\n);\n\n// bits for segments: \n//     1\n//  16   8\n//     2\n//  64   32\n//     4\n\nuvec3 pcg3d(uvec3 v) {\n    v = v * 1664525u + 1013904223u;\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n    v ^= v >> 16u;\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n    return v;\n}\n\nfloat distSegment(vec2 pos) {\n    float dhline = abs(pos.y) -.2;\n    float dbox = max(abs(pos.x - pos.y), abs(pos.y + pos.x)) - .5;\n    return max(dhline,dbox);\n}\n\nfloat distSegment7(vec2 pos, int bits) {\n    float d = 10000.0;\n    vec2 segoffsets[7] = vec2[7](\n        vec2(0.0,-1.0),vec2(0.0,0.0),vec2(0.0,1.0), // h\n        vec2(-.5,-.5), vec2(-.5,.5), vec2(.5,-.5), vec2(.5,.5) // v\n    );\n    int m = 1;\n    for ( int i=0; i<3; i++, m<<=1 ) \n        if ( (bits&m)!=0 ) d = min(d,distSegment(pos+segoffsets[i]));\n    pos = pos.yx;\n    for ( int i=3; i<7; i++, m<<=1 ) \n        if ( (bits&m)!=0 ) d = min(d,distSegment(pos+segoffsets[i]));\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord/iResolution.xy)*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float a = iTime*.10;\n    mat2 rot = mat2(sin(a), -cos(a), cos(a), sin(a));\n    uv *=  rot;\n    \n    float z = sin(iTime*.2)*5.0+6.0;  \n    uv*=z;\n    uv.y += 1.0;\n    //uv.x += iTime*z*.01;\n    \n    float segSize = .03;\n    \n    float yscale = 2.0;\n    uv = uv*vec2(1.0,1.0/yscale);\n    float aa = length(fwidth(uv));\n    vec2 iuv = ceil(uv);\n    uv = fract(uv) * vec2(1.0,yscale);\n    uv.x = (uv.x -.5)*2.0;\n    uv.y = (uv.y -.5*yscale)*yscale;    \n    uvec3 r =  pcg3d(uvec3(abs(ivec2(iuv)+ivec2(0xffff)), 0));\n    r.x += uint(iTime+float(r.y&0xfffu)/float(0xfff)+iDate.w*.2);\n    float d = distSegment7(uv,digits[r.x%10u]);\n    float dOff = distSegment7(uv,digits[r.x%10u]^127);\n    vec3 cOn = mix(vec3(1.0,0.6,0.2), vec3(0.0), smoothstep(-aa,aa,d + segSize));\n    vec3 cOff = mix(vec3(.0,0.2,0.1), vec3(0.0), smoothstep(-aa,aa,dOff + segSize));\n\n    vec3 col = cOn + cOff;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}