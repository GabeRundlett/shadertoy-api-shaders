{
    "Shader": {
        "info": {
            "date": "1669494774",
            "description": "Tiles sliding in spiral paths in two directions on a sphere. Default is interior view. Mouse rotates, for other controls, see code header. ",
            "flags": 16,
            "hasliked": 0,
            "id": "ddsXRf",
            "likes": 29,
            "name": "Sliding Tiles II",
            "published": 3,
            "tags": [
                "tiles",
                "sliding"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 419
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Sliding Tiles II, mla 2022\n//\n// Tiles sliding in spiral paths in two directions on a sphere. Default view\n// is from just inside the sphere, so is a stereographic projection. Alternative\n// views are from the centre and from an external location.\n//\n// <mouse>: rotate view\n// 'a': MSAA\n// 'g': show grid\n// 'h': grid thickness\n// 'f': show flat tiling\n// 'r': autorotation\n// 'c': show centre view\n// 'e': show external view\n// 'l': London view\n// 's': alternate tile orientation\n// 't': tile coloring\n//\n////////////////////////////////////////////////////////////////////////////////\n\nivec2 getindex(int t, vec2 uv) {\n  assert(t >= 0);\n  // Calculate which tile appears at point uv at time t.\n  // Other patterns should be possible.\n  ivec2 ix = ivec2(floor(uv));\n  if (odd(ix.x) && odd(ix.y)) return ix; // Stationary tiles\n  ix -= t/6*2; // Tiles move 2 every 6 cycles\n  t %= 6;\n  for ( ; t != 0; t--) {\n    // A neat recurrence. Maybe this could be simplified.\n    if (even(t)) {\n      if (even(ix.x)) ix.y--;\n    } else {\n      if (even(ix.y)) ix.x--;\n    }\n  }\n  return ix;\n}\n\nvec3 slider(vec2 uv, mat2 dxdy) {\n  //uv.x = mod(uv.x+1.0,2.0)-1.0; // Sanity check - should have no effect\n  //uv *= 3.0; // Zoom out\n  float theta = -PI/4.0;\n  uv = rotate(uv,theta);\n  uv *= sqrt(2.0), dxdy *= sqrt(2.0);\n  int N = 5;\n  float scale = float(N);\n  uv *= scale; dxdy *= scale;\n  float t = 0.5*max(0.0,iTime-1.0); // 1 second delay before moving\n  int cycle = int(t);\n  t = smoothstep(0.0,1.0,fract(t));\n  // Move those tiles\n  if (even(cycle)) {\n    if (mod(uv.y,2.0) < 1.0) {\n      uv.x -= t;\n    }\n  } else {\n    if (mod(uv.x,2.0) < 1.0) {\n      uv.y -= t;\n    }\n  }\n  ivec2 ix = getindex(cycle, uv);\n  ix -= N; // Image boundary to 0,0\n  // This has the effect of horizontal periodicity, but not vertical. \n  int k = idiv(ix.x,10);\n  ix.x -= 2*N*k; //\n  ix.y += 2*N*k;\n  ix += N; // Image centre to 0,0\n\n  // Now fetch the texture\n  float tscale = 0.5/scale;\n  vec2 tuv = tscale*(vec2(ix)+fract(uv));\n  tuv += 0.5;\n  vec3 col = vec3(1);\n  if (!key(CHAR_S) && ((ix.x+ix.y)&1) == 1) tuv = tuv.yx;\n  \n  vec2 dx = tscale*dxdy[0], dy = tscale*dxdy[1];\n  col = key(CHAR_L) ? textureGrad(iChannel0,tuv,dx,dy).rgb :\n                      textureGrad(iChannel1,tuv,dx,dy).rgb;\n  //col = texture(iChannel0,tuv).rgb; // See those artefacts!\n  col = pow(col,vec3(2.2));\n  col = 1.2*col;\n  uint h = ihash(uint(ix.y*1024+ix.x));\n  if (!key(CHAR_T)) col *= 0.2+0.8*h2rgb(float(h)/exp2(32.0));\n  if (key(CHAR_G)) {\n    // Draw grid\n    float px = length(dxdy[0]); // ?!\n    uv = fract(uv);\n    uv = min(uv,1.0-uv);\n    float d = min(uv.x,uv.y);\n    float gwidth = !key(CHAR_H) ? 0.0 : 0.015;\n    col = mix(vec3(0),col,smoothstep(0.0,px,d-gwidth));\n  }\n  col = 2.0*col/(1.0+col);\n  return col;\n}\n\nvoid mainImage0( out vec4 fragColor, in vec2 fragCoord ) {\n  // Flat image\n  vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec3 col = slider(uv,mat2(dFdx(uv),dFdy(uv)));\n  col = pow(col,vec3(0.4545));\n  if (abs(uv.x) > 1.0) col *= 0.8; //Show central region\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1.0);\n}\n\nvec3 getColor(vec3 p) {\n  float x = atan(p.x,p.z);       // Longitude\n  float y = asin(p.y/length(p)); // Latitude\n  y = log(tan(0.25*PI+0.5*y));   // Mercator\n  vec2 uv = vec2(x,y)/PI;\n  // mipmap shenanigans, each of dxdy, dxdy1 have\n  // discontinuities, but at different places,\n  // so choose the best one.\n  vec2 uv1 = vec2(mod(uv.x,2.0),uv.y);\n  mat2 dxdy = mat2(dFdx(uv),dFdy(uv));\n  mat2 dxdy1 = mat2(dFdx(uv1),dFdy(uv1));\n  if (abs(uv.x) > 0.5) dxdy = dxdy1;\n  float scale = 2.0;\n  return slider(scale*uv,scale*dxdy);\n}\n\nstruct Ray {\n  vec3 q;               // origin\n  vec3 d;               // direction\n};\n\nstruct Hit {\n  float t;      // solution to p=q+t*d\n  vec3 n;       // normal\n};\n\nstruct Sphere {\n  float r;      // radius\n  vec3 p;       // centre\n};\n\nbool intersectSphere(Sphere s, Ray ray, out Hit hit) {\n  vec3 p = s.p;\n  float r = s.r;\n  float c = length(p);\n  vec3 q = ray.q, d = ray.d;\n  // |q + t*d - p|^2 = r^2\n  float B = dot(q-p,d);\n  float C = dot(q,q)-2.0*dot(q,p)+(c+r)*(c-r);\n  float D = B*B - C;\n  if (D < 0.0) return false;\n  D = sqrt(D);\n  float t,t1;\n  if (B >= 0.0) {\n    t = -B-D; t1 = C/t;\n  } else {\n    t1 = -B+D; t = C/t1;\n  }\n  if (t <= 0.001) t = t1;\n  if (t <= 0.001) return false;\n  // Normal is the radial vector of sphere\n  hit = Hit(t, (q+t*d-p)/r);\n  return true;\n}\n\nbool intersectScene(Ray r, out Hit hit) {\n  Sphere s = Sphere(1.0, vec3(0));\n  if (intersectSphere(s,r,hit)) {\n    return true;\n  }\n  return false;\n}\n\nvec3 light;\nfloat ambient;\nfloat diffuse;\n\nvec3 solve(Ray r) {\n  Hit hit;\n  if (!intersectScene(r,hit)) {\n    return vec3(0);\n  } else {\n    vec3 n = hit.n;\n    if (dot(r.d,n) > 0.0) n = -n;\n    vec3 basecolor = getColor(hit.n);\n    vec3 color = basecolor.xyz*(ambient+diffuse*max(0.0,dot(light,n)));\n    float specular = pow(max(0.0,dot(reflect(light,n),r.d)),10.0);\n    vec3 speccolor = vec3(1);\n    color += 0.25*specular*speccolor;\n    color *= clamp(1.0 - (hit.t-3.0)/5.0,0.0,1.0);\n    return color;\n  }\n}\n\nvec3 transform0(vec3 p) {\n  if (!key(CHAR_R)) {\n    p.yz = rotate(p.yz,iTime * 0.125);\n    p.zx = rotate(p.zx,iTime * 0.2);\n  }\n  return p;\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = -(2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = -(2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  return transform0(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  if (key(CHAR_F)) { mainImage0(fragColor,fragCoord); return; }\n  float camera = 1.0, fov = 1.0;\n  if (key(CHAR_C)) {\n    camera = 0.0;\n  } else if (key(CHAR_E)) {\n    camera = 3.0;\n    fov = 2.0;\n  }\n  vec3 p = vec3(0,0,-camera);\n  p = transform(p);\n  light = vec3(0.25,camera > 1.0 ? 1.0 : -1.0,-0.25);\n  light = transform0(light);\n  light = normalize(light);\n  ambient = 0.5;\n  diffuse = 1.0-ambient;\n  vec3 col = vec3(0);\n  float AA = 1.0;\n  if (key(CHAR_A)) AA = 2.0;\n  for (float i = 0.0; i < AA; i++) {\n    for (float j = 0.0; j < AA; j++) {\n      vec2 uv = (2.0*(fragCoord+vec2(i,j)/AA)-iResolution.xy)/iResolution.y;\n      vec3 r = vec3(uv,fov);\n      r = transform(r);\n      r = normalize(r); // Normalize after transform\n      col += solve(Ray(p,r));\n    }\n  }\n  col /= AA*AA;\n  col *= 2.0/(1.0+col);\n  col = pow(col,vec3(0.4545));\n  if (alert) col.r = 1.0;\n  fragColor = vec4(col,1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "bool alert = false;\nvoid assert(bool b) {\n  if (!b) alert = true;\n}\n\nconst float PI = 3.14159;\n\n// Rotate vector p by angle t.\nvec2 rotate(vec2 p, float t) {\n  return cos(t)*p + sin(t)*vec2(-p.y,p.x);\n}\n\nbool even(int n) { return (n&1) == 0; }\nbool odd(int n) { return !even(n); }\n\nint idiv(int a,int b) {\n  return a >= 0 ? a/b : -((-a+b-1)/b); // Careful with bracket here!\n}\n\nint imod(int a, int b) {\n  return a-b*idiv(a,b);\n}\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = smoothstep(0.0,1.0,rgb);\n  return rgb;\n}\n\n// const int KEY_ALT = 18;\n// const int KEY_PAGE_UP = 33;\n// const int KEY_PAGE_DOWN = 34;\n// const int KEY_LEFT = 37;\n// const int KEY_RIGHT = 39;\n// const int KEY_UP = 38;\n// const int KEY_DOWN = 40;\n\n// const int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\n// const int CHAR_B = 66;\nconst int CHAR_C = 67;\n// const int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\n// const int CHAR_I = 73;\n// const int CHAR_J = 74;\n// const int CHAR_K = 75;\nconst int CHAR_L = 76;\n// const int CHAR_M = 77;\n// const int CHAR_N = 78;\n// const int CHAR_O = 79;\n// const int CHAR_P = 80;\n// const int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\n// const int CHAR_U = 85;\n// const int CHAR_V = 86;\n// const int CHAR_W = 87;\n// const int CHAR_X = 88;\n// const int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(code) (int(store((code),0).x))\n#define keystate(code,n) ( texelFetch(iChannel3,ivec2(code,n),0) )",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}