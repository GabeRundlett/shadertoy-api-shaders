{
    "Shader": {
        "info": {
            "date": "1668635821",
            "description": "CC0: F# logo distance field\nApart from shader coding I enjoy tinkering in F#\nRecreating the F# logo as a shader seemed like a good idea.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "mdXSz7",
            "likes": 9,
            "name": "F# logo distance field",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 285
        },
        "renderpass": [
            {
                "code": "// CC0: F# logo distance field\n//  Apart from shader coding I enjoy tinkering in F#\n//  Recreating the F# logo as a shader seemed like a good idea.\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\n// License: CC0, author: Mårten Rånge, found: https://github.com/mrange/glsl-snippets\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nfloat box(vec2 p, vec2 b) {\n  vec2 d = abs(p)-b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat triangleIsosceles(vec2 p, vec2 q ) {\n  p.x = abs(p.x);\n  vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n  float s = -sign( q.y );\n  vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                vec2( dot(b,b), s*(p.y-q.y)  ));\n  return -sqrt(d.x)*sign(d.y);\n}\n\n// \"Better\"\nvec2 dfsharp0(vec2 p) {\n  const float sm = 0.005;\n  const mat2 rot45 = ROT(PI/4.0);\n  vec2 p0 = p;\n  p0.x = -abs(p0.x);\n  p0.x += 0.7;\n  p0 = p0.yx;\n  vec2 p1 = p;\n  p1 *= rot45; \n  vec2 p2 = p;\n  p2.x += 0.26;\n  p2 = p2.yx;\n  float d0 = triangleIsosceles(p0, 1.35*vec2(0.5, 0.5)-sm);\n  float d1 = box(p1, vec2(0.26)+sm);\n  float d2 = triangleIsosceles(p2, 0.47*vec2(0.5, 0.5)-sm);\n  float d = d0;\n  d = pmax(d, -d1, sm);\n  d = pmin(d, d2, sm);\n  return vec2(d-sm, p.x > 0.0 ? 1.0 : 0.0);\n}\n\n// \"Cheaper\"\nvec2 dfsharp1(vec2 p) {\n  const mat2 rot45 = ROT(PI/4.0);\n  vec2 p0 = p;\n  p0 *= rot45;\n  vec2 p2 = p;\n  float d0 = box(p0, vec2(0.5));\n  float d1 = d0+0.275;\n  float d2 = abs(d1)-0.035;\n  float d3 = -p2.x-0.025;\n  d2 = min(d2, max(d1, d3));\n  float d4 = abs(p2.x)-0.025;\n  float d = d0;\n  d = max(d, -d2);\n  d = max(d, -d4);\n  return vec2(d, p.x > 0.0 ? 1.0 : 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/iResolution.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  float aa = 2.0/RESOLUTION.y;\n  vec2 d = dfsharp1(p);\n  vec3 col = vec3(0.00);\n  vec3 bcol0 = vec3(1.0, 0.0, 0.5).yzx;\n  vec3 bcol1 = bcol0.yzx;;\n  col = mix(col, mix(bcol0, sqrt(bcol0), d.y), smoothstep(aa, -aa, d.x));\n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}