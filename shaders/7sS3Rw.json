{
    "Shader": {
        "info": {
            "date": "1617186833",
            "description": "metashapes\n\nclick LMB to make them shine\n\nhttps://gist.github.com/keijiro/24f9d505fac238c9a2982c0d6911d8e3\nhttps://jsfiddle.net/87nw05kz/",
            "flags": 0,
            "hasliked": 0,
            "id": "7sS3Rw",
            "likes": 3,
            "name": "metaballs colored",
            "published": 3,
            "tags": [
                "blobs",
                "metaballs",
                "colors",
                "meta",
                "blob",
                "colored",
                "metashapes"
            ],
            "usePreview": 0,
            "username": "grevel",
            "viewed": 437
        },
        "renderpass": [
            {
                "code": "\n//click LMB to make them shine\n\n\n// number of balls\n#define nBalls 15\n\n\nuint Hash(uint s)\n{\n    s ^= 2747636419u;\n    s *= 2654435769u;\n    s ^= s >> 16;\n    s *= 2654435769u;\n    s ^= s >> 16;\n    s *= 2654435769u;\n    return s;\n}\n\nfloat r(uint seed)  // random numbers\n{\n    return float(Hash(seed)) / 4294967295.0; // 2^32-1\n}\n\nfloat interpolate(float a, float b, float d)\n{\n    return -(a-b)*d+a;\n}\n\nvec3 gradient(float c)\n{\n    vec4 cols[4];\n    \n    //                 r          g         b      position on gradient space (0 and 1 required)\n    cols[0] = vec4(255./255., 193./255., 36./255., 0.0);\n    cols[1] = vec4(182./255., 255./255., 36./255., 0.3);\n    cols[2] = vec4(255./255.,  76./255., 36./255., 0.6);\n    cols[3] = vec4(255./255., 200./255., 36./255., 1.0);\n    \n    \n    // pick two colors that are on the sides of a sample\n    int i = 0;\n    while(!(c >= cols[i].w && c <= cols[i+1].w))\n    {\n        i++;\n    }\n    \n    vec4 Bcol = cols[i];\n    vec4 Tcol = cols[i+1];\n    \n    // transform them to bottomColor-0.0 and topColor-1.0\n    c -= Bcol.w;\n    Tcol.w -= Bcol.w;\n    Bcol.w -= Bcol.w;\n\n    c /= Tcol.w;\n    Bcol.w /= Tcol.w;\n    Tcol.w /= Tcol.w;\n\n\n    // interpolate color\n    vec3 outcome;\n    outcome.x = interpolate(Bcol.x, Tcol.x, c);\n    outcome.y = interpolate(Bcol.y, Tcol.y, c);\n    outcome.z = interpolate(Bcol.z, Tcol.z, c);\n    \n    return outcome;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy + vec2(-.35, -.2)) * vec2(1.7);\n    uv.x *= iResolution.x/iResolution.y;\n\n    float size = 1./ 0.04; // change size\n\n    uint rN = uint(4);  // seed value (change for different trajectories and colors)\n\n    float d = 0.;     // sum of 1/dist for all balls\n    vec3 col = vec3(0);\n\n    float cd[nBalls];     // 1/dist^2 for all balls \n    vec2 balls[nBalls];   // positions\n    vec3 colors[nBalls];  // colors\n    float total=0.;       // sum of cds\n    \n    for(int i = 0; i < nBalls; i++) // initialize balls\n    {\n        balls[i] = vec2(r(rN) + r(rN + uint(1))*sin(r(rN + uint(2)) + iTime*r(rN + uint(3))), r(rN + uint(4)) + r(rN + uint(5))*.6*sin(r(rN + uint(6)) + iTime*r(rN + uint(7))));\n        //colors[i] = vec3(r(rN + uint(8)), r(rN + uint(9)), r(rN + uint(10)));\n        //colors[i] /= vec3(max(colors[i].x, max(colors[i].y, colors[i].z)));\n        colors[i] = gradient(r(rN + uint(8)));\n        rN += uint(100);\n    }\n    \n\n    for(int i = 0; i < nBalls; i++) // distances for interpolation of colors\n    {\n        float dist = length(balls[i]-uv);\n        d += 1./dist * (.6+r(rN+uint(100))*.4);\n\n        if(dist == 0.) col = colors[i];\n\n        float oneover = 1./pow(dist, 4.);\n\n        cd[i] = oneover;\n        total += oneover;\n\n        rN += uint(100);\n    }\n\n    \n    //if(d > size-.5)   // no background\n    //if(d < size+1.5)  // border mode\n    //{\n        for(int i = 0; i < nBalls; i++)  // interpolation of colors based on distances\n        {\n            float ratio = cd[i] / total;\n            col.x += ratio * colors[i].x;\n            col.y += ratio * colors[i].y;\n            col.z += ratio * colors[i].z;\n        }\n    //}\n\n    \n    \n    if(iMouse.z > .5)   // coloring modes\n        col = vec3(smoothstep(size-11., size, d), smoothstep(size-6., size, d), smoothstep(size-30., size, d));\n    else\n        col *= vec3(.3+.73*smoothstep(size-0.5, size, d));\n\n    fragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}