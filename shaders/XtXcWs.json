{
    "Shader": {
        "info": {
            "date": "1506897588",
            "description": "Another Möbius transformation, this time constrained to have (0,0) and (1,0) as fixed points. First animates the angle degree of freedom, then the scale degree of freedom, then both at once.",
            "flags": 0,
            "hasliked": 0,
            "id": "XtXcWs",
            "likes": 16,
            "name": "Möbius transformation 2",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "math",
                "complex",
                "diagram"
            ],
            "usePreview": 0,
            "username": "Reedbeta",
            "viewed": 774
        },
        "renderpass": [
            {
                "code": "vec2 rotate(vec2 v, float angle)\n{\n    float cosA = cos(angle), sinA = sin(angle);\n    return v.x * vec2(cosA, sinA) + v.y * vec2(-sinA, cosA);\n}\n\nvec2 ortho(vec2 v)\n{\n    return vec2(v.y, -v.x);\n}\n\nvoid stroke(float dist, vec3 color, inout vec3 fragColor, float thickness, float aa)\n{\n    float alpha = smoothstep(0.5 * (thickness + aa), 0.5 * (thickness - aa), abs(dist));\n    fragColor = mix(fragColor, color, alpha);\n}\n\nvoid fill(float dist, vec3 color, inout vec3 fragColor, float aa)\n{\n    float alpha = smoothstep(0.5*aa, -0.5*aa, dist);\n    fragColor = mix(fragColor, color, alpha);\n}\n\nvoid renderGrid(vec2 pos, out vec3 fragColor)\n{\n    vec3 background = vec3(1.0);\n    vec3 axes = vec3(0.4);\n    vec3 lines = vec3(0.7);\n    vec3 sublines = vec3(0.95);\n    float subdiv = 8.0;\n\n    float thickness = 0.003;\n    float aa = length(fwidth(pos));\n\n    fragColor = background;\n\n    vec2 toSubGrid = pos - round(pos*subdiv)/subdiv;\n    stroke(min(abs(toSubGrid.x), abs(toSubGrid.y)), sublines, fragColor, thickness, aa);\n\n    vec2 toGrid = pos - round(pos);\n    stroke(min(abs(toGrid.x), abs(toGrid.y)), lines, fragColor, thickness, aa);\n\n    stroke(min(abs(pos.x), abs(pos.y)), axes, fragColor, thickness, aa);\n}\n\nfloat distLineSeg(vec2 a, vec2 b, vec2 pos)\n{\n    float proj = dot(pos - a, b - a) / dot(b - a, b - a);\n    vec2 posNearest = mix(a, b, clamp(proj, 0.0, 1.0));\n    return length(pos - posNearest);\n}\n\nvoid renderLineSeg(vec2 a, vec2 b, vec3 color, float thickness, vec2 pos, inout vec3 fragColor)\n{\n    stroke(distLineSeg(a, b, pos), color, fragColor, thickness, length(fwidth(pos)));\n}\n\nfloat sdistLine(vec2 a, vec2 b, vec2 pos)\n{\n    return dot(pos - a, normalize(ortho(b - a)));\n}\n\nfloat sdistTri(vec2 a, vec2 b, vec2 c, vec2 pos)\n{\n    return max( sdistLine(a, b, pos),\n            max(sdistLine(b, c, pos),\n                sdistLine(c, a, pos)));\n}\n\nfloat sdistQuadConvex(vec2 a, vec2 b, vec2 c, vec2 d, vec2 pos)\n{\n    return max(  sdistLine(a, b, pos),\n            max( sdistLine(b, c, pos),\n             max(sdistLine(c, d, pos),\n                 sdistLine(d, a, pos))));\n}\n\nvoid renderAxes(vec2 origin, vec2 pos, inout vec3 fragColor)\n{\n    float len = 0.1;\n    float thickness = 0.0075;\n    float aa = length(fwidth(pos));\n\n    float xshaft = sdistQuadConvex(origin + vec2(0.5*thickness),\n                                   origin - vec2(0.5*thickness),\n                                   origin + vec2(len, -0.5*thickness),\n                                   origin + vec2(len, 0.5*thickness), pos);\n    float xhead = sdistTri(origin + vec2(len, -2.0*thickness),\n                           origin + vec2(len + 6.0*thickness, 0),\n                           origin + vec2(len, 2.0*thickness), pos);\n\n    fill(min(xshaft, xhead), vec3(1, 0, 0), fragColor, aa);\n\n    float yshaft = sdistQuadConvex(origin - vec2(0.5*thickness),\n                                   origin + vec2(0.5*thickness),\n                                   origin + vec2(0.5*thickness, len),\n                                   origin + vec2(-0.5*thickness, len), pos);\n    float yhead = sdistTri(origin + vec2(2.0*thickness, len),\n                           origin + vec2(0, len + 6.0*thickness),\n                           origin + vec2(-2.0*thickness, len), pos);\n\n    fill(min(yshaft, yhead), vec3(0, 0.9, 0), fragColor, aa);\n\n}\n\nvec2 cmul(vec2 a, vec2 b)\n{\n    return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nvec2 cdiv(vec2 a, vec2 b)\n{\n    return cmul(a, vec2(b.x, -b.y)) / dot(b, b);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float aspect = iResolution.x / iResolution.y;\n\tvec2 pos = (fragCoord / iResolution.y) * 1.1 - vec2((1.1*aspect - 1.0)/2.0, 0.55);\n\n    // animation stuff\n    float period = 10.0;\n    float phase = 2.0 * 3.141592654 * iTime / period;\n    float stage = mod(iTime / (2.0*period), 3.0);\n    float stage0 = smoothstep(0.0, 0.1, stage) * smoothstep(1.0, 0.9, stage);\n    float stage1 = smoothstep(1.0, 1.1, stage) * smoothstep(2.0, 1.9, stage);\n    float stage2 = smoothstep(2.0, 2.1, stage) * smoothstep(3.0, 2.9, stage);\n\n    // apply a Möbius transformation to the plane, constrained to leave z=0 and z=1\n    // as fixed points, which leaves two remaining degrees of freedom - here parameterized\n    // as the scale and rotation at z=0 (which is the inverse of those at z=1).\n    float scale = exp(stage1*0.6*sin(phase) + stage2*0.6*cos(phase));\n    float angle = (stage0 + stage2) * 0.7*sin(phase);\n    vec2 c = scale * vec2(cos(angle), sin(angle)) - vec2(1, 0);\n    vec2 d = vec2(1, 0);\n    vec2 a = c + d;\n    vec2 b = vec2(0);\n    pos = cdiv(cmul(a, pos) + b, cmul(c, pos) + d);\n\n    // render the grid and stuff\n    fragColor.a = 1.0;\n\trenderGrid(pos, fragColor.rgb);\n    renderLineSeg(vec2(0), vec2(1, 0), vec3(.4, .75, .85), 0.04, pos, fragColor.rgb);\n    renderAxes(vec2(0), pos, fragColor.rgb);\n    renderAxes(vec2(1, 0), pos, fragColor.rgb);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}