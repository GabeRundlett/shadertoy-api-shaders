{
    "Shader": {
        "info": {
            "date": "1653956242",
            "description": "Some simple SDF extrusions to make some custom letters. ðŸŒˆ (mouseable)",
            "flags": 64,
            "hasliked": 0,
            "id": "Nsdczf",
            "likes": 18,
            "name": "Pride 2022",
            "published": 3,
            "tags": [
                "refraction",
                "typography",
                "pride2022"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 462
        },
        "renderpass": [
            {
                "code": "/**\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n        \n    ðŸŒˆ PRIDE 2022 | 6/01/22  @byt3_m3chainc\n\n    Some simple SDF extrusions to make some custom letters.\n    \n    made with a big thank you and a little bit of \n    help from: @blackle, @tdhooper, @iq, @Drakyen\n*/\n\n\n#define R \t\tiResolution\n#define T \t\tiTime\n#define M \t\tiMouse\n\n#define PI          \t3.14159265358\n#define PI2         \t6.28318530718\n\n#define MAX_DIST    40.\n\n// AA Setting - comment/uncomment to disable/endable AA from render\n#define AA 2\n\nfloat mtime=0.,time=0.;\nfloat hash21(vec2 a) { return fract(sin(dot(a,vec2(21.23,41.232)))*43758.5453); }\nmat2 rot(float a){ return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat vmax(vec3 p){ return max(max(p.x,p.y),p.z); }\nfloat box(vec3 p, vec3 b){\n\tvec3 d = abs(p) - b;\n\treturn length(max(d,vec3(0))) + vmax(min(d,vec3(0)));\n}\nfloat box(vec3 p, vec3 b, in vec4 r ){   r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n\tvec3 d = abs(p) - b+vec3(r.x,0,0);\n\treturn length(max(d,vec3(0))) + vmax(min(d,vec3(0)));\n}\nfloat box( in vec2 p, in vec2 b ){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nfloat box( in vec2 p, in vec2 b, in vec4 r ){\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n// letter shapes\nfloat getP(vec2 uv){\n    float letp = box(uv-vec2(-.04,.1),vec2(.15),vec4(.15,.15,.00,0));\n    letp=abs(letp)-.05;\n    letp=min(box(uv+vec2(.19, .0),vec2(.05,.3)),letp);\n    return letp;\n}\nmat2 rtR,ry,rx;\nfloat getR(vec2 uv){\n    float letr = box(uv-vec2(0,.1),vec2(.15),vec4(.15,.15,.00,0));\n    letr=abs(letr)-.05;\n    letr=min(box(uv+vec2(.15,.0),vec2(.05,.3)),letr);\n    vec2 uu = uv+vec2(-.1, .175);\n    uu.xy*=rtR;\n    letr=min(box(uu,vec2(.05,.175)),letr);\n    letr=max(letr, -box(uv+vec2(-.1, .35),vec2(.4,.05)) ); \n    return letr;\n}\nfloat getI(vec2 uv){\n    float leti = box(uv,vec2(.05,.3));\n    return leti;\n}\nfloat getD(vec2 uv){\n    float letd = box(uv,vec2(.125,.25),vec4(.125,.125,.00,0));\n    letd=abs(letd)-.05;\n    letd=min(box(uv+vec2(.125, .0),vec2(.05,.3)),letd);\n    return letd;\n}\nfloat getE(vec2 uv){\n    uv.y=abs(uv.y);\n    float lete = box(uv-vec2(.0, .0),vec2(.05,.3));\n    lete = min(box(uv-vec2(.1, .0),vec2(.10,.05)),lete);\n    lete = min(box(uv-vec2(.1, .25),vec2(.15,.05)),lete);\n    return lete;\n}\n//@iq sdf extrude\nfloat opx(in float sdf, in float pz, in float h){\n    vec2 w = vec2( sdf, abs(pz) - h );\n  \treturn min(max(w.x, w.y), 0.) + length(max(w, 0.));\n}\n\n//global vars\nvec3 hit=vec3(0), hitPoint=vec3(0);\n\nvec2 map(vec3 p) {\n\tvec2 res = vec2(100.,-1.);\n    p.x+=.02;\n    vec3 q = p;\n\n    p.zy*=rx;\n    p.xz*=ry;\n    \n    float tn = 0.;\n    float lp = getP(p.xy+vec2(.75,0));\n    tn = lp;\n    float tp = opx(lp,p.z,.1);\n\n    float lr = getR(p.xy+vec2(.30,0));\n    tn=min(lr,tn);\n    float tr = opx(lr,p.z,.1);\n\n    float li = getI(p.xy-vec2(.05,0));\n    tn=min(li,tn);\n    float ti = opx(li,p.z,.1);\n\n    float ld = getD(p.xy-vec2(.40,0));\n    tn=min(ld,tn);\n    float td = opx(ld,p.z,.1);\n\n    float le = getE(p.xy-vec2(.72,0));\n    tn=min(le,tn);\n    float te = opx(le,p.z,.1);\n\n    tn = abs(tn)-.02;\n    float tx = opx(tn,p.z,.075);\n    \n    float pr = min(tp,tr);\n    float id = min(ti,td);\n    float pride = min(te,id);\n    pride=min(pr,pride);\n    \n    if(pride<res.x){\n        res = vec2(pride,1.);\n        hit=p;\n    }\n    if(tx<res.x){\n        res = vec2(tx,3.);\n        hit=p;\n    }\n    float flr =q.z+2.5;\n    if(flr<res.x) {\n        res = vec2(flr,2.);\n    \thit=q;\n    }  \n\n    return res;\n}\n\nvec3 normal(vec3 p, float t, float mindist){\n    t*=mindist;\n    float d = map(p).x;\n    vec2 e = vec2(t,0);\n    \n    vec3 n = d-vec3(\n        map(p-e.xyy).x,\n        map(p-e.yxy).x,\n        map(p-e.yyx).x\n    );\n    return normalize(n);\n}\n\n//@iq of hsv2rgb\nvec3 hsv2rgb( in vec3 c ) {\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nfloat scale = 3.5;\nvec3 shade(vec3 p, vec3 rd, float d, float m, inout vec3 n){\n    n = normal(p,d,1.);\n  \n    vec3 lpos = vec3(2,9,7);\n    vec3 l = normalize(lpos-p);\n    float diff = clamp(dot(n,l),0.,1.);\n    vec3 h=vec3(0.05);\n    \n    if(m==2.) {\n        vec2 uv =hitPoint.xy;\n        uv-=T*vec2(.05,.2);\n\n        vec2 id = floor(uv*scale);\n        uv = fract(uv*scale)-.5;\n\n        float hs = hash21(id+floor(T*8.));\n        vec3 hue = 0.5 + 0.5*cos(hs+vec3(0,1,2)-id.xyx*.2);\n        float px = 1.5*scale/R.x;\n\n        float d = box(uv,vec2(.3))-.125;\n        d = smoothstep(px,-px,d);\n\n        h = mix (vec3(.01),hue,d);\n    }\n    \n    if(m==3.) h = hsv2rgb(vec3(p.x*.5,1.,.5));\n    \n    return diff*h;\n}\n\nvec3 renderFull(vec2 uv)\n{\n    //precal\n    rtR=rot(0.38397243543);\n      \n    vec3 C=vec3(.0);\n    vec3 ro = vec3(0,0,1.45),\n         rd = normalize(vec3(uv,-1));\n         \n    // mouse //\n    float x = M.xy==vec2(0) ? .18 : -(M.y/R.y*1.-.5)*PI;\n    float y = M.xy==vec2(0) ? 0. : -(M.x/R.x*1.-.5)*PI;\n    \n    rx =rot(x); ry =rot(y);\n    mat2 mx =rot(.1*sin(T*.2)); mat2 my =rot(.075*cos(-T*.15));\n    \n    ro.zy*=mx;rd.zy*=mx;\n    ro.xz*=my;rd.xz*=my;\n    \n    vec3  p = ro + rd * .1;\n    float atten = 1.;\n    float k = 1.;\n    float iv= 1.;\n    \n    // loop inspired/adapted from @blackle's \n    // marcher https://www.shadertoy.com/view/flsGDH\n    // a lot of these settings are tweaked for this scene \n    for(int i=0;i<120;i++)\n    {\n        vec2 ray = map(p);\n        vec3 n = vec3(0);\n        float d = i<32? ray.x*.7:ray.x*.9;\n        float m = ray.y;\n        p += rd*d*k;\n        \n        //set current hit point\n        hitPoint=hit;\n        \n        if (d*d < 1e-8) {\n            C+=shade(p,rd,d,ray.y,n)*atten;\n            if(m==2.) break;\n            \n            atten *= .65;\n            p += rd*.01;\n            k = sign(map(p).x);\n\n            //@Drakyen - refraction math\n            vec3 rf=refract(rd,n,iv > 0. ? 1./1.1 : 1.1);\n            iv *= -1.;\n            if(length(rf) == 0.) rf = reflect(rd,n);\n            rd=rf;\n            p+=-n*.01;\n\n        }\n\n        if(distance(p,rd)>50.) { break; }\n    }\n\n    return clamp(C,vec3(0),vec3(1)); \n}\n\n// Thank you @tdhooper for AA/Motion Blur help \nfloat vmul(vec2 v) {return v.x * v.y;}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) { \n\n    vec3 col = vec3(.00); \n    float mTime = iTime;\n    time = mTime;    \n    \n    vec2 o = vec2(0);\n\n    // AA and motion blur from @iq https://www.shadertoy.com/view/3lsSzf\n    #ifdef AA\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n    \t// pixel coordinates\n    \to = vec2(float(m),float(n)) / float(AA) - 0.5;\n    \t// time coordinate (motion blurred, shutter=0.5)\n    \tfloat d = 0.5*vmul(sin(mod(fragCoord.xy * vec2(147,131), vec2(PI * 2.))));\n    \ttime = mTime - 0.1*(1.0/24.0)*(float(m*AA+n)+d)/float(AA*AA-1);\n    #endif\n\t\t\n        //time = mod(time, 1.);\n    \tvec2 p = (-iResolution.xy + 2. * (fragCoord + o)) / iResolution.x;\n    \tcol += renderFull(p);\n        \n    #ifdef AA\n    }\n    col /= float(AA*AA);\n    #endif\n\n    col = pow( col, vec3(0.4545) );\n    fragColor = vec4(col, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 29092,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/whothefuckisdrewg/aretha-frankin-cc-music-factory-pride-a-deeper-love-drewg-2018-remix"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}