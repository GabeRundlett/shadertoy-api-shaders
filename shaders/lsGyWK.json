{
    "Shader": {
        "info": {
            "date": "1523344076",
            "description": "long term goal: imitating some  Ã‰tienne Jacob's effects [url]https://goo.gl/vBGWwj[/url]\n\nfollowing his tuto [url]https://necessarydisorder.wordpress.com/[/url]\nIdea#2: 2 interpolated points delayed: P = lerp( P0(t-Ts), P1(t-T(1-s)), s)",
            "flags": 0,
            "hasliked": 0,
            "id": "lsGyWK",
            "likes": 6,
            "name": "necessary-disorder tuto #2",
            "published": 3,
            "tags": [
                "2d",
                "curves",
                "interpolation",
                "art",
                "reproduction",
                "etiennejacob"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 519
        },
        "renderpass": [
            {
                "code": "// #1: https://shadertoy.com/view/MdGyWK\n// http://www.thisiscolossal.com/2018/04/animation-of-sinusoidal-waves-in-gifs-by-etienne-jacob\n// EJ's tutos: https://necessarydisorder.wordpress.com/\n\n#define S(D)     smoothstep( 4., 0. ,  length(D)*R.y )\nvec2 A,B,R; float l;\n#define line(p,a,b) ( l = dot(B=b-a, A=p-a)/dot(B,B), clamp(l, 0., 1.) == l ? S( A - B * l ) : 0.)\n//float line(vec2 p, vec2 a, vec2 b) {      // draw a segment without round ends\n//    b -= a; p -= a;\n//    float l = dot(b,p)/dot(b,b);\n//    return clamp(l, 0., 1.) == l ? S( p - b * l ) : 0.;\n//}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    R = iResolution.xy;\n    U = ( U+U - R ) / R.y;\n    O -= O;\n    \n    float t = 2.*iTime, T=20.;\n    \n#define  P0(t) vec2(-1.,0) + .2* vec2( cos(t),sin(t) )\n#define  P1(t)  vec2(1,.2*sin(3.*t))\n    vec2  _P, P, Y;\n    \n    for (T=0.; T<=21.; T += 3.) {               // try +1 & thinner line \n        Y = vec2(0,(T/11.-1.)*.8);\n        _P = P0(t);\n        if (abs(U-Y).y < .2)                    // optim\n            for (float s=0.; s<1.; s+=.01) {\n                P = mix( P0(t-T*s), P1(t-T*(1.-s)), s ); \n                O += line(U-Y,_P,P);\n                _P = P;\n            }\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}