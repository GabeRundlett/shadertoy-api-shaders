{
    "Shader": {
        "info": {
            "date": "1630503692",
            "description": "based on a shader by kingcrimson1112\nviewable at\nhttps://www.shadertoy.com/view/fdtGRs....\nbut at least clickable here!\n\nI ESPECIALLY LIKE to click the mouse on a point halfway down and 5 blue bars in from the left,\nthen drag left...\n\n\nPLAY WITH IT.",
            "flags": 0,
            "hasliked": 0,
            "id": "NsdGzs",
            "likes": 0,
            "name": "obligate interactive - click me",
            "published": 3,
            "tags": [
                "interactive",
                "graph",
                "imouse"
            ],
            "usePreview": 0,
            "username": "femalefaust",
            "viewed": 268
        },
        "renderpass": [
            {
                "code": "vec3 bgColor=vec3(0.05f);\nvec3 gridColor=vec3(0.2f,0.5f,0.9f);\nvec3 eqColor=vec3(0.9f,0.1f,0.1f);\n\nfloat margin=0.5f;\nfloat exactFactor=7.0f;\nint pixelWidth=1;\n\nfloat xLimit=7.0f;\n\nbool check_equation(vec2 point)\n{\n    float eqMargin=0.05f;\n    bool status=false;\n    \n    // y^2+x^2=9\n    float radius=4.0f*((sin(iTime*1.5f)+1.0f)/2.0f)+0.1f;\n    // float result=point.y*point.y+point.x*point.x-radius;\n    float result=log(tan(sin(tan(cos(tan(point.y))))))-(radius*sin(tan(cos(tan(point.x)))));\n    if(abs(result)<eqMargin)\n    {\n        status=true;\n    }\n    return status;\n}\n\nfloat get_int(float a)\n{\n    if(a<0.0f)\n    {\n        return (float(-1*int(-1.0f*a)));\n    }\n    return float(int(a));\n}\n\nfloat get_frac(float a)\n{\n    return a-get_int(a);\n}\n\nfloat get_pixel(float a,float limit,float res)\n{\n    return (((a/(limit+1.0f))+1.0f)/2.0f)*res;\n}\n\nbool check_point(float coord,float limit,float res)\n{\n    float diff=get_frac(coord);\n    float intPart=get_int(coord);\n    float testDiff=margin;\n    if(abs(intPart)==0.0f)\n    {\n        testDiff/=2.0f;\n    }\n    float otherDiff=testDiff/exactFactor;\n    if(abs(diff)<otherDiff)\n    {\n        float pixelVal=get_pixel(coord,limit,res);\n        float expectedVal=get_pixel(intPart,limit,res);\n        float diff=pixelVal-expectedVal;\n        int finalDiff=pixelWidth;\n        if(abs(intPart)==0.0f)\n        {\n            // finalDiff/=2;\n        }\n        return int(abs(diff))<finalDiff;\n    }\n    return false;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float yLimit=xLimit*(iMouse.y/iMouse.x);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // From (-1,1)\n    vec2 coord=(uv*2.0f-1.0f);\n    coord.x*=(xLimit+1.0f);\n    coord.y*=(yLimit+1.0f);\n    \n    vec3 col =bgColor;\n    \n    if(check_point(coord.x,xLimit,iResolution.x) ||check_point(coord.y,yLimit,iResolution.y) )\n    {\n        col=gridColor;\n    }\n    \n    if(check_equation(coord))\n    {\n        col=eqColor;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}