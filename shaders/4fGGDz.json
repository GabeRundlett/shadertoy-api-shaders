{
    "Shader": {
        "info": {
            "date": "1712610887",
            "description": "Arrow Keys",
            "flags": 48,
            "hasliked": 0,
            "id": "4fGGDz",
            "likes": 35,
            "name": " Truck",
            "published": 3,
            "tags": [
                "game",
                "physics",
                "vehicle",
                "truck"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 519
        },
        "renderpass": [
            {
                "code": "vec3 pos[16];\nfloat S;\nfloat map (vec3 p,vec3 mean, mat3 ori) {\n    vec3 pc = p;\n    float c =car((20.*ori*pc-vec3(0,-.5,0)),S)/20.;\n\n\n     p += mean;\n\n   /*for (int i = 0; i < 4; i++)\n     c = min(c,length(p-pos[i])-.01);\n    for (int i = 4; i < 16; i++)\n     c = min(c,length(p-pos[i])-.005);*/\n     \n     float h = texture(iChannel1,.5+.25*p.xy).x;\n\n    return min(c,abs(p.z-h)-.05);\n}\nvec3 normal(vec3 p,vec3 mean, mat3 ori) {\n   vec2 e = vec2(1e-3,0);\n   return normalize(vec3(\n       map(p+e.xyy,mean,ori)-map(p-e.xyy,mean,ori),\n       map(p+e.yxy,mean,ori)-map(p-e.yxy,mean,ori),\n       map(p+e.yyx,mean,ori)-map(p-e.yyx,mean,ori)\n   ));\n}\nMain {\n    vec3 p = vec3(0,0,-.1);\n    vec3 d = normalize(vec3(2.*(U-.5*R)/R.y,1));\n    \n    vec3 mean = vec3(0);\n    vec3 mean0 = vec3(0);\n    mat3 ori = mat3(0);\n    for (int i = 0; i < 16; i++) {\n        pos[i] = T(vec2(i,0)).xyz;\n        mean += pos[i]/16.;\n    }\n    float up = texelFetch(iChannel2,ivec2(38,0),0).x;\n    float left = texelFetch(iChannel2,ivec2(37,0),0).x;\n    float right = texelFetch(iChannel2,ivec2(39,0),0).x;\n    float down = texelFetch(iChannel2,ivec2(40,0),0).x;\n    S = 0.;\n    if (left>0.) S = +.2;\n    if (right>0.) S = -.2;\n    ori[0] = normalize(pos[5]-pos[4]);\n    ori[1] = normalize(pos[6]-pos[4]);\n    ori[2] = normalize(pos[7]-pos[4]);\n    ori = inverse(ori);\n    p.yz *= ei(3.14*.25);\n    d.yz *= ei(3.14*.25);\n    p.xy*=ei(-3.14159*.5);\n    d.xy*=ei(-3.14159*.5);\n\n    \n    for (float i = 0.; i < 80.; i++) {\n    \n        p += .5*d*map(p,mean,ori);\n        \n    \n    }\n    \n    Q.xyz = .5-.5*normal(p,mean,ori);\n    vec3 light = vec3(vec3(0,1,2));\n    vec3 d0 = d;\n    d = normalize(p-light);\n    Q *= 1.-dot(d,d0);\n    p += .001*d;\n    for (float i = 0.; i < 50.; i++) {\n    \n        p += .5*d*min(map(p,mean,ori),length(p-light)-.01);\n        \n    }\n    Q *= 1.-.5*exp(-.01*length(p-light));\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n#define A(U) texture(iChannel0,(U)/R);\n#define T(U) texelFetch(iChannel0,ivec2(U),0)\n#define Main void mainImage(out vec4 Q, in vec2 U) \n\n#define ei(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define w_1 vec3(.02,-.02,-.01)\n#define w_2 vec3(-.02,-.02,-.01)\n#define w_3 vec3(.02,.02,-.01)\n#define w_4 vec3(-.02,.02,-.01)\n\n#define p_1 vec3(-.03,.015,-.025)\n#define p_2 vec3(-.03,-.015,-.025)\n#define p_3 vec3(+.03,-.015,-.025)\n#define p_4 vec3(+.03,+.015,-.025)\n#define p_5 vec3(-.007,.012,-.036)\n#define p_6 vec3(-.007,-.012,-.036)\n#define p_7 vec3(+.007,-.012,-.036)\n#define p_8 vec3(+.007,+.012,-.036)\n#define _0 vec3(.0,.0,-.02)\n#define _x vec3(.01,.0,-.02)\n#define _z vec3(.0,0.01,-.02)\n#define _y vec3(.0,.0,-.03)\n\n    #define P0 vec3[16] (w_1,w_2,w_3,w_4,_0,_x,_y,_z,p_1,p_2,p_3,p_4,p_5,p_6,p_7,p_8)\n\nfloat iPlane (vec3 p, vec3 d, vec3 n) {\n    return -dot(p,n)/dot(d,n);\n}\n\nfloat segment (vec2 p, vec2 a, vec2 b) {\n        return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));\n    }\n    float segment (vec3 p, vec3 a, vec3 b) {\n        return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));\n    }\n    float segment(vec4 p, vec4 a, vec4 b) {\n        return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));\n    }\n    float line (vec2 p, vec2 a, vec2 b) {\n        return length(p-a-(b-a)*dot(p-a,b-a)/dot(b-a,b-a));\n    }\n    float line (vec3 p, vec3 a, vec3 b) {\n        return length(p-a-(b-a)*dot(p-a,b-a)/dot(b-a,b-a));\n    }\n    float line (vec4 p, vec4 a, vec4 b) {\n        return length(p-a-(b-a)*dot(p-a,b-a)/dot(b-a,b-a));\n    }\nfloat cylinder( vec3 p, vec2 h )\n\t\t{\n\t\t    h.y *= 0.5;\n\t\t    vec2 d = abs(vec2(length(p.xy),p.z)) - h;\n\t\t    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n\t\t}\n\t\tfloat cylinder( vec3 p, float r, float h )\n\t\t{\n\t\t    return cylinder(p,vec2(r,h));\n\t\t}\n\t\tfloat sign_side (vec2 p1, vec2 p2, vec2 p3)\n        {\n            return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\n        }\n        float PointInTriangle (vec2 pt, vec2 v1, vec2 v2, vec2 v3)\n        {\n            float d1, d2, d3;\n            bool has_neg, has_pos;\n        \n            d1 = sign_side(pt, v1, v2);\n            d2 = sign_side(pt, v2, v3);\n            d3 = sign_side(pt, v3, v1);\n        \n            has_neg = (d1 < 0.) || (d2 < 0.) || (d3 < 0.);\n            has_pos = (d1 > 0.) || (d2 > 0.) || (d3 > 0.);\n        \n            return float((has_neg && has_pos))*2.-1.;\n        }\n        float triangle (vec2 p, vec2 a, vec2 b, vec2 c) {\n            return PointInTriangle(p.xy,a,b,c)*min(segment(p,a,b),min(segment(p,b,c),segment(p,c,a)));\n        }\n        float triPrism(vec3 p, vec2 a, vec2 b, vec2 c, float h) {\n          vec2 d = vec2(triangle(p.xy,a,b,c),abs(p.z)-.5*h);\n          \n          return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n        }\n\t\tfloat triPrism( vec3 p, vec2 h )\n        {\n          vec3 q = abs(p);\n          return max(q.z-.5*h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n        }\n        float segment ( vec3 p, vec3 a, vec3 b, float r )\n        {\n          vec3 pa = p - a, ba = b - a;\n          float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n          return length( pa - ba*h ) - r;\n        }\n\t\tfloat box(vec2 p, vec2 b) {\n\t\t\tvec2 d = abs(p) - b*0.5;\n\t\t    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n\t\t}\n\t\tfloat box( vec3 p, vec3 b )\n\t\t{\n\t\t    vec3 d = abs(p) - b*0.5;\n\t\t    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n\t\t}\n\t\tfloat box(vec3 p, float w, float h, float l) {return box(p,vec3(w,h,l));}\n\t\tfloat box(vec2 p, float w, float h) {return box(p,vec2(w,h));}\n\t\tfloat roundBox ( vec3 p, vec3 b, float r) \n\t\t{\n\t\t    vec2 h = 0.5*vec2(b.x,b.y)-r;\n\t\t    p.xy = abs(p.xy);\n\t\t    p.xy = p.xy-clamp(p.xy,-h,h);\n\t\t    return cylinder(p,vec2(r,b.z));\n\t\t}\n\t\tfloat roundBox ( vec2 p, vec2 b, float r) \n\t\t{\n\t\t    vec2 h = 0.5*vec2(b.x,b.y)-r;\n\t\t    p.xy = abs(p.xy);\n\t\t    p.xy = p.xy-clamp(p.xy,-h,h);\n\t\t    return length(p)-r;\n\t\t}\n\t\tfloat roundBox(vec3 p, float w, float h, float l, float r) {return roundBox(p,vec3(w,h,l),r);}\n\t\tfloat roundBox(vec2 p, float w, float h, float r) {return roundBox(p,vec2(w,h),r);}\n\t\t\n        \n        \n        \n        \n        \nfloat wheels (vec3 p, float s) {\n    vec3 q = p;\n    p = abs(p)-vec3(.3,0,.3);\n    s *= 2.*sign(-q.z);\n    \n    if (q.x<0.) p.xz *= mat2(cos(s),sin(s),-sin(s),cos(s));\n    return max(cylinder(p,.1,.1),-cylinder(p-vec3(0,.0,0),.07,.15));\n}\nfloat car (vec3 p, float s) {\n    float d = 1e9;\n    p *= .8;\n    float w = wheels(p-vec3(0,.2,0),s);\n    d = min(d,roundBox(p-vec3(0,.3,0),vec3(1.,.2,.6),.02));\n    d = min(d,triPrism(p,vec2(-.3,.4),vec2(-.1,.4),vec2(-.1,.6),.45));\n    d = min(d,roundBox(p-vec3(.02,.5,0),vec3(.25,.2,.45),.02));\n    d = max(d,min(w-.06,-roundBox(p-vec3(.3,.4,0),vec3(.3,.14,.45),.02)));\n    d = min(max(d,-w+.05),w);\n    p.z = abs(p.z);\n    d = min(d,roundBox(p.zyx-vec3(.3,.44,-.25),vec3(.1,.05,.01),.01));\n    return d/.8-.014;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "Main {\n    U = floor(U);\n    \n    if (U.y>=2.||U.x>=16.) discard;\n    \n    \n    \n    vec3 P[16]; vec3 V[16]; vec3 F[16];\n    for (int i = 0; i < 16; i++){ \n        P[i] = T(vec2(i,0)).xyz;\n        V[i] = T(vec2(i,1)).xyz;\n    }\n    \n    for (int k = 0; k < 60; k++) {\n        for (int i = 0; i < 16; i++) {\n            float mass = i < 4? 20.:5.;\n            F[i] = vec3(0,0,.0000001*mass);\n            for (int j = 0; j < 16; j++) {\n                if (i!=j) {\n\n                    vec3 r = P[j]-P[i];\n                    vec3 r0= P0[j]-P0[i];\n                    float l = length(r);\n                    float l0 = length(r0);\n                    vec3 dv = (V[j]-V[i]);\n                    if (l > 0.) {\n                    F[i] += r/l*(l-l0)/16.;\n                    if (length(dv)>0.){\n                        F[i] += dv*pow(abs(dot(normalize(dv),r/l)),3.)/16.;\n                    }\n                    }\n\n                }\n                float l = i < 4?.01:.008;\n                vec4 h = texture(iChannel1,.5+.25*P[i].xy);\n\n                if (abs(P[i].z-h.x)-.05<l) {\n                    F[i] +=  (abs(P[i].z-h.x)-.05-l)*h.yzw;\n                    \n                    if (i < 4) {\n                        vec3 dr = P[7]-P[4];\n                        F[i] -= .5*normalize(dr)*dot(dr,V[i]);\n                        dr = P[6]-P[4];\n                        F[i] -= .5*normalize(dr)*dot(dr,V[i]);\n                    } else {\n                        vec3 dr = P[7]-P[4];\n                        F[i] -= .33*normalize(dr)*dot(dr,V[i]);\n                        dr = P[5]-P[4];\n                        F[i] -= .33*normalize(dr)*dot(dr,V[i]);\n                        dr = P[6]-P[4];\n                        F[i] -= .33*normalize(dr)*dot(dr,V[i]);\n                    }\n                    \n                }\n\n\n            }\n        }\n        for (int i = 0; i < 16; i++ ){\n            float mass = i < 4? 20.:5.;\n            V[i] += F[i]/mass- .0001*V[i];\n            P[i] += F[i]/mass + V[i];\n        }\n    }\n    \n    if (iFrame < 1) {\n        P = P0;\n        for (int i = 0; i < 16; i++ )V[i] = 0.*vec3(-.0001,0,0);\n    }\n    \n    float up = texelFetch(iChannel2,ivec2(38,0),0).x;\n    float left = texelFetch(iChannel2,ivec2(37,0),0).x;\n    float right = texelFetch(iChannel2,ivec2(39,0),0).x;\n    float down = texelFetch(iChannel2,ivec2(40,0),0).x;\n    for (int i = 0;i < 16; i++) {\n        float s = 1.;\n        if (up>0.&&iFrame>10) \n            V[i] -= .000001*normalize(P[5]-P[4]);\n        if (down>0.&&iFrame>10) \n            V[i] += .000001*normalize(P[5]-P[4]),s = -1.;;\n            \n       \n        if (right>0.&&iFrame>1&&i!=4) \n            V[i] -= s*.0000005*cross(normalize(P[i]-P[4]),normalize(P[6]-P[4]));\n            \n        if (left>0.&&iFrame>1&&i!=4) \n            V[i] += s*.0000005*cross(normalize(P[i]-P[4]),normalize(P[6]-P[4]));\n    }\n    \n    for (int i = 0; i < 16; i++) {\n        if (U.x==float(i)&&U.y==0.) Q.xyz = P[i];\n        if (U.x==float(i)&&U.y==1.) Q.xyz = V[i];\n    }\n\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "Main {\n    float h = texture(iChannel1,U/R).x;\n     h += .5*texture(iChannel1,2.*U/R).x;\n     h += 3.*texture(iChannel1,.25*U/R).x;\n     h += 20.*texture(iChannel1,.125*U/R).x;\n     \n     \n     \n     Q = vec4(.007*h);\n     Q *= 1.-exp(-.001*U.x*U.x);\n     Q *= 1.-exp(-.001*(R.x-U.x)*(R.x-U.x));\n     Q *= 1.-exp(-.001*U.y*U.y);\n     Q *= 1.-exp(-.001*(R.y-U.y)*(R.y-U.y));\n     Q += .2;\n     vec4 n = A(U+vec2(0,1));\n     vec4 e = A(U+vec2(1,0));\n     vec4 s = A(U-vec2(0,1));\n     vec4 w = A(U-vec2(1,0));\n     Q.x = .2*Q.x + (.8)*0.25*(n+e+s+w).x;\n     Q.yzw = normalize(vec3(w.x-e.x,s.x-n.x,1));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}