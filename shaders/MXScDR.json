{
    "Shader": {
        "info": {
            "date": "1727152142",
            "description": "It is an array of music notes, floating across the screen",
            "flags": 0,
            "hasliked": 0,
            "id": "MXScDR",
            "likes": 2,
            "name": "Array of Music Notes",
            "published": 3,
            "tags": [
                "unnessasarilycomplicated"
            ],
            "usePreview": 0,
            "username": "X_man_71",
            "viewed": 61
        },
        "renderpass": [
            {
                "code": "vec4 red()   { return vec4(1.0, 0.0, 0.0, 1.0); }\nvec4 green() { return vec4(0.0, 1.0, 0.0, 1.0); }\nvec4 blue()  { return vec4(0.0, 0.0, 1.0, 1.0); }\nvec4 black() { return vec4(0.0, 0.0, 0.0, 1.0); }\nvec4 white() { return vec4(1.0, 1.0, 1.0, 1.0); }\nvec4 specialBlue() { return vec4(0.0, 0.337254902, 0.533333333, 1.0); }\nvec4 grey() { return vec4(0.48627451, 0.48627451, 0.48627451, 1.0); }\n\nfloat lerp(float a, float b, float i)\n{\n    return a + (i * (b - a));\n}\n\nvec4 circle(vec2 fragCoord, vec2 pos, float radius)\n{\n    float distanceTo = distance(fragCoord, pos);\n    return distanceTo < radius ? white() : black();\n}\n\nvec4 triangle(vec2 P, vec2 A, vec2 B, vec2 C)\n{\n    float r = (P.y - B.y) * (C.x - B.x) - (P.x - B.x) * (C.y - B.y);\n    float s = (P.y - A.y) * (B.x - A.x) - (P.x - A.x) * (B.y - A.y);\n    float t = (P.y - C.y) * (A.x - C.x) - (P.x - C.x) * (A.y - C.y);\n    return (r * s > 0.0 && r * t > 0.0) ? white() : black();\n}\n\nvec4 rectangle(vec2 P, vec2 A, vec2 B)\n{\n    vec4 col = specialBlue();\n    col += triangle(P, vec2(A.x, A.y), vec2(B.x, A.y), vec2(A.x, B.y));\n    col += triangle(P, vec2(A.x, B.y), vec2(B.x, A.y), vec2(B.x, B.y));\n    return col;\n}\n\n// I know many more digits\n#define PI 3.1415926\n\n// phase is like the 'x' in y = sin(ωx + φ)\n// amplitude is the maximum height/depth\nfloat triangleWave(float phase, float amplitude)\n{\n    return mod(2.0*phase * (ceil(\n    sin((phase * (PI / 180.0)) / amplitude)\n    - 0.5)),\n    amplitude);\n}\n\n#define speed 37.02\n// the distance between note\n#define gridSize 120.0\n// the side of each note\n#define iconSize 10.0\n// the amount that the notes are offset from the grid\n#define offset vec2(12.315, 8.24)\n// the number that appear in each row and collumn of notes\n#define numberofNotes vec2(iResolution.x / gridSize, iResolution.y / gridSize)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // this is the speed which the notes move across the screen\n    // the y directions is slightly slower than the x direction\n    //vec2(37.02, 29.61600)\n    vec2 velocity = vec2(\n        speed * sin(iTime * (PI / 18.0)),\n        speed * cos(iTime * (PI / 18.0))\n    );\n    \n    vec4 col = specialBlue();\n    vec2 pos = vec2(0.0, 0.0);\n    \n    // make the eighth-notes repeat vertically\n    for ( float j = -1.0; j < numberofNotes.y + 1.0; j ++ )\n    {\n        // offset the notes vertically\n        pos.y = mod(iTime * velocity.y, gridSize) + (j * gridSize) + offset.y;\n        \n        // make the eighth-notes repeat horizontally\n        for ( float i = -1.0; i < numberofNotes.x + 1.0; i ++ )\n        {\n            // offset the notes horizontally\n            pos.x = mod(iTime * velocity.x, gridSize) + (i * gridSize) + offset.x;\n            \n            // only check the pixel if it's close; this is an optimisation\n            if (distance(fragCoord, pos) < 2.5*iconSize)\n            {\n                // shadertoy doesn't like the 'の' hiragana... This means that I can't name my variables something stupid like waveのtriangle\n                vec2 a = vec2(pos.x + 0.75*iconSize, pos.y + 3.0*iconSize);\n                vec2 b = vec2(pos.x + 0.75*iconSize, pos.y + 1.5*iconSize);\n                vec2 c = vec2(pos.x + 2.00*iconSize, pos.y + 0.5*iconSize);\n                //vec2 d = vec2((pos.x + 0.45*iconSize) * sin(wavetriangle * (PI / 180.0)), pos.y);\n                vec2 d = vec2(pos.x + 0.45*iconSize, pos.y);\n                vec2 e = vec2(b.x, pos.y + 3.0*iconSize);\n                \n                // notehead\n                col += circle(fragCoord, pos, 0.75*iconSize);\n                \n                // notestem\n                col += rectangle(fragCoord, d, e);\n                \n                // noteflag\n                col += triangle(fragCoord, a, b, c);\n            }\n        }\n    }\n\n    if (col.z == 1.0)\n    {\n        col = grey();\n    }\n    if (col.x == 0.0)\n    {\n        col = specialBlue();\n    }\n\n    \n    //float amp = 1.0;\n    //float wavetriangle = triangleWave(iTime, amp);\n    //col.x += lerp(0.0, 1.0, wavetriangle / amp);\n    //col.y += 0.95;\n    //col.z = lerp(0.0, 1.0, cos(velocity.x * iTime) * 0.5);\n    \n    // Output to screen\n    fragColor = col;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}