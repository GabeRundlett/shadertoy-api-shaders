{
    "Shader": {
        "info": {
            "date": "1676317562",
            "description": "CC0: Colorful bubbles\nTwitter art again that I attempted to recreate with a bit of a twist\n",
            "flags": 64,
            "hasliked": 0,
            "id": "dtBSRV",
            "likes": 21,
            "name": "Colorful bubbles underwater",
            "published": 3,
            "tags": [
                "bubbles"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 583
        },
        "renderpass": [
            {
                "code": "// CC0: Colorful bubbles underwater\n//  Twitter art again that I attempted to recreate with a bit of a twist\n\n#define RAINBOW_COLORS\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\nconst float MaxIter = 12.0;\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n// License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);\n}\n\n// License: MIT OR CC-BY-NC-4.0, author: mercury, found: https://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nvec4 plane(vec2 p, float i, float zf, float z, vec3 bgcol) {\n  float sz = 0.5*zf;\n  vec2 cp = p;\n  vec2 cn = mod2(cp, vec2(2.0*sz, sz));\n  float h0 = hash(cn+i+123.4);\n  float h1 = fract(4483.0*h0);\n  float h2 = fract(8677.0*h0);\n  float h3 = fract(9677.0*h0);\n  float h4 = fract(7877.0*h0);\n  float h5 = fract(9967.0*h0);\n  if (h4 < 0.5) {\n    return vec4(0.0);\n  }\n  float fi = exp(-0.25*max(z-1.0, 0.0));\n  float aa = mix(6.0, 1.0, fi)*2.0/RESOLUTION.y; \n  float r  = sz*mix(0.1, 0.475, h0*h0);\n  float amp = mix(0.25, 0.5, h3)*r;\n  cp.x -= amp*sin(mix(3.0, 0.25, h0)*TIME+TAU*h2);\n  cp.x += 0.95*(sz-r-amp)*sign(h3-0.5)*h3;\n  cp.y += 0.475*(sz-2.0*r)*sign(h5-0.5)*h5;\n  float d = length(cp)-r;\n#if defined(RAINBOW_COLORS)\n  vec3 hsv = vec3(h1, 0.75, 1.5);\n  vec3 ocol = hsv2rgb(hsv);\n  vec3 icol = hsv2rgb(hsv*vec3(1.0, 0.5, 1.25));\n#else\n  vec3 ocol = (0.5+0.5*sin(vec3(0.0, 1.0, 2.0)+h1*TAU));\n  vec3 icol = sqrt(ocol);\n  ocol *= 1.5;\n  icol *= 2.0;\n#endif\n  vec3 col = mix(icol, ocol, smoothstep(r, 0.0, -d))*mix(0.8, 1.0, h0);\n  col = mix(bgcol, col, fi);\n  float t = smoothstep(aa, -aa, d);\n  return vec4(col, t);\n}\n\n// License: Unknown, author: Claude Brezinski, found: https://mathr.co.uk/blog/2017-09-06_approximating_hyperbolic_tangent.html\nfloat tanh_approx(float x) {\n  //  Found this somewhere on the interwebs\n  //  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  const vec3 bgcol0 = HSV2RGB(vec3(0.66, 0.85, 0.1)); \n  const vec3 bgcol1 = HSV2RGB(vec3(0.55, 0.66, 0.6));\n  vec3 bgcol = mix(bgcol1, bgcol0, tanh_approx(1.5*length(p)));\n  vec3 col = bgcol;\n  for (float i = 0.0; i < MaxIter; ++i) {\n    const float Near = 4.0;\n    float z = MaxIter - i;\n    float zf = Near/(Near + MaxIter - i);\n    vec2 sp = p;\n    float h = hash(i+1234.5); \n    sp.y += -mix(0.2, 0.3, h*h)*TIME*zf;\n    sp += h;\n    vec4 pcol = plane(sp, i, zf, z, bgcol);\n    col = mix(col, pcol.xyz, pcol.w);\n  }  \n  col *= smoothstep(1.4, 0.5, length(pp));\n  col = sqrt(col);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);\n  fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 32372,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/euphonicvisions/gate-44-doubt?in=marten-range-59281907/sets/voices-1"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}