{
    "Shader": {
        "info": {
            "date": "1585757164",
            "description": "An icosahedral kaleidoscope, showing planes through the vertices of a dodecahedron.\n\nToday is my 14th wedding anniversary, so I've tried to give things an ivory look.",
            "flags": 48,
            "hasliked": 0,
            "id": "3dscWf",
            "likes": 13,
            "name": "Excavated Dodecahedra",
            "published": 3,
            "tags": [
                "dodecahedron",
                "dodecahedra",
                "excavate"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 367
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Excavated Dodecahedra\n//\n// Matthew Arcus, 2020\n//\n// Take an icosahedral kaleidoscope (using precalculated values), and\n// take slices through the fundamental region with planes through the\n// vertices of a dodecahedron. The result is a great range of shapes -\n// stellations, facetings and other more irregular but pretty shapes.\n//\n// <mouse>: rotation\n// <up>/<down>: move in/out\n// c: clip at x=0\n// n: compare numerical normal with exact\n// r: autorotation\n// s: subtract one of the planes (or the half space it bounds)\n// t: apply texturing\n// \n// Each plane (we combine two) goes through he main vertex of the\n// fundamental region, and cuts off a half space and the two half\n// spaces are intersected (as well as being clipped to the\n// dodecahedron). The display sequences through all 'interesting'\n// combinations.\n\n// Pressing 's' subtracts one of the spaces rather than doing an intersection,\n// which gives interesting results, but sometimes we end up with no\n// polyhedron at all.\n//\n// Experimenting with exact normals - compare with the usual numerical\n// procedure with 'n' - still problems where the ray has hit a\n// backface and we get the wrong normal.\n//\n////////////////////////////////////////////////////////////////////////////////\n\nbool dorotate = true;\nbool doclip = false;\nbool dosubtract = false;\n\nconst float PI\t= 3.14159265359;\nint NFOLDS = 5;\n\nbool alert = false;\nvoid assert(bool test) {\n  if (!test) alert = true;\n}\n\n// Face plane normals, dot(A,B) = -cos(PI/P) etc.\nvec3 A = vec3(1,0,0);\nvec3 B = vec3(-0.5,0.866025,0);\nvec3 C = vec3(-0.809017,-0.467086,0.356822);\n\n// Unit length vertices of fundamental trihedron\nvec3 a = vec3(0.309017,0.178411,0.934172);\nvec3 b = vec3(0,0.607062,0.794654);\nvec3 c = vec3(0,0,1);\n\nvec3 vertices[20] =\n  vec3[](vec3(0,0,1), // 0\n         vec3(0.57735,0.333333,0.745356), // 0.713644\n         vec3(-0.57735,0.333333,0.745356), // 0.713644\n         vec3(0,-0.666667,0.745356), // 0.713644\n         vec3(0.356822,0.872678,0.333333), // 1.1547\n         vec3(0.934172,-0.127322,0.333333), // 1.1547\n         vec3(-0.356822,0.872678,0.333333), // 1.1547\n         vec3(-0.934172,-0.127322,0.333333), // 1.1547\n         vec3(0.57735,-0.745356,0.333333), // 1.1547\n         vec3(-0.577351,-0.745356,0.333333), // 1.1547\n         vec3(0.57735,0.745356,-0.333334), // 1.63299\n         vec3(0.934172,0.127322,-0.333334), // 1.63299\n         vec3(-0.57735,0.745356,-0.333334), // 1.63299\n         vec3(-0.934172,0.127322,-0.333334), // 1.63299\n         vec3(0.356822,-0.872678,-0.333334), // 1.63299\n         vec3(-0.356822,-0.872678,-0.333334), // 1.63299\n         vec3(0,0.666666,-0.745356), // 1.86834\n         vec3(0.57735,-0.333334,-0.745356), // 1.86834\n         vec3(-0.57735,-0.333334,-0.745356), // 1.86834\n         vec3(0,0,-1) // 2\n         );\n\nvec4 makeplane(vec3 p, vec3 q, vec3 r) {\n  vec3 n = cross(q-p,r-p);\n  n = normalize(n);\n  float k = dot(p,n);\n  // Fix so that away from origin is +ve distance\n  if (k < 0.0) { k = -k; n = -n; }\n  return vec4(n,k);\n}\n\n// Could use an ivec3 and count different types of flip\nvec3 fold(vec3 pos, out int flips, out mat3 trans) {\n  mat3 mA = mat3(reflect(vec3(1,0,0),A),\n                 reflect(vec3(0,1,0),A),\n                 reflect(vec3(0,0,1),A));\n  mat3 mB = mat3(reflect(vec3(1,0,0),B),\n                 reflect(vec3(0,1,0),B),\n                 reflect(vec3(0,0,1),B));\n  mat3 mC = mat3(reflect(vec3(1,0,0),C),\n                 reflect(vec3(0,1,0),C),\n                 reflect(vec3(0,0,1),C));\n  // We want to know the number of actual reflections made\n  // so keep track of that in flips.\n  flips = 0;\n  trans = mat3(1,0,0,\n               0,1,0,\n               0,0,1);\n  for (int i = 0; i < NFOLDS; i++) {\n    float k;\n    k = dot(pos,A);\n    if (k < 0.0) {\n      flips += 1;\n      pos -= 2.0*k*A;\n      trans = trans*mA; // Note order\n    }\n    k = dot(pos,B);\n    if (k < 0.0) {\n      flips += 1;\n      pos -= 2.0*k*B;\n      trans = trans*mB;\n    }\n    k = dot(pos,C);\n    if (k < 0.0) {\n      flips += 1;\n      pos -= 2.0*k*C;\n      trans = trans*mC;\n    }\n  }\n  return pos;\n}\n\nivec2 combos[] =\n  // Seem to be 23 different \"excavations\" with a single plane,\n  // excluding the dodecahedron itself and a couple where the face\n  // goes through the centre, so the volume is zero.\n  ivec2[](ivec2(2,10),ivec2(10,11),ivec2(2,5),ivec2(6,8),ivec2(11,13),ivec2(12,17),ivec2(14,16), // Stars\n          ivec2(1,12),ivec2(1,7),\n          ivec2(4,5),ivec2(3,4),ivec2(11,14),ivec2(15,19),ivec2(3,11),ivec2(9,19),ivec2(8,10), // Pentagram sides\n          ivec2(4,7),ivec2(4,9),ivec2(4,19),ivec2(9,10),ivec2(10,18),ivec2(15,16), // Incised pentagrams\n          //ivec2(1,19),ivec2(3,16), // Face through centre - no interesting combinations\n          ivec2(10,12) // Compound\n          );\n\nfloat faces(vec3 pos, int t, out vec3 n) {\n  int N = combos.length();\n  float sgn = dosubtract ? -1.0 : 1.0;\n  int X = combos[t%N].x;\n  int Y = combos[t%N].y;\n  int X1 = combos[t/N%N].x;\n  int Y1 = combos[t/N%N].y;\n  //int X1 = combos[5].x;\n  //int Y1 = combos[5].y;\n  //int X2 = combos[0].x;\n  //int Y2 = combos[0].y;\n  vec4 plane0 = makeplane(vertices[0],vertices[X],vertices[Y]);\n  vec4 plane1 = makeplane(vertices[0],vertices[X1],vertices[Y1]);\n  //vec4 plane2 = makeplane(vertices[0],vertices[X2],vertices[Y2]);\n  float d = -1e8,d1;\n  d1 = dot(vec4(pos,-1),plane0);\n  if (d1 > d) { d = d1; n = plane0.xyz; }\n  d1 = sgn*dot(vec4(pos,-1),plane1);\n  if (d1 > d) { d = d1; n = sgn*plane1.xyz; }\n  //d1 = dot(vec4(pos,-1),plane2);\n  //if (d1 > d) { d = d1; n = plane2.xyz; }\n  d1 = dot(pos,b)-dot(b,c); // Clip to dodecahedron\n  if (d1 > d) { d = d1; n = b; }\n  return d;\n}\n\n#if 0\nbool chiral = false; // Chiral needs some work.\nfloat faces(vec3 pos, int parity) {\n  float d;\n  if (!chiral || parity == 0) {\n    d = faces0(pos);\n  } else {\n    d = min(faces0(reflect(pos,A)),\n            min(faces0(reflect(pos,B)),\n                faces0(reflect(pos,C))));\n  }\n  d = max(d,(dot(pos,b)-dot(b,c))); // Clip to dodecahedron\n  return d;\n}\n#endif\n\nfloat polyhedron(vec3 pos, out vec3 n, out vec2 uv) {\n  int flips = 0;\n  vec3 pos0 = pos;\n  mat3 m; // Rotation matrix to apply to normal\n  pos = fold(pos,flips,m);\n  uv = pos.xy;\n  int parity = flips%2;\n  float t = iTime;\n  vec3 n1,n2;\n  float d1 = faces(pos,int(t)/4,n1);\n  float d2 = faces(pos,(int(t)+1)/4,n2);\n  float d = mix(d1,d2,fract(t));\n  n = mix(n1,n2,fract(t));\n  n = m*n; // Transform to world coordinates\n  normalize(n); // Keep normalized!\n  if (doclip && pos0.x > d) {\n    d = pos0.x;\n    n = vec3(1,0,0);\n  }\n  return d;\n}\n\n//-------------------------------------------------\n//From https://www.shadertoy.com/view/XtXGRS#\nvec2 rotate(in vec2 p, in float t) {\n  return p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nfloat map(vec3 p) {\n  vec3 n; vec2 uv; // Don't need these here - hopefully get optimized away.\n  return polyhedron(p,n,uv);\n}\n\nvec3 calcnormal(vec3 p) {\n  const vec2 e = vec2(0.001, 0.0);\n  vec3 n = vec3(map(p + e.xyy) - map(p - e.xyy),\n                map(p + e.yxy) - map(p - e.yxy),\n                map(p + e.yyx) - map(p - e.yyx));\n  return normalize(n);\n}\n\nfloat march(in vec3 ro, in vec3 rd) {\n  float maxd = length(ro) + 1.0;\n  float precis = 0.001;\n  float t = 0.0;\n  float res = -1.0;\n  for (int i = 0; i < 100; i++) {\n    //assert(i < 20);\n    float h = map(ro+rd*t);\n    if (abs(h) < precis) return t;\n    t += h;\n    if (t < 0.0 || t > maxd) break;\n  }\n  return -1.0;\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  if (dorotate) {\n    p.yz = rotate(p.yz,iTime * 0.125);\n    p.zx = rotate(p.zx,iTime * 0.2);\n  }\n  return p;\n}\n\nbool keypress(int code) {\n  return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n}\n\nvec4 store(int i,int j) {\n  return texelFetch(iChannel1, ivec2(i,j),0);\n}\n\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\nconst int CHAR_C = 67;\nconst int CHAR_N = 78;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  dorotate = !keypress(CHAR_R);\n  doclip = keypress(CHAR_C);\n  dosubtract = keypress(CHAR_S);\n  bool dotexture = keypress(CHAR_T);\n  bool calcnormals = keypress(CHAR_N);\n  vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec3 col = vec3(0.1 - 0.1*p.y);\n  p *= 0.5;\n  float camera = 4.0;\n  camera *= 1.0 + 0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP));\n  vec3 ro = vec3(0.0, 0.0, camera);\n  vec3 rd = vec3(p, -2.0);\n  vec3 light = normalize(vec3(0.5, 1.0, 3.0));\n  ro = transform(ro);\n  rd = transform(rd);\n  light = transform(light);\n  rd = normalize(rd);\n  float t = march(ro, rd);\n  if (t > 0.0) {\n    vec3 pos = ro + t * rd;\n    vec2 uv; vec3 n;\n    polyhedron(pos,n,uv);\n    if (calcnormals) n = calcnormal(pos);\n    //assert(dot(n,rd) <= 0.0);\n    col = vec3(0.5, 0.5, 0.3);\n    if (dotexture) col = texture(iChannel2,uv).xyz;\n    float diffuse = clamp(dot(n, light), 0.0, 1.0);\n    col *= 0.2+0.8*diffuse;\n    float specular = pow(max(0.0,dot(reflect(light,n),rd)),50.0);\n    col += 0.3*specular*vec3(1);\n  }\n  col = pow(col, vec3(0.4545));\n  if (alert) col.x = 1.0;\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0) {\n      t = vec4(0);\n    } else {\n      t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}