{
    "Shader": {
        "info": {
            "date": "1721415146",
            "description": "sources glslsandbox and https://www.shadertoy.com/view/XdVcRW",
            "flags": 0,
            "hasliked": 0,
            "id": "lflczX",
            "likes": 1,
            "name": " Kaleidoscope color ",
            "published": 3,
            "tags": [
                "fractal",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 232
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define resolution iResolution.xy\n\nfloat hhash(vec2 uv) {\n\treturn fract(74455.45 * sin(dot(vec2(78.54, 14.45), uv)));\n}\n\nfloat hash(vec2 p)\n{\n    mat2 m = mat2(  13.85, 47.77,\n                    99.41, 88.48\n                );\n\n    return fract(sin(m*p) * 46738.29).x;\n}\n\nvec2 hash2(vec2 uv) {\n\tfloat  k = hash(uv);\n\treturn vec2(k, hash(uv + k));\n}\n\n// IQ\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\nfloat rand(vec2 n){return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);}\nfloat noise(float p){\n\tfloat fl = floor(p);\n\tfloat fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\n// http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat manh_distance(vec2 a, vec2 b) {\n    vec2 c = abs(a - b);\n    return c.x + c.y;\n}\n\nfloat pyramids(vec2 p)\n{\n    vec2 n = floor(p);\n    vec2 f = fract(p);\n    float mind = 2.0;\n    for (int i=-1;i<2;i++)\n    for (int j=-1;j<2;j++)\n    {\n        vec2 off = vec2(i,j);\n        vec2 top = vec2( rand(n+off), rand(n+off+234.1) );\n        float dist = manh_distance(f,top+off);\n        if (dist < mind) {\n            mind = dist;\n        }\n    }\n    return (2.0 - mind) / 2.0;\n}\n\n#define SQ3 1.7320508076\n\nmat2 rot2d(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\nvec2 p6mmmap(vec2 uv, float repeats) {\n    // clamp to a repeating box width 6x height 2x*sqrt(3)\n    uv.x /= SQ3;\n    uv = fract(uv * repeats - 0.5) - 0.5;\n    uv.x *= SQ3;\n\n    uv = abs(uv);\n    \n    vec2 st = uv;\n    \n    vec2 uv330 = rot2d(radians(330.)) * uv;\n    if (uv330.x < 0.0){\n        st.y = (st.y - 0.5) * -1.0;\n        st.x *= SQ3;\n        return st * 2.0;\n    }\n    else if (uv330.x > 0.5){\n        st.x = (st.x - 0.5 * SQ3) * -1.0 * SQ3;\n        return st * 2.0;\n    }\n    \n    vec2 uv30 = rot2d(radians(30.)) * uv;\n    if (uv30.y < 0.0 && uv30.x >= 0.5) st = vec2(1.0,1.0);\n    else if (uv30.y >= 0.0 && uv30.x >= 0.5) st = vec2(-1.0,1.0);\n    else if (uv30.y < 0.0 && uv30.x < 0.5) st = vec2(1.0,-1.0);\n    else st = vec2(-1.0,-1.0);\n    \n    uv30.x = uv30.x - 0.5;\n    uv = rot2d(radians(270.))* uv30;\n    st = uv * st;\n    st.x *= SQ3;\n    return st * 2.0;\n}\n\nfloat uc(float a) { return clamp(a,0.,1.); }\nfloat ns(float a, float t) { return noise(a+t); }\n\nvec3 square_noise(vec2 uv, float t) {\n    // 3 octaves of manhattan distance worley noise\n    float p1 = ns(pyramids(uv)*15.,t);\n    float p2 = ns(pyramids(uv+135.)*31.,t);\n    float p3 = ns(pyramids(uv+25.)*63.,t);\n    \n    float v = uc((p1*p2*p3-0.09)*41.);\n\n    vec3 res = hsv2rgb(vec3(uc(uc(p3)-0.2),uc(uc(p2)-0.2),v));\n\n\treturn res;\n}\n\nvec4 animate_noise(vec2 uv, float t) {\n\treturn vec4(square_noise((rot2d(radians(t*12.7))*(uv-0.25)+0.25)+t*0.06,t*0.2),1.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \nvec2 uv = (2.0 * gl_FragCoord.xy - resolution.xy ) / min(resolution.x, resolution.y);\n\nfloat t = -iTime * .1 + ((.25 + .05 * sin(-iTime * .1))/(length(uv.xy) + 0.57)) * 20.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n   uv*=ma;\n   \n\tfloat k = tan(dot((uv), (uv)) * 32.0 + time * 1.0);\n    \nvec2 uv2 = (2. * gl_FragCoord.xy - resolution) / resolution.y;\nuv2-=1.;\nuv2.x+=0.7;\nuv2.y-=0.25;\n\n\tvec3 col = vec3(0.);\n\tfor (float i = 0.; i < 60.; i++) {\n\t\tvec2 p = 1.5 * hash2((i) + vec2(2.+0.0001*cos(iTime))) - 1.;\n\t\tp -= vec2(sin(.1 * hash((i) + vec2(10., 50.)) * (time * 5.0) + hash((i) + vec2(10.))), \n\t\t\t  cos(.1 * hash(float(i) + vec2(20., 40.)) * (time * 5.0)+ hash((i) + vec2(10.))));\n\t\tfloat k = (1.5 * hash(float(i) + vec2(25., 75.)) + .01);\n\t\tcol += palette(k * 3., vec3(.5), vec3(0.05), vec3(1.), vec3(.0, .33, .67)) / length(uv2 - p);\n\t}\n\tcol /= 100.;\n\tfloat t_0 = 5.;//time;\n\tfloat f = 0.0;\n        vec2 p = abs(uv*ma);//(gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n\t    uv = p6mmmap(uv,2.) * 1.65;\n\tfloat ts = cos(dot(p,p));//(surfaceSize.x * surfaceSize.y);\n\t\n\t vec2 v_1 = vec2(0.65, 0.65);\n     \n     v_1*=ma;\n\t float l_1 = dot(p,v_1);//length(p + v_1);\n\t float s_1 = sin(l_1 *  48.0 - (t_0*cos(iTime) * ts) * 4.8);\n\t\n\t vec2 v_2 = vec2(-0.65, -0.65);\n\t float l_2 = dot(p*ma,v_2);\n\t float s_2 = sin(l_2 *  48.0 - (t_0*sin(iTime) * ts) * 4.8);\n\t\n\t f = (0.12 / abs(s_1)) + (0.12 / abs(s_2));\n\tfloat k1 = sin(dot(uv * 0.75, uv) * 16.0 - time * 10.0);\n\tfloat k2 = sin(dot(uv*cos(iTime) * 1.5, uv) * 8.0 - time * 10.0);\n\tvec3 col2 = vec3(1, 1, 1) * abs(k);\n\tcol2 = mix(vec3(0.05, 0, 2), vec3(0.25, 0.75, 2.0), k + k1 + k2);\n\tif(k > 0.05) col2 += vec3(1, 0.25, 0.25);\n  \n    fragColor = vec4(col+col2*f,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}