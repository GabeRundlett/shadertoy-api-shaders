{
    "Shader": {
        "info": {
            "date": "1651052523",
            "description": "Pretty basic version of Conway's Game of Life. \nYou can paint with your mouse, and press R  to reset.\nSettings are under Common.",
            "flags": 48,
            "hasliked": 0,
            "id": "NtsfzS",
            "likes": 3,
            "name": "Game of life + tracers",
            "published": 3,
            "tags": [
                "game",
                "life",
                "buffer",
                "gameoflife",
                "of",
                "tracers"
            ],
            "usePreview": 0,
            "username": "fyisic123",
            "viewed": 261
        },
        "renderpass": [
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float c = texelFetch(iChannel0, ivec2(fragCoord / Pixel_Scaling), 0).r; // get pixel from buffer A\n    float t = texelFetch(iChannel1, ivec2(fragCoord), 0).r;  // get Tracer brightness \n    vec3 col = hue(t * 3.) * t * TRACER_BRIGHTNESS;  // get tracer color.\n    col += c; \n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159265359\n#define hue(v) ( .6 + .6 * cos( 2.*PI*(v) + vec3(0,-2.*PI/3.,2.*PI/3.) ) )\n\n// settings.\n#define Pixel_Scaling 4.  // pixel size  (may need reset if changed)\n#define Time_Scale 2  // frames to skip animation. 0 or 1 is full fps, 2 is every 2nd frame, 3 is every 3rd, and on.\n#define Brush_Size 2.\n#define TRACER_DECAY 1.5\n#define TRACER_BRIGHTNESS 0.2\n                      \n\n\nfloat hash11(float p)// random stuff\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\nbool evaluateFrame()\n{\n    if (Time_Scale == 0)\n        return true;\n    else if (iFrame % Time_Scale != 0)\n        return false;\n    else\n        return true;\n}\n\nfloat getRandomPixelState(vec2 pos)\n{\n    return step(.5, hash11(pos.x * pos.y * fract(iDate.x + iDate.y + iDate.z + iDate.w)));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 bufferRes = iResolution.xy / Pixel_Scaling;  // Get buffer resolution\n    if (fragCoord.x > bufferRes.x || fragCoord.y > bufferRes.y)  // check if pixel is within buffer.           \n          return;\n    \n             \n    if (iFrame == 0 || texelFetch(iChannel1, ivec2(82,0),0).x > 0.)  // Randomize pixels on first frame or R is pressed.\n    {        \n        fragColor = vec4(getRandomPixelState(fragCoord));        \n        return;        \n    } \n        \n    vec4 Mus = iMouse;   // Brush \n    if (Mus.z > 0.)  \n    {                        \n        if (length((Mus.xy / Pixel_Scaling) - fragCoord) < Brush_Size)\n        {            \n            fragColor = vec4(1.); \n            return;\n        }\n        \n    }\n    \n    ivec2 coord = ivec2(fragCoord);  // convert coords to interger coordanate.\n    \n    if (!evaluateFrame())  // check if we should animate this frame or skip.\n    {           \n        fragColor = texelFetch(iChannel0, coord, 0).rgba;                  \n        return;   \n    }\n    \n                  \n    float neighborState = 0.;\n    float thisPixelState = 0.;\n    for(int x = -1; x <= 1; x++)  // nearby pixels life status\n    {\n        for(int y = -1; y <= 1; y++)\n        {\n            if (x == 0 && y == 0)  // if its this pixel store that value\n            {\n                thisPixelState =  texelFetch(iChannel0, coord, 0).r;                \n            }\n            else // otherwise if neighbor is alive add to counter.\n            {\n                neighborState +=  texelFetch(iChannel0, coord+ ivec2(x,y), 0).r;\n            }\n              \n        }\n    \n    }\n        \n    // Conway's Game of Life rules applied\n    float c =0.; \n    if (thisPixelState == 0.) // if pixel is dead\n    {\n        if (neighborState == 3.) // become alive if 3 neighbors are alive.\n            c = 1.;\n    }\n    else if (neighborState == 2. || neighborState == 3.) // if pixel is alive and has 2 or 3 alive neighbors\n            c = 1.;                                      // then stay alive otherwise pixel is dead (default value); \n                \n    \n    fragColor = vec4(c);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n                    \n    ivec2 coord = ivec2(fragCoord);  // convert coordanates to integer coordanate.\n    float c = 0.;\n    \n    // Tracers\n    for(int x = -1; x <= 1; x++)  // combine values of adjecent pixels.\n    {\n        for(int y = -1; y <= 1; y++)\n        {\n            c += texelFetch(iChannel1, coord + ivec2(x,y)  , 0).r;\n        }\n    }   \n    c *= 0.11111111111; // calculate avarage.\n    c *= max(0., 1. - (iTimeDelta * TRACER_DECAY)); // decay (darken).\n    \n    \n    // Add value from Buffer A and clamp to max 2.    \n    c = min(1.5, (c + texelFetch(iChannel0, ivec2(fragCoord / Pixel_Scaling), 0).r)); \n    \n    fragColor = vec4(c);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}