{
    "Shader": {
        "info": {
            "date": "1667427101",
            "description": "boom tssst boom tssst boom tssst boom tssst boom tssst titititititititi boom tssst boom tssst boom tssst boom tssst boom tssst !",
            "flags": 96,
            "hasliked": 0,
            "id": "msBGzm",
            "likes": 31,
            "name": "Glowy room",
            "published": 3,
            "tags": [
                "light",
                "glow",
                "techno",
                "boomboom",
                "darkroom"
            ],
            "usePreview": 1,
            "username": "z0rg",
            "viewed": 603
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        if (nuv.y > 0. && nuv.y < 1.)\n            col += (1.-abs(f))*texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n\n    vec3 rgb = texture(iChannel1, uv).xyz+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    //rgb = pow(rgb, vec3(1.));\n    vec2 cuv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define GLOW_SAMPLES 80\n#define GLOW_DISTANCE 0.2\n#define GLOW_POW 1.1\n#define GLOW_OPACITY 15.\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n#define TAU (PI*2.0)\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\nfloat hash11(float seed)\n{\n    return fract(sin(seed*123.456789)*123.456);\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y, l.z));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n#define FFT(a) (texture(iChannel3, vec2(a,0.)).x*.75)\nfloat _seed;\nfloat rand()\n{\n    _seed++;\n    return hash11(_seed);\n}\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 4.;\n    if (iTime > 104. && iTime < 174.)\n        fov = 2.+sin(iTime*.3);\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000.,-1.);\n    \n    acc = _min(acc, vec2(length(p+vec3(2.,-3.8,-4.))-2.5, 0.));\n    \n    float cube = -_cube(p, vec3(6.));\n    acc = _min(acc, vec2(cube, 1.));\n    \n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.001, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps && distance(p, ro) < 20.; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.001)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+=rd*res.x;\n    }\n    return vec3(-1.);\n}\n\nvec3 getMat(vec3 p, vec3 n, vec3 rd, vec3 res)\n{\n    vec3 col = n*.5+.5;\n    vec3 emit = vec3(0.);\n    if (res.z == 1.)\n    {\n        col = vec3(0.);\n        if (sin(iTime+FFT(.1)*13.) > 0.1)\n        {\n        if (p.y < -5.)\n        {\n            emit = vec3(1.)*sat(sin(p.z*5.+iTime));\n            float beat = 1./8.;\n            \n            emit *= mix(1.,.2,(mod(iTime, beat)/beat)*sat(10.*sin(iTime)));\n        }\n        }\n        else\n        {\n            if (p.y > 5.5)\n            {\n                vec2 luv = p.xz;\n                float pix = 1.5;\n                luv = floor(luv/pix)*pix;\n                vec3 rgb = mix(vec3(0.1,.1,1.), vec3(1.000,0.506,0.102)*2., sat(-.5+sin(length(luv)*5.-5.*iTime)));\n                emit = rgb*sat(sin(p.z*3.)*sin(p.x*3.)*10.);\n            }\n        }\n    }\n    if (res.z == 0.)\n    {\n        col = vec3(0.);\n        float freq = 10.;\n        float stpt = 2.;\n        float t = floor(5.*iTime/stpt)*stpt;\n        vec3 rgb = mix(vec3(1.), vec3(1.,.1,.1), abs(sin(p.x*2.)));\n        rgb *= 1.-sat((abs(p.y-4.)-1.)*10.);\n        emit = 2.*sat(sin(p.x*freq+t)*sin(p.y*freq)*sin(p.z*freq-t))*rgb;\n    }\n    col += emit;\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    uv += (vec2(rand(), rand())-.5)*.02*pow(FFT(.8)*2.,2.)*sat(sin(iTime*.33));\n    float stp = 1.9;\n    float t = floor(iTime/stp)*stp;\n    uv *= r2d((hash11(t)-.5)*.5);\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(sat(sin(iTime)*3.)*3.,3.5+mod(iTime, 2.)*sign(sin(iTime*.33)),-4.);\n    vec3 ta = vec3(2.,3.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 128);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = getMat(p, n, rd, res);\n        if (true)\n        {\n            vec3 refl = rd;\n            for (float i = 0.; i < 8.; ++i)\n            {\n                refl = reflect(refl, n);\n                float gloss = pow(texture(iChannel2, (p.xz+p.y*.5)*.5).x, 2.);\n                refl = normalize(refl+normalize(vec3(rand(),rand(), rand())-.5)*.2*gloss);\n                vec3 resrefl = trace(p+n*.01, refl, 128);\n                if (resrefl.y > 0.)\n                {\n                    p = p+refl*resrefl.y;\n                    n = getNorm(p, resrefl.x);\n                    col += .5*getMat(p, n, refl, resrefl);\n                }\n            }\n\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    _seed = iTime+texture(iChannel0, uv).x;\n    vec3 col = rdr(uv);\n    \n    vec2 off = vec2(1., -1.)/(iResolution.x*1.5);\n\n    if (true) // Not so cheap antialiasing\n    {\n        //col = vec3(1.,0.,0.);\n        vec3 acc = col;\n        acc += rdr(uv+off.xx);\n        acc += rdr(uv+off.xy);\n        acc += rdr(uv+off.yy);\n        acc += rdr(uv+off.yx);\n        col = acc/5.;\n        \n    }\n    col *= 1.9/(col+1.);\n\n    col = sat(col);\n    col = mix(col, texture(iChannel1, fragCoord/iResolution.xy).xyz, .3);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "musicstream",
                        "id": 30033,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/i_oofficial/404-anonymous?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        if (nuv.x > 0. && nuv.x < 1.)\n          col += (1.-abs(f))*texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}