{
    "Shader": {
        "info": {
            "date": "1636907838",
            "description": "https://iquilezles.org/articles/rmshadows/rmshadows.htm",
            "flags": 0,
            "hasliked": 0,
            "id": "flc3W8",
            "likes": 2,
            "name": "sdf soft shadow",
            "published": 3,
            "tags": [
                "sdfshadow"
            ],
            "usePreview": 0,
            "username": "WingStone",
            "viewed": 280
        },
        "renderpass": [
            {
                "code": "#define SPH_POS vec3(0.0,-2.5,6.0)\n#define SPH_R 2.0\n#define K 15.0\n#define LIGHT_DIR vec3(1.5, 1.0, 0.0)\n\nfloat map(vec3 pos)\n{\n    return distance(pos, SPH_POS)-SPH_R;\n}\n\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n}\n\nfloat softshadowplus( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy)/ iResolution.y;\n    vec3 screenPos = vec3(uv, 1.0);\n    screenPos.y -= 0.5;\n    vec3 dir = normalize(screenPos);\n    \n    // plane\n    float height = -5.0;\n    vec3 pos = dir.y < 0.0? vec3(height/dir.y*dir.x, height, height/dir.y*dir.z) : vec3(0.0);\n\n    vec3 lightdir = normalize(LIGHT_DIR);\n    \n    float sw = softshadow(pos, lightdir,0.0, 10.0, K);\n    //float sw = shadow(pos, lightdir,0.0, 10.0);\n    float col = sw+0.5;\n    col *= dir.y < 0.0 ? exp(-0.04*length(pos)) : 0.0;\n    \n    // sphere\n    vec3 odir = normalize(SPH_POS);\n    float d2 = dot(SPH_POS,SPH_POS);\n    float co = dot(dir, odir);\n    if( co > sqrt(1.0- SPH_R*SPH_R/d2))\n    {\n      vec3 pos = dir*(sqrt(d2)*co - sqrt(SPH_R*SPH_R- d2 + co*co*d2));\n      vec3 normal = normalize(pos - SPH_POS);\n      col = max(0.0, dot(lightdir, normal))+0.5;\n      col *=  exp(-0.04*length(pos));\n    }\n    \n    col*= 1.3;\n    col = col/(1.0+col);\n    \n    fragColor = vec4(col, col, col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}