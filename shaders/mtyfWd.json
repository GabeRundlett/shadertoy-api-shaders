{
    "Shader": {
        "info": {
            "date": "1702631146",
            "description": "A/FM",
            "flags": 0,
            "hasliked": 0,
            "id": "mtyfWd",
            "likes": 3,
            "name": "ShaderToy_8_A/FM",
            "published": 3,
            "tags": [
                "afm"
            ],
            "usePreview": 0,
            "username": "tbx",
            "viewed": 161
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653\n#define COUNT 20.0\n\nfloat line(vec2 st, float width)\n{\n    return smoothstep(width, 0.0, abs(st.y - st.x));\n}\n\nfloat drawCoord(vec2 uv)\n{\n   float x = distance(vec2(uv.x, 0.0), vec2(0.0, 0.0));\n   float y = distance(vec2(0.0, uv.y), vec2(0.0, 0.0));\n   \n   return 1e-3 / x + 1e-3 / y;\n}\n\nfloat sphere(vec2 coord, vec2 p, float radius)\n{\n    float d = distance(p, coord);\n    d = abs(d - radius);\n    return 1e-3 / d;\n}\n\nfloat sphereShape(vec2 coord, vec2 p, float radius)\n{\n    float d = distance(p, coord);\n    d /= radius;\n    d = 1.0 - d;\n    d = clamp(d * 24.0, 0.0, 1.0);\n    return d;\n}\n\nfloat net(vec2 coord)\n{\n    float xline = cos(coord.x * PI * COUNT);\n    xline = step(1.0 - 1e-1, xline);\n    \n    float yline = cos(coord.y * PI * COUNT);\n    yline = step(1.0 - 1e-1, yline);\n    \n    return xline + yline;\n}\n\nfloat QuadrantIV(vec2 coord, float warp)\n{\n    float f = step(0.0, -coord.x);\n    f *= step(0.0, coord.y);\n    return abs(warp - f);\n}\n\nfloat QuadrantII(vec2 coord, float warp)\n{\n    float f = step(0.0, coord.x);\n    f *= step(0.0, -coord.y);\n    return abs(warp - f);\n}\n\nfloat noise(float x)\n{\n    return fract(sin(x * 43.3459 + 248.2435) * 545.344898);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float asp = iResolution.x / iResolution.y;\n    \n    vec2 coord = uv * 2.0 - 1.0;\n    \n    vec2 aspCoord = vec2(coord.x * asp, coord.y);\n    \n    vec2 spCoord = aspCoord;\n    \n    vec3 col = vec3(0.0);\n    \n    col += net(aspCoord) * 0.125;\n    \n    col += drawCoord(coord);\n    aspCoord.x += fract(iTime * 0.01) * 20.0 * PI;\n    float x = sin(aspCoord.x * PI * 4.0);\n    x += sin(aspCoord.x * 5.2995);\n    x += sin(aspCoord.x * 3.1245) * 0.5;\n    x += sin(aspCoord.x * 2.1245) * 0.66;\n    x += sin(aspCoord.x * 18.1245) * 0.42;\n    \n    col += line(vec2(x, aspCoord.y * 4.0), 0.09);\n    \n    col += sphereShape(spCoord * 4.0, vec2(-0.1, x + 0.3), 0.15);\n    col += sphereShape(spCoord * 4.0, vec2(0.0, x + 0.3), 0.3);\n    col += sphereShape(spCoord * 4.0, vec2(0.1, x + 0.3), 0.6);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}