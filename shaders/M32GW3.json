{
    "Shader": {
        "info": {
            "date": "1708969751",
            "description": "extracted and golfed from \"Shield emissive os\" by oleg304. https://shadertoy.com/view/4XBGzG\n\nNB: also, no variable declared !\n",
            "flags": 0,
            "hasliked": 0,
            "id": "M32GW3",
            "likes": 53,
            "name": "Hexasphere ( 219 chars )",
            "published": 3,
            "tags": [
                "2tweets"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 809
        },
        "renderpass": [
            {
                "code": "// more readable version + comments  at the end\n// extracted and golfed from \"Shield emissive os\" by oleg304. https://shadertoy.com/view/4XBGzG\n\n\n// 219 chars: -5 by coyote, -5 by Fab\n\nvoid mainImage( out vec4 o, vec2 p ){\n    p += p - ( o.xyw = iResolution ).xy;                            // centering\n    p /= .2 + .3* sqrt( o.w -= dot (p *= 2./o.x, p ) );             // sphere\n    p.y += fract( ceil( p.x = p.x/.9 + iTime ) / 2. ) + iTime*.2,   // hexa: offset odd rows\n    o =   vec4(2,3,5,1)/20. * o.w                                   // pseudo-shading\n        / ( .1 + abs( max( p = abs(fract(p)-.5), p.x*1.5 ) + --p ).y ); // pattern: draw 2 lines * symmetries\n}                       // ↑ tiling + symmetries\n\n\n\n\n\n/** // 228 chars: -1 by iq, -5 by Greg\n\nvoid mainImage( out vec4 o, vec2 p ){\n    p += p - (o.xy = iResolution.xy);                               // centering\n    p /= .2 + .3* sqrt( o.a = max( 1.- dot (p *= 2./o.x, p ), 0.) ),// sphere\n    p.y += fract( ceil( p.x = p.x/.9 + iTime ) / 2. ) + iTime*.2,   // hexa: offset odd rows\n    o =   vec4(2,3,5,1)/20. * o.a                                   // pseudo-shading\n        / ( .1 + abs( max( p = abs(fract(p)-.5), p.x*1.5 ) + --p ).y ); // pattern: draw 2 lines * symmetries\n}                       // ↑ tiling + symmetries\n\n/**\n\n\n\n\n\n/** // 234 chars, no variables\n\nvoid mainImage( out vec4 o, vec2 p ){\n    o.rgb = iResolution;\n    p = 2.* ( p+p - o.xy ) / o.x ;                               // centered coords\n    p /= .2 + .3* sqrt( o.a = max( 1.-dot(p,p), 0.) ),           // sphere. z = depth\n    p.y += fract( ceil( p.x = p.x/.9 + iTime ) / 2. ) + iTime*.2,// hexa: offset odd rows\n    p = abs( fract(p) - .5 ),                                    // tiling + symmetries\n    o =   vec4(2,3,5,1)/20. * o.a                                // pseudo-shading\n        / ( .1 + abs( max( p, p.x*1.5 ) + p - 1. ).y );          // pattern: draw 2 lines\n}\n\n/**/\n\n\n\n\n\n/** // --- 239 chars\n\nvoid mainImage( out vec4 o, vec2 u ){\n    float t = iTime , z;\n    vec2  R = iResolution.xy,\n          p = 2.* ( u+u - R ) / R.x ;                     // centered coords\n    p /= .2 + .3* sqrt( z = max( 1.-dot(p,p), 0.) ),      // sphere. z = depth\n    p.y += fract( ceil( p.x = p.x/.9 + t ) / 2. ) + t*.2, // hexa: offset odd rows\n    p = abs( fract(p) - .5 ),                             // tiling + symmetries\n    o =   vec4(2,3,5,1)/20. * z                           // pseudo-shading\n        / ( .1 + abs( max( p, p.x*1.5 ) + p - 1. ).y );   // pattern: draw 2 lines\n}\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}