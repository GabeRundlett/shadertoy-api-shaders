{
    "Shader": {
        "info": {
            "date": "1613313717",
            "description": "creating fire with gyroid shapes",
            "flags": 0,
            "hasliked": 0,
            "id": "tttfzl",
            "likes": 6,
            "name": "Fire Within",
            "published": 3,
            "tags": [
                "raymarching",
                "template",
                "artofcode"
            ],
            "usePreview": 0,
            "username": "YitingLiu",
            "viewed": 310
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S(a, b, t) smoothstep(a, b, t)\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,233.53));\n    p += dot(p, p+23.234);\n    return fract(p.x*p.y);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdGyroid(vec3 p,float scale, float thickness, float bias){\n    p*=scale;\n    \n    // can also play with the p and p.zxy by adding some numbers \n    // scale needs to add the largest multiplers in either p or p.zxy \n    // return abs(dot(sin(p*2.),cos(p.zxy*1.23))-bias)/(scale*2.)-thickness;\n\n    return abs(dot(sin(p),cos(p.zxy))-bias)/scale-thickness;\n}\n    \n    \n    \nvec3 Transform(vec3  p){\n   p.xy*=Rot(p.z*.15);\n\n    p.z -=iTime*.1;\n    p.y -= .3;\n    \n    return p;\n\n}\n\nfloat GetDist(vec3 p) {\n    p=Transform(p);\n    float box = sdBox(p, vec3(1));\n    \n    // wanting something organic? the scales for two should not be multiplicable by each other (ex.: can't be 4 and 8)\n   \t\n   \tfloat g1 = sdGyroid(p, 5.23, .03, 1.4);\n    float g2 = sdGyroid(p, 10.76, .03, .3);\n    float g3 = sdGyroid(p, 20.76, .03, .3);\n    float g4 = sdGyroid(p, 35.76, .03, .3);\n    float g5 = sdGyroid(p, 60.76, .03, .3);\n    float g6 = sdGyroid(p, 110.76, .03, .3);\n    float g7 = sdGyroid(p, 210.76, .03, .3);\n    \n    //float g = max(g1,g2);//union \n  //float g = max(g1,-g2);//subtraction \n    //bump mapper\n    g1 -= g2*.4;\n    g1 -= g3*.3;\n    g1 += g4*.2;\n    g1 += g5*.2;\n    g1 += g6*.3;\n    g1 += g7*.5;\n    \n    //float d=max(box,g1*.8);// intersect the box \n   \t\n    float d = g1*.8;\n    return d;\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    \n//    the e.x determines the smoothness\n    vec2 e = vec2(.025, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvec3 Background(vec3 rd){\nfloat t = iTime*.2;\n    vec3 col = vec3(0);\n    vec3 fireCol = vec3(1,.45,.1);\n\n    \n    float y = rd.y*.5+.5;\n    \n    col+=(1.-y)*fireCol;\n    \n    //make flames\n    //smoothstep to make the top dark and bottom bright \n    \n    float a = atan(rd.x,rd.z);\n    float flames = sin(a*10.+t)*sin(a*7.-t)*sin(a*3.);\n    flames *=S(0.8,0.6,y);\n    col*=flames;\n    col = max(col,0.);\n    col+=S(.3,.0,y);\n    return col;\n\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    float t = iTime*0.2;\n    vec3 col = vec3(0);\n    vec3 fireCol = vec3(1,.45,.1);\n  \n\n    //distort effect \n    uv +=sin(uv*20.+t)*.01;\n    vec3 ro = vec3(0, 0, -1);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 lookat = vec3(0,0,0);\n    //zoom factor 1\n    vec3 rd = GetRayDir(uv, ro, lookat, .8);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        float height = p.y;\n        p = Transform (p);\n        \n    \tfloat dif = n.y*.5+.5;\n    \tcol+=dif*dif*dif;// 0 <> 1 \n   \n    \n        //ambient occulusion - cheaper \n        float g2 = sdGyroid(p, 10.76, .03, .3);\n        \n        col*=S(-.1,.05,g2);//blackening \n        \n        float crackWidth = -.02+S(0., -.5, n.y)*.04;\n        float cracks = S(crackWidth,-.025,g2);\n        float g3 = sdGyroid(p+t*.1, 5.76, .03, .0);\n        float g4 = sdGyroid(p-t*.05, 4.76, .03, .0);\n        cracks *=g3*g4*20.+.1*S(.2,.0,n.y);\n\n        col+=cracks*fireCol*3.;\n        \n        float g5 = sdGyroid(p-vec3(0,t,0),1.85,.02,1.3);\n        \n        col+=g5*fireCol;\n\n        col +=S(0.,-2.,height)*fireCol;\n       \n\n    }\n    \n    col = mix(col, Background(rd), S(0., 7., d));\n    //col = Background(rd);\n\n    col*=1.-dot(uv,uv);\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}