{
    "Shader": {
        "info": {
            "date": "1459914319",
            "description": "//random noisey shader",
            "flags": 0,
            "hasliked": 0,
            "id": "lscSzS",
            "likes": 5,
            "name": "Noisey",
            "published": 3,
            "tags": [
                "random"
            ],
            "usePreview": 0,
            "username": "addminztrator",
            "viewed": 696
        },
        "renderpass": [
            {
                "code": "mat2 m = mat2( 0.8, 0.6, -0.6, 0.8);\n\nvec4 mod289(vec4 x)\n{\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n    return 1.79284291400159 - 0.85373472095314 * r;\n} \n\nvec2 fade(vec2 t) {\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat noise(vec2 P)\n{\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n    Pi = mod289(Pi); // To avoid truncation effects in permutation\n    vec4 ix = Pi.xzxz;\n    vec4 iy = Pi.yyww;\n    vec4 fx = Pf.xzxz;\n    vec4 fy = Pf.yyww;\n     \n    vec4 i = permute(permute(ix) + iy);\n     \n    vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n    vec4 gy = abs(gx) - 0.5 ;\n    vec4 tx = floor(gx + 0.5);\n    gx = gx - tx;\n     \n    vec2 g00 = vec2(gx.x,gy.x);\n    vec2 g10 = vec2(gx.y,gy.y);\n    vec2 g01 = vec2(gx.z,gy.z);\n    vec2 g11 = vec2(gx.w,gy.w);\n     \n    vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n    g00 *= norm.x;  \n    g01 *= norm.y;  \n    g10 *= norm.z;  \n    g11 *= norm.w;  \n     \n    float n00 = dot(g00, vec2(fx.x, fy.x));\n    float n10 = dot(g10, vec2(fx.y, fy.y));\n    float n01 = dot(g01, vec2(fx.z, fy.z));\n    float n11 = dot(g11, vec2(fx.w, fy.w));\n     \n    vec2 fade_xy = fade(Pf.xy);\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n    return 2.3 * n_xy;\n}\n\nfloat fbm( vec2 p ){\n\tfloat f = 0.0;\n\tf += 0.5000*noise(p); p*=m*2.02;\n\tf += 0.2500*noise(p); p*=m*2.03;\n\tf += 0.1250*noise(p); p*=m*2.01;\n\tf += 0.0625*noise(p); p*=m*2.04;\n\tf /= 0.9375;\n\treturn f;\n}\n\n// By A Saad Imran\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.y;\n\tvec2 p = -1.0 + 2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n\t\n\tfloat r = sqrt( dot(p,p));\n\tfloat a = atan( p.y, p.x );\n\tvec3 col = vec3( 0.0 );\n\tfloat f = fbm( p + iTime);\n\t//vec3 col = vec3(1.0);\n\tcol = mix( col, vec3(0.2, 0.5, 0.4), f);\n\t\n\tf = fbm( vec2(8.0, 8.0*f) + iTime);\n\tcol = mix (col, vec3(sin(iTime), 0.5, sin(iTime)), f);\n    \n    f = fbm( vec2(16.0*f, 30.0*a) + iTime);\n\tcol = mix (col, vec3(1.0, sin(iTime), 0.4), f);\n    \n\tfragColor = vec4(col, 1.0);\n    \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}