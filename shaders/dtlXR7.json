{
    "Shader": {
        "info": {
            "date": "1674517559",
            "description": "this clock can be seen at many trainstations in switzerland",
            "flags": 0,
            "hasliked": 0,
            "id": "dtlXR7",
            "likes": 4,
            "name": "another clock 6",
            "published": 3,
            "tags": [
                "classic",
                "shaderclockdenodev"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 270
        },
        "renderpass": [
            {
                "code": "\nfloat f_n_dist_sqr(vec2 o){\n    return max(abs(o.x), abs(o.y));\n}\nfloat f_n_dist_rct(vec2 o, float n){\n    n = abs(n);\n    float nx = o.x-n;\n    float ny = abs(o.y);\n    float nd = max(nx, ny);\n    float nx2 = (-1.*o.x)-n;\n    float nd2 = max(nx2, ny);\n    \n    return max(nd, nd2);\n}\nvec2 f_o_rotd(vec2 o, float n_angle_nor){\n    float n_tau = 6.283185;\n    float n_ang_rad = n_angle_nor * n_tau;\n    return vec2(\n        cos(n_ang_rad)*o.x - sin(n_ang_rad)*o.y, \n        sin(n_ang_rad)*o.x + cos(n_ang_rad)*o.y\n    );\n}\n\n\n//IMPORTANT START, keep the lines with and between IMPORTANT START and IMPORTANT END\n// and add the tag 'shaderclockdenodev' to the shader\n// otherwise the shader will not work on https://shaderclock.deno.dev/\n// also at the moment only the following variables are available iTime, iResolution,fragCoord,iDate\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//IMPORTANT END\n\n    float n_ratio_1to_iresx = 1./ iResolution.x;\n    //needed for anti aliasing ?\n    vec2 o_trn_fc_nor = fragCoord.xy / iResolution.xy;\n    vec2 o_trn_mo_nor = iMouse.xy / iResolution.xy;\n    \n    float n_ratio_x_to_y = iResolution.x / iResolution.y; \n    \n    vec2 o_trn_fc_nor_offset = (o_trn_fc_nor - vec2(0.5))*vec2(n_ratio_x_to_y, 1.);\n    vec2 o_trn_mo_nor_offset = (o_trn_mo_nor - vec2(0.5))*vec2(n_ratio_x_to_y, 1.);\n    // by default the rotation starts between quadrant II and quadrant III\n    // so this rotation compensates one quadrant\n    o_trn_fc_nor_offset = f_o_rotd(o_trn_fc_nor_offset, (1./4.)*2.);\n    \n    o_trn_fc_nor_offset *= 1.2;\n    vec2 o_fc_nor = fragCoord.xy / iResolution.xy;\n    float n_tau = 6.283185;\n    float n_freq_sec = fract(iTime)*n_tau;\n    //float n_t_sec = (iTime);\n    //n_t_sec = floor(iTime);// for snapping handle\n    float n_ang_nor = fract(atan(o_trn_fc_nor_offset.y, o_trn_fc_nor_offset.x)/n_tau);\n    float n_t_yea = (iDate.x);//year-1\n    float n_t_mon = (iDate.y);//month-1\n    float n_t_day = (iDate.z);//day-1\n    float n_t_sec_since_midnight = (iDate.w);//secs since midnight\n    \n    float n_d,n_w, n_dcenter, n_radius, n_pointerstart, n_pointerend, n, n_radians_nor,n_divisor, n_glow; \n    vec2 o;\n    n_dcenter = length(vec2(0.)-o_trn_fc_nor_offset);\n    \n    float n_aa = n_ratio_1to_iresx*6.;\n    \n    //sec\n    n_pointerstart = 0.;\n    n_pointerend = 0.2;\n    n_radius = max(n_dcenter, n_pointerstart);\n    n_radius = min(n_radius, n_pointerend);\n    n_radians_nor = -n_t_sec_since_midnight/60.;\n    n_radians_nor = -floor(n_t_sec_since_midnight)/60.;//make it tick tock!\n    o = vec2(cos(n_radians_nor*n_tau)*n_radius,sin(n_radians_nor*n_tau)*n_radius);\n    float nsec = length(o-o_trn_fc_nor_offset);\n    n_w = 0.01;\n    \n    nsec = smoothstep(n_w+n_aa, n_w, nsec);\n    \n    o = o_trn_fc_nor_offset;\n    o = f_o_rotd(o, -n_radians_nor-1./4.);\n    \n    o = o_trn_fc_nor_offset;\n    o = f_o_rotd(o, -n_radians_nor-1./4.);\n    o.x += .12;\n    n_w = 0.002;\n    nsec = f_n_dist_rct(o, 0.21);\n    nsec = smoothstep(n_w+n_aa, n_w, nsec);\n    \n    n_w = 0.018;\n    o = o_trn_fc_nor_offset;\n    nsec += smoothstep(n_w+n_aa, n_w, length(o));\n    \n    \n    n_w = 0.038;\n    o = o_trn_fc_nor_offset;\n    o = f_o_rotd(o, -n_radians_nor-1./4.);\n    o.x += .32;\n    nsec += smoothstep(n_w+n_aa, n_w, length(o));\n    vec3 o_col_sec = vec3(0.925,0.,0.);\n    nsec = clamp(nsec, 0., 1.);\n    o_col_sec = nsec*o_col_sec;\n    //fragColor = vec4(nsec*o_col_sec, 1.);\n    //return;\n\n    //min\n    n_pointerstart = 0.0;\n    n_pointerend = 0.3;\n    n_radius = max(n_dcenter, n_pointerstart);\n    n_radius = min(n_radius, n_pointerend);\n    n_radians_nor = -n_t_sec_since_midnight/n_divisor;\n    n_radians_nor = -floor(n_t_sec_since_midnight/60.)/60.;//make it tick tock!\n    o = vec2(cos(n_radians_nor*n_tau)*n_radius,sin(n_radians_nor*n_tau)*n_radius);\n    float nmin = length(o-o_trn_fc_nor_offset);\n    n_w = 0.01;\n    nmin = smoothstep(n_w+n_aa, n_w, nmin);\n\n\n    o = o_trn_fc_nor_offset;\n    o = f_o_rotd(o, -n_radians_nor-1./4.);\n    o.x += .171;\n    n_w = 0.022;\n    nmin = f_n_dist_rct(o, 0.24);\n    nmin = smoothstep(n_w+n_aa, n_w, nmin);\n    \n    //hou\n    float n_radians_nor_hou = -(n_t_sec_since_midnight/60./60./12.);\n    n_radians_nor_hou = -floor(n_t_sec_since_midnight/60./60.)/12.;//make it tick tock!\n    float nhou;\n    \n    o = o_trn_fc_nor_offset;\n    o = f_o_rotd(o, -n_radians_nor_hou-1./4.);\n    o.x += .09;\n    n_w = 0.022;\n    nhou = f_n_dist_rct(o, 0.15);\n    nhou = smoothstep(n_w+n_aa, n_w, nhou);\n\n    //minutes indicators\n    float nminind;\n    n_radians_nor = floor(n_ang_nor*60.+0.5)/60.;\n    \n    o = o_trn_fc_nor_offset;\n    o = f_o_rotd(o, -n_radians_nor);\n    float n_xo = .42;\n    o.x -= n_xo;\n    n_w = 0.002;\n    float n_l = 0.012;\n    nminind = f_n_dist_rct(o, n_l);\n    nminind = smoothstep(n_w+n_aa, n_w, nminind);\n    \n    \n    \n    //hours indicators\n\n    n_radians_nor = floor(n_ang_nor*12.+0.5)/12.;\n\n    float nhouind;\n    o = o_trn_fc_nor_offset;\n    o = f_o_rotd(o, -n_radians_nor);\n    o.x -= n_xo-n_l*2.6;\n    n_w = n_w*6.;\n    nhouind = f_n_dist_rct(o, n_l*3.);\n    nhouind = smoothstep(n_w+n_aa, n_w, nhouind);\n    \n    \n    //border\n    o = vec2(cos(n_radians_nor*n_tau)*n_radius,sin(n_radians_nor*n_tau)*n_radius);\n    float nborder = length(vec2(0.)-o_trn_fc_nor_offset);\n    nborder=sin(nborder*n_tau+1.5)*0.5+0.5;\n    nborder= pow(nborder, 1./3.);\n    n_w = 0.1;\n    n_aa = n_ratio_1to_iresx*123.;\n    nborder = smoothstep(n_w+n_aa,n_w, nborder);\n    //n = min(pow(nsec,1.),nmin);\n    //n = min(n, nhou);\n    //n = 1.-sqrt(n);\n    //n_glow = 1.;\n    //n = pow(n, 1./n_glow);\n    n = nsec;\n    n += nmin;\n    n += nhou;\n    n += nminind;\n    n += nhouind;\n    \n    n = clamp(n, 0., 1.);\n    //n += nborder;\n    vec3 o_col = o_col_sec + vec3(1.-n);\n    fragColor = vec4(o_col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}