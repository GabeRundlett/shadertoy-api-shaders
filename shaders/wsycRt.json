{
    "Shader": {
        "info": {
            "date": "1603461666",
            "description": "Dithering using my great love, vector fields.\n\nBoth (gaussian corrected) video and dithering are analysed with feature detection. A vector is derived between them which has the potential to flip pixels. (Formerly erroneously called gradient descent.)",
            "flags": 32,
            "hasliked": 0,
            "id": "wsycRt",
            "likes": 6,
            "name": "Vector Field Feature Dither 2",
            "published": 3,
            "tags": [
                "dithering"
            ],
            "usePreview": 0,
            "username": "JeroenDStout",
            "viewed": 289
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 samp = texture(iChannel1, uv);\n    \n    fragColor.xyz = vec3(samp.x, samp.x, samp.x);\n    \n    //fragColor.xyz = vec3(samp.z, samp.z, samp.z);\n    \n    fragColor.w = 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float samplePx(in vec2 px)\n{\n    if (px.x < 0. || px.y < 0. || px.x > 1. || px.y > 1.)\n        return 0.;\n    return texture(iChannel0, px).x - texture(iChannel1, px).x;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pxSz = vec2(1., 1.) / iResolution.xy;\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float sample_video[25];\n    int index = 0;\n    for (float y = -2.; y <= 2.; y += 1.) {\n        for (float x = -2.; x <= 2.;x += 1.) {\n            sample_video[index++] = samplePx(uv + vec2(pxSz.x * x, pxSz.y * y));\n        }\n    }\n    \n    float filter_l = 0.;\n    for (int i = 0; i < 25; i++) {\n        filter_l += sample_video[i] * kernel_l[i];\n    }\n    filter_l *= .2;\n    \n    float filter_h = 0.;\n    for (int i = 0; i < 25; i++) {\n        filter_h += sample_video[i] * kernel_h[i];\n    }\n    \n    float filter_v = 0.;\n    for (int i = 0; i < 25; i++) {\n        filter_v += sample_video[i] * kernel_v[i];\n    }\n    \n    float filter_s = 0.;\n    for (int i = 0; i < 25; i++) {\n        filter_s += sample_video[i] * kernel_s[i];\n    }\n\n    // Output to screen\n    fragColor = vec4(filter_l, filter_h, filter_v, filter_s);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float kernel_l[25] = float[25](\n\t .1, .2, .2, .2, .1,\n\t .2, .3, .3, .3, .2,\n\t .2, .3, .4, .3, .2,\n\t .2, .3, .3, .3, .2,\n\t .1, .2, .2, .2, .1\n);\n\nfloat kernel_h[25] = float[25](\n\t.6, .3, 0., -.3, -.6,\n\t.6, .3, 0., -.3, -.6,\n\t.6, .3, 0., -.3, -.6,\n\t.6, .3, 0., -.3, -.6,\n\t.6, .3, 0., -.3, -.6\n);\n\nfloat kernel_v[25] = float[25](\n\t .6,  .6,  .6,  .6,  .6,\n\t .3,  .3,  .3,  .3,  .3,\n     .0,  .0,  .0,  .0,  .0,\n\t-.3, -.3, -.3, -.3, -.3,\n\t-.6, -.6, -.6, -.6, -.6\n);\n\nfloat kernel_s[25] = float[25](\n\t-.1, -.2, -.2, -.2, -.1,\n\t-.2,  .1,  .1,  .1, -.2,\n    -.2,  .1,  .5,  .1, -.2,\n\t-.2,  .1,  .1, -.1, -.2,\n\t-.1, -.2, -.2, -.2, -.1\n);\n\nuint HashWang( uint a )\n{\n\ta = (a ^ 61u) ^ (a >> 16u);\n\ta = a + (a << 3u);\n\ta = a ^ (a >> 4u);\n\ta = a * 0x27d4eb2du;\n\ta = a ^ (a >> 15u);\n\treturn a;\n}\n\nuint Rand( inout uint seed )\n{\n    seed += 13u;\n    return HashWang( seed );\n}\n\nfloat FRand( inout uint seed )\n{\n    uint urand = Rand( seed );    \n    const uint mantissaMask = (0xffffffffu) >> ( 32u - 23u );\n    return fract(float(urand & mantissaMask) / float(mantissaMask)); \n    //return uintBitsToFloat( (urand & mantissaMask) | (127u << 23u) );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec4 sample_diff_tex(vec2 uv)\n{\n    if (uv.x < 0. || uv.x > 1. || uv.x < 0. || uv.y > 1.)\n      return vec4(0., 0., 0., 0.);\n    \n    return texture(iChannel0, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uint seed = uint( iTime * 23.456 ) + uint(fragCoord.x *23.45f) * 12326u + uint(fragCoord.y * 36.43) * 42332u;\n    float rnd = FRand(seed);\n    \n    vec2 pxSz = vec2(1., 1.) / iResolution.xy;\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 old_sample = texture(iChannel1, uv);\n    vec4 proc_video = texture(iChannel2, uv);\n    \n    float rate = proc_video.y;// * proc_video.y;\n    float tired_rate = pow(0.995, 1.0 + rate * 10.);\n    float shift_rate = 7. + 1. * pow(2.0, -1. + rate * 2.);\n    \n    float prev_bw = old_sample.x;\n    float luminosity = old_sample.y;\n    float luminosity_shift = 0.;\n    float tiredness = old_sample.w * tired_rate;\n    \n    vec4 sample_diff[25];\n    int index = 0;\n    for (float y = -2.; y <= 2.; y += 1.) {\n        for (float x = -2.; x <= 2.;x += 1.) {\n            sample_diff[index++] = sample_diff_tex(uv + vec2(pxSz.x * x, pxSz.y * y));\n        }\n    }\n    \n    float filter_l = 0.;\n    float filter_h = 0.;\n    float filter_v = 0.;\n    float filter_s = 0.;\n    for (int i = 0; i < 25; i++) {\n        filter_l += sample_diff[i].x * kernel_l[i];\n        filter_h += sample_diff[i].y * kernel_h[i];\n        filter_v += sample_diff[i].z * kernel_v[i];\n        filter_s += sample_diff[i].w * kernel_s[i];\n    }\n    luminosity_shift += filter_l * 10.0;\n    luminosity_shift += filter_h * -9.;\n    luminosity_shift += filter_v * -9.;\n    luminosity_shift += filter_s * 10.;\n    \n   // if (abs(luminosity_shift) < 10.)\n   //     luminosity_shift = 0.;\n    \n    tiredness *= pow(0.9, abs(luminosity_shift * 0.005));\n    \n    luminosity_shift *= shift_rate;\n    //luminosity_shift += (-1. + rnd * 2.) * 1.;\n    \n    luminosity += sign(luminosity) * (100. * log(1. + tiredness));\n    luminosity *= 0.9995;\n    luminosity += luminosity_shift;\n    \n    luminosity = max(-1000., min(1000., luminosity));\n    \n    float new_bw = luminosity > 0. ? 1. : 0.;\n    if (new_bw != prev_bw)\n        tiredness += 1. + 100. * rnd;\n    \n   // if (rnd > 0.5)\n   // \tnew_bw = prev_bw;\n    \n    fragColor = vec4(new_bw, luminosity, filter_s, tiredness);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float videoToPixel( vec3 pix )\n{\n    return max(pix.x, max(pix.y, pix.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv   = fragCoord/iResolution.xy;\n    vec4 samp = texture(iChannel0, uv);\n    vec2 off  = vec2(1. / 40.);//vec2(16.) / iResolution.xy;\n    \n    float val[12];\n    vec2  acc = vec2(0.);\n    \n    val[ 0] = videoToPixel(texture(iChannel0, vec2(uv.x - off.x, uv.y - off.y * 2.)).xyz);\n    val[ 1] = videoToPixel(texture(iChannel0, vec2(uv.x + off.x, uv.y - off.y * 2.)).xyz);\n    val[ 2] = videoToPixel(texture(iChannel0, vec2(uv.x - off.x * 2., uv.y - off.y * 1.)).xyz);\n    val[ 3] = videoToPixel(texture(iChannel0, vec2(uv.x - off.x * 1., uv.y - off.y * 1.)).xyz);\n    val[ 4] = videoToPixel(texture(iChannel0, vec2(uv.x + off.x * 2., uv.y - off.y * 1.)).xyz);\n    val[ 5] = videoToPixel(texture(iChannel0, vec2(uv.x + off.x * 1., uv.y - off.y * 1.)).xyz);\n    val[ 6] = videoToPixel(texture(iChannel0, vec2(uv.x - off.x * 2., uv.y + off.y * 1.)).xyz);\n    val[ 7] = videoToPixel(texture(iChannel0, vec2(uv.x - off.x * 1., uv.y + off.y * 1.)).xyz);\n    val[ 8] = videoToPixel(texture(iChannel0, vec2(uv.x + off.x * 2., uv.y + off.y * 1.)).xyz);\n    val[ 9] = videoToPixel(texture(iChannel0, vec2(uv.x + off.x * 1., uv.y + off.y * 1.)).xyz);\n    val[10] = videoToPixel(texture(iChannel0, vec2(uv.x - off.x, uv.y + off.y * 2.)).xyz);\n    val[11] = videoToPixel(texture(iChannel0, vec2(uv.x + off.x, uv.y + off.y * 2.)).xyz);\n    \n    acc += texture(iChannel1, vec2(uv.x - off.x * .125, uv.y - off.y * .125)).zw;\n    acc += texture(iChannel1, vec2(uv.x + off.x * .125, uv.y - off.y * .125)).zw;\n    acc += texture(iChannel1, vec2(uv.x - off.x * .125, uv.y + off.y * .125)).zw;\n    acc += texture(iChannel1, vec2(uv.x + off.x * .125, uv.y + off.y * .125)).zw;\n    \n    float prev_value = texture(iChannel1, uv).x;\n    \n    \n    float mean = 0.;\n    for (int i = 0; i < 12; i++) {\n        val[i] = pow(val[i], 2.2);\n        mean += val[i];\n    }\n    mean /= 12.;\n    \n    float var = 0.;\n    for (int i = 0; i < 12; i++) {\n        var += pow(val[i]-mean, 2.);\n    }\n    \n    mean *= 0.05;\n    mean += acc.x * 0.95 * 0.25;\n    var *= 0.05;\n    var += acc.y * 0.95 * 0.25;\n    \n    float overShot = max(0., sqrt(var)*1.5 + mean * 0.8 - 1.0);\n    //overShot -= max(0., 1. - sqrt(var)*1.5 - mean);\n    //mean += overShot * 0.015;\n    \n    fragColor.y     = overShot;\n    \n    fragColor.z     = mean;\n    fragColor.w     = var;\n    \n    float vid = videoToPixel(texture(iChannel0, uv).xyz);\n    \n    fragColor.x = pow(vid, 2.2) - mean;\n    fragColor.x /= min(1., max(4e-1, sqrt(var) * .85));\n    fragColor.x += 0.15 + mean * 0.8;// - overShot * 0.1;\n    // fragColor.x = vid;\n    \n    float diff = abs(fragColor.x - prev_value);\n    fragColor.y = sqrt(diff);\n\n    //fragColor.x = var;//pow(vid, 2.2);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}