{
    "Shader": {
        "info": {
            "date": "1619268294",
            "description": "Implementation of 1d cellular automaton. Try changing the rule! Pan/zoom with arrow keys.\nhttps://mathworld.wolfram.com/ElementaryCellularAutomaton.html",
            "flags": 48,
            "hasliked": 0,
            "id": "NdsXW2",
            "likes": 5,
            "name": "Elementary Cellular Automaton",
            "published": 3,
            "tags": [
                "cellularautomata",
                "wolfram"
            ],
            "usePreview": 0,
            "username": "kaihagseth",
            "viewed": 303
        },
        "renderpass": [
            {
                "code": "// Inspired by Stephen Wolfram :) \n// https://www.youtube.com/watch?v=VguG_y05Xe8\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    fragColor = vec4(vec3(1. - texelFetch( iChannel0, ivec2(fragCoord), 0 ).x), 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define RULE 30\n// Update: Stores states of automaton in buffers b and c channels... Can still be optimized\n//         a lot to store even more states without rolling over, but now it should be \n//         possible to calculate w * h iterations without overflowing.\n// Update: Added camera panning and zooming. Note that since only the \n//         1 dimensional state of the system is stored, things get a bit weird while panning.\n\n\nconst ivec2 ZOOMIX   = ivec2(0,0);\nconst ivec2 OFFSETIX = ivec2(1,0);\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nfloat getParam(ivec2 ix) {\n   return texelFetch(iChannel0, ix, 0).w;\n}\n\nfloat getOffset() {\n   return getParam(OFFSETIX);\n}\n\nfloat getZoom() {\n   return max(getParam(ZOOMIX), 1.);\n}\n\nbool keyPressed(int key)\n{\n    return texelFetch(iChannel1, ivec2(key, 0), 0).x > .5;\n}\n\nfloat getData(ivec2 coord) {\n    if (coord == ivec2(0, 0)) {\n        if      (keyPressed(KEY_UP))   return getZoom() * 1.01;\n        else if (keyPressed(KEY_DOWN)) return getZoom() / 1.02;\n        return getZoom();\n    } else if(coord == ivec2(1, 0))\n    {\n        if      (keyPressed(KEY_LEFT))  return getOffset() - 2.;\n        else if (keyPressed(KEY_RIGHT)) return getOffset() + 2.;\n        return   getOffset();\n    }\n    return 0.0;\n}\n\n\nivec2 ixToCoord(int i) {\n    return ivec2(i % int(iResolution.x),  i / int(iResolution.x));\n}\n\n// Returns value from previous iteration\nint px(int i) {\n    if (i < 0){\n        ivec2 c = ixToCoord(-1 - i);\n        return int(texelFetch(iChannel0, c, 0).z);\n    }\n    ivec2 c = ixToCoord(i);\n    return int(texelFetch(iChannel0, c, 0).y);\n}\n\nfloat dispPx(ivec2 coord) {\n    if (coord.y == 0) {\n        float i = ( float(coord.x) - (iResolution.x / 2.) ) / getZoom();\n        i += getOffset();\n        return float(px(int(floor(i))));\n    }\n    else if (coord.y < (int(getZoom())) ) {\n        return texelFetch(iChannel0, ivec2(coord.x, 0), 0).x;\n    }\n    return texelFetch(iChannel0, ivec2(coord.x, coord.y - int( getZoom())), 0).x; // scroll\n}\n\n// a: int to access as a bitset\n// n: bit index\nint getNthBit(int a, int n) {\n    return (a & ( 1 << n )) >> n;\n}\n\n//Generates current iteration\nvec2 cellStep(ivec2 coord) {  \n    int xb = (int(iResolution.x) * coord.y) + coord.x;\n    int xc =  -1- xb;\n    int  b = (px(xb+1) << 2) | (px(xb) << 1) | px(xb-1);\n    int  c = (px(xc+1) << 2) | (px(xc) << 1) | px(xc-1);\n    return vec2(getNthBit(RULE, b), getNthBit(RULE, c));\n}\n\n// Clear buffers and add seed.\nvec2 init(ivec2 coord) {\n    return vec2(float(coord == ivec2(1, 0)), 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {   \n    ivec2 coord = ivec2(fragCoord);\n    vec2 cellularPx = cellStep(coord);\n    if (iFrame == 0) cellularPx = init(coord);\n    float data = getData(coord);\n    fragColor = vec4(dispPx(coord), cellularPx, data);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}