{
    "Shader": {
        "info": {
            "date": "1541120153",
            "description": "I attempted to make a playable pool game in Shadertoy but it was too slow :P so here's a nice rendering of a pool table with some billiard balls.\n\nClick the mouse to make the balls go crazy",
            "flags": 33,
            "hasliked": 0,
            "id": "Xtyczh",
            "likes": 2,
            "name": "Pool Simulator 2019",
            "published": 3,
            "tags": [
                "raymarcher",
                "distance",
                "render",
                "pool",
                "multipass",
                "billiards"
            ],
            "usePreview": 0,
            "username": "jackdavenport",
            "viewed": 712
        },
        "renderpass": [
            {
                "code": "#define NUM_BALLS 5\n\n#define MAX_ITER 256\n#define MAX_DIST 100.\n#define MIN_DIST .01\n\nstruct Material {\n    vec3 albedo;\n    vec2 specular;\n    float reflective;\n};\n\n// Buffer data\nconst ivec2 CAMERA_TRANSFORM = ivec2(0,0);\nvec4 loadValue(in ivec2 re);\n\n// Ball data\nvec2 ballPos[NUM_BALLS];\n\n// by reinder: https://www.shadertoy.com/view/4dj3Dw\nvec4 tex3D( in vec3 pos, in vec3 normal, sampler2D sampler )\n{\n\treturn \ttexture( sampler, pos.yz )*abs(normal.x)+ \n\t\t\ttexture( sampler, pos.xz )*abs(normal.y)+ \n\t\t\ttexture( sampler, pos.xy )*abs(normal.z);\n}\n\nbool isVR;\nvec3 _ro;\n\n// Distance fields from: https://iquilezles.org/articles/distfunctions\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\nfloat sdPlane( vec3 p, vec4 n )\n{\n  return dot(p,n.xyz) + n.w;\n}\n// Booleans\nvec2 depth(vec2 scn, float dist, float id) {\n    return dist < scn.x ? vec2(dist, id) : scn;\n}\nvec2 depth(vec2 scn, vec2 obj) {\n    return obj.x < scn.x ? obj : scn;\n}\nvec2 subtract(vec2 scn, float dist) {\n    return vec2(max(-dist,scn.x), scn.y);\n}\nvec2 intersect(vec2 scn, float dist) {\n    return vec2(max(scn.x,dist), scn.y);\n}\n// --------------------------------------------\n\nvec2 dstScene(vec3 p, bool vr) {\n    // floor\n    vec2 scn = vec2(sdPlane(p, vec4(0.,1.,0.,1.44)), 2.);\n    // table exterior\n    scn = depth(scn, udRoundBox(p-vec3(0.,.8,0.), vec3(2.,.2,3.), .1), 0.);\n    float inside = udRoundBox(p-vec3(0.,1.,0.), vec3(1.8,.1,2.8), .1);\n    scn = subtract(scn, inside);\n    vec3 q = vec3(abs(p.x),p.y,abs(p.z));\n    scn = depth(scn, udBox(q-vec3(1.75,-.4,2.75), vec3(.2,1.,.2)), 0.);\n    // table interior\n    float disp = texture(iChannel2, p.xz * 2.).y * .025;\n    vec2 green = vec2(sdPlane(p, vec4(0., 1., 0., -.8125)) - disp, 1.);\n    scn = depth(scn, intersect(green, inside));\n    // balls\n    //vec2 pos;\n    //for(int i = 0; i < NUM_BALLS; i++) {\n     //   pos = ballPos[i];\n     //   scn = depth(scn, sdSphere(p-vec3(pos.x,.9,pos.y), .1), 3.);\n    //}\n    scn = depth(scn, sdSphere(p-vec3(ballPos[0].x,.9,ballPos[0].y), .1), 3.);\n    scn = depth(scn, sdSphere(p-vec3(ballPos[1].x,.9,ballPos[1].y), .1), 3.);\n    scn = depth(scn, sdSphere(p-vec3(ballPos[2].x,.9,ballPos[2].y), .1), 3.);\n    scn = depth(scn, sdSphere(p-vec3(ballPos[3].x,.9,ballPos[3].y), .1), 3.);\n    scn = depth(scn, sdSphere(p-vec3(ballPos[4].x,.9,ballPos[4].y), .1), 3.);\n    // vr headset\n    if(isVR && vr) {\n    \tscn = depth(scn, udBox(p-_ro, vec3(.01,.01,.05)), 0.);\n    }\n    return scn;\n}\n\nvec2 raymarch(vec3 ro, vec3 rd) {\n    float t  = 0.;\n    float id = -1.;\n    for(int i = 0; i < MAX_ITER; i++) {\n        if(t > MAX_DIST) {\n            break;\n        }\n        vec2 scn = dstScene(ro+rd*t,false);\n        if(scn.x < MIN_DIST) {\n            id = scn.y;\n            break;\n        }\n        t += scn.x;\n    }\n    return vec2(t,id);\n}\n\nvec3 calcNormal(vec3 p, float t) {\n    vec2 e = vec2(MIN_DIST*t,0.);\n    vec3 n = vec3(dstScene(p+e.xyy,false).x-dstScene(p-e.xyy,false).x,\n                  dstScene(p+e.yxy,false).x-dstScene(p-e.yxy,false).x,\n                  dstScene(p+e.yyx,false).x-dstScene(p-e.yyx,false).x);\n    return normalize(n);\n}\n\n#define LIGHT_POS vec3(6.,5.,0.)\n#define LIGHT_AMB vec3(.2,.2,.2)\n#define LIGHT_RNG 30.\n\nfloat calcShadow(vec3 p, vec3 d, float mint, float maxt, float k) {\n    float t = mint;\n    float r = 1.;\n    for(int i = 0; i < 32; i++) {\n        float d = dstScene(p+d*t,true).x;\n        r = min(r, k*d/t);\n        t += clamp(d, .01, 1.);\n        if(t < .002 || t > maxt) {\n            break;\n        }\n    }\n    return clamp(r,0.,1.);\n}\n\nvec3 calcLighting(vec3 p, vec3 n, vec3 r, in Material mat) {\n    vec3  lv = LIGHT_POS - p;\n    float ld = length(lv);\n          lv = lv / ld;\n    \n    float a = 1. - max((ld*ld)/(LIGHT_RNG*LIGHT_RNG), 0.);\n    a *= calcShadow(p, lv, .05, ld, 20.);\n    \n    float d = max(dot(lv,n),0.) * a;\n    float s = pow(max(dot(lv,r), 0.) * mat.specular.x, mat.specular.y) * a;\n    \n    return (mat.albedo * (LIGHT_AMB + d)) + s;\n}\n\nvoid getMaterial(vec3 p, vec3 n, vec3 r, vec2 t, inout Material mat) {\n    if(t.y == 0.) {        // table exterior\n        mat.albedo     = tex3D(p, n, iChannel1).xyz;\n        mat.specular   = vec2(.9, 1. + 10. * mat.albedo.r);\n        mat.reflective = .5;\n    } else if(t.y == 1.) { // table interior\n        mat.albedo     = texture(iChannel2, p.xz * 2.).y * vec3(.5,1.,.5);\n        mat.specular   = vec2(.65, 4.);\n    } else if(t.y == 2.) { // ground\n    \tmat.albedo     = vec3(.4);\n        mat.specular   = vec2(1., 50.);\n        mat.reflective = 1.;\n    } else if(t.y == 3.) { // balls\n        mat.albedo     = vec3(1.);\n        mat.specular   = vec2(1., 60.);\n        mat.reflective = .8;\n    } else {               // default\n        mat.albedo     = vec3(1., 0., 1.);\n        mat.specular   = vec2(0., 0.);\n        mat.reflective = 0.;\n    }\n}\n\nvec3 pixel(vec3 ro, vec3 rd) {\n    vec2 t = raymarch(ro, rd);\n    vec3 c = vec3(.4 * LIGHT_AMB);\n    if(t.y > -1.) {\n        vec3 p = ro + rd * t.x;\n        vec3 n = calcNormal(p, t.x);\n        vec3 r = normalize(reflect(rd, n));\n        \n        Material mat;        \n        getMaterial(p, n, r, t, mat);\n        \n        vec3 shaded = calcLighting(p, n, r, mat);\n        if(mat.reflective > 0.) { // calculate reflections\n            float rf = mat.reflective;\n            vec3 rro = p + r * .02;\n            vec2 rrt = raymarch(rro, r);\n            vec3 col = c;\n            if(rrt.y > -1.) {\n                vec3 rp = rro + r * rrt.x;\n                vec3 rn = calcNormal(rp, rrt.x);\n                vec3 rr = normalize(reflect(r, rn));\n                getMaterial(rp, rn, rr, rrt, mat);\n                col = calcLighting(rp, rn, rr, mat);\n            }\n            float fres = 1. - min(max(pow(-dot(rd,n),1.5),0.),1.);\n            c = mix(shaded, col, fres * rf);\n        } else {\n        \tc = shaded;   \n        }\n    }\n    return c;\n}\n\nvec2 rot2D(vec2 p, float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c,s,-s,c) * p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    vec3 ro = vec3(0., 0., 0.);   // eye position\n    vec3 rd = vec3(uv, 1.);       // eye direction\n    vec3 fp = vec3(0., .9, 0.);   // focal point\n    \n    // calc camera position\n    vec4 camera = loadValue(CAMERA_TRANSFORM);\n    float theta = camera.x + (3.14159 * .5);\n    float sinT  = sin(theta);\n    float cosT  = cos(theta);\n    ro          = vec3(sinT, 0., cosT) * camera.z + vec3(0.,camera.y,0.);\n    \n    vec3 f  = normalize(fp - ro);\n    vec3 u  = normalize(cross(f, vec3(0., 1., 0.)));\n    vec3 v  = normalize(cross(u, f));\n    rd      = normalize(mat3(-u,v,f) * rd);\n    \n    // load ball positions\n    for(int i = 0; i < NUM_BALLS; i++) {\n        ballPos[i] = loadValue(ivec2(i,1)).xy;\n    }\n    \n    // vr debug\n    //ro = vec3(3.5,3.5,0.);\n    //rd = vec3(uv,1.);\n    //rd.xz = rot2D(rd.xz, 1.57);\n    //\n    //rd.xy = rot2D(rd.xy, .7);\n    \n    _ro = ro;\n    isVR = false;\n    \n    fragColor.xyz = pixel(ro, normalize(rd));\n    fragColor.w   = 1.;\n}\n\nvoid mainVR(out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd) {\n    // load ball positions\n    for(int i = 0; i < NUM_BALLS; i++) {\n        ballPos[i] = loadValue(ivec2(i,1)).xy;\n    }\n    \n    // offset position\n    ro += vec3(3.5,3.5,0.);\n    rd.xz = rot2D(rd.xz, 1.57);\n    \n    _ro = ro;\n    isVR = true;\n    \n    // get pixel colour\n    fragColor.xyz = pixel(ro, normalize(rd));\n    fragColor.w   = 1.;\n}\n\n// Source: https://www.shadertoy.com/view/MddGzf\nvec4 loadValue( in ivec2 re )\n{\n    return texelFetch( iChannel0, re, 0 );\n}\n// ---------------------------------------------",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define NUM_BALLS 15\n\n// Buffer data\nconst ivec2 CAMERA_TRANSFORM = ivec2(0,0);\nconst ivec2 CURRENT_STATE    = ivec2(1,0);\n\nfloat hash( vec2 p ) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\n// Source: https://www.shadertoy.com/view/MddGzf\nvec4 loadValue( in ivec2 re )\n{\n    return texelFetch( iChannel0, re, 0 );\n}\nvoid storeValue( in ivec2 re, in vec4 va, inout vec4 fragColor, in ivec2 p )\n{\n    fragColor = (p==re) ? va : fragColor;\n}\nvoid storeValue( in ivec4 re, in vec4 va, inout vec4 fragColor, in ivec2 p )\n{\n    fragColor = ( p.x>=re.x && p.y>=re.y && p.x<=re.z && p.y<=re.w ) ? va : fragColor;\n}\n// ---------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.);\n    if(fragCoord.x > 20.5 || fragCoord.y > 20.) {\n        discard;\n    }\n    ivec2 ipix = ivec2(fragCoord - .5);\n    \n    // state management\n    float state = 0.;\n    if(iFrame < 3) {\n        state == 0.;\n    }\n    \n    // camera transform\n    vec4 camera = loadValue(CAMERA_TRANSFORM);\n    if(state == 0.) {\n    \tcamera.x = 6.28318 * iTime / 8.;\n        camera.y = 4. + 2.5 * sin(iTime / 8.);\n        camera.z = 5.;\n    } else {\n        float target = 3.14159 * step(5., mod(iTime, 10.));\n        camera.x = mix(camera.x, target, iTimeDelta * 3.);\n    }\n    storeValue(CAMERA_TRANSFORM, camera, fragColor, ipix);\n    \n    // balls\n    for(int i = 0; i < NUM_BALLS; i++) {\n        ivec2 addr = ivec2(i, 1);\n        vec4 state = loadValue(addr);\n        if(iFrame < 2) {\n            float x = hash(vec2(iDate.w, float(i))) * 3.;\n            float z = hash(vec2(iDate.w, float(i))) * 3.;\n            state = vec4(x, z, 0., 0.);\n        }\n        if(iMouse.z > 0.) {\n            state.z += hash(vec2(iDate.w, iMouse.x)) * 10.;\n            state.w -= hash(vec2(iDate.w, iMouse.y)) * 10.;\n        }\n        state.xy += state.zw * iTimeDelta * .5;\n        if(state.x < -1.8) {\n            state.zw = reflect(state.zw, vec2(1.,0.));\n        }\n        if(state.x > 1.8) {\n            state.zw = reflect(state.zw, vec2(-1.,0.));\n        }\n        if(state.y < -2.8) {\n            state.zw = reflect(state.zw, vec2(0.,1.));\n        }\n        if(state.y > 2.8) {\n            state.zw = reflect(state.zw, vec2(0.,-1.));\n        }\n        state.zw  = state.zw * (1. - .9 * iTimeDelta);\n        state.x   = clamp(state.x, -1.8, 1.8);\n        state.y   = clamp(state.y, -2.8, 2.8);\n        storeValue(addr, state, fragColor, ipix);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}