{
    "Shader": {
        "info": {
            "date": "1725282415",
            "description": "a 3x3 kernel is used. \nthe sum of the kernel ends up as the index of the bit in the rule\n2^9 rules, if the result then is 1. a float gets added, else a float gets subtracted \nuse the mouse to draw, hold space while drawing to delete",
            "flags": 48,
            "hasliked": 0,
            "id": "4fjfz3",
            "likes": 7,
            "name": "2d c.a. krnl sum rule idx float",
            "published": 3,
            "tags": [
                "automata"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 92
        },
        "renderpass": [
            {
                "code": "// Fork of \"2d automata krnl sum rule idx\" by jonasfrey. https://shadertoy.com/view/4fjBz3\n// 2024-09-02 12:21:48\n\n// Fork of \"automata preset template\" by jonasfrey. https://shadertoy.com/view/XcjBD1\n// 2024-09-02 11:29:48\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float n_tau = radians(360.);\n    float n_zoom = min(iResolution.x, iResolution.y)/o_scl_min_target;\n    vec2 o_scl = floor(iResolution.xy*n_zoom);\n    vec2 o_trn = floor(fragCoord.xy*n_zoom);\n    float n_scl_min = min(o_scl.x, o_scl.y);\n    vec2 o_trn2 = (o_trn)/o_scl.xy;\n    vec2 o_trn3 = (o_trn-o_scl*.5)/n_scl_min;\n    \n    vec4 o_col = texture(iChannel0, o_trn2);\n    fragColor = vec4(o_col);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "int f_n_digits_before_decpoint(float x) {\n    x = abs(x);               // Make sure the number is positive\n    if (x < 1.0) return 1;    // Handle cases where the number is less than 1\n    return int(floor(log(x) / log(10.0))) + 1;\n}\nfloat f_n_num(\n    vec2 o_trn, \n    float n_num, \n    float n_digits_before_decpoint,\n    float n_digits_after_decpoint\n){\n\n    float n_digits_before_decpoint_max = float(f_n_digits_before_decpoint(n_num));\n\n    float n = 0.;\n    float n_chars = 1.+n_digits_before_decpoint;\n    float n_decpoint = 0.;\n    if(n_digits_after_decpoint > 0.){\n        n_decpoint = 1.;\n        n_chars += + n_decpoint+ n_digits_after_decpoint;\n    }\n    vec2 o_trn_char = fract(o_trn)*vec2(n_chars, 1.);\n    float n_idx_char = floor(o_trn_char).x;\n    float n_idx_digit_before_decpoint = n_digits_before_decpoint-1.-(n_idx_char - 1.);\n    float n_idx_digit_after_decpoint = n_idx_char - 1. -1. - n_digits_before_decpoint+1.;\n    float n_num_abs = abs(n_num);\n    float n_digit_after_decimal = mod(\n        floor(n_num_abs * pow(10., n_idx_digit_after_decpoint))\n        , 10.\n    );\n    float n_digit_before_decimal = mod(\n        floor(floor(n_num_abs) / pow(10., n_idx_digit_before_decpoint))\n        ,10.\n    );\n    \n    vec2 o_trn_texture = vec2(0.);\n    if(n_idx_char == 0.){\n        if(n_num < 0.){\n            o_trn_texture = vec2(13. , 13.); // -\n        }else{\n            o_trn_texture = vec2(11. , 13.); // + \n        }\n    }\n    if(\n        n_idx_digit_before_decpoint >= 0.\n        && n_idx_digit_before_decpoint < n_digits_before_decpoint\n    ){\n        o_trn_texture = vec2(n_digit_before_decimal, 12.); \n        if(n_idx_digit_before_decpoint >= n_digits_before_decpoint_max){\n            o_trn_texture = vec2(0. , 13.);\n        }\n    }\n    if(n_idx_char == (1.+n_digits_before_decpoint+1.)-1.){\n        o_trn_texture = vec2(14., 13.); // . \n    }\n    if(n_idx_char > (1.+n_digits_before_decpoint+1.)-1.){\n        o_trn_texture = vec2(n_digit_after_decimal, 12.); \n    }\n    \n    \n    vec4 o_col_char = texture(iChannel1, (fract(o_trn_char)+o_trn_texture)/vec2(16.,16.));\n\n    n = o_col_char.x;\n    \n    return n;\n            \n}\nfloat f_n_num_auto(\n    vec2 o_trn, \n    float n_num, \n    float n_digits_after_decpoint\n){\n    float n_digits_before_decpoint = float(f_n_digits_before_decpoint(n_num));\n\n    return f_n_num(\n        o_trn, \n        n_num,\n        n_digits_before_decpoint,\n        n_digits_after_decpoint\n    );\n}\n   vec2 hash22(vec2 p)\n    {\n        // Hash without Sine\n        // MIT License...\n        /* Copyright (c)2014 David Hoskins.\n\n        Permission is hereby granted, free of charge, to any person obtaining a copy\n        of this software and associated documentation files (the \"Software\"), to deal\n        in the Software without restriction, including without limitation the rights\n        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n        copies of the Software, and to permit persons to whom the Software is\n        furnished to do so, subject to the following conditions:\n\n        The above copyright notice and this permission notice shall be included in all\n        copies or substantial portions of the Software.\n\n        THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n        SOFTWARE.*/\n\n\n        vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n        p3 += dot(p3, p3.yzx+33.33);\n        return fract((p3.xx+p3.yz)*p3.zy);\n\n    }\n\n    void mainImage( out vec4 fragColor, in vec2 fragCoord )\n    {\n\n        int N_KEY_SPACE = 32;\n        vec4 o_keydown_space = texelFetch( iChannel2, ivec2(N_KEY_SPACE,0), 0);\n\n        float n_sliders = 10.;\n\n\n        vec2 o_pixels_max = iResolution.xy;\n        vec4 o_c_zoom = texelFetch(iChannel0, ivec2(0, 0), 0);\n        if(iFrame == 0){\n            o_c_zoom = vec4(o_pixels_max.xyxy/2.);\n        }\n        float n_tau = radians(360.);\n        float n_min_res = min(iResolution.x, iResolution.y);\n        float naa = 1./n_min_res;\n        float n_zoom = o_c_zoom.x / n_min_res;\n        vec2 o_scl = floor(iResolution.xy*n_zoom);\n        vec2 o_trn1 = fragCoord.xy / iResolution.xy;\n        vec2 o_trn_mou1 = iMouse.xy / iResolution.xy;\n        vec2 o_trn = floor(fragCoord.xy*n_zoom);\n        vec2 o_trn_mou = floor(iMouse.xy*n_zoom);\n        float n_b_mou_down = (sign(iMouse.z)>=0.) ? 1. : 0.;\n        float n_scl_min = min(o_scl.x, o_scl.y);\n        vec2 o_trn2 = (o_trn-o_scl*.5)/n_scl_min;\n        vec2 o_trn_mou2 = (o_trn_mou-o_scl*.5)/n_scl_min;\n        \n        \n        int n_idx_pixels_across_min = 0;\n        int n_idx_modframe = 1;\n        int n_idx_size_krnl1 = 2;\n        int n_idx_rule = 3;\n        int n_idx_floatsmplus = 4;\n        int n_idx_floatsmminus = 5;\n        int n_idx_undf3 = 6;\n        int n_idx_undf4 = 7;\n        int n_idx_undf5 = 8;\n        int n_idx_mouse_last = 100;\n        int n_idx_mouse_down_last = 101;\n        int n_idx_n_b_mou_down_last = 102;\n        \n        int n_idx_undfnd6 = 9;\n        vec4[10/*n_sliders*/] a_o_sliderdef;//vec4(n_min, n_max, n_range, n_init);\n        vec4[10/*n_sliders*/] a_o_sliderdef2;//vec4(\n            //n_b_int,\n            //n_digits_before_decpoint,\n            //n_digits_after_decpoint,\n            //undefined\n        //);\n        vec4[10/*n_sliders*/] a_o_sliderval;//the last stored value \n        a_o_sliderdef[n_idx_pixels_across_min] = vec4(0., 900, 0., 800.);\n        a_o_sliderdef[n_idx_modframe] = vec4(-10., 100., 0., 2.);// target fps 10.\n        a_o_sliderdef[n_idx_size_krnl1] = vec4(3., 50., 0., 16.);\n        a_o_sliderdef[n_idx_rule] = vec4(0., 511., 0., 312.);\n        a_o_sliderdef[n_idx_floatsmplus] = vec4(-1., 1., 0., 0.1);\n        a_o_sliderdef[n_idx_floatsmminus] = vec4(-1., 1., 0., 0.1);\n\n        for(int n_idx = 0; n_idx < a_o_sliderdef.length(); n_idx+=1){\n            //calculate the range\n            a_o_sliderdef[n_idx].z = a_o_sliderdef[n_idx].y - a_o_sliderdef[n_idx].x;\n        }\n        \n        // last color \n        vec4 o_col_last = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n        vec4 o_trn_mou1_last = texelFetch(iChannel0, ivec2(n_idx_mouse_last, 0.), 0);\n        vec4 o_trn_mou1_down_last = texelFetch(iChannel0, ivec2(n_idx_mouse_down_last, 0.), 0);\n        float n_b_mou_down_last = (texelFetch(iChannel0, ivec2(n_idx_n_b_mou_down_last, 0.), 0)).x;\n        vec2 o_trn_mou1_diff = o_trn_mou1_last.xy - o_trn_mou1.xy;\n        vec2 o_trn_mou1_last_diff = o_trn_mou1.xy - o_trn_mou1_down_last.xy;\n        \n        for(int n_idx = 0; n_idx < a_o_sliderval.length(); n_idx+=1){\n            a_o_sliderval[n_idx] = texelFetch(iChannel0, ivec2(n_idx, 0), 0);\n        }\n        \n        if(iFrame == 0){\n            //init values\n            vec2 otmp = floor(fragCoord.xy);\n            vec2 o_rnd = hash22(o_trn);\n            vec4 otmp2 = vec4(o_rnd.xxxx);\n            if(otmp.x < n_sliders){\n                otmp2 = vec4(a_o_sliderdef[int(otmp.x)].w);\n            }\n\n            fragColor = otmp2;\n            return;\n        }\n        \n        // first row reserved for storing information other than graphic\n        float n_width_sliders = 1./5.;\n        vec2 o_trn_slider = o_trn1*vec2(1./n_width_sliders, n_sliders);\n        vec2 o_trn_slider_mou = o_trn_mou1*vec2(1./n_width_sliders, n_sliders);\n        vec2 o_trn_slider_mou_down_last = o_trn_mou1_down_last.xy*vec2(1./n_width_sliders, n_sliders);\n        float n_idx_slider = floor(o_trn_slider.y);\n        float n_idx_slider_mou = floor(o_trn_slider_mou.y);\n        vec4 o_sliderdef_mou = a_o_sliderdef[int(n_idx_slider_mou)];\n        vec4 o_sliderdef = a_o_sliderdef[int(n_idx_slider)];\n        vec4 o_sliderval = a_o_sliderval[int(n_idx_slider)];\n        float n_integer_number = float(o_sliderdef.z > 2.);\n\n        if(fragCoord.y < 1.){\n\n            o_sliderdef = a_o_sliderdef[int(fragCoord.x)];\n            o_sliderval = a_o_sliderval[int(fragCoord.x)];\n            n_integer_number = float(o_sliderdef.z > 2.);\n            \n            if(int(fragCoord.x) == n_idx_mouse_last){\n                fragColor = o_trn_mou1.xyxy;\n                return;\n            }\n            if(int(fragCoord.x) == n_idx_n_b_mou_down_last){\n                fragColor = vec4(n_b_mou_down);\n                return;\n            }\n            if(n_b_mou_down == 1.){\n\n                if(n_b_mou_down_last == 0.){\n                    if(int(fragCoord.x) == n_idx_mouse_down_last){\n\n                        fragColor = o_trn_mou1.xyxy;\n                        return;\n                    }\n                }\n\n\n                if(\n                    o_trn_mou1.x >= (1.-n_width_sliders) \n                    && \n                    floor(fragCoord.x) == n_idx_slider_mou\n                ){\n                    \n                    vec4 o = \n                        fract(o_trn_slider_mou_down_last.xyxy)\n                        * o_sliderdef.z + o_sliderdef.x\n                        + o_trn_mou1_last_diff.x\n                    ;\n                    o = clamp(o, o_sliderdef.x, .9999999);\n                    //o = vec4(o_col_last.x + o_trn_mou1_delta.x*0.1);\n                    if(n_integer_number == 1.){\n                        o = floor(\n                            o_sliderdef_mou.x + \n                            fract(o_trn_slider_mou.xyxy)*o_sliderdef_mou.z\n                        );\n                    }\n                    fragColor = o;\n\n                    return;\n                }\n            }\n\n            fragColor = o_col_last;\n            return;\n        }\n        \n        if(o_trn1.x >= (1.-n_width_sliders)){\n            float n_nor = (o_sliderval.x-o_sliderdef.x)/o_sliderdef.z;\n            if(n_integer_number == 1.){\n                n_nor = floor(o_sliderval.x-o_sliderdef.x)/o_sliderdef.z;\n            }\n            float n = fract(o_trn_slider.x)-n_nor;\n\n            n = abs(n);\n            \n            n = smoothstep(0.,naa*4. , n);\n            //n = pow(n, 1./3.);\n            vec2 otmp = fract(o_trn_slider);\n            float n_border = min(otmp.y, 1.-otmp.y);\n            n_border = min(n_border, min(otmp.x, 1.-otmp.x));\n            n *= pow(n_border-.03,  1./12.);\n            \n       \n            n *= pow(length(abs(fract(o_trn_slider.y)-.66)), 1./10.);\n           \n            float n_digit = f_n_num(\n                fract(o_trn_slider),\n                o_sliderval.x, \n                (n_integer_number == 1. ) ? 4. : 1., \n                (n_integer_number == 1. ) ? 0. : 5.\n            );\n            n*= (1.-n_digit);\n            fragColor = vec4(n);\n            return;\n        }\n\n\n        \n        if(mod(float(iFrame), floor(a_o_sliderval[n_idx_modframe].x)) != 0.){\n            fragColor = o_col_last;\n            return;\n        }\n        \n\n        vec2 o_scl_krnl1 = vec2(a_o_sliderval[n_idx_size_krnl1].x);\n        vec2 o_scl_krnl1_half = floor(o_scl_krnl1)/2.;\n        \n\n\n        \n        float n_sum_krnl1 = 0.;\n        float n_count_krnl1 = 0.;\n        for(float n_x = -o_scl_krnl1_half.x; n_x <= o_scl_krnl1_half.x; n_x+=1.){\n            for(float n_y = -o_scl_krnl1_half.x; n_y <= o_scl_krnl1_half.x; n_y+=1.){\n                n_count_krnl1+=1.;\n\n                vec4 o_c = texelFetch(\n                    iChannel0,\n                    ivec2((o_trn.xy+vec2(n_x, n_y))/n_zoom),\n                    0\n                );\n                n_sum_krnl1 += o_c.x;\n            }\n        }\n        float n_sum_nor_krnl1 = n_sum_krnl1/n_count_krnl1;\n\n        int n_rule = int(a_o_sliderval[n_idx_rule].x);\n        int n_idx_bit = int(n_sum_nor_krnl1*9.);\n        float n = float((n_rule >> n_idx_bit) & 1);\n        if(n == 1.){\n            n = o_col_last.x += a_o_sliderval[n_idx_floatsmplus].x;\n        }else{\n            n = o_col_last.x -= a_o_sliderval[n_idx_floatsmminus].x;\n        }\n        if(n_b_mou_down == 1.){\n            float n2 = length(o_trn2-o_trn_mou2);\n            float nd = smoothstep(0.2, 0.1, n2);\n\n            if(o_keydown_space.x == 1.){\n                n *= smoothstep(0.2-.001, 0.2, n2);;\n            }else{\n                n += nd*hash22(o_trn).x;\n            \n            }\n            //n = hash22(o_trn).x;\n        }\n        n = clamp(n, 0., 1.);\n        fragColor = vec4(n);\n    }",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// the target resolution pixels (the smaller axis, on desktop y-axis)\nfloat o_scl_min_target = 50.;\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}