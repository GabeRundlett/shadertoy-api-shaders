{
    "Shader": {
        "info": {
            "date": "1456481875",
            "description": "Subluminic 4",
            "flags": 0,
            "hasliked": 0,
            "id": "XsV3DK",
            "likes": 8,
            "name": "Subluminic 4",
            "published": 3,
            "tags": [
                "voronesque",
                "subluminic"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 705
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\n// by shane\nfloat Voronesque( in vec3 p )\n{\n    vec3 i  = floor(p + dot(p, vec3(0.333333)) );  p -= i - dot(i, vec3(0.166666)) ;\n    vec3 i1 = step(0., p-p.yzx), i2 = max(i1, 1.0-i1.zxy); i1 = min(i1, 1.0-i1.zxy);    \n    vec3 p1 = p - i1 + 0.166666, p2 = p - i2 + 0.333333, p3 = p - 0.5;\n    vec3 rnd = vec3(7, 157, 113); \n    vec4 v = max(0.5 - vec4(dot(p, p), dot(p1, p1), dot(p2, p2), dot(p3, p3)), 0.);\n    vec4 d = vec4( dot(i, rnd), dot(i + i1, rnd), dot(i + i2, rnd), dot(i + 1., rnd) ); \n    d = fract(sin(d)*262144.)*v*2.; \n    v.x = max(d.x, d.y), v.y = max(d.z, d.w); \n    return max(v.x, v.y);\n}\n\nvec2 path(vec3 p)\n{\n\tp.x = sin(p.z*0.1)*20.;\n\tp.y = cos(p.z*0.05)*20.;\n\treturn p.xy;\n}\n\nfloat df(vec3 p)\n{\n\tp.xy += path(p);\n\tp *= Voronesque(p/2.);//p *= Voronesque(p.zzz/2.);\n\treturn 2. - length(p.xy);\n}\n\nvec3 march(vec3 f, vec3 ro, vec3 rd, float st)\n{\n\tvec3 s = vec3(1), h = vec3(0.055,0.028,0.022), w = vec3(0);\n\tfloat d=1.,dl=0., td=0.;\n\tvec3 p = ro;\n\tfor(float i=0.;i<60.;i++)\n\t{      \n\t\tif(s.x<0.0025*d||d>30.||td>.95) break;\n        s = df(p) * .1 * i/vec3(6.42,16,12.96);\n\t\tw = (1.-td) * (h-s) * i/vec3(74.42,50.22,31.32) * step(s,h);\n\t\tf += w;\n\t\ttd += w.x + .01;\n\t\tdl += 1. - exp(-0.0042 * log(d));;\t\n\t\ts = max(s, st);\n\t\td +=s.x; \n\t\tp =  ro+rd*d;\t\n   \t}\n\tdl += 0.4;\n\tf /= dl/1.1264;\n\t\n\tfloat stars = pow(fract( cos(rd.y * 8. + rd.x *800.) * 5000.), 50.);\n\tf.rgb = mix( f.rgb, vec3(stars), 1. - exp( -0.004*d*d) );\n\treturn f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    \n\tvec2 si = iResolution.xy;\n\tvec2 uv = (fragCoord*2.-si.xy) / min(si.x, si.y);\n\n\tfloat t = iTime * 12.;\n\tvec3 ro = vec3(0,-.5,t);\n\tro.xy -= path(ro);\n\t\n\tvec3 co = ro + vec3(0,0,1);\n\tvec3 cu = vec3(0,1,0);\n\t\n\tfloat fov = 5.;\n\tvec3 z = normalize(co - ro);\n\tvec3 x = normalize(cross(cu, z));\n\tvec3 y = normalize(cross(z, x));\n\tvec3 rd = normalize(z + fov * uv.x * x + fov * uv.y * y);\n\n\tfragColor.rgb = march(fragColor.rgb, ro, rd, 0.135);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}