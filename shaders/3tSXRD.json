{
    "Shader": {
        "info": {
            "date": "1565159367",
            "description": "Watch stars fall from the sky on your evening walk. Remember how small they are.",
            "flags": 64,
            "hasliked": 0,
            "id": "3tSXRD",
            "likes": 23,
            "name": "Walking Among Fallen Stars",
            "published": 3,
            "tags": [
                "stars",
                "scene",
                "calm",
                "walk",
                "monochromatic"
            ],
            "usePreview": 0,
            "username": "mathmasterzach",
            "viewed": 734
        },
        "renderpass": [
            {
                "code": "//A shader in two colors, black and white\n//A relaxing walk at night\n\n//comment this out to remove the head bobbing\n#define HEAD_BOB\n\nconst float SPEED=10.;\n\n//Hashes from David Hoskins at https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p){\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nfloat hash12(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 hash21(float p){\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n\nfloat pointPointDist(vec3 p, vec3 q){\n\treturn length(p-q);\n}\nfloat pointRayDist(vec3 o, vec3 r, vec3 p){\n    vec3 a=o-p;\n    if(dot(r,-a)<0.){return -1.;}\n\treturn sqrt(dot(a,a)-dot(-a,r)*dot(-a,r));\n}\nfloat spherePointDistOnLine(vec3 o, vec3 r, vec3 s) {\n \tvec3  a = o - s.xyz;\n    float b = dot(a,r);\n    float c = dot(a,a)-1.;\n    float t = b*b - c;\n    if( t > 0.0) \n        t = -b - sqrt(t);\n    return t;\n}\nfloat sphereTime(float id){\n    return 40.*hash11(id)+10.+SPEED*iTime-id;\n}\n\nfloat sphereVertical(float id){\n    float st=sphereTime(id)/(.5*SPEED);\n    if(st<.5){return 2e20;}\n    float t =fract(st);float b=floor(st);\n    float ht=max(0.,((100./(10.*b+1.))-2.))*(.5+hash11(id+.1));\n\treturn max(-ht*(t-.5)*(t-.5)+.25*ht,0.);\n}\n\nfloat ripples(float id,float d){\n    float st=sphereTime(id)/(.5*SPEED);\n    float t =fract(st);float b=floor(st);\n    if(t>.5){return 0.;}\n    float ht=max(0.,((100./(10.*b+1.))-2.))*(.5+hash11(id+.1));\n    float dt=-ht*t+ht/2.;\n   \treturn step(.1,dt*2.*(-abs(abs(abs(4.*(d-(2.*t+1.))-2.5)-1.)-1.)+.5)/(4.*(d-(2.*t+1.))+1.));\n}\n\nvec3 spherePosition(float id){\n    vec2 tg=hash21(id)*vec2(70.,.5);\n\treturn vec3(tg.x-35.,sphereVertical(id),tg.y+id);\n}\n\nfloat trace(vec3 o,vec3 r,vec2 sky){\n    float sh=floor(o.z);\n    float fDist=-o.y/r.y;\n    vec3 gP=fDist*r+o;\n    bool hit=false;\n    float minHitDist=2e20;\n    float minGroundDist=2e20;\n    float minGroundID=-1.;\n    float minGroundDist1=2e20;\n    float minGroundID1=-1.;\n    float minGroundDist2=2e20;\n    float minGroundID2=-1.;\n    for(float i=0.;i<50.;i++){\n        vec3 sP=spherePosition(i+sh);\n        float hitD=spherePointDistOnLine(o,r,sP);\n        if(hitD>0.&&hitD<minHitDist){\n            hit=true;\n        \tminHitDist=hitD;\n        }\n        float d=pointPointDist(gP,sP);\n        float st=(sphereTime(i+sh)/(.5*SPEED));\n        if(st>.5&&st<7.5){\n            if(d<minGroundDist){\n                minGroundDist2=minGroundDist1;\n                minGroundID2=minGroundID1;\n                minGroundDist1=minGroundDist;\n                minGroundID1=minGroundID;\n                minGroundDist=d;\n                minGroundID=i+sh;\n            }else if(d<minGroundDist1){\n            \tminGroundDist2=minGroundDist1;\n                minGroundID2=minGroundID1;\n                minGroundDist1=d;\n                minGroundID1=i+sh;\n            }else if(d<minGroundDist2){\n            \tminGroundDist2=d;\n                minGroundID2=i+sh;\n            }\n        }\n    }\n    if(minHitDist>fDist&&r.y<0.){\n        return ripples(minGroundID ,length(spherePosition(minGroundID )-gP))\n              +ripples(minGroundID1,length(spherePosition(minGroundID1)-gP))\n              +ripples(minGroundID2,length(spherePosition(minGroundID2)-gP));\n    }else if(hit){\n\t\treturn 1.;\n    }else if(r.y>0.&&hash12(sky.xy-vec2(0.,iFrame))>.98){\n    \treturn 1.;\n    }else{\n    \treturn 0.;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv=(2.*fragCoord-iResolution.xy)/iResolution.y;\n    #ifdef HEAD_BOB\n    \tvec3 o = vec3(.2*cos(5.*iTime),2.+.3*abs(sin(5.*iTime)),SPEED*iTime-4.);\n    #else\n    \tvec3 o = vec3(0.,2.,SPEED*iTime-4.);\n    #endif\n    vec3 r = normalize(vec3(uv,1.));\n    fragColor=vec4(trace(o,r,fragCoord));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 19248,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/fm-attack/images-of-you"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}