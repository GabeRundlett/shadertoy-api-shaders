{
    "Shader": {
        "info": {
            "date": "1716071460",
            "description": "A perlin sin sphere inspired on https://x.com/andrewray/status/1791630436789355001",
            "flags": 0,
            "hasliked": 0,
            "id": "M333RH",
            "likes": 28,
            "name": "Perlin sin sphere",
            "published": 3,
            "tags": [
                "perlin"
            ],
            "usePreview": 0,
            "username": "PauloFalcao",
            "viewed": 327
        },
        "renderpass": [
            {
                "code": "// Perlin sin sphere\n// By Paulo Falcao\n//\n// Inspired on https://x.com/andrewray/status/1791630436789355001\n// \n// Made in Material Maker ( https://www.materialmaker.org/material?id=987 )\n//\n// Generated shader revised for shadertoy\n//\n\nvec3 rand33(vec3 p) {\n\tp = vec3(dot(p, vec3(127.1, 311.7, 74.7)), dot(p, vec3(269.5, 183.3, 246.1)), dot(p, vec3(113.5, 271.9, 124.6)));\n\treturn -1. + 2. * fract(sin(p) * 43758.545);\n}\n\nfloat tex3d_fbm_perlin_nowrap(vec3 coord, vec3 size) {\n\tvec3 t,\n\t     o = floor(coord) + size,\n\t     f = fract(coord),\n\t     v000 = normalize(rand33(o) - vec3(.5)),\n\t     v001 = normalize(rand33(o + vec3(0, 0, 1)) - vec3(.5)),\n\t     v010 = normalize(rand33(o + vec3(0, 1, 0)) - vec3(.5)),\n\t     v011 = normalize(rand33(o + vec3(0, 1, 1)) - vec3(.5)),\n\t     v100 = normalize(rand33(o + vec3(1, 0, 0)) - vec3(.5)),\n\t     v101 = normalize(rand33(o + vec3(1, 0, 1)) - vec3(.5)),\n\t     v110 = normalize(rand33(o + vec3(1, 1, 0)) - vec3(.5)),\n\t     v111 = normalize(rand33(o + vec3(1)) - vec3(.5));\n\tfloat p000 = dot(v000, f),\n\t      p001 = dot(v001, f - vec3(0, 0, 1)),\n\t      p010 = dot(v010, f - vec3(0, 1, 0)),\n\t      p011 = dot(v011, f - vec3(0, 1, 1)),\n\t      p100 = dot(v100, f - vec3(1, 0, 0)),\n\t      p101 = dot(v101, f - vec3(1, 0, 1)),\n\t      p110 = dot(v110, f - vec3(1, 1, 0)),\n\t      p111 = dot(v111, f - vec3(1));\n\tt = f * f * f * (f * (f * 6. - 15.) + 10.);\n\treturn .5 + mix(mix(mix(p000, p100, t.x), mix(p010, p110, t.x), t.y), mix(mix(p001, p101, t.x), mix(p011, p111, t.x), t.y), t.z);\n}\n\nfloat fbm3d_perlin_nowrap(vec3 coord) {\n\tvec3 size = vec3(.5);\n\tfloat normalize_factor = 0.,\n\t      value = 0.,\n\t      scale = 1.;\n\tfor (int i = 0; i < 1; i++) {\n\t\tvalue += tex3d_fbm_perlin_nowrap(coord * size, size) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.;\n\t\tscale *= 1.2;\n\t}\n\n\treturn value / normalize_factor;\n}\n\nvec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tfloat c = cos(a.x),\n\t      s = sin(a.x);\n\tvec3 rv;\n\trv.x = p.x;\n\trv.y = p.y * c + p.z * s;\n\trv.z = -p.y * s + p.z * c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x * c + rv.z * s;\n\tp.y = rv.y;\n\tp.z = -rv.x * s + rv.z * c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x * c + p.y * s;\n\trv.y = -p.x * s + p.y * c;\n\trv.z = p.z;\n\treturn rv;\n}\n\nvec2 Simple360HDR_equirectangularMap(vec3 dir) { return vec2(atan(dir.y, dir.x), acos(dir.z)) / vec2(6.28319, 3.1415926); }\n\nfloat Simple360HDR_hash12(vec2 p) {\n\tvec3 p3 = fract(p.xyx * .1031);\n\tp3 += dot(p3, p3.yzx + 33.33);\n\treturn fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v) {\n\tvec2 v1 = floor(v),\n\t     v2 = smoothstep(0., 1., fract(v));\n\treturn mix(mix(Simple360HDR_hash12(v1), Simple360HDR_hash12(v1 + vec2(0, 1)), v2.y), mix(Simple360HDR_hash12(v1 + vec2(1, 0)), Simple360HDR_hash12(v1 + vec2(1)), v2.y), v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p) {\n    return Simple360HDR_noise(p) * .5 + Simple360HDR_noise(p * 2. + 13.) * .25 + Simple360HDR_noise(p * 4. + 23.) * .15 + Simple360HDR_noise(p * 8. + 33.) * .1 + Simple360HDR_noise(p * 16. + 43.) * .05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p) {\n\tvec3 v = (Simple360HDR_noiseOct(p.xz * .1) - .5) * vec3(1);\n\tfloat d = length(p);\n\treturn mix(vec3(.15, .3, .6) + v, vec3(.2, .5, 1) + v * 12. / max(d, 20.), clamp(d * .1, 0., 1.));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p) {\n    return (Simple360HDR_noiseOct(p.xz * .1) * .5 + .25) * vec3(.7, .5, .4);\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd) {\n\tvec3 p, c;\n\tif (rd.y > 0.) {\n\t\tp = rd * 5. / rd.y;\n\t\tc = Simple360HDR_skyColor(p);\n\t}\n\telse {\n\t\tp = rd * -10. / rd.y;\n\t\tc = mix(Simple360HDR_floorColor(p), vec3(.5, .7, 1), clamp(1. - sqrt(-rd.y) * 3., 0., 1.));\n\t}\n\n\tfloat ds = clamp(dot(vec3(-.57735, .57735, -.57735), rd), 0., 1.);\n\tvec3 sunc = (ds > .9997 ? vec3(2) : vec3(0)) + pow(ds, 512.) * 4. + pow(ds, 128.) * vec3(.5) + pow(ds, 4.) * vec3(.5);\n\tif (rd.y > 0.) c += vec3(.3) * pow(1. - abs(rd.y), 3.) * .7;\n\treturn c + sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p) {\n\tvec2 thetaphi = (p * 2. - vec2(1)) * vec2(3.1415926, 1.5708);\n\treturn Simple360HDR_renderHDR360(vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x)));\n}\n\nfloat o7714_input_sdf(vec3 p) { return length(p) - 1.6; }\n\nvec3 o7714_input_tex3d(vec4 p) { return sin(vec3(fbm3d_perlin_nowrap(p.xyz)) * 68.442 - iTime * 5.) * .868; }\n\nvec3 normal_o7714(vec3 p) {\n\treturn normalize(p);\n}\n\nvec4 distortHeighByNormal_o7714(vec3 uv) {\n\tfloat d = o7714_input_sdf(uv);\n\tif (d <= .081) {\n\t\tvec3 n = normal_o7714(uv),\n\t\t     s = o7714_input_tex3d(vec4(uv - d * n, 0));\n\t\treturn vec4(s, o7714_input_sdf(uv - n * s * .071));\n\t}\n\n\treturn vec4(vec3(0), d);\n}\n\nvec3 o7710_input_BaseColor_tex3d(vec4 p) {\n\tvec4 o7714_0_d = distortHeighByNormal_o7714((p).xyz);\n\to7714_0_d.w /= 1.98882;\n\treturn vec3(o7714_0_d.xyz * .882 + vec3(.636));\n}\n\nfloat o7710_input_sdf3d(vec3 p) {\n\tvec4 o7714_0_d = distortHeighByNormal_o7714((p).xyz);\n\to7714_0_d.w /= 1.98882;\n\treturn o7714_0_d.w;\n}\n\nvec4 PBRObjectMaker_o7710(vec4 uv) {\n\tuv.xyz = MFSDF_Obj_Maker_rotate3d(uv.xyz, vec3(iTime * 9., iTime * 5., iTime * 7.) * .01745329) ;\n\tfloat sdf = o7710_input_sdf3d(uv.xyz) ;\n\tif (uv.w > .5) return vec4(vec3(1) * clamp(o7710_input_BaseColor_tex3d(vec4(uv.xyz, 1)), vec3(0), vec3(1)), sdf);\n\telse return vec4(vec3(0), sdf);\n}\n\nvec4 o7702_input_mfsdf(vec4 p) { return PBRObjectMaker_o7710(p); }\n\nvec3 o7702_input_hdri(vec2 uv) { return Simple360HDR_make360hdri(vec2((uv).x, -(uv).y + 1.)); }\n\nvec3 normal_o7702(vec3 p) {\n\tconst vec3 e = vec3(.001, -.001, 0);\n\tfloat v1 = o7702_input_mfsdf(vec4(p + e.xyy, 0)).w,\n\t      v2 = o7702_input_mfsdf(vec4(p + e.yyx, 0)).w,\n\t      v3 = o7702_input_mfsdf(vec4(p + e.yxy, 0)).w,\n\t      v4 = o7702_input_mfsdf(vec4(p + e.xxx, 0)).w;\n\treturn normalize(vec3(v4 + v1 - v3 - v2, v3 + v4 - v1 - v2, v2 + v4 - v3 - v1));\n}\n\nvoid march_o7702(inout float d, inout vec3 p, float dS, vec3 ro, vec3 rd) {\n\tfor (int i = 0; i < 500; i++) {\n\t\tp = ro + rd * d;\n\t\tdS = o7702_input_mfsdf(vec4(p, 0)).w;\n\t\td += dS;\n\t\tif (d > 50. || abs(dS) < 1e-4) break;\n\t}\n}\n\n\nvec3 raymarch_o7702(vec2 uv) {\n\tfloat objMetallic,\n\t      d = 0.,\n\t      dS = 0.;\n\tuv -= .5;\n\tvec3 objColor,\n\t     color = vec3(0),\n\t     cam = vec3(sin(iTime * .2) * 5., sin(iTime * .13) + 2., 5),\n\t     ray = normalize(vec3(0) - cam),\n\t     cX = normalize(cross(vec3(0, 1, 0), ray)),\n\t     rd = normalize(ray * 1.5 + cX * uv.x + normalize(cross(cX, ray)) * uv.y),\n\t     ro = cam,\n\t     p = vec3(0);\n\tmarch_o7702(d, p, dS, ro, rd);\n\tobjColor = o7702_input_mfsdf(vec4(p, 1)).xyz;\n\tobjMetallic = 0.9;\n\tif (d < 50.) {\n\t\tvec3 ref, objColorRef,\n\t\t     n = normal_o7702(p);\n\t\tref = normalize(reflect(rd, -n));\n\t\tobjColorRef = o7702_input_hdri(Simple360HDR_equirectangularMap(ref.xzy)).xyz;\n\t\tcolor = mix(color, objColorRef,mix(vec3(1), objColor, objMetallic));\n\t}\n\telse color = o7702_input_hdri(Simple360HDR_equirectangularMap(rd.xzy)).xyz;\n\n\treturn pow(color, vec3(.71429));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n\tfloat minSize = min(iResolution.x, iResolution.y);\n\tfragColor = vec4(raymarch_o7702(vec2(0, 1) + vec2(1, -1) * (fragCoord - .5 * (iResolution.xy - vec2(minSize))) / minSize), 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}