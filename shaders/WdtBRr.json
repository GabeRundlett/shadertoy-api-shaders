{
    "Shader": {
        "info": {
            "date": "1604227518",
            "description": "Sphere material transmittance = 2 peaks of different values, which are thus extinguished differently with depth. \nWeights are accounted for approximating larger lobes. ( cf lines #92,93 ).\n\n[url]https://en.wikipedia.org/wiki/Dichromatism[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "WdtBRr",
            "likes": 3,
            "name": "spectral color shift with depth",
            "published": 3,
            "tags": [
                "wavelength",
                "cie",
                "xyzcolorspace",
                "metamerism",
                "dichromatism"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 452
        },
        "renderpass": [
            {
                "code": "// perceived colors: from https://www.shadertoy.com/view/llKSDz\n//                   based on h3r2tic's https://www.shadertoy.com/view/4dVSDy\n\n// Spectrum to xyz approx function from Sloan\n// Inputs:  Wavelength in nanometers\n\n#define G(t)                         exp(-.5* (t)*(t) ) \n#define bislope( wave, w, l, r )  ( wave - w ) * ( wave < w ? l : r )\n\nfloat xFit_1931( float wave )\n{\n    return    .362*G( bislope( wave,442.0, .0624 , .0374 ) ) \n           + 1.056*G( bislope( wave,599.8, .0264 , .0323 ) )\n           -  .065*G( bislope( wave,501.1, .0490 , .0382 ) );\n}\nfloat yFit_1931( float wave )\n{\n    return    .821*G( bislope( wave,568.8, .0213 , .0247 ) ) \n            + .286*G( bislope( wave,530.9, .0613 , .0322 ) );\n}\nfloat zFit_1931( float wave )\n{\n    return   1.217*G( bislope( wave,437.,  .0845 , .0278 ) ) \n            + .681*G( bislope( wave,459.,  .0385 , .0725 ) );\n}\n\n#define xyzFit_1931(w) vec3( xFit_1931(w), yFit_1931(w), zFit_1931(w) ) \n    \nvec3 xyzToRgb(vec3 XYZ)\n{\n\treturn XYZ * mat3( 3.240479, -1.537150, -0.498535,\n\t                  -0.969256 , 1.875991,  0.041556,\n\t                   0.055648, -0.204043,  1.057311 );\n}\n\n#define SPECTRUM_START 360\n#define SPECTRUM_BIN   43\n#define SPECTRUM_STEP  10\n\nfloat cross2(vec2 a, vec2 b) { return a.x*b.y - a.y*b.x; } \n\n// Returns 1 if the lines intersect, otherwise 0. In addition, if the lines \n// intersect the intersection point may be stored in the floats i_x and i_y.\n\nvec2 intersectSegment(vec2 p0, vec2 p1, vec2 p2, vec2 p3)\n{\n    vec2 s1 = p1-p0, s2 = p3-p2;\n\n    float d = cross2(s1,s2),\n          s = cross2(s1, p0-p2) / d,\n          t = cross2(s2, p0-p2) / d;\n\n    return s >= 0. && s <= 1. && t >= 0. && t <= 1.\n         ? p0 + t*s1    // Collision detected\n         : p0;\n}\n\nvec3 constrainXYZToSRGBGamut(vec3 col)\n{\n    vec2 xy = col.xy / (col.x + col.y + col.z);\n    \n    vec2 red   = vec2(0.64,   0.33  ),\n         green = vec2(0.3,    0.6   ),\n         blue  = vec2(0.15,   0.06  ),\n         white = vec2(0.3127, 0.3290);\n    \n    const float desaturationAmount = 0.1;\n    xy = mix(xy, white, desaturationAmount);\n    \n    xy = intersectSegment(xy, white, red,   green);\n    xy = intersectSegment(xy, white, green, blue );\n    xy = intersectSegment(xy, white, blue,  red  );\n    \n    return col.y * vec3( xy, 1. - xy.x - xy.y ) / xy.y;\n}\n\n#define spectral2rgb(l)  .35* xyzToRgb( constrainXYZToSRGBGamut( xyzFit_1931( l ) ) )\n\n\nvoid mainImage( out vec4 O,  vec2 u ) // =================================================\n{\n   vec2 R = iResolution.xy,\n        U = ( 2.*u - R ) / R.y;\n    O-=O;\n    float r = length(U), z;\n\n    if (false)                                             // test: perceived range of colors\n        O.rgb = spectral2rgb( 400. + 350.*u.x/R.x );       // wavelength in nm\n    else \n        if ( r < 1. )  {                                   // render transparent dichromatic sphere\n        z = 6.*sqrt(1.-r*r);\n        O.rgb =   4.* pow(.58,z) * spectral2rgb( 550. )    // wavelength in nm\n                + 1.* pow(1. ,z) * spectral2rgb( 650. );\n    }\n    \n    if (U.y < 0. ) {                                       // bottom: show chrominance\n        O -= min(O.r, min(O.g,O.b));\n        O.rgb /= length(O+1e-5);\n    }\n    \n    U=u/R; z = 6.*U.y;                                     // left: peaks intensity with depth\n#define S(v)  max(0., 1. - R.y* abs( v - U.x) )\n    O.g += S( 4.* pow(.58,z)*.05 );\n    O.r += S( 1.* pow(1. ,z)*.05 );\n\n    O = vec4( pow (O, vec4(1./2.2) ) );                    // gamma correction \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}