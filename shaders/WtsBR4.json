{
    "Shader": {
        "info": {
            "date": "1596160692",
            "description": "Modified https://www.shadertoy.com/view/wlcXzB",
            "flags": 0,
            "hasliked": 0,
            "id": "WtsBR4",
            "likes": 8,
            "name": "OpenSimplex2 Fractal Warp V3",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "Auburn",
            "viewed": 543
        },
        "renderpass": [
            {
                "code": "////////////////// K.jpg's Smooth Re-oriented 8-Point BCC Noise (OpenSimplex 2, Smooth Version) //////////////////\n///////////////////////// Modified to output a 2D vector instead of a standard 1D value. /////////////////////////\n\n// Borrowed from Stefan Gustavson's noise code\nvec4 permute(vec4 t) {\n    return t * (t * 34.0 + 133.0);\n}\n\n// Gradient set is a normalized expanded rhombic dodecahedron\nvec3 grad(float hash) {\n    \n    // Random vertex of a cube, +/- 1 each\n    vec3 cube = mod(floor(hash / vec3(1.0, 2.0, 4.0)), 2.0) * 2.0 - 1.0;\n    \n    // Random edge of the three edges connected to that vertex\n    // Also a cuboctahedral vertex\n    // And corresponds to the face of its dual, the rhombic dodecahedron\n    vec3 cuboct = cube;\n    cuboct[int(hash / 16.0)] = 0.0;\n    \n    // In a funky way, pick one of the four points on the rhombic face\n    float type = mod(floor(hash / 8.0), 2.0);\n    vec3 rhomb = (1.0 - type) * cube + type * (cuboct + cross(cube, cuboct));\n    \n    // Expand it so that the new edges are the same length\n    // as the existing ones\n    vec3 grad = cuboct * 1.22474487139 + rhomb;\n    \n    // To make all gradients the same length, we only need to shorten the\n    // second type of vector. We also put in the whole noise scale constant.\n    // The compiler should reduce it into the existing floats. I think.\n    grad *= (1.0 - 0.042942436724648037 * type) * 3.5946317686139184;\n    \n    return grad;\n}\n\n// BCC lattice split up into 2 cube lattices\nvec2 bccNoisePart(vec3 X) {\n    vec3 b = floor(X);\n    vec4 i4 = vec4(X - b, 2.5);\n    \n    // Pick between each pair of oppposite corners in the cube.\n    vec3 v1 = b + floor(dot(i4, vec4(.25)));\n    vec3 v2 = b + vec3(1, 0, 0) + vec3(-1, 1, 1) * floor(dot(i4, vec4(-.25, .25, .25, .35)));\n    vec3 v3 = b + vec3(0, 1, 0) + vec3(1, -1, 1) * floor(dot(i4, vec4(.25, -.25, .25, .35)));\n    vec3 v4 = b + vec3(0, 0, 1) + vec3(1, 1, -1) * floor(dot(i4, vec4(.25, .25, -.25, .35)));\n    \n    // Gradient hashes for the four vertices in this half-lattice.\n    vec4 hashes = permute(mod(vec4(v1.x, v2.x, v3.x, v4.x), 289.0));\n    hashes = permute(mod(hashes + vec4(v1.y, v2.y, v3.y, v4.y), 289.0));\n    vec4 hashesRaw = permute(mod(hashes + vec4(v1.z, v2.z, v3.z, v4.z), 289.0));\n    hashes = mod(hashesRaw, 48.0);\n    vec4 outDirHashes = mod(floor(hashesRaw / 48.0), 6.0);\n    vec4 outDirAngles = outDirHashes / 6.0 * 3.14159 * 2.0; // You could easily create more than 6 output base directions, with a wider-ranged hash\n    \n    // Gradient extrapolations & kernel function\n    vec3 d1 = X - v1; vec3 d2 = X - v2; vec3 d3 = X - v3; vec3 d4 = X - v4;\n    vec4 a = max(0.75 - vec4(dot(d1, d1), dot(d2, d2), dot(d3, d3), dot(d4, d4)), 0.0);\n    vec4 aa = a * a; vec4 aaaa = aa * aa;\n    vec3 g1 = grad(hashes.x); vec3 g2 = grad(hashes.y);\n    vec3 g3 = grad(hashes.z); vec3 g4 = grad(hashes.w);\n    vec4 extrapolations = vec4(dot(d1, g1), dot(d2, g2), dot(d3, g3), dot(d4, g4));\n    vec4 extrapolationsP = extrapolations * sin(outDirAngles);\n    vec4 extrapolationsQ = extrapolations * cos(outDirAngles);\n    \n    // Return it all as a vec4\n    return vec2(dot(aaaa, extrapolationsP), dot(aaaa, extrapolationsQ));\n   \n}\n\n// Classic \"Simplex\" noise lattice orientation.\nvec2 bccNoise_XYZ(vec3 X) {\n    \n    // Orthonormal rotation, not a skew transform.\n    X = dot(X, vec3(2.0/3.0)) - X;\n    return bccNoisePart(X) + bccNoisePart(X + 144.5);\n}\n\n// Gives X and Y a triangular alignment, and lets Z move up the main diagonal.\n// Should be better for terrain or a time varying X/Y plane. Z repeats.\nvec2 bccNoise_PlaneFirst(vec3 X) {\n    \n    // Orthonormal rotation, not a skew transform.\n    mat3 orthonormalMap = mat3(\n        0.788675134594813, -0.211324865405187, -0.577350269189626,\n        -0.211324865405187, 0.788675134594813, -0.577350269189626,\n        0.577350269189626, 0.577350269189626, 0.577350269189626);\n    \n    X = orthonormalMap * X;\n    return bccNoisePart(X) + bccNoisePart(X + 144.5);\n}\n\n//////////////////////////////// End noise code ////////////////////////////////\n\n// Borrowed from https://www.shadertoy.com/view/Wt3XzS by FabriceNeyret2\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    // Normalized pixel coordinates (from 0 to 1 on largest axis)\n    vec2 uv = fragCoord;\n    uv *= 0.004;\n    \n    // Input point\n    vec3 X = vec3(uv, mod(iTime, 10000.0) * 0.09);\n    \n    // Evaluate noise\n    vec2 noiseResult = vec2(0);\n    float amp = 1.;\n    float z = 0.;\n    \n    for(int i = 0; i < 11; i++)\n    {\n    \tnoiseResult += bccNoise_PlaneFirst(X + vec3(noiseResult * (0.8 / sqrt(amp)), z)) * amp;\n        X *= 1.57;\n        amp *= 0.65;\n        z += 17.;\n    }\n    \n    float phi = atan(noiseResult.y, noiseResult.x);\n    vec3 col = hsv2rgb(vec3(phi/(2.*3.14159), 1., min(1.,length(noiseResult)*0.9)));\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}