{
    "Shader": {
        "info": {
            "date": "1696387734",
            "description": "This uses a domain repetition trick where you take the minimum of the shape and the nearest lattice wall (plus a small epsilon). Blackle i think originated it, but this is (I think) a simpler implementation that was discussed in the discord.",
            "flags": 0,
            "hasliked": 0,
            "id": "mdyczc",
            "likes": 7,
            "name": "spqr domain trick",
            "published": 3,
            "tags": [
                "a"
            ],
            "usePreview": 0,
            "username": "spqr",
            "viewed": 190
        },
        "renderpass": [
            {
                "code": "\nmat2 rot(float a) {\n  float ca=cos(a);\n  float sa=sin(a);\n  return mat2(ca,sa,-sa,ca);\n}\n\n\n\nfloat cylcap( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat hash11(float t) {\n  return fract( sin(t * 7361.994) * 4518.442);\n}\n\nvec3 lattice (float t ) {\n\n \n\n  float m = t;\n  float mx = floor((m-2.)/3.);\n  float my = floor((m-1.)/3.);\n  float mz = floor((m-0.)/3.);\n  \n  float n= m+1.;\n  float nx = floor((n-2.)/3.);\n  float ny = floor((n-1.)/3.);\n  float nz = floor((n-0.)/3.);\n  \n\n  vec3 a =  \n  mix(\n      vec3(\n          hash11(mx)-.5,\n          hash11(my)-.5,\n          hash11(mz)-.5\n      ),\n      vec3(\n          hash11(nx)-.5,\n          hash11(ny)-.5,\n          hash11(nz)-.5\n      ) , \n      fract(t)\n  );\n  return a;\n}\n\n\n\nfloat hash31(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nfloat closestWall(vec3 p) {\n    vec3 d = min(fract(p), 1.0 - fract(p));\n    return min(min(d.x, d.y), d.z);\n}\n\n\nfloat map (vec3 p){\n\n\n   // geo\n   float tt = iTime;\n  \n   vec3 id = floor(p)-.5; \n   p = fract(p) -.5;\n   float f1 = hash31(id);\n   \n   p.yx *= rot(f1 * 11.1 * ( sin(iTime)*.5+.5));\n   p.yz *= rot(f1 * 9.1 * ( sin(iTime)*.5+.5));\n  \n   float ball = cylcap(p, .03,.3);\n   float bound = closestWall(p);\n   \n   return min(bound + .03, ball);\n}\n\nvec3 norm(vec3 p) {\n  vec2 off=vec2(0.001,0.0);\n  return normalize(map(p)-vec3(map(p-off.xyy), map(p-off.yxy), map(p-off.yyx))+0.000001);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  float tt = iTime * 2.;\n\n  // nav\n  \n  vec3 s,t;\n  \n  s = lattice(tt*.1) * 18.;\n  t = lattice(tt *.1 + 2.) * 18.;\n  \n  \n  vec3 cz=normalize(t-s);\n  vec3 cx=normalize(cross(cz,vec3(0,1,0)));\n  vec3 cy=-normalize(cross(cz,cx));\n  vec3 r=normalize(cx*uv.x+cy*uv.y+cz);\n \n\n  vec3 p=s;\n  float i=0.;\n  float dd = 0.;\n  float d;\n  \n  // march\n  \n  bool hit = false;\n  for(float z=0.; z < 500.; ++z) {\n    i = z;\n    d=map(p);\n    if(d<0.001) {\n      hit = true;\n      break;\n    }\n    if ( dd > 1000.) break;\n    dd += d;\n    p+=r*d;\n  }\n  \n\n  // color\n \n  vec3 n = norm(p);\n  vec3 light =normalize(vec3(0,1,-1));\n  float fresnel = pow(1.-dot(n, -r),1.)* .9 + .1;\n  float spec =pow(max(dot(reflect(-light,n),-r),0.),40.);\n  vec3 hue = vec3(1.);\n  vec3 col = hue  *  (fresnel + spec);\n\n  if ( ! hit ) {\n      col = vec3(.2,.2,.5);\n  }\n\n  fragColor = vec4(col, 1);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}