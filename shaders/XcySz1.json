{
    "Shader": {
        "info": {
            "date": "1715049688",
            "description": "am i crazy or does the ball on the left have weird shading issues on some devices\nplease tell me if you see it too i need to know I'm not crazy I'm not crazy right",
            "flags": 0,
            "hasliked": 0,
            "id": "XcySz1",
            "likes": 0,
            "name": "raymarcher 3 revenge of the sith",
            "published": 3,
            "tags": [
                "raymarcher"
            ],
            "usePreview": 0,
            "username": "derpygamer2142",
            "viewed": 98
        },
        "renderpass": [
            {
                "code": "#define epsilon 0.001\n#define maxDist 500.0\n#define fov 90.0\n#define PI 3.14159\n\nfloat atan2 (float x, float y) {\n    return radians(degrees(atan(x/y)) + (180.0 * float(y < 0.0)));\n}\n\nstruct Plane {\n// WHAT DO WE WANT\n// planes\n// WHEN DO WE WANT THEM\n// neeeeeeeeeeeoooooooooooooooooooowwwwwwwwwwwwwww *plane noises*\n    float h;\n};\n\nstruct Sphere {\n    vec3 pos;\n    float r;\n};\n\nvec2 sphereRay( in vec3 ro, in vec3 rd, in vec3 ce, float ra ) {\n    // https://iquilezles.org/articles/intersectors/\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - ra*ra;\n    float h = b*b - c;\n    if( h<0.0 ) return vec2(-1.0); // no intersection\n    h = sqrt( h );\n    return vec2(-b-h,-b+h);\n}\n\nfloat spheresdf (vec3 p, Sphere ball) {\n        return length(ball.pos - p) - ball.r;\n}\n\nvec3 spherenormal (vec3 p, Sphere ball) {\n    return normalize(p - ball.pos);\n}\n\nfloat planesdf (vec3 p, Plane pl) {\n    return p.y - (pl.h);\n}\n\n\nfloat smoothUnion( float d1, float d2, float k ) {\n    // https://iquilezles.org/articles/distfunctions/\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return (mix( d2, d1, h ) - k*h*(1.0-h));\n}\n\nfloat distFromType(vec3 p, int type, Sphere ball, Plane pl) {\n    if (type == 1) {\n        return spheresdf(p, ball);\n    }\n    else if (type == 2) {\n        return planesdf(p, pl);\n    }\n}\n\nSphere balls[] = Sphere[2] (\n        Sphere(vec3(0.0, 0.0, 25.0), 5.0),\n        Sphere(vec3(-10.0, -3.0, 25.0), 5.0)\n    \n    ); // haha it says balls\n\nPlane ground = Plane(-5.0);\n\nfloat minDist (vec3 rp) {\n// (index, dist)\n    float heldDist = 9999999.9;\n    int type = -1;\n    for (int i = 0; i < balls.length(); i++) {\n                float checkDist = spheresdf (rp, balls[i]);\n                if (checkDist < heldDist) {\n                    heldDist = checkDist;\n                    type = 1;\n                }\n              \n    }\n    \n    float checkDist = smoothUnion(planesdf(rp, ground), heldDist, 2.0);\n    if (checkDist < heldDist) {\n            //heldDist = smoothUnion(checkDist, heldDist, 2.0);\n            heldDist = checkDist;\n            type = 2;\n\n    }\n    \n    return heldDist; //vec2(type, heldDist);\n}\n\nvec2 minObj (vec3 rp) {\n    float heldDist = 9999999.9;\n    int type = -1;\n    int index = -1;\n    for (int i = 0; i < balls.length(); i++) {\n                float checkDist = spheresdf (rp, balls[i]);\n                if (checkDist < heldDist) {\n                    heldDist = checkDist;\n                    type = 1;\n                    index = i;\n                }\n              \n    }\n    \n    float checkDist = smoothUnion(planesdf(rp, ground), heldDist, 2.0);\n    if (checkDist < heldDist) {\n            //heldDist = smoothUnion(checkDist, heldDist, 2.0);\n            heldDist = checkDist;\n            type = 2;\n            index = -1;\n\n    }\n    \n    return vec2(type, index);\n}\n\nvec3 smoothNorm(vec3 p) {\n    // int lastType, int type, Sphere ball, Plane pl\n    \n    /*// this formula caused me pain\n    // normal from sdf function taken from alltrue on scratch(they might have taken it from elsewhere)\n    // if there's a faster way ffs please tell me\n    vec3 norm = vec3 (\n        smoothUnion(distFromType(p + vec3(epsilon, 0.0, 0.0), lastType, ball, pl), distFromType(p + vec3(epsilon, 0.0, 0.0), type, ball, pl), 5.0)   -   smoothUnion(distFromType(p - vec3(epsilon, 0.0, 0.0), lastType, ball, pl), distFromType(p - vec3(epsilon, 0.0, 0.0), type, ball, pl), 5.0),\n        smoothUnion(distFromType(p + vec3(0.0, epsilon, 0.0), lastType, ball, pl), distFromType(p + vec3(0.0, epsilon, 0.0), type, ball, pl), 5.0)   -   smoothUnion(distFromType(p - vec3(0.0, epsilon, 0.0), lastType, ball, pl), distFromType(p - vec3(0.0, epsilon, 0.0), type, ball, pl), 5.0),\n        smoothUnion(distFromType(p + vec3(0.0, 0.0, epsilon), lastType, ball, pl), distFromType(p + vec3(0.0, 0.0, epsilon), type, ball, pl), 5.0)   -   smoothUnion(distFromType(p - vec3(0.0, 0.0, epsilon), lastType, ball, pl), distFromType(p - vec3(0.0, 0.0, epsilon), type, ball, pl), 5.0)\n    );\n    norm = normalize(norm); // if i had to put any more code in that one statement i would go insane\n    return norm;*/\n    \n    // https://iquilezles.org/articles/normalsSDF/\n    // i think this formula and the above one are basically the same\n    // but this one is a bit more compact and probably faster\n    vec2 k = vec2(epsilon, 0);\n    return normalize( vec3(\n        minDist(p+k.xyy) - minDist(p-k.xyy),\n        minDist(p+k.yxy) - minDist(p-k.yxy),\n        minDist(p+k.yyx) - minDist(p-k.yyx)\n        ) );\n}\n\nvec3 rotateVec(vec3 v, vec3 rot) {\n    // i didn't make this matrix but at this point idk who to credit so i'll just say i stole it from 3dgas\n    float sx = sin(rot.x);\n    float sy = sin(rot.y);\n    float sz = sin(rot.z);\n    \n    float cx = cos(rot.x);\n    float cy = cos(rot.y);\n    float cz = cos(rot.z);\n    float rotmat[] = float[9] (\n        (cx * cz) - (sx * sy * sz),\n        0.0 - (sz * cy),\n        (sy * cx * sz) + (sx * cz),\n        (sy * sx * cz) + (cx * sz),\n        cy * cz,\n        (sx * sz) - (sy * cx * cz),\n        0.0 - (sx * cy),\n        sy,\n        cy * cx\n    );\n    \n    return vec3(\n        (rotmat[0] * v.x) + (rotmat[1] * v.y) + (rotmat[2] * v.z),\n        (rotmat[3] * v.x) + (rotmat[4] * v.y) + (rotmat[5] * v.z),\n        (rotmat[6] * v.x) + (rotmat[7] * v.y) + (rotmat[8] * v.z)\n    );\n}\n\nvec3 rotPoint(vec3 p, vec3 p2, vec3 rot) {\n    // i didn't make this matrix but at this point idk who to credit so i'll just say i stole it from 3dgas\n    float sx = sin(rot.x);\n    float sy = sin(rot.y);\n    float sz = sin(rot.z);\n    \n    float cx = cos(rot.x);\n    float cy = cos(rot.y);\n    float cz = cos(rot.z);\n    float rotmat[] = float[9] (\n        (cx * cz) - (sx * sy * sz),\n        0.0 - (sz * cy),\n        (sy * cx * sz) + (sx * cz),\n        (sy * sx * cz) + (cx * sz),\n        cy * cz,\n        (sx * sz) - (sy * cx * cz),\n        0.0 - (sx * cy),\n        sy,\n        cy * cx\n    );\n    \n    return vec3(\n        ((rotmat[0] * p.x) + (rotmat[1] * p.y) + (rotmat[2] * p.z)) + p2.x,\n        ((rotmat[3] * p.x) + (rotmat[4] * p.y) + (rotmat[5] * p.z)) + p2.y,\n        ((rotmat[6] * p.x) + (rotmat[7] * p.y) + (rotmat[8] * p.z)) + p2.z\n    );\n}\n\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k ) {\n    // https://iquilezles.org/articles/rmshadows/\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<256 && t<maxt; i++ ) {\n        float h = minDist(ro + rd*t);\n        if( h<mint/10.0 ) {\n            return 0.3; // this looks pretty bad\n        }\n        res = min( res, k*h/t ); // k is the softness, h is the nearest miss, t is the raylength\n        // softness falls off over distance\n        t += h;\n    }\n    return clamp(res+0.3, 0.0, 1.0); // value between epsilon and 1?\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    //vec3 lightvec = normalize(rotateVec(normalize(vec3(1.0,1.0,-1.0)), vec3(iTime/8.0, 0.0, 0.0)));\n    vec3 lightvec = normalize(vec3(1.0, 1.0, -1.0));\n    //vec3 campos = vec3(0.0,0.0,0.0);\n    //vec3 camrot = vec3(0.0, 0.0, 0.0);\n    vec3 camrot = vec3(iTime + ((iMouse.x/iResolution.x + 0.5) * 5.0),0.0,0.0);\n    vec3 campos = rotPoint(vec3(0.0, 0.0, -35.0), vec3(0.0, 0.0, 25.0), camrot);\n    //vec2 uv = fragCoord/iResolution.xy;\n    vec2 coords = fragCoord;\n   \n    float focalLength = iResolution.x / tan(radians(fov/2.0)); // this shader uses focal length but fov is cooler\n    \n    coords.x -= iResolution.x/2.0;\n    coords.y -= iResolution.y/2.0;\n    \n    float heldDist = 9999.99; // big number go brrrrr\n    float raylen = 0.0;\n    Sphere last = Sphere(vec3(0.0, 0.0, -99999.0), 5.0);\n    int lastType = -1; // -1 means you fucked up\n    vec3 lastNorm = vec3(0.0,1.0,0.0);\n    // can i say fuck on shadertoy?\n    // imma do it anyways\n    /*\n    1 - sphere\n    2 - plane\n    */\n    \n    \n    vec3 rp = campos;\n    vec3 rv = rotateVec(normalize(vec3 (coords.xy, focalLength)),camrot); // directiony thingy\n    float ypos = sin(iTime * 2.0) * 2.0;\n    ground.h = ypos - 5.0;\n    while ((raylen < maxDist) && (heldDist > epsilon)) {\n        heldDist = minDist(rp);\n        vec2 objData = minObj(rp);\n        lastType = int(objData.x);\n        if (objData.x == 1.0) {\n            last = balls[int(objData.y)];\n            lastNorm = spherenormal(rp, last);\n        }\n        else if (objData.x == 2.0) {\n            //lastNorm = normalize(vec3(0,1.0,0.0));\n            lastNorm = smoothNorm(rp);\n        }\n       \n        // zooooom\n        raylen += heldDist;\n        rp += rv*heldDist;\n    }\n    \n    \n   \n    if (raylen >= maxDist) {\n    // no bonk : (\n        //fragColor = vec4(90.0/255.0, 237.0/255.0, 215.0/255.0,1.0);\n        // this color hurts my eyes ^\n        //fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        vec2 sun = sphereRay(campos, rv, lightvec * 100.0, 25.0);\n        float sunDist = min(sun.x, sun.y);\n        if (sunDist > 0.0) {\n            fragColor = vec4(sunDist, sunDist, sunDist, 1.0);\n        }\n        else {\n            fragColor = vec4(10.0/255.0, 171.0/255.0, 199.0/255.0, 1.0);\n        }\n    }\n    else {\n        // bonk\n        // https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_reflection_model\n        // this is most likely wrong\n        // til it's blinn not bling\n        vec3 normal = lastNorm;//vec3(0,1,0);\n        vec2 uv = vec2 (1.0 - (atan2(normal.x,normal.z)/6.28318 + 0.5), normal.y*0.5 + 0.5);\n        vec4 tex = texture(iChannel0,uv);\n        \n        vec3 halfa = normalize(rv + lightvec);\n        float spec = pow(max(dot(halfa, normal),0.0),16.0);\n        // i think the specular highlight direction is backwards but idrc\n        //... or is it?\n        // it is, final answer locking it in\n        float l = clamp((dot(normal, lightvec)*0.55), 0.01, 1.0) + spec; // scene can be made brighter by increasing the 0.55\n        \n        //float l = dot(normal, lightvec);\n        l *= shadow(rp, lightvec, 0.1, maxDist, 8.0);\n        \n        fragColor = vec4(vec3(l), 1.0); // lastType == 1 ? tex.rgb + l : vec3(l)\n       \n    }\n    \n    \n    //fragColor = vec4(uv.x,1.0-uv.y,0,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}