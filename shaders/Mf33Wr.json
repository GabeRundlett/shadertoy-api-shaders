{
    "Shader": {
        "info": {
            "date": "1711558417",
            "description": "Filter that mimics how a colorblind person may see.\nChanged the coefficients on SeeBlueWeak to -0.01224491 for L & 0.07203435 for M\nAdded color correction tuned with iOS app sim Daltonnism",
            "flags": 0,
            "hasliked": 0,
            "id": "Mf33Wr",
            "likes": 3,
            "name": "Fork colorblind dgmz 381",
            "published": 3,
            "tags": [
                "simulator"
            ],
            "usePreview": 0,
            "username": "dgmz",
            "viewed": 146
        },
        "renderpass": [
            {
                "code": "vec3 RgbToLms(vec3 color)\n{\n    float l = (17.8824 * color.r) + (43.5161 * color.g) + (4.11935 * color.b);\n    float m = (3.45565 * color.r) + (27.1554 * color.g) + (3.86714 * color.b);\n    float s = (0.0299566 * color.r) + (0.184309 * color.g) + (1.46709 * color.b);\n\treturn vec3(l,m,s);   \n}\n\nvec3 LmsToRgb(vec3 color)\n{\n    float r = (0.0809444479 * color.r) + (-0.130504409 * color.g) + (0.116721066 * color.b);\n    float g = (-0.0102485335 * color.r) + (0.0540193266 * color.g) + (-0.113614708 * color.b);\n    float b = (-0.000365296938 * color.r) + (-0.00412161469 * color.g) + (0.693511405 * color.b);\n\treturn vec3(r,g,b);  \n}\n\n\n\nvec4 colorBands(vec2 uv, vec2 res)\n{\n    float pi = 3.14159;\n    float f = res.y/res.x-2.0;\n    uv.x = floor(uv.x*res.x+f);\n    \n    uv.y = floor(uv.y*res.y+f);    \n    \n    float r = clamp(clamp(sin(uv.x/3.0+pi/3.0+0.3),0.0,1.0)+clamp(sin(uv.x/3.0+pi+0.35),0.0,1.0),0.0,1.0);\n    float b = clamp(sin(uv.x/3.0-pi/2.0+0.3),0.0,1.0);\n    float g = clamp(sin(uv.x/3.0+0.4),0.0,1.0);\n    vec4 color = vec4(r,g,b,1.0); \n    \n    return color;\n}\n\n\nvec4 colorTest(vec2 uv, vec2 res)\n{\n\tfloat r = 2.0*(uv.x - uv.y);\n    float g = 2.0*(1.0-uv.x - uv.y);\n    float b = 4.0*(uv.y);\n    \n    return clamp(vec4(r,g,b,1.0),0.0,1.0);\n}\n\n\n\nvec4 SeeRedWeak(vec4 color)\n{\n    vec3 colorOut = RgbToLms(color.rgb);\n        \n    colorOut.r = 2.02344*colorOut.g - 2.5281*colorOut.b;\n   \n    return vec4(LmsToRgb(colorOut.rgb), color.a);\n\n}\n\nvec4 SeeGreenWeak(vec4 color)\n{\n    vec3 colorOut = RgbToLms(color.rgb);\n        \n    colorOut.g = 0.494207*colorOut.r + 1.24827*colorOut.b;\n   \n    return vec4(LmsToRgb(colorOut.rgb), color.a);\n}\n\nvec4 SeeBlueWeak(vec4 color)\n{\n    vec3 colorOut = RgbToLms(color.rgb);\n        \n    colorOut.b = -0.01224491*colorOut.r + 0.07203435*colorOut.g;\n   \n    return vec4(LmsToRgb(colorOut.rgb), color.a);\n}\n\nvec4 SeeBlueWeakWrong(vec4 color)\n{\n    vec3 colorOut = RgbToLms(color.rgb);\n        \n    colorOut.b = -0.395913*colorOut.r + 0.801109*colorOut.g;\n   \n    return vec4(LmsToRgb(colorOut.rgb), color.a);\n}\n\nvec4 SeeWeakOld(vec4 color, int weak)   \n{\n \tif(weak == 1)\n    {\n        color = SeeRedWeak(color);\n    }\n \tif(weak == 2)\n    {\n        color = SeeGreenWeak(color);\n    }\n \tif(weak == 3)\n    {\n        color = SeeBlueWeak(color);\n    }    \n    return color;\n}\n\n\nvec4 SeeWeak(vec4 color, int weak)   \n{\n    vec3 colorLMS = RgbToLms(color.rgb);\n    vec3 colorLMSOut;\n    colorLMSOut.r = (2.02344*colorLMS.g - 2.5281*colorLMS.b)*((weak==1)?1.:0.) + colorLMS.r*(1.0-((weak==1)?1.:0.));\n    colorLMSOut.g = (0.494207*colorLMS.r + 1.24827*colorLMS.b)*((weak==2)?1.:0.) + colorLMS.g*(1.0-((weak==2)?1.:0.));\n    colorLMSOut.b = (-0.01224491*colorLMS.r + 0.07203435*colorLMS.g)*((weak==3)?1.:0.) + colorLMS.b*(1.0-((weak==3)?1.:0.));\n    return vec4(LmsToRgb(colorLMSOut.rgb), color.a);\n}  \n\n\nconst float GAMMA = 1.0 / 2.2;\nconst float INVERSE_GAMMA = 2.2;\n\nvec4 sRGB2Linear(vec4 srgb)\n{\n    return pow(srgb, vec4(INVERSE_GAMMA));\n}\n\nvec4 linear2sRGB(vec4 linear) \n{\n    return pow(linear, vec4(GAMMA));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float res = 16.0;\n    vec4 color = colorBands(uv, vec2(res,res));\n    //color = linear2sRGB(color);\n\n//simulation\n    vec4 originalColor = color;\n    if(uv.y < 0.25)\n    {      \n        color =  SeeWeak(color, 3);\n    }\n    else if (uv.y < 0.5)  \n    {        \n        color =  SeeWeak(color, 2);\n    }\n    else if (uv.y < 0.75)  \n    {        \n        color =  SeeWeak(color, 1);\n    }\n//correction\n    vec4 colorWeak = originalColor - color;\n    vec4 colorShift;\n    //colorShift.r = 0.0f;\n\t//colorShift.g = colorWeak.g + c*colorWeak.r;\n\t//colorShift.b = colorWeak.b + c*colorWeak.r;\n    //color += colorShift;//apply correction (comment out to see uncorrected output only)\n    \n\t\n\n    \n//apply correction \n    if(uv.y > 0.5 && uv.y < 0.5625 || (uv.y > 0.25 && uv.y < 0.31) || (uv.y < 0.0625))// show depot VS current\n    //if(false)\n    {\n        //previous version (in depot)\n        const float c = 0.7;//custom compensation factor\n        colorShift.r = 0.0f;\n        colorShift.g = colorWeak.g + c*colorWeak.r;\n        colorShift.b = colorWeak.b + c*colorWeak.r;\n    }\n    else \n    if(uv.y > 0.5 && uv.y < 0.625)//red weak correction, no changes\n    {\n        colorShift.r = 0.;\n        colorShift.g = colorWeak.g + 0.7*colorWeak.r;\n        colorShift.b = colorWeak.b + 0.7*colorWeak.r;\n    }\n    else if (uv.y > 0.25 && uv.y < 0.375)// green weak correction\n    {   \n        colorShift.r = colorWeak.r + 0.1*colorWeak.g;\n        colorShift.g = 0.;\n        colorShift.b = colorWeak.b + 0.5*colorWeak.g;\n    }\n    else if( uv.y < 0.125)// blue weak correction\n    {\n        colorShift.r = colorWeak.r + 0.01*colorWeak.b;\n        colorShift.g = colorWeak.g + 0.25*colorWeak.b;\n        colorShift.b = 0.;\n    }\n    color += colorShift;//apply correction (comment out to see uncorrected output only) \n    \n    float lTh = 0.004;//linethickness\n    if( (abs(uv.y - 0.5)   <lTh) ||\n        (abs(uv.y - 0.75)  <lTh) || \n        (abs(uv.y - 0.25)  <lTh) || \n        (abs(uv.y - 0.125) <lTh) || \n        (abs(uv.y - 0.5625)<lTh) || //sep depot VS current\n        (abs(uv.y - 0.31)  <lTh) || //sep depot VS current\n        (abs(uv.y - 0.0625)<lTh) || //sep depot VS current\n        (abs(uv.y - 0.625)<lTh)  ||  \n        (abs(uv.y - 0.375)<lTh) \n        )\n        color = vec4(0.,0.,0.,0.);\n    \n\tcolor = clamp(color,0.0,1.0);\n    \n    color = linear2sRGB(color);\n    fragColor = color;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}