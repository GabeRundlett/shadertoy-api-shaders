{
    "Shader": {
        "info": {
            "date": "1516981819",
            "description": "Hash Function: https://www.shadertoy.com/view/4ssXzX",
            "flags": 32,
            "hasliked": 0,
            "id": "Mt2fRd",
            "likes": 6,
            "name": "Modular Pathtracer",
            "published": 3,
            "tags": [
                "pathtracer",
                "modular"
            ],
            "usePreview": 0,
            "username": "Assossa",
            "viewed": 467
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    fragColor /= fragColor.w;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define EPSILON 0.01\n#define PI 3.14159265359\n#define BBSM 1739.0\n\nstruct rObj {\n    vec3 pos, scale;\n    int gID, mID;\n};\n    \nstruct ray {\n\tvec3 pos, dir, col;\n};\n\nconst int numObjects = 4;\nconst rObj objects[] = rObj[](\n    rObj(vec3( 0),       vec3(0), 1, 1),\n\trObj(vec3( 2.5,1,0), vec3(1), 2, 2),\n    rObj(vec3( 0,  1,0), vec3(1), 2, 3),\n    rObj(vec3(-2.5,1,0), vec3(1), 2, 4)\n);\n\n// Prototypes\nray camera(vec3 pos, vec3 lookAt, vec2 fragCoord, float fov);\nvec3 render(ray r);\nbool simulateRay(inout ray r);\nrObj closestObj(out float dist, in vec3 p);\nvec3 getNormal(vec3 p, rObj o);\nfloat geometryDistance(vec3 p, rObj o);\nvoid material(inout ray r, rObj o);\nvec3 rayDirection(float fieldOfView, vec2 fragCoord);\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up);\nvec4 hash(in vec2 pos);\nvec3 hashRot(vec3 dir, float scale);\n\n// Main Shader\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    int adjFrame = iFrame / SAMPLES_PER_FRAME;\n    int frameSample = iFrame % SAMPLES_PER_FRAME;\n    \n    float camDist = float(adjFrame) / 20.0;\n    \n    float weight = step(1., float(frameSample));\n    ray cam = camera(vec3(cos(camDist) * 8., 1, sin(camDist) * 6.), vec3(0,1,0), fragCoord, 75.0);\n    \n    fragColor = texture(iChannel0, fragCoord / iResolution.xy) * weight;\n    fragColor += vec4(render(cam), 1.0);\n}\n\n// Geometry Functions\nfloat g1_plane(vec3 p, rObj o) {\n    return p.y - o.scale.x;\n}\n\nfloat g2_sphere(vec3 p, rObj o) {\n    return length(p - o.pos) - o.scale.x;\n}\n\n// Material Functions\nvoid m1_plane(inout ray r, rObj o) {\n    r.pos.y += EPSILON * 2.;\n    r.dir = hashRot(reflect(r.dir, vec3(0,1,0)), 0.15);\n\t//r.dir = reflect(r.dir, hashRot(vec3(0,1,0), 0.01));\n    r.col *= vec3((int(mod(floor(r.pos.x), 2.0)) ^ int(mod(floor(r.pos.z), 2.0))) == 0 ? 0.5 : 0.6);\n}\n\nvoid m2_sphere(inout ray r, rObj o) {\n    vec3 nml = normalize(r.pos - o.pos);\n    r.pos += nml * EPSILON * 2.;\n    r.dir = reflect(r.dir, nml);\n    r.col *= vec3(0.99, 0.89, 0.89);\n}\n\nvoid m3_sphere(inout ray r, rObj o) {\n    vec3 nml = normalize(r.pos - o.pos);\n    r.pos += nml * EPSILON * 2.;\n    r.dir = reflect(r.dir, hashRot(nml, 0.05));\n    r.col *= vec3(0.89, 0.99, 0.89);\n}\n\nvoid m4_sphere(inout ray r, rObj o) {\n    vec3 nml = normalize(r.pos - o.pos);\n    r.pos += nml * EPSILON * 2.;\n    r.dir = reflect(r.dir, hashRot(nml, 0.15));\n    r.col *= vec3(0.89, 0.89, 0.99);\n}\n\n// Shader Functions\nvec3 render(ray r) {\n    for(int i = 0; i < 200; i++) if(!simulateRay(r)) break;\n    return r.col;\n}\n\nbool simulateRay(inout ray r) {\n    float dist;\n    rObj o;\n    \n    while(dist < 100.0) {\n        float tDist;\n        o = closestObj(tDist, r.pos);\n        dist += tDist;\n        r.pos += r.dir * tDist;\n        if(tDist < EPSILON) {\n            material(r, o);\n            return true;\n        }\n    }\n    \n    r.col *= texture(iChannel1, r.dir).xyz * 2.;\n    \n    return false;\n}\n\nrObj closestObj(out float dist, in vec3 p) {\n    dist = 100.0;\n    rObj o;\n    for(int i = 0; i < numObjects; i++) {\n        float tDist = geometryDistance(p, objects[i]);\n        if(tDist < dist) {\n            dist = tDist;\n            o = objects[i];\n        }\n    }\n    return o;\n}\n\nfloat geometryDistance(vec3 p, rObj o) {\n    if(o.gID == 1)\n        return g1_plane(p, o);\n    else if(o.gID == 2)\n        return g2_sphere(p, o);\n    return 100.0;\n}\n\nvoid material(inout ray r, rObj o) {\n    if(o.mID == 1)\n        m1_plane(r, o);\n    else if(o.mID == 2)\n        m2_sphere(r, o);\n\telse if(o.mID == 3)\n        m3_sphere(r, o);\n    else if(o.mID == 4)\n        m4_sphere(r, o);\n}\n\nvec3 getNormal(vec3 p, rObj o) {\n    return normalize(vec3(\n        geometryDistance(vec3(p.x + EPSILON, p.y, p.z), o) - geometryDistance(vec3(p.x - EPSILON, p.y, p.z), o),\n        geometryDistance(vec3(p.x, p.y + EPSILON, p.z), o) - geometryDistance(vec3(p.x, p.y - EPSILON, p.z), o),\n        geometryDistance(vec3(p.x, p.y, p.z  + EPSILON), o) - geometryDistance(vec3(p.x, p.y, p.z - EPSILON), o)\n    ));\n}\n\nray camera(vec3 pos, vec3 lookAt, vec2 fragCoord, float fov) {\n    fragCoord += hash(fragCoord + iTime * fov).zw;\n    vec3 viewDir = rayDirection(fov, fragCoord);\n    mat4 viewToWorld = viewMatrix(pos, lookAt, vec3(0.0, 1.0, 0.0));\n    return ray(pos, (viewToWorld * vec4(viewDir, 0.0)).xyz, vec3(1.0));\n}\n            \nvec3 rayDirection(float fieldOfView, vec2 fragCoord) {\n    vec2 xy = fragCoord - iResolution.xy / 2.0;\n    float z = iResolution.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\nvec2 bbsopt(in vec2 a){\n\treturn fract(a*a*(1./BBSM))*BBSM;\n}\n\nvec2 mod1024(in vec2 a){\n\treturn fract(a*(1./1024.))*1024.;\t\n}\n\nvec4 hash(in vec2 pos) {\n\tvec2 a0 = mod1024(pos*PI);\n\tvec2 a1 = bbsopt(a0);\n\tvec2 a2 = a1.yx + bbsopt(a1);\n\tvec2 a3 = a2.yx + bbsopt(a2);\n\treturn fract((a2.xyxy + a3.xxyy + a1.xyyx)*(1./BBSM));\n}\n\nvec3 hashRot(vec3 dir, float scale) {\n    //dir += iTimeDelta * 1000.0;\n    vec3 rot = (hash(dir.xy + dir.z + iTime + iTimeDelta * 1547.5).xyz * 4.0 - 2.0) * PI * scale;\n    mat3 rotMat = mat3(\n    \t\tcos(rot.z), -sin(rot.z), 0,\n    \t\tsin(rot.z), cos(rot.z), 0,\n    \t\t0, 0, 1\n        )* mat3(\n        \tcos(rot.y), 0, sin(rot.y),\n        \t0, 1, 0,\n        \t-sin(rot.y), 0, cos(rot.y)\n        )* mat3(\n        \t1, 0, 0,\n        \t0, cos(rot.x), -sin(rot.x),\n        \t0, sin(rot.x), cos(rot.x)\n        );\n\treturn normalize(rotMat * dir);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 23,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SAMPLES_PER_FRAME 256",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    int adjFrame = iFrame / SAMPLES_PER_FRAME;\n    int frameSample = iFrame % SAMPLES_PER_FRAME;\n    \n    float weight = step(float(SAMPLES_PER_FRAME - 1), float(frameSample));\n    \n    fragColor = mix(texture(iChannel1, uv), texture(iChannel0, uv), weight);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}