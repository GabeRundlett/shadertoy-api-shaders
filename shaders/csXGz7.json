{
    "Shader": {
        "info": {
            "date": "1665819833",
            "description": "inspiration: [url]https://twitter.com/canvas_51/status/1580528793520721920[/url]\n\nsee optimized version here: [url]https://www.shadertoy.com/view/cdfGz7[/url]",
            "flags": 32,
            "hasliked": 0,
            "id": "csXGz7",
            "likes": 12,
            "name": "flow streamlines",
            "published": 3,
            "tags": [
                "flow",
                "vorticity",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 340
        },
        "renderpass": [
            {
                "code": "// see optimized version here: https://www.shadertoy.com/view/cdfGz7\n\nvoid mainImage( out vec4 O, vec2 u )  \n{  O = sqrt(T(u)); }",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\n\n#define H(p) ( fract(sin(float(p)*vec2(269.5,183.3)) *43758.5453123)*R/R.y )\n\nfloat L(vec2 p, vec2 a,vec2 b) { // --- draw line  ( squared distance )\n    p -= a, b -= a;\n    float h = dot(p, b) / dot(b, b), \n          c = clamp(h, 0., 1.);     \n    return h==c ? dot(p -= b*h ,p) : 1e5; \n}\n\nvec2 field(vec2 U) {  // --- velocity field induced by vortices ( Biot & Savart )\n    vec2 V = vec2(0), P;\n    for( float i=0.; i < 30.; i++ ) // N random vortices ( same strength )\n        P = H(i) - U,\n        V += vec2(-P.y,P.x)  * min(100.,.1/pow(length(P),3.)); // * H(i+.3).y*2.; // random strength\n                          // * min(100.,.2/dot(P,P) );\n    return V*1e-3;\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 U = u / R.y, P, _P;\n    O =  T(u);                             // cumulates previous draw\n    \n    for( float i=0.,l; i < 2.; i++ ) {     // draw N streamlines per frame\n        _P = P = H(i+.5-iTime);            // random start point\n        l = 9.;\n        for( int t=0; t <20; t++, _P = P ) // follow trajectory\n            P += field(P),\n            l = min( l, L(U,_P,P) );\n        O += .2*max(0., 1.-R.y*sqrt(l));   // draw the curve\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}