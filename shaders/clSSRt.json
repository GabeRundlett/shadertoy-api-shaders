{
    "Shader": {
        "info": {
            "date": "1676406387",
            "description": "I was playing with squashing + squeezing a rect, and had the idea to stack them.\nIt's quite wormy, maybe something fun could be made with this",
            "flags": 0,
            "hasliked": 0,
            "id": "clSSRt",
            "likes": 35,
            "name": "Squeeze Pillar ðŸª±",
            "published": 3,
            "tags": [
                "squeeze",
                "squash"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 317
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 f )\n{\n    vec2 res = iResolution.xy;\n    vec2 uv = (f - 0.5 * res) / res.y;\n    float k = 1. / res.y;\n    float t = iTime;    \n       \n    // Starting point, centre bottom of new box\n    float h = -0.45;\n    vec2 q = vec2(0, h);\n    \n    // Stretched box dimensions\n    vec2 mxDim = vec2(0);\n    \n    // Step box distances\n    float s = 0.;\n    float s2 = 0.;\n    float s3 = 0.;\n    \n    float n = 12.;\n    for (float i = 0.; i < n; i++) {\n        // Offset\n        float io = 0.5 * pi * i / n;\n        \n        // Base dimensions of box\n        vec2 dim = vec2(0.04);\n        \n        // Squeeze amount\n        float mx = 0.5 + 0.25 * thc(9., t + 2.*pi*q.y + io);\n        //mx = 0.5 + 0.25 * thc(3., t + 4. * io);\n        \n        // Centre of box \n        // = centre of previous box + height of both squeezed boxes\n        vec2 p = q;\n        p.y += mxDim.y;\n        p.y += 2. * dim.y * (1. - mx);      \n        \n        // Squeezed dimensions of box\n        mxDim = 2. * dim * vec2(mx, 1. - mx);\n          \n        // Draw box\n        float d = sdBox(uv - p, mxDim);\n        float d2 = sdBox(uv - p, mxDim - 0.15 * dim);\n        float d3 = length(uv - p);     \n        s += smoothstep(-k, k, -d);\n        s2 += smoothstep(-k, k, -d2);   \n        s3 += smoothstep(-k, k, 0.01 - d3);\n        \n        // Reset previous centre\n        q = p;\n        //q.x += 0.5 * cos(t + 0.5 * io) * dim.x;\n    }\n    \n    vec3 col = vec3(0.5 * smoothstep(-k, k, h - uv.y));\n    col += s * vec3(1, 0.5, 1);\n    col += 0.5 * (s3 - s2);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}