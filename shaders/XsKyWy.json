{
    "Shader": {
        "info": {
            "date": "1523195676",
            "description": "A Menger variation... (mouseable, optional antialiasing)",
            "flags": 0,
            "hasliked": 0,
            "id": "XsKyWy",
            "likes": 12,
            "name": "Polygonal Menger Frame",
            "published": 3,
            "tags": [
                "fractal",
                "menger",
                "symmetry"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 608
        },
        "renderpass": [
            {
                "code": "// \"Polygonal Menger Frame\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n// A Menger variation... (mouseable, optional antialiasing)\n\n/*\n  Building on the idea in evilryu's (https://www.shadertoy.com/view/MdlSRM)\n  hexagonalized version of the tweaked Menger sponge in knighty's introduction to KIFS \n  (http://www.fractalforums.com/sierpinski-gasket/kaleidoscopic-(escape-time-ifs)/). \n  Polygons of any order can be used (some parameter tuning may be required), and shape\n  changes with time.\n*/\n\n#define AA  0   // optional antialiasing (0/1 - off/on)\n\nfloat PrBoxDf (vec3 p, vec3 b);\nvec2 Rot2D (vec2 q, float a);\n\nfloat tCur, dstFar;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 b;\n  const float nIt = 5., sclFac = 2.4, nSym = 7.;\n  b = (sclFac - 1.) * vec3 (0.8, 1., 0.5) * (1. + 0.05 * sin (vec3 (1.23, 1., 1.43) * tCur));\n  p.xz = Rot2D (p.xz, 2. * pi * (floor (nSym * ((length (p.xz) > 0.) ?\n     atan (p.z, - p.x) / (2. * pi) : 0.) + 0.5) / nSym));\n  for (float n = 0.; n < nIt; n ++) {\n    p = abs (p);\n    p.xy = (p.x > p.y) ? p.xy : p.yx;\n    p.xz = (p.x > p.z) ? p.xz : p.zx;\n    p.yz = (p.y > p.z) ? p.yz : p.zy;\n    p = sclFac * p - b;\n    p.z += b.z * step (p.z, -0.5 * b.z);\n  }\n  return PrBoxDf (p, vec3 (1.)) / pow (sclFac, nIt);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 24; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += min (0.05, 3. * h);\n    if (sh < 0.001) break;\n  }\n  return 0.3 + 0.7 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 ltPos[4], ltDir, col, vn;\n  float dstObj, dfTot, spTot, at, sh;\n  for (int k = 0; k < 3; k ++) {\n    ltPos[k] = vec3 (0., 1., 3.);\n    ltPos[k].xz = Rot2D (ltPos[k].xz, float (k) * 2. * pi / 3. -0.1 * pi * tCur);\n  }\n  ltPos[3] = vec3 (0., 3., 0.);\n  ltPos[3].xy = Rot2D (ltPos[3].xy, pi * (0.05 + 0.04 * sin (0.14 * pi * tCur)));\n  ltPos[3].xz = Rot2D (ltPos[3].xz, 0.1 * pi * tCur);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    dfTot = 0.;\n    spTot = 0.;\n    for (int k = 0; k < 4; k ++) {\n      ltDir = normalize (ltPos[k]);\n      at = smoothstep (0., 0.3, dot (normalize (ltPos[k] - ro), ltDir));\n      sh = ObjSShadow (ro, ltDir);\n      dfTot = max (dfTot, at * sh * max (dot (vn, ltDir), 0.));\n      spTot = max (spTot, at * smoothstep (0.5, 0.8, sh) * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.));\n    }\n    col = vec3 (0.7, 0.7, 0.8) * (0.2 + 0.8 * dfTot) + 0.4 * vec3 (1., 1., 0.) * spTot;\n  } else {\n    col = vec3 (0.6, 1., 0.8) * (0.2 + 0.2 * (rd.y + 1.) * (rd.y + 1.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.2 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.5 * pi * mPtr.y;\n  } else {\n    az = 0.03 * pi * tCur;\n    el = - pi * (0.2 + 0.25 * sin (0.02 * pi * tCur));\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -8.);\n  zmFac = 10. + 4. * sin (0.05 * pi * tCur);\n  dstFar = 20.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 4.;\n#endif  \n  col = vec3 (0.);\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.71 / canvas.y, 0.),\n       0.5 * pi * (a + 0.5)), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}