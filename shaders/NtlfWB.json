{
    "Shader": {
        "info": {
            "date": "1651409763",
            "description": "A shader simulating some water, training with some Gradient Noise. ",
            "flags": 0,
            "hasliked": 0,
            "id": "NtlfWB",
            "likes": 3,
            "name": "Water Shader - Gradient Noise",
            "published": 3,
            "tags": [
                "noise",
                "water",
                "gradient"
            ],
            "usePreview": 0,
            "username": "rge15",
            "viewed": 254
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592653589793238\n\n\nvec2 hash2D( vec2 p )\n{\n    p = 50. * fract(p/PI);\n    p = fract(p * vec2(p.y, p.x) + vec2(0.43,0.452));\n    \n    p = vec2(dot( p , vec2(0.83,0.69)), dot( p , vec2(0.64,0.18)));\n    return -1. + 2. * fract(sin(p) * 4573.98203 + p.x*p.y/(p.x+p.y));\n}\n\nfloat gradientNoise( vec2 p )\n{ \n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\n\n    vec2 func = f*f*(3. - 2.*f);\n    \n    vec2 a = hash2D( i + vec2(0.,0.)) ;\n    vec2 b = hash2D( i + vec2(1.,0.)) ;\n    vec2 c = hash2D( i + vec2(0.,1.)) ;\n    vec2 d = hash2D( i + vec2(1.,1.)) ;\n\n    float ga = dot( a, f - vec2(0.,0.) );\n    float gb = dot( b, f - vec2(1.,0.) );\n    float gc = dot( c, f - vec2(0.,1.) );\n    float gd = dot( d, f - vec2(1.,1.) );\n    \n    return ga + (gb - ga) * func.x + (gc - ga) * func.y + (ga - gb - gc +gd) * func.x * func.y; \n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( 2. * fragCoord - iResolution.xy)/iResolution.y;\n\n    float p = 0.;\n    float p2 = 0.;\n    float p3 = 0.;\n    float p4 = 0.;\n    float value = 0.;\n    float caus = 0.;\n    \n    p =  0.3 + gradientNoise( 5. * uv + sin(uv.x + iTime*0.5) );\n    p2 = gradientNoise( 3. * uv + iTime*0.5 );\n    p3 = gradientNoise( 2.5 * uv + iTime*0.5 );\n    p4 = gradientNoise( 2.5 * vec2(uv.x - iTime*0.1, uv.y + iTime*0.1) );\n            \n    caus = (p + p2) * abs(sin(iTime));\n    caus = pow(cos( PI * caus / 2.5),6.0);\n    \n    float border = (p3+p4)*0.3;\n    \n    border += length(vec3(p3+p4)); \n    \n    value = ((p * 0.5 * sin(p2)) * 3.) * abs(cos(iTime));\n    \n    vec3 col =  vec3(0.,0.45,0.85) + (1.-value) * vec3(0.2,0.3,0.9);\n    col += (caus) * vec3(0., 0.1,0.4);\n    col += (1. - 10. *  vec3( border * .5) ) * 0.03;\n\n\n    fragColor = vec4( col ,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}