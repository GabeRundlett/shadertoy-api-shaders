{
    "Shader": {
        "info": {
            "date": "1634073783",
            "description": "trivial 3d perlin noise, one 2d slice for heightmap, another for lighting",
            "flags": 0,
            "hasliked": 0,
            "id": "fstXWX",
            "likes": 2,
            "name": "Dark land",
            "published": 3,
            "tags": [
                "noise",
                "perlin",
                "isoline"
            ],
            "usePreview": 0,
            "username": "akmaaars",
            "viewed": 331
        },
        "renderpass": [
            {
                "code": "const float pi = 3.1415926535;\nfloat randf(int counter) // -> [0, 1]\n{\n    return fract(sin(float(counter)) * 43.7585453);\n}\nvec2 randf2(int counter)\n{\n    float phi = randf(counter) * 2. * pi;\n    return vec2(cos(phi), sin(phi));\n}\nvec3 randf3(int counter)\n{\n    float phi = randf(counter) * 2. * pi;\n    float cos_theta = 2. * randf(counter * 2) - 1.;\n    float sin_theta = sqrt(1. - cos_theta * cos_theta);\n    return vec3(cos(phi) * sin_theta, sin(phi) * sin_theta, cos_theta);\n}\n\nfloat g(float t)\n{\n    return t * t * (3. - 2. * t);\n}\n\nfloat squareSize;\nfloat perlinNoise(vec3 P) // -> [0, 1]\n{\n    vec3 p = P / squareSize;\n    ivec3 i = ivec3(floor(p));\n    vec3 r = fract(p);\n\n    const int iL = 10;\n    const int iS = iL * iL;\n    int i00 = i.x + iL * i.y + iS * i.z;\n\n    float f000 = dot(r - vec3(0., 0., 0.), randf3(i00));\n    float f001 = dot(r - vec3(1., 0., 0.), randf3(i00 + 1));\n    float f010 = dot(r - vec3(0., 1., 0.), randf3(i00 + iL));\n    float f011 = dot(r - vec3(1., 1., 0.), randf3(i00 + iL + 1));\n    float f100 = dot(r - vec3(0., 0., 1.), randf3(i00 + iS));\n    float f101 = dot(r - vec3(1., 0., 1.), randf3(i00 + iS + 1));\n    float f110 = dot(r - vec3(0., 1., 1.), randf3(i00 + iS + iL));\n    float f111 = dot(r - vec3(1., 1., 1.), randf3(i00 + iS + iL + 1));\n    float f00 = f000 + (f001 - f000) * g(r.x);\n    float f01 = f010 + (f011 - f010) * g(r.x);\n    float f10 = f100 + (f101 - f100) * g(r.x);\n    float f11 = f110 + (f111 - f110) * g(r.x);\n    float f0 = f00 + (f01 - f00) * g(r.y);\n    float f1 = f10 + (f11 - f10) * g(r.y);\n    return f0 + (f1 - f0) * g(r.z) + 0.5;\n}\n\nfloat bell(float x, float s)\n{\n    return exp2(-x * x * s);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    squareSize = min(iResolution.x, iResolution.y) * 0.3;\n    float t = iTime * squareSize;\n    vec3 p = vec3(gl_FragCoord.xy, 0.02 * t);\n    float f = perlinNoise(p);\n\n    vec2 dF = vec2(dFdx(f), dFdy(f));\n    const float lineWidth = 0.6;\n    float s = 0.72134752 / (dot(dF, dF) * lineWidth * lineWidth);\n\n    float c = 0.;\n    c += 0.2 * bell(f - 0.1, s);\n    c += 0.4 * bell(f - 0.2, s);\n    c += 0.5 * bell(f - 0.3, s);\n    c += 0.6 * bell(f - 0.4, s);\n    c += 0.8 * bell(f - 0.5, s);\n    c += 0.6 * bell(f - 0.6, s);\n    c += 0.5 * bell(f - 0.7, s);\n    c += 0.4 * bell(f - 0.8, s);\n    c += 0.2 * bell(f - 0.9, s);\n\n    p.z = t * 0.2 + 100.;\n    float I = (perlinNoise(p) + 0.3) * 0.7;\n    c *= (I * I) * (I * I);\n\n    fragColor = vec4(vec3(0.0, 0.0, 0.0) + vec3(c), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}