{
    "Shader": {
        "info": {
            "date": "1585402008",
            "description": "potato!!!!!!",
            "flags": 40,
            "hasliked": 0,
            "id": "tdlyRs",
            "likes": 11,
            "name": "Day 100",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 427
        },
        "renderpass": [
            {
                "code": "// hyperbolic tiling from this tutorial http://roy.red/folding-tilings-.html#folding-tilings \n// spiral zoom from Shane\n// aa from Fabrice \n\n// radiual blur in this buffer\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n\tfragColor = vec4(0);\n    // Radial blur\n    float steps = 16.;\n    float scale = 0.00 + pow(dot(uvn,uvn),2.1)*0.4;\n    //float chromAb = smoothstep(0.,1.,pow(length(uv - 0.5), 0.3))*1.1;\n    float chromAb = pow(length(uv - 0.5),1.)*2.2;\n    vec2 offs = vec2(0);\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n        scale *= 0.97;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.r += texture(iChannel0, target + chromAb*1.4/iResolution.xy).x;\n    \tradial.g += texture(iChannel0, target).y;\n    \tradial.b += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    radial /= steps;\n    \n    fragColor += radial;\n    \n    \n    fragColor.r *= 0.97 + dot(uvn,uvn)*0.6;\n    \n    fragColor.t *= 1.  - smoothstep(0.,1.,dot(uvn,uvn))*0.;\n    \n    \n    fragColor = pow(fragColor, vec4(0.4545));\n    \n    //fragColor.g *= 1. + uv.x*0.01;\n    //fragColor.g *= 1. + uv.t*0.05;\n    \n    fragColor = max(fragColor, 0.);\n    fragColor *= 1. - dot(uvn,uvn)*1.   ;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI acos(-1.)\n\n#define T true\n#define F false\n\n#define init vec2 s = vec2(0)\n#define ret return s\n#define bpm 170.\n\n#define tick (60./bpm)\n\n#define beat tick\n#define bar  beat*4.\n#define hbar  bar/2.\n#define msr  bar*4.\n#define hbeat tick/2.\n#define qbeat tick/4.\n\n\n\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\n\n\nvoid fold(inout vec2 p, vec2 dir,inout int n){\n    float dt = dot(p,dir);\n    if (dt<0.) {\n        p-=2.*dt*dir;\n        n++;\n    }\n}\nvec2 cInverse(vec2 z, vec2 center, float radius){\n    z -= center;\n    return z*radius*radius/dot(z,z) + center;\n}\nvoid fold_circle(inout vec2 z, vec2 c, float r, inout int n) {\n    if (distance(z,c)>r) return;\n    z = cInverse(z,c,r);\n    n++;\n}\nvec3 drawCircle(vec2 z,vec2 c,float r) {\n    return vec3(smoothstep(distance(z,c)-r,.01,0.));\n}\nvoid doFolds(inout vec2 z,vec2 c,float r,inout int n) {              \n    fold(z,vec2(1,0),n);\n    fold(z,vec2(0,1.),n);\n    fold_circle(z,c,r,n);\n}\nfloat xor(float a, float b){return float(int(a) | int(b));}\n\n// Standard spiral zoom.\nvec2 spiralZoom(vec2 p, vec2 offs, float n, float spiral, float zoom, vec2 phase){\n\t\n\tp -= offs;\n\tfloat a = atan(p.y, p.x)/6.283 + iTime/32.;\n\tfloat d = length(p);\n\t//return vec2(a*n + log(d)*spiral, -log(d)*zoom + a) + phase;\n    // Equivalent to the line above. Fabrice tidied it up. I'd imagine the grouped\n    // operations might make it a little quicker, but don't quote me on that. :)\n    return mat2(n, 2, spiral,-zoom)*vec2(a, log(d)) + phase;\n\n}\n\nvec3 color(vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    uv *= 3.4;\n    int n=0;\n    vec2 invCent=vec2(1.); float invRad=1.39 - length(uv)*0.2;\n    vec3 color = vec3(1);\n    \n    uv = spiralZoom(uv, vec2(-.1), 4., 3.14159*.1,0.9, vec2(-4, 4)*iTime*.125);\n\n    \n    vec2 suv = uv;\n    float md = 1.;\n    vec2 id = floor(uv/md);\n    uv = mod(uv, md) - md*0.5;\n    \n    \n    //uv = sin(uv*4.);\n    for(int i = 0; i < 1; i++){\n    \tuv = abs(uv);\n        \n        uv -= 0.6 + sin(uv.y*10. + length(uv)*9. + iTime*2.4)*0.3;\n        uv -= 0.0 + sin(uv.y*10. + length(uv)*1. + iTime*0.4)*0.1;\n    \n    }\n    \n    color = vec3(1);\n    for (float i=0.;i<14.+ min(float(iFrame),0.);i++) {\n        \n        vec2 uu = uv;\n        uu.x *= .1;\n        uu.y *= 1.;\n        if(mod(i, 4.) == 0.)\n        \tcolor *= xor(uu.x, uu.y)*20.5 - 50.;\n        doFolds(uv,invCent,invRad,n);\n    }\n    color = clamp(color, 0., 1.);\n    //color *= hsv2rgb(vec3(fract(float(n)/4.)/2.4,1.,1.-float(n)/60.));\n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    \n    float aa = 7.;\n    \n    for(float i =0.; i < aa*aa + float(min(iFrame,0)); i++){\n    \tcol += color(fragCoord + vec2(mod(i,aa),floor(i/aa))/aa);\n    }\n    col /= aa*aa;\n    \n    \n    col = max(col, 0.);\n\t//col = pow(col, vec3(0.4545));\n    \n    col = 1. - col;\n    \n    fragColor = vec4(col,1.0);\n}\n\n\n\n/*\n\n\nvoid fold(inout vec2 p, vec2 dir,inout int n){\n    float dt = dot(p,dir);\n    if (dt<0.) {\n        p-=2.*dt*dir;\n        n++;\n    }\n}\nvec2 cInverse(vec2 z, vec2 center, float radius){\n    z -= center;\n    return z*radius*radius/dot(z,z) + center;\n}\nvoid fold_circle(inout vec2 z, vec2 c, float r, inout int n) {\n    if (distance(z,c)>r) return;\n    z = cInverse(z,c,r);\n    n++;\n}\nvec3 drawCircle(vec2 z,vec2 c,float r) {\n    return vec3(smoothstep(distance(z,c)-r,.01,0.));\n}\nvoid doFolds(inout vec2 z,vec2 c,float r,inout int n) {              \n    fold(z,vec2(1,0),n);\n    fold(z,vec2(0,1.),n);\n    fold_circle(z,c,r,n);\n}\nfloat xor(float a, float b){return float(int(a) ^ int(b));}\n\n// Standard spiral zoom.\nvec2 spiralZoom(vec2 p, vec2 offs, float n, float spiral, float zoom, vec2 phase){\n\t\n\tp -= offs;\n\tfloat a = atan(p.y, p.x)/6.283 + iTime/32.;\n\tfloat d = length(p);\n\t//return vec2(a*n + log(d)*spiral, -log(d)*zoom + a) + phase;\n    // Equivalent to the line above. Fabrice tidied it up. I'd imagine the grouped\n    // operations might make it a little quicker, but don't quote me on that. :)\n    return mat2(n, 2, spiral,-zoom)*vec2(a, log(d)) + phase;\n\n}\n\nvec3 color(vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    uv *= 1. - dot(uv,uv)*0.2;\n    uv *= 3.4;\n    int n=0;\n    vec2 invCent=vec2(1.); float invRad=1.41;\n    vec3 color = vec3(1);\n    \n    uv = spiralZoom(uv, vec2(-.3), 4., 3.14159*.2,0.9, vec2(-4, 4)*iTime*.125);\n\n    \n    vec2 suv = uv;\n    float md = 1.;\n    vec2 id = floor(uv/md);\n    uv = mod(uv, md) - md*0.5;\n    \n    \n    for(int i = 0; i < 1; i++){\n    \tuv = abs(uv);\n        \n        uv -= 0.6 + sin(uv.y*10. + length(uv)*9. + iTime*2.4)*0.3;\n        uv -= 0.0 + sin(uv.y*10. + length(uv)*1. + iTime*0.4)*0.1;\n    \n    }\n    \n    color = vec3(1);\n    for (float i=0.;i<14.+ min(float(iFrame),0.);i++) {\n        \n        vec2 uu = uv;\n        uu.x *= 1.;\n        uu.y *= 1.;\n        if(mod(i, 3.) == 0.)\n        \tcolor *= xor(uu.x, uu.y)*20.5 - 10.;\n        doFolds(uv,invCent,invRad,n);\n    }\n    color = clamp(color, 0., 1.);\n    \n    //color *= hsv2rgb(vec3(fract(float(n)/4.)/2.4,1.,1.-float(n)/60.));\n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    \n    float aa = 4.;\n    \n    for(float i =0.; i < aa*aa + float(min(iFrame,0)); i++){\n    \tcol += color(fragCoord + vec2(mod(i,aa),floor(i/aa))/aa);\n    }\n    col /= aa*aa;\n    \n    \n    col = max(col, 0.);\n    \n    \n\t//col = pow(col, vec3(0.4545));\n    \n    col = 1. - col;\n    \n    fragColor = vec4(col,1.0);\n}\n*/\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define pi acos(-1.)\n#define tau (2.*pi)\n#define TT (tau*t)\n#define tt (tau*t)\n\n#define S vec2 s = vec2(0);\n#define E return s;\n\n#define OFFS (msr*2. + bar*8.*1.*6./8.)*0.\n\nfloat[] probK = float[16](0.1,0.9,0.1,0.9,0.4,0.9,0.1,0.3,0.9,0.4,0.9,0.,0.9,0.1,0.4,0.5);\nbool[] pattK = bool[16](F,F,F,T,F,T,T,F,T,F,F,T,F,T,T,F);\nbool[] pattL = bool[16](T,T,F,T,T,T,T,F,T,F,F,T,F,T,T,F);\nbool[] pattS = bool[8](F,T,F,T,F,T,F,T);\n\n\nbool[] pattBa = bool[8](T,T,F,T,F,T,F,T);\nbool[] pattB = bool[8](T,T,T,T,T,T,T,T);\nint[] notesB = int[8](0,1,2,3,0,1,2,3);\n\nconst vec4 cmin9 = vec4(0.,3.,7.,14.);\nconst vec4 cmin7 = vec4(0.,3.,7.,10.);\nconst vec4 cmaj9 = vec4(0.,4.,7.,14.);\nconst vec4 cmaj7 = vec4(0.,4.,7.,11.);\nconst vec4 cmaj14 = vec4(0.,4.,11.,12. + 7.);\nconst vec4 cmaj7f15 = vec4(0.,4.,6.,11.);\nconst vec4 cmaj7d = vec4(0.,4.,7.,10.);\nconst vec4 cmin7maj = vec4(0.,3.,7.,11.);\n\nconst int chordCnt = 8;\n\nvec4[] chords = vec4[chordCnt](\n    cmaj7f15,\n    cmin9 + 2.,\n    cmaj7f15 - 2.,\n    cmaj7 + 3.,\n    cmaj14 - 3.,\n    cmaj7f15 + 3.,\n    cmin9 + 2. - 4.,\n    cmaj7f15 - 4.\n);\n\nvec4[] chordsb = vec4[chordCnt](\n    cmin9,\n    cmaj7 + 1.,\n    cmaj7f15 - 2.,\n    cmaj7 - 3.,\n    cmaj14 - 2.,\n    cmaj7f15 + 3.,\n    cmaj9 - 1.,\n    cmaj7f15 - 4.\n);\nvec4[] chordsa = vec4[chordCnt](\n    cmin9,\n    cmaj7f15 - 2.,\n    cmaj9 - 3.,\n    cmin7maj - 5.,\n    cmaj14 - 2.,\n    cmaj7f15 + 3.,\n    cmaj9 - 1.,\n    cmaj7f15 - 2.\n);\nfloat note(float note, float octave){ \n\treturn 27.5*exp2(((octave*12. ) + note )/12.);//pow(2., );\n}\n\nvec4 r11(float x){return texture(iChannel0,vec2(x)/256.);}\nvec2 hash22(vec2 p)\n{\n    p  = fract(p * vec2(5.3983, 5.4427));\n    p += dot(p.yx, p.xy +  vec2(21.5351, 14.3137));\n    return fract(vec2(p.x * p.y * 95.4337, p.x * p.y * 97.597));\n}\n\nvec2 noise(float t)\n{\n    return hash22(vec2(t, t * 1.423)) * 2.0 - 1.0;\n}\n\nvec2 lpnoise(float t, float fq)\n{\n    t *= fq;\n\n    float ft = fract(t);\n    float tn = t - ft;\n    ft = smoothstep(0.0, 1.0, ft);\n\n    vec2 n0 = noise(floor(tn + 0.0) / fq);\n    vec2 n1 = noise(floor(tn + 1.0) / fq);\n\n    return mix(n0, n1, ft);\n}\n\n#define bitreduction(s,amt) s = sign(s) * floor(abs(s)/amt)*amt\n#define sampleratereduction(t, amt) t = floor(t/amt)*amt\n\n\nvec2 kick(float t, inout float sc){\n\tinit;\n\t\n    //sampleratereduction(t, 0.00001);\n    \n    float md = beat/4.;\n    float pl = 16.;\n    t = mod(t, md*pl);\n    float idx = floor(t/md);\n    t = mod(t, md);\n    \n    float env = exp(-t*40.7);\n    s += sin((exp2(-t*80.1)*340. + 30.)*tt )*env;\n    \n    s = mix(s,sin(s*3.)*1., 0.9);\n    \n    \n    bitreduction(s, 0.001);\n    \n    //s = sign(s)*smoothstep(0.,1.,abs(s));\n    \n    \n    s = clamp(s,-1., 1.);\n    \n    \n    float att = float(pattK[int(idx)]);\n    s *= att;\n    sc = 1. - pow(env, 0.15)*att;\n    sc = smoothstep(0.,1.,sc);\n    ret;\n}\n\nvec2 snarea(float t){\n\n    init;\n    \n    \n    sampleratereduction(t, 0.00001);\n    float md = beat;\n    float pl = 8.;\n    t = mod(t, md*pl);\n    float idx = floor(t/md);\n    t = mod(t, md);\n    \n    \n    vec2 nn = lpnoise(t, 400.);\n    nn += lpnoise(t, 5000.)*0.9;\n    nn += lpnoise(t, 16500.)*0.45;\n    \n    float amt = 1.;\n    float env = exp(-t*30.);\n    //float f = (400. + exp(-t*50.)*600.)*tt;\n    float f = (300./1. + exp(-t*14.)*1100.  )*tt;\n    s += sin( f + nn.x*0.2)*env;\n    s += sin( f*2.5 + nn.y*4.6)*pow(env, 0.8)*0.7;\n    s += sin( pow(f, 1.01)*4. )*env*0.3;\n    \n    \n    \n    s += sin( f*1.5 )*env*0.1;\n    s *= 0.2;\n    bitreduction(s, 0.001);\n    //s += sin( f*2. )*env*0.1;\n    \n    s *= float(pattS[int(idx)]);\n    ret;\n}\nvec2 snare(float t){\n\tinit;\n    \n    \n    float md = beat;\n    float pl = 8.;\n    t = mod(t, md*pl);\n    float idx = floor(t/md);\n    t = mod(t, md);\n    \n    float env = exp(-t*70.);\n    \n    vec2 n =lpnoise(t,2000.5);\n    vec2 nb =lpnoise(t,22000.5);\n    float f = 300.+ 300.*exp2(-t*26.)+ n.x*4.5 ;\n    \n    \n    s += sin(f*tt + n.x*0.25 + nb.x*0.2*exp(-t*20.))*env;\n    s += sin(f*tt*4. + n.x*0.25 + nb.x*4.2*exp(-t*10.))*pow(env, 0.8)*0.03;\n    \n    s += (n + nb)*0.04*exp(-t*19.);\n    \n    \n    s *= float(pattS[int(idx)]);\n    ret;\n}\n\nvec2 lead(float t){\n\tinit;\n\t\n    //sampleratereduction(t, 0.0004);\n    sampleratereduction(t, 0.00002);\n    float to;\n    vec2 nn = lpnoise(t, 600.);\n    nn += lpnoise(t, 500.)*0.9;\n    nn += lpnoise(t, 2500.)*0.45;\n    nn += lpnoise(t, 5500.)*0.1;\n    \n    \n    vec2 id;\n    float r = bar;\n    t = mod(t, r*float(chordCnt));\n    \n    id.x = floor(t/r);\n    \n    t = mod(t,bar);\n    float reps = 32./4.;\n    id.y = floor(t/(bar/reps));\n    \n    id.y = mod(id.y, 4.);\n    \n    t = mod(t,bar/reps);\n    \n    \n    float amt = 1.;\n    float env = exp(-t*2.4);\n    \n    \n    \n\tfloat n = chords[int(id.x)][int(id.y)];\n    \n    //n += floor(id.y/4.)*12.;\n    \n    float oct = 4.;\n    s += sin( note(n, oct) *tt +sin(note(n, 8.) *tt)*exp(-t*20.)*0.05 )*env;\n    s += sin( note(n, oct) *tt +sin(note(n, 8.) *tt)*exp(-t*20.)*0.05 + nn*0.4)*env;\n    s -= sin( note(n, oct) *tt +sin(note(n, 8.) *tt)*exp(-t*20.)*0.05 )*env;\n    \n    \n    //s += sin(f + sin(2000.*tt)*exp(-t*20.))*env;\n    \n    bitreduction(s, 0.008);\n    s *= float(pattL[int(id.y)]);\n    \n    //s += sin( f )*env;\n    //s += amt*sin( f + nn*0.5 )*env;\n    //s -= amt*sin( f )*env;\n    \n    s *= 0.7;\n    ret;\n}\n\nvec2 bass(float t){\n\tinit;\n\t\n    float to;\n    \n    \t\n    //sampleratereduction(t, 0.001);\n    vec2 id;\n    float r = bar;\n    t = mod(t, r*4.);\n    \n    id.x = floor(t/r);\n    \n    t = mod(t,r);\n    float reps = 32. / 2.;\n    id.y = floor(t/(bar/reps));\n    \n    id.y = mod(id.y, 4.);\n    \n    t = mod(t,bar/reps);\n    \n    \n    float env = exp(-t*9.4);\n    \n    \n    \n\tfloat n = chords[int(id.x)][int(id.y)];\n    \n    //n += floor(id.y/4.)*12.;\n    \n    s += sin( note(n, 1.) *tt \n             +sin(note(n, 2.) *tt + \n             \t+sin(note(n, 4.) *tt)*exp(-t*4.)*0.9\n                 \n                 )*exp(-t*9.)*1. \n             +sin(note(n, 1.) *tt + \n             \t+sin(note(n, 2.) *tt)*exp(-t*4.)*0.1 \n                 \n                 )*exp(-t*9.)*1.5\n            )*env;\n    \n    \n    s *= 1.;\n    \n    \n    //bitreduction(s, 0.3);\n    //s *= float(pattL[int(id.y)]);\n    \n    //s += sin( f )*env;\n    //s += amt*sin( f + nn*0.5 )*env;\n    //s -= amt*sin( f )*env;\n    \n    s *= 0.7;\n    ret;\n}\n\n\n\nvec2 chord(float t){\n\tinit;\n    \n    \n    float r = bar;\n    t = mod(t, r*float(chordCnt));\n    int id = int(floor(t/r));\n    \n    sampleratereduction(t, 0.00004);\n    \n    vec2 nn = lpnoise(t, 400.);\n    nn += lpnoise(t, 500.)*0.9;\n    nn += lpnoise(t, 8500.)*0.45;\n    \n    nn *= 0.05*sin(t);\n    float m = 1.;\n    float width = 10.;\n    s += sin( note(chords[id][1], 3.) *tt + nn.x*4.);\n    s += sin( note(chords[id][1], 3.) *tt + nn.x*4.);\n    float oct = 3.;\n    for(float i = 0.; i < 8. + min(t, 0.); i++){\n        float a = (1. + i/2.);\n    \t//s += sin( note(chords[id].x, 3.) *tt + nn.x)*m;\n    \ts.x += sin( note(chords[id].x, oct) *tt*a + nn.x)*m;\n    \ts.x += sin( note(chords[id].y, oct) *tt*a + nn.x)*m;\n    \ts.x += sin( note(chords[id].z, oct) *tt*a + nn.x)*m;\n    \ts.x += sin( note(chords[id].w, oct) *tt*a + nn.x)*m;\n    \ts.y += sin( note(chords[id].x, oct) *tt*a + nn.y + width)*m;\n    \ts.y += sin( note(chords[id].y, oct) *tt*a + nn.y + width)*m;\n    \ts.y += sin( note(chords[id].z, oct) *tt*a + nn.y + width)*m;\n    \ts.y += sin( note(chords[id].w, oct) *tt*a + nn.y + width)*m;\n    \tm *= 0.5;\n    }\n    \n    bitreduction(s, 0.4);\n    \n    s *= 0.03;\n    s = sin(s*3.);\n    //s /= 2.;\n    //s = sin(s);\n\tret;\n}\n\n\nvec2 hats (float t){\n\tinit;\n\t\n    t = mod(t + 0., hbeat*0.5);\n    \n    sampleratereduction(t, 0.00005);\n    vec2 nn = lpnoise(t, 400.);\n    nn += lpnoise(t, 500.)*0.9;\n    nn += lpnoise(t, 2500.)*0.45;\n    nn += lpnoise(t, 1500.)*0.4;\n    \n    float amt = 0.2;\n    float env = exp(-t*95.4);\n    float f =  sin((12000. )*tt)*exp(-t*0.4)*0.215 +sin((3000. )*tt)*exp(-t*2.)*0.5 + ( 2000. + exp(-t*60.)*100.)*tt +lpnoise(t, 200500.).x*1.;\n    s += sin( f )*env;\n    s += amt*sin( f + nn )*env;\n    s -= amt*sin( f )*env;\n    \n    bitreduction(s, 0.4);\n    s *= 0.5;\n    ret;\n}\nvec2 hatsb (float t){\n\tinit;\n\t\n    t = mod(t + 0., hbeat/0.5);\n    \n    vec2 nn = lpnoise(t, 400.);\n    nn += lpnoise(t, 500.)*0.9;\n    nn += lpnoise(t, 2500.)*0.45;\n    nn += lpnoise(t, 5500.)*0.4;\n    \n    float amt = 1.;\n    float env = exp(-t*2.4);\n    float f =  sin(\n        (2000. )*tt)*exp(-t*0.4)*0.215 \n        +sin((9000. )*tt)*exp(-t*2.)*0.5 \n        + ( 2250. + exp(-t*60.)*100.)*tt +lpnoise(t, 200500.).x*1.;\n    s += sin( f )*env;\n    s += amt*sin( f + nn )*env;\n    s -= amt*sin( f )*env;\n    \n    float bitreduction = 0.75;\n    s = sign(s) * floor(abs(s)/bitreduction)*bitreduction;\n    \n    s *= 0.7;\n    ret;\n}\nvoid initKickPatt(float t){\n\t\n    float r = beat/4.;\n    \n    float id = floor(t/r);\n    \n    \n    for(int i = 0; i < 16; i++){\n        \n        vec4 r = r11(id + float(i));\n        \n    \tpattK[i] = r.x < probK[i];\n        \n    }\n}\nvec2 mainSound( in int samp, float t )\n{\n    t += OFFS;\n    //t += msr*4.;\n    vec2 s= vec2(0);\n    \n    initKickPatt(t);\n    \n    float sc;\n    \n    vec2 k = kick(t,sc)*1.;\n    vec2 sn = snare(t);\n    \n    vec2 ha = hats(t)*(pow(sc,4.4))*0.2;\n    vec2 hb= hatsb(t)*(pow(sc,4.4))*0.1;\n    vec2 bass = bass(t)*(pow(sc,1.4))*0.4;\n    vec2 c = chord(t)*(pow(sc,1.5))*0.5;\n    vec2 l = lead(t)*(pow(sc,0.9))*0.1;\n    \n    \n    if(t < msr){\n    \ts += l;\n        s += c;\n    \n    } else if (t < msr*2.){\n    \ts += l;\n        s += hb;\n        if(t > msr*1.75){\n        \ts += k;\n        \ts -= hb;\n        \ts -= ha;\n        }\n        \n    } else {\n    \n        s += k;\n        s += sn;\n        s += ha;\n        s += hb;\n        s += bass;\n        s += l;\n        s += c;\n    }\n    \n    s *= 0.4;\n    \n    s = mix(s,sign(s)*smoothstep(0.0,1.,abs(s)), (0.5 + sin(t)*0.)*1.);\n    s = clamp(s,-1.,1.);\n    \n    //s *= smoothstep(0.,1.,t*0.5);\n    return s;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}