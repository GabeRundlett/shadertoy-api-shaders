{
    "Shader": {
        "info": {
            "date": "1670676057",
            "description": "Lots of overstepping and very slow :)))\n\nIncrements ray direction in constant amounts. You can distort the ray direction as it moves which is cool",
            "flags": 0,
            "hasliked": 0,
            "id": "mdjXzc",
            "likes": 27,
            "name": "3D Noise Visual 2",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "noise",
                "kinda"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 280
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 180\n\nfloat map(vec3 p) {\n    vec3 q  = vec3(0);\n   \n    //float a = 0.1;\n    //p += mod(p + a, 2. * a) - a;\n    p *= 0.7;\n   \n    q = texture(iChannel0, 0.25 * p).rgb;\n    q = mix(q, texture(iChannel0, 0.5 * p.yzx).rgb, 0.5);\n    q = mix(q, texture(iChannel0, p.zyx).rgb, 0.25);\n    q = mix(q, texture(iChannel0, 2. * p).rgb, 0.125);\n    return clamp(q.z, 0., 1.);\n}\n\n// overstepping past edges/corners maybe inevitable\nvec4 march(vec3 ro, vec3 rd) {\t\n    float d = 0.;\n    int steps = MAX_STEPS;\n    float o = pi/3.;\n    vec3 off = thc(2., vec3(-o,0,o) + 0.15 * iTime);\n    //off = normalize(off);\n    vec3 p = ro;\n    float inc = 0.005;\n    for(int i = 0; i < MAX_STEPS; i++) {\n       p = ro + off * rd * d;\n       float dd = map(p);\n       rd = erot(rd, off, 0.01 * cos(8. * d + 0.2 * iTime));            \n       d += inc;      \n       \n       \n       if (1.5 * dd < d * (0.99 + 0.02 * hash(p.x,hash(p.y,p.z)))) {\n           steps = i;\n           //inc *= 0.8; // remove break, use linear filter\n           break;\n       }\n       //*/\n       \n       // slower but less overstepping\n       /*if (1.5 * dd < d) { \n           steps = i;\n           for (int j = 0; j < 4; j++) {\n               d -= 0.25 * inc;\n               p -= 0.25 * inc * rd;\n               dd = map(p);\n               if (1.5 * dd > d)\n                   break;\n           }\n           break;\n       }\n       //*/\n       \n    }    \n    return vec4(p, steps);\n}\n\nvec3 dir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvec3 norm(vec3 p) {\n\tfloat d = map(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        map(p-e.xyy),\n        map(p-e.yxy),\n        map(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    //uv = fract(2. * uv) - 0.5;\n\n    vec3 off = 0.15 * iTime * vec3(1, 0.9, 0.95);   \n    vec3 ro = 1. - off;\n    vec3 rd = dir(uv, ro, -off, 1.);\n\n    vec4 m = march(ro, rd);   \n    vec3 p = m.xyz;\n    \n    // d != distance travelled, since rd gets distorted\n    float d = length(p - ro); \n  \n    vec3 n = norm(p);\n\n    vec3 ld = normalize(vec3(1,2,3));\n    float dif = .9 + .1 * dot(n,ld);\n    \n    vec3 col = pal(0.25 + 0.4 * mlength(p), 0.5 * vec3(0,1,2)/3.);\n    // col = vec3(map(p + vec3(0,0.01,0)));\n    \n    // fog\n    // float xp = exp(.7-2.*d);\n    // xp = clamp(xp, 0., 1.);\n\n    // linear fog\n    float mx = m.w / float(MAX_STEPS);\n    mx = pow(mx, 3.);\n   \n    // using v as overstepping \"texture\", buggy\n    float v = mix(dif, 1., mx); \n    v = clamp(v, 0., 1.);       \n    col -= 0.12 * v;\n    \n    // fade to grey with fog\n    col = mix(col, vec3(.5,.5,1), mx);\n    \n    // fade to red with 1-fog (looks good without)\n    col = mix(col, vec3(1,0,0), max(0., 1.-2.*mx));\n    \n    // diffuse/shadowy stuff\n    // (this looks buggy because rays stop inside blocks, they \n    //  don't stop at the surface)\n    col *= 2. * map(p - 0.004 * rd);\n       \n    //float mx2 = pow(.5+.5*thc(4., (length(ro-p)) + pi/4.5), 64.);\n    //col = mix(col, vec3(1,0.8,1), mx2);\n    \n    // White square\n    float d2 = mlength(uv);\n    float k = 1. / iResolution.y;\n    float s2 = smoothstep(-k, k, -abs(-d2 + 0.45) + 2. * k);\n    col += tanh(.5*iTime) * .8 * s2 * smoothstep(-4.*k, 4.*k, d - 0.3);\n    \n    // gamma correction\n    col = clamp(col, 0., 1.);\n    col = pow(col, vec3(1./2.2));\t\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Thanks to (everyone I've copied code + ideas from):\n// TheArtOfCode - raymarching\n//  BlackleMori - hash, erot\n//      Sizertz - AO, shadow\n//        NuSan - materials\n//         Leon - raymarching hash trick\n//           iq - pal, smin, most things!\n\n#define tau 6.2831853071\n#define pi 3.1415926535\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define pal(a,b) .5+.5*cos(2.*pi*(a+b))\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat h21(vec2 a) { return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123); }\nfloat mlength(vec2 uv) { return max(abs(uv.x), abs(uv.y)); }\nfloat mlength(vec3 uv) { return max(max(abs(uv.x), abs(uv.y)), abs(uv.z)); }\n\n// Maybe remove this\nfloat sfloor(float a, float b) { return floor(b-.5)+.5+.5*tanh(a*(fract(b-.5)-.5))/tanh(.5*a); }\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) - k * h * (1. - h);\n}\n\nfloat smax(float a, float b, float k) {\n    float h = clamp(0.5 - 0.5 * (b - a) / k, 0., 1.);\n    return mix(b, a, h) + k * h * (1. - h); \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}