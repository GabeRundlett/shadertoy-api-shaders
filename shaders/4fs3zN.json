{
    "Shader": {
        "info": {
            "date": "1702829894",
            "description": "An attempt at writing a faster oklab mixing function, while limiting obvious artefacts.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4fs3zN",
            "likes": 0,
            "name": "Appoximate Oklab Mixing",
            "published": 3,
            "tags": [
                "approximation",
                "colorspace",
                "oklab"
            ],
            "usePreview": 0,
            "username": "krax",
            "viewed": 150
        },
        "renderpass": [
            {
                "code": "/*\n\n    Appoximate Oklab mixing\n    -----------------------\n\n    Oklab is a perceptually coherant colourspace (and tends to blend colours nicely).\n    https://bottosson.github.io/posts/oklab/\n\n    Unfortunatley, it's not exactly cheap to adhoc mix and it's gamut is too akward to be able\n    to reliably store textures with it.\n    \n    This is an attempt to write a fast(er) mixing function, by swapping the cbrt for a sqrt.\n\n    For the most part, it does seem reasonaly similar (and is ~26% cheaper).\n\n    A lot of the presentation layout is based off\n    * GM Shaders: OkLab by Xor (https://www.shadertoy.com/view/ct3Bzj)\n    \n   Bars:\n   * abs(oklab - approx) per channel\n   * oklab\n   * approx oklab\n   * linear mixing\n    \n*/\n\n\n// https://bottosson.github.io/posts/oklab/\nvec3 toLMS(vec3 x)\n{\n    return vec3(\n        dot(x, vec3(0.4122214708f, 0.5363325363f, 0.0514459929f)),\n        dot(x, vec3(0.2119034982f, 0.6806995451f, 0.1073969566f)),\n        dot(x, vec3(0.0883024619f, 0.2817188376f, 0.6299787005f))\n    );\n}\n\nvec3 fromLMS(vec3 x)\n{\n    return vec3(\n        dot(x, vec3( 4.0767416621f, -3.3077115913f,  0.2309699292f)),\n        dot(x, vec3(-1.2684380046f,  2.6097574011f, -0.3413193965f)),\n        dot(x, vec3(-0.0041960863f, -0.7034186147f,  1.7076147010f))\n    );\n}\n\n// 6  x quater rate\n// 6  x half rate\n// 45 x full rate\n//    ~324 cycles\nvec3 oklabMix(vec3 a, vec3 b, float t)\n{\n    a = pow(toLMS(a), vec3(1./3.));\n    b = pow(toLMS(b), vec3(1./3.));\n    vec3 c = mix(a, b, t);\n    return fromLMS(c * c * c);\n}\n\n// 6  x quater rate\n// 36 x full rate\n//    ~240 cycles\nvec3 oklabMixApprox(vec3 a, vec3 b, float t)\n{\n    a = sqrt(toLMS(a));\n    b = sqrt(toLMS(b));\n    vec3 c = mix(a, b, t);\n    return fromLMS(c * c);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // A lot of this is based on\n    // GM Shaders: OkLab by Xor\n    // https://www.shadertoy.com/view/ct3Bzj\n    vec3 rgb1 = cos(floor(iTime)*vec3(4,7,8))*+.5+.5;\n    vec3 rgb2 = cos(round(iTime)*vec3(4,7,8))*-.5+.5;\n    \n    vec3 lin1 = pow(rgb1, vec3(2.2));\n    vec3 lin2 = pow(rgb2, vec3(2.2));\n    \n    vec3 linm = pow(mix(lin1, lin2, uv.x), vec3(1./2.2));\n    vec3 oklm = pow(oklabMix(lin1, lin2, uv.x), vec3(1./2.2));\n    vec3 oklam = pow(oklabMixApprox(lin1, lin2, uv.x), vec3(1./2.2));\n    \n    vec3 c = vec3(0.);\n    if(uv.y > .75)\n    {\n        float y = (uv.y - .75) / .25;\n        vec3 err = abs(oklm - oklam);\n        c.x = err.x > y ? 1. : 0.;\n        c.y = err.y > y ? 1. : 0.;\n        c.z = err.z > y ? 1. : 0.;\n        \n    }\n    c = (uv.y < .75) ? oklm  : c;  // oklab\n    c = (uv.y < .50) ? oklam : c;  // approx oklab\n    c = (uv.y < .25) ? linm  : c;  // linear\n\n    //Add border lines for demo\n    c *= min(abs(uv.y-.25)*iResolution.y*.5,1.)*.5+.5;\n    c *= min(abs(uv.y-.5)*iResolution.y*.5,1.)*.5+.5;\n    c *= min(abs(uv.y-.75)*iResolution.y*.5,1.)*.5+.5;\n\n    // Output to screen\n    fragColor = vec4(c,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}