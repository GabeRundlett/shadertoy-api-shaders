{
    "Shader": {
        "info": {
            "date": "1684523413",
            "description": "There is a consciousness outside time and beneath space. It is a labyrinthine tangle of desire and desperation. We have met it out there, where the void is tormented by gravity. But of course, we can live here forever - if the Worm will only wait...",
            "flags": 32,
            "hasliked": 0,
            "id": "ctGGWy",
            "likes": 29,
            "name": "Lascaille's Shroud",
            "published": 3,
            "tags": [
                "raymarching",
                "space",
                "nebula"
            ],
            "usePreview": 0,
            "username": "thepinkpanzer",
            "viewed": 465
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 raw   = texture(iChannel0, fragCoord/iResolution.xy);\n    vec4 bloom = texture(iChannel1, fragCoord/iResolution.xy);\n    vec4 psf   = texture(iChannel2, fragCoord/iResolution.xy);\n    \n    fragColor = tanh(psf*0.8+bloom*2.+0.3*raw);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI 3.14159\nfloat Sharp(float v, float n)\n{\n    v = 1.-v;\n    v*= v;\n    return max(0., 1.-n*v);\n}\nvec4 BackgroundColor(vec3 vd)\n{\n    vd = normalize(vd);\n    vec3  a = abs(vd);\n    float m = max(max(a.x, a.y), a.z);\n    vec2 uv;\n    if      (m == a.x)\n    {\n        uv = vec2(vd.z, vd.y);\n    }\n    else if (m == a.y)\n    {\n        uv = vec2(vd.x, vd.z);\n    }\n    else\n    {\n        uv = vec2(vd.x, vd.y);\n    }\n    vec4 col = vec4(0);\n    mat2 rot = mat2(vec2(0.8, 0.6), vec2(-0.6, 0.8));\n    uv *= rot;\n    vec4 r1  = texture(iChannel0, uv/4.);\n    uv *= rot;\n    vec4 r2  = texture(iChannel0, uv/2.);\n    uv *= rot;\n    vec4 r3  = texture(iChannel0, uv/1.);\n    \n    col += (vec4(1.0, 1.0, 1.0, 0)                              )*Sharp(r1.r*r1.b, 9.)*3.;\n    col += (vec4(0.4, 0.7, 1.0, 0) + vec4(0.6, 0.3, 0.0, 0)*r1.a)*Sharp(r1.g*r1.r, 9.)*3.;\n    col += (vec4(1.0, 0.8, 0.4, 0) + vec4(0.0, 0.2, 0.6, 0)*r1.a)*Sharp(r1.b*r1.g, 9.)*3.;\n    \n    col += (vec4(1.0, 1.0, 1.0, 0)                              )*Sharp(r2.r*r1.a, 4.);\n    col += (vec4(0.4, 0.7, 1.0, 0) + vec4(0.6, 0.3, 0.0, 0)*r2.a)*Sharp(r2.g*r1.b, 4.);\n    col += (vec4(1.0, 0.8, 0.4, 0) + vec4(0.0, 0.2, 0.6, 0)*r2.a)*Sharp(r2.b*r1.g, 4.);\n    \n    col += (vec4(1.0, 1.0, 1.0, 0)                              )*Sharp(r3.r*r1.a*r2.a, 2.)*0.5;\n    col += (vec4(0.4, 0.7, 1.0, 0) + vec4(0.6, 0.3, 0.0, 0)*r3.a)*Sharp(r3.g*r1.a*r2.a, 2.)*0.5;\n    col += (vec4(1.0, 0.8, 0.4, 0) + vec4(0.0, 0.2, 0.6, 0)*r3.a)*Sharp(r3.b*r1.g*r2.a, 2.)*0.5;\n    \n    return col;\n}\n// Checks if a ray (launched from position, in direction) hits a sphere (with radius) on the origin.\nbool SphereHit(float radius, vec3 position, vec3 direction)\n{\n    return (dot(position, direction)*dot(position, direction) > dot(direction, direction)*(dot(position, position)) - radius*radius);\n}\n// Calculates the distance to the far part of the sphere\nfloat SphereDist(float radius, vec3 position, vec3 direction)\n{\n    float d = -dot(position, direction) + sqrt(dot(position, direction)*dot(position, direction) - dot(direction, direction)*(dot(position, position) - radius*radius));\n    return d;\n}\nfloat SphereThrough(float radius, vec3 position, vec3 direction)\n{\n    float d = 2.*sqrt(dot(position, direction)*dot(position, direction) - dot(direction, direction)*(dot(position, position) - radius*radius));\n    return d;\n}\n// Calculates the normal on the surface of the sphere (equivalent to the position, for a unit sphere)\nvec3 SphereNormal(float radius, vec3 position, vec3 direction)\n{\n    return normalize(vec3(position + direction*SphereDist(radius, position, direction)));\n}\nfloat Density(vec3 position)\n{\n    position *= (1.+0.05*sin(iTime*0.5));\n    float r1 = texture(iChannel1, (position+vec3(0.1, 0.2, 0.3)*0.2*iTime)/6.).r;\n    float r2 = texture(iChannel1, (position+vec3(0.1, 0.2, 0.3)*0.5*iTime)/3.).g;\n    float r3 = texture(iChannel1, position/2.).b;\n    float r4 = texture(iChannel1, position/1.).a;\n    \n    float ra = texture(iChannel1, (position+vec3( 0.1, 0.04, 0.08)*0.2*iTime)/4.).g;\n    float rb = texture(iChannel1, (position+vec3(-0.1,-0.2, 0.1)*0.1*iTime)/6.).g;\n    ra *= ra;\n    rb *= rb;\n    float rq  = ((1.-ra) + (1.-rb))*pow(1.-dot(position, position), 1.3);\n    \n    float rt = r1 + r2 + r3 + r4;\n    rt+= smoothstep(0.9, 1.2, rq)*2.;\n    rt = exp(rt - 2.);\n    rt*= 1.-dot(position, position);\n    return rt;\n}\nvec4 Absorb(vec3 position, float density)\n{\n    float rsq = dot(position, position);\n    return vec4(0.3, 0.4, 0.6, 0)*density*density*2.;\n}\nvec4 SIC(vec3 position, float density)\n{\n    float rsq = dot(position, position);\n    vec4 col = mix(vec4(0.8, 0.7, 0.4, 0), vec4(0.2, 0.6, 0.9, 0), 2.*(rsq+0.1*sin(0.3*iTime)+0.5-exp(-density)))*(1.-0.2*sin(iTime*0.5));\n    return col;\n}\nvec4 Add(vec3 position, float density, float jumpedDensity)\n{\n    float rsq = dot(position, position);\n    vec4 selfIllum = SIC(position, density)*(1.-rsq)/(0.001+pow(rsq, 1.8))*0.1*(1.+3./pow(jumpedDensity, 2.));\n    vec4 extIllum  = mix(vec4(0.7, 0.4, 0.2, 0), vec4(1), rsq)*length(Absorb(position, density))*rsq*0.2;\n    return tanh((selfIllum + extIllum)/SELFABS)*SELFABS;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float theta = (iMouse.x - iResolution.x / 2.) / iResolution.y * PI;\n    float phi   = (iMouse.y - iResolution.y / 2.) / iResolution.y * PI;\n\n    // CAMERA\n    vec3 iCameraFwd     = vec3(sin(theta)*cos(phi),sin(phi),cos(theta)*cos(phi));\n    vec3 iCameraUp      = vec3(-sin(theta)*sin(phi),cos(phi),-cos(theta)*sin(phi));\n    vec3 iCameraRight   = normalize(cross(iCameraUp, iCameraFwd));\n    \n    vec3 iCameraPosition= -3.*iCameraFwd;\n    \n    float m = 1.0;\n    \n    vec3 iViewDirection = iCameraFwd + ((fragCoord.x - iResolution.x/2.0) * iCameraRight + (fragCoord.y - iResolution.y/2.0) * iCameraUp) / iResolution.x * m;\n    iViewDirection      = normalize(iViewDirection);\n    \n    float rmin= length(cross(iViewDirection, iCameraFwd));\n    fragColor = BackgroundColor(iViewDirection - (0.003/pow(rmin, 3.))*cross(cross(iViewDirection, iCameraFwd), iCameraFwd));\n    \n    if (SphereHit(1., iCameraPosition, iViewDirection))\n    {\n        vec3 startPos = iCameraPosition + iViewDirection*SphereDist(1., iCameraPosition, iViewDirection);\n        float marchDis= SphereThrough(1., iCameraPosition, iViewDirection);\n        for (float n = 0.; n < NJUMPS; n++)\n        {\n            vec3 pos = startPos - iViewDirection*marchDis*((n+0.5)/NJUMPS);\n            float density = Density(pos);\n            float jd      = sqrt(Density(pos*0.5)*Density(pos*0.8));\n            fragColor *= exp(-Absorb(pos, density    )*(marchDis/NJUMPS));\n            fragColor +=         Add(pos, density, jd)*(marchDis/NJUMPS);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "volume",
                        "id": 40,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(r) pow(texture(iChannel0, r), vec4(2.))\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 tot = vec4(0);\n    for (float i = -BLOOMSIZE; i < BLOOMSIZE; i++)\n    {\n        tot += T((fragCoord + vec2(1,0)*i)/iResolution.xy)*exp(-(4.*i*i)/(BLOOMSIZE*BLOOMSIZE));\n    }\n    fragColor = tot/(2.*BLOOMSIZE);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define T(r) pow(texture(iChannel0, r), vec4(2.))\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 tot = vec4(0);\n    for (float i = -BLOOMSIZE; i < BLOOMSIZE; i++)\n    {\n        tot += T((fragCoord + vec2(0,1)*i)/iResolution.xy)*exp(-(4.*i*i)/(BLOOMSIZE*BLOOMSIZE));\n    }\n    fragColor = tot/(2.*BLOOMSIZE);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define BLOOMSIZE 20.\n#define PSFSIZE   20.\n#define NJUMPS    50.\n#define SELFABS   10.",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define T(r) pow(texture(iChannel0, r), vec4(1.3))\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 tot = vec4(0);\n    for (float i = -PSFSIZE; i < PSFSIZE; i++)\n    {\n        tot += T((fragCoord + vec2(1,0)*i)/iResolution.xy)*(1.-i/PSFSIZE)*(1.+i/PSFSIZE)/sqrt(i*i+1.);\n    }\n    for (float i = -PSFSIZE; i < PSFSIZE; i++)\n    {\n        tot += T((fragCoord + vec2(0,1)*i)/iResolution.xy)*(1.-i/PSFSIZE)*(1.+i/PSFSIZE)/sqrt(i*i+1.);\n    }\n    fragColor = tot/(PSFSIZE);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}