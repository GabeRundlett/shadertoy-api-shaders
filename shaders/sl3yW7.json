{
    "Shader": {
        "info": {
            "date": "1659909848",
            "description": "didnt post in a while",
            "flags": 8,
            "hasliked": 0,
            "id": "sl3yW7",
            "likes": 8,
            "name": "slowly but surely",
            "published": 3,
            "tags": [
                "sound",
                "synth",
                "reverb",
                "riff",
                "glide",
                "fdn",
                "portamento"
            ],
            "usePreview": 0,
            "username": "nabr",
            "viewed": 333
        },
        "renderpass": [
            {
                "code": "// soundin shader by FabriceNeyret2\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110); // message \"Sound in\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n} // EOL soundin shader\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    float t = iTime;\n    if (iResolution.y<2000.) {float c=message(mod(U/iResolution.y*18.-vec2(3,iTime), vec2(18, 6)));if(c>=0.){O=vec4(fract(t)*c);return;}}\n\n    U = (U.xy*.5-iResolution.xy)/iResolution.y;\n    vec2 u = (mod(25.*U+float(iFrame%60), 2.)-1.) * mat2(cos(t), sin(t), -sin(t), cos(t));\n    float b = max(abs(u.x), abs(u.y));\n    if(b<1.&&mod(distance(t, b),.6)>.5)\n    O.xyz = vec3(.5);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define _f(_x) (fract(_x))\n\n// main glide synth\nfloat gldsnth(float t) \n{\n  float tt = t * 4., ft = mod(tt, 1.);\n  float p = mod(t, 16.) < 8.? 420. : vec2(420,123.5)[int(tt) & 1];\n  float y = sin(_f(t * (mod(t, 1.) > .25 ? 1. : 2.))\n                * (6.283185 * p + exp(5.001 * sin(4. * t)))) * exp(-2. * ft);\n  return tanh(clamp(7. * y, -1., .1) * min(1., 40.1 * ft) * max(0., 1. - ft));\n}\n\n//distorted\nvec2 snth( float t ) \n{\n    \n  float p, dt = t, dt1 = t;\n  t*=8.;\n  float ft = _f(t);\n  p = vec3(210, 330, 112)[int(t) & 3];\n  dt *= p;\n  dt1 *= .5 * p;\n  return vec2(_f(dt), _f(dt1)) * min(1., ft) * max(0., 1. - ft);\n}\n\nvec2 mainSound(int samp, float t) \n{\n  vec2 snth_rv = vec2(0), gldsnth_rv = vec2(0);\n  float dlt = t,\n   ft = mod(1. * t, 1.), //long tail rev, \n   toff=.2, //dist synth time offset\n   sldlt = .063,//scale delay var\n   y[4], y1[4], \n   hm[8], //its doing something\n   pm[8] = float[8](-1., -1., 1., -1., 1., -1., 1., 1.);//flip polarity - out of my head\n\n  for (int i = 0; i < (2*16); ++i) \n  {\n    int iaps = i % 8 ;\n   \n    for (int c = 0; c < 4; ++c) \n    {\n       float dp = (1./float(c)) * float(i / 6 % 8); // damping equally distributed\n       dlt += exp2(min(sldlt, dp)) * sldlt; \n       hm[iaps] = dlt;\n\n       y[c] = gldsnth(dlt);\n       y[c] *= pm[iaps];\n      \n       c % 4 == 0 ? y1[c] += snth(toff + dlt).x : y1[c] += snth(toff + dlt).y;\n       y1[c] *= pm[iaps];\n\n    }\n    dlt = hm[iaps];\n    hm[iaps] *= -2./8.;\n    \n    // mixdown stereo\n    float env =  exp(-.5 * ft) * min(1., 40.1 * ft) * max(0., 1. - ft);\n    int stps = i / 8 % 8; \n    snth_rv += vec2(y[stps], y[1 + stps]) * env;\n    gldsnth_rv += vec2(y1[stps], y1[1 + stps]) * env;\n\n  }\n\n  return.7*( .05 * snth_rv + .5 * (gldsnth(.5 * t) \n        + .7 * (mod(t, 12.) > 10. ? gldsnth(.1 - t) : gldsnth(t)))\n        + (mod(t, 18.) > 10. ? \n          snth( toff + t) \n        + vec2(.7, 1) * (abs(sin(2.*t)+.5)* snth( toff + .5 * t))\n        + .2 * gldsnth_rv : vec2(0)));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}