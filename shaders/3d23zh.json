{
    "Shader": {
        "info": {
            "date": "1548151818",
            "description": "Circular escalators (they do exist); mouseable.",
            "flags": 0,
            "hasliked": 0,
            "id": "3d23zh",
            "likes": 9,
            "name": "Escalator",
            "published": 3,
            "tags": [
                "stairs"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 453
        },
        "renderpass": [
            {
                "code": "// \"Escalator\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  1   // optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nvec3 HexGrid (vec2 p);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltPos, qHit, vnBall;\nfloat tCur, dstFar, stSpd, rdDome;\nint idObj;\nconst int idStr = 1, idStrBd = 2, idStrWl = 3, idPil = 4, idPilB = 5, idBBase = 6,\n   idFnc = 7, idDome = 8;\nconst float pi = 3.14159, sqrt3 = 1.73205;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, stRad, stHt, stWid, wThk, d, s, a, az;\n  dMin = dstFar;\n  stRad = 12.;\n  stHt = 5.;\n  stWid = 2.5;\n  wThk = 0.1;\n  az = atan (p.z, - p.x);\n  q = p;\n  s = rdDome;\n  qq.xz = mod (64. * vec2 (az, asin (q.y / length (q))) / (2. * pi) +\n     vec2 (0., 0.5), vec2 (1.));\n  if (q.y < 0.99 * rdDome) s -= 0.5 * max (SmoothBump (0.45, 0.55, 0.05, qq.x),\n     SmoothBump (0.45, 0.55, 0.05, qq.z));\n  d = - 0.8 * PrSphDf (q, s);\n  DMINQ (idDome);\n  p.y -= stHt;\n  qq = p;\n  qq.z = abs (qq.z) - 3.;\n  qq.xz = Rot2D (qq.xz, 0.25 * pi);\n  a = atan (qq.z, - qq.x) / pi;\n  qq = vec3 (25. * a, p.y, length (qq.xz) - stRad);\n  q = qq;\n  q.xy = Rot2D (q.xy, 0.25 * pi);\n  d = max (max (q.y - 0.5 + abs (mod (q.x + stSpd * sign (p.z) * tCur, 1.) - 0.5), -1. - q.y),\n     abs (q.z) - stWid);\n  d = 0.7 * max (d, abs (p.y) - stHt);\n  DMINQ (idStr);\n  q = qq;\n  q.xy -= vec2 (-0.5 * stRad, stHt - wThk);\n  d = PrBoxDf (q, vec3 (1., wThk, stWid));\n  DMINQ (idStr);\n  q = qq;\n  q.xy -= vec2 (0.5 * stRad, - stHt + wThk);\n  d = PrBoxDf (q, vec3 (1., wThk, stWid));\n  DMINQ (idStr);\n  q = p;\n  q.z = abs (q.z);\n  q -= vec3 (- stRad, stHt - wThk, 1.5);\n  d = PrRoundBoxDf (q, vec3 (stWid + 0.05, 0.07, 1.5), 0.05);\n  DMINQ (idStrBd);\n  q = p;\n  q.z = abs (q.z);\n  q -= vec3 (0.7, - stHt + 0.05, stRad + 3.);\n  d = PrRoundBoxDf (q, vec3 (0.7, wThk, stWid), 0.05);\n  DMINQ (idStrBd);\n  q = qq;\n  q.xy = Rot2D (q.xy, 0.25 * pi);\n  q.z = abs (q.z);\n  q.yz -= vec2 (0.6, stWid + 0.1);\n  d = PrRoundBox2Df (q.yz, vec2 (1.6, 0.05), 0.05);\n  d = max (max (d, p.x), 3. - abs (p.z));\n  q.xy = Rot2D (qq.xy, 0.25 * pi);\n  d = max (d, - max (PrBox2Df (vec2 (mod (24. * a + 0.25, 0.5) - 0.25, q.y - 1.2),\n     vec2 (0.125, 0.7)), 0.89 - dot (normalize (vec2 (p.x, abs (p.z))), vec2 (-0.527, 0.85))));\n  d = max (max (d, abs (p.y) - stHt - 2.6), - p.y - stHt);\n  DMINQ (idStrWl);\n  q = p;\n  q.x = abs (q.x + stRad);\n  q.xy -= vec2 (stWid + 0.1, stHt + 1.2);\n  d = PrBoxDf (q, vec3 (0.1, 1.4, 3.));\n  d = max (d, - PrBox2Df (vec2 (q.y - 0.1, mod (p.z + 0.4, 0.8) - 0.4), vec2 (1., 0.2)));\n  DMINQ (idStrWl);\n  q = p;\n  q.z = abs (q.z);\n  q -= vec3 (0.7, - stHt + 0.955, stRad + 3.);\n  q.z = abs (q.z) - stWid - 0.1;\n  d = PrBoxDf (q, vec3 (0.7, 0.955, 0.1));\n  DMINQ (idStrWl);\n  q = p;\n  q.x -= - stRad;\n  q.xz = abs (q.xz) - vec2 (1.5, 2.3);\n  d = PrCylDf (q.xzy, 0.4, stHt);\n  DMINQ (idPil);\n  q.y -= - stHt + 0.2;\n  d = PrCylDf (q.xzy, 0.6, 0.2);\n  DMINQ (idPilB);\n  q = p;\n  q.y -= - stHt + 0.1;\n  d = PrCylDf (q.xzy, 0.5 * stRad, 0.1);\n  DMINQ (idBBase);\n  q = p;\n  q.y -= - stHt + 1.5;\n  q.y = abs (q.y) - 0.5;\n  d = PrTorusDf (q.xzy, 0.08, 22.);\n  q = p;\n  q.y -= - stHt + 1.;\n  q.xz = Rot2D (q.xz, 2. * pi * (floor (32. * az / (2. * pi)) + 0.5) / 32.);\n  q.x += 22.;\n  d = min (d, PrCylDf (q.xzy, 0.08, 1.));\n  DMINQ (idFnc);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0002, -0.0002);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat BallHit (vec3 ro, vec3 rd, float rad)\n{\n  float b, d, w;\n  d = dstFar;\n  b = dot (rd, ro);\n  w = b * b - dot (ro, ro) + rad * rad;\n  if (w > 0.) {\n    d = - b - sqrt (w);\n    if (d > 0. && d < dstFar) vnBall = (ro + d * rd) / rad;\n    else d = dstFar;\n  }\n  return d;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.05, 0.5);\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec4 FloorCol (vec2 p)\n{\n  vec4 col4;\n  vec3 qh;\n  float f;\n  qh = HexGrid (p);\n  f = Hashfv2 (17.3 * PixToHex (p));\n  col4 = mix (vec4 (0.4, 0.1, 0.2, 0.2), vec4 (0.25, 0.1, 0., 0.1),\n     Fbm2 (vec2 (3., 1.) * Rot2D (qh.xy, 2. * pi * floor (6. * f) / 6.) + 37.3 * f)) *\n     (1. - 0.2 * smoothstep (0.03, 0.06, qh.z));\n  return col4;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, ror, ltDir;\n  vec2 b;\n  float dstObj, dstBall, vdl, s, sh, att;\n  bool isRefl;\n  dstBall = BallHit (ro + vec3 (0., 10.4, 0.), rd, 12.);\n  dstObj = ObjRay (ro, rd);\n  isRefl = false;\n  ror = ro + dstBall * rd;\n  if (dstBall < min (dstObj, dstFar) && ror.y > 0.) {\n    isRefl = true;\n    ro = ror;\n    rd = reflect (rd, vnBall);\n    ro += 0.01 * rd;\n    dstObj = ObjRay (ro, rd);\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idDome) {\n      col4 = (qHit.y < 0.99 * rdDome && length (qHit) > rdDome - 0.1) ?\n         vec4 (0., 0., 0.4, -1.) : vec4 (0.1, 0.7, 0.1, 0.1);\n    } else if (idObj == idStr) {\n      col4 = vec4 (0.8, 0.8, 0.85, 0.4);\n      s = 1.;\n      if (vn.y > 0.99) {\n        b = ro.xz - vec2 (0., 3. * sign (ro.z));\n        s = mod (4. * length (b), 1.);\n        col4 *= 0.4 + 0.6 * SmoothBump (0.2, 0.8, 0.05, s);\n        vn.xz = 0.3 * normalize (b) * (SmoothBump (0.75, 0.95, 0.05, s) -\n           SmoothBump (0.05, 0.25, 0.05, s));\n        vn.y = sqrt (1. - dot (vn.xz, vn.xz));\n        col4 = mix (vec4 (0., 0.1, 0., 0.), col4, step (0.007,\n           abs (mod (25. * sqrt (2.) * atan (ro.z - 3. * sign (ro.z), - ro.x) / pi +\n           0.15 * sign (ro.z), 1.) - mod (- stSpd * tCur, 1.))));\n      } else if (abs (vn.y) < 0.1) {\n        col4 = mix (0.9 * col4, vec4 (0.1, 0.8, 0.1, 0.5), SmoothBump (0.3, 0.7, 0.05,\n           mod (2. * qHit.z, 1.)));\n      } else {\n        col4 *= 0.7;\n      }\n    } else if (idObj == idStrBd) {\n      col4 = vec4 (0.8, 0.8, 0.85, 0.4);\n      if (qHit.y > 0.) {\n        if (ro.y < 5. || abs (ro.z) > 1.5) {\n          col4 *= 0.4 + 0.6 * SmoothBump (0.2, 0.8, 0.05, (mod (4. * \n             ((ro.y < 5.) ? qHit.z : qHit.x), 1.)));\n          col4 = mix (col4, vec4 (0.8, 0.1, 0.1, 0.3), step (0.,\n             (-1.05 + ((ro.y < 5.) ? 0.4 - qHit.x : qHit.z - 0.4))));\n        }\n      } else col4 *= 0.7;\n    } else if (idObj == idStrWl) {\n      col4 = vec4 (0.8, 0.8, 0.2, 0.5);\n      if (qHit.y > 2.2) col4 = mix (vec4 (0.1, 0.1, 0.2, 0.1), col4,\n         smoothstep (0.04, 0.06, abs (qHit.z)));\n      else if (abs (vn.y) < 0.01) vn = VaryNf (32. * ro, vn, 1.);\n    } else if (idObj == idPil) {\n      col4 = vec4 (0.8, 0.8, 0.2, 0.5);\n      s = mod (2. * qHit.y + ((length (qHit.xz) > 0.) ? atan (qHit.z, - qHit.x) / pi : 0.), 1.);\n      vn.y = 0.3 * (1. - SmoothBump (0.2, 0.8, 0.1, s)) * sign (s - 0.5);\n      vn.xz *= sqrt (1. - vn.y * vn.y);\n    } else if (idObj == idPilB) {\n      col4 = vec4 (0.8, 0.8, 0.2, 0.5);\n    } else if (idObj == idBBase) {\n      col4 = vec4 (0.5, 0.2, 0.1, 0.1);\n      vn = VaryNf (4. * qHit, vn, 1.);\n    } else if (idObj == idFnc) {\n      col4 = vec4 (0.6, 0.5, 0.1, 0.1);\n    }\n  } else {\n    ro += (- ro.y / rd.y) * rd;\n    s = length (ro.xz) - 15.1;\n    if (abs (s) < 2.55 && ro.x > 0.) col4 = vec4 (0.8, 0.8, 0.85, 0.4) *\n       (0.4 + 0.6 * SmoothBump (0.05, 0.95, 0.02, mod (s + 0.5, 1.)));\n    else col4 = FloorCol (ro.xz);\n    vn = vec3 (0., 1., 0.);\n  }\n  ltDir = normalize (ltPos);\n  att = 0.4 + 0.6 * smoothstep (0.5, 0.8, dot (normalize (ltPos - ro), ltDir));\n  if (col4.a >= 0.) {\n    sh = min (ObjSShadow (ro, ltDir), att);\n    vdl = dot (vn, ltDir);\n    col = col4.rgb * (0.2 + 0.1 * max (- vdl, 0.) +  step (0., vdl) * 0.8 * sh * vdl * vdl) +\n       col4.a * smoothstep (0.8, 0.9, sh) * pow (max (dot (normalize (ltDir - rd), vn), 0.), 32.);\n  } else col = col4.rgb;\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az, ltEl, ltAz, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = -0.5 * pi;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az -= 2. * pi * mPtr.x;\n    el -= 0.7 * pi * mPtr.y;\n  } else {\n    az += 0.4 * (floor (0.3 * tCur) + smoothstep (0., 0.1, mod (0.3 * tCur, 1.)));\n  }\n  el = clamp (el, -0.4 * pi, 0.01 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rdDome = 80.;\n  stSpd = 1.5;\n  ro = rdDome * vuMat * vec3 (0., 0.1, -0.95);\n  ro.y = max (ro.y, 0.1);\n  zmFac = 4. / (1. - 0.5 * SmoothBump (0.25, 0.75, 0.25, mod ((az + 0.5 * pi) / (2. * pi), 1.)));\n  dstFar = 2. * rdDome;\n  ltEl = -0.3 * pi * (1. + 0.3 * sin (0.2 * pi * tCur));\n  ltAz = 0.5 * pi * cos (0.3 * pi * tCur);\n  ltPos = vec3 (0., 0., 0.95 * rdDome);\n  ltPos.yz = Rot2D (ltPos.yz, ltEl);\n  ltPos.xz = Rot2D (ltPos.xz, ltAz);\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvec3 HexGrid (vec2 p)\n{\n  vec2 q;\n  p -= HexToPix (PixToHex (p));\n  q = abs (p);\n  return vec3 (p, 0.5 * sqrt3 - q.x + 0.5 * min (q.x - sqrt3 * q.y, 0.));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}