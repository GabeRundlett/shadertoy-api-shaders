{
    "Shader": {
        "info": {
            "date": "1586395548",
            "description": "A smiling emoji to help brighten up our dark days.\n\nA tutorial by 'Art of Code'",
            "flags": 0,
            "hasliked": 0,
            "id": "WdByDz",
            "likes": 5,
            "name": "Happy Emoji",
            "published": 3,
            "tags": [
                "beginner",
                "emoji"
            ],
            "usePreview": 0,
            "username": "GabrielFelix",
            "viewed": 371
        },
        "renderpass": [
            {
                "code": "float remap01(float minInput, float maxInput, float domain)\n{\n    return clamp( (domain - minInput) / (maxInput - minInput), 0., 1.); \n}\n\nfloat remap(float minInput, float maxInput, float minOutput, float maxOutput, float domain)\n{\n    //return minOutput * (1 - remap01) + maxOutput * remap01;\n    return remap01(minInput, maxInput, domain) * (maxOutput - minOutput) + minOutput;\n}\n\nvec2 bound(vec2 uv, vec4 boundingBox)\n{\n\treturn (uv - boundingBox.xy) / (boundingBox.zw - boundingBox.xy);\n}\n\nvec4 Head (vec2 uv)\n{\n   \t//Constants\n    float len = length(uv);\n    \n    vec4 mainCol = vec4(.9, .7, 0., 1.);\n    vec3 outlineCol = vec3(0.75, 0.5, 0.);\n    vec3 cheekCol = vec3(1., 0.1, 0.1);\n    \n    float radius = 0.5;\n    float cheekRadius = 0.2;\n    \n    float blur = 0.01;\n    float shadingAttenuation = 0.5;\n    \n    //mainCircle\n    mainCol.a = smoothstep(radius, radius - blur, len);\n    \n    //Adding radial gradient\n    float edgeShading = remap01(radius / 1.5, radius, len);\n    edgeShading *= edgeShading;\n    mainCol.rgb *= 1. - edgeShading * shadingAttenuation;\n    \n    //Adding outline\n    mainCol.rgb = mix(mainCol.rgb, outlineCol, smoothstep(radius - (blur * 3.), radius - (blur * 2.), len));\n    \n    //Adding highlights\n    float highlight = smoothstep(radius - (blur * 9.), radius - (blur * 9.5), len);\n    highlight *= remap(radius - (blur * 9.), -0.1 , 0.75, 0., uv.y);\n    mainCol.rgb = mix(mainCol.rgb, vec3(1.), highlight);\n    \n    //Adding cheeks\n    len = length(uv - vec2(.225, -.175));\n    float cheek = smoothstep(cheekRadius, cheekRadius * .2, len)  * .3;\n    cheek *= smoothstep( cheekRadius - (cheekRadius * 3.), cheekRadius - (cheekRadius * 2.), len);\n    mainCol.rgb = mix(mainCol.rgb, cheekCol, cheek);\n    \n \treturn mainCol;\n}\n    \nvec4 Eye(vec2 uv)\n{\n    uv -= .5;\n    //uv.y += uv.x * uv.x * cos(iTime); \n    \n    float len = length(uv);\n    float eyeRadius = 0.5;\n    float irisRadius = 0.3 ;\n    float pupilRadius = 0.15 * ( cos(iTime)   *0.5 + 1.25 );\n    float highlightRadius = 0.1;\n    float blur = 0.02;\n    \n    //base eye\n    vec3 irisCol = vec3(0.25, 0.25, 0.75);\n    vec4 mainCol = mix( vec4(1.) , vec4(irisCol, 1.) , smoothstep(.1, .7, len) * 0.5);\n    vec3 highlightCol = vec3(1.);\n    \n    //eye shadow\n    mainCol *= 1. - smoothstep(eyeRadius - (blur * 5.), eyeRadius, len) * .3 * clamp(-uv.y -uv.x, 0., 1.);\n    \n    //iris and outline\n    irisCol *= 1. + smoothstep(irisRadius, irisRadius * 0.1, len);\n    \n    mainCol.rgb = mix(mainCol.rgb, vec3(0.), smoothstep(irisRadius, irisRadius - blur, len));\n    mainCol.rgb = mix(mainCol.rgb, irisCol, smoothstep(irisRadius - blur, irisRadius - (blur * 2.), len));\n    \n    //pupil\n    mainCol.rgb = mix(mainCol.rgb, vec3(0.), smoothstep(pupilRadius, pupilRadius - blur, len));\n    \n    //highlighs\n    float highlight = smoothstep(highlightRadius, highlightRadius - (blur * 3.), length(uv - vec2(-.15, .15)));\n    highlight += smoothstep(highlightRadius/1.5, highlightRadius/1.5 - (blur * 3.), length(uv - vec2(.1, -.1)));\n    mainCol.rgb = mix(mainCol.rgb, highlightCol, highlight);\n    \n    //\n    mainCol.a = smoothstep(eyeRadius, eyeRadius - blur, len);\t\n    return mainCol;\n}\n\nvec4 Mouth(vec2 uv)\n{\n    uv -= .5;\n    uv.y *= ( cos(iTime ) * 0.25 + 1.75);//2, 1,5, \n    uv.x *= ( cos(iTime + 3.) * 0.5 + 1.5) ; //2, 1\n    uv.y -= uv.x * uv.x * (cos(iTime) + 1.);\n    float len = length(uv);\n    \n    vec4 mainCol = vec4(.5, .2, .1, .1);\n    float mouthRadius = 0.5;\n    float blur = 0.02;\n    \n    //teeth\n    float newLen = length(uv - vec2(0, 0.5));\n    vec3 teethCol = vec3(1.) * smoothstep(.6, .35, len);\n  \n    mainCol.rgb = mix(mainCol.rbg, teethCol, smoothstep(.4, .4 - blur, newLen));\n    \n    //tongue\n    newLen = length(uv - vec2(0, -0.5));\n    vec3 tongueCol = vec3(1., 0.1, 0.1);\n    \n   \tmainCol.rgb = mix(mainCol.rbg, tongueCol, smoothstep(.5, .1, newLen));\n    \n    mainCol.a = smoothstep(mouthRadius, mouthRadius - blur, len);\n    return mainCol;\n}\n\nvec4 Smiley (vec2 uv)\n{\n    vec4 col = vec4(0.);\n    \n    uv.x = abs(uv.x);\n    \n\tvec4 head = Head(uv);\n    vec4 eye = Eye( bound(uv, vec4(.03, -.1, .37, .25)) );\n    vec4 mouth = Mouth( bound(uv, vec4(-.3, -.4, .3, -.1)) );\n        \n    col = mix(col, head, head.a);\n    col = mix(col, eye, eye.a);\n    col = mix(col, mouth, mouth.a);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *=(cos(iTime + 3.) *0.5 + 1.5);\n\n    fragColor = vec4(Smiley(uv));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}