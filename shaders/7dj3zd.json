{
    "Shader": {
        "info": {
            "date": "1617845639",
            "description": "Inverse reflection for procedural 2D light. No randomly sampled rays and no explicitly drawn ones either. I'm trying to figure out how to do this for a sphere next.",
            "flags": 0,
            "hasliked": 0,
            "id": "7dj3zd",
            "likes": 8,
            "name": "Inverse Reflection - Plane II",
            "published": 3,
            "tags": [
                "2d",
                "reflection",
                "ray",
                "math",
                "physics",
                "optics",
                "inverse"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 252
        },
        "renderpass": [
            {
                "code": "// Fork of \"Inverse Reflection\" by oneshade\n// https://www.desmos.com/calculator/mleeqxa7k9\n\n// Drawing utilities\n#define drawSDF(dist, transp, col) color = mix(color, col, smoothstep(unit, 0.0, dist) * transp)\n\n// Hue to RGB function from Fabrice's shadertoyunofficial blog:\n#define hue2rgb(hue) 0.6 + 0.6 * cos(6.3 * hue + vec3(0.0, 23.0, 21.0))\n\n// SDFs\nfloat sdDisc(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdPlane2D(in vec2 p, in vec2 pos, in vec2 nor) {\n    return abs(dot(p - pos, nor));\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\n// Computes the incident point between the point and light\n// l: light position\n// p: point position\n// o: reflector position\n// n: reflector direction\nvec2 getIncidence(in vec2 l, in vec2 p, in vec2 o, in vec2 n) {\n    l -= o; p -= o;\n    vec2 d = p - 2.0 * n * dot(p, n) - l;\n    return l - dot(l, n) / dot(d, n) * d + o;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec4 mouse = (vec4(iMouse.xy, abs(iMouse.zw)) - center.xyxy) / iResolution.y * 4.0;\n    vec2 uv = (fragCoord - center) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    vec2 light = iMouse.z > 0.0 ? mouse.xy : vec2(0.0, 1.0);\n    float scroll = iTime * 0.1;\n\n    vec2 reflectorPos = vec2(0.0, -1.0);\n    vec2 reflectorDir = vec2(0.0, 1.0);\n\n    float tilt = sin(iTime) * 0.5;\n    float c = cos(tilt), s = sin(tilt);\n    reflectorDir *= mat2(c, s, -s, c);\n\n    vec2 perp = vec2(reflectorDir.y, -reflectorDir.x);\n    vec2 e1 = reflectorPos + perp * 2.0;\n    vec2 e2 = reflectorPos - perp * 2.0;\n\n    // Draw the light rays if they are outside the plane\n    if (dot(light - reflectorPos, reflectorDir) > 0.0) {\n        // Draw the edges of the beam\n        if (dot(uv - reflectorPos, reflectorDir) > 0.0) {\n            drawSDF(sdPlane2D(uv, e1, (reflect(normalize(e1 - light), reflectorDir)).yx * vec2(-1.0, 1.0)), 1.0, hue2rgb(0.0));\n            drawSDF(sdPlane2D(uv, e2, (reflect(normalize(e2 - light), reflectorDir)).yx * vec2(-1.0, 1.0)), 1.0, hue2rgb(1.0));\n        }\n\n        // Draw the beam\n        vec2 i = getIncidence(light, uv, reflectorPos, reflectorDir);\n        if (dot(uv - reflectorPos, reflectorDir) > 0.0) {\n            if (abs(dot(i - reflectorPos, perp)) < 2.0) color = hue2rgb(dot(i - reflectorPos, perp) / 4.0 + 3.14);\n            vec2 rd = uv - light;\n            vec2 hit = light - rd * dot(light - reflectorPos, reflectorDir) / dot(rd, reflectorDir);\n            if (abs(dot(hit - reflectorPos, perp)) < 2.0 && dot(rd, reflectorDir) < 0.0) {\n                color = hue2rgb(dot(hit - reflectorPos, perp) / 4.0 + 3.14);\n            }\n        }\n\n        // Draw the edges of the beam\n        drawSDF(sdLine(uv, light, e1), 1.0, vec3(0.0));\n        drawSDF(sdLine(uv, light, e2), 1.0, vec3(0.0));\n    }\n\n    // Draw the light and reflector\n    drawSDF(sdDisc(uv, light, 0.05), 1.0, vec3(1.0));\n    drawSDF(sdPlane2D(uv, reflectorPos, reflectorDir) - 0.01, 1.0, vec3(0.0, 0.0, 1.0));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}