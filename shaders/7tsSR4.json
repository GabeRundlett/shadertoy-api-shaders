{
    "Shader": {
        "info": {
            "date": "1625451378",
            "description": "Full Screen shows way more!\nComments on the process are in the image tab",
            "flags": 48,
            "hasliked": 0,
            "id": "7tsSR4",
            "likes": 5,
            "name": "Conway Colouring [Full Screen]",
            "published": 3,
            "tags": [
                "coloring",
                "conway",
                "gameoflife",
                "gol"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 416
        },
        "renderpass": [
            {
                "code": "/* CONWAY's GAME OF LIFE- COLORED BY \"Death Counting\"\n(and one or two other things)\n\nI have about 7 different coloring schemes below based on this\nsimple idea:\n\nTrack the number of times a cell has died \nin buffer A and then pass that to main along with the current\nstate. Only show pixels with state = 1 (alive) + color somehow\nbased on the number of times a pixel has died.\n\nAt first I was just trying to get tiled with a soft\nvignette shading around each one so that's why there is a \nlength(p - vec2( etcetc) in there but it works well because\nit adds a gradient. I wanted a tiled conway's game\nbut couldn't get it.\n\nThis is a great example of what I wanted initally:\nhttps://www.shadertoy.com/view/3tSyWm\n\nAlso there is a level of detail hack I used to intially get\nbigger cells. So I call buffer A with uv/16.\n\nI started experimenting and discovered coloring the pixels \nbased on number of deaths. \nNot a new concept apparently but there it is. \n(Honestly I'm not exaclty sure how it works since number of deaths\nseems often to just be 0 or 1. but it's doing something.)\n\nI discovered a ton of very interesting patterns \nbased on this. I'm sure there are more.\n\nOn Full Screen more of the world is displayed than just small.\n\nincreasing 10. to 16 in this line in th code (around line 40 - 50)\nwill let you see more detail of the indivsual things. It's pretty\ninteresting.\n\nvec4 tex = texture(iChannel0,uv/10.);\n*/\n\n\n\n//FIRST A MUCH EASIER TO UNDERSTAND VERSION: FabriceNeyret2\n/*\nvoid mainImage( out vec4 O, vec2 U )\n{ \n    O = texture(iChannel0,U/iResolution.xy /16.);\n    // .y = current state , .x = death counter\n    \n    U = fract(U/256.);\n \n    float v =     O.y                            // state\n              * ( 1.-length(U-.5) )              // large tile decoration\n              * ( .6+ 5.*cos(.05 + O.x*15.)  );  // strips around cells\n   \n    O = .5 + .6*cos( v + vec4(0,2,4,0)/5. + 2.); // hue\n    O = pow(O,vec4(2.8))*4.;                     // sort of sRGB\n}\n\n\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates 0 (from to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //for color\n    \n    //the 256 effects the highlights. lower for more highlights.\n    vec2 st = fract(uv*iResolution.xy/256.);\n    // Time varying pixel color\n    //vec2 id = floor(uv*32.);\n    \n    //the colors are some how dependent on the uv/# \n    //16. is what all my coloring schemes are based on.\n    vec4 tex = texture(iChannel0,uv/16.);\n    \n    vec3 col = vec3(step(0.5,tex.y));// * (1.0-length(st-vec2(0.5))-0.3);\n       //col = vec3(tex.y*(1.0-length(st-vec2(0.5))));\n       //col = col.x*(0.9+1.5*cos(vec3(3.,3.,4.)/5. - tex.x*205. + 10.)  );\n       \n       //inside out\n       /*\n       col = vec3(tex.y*(1.0-length(st-vec2(0.5))));\n       col = col.x*(0.9+1.5*cos(vec3(3.,3.,4.)/5. - tex.x*205. + 10.)  );\n       */\n       \n       //clowns\n       /*\n        col = vec3(tex.y*(1.0-length(st-vec2(0.5))));\n       col = col.x*(0.3+2.5*cos(vec3(1.,3.,4.)/5. - tex.x*25. + 10.)  );\n       */\n       \n       //double outline \n       /*\n       col = vec3(tex.y*(1.0-length(st-vec2(0.5))));\n       col = col.x*(0.3+2.5*cos(vec3(1.,3.,4.)/20. + tex.x*15.)  );\n       */\n       \n       //minimal outline\n       /*\n       col = vec3(tex.y*(1.0-length(st-vec2(0.5))));\n       col = col.x*(0.3+2.5*cos(vec3(1.,3.,4.)/20. + tex.x*9.)  );\n       */\n       \n       //cool pattern 1 red\n       /*\n       col = vec3(tex.y*tex.y*tex.y* (1.0-length(st-vec2(0.5))));\n       col = col.x*(0.3+2.5*cos(vec3(1.,3.,4.)/2. + tex.x*90.)  );\n       */\n       \n       //cool pattern 2\n       /*\n       col = vec3(tex.y*(1.0-length(st-vec2(0.5))));\n       col = col.x*(0.3+2.5*cos(vec3(1.,3.,4.)/2. + tex.x*90.)  );\n       */\n       \n       //I think I'll choose double outline one for now\n       //and add a cool palette\n       col = vec3(tex.y*(1.0-length(st-vec2(0.5))));\n       col = col.x*(0.3+2.5*cos(vec3(1.,3.,4.)/20. + tex.x*15.)  );\n       //added one more line for that\n       col = 0.5+0.6*cos(vec3(col.x)+vec3(0,2,4)/5.+col.x*1. + 2.);\n       \n    \n    \n    col = pow(col,vec3(2.8))*4.;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\n\nfloat count(vec2 p, vec2 off){\n\n    float cnt = 0.;\n    \n    cnt += texture(iChannel0, p + vec2(off.x,off.y)).y;\n    cnt += texture(iChannel0, p + vec2(off.x,0.0)).y;\n    cnt += texture(iChannel0, p + vec2(off.x,-off.y)).y;\n    cnt += texture(iChannel0, p + vec2(0.,off.y)).y;\n    cnt += texture(iChannel0, p + vec2(0.,-off.y)).y;\n    cnt += texture(iChannel0, p + vec2(-off.x,off.y)).y;\n    cnt += texture(iChannel0, p + vec2(-off.x,0.0)).y;\n    cnt += texture(iChannel0, p + vec2(-off.x,-off.y)).y;\n    \n    return cnt;\n    \n}\n\nvoid mainImage( out vec4 data, in vec2 fragCoord )\n{\n\n   //fragCoord -= mod(fragCoord, float(S));\n    vec2 off = S/iResolution.xy;\n    vec2 uv = fragCoord/iResolution.xy;//  + (off * .5);\n    vec2 st = fract(uv*skale);\n    vec2 id = floor(uv*skale);\n    vec3 mouse = iMouse.xyz;\n    \n    float c;\n    \n    float state,val,speed,resx;\n    \n    \n    //set up / spacebar reset\n    if(iFrame == 0 || texture(iChannel1,  vec2(0.126953125, .25)).x > 0.){\n    \n        uv = fragCoord/iResolution.xy;\n        \n        //st = fract(uv*skale);        \n        id = floor(uv*skale);\n\n        \n        //val = rnd(id);\n        state = step(0.65,rnd(uv));\n        val = 0.;\n        //speed = rnd(id+vec2(1.))*0.002+0.99;\n        //resx = iResolution.x;\n        \n    }\n    else{\n        //get own texture\n        vec4 tex = texture(iChannel0, uv);\n        \n        float c = count(uv,off);\n        \n        state = tex.y;\n        \n            if((c == 2. && state == 1.) || c == 3.){\n            \n            //this variation is like a tiling\n            //if((c == 2. && state == 1.) || c == 1.){\n            \n                state = 1.;\n            }\n            \n            //if cell dies, increment val, the death counter\n            //\"Death Counting\"\n            else{\n            \n            \n                state = 0.;\n                val += 1.;\n            }    \n    \n    }\n\n\n    data = vec4(val, state, speed, rnd(vec2(uv.x*uv.y)));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n//scaling and aspect ration have to happen for st and not the orig uv\n#define S 1.\n#define skale vec2(S,S)\n//*(iResolution.y/iResolution.x))\n//#define off vec2(iResolution.x/skale.x,iResolution.y/skale.y)\n\nfloat rnd(vec2 id){\n    return fract(sin(id.x*12.99+id.y*800.+40.)*51343.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}