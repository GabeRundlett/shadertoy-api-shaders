{
    "Shader": {
        "info": {
            "date": "1549831304",
            "description": "Little simple experiment with low maximum step count raymarch",
            "flags": 0,
            "hasliked": 0,
            "id": "3sSGWy",
            "likes": 7,
            "name": "Blue spiral",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "Nemix",
            "viewed": 447
        },
        "renderpass": [
            {
                "code": "#define MAX_TRY_COUNT 110.\n#define EPSI .001\n#define PI 3.141592\n\nfloat sdSphereLines(vec3 p, vec3 so, float s, float ph){//so: sphere origin, s = size, ph = phase between 0 and 2Pi\n    // p.x += sin(p.z + iTime*2.)*.1;\n    // p.y += cos(p.z + iTime*2.)*.1;\n    float r = 1.;\n    p.x += sin(p.z*.1 + ph)*r;\n    p.y += cos(p.z*.1 + ph)*r;\n    float zTime = p.z + iTime;\n    float m = -1.;\n    float fl = floor(zTime/m)*m;\n    s += max(sin(p.z *.1 - iTime*4.)*.07,0.0);\n    p.z = zTime - fl;\n    return length(p- so)-s;\n}\n\nfloat sdPlane(vec3 p, vec4 pl){\n    p.y += (sin(p.x + iTime*.5) + cos(p.z + iTime))*.05;\n    return dot(p,pl.xyz) - pl.w;\n}\n\nfloat map(vec3 rp){\n    float s1 = sdSphereLines(rp, vec3(0.), .01, PI);\n    float s2 = sdSphereLines(rp, vec3(0.), .01, .0);\n    return min(s1,s2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.y *= (iResolution.y/iResolution.x);\n    \n    //Raymarch\n    vec3 p = vec3(0.,0.,-10.);\n    vec3 v = normalize(vec3(uv.xy, 10.));\n    float dist = map(p);\n    float acc = 0.;\n    for(float i = 0.; i < MAX_TRY_COUNT; i++){\n        if(dist < EPSI){\n            break;\n        }else{\n            p += v*dist;\n            dist = map(p);\n            acc += dist;\n        }\n    }\n    vec3 alb = vec3(.1,.4,.7);\n    vec3 col;\n    col = alb*(.9-acc*.0002);\n    if(dist < EPSI){\n        vec2 epsAndZero = vec2(0.02, 0.);\n        vec3 normal = vec3(\n            map(p - epsAndZero.xyy) - map(p + epsAndZero.xyy),\n            map(p - epsAndZero.yxy) - map(p + epsAndZero.yxy),\n            map(p - epsAndZero.yyx) - map(p + epsAndZero.yyx)\n        );\n        normal = normalize(normal);\n        vec3 l = normalize(vec3(.0,1.,-1.));\n        float diff = max(dot(normal, l),0.);\n\n\n        //Blinn\n        // vec3 r = reflect(l,normal);\n        // float spec = pow(max(dot(r, v),0.),16.);\n\n        //Blinn Phong\n        vec3 h = normalize(-l+v);\n        float spec = pow(max(dot(normal,h),0.),16.);\n\n        col += spec + diff * alb* .7;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}