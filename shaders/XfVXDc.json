{
    "Shader": {
        "info": {
            "date": "1715874956",
            "description": "Playing around with different distributions as a BRDF's NDF",
            "flags": 0,
            "hasliked": 0,
            "id": "XfVXDc",
            "likes": 2,
            "name": "BRDF NDF Playground",
            "published": 3,
            "tags": [
                "experiments",
                "brdf",
                "ggx",
                "exponential",
                "ndf",
                "laplace"
            ],
            "usePreview": 0,
            "username": "BeardThings",
            "viewed": 173
        },
        "renderpass": [
            {
                "code": "float mad(float m, float a, float b)\n{\n    return m * a + b;\n}\n\nfloat rcp(float v)\n{\n    return 1.0 / v;\n}\n\nfloat Pi = 3.14159;\n\nvec3 fresnelSchlick(vec3 r0, vec3 n, vec3 i)\n{\n\tfloat a = 1.0f - dot(n, i);\n\treturn r0 + (1.0f - r0) * a*a*a*a*a;\n}\n\nfloat ggxD(float roughnessSq, float hdotn)\n{\n\t// https://jcgt.org/published/0003/02/03/paper.pdf\n\tfloat hdotnSq = hdotn * hdotn;\n\tfloat t = mad(hdotnSq, roughnessSq - 1.0f, 1.0f);\n\treturn roughnessSq * rcp(t * t) / Pi;\n}\n\nfloat customNDF(vec3 h, float roughnessSq, float hdotn)\n{\n    float slopeSpaceToProjectedSpaceJacobian = 1.0f/(hdotn*hdotn*hdotn*hdotn);\n    \n    vec2 m = vec2(-h.x / h.y, -h.z / h.y);\n    \n    float pdf;\n    int i = 3;\n    if(i == 0)\n    {\n        // Laplace distribution\n        float b = 0.1;\n        pdf = 1.0 / (2.0 * b) * exp(-length(m)/b);\n    }\n    else if(i == 1)\n    {\n        // Exponential distribution\n        float lambda = 10.0;\n        pdf = lambda*exp(-lambda*length(m));\n    }\n    else if(i == 2)\n    {\n        // GGX but in slope space\n        float ml = length(m);\n        float a = roughnessSq + ml*ml;\n        pdf = roughnessSq / (Pi * a*a);\n    }\n    else if(i == 3)\n    {\n        // Gompertz distribution\n        float b = 20.0;\n        float n = 0.01;\n        pdf = b*n*exp(n+b*length(m)-n*exp(b * length(m)));\n    }\n    else if(i == 4)\n    {\n        // Radial falloff\n        float x = length(m);\n        float r = 0.5;\n        pdf = max(r-x, 0.0)/(r*r*Pi);\n    }\n    \n    return pdf * slopeSpaceToProjectedSpaceJacobian;\n}\n\nvec3 ggxSmithCorrolatedBRDF(\n    vec3 h,\n    float roughness,\n    float hdotn,\n    float vdotn,\n    float ldotn,\n    vec3 fresnel)\n{\n\tvec3 F = fresnel;\n\n\t// Generalized form:\n\t/*float roughnessSq = roughness*roughness;\n\tfloat D = ggxD(roughnessSq, hdotn) * (hdotn > 0.0f ? 1.0f : 0.0f);\n\tfloat maskingLambda = ggxLambda(roughnessSq, vdotn);\n\tfloat shadowingLambda = ggxLambda(roughnessSq, ldotn);\n\tfloat G = maskingShadowingCorrelatedG(maskingLambda, shadowingLambda);\n\treturn F * (G * D / (4.0f * vdotn * ldotn));*/\n\n\t// Shadowing Masking Simplified Form:\n\tfloat roughnessSq = roughness*roughness;\n\tfloat D = customNDF(h, roughnessSq, hdotn) * (hdotn > 0.0f ? 1.0f : 0.0f);\n\n\t// Algebraically merged shadowingLambda and maskingLambda\n\tfloat t0 = vdotn * sqrt(mad(1.0f - roughnessSq, ldotn * ldotn, roughnessSq));\n\tfloat t1 = ldotn * sqrt(mad(1.0f - roughnessSq, vdotn * vdotn, roughnessSq));\n\tfloat simplifiedG = 1.0/(t0 + t1);\n\treturn F * (simplifiedG * D * 0.5f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n    float aspect = iResolution.y / iResolution.x;\n    vec3 v=normalize(vec3(0.,-0.5,1.)+vec3(uv.x,0.,0.)+vec3(0.,uv.y*aspect,0.));\n    vec3 o=vec3(0.,0.,-7.);\n    float r=0.5;\n\n    float plane = -1.0-o.y;\n    float t = plane / v.y;\n    vec3 p = o+v*t;\n    \n    fragColor = texture(iChannel0, v);\n    if(t > 0.)\n    {\n        vec3 n=vec3(0.,1.,0.);\n        \n        float rot=iTime;\n        vec3 lp = vec3(cos(rot),1.0,-sin(rot));\n        \n        vec3 lp2p = lp-p;\n        vec3 l=normalize(lp2p);\n        \n        float a = 10.0 / (length(lp2p) * length(lp2p));\n        \n        vec3 h = normalize(l-v);\n        \n        vec3 tex = pow(texture(iChannel1, p.xz).rgb,vec3(2.2));\n        vec3 f = fresnelSchlick(tex, n, -v);\n        vec3 b = ggxSmithCorrolatedBRDF(h, 0.2, dot(h,n), dot(-v,n), max(dot(l,n),0.0), f);\n        \n        fragColor=pow(vec4(b,1.)*dot(l,n) * a,vec4(1.0/2.2));\n    }  \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}