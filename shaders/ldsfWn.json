{
    "Shader": {
        "info": {
            "date": "1495758224",
            "description": "16/100",
            "flags": 0,
            "hasliked": 0,
            "id": "ldsfWn",
            "likes": 4,
            "name": "16/100",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "yahe",
            "viewed": 470
        },
        "renderpass": [
            {
                "code": "#define NUM_PARTICLES 500.0\n#define GLOW 0.4\n\nvec3 Orb(vec2 uv, vec3 color, float radius, float offset)\n{        \n    float t = (iTime+200.)/5.;\n    vec2 position = vec2(sin(offset * t)*sin(offset * t)+ sin(iTime),\n                         cos(offset * t)*cos(offset * t)+ cos(iTime));\n    \n    if (sin(offset * t) < 0.&& cos(offset * t) > 0.) {\n     \n        position = vec2(-sin(offset * t)*sin(offset * t)+sin(iTime),\n                         cos(offset * t)*cos(offset * t)+cos(iTime));\n    } else if (cos(offset * t) < 0. && sin(offset * t) > 0.) {\n        \n        position = vec2(sin(offset * t)*sin(offset * t)+sin(iTime),\n                         -cos(offset * t)*cos(offset * t)+cos(iTime));\n        \n    } else if (cos(offset * t) < 0. && sin(offset * t) < 0.) {\n        \n        position = vec2(-sin(offset * t)*sin(offset * t)+sin(iTime),\n                         -cos(offset * t)*cos(offset * t)+cos(iTime));\n    }\n    \n    position *= sin((t + offset )*2. )* offset;\n    \n    radius = radius * sqrt(abs(position.x * position.y)) ;\n    \n    float dist = radius / distance(uv, position);\n    \n    return color * pow(dist, 1.0 / GLOW);\n}\n\n    vec2 rotate(vec2 v, float alpha)\n{\n\tfloat vx = v.x*cos(alpha)-v.y*sin(alpha);\n\tfloat vy = v.x*sin(alpha)+v.y*cos(alpha);\n\tv.x = vx;\n\tv.y = vy;\n\treturn v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv =  vec2(fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec3 pixel = vec3(0.0, 0.0, 0.0);\n   \tvec3 color = vec3(1.);\n    \n    float radius = 0.02;\n    \n    for\t(float i = 0.0; i < NUM_PARTICLES; i++) {\n        pixel += Orb(uv, color, radius,  i / NUM_PARTICLES);\n    //pixel += Orb(uv, color, radius, i / NUM_PARTICLES);\n    }\n\n    \n    fragColor = vec4(pixel, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}