{
    "Shader": {
        "info": {
            "date": "1524818726",
            "description": "I'm just fed up searching this piece of code again and again, for me or others, so here is once for all  ;-)",
            "flags": 0,
            "hasliked": 0,
            "id": "4dcfW8",
            "likes": 25,
            "name": "line segment (tuto)",
            "published": 3,
            "tags": [
                "lines",
                "antialiasing",
                "lissajous",
                "utils",
                "tuto",
                "segments"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 2453
        },
        "renderpass": [
            {
                "code": "// self-URL: https://www.shadertoy.com/view/4dcfW8\n\n#define S(d,r) smoothstep( r*2./R.y, 0., d)   // antialiased draw. r >= 1.5\n\n// --- line segment with disc ends: seamless distance to segment\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);   // proj coord on line\n    return length(p - b * h);                         // dist to segment\n    // You might directly return smoothstep( 3./R.y, 0., dist),\n    //     but more efficient to factor all lines.\n    // Indeed we can even return dot(,) and take sqrt at the end of polyline:\n    // p -= b*h; return dot(p,p);\n}\n\n// --- macro version  ( attention: a,b unprotected )\nvec2 _d;\n#define L(a,b) ( _d=b-a, length( U-a - _d * clamp( dot(U-a, _d) / dot(_d, _d), 0., 1.)))\n\n\n// --- line segment without disc ends\n// ( sometime useful with semi-transparency )\nfloat line0(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    float h = dot(p, b) / dot(b, b),                  // proj coord on line\n          c = clamp(h, 0., 1.);\n    return h==c ? length(p - b * h) : 1e5;            // dist to strict segment\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U = 1.2* ( U+U - R ) / R.y;\n\n    float d = 1e5, t=iTime-4.;\n#define f(x) vec2( sin(6.*x-t) , cos(8.*x-t) ) -.2*sin(x) // func to draw\n    vec2 _P, P=f(0.);\n    for (float x = 0.; x < 4.; x += .03 )\n        d = min(d, line( U, _P = P, P = f(x)) );\n   \n // d = sqrt(d);\n    float width = 1.5 + 10.*(.5-.5*cos(t) );\n    O = sin(t)>0. ? vec4( S( d, width ) )                  // thick smooth line\n                  : vec4( S( d - (width-1.5)/R.y , 1.5) ); // thick dense line\n    O.b += .5*sin(100.*d);                           // bg isovalues\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}