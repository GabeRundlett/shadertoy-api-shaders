{
    "Shader": {
        "info": {
            "date": "1580840342",
            "description": "Trace the FWA logo with capsule sdf. View this shader at [url]https://cineshader.com/view/tt3XDn[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "tt3XDn",
            "likes": 27,
            "name": "FWA logo",
            "published": 3,
            "tags": [
                "cineshader"
            ],
            "usePreview": 0,
            "username": "edankwan",
            "viewed": 258504
        },
        "renderpass": [
            {
                "code": "\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 opRep( in vec3 p, in vec3 c, out vec3 idx)\n{\n    p = (p + 0.5 * c) / c;\n    vec3 floorP = floor(p);\n    vec3 fractP = fract(p);\n    idx = floorP;\n    return fractP * c - 0.5 * c;\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nvec2 map(vec3 p)\n{\n    vec3 idx;\n    p = opRep(p, vec3(6.0, 3.0, 5.0), idx);\n    \n    vec2 res = vec2(0.0, 0.0);\n    float thickness = 0.275;\n    float fwaD = 100.0;\n    \n    float r = hash13(idx * 100.0 + floor(iTime * 2.14));\n    \n    if (r > 0.2 + step(dot(idx, idx), 0.5)) {\n        return vec2(0.75, 0.0);\n    }\n    \nfwaD = min(fwaD, sdCapsule(p, vec3(-2.1975012, 0, 0.0), vec3(-1.1325011999999999, 0, 0.0), thickness));\nfwaD = min(fwaD, sdCapsule(p, vec3(-1.7825011499999996, -0.44249114999999994, 0.0), vec3(-1.7825011499999996, 0.42000885000000004, 0.0), thickness));\nfwaD = min(fwaD, sdCapsule(p, vec3(-0.9700012499999998, 0.42000885000000004, 0.0), vec3(-1.7825011499999996, 0.42000885000000004, 0.0), thickness));\nfwaD = min(fwaD, sdCapsule(p, vec3(-0.5375011499999998, -0.44249114999999994, 0.0), vec3(-0.9700012499999998, 0.42000885000000004, 0.0), thickness));\nfwaD = min(fwaD, sdCapsule(p, vec3(-0.10000124999999968, 0.42000885000000004, 0.0), vec3(-0.5375011499999998, -0.44249114999999994, 0.0), thickness));\nfwaD = min(fwaD, sdCapsule(p, vec3(0.3274987500000003, -0.44249114999999994, 0.0), vec3(-0.10000124999999968, 0.42000885000000004, 0.0), thickness));\nfwaD = min(fwaD, sdCapsule(p, vec3(0.7749988500000001, 0.42000885000000004, 0.0), vec3(0.3274987500000003, -0.44249114999999994, 0.0), thickness));\nfwaD = min(fwaD, sdCapsule(p, vec3(1.7774988, 0.42000885000000004, 0.0), vec3(0.7749988500000001, 0.42000885000000004, 0.0), thickness));\nfwaD = min(fwaD, sdCapsule(p, vec3(1.7774988, -0.41249115, 0.0), vec3(1.7774988, 0.42000885000000004, 0.0), thickness));\nfwaD = min(fwaD, sdCapsule(p, vec3(0.9424987500000003, -0.41249115, 0.0), vec3(1.7774988, -0.41249115, 0.0), thickness));\nfwaD = min(fwaD, sdCapsule(p, vec3(0.9424741500000001, -0.012491100000000017, 0.0), vec3(0.9424987500000003, -0.41249115, 0.0), thickness));\nfwaD = min(fwaD, sdCapsule(p, vec3(2.2149741000000005, -0.015, 0.0), vec3(0.9424741500000001, -0.012491100000000017, 0.0), thickness));\n\t\n    res.x = fwaD;\n    res.y = step(0.24, p.z);\n    \n    return res;\n}\n\nvec3 calcNormal( in vec3 p )\n{\n    const float h = 1e-5; // or some other value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ).x + \n                      k.yyx*map( p + k.yyx*h ).x + \n                      k.yxy*map( p + k.yxy*h ).x + \n                      k.xxx*map( p + k.xxx*h ).x );\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // screen size is 6m x 6m\n    \n    float t = iTime * 0.2;\n    vec3 off0 = fract(vec3(t * 2.516 - 0.642, -t * 0.541 - 0.624, t * 0.532 - 0.74)) - 0.5;\n    vec3 off1 = fract(vec3(-t * 0.512 - 0.3412, t * 2.537 - 0.92, -t * 0.5327 - 0.24)) - 0.5;\n    vec3 off2 = fract(vec3(t * 0.47 - 0.835, t * 0.537 - 0.753, -t * 0.47 - 0.845)) - 0.5;\n    vec3 off3 = fract(vec3(t * 0.324 - 0.23, -t * 0.537 - 0.324, t * 2.5327 - 0.56)) - 0.5;\n    \n\tvec3 rayOri = vec3(0.0, 0.0, 3.0) + off0 * off2 * vec3(12.0, 12.0, 6.0);\n    vec3 target = vec3(rotate((uv - 0.5) * vec2(iResolution.x/iResolution.y, 1.0), dot(off0, off1) * 3.0) * 6.0, 0.0) + off1 * off3 * vec3(12.0, 12.0, 6.0);\n\tvec3 rayDir = normalize(target - rayOri);\n\t\n\tfloat depth = 0.0;\n\tvec3 p;\n    vec2 res;\n\t\n\tfor(int i = 0; i < 64; i++) {\n\t\tp = rayOri + rayDir * depth;\n\t\tres = map(p);\n        depth += res.x;\n\t\tif (res.x < 1e-5) {\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n    depth = min(50.0, depth);\n\tvec3 n = calcNormal(p);\n    float b = max(0.0, dot(n, vec3(0.577)));\n    vec3 col = mix(vec3(0.5), vec3(1.0), b) * 1.75;\n    col *= exp((-depth + 0.5) * 0.15);\n    col *= max(smoothstep(0.1, 0.5, res.x) + 0.075 * b, res.y);\n\t\n    // maximum thickness is 2m in alpha channel\n    fragColor = vec4(col, 1.0 - (depth - 1.0) / 20.0);\n}\n\n/** SHADERDATA\n{\n\t\"title\": \"FWA logo\",\n\t\"description\": \"Trace the FWA logo with capsule sdf.\",\n\t\"model\": \"person\"\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}