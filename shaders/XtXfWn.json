{
    "Shader": {
        "info": {
            "date": "1511526759",
            "description": "Shamelessely took this bezier shadertoy https://www.shadertoy.com/view/4tj3Dy and just used nurbs instead of loop/blinn.\nNo patent on this one :)\nhttp://jogamp.org/doc/gpunurbs2011/p70-santina.pdf",
            "flags": 0,
            "hasliked": 0,
            "id": "XtXfWn",
            "likes": 9,
            "name": "NURBS Rendering",
            "published": 3,
            "tags": [
                "2d",
                "nurbs"
            ],
            "usePreview": 0,
            "username": "fre3k",
            "viewed": 1841
        },
        "renderpass": [
            {
                "code": "/*\nInfo on curves:\nhttp://jogamp.org/doc/gpunurbs2011/p70-santina.pdf\n\nImplem in jogl:\nhttps://github.com/sgothel/jogl/blob/master/src/jogl/classes/jogamp/graph/curve/opengl/shader/curverenderer01-pass1-curve_weight.glsl\n\nThanks to bezier curve shadertoys:\nhttps://www.shadertoy.com/view/4tj3Dy\n*/\n\n#define EDGE   0.005\n#define SMOOTH 0.0025\n\n// signed distance function for Circle, for control points\nfloat SDFCircle( in vec2 coords, in vec2 offset )\n{\n    coords -= offset;\n    float v = coords.x * coords.x + coords.y * coords.y - EDGE*EDGE;\n    vec2  g = vec2(2.0 * coords.x, 2.0 * coords.y);\n    return v/length(g);\n}\n\n//-----------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(1.0,1.0,1.0);\n\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 percent = ((fragCoord.xy / iResolution.xy) - vec2(0.25,0.5));\n    percent.x *= aspectRatio;\n\n    vec2 mouse = (iMouse.xy / iResolution.xy) - vec2(0.25,0.5);\n    mouse.x *= aspectRatio;\n    vec2 A = vec2(0.0,-0.4);\n    vec2 B = length(iMouse.xy) > 0.0 ? mouse : vec2(0.3,0.4);\n    vec2 C = vec2(1.0,-0.4);\n    float w0 = 1.;\n    float w1 = (sin(iTime)+1.)*0.5;\n    float w2 = 1.;\n\n    // Compute vectors\n    vec2 v0 = C - A;\n    vec2 v1 = B - A;\n    vec2 v2 = percent - A;\n\n    // Compute dot products\n    float dot00 = dot(v0, v0);\n    float dot01 = dot(v0, v1);\n    float dot02 = dot(v0, v2);\n    float dot11 = dot(v1, v1);\n    float dot12 = dot(v1, v2);\n\n    // Compute barycentric coordinates\n    float invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);\n    float u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n    float v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n    // NURBS calculations\n    float w = (1.0 - u - v);\n    vec2 rtex = u * vec2(0.0,0.0) + v * vec2(0.5,0.5) + w * vec2(1.0,0.0);\n    float nu = rtex.x;\n    float nv = rtex.y;\n\n    // Basic position\n    float pd = ( (w0 - 2.*w1 + w2)*nu*nu + 2.*(w1-w0)*nu + w0 );\n    float pos = nv - (w1 * nu * (1.- nu)) / pd ;\n\n    // Smooth interpolation, no aliasing\n    vec2 dtx = dFdx(rtex);\n    vec2 dty = dFdy(rtex);\n    float aph = 2.0 - 2.0*w1;\n    float gd = (aph*rtex.x*rtex.x + 2.0*rtex.x + 1.0)*(aph*rtex.x*rtex.x + 2.0*rtex.x + 1.0);\n    vec2 f = vec2((dtx.y - (w*dtx.x*(1.0 - 2.0*rtex.x))/gd), (dty.y - (w*dty.x*(1.0 - 2.0*rtex.x))/gd));\n    float a = clamp(0.5 - ( pos/length(f) ) * sign(w2), 0.0, 1.0);\n    color = vec3(mix(1.,0.5,a))*0.5;\n\n    // if it's outside the triangle, lighten it a bit\n    color += ((u >= 0.0) && (v >= 0.0) && (u + v < 1.0)) ? 0.0 : 0.7;\n\n    // render control points\n    float dist = SDFCircle(percent, A);\n    dist = max(dist, 0.0);\n    dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n    color *= mix(vec3(1.0,0.0,0.0),vec3(1.0,1.0,1.0),dist);\n    dist = SDFCircle(percent, B);\n    dist = max(dist, 0.0);\n    dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n    color *= mix(vec3(0.0,1.0,0.0),vec3(1.0,1.0,1.0),dist);\n    dist = SDFCircle(percent, C);\n    dist = max(dist, 0.0);\n    dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n    color *= mix(vec3(0.0,0.0,1.0),vec3(1.0,1.0,1.0),dist);\n\n    fragColor = vec4(clamp(color,0.0,1.0),1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}