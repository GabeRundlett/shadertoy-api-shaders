{
    "Shader": {
        "info": {
            "date": "1617913569",
            "description": "Cardan straight line mechanism - a double epicycloid (mouseable)",
            "flags": 0,
            "hasliked": 0,
            "id": "ssjGWy",
            "likes": 24,
            "name": "Gear Projection",
            "published": 3,
            "tags": [
                "mechanics",
                "hatch",
                "kinematics",
                "cardan"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 389
        },
        "renderpass": [
            {
                "code": "// \"Gear Projection\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat Minv3 (vec3 p);\nfloat Maxv3 (vec3 p);\nfloat SmoothMax (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv2 (vec2 p);\n\nvec3 ltDir, qHit;\nfloat tCur, dstFar, dMiss;\nint idObj;\nbool isSh;\nconst int idGearB = 1, idGearS = 2, idArm = 3, idLnk = 4, idPin = 5, idAxl = 6, idFrm = 7;\nconst float pi = 3.1415927;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat GearWlDf (vec3 p, float rad, float nTh, float nSp, float aRot, float tWid, float wlThk)\n{\n  vec3 q;\n  vec2 cs;\n  float d, a, r, w;\n  p.xz = Rot2D (p.xz, aRot);\n  q = p;\n  r = length (q.xz);\n  a = atan (q.z, - q.x) / (2. * pi);\n  d = max (abs (r - 0.98 * rad + tWid) - 0.07 * rad, abs (q.y) - wlThk);\n  d = min (d, max (length (q.xz) - 0.2 * rad, abs (q.y) - 1.5 * wlThk));\n  cs = sin (2. * pi * floor (nSp * a + 0.5) / nSp + vec2 (0.5 * pi, 0.));\n  d = min (d, max (PrBox2Df (vec2 (q.y, dot (q.xz, cs.yx)),\n     vec2 (wlThk, 0.03 * rad)), r - rad + tWid));\n  q.xz = Rot2D (q.xz, 2. * pi * floor (nTh * a + 0.5) / nTh);\n  cs = sin (0.12 * pi + vec2 (0.5 * pi, 0.));\n  return abs (max (d, - max (dot (vec2 (q.x + rad, abs (q.z) - 1.3 * tWid), cs.yx),\n     abs (r - rad) - 1.8 * tWid))) - 0.01;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, nThB, nThS, radB, radS, tWid, wlThk, cRad, rRat, bLen, rAng;\n  dMin = dstFar;\n  rAng = 0.15 * tCur;\n  wlThk = 0.05;\n  cRad = 0.06;\n  nThB = 64.;\n  rRat = 0.5;\n  nThS = floor (nThB * rRat + 0.001);\n  rRat = nThS / nThB;\n  radB = 1.;\n  radS = radB * rRat;\n  q = p;\n  d = min (PrCylDf (vec3 (q - vec3 (0., 6. * wlThk, 0.)).xzy, 0.13 * radB, 4. * wlThk),\n     PrCylDf (vec3 (q - vec3 (0., 8. * wlThk, 0.)).xzy, 0.05 * radB, 10. * wlThk));\n  DMINQ (idAxl);\n  q.y -= 4. * wlThk;\n  if (! isSh) d = PrCylDf (q.xzy, radB + 0.05, wlThk + 0.05);\n  if (isSh || d < dMin + 0.1) {\n    q.xz = Rot2D (q.xz, 0.25 * pi);\n    tWid = 0.03;\n    d = GearWlDf (q, radB, nThB, 4., 0., tWid, wlThk);\n    DMINQ (idGearB);\n  } else dMin = min (dMin, d);\n  q = p;\n  q.xz = Rot2D (q.xz, - rAng / rRat);\n  bLen = 0.5 * radB + 1.5 * radS;\n  d = PrRoundBoxDf (q - vec3 (- bLen, 0., 0.), vec3 (bLen + 2. * wlThk, wlThk, 2. * wlThk), 0.01);\n  DMINQ (idArm);\n  d = PrCylDf ((q - vec3 (0.5, 16. * wlThk, 0.)).zyx, 0.04, 0.5);\n  DMINQ (idPin);\n  tWid = 0.04;\n  q.x -= - (radB + radS) + 0.2 * tWid;\n  d = PrCylDf (vec3 (q - vec3 (0., 2. * wlThk, 0.)).xzy, 0.1 * radS, 4. * wlThk);\n  DMINQ (idAxl);\n  q.y -= 4. * wlThk;\n  if (! isSh) d = PrCylDf (q.xzy, radS + 0.05, wlThk + 0.05);\n  if (isSh || d < dMin + 0.1) {\n    d = GearWlDf (q, radS, nThS, 8., - 2. * rAng / rRat + (pi / nThS), tWid, wlThk);\n    DMINQ (idGearS);\n  } else dMin = min (dMin, d);\n  q.x -= -2. * radS + tWid;\n  d = PrCylDf ((q - vec3 (0., -4. * wlThk, 0.)).xzy, 0.1 * radS, 6. * wlThk);\n  DMINQ (idAxl);\n  if (! isSh) d = PrCylDf (q.xzy, radS + 0.05, wlThk + 0.05);\n  if (isSh || d < dMin + 0.1) {\n    d = GearWlDf (q, radS, nThS, 8., 2. * rAng / rRat, tWid, wlThk);\n    DMINQ (idGearS);\n  } else dMin = min (dMin, d);\n  q.y -= -8.5 * wlThk;\n  q.xz = Rot2D (q.xz, 2. * rAng / rRat);\n  bLen = 0.5 * (radB + 3. * radS) - 0.7 * tWid;\n  q.x -= - bLen;\n  d = PrRoundBoxDf (q, vec3 (bLen + 1.5 * cRad, 0.75 * wlThk, 1.5 * cRad), 0.01);\n  DMINQ (idLnk);\n  q.xy -= vec2 (- bLen, -3. * wlThk);\n  d = PrCylDf (q.xzy, cRad, 4.5 * wlThk);\n  DMINQ (idPin);\n  q.y -= -4. * wlThk;\n  d = PrCylDf (q.xzy, 3. * cRad, wlThk);\n  DMINQ (idPin);\n  q = p;\n  d = SmoothMax (PrRoundBoxDf (q, vec3 (5.35 * radB, 9. * wlThk, 3. * cRad), 0.02),\n     - min (PrBox2Df (q.xy, vec2 (5.2 * radB, 7. * wlThk)),\n     max (PrBox2Df (q.xz, vec2 (5.1 * radB, 1.3 * cRad)), q.y)), 0.01);\n  DMINQ (idFrm);\n  dMiss = min (dMiss, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec4 ObjNfL (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  float s;\n  e = vec2 (0.005, -0.005);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  s = dot (v, vec4 (1.));\n  return vec4 (normalize (2. * v.yzw - s), (s - 2. * v.x - 4. * ObjDf (p)) / (e.x * e.x));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.03 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec2 ExBlkHit (vec3 ro, vec3 rd)\n{\n  vec4 vn4;\n  vec3 v, tm, tp, u, fcBlk;\n  vec2 qBlk;\n  float dn, df, bs;\n  bs = dstFar;\n  if (rd.x == 0.) rd.x = 0.001;\n  v = ro / rd;\n  tp = bs / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  if (df > 0. && dn < df) {\n    fcBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    u = (v + dn) * rd;\n    qBlk = vec2 (dot (u.zxy, fcBlk), dot (u.yzx, fcBlk)) / bs;\n  }\n  return qBlk;\n}\n\nvec4 BlkHit (vec3 ro, vec3 rd, vec3 bSize)\n{\n  vec3 v, tm, tp, fcBlk;\n  vec2 qBlk;\n  float dMin, dn, df;\n  dMin = dstFar;\n  if (rd.x == 0.) rd.x = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = Maxv3 (tm);\n  df = Minv3 (tp);\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    fcBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  }\n  return vec4 (dMin, fcBlk);\n}\n\nvec3 SkShowScene (vec3 ro, vec3 rd, vec2 uv)\n{\n  vec4 col4, vn4;\n  vec3 col, vn, ltDirS;\n  float dstObj;\n  dMiss = dstFar;\n  isSh = false;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn4 = ObjNfL (ro);\n    vn = vn4.xyz;\n    ltDirS = normalize (vec3 (0.5, 1.3, -1.));\n    col = vec3 (1.) * (1. - 0.5 * smoothstep (0.5, 1., abs (vn4.w) / 64.)) *\n       (0.85 + 0.15 * Noisefv2 (Rot2D (uv, -0.1 * pi) * vec2 (32., 512.))) *\n       (0.5 + 0.5 * max (dot (vn, ltDirS), 0.));\n    dMiss = dstFar;\n  } else col = vec3 (1.);\n  col = mix (col, vec3 (0.5), exp (- 64. * dMiss));\n  return clamp (col, 0., 1.);\n}\n\nvoid SkMain (out vec3 fCol, in vec2 fCoord)\n{\n  mat3 vuMat;\n  vec3 ro, rd;\n  vuMat = StdVuMat (-0.35 * pi, 0.);\n  ro = vuMat * vec3 (0., -5., -20.);\n  rd = vuMat * normalize (vec3 (fCoord, 4.2));\n  fCol = SkShowScene (ro, rd, fCoord);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, db4;\n  vec3 col, vn, bSize;\n  vec2 qBlk, q;\n  float dstObj, nDotL, sh;\n  bool isBg;\n  dMiss = dstFar;\n  isSh = false;\n  isBg = false;\n  dstObj = ObjRay (ro, rd);\n  bSize = vec3 (7.5, 0.1, 5.);\n  db4 = BlkHit (ro - vec3 (0., -1., -1.8), rd, bSize);\n  if (dstObj < min (db4.x, dstFar)) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    qBlk = mod (8. * ExBlkHit (ro, reflect (rd, vn)), 1.);\n    if (idObj == idGearB) col4 = vec4 (0.9, 0.9, 0.8, 0.2);\n    else if (idObj == idGearS) col4 = vec4 (1., 1., 0.7, 0.2);\n    else if (idObj == idArm) col4 = vec4 (0.8, 1., 0.8, 0.2);\n    else if (idObj == idLnk) col4 = vec4 (1., 0.7, 0.9, 0.2);\n    else if (idObj == idPin) col4 = vec4 (0.7, 1., 0.7, 0.2);\n    else if (idObj == idFrm) col4 = vec4 (0.7, 0.4, 0.1, 0.1);\n    else if (idObj == idAxl) col4 = vec4 (1., 1., 0.5, 0.2);\n    nDotL = max (dot (vn, ltDir), 0.);\n    if (idObj != idFrm) nDotL *= nDotL;\n  } else if (db4.x < dstFar) {\n    ro += db4.x * rd;\n    vn = db4.yzw;\n    q = ro.xz - vec2 (0., -1.8);\n    if (vn.y > 0.5 && PrBox2Df (q, bSize.xz - 0.48) < 0.) {\n      SkMain (col, q / vec2 (5.3, 6.) - vec2 (0., -1.25));\n      if (Minv3 (col) > 0.9) {\n        q = smoothstep (0.03, 0.06, abs (mod (2. * q + 0.5, 1.) - 0.5));\n        col = mix (vec3 (0.7, 0.7, 1.), vec3 (1.), min (q.x, q.y));\n      }\n    } else {\n      col = vec3 (1.) * (0.8 + 0.2 * step (0.5, vn.y));\n      sh = 1.;\n    }\n  } else {\n    isBg = true;\n    qBlk = mod (8. * ExBlkHit (ro, rd), 1.);\n    col = vec3 (0.4, 0.5, 0.4) * (0.05 + 0.245 * (rd.y + 1.) * (rd.y + 1.)) +\n       vec3 (0.2) * (0.9 + 0.1 * SmoothBump (0.25, 0.75, 0.1, qBlk.x) *\n       SmoothBump (0.25, 0.75, 0.1, qBlk.y));\n  }\n  if (! isBg) {\n    isSh = true;\n    sh = ObjSShadow (ro + 0.01 * ltDir, ltDir);\n    if (dstObj < min (db4.x, dstFar)) {\n      col = col4.rgb * (0.2 + 0.8 * sh * nDotL) +\n         col4.a * step (0.95, sh) * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.);\n      col += col4.a * vec3 (0.5) * (0.5 + 0.5 * SmoothBump (0.25, 0.75, 0.05, qBlk.x) *\n         SmoothBump (0.25, 0.75, 0.05, qBlk.y));\n    } else {\n      col *= 0.4 + 0.6 * sh * max (dot (vn, ltDir), 0.);\n    }\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.28 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., -2.4, -20.);\n  zmFac = 4.2;\n  dstFar = 100.;\n  ltDir = vuMat * normalize (vec3 (1., 0.7, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}