{
    "Shader": {
        "info": {
            "date": "1551812977",
            "description": "A small neural network with 3 hidden layers trained to generate sine waves\nShader is performing one NN inference for every pixel of every frame to render wave",
            "flags": 0,
            "hasliked": 0,
            "id": "wdsXzf",
            "likes": 4,
            "name": "Sine wave (using ML)",
            "published": 3,
            "tags": [
                "2d",
                "nn",
                "ml"
            ],
            "usePreview": 0,
            "username": "baldand",
            "viewed": 679
        },
        "renderpass": [
            {
                "code": "// (c) 2019 Andrew Baldwin (twitter:baldand)\n// License = Attribution-ShareAlike 4.0 International (CC BY-SA 4.0) (http://creativecommons.org/licenses/by-sa/4.0/)\n\n// Small neural network with 3 hidden layers trained to generate sin waves\n// We are doing one inference with this for every pixel of every frame\n\n// See https://www.shadertoy.com/view/wdfSzl \n// for visually much improved version with similar complexity\n\n// See also twitter thread: https://twitter.com/baldand/status/1103012877064196098\n\nfloat infer(float x) {\n    // Trained parameters\n    mat4 m0 = mat4(-0.12571095,-0.26496017,0.9719571,0.21379238,-0.012421567,-0.5054736,0.73711926,0.5343512,0.5220842,-0.77656305,-0.5207267,-0.32392937,0.4735854,-0.70736265,0.81603307,-1.9917549);\n    vec4 b0 = vec4(-0.14748195,0.0,-0.03197732,0.3572576);\n    mat4 m1 = mat4(0.40561008,0.4723408,0.8758184,-1.0912322,0.529556,-0.8380854,-0.7847434,0.71776015,-0.21837308,0.5915957,0.19515494,0.9023054,1.1809518,0.34930748,1.483023,-0.02533237);\n    vec4 b1 = vec4(0.10530137,-0.37976393,-0.14090052,-0.046417937);\n    mat4 m2 = mat4(0.07913667,0.7634938,-0.04178363,-0.19418743,-0.14935172,-0.4280477,-0.08846402,0.4486952,-0.6807784,0.29692093,-0.2470401,0.95824474,-0.6653977,-2.042718,0.011264741,-0.31809056);\n    vec4 b2 = vec4(0.0,0.07556404,0.0,-0.14975327);\n    vec4 v3 = vec4(-0.9077474,0.45764312,0.24416518,1.6874518);\n    float b3 = 0.007885284;\n    // Use x as input to neural network to calculate y\n    vec4 i = vec4(x,x+.25,x+.5,x+.75);\n    vec4 l1 = m0*fract(i)+b0;\n    vec4 l2 = m1*max(l1,0.0)+b1;\n    vec4 l3 = m2*max(l2,0.0)+b2;\n    vec4 l4 = v3*max(l3,0.0);\n    float y = clamp(b3+l4.x+l4.y+l4.z+l4.w,0.,1.);\n    return 0.5+(y-0.5)*0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float x = uv.x + iTime*.2;\n    float y = infer(x);\n    float r = smoothstep(y, y+.005, uv.y);\n    vec3 col = mix(vec3(0.,0.3,0.5), vec3(0.,.9,1.), r);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}