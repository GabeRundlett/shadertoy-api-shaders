{
    "Shader": {
        "info": {
            "date": "1460901343",
            "description": "you have to click and drag around a little to make this shader work... any workaround for this?\nthis is my first shader. just playing around with the buffer resulted in this.",
            "flags": 32,
            "hasliked": 0,
            "id": "ldcSzl",
            "likes": 1,
            "name": "worm-whole",
            "published": 3,
            "tags": [
                "abstract",
                "short",
                "multipass"
            ],
            "usePreview": 0,
            "username": "Blubor2",
            "viewed": 606
        },
        "renderpass": [
            {
                "code": "//defines\n#define radius 0.1\n//globals\nconst vec3 bgColor = vec3(0.0);\nconst vec3 axesColor = vec3(0.0, 0.0, 1.0);\nconst vec3 gridColor = vec3(0.5);\n\n//functions first\nbool line(float pos, float width)\n{\n    if (abs(pos) < width) return true;\n    return false;\n}\n\n\nvec2 coord(vec2 xy)\n{\n    //normalize to -1,+1\n    vec2 uv = 2.0 * xy.xy / iResolution.xy - 1.0;\n    //fix ar such that y=[-1,1], x=[-1*ar,1*ar] (usually >1)\n    uv.x = uv.x * iResolution.x / iResolution.y;\n    return uv;\n}\n\n//main sampler\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 c = texture(iChannel0,fragCoord.xy/iResolution.xy);\n    \n \n    fragColor = 1.2-c;\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//defines\n#define radius 0.1\n//globals\nconst vec3 bgColor = vec3(1.0);\nconst vec3 axesColor = vec3(0.0, 0.0, 1.0);\nconst vec3 gridColor = vec3(0.5);\n//functions first\nbool line(float pos, float width)\n{\n    if (abs(pos) < width) return true;\n    return false;\n}\n\n// Standard smooth 2D value noise. Based on IQ's original.\n// This one is self contained, so there's no need for an outside hash function.\nfloat valueNoise2D(vec2 p) {\n\t\n\tvec2 f = fract(p); // Fractional cell position.\n    \n    f *= f*(3.0-2.0*f);// Smooth step\n    //f = f*f*f*(10.0+f*(6.0*f-15.0)); // Smoother smooth step.\n    //f = (1.-cos(f*3.14159265))*.5; // Cos smooth step\n\t\n    // Random values for all four cell corners.\n\tvec4 h = fract(sin(vec4(0, 41, 289, 330) + dot(floor(p), vec2(41, 289)))*43758.5453);\n\th = sin(h*6.283 + iTime)*0.5 + 0.5; // Animation.\n\t//h = abs(fract(h+iTime*0.125) - 0.5)*2.; // More linear animation.\n\t\n    // Interpolating the random values to produce the final value.\n\treturn dot(vec2(1.0-f.y, f.y), vec2(1.0-f.x, f.x)*mat2(h));\n    \n}\n\nvec2 coord(vec2 xy)\n{\n    //normalize to -1,+1\n    vec2 uv = 2.0 * xy.xy / iResolution.xy - 1.0;\n    //fix ar such that y=[-1,1], x=[-1*ar,1*ar] (usually >1)\n    uv.x = uv.x * iResolution.x / iResolution.y;\n    return uv;\n}\n\n//main sampler\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = coord(fragCoord.xy);\n    \n    \n    //set bg color\n    vec3 pixel = bgColor;\n    \n    \n\tvec3 col2 = vec3(1.00, 0.329, 0.298); // yellow\n\tvec3 col3 = vec3(0.867, 0.910, 0.247); // red\n    \n    vec4 c = texture(iChannel0,fragCoord.xy/iResolution.xy+vec2(0.009,0.01));\n    float n = valueNoise2D(c.gb);\n    \n    vec3 col1 = vec3(0.216, 0.471, 0.698); // blue\n    \n    float m;\n    if (iMouse.z > 0.0)\n    \tm = smoothstep( radius-0.025, radius+0.005, length(uv-coord(iMouse.xy)) );\n    else\n        m = smoothstep( radius-0.025, radius+0.005, length(0.5+uv- valueNoise2D(vec2(iTime))- vec2(sin(iTime),cos(iTime))/vec2(1.0,2.0)));\n\n    \n    \n    pixel = mix(col1,pixel, m);\n    if (iMouse.x > 10.0)\n    \tpixel = mix(pixel,c.rgb,1.0 - pow(length(c.g),9.0+2.5*n));\n    \n    fragColor = vec4(pixel, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}