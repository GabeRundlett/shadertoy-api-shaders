{
    "Shader": {
        "info": {
            "date": "1555684788",
            "description": "sbdsebv",
            "flags": 0,
            "hasliked": 0,
            "id": "tlsGR8",
            "likes": 1,
            "name": "volume test 1-1-1",
            "published": 3,
            "tags": [
                "sb"
            ],
            "usePreview": 0,
            "username": "MODer",
            "viewed": 305
        },
        "renderpass": [
            {
                "code": "//volume test\nconst float g = 10.;\nconst float p = 3.14;\nvec3 CamRor(){\n    vec3 r;\n    r = vec3(iMouse.yx/iResolution.yx+vec2(0.5),0.);\n    r.x *= -1.;\n    r.x -= p/.15;\n    r *= p/2.;\n    return r;\n}\nvec3 CamPos(){\n    vec3 p;\n    \n    p.z = +1.;\n    \n    return p;\n}\n\nfloat rayNoise(vec2 uv, vec3 r, float z, float s){\n    float col;\n    //vec3 cp = mXYZ(CamPos(),CamRor())/10.;\n    vec3 pr = mXYZ( vec3(uv,1.), r+CamRor());\n    if(pr.z < 0.){\n        col = Noise(vec3(pr.xy/(pr.z*z/20.*s),z*20.)/10.*s, 1000.);\n        col = pow(col, 4.)*2.;\n    }\n    return col;\n}\nfloat noisCall(vec2 uv, float t, vec3 r, float s){\n    float col;\nfor(int v = 1;v < int(g); v++){\n        float z = (g/float(v));\n    uv.x += t/100.;\n    col += rayNoise(uv,r, z-CamPos().z+t/500., s)/g;\n}return col;}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    vec2 uv = fragCoord.xy/iResolution.xy-0.5;\n    vec3 r;\n    //r.x = t;\n    float col;\n    //col += noisCall(uv, t, r, 2.);\n    col += pow(pow(noisCall(uv, t, r, 2.),2.)+pow(noisCall(uv, t, r, 6.)/20.,2.), 0.5);\n    \n    \n    \n        \n    fragColor = vec4(col);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float n(vec3 uv){return fract(sin(uv.x*124.2+uv.y*2374.73+uv.z*2374.46344)*8667.673);}\nfloat no(vec3 uv, float m){\n    \n    vec3 id = floor(uv.xyz/100.*m);\n    vec3 ud = fract(uv.xyz/100.*m); \n    \n    ud.xy = smoothstep(0.,1.,ud.xy);\n    //ud.z = pow(ud.z, 0.7);\n    \n    float x = mix(n(id+vec3(0)), n(id+vec3(1,0,0)), ud.x);\n    float y = mix(n(id+vec3(0,1,0)), n(id+vec3(1,1,0)), ud.x);\n    \n    float x2 = mix(n(id+vec3(0,0,1)), n(id+vec3(1,0,1)), ud.x);\n    float y2 = mix(n(id+vec3(0,1,1)), n(id+vec3(1,1,1)), ud.x);\n    \n    \n    return mix(mix(x,y,ud.y),mix(x2,y2,ud.y),ud.z);}\n\n\nfloat Noise(vec3 uv, float m){\n    uv /= 2.;\n    float c = no(uv,m)/2.;\n    c += no(uv,m*2.)/4.;\n    c += no(uv,m*4.)/8.;\n    c += no(uv,m*8.)/16.;\n    c += no(uv,m*16.)/32.;\n\n    return c;\n}\n\nvec3 mFull(vec3 pos, float r){\n    return vec3(\n    pos.x,\n    pos.y*cos(r)+pos.z*sin(r),\n    pos.y*-sin(r)+pos.z*cos(r)\n    );\n}\n\nvec3 mXYZ(vec3 p, vec3 r){\n    return mFull((mFull((mFull(p, r.x)).yxz,r.y).yxz).yxz,r.z).zyx;  \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}