{
    "Shader": {
        "info": {
            "date": "1616665976",
            "description": "Isometric symmetrical perspective + color scheme variant.\n3D Sierpinsky: outside if one of the ternary bits of location is 1 in at least 2 dimensions simultaneously.\nBut you can experiment other counts ;-)\n\nset OPAQUE to 0 for transparency ( costly ! )",
            "flags": 0,
            "hasliked": 0,
            "id": "fds3DX",
            "likes": 9,
            "name": "3D Sierpinski ternary bits (2)",
            "published": 3,
            "tags": [
                "sierpinski",
                "sierpinsky"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 370
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/fsf3WX\n\n#define OPAQUE 1\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O-=O;\n    vec2 R = iResolution.xy, S = vec2(.5,.866),\n         V = vec2( U.x, dot(U,S) ), A;\n    vec3 I0;\n    float Z = pow(3.,6.), a = Z/R.y, z;\n    V /= R.y; R = vec2(Z), V *= Z;\n    int i, n = int(log2(R.x));\n\n\n    for ( z = 0.; z <= R.y; z++ ) {                   // slices along depth\n        ivec3 I = ivec3 ( V -z , z ) , F; I0=vec3(I); // I = 3D location\n        A = abs( vec2(I) - R.y/2. );\n        if ( max(A.x,A.y) < R.y/2. )\n        for ( i = 0; i <= n; i++, I/=3 ) {            // inspect ternary bits\n            F = 1-abs(I%3-1);                         // iseq(I,1)\n         // F = ivec3(equal( I%3, ivec3(1) ));        // iseq(I,1)\n            if ( F.x+F.y+F.z > 1 ) break;             // at least 2 bits at 1: exit\n          }\n#if OPAQUE\n        if ( i == n+1 ) break;                        // in Sierpinsky\n\n#else\n        if ( i == n+1 )  O += vec4( i == n+1 );       // in Sierpinsky : optical depth++\n#endif\n    }\n  \n#if OPAQUE\n    if ( i == n+1 ) {                                 // in Sierpinsky â†’ paint\n        vec3 A = abs( I0/Z*2. - 1. );\n        i = int(iTime-1.) % 5;\n        O = i==0 ? vec4( exp(-z*4./R.y) )             // AO \n          : i==1 ? vec4(1.-abs( I0/Z - .5 ), 1)       // color schemes\n          : i==2 ? vec4( exp(-(1.-max(A.x,max(A.y,A.z)))*2.) )\n          : i==4 ? vec4( exp(-A*2.) , 1)\n          :        vec4( exp(-(1.-A)*2.) , 1);\n    }\n#else\n    O = 1.-exp(-O/40.);                               // optical depth to opacity\n#endif\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}