{
    "Shader": {
        "info": {
            "date": "1498494768",
            "description": "Metallic spaghetti layout from Shane's \"Simplex Truchet Tubing\" (use mouse to look around). Hopefully the drone doesn't crash.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "ldffDf",
            "likes": 10,
            "name": "Truchet Flythrough",
            "published": 3,
            "tags": [
                "truchet",
                "tube",
                "flight",
                "drone"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 917
        },
        "renderpass": [
            {
                "code": "// \"Truchet Flythrough\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrRCylDf (vec3 p, float r, float rt, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Hashfv3 (vec3 p);\nfloat Noisefv3 (vec3 p);\n\nvec3 dronePos, ltPos;\nvec2 aTilt;\nfloat dstFar, tCur;\nint idObj;\nconst int idDrBod = 11, idDrLamp = 12, idDrCam = 13;\nconst float pi = 3.14159;\n\nfloat DroneDf (vec3 p, float dMin)\n{\n  vec3 q, qq;\n  float d;\n  const float dSzFac = 50.;\n  dMin *= dSzFac;\n  qq = dSzFac * (p - dronePos);\n  qq.yz = Rot2D (qq.yz, - aTilt.y);\n  qq.yx = Rot2D (qq.yx, - aTilt.x);\n  q = qq;\n  q.y -= 0.05;\n  d = PrRCylDf (q.xzy, 0.2, 0.03, 0.07);\n  if (d < dMin) { dMin = d;  idObj = idDrBod; }\n  q.y -= 0.07;\n  d = PrRoundBoxDf (q, vec3 (0.06, 0.02, 0.12), 0.04);\n  if (d < dMin) { dMin = d;  idObj = idDrLamp; }\n  q = qq;\n  q.y -= -0.05;\n  d = PrSphDf (q, 0.17);\n  if (d < dMin) { dMin = d;  idObj = idDrCam; }\n  q = qq;\n  q.xz = abs (q.xz) - 0.7;\n  d = min (PrCylAnDf (q.xzy, 0.5, 0.05, 0.05), PrCylDf (q.xzy, 0.1, 0.03));\n  q -= vec3 (-0.4, -0.15, -0.4);\n  d = min (d, PrRCylDf (q.xzy, 0.05, 0.03, 0.2));\n  q -= vec3 (-0.3, 0.2, -0.3);\n  q.xz = Rot2D (q.xz, 0.25 * pi);\n  d = min (d, min (PrRCylDf (q, 0.05, 0.02, 1.), PrRCylDf (q.zyx, 0.05, 0.02, 1.)));\n  if (d < dMin) { dMin = d;  idObj = idDrBod; }\n  return dMin / dSzFac;\n}\n\nmat3 MatAxR (vec3 vd)\n{\n  float f1, f2;\n  vd = normalize (vd);\n  f1 = 1. / (1. + vd.z);\n  f2 = - f1 * vd.x * vd.y;\n  return mat3 (1. - f1 * vd.x * vd.x, f2, - vd.x,\n     f2, 1. - f1 * vd.y * vd.y, - vd.y, vd);\n}\n\nvec2 TubeNutDf (vec3 p)\n{\n  vec3 q;\n  float a, dNut, dTor;\n  float radO = sqrt(6.)/8.;\n  float radI = 0.025;\n  q = p;\n  q.xy = Rot2D (q.xy, pi / 12.);\n  a = atan (- q.y, q.x);\n  q.xy = Rot2D (q.xy, 2. * pi * (floor (6. * a / (2. * pi)) + 0.5) / 6.);\n  q.x -= radO;\n  q = abs (q);\n  dNut = max (max (max (q.x * 0.866 + q.z * 0.5, q.z) - radI - 0.013,\n     q.y - 0.03), 0.005 - q.y);\n  dNut = min (dNut, PrRCylDf (q.xzy, radI + 0.005, 0.001, 0.04));\n  dTor = length (vec2 (length (p.xy) - radO, p.z)) - radI +\n     0.004 * SmoothBump (0.2, 0.8, 0.07, mod (20. * a, 1.));\n  return vec2 (dTor, dNut);\n}\n\nvec3 TrackPath (float t)\n{\n  vec2 w;\n  w = vec2 (sin (0.22 * t), cos (0.28 * t));\n  return vec3 (dot (w, vec2 (2., -0.75)), dot (w, vec2 (0.75, 0.85)), t);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 ip0, ip1, ip2, p0, p1, p2, p3, t0, t1, t2, t3, q;\n  vec2 vMin;\n  float dMin, r;\n  q = p;\n  q.xy -= TrackPath (q.z).xy;\n  ip0 = floor (q + dot (q, vec3 (1./3.)));\n  q -= ip0 - dot (ip0, vec3 (1. / 6.));\n  ip1 = step (q.yzx, q);\n  ip2 = max (ip1, 1. - ip1.zxy);\n  ip1 = min (ip1, 1. - ip1.zxy);\n  p0 = vec3 (0.);\n  p1 = ip1 - 1./6.;\n  p2 = ip2 - 1./3.;\n  p3 = vec3 (0.5);\n  r = Hashfv3 (101. * ip0 + 102. * ip1 + 103. * ip2);\n  if (r > 0.66) { t0 = p2;  t1 = p3;  t2 = p0;  t3 = p1; }\n  else if (r > 0.33) { t0 = p3;  t1 = p0;  t2 = p1;  t3 = p2; }\n  else { t0 = p1;  t1 = p2;  t2 = p3;  t3 = p0; }\n  vMin = min (TubeNutDf ((q - 0.5 * (t0 + t1)) * MatAxR (t0 - t1)),\n              TubeNutDf ((q - 0.5 * (t2 + t3)) * MatAxR (t2 - t3)));\n  if (vMin.x < vMin.y) { dMin = vMin.x;  idObj = 1; }\n  else { dMin = vMin.y;  idObj = 2; }\n  dMin *= 0.8;\n  dMin = DroneDf (p, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 16; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += 0.07;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, ltVec;\n  float dHit, ltDist, sh, spec;\n  dHit = ObjRay (ro, rd);\n  if (dHit < dstFar) {\n    ro += dHit * rd;\n    if (idObj >= idDrBod) {\n      if (idObj == idDrBod) {\n        col = vec3 (0.2, 0.9, 0.2);\n        spec = 1.;\n      } else if (idObj == idDrLamp) {\n        col = mix (vec3 (0.3, 0.3, 1.), vec3 (1., 0., 0.),\n           step (0., sin (10. * tCur)));\n        spec = -1.;\n      } else if (idObj == idDrCam) {\n        col = vec3 (0.1);\n        spec = 1.;\n      }\n    } else {\n      if (idObj == 1) col = vec3 (0.5, 0.5, 0.55);\n      else col = vec3 (1., 0.7, 0.1);\n      col *= 0.5 + 0.5 * smoothstep (0., 1., 0.5 + 0.5 * Noisefv3 (500. * ro));\n      spec = 0.3;\n    }\n    vn = ObjNf (ro);\n    ltVec = ltPos - ro;\n    ltDist = length (ltVec);\n    ltVec /= ltDist;\n    if (spec >= 0.) {\n      sh = ObjSShadow (ro, ltVec);\n      col = col * (0.1 + 0.9 * sh * max (dot (vn, ltVec), 0.)) +\n         spec * sh * pow (max (dot (normalize (vn - rd), vn), 0.), 64.);\n      col *= 1. / (1. + 0.2 * ltDist * ltDist);\n    }\n  } else col = vec3 (0.);\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, pF, pB, u, vd;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el, vFly, f;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  vFly = 1.;\n  dronePos = TrackPath (vFly * tCur + 0.5);\n  aTilt = vec2 (20. * (TrackPath (vFly * tCur + 0.55).x - dronePos.x), 0.2);\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az = 2. * pi * mPtr.x;\n    el = -0.1 * pi + pi * mPtr.y;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = normalize (vec3 (uv, 2.5));\n  pF = TrackPath (vFly * tCur + 0.1);\n  pB = TrackPath (vFly * tCur - 0.1);\n  ro = 0.5 * (pF + pB);\n  vd = normalize (pF - pB);\n  vd.xy = Rot2D (vd.xy, 2. * (pF.x - pB.x));\n  u = - vd.y * vd;\n  f = 1. / sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd) *\n     vuMat;\n  rd = vuMat * rd;\n  ltPos = ro + vuMat * vec3 (0.3, 0.5, 0.1);\n  dstFar = 20.;\n  fragColor = vec4 (pow (clamp (ShowScene (ro, rd), 0., 1.), vec3 (0.8)), 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrRCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv3 (vec3 p)\n{\n  return fract (sin (dot (p, cHashA3)) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  float q;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  q = dot (ip, cHashA3);\n  t1 = Hashv4f (q);\n  t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}