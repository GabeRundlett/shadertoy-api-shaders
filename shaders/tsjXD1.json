{
    "Shader": {
        "info": {
            "date": "1553692233",
            "description": "A very simple (physically inaccurate) water simulation, that just works! Try dragging mouse around. (Or just clicking on mobile).",
            "flags": 32,
            "hasliked": 0,
            "id": "tsjXD1",
            "likes": 8,
            "name": "Simple water",
            "published": 3,
            "tags": [
                "simulation",
                "interactive",
                "water"
            ],
            "usePreview": 1,
            "username": "charlieamer",
            "viewed": 853
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// fragColor = vec4(texture(iChannel0, fragCoord.xy / iResolution.xy).r);\n    vec4 simColor = texture(iChannel0, fragCoord.xy / iResolution.xy).rgba;\n\tfragColor = vec4(simColor.r, simColor.r, simColor.b, simColor.a);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 streamDirection = vec2(2.0f, 0.0f);\nconst float randomAmount = 0.001f;\nconst float randomStreamDirectionAmount = 1.0f;\nconst float neighborStrength = 0.2f;\nconst float damping = 0.9f;\nconst float extraMomentum = 1.15f;\n\nfloat heightAtPosition(vec2 coord) {\n    return texture(iChannel0, (coord.xy - streamDirection) / iResolution.xy).r - 0.5f;\n}\nfloat velocityAtPosition(vec2 coord) {\n    return texture(iChannel0, (coord.xy - streamDirection) / iResolution.xy).g - 0.5f;\n}\nfloat rand(vec2 co){\n \t// return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453) - 0.5f;\n    return texture(iChannel1, co.xy / iResolution.xy).r - 0.5f;\n}\n\nfloat saturate(float val) {\n    return clamp(val, 0.0f, 1.0f);\n}\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // fragColor = vec4(distance(iMouse.xy, fragCoord) < 10.0);\n    // fragColor += texture(iChannel0, fragCoord.xy / iResolution.xy);\n    \n    float debug = 0.5f;\n    float randValue = rand(fragCoord + vec2(iTime * -200.0f, 0.0f));\n    \n    streamDirection = rotate(streamDirection, randValue * randomStreamDirectionAmount);\n    \n    float z = heightAtPosition(fragCoord);\n    float v = velocityAtPosition(fragCoord);\n    \n    float neighbors = heightAtPosition(fragCoord + vec2(1, 0)) +\n        \t\t\t  heightAtPosition(fragCoord + vec2(-1, 0)) +\n        \t\t\t  heightAtPosition(fragCoord + vec2(0, 1)) +\n        \t\t\t  heightAtPosition(fragCoord + vec2(0, -1));\n    \n    float neighborSpeed = velocityAtPosition(fragCoord + vec2(1, 0)) +\n        \t\t\t  \t  velocityAtPosition(fragCoord + vec2(-1, 0)) +\n        \t\t\t\t  velocityAtPosition(fragCoord + vec2(0, 1)) +\n        \t\t\t\t  velocityAtPosition(fragCoord + vec2(0, -1));\n    neighborSpeed /= 4.0f;\n    \n    float finalZ = (neighbors - 4.0f * z) * neighborStrength + v + z;\n    finalZ *= damping;\n    float finalV = finalZ - z + randValue * randomAmount;\n    finalV *= extraMomentum;\n    finalV -= neighborSpeed * 0.1;\n    \n    // finalZ = 0.0f;\n    if (distance(iMouse.xy, fragCoord) < 5.0f)\n    {\n        finalZ = 0.5f;\n    }\n    \n    // A simple blocking circle\n    if (distance(vec2(300, 200), fragCoord) < 20.0f)\n    {\n        finalZ = 0.5f;\n        debug = 1.0f;\n    }\n    \n    fragColor = vec4(saturate(finalZ + 0.5f), saturate(finalV + 0.5f), debug, 0);\n    // fragColor = vec4(randValue);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}