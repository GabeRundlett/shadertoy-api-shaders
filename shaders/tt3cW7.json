{
    "Shader": {
        "info": {
            "date": "1609211832",
            "description": "ciudad loca",
            "flags": 8,
            "hasliked": 0,
            "id": "tt3cW7",
            "likes": 2,
            "name": "ciudad loca",
            "published": 3,
            "tags": [
                "ciudadloca"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 274
        },
        "renderpass": [
            {
                "code": "//por jorge2017a1\n\nvec2 mouse;\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define SS(U) smoothstep(3./R.y,0.,U)\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n\nvec2 opU2( vec2 d1, vec2 d2 ) \n{ if (d1.x<d2.x) return d1;   else return d2; }\n\nvec2 opS2( vec2 d1, vec2 d2 )\n{ if  (-d1.x<d2.x) return d1;  else  return d2;}\n\nvec2 opI2( vec2 d1, vec2 d2 ) \n{ if (d1.x>d2.x) return d1; else return d2;}\n\nvec2 opS(vec2 d1, vec2 d2) \n{ return vec2(max(-d2.x, d1.x), 2.0); }\n\nvec2 opRep2D( in vec2 p, in vec2 c )\n{    vec2 q = mod(p+0.5*c,c)-0.5*c; return  q; }\n\nfloat sdCirc(vec2 p, float r)\n{  return length(p)-r; }\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0); }\n\n\nvec2 simpleVehiculo(vec2 p)\n{\n    float sb1= sdBox(p-vec2(0.0,-0.25), vec2(0.06,0.04) );\n    float sLlantaIzq= sdBox(p-vec2(-0.08,-0.25), vec2(0.01,0.05) );\n    float sLlantaDer= sdBox(p-vec2( 0.08,-0.25), vec2(0.01,0.05) );\n    float sdVentanaA= sdHexagon( p-vec2(0.0,-0.2), 0.05 );\n    float sdVentanaB= sdHexagon( p-vec2(0.0,-0.2), 0.06 );\n    vec2 resp=vec2(9999.9,-1.0);\n    sdVentanaA=opS(sdVentanaA,sdVentanaB);\n    sdVentanaB=opS(sb1,sdVentanaB);\n    resp=opU2(resp, vec2(sdVentanaB,4.0));\n    resp=opU2(resp, vec2(sdVentanaA,1.0));\n    resp=opU2(resp, vec2(sb1,3.0));\n    resp=opU2(resp, vec2(sLlantaIzq,8.0));\n    resp=opU2(resp, vec2(sLlantaDer,8.0));\n    return resp;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tmouse=vec2(0.5,0.0);\n\tvec2 pos = ( fragCoord.xy / iResolution.xy ) - vec2(0.5,0.5);\t\n    float horizon = 0.01;   //0.2\n    float fov = 0.5; \n\tfloat scaling = 0.1;\n\t\n\tvec3 p = vec3(pos.x, fov, pos.y - horizon);      \n\tvec2 s = vec2(p.x/p.z, p.y/p.z) * scaling;\n    vec2 sE1=simpleVehiculo(pos-vec2(0.25*sin(iTime),0.0) );\n    vec2 sE2=simpleVehiculo(pos*0.5-vec2(0.25*sin(0.5+iTime*0.45),0.0) );\n    vec2 sE3=simpleVehiculo(pos*2.0-vec2(0.35*sin(iTime*0.5),0.2) );\n    \n    vec3 col;\n    float color;\n\t//checkboard texture\n    if (s.y<0.0)\n    { \n        float posy=iTime*0.125;\n         color = sign((mod(s.x, 0.1) - 0.05) * (mod(s.y-posy, 0.1) - 0.05));\t\n         //fading\n        color *= p.z*p.z*100.0;\n        col=vec3(color);\n     }\n    else\n        col=vec3(0.4,0.0,1.0)*fract( dot( vec2(p.x+0.35,p.y+0.55),vec2(0.6,0.35) )  );\n    \n    col= DibujoConBordeVec2(s, sE1, col);\n    col= DibujoConBordeVec2(s, sE2, col);\n    col= DibujoConBordeVec2(s, sE3, col);\n    fragColor = vec4( col, 1.0 );\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{ vec3 color; };\n    \nTObj mObj;\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.75),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(0.9),  //31\nvec3(0.8),  //32\nvec3(0.7),  //33\nvec3(0.6),  //34\nvec3(150.,75.,0.0)/255.,  //35  //marron o cafe\nvec3(204.,119.,34.0)/255.,  //36 //marron o cafe\nvec3(184.,115.,51.0)/255.  //37 //marron o cafe\n\n    \n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\nvec3 getColorf(float ii)\n{\n    int i=int(ii);\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n// MASKS\nfloat fillMask(float distanceChange, float dist) \n{\n    return smoothstep(distanceChange, -distanceChange, dist);\n}\n\nfloat blurMask(float distanceChange, float dist, float blurAmount) {\n    float blurTotal = blurAmount*.01;\n    return smoothstep(blurTotal+distanceChange, -distanceChange, dist);\n}\n\nfloat innerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist+width);\n}\n\nfloat outerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist-width);\n}\n\n\nvec3 DibujoConBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\nvec3 DibujoSinBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    //colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    colOut = mix(colOut, colIn, uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 rotate2d(vec2 p, float ang)\n{\n    float c = cos(ang); float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nmat2 rot2D(float a)\n{\n    float c=cos(a);  float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nvec3 DibujoConBordeVec2(vec2 uv, vec2 vdist,   vec3 colOut)\n{   \n    vec3 colIn=getColorf(vdist.y); //color\n    float dist=vdist.x; //distancia\n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\n\n\n\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 mainSound( int samp, float time )\n{\n    \n    float x=time*440.0;\n    float fx=mod(x,2.0) +mod(1.0-x,2.0);\n    \n    float tt=mod( x,2.0);\n    return vec2( sin(fx*time)* exp(-3.0*tt) )*0.250;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}