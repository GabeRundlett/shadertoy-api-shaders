{
    "Shader": {
        "info": {
            "date": "1559670793",
            "description": "Analytic intersection of a Goursat surface (degree 4 equation).",
            "flags": 0,
            "hasliked": 0,
            "id": "3lj3DW",
            "likes": 43,
            "name": "Goursat - intersection",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "raycast",
                "intersection",
                "quartic",
                "goursat"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 3847
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Analytic intersection of a Goursat surface (degree 4 equation). I think I\n// still have a bug...\n\n// List of ray-surface intersectors at https://www.shadertoy.com/playlist/l3dXRf\n// and https://iquilezles.org/articles/intersectors\n\n\n// (x4 + y4 + z4) - (r2^2)·(x2 + y2 + z2) + r1^4 = 0;\nfloat iGoursat( in vec3 ro, in vec3 rd, in float ka, float kb )\n{\n    float po = 1.0;\n\n    vec3 rd2 = rd*rd; vec3 rd3 = rd2*rd;\n    vec3 ro2 = ro*ro; vec3 ro3 = ro2*ro;\n\n    // raw quartic\n    float k4 = dot(rd2,rd2);\n    float k3 = dot(ro ,rd3);\n    float k2 = dot(ro2,rd2) - kb/6.0;\n    float k1 = dot(ro3,rd ) - kb*dot(rd,ro)/2.0;\n    float k0 = dot(ro2,ro2) + ka - kb*dot(ro,ro);\n\n    // make leading coefficient 1\n    k3 /= k4;\n    k2 /= k4;\n    k1 /= k4;\n    k0 /= k4;\n    \n    // reduced cubic\n    float c2 = k2 - k3*(k3);\n    float c1 = k1 + k3*(2.0*k3*k3-3.0*k2);\n    float c0 = k0 + k3*(k3*(c2+k2)*3.0-4.0*k1);\n\n#if 1\n    // prevent |c1| from being too close to zero\n    // reduced cubic\n    if( abs(c1) < 0.1*abs(c2) )\n    {\n        po = -1.0;\n        float tmp=k1; k1=k3; k3=tmp;\n        k0 = 1.0/k0;\n        k1 = k1*k0;\n        k2 = k2*k0;\n        k3 = k3*k0;\n\n        c2 = k2 - k3*(k3);\n        c1 = k1 + k3*(2.0*k3*k3-3.0*k2);\n        c0 = k0 + k3*(k3*(c2+k2)*3.0-4.0*k1);\n    }\n#endif\n\n\n    c0 /= 3.0;\n\n    float Q = c2*c2 + c0;\n    float R = c2*c2*c2 - 3.0*c0*c2 + c1*c1;\n    float h = R*R - Q*Q*Q;\n    \n    // 2 intersections\n    if( h>0.0 )\n    {\n        h = sqrt(h);\n\n        float s = sign(R+h)*pow(abs(R+h),1.0/3.0); // cube root\n        float u = sign(R-h)*pow(abs(R-h),1.0/3.0); // cube root\n        \n        float x = s+u+4.0*c2;\n        float y = s-u;\n        float ks = x*x + y*y*3.0;\n        float k = sqrt(ks);\n\n\t\tfloat t = -0.5*po*abs(y)*sqrt(6.0/(k+x)) - 2.0*c1*(k+x)/(ks+x*k) - k3;\n        return (po<0.0)?1.0/t:t;\n    }\n\t\n\t// 4 intersections\n    float sQ = sqrt(Q);\n    float w = sQ*cos(acos(-R/(sQ*Q))/3.0);\n  //float w = sQ*cos(atan(sqrt(-h),-R)/3.0);\n\n    float d2 = -w - c2; if( d2<0.0 ) return -1.0;\n    float d1 = sqrt(d2);\n    float h1 = sqrt(w - 2.0*c2 + c1/d1);\n    float h2 = sqrt(w - 2.0*c2 - c1/d1);\n\n    float t1 = -d1 - h1 - k3; t1 = (po<0.0)?1.0/t1:t1;\n    float t2 = -d1 + h1 - k3; t2 = (po<0.0)?1.0/t2:t2;\n    float t3 =  d1 - h2 - k3; t3 = (po<0.0)?1.0/t3:t3;\n    float t4 =  d1 + h2 - k3; t4 = (po<0.0)?1.0/t4:t4;\n\n    float t = 1e20;\n    if( t1>0.0 ) t=t1;\n    if( t2>0.0 ) t=min(t,t2);\n    if( t3>0.0 ) t=min(t,t3);\n    if( t4>0.0 ) t=min(t,t4);\n    return t;\n}\n\nvec3 nGoursat( in vec3 pos, float ka, float kb )\n{\n    return normalize( 4.0*pos*pos*pos - 2.0*pos*kb );\n}\n\n#define AA 2\n\n#define ZERO min(iFrame,0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera movement\t\n\tfloat an = 0.3*iTime;\n\tvec3 ro = vec3( 3.2*cos(an), 1.5, 3.2*sin(an) );\n    vec3 ta = vec3( 0.0, -0.05, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    // object animation\n    float def = smoothstep(-1.0,-0.4,-cos(0.3*iTime));\n    float ra = 0.3 + def*0.6*sin(1.311*iTime+0.0);\n    float rb = abs(ra) + 0.6 + def*0.25*sin(0.73*iTime+3.0);\n\n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n\t    vec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n        // raytrace\n        float t = iGoursat( ro, rd, ra, rb );\n\n        // shading/lighting\t\n\t    vec3 col = vec3(0.08)*(1.0-0.3*length(p));\n        \n\t    if( t>0.0 )\n\t    {\n            vec3 pos = ro + t*rd;\n\t\t    vec3 nor = nGoursat( pos, ra, rb );\n            vec3 lig = normalize(vec3(0.7,0.6,0.3));\n            vec3 hal = normalize(-rd+lig);\n            float inn = dot(nor,normalize(pos));\n\t\t    float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n\t\t    float amb = (0.5+0.5*nor.y)*(0.6+0.4*inn)*(0.6+0.4*pow(0.5+0.5*inn,2.0));\n            \n            const float fr = 20.5;\n            vec3 th = abs(nor);\n            //col = vec3(0.4) + 0.4*smoothstep(-0.01,0.01,cos(pos.x*fr*0.5)*cos(pos.y*fr*0.5)*cos(pos.z*fr*0.5)); \n            col = vec3(0.6) + 0.4*smoothstep(-0.01,0.01,cos(pos.x*fr*0.5)*cos(pos.y*fr*0.5)*cos(pos.z*fr*0.5));\n            float wi = smoothstep(-1.0,-0.98-0.015*th.x,cos(pos.x*fr))\n                      *smoothstep(-1.0,-0.98-0.015*th.y,cos(pos.y*fr))\n                      *smoothstep(-1.0,-0.98-0.015*th.z,cos(pos.z*fr));\n            col *= wi;\n#if 0\n\t\t    col *= vec3(0.3,0.5,0.7)*amb + vec3(1.1,0.8,0.6)*dif;\n            col += wi*0.5*pow(clamp(dot(hal,nor),0.0,1.0),32.0)*dif;\n#else\n\t\t    col *= amb;\n            float fre = clamp(1.0+dot(rd,nor),0.0,1.0);\n            col += col*fre;\n#endif            \n\t    }\n\t\n        col = sqrt( col );\n\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\t// dither to remove banding in the background\n    tot += fract(sin(fragCoord.x*vec3(13,1,11)+fragCoord.y*vec3(1,7,5))*158.391832)/255.0;\n\n    \n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}