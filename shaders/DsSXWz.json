{
    "Shader": {
        "info": {
            "date": "1670143282",
            "description": "Controls:\nUp Arrow - Jump\nF - Toggle in/out screen mode\nMouse drag - pan around the console\n\nWait what?!?!",
            "flags": 48,
            "hasliked": 0,
            "id": "DsSXWz",
            "likes": 6,
            "name": "Flappybird on a 3d console?!",
            "published": 3,
            "tags": [
                "aweoifjew"
            ],
            "usePreview": 0,
            "username": "import_shader_steve",
            "viewed": 197
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define SURF_DIST 0.01\n#define MAX_DIST 100.\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat degToRad(float deg) {\n    return deg / 180. * PI;\n}\n\nstruct Hit {\n    float d;\n    int id;\n};\n\nHit sdSphere( vec3 p, float s )\n{\n  float d = length(p)-s;\n  return Hit(d, 2);\n}\n\nHit sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  float x = min(max(d.x,d.y),0.0) + length(max(d,0.0));\n  return Hit(x, 3);\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    float d = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n    return d;\n}\n\nHit sdBaseBox( vec3 p, vec3 b )\n{\n    //p.x -= abs(p.y + 1.);\n    //p.x -= abs(p.y);\n    //p.x -= abs(p.y) * abs(p.z);\n    //p.x -= 2.;\n    if (p.y > 0. && p.z < 0.) {\n       p.z += p.y; \n    }\n    float d = sdBox(p, b);\n    return Hit(d, 0);\n}\n\nHit sdMidBox1(vec3 p, vec3 b) {\n    if (p.z < 0.) {\n        p.z -= p.y;\n    }\n    float d = sdBox(p, b);\n    return Hit(d, 0);\n}\n\nHit sdMidBox2(vec3 p, vec3 b) {\n    if (p.z < 0.) {\n        p.z -= p.y * .3;\n    }\n    float d = sdBox(p, b);\n    return Hit(d, 0);\n}\n\nHit sdTorus( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    float d = length(q)-t.y;\n    return Hit(d, 0);\n}\n\nHit sdGround(vec3 p) {\n    float d = p.y;\n    return Hit(d, -1);\n}\n\nHit minWithId(Hit a, Hit b) {\n    if (a.d < b.d) return a;\n    return b;\n}\n\n// function to transform the screen\nvec3 transformScreen(vec3 p) {\n    p -= vec3(0., 3.3, 5.48);\n    p.yz *= Rot(degToRad(-16.5)); // transform the screen, need to rotate the textureUV to the same degree in mainImage()\n    return p;\n}\n\nHit GetDist(vec3 p) {\n    vec3 bp1 = p - vec3(0., 1., 6.);\n    //bp.xy *= Rot(iTime);\n    Hit dBaseBox = sdBaseBox(bp1, vec3(1.));\n    \n    vec3 bp2 = vec3(0., 2.3, 6.);\n    Hit dMidBox1 = sdMidBox1(p - bp2, vec3(1., .3, 1.));\n    \n    vec3 bp3 = vec3(0., 3.3, 5.8);\n    Hit dMidBox2 = sdMidBox2(p - bp3, vec3(1., .7, .3));\n    \n    vec3 bp4 = vec3(0., 4., 6.8);\n    Hit dTopBox = sdBaseBox(p - bp4, vec3(1.));\n    \n    vec3 bp5 = vec3(0., 2., 6.8);\n    Hit dBackBox = Hit(sdBox(p - bp5, vec3(1., 2., 1.)), 0);\n    \n    // sphere joystick tops\n    vec3 pSphere1 = vec3(-.5, 2.35, 4.5);\n    Hit dSphere1 = sdSphere(p - pSphere1, .07);\n    vec3 pSphere2 = vec3(.5, 2.35, 4.5);\n    Hit dSphere2 = sdSphere(p - pSphere2, .07);\n    \n    // cylinder joystick sticks\n    vec3 pCylinder1 = vec3(-.5, 2.2, 4.5);\n    Hit dCylinder1 = sdCappedCylinder(p - pCylinder1, .03, .2);\n    vec3 pCylinder2 = vec3(.5, 2.2, 4.5);\n    Hit dCylinder2 = sdCappedCylinder(p - pCylinder2, .03, .2);\n    \n    vec3 bpScreen = transformScreen(p);\n    float dScreen = sdBox(bpScreen, vec3(1., 1.*(iResolution.y/iResolution.x), .01));\n    int idScreen = 1;\n    Hit hitScreen = Hit(dScreen, idScreen);\n    \n    vec3 pGround = vec3(0., 0., 3.);\n    Hit dGround = sdGround(p - pGround);\n    \n    //float dScene = dSphere;\n    Hit dScene = minWithId(dBaseBox, dGround);\n    dScene = minWithId(dScene, dMidBox1);\n    dScene = minWithId(dScene, dMidBox2);\n    dScene = minWithId(dScene, dTopBox);\n    dScene = minWithId(dScene, dBackBox);\n    dScene = minWithId(dScene, dSphere1);\n    dScene = minWithId(dScene, dSphere2);\n    dScene = minWithId(dScene, dCylinder1);\n    dScene = minWithId(dScene, dCylinder2);\n    dScene = minWithId(dScene, hitScreen);\n    \n    return dScene;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(0.01, 0.);\n    float d = GetDist(p).d;\n    vec3 n = d - vec3(\n        GetDist(p - e.xyy).d,\n        GetDist(p - e.yxy).d,\n        GetDist(p - e.yyx).d);\n    return normalize(n);\n}\n\n// make a light above the sphere\nvec3 lightPos = vec3(-2, 5, 3);\n\nfloat GetLight(vec3 p) {\n    //lightPos.xz = vec2(sin(iTime*2.), cos(iTime*2.)) * 5.;\n    vec3 lv = normalize(lightPos - p);\n    vec3 nv = GetNormal(p);\n    float rawLight = dot(lv, nv);\n    float finalLight = clamp(rawLight, 0., 1.);\n    return finalLight;\n}\n\n// old ray march function, cannot return Hit id. Further investigate what went wrong\n//Hit RayMarch(vec3 ro, vec3 rd) {\n//    Hit d0;\n//    for (int i = 0; i < MAX_STEP; i++) {\n//        vec3 p = ro + rd * d0.d;\n//        Hit ds = GetDist(p);\n//        d0.d += ds.d;\n//        if (ds.d < SURF_DIST || d0.d > MAX_DIST) break;\n//    }\n//    return d0;\n//}\n\nHit RayMarch(vec3 ro, vec3 rd) {\n  float depth = 0.0;\n  Hit co; // closest object\n\n  for (int i = 0; i < MAX_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = GetDist(p);\n    depth += co.d;\n    if (co.d < SURF_DIST || depth > MAX_DIST) break;\n  }\n  \n  co.d = depth;\n  \n  return co;\n}\n\nfloat GetShadow(vec3 p) {\n    vec3 rd = normalize(lightPos - p);\n    vec3 pOffset = p + GetNormal(p) * SURF_DIST * 2.;\n    float ds = RayMarch(pOffset, rd).d;\n    float dl = length(p - lightPos);\n    if (ds < dl) {\n        return 0.1;\n    } else {\n        return 1.;\n    }\n}\n\n// input camera position, lookAt point, & zoomFactor, output camera ray direction\nvec3 makeCamera(vec3 ro, vec3 lookAt, float zoomFactor, vec2 uv) {\n    vec3 fVect = normalize(lookAt - ro);\n    vec3 rVect = normalize(cross(vec3(0., 1., 0.), fVect));\n    vec3 uVect = normalize(cross(fVect, rVect));\n    vec3 rd = normalize(uv.x * rVect + uv.y * uVect + zoomFactor * fVect);\n    return rd;\n}\n\nvec3 backgroundColor = vec3(1., 169./256., 20./256.);\nvec3 arcadeMachineColor = vec3(39./256., 73./256., 127./256.);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy; //[0, 1]\n    vec3 col = vec3(0.);\n    \n    vec3 r0 = vec3(0., 5., -3.);\n    //ro.yz *= Rot(-m.y+.4);\n    //ro.xz *= Rot(-m.x*6.2831);\n    \n    //vec3 lookAt = vec3(0., 3., 6.);\n    vec3 lookAt = vec3(0., 3.3, 5.48);\n    float rho = length(lookAt - r0);\n    // calculate camera origin based on mouse input, using sphere coordinates\n    vec3 r1 = vec3(0., 0., -3.);\n    float phi = (phiHigh-phiLow) * m.y + phiHigh;\n    r1.y = r0.y + rho * cos(phi);\n    float theta = (thetaHigh-thetaLow) * m.x + thetaLow;\n    theta *= 1.2;\n    r1.x = r0.x + length(lookAt-r1) * sin(theta);\n    r1.z = r0.z - length(lookAt-r1) * cos(theta);\n    // lookAt.x = sin(sin(iTime)*PI/6.);\n    // lookAt.y = sin((sin(iTime)/2.+0.5)*(PI*2.));\n    \n    float zoomFactor = texelFetch( iChannel1, ivec2(0,0), 0).x;\n    \n    vec3 rd = makeCamera(r1, lookAt, zoomFactor, uv);\n    \n    Hit d = RayMarch(r1, rd);\n    if (d.d > MAX_DIST) {\n        col = backgroundColor;\n    } else {\n        vec3 p = r1 + rd * d.d;\n        //float l = GetLight(p) * GetShadow(p);\n        float diff = GetLight(p); // diffuse lighting\n        vec3 differentColors = arcadeMachineColor;\n        if (d.id == 1) {\n            vec3 absNormals = abs(GetNormal(p));\n            // fiddle with the screen texture uv coords to get BufferB mapped onto the screen\n            // further investigate on what relationship between transformed 3D -> 2D coords\n            p = transformScreen(p);\n            vec2 textureUV = vec2(p.x*.5 + .5, p.y*.85-.52);\n            vec3 colXY = texture(iChannel0, textureUV).rgb;\n            differentColors = colXY * absNormals.z;\n        } else if (d.id == 2) {\n            differentColors = vec3(1., 0., 0.);\n        } else if (d.id == 3) {\n            differentColors = vec3(10.);\n        } else if (d.id == -1) {\n            vec3 floorColor = vec3(1. + 0.7*mod(floor(p.x) + floor(p.z), 2.0));\n            differentColors = floorColor;\n        }\n        col += diff * differentColors + backgroundColor * .2;\n    }\n    \n    float fDigits = 6.0;\n\tfloat fDecimalPlaces = 4.0;\n    float printValue1 = phi;\n    col = mix(col, vec3(1.0, 0.5, 0.0), PrintValue(fragCoord, grid(-2,0), fontSize, printValue1, fDigits, fDecimalPlaces));\n    float printValue2 = theta;\n    //col = mix(col, vec3(1.0, 0.5, 0.0), PrintValue(fragCoord, grid(10,0), fontSize, printValue2, fDigits, fDecimalPlaces));\n    \n    fragColor = vec4(col ,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// For details on how the keyboard input works, see iq's tutorial: https://www.shadertoy.com/view/lsXGzf\n\n// Numbers are based on JavaScript key codes: https://keycode.info/\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvec4 handleKeyboard(vec4 info) {\n    \n    float pressed = texelFetch( iChannel1, ivec2(KEY_UP,1),0 ).x;\n    // info.x -> pressedTime\n    // info.y -> elapsedTime\n    if (pressed == 1.) {\n        info.x = iTime;\n        info.y = 0.;\n    } else {\n        info.y += iTimeDelta;\n    }\n    // info.z -> current velocity\n    if (pressed == 1.) {\n        info.z = vJump;\n    } else {\n        info.z -= 30. * info.y / 1000.;\n    }\n    // info.w -> current height\n    info.w = clamp(info.w + info.z * iTimeDelta, low, high);\n\n    return info;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Return the offset value from the last frame (zero if it's first frame)\n    vec4 info = texelFetch( iChannel0, ivec2(69, 0), 0).xyzw;\n    \n    // Pass in the offset of the last frame and return a new offset based on keyboard input\n    info = handleKeyboard(info);\n\n    // Store offset in the XY values of every pixel value and pass this data to the \"Image\" shader and the next frame of Buffer A\n    fragColor = vec4(info);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI 3.14159\n\nfloat DigitBin(const in int x)\n{\n    return x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;\n}\nfloat PrintValue(vec2 fragCoord, vec2 pixelCoord, vec2 fontSize, float value,\n\t\tfloat digits, float decimals) {\n\tvec2 charCoord = (fragCoord - pixelCoord) / fontSize;\n\tif(charCoord.y < 0.0 || charCoord.y >= 1.0) return 0.0;\n\tfloat bits = 0.0;\n\tfloat digitIndex1 = digits - floor(charCoord.x)+ 1.0;\n\tif(- digitIndex1 <= decimals) {\n\t\tfloat pow1 = pow(10.0, digitIndex1);\n\t\tfloat absValue = abs(value);\n\t\tfloat pivot = max(absValue, 1.5) * 10.0;\n\t\tif(pivot < pow1) {\n\t\t\tif(value < 0.0 && pivot >= pow1 * 0.1) bits = 1792.0;\n\t\t} else if(digitIndex1 == 0.0) {\n\t\t\tif(decimals > 0.0) bits = 2.0;\n\t\t} else {\n\t\t\tvalue = digitIndex1 < 0.0 ? fract(absValue) : absValue * 10.0;\n\t\t\tbits = DigitBin(int (mod(value / pow1, 10.0)));\n\t\t}\n\t}\n\treturn floor(mod(bits / pow(2.0, floor(fract(charCoord.x) * 4.0) + floor(charCoord.y * 5.0) * 4.0), 2.0));\n}\n// Multiples of 4x5 work best\nconst vec2 fontSize = vec2(4,5) * vec2(5,5);\nvec2 grid(int x, int y) {\n    return fontSize.xx * vec2(1,ceil(fontSize.y/fontSize.x)) * vec2(x,y) + vec2(2);\n}\n\nconst float vJump = 0.6;\nconst float high = 0.9;\nconst float low = -0.9;\n\n\n\nconst float phiLow = PI*.375; // phi value when iMouse.y == 0.\nconst float phiHigh = PI*.5; // phi value when iMouse.y == 1.\n\nconst float thetaLow = PI*.5; // theta value when iMouse.x == 0.\nconst float thetaHigh = -PI*.5; // theta value when iMouse.x == 1.",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float sdfCircle(vec2 uv, float r, float offset) {\n    float x = uv.x + iResolution.x/iResolution.y - r * 2.;\n    float y = uv.y - offset;\n    \n    float d = length(vec2(x, y)) - r;\n    \n    return step(0., -d);\n}\n\nvec3 drawCircle(vec2 uv) {\n    vec3 col = vec3(0);\n    \n    // Fetch the offset from the XY part of the pixel values returned by Buffer A\n    float offset = texelFetch( iChannel0, ivec2(34,0), 0 ).w;\n    \n    float blueCircle = sdfCircle(uv, 0.1, offset);\n    \n    col = mix(col, vec3(0, 0, 1.), blueCircle);\n    \n    return col;\n}\n\nfloat sdfBox(vec2 uv, float width, float height) {\n    float horizontal = 1. - step(height/2., abs(uv.y));\n    float vertical = 1. - step(width/2., abs(uv.x));\n    return horizontal * vertical;\n}\n\nfloat drawPillars(vec2 uv, float x, float y, float width, float height) {\n    uv -= vec2(x, y);\n    return sdfBox(uv, width, height);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // [0.0 ~ 1.0]\n    uv -= 0.5; // [-0.5 ~ 0.5]\n    uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n    uv *= 2.; // [-1.0 ~ 1.0]\n\n    // draw the blue circle\n    vec3 col = drawCircle(uv);\n    \n    float fDigits = 6.0;\n\tfloat fDecimalPlaces = 4.0;\n    float pressedTime = texelFetch(iChannel0, ivec2(0, 0), 0).x;\n    //col = mix(col, vec3(1.0, 0.5, 0.0), PrintValue(fragCoord, grid(-2,0), fontSize, pressedTime, fDigits, fDecimalPlaces));\n    float elapsedTime = texelFetch(iChannel0, ivec2(0, 0), 0).y;\n    //col = mix(col, vec3(0.0, 0.5, 1.0), PrintValue(fragCoord, grid(10,0), fontSize, elapsedTime, fDigits, fDecimalPlaces));\n    float currentVelocity = texelFetch(iChannel0, ivec2(0, 0), 0).z;\n    //col = mix(col, vec3(0.5, 0.0, 1.0), PrintValue(fragCoord, grid(25,0), fontSize, currentVelocity, fDigits, fDecimalPlaces));\n    float currentHeight = texelFetch(iChannel0, ivec2(0, 0), 0).w;\n    //col = mix(col, vec3(0.0, 1.0, 0.0), PrintValue(fragCoord, grid(40,0), fontSize, currentHeight, fDigits, fDecimalPlaces));\n    \n    // draw the moving pillars\n    uv *= 1.5; // [-1.5, 1.5]\n    uv.x += iTime * 1.;\n    \n    float id = floor(uv.x);\n    float nXoffset = fract(sin(id * 234.12) * 5463.3) * 2. - 1.; // [-1., 1.]\n    \n    // the actual total height of top & bottom pillars on screen is actually half the totalHeight\n    // b/c half of both pillars are outside of the screen, not visible\n    const float totalHeight = 3.;\n    float nBottomHeight = fract(sin(id * 345.67) * 7891.2) * totalHeight; // [0., 2.5]\n    float nTopHeight = totalHeight - nBottomHeight;\n    \n    uv.x = fract(uv.x) - .5; // [-0.5, 0.5]\n    const float width = .3;\n    float x = .35 * nXoffset; // [-.35, .35], b/c 0.5 - 0.3/2 = 0.35\n    float y1 = -1.5;\n    float bottom_pillars = drawPillars(uv, x, y1, width, nBottomHeight);\n    col += mix(col, vec3(1., 1., 0.), bottom_pillars);\n    float y2 = 1.5;\n    float top_pillars = drawPillars(uv, x, y2, width, nTopHeight);\n    col += mix(col, vec3(1., 1., 0.), top_pillars);\n    \n    // if col == 'white', then means circle collides with pillars\n    if (col == vec3(1., 1., 1.)) {\n        col = vec3(0.);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// handle F - toggle zoomFactor\n\nconst float KEY_F = 70.5;\nconst float zoomSpeed = 10.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoomFactor = texelFetch( iChannel0, ivec2(0,0), 0).x;\n    float toggle = texelFetch( iChannel1, ivec2(KEY_F,2),0 ).x;\n    if (toggle == 1.) {\n        zoomFactor = clamp(zoomFactor + iTimeDelta * zoomSpeed, 3., 15.);\n    } else {\n        zoomFactor = clamp(zoomFactor - iTimeDelta * zoomSpeed, 3., 15.);\n    }\n    fragColor = vec4(zoomFactor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}