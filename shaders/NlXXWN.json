{
    "Shader": {
        "info": {
            "date": "1625669009",
            "description": "Just an atmosphere scattering light (1 step scattering only)\nUse mouse to move the scene\ntry #define SEE_FROM_INSIDE",
            "flags": 0,
            "hasliked": 0,
            "id": "NlXXWN",
            "likes": 18,
            "name": "Atmospherical Scattering",
            "published": 3,
            "tags": [
                "raytracing",
                "sun",
                "normals",
                "light",
                "scattering",
                "atmosphere",
                "ssao"
            ],
            "usePreview": 0,
            "username": "Txoka",
            "viewed": 701
        },
        "renderpass": [
            {
                "code": "//TUNING PARAMETERS HAS MADE ME INSANE. PLS APRECIATE THE WORK XD\n\n\n#define R iResolution\n#define time (iTime*0.5)\n\n#define SEE_ATMOSPHERE\n//#define SEE_FROM_INSIDE\n//#define EXPERIMENTAL_PLANET_SHADOW\n//#define CRAPPY_AA\n\n\nstruct ray{\n\tvec3 ro;\n    vec3 rd;\n};\nstruct sph{\n    vec3 c;\n\tfloat r;\n};\n\nconst vec3 center=vec3(0);\n\n#ifdef EXPERIMENTAL_PLANET_SHADOW\nconst int VIEW_SAMPLES=64;\n#else\nconst int VIEW_SAMPLES=25;\n#endif\n\nconst int DEPTH_SAMPLES=8;\n\nconst sph atm=sph(center,1.);\nconst vec3 sunInt=vec3(1.);\nconst sph earth=sph(center,0.5);\nconst vec3 waves=700./vec3(700,510,440);\nconst vec3 RGBScatter=waves*waves*waves*waves;\nconst float scatterStrength=50.;\nconst float densFall=7.;\n\nfloat dot2(vec3 k){return dot(k,k);}\nconst float pi=4.*atan(1.);\n\nfloat phase(float cosTheta) {\n\treturn (1. + cosTheta * cosTheta) / (16.0 * pi);\n}\n\nfloat sphere(ray r, sph s, float n){//sphere ray intersection\n\tvec3 rc = r.ro-s.c;\n\tfloat c = dot(rc, rc) - (s.r*s.r);\n\tfloat b = dot(r.rd, rc);\n\tfloat d = b*b - c;\n\tfloat t = -b - n*sqrt(abs(d));\n\tfloat st = step(0.0, min(t,d));\n\treturn max(0.,mix(-1., t, st));\n}\n\nfloat suc(ray r,vec3 center,float radius){// sun glare\n    vec3 o=r.ro-center;\n    float a=dot(o,o);\n    float b=dot(r.rd,o);\n    float c=dot(r.rd,r.rd);\n    float k=sqrt(a*c-b*b);\n    float integ=radius*(pi/2.-atan(b,k))/k/3.;\n    integ*=integ;\n    integ*=integ;//not integral anymore but looks great\n    return integ;\n}\n\nfloat density(vec3 p){\n    float l=distance(p,center)-earth.r;\n    l/=atm.r-earth.r;\n    return exp(-l*densFall)*(1.-l);\n}\n\nfloat depth(vec3 s,vec3 e){\n    float d=0.;\n    for(int i=0;i<DEPTH_SAMPLES;i++){\n        vec3 p=s+(e-s)*float(i)/float(DEPTH_SAMPLES);\n        d+=density(p);\n    }\n    return d/float(DEPTH_SAMPLES)*distance(s,e);\n}\n\nvec3 light(ray r,vec3 sunPos,vec3 orig){\n    if(distance(r.ro,center)<atm.r){\n    }else{\n        float d1=sphere(r,atm,1.);\n        if(d1==0.)return orig;\n        r.ro+=r.rd*d1;\n    }\n    float d2=sphere(r,earth,1.);\n    if(d2==0.)d2=sphere(r,atm,-1.);\n    float viewDepth=0.;\n    vec3 l=vec3(0.);\n    for(int i=0;i<VIEW_SAMPLES;i++){\n        vec3 p=r.ro+r.rd*(float(i)+0.5)/float(VIEW_SAMPLES+1)*d2;\n        ray k=ray(p,normalize(sunPos-p));\n        #ifdef EXPERIMENTAL_PLANET_SHADOW\n        if(sphere(k,earth,1.)==0.){\n        #endif\n            float sunDepth=depth(k.ro,k.ro+k.rd*sphere(k,atm,-1.));\n            viewDepth=depth(r.ro,p);\n            vec3 transmitance=exp(-(sunDepth+viewDepth)*RGBScatter);\n        \n        \n            l+=transmitance*density(p)*phase(dot(r.rd,normalize(sunPos-p)));\n        #ifdef EXPERIMENTAL_PLANET_SHADOW\n        }\n        #endif\n    }\n    vec3 origTransmitance=exp(-viewDepth*RGBScatter);\n    return orig*origTransmitance+l/float(VIEW_SAMPLES)*d2*sunInt*RGBScatter*scatterStrength;\n}\n\n\nvec3 hash33(vec3 p3){\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nfloat starField(vec3 rd){\n    rd*=200.;\n    float col=0.;\n    for(int i=0;i<4;i++){\n        vec3 CellUVs=floor(rd+float(i*1199));\n        vec3 hash=(hash33(CellUVs)*2.-1.)*.8;\n        float hash_magnitude =(1.0-length(hash));\n        vec3 UVgrid=fract(rd)-.5;\n        float radius=clamp(hash_magnitude-.5,0.,1.);\n        float radialGradient=length(UVgrid-hash)/radius;\n        radialGradient=clamp(1.-radialGradient,0.,1.);\n        radialGradient*=radialGradient;\n        col += radialGradient;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 O, in vec2 U ){\n    #ifdef SEE_FROM_INSIDE\n    float uvz=2.;\n    float roz=0.;\n    vec3 pos=vec3(0,0.6,0);\n    #else\n    float uvz=-1.;\n    float roz=-3.;\n    vec3 pos=vec3(0,0,0);\n    #endif\n\n    vec3 uv = vec3((U*2.-R.xy)/R.y,uvz);\n    vec2 m=(iMouse.xy*2.-R.xy)/R.xy;\n    m*=vec2(1,0.5)*pi;\n    //if(iMouse.z<=0.)m=vec2(-iTime/3.,0.05);\n    if(length(iMouse.xy)==0.)m=vec2(0);\n    \n\n    vec3 ro=vec3(0,0,roz);\n    \n    ro.yz*=mat2(cos(m.y),-sin(m.y),sin(m.y),cos(m.y));\n    ro.xz*=mat2(cos(m.x),-sin(m.x),sin(m.x),cos(m.x));\n    uv.yz*=mat2(cos(m.y),-sin(m.y),sin(m.y),cos(m.y));\n    uv.xz*=mat2(cos(m.x),-sin(m.x),sin(m.x),cos(m.x));\n    \n    \n    O=vec4(0);\n    ray r=ray(ro+pos,normalize(uv-ro));\n    sph sun=sph(vec3(0,10.*vec2(sin(time),cos(time))),1.);\n    O.rgb+=starField(r.rd);\n    //if(sphere(r,sun,1.)>0.)O=vec4(clamp(vec3(0.),vec3(1.),sunInt),1.);\n    O.rgb+=clamp(0.,1000.,suc(r,sun.c,sun.r))*sunInt;\n \n    float d=sphere(r,earth,1.);\n    \n    if(d>0.){\n        vec3 planet;\n        vec3 surf=r.ro+r.rd*d;\n        planet =texture(iChannel0,(surf-center).xz+vec2(0.4,0.1)).rgb*(surf-center).y*(surf-center).y;\n        planet+=texture(iChannel0,(surf-center).xy+vec2(0.1,0.6)).rgb*(surf-center).z*(surf-center).z;\n        planet+=texture(iChannel0,(surf-center).yz+vec2(0.0,0.2)).rgb*(surf-center).x*(surf-center).x;\n        float normal=0.;\n        normal =texture(iChannel1,1.*(surf-center).xz+vec2(0.4,0.1)).r*(surf-center).y*(surf-center).y;\n        normal+=texture(iChannel1,1.*(surf-center).xy+vec2(0.1,0.6)).r*(surf-center).z*(surf-center).z;\n        normal+=texture(iChannel1,1.*(surf-center).yz+vec2(0.0,0.2)).r*(surf-center).x*(surf-center).x;\n        normal*=4.;\n        \n        planet*=4.;\n        planet*=0.03+0.97*smoothstep(-0.1,0.7,(normal*2.-1.)*0.7+dot(normalize(surf-center),normalize(sun.c-surf)));\n        \n        #ifdef CRAPPY_AA\n        //cheap antialiasing\n        float z=length(r.ro-earth.c);\n        float w=z-earth.r;\n        z=sqrt(z*z-earth.r*earth.r);//distance from cam to edge of planet(the point where it aliases)\n        z=(d-z)/(w-z);//1 on the closest point of the sphere to the carmera 0 on the furthest\n        z=smoothstep(10./R.y,90./R.y,z);\n        O.rgb=mix(O.rgb,planet,z);\n        #else\n        O.rgb=planet;\n        #endif\n    }\n    #ifdef SEE_ATMOSPHERE\n    O=vec4(light(r,sun.c,O.rgb),1.);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 46,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}