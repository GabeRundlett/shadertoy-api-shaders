{
    "Shader": {
        "info": {
            "date": "1598772711",
            "description": "cascade of normalized flownoise ",
            "flags": 0,
            "hasliked": 0,
            "id": "WlBBD1",
            "likes": 16,
            "name": "cartoon water",
            "published": 3,
            "tags": [
                "perlinnoise",
                "distortion",
                "flownoise"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 657
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/WtBBD1\n\n  #define hash(p)    fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n//#define hash2(p) ( 2.* fract( sin( (p) * mat2(127.1,311.7, 269.5,183.3) ) *43758.5453123 ) - 1. )\n  #define hash2(p)   cos( 6.28*hash(p) + vec2(0,11) + V(p)*iTime ) // variant of random gradient + rotating (= lownoise)\n  #define l(i,j)     dot( hash2(I+vec2(i,j)) , F-vec2(i,j) )       // random wavelet at grid vertex I+vec2(i,j) \n  #define L(j,x)     mix( l(0,j), l(1,j), x )\n\n  #define V(p) 2.                                // flownoise rotation speed \n//#define V(p) 2.*( 2.*mod((p).x+(p).y,2.)- 1. ) // checkered rotation direction \n//#define V(p) length(p)\n//#define V(p) ( 8. - length(p) )\n\nfloat Perlin(vec2 p) {                        // Perlin noise\n    vec2 I = floor(p), \n         F = fract(p), \n     //  U = F;\n         U = F*F*(3.-2.*F);                   // based Perlin noise\n     //  U = F*F*F*( F* ( F*6.-15.) + 10. );  // improved Perlin noise ( better derivatives )\n    return mix( L(0,U.x) , L(1,U.x) , U.y );  // smooth interpolation of corners random wavelets\n}\n\nfloat Uperlin(vec2 p) { \n    float v = Perlin(p); \n    return smoothstep(-1.,1.,v/fwidth(v));    // normalized field\n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 2.* ( 2.*u - R ) /R.y;\n    O -= O;\n    float s=1.;\n    vec4 C = vec4(.8,.85,1,0);\n    for (int i=0; i<5; i++, s*=2., C*=C) \n        O += C * Uperlin(s *(U+9.) ) / s;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}