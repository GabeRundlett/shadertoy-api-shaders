{
    "Shader": {
        "info": {
            "date": "1533762082",
            "description": "Coded live on twitch stream in Bonzomatic, and ported to shadertoy.\nUnedited Bonzomatic shader here: [url]https://gist.github.com/willkirkby/6f3ef0770acf4d2a4962cc16fd508aff[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "4l3cWS",
            "likes": 10,
            "name": "[twitch] Trench Run",
            "published": 3,
            "tags": [
                "starwars"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 1105
        },
        "renderpass": [
            {
                "code": "uniform float fGlobalTime; // in seconds\nuniform vec2 v2Resolution; // viewport resolution (in pixels)\n\n#define pi acos(-1.)\n\nfloat noise(vec2 p)\n{\n  return fract(sin(dot(p, vec2(12.43243, 4.58479)))*1234.4556);\n}\n\nfloat scene(vec3 p)\n{\n  p.x = abs(p.x);\n  return min(\n    1.+p.y,\n    1.-p.x\n  ) + texture(iChannel0, p.xz*.25+p.yz*.25).r*.4;\n}\n\nvec2 rotate(vec2 a, float b)\n{\n  float c = cos(b);\n  float s = sin(b);\n  return vec2(\n    a.x * c - a.y * s,\n    a.x * s + a.y * c\n  );\n}\n\nvec4 laser(vec4 color, vec2 uv)\n{\n  uv -= .5;\n  float w = clamp(pow(.1/length(uv),3.),0.,30.);\n  return color* w*.2;\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    vec3 cam = vec3(0,0,iTime*8.);\n    vec3 dir = normalize(vec3(uv, 1));\n\n  cam.x = sin(iTime)*.3;\n  dir.xy = rotate(dir.xy, sin(iTime)*.1);\n\n  float t = 0.;\n  for(int i = 0; i < 64;++i)\n  {\n    t += scene(cam + dir * t)*.5;\n  }\n  vec3 h = cam + dir*t;\n\n  vec2 o = vec2(.001, 0);\n  vec3 n = normalize(vec3(\n    scene(h+o.xyy)-scene(h-o.xyy),\n    scene(h+o.yxy)-scene(h-o.yxy),\n    scene(h+o.yyx)-scene(h-o.yyx)\n  ));\n\n  //n = normalize(cross(dFdy(h), dFdx(h)));\n\n  out_color.rgb = fract(h*1.);\n  out_color.rgb = n*.5+.5;\n\n  out_color = vec4(max(0.,dot(n, vec3(.2,1,.1)))*.4+.05);\n\n  out_color /= t*.3;\n\n  {\n    vec4 red = vec4(1,.1,.1,1);\n    vec4 green = vec4(.1,1,.1,1);\n    vec2 luv = vec2(\n      .3/length(dir.xy),\n      atan(dir.x, dir.y)/pi*.5\n    );\n    out_color += laser(red, fract(luv*vec2(.01,1)+vec2(-iTime*3.,-.1)));\n    out_color += laser(green, fract(luv*vec2(.01,1)+vec2(iTime*3.+.5,.1)));\n  }\n\n  if (h.y > abs(h.x))\n  {\n    out_color = vec4(step(.995,noise(fragCoord.xy)));\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 28,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}