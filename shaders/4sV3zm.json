{
    "Shader": {
        "info": {
            "date": "1453810828",
            "description": "visualizing the joint and zero crossing range of 1D revised affine arithmetic operations; drag the mouse to change the search width. Intervals are drawn in purple, affine forms in orange.",
            "flags": 0,
            "hasliked": 0,
            "id": "4sV3zm",
            "likes": 21,
            "name": "Affine Arithmetic Joint Range",
            "published": 3,
            "tags": [
                "arithmetic",
                "affine",
                "revised",
                "joint",
                "range"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 1731
        },
        "renderpass": [
            {
                "code": "// Revised Affine Arithmetic\n// based on the implementation guide contained in\n// Fast Reliable Interrogation of Procedurally Defined \n//  \tImplicit Surfaces Using Extended Revised Affine Arithmetic\n// by Fryazinov, Pasko et al\n\n// revised affine form of rank 1\nstruct raf1 {\n    float x0;\n    float x1;\n    float e;\n};\n\nstruct raf1x3 {\n    raf1 x;\n    raf1 y;\n    raf1 z;\n};\n\nraf1 ra_const(float x) {\n    return raf1(x, 0.0, 0.0);\n}\nfloat ra_radius(raf1 a) {\n    return abs(a.x1) + a.e;\n}\nvec2 ra_interval(raf1 a) {\n    float r = ra_radius(a);\n    return vec2(a.x0 - r, a.x0 + r);\n}\n\nraf1 ra_add(raf1 a, raf1 b) {\n\treturn raf1(a.x0 + b.x0, a.x1 + b.x1, a.e + b.e);\n}\nraf1 ra_add(raf1 a, float b) {\n\treturn raf1(a.x0 + b, a.x1, a.e);\n}\nraf1 ra_add(float a, raf1 b) {\n\treturn raf1(a + b.x0, b.x1, b.e);\n}\nraf1x3 ra_add(raf1x3 a, vec3 b) {\n\treturn raf1x3(ra_add(a.x,b.x),ra_add(a.y,b.y),ra_add(a.z,b.z));\n}\n\nraf1 ra_sub(raf1 a, raf1 b) {\n\treturn raf1(a.x0 - b.x0, a.x1 - b.x1, a.e + b.e);\n}\nraf1 ra_sub(raf1 a, float b) {\n\treturn raf1(a.x0 - b, a.x1, a.e);\n}\nraf1 ra_sub(float a, raf1 b) {\n\treturn raf1(a - b.x0, -b.x1, b.e);\n}\nraf1x3 ra_sub(raf1x3 a, vec3 b) {\n\treturn raf1x3(ra_sub(a.x,b.x),ra_sub(a.y,b.y),ra_sub(a.z,b.z));\n}\n\nraf1 ra_neg(raf1 a) {\n\treturn raf1(-a.x0, -a.x1, a.e);\n}\n\nraf1 ra_mul(raf1 a, raf1 b) {\n    float s = abs(a.x1);\n    float t = abs(b.x1);\n    float w = dot(a.x1, b.x1);\n    float u = s;\n    float v = t;\n    return raf1(\n        a.x0 * b.x0 + 0.5 * w,\n        a.x0 * b.x1 + a.x1 * b.x0,\n        a.e * b.e\n        + b.e * (abs(a.x0) + u)\n        + a.e * (abs(b.x0) + v)\n        + u * v\n        - 0.5 * dot(s, t));\n}\nraf1 ra_mul(raf1 a, float b) {\n    return raf1(\n        a.x0 * b,\n        a.x1 * b,\n        a.e * abs(b));\n}\nraf1 ra_mul(float a, raf1 b) {\n    return ra_mul(b, a);\n}\nraf1x3 ra_mul(raf1 a, vec3 b) {\n\treturn raf1x3(ra_mul(a,b.x),ra_mul(a,b.y),ra_mul(a,b.z));\n}\n\nraf1 ra_rcp(raf1 a) {\n    vec2 i = ra_interval(a);\n    float i0i1 = i[0]*i[1];\n    if (i0i1 < 0.0) {\n        return raf1(1.0/a.x0, 0.0, 1.0/0.0);\n    } else {\n        vec2 ab = 1.0 / i;\n        float h = sign(i[0]) / sqrt(i0i1);\n        float c = (ab[0]+ab[1]) * 0.5;\n        float nalpha = ab[0] * ab[1];\n        float alpha = -nalpha;\n        float zeta = c + h;\n        float delta = abs(c-h);\n        return raf1(\n            alpha * a.x0 + zeta,\n            alpha * a.x1,\n            nalpha * a.e + delta);\n    }\n}\n\nraf1 ra_div(raf1 a, raf1 b) {\n    return ra_mul(a, ra_rcp(b));\n}\n\nraf1 ra_pow2(raf1 a) {\n    float w = 0.5 * a.x1 * a.x1;\n    return raf1(\n        a.x0 * a.x0 + w,\n        2.0 * a.x0 * a.x1,\n        a.e * (1.0 + 2.0 * (abs(a.x0) + abs(a.x1))) + w);\n}\n\nraf1 ra_dot(raf1x3 a, raf1x3 b) {\n    return ra_add(ra_add(ra_mul(a.x, b.x),ra_mul(a.y, b.y)),ra_mul(a.z, b.z));\n}\n\nraf1 ra_dot(raf1x3 a, vec3 b) {\n    return ra_add(ra_add(ra_mul(a.x, b.x),ra_mul(a.y, b.y)),ra_mul(a.z, b.z));\n}\n\nraf1 ra_dot(raf1x3 a) {\n    return ra_add(ra_add(ra_pow2(a.x),ra_pow2(a.y)),ra_pow2(a.z));\n}\n\nraf1 ra_sqrt(raf1 x) {\n    vec2 i = ra_interval(x);\n    if (i[1] < 0.0) return ra_const(0.0);\n    i[0] = max(i[0], 0.0);\n    vec2 sq = sqrt(i);\n    float c = sq[1] + sq[0];\n    float h = sq[1] - sq[0];\n    float alpha = 1.0 / c;\n    float dzeta = c / 8.0 + 0.5 * sq[0] * sq[1] / c;\n    float delta = h * h / (8.0 * c);\n    return raf1(\n        alpha * x.x0 + dzeta,\n        alpha * x.x1,\n        alpha * x.e + delta);\n}\n\nraf1 ra_length(raf1x3 a) {\n    return ra_sqrt(ra_dot(a));\n}\n\nraf1 ra_abs (raf1 a) {\n    vec2 i = ra_interval(a);\n    if (i[0]*i[1] >= 0.0) {\n        return raf1(abs(a.x0), a.x1 * sign(a.x0), a.e);\n    } else {\n    #if 0\n        // keep ambiguous case in a box\n        vec2 j = abs(i);\n        i = (i[0]>=0.0)?j:(i[1]<0.0)?j.yx:vec2(0.0,max(j[0],j[1]));\n        return raf1((i[0]+i[1])*0.5, 0.0, (i[1]-i[0])*0.5);\n    #else\n        vec2 ab = abs(i);\n        float alpha = (ab[1] - ab[0]) / (i[1] - i[0]);\n        float zeta = (ab[0] - i[0] * alpha) * 0.5;\n        float delta = zeta;\n\n        return raf1(\n            alpha * a.x0 + zeta,\n            alpha * a.x1,\n            abs(alpha) * a.e + delta);\n\t#endif\n    }\n}\n\n// crude approximation for min/max\n// there are more opportunities for truncation here, as only\n// the overlapping parallelogram and either one or both top parts (max)\n// or bottom parts (min) of each argument need to be bounded.\n// e.g. if all minimum values of a are above the minimum values of b,\n// regardless of any overlapping, only a needs to be considered for max(a,b).\n\nraf1 ra_max(raf1 a, raf1 b) {\n    vec2 ia = ra_interval(a);\n    vec2 ib = ra_interval(b);\n    if (ia[0] >= ib[1])\n        return a;\n    else if (ib[0] >= ia[1])\n        return b;\n    else {\n\t    return ra_mul(ra_add(ra_add(a,b),ra_abs(ra_sub(a, b))),0.5);\n    }\n}\n\nraf1 ra_min(raf1 a, raf1 b) {\n    vec2 ia = ra_interval(a);\n    vec2 ib = ra_interval(b);\n    if (ia[1] <= ib[0])\n        return a;\n    else if (ib[1] <= ia[0])\n        return b;\n    else {\n\t    return ra_mul(ra_sub(ra_add(a,b),ra_abs(ra_sub(a, b))),0.5);\n    }\n}\n\nraf1 ra_zero(raf1 x, raf1 y) {\n    float dxdy = x.x1 / y.x1;\n    return raf1(x.x0 - dxdy * y.x0, dxdy * y.e, 0.0);\n}\n\n//////////////////////////////////////////////////////////\n\nraf1 ra_myf(raf1 t) {\n    //return ra_sub(ra_length(raf1x3(x,y,z)),0.5);\n#if 0\n    raf1 o = t;\n    raf1 a = ra_add(t, sin(iTime * 0.1));\n    \n    a = ra_pow2(a);\n    \n    a = ra_max(o,ra_abs(ra_sub(a, 0.5)));\n    \n    return ra_sub(a,cos(iTime * 0.17)*0.5+0.5);\n#else\n    float k = sin(iTime * 0.3);\n    vec3 ro = vec3(0.0, k, -1.0);\n    vec3 rd = normalize(vec3(0.25, 0.25, 1.0));\n    raf1x3 p = ra_add(ra_mul(t, rd), ro);\n    return ra_sub(ra_length(p),0.5);    \n#endif\n}\n\nfloat myf(float x) {\n    //return sin(x) * cos((x + iTime * 0.2) * 20.0);\n    return ra_myf(ra_const(x)).x0;\n}\n\n#define MAX_LEVEL 8u\n\nvec2 get_range(uint c, uint level) {\n    float r = 1.0 / float(1u << level);\n    float center = (float(c) / float(1u << MAX_LEVEL)) * 2.0 - 1.0 + r;\n    center += 1.0;\n    return vec2(center, r);\n}\n\nvoid draw_rect(uint c, uint level) {\n    vec2 rc = get_range(c, level);\n    //rc.z -= 0.002;// * float(level);\n    float y = -float(MAX_LEVEL - level)*0.02;\n    move_to(rc.x - rc.y, y);\n    line_to(rc.x + rc.y, y);\n}\n\nuint find_lsb(uint value) {\n    // with GL4, this loop can be replaced with\n    // a single use of findLSB()\n    uint count = 0u;\n    for (uint i = 0u; i < MAX_LEVEL; ++i) {\n        if ((value & 1u) != 0u)\n            break;\n        count += 1u;\n        value >>= 1u;\n    }\n    return count;\n}\n\nuint lowest_level(uint p) {\n    uint used_levels = min(MAX_LEVEL, find_lsb(p));\n    return MAX_LEVEL - used_levels; \n}\n\n\nvoid paint() {\n    float t = iTime;\n    \n    // clear screen\n    translate(-1.0, 0.0);\n    \n    set_source_rgb(vec3(0.0,0.0,0.5));\n    clear();\n\n    float w = (iMouse.z > 0.5)?abs(get_query().x):0.5;\n    \n    vec2 p = get_origin();\n    float i0 = p.x - mod(p.x, w);\n    float i1 = i0 + w;  \n    \n    \n    raf1 ax = raf1((i1 + i0)*0.5, (i1 - i0)*0.5, 0.0);\n    raf1 ay = ra_myf(ax);\n    \n    // grid\n    move_to(i0, -1.0);\n    line_to(i0, 1.0);\n    move_to(i1, -1.0);\n    line_to(i1, 1.0);\n    move_to(i0, 0.0);\n    line_to(i1, 0.0);\n    set_line_width_px(1.0);\n    set_source_rgba(hsl(0.5,1.0,0.8,0.3));\n    stroke();\n\n    // visualize interval\n    vec2 iv = ra_interval(ay);\n    // interval crosses zero?\n    bool crossing = (iv.x*iv.y < 0.0);\n    \n    rectangle(i0,iv.x,w,(iv.y - iv.x));\n    set_source_rgba(hsl(0.9,1.0,0.5,crossing?0.5:0.2));\n    fill();\n    \n    // visualize minkowski sum of affine segments\n    // after the description given in\n    // An Introduction to Affine Arithmetic\n    // by stolfi et al.\n    vec2 c = vec2(ax.x0,ay.x0);\n    vec2 d = vec2(ax.x1, ay.x1);\n    vec2 e = vec2(ax.e, ay.e);\n    \n    vec2 c0 = c - d - e;\n    vec2 c1 = c + d - e;\n    vec2 c2 = c - d + e;\n    vec2 c3 = c + d + e;\n    \n    move_to(c0);\n    line_to(c1);\n    move_to(c2);\n    line_to(c3);\n    close_path();\n    set_source_rgba(hsl(0.1,1.0,0.5,1.0));\n    set_line_width_px(1.0);\n    stroke();\n    \n    // draw 1D graph\n    graph1D(myf);\n    // graphs only look good at pixel size\n    set_line_width_px(1.0);\n    set_source_rgb(vec3(1.0));\n    stroke();\n    \n#if 1\n    set_line_width_px(1.0);\n    \n    {\n        float threshold = get_range(0u, MAX_LEVEL).y;        \n\t    uint p = 0u;\n        uint level = 0u;\n        for (int i = 0; i < 13; ++i) {\n            const uint topstep = 1u << MAX_LEVEL;\n            if (p >= topstep)\n                break;\n            vec2 rc = get_range(p, level);\n            raf1 d = ra_myf(raf1(rc.x, rc.y, 0.0));\n            uint stepsz = topstep >> level;\n            // visualize interval\n            vec2 iv = ra_interval(d);\n            // interval crosses zero?\n            bool hit = (iv.x*iv.y < 0.0);\n            if (hit) {\n                set_source_rgb(0.0,1.0,0.0);\n                draw_rect(p, level);\n                stroke();\n                // if we have prematurely reached our\n                // desired precision, exit early                \n                if (d.e <= threshold) {\n                    vec2 pr = ra_interval(ra_zero(raf1(rc.x,rc.y,0.0), d));\n                    float px = (pr[0]+pr[1])/2.0;\n                    circle(px, 0.0, 0.02);\n                    stroke();\n                    break;\n                }\n                // reached maximum precision\n                if (level == MAX_LEVEL)\n                    break;\n            } else {\n                set_source_rgb(1.0,0.0,0.0);\n                draw_rect(p, level);\n                stroke();\n            }\n            if (hit && (level < MAX_LEVEL)) {\n                level += 1u;\n            } else {\n                p += stepsz;\n                level = lowest_level(p);\n            }\n        }\n    }\n#else\n\t// draw intersections with zero plane\n    vec2 pr = ra_interval(ra_zero(ax, ay));\n    move_to(pr[0],0.0);\n    line_to(pr[1],0.0);\n    set_source_rgba(hsl(0.0,1.0,0.5,1.0));\n    set_line_width_px(2.0);\n    stroke();    \n    \n#endif\n    \n}\n\n//////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    init(fragCoord, iMouse.xy, iResolution.xy);\n\n    paint();\n\n    blit(fragColor);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "// 2d vector graphics library (https://www.shadertoy.com/view/lslXW8)\n// after Cairo API, with anti-aliasing\n// by Leonard Ritter (@paniq)\n// v0.11\n\n// I release this into the public domain.\n// some estimators have been lifted from other shaders and are not\n// necessarily PD licensed, note the links in the source code comments below.\n\n// 2019-06-06: 0.12\n// * split implementation and demo into common and image tab\n\n// 2017-10-05: 0.11\n// * anti-aliasing is gamma-correct\n\n// 2017-10-01: 0.10\n// * added experimental letter() function\n\n// 2017-09-30: 0.9\n// * save() is now a declarative macro\n\n// 2017-09-11: 0.8\n// * added ellipse()\n\n// 2017-09-10: 0.7\n// * paths painted with line_to/curve_to can be filled.\n\n// 2017-09-09: 0.6\n// * added rounded_rectangle()\n// * added set_source_linear_gradient()\n// * added set_source_radial_gradient()\n// * added set_source_blend_mode()\n// * added support for non-uniform scaling\n\n// undefine if you are running on glslsandbox.com\n// #define GLSLSANDBOX\n\n#ifdef GLSLSANDBOX\n#ifdef GL_ES\n#endif\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\n#define iTime time\n#define iResolution resolution\n#define iMouse mouse\n#endif\n\n// interface\n//////////////////////////////////////////////////////////\n\n// set color source for stroke / fill / clear\nvoid set_source_rgba(vec4 c);\nvoid set_source_rgba(float r, float g, float b, float a);\nvoid set_source_rgb(vec3 c);\nvoid set_source_rgb(float r, float g, float b);\nvoid set_source_linear_gradient(vec3 color0, vec3 color1, vec2 p0, vec2 p1);\nvoid set_source_linear_gradient(vec4 color0, vec4 color1, vec2 p0, vec2 p1);\nvoid set_source_radial_gradient(vec3 color0, vec3 color1, vec2 p, float r);\nvoid set_source_radial_gradient(vec4 color0, vec4 color1, vec2 p, float r);\nvoid set_source(sampler2D image);\n// control how source changes are applied\nconst int Replace = 0; // default: replace the new source with the old one\nconst int Alpha = 1; // alpha-blend the new source on top of the old one\nconst int Multiply = 2; // multiply the new source with the old one\nvoid set_source_blend_mode(int mode);\n// if enabled, blends using premultiplied alpha instead of\n// regular alpha blending.\nvoid premultiply_alpha(bool enable);\n\n// set line width in normalized units for stroke\nvoid set_line_width(float w);\n// set line width in pixels for stroke\nvoid set_line_width_px(float w);\n// set blur strength for strokes in normalized units\nvoid set_blur(float b);\n\n// add a circle path at P with radius R\nvoid circle(vec2 p, float r);\nvoid circle(float x, float y, float r);\n// add an ellipse path at P with radii RW and RH\nvoid ellipse(vec2 p, vec2 r);\nvoid ellipse(float x, float y, float rw, float rh);\n// add a rectangle at O with size S\nvoid rectangle(vec2 o, vec2 s);\nvoid rectangle(float ox, float oy, float sx, float sy);\n// add a rectangle at O with size S and rounded corner of radius R\nvoid rounded_rectangle(vec2 o, vec2 s, float r);\nvoid rounded_rectangle(float ox, float oy, float sx, float sy, float r);\n\n// set starting point for curves and lines to P\nvoid move_to(vec2 p);\nvoid move_to(float x, float y);\n// draw straight line from starting point to P,\n// and set new starting point to P\nvoid line_to(vec2 p);\nvoid line_to(float x, float y);\n// draw quadratic bezier curve from starting point\n// over B1 to B2 and set new starting point to B2\nvoid curve_to(vec2 b1, vec2 b2);\nvoid curve_to(float b1x, float b1y, float b2x, float b2y);\n// connect current starting point with first\n// drawing point.\nvoid close_path();\n\n// clear screen in the current source color\nvoid clear();\n// fill paths and clear the path buffer\nvoid fill();\n// fill paths and preserve them for additional ops\nvoid fill_preserve();\n// stroke paths and clear the path buffer\nvoid stroke_preserve();\n// stroke paths and preserve them for additional ops\nvoid stroke();\n// clears the path buffer\nvoid new_path();\n\n// draw a letter with the given texture coordinate\nvoid letter(sampler2D font_texture_source, ivec2 l);\nvoid letter(sampler2D font_texture_source, int lx, int ly);\n    \n// return rgb color for given hue (0..1)\nvec3 hue(float hue);\n// return rgb color for given hue, saturation and lightness\nvec3 hsl(float h, float s, float l);\nvec4 hsl(float h, float s, float l, float a);\n\n// rotate the context by A in radians\nvoid rotate(float a);\n// uniformly scale the context by S\nvoid scale(float s);\n// non-uniformly scale the context by S\nvoid scale(vec2 s);\nvoid scale(float sx, float sy);\n// translate the context by offset P\nvoid translate(vec2 p);\nvoid translate(float x, float y);\n// clear all transformations for the active context\nvoid identity_matrix();\n// transform the active context by the given matrix\nvoid transform(mat3 mtx);\n// set the transformation matrix for the active context\nvoid set_matrix(mat3 mtx);\n\n// return the active query position for in_fill/in_stroke\n// by default, this is the mouse position\nvec2 get_query();\n// set the query position for subsequent calls to\n// in_fill/in_stroke; clears the query path\nvoid set_query(vec2 p);\n// true if the query position is inside the current path\nbool in_fill();\n// true if the query position is inside the current stroke\nbool in_stroke();\n\n// return the transformed coordinate of the current pixel\nvec2 get_origin();\n// draw a 1D graph from coordinate p, result f(p.x),\n// and gradient1D(f,p.x)\nvoid graph(vec2 p, float f_x, float df_x);\n// draw a 2D graph from coordinate p, result f(p),\n// and gradient2D(f,p)\nvoid graph(vec2 p, float f_x, vec2 df_x);\n// adds a custom distance field as path\n// this field will not be testable by queries\nvoid add_field(float c);\n\n// returns a gradient for 1D graph function f at position x\n#define gradient1D(f,x) (f(x + get_gradient_eps()) - f(x - get_gradient_eps())) / (2.0*get_gradient_eps())\n// returns a gradient for 2D graph function f at position x\n#define gradient2D(f,x) vec2(f(x + vec2(get_gradient_eps(),0.0)) - f(x - vec2(get_gradient_eps(),0.0)),f(x + vec2(0.0,get_gradient_eps())) - f(x - vec2(0.0,get_gradient_eps()))) / (2.0*get_gradient_eps())\n// draws a 1D graph at the current position\n#define graph1D(f) { vec2 pp = get_origin(); graph(pp, f(pp.x), gradient1D(f,pp.x)); }\n// draws a 2D graph at the current position\n#define graph2D(f) { vec2 pp = get_origin(); graph(pp, f(pp), gradient2D(f,pp)); }\n\n// represents the current drawing context\n// you usually don't need to change anything here\nstruct Context {\n    // screen position, query position\n    vec4 position;\n    vec2 shape;\n    vec2 clip;\n    vec2 scale;\n    float line_width;\n    bool premultiply;\n    vec2 blur;\n    vec4 source;\n    vec2 start_pt;\n    vec2 last_pt;\n    int source_blend;\n    bool has_clip;\n};\n\n// save current stroke width, starting\n// point and blend mode from active context.\nContext _save();\n#define save(name) Context name = _save();\n// restore stroke width, starting point\n// and blend mode to a context previously returned by save()\nvoid restore(Context ctx);\n\n// draws a half-transparent debug gradient for the\n// active path\nvoid debug_gradient();\nvoid debug_clip_gradient();\n// returns the gradient epsilon width\nfloat get_gradient_eps();\n\n\n// implementation\n//////////////////////////////////////////////////////////\n\nvec2 aspect;\nvec2 uv;\nvec2 position;\nvec2 query_position;\nfloat ScreenH;\nfloat AA;\nfloat AAINV;\n\n//////////////////////////////////////////////////////////\n\nfloat det(vec2 a, vec2 b) { return a.x*b.y-b.x*a.y; }\n\n//////////////////////////////////////////////////////////\n\nvec3 hue(float hue) {\n    return clamp(\n        abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0,\n        0.0, 1.0);\n}\n\nvec3 hsl(float h, float s, float l) {\n    vec3 rgb = hue(h);\n    return l + s * (rgb - 0.5) * (1.0 - abs(2.0 * l - 1.0));\n}\n\nvec4 hsl(float h, float s, float l, float a) {\n    return vec4(hsl(h,s,l),a);\n}\n\n//////////////////////////////////////////////////////////\n\n#define DEFAULT_SHAPE_V 1e+20\n#define DEFAULT_CLIP_V -1e+20\n\nContext _stack;\n\nvoid init (vec2 fragCoord, vec2 mouse, vec2 resolution) {\n\taspect = vec2(resolution.x / resolution.y, 1.0);\n\tScreenH = min(resolution.x,resolution.y);\n\tAA = ScreenH*0.4;\n\tAAINV = 1.0 / AA;\n    \n    uv = fragCoord.xy / resolution;\n    vec2 m = mouse / resolution;\n\n    position = (uv*2.0-1.0)*aspect;\n    query_position = (m*2.0-1.0)*aspect;\n\n    _stack = Context(\n        vec4(position, query_position),\n        vec2(DEFAULT_SHAPE_V),\n        vec2(DEFAULT_CLIP_V),\n        vec2(1.0),\n        1.0,\n        false,\n        vec2(0.0,1.0),\n        vec4(vec3(0.0),1.0),\n        vec2(0.0),\n        vec2(0.0),\n        Replace,\n        false\n    );\n}\n\nvec3 _color = vec3(1.0);\n\nvec2 get_origin() {\n    return _stack.position.xy;\n}\n\nvec2 get_query() {\n    return _stack.position.zw;\n}\n\nvoid set_query(vec2 p) {\n    _stack.position.zw = p;\n    _stack.shape.y = DEFAULT_SHAPE_V;\n    _stack.clip.y = DEFAULT_CLIP_V;\n}\n\nContext _save() {\n    return _stack;\n}\n\nvoid restore(Context ctx) {\n    // preserve shape\n    vec2 shape = _stack.shape;\n    vec2 clip = _stack.clip;\n    bool has_clip = _stack.has_clip;\n    // preserve source\n    vec4 source = _stack.source;\n    _stack = ctx;\n    _stack.shape = shape;\n    _stack.clip = clip;\n    _stack.source = source;\n    _stack.has_clip = has_clip;\n}\n\nmat3 mat2x3_invert(mat3 s)\n{\n    float d = det(s[0].xy,s[1].xy);\n    d = (d != 0.0)?(1.0 / d):d;\n\n    return mat3(\n        s[1].y*d, -s[0].y*d, 0.0,\n        -s[1].x*d, s[0].x*d, 0.0,\n        det(s[1].xy,s[2].xy)*d,\n        det(s[2].xy,s[0].xy)*d,\n        1.0);\n}\n\nvoid identity_matrix() {\n    _stack.position = vec4(position, query_position);\n    _stack.scale = vec2(1.0);\n}\n\nvoid set_matrix(mat3 mtx) {\n    mtx = mat2x3_invert(mtx);\n    _stack.position.xy = (mtx * vec3(position,1.0)).xy;\n    _stack.position.zw = (mtx * vec3(query_position,1.0)).xy;\n    _stack.scale = vec2(length(mtx[0].xy), length(mtx[1].xy));\n}\n\nvoid transform(mat3 mtx) {\n    mtx = mat2x3_invert(mtx);\n    _stack.position.xy = (mtx * vec3(_stack.position.xy,1.0)).xy;\n    _stack.position.zw = (mtx * vec3(_stack.position.zw,1.0)).xy;\n    _stack.scale *= vec2(length(mtx[0].xy), length(mtx[1].xy));\n}\n\nvoid rotate(float a) {\n    float cs = cos(a), sn = sin(a);\n    transform(mat3(\n        cs, sn, 0.0,\n        -sn, cs, 0.0,\n        0.0, 0.0, 1.0));\n}\n\nvoid scale(vec2 s) {\n    transform(mat3(s.x,0.0,0.0,0.0,s.y,0.0,0.0,0.0,1.0));\n}\n\nvoid scale(float sx, float sy) {\n    scale(vec2(sx, sy));\n}\n\nvoid scale(float s) {\n    scale(vec2(s));\n}\n\nvoid translate(vec2 p) {\n    transform(mat3(1.0,0.0,0.0,0.0,1.0,0.0,p.x,p.y,1.0));\n}\n\nvoid translate(float x, float y) { translate(vec2(x,y)); }\n\nvoid clear() {\n    _color = mix(_color, _stack.source.rgb, _stack.source.a);\n}\n\nvoid blit(out vec4 dest) {\n    dest = vec4(sqrt(_color), 1.0);\n}\n\nvoid blit(out vec3 dest) {\n    dest = _color;\n}\n\nvoid add_clip(vec2 d) {\n    d = d / _stack.scale;\n    _stack.clip = max(_stack.clip, d);\n    _stack.has_clip = true;\n}\n\nvoid add_field(vec2 d) {\n    d = d / _stack.scale;\n    _stack.shape = min(_stack.shape, d);\n}\n\nvoid add_field(float c) {\n    _stack.shape.x = min(_stack.shape.x, c);\n}\n\nvoid new_path() {\n    _stack.shape = vec2(DEFAULT_SHAPE_V);\n    _stack.clip = vec2(DEFAULT_CLIP_V);\n    _stack.has_clip = false;\n}\n\nvoid debug_gradient() {\n    vec2 d = _stack.shape;\n    _color = mix(_color,\n        hsl(d.x * 6.0,\n            1.0, (d.x>=0.0)?0.5:0.3),\n        0.5);\n}\n\nvoid debug_clip_gradient() {\n    vec2 d = _stack.clip;\n    _color = mix(_color,\n        hsl(d.x * 6.0,\n            1.0, (d.x>=0.0)?0.5:0.3),\n        0.5);\n}\n\nvoid set_blur(float b) {\n    if (b == 0.0) {\n        _stack.blur = vec2(0.0, 1.0);\n    } else {\n        _stack.blur = vec2(\n            b,\n            0.0);\n    }\n}\n\nvoid write_color(vec4 rgba, float w) {\n    float src_a = w * rgba.a;\n    float dst_a = _stack.premultiply?w:src_a;\n    _color = _color * (1.0 - src_a) + rgba.rgb * dst_a;\n}\n\nvoid premultiply_alpha(bool enable) {\n    _stack.premultiply = enable;\n}\n\nfloat min_uniform_scale() {\n    return min(_stack.scale.x, _stack.scale.y);\n}\n\nfloat uniform_scale_for_aa() {\n    return min(1.0, _stack.scale.x / _stack.scale.y);\n}\n\nfloat calc_aa_blur(float w) {\n    vec2 blur = _stack.blur;\n    w -= blur.x;\n    float wa = clamp(-w*AA*uniform_scale_for_aa(), 0.0, 1.0);\n    float wb = clamp(-w / blur.x + blur.y, 0.0, 1.0);\n\treturn wa * wb;\n}\n\nvoid fill_preserve() {\n    write_color(_stack.source, calc_aa_blur(_stack.shape.x));\n    if (_stack.has_clip) {\n\t    write_color(_stack.source, calc_aa_blur(_stack.clip.x));        \n    }\n}\n\nvoid fill() {\n    fill_preserve();\n    new_path();\n}\n\nvoid set_line_width(float w) {\n    _stack.line_width = w;\n}\n\nvoid set_line_width_px(float w) {\n    _stack.line_width = w*min_uniform_scale() * AAINV;\n}\n\nfloat get_gradient_eps() {\n    return (1.0 / min_uniform_scale()) * AAINV;\n}\n\nvec2 stroke_shape() {\n    return abs(_stack.shape) - _stack.line_width/_stack.scale;\n}\n\nvoid stroke_preserve() {\n    float w = stroke_shape().x;\n    write_color(_stack.source, calc_aa_blur(w));\n}\n\nvoid stroke() {\n    stroke_preserve();\n    new_path();\n}\n\nbool in_fill() {\n    return (_stack.shape.y <= 0.0);\n}\n\nbool in_stroke() {\n    float w = stroke_shape().y;\n    return (w <= 0.0);\n}\n\nvoid set_source_rgba(vec4 c) {\n    //c.rgb *= c.rgb;\n    c *= c;\n    if (_stack.source_blend == Multiply) {\n        _stack.source *= c;\n    } else if (_stack.source_blend == Alpha) {\n    \tfloat src_a = c.a;\n    \tfloat dst_a = _stack.premultiply?1.0:src_a;\n\t    _stack.source =\n            vec4(_stack.source.rgb * (1.0 - src_a) + c.rgb * dst_a,\n                 max(_stack.source.a, c.a));\n    } else {\n    \t_stack.source = c;\n    }\n}\n\nvoid set_source_rgba(float r, float g, float b, float a) {\n    set_source_rgba(vec4(r,g,b,a)); }\n\nvoid set_source_rgb(vec3 c) {\n    set_source_rgba(vec4(c,1.0));\n}\n\nvoid set_source_rgb(float r, float g, float b) { set_source_rgb(vec3(r,g,b)); }\n\nvoid set_source(sampler2D image) {\n    set_source_rgba(texture(image, _stack.position.xy));\n}\n\nvoid set_source_linear_gradient(vec4 color0, vec4 color1, vec2 p0, vec2 p1) {\n    vec2 pa = _stack.position.xy - p0;\n    vec2 ba = p1 - p0;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    set_source_rgba(mix(color0, color1, h));\n}\n\nvoid set_source_linear_gradient(vec3 color0, vec3 color1, vec2 p0, vec2 p1) {\n    set_source_linear_gradient(vec4(color0, 1.0), vec4(color1, 1.0), p0, p1);\n}\n\nvoid set_source_radial_gradient(vec4 color0, vec4 color1, vec2 p, float r) {\n    float h = clamp( length(_stack.position.xy - p) / r, 0.0, 1.0 );\n    set_source_rgba(mix(color0, color1, h));\n}\n\nvoid set_source_radial_gradient(vec3 color0, vec3 color1, vec2 p, float r) {\n    set_source_radial_gradient(vec4(color0, 1.0), vec4(color1, 1.0), p, r);\n}\n\nvoid set_source_blend_mode(int mode) {\n    _stack.source_blend = mode;\n}\n\nvec2 length2(vec4 a) {\n    return vec2(length(a.xy),length(a.zw));\n}\n\nvec2 dot2(vec4 a, vec2 b) {\n    return vec2(dot(a.xy,b),dot(a.zw,b));\n}\n\nvoid letter(sampler2D font_texture_source, ivec2 l) {\n  vec2 p = vec2(l);\n  vec3 tx;\n  vec2 ip;\n  float d;\n  int ic;\n  ip = vec2(l);\n  p += clamp(_stack.position.xy, 0.0, 1.0);\n  ic = 0x21 + int (mod (16. + ip.x + 2. * ip.y, 94.));\n  tx = texture (font_texture_source, mod ((vec2 (mod (float (ic), 16.),\n     15. - floor (float (ic) / 16.)) + fract (p)) * (1. / 16.), 1.)).gba - 0.5;\n  d = tx.b + 1. / 256.;\n  add_field(d / min_uniform_scale());\n}\n\nvoid letter(sampler2D font_texture_source, int lx, int ly) {\n    letter(font_texture_source, ivec2(lx,ly));\n}\n\nvoid rounded_rectangle(vec2 o, vec2 s, float r) {\n    s = (s * 0.5);\n    r = min(r, min(s.x, s.y));\n    o += s;\n    s -= r;\n    vec4 d = abs(o.xyxy - _stack.position) - s.xyxy;\n    vec4 dmin = min(d,0.0);\n    vec4 dmax = max(d,0.0);\n    vec2 df = max(dmin.xz, dmin.yw) + length2(dmax);\n    add_field(df - r);\n}\n\nvoid rounded_rectangle(float ox, float oy, float sx, float sy, float r) {\n    rounded_rectangle(vec2(ox,oy), vec2(sx,sy), r);\n}\n\nvoid rectangle(vec2 o, vec2 s) {\n    rounded_rectangle(o, s, 0.0);\n}\n\nvoid rectangle(float ox, float oy, float sx, float sy) {\n    rounded_rectangle(vec2(ox,oy), vec2(sx,sy), 0.0);\n}\n\nvoid circle(vec2 p, float r) {\n    vec4 c = _stack.position - p.xyxy;\n    add_field(vec2(length(c.xy),length(c.zw)) - r);\n}\nvoid circle(float x, float y, float r) { circle(vec2(x,y),r); }\n\n// from https://www.shadertoy.com/view/4sS3zz\nfloat sdEllipse( vec2 p, in vec2 ab )\n{\n\tp = abs( p ); if( p.x > p.y ){ p=p.yx; ab=ab.yx; }\n\t\n\tfloat l = ab.y*ab.y - ab.x*ab.x;\n    if (l == 0.0) {\n        return length(p) - ab.x;\n    }\n\t\n    float m = ab.x*p.x/l; \n\tfloat n = ab.y*p.y/l; \n\tfloat m2 = m*m;\n\tfloat n2 = n*n;\n\t\n    float c = (m2 + n2 - 1.0)/3.0; \n\tfloat c3 = c*c*c;\n\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n\n    float co;\n\n    if( d<0.0 )\n    {\n        float p = acos(q/c3)/3.0;\n        float s = cos(p);\n        float t = sin(p)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = ( ry + sign(l)*rx + abs(g)/(rx*ry) - m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow( abs(q+h), 1.0/3.0 );\n        float u = sign(q-h)*pow( abs(q-h), 1.0/3.0 );\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        float p = ry/sqrt(rm-rx);\n        co = (p + 2.0*g/rm - m)/2.0;\n    }\n\n    float si = sqrt( 1.0 - co*co );\n \n    vec2 r = vec2( ab.x*co, ab.y*si );\n\t\n    return length(r - p ) * sign(p.y-r.y);\n}\n\nvoid ellipse(vec2 p, vec2 r) {\n    vec4 c = _stack.position - p.xyxy;\n    add_field(vec2(sdEllipse(c.xy, r), sdEllipse(c.zw, r)));\n}\n\nvoid ellipse(float x, float y, float rw, float rh) {\n    ellipse(vec2(x,y), vec2(rw, rh));\n}\n\nvoid move_to(vec2 p) {\n    _stack.start_pt = p;\n    _stack.last_pt = p;\n}\n\nvoid move_to(float x, float y) { move_to(vec2(x,y)); }\n\n// stroke only\nvoid line_to(vec2 p) {\n    vec4 pa = _stack.position - _stack.last_pt.xyxy;\n    vec2 ba = p - _stack.last_pt;\n    vec2 h = clamp(dot2(pa, ba)/dot(ba,ba), 0.0, 1.0);\n    vec2 s = sign(pa.xz*ba.y-pa.yw*ba.x);\n    vec2 d = length2(pa - ba.xyxy*h.xxyy);\n    add_field(d);\n    add_clip(d * s);\n    _stack.last_pt = p;\n}\n\nvoid line_to(float x, float y) { line_to(vec2(x,y)); }\n\nvoid close_path() {\n    line_to(_stack.start_pt);\n}\n\n// from https://www.shadertoy.com/view/ltXSDB\n\n// Test if point p crosses line (a, b), returns sign of result\nfloat test_cross(vec2 a, vec2 b, vec2 p) {\n    return sign((b.y-a.y) * (p.x-a.x) - (b.x-a.x) * (p.y-a.y));\n}\n\n// Determine which side we're on (using barycentric parameterization)\nfloat bezier_sign(vec2 A, vec2 B, vec2 C, vec2 p) {\n    vec2 a = C - A, b = B - A, c = p - A;\n    vec2 bary = vec2(c.x*b.y-b.x*c.y,a.x*c.y-c.x*a.y) / (a.x*b.y-b.x*a.y);\n    vec2 d = vec2(bary.y * 0.5, 0.0) + 1.0 - bary.x - bary.y;\n    return mix(sign(d.x * d.x - d.y), mix(-1.0, 1.0,\n        step(test_cross(A, B, p) * test_cross(B, C, p), 0.0)),\n        step((d.x - d.y), 0.0)) * test_cross(A, C, B);\n}\n\n// Solve cubic equation for roots\nvec3 bezier_solve(float a, float b, float c) {\n    float p = b - a*a / 3.0, p3 = p*p*p;\n    float q = a * (2.0*a*a - 9.0*b) / 27.0 + c;\n    float d = q*q + 4.0*p3 / 27.0;\n    float offset = -a / 3.0;\n    if(d >= 0.0) {\n        float z = sqrt(d);\n        vec2 x = (vec2(z, -z) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        return vec3(offset + uv.x + uv.y);\n    }\n    float v = acos(-sqrt(-27.0 / p3) * q / 2.0) / 3.0;\n    float m = cos(v), n = sin(v)*1.732050808;\n    return vec3(m + m, -n - m, n - m) * sqrt(-p / 3.0) + offset;\n}\n\n// Find the signed distance from a point to a quadratic bezier curve\nfloat bezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{\n    B = mix(B + vec2(1e-4), B, abs(sign(B * 2.0 - A - C)));\n    vec2 a = B - A, b = A - B * 2.0 + C, c = a * 2.0, d = A - p;\n    vec3 k = vec3(3.*dot(a,b),2.*dot(a,a)+dot(d,b),dot(d,a)) / dot(b,b);\n    vec3 t = clamp(bezier_solve(k.x, k.y, k.z), 0.0, 1.0);\n    vec2 pos = A + (c + b*t.x)*t.x;\n    float dis = length(pos - p);\n    pos = A + (c + b*t.y)*t.y;\n    dis = min(dis, length(pos - p));\n    pos = A + (c + b*t.z)*t.z;\n    dis = min(dis, length(pos - p));\n    return dis * bezier_sign(A, B, C, p);\n}\n\nvoid curve_to(vec2 b1, vec2 b2) {\n    vec2 shape = vec2(\n        bezier(_stack.last_pt, b1, b2, _stack.position.xy),\n        bezier(_stack.last_pt, b1, b2, _stack.position.zw));\n    add_field(abs(shape));\n    add_clip(shape);\n\t_stack.last_pt = b2;\n}\n\nvoid curve_to(float b1x, float b1y, float b2x, float b2y) {\n    curve_to(vec2(b1x,b1y),vec2(b2x,b2y));\n}\n\nvoid graph(vec2 p, float f_x, float df_x) {\n    add_field(abs(f_x - p.y) / sqrt(1.0 + (df_x * df_x)));\n}\n\nvoid graph(vec2 p, float f_x, vec2 df_x) {\n    add_field(abs(f_x) / length(df_x));\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}