{
    "Shader": {
        "info": {
            "date": "1610689419",
            "description": "This was my experiment at generating some objects in loops to make larger more interesting scenery. This was inspired by Japanese Tori gates. Finally got a sky to work :).",
            "flags": 0,
            "hasliked": 0,
            "id": "WtKyRw",
            "likes": 2,
            "name": "Path to Shrine",
            "published": 3,
            "tags": [
                "3d",
                "path",
                "shrine",
                "gate",
                "tori"
            ],
            "usePreview": 0,
            "username": "intrakits",
            "viewed": 245
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 200\n#define MAX_DIST 100.\n#define SURFACE_DIST 0.01\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r, float offX, float offY, float offZ) {\n\ta.x += offX;\n    b.x += offX;\n    \n    a.y += offY;\n    b.y += offY;\n    \n    a.z += offZ;\n    b.z += offZ;\n    \n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r){\n    //line from a to b\n    vec3 ab = b-a;\n    \n    // line from p to a\n    vec3 ap = p-a;\n    \n    // as p approaches a, it will be 1\n    // as p approaches b it will b 0\n    float t = dot(ab,ap) / dot(ab,ab);\n    \n    // clamp values between 0 and 1\n    t= clamp(t,0.,1.);\n    \n    // center point of the capsule\n    // start at a (top of capsule)\n    // go towards b, t steps\n    vec3 c = a + t*ab;\n    \n    float d = length(p-c)-r;\n    \n    return d;\n}\n\nfloat sdTorus(vec3 p, vec2 r){\n    float x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat dBox(vec3 p, vec3 s){\n    return length(max(abs(p)-s,0.));\n}\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*0.25/k;\n}\n\n// https://iquilezles.org/articles/smin\nvec2 smin( vec2 a, vec2 b, float k )\n{\n    float h = clamp( 0.5+0.5*(b.x-a.x)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smax( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*0.25/k;\n}\nfloat toriGen (vec3 p, float offSet){\n    float tori;\n    float lLeg = sdCylinder(p, vec3(0,0,0), vec3(0,4,0), .5-.08*p.y, 1.6, -1.4, offSet);\n    tori = lLeg;\n    tori = smin(tori, lLeg,.1);\n    float rLeg = sdCylinder(p, vec3(0,0,0), vec3(0,4,0), .5-.08*p.y, -1.6, -1.4, offSet);\n    tori = smin(tori, rLeg,.1);\n    \n    float horizB = sdCylinder(p, vec3(-3,0,0), vec3(3,0,0), .4-.1*abs(p.x)-.4*abs(p.z-offSet), 0., 3., offSet);\n    tori = smin(tori, horizB,.4);\n    return tori;\n}\nfloat GetDist(vec3 p){\n \n    //--------------------------------\n    // distance to center of sphere: \n    // length(sphere position - camera position)\n    // distance to outside of the sphere:\n    // length(sphere position - camera position) - sphere radius\n   // float ds = length(p-sphere.xyz)-sphere.w;\n    \n    //distance to floor (plane)\n    //this is just height of the origin point passed\n    \n    //ground plane\n    float dp =p.y;\n    //rocks\n    float dr =p.y-.4;\n   \n    //grass displacement\n    vec2 uv = vec2(p.x,p.z);\n    float disp = texture(iChannel0,uv).r;\n    \n    //rock displacement\n    vec2 uv2 = vec2(p.x*.1,p.z*.1);\n    float dispRocks = texture(iChannel2,uv2).r;\n\n    //add grass\n    disp = smoothstep(4.,.1,abs(disp));\n    //add rocks\n    dispRocks = smoothstep(.1,1.,dispRocks);\n    \n    //apply displacement\n    dp -= disp*.5;\n    dr -= dispRocks * .5;\n    //add grass to scene\n    float d = dp;\n    \n    //add rocks to scene\n    d = min(d, dr);\n    \n    //add hills\n    d += (sin(p.x+sin(p.x+cos(p.z))) +1.)*(cos(p.z+cos(p.z+cos(p.x))) +1.)*.1;\n    d += sin(p.x*.1)+1.;\n\n    //add path\n    \n    float path = dBox(p-vec3(0,-.8,0), vec3(1,1.,100));\n    float pathM = (pow(sin(p.z*20.),8.)*.1 + .1) * (pow(sin(smoothstep(.8,-.8,p.x)*20.),8.)*.1 + .1);\n    path -= pathM; \n    path *=.6;\n    d = smin(d,path,.4);\n    //add tori\n   \n    \n    for(int i = -20; i < 20; i++){\n        float tori = toriGen (p, float(i*2));\n        d = smin(tori,d,.1);\n    }\n    return d;\n}\nfloat RayMarch(vec3 ro, vec3 rd){\n    // distance from origin\n    float dO=0.;\n    // march until max steps is achieved or object hit\n    for(int i=0; i <MAX_STEPS; i++){\n        // current point being evaluated\n        vec3 p = ro + dO*rd;\n        \n        // get distance to seam\n        float ds = GetDist(p);\n        //move origin to new point\n        dO+=ds*.8;\n        if(ds < SURFACE_DIST || dO > MAX_DIST){\n            break;\n        }\n    }\n    return dO;\n}\nvec3 GetNormal(vec3 p){\n    //distance to point being analyzed\n    float d = GetDist(p);\n    \n    //distance to another point along the objects surface that is closeby\n    vec2 e = vec2(0.01,0);\n    \n    //slope between the two points\n    //note: swizzel is the .xxy or .yyx etc\n    vec3 n = d - vec3(\n         GetDist(p-e.xyy),\n         GetDist(p-e.yxy),\n         GetDist(p-e.yyx));\n         \n    return normalize(n);\n    \n}\nfloat GetLight(vec3 p){\n    //position of the light source\n    vec3 lightPos = vec3(0,50,6);\n    \n    lightPos.xz *= Rot(sin(iTime*.05)*50.);\n    //light vector\n    vec3 l = normalize(lightPos-p+vec3(0,0,0));\n    \n    //normal of object\n    vec3 n = GetNormal(p);\n    \n    // dot product of the light vector and normal of the point\n    // will give us the amount of lighting to apply to the point\n    // dot() evaluates to values between -1 and 1, so we will clamp it\n    float diff = clamp(dot(n, l),0.,1.);\n    \n    // calculate if point should be a shadow:\n    // raymarch from point being calculated towards light source\n    // if hits surface of something else before the light,\n    // then it must be obstructed and thus is a shadow\n    // the slight offset \"p+n*SURFACE_DIST*1.1\" is needed to ensure the\n    // break condistions in the function are not met too early\n    float d = RayMarch(p+n*SURFACE_DIST*1.1,l);\n    if(d < length(lightPos-p)){\n        diff *= 0.1;\n    }\n    return diff;\n}\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    // origin is now (0,0)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 col = vec3(0);\n    \n    //camera\n    //-----------------\n    // ray origin\n    //controls position\n    vec3 ro = vec3(4,6,1);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    //ray dir\n    //controls rotation\n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n    //------------------\n    float d = RayMarch(ro,rd);\n    // position of point\n    // start at ray origin\n    // move d units in the ray direction\n    vec3 p = ro + rd *d;\n    \n    float y = p.y+10.;\n    col = vec3(0,y*.01,y);\n    \n    //color objects\n    if(d < MAX_DIST){\n        \n        //get normals\n        vec3 n = abs(GetNormal(p));\n        \n        //floor color\n        vec2 uv2 = vec2(p.x*.1,p.z*.1);\n        float dispRocks = texture(iChannel2,uv2).r;\n        float dr =p.y-.4;\n        dispRocks = smoothstep(.1,1.,dispRocks);\n        dr -= dispRocks * .5;\n        \n        dr += (sin(p.x+sin(p.x+cos(p.z))) +1.)*(cos(p.z+cos(p.z+cos(p.x))) +1.)*.1;\n        dr += sin(p.x*.1)+1.;\n        \n\n        float plane = p.y;\n        plane += (sin(p.x+sin(p.x+cos(p.z))) +1.)*(cos(p.z+cos(p.z+cos(p.x))) +1.)*.1;\n        plane += sin(p.x*.1)+1.;\n        //uv for ground\n        col = plane*vec3(0,.6,0);\n        \n        //more ground colors \n        col = max(col,sin(p.x+sin(p.x+sin(p.x+sin(p.x*p.z)))) * cos(p.z) *vec3(1,.5,0.3)*vec3(.5));\n\n        //rock colours\n        vec3 rocks=((dr) *vec3(1)*10.);\n        rocks = abs(rocks-1.)*.6;\n           \n        float offset =abs(sin(p.x*10.+atan(p.x*10.+tan(p.x*10.+tan(p.x*10.))))*sin(p.z*10.+cos(p.z*10.+cos(p.z*10.+tan(p.z*10.))))-1.);\n        \n        \n        col = max(col,rocks);\n        \n        //path colours\n        float path = dBox(p-vec3(0,-1.,0), vec3(1,1.,100));\n        \n        float pathM = (pow(sin(p.z*20.),8.)*.1 + .1) * (pow(sin(smoothstep(.8,-.8,p.x)*20.),8.)*.1 + .1);\n        path -= pathM; \n        path *=.6;\n        col = min(col,path*vec3(1.));\n        path= 1./path;\n        col = max(col,path*vec3(.01)*.1);\n        \n      //  col *= 1./path;\n        //get diffuse lighting\n        float diff = GetLight(p);\n        col *= vec3(diff)*1.3;\n        \n        \n\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}