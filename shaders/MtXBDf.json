{
    "Shader": {
        "info": {
            "date": "1513622604",
            "description": "Weight w of each pixel in the top MIPmap level.   #def Z: lower LOD.   SPACE: refresh\n- value at mouse pixel\n- heat map:\n  White: exact.   Light grey: ~exact.   Grey: w/2\n  Red to Violet =mod(w,10)    Blink period = w/10    (red is near 1 if not blinking)",
            "flags": 48,
            "hasliked": 0,
            "id": "MtXBDf",
            "likes": 2,
            "name": "bug MIPmap 7 : heatmap",
            "published": 3,
            "tags": [
                "texture",
                "glsl",
                "lod",
                "bug",
                "gpmipmap"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1103
        },
        "renderpass": [
            {
                "code": "#define Z 0 // 3                              // option: investigate sum at lower LOD\n\nfloat pInt(vec2, float);\nfloat pFloat(vec2, float);\nfloat char(vec2, int);\n#define spc  U.x-=.5;\n#define A(c)  U.x-=.5; O+= char(U,c);\n#define C(c)  U.x-=.5; O+= char(U,64+c);\n#define L(c)  U.x-=.5; O+= char(U,64+32+c);\n\nfloat sum(int l) { // ========== sum texture at given MIPmap level\n    ivec2 R = textureSize(iChannel0,l);\n    float v = 0.;\n    for (int j=0; j<R.y; j++)\n        for (int i=0; i<R.x; i++)\n            v +=   texelFetch(iChannel0, ivec2(i,j), l).y;\n    return v / float(R.x*R.y);\n}\n\n#define hue(h)   .6 + .6 * cos( 6.3 * (h)  + vec4(0,23,21,0)  )\n       \nvoid mainImage( out vec4 O, vec2 U ) // ========================================\n{\n    vec2  R = iResolution.xy, M = iMouse.xy, V;\n    float N = floor(log2(R.x)),\n          w =   texelFetch(iChannel0, ivec2(U), 0).x\n              * texelFetch(iChannel1, ivec2(U), 0).x;\n#if 0                                         // test on final anti-mask = Kern(MIPmap) :-)\n    int l = int( w = (N+1.)*M.y/R.y );\n    vec2 T = vec2(textureSize(iChannel1,l));\n    O = texelFetch(iChannel1, ivec2(U/R*T), l).wwww;\n // O = textureLod(iChannel1, U/R, w).wwww;\n    V = mod((U-.5)*T,R)+1e-3; if (l>1 && (V.x<T.x||V.y<T.y)) O = vec4(1,0,0,0); \n    U = ( U/R.y - vec2(.6*R.x/R.y,0) ) * 15.; // print resolution\n    L(18)L(5)L(19)A(58) spc spc \n    w = pInt( U, T.x ); U.x -= 1.7; L(24); U.x -= .7; w += pInt( U, T.y ); if (w>0.) O = vec4(0,w,0,0);\n    return;\n#endif\n    \n    O =   w == 1.        ? vec4(1)            // reads weight of each pixel in ultimate MIPmap LOD.\n        : abs(w-1.)<1e-3 ? vec4(.8)\n        : w < 1.         ? vec4(.5*w)\n                         : hue((w-1.)/11.);\n    w = floor((w-1.)/11.); if (w>0.) O *= .5+.5*sin(6.28*iTime*w);\n    \n#if Z == 0\n    w = texture(iChannel0, U/R, 100.).y;      // reads weight of mouse pixel in ultimate MIPmap LOD.\n#else\n    w = sum(int(N)-3);                        // option: investigate sum at lower LOD\n#endif\n    M.x = min (M.x,.75*R.x);\n    O += pFloat( (U-M) / R.y * 10. +.1, w );\n\n    float r = length( U-iMouse.xy ) - 5. ;    // mouse cursor\n    O += smoothstep( 1., .0, r );\n    O -= smoothstep( 1., .0, abs(r-1.) );\n    \n    U = ( U/R.y - vec2(.6*R.x/R.y,0) ) * 15.; // print resolution\n    L(18)L(5)L(19)A(58) spc spc \n    O += pInt( U, R.x ); U.x -= 1.7; L(24); U.x -= .7; O += pInt( U, R.y ); \n\n}\n\n\n\n// === text and numbers printing utilities =========================\n\n// --- access to the image of ascii code c\nfloat char(vec2 p, int c) {\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return 0.;\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx(p/16.),dFdy(p/16.) ).x;\n}\n\n// --- display int4\nfloat pInt(vec2 p, float n) {\n    float v = 0.;\n    if (n < 0.) \n        v += char(p - vec2(-.5,0), 45 ),\n        n = -n;\n\n    for (float i = 3.; i>=0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(p - .5*vec2(i,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n\n// --- display float4.4\nfloat pFloat(vec2 p, float n) {\n    float v = pInt(p,floor(n)); p.x -= 2.;\n        v += char(p, 46);      p.x -= .5;\n        v += pInt(p,fract(n)*1e4);\n    return v;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define iFrame int( texelFetch(iChannel1, ivec2(0), 0).w )\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    int  x = int(U.x), r = int(iResolution.x/4.);\n    \n    if ( iFrame < r )                                  // test columns\n        O = R.x * vec4( x == iFrame, x-r == iFrame, x-2*r == iFrame, x-3*r == iFrame);\n}                     // split the horizontal domain in 4, inspected in // via r, g, b, a",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define iFrame int( texelFetch(iChannel1, ivec2(0), 0).w )\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    int  y = int(U.y), r = int(iResolution.y/4.);\n    \n    if ( iFrame < r )                                  // test rows\n        O = R.y * vec4( y == iFrame, y-r == iFrame, y-2*r == iFrame, y-3*r == iFrame);\n}                     // split the vertical domain in 4, inspected in // via r, g, b, a",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define Z 0 // 3                             // option: investigate sum at lower LOD\n\n#define iFrame int( texelFetch(iChannel2, ivec2(0), 0).w )\n\nvec4 sum(int l) { // ========== sum texture at given MIPmap level\n    ivec2 R = textureSize(iChannel0,l);\n    vec4 v = vec4(0);\n    for (int j=0; j<R.y; j++)\n        for (int i=0; i<R.x; i++)\n            v +=   texelFetch(iChannel0, ivec2(i,j), l);\n    return v / float(R.x*R.y);\n}\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2  R = iResolution.xy;\n    int   x = int(U.x), r = int(iResolution.x/4.);\n    float N = floor(log2(R.x));\n    \n    if ( iFrame < 0 ) return;                // reset iFrame\n    else O.x = texelFetch(iChannel1, ivec2(U), 0).x;\n#if Z == 0    \n    vec4 T = texture(iChannel0, U/R, 100.);  // collect columns footprint on top MIPmap LOD\n#else\n    vec4 T = sum(int(N)-Z);                  // option: investigate sum at lower LOD\n#endif\n    if ( x     == iFrame ) O.x += T.r;\n    if ( x-r   == iFrame ) O.x += T.g;\n    if ( x-2*r == iFrame ) O.x += T.b;\n    if ( x-3*r == iFrame ) O.x += T.a;\n    \n     O.w = float (O.x * texelFetch(iChannel2, ivec2(U), 0).x == 0.); // 1 where final heatmap=0\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define Z 0 // 3                                   // option: investigate sum at lower LOD\n\n#define iFrame int( texelFetch(iChannel1, ivec2(0), 0).w )\n#define keyClick(ascii) ( texture(iChannel3,vec2((.5+float(ascii))/256.,0.25)).x > 0. )\n\nvec4 sum(int l) { // ========== sum texture at given MIPmap level\n    ivec2 R = textureSize(iChannel0,l);\n    vec4 v = vec4(0);\n    for (int j=0; j<R.y; j++)\n        for (int i=0; i<R.x; i++)\n            v +=   texelFetch(iChannel0, ivec2(i,j), l);\n    return v / float(R.x*R.y);\n}\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2  R = iResolution.xy;\n    int   y = int(U.y), r = int(iResolution.y/4.);\n    float N = floor(log2(R.x));\n    O -= O;\n    if ( U == vec2(1.5) ) O.zw = R;                // to detect resize\n    \n    if ( iFrame < 0 ) return;                      // reset iFrame\n    else O.x = texelFetch(iChannel1, ivec2(U), 0).x;\n    \n#if Z == 0    \n    vec4 T = texture(iChannel0, U/R, 100.);        // collect rows footprint on top MIPmap LOD\n#else\n    vec4 T = sum(int(N)-3);                        // option: investigate sum at lower LOD\n#endif\n    if ( y     == iFrame ) O.x += T.r;\n    if ( y-r   == iFrame ) O.x += T.g;\n    if ( y-2*r == iFrame ) O.x += T.b;\n    if ( y-3*r == iFrame ) O.x += T.a;\n    \n    \n    \n    O.y = float( floor(U) == floor(iMouse.xy) ) * R.x*R.y; // test mouse position\n    \n    if ( U == vec2(.5) )                                   // emulate iFrame\n        O.w = keyClick(32) || texelFetch(iChannel1, ivec2(1), 0).zw != R \n        ? -1.                                              // reset if SPACE or resize\n        : texelFetch(iChannel1, ivec2(0), 0).w + 1.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}