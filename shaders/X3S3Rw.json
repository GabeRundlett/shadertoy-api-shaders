{
    "Shader": {
        "info": {
            "date": "1708279552",
            "description": "Convert wavelength to sRGB color.",
            "flags": 0,
            "hasliked": 0,
            "id": "X3S3Rw",
            "likes": 3,
            "name": "Wavelength To Color",
            "published": 3,
            "tags": [
                "spectrum",
                "color",
                "rgb",
                "srgb",
                "wavelength",
                "cie",
                "xyzcolorspace"
            ],
            "usePreview": 0,
            "username": "David654",
            "viewed": 196
        },
        "renderpass": [
            {
                "code": "vec3 standardObserver1964[] =\n    vec3[] (\n    vec3(0.00016, 0.000017, 0.000705), // 380 nm\n    vec3(0.000662, 0.000072, 0.002928), // 385 nm\n    vec3(0.002362, 0.000253, 0.010482), // 390 nm\n    vec3(0.007242, 0.000769, 0.032344), // 395 nm\n    vec3(0.01911, 0.002004, 0.086011), // 400 nm\n    vec3(0.0434, 0.004509, 0.19712), // 405 nm\n    vec3(0.084736, 0.008756, 0.389366), // 410 nm\n    vec3(0.140638, 0.014456, 0.65676), // 415 nm\n    vec3(0.204492, 0.021391, 0.972542), // 420 nm\n    vec3(0.264737, 0.029497, 1.2825), // 425 nm\n    vec3(0.314679, 0.038676, 1.55348), // 430 nm\n    vec3(0.357719, 0.049602, 1.7985), // 435 nm\n    vec3(0.383734, 0.062077, 1.96728), // 440 nm\n    vec3(0.386726, 0.074704, 2.0273), // 445 nm\n    vec3(0.370702, 0.089456, 1.9948), // 450 nm\n    vec3(0.342957, 0.106256, 1.9007), // 455 nm\n    vec3(0.302273, 0.128201, 1.74537), // 460 nm\n    vec3(0.254085, 0.152761, 1.5549), // 465 nm\n    vec3(0.195618, 0.18519, 1.31756), // 470 nm\n    vec3(0.132349, 0.21994, 1.0302), // 475 nm\n    vec3(0.080507, 0.253589, 0.772125), // 480 nm\n    vec3(0.041072, 0.297665, 0.57006), // 485 nm\n    vec3(0.016172, 0.339133, 0.415254), // 490 nm\n    vec3(0.005132, 0.395379, 0.302356), // 495 nm\n    vec3(0.003816, 0.460777, 0.218502), // 500 nm\n    vec3(0.015444, 0.53136, 0.159249), // 505 nm\n    vec3(0.037465, 0.606741, 0.112044), // 510 nm\n    vec3(0.071358, 0.68566, 0.082248), // 515 nm\n    vec3(0.117749, 0.761757, 0.060709), // 520 nm\n    vec3(0.172953, 0.82333, 0.04305), // 525 nm\n    vec3(0.236491, 0.875211, 0.030451), // 530 nm\n    vec3(0.304213, 0.92381, 0.020584), // 535 nm\n    vec3(0.376772, 0.961988, 0.013676), // 540 nm\n    vec3(0.451584, 0.9822, 0.007918), // 545 nm\n    vec3(0.529826, 0.991761, 0.003988), // 550 nm\n    vec3(0.616053, 0.99911, 0.001091), // 555 nm\n    vec3(0.705224, 0.99734, 0), // 560 nm\n    vec3(0.793832, 0.98238, 0), // 565 nm\n    vec3(0.878655, 0.955552, 0), // 570 nm\n    vec3(0.951162, 0.915175, 0), // 575 nm\n    vec3(1.01416, 0.868934, 0), // 580 nm\n    vec3(1.0743, 0.825623, 0), // 585 nm\n    vec3(1.11852, 0.777405, 0), // 590 nm\n    vec3(1.1343, 0.720353, 0), // 595 nm\n    vec3(1.12399, 0.658341, 0), // 600 nm\n    vec3(1.0891, 0.593878, 0), // 605 nm\n    vec3(1.03048, 0.527963, 0), // 610 nm\n    vec3(0.95074, 0.461834, 0), // 615 nm\n    vec3(0.856297, 0.398057, 0), // 620 nm\n    vec3(0.75493, 0.339554, 0), // 625 nm\n    vec3(0.647467, 0.283493, 0), // 630 nm\n    vec3(0.53511, 0.228254, 0), // 635 nm\n    vec3(0.431567, 0.179828, 0), // 640 nm\n    vec3(0.34369, 0.140211, 0), // 645 nm\n    vec3(0.268329, 0.107633, 0), // 650 nm\n    vec3(0.2043, 0.081187, 0), // 655 nm\n    vec3(0.152568, 0.060281, 0), // 660 nm\n    vec3(0.11221, 0.044096, 0), // 665 nm\n    vec3(0.081261, 0.0318, 0), // 670 nm\n    vec3(0.05793, 0.022602, 0), // 675 nm\n    vec3(0.040851, 0.015905, 0), // 680 nm\n    vec3(0.028623, 0.01113, 0), // 685 nm\n    vec3(0.019941, 0.007749, 0), // 690 nm\n    vec3(0.013842, 0.005375, 0), // 695 nm\n    vec3(0.009577, 0.003718, 0), // 700 nm\n    vec3(0.006605, 0.002565, 0), // 705 nm\n    vec3(0.004553, 0.001768, 0), // 710 nm\n    vec3(0.003145, 0.001222, 0), // 715 nm\n    vec3(0.002175, 0.000846, 0), // 720 nm\n    vec3(0.001506, 0.000586, 0), // 725 nm\n    vec3(0.001045, 0.000407, 0), // 730 nm\n    vec3(0.000727, 0.000284, 0), // 735 nm\n    vec3(0.000508, 0.000199, 0), // 740 nm\n    vec3(0.000356, 0.00014, 0), // 745 nm\n    vec3(0.000251, 0.000098, 0), // 750 nm\n    vec3(0.000178, 0.00007, 0), // 755 nm\n    vec3(0.000126, 0.00005, 0), // 760 nm\n    vec3(0.00009, 0.000036, 0), // 765 nm\n    vec3(0.000065, 0.000025, 0), // 770 nm\n    vec3(0.000046, 0.000018, 0), // 775 nm\n    vec3(0.000033, 0.000013, 0) // 780 nm\n);\n\nfloat standardObserver1964_w_min = 380.0f;\nfloat standardObserver1964_w_max = 780.0f;\nint standardObserver1964_length = 81;\n\nvec3 wavelengthToXYZ(float wavelength)\n{\n    float pos = (wavelength - standardObserver1964_w_min) / (standardObserver1964_w_max - standardObserver1964_w_min);\n    float index = pos * float(standardObserver1964_length);\n    float floorIndex = floor(index);\n    float blend = clamp(index - floorIndex, 0.0, 1.0);\n    int index0 = int(floorIndex);\n    int index1 = index0 + 1;\n    index1 = min(index1, standardObserver1964_length - 1);\n\n    return mix(standardObserver1964[index0], standardObserver1964[index1], blend);\n}\n\nvec3 XYZtosRGB(vec3 XYZ)\n{\n   mat3 m = mat3(\n        3.2404542, -1.5371385, -0.4985314,\n\t\t-0.9692660,  1.8760108,  0.0415560,\n \t\t0.0556434, -0.2040259,  1.0572252);\n    \n    return XYZ * m;\n}\n\nvec3 wavelengthTosRGB(float wavelength)\n{\n    return XYZtosRGB(wavelengthToXYZ(wavelength));\n}\n\nfloat applyGammasRGBChannel(float sRGBChannel)\n{\n    if(sRGBChannel > 0.0031308)\n    {\n        return 1.055 * pow(sRGBChannel, 1.0/2.4) - 0.055;\n    }\n    else\n    {\n        return sRGBChannel * 12.92;\n    }\n}\n\nvec3 wavelengthToXYZ2(float wavelength)\n{\n    float L = exp(-0.5 * pow((wavelength - 570.0) / 50.0, 2.0));\n    float M = exp(-0.5 * pow((wavelength - 540.0) / 40.0, 2.0));\n    float S = exp(-0.5 * pow((wavelength - 450.0) / 20.0, 2.0));\n    vec3 LMS = vec3(L, M, S);\n    mat3 matrix = mat3(1.94735469, -1.41445123, 0.36476327, \n                        0.68990272, 0.34832189, 0, \n                        0, 0, 1.93485343);\n    \n    return LMS * matrix;\n}\n\nvec3 applyGammasRGB(vec3 sRGB)\n{\n    return vec3(applyGammasRGBChannel(sRGB.r), applyGammasRGBChannel(sRGB.g), applyGammasRGBChannel(sRGB.b));\n}\n\nfloat FFalloff(float f1, float f2, float range)\n{\n    return smoothstep(range, 0.0, abs( f1 - f2 ));\n}\n\nfloat scalesRGB(float wavelength, vec3 sRGB)\n{\n    vec3 sRGBRanges = vec3(40, 50, 70.0);\n    vec3 sRGBApproxWavelengths = vec3(610.0, 549.0, 468.0);\n    float x = FFalloff(wavelength, sRGBApproxWavelengths.x, sRGBRanges.x) * sRGB.x\n    + FFalloff(wavelength, sRGBApproxWavelengths.y, sRGBRanges.y) * sRGB.y\n    + FFalloff(wavelength, sRGBApproxWavelengths.z, sRGBRanges.z) * sRGB.z;\n    return x * 1.5;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float wavelength = mix(standardObserver1964_w_min, standardObserver1964_w_max, fragCoord.x / iResolution.x);\n    \n    vec3 XYZ = wavelengthToXYZ(wavelength);\n    \n    vec3 sRGB = XYZtosRGB(XYZ);\n    sRGB = applyGammasRGB(sRGB);\n\n    fragColor = vec4(sRGB, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}