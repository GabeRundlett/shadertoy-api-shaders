{
    "Shader": {
        "info": {
            "date": "1543071869",
            "description": "Using constants from [url]https://twitter.com/Lord_Arse/status/1066332635839045632[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "4lGfzK",
            "likes": 5,
            "name": "Commodore Logo",
            "published": 3,
            "tags": [
                "commodore"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 585
        },
        "renderpass": [
            {
                "code": "// minified to 278 chars:\n#define R iResolution\nvoid mainImage(out vec4 o,vec2 f){\n    o.xy = 15.*f/R.xy-7.5;\n    o.x *= R.x / R.y;\n\to.y = abs(o.y);\n    o.z = o.x-1.51;\n    o.w = dFdx(o.x);\n    o = vec4(smoothstep(-o.w,o.w,min(\n        max(\n            max(\n                (o.x-o.y-3.33)/sqrt(2.),\n                max(o.y-1.83,0.17-o.y)\n            ),\n            -o.z\n        ),\n        max(\n            max(\n                length(o.xy)-4.85,\n                2.6-length(o.xy*vec2(5.2/5.3,1))\n            ),\n            o.z\n        )\n    )));}\n\n// original code:\n/*const float A = 10.;\nconst float B = 0.034 * A;\nconst float C = 0.166 * A;\nconst float E = 0.364 * A;\nconst float F = 0.52 * A;\nconst float G = 0.53 * A;\nconst float H = 0.636 * A;\nconst float I = 0.97 * A;\n\nfloat sdf(vec2 p)\n{\n    p.y = abs(p.y);\n    \n    float outerCircle = length(p)-I*.5;\n    float innerCircle = length(p*vec2(F/G,1))-F*.5;\n    float verticalMask = p.x-(H-I*.5);\n    \n    float topMask = p.y-C-B*.5;\n    float bottomMask = p.y-B*.5;\n    float angleMask = ((p.x-p.y)-A+I*.5+E*.5)/sqrt(2.);\n    \n    float vents = max(max(angleMask,max(topMask,-bottomMask)), -verticalMask);\n    \n    float ring = max(max(outerCircle,-innerCircle),verticalMask);\n    \n    return min(vents, ring);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy-.5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 15.;\n\n    float r = dFdx(uv.x);\n    fragColor = vec4(smoothstep(-r,r,sdf(uv)));\n}*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}