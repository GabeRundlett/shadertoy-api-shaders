{
    "Shader": {
        "info": {
            "date": "1668629324",
            "description": "Uses dFdx to draw an anti-aliased filled line graph.\nIt isn't perfect but it is stupidly simple.",
            "flags": 32,
            "hasliked": 0,
            "id": "ddfXzM",
            "likes": 4,
            "name": "Antialiased Graph",
            "published": 3,
            "tags": [
                "graph",
                "aa"
            ],
            "usePreview": 0,
            "username": "Hatchling",
            "viewed": 184
        },
        "renderpass": [
            {
                "code": "// Controls:\n// Mouse Click + Drag: Change the value of the graph \n//                     at and around the given point.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    float pixelHeight = fragCoord.y;\n    float graphHeight = fragColor.x * iResolution.y;\n    \n    float range = (1.0 + abs(dFdx(graphHeight))) * 1.0;\n    \n    float upper = graphHeight + range;\n    float lower = graphHeight - range;\n    \n    float value = (pixelHeight - lower) / (upper - lower);\n    \n    // Convert to a line instead of a solid graph.\n    // Increase the range's multiplier from 1.0 to 2.0 to use this.\n    //value = abs(value - 0.5) * 2.0;\n    \n    fragColor = vec4(smoothstep(0., 1., value));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Contains the function to display.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    vec4 mouseProxy = iMouse;\n    \n    if(iMouse.xy == vec2(0))\n    {\n        vec2 halfRes = iResolution.xy * 0.5;\n        mouseProxy.xy = vec2(sin(iTime), cos(iTime)) * halfRes + halfRes;\n        mouseProxy.z = 1.0;\n    }\n    \n    if(mouseProxy.z > 0.0)\n    {\n        float distanceToMouse = abs(mouseProxy.x - fragCoord.x) / iResolution.x;\n        \n        float weight = exp2(-distanceToMouse * 100.0);\n        weight = smoothstep(0., 1., weight);\n    \n        fragColor = mix(fragColor, vec4(mouseProxy.y / iResolution.y), weight);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}