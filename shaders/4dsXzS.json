{
    "Shader": {
        "info": {
            "date": "1403318971",
            "description": "My entry to the inofficial, nonexistent st mine compo :) Click and hold to sit in cart.\nPerformancewise ... I think it was a big mistake to lookup textures inside the scene function. Will avoid that in future.",
            "flags": 8,
            "hasliked": 0,
            "id": "4dsXzS",
            "likes": 40,
            "name": "Minecart",
            "published": 3,
            "tags": [
                "raymarch",
                "sound",
                "mine",
                "cart"
            ],
            "usePreview": 0,
            "username": "movAX13h",
            "viewed": 5166
        },
        "renderpass": [
            {
                "code": "// mine + cart, fragment shader by movAX13h (filip.sound@gmail.com), June 2014\n// sound by srtuss\n\n#define CART\n#define RAILS\n#define PILLARS\n#define POST\n\n#define resolution iResolution\n#define time iTime\n#define mouse iMouse\n\n#define pi2 6.283185307179586476925286766559\n#define focus 5.0\n#define far 14.0\n\nfloat atime;\nvec3 sun = normalize(vec3(0.6, 1.0, 0.5));\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rand(float n)\n{\n    return fract(sin(n * 12.9898) * 43758.5453);\n}\n\nfloat sdBox(vec3 p, vec3 b) // by iq\n{\t\n\tvec3 d = abs(p) - b;\n\treturn min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat udBox(vec3 p, vec3 b) // by iq\n{\t\n\treturn length(max(abs(p)-b,0.0)); \n}\n\nfloat sdPlane(vec3 p, vec4 n) // by iq\n{\n\tn.xyz = normalize(n.xyz);\n\treturn dot(p,n.xyz) + n.w;\n}\n\nfloat sdCappedCylinder(vec3 p, vec2 h) // by iq, orientation modified\n{\n  vec2 d = abs(vec2(length(p.yz),p.x)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat smin(float a, float b, float k) // by iq\n{\n    float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n    return mix(b, a, h) - k*h*(1.0-h);\n}\n\nvec2 track(float z)\n{\n\tz *= 0.15;\n\treturn vec2(2.0*sin(z)*(sin(z*0.33)*cos(z*0.2023))+10.0*sin(z*0.01), \n\t\t\t    2.0*cos(z)*(cos(z*0.33)*sin(z*0.2511)));\n}\n\nstruct Hit\n{\n\tfloat d;\n\tvec4 color;\n};\n\nHit scene(vec3 p)\n{\n\tfloat d, d1;\n\t\n\td = far;\n\tvec4 col = vec4(0.0);\n\t\n\tp.xy -= track(p.z);\n\tvec3 w = p; w.xy += vec2(0.5*sin(p.z)*sin(p.z*0.2), 0.1*cos(p.z));\n\tvec3 q = vec3(atan(w.x, w.y) * 8.0 / pi2, length(w.xy), w.z);\n\tvec2 uv = 0.18*q.xz;\n\tvec4 tex = texture(iChannel0, uv);\n\tcol = 0.15*texture(iChannel1, uv) + 0.1*tex;\n\tcol.a = 0.3;\n\n\tvec4 col1 = texture(iChannel1, 0.18*p.yz);\n\tvec4 col2 = texture(iChannel0, 0.18*p.yx);\n\t\n\t\n\t// tunnel\n\td = 1.0-length(w.xy-0.02*tex.rg);\n\t\n\t// lights (could be)\n\t#if 0\n\tfloat r = 20.0;\n\tq.z = mod(q.z, r)-0.5*r;\n\td1 = udBox(q-vec3(-2.0, 1.0, 0.0), vec3(0.04, 0.05, 0.1));\n\tif (d1 < d) { d = d1; col = vec4(0.9, 0.9, 0.9, 1.0); }\n\t#endif\n\t\n\t// floor\n\td = smin(d, sdPlane(p-vec3(0.0, -0.6+0.01*tex.r, 0.0), vec4(0.0, 1.0, 0.0, 0.0)), 0.2);\n\n\t#ifdef PILLARS\n\tq = vec3(abs(w.x)-0.93,w.y+0.57, mod(w.z,5.0)-2.5); \n\td1 = min(udBox(q-vec3(0.0, 0.5, 0.0), vec3(0.1, 0.7, 0.04)),\n\t\t\t udBox(q-vec3(-0.5, 1.2, 0.0), vec3(0.5, 0.06, 0.04)));\n\tif (d1 < d) { d = d1; col = vec4(0.1*(col1.rgb + col2.rgb)*vec3(1.5, 0.9, 0.9), 0.0); }\n\t#endif\n\t\n\t#ifdef RAILS\n\t\tq = vec3(abs(p.x)-0.23,p.y+0.57, mod(p.z,5.0)-2.5); \n\t\td1 =              udBox(q-vec3(0.0,0.07,0.0),   vec3(0.02,0.01,2.49)); \n\t\td1 = min(d1, smin(udBox(q-vec3(0.0,0.04,0.0),   vec3(0.01,0.04,2.49)),\n\t\t\t\t\t\t  udBox(q-vec3(0.0,-0.01 ,0.0), vec3(0.04,0.02,2.49)),0.03)); \n\t\tif (d1 < d) { d = d1; col = vec4(0.06, 0.05, 0.063, 1.0); }\n\t\t\n\t\tq = vec3(p.x, p.y+0.6-col.x*0.08, mod(p.z,1.0)-0.5);\n\t\td1 = sdBox(q, vec3(0.4,0.02,0.1)); \n\t\tif (d1 < d) { d = d1; col = 0.7*col + vec4(0.04, 0.0, 0.0, 0.05); }\n\t\t\n\t\tq.x = abs(q.x)-0.23;\n\t\tq.y -= 0.02;\n\t\td1 = sdBox(q, vec3(0.07,0.01,0.01)); \n\t\tif (d1 < d) { d = d1; col = vec4(.2, .2, .2, 1.0); }\n\t#endif\n\t\n\t#ifdef CART\n\t\tfloat z = (mouse.z > 0.0 ? 0.6 : 4.0)+atime;\n\t\ttex = texture(iChannel2, p.xy*1.3);\n\t\tvec4 ccol = vec4(0.2*tex.rgb,0.3);\n\t\n\t\t// basket\n\t\td1 = max(min(max(\n\t\t\t\tsmin(\n\t\t\t\t\tudBox(p-vec3(0.0,-0.07,z), vec3(0.1,0.1,0.27)), // top\n\t\t\t\t  \tudBox(p-vec3(0.0,-0.24,z), vec3(0.1,0.15,0.3)), // bottom\n\t\t\t\t\t0.4),\n\t\t\t\t-sdBox(p-vec3(0.0, 0.0, z), vec3(0.28, 0.1, 0.4))), // cut top\n\t\t\t\t sdBox(p-vec3(0.0, -0.138, z), vec3(0.21, 0.03, 0.4))), // frame\n\t\t\t\t-sdBox(p-vec3(0.0, 0.0, z), vec3(0.18, 0.25, 0.31))); // cut inner\n\t\tif (d1 < d) { d = d1; col = ccol*1.6; }\n\t\t\n\t\n\t\t// base plate\n\t\td1 = min(udBox(p-vec3(0.0,-0.4,z),vec3(0.185,0.015,0.41)), \n\t\t\t\t udBox(p-vec3(0.0,-0.43,z), vec3(0.19, 0.03, 0.28))); \n\t\tif (d1 < d) { d = d1; col = ccol; }\n\t\n\t\t// wheels\n\t\ttex = texture(iChannel2, p.xz); // moving with z\n\t\tq = vec3(abs(p.x)-0.21,p.y+0.44, p.z-z+0.2); \n\t\tvec2 ws = vec2(0.06-sign(q.x)*0.01, 0.02);\n\t\n\t\td1 = min(sdCappedCylinder(q, ws),\n\t\t\t\t sdCappedCylinder(q-vec3(0.0, 0.0, 0.4), ws));\n\t\tif (d1 < d) { d = d1; col = vec4(tex.rgb*0.4, 0.7); }\n\t#endif\n\t\n\treturn Hit(d, col);\n}\n\nvec3 normal(vec3 p)\n{\n\tfloat c = scene(p).d;\n\tvec2 h = vec2(0.01, 0.0);\n\treturn normalize(vec3(scene(p + h.xyy).d - c, \n\t\t\t\t\t\t  scene(p + h.yxy).d - c, \n\t\t                  scene(p + h.yyx).d - c));\n}\n\nvec3 colorize(in Hit hit, in vec3 pos, in vec3 dir)\n{\n\tvec3 n = normal(pos);\n\tvec3 ref = normalize(reflect(dir, n));\n\n\tfloat diffuse = 2.0*max(0.0, dot(n, sun));\n\tfloat specular = hit.color.a*pow(max(0.0, dot(ref, sun)), 3.5);\n\n\treturn (hit.color.rgb * 0.3 +\n\t\t\thit.color.rgb * diffuse +\n\t\t\tspecular * vec3(0.8));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    atime = time*5.0;\n    vec2 pos = (fragCoord.xy*2.0 - resolution.xy) / resolution.y;\n\t\n\tvec3 cp = vec3(track(atime)+sin(atime)*sin(atime*0.2)*vec2(rand(atime)*0.02, rand(time)*0.03), atime); \n\tcp.y +=0.1;\n\t\t\n    vec3 ct = vec3(track(atime + 4.0), atime + 4.0);\n   \tvec3 cd = normalize(ct-cp);\n    vec3 cu  = vec3(0.1*(ct.x-cp.x), 1.0, 0.0);\n    vec3 cs = cross(cd, cu);\n    vec3 dir = normalize(cs*pos.x + cu*pos.y + cd*focus);\t\n    vec3 ray = cp;\n\t\n    Hit h = Hit(0.0, vec4(0.0));\n\tfloat dist = 0.0;\n\t\n    for(int i=0; i < 100; i++) \n\t{\n        h = scene(ray);\n\t\t\t\n\t\tif(h.d < 0.0001) break;\n\t\t\n\t\tdist += h.d;\n\t\tray += dir * h.d;\n\n        if(dist > far) \n\t\t{ \n\t\t\tdist = far;\n\t\t\tbreak; \n\t\t}\n    }\n\n\tvec3 c = colorize(h, ray, dir); \n\tc *= (1.0 - dist/far);\n\t\n\t#ifdef POST\n    c *= 2.5 - rand(pos) * 0.1;\n\tc -= 0.4*smoothstep(0.6,3.7, length(pos));\n\t#endif\n\t\n\tfragColor = vec4(c, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 7,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "// by srtuss (modified slightly)\n\n#define NSPC 256\n#define pi2 6.283185307179586476925286766559\n\nvec2 synth1(float t)\n{\n\tvec2 v = vec2(0.0);\n\tfloat base = 50.0 + sin(t * 0.1) * 20.0;\n\tfloat flt = cos(t * 1.0) * 6.0 + 10.0;\n\tfloat fmd = smoothstep(-0.1, 0.1, sin(t * 1.0)) * 100.0;\n\tfor(int i = 0; i < NSPC; i ++)\n\t{\n\t\tfloat h = float(i + 1);\n\t\tfloat inten = 1.0 / h;\n\t\t\n\t\tvec2 ti = texture(iChannel3, vec2(h / 256.0, t * 0.1)).xy;\n\t\t\n\t\tfloat f = ti.y * fmd;\n\t\t\n\t\tinten *= pow(ti.x, 8.0);\n\t\tinten *= exp(-max(4.0 - h * 2.0, 0.0));\n\t\tinten *= mod(h, 2.0);\n\t\t\n\t\tv.x += inten * sin(0.5 + pi2 * (t * base * h) + f);\n\t\tv.y += inten * sin(pi2 * (t * base * h) + f);\n\t}\n\treturn v;\n}\n\nfloat rnd(float x)\n{\n\treturn fract(sin(x * 197.972) * 29728.58762);\n}\n\nfloat band(float h, float t)\n{\n\tt *= 0.3;\n\tfloat s = sin(t * pi2 * 0.5) + 1.01;\n\treturn smoothstep(s * 0.1, 0.0, mod(t - rnd(h), rnd(-h) * 3.0 + 0.5));\n}\n\nvec2 synth2(float t)\n{\n\tvec2 v = vec2(0.0);\n\tfloat base = 90.0;\n\tfloat flt = cos(t * 1.0) * 6.0 + 10.0;\n\tfor(int i = 0; i < NSPC; i ++)\n\t{\n\t\tfloat h = float(i + 1);\n\t\tfloat inten = 1.0 / h;\n\t\n\t\tinten *= band(h, t);\n\t\t\n\t\tv.x += inten * sin(t + pi2 * (t * base * h));\n\t\tv.y += inten * sin(pi2 * (t * base * h));\n\t}\n\treturn v;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n\tvec2 m1 = synth1(time);\n\tfloat ec = 0.5, fb = 0.8, et = 0.3, tm = 0.3;\n\tm1 += synth1(time - et) * ec * vec2(1.0, 0.2); ec *= fb; et += tm;\n\tm1 += synth1(time - et) * ec * vec2(0.2, 1.0); ec *= fb; et += tm;\n\tm1 += synth1(time - et) * ec * vec2(1.0, 0.2); ec *= fb; et += tm;\n\tm1 += synth1(time - et) * ec * vec2(0.2, 1.0); ec *= fb; et += tm;\n\t\n\tvec2 m2 = synth2(time);\n\tec = 0.5, fb = 0.8, et = 0.3, tm = 0.3;\n\tm2 += synth2(time - et).yx * ec * vec2(1.0, 0.5); ec *= fb; et += tm;\n\tm2 += synth2(time - et) * ec * vec2(0.5, 1.0); ec *= fb; et += tm;\n\tm2 += synth2(time - et).yx * ec * vec2(1.0, 0.5); ec *= fb; et += tm;\n\tm2 += synth2(time - et) * ec * vec2(0.5, 1.0); ec *= fb; et += tm;\n\t\n\treturn 1.3*m1 + 0.1*m2;\n\t//return 0.7*m1 + 0.6*m2;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}