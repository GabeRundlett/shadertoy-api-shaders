{
    "Shader": {
        "info": {
            "date": "1576587653",
            "description": "Distance to a capped torys, like [url]https://www.shadertoy.com/view/tl23RK[/url], but parametrized differently so it can be used as a joint. Inspired by dr2's morphing experiment - [url]https://www.shadertoy.com/view/3l3GD7[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "3ld3DM",
            "likes": 31,
            "name": "Joint 3D - distance",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 2224
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a capped torus, like https://www.shadertoy.com/view/tl23RK,\n// but parametrized differently so it can be used as a joint. Inspired\n// by dr2's experiment - https://www.shadertoy.com/view/3l3GD7. Based\n// on the 2D join SDF: https://www.shadertoy.com/view/WldGWM\n//\n// See https://www.shadertoy.com/view/3ttGW7\n\n// List of other 3D SDFs: https://www.shadertoy.com/playlist/43cXRl\n//\n// and https://iquilezles.org/articles/distfunctions\n\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nvec4 sdJoint3DSphere( in vec3 p, in float l, in float a, in float w)\n{\n    \n    // if perfectly straight\n    if( abs(a)<0.001 ) return vec4( length(p-vec3(0,clamp(p.y,0.0,l),0))-w, p );\n    \n    // parameters\n    vec2  sc = vec2(sin(a),cos(a));\n    float ra = 0.5*l/a;\n    \n    // recenter\n    p.x -= ra;\n    \n    // reflect\n    vec2 q = p.xy - 2.0*sc*max(0.0,dot(sc,p.xy));\n\n    float u = abs(ra)-length(q);\n    float d2 = (q.y<0.0) ? dot2( q+vec2(ra,0.0) ) : u*u;\n    float s = sign(a);\n    return vec4( sqrt(d2+p.z*p.z)-w,\n                 (p.y>0.0) ? s*u : s*sign(-p.x)*(q.x+ra),\n                 (p.y>0.0) ? atan(s*p.y,-s*p.x)*ra : (s*p.x<0.0)?p.y:l-p.y,\n                 p.z );\n}\n\nvec4 sdJoint3DFlat( in vec3 p, in float l, in float a, in float w)\n{\n    \n    // if perfectly straight\n    if( abs(a)<0.001 )\n    {\n        vec3 q = p; q.y -= 0.5*l;\n        q = abs(q) - vec3(w,l*0.5,w);\n        return vec4(min(max(q.x,max(q.y,q.z)),0.0) + length(max(q,0.0)),p);\n    }\n    \n    // parameters\n    vec2  sc = vec2(sin(a),cos(a));\n    float ra = 0.5*l/a;\n    \n    // recenter\n    p.x -= ra;\n    \n    // reflect\n    vec2 q = p.xy - 2.0*sc*max(0.0,dot(sc,p.xy));\n\n\t// distance\n    float u = abs(ra)-length(q);\n    float d = max(length( vec2(q.x+ra-clamp(q.x+ra,-w,w), q.y) )*sign(-q.y),abs(u) - w);\n\n    // parametrization (optional)\n    float s = sign(a);\n    float v = ra*atan(s*p.y,-s*p.x);\n    u = u*s;\n    \n    // square profile\n    q = vec2(d,abs(p.z)-w);\n    \n    d = min(max(q.x,q.y),0.0) + length(max(q,0.0));\n\n    \n    return vec4( d, u, v, p.z );\n}\n\n\nvec4 map( in vec3 pos )\n{\n    float an = 1.3*sin(iTime*1.1+3.0);\n    float le = 0.8;\n    float wi = 0.2;\n    \n    vec4 d1 = sdJoint3DSphere(pos-vec3(0.0,0.0, 0.4), le, an, wi );\n    vec4 d2 = sdJoint3DFlat(  pos-vec3(0.0,0.0,-0.4), le, an, wi );\n    \n    return (d1.x<d2.x) ? d1 : d2;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ).x );\n}\n\nfloat hash(vec3 p)  // replace this by something better\n{\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    return mix(mix(mix( hash(i+vec3(0,0,0)), \n                        hash(i+vec3(1,0,0)),f.x),\n                   mix( hash(i+vec3(0,1,0)), \n                        hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+vec3(0,0,1)), \n                        hash(i+vec3(1,0,1)),f.x),\n                   mix( hash(i+vec3(0,1,1)), \n                        hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nfloat fbm( in vec3 p )\n{\n\n    p *= 16.0;\n\tconst mat3 m = mat3( 0.00,  0.80,  0.60,\n    \t                -0.80,  0.36, -0.48,\n        \t            -0.60, -0.48,  0.64 )*2.0;\n    float f = 0.0;\n    f += 0.500*noise( p ); p = m*p;\n    f += 0.250*noise( p ); p = m*p;\n    f += 0.125*noise( p ); p = m*p;\n    return f;\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 3\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.6 + 0.1*iTime;\n\tvec3 ro = vec3( 1.4*sin(an), 0.2, 1.4*cos(an) );\n    vec3 ta = vec3( 0.0, 0.2, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv =          ( cross(uu,ww));\n    \n    // render\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.8*ww );\n\n        // raymarch\n        const float tmax = 5.0;\n        float t = 0.0;\n        vec3 uvw = vec3(0.0);\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            \n            vec4 h = map(pos);\n            if( h.x<0.0001 || t>tmax )\n            {\n                uvw = h.yzw;\n                break;\n            }\n            t += h.x;\n        }\n        \n    \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            vec3 lig = normalize(vec3(0.8,0.5,0.4));\n            float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n            col *= fbm( uvw*2.0 );\n            col *= 1.75;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}