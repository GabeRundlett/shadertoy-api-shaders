{
    "Shader": {
        "info": {
            "date": "1723453737",
            "description": "https://github.com/GreatAttractor/gpuart/blob/master/shaders/cone.glsl\nhttps://www.geometrictools.com/Documentation/IntersectionLineCone.pdf\nhttps://www.shadertoy.com/view/MtcXWr\n",
            "flags": 0,
            "hasliked": 0,
            "id": "lffBzN",
            "likes": 4,
            "name": "@musix/correct cone intersection",
            "published": 3,
            "tags": [
                "ray",
                "cone",
                "instersection"
            ],
            "usePreview": 0,
            "username": "MusixNotMusic",
            "viewed": 93
        },
        "renderpass": [
            {
                "code": "// Fork of \"Ray tracing a cone\" by Zavie. https://shadertoy.com/view/MtcXWr\n// 2024-08-12 08:57:41\n\n/*\n\nThis shader demonstrates solving the intersection of\na ray and a cone for ray tracing.\n\nThe math is detailed on this page:\nhttp://lousodrome.net/blog/light/2017/01/03/intersection-of-a-ray-and-a-cone/\n\n--\nZavie\n\n*/\n\n#define MAX_BOUNCES 2\nfloat gamma = 2.2;\n\n// ---8<----------------------------------------------------------------------\n// Material\n\nstruct Material\n{\n    vec3 c;\t\t// diffuse color\n    float f0;\t// specular color (monochrome)\n};\n\n// ---8<----------------------------------------------------------------------\n// Geometry\n\n#define PI acos(-1.)\nfloat hash(float x) { return fract(sin(x) * 43758.5453); }\n\nstruct Ray\n{\n    vec3 o;\t\t// origin\n    vec3 d;\t\t// direction\n};\n\nstruct Hit\n{\n    float t;\t// solution to p=o+t*d\n    vec3 n;\t\t// normal\n    Material m;\t// material\n};\nconst Hit noHit = Hit(1e10, vec3(0.), Material(vec3(-1.), -1.));\n\nstruct Plane\n{\n    float d;\t// solution to dot(n,p)+d=0\n    vec3 n;\t\t// normal\n    Material m;\t// material\n};\n\nstruct Sphere\n{\n\tfloat r;\t// radius\n    vec3 p;\t\t// center position\n    Material m;\t// material\n};\n\nstruct Cone\n{\n    float cosa;\t// half cone angle\n    float h;\t// height\n    vec3 c;\t\t// tip position\n    vec3 v;\t\t// axis\n    Material m;\t// material\n};\n\nHit intersectPlane(Plane p, Ray r)\n{\n    float dotnd = dot(p.n, r.d);\n    if (dotnd > 0.) return noHit;\n\n    float t = -(dot(r.o, p.n) + p.d) / dotnd;\n    return Hit(t, p.n, p.m);\n}\n\nHit intersectSphere(Sphere s, Ray r)\n{\n\tvec3 op = s.p - r.o;\n    float b = dot(op, r.d);\n    float det = b * b - dot(op, op) + s.r * s.r;\n    if (det < 0.) return noHit;\n\n    det = sqrt(det);\n    float t = b - det;\n    if (t < 0.) t = b + det;\n    if (t < 0.) return noHit;\n\n    return Hit(t, (r.o + t*r.d - s.p) / s.r, s.m);\n}\n\n#define VISIBILITY_OFFSET 1.0e-4\n#define CONE_TOLERANCE    1.0e-7\n\nHit intersectCone(Cone s, Ray r)\n{\n    vec3 center = s.c;\n    vec3 axis = s.v;\n    float dis = s.h;\n    float cosa = s.cosa;\n    \n    vec3 ro = r.o;\n    vec3 rd = r.d;\n    \n    vec3 co = ro - center;\n    float cosa2 = cosa*cosa;\n\n    float a = dot(rd, axis)*dot(rd, axis) - cosa2;\n    float b = 2. * (dot(rd, axis)*dot(co, axis) - dot(rd,co)*cosa2);\n    float c = dot(co,axis)*dot(co,axis) - dot(co,co)*cosa2;\n\n    float det = b*b - 4.*a*c;\n    if (det < 0.) return noHit;\n\n    det = sqrt(det);\n\n    // This is a bit messy; there ought to be a more elegant solution.\n    float k1 = (-b - det) / (2. * a);\n    float k2 = (-b + det) / (2. * a);\n\n    float t = -1.0;\n\n    vec3 p1 = ro + k1*rd;\n    vec3 p2 = ro + k2*rd;\n    \n\n    float t1 = dot(axis, p1 - center.xyz);\n    float t2 = dot(axis, p2 - center.xyz);\n\n    bool onaxis1 = t1 >= 0.0 && t1 <= dis;\n    bool onaxis2 = t2 >= 0.0 && t2 <= dis;\n\n    if (k1 < VISIBILITY_OFFSET && onaxis2)\n    {\n        t = k2;\n    }\n    else if (k2 < VISIBILITY_OFFSET && onaxis1)\n    {\n        t = k1;\n    }\n    else\n    {\n        if (k1 < k2 && onaxis1 && onaxis2\n            || onaxis1 && !onaxis2)\n        {\n            t = k1;\n        }\n        else if (k2 < k1 && onaxis1 && onaxis2\n            || !onaxis1 && onaxis2)\n        {\n            t = k2;\n        }\n        else\n        {\n            t = -1.0;\n            return noHit;\n        }\n    }\n\n    if (t > 0.0)\n    {\n        vec3 cp = ro + t*rd - center;\n        vec3 normal = normalize(cp * dot(axis, cp) / dot(cp, cp) - axis);\n        if (dot(normal, rd) > 0.0)\n            normal = -normal;\n\n        return Hit(t, normal, s.m);\n    }\n\n    return noHit;\n}\n\nvec3 randomVector(float seed)\n{\n    float r2 = hash(seed);\n    float phi = 2. * PI * hash(seed + r2);\n    float sina = sqrt(r2);\n    float cosa = sqrt(1. - r2);\n\n\treturn vec3(cos(phi) * sina, cosa, sin(phi) * sina);\n}\n\nbool compare(inout Hit a, Hit b)\n{\n    if (b.m.f0 >= 0. && b.t < a.t)\n    {\n        a = b;\n        return true;\n    }\n    return false;\n}\n\nHit intersectScene(Ray r)\n{\n    vec3 axis1 = randomVector(floor(iTime));\n    vec3 axis2 = randomVector(floor(iTime+1.));\n    vec3 axis = normalize(mix(axis1, axis2, fract(iTime)));\n    float translation = 4.*abs(2.*fract(iTime/8.)-1.) - 2.;\n\n    Sphere s = Sphere(1., vec3(1., 1., 0.), Material(vec3(0.5), 0.04));\n    Plane p  = Plane(0., vec3(0., 1., 0.), Material(vec3(0.5, 0.4, 0.3), 0.04));\n    Cone c = Cone(0.95, 2., vec3(translation, 2., 1.), -axis, Material(vec3(1., 0., 0.), 0.02));\n\n    Hit hit = noHit;\n    compare(hit, intersectPlane(p, r));\n    compare(hit, intersectSphere(s, r));\n    compare(hit, intersectCone(c, r));\n    return hit;\n}\n\n// ---8<----------------------------------------------------------------------\n// Light\n\nstruct DirectionalLight\n{\n    vec3 d;\t\t// Direction\n    vec3 c;\t\t// Color\n};\n\nDirectionalLight sunLight = DirectionalLight(normalize(vec3(1., .5, .5)), vec3(1e3));\nvec3 skyColor(vec3 d)\n{\n    float transition = pow(smoothstep(0.02, .5, d.y), 0.4);\n\n    vec3 sky = 2e2*mix(vec3(0.52, 0.77, 1), vec3(0.12, 0.43, 1), transition);\n    vec3 sun = sunLight.c * pow(abs(dot(d, sunLight.d)), 5000.);\n    return sky + sun;\n}\n\nfloat pow5(float x) { return x * x * x * x * x; }\n\n// Schlick approximation\nfloat fresnel(vec3 h, vec3 v, float f0)\n{\n    return pow5(1. - clamp(dot(h, v), 0., 1.)) * (1. - f0) + f0;\n}\n\nfloat epsilon = 4e-4;\n\nvec3 accountForDirectionalLight(vec3 p, vec3 n, DirectionalLight l)\n{\n    if (intersectScene(Ray(p + epsilon * l.d, l.d)).m.f0 < 0.)\n    {\n        return clamp(dot(n, l.d), 0., 1.) * l.c;\n    }\n\treturn vec3(0.);\n}\n\nvec3 radiance(Ray r)\n{\n    vec3 accum = vec3(0.);\n    vec3 attenuation = vec3(1.);\n\n    for (int i = 0; i <= MAX_BOUNCES; ++i)\n    {\n        Hit hit = intersectScene(r);\n\n        if (hit.m.f0 >= 0.)\n        {\n            float f = fresnel(hit.n, -r.d, hit.m.f0);\n\n            vec3 hitPos = r.o + hit.t * r.d;\n\n            // Diffuse\n            vec3 incoming = vec3(0.);\n            incoming += accountForDirectionalLight(hitPos, hit.n, sunLight);\n\n            accum += (1. - f) * attenuation * hit.m.c * incoming;\n\n            // Specular: next bounce\n            attenuation *= f;\n            vec3 d = reflect(r.d, hit.n);\n            r = Ray(r.o + hit.t * r.d + epsilon * d, d);\n        }\n        else\n        {\n            accum += attenuation * skyColor(r.d);\n            break;\n        }\n    }\n    return accum;\n}\n\n// ---8<----------------------------------------------------------------------\n// Tone mapping\n\n// See: http://filmicgames.com/archives/75\nvec3 Uncharted2ToneMapping(vec3 color)\n{\n\tfloat A = 0.15;\n\tfloat B = 0.50;\n\tfloat C = 0.10;\n\tfloat D = 0.20;\n\tfloat E = 0.02;\n\tfloat F = 0.30;\n\tfloat W = 11.2;\n\tfloat exposure = 0.012;\n\tcolor *= exposure;\n\tcolor = ((color * (A * color + C * B) + D * E) / (color * (A * color + B) + D * F)) - E / F;\n\tfloat white = ((W * (A * W + C * B) + D * E) / (W * (A * W + B) + D * F)) - E / F;\n\tcolor /= white;\n\tcolor = pow(color, vec3(1. / gamma));\n\treturn color;\n}\n\n// ---8<----------------------------------------------------------------------\n// Scene\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2. * fragCoord.xy / iResolution.xy - 1.;\n\n    float o1 = 0.25;\n    float o2 = 0.75;\n    vec2 msaa[4];\n    msaa[0] = vec2( o1,  o2);\n    msaa[1] = vec2( o2, -o1);\n    msaa[2] = vec2(-o1, -o2);\n    msaa[3] = vec2(-o2,  o1);\n\n    vec3 color = vec3(0.);\n    for (int i = 0; i < 4; ++i)\n    {\n        vec3 p0 = vec3(0., 1.1, 4.);\n        vec3 p = p0;\n        vec3 offset = vec3(msaa[i] / iResolution.y, 0.);\n        vec3 d = normalize(vec3(iResolution.x/iResolution.y * uv.x, uv.y, -1.5) + offset);\n        Ray r = Ray(p, d);\n        color += radiance(r) / 4.;\n    }\n\n\tfragColor = vec4(Uncharted2ToneMapping(color),1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}