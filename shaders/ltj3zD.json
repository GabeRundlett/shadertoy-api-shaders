{
    "Shader": {
        "info": {
            "date": "1428173113",
            "description": "ortho ray tracing experiment",
            "flags": 0,
            "hasliked": 0,
            "id": "ltj3zD",
            "likes": 2,
            "name": "orthoraytrace",
            "published": 3,
            "tags": [
                "sphere"
            ],
            "usePreview": 0,
            "username": "ap",
            "viewed": 1435
        },
        "renderpass": [
            {
                "code": "\nvec3 NormalToRGB(in vec3 normal)\n{\n    vec3 ret = (normal + vec3(1.0)) * 0.5;\n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    \n    uv = uv - vec2(.5*aspect,.5);\n    \n    float xydist = length(uv);\n    \n    vec3 Lpos = vec3(3.0 * cos(iTime), 3.0, -3.0 * sin(iTime));\n    vec3 Epos = vec3(0.0, 0.0, -1.0);\n\n    vec4 floorColor = vec4(0.5, 0.3, 0.3, 1.0);\n    vec4 fogColor = vec4(0.8, 0.8, 0.8, 1.0);\n    \n    float rad = mix(0.25, texture(iChannel0, vec2(0.0, 0.25)).x, 0.1);\n    \n    if(xydist <= rad)\n    {\n        float z2 = rad*rad - xydist * xydist;\n        float z  = sqrt(z2);\n        \n        vec3 P = vec3(uv.x, uv.y, -z);\n        vec3 N = normalize(P);\n        vec3 L = normalize(Lpos - P);\n        vec3 V = normalize(Epos - P);\n        vec3 H = normalize(L + V);\n        \n        float diffuse =  clamp(dot(N,L), 0.0, 1.0);\n        float spec = pow(clamp(dot(N,H), 0.0, 1.0), 100.0);\n        \n        fragColor = \n            vec4(\n                diffuse * vec3(0.5, 0.7, 0.8) + \n                (diffuse > 0.0 ? spec : 0.0)   * vec3(1.0, 1.0, 1.0) , \n              //  NormalToRGB(N),\n                1.0);\n    }\n    else\n    {\n        if(uv.y < 0.0)\n        {\n            float dist = (-uv.y) * 2.0;\n            fragColor = mix(fogColor, floorColor, dist);\n        }\n        else\n        {\n            fragColor = fogColor;\n        }\n    }\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}