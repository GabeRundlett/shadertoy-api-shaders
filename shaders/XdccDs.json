{
    "Shader": {
        "info": {
            "date": "1520535730",
            "description": "Use to mouse to spin the scene. More cubes at full screen...",
            "flags": 32,
            "hasliked": 0,
            "id": "XdccDs",
            "likes": 50,
            "name": "Mouse Spinner",
            "published": 3,
            "tags": [
                "2d",
                "3d",
                "mouse",
                "raymarch",
                "spinner",
                "interective"
            ],
            "usePreview": 0,
            "username": "Dave_Hoskins",
            "viewed": 1453
        },
        "renderpass": [
            {
                "code": "// By David Hoskins 8th March 2018\n// Interactive art... Inspired from somewhere. but I can't remember where, sorry.\n// License https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n// Thanks to P_Malin for the quaternion stuff...\n// https://www.shadertoy.com/view/4s3cRr\n\n\nvec4 QuatFromAxisAngle( vec3 vAxis, float fAngle )\n{\n\treturn vec4( normalize(vAxis) * sin(fAngle), cos(fAngle) );    \n}\n\nvec4 QuatFromVec3( vec3 vRot )\n{\n    float l = length( vRot );\n    if ( l <= 0.0 )\n    {\n        return vec4( 0.0, 0.0, 0.0, 1.0 );\n    }\n    return QuatFromAxisAngle( vRot, l );\n}\n\n\nmat3 QuatToMat3( const in vec4 q )\n{\n\tvec4 qSq = q * q;\n\tfloat xy2 = q.x * q.y * 2.0;\n\tfloat xz2 = q.x * q.z * 2.0;\n\tfloat yz2 = q.y * q.z * 2.0;\n\tfloat wx2 = q.w * q.x * 2.0;\n\tfloat wy2 = q.w * q.y * 2.0;\n\tfloat wz2 = q.w * q.z * 2.0;\n \n\treturn mat3 (\t\n     qSq.w + qSq.x - qSq.y - qSq.z, xy2 - wz2, xz2 + wy2,\n     xy2 + wz2, qSq.w - qSq.x + qSq.y - qSq.z, yz2 - wx2,\n     xz2 - wy2, yz2 + wx2, qSq.w - qSq.x - qSq.y + qSq.z );\n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n    return length(max(abs(p)-b,0.0))-r;\n}\n\nmat3 mat;\nfloat map(vec3 p)\n{\n    p = p * mat;\n    float d = udRoundBox(p, vec3(SIZE/4., SIZE/4., SIZE/4.), SIZE/ 5.0);\n    return d;\n}\n\nfloat scene(vec3 ra, vec3 dir)\n{\n    \n    \n    float d = 0.0;\n    bool hit = false;\n    for (int i = 0; i <40; i++)\n    {\n        float h = map(ra + dir * d);\n        if (h < 0.04)\n        {\n            hit = true;\n            break;\n        }\n        d += h;\n    }\n    if (!hit) d= -100.0;\n    return d;\n}\n\nvec3 getNormal( in vec3 pos )\n{\n    \n\tvec3 eps = vec3( 0.01, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy) - map(pos-eps.xyy),\n\t    map(pos+eps.yxy) - map(pos-eps.yxy),\n\t    map(pos+eps.yyx) - map(pos-eps.yyx) );\n\treturn normalize(nor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 cor )\n{\n    vec3 sunDir = normalize((vec3(-4,3,3)));\n    vec2 pos = cor / SIZE;\n    pos = floor(pos);\n\n    vec2 rot = texelFetch(iChannel0, ivec2(pos), 0).zw;\n    \n    vec4 q = QuatFromVec3(vec3(rot.y, -rot.x,0));\n    mat =  QuatToMat3(q);\n\n    vec3 ra = vec3(cor, SIZE*2.);\n    vec3 dir = vec3(0, 0, -1);\n    ra.xy -= pos*SIZE+SIZE/2.;\n    \n    float d = scene(ra, dir);\n    vec3 col = vec3(0);\n    if (d > 0.0)\n    {\n        vec3 nor = getNormal(ra+dir*d);\n        col = vec3(0.1,.2,.8) * max(dot(nor, sunDir), 0.0);\n        col.x += .1*abs(nor.y);\n        nor = reflect(dir, nor);\n        col += pow(max(dot(nor, sunDir), 0.0), 10.0);\n        col = min(col, 1.0);\n\t}\n         \n    fragColor = vec4(sqrt(col),0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 neighbourEffect(ivec2 p)\n{\n    vec2 xyN = texelFetch(iChannel0, p+ivec2(1,  1), 0).xy;\n    vec2 xyS = texelFetch(iChannel0, p+ivec2(1, -1), 0).xy;\n    vec2 xyE = texelFetch(iChannel0, p+ivec2(1, -1), 0).xy;\n    vec2 xyW = texelFetch(iChannel0, p+ivec2(-1,-1), 0).xy;\n    vec2 add = xyN+xyS+xyE+xyW;\n    return add*.002;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 cor )\n{\n    \n\tivec2 iR = ivec2(iResolution.xy)-1;//... Location of previous mouse\n\tivec2 iC = ivec2(cor);\n\tvec4 col = texelFetch(iChannel0, iC, 0);\n\tvec2 st = cor/iResolution.y*2.;  \n\tst.x += iTime;  \n\tst.y -= 0.5;  \n    st.x =fract(st.x);\n    if (iC.x == iR.x && iC.y == iR.y)\n    {\n        fragColor = vec4(iMouse);\n    }else\n    {\n        if (cor.x > iResolution.x/SIZE || cor.y > iResolution.y/SIZE) discard;\n\t\t\n        \n        cor *= SIZE;\n        vec4 oldMouse = texelFetch(iChannel0, iR, 0);\n        vec2 m = iMouse.xy;\n        if (iMouse.z > .5)\n        {\n            vec2 add = neighbourEffect(iC);\n            float d = distance(m, cor)*.6+.1;\n            if (oldMouse.z < .5) oldMouse = iMouse;\n            if (d< SIZE*6.)\n            {\n                vec2 an = clamp((iMouse.xy - oldMouse.xy)*.01, -.8, .8)*.8;\n                col.xy += an/d;\n            }\n        }\n        vec2 add = neighbourEffect(iC);\n        col.xw += add;\n\n        col.zw += col.xy; \t// ...Add accelaration.\n\t\tcol.xy *= .99;\t\t// ...Decelarate the pixel\n        \n        col.zw *= .99;  \t// ...Eventually return to original position, with an early snap to zero.\n        col.z = (col.z < 0.) ?  min(col.z+.02, 0.) :  max(col.z-.02, 0.);\n        col.w = (col.w < 0.) ?  min(col.w+.02, 0.) :  max(col.w-.02, 0.);\n        \n\n        col = clamp(col,-60., 60.0);\n\n\t    fragColor = col;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SIZE 12.\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}