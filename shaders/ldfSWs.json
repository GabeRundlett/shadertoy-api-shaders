{
    "Shader": {
        "info": {
            "date": "1407866575",
            "description": "One possible way to render a yellow sphere",
            "flags": 0,
            "hasliked": 0,
            "id": "ldfSWs",
            "likes": 82,
            "name": "Template - 3D",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 5059
        },
        "renderpass": [
            {
                "code": "//------------------------------------------------------------------------\n// SDF sculpting\n//\n// Thsi is the SDF function F that defines the shapes, in this case a sphere\n// of radius 1. More info: https://iquilezles.org/articles/distfunctions/\n//------------------------------------------------------------------------\nfloat doModel( vec3 p )\n{\n    // comment this line in order to try the fun SDF below\n    return length(p) - 1.0;\n    \n    return min( min( length(p.xyz)-1.0, length(p.xy)-0.2 ),\n                min( length(p.yz )-0.2, length(p.zx)-0.2 ) );\n}\n\n\n//------------------------------------------------------------------------\n// Material \n//\n// Defines the material (colors, shading, pattern, texturing) of the model\n// at every point based on its position and normal. In this case, it simply\n// returns a constant yellow color.\n//------------------------------------------------------------------------\nvec3 doMaterial( in vec3 pos, in vec3 nor )\n{\n    return vec3(0.2,0.07,0.01);\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.0);\n\n    // key light\n    //-----------------------------\n    vec3  lig = normalize(vec3(1.0,0.7,0.2));\n    float dif = max(dot(nor,lig),0.0);\n    lin += dif*vec3(4.00,4.00,4.00);\n\n    // ambient light\n    //-----------------------------\n    lin += vec3(0.30,0.30,0.30);\n\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mal*lin;\n\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.01*dis*dis);\n\n    return col;\n}\n\n//------------------------------------------------------------------------\n// Camera\n//\n// Move the camera. In this case it's using time and the mouse position\n// to orbitate the camera around the origin of the world (0,0,0), where\n// the yellow sphere is.\n//------------------------------------------------------------------------\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time )\n{\n    float an = 0.3*iTime;\n\tcamPos = vec3(3.5*sin(an),1.0,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\n//------------------------------------------------------------------------\n// Background \n//\n// The background color. In this case it's just a black color.\n//------------------------------------------------------------------------\nvec3 doBackground( void )\n{\n    return vec3( 0.0, 0.0, 0.0);\n}\n\n\n//=============================================================\n\n// more info: https://iquilezles.org/articles/normalsSDF/\nvec3 compute_normal( in vec3 pos )\n{\n    const float eps = 0.002;             // precision of the normal computation\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\treturn normalize( v1*doModel( pos + v1*eps ) + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ) + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ) + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ) );\n}\n\nfloat intersect( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 20.0;           \n    float t = 0.0;\n    for( int i=0; i<128; i++ )          // max number of raymarching iterations is 90\n    {\n\t    float d = doModel( ro+rd*t );\n        if( d<0.001 || t>maxd ) break;  // precision 0.001, maximum distance 20\n        t += d;\n    }\n    return (t<maxd) ? t : -1.0;\n}\n\nvec3 color( in vec2 uv )\n{\n    // camera movement (ro is ray origin, ta is the target location we are looking at)\n    vec3 ro, ta; \n    doCamera( ro, ta, iTime );\n\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    mat3 camMat = mat3( uu, vv, ww );\n    \n\t// create ray\n\tvec3 rd = normalize( camMat * vec3(uv,2.0) ); // 2.0 is the lens length\n\n    // compute background\n\tvec3 col = doBackground();\n\n\t// project/intersect through raymarching of SDFs\n    float t = intersect( ro, rd );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = compute_normal(pos);\n\n        // materials\n        vec3 mal = doMaterial( pos, nor );\n\n        // lighting\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\n    // monitor gamma adjustnment\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    fragColor = vec4( color(uv), 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}