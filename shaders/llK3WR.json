{
    "Shader": {
        "info": {
            "date": "1474231663",
            "description": "Terrain with procedural hydraulic erosion.",
            "flags": 0,
            "hasliked": 0,
            "id": "llK3WR",
            "likes": 102,
            "name": "Mountain Peak",
            "published": 3,
            "tags": [
                "terrain",
                "rocks",
                "mountains",
                "snow",
                "wind",
                "hills",
                "erosion",
                "snowy"
            ],
            "usePreview": 0,
            "username": "TDM",
            "viewed": 4819
        },
        "renderpass": [
            {
                "code": "// \"Mountain Peak\" by Alexander Alekseev aka TDM - 2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define WIND\n\nconst int NUM_STEPS = 64;\nconst int NUM_STEPS_VOLUME = 10;\nconst float STRIDE = 0.75;\nconst float STRIDE_VOLUME = 1.0;\nconst float PI\t \t= 3.1415;\nconst float EPSILON\t= 1e-3;\n\n// terrain\nconst int ITER_GEOMETRY = 7;\nconst int ITER_FRAGMENT = 10;\n\nconst float TERR_HEIGHT = 12.0;\nconst float TERR_WARP = 0.7;\nconst float TERR_OCTAVE_AMP = 0.58;\nconst float TERR_OCTAVE_FREQ = 2.5;\nconst float TERR_MULTIFRACT = 0.27;\nconst float TERR_CHOPPY = 1.9;\nconst float TERR_FREQ = 0.24;\nconst vec2 TERR_OFFSET = vec2(13.5,15.);\n\nconst vec3 SKY_COLOR = vec3(0.5,0.59,0.75) * 0.6;\nconst vec3 SUN_COLOR = vec3(1.,1.,0.98) * 0.7;\nconst vec3 COLOR_SNOW = vec3(1.0,1.0,1.1) * 2.2;\nconst vec3 COLOR_ROCK = vec3(0.0,0.0,0.1);\nvec3 light = normalize(vec3(1.0,1.0,-0.3));\n\n// math\nmat3 fromEuler(vec3 ang) {\n\tvec2 a1 = vec2(sin(ang.x),cos(ang.x));\n    vec2 a2 = vec2(sin(ang.y),cos(ang.y));\n    vec2 a3 = vec2(sin(ang.z),cos(ang.z));\n    mat3 m;\n    m[0] = vec3(a1.y*a3.y+a1.x*a2.x*a3.x,a1.y*a2.x*a3.x+a3.y*a1.x,-a2.y*a3.x);\n\tm[1] = vec3(-a2.y*a1.x,a1.y*a2.y,a2.x);\n\tm[2] = vec3(a3.y*a1.x*a2.x+a1.y*a3.x,a1.x*a3.x-a1.y*a3.y*a2.x,a2.y*a3.y);\n\treturn m;\n}\nfloat saturate(float x) { return clamp(x,0.,1.); }\n\n/*float hash(vec2 p) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}*/\nfloat hash(vec2 p) {\n    uint n = floatBitsToUint(p.x * 122.0 + p.y);\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return uintBitsToFloat( (n>>9U) | 0x3f800000U ) - 1.0;\n}\n\nfloat hash3(vec3 p) {\n    return fract(sin(p.x*p.y*p.z)*347624.531834);\n}\n\n// 3d noise\nfloat noise_3(in vec3 p) {\n    vec3 i = floor( p );\n    vec3 f = fract( p );\t\n\tvec3 u = f*f*(3.0-2.0*f);\n    \n    float a = hash3( i + vec3(0.0,0.0,0.0) );\n\tfloat b = hash3( i + vec3(1.0,0.0,0.0) );    \n    float c = hash3( i + vec3(0.0,1.0,0.0) );\n\tfloat d = hash3( i + vec3(1.0,1.0,0.0) ); \n    float v1 = mix(mix(a,b,u.x), mix(c,d,u.x), u.y);\n    \n    a = hash3( i + vec3(0.0,0.0,1.0) );\n\tb = hash3( i + vec3(1.0,0.0,1.0) );    \n    c = hash3( i + vec3(0.0,1.0,1.0) );\n\td = hash3( i + vec3(1.0,1.0,1.0) );\n    float v2 = mix(mix(a,b,u.x), mix(c,d,u.x), u.y);\n        \n    return abs(mix(v1,v2,u.z));\n}\n\n// noise with analytical derivatives (thanks to iq)\nvec3 noise_deriv(in vec2 p) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    \n    float a = hash( i + vec2(0.0,0.0) );\n\tfloat b = hash( i + vec2(1.0,0.0) );    \n    float c = hash( i + vec2(0.0,1.0) );\n\tfloat d = hash( i + vec2(1.0,1.0) );    \n    float h1 = mix(a,b,u.x);\n    float h2 = mix(c,d,u.x);\n                                  \n    return vec3(abs(mix(h1,h2,u.y)),\n               6.0*f*(1.0-f)*(vec2(b-a,c-a)+(a-b-c+d)*u.yx));\n}\n\n// lighting\nfloat diffuse(vec3 n,vec3 l,float p) { return pow(max(dot(n,l),0.0),p); }\nfloat specular(vec3 n,vec3 l,vec3 e,float s) {    \n    float nrm = (s + 8.0) / (3.1415 * 8.0);\n    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;\n}\n\n// terrain\nvec3 octave(vec2 uv) {\n    vec3 n = noise_deriv(uv);\n    return vec3(pow(n.x,TERR_CHOPPY), n.y, n.z);\n}\n\nfloat map(vec3 p) {\n    float frq = TERR_FREQ;\n    float amp = 1.0;\n    vec2 uv = p.xz * frq + TERR_OFFSET;\n    vec2 dsum = vec2(0.0);\n    \n    float h = 0.0;    \n    for(int i = 0; i < ITER_GEOMETRY; i++) {          \n    \tvec3 n = octave((uv - dsum * TERR_WARP) * frq);\n        h += n.x * amp;       \n        \n        dsum += n.yz * (n.x*2.0-1.0) * amp;\n        frq *= TERR_OCTAVE_FREQ;\n        amp *= TERR_OCTAVE_AMP;        \n        amp *= pow(n.x,TERR_MULTIFRACT);\n    }\n    h *= TERR_HEIGHT / (1.0 + dot(p.xz,p.xz) * 1e-3);\n    return p.y - h;\n}\nfloat map_detailed(vec3 p) {\n    float frq = TERR_FREQ;\n    float amp = 1.0;\n    vec2 uv = p.xz * frq + TERR_OFFSET;\n    vec2 dsum = vec2(0.0);\n    \n    float h = 0.0;    \n    for(int i = 0; i < ITER_FRAGMENT; i++) {        \n    \tvec3 n = octave((uv - dsum * TERR_WARP) * frq);\n        h += n.x * amp;\n        \n        dsum += n.yz * (n.x*2.0-1.0) * amp;\n        frq *= TERR_OCTAVE_FREQ;\n        amp *= TERR_OCTAVE_AMP;\n        amp *= pow(n.x,TERR_MULTIFRACT);\n    }\n    h *= TERR_HEIGHT / (1.0 + dot(p.xz,p.xz) * 1e-3);\n    return p.y - h;\n}\n\nfloat getAO(vec3 p) {\n    float frq = TERR_FREQ;\n    float amp = 1.0;\n    vec2 uv = p.xz * frq + TERR_OFFSET;\n    vec2 dsum = vec2(0.0);\n    \n    float h = 1.0;    \n    for(int i = 0; i < ITER_FRAGMENT; i++) {        \n    \tvec3 n = octave((uv - dsum * TERR_WARP) * frq);\n        \n        float it = float(i)/float(ITER_FRAGMENT-1);\n        float iao = mix(sqrt(n.x),1.0, it*0.9);\n        iao = mix(iao, 1.0 ,1.0 - it);\n        h *= iao;\n        \n        dsum += n.yz * (n.x*2.0-1.0) * amp;\n        frq *= TERR_OCTAVE_FREQ;\n        amp *= TERR_OCTAVE_AMP;\n        amp *= pow(n.x,TERR_MULTIFRACT);\n    }\n    \n    return sqrt(h*2.0);\n}\nfloat map_noise(vec3 p) {\n    p *= 0.5;    \n    float ret = noise_3(p);\n    ret += noise_3(p * 2.0) * 0.5;\n    ret = (ret - 1.0) * 5.0;\n    return saturate(ret * 0.5 + 0.5);\n}\n\n// tracing\nvec3 getNormal(vec3 p, float eps) {\n    vec3 n;\n    n.y = map_detailed(p);    \n    n.x = map_detailed(vec3(p.x+eps,p.y,p.z)) - n.y;\n    n.z = map_detailed(vec3(p.x,p.y,p.z+eps)) - n.y;\n    n.y = eps;\n    return normalize(n);\n}\n\nfloat hftracing(vec3 ori, vec3 dir, out vec3 p, out float t) {\n    float d = 0.0;\n    t = 0.0;\n    for(int i = 0; i < NUM_STEPS; i++) {\n        p = ori + dir * t;\n        d = map(p);\n        if(d < 0.0) break;\n        t += d*0.6;\n    }\n    return d;\n}\n\nfloat volume_tracing(vec3 ori, vec3 dir, float maxt) { \n    float d = 0.0;\n    float t = 0.0;\n    float count = 0.0;\n    for(int i = 0; i < NUM_STEPS_VOLUME; i++) {\n        vec3 p = ori + dir * t;\n        d += map_noise(p);\n        if(t >= maxt) break;  \n        t += STRIDE_VOLUME;\n        count += 1.0;\n    }\n    return d / count;\n}\n\n// color\nvec3 sky_color(vec3 e) {\n    e.y = max(e.y,0.0);\n    vec3 ret;\n    ret.x = pow(1.0-e.y,3.0);\n    ret.y = pow(1.0-e.y, 1.2);\n    ret.z = 0.8+(1.0-e.y)*0.3;    \n    return ret;\n}\nvec3 terr_color(in vec3 p, in vec3 n, in vec3 eye, in vec3 dist) {\n    float slope = 1.0-dot(n,vec3(0.,1.,0.));     \n    vec3 ret = mix(COLOR_SNOW,COLOR_ROCK,smoothstep(0.0,0.2,slope*slope));\n    ret = mix(ret,COLOR_SNOW,saturate(smoothstep(0.6,0.8,slope+(p.y-TERR_HEIGHT*0.5)*0.05)));\n    return ret;\n}\n\n// main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;    \n    float time = iTime * 0.1;\n        \n    // ray\n    vec3 ang = vec3(sin(time*6.0)*0.1,0.1,-time + iMouse.x*0.01);\n\tmat3 rot = fromEuler(ang);\n    \n    vec3 ori = vec3(0.0,5.0,40.0);\n    vec3 dir = normalize(vec3(uv.xy,-2.0));\n    dir.z += length(uv) * 0.12;\n    dir = normalize(dir) * rot;\n    ori = ori * rot;\n    ori.y -= map(ori) * 0.75 - 3.0;\n    \n    // tracing\n    vec3 p;\n    float t;\n    float dens = hftracing(ori,dir,p,t);\n    vec3 dist = p - ori;\n    vec3 n = getNormal(p, dot(dist,dist)* (1e-1 / iResolution.x));\n             \n    // terrain\n    float ao = getAO(p);\n    vec3 color = terr_color(p,n,dir,dist) * SKY_COLOR;\n    color += vec3(diffuse(n,light,2.0) * SUN_COLOR);\n    color += vec3(specular(n,light,dir,20.0) * SUN_COLOR*0.4);\n    color *= ao;\n        \n    // fog\n    vec3 fog = sky_color(vec3(dir.x,0.,dir.z));\n    color = mix(color,fog,saturate(min(length(dist)*0.018, dot(p.xz,p.xz)*0.001)));\n    \n    // sky\n    color = mix(sky_color(dir),color,step(dens,4.0));\n    color += pow(max(dot(dir,light),0.0),3.0)*0.3;\n    \n    // wind\n#ifdef WIND\n    float wind = volume_tracing(ori,dir,t) * saturate(1.8 - p.y * 0.2);\n    color = mix(color,fog, wind * 1.6);\n#endif\n    \n    // post\n    //color = (1.0 - exp(-color)) * 1.5;\n    color = (color - 1.0) * 1.2 + 1.0;\n    color = pow(color * 0.8,vec3(1.0/2.2));\n\tfragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}