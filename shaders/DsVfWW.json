{
    "Shader": {
        "info": {
            "date": "1698233527",
            "description": "Changing Loops",
            "flags": 0,
            "hasliked": 0,
            "id": "DsVfWW",
            "likes": 1,
            "name": "Changing Loops",
            "published": 3,
            "tags": [
                "fractal",
                "loops",
                "repetation"
            ],
            "usePreview": 0,
            "username": "Jaysmito101",
            "viewed": 197
        },
        "renderpass": [
            {
                "code": "vec3 palette( in float t )\n{\n    vec3 a = vec3(1.0, 1.0, 1.0);   // Set a to pure white for brightness.\n    vec3 b = vec3(0.7, 0.9, 1.0);   // Adjust b for neon-like colors.\n    vec3 c = vec3(2.0, 2.0, 2.0);   // Increase c for faster oscillation.\n    vec3 d = vec3(0.0, 0.2, 0.4);   // Adjust d for the desired phase.\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n// Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\nvec3 aces(vec3 x) {\n  const float a = 2.51;\n  const float b = 0.03;\n  const float c = 2.43;\n  const float d = 0.59;\n  const float e = 0.14;\n  return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);\n}\n\nfloat rand(vec2 st) \n{\n    return fract(sin(dot(st, vec2(12.1524, 78.46584))) * 45434.56454);\n}\n\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Smooth random values at four corners of the cell\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    // Interpolate between those random values\n    vec2 u = f * f * (3.0 - 2.0 * f); // Smooth interpolation function\n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    uv += (10.0 * vec2(sin(iTime * 0.01), cos(iTime * 0.01)));\n    uv = abs(uv) + noise(uv * 5.0 + sin(iTime)) * 0.1;\n    uv *= vec2(1.0) + noise(uv) * 0.01;\n    \n\n\n    vec3 col = vec3(0.0);\n    vec3 col2 = vec3(0.0);\n\n\n    for (float i = 0.0; i < 3.0; i ++)\n    {\n        uv = fract(uv * 1.5) - 0.5;\n    \n        float r = abs(sin((abs(sin(iTime)) + 1.0) * 1.5));\n        float f = (length(uv * 3.0) - r) - 0.1;\n    \n    \n        float tm = iTime;\n        f = abs(sin(f + tm * 0.51) - cos(f + tm * 0.5)) * 4.5;\n    \n        f = pow(0.1 / f, 1.9);\n        \n        col += palette(noise(vec2(\n                            fract(length(uv) + sin(iTime * 0.7416)),\n                            fract(1.0 / length(uv) + sin(iTime * 0.476))\n                        ))) * f;\n    }\n\n    col = aces(col);\n    col = pow(col, vec3(0.4545));\n\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}