{
    "Shader": {
        "info": {
            "date": "1677712122",
            "description": "forked of forked page shows how to explore\nforked of forked page uses base2\nthis is base3\nbase5 ---> https://www.shadertoy.com/view/msd3zl",
            "flags": 32,
            "hasliked": 0,
            "id": "mdt3Rl",
            "likes": 6,
            "name": "deep 1Dworlds base3 3input explo",
            "published": 3,
            "tags": [
                "automata"
            ],
            "usePreview": 0,
            "username": "lomateron",
            "viewed": 185
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0)*(1./2.);\n    if(fragColor.x>1.1){fragColor.x=.5;}\n    if(fragColor.y>1.1){fragColor.y=.5;}\n    if(fragColor.z>1.1){fragColor.z=.5;}\n}\n// the road to smooth simulations\n// in the binary realm, the gates NOR NAND are special because NOR networks or NAND networks can compute anything\n// only if given a complete input\n// NOR gate    NAND gate\n// 00 1        00 1       \n// 10 0        10 0       \n// 01 0        01 0       \n// 11 0        11 0   \n// NOR can  compute 00 ? --->  00 1\n//                  01 ? --->  01 0\n// but cant compute ?1 1\n// \"?\" needs to be a new \"number\" different from \"0\" and \"1\" ... \"2\"\n// so we have arrived at base3 from base2\n// base2 has 2  special gates NOR NAND\n// base3 has 90 special gates 1example  00 1\n//                                      10 2\n//                                      20 0\n//                                      01 2\n//                                      11 0\n//                                      21 0\n//                                      02 0\n//                                      12 0\n//                                      22 0\n// base3 has the same problem as base2\n// this gate cant compute ?1 1\n//                        ?2 1\n//                        ?2 2\n// 3 in total so 3 new \"numbers\" to create\n// but one of those 90 gates only has one ?example\n// which means we arrive at base4 from base3\n// then from base4 to base5 to base6 ...",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define rz 120.  //size of each world in pixels\nvec4 read(vec2 u, vec2 m)\n{\n    vec2 o = mod(u+m,rz);\n         u = floor(u/rz)*rz+o;\n    return texelFetch(iChannel0,ivec2(u),0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n    vec2 r2 = floor(iResolution.xy/rz);\n    uint u2 = uint(dot(floor(        u/rz),vec2(1,r2.x)));\n    uint m2 = uint(dot(floor(iMouse.xy/rz),vec2(1,r2.x)));\n    uint a = +u2                      //divides screen in 16*8 worlds\n             +16U*8U        *m2       //show next 16*8 worlds with mouse click\n             +16U*8U*16U*8U *7U;      //show next 16*8*16*8 worlds\n    \n    uint base = 3U;\n    uint t  = +uint(read(u,vec2(+1,-1)).x)\n              +uint(read(u,vec2( 0,-1)).x)*base\n              +uint(read(u,vec2(-1,-1)).x)*base*base;\n         t = t % (base*base*base);\n    uint r = 0U;\n    if(t== 0U){r=0U;}\n    if(t== 1U){r=1U;}\n    if(t== 2U){r=2U;}\n    if(t== 3U){r=1U;}\n    if(t== 4U){r=3U;}\n    if(t== 5U){r=4U;}\n    if(t== 6U){r=2U;}\n    if(t== 7U){r=4U;}\n    if(t== 8U){r=5U;}\n    if(t== 9U){r=1U;}\n    if(t==10U){r=3U;}\n    if(t==11U){r=4U;}\n    if(t==12U){r=3U;}\n    if(t==13U){r=6U;}\n    if(t==14U){r=7U;}\n    if(t==15U){r=4U;}\n    if(t==16U){r=7U;}\n    if(t==17U){r=8U;}\n    if(t==18U){r=2U;}\n    if(t==19U){r=4U;}\n    if(t==20U){r=5U;}\n    if(t==21U){r=4U;}\n    if(t==22U){r=7U;}\n    if(t==23U){r=8U;}\n    if(t==24U){r=5U;}\n    if(t==25U){r=8U;}\n    if(t==26U){r=9U;}\n    uint dv = 1U; while(r!=0U){dv *= base; --r;}\n    a = a/dv;\n    a = a%base;\n    \n    fragColor = vec4(a);\n    if((iFrame%int(rz))!=int(mod(u.y,rz))){fragColor = texelFetch(iChannel0,ivec2(u),0);}\n    if(iFrame==0||iMouse.z>.5)\n    {\n        uvec2 p = uvec2(u) + 1920U*1080U*uint(iFrame);\n              p = 1103515245U * ( (p>>1U) ^ (p.yx   ) );\n        uint  q = 1103515245U * ( (p.x  ) ^ (p.y>>3U) );\n        fragColor = vec4(float(q));\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}