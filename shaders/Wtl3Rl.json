{
    "Shader": {
        "info": {
            "date": "1557310064",
            "description": "Roller-coaster ride; update of \"Ride the Loop\" (mouseable, with selectable views)",
            "flags": 0,
            "hasliked": 0,
            "id": "Wtl3Rl",
            "likes": 14,
            "name": "Roller-Coaster",
            "published": 3,
            "tags": [
                "raymarch",
                "fun",
                "train",
                "ride"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 806
        },
        "renderpass": [
            {
                "code": "// \"Roller-Coaster\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA   0  // optional antialiasing\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrRound2BoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nmat3 AxToRMat (vec3 vz, vec3 vy);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothBump (float lo, float hi, float w, float x);\nfloat Noisefv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\n#define N_CAR 5\n#define N_SEG 12\n\nmat3 carMat[N_CAR];\nvec3 cPt[N_SEG], carPos[N_CAR], cPtOrg, cUpCirc, cDnCirc, sunDir, oDir, oNorm, qHit;\nfloat tLen[N_SEG + 1], tCur, dstFar, hTop, rLoop, sLoop, sHzRamp, rDnCirc, rUpCirc,\n   sDnRamp, sUpRamp, sHzStr, trkDir, hTrk, wTrk, tWait, vfFast, vfLoop;\nint idObj;\nbool riding, isSh;\nconst int idTrk = 1, idPyl = 2, idTrnk = 3, idLeaf = 4, idPlat = 5, idArch = 6,\n   idTun = 7, idCar = 8;\nconst float pi = 3.14159;\n\nvoid TrkSetup ()\n{\n  cPtOrg = vec3 (2. * trkDir, 0., -3.);\n  hTop = 1.5;\n  rLoop = 2.2;\n  sLoop = 0.3;\n  sHzRamp = 0.5;\n  rDnCirc = 2.;\n  rUpCirc = rDnCirc + sLoop;\n  sDnRamp = 1.5;\n  sUpRamp = 1.3 * sDnRamp;\n  sHzStr = sDnRamp - sUpRamp + 3. * sHzRamp;\n  wTrk = 0.015;\n  hTrk = 0.015;\n  tWait = 2.;\n  vfFast = 5.;\n  vfLoop = 0.6;\n  cDnCirc = cPtOrg + vec3 ((- rDnCirc - sLoop) * trkDir, 0., -2. * sHzRamp);\n  cUpCirc = cPtOrg + vec3 ((- rUpCirc + sLoop) * trkDir, 2. * hTop, 2. * sDnRamp +\n     6. * sHzRamp);\n  cPt[0] = cDnCirc;   cPt[0].xz += vec2 (- rDnCirc * trkDir, sHzStr);\n  cPt[1] = cPt[0];    cPt[1].z += sHzStr;\n  cPt[3] = cUpCirc;   cPt[3].x -= rUpCirc * trkDir;\n  cPt[4] = cUpCirc;   cPt[4].x += rUpCirc * trkDir;\n  cPt[2] = cPt[3];    cPt[2].z -= 2. * sHzRamp;\n  cPt[5] = cPt[4];    cPt[5].z -= 2. * sHzRamp;\n  cPt[7] = cPtOrg;    cPt[7].x += sLoop * trkDir;\n  cPt[8] = cPtOrg;    cPt[8].x -= sLoop * trkDir;\n  cPt[6] = cPt[7];    cPt[6].z += 4. * sHzRamp;\n  cPt[9] = cDnCirc;   cPt[9].x += rDnCirc * trkDir;\n  cPt[10] = cDnCirc;  cPt[10].x -= rDnCirc * trkDir;\n  cPt[N_SEG - 1] = cPt[0];\n  tLen[0] = 0.;\n  for (int k = 1; k < N_SEG; k ++) tLen[k] = length (cPt[k] - cPt[k - 1]);\n  tLen[4] = pi * rUpCirc;\n  tLen[6] /= 0.5 * (1. + vfFast);\n  tLen[8] = length (vec2 (2. * pi * rLoop, 2. * sLoop)) * (1. + vfLoop);\n  tLen[10] = pi * rDnCirc;\n  for (int k = 7; k < N_SEG - 1; k ++) tLen[k] /= vfFast;\n  for (int k = 1; k < N_SEG; k ++) tLen[k] += tLen[k - 1];\n  tLen[N_SEG] = tLen[N_SEG - 1] + tWait;\n}\n\nvec3 TrkPath (float t)\n{\n  vec3 p, p1, p2, u;\n  float w, ft, s;\n  int ik;\n  t = mod (t, tLen[N_SEG]);\n  ik = -1;\n  for (int k = 1; k < N_SEG; k ++) {\n    if (t < tLen[k]) {\n      t -= tLen[k - 1];\n      p1 = cPt[k - 1];\n      p2 = cPt[k];\n      w = tLen[k] - tLen[k - 1];\n      ik = k;\n      break;\n    }\n  }\n  oNorm = vec3 (0., 1., 0.);\n  ft = t / w;\n  if (ik < 0) {\n    p = cPt[0];\n    oDir = vec3 (0., 0., 1.);\n  } else if (ik == 2 || ik == 6) {\n    oDir = p2 - p1;\n    if (ik == 6) ft *= (2. + (vfFast - 1.) * ft) / (vfFast + 1.);\n    p.xz = p1.xz + oDir.xz * ft * vec2 (trkDir, 1.);\n    p.y = p1.y + oDir.y * smoothstep (0., 1., ft);\n    oDir.y *= 6. * ft * (1. - ft);\n    oDir = normalize (oDir);\n  } else if (ik == 4) {\n    ft *= pi;\n    p = cUpCirc;\n    u = vec3 (- cos (ft) * trkDir, 0., sin (ft));\n    p.xz += rUpCirc * u.xz;\n    oDir = cross (oNorm, u);\n    oDir.xz *= trkDir;\n  } else if (ik == 8) {\n    ft = (ft < 0.5) ? ft * (1. + vfLoop * (1. - 2. * ft)) :\n       ft * (1. + 2. * vfLoop * (ft - 1.5)) + vfLoop;\n    p = 0.5 * (cPt[7] + cPt[8]);\n    p.x += sLoop * (1. - 2. * ft) * trkDir;\n    ft *= 2. * pi;\n    u = vec3 (0., cos (ft), sin (ft));\n    p.yz += rLoop * (vec2 (1., 0.) - u.yz);\n    oNorm = u;\n    oDir = normalize (vec3 (-2. * sLoop * trkDir, 2. * pi * rLoop *\n       vec2 (sin (ft), - cos (ft))));\n  } else if (ik == 10) {\n    ft *= pi;\n    p = cDnCirc;\n    u = vec3 (cos (ft) * trkDir, 0., - sin (ft));\n    p.xz += rDnCirc * u.xz;\n    oDir = cross (oNorm, u);\n    oDir.xz *= trkDir;\n  } else if (ik < N_SEG) {\n    oDir = p2 - p1;\n    p = p1 + oDir * ft;\n    oDir = normalize (oDir);\n  }\n  return p;\n}\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat TrkDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 trCs;\n  float d, f, tGap, tWid, rt, x;\n  tGap = 0.7 * wTrk;\n  tWid = 0.3 * wTrk;\n  rt = 0.5 * tWid;\n  trCs = vec2 (tWid, hTrk) - rt;\n  q = p - cPtOrg;\n  q.y -= rLoop;\n  f = smoothstep (0., 1., atan (abs (q.z), - q.y) / pi);\n  x = q.x * trkDir;\n  q.xy = vec2 (q.x - sign (q.z) * sLoop * f * trkDir, length (q.yz) - rLoop);\n  d = 0.9 * max (max (PrRoundBox2Df (vec2 (abs (q.x - sLoop * trkDir) - tGap, q.y), trCs, rt),\n     q.z), x - (sLoop + wTrk));\n  DMINQ (idTrk);\n  d = 0.9 * max (max (PrRoundBox2Df (vec2 (abs (q.x + sLoop * trkDir) - tGap, q.y), trCs, rt),\n     - q.z), - x - (sLoop + wTrk));\n  DMINQ (idTrk);\n  q = p - 0.5 * (cPt[5] + cPt[6]);\n  f = 0.5 * clamp (q.z / sDnRamp + 1., 0., 2.);\n  q.y -= hTop * (2. * smoothstep (0., 1., f) - 1.);\n  d = 0.6 * PrRound2BoxDf (vec3 (abs (q.x) - tGap, q.yz), vec3 (trCs.x, trCs.y * (1. +\n     2. * abs (f * (1. - f))), sDnRamp), rt);\n  DMINQ (idTrk);\n  q = p - 0.5 * (cPt[1] + cPt[2]);\n  f = 0.5 * clamp (q.z / sUpRamp + 1., 0., 2.);\n  q.y -= hTop * (2. * smoothstep (0., 1., f) - 1.);\n  d = 0.6 * PrRound2BoxDf (vec3 (abs (q.x) - tGap, q.yz), vec3 (trCs.x,\n     trCs.y * (1. + 2. * abs (f * (1. - f))), sUpRamp), rt);\n  DMINQ (idTrk);\n  q = p - 0.5 * (cPt[2] + cPt[3]);\n  d = PrRound2BoxDf (vec3 (abs (q.x) - tGap, q.yz), vec3 (trCs, sHzRamp), rt);\n  DMINQ (idTrk);\n  q = p - 0.5 * (cPt[4] + cPt[5]);\n  d = PrRound2BoxDf (vec3 (abs (q.x) - tGap, q.yz), vec3 (trCs, sHzRamp), rt);\n  DMINQ (idTrk);\n  q = p - 0.5 * (cPt[6] + cPt[7]);\n  d = PrRound2BoxDf (vec3 (abs (q.x) - tGap, q.yz), vec3 (trCs, 2. * sHzRamp), rt);\n  DMINQ (idTrk);\n  q = p - 0.5 * (cPt[8] + cPt[9]);\n  d =  PrRound2BoxDf (vec3 (abs (q.x) - tGap, q.yz), vec3 (trCs, sHzRamp), rt);\n  DMINQ (idTrk);\n  q = p - 0.5 * (cPt[1] + cPt[10]);\n  d = PrRound2BoxDf (vec3 (abs (q.x) - tGap, q.yz), vec3 (trCs, sHzStr), rt);\n  DMINQ (idTrk);\n  q = p - 0.5 * (cPt[9] + cPt[10]);\n  q.xy = vec2 (length (q.xz) - rDnCirc, q.y);\n  d = max (PrRoundBox2Df (vec2 (abs (q.x) - tGap, q.y), trCs, rt), q.z);\n  DMINQ (idTrk);\n  q = p - 0.5 * (cPt[3] + cPt[4]);\n  q.xy = vec2 (length (q.xz) - rUpCirc, q.y);\n  d = max (PrRoundBox2Df (vec2 (abs (q.x) - tGap, q.y), trCs, rt), - q.z);\n  DMINQ (idTrk);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, colRad;\n  dMin = dstFar;\n  dMin = TrkDf (p, dMin);\n  colRad = 0.02;\n  q = p - cUpCirc;\n  q.yz -= vec2 (- hTop, - 2. * sHzRamp);\n  q.x = abs (q.x) - rUpCirc;\n  q.xz = abs (q.xz) - 20. * colRad * max (- q.y / hTop - 0.75, 0.);\n  d = 0.6 * PrCylDf (q.xzy, colRad, hTop);\n  q = p - cUpCirc;\n  q.xz = Rot2D (q.xz, (0.5 + floor (atan (q.z, - q.x) * (4. / pi))) * pi / 4.);\n  q.xy -= vec2 (- rUpCirc, - hTop);\n  q.xz = abs (q.xz) - 20. * colRad * max (- q.y / hTop - 0.75, 0.);\n  d = min (d, 0.6 * max (PrCylDf (q.xzy, colRad, hTop), cUpCirc.z - p.z));\n  q = p - 0.5 * (cPt[1] + cPt[2]);\n  q.y -= -0.5 * (hTop + colRad);\n  d = min (d, PrCylDf (q.xzy, colRad, 0.5 * hTop));\n  q = p - 0.5 * (cPt[5] + cPt[6]);\n  q.y -= -0.5 * hTop;\n  d = min (d, PrCylDf (q.xzy, colRad, 0.5 * hTop - colRad));\n  q = p - cPtOrg;\n  q.y -= rLoop + 0.03;\n  q.x = abs (q.x) - sLoop - wTrk - 0.25;\n  q.xz = abs (q.xz) - 20. * colRad * max (- q.y / rLoop - 0.75, 0.);\n  d = min (d, 0.6 * PrCylDf (q.xzy, colRad, rLoop + 0.03));\n  q = p - cPtOrg;\n  q.y -= 2. * (rLoop + 0.03);\n  d = min (d, PrCylDf (q.yzx, colRad, sLoop + wTrk + 0.28));\n  DMINQ (idPyl);\n  for (int k = 0; k < N_CAR; k ++) {\n    if (riding && k == N_CAR - 1) continue;\n    q = p - carPos[k];\n    if (! isSh) d = PrSphDf (q - vec3 (0., hTrk + 0.04, 0.), 0.25);\n    if (isSh || d < 0.1) {\n      q = carMat[k] * q;\n      q.y -= hTrk + 0.04;\n      d = max (PrCapsDf (q, 0.085, 0.125),\n         - max (PrCapsDf (q + vec3 (0., -0.03, 0.), 0.075, 0.1), -0.015 - q.y));\n      DMINQ (idCar + k);\n    } else dMin = min (dMin, d);\n  }\n  q = p;\n  q.y -= 0.5;\n  q.xz = Rot2D (q.xz, (0.5 + floor (atan (q.z, - q.x) * (16. / pi))) * pi / 16.);\n  q.x += 10.;\n  d = 0.9 * PrCylDf (q.xzy, 0.04 - 0.03 * q.y, 0.5);\n  DMINQ (idTrnk);\n  q.y -= 0.6;\n  d = 0.9 * PrCapsDf (q.xzy, 0.2 - 0.2 * q.y, 0.2);\n  DMINQ (idLeaf);\n  q = p - cPt[0];\n  q.y -= 0.5 * hTrk;\n  q.x = abs (q.x) - 0.24;\n  d = PrBoxDf (q, vec3 (0.17, 0.5 * hTrk, 0.4));\n  DMINQ (idPlat);\n  q = p - cPt[0];\n  q.y -= 0.07;\n  q.z = abs (q.z) - 0.3;\n  d = max (PrTorusDf (q, 0.01, 0.35), - q.y - 0.1);\n  DMINQ (idArch);\n  q = p - 0.5 * (cPt[9] + cPt[10]);\n  q.y -= 0.07;\n  d = 0.6 * max (max (abs (length (vec2 (length (q.xz) - rDnCirc, q.y)) - 0.3) - 0.02,\n     abs (q.x) + q.z), - q.y - 0.07);\n  DMINQ (idTun);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  isSh = true;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 20; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.8 + 0.2 * sh;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (8. * atan (rd.z, - rd.x))) {\n    col = 0.9 * mix (vec3 (0.4, 0.55, 0.7), vec3 (0.3, 0.45, 0.55),\n       smoothstep (-0.02, 0.01, rd.y));\n  } else {\n    q = 0.02 * (ro.xz + 0.5 * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, sunDir), 0.);\n    skCol = vec3 (0.4, 0.5, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) *\n       min (0.3 * pow (sd, 64.) + 0.5 * pow (sd, 2048.), 1.);\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec3 GrndCol (vec3 ro, vec3 rd)\n{\n  vec3 vn, col;\n  vec2 q;\n  float f;\n  vec2 e = vec2 (0.01, 0.);\n  ro -= (ro.y / rd.y) * rd;\n  f = Fbm2 (ro.xz);\n  vn = normalize (vec3 (f - vec2 (Fbm2 (ro.xz + e.xy), Fbm2 (ro.xz + e.yx)), 0.1).xzy);\n  col = mix (vec3 (0.4, 0.35, 0.1), vec3 (0.4, 0.5, 0.2), f) * (1. - 0.1 * Noisefv2 (ro.xz));\n  f = smoothstep (7., 8., 0.15 * length (ro.xz * ro.xz * vec2 (2.8, 1.)));\n  if (f < 1.) {\n    col = mix (vec3 (0.6, 0.5, 0.3) * (1. - 0.4 * Fbm2 (64. * ro.xz)), col, f);\n    vn = normalize (mix (vec3 (0., 1., 0.), vn, f));\n    q = ro.xz - cUpCirc.xz;\n    q.y -= -2. * sHzRamp;\n    q.x = abs (q.x) - rUpCirc;\n    f = length (q);\n    if (ro.z > cUpCirc.z) {\n      q = ro.xz - cUpCirc.xz;\n      q = Rot2D (q, (0.5 + floor (atan (q.y, - q.x) * (4. / pi))) * pi / 4.);\n      q.x -= - rUpCirc;\n      f = min (f, length (q));\n    }\n    f = min (f, 2. * length (ro.xz - 0.5 * (cPt[1] + cPt[2]).xz));\n    f = min (f, 2. * length (ro.xz - 0.5 * (cPt[5] + cPt[6]).xz));\n    q = ro.xz - cPtOrg.xz;\n    q.x = abs (q.x) - sLoop - wTrk - 0.25;\n    f = min (f, length (q));\n    col = mix (vec3 (0.6) * (1. - 0.4 * Fbm2 (512. * ro.xz)), col, smoothstep (0.1, 0.3, f));\n    q = ro.xz - 0.5 * (cPt[9] + cPt[10]).xz;\n    f = 99.;\n    if (q.y < 0.) f = abs (length (q) - rDnCirc);\n    if (abs (q.y - 1.) < 1.05) f = min (f, abs (abs (q.x) - rDnCirc));\n    if (abs (ro.z + 2.5) < 1.5) f = min (f, abs (ro.x - cPtOrg.x - sLoop));\n    col = mix (vec3 (0.6) * (1. - 0.4 * Fbm2 (512. * ro.xz)), col,\n       smoothstep (7., 8., f / wTrk));\n  } else if (abs (length (ro.xz) - 10.) < 0.2) {\n    q = ro.xz;\n    q = Rot2D (q, (0.5 + floor (atan (q.y, - q.x) * (16. / pi))) * pi / 16.);\n    q.x += 10.;\n    col *= 0.7 + 0.3 * smoothstep (0.1, 0.2, length (q));\n  }\n  col *= 0.1 + 0.9 * max (dot (vn, sunDir), 0.);\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, roo;\n  float dstObj, dstGrnd, nDotS, sh;\n  isSh = false;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idTrk) {\n      col4 = vec4 (0.8, 0.8, 0.9, 0.3);\n    } else if (idObj == idPyl) {\n      col4 = vec4 (0.8, 0.5, 0.2, 0.1) * (0.7 + 0.3 *\n         SmoothBump (0.05, 0.95, 0.01, mod (32. * qHit.y, 1.)));\n    } else if (idObj == idPlat) {\n      col4 = vec4 (0.8, 0.5, 0.2, 0.1) * (1. - 0.2 * Fbm2 (64. * ro.xz));\n    } else if (idObj == idArch) {\n      col4 = vec4 (mix (vec3 (0., 0., 1.), vec3 (1., 1., 0.),\n         step (mod (32. * (atan (qHit.y, - qHit.x) / pi + 1.), 1.), 0.5)), 0.2);\n    } else if (idObj == idTun) {\n      col4 = vec4 (0.6, 0.5, 0.3, 0.) * (1. - 0.2 * Fbm2 (32. * ro.xz));\n    } else if (idObj >= idCar) {\n      col4 = (idObj == idCar + N_CAR - 1) ? vec4 (1., 1., 0., 0.5) : vec4 (1., 0., 0., 0.5);\n      if (qHit.y < -0.05) col4.rgb = vec3 (0.7);\n      if (qHit.z > 0.18) col4.rgb = vec3 (0., 1., 0.);\n    } else if (idObj == idTrnk) {\n      col4 = vec4 (0.5, 0.3, 0., 0.1) * (0.7 + 0.3 * SmoothBump (0.1, 0.9, 0.003,\n         mod (8. * atan (qHit.z, - qHit.x) / pi, 1.)));\n    } else if (idObj == idLeaf) {\n      col4 = vec4 (0., 0.8, 0.2, 0.1);\n      vn = VaryNf (32. * ro, vn, 4.);\n    }\n    nDotS = max (dot (vn, sunDir), 0.);\n    if (idObj == idTrk || idObj == idArch || idObj >= idCar) nDotS *= nDotS;\n    sh = ObjSShadow (ro, sunDir);\n    col = col4.rgb * (0.2 + 0.8 * sh * nDotS) +\n       step (0.95, sh) * col4.a * pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n  } else if (rd.y < 0.) {\n    roo = ro;\n    col = GrndCol (ro, rd);\n    dstGrnd = - ro.y / rd.y;\n    if (dstGrnd < dstFar) col *= ObjSShadow (ro + dstGrnd * rd, sunDir);\n    col = mix (col, SkyBgCol (roo, rd), pow (1. + rd.y, 32.));\n  } else col = SkyBgCol (ro, rd);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, uvs, uvw, ori, ca, sa, mMid[2], ut[2], mSize, msw;\n  float az, el, asp, zmFac, pDist, sr, vel, vuId, regId, winHt;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uvs = uv;\n  uv.x *= iResolution.x / iResolution.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  winHt = 0.85;\n  trkDir = (mod (floor (dateCur.w / 3600.), 2.) > 0.) ? 1. : -1.;\n  mSize = (1./5.) * vec2 (asp, 1.) * winHt;\n  mMid[0] = vec2 (asp * (1. - mSize.y), winHt - mSize.y) * vec2 (- trkDir, -1.);\n  mMid[1] = vec2 (asp * (1. - mSize.y), winHt - mSize.y) * vec2 (- trkDir, 1.);\n  ut[0] = abs (uv - mMid[0]) - mSize;\n  ut[1] = abs (uv - mMid[1]) - mSize;\n  regId = -1.;\n  if (mPtr.z > 0.) {\n    regId = 0.;\n    msw = mPtr.xy + 0.5 * vec2 (- trkDir, winHt);\n    if (trkDir * msw.x < - (1. - mSize.x / asp)) {\n      if (msw.y < mSize.y) {\n        regId = 1.;\n      } else if (msw.y > winHt - mSize.y) {\n        regId = 2.;\n        msw.y -= winHt - mSize.y;\n      }\n      msw.x = (msw.x + trkDir * (1. - 0.5 * mSize.x / asp)) / (mSize.x / asp);\n      msw.y = (msw.y / mSize.y - 0.5);\n    }\n    if (abs (mPtr.y) > 0.5 * winHt) regId = -1.;\n  }\n  vuId = 0.;\n  for (int k = 0; k < 2; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      vuId = float (k + 1);\n      break;\n    }\n  }\n  if (regId == 1.) {\n    if (vuId == 0. || vuId == 1.) vuId = 1. - vuId;\n  } else if (regId == 2.) {\n    if (vuId == 0. || vuId == 2.) vuId = 2. - vuId;\n  }\n  riding = (vuId == 0.);\n  TrkSetup ();\n  vel = 0.5;\n  for (int k = 0; k < N_CAR; k ++) {\n    carPos[k] = TrkPath (vel * tCur - tWait + tLen[N_SEG] *\n       float (N_CAR - 1 - k) / float (N_CAR));\n    carMat[k] = AxToRMat (oDir, oNorm);\n  }\n  uvw = uv;\n  if (vuId == 0.) {\n    ro = carPos[N_CAR - 1];\n    ro += (hTrk + 0.3) * oNorm - 0.3 * oDir;\n    uvw = vec2 ((1./0.5) * sin (0.5 * uv.x), uv.y);\n    zmFac = 3.;\n    az = 0.;\n    el = -0.02 * pi;\n    if (regId == 0.) {\n      az += 2. * pi * mPtr.x;\n      el += 0.5 * pi * mPtr.y;\n    }\n    zmFac = 3.;\n  } else if (vuId == 1.) {\n    az = 0.5 * pi;\n    el = -0.02 * pi;\n    if (regId == 1.) {\n      az -= 2. * pi * msw.x;\n      el -= 0.5 * pi * msw.y;\n      el = clamp (el, -0.45 * pi, 0.);\n    }\n    zmFac = 3.;\n  } else if (vuId == 2.) {\n    ro = 0.5 * (cDnCirc + cUpCirc);\n    vd = carPos[N_CAR - 1] - ro;\n    pDist = length (vd);\n    vd = normalize (vd);\n    az = 0.5 * pi + atan (- vd.z, vd.x);\n    el = asin (vd.y);\n    if (regId == 2.) {\n      az += 0.5 * pi * msw.x;\n      el += 0.5 * pi * msw.y;\n    }\n    zmFac = 2. + 0.3 * pDist;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  if (vuId == 1.) ro = vuMat * vec3 (0., 1., -15.);\n  sunDir = normalize (vec3 (sin (0.02 * tCur - 0.5 * pi + vec2 (0.5 * pi, 0.)), 1.).xzy);\n  dstFar = 60.;\n  col = vec3 (0.);\n  if (abs (uvs.y) < winHt) {\n#if ! AA\n    const float naa = 1.;\n#else\n    const float naa = 3.;\n#endif  \n    sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n    for (float a = 0.; a < naa; a ++) {\n      rd = normalize (vec3 (uvw + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n          sr * (0.667 * a + 0.5) * pi), zmFac));\n      rd = vuMat * rd;\n      if (vuId == 0.) rd = rd * carMat[N_CAR - 1];\n      col += (1. / naa) * ShowScene (ro, rd);\n    }\n  }\n  for (int k = 0; k < 2; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0. && min (abs (ut[k].x), abs (ut[k].y)) * canvas.y < 2.)\n       col = vec3 (0.4, 0.4, 0.);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRound2BoxDf (vec3 p, vec3 b, float r)\n{\n  return max (length (max (abs (p.xy) - b.xy, 0.)) - r, abs (p.z) - b.z);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nmat3 AxToRMat (vec3 vz, vec3 vy)\n{\n  vec3 vx;\n  vx = normalize (cross (vy, vz));\n  vy = cross (vz, vx);\n  return mat3 (vec3 (vx.x, vy.x, vz.x), vec3 (vx.y, vy.y, vz.y), vec3 (vx.z, vy.z, vz.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}