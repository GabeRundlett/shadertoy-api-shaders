{
    "Shader": {
        "info": {
            "date": "1686655542",
            "description": "Voronoi cells that jiggle",
            "flags": 0,
            "hasliked": 0,
            "id": "csfyz7",
            "likes": 1,
            "name": "Jiggle voronoi",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "nhobb",
            "viewed": 173
        },
        "renderpass": [
            {
                "code": "/* noise and hash from https://www.shadertoy.com/view/4dS3Wd */\nfloat hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(i), hash(i + 1.0), u);\n}\n\nvec2 randomVertex(float seed) {\n    float jigglex = 0.8 + 2.4*(sin(iTime + seed)/0.1);\n    float jiggley = 0.8 + 3.2*(cos(iTime/0.4 + seed)/0.1);\n    vec2 result = vec2(noise(seed*123.32+321.2)*1280., noise(seed*321.32+ 11.1323)*720.);\n    return vec2(result.x + jigglex, result.y + jiggley);\n}\n\nvec3 randomColour(float seed) {\n    return vec3(noise(seed*32123.2 + 213.2), noise(seed*3213.32+ 213.2), noise(123.3*seed+ 213.2));\n}\n\n\nvec3 nearestVoronoi(vec2 p) {\n    int LEN = 40;\n    \n    vec3 result = vec3(0.);\n    float nearest = 1.0e10;\n\n    for (int i=0; i<LEN; i++) {\n      float d = distance(p, randomVertex(float(i)));\n      result = step(0., nearest - d) * randomColour(float(i)) + step(0., d-nearest) * result;\n      nearest = step(0., nearest - d) * d + step(0., d-nearest) * nearest;\n    }\n    \n    \n    \n    vec3 col1 = vec3(0., 0.5, 0.2);\n    vec3 col2 = vec3(.5, .0, 0.);\n    vec3 col3 = vec3(0., .5, .5);\n    \n    float f = 1.;\n    \n    float R = 5.;\n    \n    for (int i=0; i<LEN; i++) {\n      result = result * (step(R, distance(p, randomVertex(float(i)))));\n    }\n\n    return result;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord;//iResolution.xy;\n    \n    // Time varying pixel color\n    //vec3 col = vec3(0.5+0.5*cos(0.1 * dist(vec2(600., 300.), uv) - iTime*20.));\n    \n    vec3 col = nearestVoronoi(fragCoord);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}