{
    "Shader": {
        "info": {
            "date": "1561377336",
            "description": "A retro plasma cube'\n\nSet the RETRO_MODE variable to 0 to disable pixelated effect.",
            "flags": 0,
            "hasliked": 0,
            "id": "Wt23D3",
            "likes": 5,
            "name": "Plasma Cube",
            "published": 3,
            "tags": [
                "raymarch",
                "retro",
                "cube",
                "plasma"
            ],
            "usePreview": 0,
            "username": "adelciotto",
            "viewed": 809
        },
        "renderpass": [
            {
                "code": "// Plasma Cube by adelciotto\n// References:\n// - https://github.com/ajweeks/RaymarchingWorkshop\n// - https://iquilezles.org/articles/distfunctions \n\n#define RETRO_MODE 1\n\nconst float RETRO_PIXEL_SIZE = 4.0; \nconst float PI = 3.1415926535; \nconst float MIN_DIST = 0.0; \nconst float MAX_DIST = 100.0; \nconst float EPSILON = 0.001; \nconst float GAMMA_CORRECTION = 0.4545; \nconst int MAX_MARCHING_STEPS = 63; \n\nfloat t = 0.0; \n\nmat2 rotate(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, s, - s, c);\n}\n\nfloat cubeSDF(vec3 p) {\n    p.xz *= rotate(t);\n    p.yx *= rotate(t * 0.6);\n    p.zx *= rotate(t * 0.4);\n    p.y += sin(t * 0.2);\n    vec3 d = abs(p) - vec3(1.0);\n    float dist = length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n    return dist - 0.1;\n}\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(\n        vec3(\n            cubeSDF(vec3(p.x + EPSILON, p.yz)) - cubeSDF(vec3(p.x - EPSILON, p.yz)),\n            cubeSDF(vec3(p.x, p.y + EPSILON, p.z)) - cubeSDF(vec3(p.x, p.y - EPSILON, p.z)),\n            cubeSDF(vec3(p.xy, p.z + EPSILON)) - cubeSDF(vec3(p.xy, p.z - EPSILON))\n        )\n    );\n}\n\n// modified plasma effect from https://www.bidouille.org/prog/plasma\nvec3 plasma(vec3 p, float scale) {\n    p *= scale;\n    \n    float time = t * 0.3;\n    float v1 = sin(p.x + time);\n    float v2 = sin(p.y + time);\n    float v3 = sin(p.z + time);\n    float v4 = sin(p.x + p.y + p.z + time);\n    float v5 = sin(length(p) + 1.7 * time);\n    float v = v1 + v2 + v3 + v4 + v5;\n    \n    v *= 2.0;\n    vec3 col = vec3(sin(v * PI), sin(v * PI + 2.0 * PI / 3.0), sin(v * PI + 4.0 * PI / 3.0));\n    return col * 0.5 + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragCoord = gl_FragCoord.xy;\n    #if RETRO_MODE\n    fragCoord = ceil(fragCoord / RETRO_PIXEL_SIZE) * RETRO_PIXEL_SIZE;\n    #endif\n    vec2 uv = vec2(fragCoord - 0.5 * iResolution.xy);\n    uv = 2.0 * uv.xy / iResolution.y;\n    \n    t = iTime + 0.33 * sin(uv.x * 1.76 + uv.y + iTime);\n    \n    vec3 camPos = vec3(0, 0, - 6);\n    vec3 at = vec3(0, 0, 0);\n    vec3 camForward = normalize(at - camPos);\n    vec3 camRight = normalize(cross(vec3(0.0, 1.0, 0.0), camForward));\n    vec3 camUp = normalize(cross(camForward, camRight));\n    vec3 rayDir = normalize(uv.x * camRight + uv.y * camUp + camForward * 2.0);\n    \n    float depth = MIN_DIST;\n    vec3 col = vec3(0.0);\n    for(int i = 0; i < MAX_MARCHING_STEPS; i ++ ) {\n        vec3 p = camPos + depth * rayDir;\n        float dist = cubeSDF(p);\n        if (dist < EPSILON) {\n            vec3 light = normalize(vec3(sin(t) * 1.0, cos(t * 0.5) + 0.5, - 0.5));\n            vec3 norm = estimateNormal(p);\n            vec3 directional = vec3(1.80, 1.27, 0.99) * max(dot(norm, light), 0.0);\n            vec3 ambient = vec3(0.02, 0.02, 0.02);\n            vec3 diffuse = plasma(p, 1.0) * (directional + ambient);\n            col = diffuse;\n            break;\n        }\n        depth += dist;\n        if (depth >= MAX_DIST) {\n            break;\n        }\n    }\n    \n    col = pow(col, vec3(GAMMA_CORRECTION));\n    fragColor = vec4(smoothstep(0.0, 1.0, col), 1.0);\n }\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}