{
    "Shader": {
        "info": {
            "date": "1608000754",
            "description": "paisaje- n3-2d",
            "flags": 8,
            "hasliked": 0,
            "id": "WsKBDV",
            "likes": 2,
            "name": "paisaje- n3-2d",
            "published": 3,
            "tags": [
                "paisajen32d"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 286
        },
        "renderpass": [
            {
                "code": "//por jorge flores p. JFP. jorge2017a1\n//recursos\n//https://iquilezles.org/articles/distfunctions2d\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define SS(U) smoothstep(3./R.y,0.,U)\n\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n\nvec2 opU2( vec2 d1, vec2 d2 ) \n{\n    //return  min(d1.x,d2.x); \n    if (d1.x<d2.x)  return d1;\n    else  return d2;\n}\n\nvec2 opS2( vec2 d1, vec2 d2 )\n{\n    if  (-d1.x<d2.x) return d1;\n    else   return d2;\n}\n\nvec2 opI2( vec2 d1, vec2 d2 ) \n{\n    if (d1.x>d2.x)\treturn d1;\n    else return d2;\n}\n\nvec2 opS(vec2 d1, vec2 d2) {\n\treturn vec2(max(-d2.x, d1.x), 2.0);\n}\n\nvec2 opRep2D( in vec2 p, in vec2 c )\n{vec2 q = mod(p+0.5*c,c)-0.5*c;    return  q;}\n\nfloat sdCirc(vec2 p, float r)\n{ return length(p)-r;}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;     return length(max(d,0.0)) + min(max(d.x,d.y),0.0);}\n\nvec2 BloqueGrandeLadrillo(vec2 p)\n{   \n    vec2 resp=vec2(9999.0,-1.0);\n    float b1a=sdBox(p-vec2(0.0,0.0), vec2(1.8,1.0 ) );\n    resp=vec2(b1a,-2.0);\n    return resp;\n}\n\nvec2 BloqueInferior(vec2 p)\n{   \n    vec2 resp=vec2(9999.0,-1.0);\n    float b1a=sdBox(p-vec2(0.0,-0.85), vec2(1.8,0.13 ) );\n    float b1b=sdBox(p-vec2(0.4,0.145), vec2(0.6,0.07 ) );\n    //2da escena\n    float b2a=sdBox(p-vec2(4.5,-0.85), vec2(1.8,0.13 ) );\n    //3da escena\n    float b3a=sdBox(p-vec2(8.4,-0.85), vec2(1.8,0.26 ) );\n    resp= opU2( vec2(b1a,-2.0 ), resp);\n    resp= opU2( vec2(b1b,-2.0 ), resp);\n    resp= opU2( vec2(b2a,-2.0 ), resp);\n    resp= opU2( vec2(b3a,-2.0 ), resp);\n    return resp;\n}\n\nvec2 pastogrande(vec2 p)\n{   \n    vec2 resp=vec2(9999.0,-1.0);\n    vec2 p1= rotate2d( p-vec2(0.0,-0.1), radians(180.0));\n    float st1= sdTriangleIsosceles(p1, vec2(0.6,0.6) );\n    float sc1= sdCirc(p-vec2(0.1,-0.3), 0.03);\n    float sc2= sdCirc(p-vec2(-0.1,-0.4), 0.03);\n    st1=opS(sc1, st1);\n    st1=opS(sc2, st1);\n    resp= opU2( vec2(st1,3.0 ), resp);\n    resp= opU2( vec2(sc1,0.0 ), resp);\n    resp= opU2( vec2(sc2,0.0 ), resp);\n    \n    return resp;\n}\n\n\nvec2 pastomedio(vec2 p)\n{   \n    vec2 resp=vec2(9999.0,-1.0);\n    vec2 p1= rotate2d( p-vec2(1.,-0.4), radians(180.0));\n    float st1= sdTriangleIsosceles(p1, vec2(0.3,0.3) );\n    float sc1= sdCirc(p-vec2(1.05,-0.55), 0.015);\n    float sc2= sdCirc(p-vec2(1.0,-0.52), 0.015);\n    st1=opS(sc1, st1);\n    st1=opS(sc2, st1);\n    resp= opU2( vec2(st1,3.0 ), resp);\n    resp= opU2( vec2(sc1,0.0 ), resp);\n    resp= opU2( vec2(sc2,0.0 ), resp);\n    return resp;\n}\n\n\nvec2 ArbolSimple(vec2 p)\n{   \n    vec2 resp=vec2(9999.0,-1.0);\n     float b1a=sdBox(p-vec2(-0.5,-0.55), vec2(0.02,0.15 ) );\n    float sc1= sdCirc(p-vec2(-0.5,-0.3), 0.15);\n    float sc2= sdCirc(p-vec2(-0.55,-0.3), 0.015);\n    float sc3= sdCirc(p-vec2(-0.5,-0.35), 0.015);\n    sc1=opS(sc2, sc1);\n    sc1=opS(sc3, sc1);\n    resp= opU2( vec2(b1a,25.0 ), resp);\n    resp= opU2( vec2(sc1,3.0 ), resp);\n    resp= opU2( vec2(sc2,0.0 ), resp);\n    resp= opU2( vec2(sc3,0.0 ), resp);\n    return resp;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n     vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n     float tt=mod(iTime*0.5,10.0);\n     p.x=p.x+tt;\n\n\t vec3 col = vec3(0.0);\n     //vec3 skycolor = mix( vec3(0.235, 0.737, 0.988),vec3(0.0), sin(iTime))-0.5;\n     vec3 skycolor =  vec3(0.235, 0.737, 0.988);\n     \n     col=skycolor;\n     \n    vec2 Bgl2=BloqueInferior(p);\n    vec2 Pg1= pastogrande(p);\n    vec2 Pm1= pastomedio(p);\n    \n    \n    //2da escena\n    vec2 Pg2= pastogrande(p-vec2(4.0,0.0));\n    vec2 Pm2= pastomedio(p-vec2(4.0,0.0));\n    \n    //1era escena\n    vec2 As1= ArbolSimple(p-vec2(-0.5,0.0));\n      //3era escena\n    vec2 As2= ArbolSimple(p-vec2(7.5,0.1));\n    vec2 As3= ArbolSimple(p-vec2(8.0,0.1));\n    vec2 As4= ArbolSimple(p-vec2(8.5,0.1));\n    \n    \n    vec3 colb2= HacerLadrillos(p,8.0);\n\n    vec3 colb3= getColorf(Pg1.y);\n    vec3 colb4= getColorf(Pm1.y);\n    \n    \n    vec3 colb5= getColorf(Pg2.y);\n    vec3 colb6= getColorf(Pm2.y);\n    \n    vec3 colb7= getColorf(As1.y);\n    \n    vec3 colb8= getColorf(As2.y);\n    vec3 colb9= getColorf(As3.y);\n    vec3 colb10= getColorf(As4.y);\n    \n\n    col= DibujoConBorde(p, Bgl2.x, colb2,  col);\n    col= DibujoConBorde(p, Pg1.x, colb3,  col);\n    col= DibujoConBorde(p, Pm1.x, colb4,  col);\n    \n    col= DibujoConBorde(p, Pg2.x, colb5,  col);\n    col= DibujoConBorde(p, Pm2.x, colb6,  col);\n    \n    col= DibujoConBorde(p, As1.x, colb7,  col);\n    \n    col= DibujoConBorde(p, As2.x, colb8,  col);\n    col= DibujoConBorde(p, As3.x, colb9,  col);\n    col= DibujoConBorde(p, As4.x, colb10,  col);\n    \n    \n    //col=mix(col, colb2, Bgl2.x);\n    \n    \n\nfragColor = vec4(col,1.0);\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{ vec3 color;  };\n    \nTObj mObj;\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.75),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(0.9),  //31\nvec3(0.8),  //32\nvec3(0.7),  //33\nvec3(0.6),  //34\nvec3(150.,75.,0.0)/255.,  //35  //marron o cafe\nvec3(204.,119.,34.0)/255.,  //36 //marron o cafe\nvec3(184.,115.,51.0)/255.  //37 //marron o cafe\n\n    \n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\n\n\nvec3 getColorf(float ii)\n{    \n\n    int i=int(ii);\n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n\n///--------------------------------------------\n// MASKS\nfloat fillMask(float distanceChange, float dist) \n{\n    return smoothstep(distanceChange, -distanceChange, dist);\n}\n\nfloat blurMask(float distanceChange, float dist, float blurAmount) {\n    float blurTotal = blurAmount*.01;\n    return smoothstep(blurTotal+distanceChange, -distanceChange, dist);\n}\n\nfloat innerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist+width);\n}\n\nfloat outerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist-width);\n}\n\n\nvec3 DibujoConBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);   \n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\n\nvec3 DibujoSinBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    float uWotM8 = 0.009;\n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    //colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    colOut = mix(colOut, colIn, uWotM8);\n    return mix(colOut,colIn, flm );\n}\n\n\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n\n\nfloat sdUnevenCapsule( vec2 p, float r1, float r2, float h )\n{\n    p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if( k < 0.0 ) return length(p) - r1;\n    if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b) ) - r1;\n}\n///-------------------------------\n\n\nvec2 rotate2d(vec2 p, float ang)\n{\n    float c = cos(ang);float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nmat2 rot2D(float a)\n{\n    float c=cos(a);float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\n//vec3 HacerLadrillos( vec2 fragCoord )\nvec3 HacerLadrillos( vec2 uv, float escala )\n{\n\tuv = uv * escala; // scale for replication\n    vec3 col = vec3(0.8, 0.1, 0.1);\n    if(mod(uv.y, 2.0) < 1.0)\n    { uv.x = uv.x + 0.6; }\n    uv = uv - floor(uv)+0.01;\n    if(uv.x > 0.9 || uv.y < 0.1) \n    { col = vec3(0.0); }\n    return col;\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 mainSound( in int samp, float i )\n{ float t=fract(i/22.)*52.;\n    float b=fract(t/4.)<5./6.?120.*acos(-1.):108.*acos(-1.);\n \n \n \tvec2 c1=vec2( sin(b*t)*exp(-3.0*fract(t/2.)),sin(b*t)*exp(-5.0*fract(--t/2.)) );\n \tvec2 c2=vec2( sin(b*floor(t/4.)*(t))*exp(-2.0*fract(t*0.5+.5)));\n    vec2 c3=clamp( vec2( sin(b*floor((t+1.8)/2.)*(t))*exp(-3.0*fract(t*1.5+.5))),.2,.8);\n \tvec2 c4=vec2( sin(b*floor(t/4.)*(t)+2.0*sin(b*t*0.5))*exp(-2.0*fract(t*3.+.5)));\n    vec2 sum=c1+c2+c3-c4;\n        \n    return sum;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}