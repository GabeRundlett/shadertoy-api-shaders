{
    "Shader": {
        "info": {
            "date": "1505903200",
            "description": "Post-Voronoian design for the Amber Room (mousing suggested)",
            "flags": 0,
            "hasliked": 0,
            "id": "Xtfyzl",
            "likes": 9,
            "name": "Dynamic Amber",
            "published": 3,
            "tags": [
                "voronoi",
                "reflection",
                "lighting"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 789
        },
        "renderpass": [
            {
                "code": "// \"Dynamic Amber\" by dr2 - 2017\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float r);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nfloat SmoothMin (float a, float b, float r);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\n\nvec3 qnBlk[2], bSize, vnBall;\nvec2 gVec[7], hVec[7];\nfloat dstFar, tCur;\nint idObj;\nconst float pi = 3.14159;\n\n#define SQRT3 1.7320508\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./SQRT3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (SQRT3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.7;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 1.5 * pi * (u.y - 0.5) * tCur;\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * vec2 (cos (a), sin (a)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.3) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nvec2 BlkHit (vec3 ro, vec3 rd, vec3 bSize)\n{\n  vec3 v, tm, tp;\n  float dMin, dn, df;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = bSize / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  dMin = dstFar;\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    qnBlk[0] = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    qnBlk[1] = - sign (rd) * step (tp, tp.zxy) * step (tp, tp.yzx);\n  }\n  return vec2 (dMin, df);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float d, dMin;\n  dMin = dstFar;\n  q = p;  q.y -= bSize.y - 0.15;\n  dMin = PrSphDf (q, 0.15);\n  idObj = 1;\n  q = p;  q.y -= 0.5 * bSize.y;  q.xz = mod (q.xz, bSize.xz / 2.5) - bSize.xz / 5.;\n  d = max (max (PrSphDf (q, 0.06), q.y), - PrBox2Df (p.xz, bSize.xz - 0.06));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat BallHit (vec3 ro, vec3 rd)\n{\n  vec3 p, u;\n  float b, d, w, dMin, rad;\n  dMin = dstFar;\n  rad = 0.2 * bSize.y;\n  p = vec3 (0., - bSize.y + 2. * rad, 0.);\n  u = ro - p;\n  b = dot (rd, u);\n  w = b * b - dot (u, u) + rad * rad;\n  if (w > 0.) {\n    d = - b - sqrt (w);\n    if (d > 0. && d < dMin) {\n      dMin = d;\n      vnBall = (u + d * rd) / rad;\n    }\n  }\n  return dMin;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 vc;\n  vec3 vn, ltPos, ltDir, col, col1, col2;\n  vec2 dBlock, w, iw, ww, q, b;\n  float dstObj, dstBall, spec, c, sd, wLit, glit;\n  HexVorInit ();\n  dstBall = BallHit (ro, rd);\n  if (dstBall < dstFar) {\n    ro += dstBall * rd;\n    rd = reflect (rd, vnBall);\n    ro += 0.01 * rd;\n  }\n  dBlock = BlkHit (ro, rd, bSize);\n  dstObj = ObjRay (ro, rd);\n  wLit = 0.;\n  glit = 0.;\n  if (dstObj < dBlock.y) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    col = (idObj == 1) ? vec3 (1., 1., 0.9) : vec3 (0.9, 0.9, 0.7);\n    col *= 0.6 - 0.4 * dot (rd, vn);\n  } else if (dBlock.x < dstFar) {\n    vn = qnBlk[1];\n    ro += rd * dBlock.y;\n    if (vn.y == 0.) {\n      ltPos = vec3 (0., bSize.y, 0.);\n      if (abs (vn.z) == 1.) {\n        q = ro.xy;\n        b = bSize.xy;\n        sd = 1. + sign (vn.z);\n      } else {\n        q = ro.zy;\n        b = bSize.zy;\n        sd = 2. + sign (vn.x);\n      }\n      if (abs (q.y) < 0.95 * bSize.y) {\n        b *= vec2 (1./2.5, 0.95/1.5);\n        q += 0.5 * b;\n        iw = floor (q / b);\n        w = q - iw * b;\n        ww = 0.5 * b - abs (w - 0.5 * b);\n        wLit = 0.15 * (1. - smoothstep (0.1, 0.2, length (vec2 (1.5 * ww.x, abs (ro.y - 0.5 * bSize.y - 0.1)))));\n        if (min (ww.x, ww.y) > 0.01) {\n          vc = HexVor (32. * (w + 2. * iw * b + 11. * sd));\n          vn.xz = (abs (vn.z) == 1.) ? vec2 (vc.y, 2. * sign (vn.z)) : vec2 (2. * sign (vn.x), vc.y);\n          vn.y = - vc.z;\n          vn = normalize (vn);\n          c = 0.02 + 0.03 * vc.w + 0.04 * (mod (iw.x, 2.) - mod (iw.y, 2.)) + 0.02 * sd;\n          col1 = HsvToRgb (vec3 (c, 1., 0.6));\n          col2 = HsvToRgb (vec3 (c + 0.05, 1., 0.8));\n          col = mix (col1, col2, smoothstep (0.2, 0.8, Fbm2 (vc.yz + 50. * vc.w)));\n          col = mix (col, mix (col1, col2, 0.5), 1. - smoothstep (0.01, 0.05, vc.x));\n          spec = 0.15;\n          glit = 1.;\n        } else {\n          ww = smoothstep (0.002, 0.004, ww.xy);\n          col = vec3 (0.6, 0.3, 0.) * (1. - 0.1 * min (ww.x, ww.y));\n          spec = 0.1;\n        }\n      } else {\n        if (q.y > 0.) {\n          col = vec3 (0.7, 0.7, 0.8);\n          spec = 0.1;\n          vn = VaryNf (50. * ro, vn, 1.);\n        } else {\n          col = vec3 (0.4, 0.2, 0.1);\n          spec = 0.1;\n        }\n      }\n    } else if (vn.y > 0.) {\n      ltPos = vec3 (0., bSize.y, 0.);\n      col = 0.8 * mix (vec3 (0.8, 0.4, 0.2), vec3 (0.5, 0.25, 0.1),\n         Fbm2 (vec2 (50., 5.) * ro.xz)) *\n         (0.6 + 0.4 * smoothstep (0.03, 0.08, mod (10. * ro.x, 1.)));\n      col *= 0.6 + 0.4 * smoothstep (0.05, 0.15, length (ro.xz) / bSize.x);\n      spec = 0.1;\n    } else {\n      ltPos = vec3 (0., - bSize.y, 0.);\n      col = vec3 (0.7, 0.7, 0.8) * (0.7 + 0.3 * smoothstep (0., 0.15, length (ro.xz) / bSize.x));\n      spec = 0.1;\n      vn = VaryNf (50. * ro, vn, 1.);\n    }\n    ltDir = normalize (ltPos - ro);\n    if (glit > 0.) glit = 500. * step (0.01, max (0., dot (vn, ltDir))) *\n       pow (max (0., dot (ltDir, reflect (rd, vn))), 16.) *\n       pow (1. - 0.6 * abs (dot (normalize (ltDir - rd), VaryNf (1000. * ro, vn, 2.))), 8.);\n    col = wLit + glit * vec3 (1., 1., 0.5) + col * (0.1 + 0.8 * max (dot (vn, ltDir), 0.)) +\n       spec * pow (max (dot (normalize (ltDir - rd), vn), 0.), 128.);\n  } else col = vec3 (0.2);\n  return clamp (col, 0., 1.);  \n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 5.;\n  bSize = vec3 (2., 1., 2.);\n  ro = vec3 (0., 0., -0.9 * bSize.z);\n  rd = normalize (vec3 (uv, 3.));\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.7 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.25 * pi, 0.25 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * rd;\n  ro = vuMat * ro;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec3 e = vec3 (0.1, 0., 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}