{
    "Shader": {
        "info": {
            "date": "1643721688",
            "description": "The lie is a cake !",
            "flags": 32,
            "hasliked": 0,
            "id": "stdXWn",
            "likes": 18,
            "name": "Birthday cake",
            "published": 3,
            "tags": [
                "birthday",
                "cake"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 368
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        if (nuv.y > 0. && nuv.y < 1.)\n            col += texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    rgb = pow(rgb, vec3(1.5));\n    vec2 cuv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    //rgb *= 1.-sat(length(cuv*2.)-.5);\n    //rgb += vec3(.5)*(1.-sat((abs(cuv.x)-.115)*400.));\n    fragColor = vec4(rgb,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define GLOW_SAMPLES 80\n#define GLOW_DISTANCE 0.1\n#define GLOW_POW .8\n#define GLOW_OPACITY .3\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n\nmat2 r2d(float a) { float c= cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nfloat hash11(float p)\n{\n    return mod(sin(p*123.456)*123.456,1.);\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+(r*uv.x+u*uv.y)*fov);\n}\n\n// Thanks IQ\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n// Thanks IQ\nfloat _rsqr(vec2 uv, vec2 s, float r)\n{\n    vec2 l = abs(uv)-s;\n    return min(length(max(l, 0.)+min(max(l.x, l.y), 0.))-r, max(l.x, l.y));\n}\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define GROUND_MAT 0.\n#define ZERO_MAT 1.\n#define TWO_MAT 2.\n#define DOT_MAT 3.\n#define CAKE_MAT 4.\n#define CANDLE_MAT 5.\n#define CHOCO_MAT 6.\n#define CREAM_MAT 7.\n#define FLAME_MAT 8.\n\nfloat seed;\nfloat rand()\n{\n    seed++;\n    return hash11(seed);\n}\n\nvec2 _candle(vec3 p)\n{\n    float h = .3;\n    float w = .04;\n    float curvyness = 18.; \n    p.xz *= r2d(p.y*curvyness);\n    float a = atan(p.z, p.x);\n    float height = abs(p.y+h)-h;\n    float top = length(p.xz)-w*pow(sat((p.y+h*2.)*20.), 2.);\n    float curve = (sin(a*4.));\n    float curvenext = (sin(a*4.+.1));\n    float shape = max(max(length(p.xz)-w-w*.1*curve, height), top);\n    return vec2(shape, (p.y < -h*2.+.05 ? 1. : sign(curve-curvenext)));\n}\n\nfloat _cream(vec3 p)\n{\n    \n    float f = -p.y*2.; \n    float pa = .3;\n    float pb = 1.8;\n    float shp = 400.;\n    float w = pow(sat(sin(f)*.5+.5), pa)*sat(f*shp)*sat((-f+PI*.5)*shp)\n    +pow(sat(sin(f)*.5+.5),pb)*sat((f-PI*.5)*shp)*sat((-f+PI)*shp);\n    float l = length(p.xz);\n    p.xz *= r2d(p.y*.5);\n    float an = atan(p.z, p.x)-p.y+(PI*.5)*3.;\n    \n    float trails = (sin(an*20.));\n    float shape = l+.2-w-.03*trails*sat(f*2.);//w;//.5-.1*trails;//(.5-.1*trails);//*w;\n    return shape;\n}\n\nvec2 map(vec3 p)\n{\n    \n    vec3 op = p;\n    //p.x-= -.7-1.8;\n    float th = .1;\n    vec2 acc = vec2(1000.,-1.);\n    vec3 pg = p;\n    pg.yz *= r2d(.5);\n    acc = _min(acc, vec2(smin(-p.y+.5, -abs(pg.z)+10.0, 1.8), GROUND_MAT));\n    acc = _min(acc, vec2(smin(-p.y+.5, -abs(pg.x)+10.0, 1.8), GROUND_MAT));\n    \n    float cake = sdRoundedCylinder(p, .8,.08,.5);\n    \n    acc = _min(acc, vec2(cake, CAKE_MAT));\n    \n    acc = _min(acc, vec2(sdRoundedCylinder(p, .825,.04,.0125), CHOCO_MAT)); // layer\n    \n    vec3 pbtn = p-vec3(0.,0.,0.);\n    float repy = .2;\n    float idy = floor((pbtn.y+repy*.5)/repy);\n    \n    pbtn.y = mod(pbtn.y+repy*.5,repy)-repy*.5;\n    float stpbtn = PI*2./20.;\n    float abtn = atan(pbtn.z, pbtn.x)+idy;\n    float ida = floor((abtn+stpbtn*.5)/stpbtn);\n    float bbtn = mod(abtn+stpbtn*.5,stpbtn)-stpbtn*.5;\n    pbtn.xz = vec2(sin(bbtn), cos(bbtn))*length(pbtn.xz);\n    \n    float btn = length((pbtn-vec3(0.,0.,1.625))*vec3(1.,1.,2.))-.07;\n    if (abs(idy) < 3. && idy != 0.)\n        acc = _min(acc, vec2(btn, 10.+mod(ida, 2.)));\n    \n    vec3 pcream = p;\n    \n    float stpa = PI*2./20.;\n    float a = atan(p.z, p.x);\n    float b = mod(a+stpa*.5,stpa)-stpa*.5;\n    p.xz = vec2(sin(b), cos(b))*length(p.xz);\n    \n    vec2 candle = _candle(p-vec3(0.0,-.5,.8));\n    acc = _min(acc, vec2(candle.x, CANDLE_MAT*candle.y));\n    \n    float flame = length((p-vec3(0.,-1.15,0.8))*vec3(1.,.5,1.))-.01;\n    acc = _min(acc, vec2(flame, FLAME_MAT));\n        float stpcream = PI*2./10.;\n    float acream = atan(pcream.z, pcream.x);\n    float bcream = mod(acream+stpcream*.5,stpcream)-stpcream*.5;\n    pcream.xz = vec2(sin(bcream), cos(bcream))*length(pcream.xz);\n    float cream = _cream((pcream-vec3(0.,-0.5,1.3))*5.);\n    acc = _min(acc, vec2(cream, CREAM_MAT));\n    \n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.001,0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 accLight;\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    accLight = vec3(0.);\n    vec3 p = ro;\n    for (int i = 0; i < steps;++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.001)\n            return vec3(res.x, distance(p, ro), res.y);\n        if (res.y == FLAME_MAT)\n        accLight += vec3(0.941,0.376,0.000)*(1.-sat(res.x/.05))*.1;\n        p+= rd*res.x*.125;\n    }\n    return vec3(-1.);\n}\n\nvec3 getEnv(vec3 rd)\n{\n    return texture(iChannel2, rd*vec3(1.,-1.,1.)).xyz*.25;\n    vec2 uv = vec2(atan(rd.z, rd.x)/PI, (acos(rd.y)/PI-.5)*2.);\n    float stars = pow(texture(iChannel0, uv*5.*vec2(2.,1.)).x, 10.)*sat(-rd.y);\n    vec3 back = mix(vec3(0.910,0.671,0.588), vec3(0.176,0.180,0.345)*.75, pow(sat(-rd.y*2.+.2), .3)); \n    back += vec3(0.455,0.871,0.925)*pow(sat(-(rd.x-2.1)*.4+rd.y*2.),1.2)*.5;\n    back += vec3(0.733,0.416,0.208)*pow(sat(-(rd.x-1.9)*.4+rd.y*2.),3.);\n    back *= 1.-sat(length((uv-vec2(.75,0.1))*.5*vec2(2.,2.)));\n    return back+ vec3(1.)*stars+vec3(.2,.4,.7)*stars*1.;\n}\n\nvec3 getMat(vec3 res, vec3 rd, vec3 p, vec3 n)\n{\n    vec3 col = n*.5+.5;\n    vec3 lpos = vec3(-0.,5.,5.);\n    vec3 ldir= p-lpos;\n    vec3 h = normalize(rd+ldir);\n    vec3 ambient = vec3(0.);\n    float ndotl = sat(dot(n, normalize(ldir)));\n    vec3 albedo = vec3(.1,.1,.1);\n    vec3 spec = vec3(1.,0.,0.);\n    float gloss = 1.;\n    if (res.z == GROUND_MAT)\n    {\n        albedo = mix(vec3(.1), vec3(0.000,0.616,0.875), .25)*.5;\n    }\n    if (res.z == CAKE_MAT)\n    {\n        albedo = vec3(0.875,0.486,0.165);\n    }\n    if (res.z == CHOCO_MAT)\n    {\n        albedo = vec3(.1,.1,.1);\n    }\n    if (abs(res.z) == CANDLE_MAT)\n    {\n        ambient = vec3(0.518,0.400,0.322)*.25;\n        albedo = mix(vec3(0.494,0.333,0.243), vec3(0.875,0.784,0.851), sat(res.z));\n    }\n    if (res.z == CREAM_MAT)\n    {\n        ambient = vec3(0.518,0.400,0.322)*.5; \n        albedo = vec3(1.000,0.871,0.800)*.5;\n    }\n    if (res.z > 10.5)\n    {\n        albedo = vec3(1.000,0.871,0.800);\n    }\n    \n    col = ambient+albedo*ndotl;\n    if (res.z == FLAME_MAT)\n    {\n        col = 2.*mix(vec3(1.000,0.749,0.322), vec3(1.,1.,1.), sat(-dot(rd, n)));\n    }\n    \n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    float xpos = sin(iTime*0.+.5)*2.2;\n    float offy = -.85;\n    float d = 6.;\n    float t = 0.*iTime*.125+2.;\n    vec3 ro = vec3(sin(t)*d,-2.,cos(t)*d);\n    vec3 ta = vec3(0.,0.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 1024);\n    \n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = n*.5+.5;\n        col = getMat(res, rd, p, n);\n        col += accLight;\n        if (true)\n        {\n            //n+= normalize(vec3(rand(), rand(), rand())-.5)*.05*\n            //(sin(p.x*10.+iTime+p.z*5.)+sin(p.z+iTime));\n            //n = normalize(n);\n            vec3 refl = normalize(reflect(rd, n));\n            refl.x = -abs(refl.x);\n            //float tex = texture(iChannel2, clamp(p.xz*vec2(-1.,1.5)*.25-vec2(.5,-0.5), vec2(-1.), vec2(0))-vec2(0.)).x;\n            \n            refl = mix(refl, normalize(vec3(rand(), rand(), rand())-.5), (1.-float(res.z > 9.)*.75));\n            //refl = normalize(vec3(rand(), rand(), rand())-.5);\n            \n            if (dot(refl, n) < 0.01)\n                refl = -refl;\n            vec3 resrefl = trace(p+n*0.01, refl, 128);\n            if (resrefl.y > 0.)\n            {\n                vec3 prefl = p+refl*resrefl.y;\n                vec3 nrefl = getNorm(prefl, resrefl.x);\n                col += getMat(resrefl, refl, prefl, nrefl);\n            }\n            else\n                col += getEnv(refl)*1.5;\n            col += accLight;\n            //col += tex*.3*vec3(.5,.1,.12);\n            //col *= sat(tex+.75);\n        }\n    }\n    else\n    {\n        col = getEnv(rd);\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    float scaleF = 1.;\n    uv *= scaleF;\n    //uv.y += 1.;\n    seed=texture(iChannel0,uv).x;\n    seed+=fract(iTime);\n    vec2 off = (vec2(rand(), rand())-.5)*3.*vec2(1., -1.)/(iResolution.x*1.75/scaleF);\n    vec3 col = rdr(uv+off);\n    col *= 1.8/(col+1.);\n    col = sat(col);\n    col = pow(col, vec3(1.2));\n    \n    if (iFrame > 1)\n        col = mix(texture(iChannel1, fragCoord/iResolution.xy).xyz, col, 1.0 / float(iFrame + 1));\n        //    col = mix(texture(iChannel1, fragCoord/iResolution.xy).xyz, col, .3);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "cubemap",
                        "id": 27,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        if (nuv.x > 0. && nuv.x < 1.)\n          col += texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}