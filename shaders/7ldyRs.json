{
    "Shader": {
        "info": {
            "date": "1660376669",
            "description": "Semi 1 from Evoke 2022 Shader showdown\nHeavily inspired from @mrange work https://www.shadertoy.com/view/ssdBWS for the cubehex trick\nand @kamoshika's #つぶやきGLSL works on hexagonal figures",
            "flags": 64,
            "hasliked": 0,
            "id": "7ldyRs",
            "likes": 9,
            "name": "[Evoke 2022] Cube^3",
            "published": 3,
            "tags": [
                "cube"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 356
        },
        "renderpass": [
            {
                "code": "// Come to https://livecode.demozoo.org \n// I encourage you to check the real effect with bonzomatic and music\n// The effect live \"abuse\" the fft  representation in bonzomatic which is less evenly distributed\n// and create a 'running flash effect' that I have hard time to reproduce here.\n\n// Greetings to the Evoke shader showdown lineup NuSan, Flopine, z0rg, psenough, havoc.\n// Thanks also to the amazing Evoke orga ! \n// And Thanks the public ! I hope you enjoyed !\n\n// Heavily inspired from mrange work https://www.shadertoy.com/view/ssdBWS for the cubehex trick\n// and @kamoshika's #つぶやきGLSL works on hexagonal figures\n//\n\n\n// Constants for hexa stuff\nconst vec2 sz = vec2(1.,1.73),hs = sz*.5; \n\n\n// Created an hexa grid (check art of code, explaination are far better :D ) \nvec2 hexgrid(inout vec2 p){\n  vec2 pa= mod(p,sz)-hs,pb=mod(p-hs,sz)-hs,pc=dot(pa,pa) < dot(pb,pb) ? pa : pb;\n  vec2 n = (p-pc+hs)/sz;\n  //   ^--- This is used to have the \"id\" of the hexcell\n  p = pc;\n  return round(n*2.)*.5;\n  // Returning the cell id, but p is 'inout' and beeing modified /!\\ to \n  // makes p having local cell coordinate\n  \n  }\n  \n// Getting a box for sdf (yeah 2D & 3D wow) \nfloat box(vec3 p,vec3 b){\n    vec3 q = abs(p)-b;\n    return length(max(vec3(0.),q))+min(0.,max(q.x,max(q.y,q.z)));\n    // Could have simplified this, but didn't had time\n  }\n// Palette trick from iq, simple and efficient to get shiny color palette\nvec3 pal(float t){return .5+.5*cos(6.28*(1.*t+vec3(.0,.3,.6)));}\n\n// 2d rotation\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n   \n     vec2 uuv = uv; // I keep original uv for later \n/************ 2D background /************/\n \n \n    vec3 col = vec3(.1+texture(iChannel0,fract(abs(uv.xy))).r*1.);\n\tfloat tt =iTime*.25; // this is originaly a texFFTIntegrated so it's should be\n    // increasing in sync with the sound\n    \n    uv += vec2(asin(sin(sz.y*tt)),asin(cos(sz.x*tt))); \n    //    ^--- moving up down left right, asin make it more sharp\n    uv*=2.;\n  \n  vec2 n = hexgrid(uv);\n  //        ^-- First hexagrid, it will be used only for the \"scale\" effect  \n  if(dot(cos(n),sin(n.yx)) < .0) uv*=2.;\n  //     ^--- Scale effect where sometime it's big cube, sometime small\n  //     dot here make it more \"biome\" like (whatever it means you got the idea)\n  \n  vec2 p1=uv*3.,p2=p1+vec2(1.,inversesqrt(3.));\n  // The background cube are in fact 2 hexgrid with one of it shifted from \n  // +vec2(1.,inversesqrt(3.))\n  \n  vec2 n1 = hexgrid(p1); \n  vec2 n2 = hexgrid(p2);\n  \n  float l = 1.; \n  if(n1.x < n2.x+.5) l *= .75;\n  if(n1.y < n2.y) l *= .75;\n  // ^--- all the 3 lines : Trick to shade the \"face\" of the cube\n  \n  // Now basically it's about messing enough with all the data we have to make \n  // Sparkling flashy things. (Works better on bonzo)\n  \n  float gy = dot(sin(n1*4.),cos(n2*8.));\n  // Some gyroid, quite cool effect usually.\n  \n  float zzccmxtp=  (gy + iTime+n2.y*2.4+n2.y*3.3+n2.x*.2+n1.x*1.1);\n  // The magic, defining a value that will be almost uniq across all 'face' of cube\n  // but value will be close enough so you can have some shading effect or color\n  // grading thanks to the pal stuff\n  \n  float txt = texture(iChannel0,fract(vec2(zzccmxtp))).r;\n  // If you are not used to my style, I L.O.V.E F.F.T\n  \n  float d1 = max(dot(p1=abs(p1),sz*.5),p1.x)-.48;\n  float d2 = max(dot(p2=abs(p2),sz*.5),p2.x)-.48;\n  //         ^--- one lines to get and hexagone\n  //  v--- which will be combined to this\n  float d = max(d1,d2); \n  d = smoothstep(0.,fwidth(d),d);\n  // to have the edge of each cube face.\n  \n  // HERE WE GO\n  col = (gy < .0 ? d: 1.)* // Should it be plain face or wired ? \n  (txt*10.> .1 ? pal(zzccmxtp*2.): vec3(.5))* // Intend to be an effect where \n  // it use the color when the fft is \"high\" enough and gray otherwise\n  // I had it working in a practice shader, but here didn't manage to make it.\n   \n  l*        // to have some sort of shading \n  vec3(1.5)* // Useless * 1. but HEY it's 25min :D \n  pow(txt,4.)*3.  ;  // intensity from music;\n \n/************ 3D foreground /************/\n  uv = uuv; // Get back the original uv\n\n  vec3 p,dd= normalize(vec3(uv,1.)); // initialisation of the smol ray marcher\n  for(float i=0.,g=0.,e=0.;i++<50.;){ // The ray marching\n        \n       p = dd*g; // Current pos\n       \n       p.z -=5.-texture(iChannel0,vec2(.3)).r*2.;\n       p.x += asin(sin(iTime));\n       p.y += asin(cos(iTime));\n       p.xy *=rot(iTime);\n       // ^--- Some plays with the coordinate to move the cube\n       \n        float h = box(p,vec3(1.)); // A cube\n        g+=e=h; // ray move forward\n        // CUBIGGGAAAAAAAA (purely a public bait :D )\n        vec3 cc = mod(floor(p.x*5.+floor(mod(p.y*5.,2.)))*5. ,2.) < 1. ? vec3(1.,0.,0.) : vec3(1.);\n        //    ^--- The color\n        //    I still don't know how to have a proper texture applied on all face\n        col += cc*.055/exp(e*e*i);\n        // Color accumulation\n    }\n   fragColor = vec4(sqrt(col),1.);\n   // aaaand we are done ! :D \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 29527,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/fms_cat/eveone200bpm-2017120720171231"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}