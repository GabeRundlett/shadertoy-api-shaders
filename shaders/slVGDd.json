{
    "Shader": {
        "info": {
            "date": "1638564937",
            "description": "I can't get the random to work properly. Also, it doesn't look like it's using the neighbor pixels to update, can anyone help?\nUse mouse to move around",
            "flags": 32,
            "hasliked": 0,
            "id": "slVGDd",
            "likes": 4,
            "name": "Packed Game of Life (WIP)",
            "published": 3,
            "tags": [
                "life",
                "buffer",
                "packing",
                "bits",
                "gol"
            ],
            "usePreview": 0,
            "username": "incription",
            "viewed": 298
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    ivec2 iuv = ivec2((iMouse.xy - fragCoord) / 8.0 + iResolution.xy/2.0);\n    \n    vec4 d = texelFetch(iChannel0, iuv, 0);\n    float i = bit(ivec2(fragCoord)%8, d);\n    \n    float col = i * sum(d);\n\n    // Output to screen\n    fragColor = vec4(vec3(1.-5.*col), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec3 rainbow(float level)\n{\n\t/*\n\t\tTarget colors\n\t\t=============\n\t\t\n\t\tL  x   color\n\t\t0  0.0 vec4(1.0, 0.0, 0.0, 1.0);\n\t\t1  0.2 vec4(1.0, 0.5, 0.0, 1.0);\n\t\t2  0.4 vec4(1.0, 1.0, 0.0, 1.0);\n\t\t3  0.6 vec4(0.0, 0.5, 0.0, 1.0);\n\t\t4  0.8 vec4(0.0, 0.0, 1.0, 1.0);\n\t\t5  1.0 vec4(0.5, 0.0, 0.5, 1.0);\n\t*/\n\t\n\tfloat r = float(level <= 2.0) + float(level > 4.0) * 0.5;\n\tfloat g = max(1.0 - abs(level - 2.0) * 0.5, 0.0);\n\tfloat b = (1.0 - (level - 4.0) * 0.5) * float(level >= 4.0);\n\treturn vec3(r, g, b);\n}\n\nvec3 smoothRainbow (float x)\n{\n    float level1 = floor(x*6.0);\n    float level2 = min(6.0, floor(x*6.0) + 1.0);\n    \n    vec3 a = rainbow(level1);\n    vec3 b = rainbow(level2);\n    \n    return mix(a, b, fract(x*6.0));\n}\n\nfloat bit(ivec2 uv, vec4 d) {\n    float x = 0.;\n    if(uv.y > 3)  x = d.y;\n    else x = d.x;\n    \n    return float((floatBitsToInt(x) >> ((uv.y%4)*8+uv.x)) & 1);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 53758.5453);\n}\n\nfloat randPack(vec2 co) {\n    int result = 0;\n    vec2 seed = co;\n    for(int i=0;i<32;i++) {\n        seed = vec2(rand(seed.yx*124.2));\n        result |= ((1 & int(seed.x<.5)) << i);\n    }\n    return intBitsToFloat(result);\n}\n\nfloat sum(vec4 x) {\n    int bits = floatBitsToInt(x.x);\n    float result = 0.;\n    for(int i=0;i<32;i++)\n    {\n        result += float((bits >> i) & 1);\n    } bits = floatBitsToInt(x.y);\n    for(int i=0;i<32;i++)\n    {\n        result += float((bits >> i) & 1);\n    }\n    return result/64.;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "#define FRAME_SKIP 1\n\nvec2 randxy(vec2 seed) {\n    return vec2(rand(seed), rand(vec2(rand(seed))));\n}\n\nint boop(ivec2 e) { return (e.y%4) * 8 + e.x; }\n\nvec4 life(ivec2 uv) {\n    \n    int k = 0; ivec2 u; int bitsu, bitsd;\n    vec4 me = texelFetch(iChannel0, uv, 0);\n    for(int y=0;y<8;y++) {\n        for(int x=0;x<8;x++) {\n            k = 0;\n            for(int _=0;_<8;_++) {\n            \n            ivec2 pos = ivec2(x, y);\n            u = pos;\n            if(_==0)pos+=ivec2(-1,-1);\n            if(_==1)pos+=ivec2(0,-1);\n            if(_==2)pos+=ivec2(1,-1);\n            if(_==3)pos+=ivec2(-1,0);\n            if(_==4)pos+=ivec2(1,0);\n            if(_==5)pos+=ivec2(-1,1);\n            if(_==6)pos+=ivec2(0,1);\n            if(_==7)pos+=ivec2(1,1);\n            \n            ivec2 quad = ivec2(sign(floor(vec2(pos)/8.)));\n            vec4 d = texelFetch(iChannel0, uv + quad, 0);\n            \n            int up = floatBitsToInt(d.x);\n            int down = floatBitsToInt(d.y);\n\n            pos %= ivec2(8);\n            int data = pos.y > 3 ? down : up;\n            \n            int i = (pos.y%4) * 8 + pos.x;\n            \n            k += (data >> i) & 1;\n            }\n            \n            int e = u.y > 3 ? floatBitsToInt(me.y) : floatBitsToInt(me.x);\n            e = (e >> boop(u%ivec2(8))) & 1;\n            //k = 2;\n            int f = ( ((k==2)&&(e==1)) || (k==3) ) ? 1 : 0;\n            if(y>3) bitsd |= f << ((y%4)*8+x);\n            else    bitsu |= f << ((y%4)*8+x);\n        }\n    }\n    \n    return vec4(intBitsToFloat(bitsu), intBitsToFloat(bitsd), 0, 0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = life(ivec2(fragCoord));\n    if(iFrame%FRAME_SKIP!=0)fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    if(iFrame==0)\n    {\n        vec2 seed = (fragCoord/iResolution.xy+iDate.w);\n        fragColor = vec4(randPack(seed), randPack(vec2(rand(seed))), 0, 0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}