{
    "Shader": {
        "info": {
            "date": "1487268447",
            "description": "just a lil square dance",
            "flags": 0,
            "hasliked": 0,
            "id": "4dscz4",
            "likes": 19,
            "name": "phyllotaxis",
            "published": 3,
            "tags": [
                "chromaticaberration",
                "blackandwhite",
                "squares"
            ],
            "usePreview": 0,
            "username": "mahalis",
            "viewed": 1353
        },
        "renderpass": [
            {
                "code": "vec2 r(vec2 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return vec2(c * p.x - s * p.y, s * p.x + c * p.y);\n}\n\nfloat sdSquare(vec2 p, float s) {\n\tvec2 d = abs(p) - s;\n\treturn min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\n#define TWO_PI 6.2832\n\nvec2 opRepeatRadial(vec2 p, int sectorCount) {\n    float fSectors = float(sectorCount);\n    float segmentAngle = (floor((atan(p.y, p.x) / TWO_PI - 0.5) * fSectors) + 0.5) * TWO_PI / fSectors;\n    return -r(p, -segmentAngle);\n}\n\nfloat evaluate(vec2 uv, float time, float timeOffset) {\n\tfloat timeOffsetMultiplier = (1. - .8*length(uv)/0.5) * 0.913;\n\tuv *= (1. + .02 * sin(1.13 * time + (timeOffset * timeOffsetMultiplier)));\n\tconst float ringWidth = 0.07;\n\tfloat ringIndex = floor(length(uv) / ringWidth - 0.5) + 0.5;\n\tfloat centerX = (ringIndex + 0.5) * ringWidth;\n\tfloat centerness = 1. - ringWidth * ringIndex;\n\tfloat ringRotation = time * 0.6 * pow(centerness, 4.);\n\tvec2 repeatedUV = opRepeatRadial(r(uv, ringRotation), (int(ringIndex) + 1) * 6);\n\tfloat squareSize = 0.013 + 0.01 * sin(length(uv) * 11.1 + time * 0.6);\n\tfloat d = sdSquare(r(repeatedUV - vec2(centerX, 0.), sin(time * centerness * 2.3 + uv.y * 3.1 - uv.x * 2.3)), squareSize);\n\tfloat value = smoothstep(0., 0.001, d);\n\tvalue = max(max(value, float(ringIndex > 6.)), float(ringIndex < 1.));\n\treturn 1. - value;\n}\n\nvec4 aberrate(vec2 uv, float time) {\n\tfloat aberrationAmount = 0.2 * pow(max(0., 1. - length(uv) * 2.), 1.3) + 0.1 * sin(time * 0.73 + length(uv) * 1.1);\n\treturn (vec4(1.0) - evaluate(uv, time, 0.) * vec4(1,0,0,0) - evaluate(uv, time + aberrationAmount, 1.) * vec4(0,1,0,0) - evaluate(uv, time + 2. * aberrationAmount, 2.) * vec4(0,0,1,0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat aspect = iResolution.y / iResolution.x;\n\t\n\tuv -= 0.5;\n\tuv.y *= aspect;\n\t//uv *= 1.1;\n\n\tfragColor = aberrate(uv, iTime) * aberrate(uv*(1. + .12 * sin(iTime * 0.331)), 4.11 - iTime * 0.96);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}