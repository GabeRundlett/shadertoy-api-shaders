{
    "Shader": {
        "info": {
            "date": "1647123341",
            "description": "Rendering a mandelbulb.",
            "flags": 32,
            "hasliked": 0,
            "id": "fdjfWV",
            "likes": 15,
            "name": "Fake 3D Mandelbulb",
            "published": 3,
            "tags": [
                "3d",
                "mandelbulb",
                "slicing"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 177
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.4545));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "mat2 Rotate2D(in float a) {\n    float co = cos(a), si = sin(a);\n    return mat2(co, si, -si, co);\n}\n\nvec3 cart2pol(in vec3 p) {\n    return vec3(atan(p.z, p.x), atan(p.y, length(p.xz)), length(p));\n}\n\nvec3 pol2cart(in vec3 p) {\n    float cylRadius = cos(p.y);\n    return vec3(cos(p.x) * cylRadius, sin(p.y), sin(p.x) * cylRadius) * p.z;\n}\n\nvoid render(inout vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 2.5;\n    vec4 color = vec4(1.0);\n\n    float time = 0.01 * float(iFrame);\n    //time = mod(time, 10.0);\n\n    vec3 z = vec3(0.0);\n    vec3 c = vec3(uv, 0.25 * time - 1.1).xzy;\n\n    c.xy = Rotate2D(0.25) * c.xy;\n    c.yz = Rotate2D(-0.25) * c.yz;\n\n    // Try n=2 and i<10\n    float n = 8.0;\n    for (int i=0; i < 4; i++) {\n        vec3 s = cart2pol(z);\n        z = pol2cart(vec3(s.xy * n, pow(s.z, n))) + c;\n        if (length(z) > 2.0) {\n            color = vec4(0.0);\n            break;\n        }\n    }\n\n    vec2 bands = cos(cart2pol(c).xy * n);\n    color.rgb *= 0.5 + 0.4 * bands.x * bands.y;\n    color.rgb *= vec3(0.8, 0.3, 0.0);\n\n    //vec2 bands = sin(cart2pol(c).xy * 8.0);\n    //color.rgb *= mix(vec3(0.2), vec3(0.8, 0.2, 0.0), 0.5 + 0.5 * bands.x * bands.y);\n\n    fragColor += color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    render(fragColor, fragCoord);\n    render(fragColor, fragCoord + vec2(0.5, 0.0));\n    render(fragColor, fragCoord + vec2(0.0, 0.5));\n    render(fragColor, fragCoord + 0.5);\n    fragColor /= 4.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = fragCoord / iResolution.xy;\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    float time = 0.01 * float(iFrame);\n    //time = mod(time, 10.0);\n\n    uv.y -= 0.025 * time - 0.1;\n    uv.y /= 0.95;\n    uv = (uv * iResolution.y + 0.5 * iResolution.xy) / iResolution.xy;\n\n    fragColor = texture(iChannel0, st);\n    vec4 slice = texture(iChannel1, uv);\n    fragColor.rgb = mix(fragColor.rgb, slice.rgb, slice.w);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}