{
    "Shader": {
        "info": {
            "date": "1495157853",
            "description": "slightly cleaned special branch of\nhttps://www.shadertoy.com/view/Xs2czK\nmostly just put things into subroutines.",
            "flags": 0,
            "hasliked": 0,
            "id": "ldlBRN",
            "likes": 15,
            "name": "quadtree traversal",
            "published": 3,
            "tags": [
                "tile",
                "quadtree",
                "traversal"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 862
        },
        "renderpass": [
            {
                "code": "//parent=  https://www.shadertoy.com/view/Xs2czK\n//tile traverser QUADtree (lod)\n\n//keep traversing trough [v]-space.\n#define penetrate\n\n#define zoom (1.+.5*cos(iTime*.2))\n\n//detail iterations are wrapped around step iterations:\n#define detail 2\n#define steps 100\n\nvec2 ball;\n\nfloat line(vec2 p,vec2 a,vec2 b){\n vec2 pa=p-a,ba=b-a;\n    float h=clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-ba*h);\n}\n\n//[s]size\nbool isinbox(vec2 a, vec2 b, float s){return all(greaterThan(a,b))&&all(lessThan(a,b+s));}\n\nfloat box(vec2 p, float s){ return length(max(vec2(0.0),abs(p)-s*0.5));}\n\nvoid EnterTileSmaller(inout float s,inout float count, inout vec2 g,inout vec2 f2,inout vec2 f){\n //if(ii==0)break;ii--;\n //ii--;//the workaround for niot being able to modify the loop counter is to modify a second int.\n //i--;//not too backwards compatible, and not too essential.\n //BUT without this decrement, you end up with the same issues as with the \"limes of thr harmonic series\"\n s*=.5;count++;\n g=(g-f2)*2.0;\n f2=step(vec2(1.0),g);\n f+=f2*s;}\nvoid EnterTileLarger(inout float s,inout float count, inout vec2 g,inout vec2 f2,inout vec2 f,in vec2 h,inout vec2 o){\n s*=2.;count--;\n f+=-f2*s/2.+h*s;\n o+=.001*h;//looks like a LAME cheat, is needed to address the right tile. like, literally, the one to the upper right of a border crossing.\n g=mod(o/s-h,2.0)+h;\n f2=floor(g);}\nvoid enterTile(inout vec2 u, inout vec2 o,inout vec2 d,inout float s,inout vec2 g,inout vec2 f2,inout vec2 f,inout vec2 mask,inout float raycol, inout float minxy){\n vec2 dists=abs((sign(d)*.5+.5)-(g-f2))*1./abs(d);\n float m=min(dists.x,dists.y);\n mask=step(dists,vec2(m));\n //dist+=m*s;\n raycol=max(raycol, 1.-minxy*line(u,o,o+m*d*s));//draw ray\n o+=m*d*s;//move ray to next grid border\n g+=m*d;\t\t\t\t\t\t\n f2+=mask*sign(d);\t\t\t\n f +=mask*sign(d)*s;\t//moves to the next grid cell\n raycol=max(raycol,1.-abs(length(o-u)*minxy*.5-.1));//draw yellow circle around where the ray currently is\n}\n\n/* traverse quadtree\n[u]=fragment position (framed)\n[v]=qadtree deforming cicle center. (ininitely small quads at circle surface)\n[o]rayOrigin\n[d]rayDirection\n[raycol] is a brightness that paints the ray for fragment u.\n[O]      is \"fragColor\" output, color to set fragment [u] to.\n//a final color composition [O=max(O,vec4(raycol,raycol,0,1));] paints [raycol] in yellow on top of [O]\n*/\nvoid LoopTraverse(inout vec2 u,inout vec2 v,inout vec2 o,inout vec2 d,inout float raycol,inout vec4 O){\n float s=1.;\n float count=0.,dist=0.;\n float minxy=min(iResolution.x,iResolution.y)*.1;\n vec2 mask=vec2(0.0);\n vec2 f=floor(o);\n vec2 g=o;\n vec2 f2=f;//f2 is a LOCAL f; within [traversal loop]\n int ii=steps;//for backwards compatibility, allowing to avoidind the \"limes of harmonic series\" issue.\n for (int i=0;i<steps;i++){//traversal loop\n  //if(ii==0)break;ii--;\n  bool len=box(f-v+s*.5, s)>1.;\n  #ifndef penetrate\n  //if(count>float(detail)||dist>20.)break;//if(hit [v]) or traversed many tiles.\n   if(count>float(detail))break;//if(hit [v]) or traversed many tiles.\n  #endif\n  if((max(f2.x,f2.y)>1.5||min(f2.x,f2.y)<-.5)&&count>.5)EnterTileLarger(s,count,g,f2,f,mask*sign(d),o);\n  else if(!len&&count<=float(detail))EnterTileSmaller(s,count,g,f2,f);\n  else{\n  if(isinbox(u,f,s))O.r+=.5;//coloring\n  enterTile(u,o,d,s,g,f2,f,mask,raycol,minxy);}}}\n\nfloat box2(vec2 p, float s){ return length(max(vec2(0),abs(p+s)-s));}\n\n\nvoid mainImage(out vec4 O,vec2 U){O=vec4(0);//time=iTime;\n float time0=0.;\n float s=1.;\n vec2 v=vec2(0);//vec2(sin(time0),cos(time0))*(sin(time0*1.34));//sphere that sets quadtree size around it, with infinitisimal small quadtrees on its surface.\n vec2 u=(U*2.-iResolution.xy)/iResolution.y*3.*zoom;\n vec2 f=floor(u),g=fract(u);//f=u-g;\n vec4 m=(abs(iMouse)*2.-iResolution.xyxy)/iResolution.y*zoom;\n for(int i=0;i<detail+1;i++){//detail loop (wraps around the traversal loop)\n  s*=.5;\n  if(box2(f-v,s)>1.)break;\n  f+=floor(g*2.)*s;\n  g =fract(g*2.);    \n  O.b+=.5/float(detail+1);//tint by tile size\n  //O.g+=O.b*.3;\n }\n O.z=max(max(abs(g.x-.5),abs(g.y-.5))*10.-4.,O.z);//paint blue quad-tile borders\n O.g=.2*(step(box(f-v+s*.5,s),1.)); //substract [v]object cubed circle\n //O-=vec4(1.-step(1.,length(v-u)));//substract [v]object circle\n \n //if(m.y<-.9)m=vec4(sin(time),cos(time),0,0)+.5;\n \n int c;\n vec2 o=(m.zw)*3.,d=normalize(-(m.zw)+(m.xy));//[o]rayPos.origin [d]RayDirection\n float raycol=0.;\n LoopTraverse(u,v,o,d,raycol,O);\n O=max(O,vec4(raycol,raycol,0,1)); //add yellow ray color to the screen\n //O+=step(float(detail),count)*.1; //if (ray hits something) add white color to the screen \n}\n \n ",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}