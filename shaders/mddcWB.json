{
    "Shader": {
        "info": {
            "date": "1695494755",
            "description": "99.999% made by afl_ext, I just replaced all the floats with vec4s. Also replaced the hash functions with those from here: https://www.shadertoy.com/view/4djSRW",
            "flags": 0,
            "hasliked": 0,
            "id": "mddcWB",
            "likes": 0,
            "name": "1-4D RGBA Value Noise (fork)",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "3d",
                "noise",
                "4d",
                "1d",
                "value"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 150
        },
        "renderpass": [
            {
                "code": "vec4 oct(float p) {\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\nvec4 oct(vec2 p) {\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\nvec4 oct(vec3 p) {\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nvec4 oct(vec4 p4) {\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nvec4 achnoise(float x){\n\tfloat p = floor(x);\n\tfloat fr = fract(x);\n\tfloat L = p;\n\tfloat R = p + 1.0;\n\t\n\tvec4 Lo = oct(L);\n\tvec4 Ro = oct(R);\n\t\n\treturn mix(Lo, Ro, fr);\n} \n\nvec4 achnoise(vec2 x){\n\tvec2 p = floor(x);\n\tvec2 fr = fract(x);\n\tvec2 LB = p;\n\tvec2 LT = p + vec2(0.0, 1.0);\n\tvec2 RB = p + vec2(1.0, 0.0);\n\tvec2 RT = p + vec2(1.0, 1.0);\n\t\n\tvec4 LBo = oct(LB);\n\tvec4 RBo = oct(RB);\n\tvec4 LTo = oct(LT);\n\tvec4 RTo = oct(RT);\n\t\n\tvec4 noise1d1 = mix(LBo, RBo, fr.x);\n\tvec4 noise1d2 = mix(LTo, RTo, fr.x);\n\t\n\tvec4 noise2d = mix(noise1d1, noise1d2, fr.y);\n\t\n\treturn noise2d;\n} \nvec4 achnoise(vec3 x){ \n\tvec3 p = floor(x);\n\tvec3 fr = fract(x);\n\tvec3 LBZ = p + vec3(0.0, 0.0, 0.0);\n\tvec3 LTZ = p + vec3(0.0, 1.0, 0.0);\n\tvec3 RBZ = p + vec3(1.0, 0.0, 0.0);\n\tvec3 RTZ = p + vec3(1.0, 1.0, 0.0);\n\t                   \n\tvec3 LBF = p + vec3(0.0, 0.0, 1.0);\n\tvec3 LTF = p + vec3(0.0, 1.0, 1.0);\n\tvec3 RBF = p + vec3(1.0, 0.0, 1.0);\n\tvec3 RTF = p + vec3(1.0, 1.0, 1.0);\n\t\n\tvec4 l0candidate1 = oct(LBZ);\n\tvec4 l0candidate2 = oct(RBZ);\n\tvec4 l0candidate3 = oct(LTZ);\n\tvec4 l0candidate4 = oct(RTZ);\n\t\n\tvec4 l0candidate5 = oct(LBF);\n\tvec4 l0candidate6 = oct(RBF);\n\tvec4 l0candidate7 = oct(LTF);\n\tvec4 l0candidate8 = oct(RTF);\n\t\n\tvec4 l1candidate1 = mix(l0candidate1, l0candidate2, fr[0]);\n\tvec4 l1candidate2 = mix(l0candidate3, l0candidate4, fr[0]);\n\tvec4 l1candidate3 = mix(l0candidate5, l0candidate6, fr[0]);\n\tvec4 l1candidate4 = mix(l0candidate7, l0candidate8, fr[0]);\n\t\n\t\n\tvec4 l2candidate1 = mix(l1candidate1, l1candidate2, fr[1]);\n\tvec4 l2candidate2 = mix(l1candidate3, l1candidate4, fr[1]);\n\t\n\t\n\tvec4 l3candidate1 = mix(l2candidate1, l2candidate2, fr[2]);\n\t\n\treturn l3candidate1;\n} \n\n\nvec4 achnoise(vec4 x){ \n\tvec4 p = floor(x);\n\tvec4 fr = fract(x);\n\tvec4 LBZU = p + vec4(0.0, 0.0, 0.0, 0.0);\n\tvec4 LTZU = p + vec4(0.0, 1.0, 0.0, 0.0);\n\tvec4 RBZU = p + vec4(1.0, 0.0, 0.0, 0.0);\n\tvec4 RTZU = p + vec4(1.0, 1.0, 0.0, 0.0);\n\t                 \n\tvec4 LBFU = p + vec4(0.0, 0.0, 1.0, 0.0);\n\tvec4 LTFU = p + vec4(0.0, 1.0, 1.0, 0.0);\n\tvec4 RBFU = p + vec4(1.0, 0.0, 1.0, 0.0);\n\tvec4 RTFU = p + vec4(1.0, 1.0, 1.0, 0.0);\n\t                 \n\tvec4 LBZD = p + vec4(0.0, 0.0, 0.0, 1.0);\n\tvec4 LTZD = p + vec4(0.0, 1.0, 0.0, 1.0);\n\tvec4 RBZD = p + vec4(1.0, 0.0, 0.0, 1.0);\n\tvec4 RTZD = p + vec4(1.0, 1.0, 0.0, 1.0);\n\t                 \n\tvec4 LBFD = p + vec4(0.0, 0.0, 1.0, 1.0);\n\tvec4 LTFD = p + vec4(0.0, 1.0, 1.0, 1.0);\n\tvec4 RBFD = p + vec4(1.0, 0.0, 1.0, 1.0);\n\tvec4 RTFD = p + vec4(1.0, 1.0, 1.0, 1.0);\n\t\n\tvec4 l0candidate1  = oct(LBZU);\n\tvec4 l0candidate2  = oct(RBZU);\n\tvec4 l0candidate3  = oct(LTZU);\n\tvec4 l0candidate4  = oct(RTZU);\n\t\n\tvec4 l0candidate5  = oct(LBFU);\n\tvec4 l0candidate6  = oct(RBFU);\n\tvec4 l0candidate7  = oct(LTFU);\n\tvec4 l0candidate8  = oct(RTFU);\n\t\n\tvec4 l0candidate9  = oct(LBZD);\n\tvec4 l0candidate10 = oct(RBZD);\n\tvec4 l0candidate11 = oct(LTZD);\n\tvec4 l0candidate12 = oct(RTZD);\n\t\n\tvec4 l0candidate13 = oct(LBFD);\n\tvec4 l0candidate14 = oct(RBFD);\n\tvec4 l0candidate15 = oct(LTFD);\n\tvec4 l0candidate16 = oct(RTFD);\n\t\n\tvec4 l1candidate1 = mix(l0candidate1, l0candidate2, fr[0]);\n\tvec4 l1candidate2 = mix(l0candidate3, l0candidate4, fr[0]);\n\tvec4 l1candidate3 = mix(l0candidate5, l0candidate6, fr[0]);\n\tvec4 l1candidate4 = mix(l0candidate7, l0candidate8, fr[0]);\n\tvec4 l1candidate5 = mix(l0candidate9, l0candidate10, fr[0]);\n\tvec4 l1candidate6 = mix(l0candidate11, l0candidate12, fr[0]);\n\tvec4 l1candidate7 = mix(l0candidate13, l0candidate14, fr[0]);\n\tvec4 l1candidate8 = mix(l0candidate15, l0candidate16, fr[0]);\n\t\n\t\n\tvec4 l2candidate1 = mix(l1candidate1, l1candidate2, fr[1]);\n\tvec4 l2candidate2 = mix(l1candidate3, l1candidate4, fr[1]);\n\tvec4 l2candidate3 = mix(l1candidate5, l1candidate6, fr[1]);\n\tvec4 l2candidate4 = mix(l1candidate7, l1candidate8, fr[1]);\n\t\n\t\n\tvec4 l3candidate1 = mix(l2candidate1, l2candidate2, fr[2]);\n\tvec4 l3candidate2 = mix(l2candidate3, l2candidate4, fr[2]);\n\t\n\tvec4 l4candidate1 = mix(l3candidate1, l3candidate2, fr[3]);\n\t\n\treturn l4candidate1;\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\t\n\tvec2 position = (uv) * 100.0;\n\n\tvec4 color = vec4(0);\n\t\n\tif(uv.x < 0.5 && uv.y < 0.5){\n\t\tcolor = achnoise(position.x);\t\n\t}\n\telse if(uv.x > 0.5 && uv.y < 0.5){\n\t\tcolor = achnoise(position);\t\n\t}\n\telse if(uv.x < 0.5 && uv.y > 0.5){\n\t\tcolor = achnoise(vec3(position, iTime));\t\n\t}\n\telse if(uv.x > 0.5 && uv.y > 0.5){\n\t\tcolor = achnoise(vec4(position, iMouse.x / iResolution.x, iTime));\t\n\t}\n\tfragColor = vec4(vec3(color),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}