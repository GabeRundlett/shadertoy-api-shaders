{
    "Shader": {
        "info": {
            "date": "1581026199",
            "description": "In my imaginary world any object is drawn in following steps: coordinates, geometry, graphics, coloring. Each step has it's math and tweaks. Some tweaks are optional and some do actual job. And that's why GLSL is hard for me: not all tweaks are optional.",
            "flags": 0,
            "hasliked": 0,
            "id": "3t3SW7",
            "likes": 1,
            "name": "rounded rect version 3",
            "published": 3,
            "tags": [
                "rect",
                "rounded"
            ],
            "usePreview": 0,
            "username": "dmitrykolesnikovich",
            "viewed": 507
        },
        "renderpass": [
            {
                "code": "// Here I am trying to find intuition behind known \n// formulas by giving all variables human-readable names.\n\n/*\nIn my imaginary world any object is drawn in following steps:\n\tcoordinates\n\tgeometry\n\tgraphics\n\tcoloring\n\nEach step has it's math and tweaks. Some tweaks are optional and some do actual job. \nAnd that's why GLSL is hard for me: not all tweaks are optional.\n\nAll objects are added to canvas with +=. Canvas itself is init with vec4(0).\n*/\n\n/*standard*/\n\n#define normalization(p) (2.*p - iResolution.xy) / iResolution.y\n\n/*support*/\n\n#define radius 0.1\n#define size vec2(1)\n#define quadrantSize size / 2. \n#define center vec2(.2)\n#define VIOLET vec4(0.8, 0.8, 1, 1)\n#define bounceAnimation sin(iTime * .4) * .1 - .1\n\n/*objects*/\n\nvec4 RoundBox(vec2 p) {\n    // coordinates\n    p = abs(p - center); // translate to center with simmetry tweak\n    p -= quadrantSize; // translate to quadrant corner\n    p += radius; // tweak to fix result value without any beatiful conceptual explanation\n\n    // geometry\n    float dist = length(max(p, 0.)); // convert cs from cortesian to polar with required tweakery that does the job\n    float geometry = smoothstep(0., 0.01, dist - radius);\n    \n    vec4 graphics = vec4(1. - geometry);\n    \n    vec4 coloring = graphics * VIOLET;\n    return coloring;\n}\n\n/*canvas*/\n\nvoid mainImage(out vec4 canvas, in vec2 pixel) {\n    vec2 p = normalization(pixel);\n    canvas = vec4(0);\n    canvas += RoundBox(p);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}