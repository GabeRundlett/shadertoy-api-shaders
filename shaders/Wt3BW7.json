{
    "Shader": {
        "info": {
            "date": "1612811556",
            "description": "potate ",
            "flags": 32,
            "hasliked": 0,
            "id": "Wt3BW7",
            "likes": 13,
            "name": "Day 419",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 343
        },
        "renderpass": [
            {
                "code": "// Fork of \"day 418\" by jeyko. https://shadertoy.com/view/tt3BD4\n// 2021-02-08 17:12:41\n\n// Fork of \"Day 417 \" by jeyko. https://shadertoy.com/view/wt3fD8\n// 2021-02-07 20:32:07\n\n// influenced by blackle's https://www.shadertoy.com/view/3dXfR2 !!\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord -= 0.5*iResolution.xy;\n    fragCoord *= 0.9;\n    fragCoord += 0.5*iResolution.xy;\n    \n    float n1d = texelFetch(iChannel1,ivec2(mod(fragCoord + vec2(float(iFrame),0.),256.)),0).x;\n    vec3 n  = texelFetch(iChannel1,ivec2(mod(fragCoord  + n1d*200. ,256.)),0).xyz;\n    \n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    fragColor.xyz =texture(iChannel0,fragCoord/iResolution.xy).xyz;\n    \n    //fragColor.xyz = pow(fragColor.xyz, vec3(1.,1.2,1.2));\n    \n    //fragColor.xyz = 1. - fragColor.xyz;\n    \n    //fragColor.xyz *= 1. - dot(uv,uv)*0.8;\n    fragColor.xyz = pow(fragColor.xyz, vec3(0.4545 + n*0.1));\n    \n    \n    \n    \n    \n    fragColor.xyz += smoothstep(1.,0.,length(fragColor))*n*0.04;\n    \n    fragColor.xyz -= smoothstep(0.,1.,length(fragColor))*n*0.05;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nmat3 getOrthogonalBasis(vec3 dir){\n    vec3 right = normalize(cross(vec3(0,1,0), dir));\n    vec3 up = normalize(cross(dir, right));\n    return mat3(right,up,dir);\n}\n\nfloat cyclicNoise(vec3 p){\n    \n    //p.yz *= rot(1.4);\n    \n    float n = 0.;\n    float amp = 1.;\n    float gain = 0.5;\n    float lac = 1.1 ;\n    \n    vec3 seed = normalize(vec3(3,-1,2));\n    mat3 rotm = getOrthogonalBasis(seed);\n\n    for(float i = 0.; i < 5.; i++){\n        p -= cos(p.zxy*1.5*gain*2. + iTime + i)*0.1;\n        n += (dot(sin(p), cos(p.zxy)))*amp;\n    \n        amp *= gain;\n        p *= lac*rotm;\n\n    }\n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    vec2 oouv = uv;\n    \n    \n    uv *= 1.5;\n    \n    \n    vec3 col = vec3(0.7,0.9,0.9)*1.2;\n    \n    float n = cyclicNoise(vec3(uv*5.,iTime*0.5 + 4.));\n    \n    n = cyclicNoise(vec3(uv*10. + n*1.15,iTime));\n        \n    float nb = cyclicNoise(vec3(uv*5.,iTime));\n    \n    float vn = valueNoise(iTime*0.25,5.);\n    float vnb = valueNoiseStepped(iTime/2. + n*0.*pow(vn,0.5) + 5.,2.,4.);\n    float vnc = valueNoiseStepped(iTime/2.,4.,4.);\n    \n    \n    float dfuv = fwidth(length(uv));\n    \n    vec2 d = vec2(24,1.);\n    vec2 p = uv;\n        \n    \n    for(float j = 0.; j < 2.; j++){\n        float reps = 13.;\n        float s = 0.45 - vn*0. + sin(j + iTime)*0.1*vn;\n    \n        float gain = s*1.6 - vnc*0.3;\n        for(float i = 0.; i < reps; i++){\n            float modder = mod(iTime + 7.,10.);\n            p *= rot(0.2*smoothstep(4.,3.,modder)*smoothstep(0.,0.4,modder));\n            //p *= rot(sin(i*pi*1. + 0.5)*pi/vnc*0.25);\n            float circle = length(p) - log(s + 1.);\n            float news = s*gain;\n            \n            float offs = 0.;\n            \n            if(j == 0.)\n                offs = log(s-news +1. + sin(iTime + i)*0.38 );\n            else\n                offs = -log(s-news +1. + sin(iTime + i)*0.38 );\n            offs *= 0.3 + vnb;\n            p.x -= offs; \n            s = news;\n            //d.y += 1.;\n            //d = dmin(d,circle,d.y + 1.);\n            if( !(j == 1. && i == 0.))\n                d.y = mix(d.y, d.y + 1. + p.y*2.,smoothstep(dfuv*1.,0.,circle ));\n        \n        }\n    }\n     \n    vec2 idu = floor(uv/0.75*4.);\n    //d.y = mix(d.y, d.y + 1.,smoothstep(dfuv*1.,0.,uv.x ));\n    \n    uv = pmod(uv,0.75/4.);\n    float vnd = valueNoiseStepped(iTime/2. + idu.y*0.2,4.,4.);\n    \n    d.y = mix(d.y, d.y + idu.y*0.4,smoothstep(dfuv*1.,0.,uv.y - 0.2 + vnc*0. + uv.y*1. + 0. + vnc*0.1 + vnd*0.5 ));\n    \n    \n    float md = 0.75*0.5*0.5;\n    p = uv;\n    vec2 id = floor(p/md);\n    p = pmod(p,md);\n    \n    vec3 c = pal(0.5,.5*vec3(1.,0.8,0.2),vec3(1. ,2.,1. - d.y*4. ),1.,0. + d.y*1. + 7. + iTime*1. + uv.y*0.));\n    col = c;\n    \n    col = mix(col, 1. - col, \n        //step(0.4,valueNoiseStepped(iTime*25.,2.,4.)) *\n        step(0.3,valueNoiseStepped(iTime/2.5 ,2.,2.))\n        \n        );\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float sc = 0. + valueNoise(iTime*14.,2.)*0.1 ;\n    \n    fragColor.x =texture(iChannel0,(fragCoord + sc*vec2(0,8))/iResolution.xy).x;\n    \n    fragColor.y =texture(iChannel0,(fragCoord + sc*vec2(0,-1))/iResolution.xy).y;\n    \n    fragColor.z =texture(iChannel0,(fragCoord + sc*vec2(0,-4))/iResolution.xy).z;\n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define pi acos(-1.)\n\n\n#define sint(a) (asin(sin(a))*2. - 1.)\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define pmod(p,d) mod(p - (d)*0., (d)) - 0.5*(d)\n\n#define pal(a,b,c,d,e) (a + (b)*sin((c)*(d) + (e))\n\nfloat r11(float i){ return fract(sin(i*12.126)*5.6);}\n\n#define xor(a,b,c) min(max((a),-(b)), max((b),-(a) - c)) \n\nfloat ss( float c, float power, float bias){\n    c = clamp(c,-0.,1.);\n    //c = smoothstep(0.,1.,c);\n    \n    c = pow(c,1. + bias);\n    \n    float a = pow( abs(c), power);\n    float b = 1.-pow( abs(c - 1.), power);\n    \n    return mix(a,b,c);\n}\nfloat valueNoise(float i, float p){ return mix(r11(floor(i)),r11(floor(i) + 1.), ss(fract(i), p,0.6));}\n\nfloat valueNoiseStepped(float i, float p, float steps){ return mix(  floor(r11(floor(i))*steps)/steps, floor(r11(floor(i) + 1.)*steps)/steps, ss(fract(i), p,0.6));}\n\n\n#define dmin(a,b,c) (max(a.x,-b) < b ? a : vec2(b,c))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}