{
    "Shader": {
        "info": {
            "date": "1595408725",
            "description": "Stellated octahedron from two sierpinskified tetrahedra",
            "flags": 0,
            "hasliked": 0,
            "id": "3tjcWV",
            "likes": 14,
            "name": "Sierpinski Star",
            "published": 3,
            "tags": [
                "fractal",
                "tetrahedron",
                "kifs"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 404
        },
        "renderpass": [
            {
                "code": "// \"Sierpinski Star\" by dr2 - 2020\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrTetDf (vec3 p, float d);\nvec3 HsvToRgb (vec3 c);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\n\nfloat tCur, dstFar;\nint idObj;\nconst float pi = 3.1415927;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat Sierp3 (vec3 p)\n{\n  float s;\n  s = 1.;\n  for (int k = 0; k < 8; k ++) {\n    p.xy = (p.x + p.y > 0.) ? p.xy : - p.yx; \n    p.yz = (p.y + p.z > 0.) ? p.yz : - p.zy; \n    p.zx = (p.z + p.x > 0.) ? p.zx : - p.xz; \n    p = 2. * p - 1.;\n    s *= 0.5;\n  }\n  return s * PrSphDf (p, 2.5);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  for (float k = -1.; k <= 1.; k += 2.) {\n    q = p;\n    q.y *= k;\n    q.xz = Rot2D (q.xz, - k * pi / 6.);\n    q.xy = Rot2D (q.xy, pi / 2. -0.5 * acos (1./3.));\n    q.xz = Rot2D (q.xz, pi / 4.);\n    d = Sierp3 (q);\n    DMIN (1);\n    d = PrTetDf (q, 0.25);\n    DMIN (2);\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 80; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = 0; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = 0; j < 20; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 ltPos[4], ltDir, col, vn, c, dfTot, spTot;\n  float dstObj, at, vDotL, sh;\n  for (int k = 0; k < 3; k ++) {\n    ltPos[k] = vec3 (0., 1., 3.);\n    ltPos[k].xz = Rot2D (ltPos[k].xz, float (k) * 2. * pi / 3. -0.1 * pi * tCur);\n  }\n  ltPos[3] = vec3 (0., 3., 0.);\n  ltPos[3].xy = Rot2D (ltPos[3].xy, pi * (0.05 + 0.04 * sin (0.14 * pi * tCur)));\n  ltPos[3].xz = Rot2D (ltPos[3].xz, 0.1 * pi * tCur);\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) col4 = vec4 (1., 1., 1., 1.);\n    else col4 = vec4 (1., 1., 0.5, 0.2);\n    dfTot = vec3 (0.);\n    spTot = vec3 (0.);\n    for (int k = 0; k < 4; k ++) {\n      ltDir = normalize (ltPos[k]);\n      at = smoothstep (0.7, 0.95, dot (normalize (ltPos[k] - ro), ltDir));\n      sh = ObjSShadow (ro, ltDir);\n      c = HsvToRgb (vec3 (0.25 * float (k), 1., 1.));\n      vDotL = max (dot (vn, ltDir), 0.);\n      dfTot += col4.rgb * c * at * sh * vDotL * vDotL;\n      spTot += col4.a * c * at * step (0.95, sh) * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.);\n    }\n    col = dfTot + spTot;\n  } else {\n    col = vec3 (0.1);\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, t, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.2 * pi;\n  el = -0.15 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    t = floor (tCur / 5.) + smoothstep (0.9, 1., mod (tCur / 5., 1.));\n    az += 0.22 * pi * t;\n    el += 0.2 * pi * sin (0.1 * pi * t);\n  }\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 0., -10.);\n  zmFac = 5.5;\n  dstFar = 20.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = 0.; a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrTetDf (vec3 p, float d)\n{\n  vec2 e = vec2 (1., -1.);\n  return (max (max (dot (p, e.yxx), dot (p, e.xyx)), max (dot (p, e.xxy), dot (p, e.yyy))) - d) / sqrt (3.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}