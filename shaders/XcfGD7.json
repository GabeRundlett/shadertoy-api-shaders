{
    "Shader": {
        "info": {
            "date": "1703220093",
            "description": "a",
            "flags": 0,
            "hasliked": 0,
            "id": "XcfGD7",
            "likes": 10,
            "name": "Raymarching - bendy 3d shaplines",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "sancho1509",
            "viewed": 317
        },
        "renderpass": [
            {
                "code": "\n// Shpaes distance func\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nfloat sdPyramid( vec3 p, float h )\n{\n  float m2 = h*h + 0.25;\n    \n  p.xz = abs(p.xz);\n  p.xz = (p.z>p.x) ? p.zx : p.xz;\n  p.xz -= 0.5;\n\n  vec3 q = vec3( p.z, h*p.y - 0.5*p.x, h*p.x + 0.5*p.y);\n   \n  float s = max(-q.x,0.0);\n  float t = clamp( (q.y-0.5*p.z)/(m2+0.25), 0.0, 1.0 );\n    \n  float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n  float b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);\n    \n  float d2 = min(q.y,-q.x*m2-q.y*0.5) > 0.0 ? 0.0 : min(a,b);\n    \n  return sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-p.y));\n}\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\n//Utils\n\nfloat smin(float a, float b, float k)\n{\n    float h = max(k- abs(a-b), 0.0)/k;\n    return min(a,b) - h*h*h*k*(1.0/6.0);\n}\n\nvec3 rot3D(vec3 p, vec3 axis, float angle)\n{\n    return mix(dot(axis,p) * axis, p, cos(angle)) + cross(axis,p) * sin(angle);\n}\n\nmat2 rot2D(float angle)\n{\n     float s = sin(angle);\n     float c = cos(angle);\n     \n     return mat2(c, -s, s, c);\n}\n\n\n// Custom gradient - https://iquilezles.org/articles/palettes/\nvec3 palette(float t) {\n    float time = iTime*0.05;\n    time += 230.; // Time offset\n    vec3 vector = vec3(\n        clamp( smoothstep(0.2, 0.8, 0.8 + 0.5 * sin(0.6 * time)), 0.3, .7),\n        clamp( smoothstep(0.2, 0.8, 0.5 + 0.5 * cos(0.8 * time + 2.0)), 0.5, .6),\n        clamp( smoothstep(0.2, 0.8, 0.5 + 0.5 * sin(1.5 * time + 4.0)), 0.2, .4)\n    );\n\n    return .5+.5*cos(6.28318*(t+vector));\n}\n\nfloat movementCurve( float x) {\n    return -2.0 / (1.0 + exp(-10.0 * (0.5 * x - 0.5))) + 1.0;\n}\n\nfloat PI = 3.1416;\nfloat fovMult(float x, float a, float d) \n{\n    return a + d + sin(PI * x - sqrt(PI)) * a;\n}\n\n//Render\nfloat map(vec3 p)\n{\n    vec3 q = p;\n    \n    q.z +=  iTime*-1.;//smootherstep(0.,1.,sin(iTime));\n    \n    \n    q.xy = fract(vec2(q.x, q.y)) - .5;\n    q.z = mod(q.z, .3) - .125;\n    \n    float size = 1.;\n    float oct = sdEllipsoid(q, vec3(fovMult(iTime*0.1, 0.6, 0.)*.3));\n    //float oct = sdTorus(q, vec2(fovMult(iTime*0.05, 0.6, 0.1)/2., fovMult(iTime*0.05, 0.6, 0.1)/10.));\n    \n    return oct;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    \n    \n    //Movement\n    vec2  m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    if (iMouse.z < 0.) \n        m = vec2(cos(iTime*.05), sin(iTime*.25));\n    \n        \n    \n    vec3 ro = vec3(0,0,-5);           //Ray origin\n    vec3 rd = normalize(vec3(uv/(5.*fovMult( iTime*0.01, 0.57, 0.03)),1));  // Ray direction\n    vec3 col = vec3(0);\n    \n    float t = 0.;                     //Distance travelled\n    \n    int i = 0;\n    for( ;i < 130; i++)\n    {\n        vec3 p = ro + rd*t;\n        //Sound\n        // the sound texture is 512x2\n        int tx = int((t/10000.)*512.0);\n\n        // first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n        float fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x; \n\n        float wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x;\n        \n        \n        p.y += 0.5* sin(t*(m.y+1.)*.5)*.7;\n        p.xy *= rot2D(t*.2*m.x);\n        p.y += asin(cos(tan(cos(t+6.*fovMult(iTime*0.02, 0.8, 0.3)))*fft)/10.) ;\n        \n        p.y += 0.5*cos(t*(m.y+1.5)*.5)*.7;\n        \n        float d = map(p);\n        \n        t += d;\n        \n        if(t >= 10000. || d <= 0.0003) break;\n        \n    }\n    \n    \n    col = palette(t*0.01+float(i)*0.01);\n    \n    fragColor = vec4(col,1);\n    \n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 35,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}