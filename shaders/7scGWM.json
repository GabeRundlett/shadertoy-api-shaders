{
    "Shader": {
        "info": {
            "date": "1630027804",
            "description": "a 2d physics example\nclick on a ball to pick it up and release to throw it\n\ninelastic collisions from: https://imada.sdu.dk/~rolf/Edu/DM815/E10/2dcollisions.pdf",
            "flags": 32,
            "hasliked": 0,
            "id": "7scGWM",
            "likes": 5,
            "name": "physics test",
            "published": 3,
            "tags": [
                "physics",
                "buffers"
            ],
            "usePreview": 0,
            "username": "ArmandB",
            "viewed": 481
        },
        "renderpass": [
            {
                "code": "//Image\n//all the drawing stuff\n\nvec2 toUV(vec2 pos){\n    pos = pos/iResolution.xy*1000.0-500.0;\n    pos.x *= iResolution.x/iResolution.y;\n    return pos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //set uv coords + col\n    vec2 uv = toUV(fragCoord);\n    vec3 col = vec3(0);\n    ivec2 iCoord = ivec2(fragCoord);\n    \n    //draw walls\n    if (!(\n        uv.x < walls.x &&\n        uv.x > walls.z &&\n        uv.y < walls.y &&\n        uv.y > walls.w\n    )){ \n        col = vec3(1); \n        //show data storage\n        if(texelFetch(iChannel0, ivec2(iCoord), 0) != vec4(0)){\n            col = texelFetch(iChannel0, ivec2(iCoord), 0).xyz;\n        }\n    } \n    else { \n        //loop through balls\n        for (int i = 0; i < ballCount; i++){\n            //read data\n            vec2 position = texelFetch(iChannel0, ivec2(loopCoord(float(i), vec2(iResolution))), 0).xy;\n            //draw object\n            if ( distance(uv, position) <= radius ){ \n                col = (i==0) ? vec3(1,0.5,0) : vec3(0,float(i)/float(ballCount), 1.0 - float(i)/float(ballCount)); \n                //col = ;\n            }\n        }\n    }\n  \n    // Output to screen\n    fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Parameters\n//all parameters for the simulation\nconst vec2 acceleration = vec2(0.0, -0.2); //divide by target fps\nconst float radius = 50.0;\nconst float bounciness = 1.0;\nconst int ballCount = 5; //current max ballcount is canvas size.x\nconst vec4 walls = vec4(890, 500, -890, -500);\n\n//loops a point over the screen width\nvec2 loopCoord(float coord, vec2 resolution){\n    float y = floor(coord/(resolution.x-1.0));\n    float x = mod(coord, (resolution.x-1.0));\n    return vec2(x, y);\n}\n\n//unloops a point over the screen width\nfloat unLoop(vec2 coord, vec2 resolution){\n    return coord.x + resolution.x*coord.y;\n}\n\nfloat rand(int i){ // a (weak) random  function\n    vec2 o = vec2(i);\n    o = sin(vec2(iDate.w * o.x, iDate.w * o.y * 11.0));\n    return fract(sin(dot(o, vec2(12.9898, 78.233))) * 43758.5453);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//Buff A\n//all the motion stuff, but with continuous collision detection\n\n//add interpolation so balls can't go through eachother\n//optimize?\n\nvec2 toUV(vec2 pos){ //converts a screen coord to a uv coord\n    pos = pos/iResolution.xy*1000.0-500.0;\n    pos.x *= iResolution.x/iResolution.y;\n    return pos;\n}\n\nfloat collideTime(vec2 p1, vec2 v1, vec2 p2, vec2 v2, float r1, float r2){\n    //constants for the equation\n    float a = p1.x;\n    float b = p1.y;\n    float c = v1.x;\n    float d = v1.y;\n    float e = p2.x;\n    float f = p2.y;\n    float g = v2.x;\n    float h = v2.y;\n    float i = r1;\n    float j = r2;\n\n    //solves for t when:\n    //((p2.x + v2.x*t) - (p1.x + v1.x*t))^2 + ((p2.y + v2.y*t) - (p1.y + v1.y*t))^2 - radius1 + radius2 = 0\n    //this means it finds the time that the 2 balls will colide where time is 0 (this frame) to 1 (next frame)\n    float A = c*c + d*d + g*g + h*h - 2.0*c*g - 2.0*d*h;\n    float B = 2.0*(a*c + b*d + e*g + f*h - a*g - b*h - e*c - f*d);\n    float C = a*a + b*b + e*e + f*f - 2.0*(a*e + b*f) - i*i - 2.0*i*j - j*j;\n\n    float discriminant = B*B - 4.0*A*C;\n    if ( discriminant >= 0.0){ //check that quadratic equation has root\n        return (-B - sqrt(discriminant)) / (2.0*A); //run quadratic formula for smallest root\n    }\n    return -1.0;\n        \n}\n\nvoid wallCollision(inout vec2 v, inout vec2 p, in float r){\n    vec2 penetration = vec2(0);\n    if (p.x + r > walls.x) {\n        v = v*vec2(-1,1);\n        if (p.x + r - walls.x > 0.0)\n            penetration.x = p.x + r - walls.x;\n    }\n    if (p.y + r > walls.y) {\n        v = v*vec2(1,-1);\n        if (p.y + r - walls.y > 0.0)\n            penetration.y = p.y + r - walls.y;\n    }\n    if (p.x - r < walls.z) {\n        v = v*vec2(-1,1);\n        if (p.x - r - walls.z < 0.0)\n            penetration.x = p.x - r - walls.z;\n    }\n    if (p.y - r < walls.w) {\n        v = v*vec2(1,-1);\n        if (p.y - r - walls.w < 0.0)\n            penetration.y = p.y - r - walls.w;\n    }\n    p -= penetration;\n    return;\n}\n\nvoid ballCollision(inout vec2 p1, inout vec2 p2, inout vec2 v1, inout vec2 v2, in float r1, in float r2){\n\n    float m1 = 1.0;\n    float m2 = 1.0;\n\n    vec2 n = normalize(p2 - p1);//the normal of the collision\n    vec2 t = vec2(-n.y, n.x);//the tangent of the collision (perpendicular to normal)\n    \n    float v1n = dot(v1,n);//v1 projected onto normal\n    float v2n = dot(v2,n);//v2 projected onto normal\n    float v1t = dot(v1,t);//v1 projected onto tangent\n    \n    float s1f = (v1n*(m1-m2)+2.0*m2*v2n)/(m1+m2);//the final speed of v1 along the normal vector\n    \n    vec2 v1f = s1f*n + v1t*t; //the final velocity of ball1\n    \n    float penetration = r1+r2-length(p2 - p1);\n    if (penetration < r1+r2){\n        p1 += n*penetration;\n    }\n    \n    v1 = v1f;\n    return;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0); //initialize col\n    ivec2 iCoord = ivec2(fragCoord); //set up coords\n    \n    //setup mouse\n    vec4 m = vec4(toUV(iMouse.xy), toUV(iMouse.zw)); //get the mousepos in uv units\n    vec2 prevMousePos = texelFetch(iChannel0, ivec2(0, iResolution.y-1.0), 0).xy;\n    if (prevMousePos == vec2(0)){\n        prevMousePos = m.xy;\n    }\n    vec2 mouseVel = m.xy-prevMousePos;\n    if (length(mouseVel) >= 30.0){\n        mouseVel = normalize(mouseVel)*30.0;\n    }\n    int heldball = int(texelFetch(iChannel0, ivec2(1, iResolution.y-1.0), 0).x);\n    if (texelFetch(iChannel0, ivec2(1, iResolution.y-1.0), 0).y == 0.0){\n        heldball == -1;\n    }\n    \n    //loopthrough balls\n    for (int i = 0; i < ballCount; i++){\n        //get ball pos\n        vec4 position = texelFetch(iChannel0, ivec2(loopCoord(float(i), vec2(iResolution))), 0);\n        \n        //check if mouse is holding\n        if(\n            m.z + 1000.0 > 0.0 && (\n                heldball == i || (\n                    distance(position.xy, m.xy) <= radius &&\n                    heldball == -1\n                )\n            )\n        ){ //if mouse is over ball, pick up\n            heldball = i; \n        } else if(m.z + 1000.0 <= 0.0){\n            heldball = -1;\n        }\n    }\n    \n    \n    //main physics\n    if (float(iCoord.y) <= loopCoord(float(ballCount), vec2(iResolution)).y && unLoop(vec2(iCoord), vec2(iResolution)) <= float(ballCount)){\n        int i = iCoord.x;\n        \n        //read data\n        vec4 position = texelFetch(iChannel0, ivec2(loopCoord(float(i), vec2(iResolution))), 0);\n        \n        if (position.zw == vec2(0,0) && iTime < 1.0) //set init velocity\n            position.zw = vec2(1.0);\n            \n        //deal with acceleration\n        position.zw += acceleration;\n        \n        //bounce (balls)\n        //loop through the other balls\n        for (int c = 0; c < ballCount; c++){ \n            if (c == i){continue;} //skip if ball is attempting bounce on self\n            if (heldball == i){break;}\n            vec4 otherPosition = texelFetch(iChannel0, ivec2(loopCoord(float(c), vec2(iResolution))), 0);\n\n            vec2 p1 = position.xy;\n            vec2 p2 = otherPosition.xy;\n            vec2 v1 = position.zw;\n            vec2 v2 = otherPosition.zw;\n            float r1 = radius;\n            float r2 = radius;\n            \n            if (distance(p1, p2) <= radius*2.0){ //deal with current frame collisions\n                if(p1.xy == p2.xy){ //handle case where 2 pos are same\n                    p1.xy += vec2(1.0-rand(c),rand(c))*radius;\n                }\n                ballCollision(p1, p2, v1, v2, r1, r2);\n            } else {\n                float t = collideTime(p1, v1, p2, v2, radius, radius);\n                if(!(t > 1.0 || t < 0.0)){ //deal with between frame collisions\n                    p1 += t*v1;\n                    p2 += t*v2;\n                    ballCollision(p1, p2, v1, v2, r1, r2);\n                }\n                \n            }\n            position = vec4(p1, v1);\n        }\n        \n        //get mouse inputs\n        if(heldball == i){ //if ball is held, move to mouse\n            position.xy = m.xy;\n            position.zw = mouseVel;\n        }\n        \n        //bounce(walls)\n        wallCollision(position.zw, position.xy, radius);\n\n        //itterate position\n        position.xy += position.zw;\n\n        //write data\n        col = position;\n    } else {\n        //write mouse pos to be read back for velocity\n        if (vec2(iCoord) == vec2(0, iResolution.y-1.0)){\n            col = vec4(m.xy, mouseVel);\n        } else if(vec2(iCoord) == vec2(1, iResolution.y-1.0)){ //what ball is held? (fix)\n            col = vec4(heldball,1.0,1.0,1.0);\n        }\n    }\n    \n    //set colors\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}