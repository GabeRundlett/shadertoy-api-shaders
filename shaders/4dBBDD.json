{
    "Shader": {
        "info": {
            "date": "1500396803",
            "description": "Based on https://www.shadertoy.com/view/ldBfDR but allowing myself a few more characters.\nI really just wanted to showcase using textureLod to sample lower mips for the scattering effect.\n",
            "flags": 65,
            "hasliked": 0,
            "id": "4dBBDD",
            "likes": 38,
            "name": "Lava Planet Unlimited",
            "published": 3,
            "tags": [
                "terrain",
                "lava",
                "volcanic"
            ],
            "usePreview": 0,
            "username": "P_Malin",
            "viewed": 2824
        },
        "renderpass": [
            {
                "code": "vec3 T(vec2 c, bool sky )\n{\n    vec4 t = texture(iChannel0,c*.1);\n    \n    if ( sky )\n    {\n        t = t * .75 + texture(iChannel0,c*.2 + iTime * .02) * .25;\n        t = pow(t,vec4(.6));\n    }\n    \n    return t.rgb;\n}    \n\nvec3 TraceRay( vec3 vRayOrigin, vec3 vRayDir )\n{\n    vec3 vRayOffest;\n    vec3 g, t, l; \n    \n    vec3 vWorldPos;\n\t\n    vRayDir.z += vRayDir.y * .5;\n    \n    vRayOffest = vec3(0);\n    vec3 vFog = vec3(0);\n        \n    vec3 pPrev = vRayOffest;\n    \n    bool sky = vRayDir.y > 0.;\n    \n    vec2 vTextureUV;\n    \n    for ( float h=0.; h<.6; h+=.001 )\n    {        \n        vRayOffest = vRayDir * h / vRayDir.y;\n        vWorldPos = vRayOrigin + vRayOffest;\n    \tif (sky )\n        {\n        \tvWorldPos.xz *= .2;\n            vWorldPos.xz += iTime * 0.25;\n        }\n        \n\t\tvTextureUV = vWorldPos.xz;\n\t\tl = T( vTextureUV, sky );\n\t\tt = textureLod( iChannel1, vTextureUV, 15. * (l.x-vRayOffest.y) ).rgb;\n\t\tg = pow( l*t,\n                    t+7. \n\t\t\t\t\t+ sin(vRayOffest.x * 5. + iTime)\n\t\t\t\t\t+ sin(vRayOffest.z * 5. + iTime)                                                                           \n\t\t\t\t) * h;\n        \n        vec3 pDelta = pPrev - vRayOffest;\n        vFog.rgb+= g * exp(length(pDelta.xyz) * .4);\n        \n        if (vRayOffest.y >= l.x )\n            break;        \n\t}\n            \n            \n    l -= T( vTextureUV - .1, sky );\n\n    \n    if ( vRayDir.y > 0. )\n        l += vec3(0.4, 0.3, 0.2);\n    else \n        l += vec3(0.2, 0.3, 0.4);\n    \n    vec3 vResult = vec3(0);\n    \n    vResult = vFog +\n         t * l \n        + g * 1e3\n        \t* vRayOffest.y \n        ;\n    \n    if ( vRayDir.y > 0. )\n        vResult = vResult.zyx;\n    \n    vResult *= exp( -dot(vRayOffest, vRayOffest)*.03);\n        \n    vResult = 1. - exp(-vResult * 1.5);     \n    \n    return vResult;\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    vec3 vRayOrigin, vRayDir;\n    \n    vRayDir = vec3( fragCoord / iResolution.y, 1 );\n\n    vRayDir.xy -= 0.5 * iResolution.xy / iResolution.y;\n    vRayDir = normalize(vRayDir);\n    \n    vRayOrigin = vec3(.01, 0, -.2)*iTime;\n    \n \n    vec3 vResult = TraceRay( vRayOrigin, vRayDir );\n    \n    fragColor = vec4( vResult, 0 );\n}\n\n\nvoid mainVR( out vec4 vFragColor, in vec2 vFragCoord, in vec3 vRayOrigin, in vec3 vRayDir )\n{\n    vec3 vResult = TraceRay( vRayOrigin, vRayDir );\n    \n    vFragColor = vec4( vResult, 0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    },
                    {
                        "channel": 2,
                        "ctype": "musicstream",
                        "id": 11279,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/eat-static-official/uforic-undulance"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}