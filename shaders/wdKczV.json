{
    "Shader": {
        "info": {
            "date": "1603293906",
            "description": "Just random path O(log(width+height))",
            "flags": 0,
            "hasliked": 0,
            "id": "wdKczV",
            "likes": 5,
            "name": "RandomPathGenerator",
            "published": 3,
            "tags": [
                "procedural",
                "2d"
            ],
            "usePreview": 0,
            "username": "Arseny",
            "viewed": 320
        },
        "renderpass": [
            {
                "code": "// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n    p += vec2(523.124, 244.155);\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat f(float x){\n    return 16. * pow(x - 0.5, 5.) + 0.5;\n}\n\n// must be idb.x <= idp.x <= ide.x && idb.y <= idp.y <= ide.y\nvec2 IsOnRandomPath(vec2 idp, vec2 idb, vec2 ide, float seed){\n    if (idp.x < idb.x || idp.y < idb.y || idp.x > ide.x || idp.y > ide.y) return vec2(0.);\n    vec2 sz = ide - idb;\n    vec2 id = idp - idb;\n    float need = id.x + id.y;\n    float l = 0.;\n    float r = sz.x + sz.y + 1.;\n    vec2 lb = vec2(0.), ur = sz;\n    vec2 as = vec2(0.);\n    while (r - l > 1.){\n        float m = floor((r + l) / 2.);\n        float miny = max(lb.y, m - ur.x), maxy = min(m - lb.x, ur.y);\n        float rnd = miny + floor((maxy - miny + 0.999) * f(hash12(vec2(m, seed))));\n        if (need < m){\n            r = m;\n            ur = vec2(m - rnd, rnd);\n            //ur = vec2(m - rnd, rnd);\n        } else {\n            l = m;\n            lb = vec2(m - rnd, rnd);\n        }\n    }\n    if (lb == id){\n        return vec2(10.);\n    } else {\n        return vec2(0.);\n    }\n    return id;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    uv *= 2.;\n    \n    vec2 id = floor(uv * 10.);\n    \n    if (id == vec2(-8, -5)){\n        fragColor = vec4(0., 0., 1., 0.);\n        return;\n    }\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    //fragColor = vec4(IsOnRandomPath(id, vec2(-8., -5.), vec2(7., 6.)));\n    fragColor = vec4(IsOnRandomPath(id, vec2(-8., -5.), vec2(7., 6.), floor(iTime)) / 10., 0., 1.);\n    vec2 ll = (uv - id / 10.);\n    fragColor.r = 1.;\n    fragColor = min(ll.x, ll.y) < 0.005 ? vec4(0.) : fragColor ;\n\treturn;\n    // Output to screen\n    fragColor = vec4(id / 10., 0.,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}