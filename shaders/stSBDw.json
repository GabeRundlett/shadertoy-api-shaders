{
    "Shader": {
        "info": {
            "date": "1652277295",
            "description": "Forked from Easy Shader 387",
            "flags": 0,
            "hasliked": 0,
            "id": "stSBDw",
            "likes": 0,
            "name": "Fork Easy Shade wera0071 392",
            "published": 3,
            "tags": [
                "zbuffer"
            ],
            "usePreview": 0,
            "username": "wera0071",
            "viewed": 126
        },
        "renderpass": [
            {
                "code": "#define myPi 3.141592654f\n#define Eps 1e-8\n#define maxZ 100.0\n\nconst int n = 5;\nvec3 colVec[n] = vec3[n](vec3(0.6, 0.9, 0.6), vec3(0, 0.5, 0), vec3(0.8, 1, 0.8), vec3(0.5, 1.0, 0.5), vec3(0, 0.7, 0));\nvec3 BGcol = vec3(1, 0.2, 1);\n//float zVec[n] = float[n](3.0, 2.0, 1.0);\n\nint sizes[n] = int[n](3, 5, 4, 3, 10), inds[n] = int[n](0, 3, 8, 12, 15); const int m = 30;\nvec2 polygonsXY[m]; float polygonsZ[m];\n\nvoid initPolygons(out vec2 polygonsXY[m], out float  polygonsZ[m], in float time){\n// 0 -- triangle\n     polygonsXY[0] = vec2(0.5, 0.12); polygonsZ[0] = 0.1; \n    polygonsXY[2] = vec2(0.35, 0.84); polygonsZ[2] = 0.1;\n    polygonsXY[1] = vec2(0.9, 0.4); polygonsZ[1] = 0.1;\n    \n// 1 -- pentagon\n     polygonsXY[3] = vec2(0.27, 0.15); polygonsZ[3] = 0.1;\n    polygonsXY[4] = vec2(0.7, 0.5251); polygonsZ[4] = 0.1;\n    polygonsXY[5] = vec2(0.83, 0.7); polygonsZ[5] = 0.1;\n    polygonsXY[6] = vec2(0.5, 0.74); polygonsZ[6] = 0.1;\n    polygonsXY[7] = vec2(0.31, 0.63); polygonsZ[7] = 0.1;\n    \n// 2 -- rotated square\n    float w = 2.0;\n    vec3 center = vec3(0.25, 0.76, 0.1 + 0.02 * sin(time*w)); float r = 0.4;\n    int i; float j =0.0, phi = myPi/6.0;\n    float ang = 2.0*myPi/4.0; \n    vec3 tmpVec;\n    mat3 rot = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(phi), sin(phi)), vec3(0.0, -sin(phi), cos(phi)) );\n    for (i = 8; i < 12; i++){\n        tmpVec = rot*(r*vec3(cos(j*ang + time), sin(j*ang + time), 0.0)); \n        polygonsXY[i] = tmpVec.xy + center.xy;\n        polygonsZ[i] = tmpVec.z + center.z;\n        j = j + 1.0;\n    }\n// 3 -- triangle\n    polygonsXY[12] = vec2(0.1, 0.5); polygonsZ[12] = 0.9;\n    polygonsXY[13] = vec2(0.2, 0.4); polygonsZ[13] = 0.5;\n    polygonsXY[14] = tmpVec.xy + center.xy; polygonsZ[14] = 0.1;\n    \n// 4 -- XXXtagon\n    w = 1.5;\n    center = vec3(0.2 + 0.1 * sin(time * w), 0.2 + 0.1 * cos(time), 0.2 + 0.1 * sin(time)); r = 0.4;\n    j = 0.0, phi = myPi/9.0;\n    ang = 2.0*myPi/5.0; \n    tmpVec;\n    rot = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(phi), sin(phi)), vec3(0.0, -sin(phi), cos(phi)));\n    for (i = 15; i < 25; i++){\n        tmpVec = rot*(r*vec3(cos(j*ang + time), sin(j*ang + time), 0.0)); \n        polygonsXY[i] = tmpVec.xy + center.xy;\n        polygonsZ[i] = tmpVec.z + center.z;\n        j = j + 1.0;\n    }\n}\n\n/*vec2 triang1[3] = vec2[3](vec2(0.0, 0.0),  vec2(1.0, 0.0), vec2(1.0, 1.0));\nvec2 triang2[3] = vec2[3](vec2(0.0, 0.0),  vec2(1.0, 0.0), vec2(0.0, 1.0));\nvec2 triang3[3] = vec2[3](vec2(0.0, 0.0), vec2(1.0, 0.0), vec2(0.5, 1.0));*/\nint leftTurn(in vec2 a, in vec2 b, in vec2 c)\n{\n    float tmp = (c.x - a.x)*(b.y - a.y) - (c.y - a.y)*(b.x - a.x);\n    if (abs(tmp) < Eps) \n        return 0;\n    else \n        return tmp > 0.0 ? 1: -1;\n}\n\n\nbool inPolygon(in int ind0, in int size, in vec2 vert[m], in vec2 p) // vertices in counter clockwise order\n{\n    bool res = leftTurn(vert[ind0 + size-1], vert[ind0], p) <= 0; int i = ind0;\n    while(res && (i < ind0 + size -1))\n    {\n        res = res && (leftTurn(vert[i], vert[i+1], p) <= 0); i++;\n    }\n    return res;\n}\n\nfloat zInPlane(in vec3 a, in vec3 b, in vec3 c, in vec2 p) // z coordinate for (x,y) point of a plane (a-b, c-b)\n{\n    vec3 nrm = cross(a-b, c-b);\n    //float D = - dot(nrm, b);\n    if (abs(nrm.z) < Eps) return a.z;\n    else return (dot(nrm, b) - nrm.x*p.x - nrm.y*p.y)/nrm.z;\n}\n\n\n// vec3 normalize(vec3), vec3 cross(vec3, vec3) are predefined\nbool inTriangle(in vec2 a, in vec2 b, in vec2 c, in vec2 p) // (a, b, c) -- counter clockwise\n{\n    if ((leftTurn(a, b, p) <= 0) && (leftTurn(b, c, p) <= 0) && (leftTurn(c, a, p) <= 0))\n        return true;\n    else return false;\n}\nvoid initColors(float time) {\n    float w = 2.0;\n    vec3 center = vec3(0.7 + 0.2 * sin(iTime * w), 0.5 + 0.2 * cos(time), 0.2 * sin(time));\n     colVec[0] = vec3(sin(time * w), 0.0, 0.5);\n    colVec[4] = vec3(center);\n    colVec[3] = vec3(sin(time * w), 1.0, 0.5);\n    colVec[2] = vec3(cos(time * w), 0.8, 0.4);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float time = iTime, tmp; //iTime;\n    initPolygons(polygonsXY, polygonsZ, time);\n    initColors(time);\n    vec3 col = BGcol; float z = maxZ; \n    int i;\n     /*if (inTriangle(triang1[0], triang1[1], triang1[2], uv)){\n        z = zVec[0]; col = colVec[0] + 0.4*sin(iTime)*vec3(1.0, 1.0, 99.0); \n    }\n    if (inTriangle(triang2[0], triang2[0], triang2[0], uv) && (zVec[1] < z)){\n        z = zVec[1]; col = colVec[1]+ 0.4*sin(iTime)*vec3(1.0, 1.0, 99.0); \n    }\n    if (inTriangle(triang3[0], triang3[1], triang3[2], uv) && (zVec[2] < z)){\n        z = zVec[2]; col = colVec[2]+ 0.4*sin(iTime)*vec3(1.0, 1.0, 99.0); \n    }*/\n    for (i = 0; i < n; i++){\n        if ( inPolygon(inds[i], sizes[i], polygonsXY, uv) ){\n            tmp = zInPlane(vec3(polygonsXY[inds[i]].x, polygonsXY[inds[i]].y, polygonsZ[inds[i]]), \\\n            vec3(polygonsXY[inds[i]+1].x, polygonsXY[inds[i]+1].y, polygonsZ[inds[i]+1]), \\\n            vec3(polygonsXY[inds[i]+2].x, polygonsXY[inds[i]+2].y, polygonsZ[inds[i]+2]), uv);\n            if (tmp < z){\n                z = tmp; col = colVec[i]; \n            }\n        }\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}