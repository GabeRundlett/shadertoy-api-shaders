{
    "Shader": {
        "info": {
            "date": "1708913273",
            "description": "Trying to blend in 2 different scene to get an \"overlay\" effect drawn on top of everything else",
            "flags": 0,
            "hasliked": 0,
            "id": "4X23DK",
            "likes": 2,
            "name": "Gizmo Overlay",
            "published": 3,
            "tags": [
                "raymarching",
                "overlay",
                "gizmo"
            ],
            "usePreview": 0,
            "username": "Rex109",
            "viewed": 170
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nstruct SDF {\n  float distance;\n  vec3 color;\n};\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdPyramid(vec3 position, float halfWidth, float halfHeight) {\n    position.y += halfHeight;\n    position.xz = abs(position.xz);\n    if (position.x > position.z) {\n        position.xz = position.zx;\n    }\n    vec3 d1 = vec3(max(position.x - halfWidth, 0.0), position.y, max(position.z - halfWidth, 0.0));\n    vec3 q = position;\n    float k = halfWidth * halfWidth + 4.0 * halfHeight * halfHeight;\n    float h = dot(q.yz - vec2(0.0, halfWidth), vec2(halfWidth, 2.0 * halfHeight)) / k;    \n    q.yz -= vec2(halfWidth, 2.0 * halfHeight) * h;\n    q -= vec3(k, 2.0 * halfHeight * halfWidth, -halfWidth * halfWidth) * max(q.x - q.z, 0.0) / (k + halfWidth * halfWidth);\n    vec3 d2 = position - clamp(q, vec3(0.0), vec3(halfWidth, 2.0 * halfHeight, halfWidth));\n    float d = sqrt(min(dot(d1, d1), dot(d2, d2)));\n    return max(h, -position.y) < 0.0 ? -d : d;\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nSDF GetDistGizmo(vec3 p) {\n    #define SCENE_SIZE 7\n    \n    SDF scene[SCENE_SIZE];\n    \n    scene[0] = SDF(sdSphere(p, 0.1), vec3(1.000,1.000,0.000));\n    \n    scene[1] = SDF(sdCappedCylinder(p+vec3(.0,-.5,.0), 0.5, 0.05), vec3(0.000,0.000,1.000));\n    scene[2] = SDF(sdPyramid(p+vec3(.0,-1.,.0), 0.1, 0.1), vec3(0.000,0.000,1.000));\n    p.yz *= -Rot(PI/2.);\n    scene[3] = SDF(sdCappedCylinder(p+vec3(.0,-.5,.0), 0.5, 0.05), vec3(0.000,1.000,0.000));\n    scene[4] = SDF(sdPyramid(p+vec3(.0,-1.,.0), 0.1, 0.1), vec3(0.000,1.000,0.000));\n    p.xy *= Rot(PI/2.);\n    scene[5] = SDF(sdCappedCylinder(p+vec3(.0,-.5,.0), 0.5, 0.05), vec3(1.000,0.000,0.000));\n    scene[6] = SDF(sdPyramid(p+vec3(.0,-1.,.0), 0.1, 0.1), vec3(1.000,0.000,0.000));\n    \n    SDF min_s = SDF(999999999., vec3(.0));\n    for(int i = 0; i < SCENE_SIZE; i++)\n        if(min_s.distance > scene[i].distance)\n            min_s = scene[i];\n    \n    return min_s;\n}\n\nSDF GetDist(vec3 p) {\n    SDF d = SDF(sdBox(p, vec3(1)), vec3(1.000));\n    \n    return d;\n}\n\n\nSDF RayMarch(vec3 ro, vec3 rd, int layer) {\n\tSDF dO=SDF(0.,vec3(0.));\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO.distance;\n        SDF dS;\n        \n        if(layer == 0)\n            dS = GetDist(p);\n        else\n            dS = GetDistGizmo(p);\n            \n        dO.distance += dS.distance;\n        dO.color = dS.color;\n        if(dO.distance>MAX_DIST || abs(dS.distance)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p, int layer) {\n    vec2 e = vec2(.001, 0);\n    vec3 n;\n\n    n = GetDist(p).distance - vec3(GetDist(p-e.xyy).distance, GetDist(p-e.yxy).distance, GetDist(p-e.yyx).distance);\n        \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot((iMouse.z>1. ? -m.y : cos(iTime*0.5)*0.2+0.2)*PI+1.);\n    ro.xz *= Rot((iMouse.z>1. ? -m.x : iTime*0.1)*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0,0), 1.);\n    vec3 col = vec3(0);\n   \n    for(int i = 0; i < 2; i++)\n    {\n        SDF d = RayMarch(ro, rd, i);\n\n        if(d.distance<MAX_DIST) {\n            vec3 p = ro + rd * d.distance;\n            vec3 n = GetNormal(p, i);\n            vec3 r = reflect(rd, n);\n\n            float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n            col = i==0 ? d.color * dif : d.color;\n        }\n    }\n    \n    col = pow(col, vec3(.4545));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}