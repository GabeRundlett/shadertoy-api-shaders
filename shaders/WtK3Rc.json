{
    "Shader": {
        "info": {
            "date": "1579499410",
            "description": "Chasing a sphere down a road.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtK3Rc",
            "likes": 4,
            "name": "Sphere Chaser",
            "published": 3,
            "tags": [
                "raymarch",
                "sphere",
                "chase"
            ],
            "usePreview": 0,
            "username": "kstyler",
            "viewed": 279
        },
        "renderpass": [
            {
                "code": "#define time iTime\n#define MAX_DST 150\n#define EPSI 0.001\nint mat = 0;\nfloat random(vec2 p){\n    return(fract(sin(p.x*431.+p.y*707.)*7443.));\n}\nfloat noise(vec2 uv){\n     vec2 id = floor(uv*10.);\n    vec2 lc = smoothstep(0.,1.,fract(uv*10.));\n    \n    float a = random(id);\n    float b = random(id + vec2(1.,0.));\n    float c = random(id + vec2(0.,1.));\n    float d = random(id + vec2(1.,1.));\n    \n    float ud = mix(a,b,lc.x);\n    float lr = mix(c,d,lc.x);\n    float fin = mix(ud,lr,lc.y);\n    return fin;\n}\n\nfloat octaves(vec2 uv,int octs){\n    float amp = 0.5;\n    float f = 0.;\n    for(int i =1; i<octs+1;i++){\n        f+=noise(uv)*amp;\n        uv*=2.;\n        amp*=0.5;\n    }\n    return f;\n}\nmat2 rotate(float a){\n    return mat2(cos(a),-sin(a),\n                sin(a),cos(a));\n}\n\nfloat sphere(vec3 p){\n    float r = 1.;\n    r*=1.-(sin(p.y*20.+time*22.)*0.001)*20.;\n    r*=1.-(cos(p.x*10.+time*22.)*0.001)*50.;\n\n    return length(p)-r;\n}\n\n\nfloat sdBox( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat map(vec3 p){\n    float sph = sphere(p+vec3(-10.,-6.5,-3.-time*62.));\n    float plane = p.y+8.+octaves((p.xz/30.)+(time/10.)+sin(length(p.xz*2.))*.04,10);\n    float c = 20.;\n    float c2 = 8.;\n    p.x+=sin(p.z*0.2);\n    p.x=mod(p.x+c*.5,c)-c*.5;\n    p.z=mod(p.z+c2*.5,c2)-c2*.5;\n \n    return  min(min(sph,min(sdBox(p,vec3(0.5,4.0,1)),sdBox(p+vec3(0,-4.5,0),vec3(1.5,0.5,4)))),plane);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    vec3 ro = vec3(10,7,-5);\n    vec3 rd = normalize(vec3(uv,1.));\n    ro.yz*=rotate(.3);\n    rd.yz*=rotate(.3);\n   \n    ro.z+=time*62.;\n    ro.x+=sin(time)*4.;\n    ro.y+=cos(time)*2.;\n  \n    float tot = 0.;\n    float dst = 0.;\n    float shad = 0.;\n    vec3 p = vec3(0.) ;\n    mat = 0;\n    for(int i =0;i<MAX_DST;i++){\n        p = ro+rd*tot;\n        dst = map(p);\n        tot+=dst;    \n        if(dst<EPSI){\n            shad = float(i)/float(MAX_DST);\n            break;\n        }\n    }\n    if(dst>EPSI){\n        mat = 1;\n    }\n  \n  \n    col= vec3(shad);\n    uv.y*=5.;\n    if(mat == 1)col =vec3(octaves(uv/10.,8)/1.6)+vec3(.5);\n    col = mix(col,vec3(0.),1.-exp(-0.4*shad));//fog\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}