{
    "Shader": {
        "info": {
            "date": "1662298397",
            "description": "Well, this is an interesting simulation idea that I found on youtube and decided to save in some form for myself. There are parameters of the rules in the code here, you can play with them. https://www.youtube.com/watch?v=0Kx4Y9TVMGg",
            "flags": 32,
            "hasliked": 0,
            "id": "flycD3",
            "likes": 9,
            "name": "Dot simulation",
            "published": 3,
            "tags": [
                "2d",
                "simulation",
                "life",
                "artificial"
            ],
            "usePreview": 0,
            "username": "foxes",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "#define SIZEX 300\n\nvec2 getpos(vec2 uv)\n{\n    return textureLod(iChannel0,vec2((uv+0.5)/iResolution.xy),0.0).xy;\n}\n\nfloat sqr(float x)\n{\n    return x*x*x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n\n    fragColor = vec4(0.,0.,0.,1.0);\n    for (int i=0;i<SIZEX;i++) {\n        float lr = length(getpos(vec2(i,0.))-uv);\n        fragColor.xyz += vec3(1.,0.,0.)*clamp(1.-lr*100.,0.,1.);\n        float lb = length(getpos(vec2(i,2.))-uv);\n        fragColor.xyz += vec3(0.,0.,1.)*clamp(1.-lb*100.,0.,1.);\n        float lg = length(getpos(vec2(i,4.))-uv);\n        fragColor.xyz += vec3(0.,1.,0.)*clamp(1.-lg*100.,0.,1.);\n        float lh = length(getpos(vec2(i,6.))-uv);\n        fragColor.xyz += vec3(0.4,0.4,0.4)*clamp(1.-lh*100.,0.,1.);\n    }\n\n    fragColor.xyz = clamp(fragColor.xyz,vec3(0.),vec3(1.));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define RULE_R_R -0.1\n#define RULE_R_B -0.05\n#define RULE_R_G -0.01\n#define RULE_R_H 0.01\n\n#define RULE_B_R 0.1\n#define RULE_B_B 0.05\n#define RULE_B_G 0.\n#define RULE_B_H 0.\n\n#define RULE_G_R -0.01\n#define RULE_G_B 0.\n#define RULE_G_G 0.05\n#define RULE_G_H 0.\n\n#define RULE_H_R -0.09\n#define RULE_H_B 0.\n#define RULE_H_G 0.\n#define RULE_H_H -0.01\n\n#define SIZEX 300\n//#define RANGE 0.9\n#define RANGE 0.2\n\nfloat hash1(float x){ return fract(fract(x*0.31830988618379067153776752674503)*fract(x*0.15915494309189533576888376337251)*265871.1723); }\n//float hash1( float n ) { return fract(sin(n)*753.5453123); }\nvec2 hash2( vec2 n ) { return fract(sin(n)*753.5453123); }\nvec4 hash4( vec4 n ) { return fract(sin(n)*753.5453123); }\n\nfloat sqr(float x)\n{\n    x=x*x;\n    x=x*x;\n    x=x*x;\n    return x*x;\n}\n\nvec2 getpos(vec2 uv)\n{\n    return textureLod(iChannel0,vec2((uv+0.5)/iResolution.xy),0.0).xy;\n}\n\nvec2 rule(vec2 pos,float v,float g)\n{\n    vec2 f;\n    for (int i=0;i<SIZEX;i++)\n    {\n        vec2 b = getpos(vec2(i,v));\n//        float d = length(pos-b)/RANGE;\n//        if (d>0. && d<1.) {\n//            f += vec2(pos-b)*(g*0.1/(1./sqr(1.-d)-1.));\n//        }\n        float d = length(pos-b);\n        if (d>0. && d<RANGE) {\n            f += vec2(pos-b)*(g*0.01/d);\n        }\n    }\n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 1./iResolution.y;\n    vec2 fc = fragCoord;\n    fc -= fract(fc);\n    vec2 pos = vec2(0.);\n    if (iFrame==0)\n    {\n        if (fract(fc.y*0.5)<0.1)\n            pos = vec2(hash1(dot(fc,vec2(1.,0.139755)))*iResolution.x*scale,hash1(dot(fc,vec2(0.54,1.2))+0.5));\n    } else {\n        pos = getpos(fc);\n        if (fract(fc.y*0.5)<0.1) {\n            vec2 vel = getpos(fc+vec2(0.,1.));\n            pos += vel;\n        } else {\n            vec2 f=vec2(0.);\n            vec2 vel = getpos(fc-vec2(0.,1.0));\n            if (fc.y==1.) {\n                f = rule(vel,0.,RULE_R_R);\n                f += rule(vel,2.,RULE_R_B);\n                f += rule(vel,4.,RULE_R_G);\n                f += rule(vel,6.,RULE_R_H);\n            }\n            if (fc.y==3.) {\n                f = rule(vel,0.,RULE_B_R);\n                f += rule(vel,2.,RULE_B_B);\n                f += rule(vel,4.,RULE_B_G);\n                f += rule(vel,6.,RULE_B_H);\n            }\n            if (fc.y==5.) {\n                f = rule(vel,0.,RULE_G_R);\n                f += rule(vel,2.,RULE_G_B);\n                f += rule(vel,4.,RULE_G_G);\n                f += rule(vel,6.,RULE_G_H);\n            }\n            if (fc.y==7.) {\n                f = rule(vel,0.,RULE_H_R);\n                f += rule(vel,2.,RULE_H_B);\n                f += rule(vel,4.,RULE_H_G);\n                f += rule(vel,6.,RULE_H_H);\n            }\n            pos = (pos+f)*0.5;\n            vel += pos;\n            if (vel.x<0. || vel.x>iResolution.x*scale) pos.x*=-1.;\n            if (vel.y<0. || vel.y>1.) pos.y*=-1.;\n        }\n    }\n    fragColor = vec4(pos,0.,0.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}