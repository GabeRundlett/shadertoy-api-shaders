{
    "Shader": {
        "info": {
            "date": "1474836179",
            "description": "Rainbow Mercury",
            "flags": 0,
            "hasliked": 0,
            "id": "4tGGWm",
            "likes": 4,
            "name": "Rainbow Mercury",
            "published": 3,
            "tags": [
                "rainbowmercury"
            ],
            "usePreview": 0,
            "username": "vox",
            "viewed": 579
        },
        "renderpass": [
            {
                "code": "//-----------------SETTINGS-----------------\n\n//#define TIMES_DETAILED (sin(time*32.0)+1.0)\n#define TIMES_DETAILED (1.0+.1*sin(time*PI*1.0))\n#define SPIRAL_BLUR_SCALAR (1.0+.1*sin(time*PI*1.0))\n\n//-----------------USEFUL-----------------\n\n#define MOUSE_X (iMouse.x/iResolution.x)\n#define MOUSE_Y (iMouse.y/iResolution.y)\n\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n#define EPS 10.0/max(iResolution.x, iResolution.y)\n\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n#define time ((saw(float(__LINE__))+1.0)*(iTime+12345.12345)/PI/2.0)\n#define sphereN(uv) (normalize(vec3((uv).xy, sqrt(clamp(1.0-length((uv)), 0.0, 1.0)))))\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\nfloat seedling;\nfloat cross( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n#define circle(x) (vec2(cos(x),sin(x)))\nfloat saw(float x)\n{\n    float f = mod(floor(abs(x)), 2.0);\n    float m = mod(abs(x), 1.0);\n    return f*(1.0-m)+(1.0-f)*m;\n}\nvec2 saw(vec2 x)\n{\n    return vec2(saw(x.x), saw(x.y));\n}\n\nvec3 saw(vec3 x)\n{\n    return vec3(saw(x.x), saw(x.y), saw(x.z));\n}\n//-----------------SIMPLEX-----------------\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nfloat simplex3d(vec3 p) {\n    const float F3 =  0.3333333;\n    const float G3 =  0.1666667;\n    \n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n    \n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n    \n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n    \n    vec4 w, d;\n    \n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n    \n    w = max(0.6 - w, 0.0);\n    \n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n    \n    w *= w;\n    w *= w;\n    d *= w;\n    \n    return dot(d, vec4(52.0));\n}\n\n//-----------------IMAGINARY-----------------\n\nvec2 cmul(vec2 v1, vec2 v2) {\n\treturn vec2(v1.x * v2.x - v1.y * v2.y, v1.y * v2.x + v1.x * v2.y);\n}\n\nvec2 cdiv(vec2 v1, vec2 v2) {\n\treturn vec2(v1.x * v2.x + v1.y * v2.y, v1.y * v2.x - v1.x * v2.y) / dot(v2, v2);\n}\n\n//-----------------RENDERING-----------------\nfloat zoom;\n\nvec2 invBilinear( in vec2 p, in vec2 a, in vec2 b, in vec2 c, in vec2 d )\n{\n    vec2 e = b-a;\n    vec2 f = d-a;\n    vec2 g = a-b+c-d;\n    vec2 h = p-a;\n        \n    float k2 = cross( g, f );\n    float k1 = cross( e, f ) + cross( h, g );\n    float k0 = cross( h, e );\n    \n    float w = k1*k1 - 4.0*k0*k2;\n\n    w = sqrt(abs( w ));\n    \n    float v1 = ((-k1 - w)/(2.0*k2));\n    float v2 = ((-k1 + w)/(2.0*k2));\n    float u1 = ((h.x - f.x*v1)/(e.x + g.x*v1));\n    float u2 = ((h.x - f.x*v2)/(e.x + g.x*v2));\n    bool  b1a = v1>0.0 && v1<1.0;\n    bool  b1b = u1>0.0 && u1<1.0;\n    bool  b2a = v2>0.0 && v2<1.0;\n    bool  b2b = u2>0.0 && u2<1.0;\n    \n\n    vec2 res = vec2(min(abs(u1), abs(u2)), min(abs(v1), abs(v2)));\n    \n    return res;\n}\n\n\nvec2 SinCos( const in float x )\n{\n\treturn vec2(sin(x), cos(x));\n}\nvec3 RotateZ( const in vec3 vPos, const in vec2 vSinCos )\n{\n\treturn vec3( vSinCos.y * vPos.x + vSinCos.x * vPos.y, -vSinCos.x * vPos.x + vSinCos.y * vPos.y, vPos.z);\n}\n      \nvec3 RotateZ( const in vec3 vPos, const in float fAngle )\n{\n\treturn RotateZ( vPos, SinCos(fAngle) );\n}\nvec2 RotateZ( const in vec2 vPos, const in float fAngle )\n{\n\treturn RotateZ( vec3(vPos, 0.0), SinCos(fAngle) ).xy;\n}\nmat4 RotateZ( const in mat4 vPos, const in float fAngle )\n{\n\treturn mat4(RotateZ( vec3(vPos[0].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0,\n                RotateZ( vec3(vPos[1].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0,\n                RotateZ( vec3(vPos[2].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0,\n                RotateZ( vec3(vPos[3].xy, 0.0), SinCos(fAngle) ).xy, 0.0, 0.0);\n}\nmat4 translate( const in mat4 vPos, vec2 offset )\n{\n\treturn mat4(vPos[0].xy+offset, 0.0, 0.0,\n                vPos[1].xy+offset, 0.0, 0.0,\n                vPos[2].xy+offset, 0.0, 0.0,\n                vPos[3].xy+offset, 0.0, 0.0);\n} \nmat4 scale( const in mat4 vPos, vec2 factor )\n{\n\treturn mat4(vPos[0].xy*factor, 0.0, 0.0,\n                vPos[1].xy*factor, 0.0, 0.0,\n                vPos[2].xy*factor, 0.0, 0.0,\n                vPos[3].xy*factor, 0.0, 0.0);\n} \nfloat magnification;\nvec2 tree(vec2 uv)\n{\n    float w1 = saw(time);\n    \n    mat4 square = mat4(EPS, EPS, 0.0, 0.0,\n                       1.0-EPS, EPS, 0.0, 0.0,\n                       1.0-EPS, 1.0-EPS, 0.0, 0.0,\n                       0.0, 1.0-EPS, 0.0, 0.0);\n    \n    float size =  .5;\n    \n    square = scale(square, vec2(2.0));\n    square = translate(square, vec2(-1.0));\n    \n    //square = scale(square, (1.0-saw(uv.xy))*vec2(saw(t1)+.5));\n    \n    square = RotateZ(square, time+seedling);\n    \n    float t1 = time;\n    float t2 = time;\n    square = scale(square, vec2(saw(uv.y*uv.x+t2+seedling)*.25+.75));\n    \n    square = scale(square, vec2(.5));\n    square = translate(square, circle(uv.x*PI*2.0+time+seedling)/(6.0+5.0*saw(time)));\n    square = translate(square, circle(uv.y*PI*2.0+time+seedling)/(6.0+5.0*saw(time)));\n    \n    \n    float t = time;\n    vec3 f = flux(time);\n    \n    \n    vec2 dxdy = sqrt(4.0)/iResolution.xy;\n    \n    vec2 a = uv+vec2(0.0, \t\t0.0);\n    vec2 b = uv+vec2(1.0, \t0.0);\n    vec2 c = uv+vec2(0.0, \t\t1.0);\n    \n    vec2 a2 = invBilinear(a, square[0].xy, square[1].xy, square[2].xy, square[3].xy);\n    vec2 b2 = invBilinear(b, square[0].xy, square[1].xy, square[2].xy, square[3].xy);\n    vec2 c2 = invBilinear(c, square[0].xy, square[1].xy, square[2].xy, square[3].xy);\n    \n    magnification = abs(cross(square[3].xy-square[0].xy, square[1].xy-square[0].xy)/cross(b2-a2, c2-a2));\n    \n    return saw(a2);\n}\n\nfloat draw(vec2 uv)\n{\n    return 1.0-abs(abs(saw(uv.x*(1.5+sin(iTime*.654321))*PI+iTime*.7654321)*2.0-1.0)-abs(uv.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.y/iResolution.x;\n   \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n   \tconst int max_i = 5;\n    float stretch = 1.0;\n    float ifs = 1.0;\n    float depth = 0.0;\n    float zoom = 1.5+saw(time);\n    \n    uv = uv*2.0-1.0;\n    uv *= zoom;\n    uv = uv*.5+.5;\n    for(int i = 0; i < max_i; i++)\n    {\n        seedling = float(i)/float(max_i);\n        vec2 next = tree((uv));\n        ifs /= magnification+1.0;\n    \tfloat weight = pow(ifs, 1.0/float(i+1)/2.0);\n        depth += (length(uv*2.0-1.0))*weight;\n        uv = saw(time+(next*2.0-1.0)*weight);//*weight+vec2(.5)*(1.0-weight);//*weight+uv*(1.0-weight);\n    }\n    \n    \n    fragColor = vec4(uv, 0.0, 1.0);\n    \n    depth /= float(max_i)/5.0;\n\n    float weight = pow(ifs, 1.0/float(max_i)/2.0);\n\n    float black = smoothstep(0.0, 1.0/5.0, saw(depth-time));\n    float white = smoothstep(4.0/5.0, 1.0, saw(depth-time));\n    \n    fragColor = vec4(uv, 0.0, 1.0)*weight;\n    fragColor = vec4(clamp(sqrt(weight), 0.0, 1.0)*(flux(time+depth)*black+white), 1.0);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}