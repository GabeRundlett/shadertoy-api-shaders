{
    "Shader": {
        "info": {
            "date": "1690141302",
            "description": "Collection of simple 2d effects. Day-night cycle above a sea on an alien planet.",
            "flags": 0,
            "hasliked": 0,
            "id": "msSBWV",
            "likes": 1,
            "name": "Sun, Moon and Sea",
            "published": 3,
            "tags": [
                "sun",
                "repetition",
                "moon"
            ],
            "usePreview": 0,
            "username": "almorgan",
            "viewed": 141
        },
        "renderpass": [
            {
                "code": "#define PI 3.141592\n\nconst vec3 a = vec3(0.500,  0.400, 0.500);\nconst vec3 b = vec3(3.000,  0.100, 3.000);\nconst vec3 c = vec3(0.500,  1.000, 0.500);\nconst vec3 d = vec3(0.000, -0.500, 0.500);\n\nvec3 palette( float t ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec2 rotate(vec2 uv, float th)\n{\n    return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n\nfloat sdfCircle(vec2 uv, float r, vec2 offset)\n{\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n\n    return length(vec2(x, y)) - r;\n}\n\nfloat sdfSun(vec2 uv, vec2 center)\n{\n    float sun = sdfCircle(uv, 0.1, center);\n    return smoothstep(-.01, .01, sun);\n}\n\nfloat sdfMoon(vec2 uv, vec2 center)\n{\n    float d1 = sdfCircle(uv, 0.1, center);\n    float d2 = sdfCircle(\n        uv, 0.09,\n        center + rotate(vec2(0.04, 0.00), atan(center.y/center.x))\n        );\n\n    float res; // result\n    res = max(d1, -d2); // subtraction - subtract d1 from d2\n\n    res = smoothstep(-0.01, 0.01, res); // Same as res > 0. ? 1. : 0.;\n\n    return res;\n}\n\nvec3 getSunglow(vec2 uv, vec2 center)\n{\n    vec3 gradientStartColor = vec3(1., 0., 1.);\n    vec3 gradientEndColor = vec3(0., .7, .7);\n    return mix(\n        gradientStartColor,\n        gradientEndColor,\n        1.2*distance(uv, center));\n}\n\nvec3 getMoonglow(vec2 uv, vec2 center)\n{\n    vec3 gradientStartColor = vec3(.0, .0, .8);\n    vec3 gradientEndColor = vec3(0., .7, .7);\n    return mix(\n        gradientStartColor,\n        gradientEndColor,\n        1.2*distance(uv, center));\n}\n\nfloat sdfSea(vec2 uv)\n{\n    float noise = 0.005*sin(uv.x+.2*iTime)+0.0075*sin(uv.x+0.3*iTime)\n                    + 0.0015*cos(uv.x+.25*iTime)+0.00125*sin(uv.x+0.15*iTime);\n    return smoothstep(-0.01, 0.01, uv.y + .25 + noise);\n}\n\nvec3 drawScene(vec2 uv)\n{\n    float t = .2*iTime-.5;\n    vec2 offsetSun = vec2(-0.5*cos(PI*t), -0.5+0.5*sin(PI*t));\n    vec2 offsetMoon = vec2(-0.5*cos(PI*t+PI), -0.5+0.5*sin(PI*t+PI));\n\n    // gradient background of Sun and Moon\n    vec3 col = getSunglow(uv, offsetSun);\n    // dot operation cuts daynight cycle in half (night<0.0, day>0.0)\n    col = mix(\n        col,\n        getMoonglow(uv, offsetMoon),\n        smoothstep(-1., 1., dot(uv+vec2(0.0, .75), -offsetSun+offsetMoon))\n        );\n\n    // sun\n    float sun = sdfSun(uv, offsetSun);\n    vec3 colorSun = vec3(1.0, 0.2, 0.1);\n    col = mix(colorSun, col, sun);\n\n    // moon\n    float moon = sdfMoon(uv, offsetMoon);\n    vec3 colorMoon = vec3(0.0); // change color\n    col = mix(colorMoon, col, moon);\n\n    float ground = sdfSea(uv);\n    float paletteT = .5 + .2*sin(PI*t+PI);\n\n    \n    col = mix(palette(paletteT), col, ground);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // <0, 1>\n    uv -= 0.5; // <-0.5,0.5>\n    uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n\n    \n    \n    vec3 col = drawScene(uv);\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}