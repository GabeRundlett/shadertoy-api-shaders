{
    "Shader": {
        "info": {
            "date": "1523638622",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "XdVyW3",
            "likes": 2,
            "name": "RC",
            "published": 3,
            "tags": [
                "raycast"
            ],
            "usePreview": 0,
            "username": "menackni",
            "viewed": 490
        },
        "renderpass": [
            {
                "code": "float musB(float p){return texture(iChannel0,vec2(p,0.0)).x;}\n\n//perlin noise from here https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\nfloat seed=42.0;\n\nfloat noise(vec3 P){\n  vec3 Pi0 = floor(P);\n  vec3 Pi1 = mod(Pi0+1.0, seed);\n       Pi0 = mod(Pi0, seed);\n  vec3 Pf0 = fract(P);\n  vec3 Pf1 = Pf0 - vec3(1.0);\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - .5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(.0));\n  gx0 -= sz0 * (step(.0, gx0) - .5);\n  gy0 -= sz0 * (step(.0, gy0) - .5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - .5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(.0));\n  gx1 -= sz1 * (step(.0, gx1) - .5);\n  gy1 -= sz1 * (step(.0, gy1) - .5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = inversesqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = inversesqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2. * n_xyz;\n}\n\nvec4 castRay(in vec3 eye,in vec3 ray,in float mDis) {\n    vec3 pos=eye+ray;\n    float t=.0;\n    float accamulate=.0;\n    vec3 pos2=eye+ray;\n    vec4 color;\n    float dis=length(eye-pos);\n    while(true){\n        dis=length(eye-pos);\n        if(dis>mDis){\n            break;\n        }\n        if(accamulate>.5){\n            return color;\n        }\n        float nois=noise((pos/1.7)-(vec3(.0,.0,1.0-musB(dis/6.0)*2.0)));\n        float fd=dis/mDis;\n        color=vec4(musB(dis/6.0)/1.5,\n                   fd-nois,\n                   dis,\n                   dis);\n        accamulate+=nois/8.0;\n        t+=.1;\n        pos=eye+ray*t;\n    }\n\n\treturn color;\n}\n\nmat2 rot2(float a){\n    return mat2(cos(a),-sin(a),sin(a),cos(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=(2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    vec3 r1=vec3(uv.x,uv.y,-1.0);\n    vec3 r=r1;r.xz*=rot2(0.25-sin(iTime*.3)/4.0);r.yz*=rot2(0.25-sin(iTime*.3)/8.0);\n    \n    vec3 o=vec3(0,0,iTime*1.0);\n    \n    float dis=8.0;\n    vec4 t1=castRay(o+r*3.0, r, dis);\n    \n    float fog=(t1.w/dis);\n    vec3 fogColor=1.0-vec3(musB(dis/16.0),musB(dis/8.0),musB(dis/4.0))/4.0;\n    fragColor=vec4(mix(t1.xyz,fogColor,fog),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 21,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}