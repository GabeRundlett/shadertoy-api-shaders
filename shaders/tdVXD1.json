{
    "Shader": {
        "info": {
            "date": "1573984682",
            "description": "The Sonic's are running individually.",
            "flags": 32,
            "hasliked": 0,
            "id": "tdVXD1",
            "likes": 13,
            "name": "Sonic Running",
            "published": 3,
            "tags": [
                "bitmap"
            ],
            "usePreview": 0,
            "username": "yasuo",
            "viewed": 465
        },
        "renderpass": [
            {
                "code": "// The code is based on the following tutorial.\n// https://www.youtube.com/watch?v=EBrAdahFtuo&t=2284s\nfloat N21(vec2 p) {\n    p = fract(p*vec2(123.45,345.45));\n    p+=dot(p,p+34.345);\n    return fract(p.x*p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime*0.72;\n    float size = 1.5;\n    vec2 aspect = vec2(1,1);\n    \n    vec2 uv =  (2.0*fragCoord.xy-iResolution.xy)/min(iResolution.y,iResolution.x);\n    uv *= size * aspect;\n    uv.x -= t*1.1;\n    uv.y -= 0.22;\n\tvec2 gv = fract(uv)-0.5;\n    vec2 id = floor(uv);\n\t\n    vec3 col = vec3(1.0);\n    vec2 gvref = gv;\n    \n    float speed = (N21(id) <0.2)?5.0:(N21(id)*20.0);\n    int frame = int(mod(iTime*speed,4.0));\n    if(frame == 0) {\n        gv.y += 0.5;\n    } else if(frame == 1){\n    \tgv.x += 0.5;\n    \tgv.y += 0.5;\n    } else if(frame == 3){\n\t\tgv.x += 0.5;\n    }\n    \n    col = texture(iChannel0,gv).xyz;\n    if(gvref.x<0.0 || gvref.y<0.0) col = vec3(1);\n    if(gvref.x>0.48 || gvref.y>0.48) col = vec3(1);\n    \n    fragColor =vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Generated with https://github.com/rkibria/img2shadertoy\nconst vec2 bitmap_size = vec2(64, 72);\nconst int[] palette = int[] (\n0x00202420,\n0x00e35757,\n0x00f8d4d0,\n0x00886868,\n0x004068b0,\n0x00d0b0b0,\n0x0088b0f8,\n0x00f8f8f8,\n0x00f86868,\n0x000000f8,\n0x00000090,\n0x00882020,\n0x00d04420,\n0x00ffffff\n);\nconst int longs_per_line = 8;\nconst int[] bitmap = int[] (\n0xdddddddd, 0xaaaaaaaa, 0xdddddaaa, 0xdddddddd, 0xdddddddd, 0xaaaaaaaa, 0xdddddaaa, 0xdddddddd,\n0xaaaddddd, 0xd9999aaa, 0xddaadddd, 0xdddddddd, 0xaadddddd, 0x227999aa, 0xddaaaaa9, 0xdddddddd,\n0xaaaaaddd, 0xddddd999, 0xdaaaaddd, 0xdddddddd, 0xaadddddd, 0x77999999, 0xaaaa9992, 0xdddddddd,\n0x99aaaadd, 0xddddddd9, 0xaaa9aadd, 0xdddddddd, 0xaadddddd, 0x79922999, 0xaaaaaa97, 0xddddddda,\n0xd99aaaad, 0xdddddddd, 0x2a999add, 0xddddddda, 0xaddddd9d, 0xddd57222, 0xaaaaaadd, 0xddddddaa,\n0xd99aaaaa, 0x88888111, 0x229925dd, 0xddddddd2, 0xddddddd9, 0xdd277725, 0xaaaddddd, 0xdddddaaa,\n0x119aaaaa, 0xdddddd81, 0x27922258, 0xdddddda2, 0xddddddd9, 0xcbbbb777, 0xaddddddc, 0xdddddaaa,\n0x111aaaaa, 0xbbbddddd, 0x279777dd, 0x9dddddaa, 0xddddddd9, 0xbbbbbbbd, 0xadddcccc, 0xddddaada,\n0x511aaaaa, 0xbbbbbddd, 0x77977dbb, 0x9ddddaa9, 0xdddddd99, 0xbbbbbbbb, 0xdddccccb, 0xddddaada,\n0x511aaaaa, 0xbbbbbbdd, 0x77dddbbb, 0x9ddddaa9, 0xdd8ddd99, 0xdddddbbb, 0xddccccbb, 0xddddadda,\n0xd11aaaad, 0xdddbbbdd, 0x7dddbbbd, 0x9dddaa99, 0xd81ddd99, 0xdddddbbb, 0xddccccdd, 0xddddaddd,\n0x111aaaad, 0xdddddddd, 0xadddbbbd, 0x9dddaa9a, 0x81ddd999, 0xddddbbbd, 0xdccccddd, 0xddddaddd,\n0x11daaadd, 0xddddddc1, 0xadddcbdd, 0x9dddaaaa, 0x1dddd999, 0xddbbbbd1, 0xdcccdddd, 0xdddddddd,\n0xcddddddd, 0xdccdcccc, 0xad53cccd, 0xddddaaaa, 0xdddd9999, 0xdccdd111, 0xdc11cddd, 0xdddddddd,\n0xdddddddd, 0xcccccccd, 0xaa553ccc, 0xdddddaaa, 0xdd999999, 0x521111dd, 0xd51115dd, 0xdddddddd,\n0xdddddddd, 0xcccc532d, 0xaa33533c, 0xddddddaa, 0x9999999d, 0x11111b2d, 0xd5311111, 0xdddddddd,\n0x4ddddddd, 0x7777252a, 0xaaa33332, 0xddddddda, 0x999999dd, 0x1c772529, 0xdd333111, 0xdddddddd,\n0x64dddddd, 0x77772574, 0x99994aa2, 0xdddddd44, 0x99999ddd, 0x77772579, 0x444bbbb2, 0xdddddd44,\n0xa64ddddd, 0x5377327a, 0x66999947, 0xdddd4466, 0x999ddddd, 0x5377327a, 0x66644bb7, 0xdddd4466,\n0x464cdddd, 0x77766544, 0x66666999, 0xddd46666, 0x464ddddd, 0x77766544, 0x666664bb, 0xddd46666,\n0x64dddddd, 0xbccbb666, 0x666764bb, 0xd3006622, 0x64dddddd, 0xbcc8c666, 0x666764bb, 0xd3006622,\n0xdddddddd, 0xbbc88bbd, 0x75664cbb, 0xd0054777, 0xdddddddd, 0xbb8cdddd, 0x75664cbb, 0xd0054777,\n0xcddddddd, 0xbbbccccc, 0x778ccccb, 0xdd537357, 0xdddddddd, 0xbbbddddd, 0x778ccccb, 0xdd537357,\n0xdddddddd, 0xbbbddddd, 0x775ccccc, 0xdd50b057, 0xdddddddd, 0xbbbbbddd, 0x775ccccc, 0xdd50b057,\n0xdddddddd, 0xbbbbdddd, 0x775bcccc, 0xdd50c057, 0xbbcddddd, 0xbbbbbbbb, 0x775bcccc, 0xdd50c057,\n0xdddddddd, 0xccbbbddd, 0x775bcc8c, 0xdd5cccb7, 0xbcdddddd, 0xccbbbbbb, 0x775bcc8c, 0xdd5cccb7,\n0xdddddddd, 0xccccbbbd, 0x25bbc878, 0xddbccccb, 0xcddddddd, 0xcccccccc, 0x25bbc878, 0xddbccccb,\n0xbddddddd, 0x8c88ccbb, 0xbbb88888, 0xddccc88c, 0xdddddddd, 0x8c888ccc, 0xbbb88888, 0xddccc88c,\n0xcccddddd, 0xcccccccc, 0x7888cccc, 0xdddccc88, 0xdddddddd, 0xccccccdd, 0x2888cccc, 0xdddccc88,\n0xdddddddd, 0xcccccccd, 0x888cc44b, 0xdddccc88, 0xdddddddd, 0xcccddddd, 0x888cc44b, 0xdddccc88,\n0xdddddddd, 0xcbdddddd, 0x88c6664b, 0xdddbccc8, 0xdddddddd, 0xcbdddddd, 0x88c6664b, 0xdddbccc8,\n0xdddddddd, 0xbbbddddd, 0x88cbb664, 0xdddbbccc, 0xdddddddd, 0xbbbddddd, 0x88cb664b, 0xdddbbccc,\n0xdddddddd, 0xcbbbdddd, 0xcc8ccbbb, 0xddddbbcc, 0xdddddddd, 0xcbbbbbdd, 0xcc8cb6bc, 0xdddbbdcc,\n0xdddddddd, 0xcccbbddd, 0xccccccc8, 0xdddddbdd, 0xdddddddd, 0xccccbbbb, 0xcccccbb8, 0xdddbdddd,\n0xdddddddd, 0x8ccccbbd, 0xddcccc88, 0xdddddddd, 0xdddddddd, 0x8cccccdd, 0xddccc888, 0xdddddddd,\n0xcddddddd, 0xcccccccc, 0xddddddcc, 0xdddddddd, 0xdddddddd, 0xccdddddd, 0xdddddccc, 0xdddddddd,\n0xdddddddd, 0xaaaaaaad, 0xddddddaa, 0xdddddddd, 0xdddddddd, 0x00000000, 0xddd00000, 0xdddddddd,\n0xaadddddd, 0xdaaaaaaa, 0xdddddddd, 0xdddddddd, 0x0ddddddd, 0x555aaaaa, 0xda0aaaaa, 0xdddddddd,\n0x9aaadddd, 0xaaaaaaa9, 0xadddddda, 0xdddddd00, 0x0ddddddd, 0x555aaaaa, 0xaaaaaa55, 0xddddddda,\n0xa99aaddd, 0xddddaaaa, 0xaadddddd, 0xdddddd00, 0x0ddddddd, 0x55aaaaaa, 0xaaaaa555, 0xddddddaa,\n0xa999aadd, 0xddddddda, 0xaaaddddd, 0xddddd000, 0xdddddadd, 0xd5aaaaa0, 0xaaaddddd, 0xdddddaaa,\n0xaa775aad, 0xdddddddd, 0xaaa3dddd, 0xddddd000, 0xddddddad, 0x1111ccad, 0xadddddd1, 0xddddaaaa,\n0xda7555ad, 0xcccccddd, 0xaaa53ccc, 0xddddd000, 0xddddddad, 0x1111cccc, 0xddddd111, 0xddddaaaa,\n0xdd559a5a, 0xccccccdd, 0xaa7ccccc, 0xdddd0005, 0xcdddddaa, 0xddd55ccc, 0xddd1111d, 0xdddaaaaa,\n0xdd9999aa, 0xdddccbbd, 0xaacccccd, 0xdddd0005, 0xcddddaaa, 0xbbbbddcc, 0xdd111ddd, 0xdddaadad,\n0xd09559aa, 0xddddbbbd, 0xaccccddd, 0xdddd0005, 0xc0dddaaa, 0xbbbbddcc, 0xdd11ddbb, 0xdddaadad,\n0x0b2255aa, 0xddddbbbd, 0xacccdddd, 0xddd00055, 0xcddddaaa, 0xddddddcc, 0xd88ddbbb, 0xdddaddad,\n0xdcb225aa, 0xddddbbdd, 0xcccdbbdd, 0xddd0005d, 0xcdddaaaa, 0xddddd0bb, 0xd8dddbbd, 0xdddadddd,\n0xdccb75aa, 0xddbbbddd, 0xcccdbbdd, 0xddd00aad, 0xdddaaaaa, 0xdddddbbb, 0xd8dddbbd, 0xdddadddd,\n0xd5c375ad, 0xbbbddd8d, 0xcc533bbb, 0xddd00a9d, 0xaaaaaaad, 0xccdbcbba, 0xd833dbbb, 0xdddddddd,\n0xdb775aad, 0x2bcc88dd, 0xd1c553d5, 0xddd0099d, 0x99aaaaad, 0xbbbbbaa9, 0x55835dbb, 0xdddddddd,\n0xddaaaadd, 0x228832dd, 0xd1113352, 0xdddd0999, 0x999aaadd, 0xaaaa9999, 0x53353352, 0xdddddddd,\n0xddaaaddd, 0x18725244, 0x95311111, 0xddddd999, 0x99aaaddd, 0xa9999999, 0x333333aa, 0xdddddddd,\n0x4ddddddd, 0x77725766, 0x44bbbb27, 0xddddd444, 0x9aaadddd, 0x99999999, 0x44bbbaa9, 0xddddd444,\n0x64dddddd, 0x37732746, 0x6644bb75, 0xddd44666, 0xaadddddd, 0x99999999, 0x6644aa99, 0xddd44666,\n0x44dddddd, 0x77665466, 0x66664bb7, 0xdd466666, 0x64dddddd, 0x999999a4, 0x6666a999, 0xdd466666,\n0x4ddddddd, 0xccbb6664, 0x66764bbb, 0x30066226, 0x4ddddddd, 0x998c6666, 0x66769999, 0x30066226,\n0xdddddddd, 0xbc84444d, 0x5664cbbb, 0x00547777, 0xdddddddd, 0xb8cddddd, 0x5664cbbb, 0x00547777,\n0xdddddddd, 0xbbcccccc, 0x78ccccbb, 0xd5373577, 0xdddddddd, 0xbbdddddd, 0x78ccccbb, 0xd5373577,\n0xdddddddd, 0xbbdddddd, 0x75cccccb, 0xd50b0577, 0xdddddddd, 0xbbbbdddd, 0x75cccccb, 0xd50b0577,\n0xdddddddd, 0xbbbddddd, 0x75bccccb, 0xd50c0577, 0xbcdddddd, 0xbbbbbbbb, 0x75bccccb, 0xd50c0577,\n0xdddddddd, 0xcbbbdddd, 0x75bcc8cc, 0xd5cccb77, 0xcddddddd, 0xcbbbbbbb, 0x75bcc8cc, 0xd5cccb77,\n0xdddddddd, 0xcccbbbdd, 0x5bbc878c, 0xdbccccb2, 0xdddddddd, 0xcccccccc, 0x5bbc878c, 0xdbccccb2,\n0xdddddddd, 0xc88ccbbb, 0xbb888888, 0xdccc88cb, 0xdddddddd, 0xc888cccd, 0xbb888888, 0xdccc88cb,\n0xccdddddd, 0xcccccccc, 0x888ccccc, 0xddccc887, 0xdddddddd, 0xcccccddd, 0x888ccccc, 0xddccc882,\n0xdddddddd, 0xccccccdd, 0x88cc44bc, 0xddccc888, 0xdddddddd, 0xccdddddd, 0x88cc44bc, 0xddccc888,\n0xdddddddd, 0xbddddddd, 0x8c6664bc, 0xddbccc88, 0xdddddddd, 0xbddddddd, 0x8c6664bc, 0xddbccc88,\n0xdddddddd, 0xbbdddddd, 0x8cbb664b, 0xddbbccc8, 0xdddddddd, 0xbbdddddd, 0x8cb664bb, 0xddbbccc8,\n0xdddddddd, 0xbbbddddd, 0xc8ccbbbc, 0xdddbbccc, 0xdddddddd, 0xbbbbbddd, 0xc8cb6bcc, 0xddbbdccc,\n0xdddddddd, 0xccbbdddd, 0xcccccc8c, 0xddddbddc, 0xdddddddd, 0xcccbbbbd, 0xccccbb8c, 0xddbddddc,\n0xdddddddd, 0xccccbbdd, 0xdcccc888, 0xdddddddd, 0xdddddddd, 0xcccccddd, 0xdccc8888, 0xdddddddd,\n0xdddddddd, 0xcccccccc, 0xdddddccc, 0xdddddddd, 0xdddddddd, 0xcddddddd, 0xddddcccc, 0xdddddddd\n);\n\nint getPaletteIndexXY(in ivec2 fetch_pos) {\n    int palette_index = 0;\n    if(fetch_pos.x >= 0 && fetch_pos.y >= 0\n        && fetch_pos.x < int(bitmap_size.x)&& fetch_pos.y < int(bitmap_size.y)) {\n        int line_index = fetch_pos.y * longs_per_line;\n\n        int long_index = line_index + (fetch_pos.x >> 3);\n        int bitmap_long = bitmap[long_index];\n\n        int nibble_index = fetch_pos.x & 0x07;\n        palette_index = (bitmap_long >> (nibble_index << 2))& 0xf;\n    }\n    return palette_index;\n}\n\n\nint getPaletteIndex(in vec2 uv) {\n    int palette_index = 0;\n    ivec2 fetch_pos = ivec2(uv * bitmap_size);\n    palette_index = getPaletteIndexXY(fetch_pos);\n    return palette_index;\n}\n\nvec4 getColorFromPalette(in int palette_index) {\n    int int_color = palette[palette_index];\n    return vec4(float(int_color & 0xff)/ 255.0,\n                float((int_color >> 8)& 0xff)/ 255.0,\n                float((int_color >> 16)& 0xff)/ 255.0,\n                0);\n}\n\nvec4 getBitmapColor(in vec2 uv) {\n    return getColorFromPalette(getPaletteIndex(uv));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = getBitmapColor(uv);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}