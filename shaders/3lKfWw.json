{
    "Shader": {
        "info": {
            "date": "1614462354",
            "description": "This shader makes procedural textures with many different colors and patterns.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lKfWw",
            "likes": 2,
            "name": "Random procedural textures 2",
            "published": 3,
            "tags": [
                "procedural",
                "texture",
                "random"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n    //from David Hoskin's \"Hash without sine\"\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\nvec2 fract1(vec2 a,vec2 random,float scale1){\n    return (abs(fract(a*scale1+100.0*random)-.5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col;\n    float t;\n    float t2=iTime/20.0;\n    float t3 = 8.0;\n    for(int c=0;c<3;c++){\n\t    vec2 uv = (fragCoord*5.0-iResolution.xy)/iResolution.y/10.0*t3;\n        uv += vec2(iTime/2.0,iTime/3.0)/8.0*t3;\n        float scale = 3.0;\n        \n        \n        //vec3 random = vec3(sin(t2/13.0),sin(t2/17.0),sin(t2/19.0))/2.0+.5;\n        vec3 random = hash31(floor((iTime+uv.x)/5.0))*2.0;\n        float scale1 = .5+(random.z)/2.0;\n        //random.xy = random.z;\n        //vec3 random = hash31(10.0);\n        scale = scale1 * 3.0;\n        \n        for(int i=0;i<3;i++)\n        {\n            \n            random = (hash33(random)-vec3(.5))*2.0;\n            //scale1 *= 1.+random.z/1.7/2.0;\n            uv.y /= scale1;\n            uv=fract(uv/(scale1)+(uv.yx/(scale1))/scale);\n            uv = fract1(uv/scale1,random.yx,scale1)*scale1;\n            uv /= scale;\n            uv=uv.yx+col.yx;\n            uv.y *= -scale+uv.x;\n        }\n     col[c] = fract((uv.x)-(uv.y));\n\t}\n    \n    fragColor = vec4(vec3(col),1.0);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}