{
    "Shader": {
        "info": {
            "date": "1616827976",
            "description": "Can't believe I got this to work after having the idea. \nPress pause and play if the audio doesn't start.\nMouse click mirrors, mouse x controls smoothing, mouse y controls wobble.",
            "flags": 64,
            "hasliked": 0,
            "id": "7dB3Rz",
            "likes": 16,
            "name": "Circular Bar Audio Visualizer",
            "published": 3,
            "tags": [
                "2d",
                "mouse",
                "sound",
                "audiovisualizer"
            ],
            "usePreview": 0,
            "username": "Tater",
            "viewed": 672
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159265359\n#define rot(a) mat2( cos(a),-sin(a),sin(a),cos(a) )\n\n//Inspired by this random gif I saw in someone's steam workshop icon\n//https://steamuserimages-a.akamaihd.net/ugc/1774952891092106678/2D0BC0B276D7C72CA57E2ED2BAA2A55652BD9F0F/\n\n//Mouse click mirrors, mouse x controls smoothing, mouse y controls wobble.\n\n\n//Song\n//https://soundcloud.com/surrealrecordings/babokon-laces\n//https://soundcloud.com/insan3lik3/hai\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    vec2 R = iResolution.xy;\n    vec2 uv = (fragCoord-.5*R.xy)/R.y;\n    vec2 mXY=(iMouse.xy)/iResolution.y; \n    float r = length(uv);\n    \n    if(iMouse.z == 0.0){\n    mXY = vec2(0.5,0.5);\n    }\n    \n    //uv*=rot(iTime*0.3); //SPIIN\n    \n    //wavey\n    uv*=rot(3.0*mXY.y*0.03*sin(t+18.0*(1.0-length(uv))));\n    \n    //converting to polar coordinates 0<->360 -> 0<->1.0\n    //If you know a more elegant way to do this let me know\n    \n    /*\n    float th = atan(uv.y/uv.x);\n    th += pi*step(0.0,-uv.x)+2.0*pi*step(0.0,-uv.y)*step(0.0,uv.x);\n    th /= 2.0*pi;\n    */\n   \n    //I found a more elegant way :D\n    float th = atan(-uv.y,-uv.x)/(2.0*pi)+0.5;\n    \n    \n    float c = 120.0; //bar count (looks pretty cool with low bar counts as well)\n    \n    //c += floor(30.0*pow(sin(t*0.25),2.0)); //bar count changing\n    \n    if(iMouse.z>0.0){\n    th = fract(th*(2.0));\n    }\n    \n    \n    float thID = floor(th*c)/c;\n    th = fract(th*c);\n    \n    float w = (0.12/100.0)*c; //bar gap (try using 0.0)\n    float st = 0.15; //center circle size\n    \n    float aa = c/R.y*step(0.01,w);\n    float aa2 = (0.005)*450.0/R.y;\n\n    //averaging the sound sample from the range of each bar(s) so it's smoother\n    float afft = 0.0;\n    float lps = 0.0;\n    for(int i=int((thID-((1.0+mXY.x*2.0-1.0)/c))*512.0); i<int((thID+(1.0/c))*512.0); i++){\n        afft+=texelFetch( iChannel0, ivec2(clamp(float(i),0.0,512.0),0), 0 ).x;\n        lps++;\n    }\n    afft/=lps;\n    \n    float sen = 2.9; //log scale adjustment\n    float end = (log(0.001+afft*sen)+st)/(log(sen)*2.0);\n    end = (end+afft*0.6)/2.0;\n    //end = clamp(end,0.0,0.50);\n    \n    vec3 col1 = vec3(256.0,66.0,66.0)/256.0;\n    vec3 col2 = vec3(66.0,66.0,245.0)/256.0;\n    vec3 col3 = mix(col1,col2,r*2.6);\n    float li1 = smoothstep(w-aa,w,th)-smoothstep(1.0-w-aa,1.0-w,th);\n    float li2 = smoothstep(st-aa2,st,r)-smoothstep(end-aa2,end,r);\n    float o = min(li1,li2);\n    col3*= o;\n    col3 += (1.0-o)*mix(vec3(0),vec3(32.0,4.0,64.0)/256.0,length(uv));\n    \n    fragColor = vec4(col3,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 26844,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/insan3lik3/hai"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}