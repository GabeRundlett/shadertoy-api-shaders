{
    "Shader": {
        "info": {
            "date": "1655436971",
            "description": "Was reading Chaos in Wonderland so I wanted to write a shader that draws a strange attractor like the Basic program does in the book.\n\nyou might need to pause and reset for it to work.",
            "flags": 32,
            "hasliked": 0,
            "id": "NdGczc",
            "likes": 1,
            "name": "kings dream",
            "published": 3,
            "tags": [
                "fractal",
                "attractors",
                "kingsdream"
            ],
            "usePreview": 0,
            "username": "mAmaro",
            "viewed": 233
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord -iResolution.xy)/iResolution.y;\n    uv*=iTime;\n    vec4 tex  = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    #if 1\n    uv = vec2(atan(uv.x, uv.y), length(uv));\n    tex.r *= 0.5+0.2*sin(iTime+uv.x);\n    tex.g *= 0.5+0.2*cos(iTime-uv.y/uv.x);\n    #endif\n    fragColor = tex;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 Clifford(vec2 pos, vec2 consts)\n{\n    //a:r b:g c:b d:a\n    return vec2(sin(pos.x*pos.y/consts.g)*pos.y+cos(consts.r*pos.x-pos.y),\n                pos.x+sin(pos.y)/consts.g);\n}\n\nvec2 FractalDream(vec2 pos, vec4 consts)\n{\n    //a:r b:g c:b d:a\n    return vec2(sin(pos.y*consts.g) + consts.b*sin(pos.x*consts.g),\n                sin(pos.x*consts.r) + consts.a*sin(pos.y*consts.r));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    uv.x *= 1.86;\n    uv.y *= 1.51;\n    uv *= 0.5;\n    vec4 pos = vec4(uv, 1.0, 1.0);\n    float t = GetClock(iTime); // Allow 10.0 seconds before recomputing points\n    vec4 consts;\n    float Id = GetClockResetCount(iTime);\n    if(ShouldChangeInitialConditions(iTime))\n    {\n        consts.r = 3.0*Noise2(vec2(124.4,Id*Id)).x;\n        consts.g = 3.0*Noise2(vec2(Id*Id,uv.x*Id)).y;\n        consts.b = 3.0*Noise2(vec2(0.035235,Id)).x;\n        consts.a = 3.0*Noise2(vec2(mod(Id, 3.0)*0.124, sin(Id))).y;\n    }\n    else\n    {\n        consts.r = -0.966918;\n        consts.g =  2.879879;\n        consts.b =  0.765145;\n        consts.a =  0.744728;\n    }\n    // Only start the iterated function after 1 second elapses\n    if(t > 1.0)\n    {\n        // Overwrite the assumes init condision with result of functions\n        // previous run\n        pos = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        // Stop trying to compute points for the attractor after some time\n        // passes\n        if(t < MaxRenderTime)\n        {\n            vec2 tmp = pos.xy;\n            tmp = mod(Id, 5.0)<3.0?FractalDream(tmp, consts):Clifford(tmp, consts.rg/3.0);\n            pos = vec4(tmp, 1.0, 1.0);\n        }\n    }\n    fragColor = pos;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    uv.x *= 1.86;\n    uv.y *= 1.51;\n    //uv /= iTime*0.2;\n    //uv += fract(iTime*0.2);\n    float t = GetClock(iTime); // Allow 10.0 seconds before recomputing points\n    vec4 tex  = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec4 col = vec4(0.0);\n    float tolerance = 0.1;\n    float Valid = smoothstep(0.0, tolerance, length(uv-tex.xy))*\n                  smoothstep(0.0, tolerance, length(uv-tex.xy));\n    vec2 Attractor = vec2(Valid); //[0]\n    float Dot = smoothstep(0.1, 0.0, length(Attractor));\n    col = vec4(vec2(Dot), Dot, 1.0);\n    \n    vec4 canvas = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    #if 0\n    float dt = iTimeDelta;\n            float acc = 3.0;\n            float speed = 1.3;\n            vec2 oldvel = pos.zw;\n            vec2 newvel = acc*dt + mix(oldvel, speed*normalize(pos.xy-tmp), 0.5);\n            tmp = newvel*dt + 0.5*acc*dt*dt + tmp.xy;\n    #endif\n    fragColor = (t<1.0)?col:(col+canvas);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Percentage of the total clock cycle time deicated to rendering\n#define ClockCycleTime 10.0\n#define RenderTime     00.8\n#define MaxRenderTime  ClockCycleTime*RenderTime\n\nfloat GetClock(float Time)\n{\n    return mod(Time, ClockCycleTime);\n}\n\nfloat GetClockResetCount(float Time)\n{\n    return floor(Time/ClockCycleTime);\n}\n\nbool ShouldRender(float Time)\n{\n    return (Time<(ClockCycleTime*RenderTime));\n}\n\nbool ShouldChangeInitialConditions(float Time)\n{\n    float KingsCycle = mod(GetClockResetCount(Time), 5.0);\n    bool IsFirstReset = (KingsCycle<1.0);\n    return IsFirstReset==false;\n}\n\nvec2 Noise2(vec2 p)\n{\n    vec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));\n    a += dot(a, a + 34.45);\n    return fract(vec2(a.x*a.y, a.y*a.z));\n}\n\n//NOTE: Not so very code replaced by [0]\n#if 0\n\nbool F32Equals(float val, float expected, float epsilon)\n{\n    \n   return ((expected-epsilon*0.5) <= val) && (val <= (expected+epsilon*0.5));\n}\n\nif(F32Equals(tex.x, uv.x, 0.07) &&\n   F32Equals(tex.y, uv.y, 0.07) )\n{\n    //float Dot = smoothstep(0.20, 1.0, 0.1+0.2*0.5+0.5*sin(iTime)*length(tex.xy));\n    //col = vec4(tex.xy, Dot, col.w);\n}\n#endif",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}