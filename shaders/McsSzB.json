{
    "Shader": {
        "info": {
            "date": "1705413929",
            "description": "Gradient audio line music visualizer for a freelance client",
            "flags": 0,
            "hasliked": 0,
            "id": "McsSzB",
            "likes": 2,
            "name": "Gradient Audio Lines",
            "published": 3,
            "tags": [
                "music",
                "line",
                "gradient",
                "audio",
                "visualizer"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 116
        },
        "renderpass": [
            {
                "code": "const float HUE = 0.0;\n\n// SVG rendering from: https://www.shadertoy.com/view/ldXyRn\n#define N 16. // splines discretization. Lower it on slow GPUs\n\n#define M(x, y) x0 = _x = x, y0 = _y = y, px = py = 0.0;\n#define L(x, y) d = min(d, line(uv, vec2(_x, _y), vec2(x, y))); _x = x, _y = y, px = py = 0.0;\n#define C(x1, y1, x2, y2, x, y) d = min(d, bezier(uv, vec2(_x, _y), vec2(x1, y1), vec2(x2, y2), vec2(x, y))); _x = x, _y = y, px = x - (x2), py = y - (y2);\n#define S(x2, y2, x, y) C(_x + px, _y + py, x2, y2, x, y)\n#define Q(x1, y1, x, y) d = min(d, bezier_quad(uv, vec2(_x, _y), vec2(x1, y1), vec2(x, y))); _x = x, _y = y, px = x - (x1), py = y - (y1);\n#define T(x, y) Q(_x + px, _y + py, x, y)\n#define H(x) d = min(d, line(uv, vec2(_x, _y), vec2(x, _y))); _x = x, px = py = 0.0;\n#define V(y) d = min(d, line(uv, vec2(_x, _y), vec2(_x, y))); _y = y, px = py = 0.0;\n//#define A(rx, ry, xrot, large, sweep, x, y) _x = x, _y = y, px = py = 1e8;\n#define Z d = min(d, line(uv, vec2(_x, _y), vec2(x0, y0))), px = py = 0.0;\n\n#define m(x, y) M(_x + x, _y + y)\n#define l(x, y) L(_x + x, _y + y)\n#define c(x1, y1, x2, y2, x, y) C(_x + x1, _y + y1, _x + x2, _y + y2, _x + x, _y + y)\n#define s(x2, y2, x, y) S(_x + x2, _y + y2, _x + x, _y + y)\n#define q(x1, y1, x, y) Q(_x + x1, _y + y1, _x + x, _y + y)\n#define t(x, y) T(_x + x, _y + y)\n#define h(x) H(_x + x)\n#define v(y) V(_y + y)\n//#define a(rx, ry, xrot, large, sweep, x, y) A(rx, ry, xrot, large, sweep, x, y)\n#define z Z\n\n#define style(f, c) fill = f; S = 1.; COL = mod(vec4((c) / 65536, (c) / 256, c, 1), 256.) / 255.;\n#define path(cmd) _x = _y = x0 = y0 = px = py = 0.0, d = 1e8; cmd; draw(uv, d, O);\n\nfloat bezier(vec2, vec2, vec2, vec2, vec2);\nfloat bezier_quad(vec2, vec2, vec2, vec2);\nfloat line(vec2, vec2, vec2);\nfloat ellipse_arc(vec2, vec2, float, float, float, vec2);\nvoid draw(vec2, float, inout vec4);\nconst float FILL = 1., CONTOUR = 0.;\nvec4 COL = vec4(0); float fill = FILL, S = 1.;\nfloat d = 1e38;\n\nvoid SVG(vec2 uv, inout vec4 O)\n{\n    float _x, _y, x0, y0, px, py;\n    uv.y = 1.0 - uv.y;\n   \n    uv = uv * 1.25 - vec2(0.3, 0.01);\n    if (uv.x < -0.1 || uv.x > 1.1) {\n        return;\n    }\n    \nuv *= vec2(134.6, 138.6);\n// SVG optimized by custom software\npath(style(FILL, 0)\nm(117.,138.)q(-3.7,.0,-6.,-3.3)t(-2.,-8.6)V(88.)c(.0,-6.,2.8,-7.5,5.,-7.5)l(10.5,2.)V(51.)l(.8,-.8)h(1.)Q(111.,9.,67.5,6.5)h(-.6)Q(23.7,9.4,9.,50.3)h(.5)l(.8,.8)v(31.6)l(4.7,-1.2)l(6.,-.9)s(5.,1.3,5.,7.5)v(37.8)q(.0,5.5,-2.,8.6)t(-6.,3.3)H(1.5)l(-.8,-.8)V(51.)l(.8,-.8)h(1.)C(10.3,21.2,36.7,.9,67.,.8)h(.3)c(30.3,.0,56.7,20.4,64.5,49.6)h(1.5)l(.8,.8)v(86.)l(-.8,.8)h(-16.4)z\nm(1.5,-15.4)c(.0,3.4,1.3,3.4,1.8,3.4)h(4.)V(93.)l(-6.,-.2)v(29.6)z\nM(14.5,126.)s(1.8,.0,1.8,-3.4)V(93.)l(-6.,.2)v(33.)h(4.)z\n)\n\n}\n\nvec2 interpolate(vec2 G1, vec2 G2, vec2 G3, vec2 G4, float t)\n{\n  return t * (t * (t * (G4 - G1 + 3. * (G2 - G3)) + 3. * (G1 - 2. * G2 + G3)) + 3. * (G2 - G1)) + G1;\n}\n\nvec2 interpolate_quad(vec2 G1, vec2 G2, vec2 G3, float t)\n{\n  return t * (t * (G3 - 2. * G2 + G1) + 2. * (G2 - G1)) + G1;\n}\n\nfloat line(vec2 p, vec2 a, vec2 b)\n{\n  vec2 pa = p - a, ba = b - a,\n    d = pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n  if ((a.y > p.y) != (b.y > p.y) &&\n      pa.x < ba.x * pa.y / ba.y) S = -S;\n  return dot(d, d);\n}\n\nfloat bezier(vec2 uv, vec2 A, vec2 B, vec2 C, vec2 D)\n{\n  vec2 p = A;\n  for (float t = 1.; t <= N; t++) {\n    vec2 q = interpolate(A, B, C, D, t / N);\n    float l = line(uv, p, q);\n    d = min(d, l);\n    p = q;\n  }\n  return d;\n}\n\nfloat bezier_quad(vec2 uv, vec2 A, vec2 B, vec2 C)\n{\n  vec2 p = A;\n  for (float t = 1.; t <= N; t++) {\n    vec2 q = interpolate_quad(A, B, C, t / N);\n    float l = line(uv, p, q);\n    d = min(d, l);\n    p = q;\n  }\n  return d;\n}\n\nfloat ellipse_arc(vec2 uv, vec2 radii, float xrot, float large, float sweep, vec2 end)\n{\n    return 10000.0;\n}\n\nvoid draw(vec2 uv, float d, inout vec4 O)\n{\n  float d2 = d;\n  float f = length(fwidth(uv)) * 8.0;\n  O = mix(vec4(1), O, smoothstep(1.5 - f * 0.25, 1.5 + f * 0.25, d2));\n  O = mix(COL, O, smoothstep(-f * 2.0, 0.0, S * d * 8.0));\n}\n\nfloat elongate(vec2 p, float h) { \n\tvec2 q = abs(p) - vec2(0.0, h); \n    p = sign(p) * max(q, 0.0);\n\treturn length(p) - 0.011 + min(max(q.x, q.y), 0.0); \n}\n\nvec3 hue_shift(vec3 c, float s){\n    return c * mat3(c += .33 - (c = vec3(cos(s), s = -sin(s) * .6, -s)).x / 3., c.zxy, c.yzx);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    const vec2 scale = vec2(40, 1);\n    float id = floor(uv.x * scale.x) / scale.x;\n    vec2 iv = fract(uv * scale) * 2.0 - 1.0 + vec2(0.0, 0.3);\n    float a = iResolution.y / iResolution.x;\n    float music = texelFetch(iChannel0, ivec2(abs(id - 0.35) * 512.0, 0), 0).r;\n    music = (1.0 - exp(-music * music)) * 0.5;\n    float d = elongate(iv / scale * vec2(1.0, a), music);\n  float f = length(fwidth(uv));\n    d = smoothstep(-f, f, d);\n    vec3 col = vec3(-0.2, -0.2, 0.5) + vec3(1.25, 1.0, 1.5) * (cos(1.5 * 3.1415 * (uv.xxx * vec3(2.25, 1.8, 0.6) + vec3(1.5, 1.0, -0.15))) * 0.5 + 0.5);\n    col = hue_shift(col, HUE);\n    col = mix(col, vec3(1), d);\n\n    fragColor = vec4(col, 1.0);\n    SVG(fragCoord / min(iResolution.x, iResolution.y), fragColor);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}