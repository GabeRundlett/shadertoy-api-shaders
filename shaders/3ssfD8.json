{
    "Shader": {
        "info": {
            "date": "1588177292",
            "description": "experimenting with feedback and delay.",
            "flags": 8,
            "hasliked": 0,
            "id": "3ssfD8",
            "likes": 7,
            "name": "distantringsoflight",
            "published": 3,
            "tags": [
                "sound",
                "rings",
                "space",
                "practice",
                "delay",
                "reverberation"
            ],
            "usePreview": 0,
            "username": "nabr",
            "viewed": 403
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 O, in vec2 U)\n{\n    #define t iTime\n    vec2 R = iResolution.xy;\n    vec3 d = vec3((U - .5 * R) / min(R.x, R.y), .5+(sin(t)*.1+.1));\n    vec3 dn = vec3(.314, 1.57, 6.28), dc = vec3(0, 0, 3), c = vec3(sin(t) * .3, .2, .89);\n    if (all(lessThan(abs(d.xy), vec2(.6))))\n    {\n        for (int i = 0; i < 6; ++i)\n        {\n            dn = (cos(.5 * t) * dn - sin(.5 * t) * vec3(dn.y, -dn.x, cos(.5 * t)));\n            vec3 D = dot(dn, dc - d) / dot(dn, d) * d - dc;\n            float r = 1. - length(3. - dot(D, D));\n            if (r > .5)\n            {\n                vec3 p = r * D + d;\n                vec3 l = normalize(20. * vec3(cos(t), sin(t), 1));\n                c = .58 - length(r) + vec3(1, .415, .1) * max(0., 1. - dot(l + p, -p));\n            }\n            d += dot(-.0215 * dc, 2. * d) * dc;\n        }\n        c = 1. - dot(vec3(.2, .5, 1), c) * vec3(.9);\n    }\n    else\n        c = vec3(.051) * float(int(t + U * 2.) & 2);\n    O = vec4(c, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// -----------------------------------------------------\n// distantringsoflight by nabr\n// https://www.shadertoy.com/view/3ssfD8\n// License Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)\n// https://creativecommons.org/licenses/by-nc/4.0/\n// -----------------------------------------------------\n// bandcamp:\n// https://tolka-nabroski.bandcamp.com/track/distant-rings-of-light\n\n#define SR iSampleRate\n#define e 1e-3\nfloat intfract(int, float);\n// synth\nfloat synth(int samp, float rt)\n{\n    uint uta=uint(.125*rt);\n    float rs2=(2.*rt),ft=mod(rs2,1.),\n          a=sqrt(2.*ft*exp(log2((1.+1e-5)-ft)/(.5+ft)));//attack/decay\n    float p0ar[4u]=float[4u](491.,291.,251.,e);\n    float p1ar[12u]=float[12u](1000.,e,e,e,e,e,e,1120.,880.,e,600.,e);\n    //freq\n    float[4u]p0a=float[4u](0.,0.,0.,0.);\n    p0a[0u]=440.;p0a[1u]=720.;\n    p0a[2u]=samp>=1411200?p0ar[((1315313u%(uta+1u))%3u)]:491.;//44100*32\n    p0a[3u]=991.;\n    return(sin(6.283185*intfract(samp,SR/p0a[uint(rs2)%4u]))\n           +sin(6.283185*intfract(samp,SR/p1ar[uta%12u])))*a;\n}\n// reverberation\nconst float[6u]ha=float[6u](.184089,.118295,.074423,.046412,.029080,.018004);\nconst uint sz = 6u; //uint(ha.length());\nvec2[6u]z; //=vec2[6u](vec2(1e-3),vec2(1e-3),vec2(1e-3),vec2(1e-3),vec2(1e-3),vec2(1e-3));\nvec2[sz]stdly(in vec2 v,out float t,in int sn)\n{\n    float rsn=(float(sn)/SR),cds=rsn+(.25*t);//copy dry timesignal\n    t+=ha[uint(rsn/SR)%sz];\n    rsn+=t;\n    // wet + dry * rot\n    v.x=synth(sn/2,rsn)+.251*synth(sn,cds)*(cos(t)+sin(t));\n    v.y=synth(sn/2,rsn)+.251*synth(sn,cds)*(-sin(t)+cos(t));\n    // unroll for mobile and similar z =vec2[](v, v, v, v, v, v);\n    z[0]=v;z[1]=v;z[2]=v;z[3]=v;z[4]=v;z[5]=v;\n    return z;\n}\nvec2 mainSound( in int s,float time)\n{\n   // int block=int((iBlockOffset+0.5)*iSampleRate/(512.*512.));\n   // int s=512*512*block+512*int(gl_FragCoord.y)+int(gl_FragCoord.x);\n    vec2 snd=vec2(1e-3),v=vec2(1e-3);\n    float t=float(s)/SR;\n    for(uint j=0u;j<3u;++j)\n        for(uint i=0u;i<sz;++i)\n            snd+=stdly(v,t,s)[i];\n    // --------out\n    return snd*0.027778;//(6.*float(sz))\n}\nfloat intfract(int s,float n)\n{\n    // Explanation and copyright: shadertoy.com/view/4ltfRN\n    int sn=int(n),a=s%sn,b=(s/sn);\n    const float MAXF=float(uint(-1))+1.;\n    return fract((float(a)/n)+float((uint(b)*uint(MAXF*float(sn)/n)))/MAXF);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}