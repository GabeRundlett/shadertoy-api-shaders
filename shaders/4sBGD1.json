{
    "Shader": {
        "info": {
            "date": "1387675116",
            "description": "Classic motion blur through per-pixel dithering, no cheats, no cleverness. Left: single sample. Right: multiple samples (64 on PC, 24 on Mobile)",
            "flags": 0,
            "hasliked": 0,
            "id": "4sBGD1",
            "likes": 95,
            "name": "Motion Blur",
            "published": 3,
            "tags": [
                "3d",
                "raytracing",
                "grid",
                "blur",
                "motionblur",
                "motionblur",
                "motion",
                "dithering",
                "mblur"
            ],
            "usePreview": 1,
            "username": "iq",
            "viewed": 9940
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2013 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\n// Traditional motion blur by dithering time.\n// See line 96.\n\n\n#if HW_PERFORMANCE==0\n#define VIS_SAMPLES 24\n#else\n#define VIS_SAMPLES 64\n#endif\n\n\nfloat hash1( vec2  n ) { return fract(158.4235129*sin(dot(n,vec2(1.0,113.0)))); }\nvec2  hash2( float n ) { return fract(137.5717323*sin(vec2(n,n+1.0))); }\nvec3  hash3( vec2  n ) { return fract(237.5451123*sin(dot(n,vec2(1.0,113.0))+vec3(0.0,1.0,2.0))); }\n\nvec4 castRay( in vec3 ro, in vec3 rd, in int num )\n{\n\tvec2 pos = floor(ro.xz);\n\tvec2 ri = 1.0/rd.xz;\n\tvec2 rs = sign(rd.xz);\n\tvec2 ris = ri*rs;\n\tvec2 dis = (pos-ro.xz+ 0.5 + rs*0.5) * ri;\n\t\n\tvec4 res = vec4( -1.0, 0.0, 0.0, 0.0 );\n\t\n    // traverse regular grid (in 2D)\n\tfor( int i=0; i<12; i++ ) \n\t{\n\t\tif( i>num ) break;\n\t\t\n        // intersect sphere\n\t\tvec3  rr = hash3(pos);\n\t\tvec2  oo = 0.5 + 0.3*(-1.0 + 2.0*rr.xy);\n\t\tvec3  ce = vec3( pos.x+oo.x, 0.5, pos.y+oo.y );\n\t\tfloat ra = (0.5+0.5*rr.z)*min( min(oo.x,1.0-oo.x), min(oo.y,1.0-oo.y) );\n\t\tvec3  rc = ro - ce;\n\t\tfloat b = dot( rd, rc );\n\t\tfloat c = dot( rc, rc ) - ra*ra;\n\t\tfloat h = b*b - c;\n\t\tif( h>0.0 )\n\t\t{\n\t\t\tfloat s = -b - sqrt(h);\n\t\t\tres = vec4( s, 0.0, pos );\n\t\t\tbreak;\n\t\t}\n\n        // step to next cell\t\t\n\t\tvec2 mm = step( dis.xy, dis.yx ); \n\t\tdis += mm*ris;\n        pos += mm*rs;\n\t}\n\n\treturn res;\n}\n\nvec3 cameraPath( float t )\n{\n    vec2 p  = 200.0*sin( 0.01*t*vec2(1.2,1.0) + vec2(0.1,0.9) );\n\t     p += 100.0*sin( 0.02*t*vec2(1.1,1.3) + vec2(1.0,4.5) );\n\tfloat y = 4.0 + 2.0*sin(0.05*t);\n\n\treturn vec3( p.x, y, p.y );\n}\n\nconst vec3 bgcol = vec3(0.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord / iResolution.xy;\n\t\t\n    int numSamples = (q.x<0.5) ? 1 : VIS_SAMPLES;\n        \n\t// montecarlo\t\n\tvec3 tot = vec3(0.0);\n    #define ZERO (min(iFrame,0))\n\tfor( int a=ZERO; a<numSamples; a++ )\n\t{\n\t\tvec4 rr = textureLod( iChannel1, (fragCoord+floor(256.0*hash2(float(a))))/iChannelResolution[1].xy, 0.0 );\n        \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        \n        // motion blur\n        float time = iTime + (0.5/24.0)*(float(a)+rr.w)/float(numSamples);\n\n\t\t// camera\n        vec3  ro = cameraPath( 16.0*time );\n        vec3  ta = cameraPath( 16.0*time+5.0 ); ta.y = ro.y - 5.5;\n        float cr = 0.2*cos(time*0.8);\n        vec3  ww = normalize( ta - ro);\n        vec3  uu = normalize(cross( vec3(sin(cr),cos(cr),0.0), ww ));\n        vec3  vv = normalize(cross(ww,uu));\n        float r2 = p.x*p.x*0.32 + p.y*p.y;\n        p *= (7.0-sqrt(37.5-11.5*r2))/(r2+1.0);\n        vec3  rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n        // dof\n        vec3 fp = ro + rd * 17.0;\n        ro += (uu*(-1.0+2.0*rr.y) + vv*(-1.0+2.0*rr.w))*0.05;\n        rd = normalize( fp - ro );\n\n        vec3 col = bgcol;\n\t\t\n\t    // trace bounding plane y=1\n\t\tfloat tp = (1.0-ro.y)/rd.y;\n\t\tif( tp>0.0 )\n\t\t{\n\t\t\tro = ro + rd*tp;\n            float n = 1.0 - 1.0/rd.y;\n\n            // trace spheres\t\t\t\n\t\t\tvec4 res  = castRay(  ro, rd, int(n) );\n\t\t\tfloat t = res.x;\n\t\t\tvec2 vos = res.zw;\n\t\t\tif( t>0.0 )\n\t\t\t{\n\t\t\t\tvec3  pos = ro + rd*t;\n\t\t\t\tfloat id  = hash1( vos );\n\t\t\t\tvec3  rr = hash3(vos);\n\t\t\t\tvec2  oo = 0.5 + 0.3*(-1.0 + 2.0*rr.xy);\n\t\t\t\tvec3  nor = normalize( fract(pos)-vec3(oo.x,0.5,oo.y) );\n\t\t\t\tcol = 0.5 + 0.45*sin( 3.1*id + 0.0+vec3(1.0,0.5,2.0) );\n\t\t\t\tcol *= (0.5+0.5*nor.y)* clamp( pos.y, 0.0, 1.0 );\n\t\t\t\tcol *= exp(-0.02*t*t);\n\t\t\t}\n\t\t}\n\t\ttot += col;\n\t}\n\ttot /= float(numSamples);\n\t\n\ttot = pow( clamp(tot,0.0,1.0), vec3(0.44) );\n    \n    //tot *= smoothstep( 0.004, 0.005, abs(q.x-0.5) );\n    tot = mix( tot, vec3(1.0), 1.0-smoothstep( 0.002, 0.003, abs(q.x-0.5) ) );\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}