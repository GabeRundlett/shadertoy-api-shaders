{
    "Shader": {
        "info": {
            "date": "1666451301",
            "description": "https://babylonjs.medium.com/retro-crt-shader-a-post-processing-effect-study-1cb3f783afbc",
            "flags": 0,
            "hasliked": 0,
            "id": "css3R2",
            "likes": 3,
            "name": "CRT Effect Shader",
            "published": 3,
            "tags": [
                "crt"
            ],
            "usePreview": 0,
            "username": "diogoquintas",
            "viewed": 462
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535897932384626433832795\n\nvec2 curvature = vec2(3.0, 3.0);\n\nfloat brightness = 4.0;\nfloat vignetteOpacity = 1.0;\nfloat lineOpacity = 1.0;\n\nvec2 curveRemapUV(vec2 uv)\n{\n    uv = uv * 2.0 - 1.0;\n    \n    vec2 offset = abs(uv.yx) / vec2(curvature.x, curvature.y);\n    \n    uv = uv + uv * offset * offset;\n    uv = uv * 0.5 + 0.5;\n    \n    return uv;\n}\n\nvec4 scanLineIntensity(float uv, float resolution, float opacity)\n{\n    float intensity = sin(uv * resolution * PI * 2.0);\n    \n    intensity = ((0.5 * intensity) + 0.5) * 0.9 + 0.1;\n    \n    return vec4(vec3(pow(intensity, opacity)), 1.0);\n}\n\nvec4 vignetteIntensity(vec2 uv, vec2 resolution, float opacity)\n{\n    float intensity = uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y);\n    \n    return vec4(vec3(clamp(pow((resolution.x / 4.0) * intensity, opacity), 0.0, 1.0)), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 remappedUV = curveRemapUV(uv);\n\n    if (remappedUV.x < 0.0 || remappedUV.y < 0.0 || remappedUV.x > 1.0 || remappedUV.y > 1.0){\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    } else {\n        fragColor = texture(iChannel0, remappedUV);\n        \n        fragColor *= vignetteIntensity(remappedUV, iResolution.xy, vignetteOpacity);\n        fragColor *= scanLineIntensity(remappedUV.x, iResolution.y, lineOpacity);\n        fragColor *= scanLineIntensity(remappedUV.y, iResolution.x, lineOpacity);\n        fragColor *= vec4(vec3(brightness), 1.0);\n    } \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}