{
    "Shader": {
        "info": {
            "date": "1644997094",
            "description": "Peaceful music?",
            "flags": 8,
            "hasliked": 0,
            "id": "ssfBzS",
            "likes": 7,
            "name": "Sound Experiment #4",
            "published": 3,
            "tags": [
                "sound",
                "experiment",
                "peaceful"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 229
        },
        "renderpass": [
            {
                "code": "// Modified version of font loader from https://www.shadertoy.com/view/ltcXzs\nvoid drawChar(inout vec3 color, in vec3 charColor, in vec2 uv, in vec2 pos, in vec2 size, in int char) {\n    uv = (uv - pos) / size + 0.5;\n    vec2 charUv = uv / 16.0;\n    vec2 dfdx = dFdx(charUv);\n    vec2 dfdy = dFdy(charUv);\n    if (all(lessThan(abs(uv - 0.5), vec2(0.5)))) {\n        float val = textureGrad(iChannel0, charUv + fract(vec2(char, 15 - char / 16) / 16.0), dfdx, dfdy).r;\n        color = mix(color, charColor, val);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Default shader\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0.0, 2.0, 4.0));\n    fragColor = vec4(color, 1.0);\n\n    // Correct aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n\n    // \"Sound In\" notification\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.3, 0.3), vec2(0.1), 83); // S\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.4, 0.3), vec2(0.1), 79); // O\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.5, 0.3), vec2(0.1), 85); // U\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.6, 0.3), vec2(0.1), 78); // N\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.7, 0.3), vec2(0.1), 68); // D\n\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(0.9, 0.3), vec2(0.1), 73); // I\n    drawChar(fragColor.rgb, vec3(1.0), uv, vec2(1.0, 0.3), vec2(0.1), 78); // N\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define TAU 6.2831853072\n\nfloat amp(in float freq, in float time) {\n    return (sin(time) * exp(-freq) + 0.01 * sin(5.0 * (freq + time)) + 0.1) * 14.3;\n}\n\n// Stop puzzling, the name is meaningless\nfloat bar(in float time, in float foo) {\n    float sound = 0.0;\n    for (float freq=1.0; freq < 6.0; freq++) {\n        sound += amp(freq, time * 10.0) * sin(TAU * fract(foo * freq * time));\n    }\n\n    return sound;\n}\n\n#define safepow(x, n) sign(x) * pow(abs(x), n)\nfloat makeNoise(in float time) {\n    float sound = 0.0;\n    sound += bar(time, 50.0);\n    sound += bar(time, 100.0);\n    sound += bar(time, 200.0);\n    sound += cos(0.5 * time) * bar(time, 300.0);\n    sound += safepow(sin(0.25 * time), 3.0) * bar(time, 400.0 + 100.0 * step(6.0, mod(time, 10.0)));\n    return sound / 200.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "vec2 mainSound(int samp, float time) {\n    return vec2(makeNoise(time));\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}