{
    "Shader": {
        "info": {
            "date": "1544446038",
            "description": "blue   : show particle position\ngreen : particles at y position Normal Distribution\nred    : particles at x position Normal Distribution\nwhite : particles at different circle Rayleigh distribution\nDrag Mouse freeze or scale particles distribution speed.\n",
            "flags": 32,
            "hasliked": 0,
            "id": "4lGfWt",
            "likes": 5,
            "name": "Gas Molecule diffusion",
            "published": 3,
            "tags": [
                "gaussian",
                "rayleigh",
                "distribution",
                "molecule",
                "gas"
            ],
            "usePreview": 0,
            "username": "834144373",
            "viewed": 824
        },
        "renderpass": [
            {
                "code": "\n/*\n\tMake sure you must be each component is uncorrelated\n*/\n\n/*----------------Main Knowledge Reference----------------- \n\thttps://en.wikipedia.org/wiki/Normal_distribution\n\thttps://en.wikipedia.org/wiki/Rayleigh_distribution\t\n\tFabriceNeyret's random walk: https://www.shadertoy.com/view/llGczV\n*/\n\n\n//statistics range\n#define Section 2.2 \n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    ivec2 iU = ivec2(U-0.5);\n    vec2 centerUV = (U+U-R);\n    float p = 0.;\n    \n    float RayleighCount = 0.;\n    float X_GaussianCount = 0.;\n    float Y_GaussianCount = 0.;\n    for(int x=0;x<N;x++){\n        for(int y=0;y<N;y++){\n        \tivec2 xy = ivec2(x,y);\n            vec2 point = texelFetch(iChannel0,xy,0).xy;\n            vec2 pointCoord = centerUV-point;\n            float d = length(pointCoord);\n            float circle = length(point);\n            //statistics melocule\n            if(d<3.) p++;\n            //statistics melocule at different circle length\n            if(abs(circle-U.x) < Section) RayleighCount++;\n\t\t\t//statistics melocule at x-axis\n            if((abs(pointCoord.x)) < Section) X_GaussianCount++;\n\t\t\t//statistics melocule at y-axis \n            if((abs(pointCoord.y)) < Section) Y_GaussianCount++;\n            \n        }\n    }\n    \n    //show melocule distribution fall on x-axis direction (Normal Distribution)\n    C.r = X_GaussianCount > U.y ? 1. : 0.;\n    //show melocule distribution fall on y-axis direction (Normal Distribution)\n    C.g = Y_GaussianCount > U.x ? 1. : 0.;\n\t//show melocule position\n    C += vec4(0.,p,p,1.);\n    //show melocule distribution at different circle length (Rayleigh Distribution)\n    C +=  RayleighCount > U.y ? vec4(1.,1.,1.,0.) : vec4(0.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define time iTime\n#define R iResolution.xy\n#define N 30\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float seed;\nfloat GetRandom(){return fract(sin(seed++)*43758.5453123);}  \n\n\n\n//Distribution Speed\nfloat Speed = 4.;\n\n\nvoid mainImage( out vec4 C, in vec2 U ){\n\tivec2 iU = ivec2(U);\n    if(any(greaterThan(iU,ivec2(N,N)))){\n    \treturn;\n    }\n    C = texelFetch(iChannel0,iU,0);\n    seed = time + dot(U/R,vec2(12.9898,78.233));\n    \n    \n    Speed *= 1.-iMouse.x/R.x;\n    /*\n    \tAssuming that each component is uncorrelated\n    */\n\tC.s += (GetRandom()-0.5)*2.*Speed;\n    C.t += (GetRandom()-0.5)*2.*Speed;\n\t\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}