{
    "Shader": {
        "info": {
            "date": "1590590126",
            "description": "Quick doodle. Kind of makes me think of the ocean. SPIKENUM scales the number of spikes.",
            "flags": 0,
            "hasliked": 0,
            "id": "wsSBzt",
            "likes": 1,
            "name": "In the Vortex of Spiky Things",
            "published": 3,
            "tags": [
                "tunnel",
                "twister",
                "lattice",
                "spiky"
            ],
            "usePreview": 0,
            "username": "Roninkoi",
            "viewed": 377
        },
        "renderpass": [
            {
                "code": "#define SPIKENUM 1.0\n\n#define PI 3.14159265\n#define MAXIT 200\n#define EPSILON 0.08\n \n#define minx4(a, b) ((a.w) < (b.w) ? (a) : (b))\n#define minx2(a, b) ((a.x) < (b.x) ? (a) : (b))\n \nmat3 rotX(float a)\n{\n    return mat3(\n        1., 0., 0.,\n        0., cos(a), -sin(a),\n        0., sin(a), cos(a)\n    );\n}\n \nmat3 rotY(float a)\n{\n    return mat3(\n        cos(a), 0.0, -sin(a),\n        0., 1., 0.,\n        sin(a), 0.0, cos(a)\n    );\n}\n \nmat3 rotZ(float a)\n{\n    return mat3(\n        cos(a), -sin(a), 0.,\n        sin(a), cos(a), 0.,\n        0., 0., 1.\n    );\n}\n \nfloat t;\n \nfloat sphere(vec3 r, float a)\n{\n    return length(r) - a;\n}\n \nfloat torus(vec3 r, vec2 a)\n{\n    vec2 p = vec2(length(r.xz) - a.x, r.y);\n    return length(p) - a.y;\n}\n \nfloat plane(vec3 r, vec3 o, vec3 n) {\n    return dot(r - o, n);\n}\n\nfloat cylinder(vec3 r, vec2 a)\n{\n\tvec2 p = abs(vec2(length(r.xz), r.y)) - a;\n\t\n\treturn min(max(p.x, p.y), 0.0) + length(max(p, 0.));\n}\n\nfloat hash(vec2 r) {\n    return fract(sin(dot(r, vec2(15.5921, 96.654654))) * 23626.3663);\n}\n\nfloat box(vec3 r, vec3 a, vec2 s)\n{\n\tr = rotY(r.y * sin(t * 2.)) * r;\n\tr = rotZ(atan(r.x, r.y) * (sin(t) * 1. + 1.) * SPIKENUM) * r;\n\tr = rotX(atan(r.y, r.z) * (sin(t) * 1. + 1.) * SPIKENUM) * r;\n\t\n    vec3 p = (abs(r) - a);\n\t\n    return length(max(p, 0.));\n}\n \nfloat shade(vec3 n, vec3 rd)\n{\n    return clamp(max(dot(n, -rd), 0.) + 1., 0., 1.);\n}\n \nvec3 fog(float z, vec3 col, vec3 fogCol)\n{\n    return mix(fogCol, col, exp(-z));\n}\n\nmat3 obj;\n\nvec2 map(vec3 r)\n{    \n\tobj = mat3(1.);\n\tr.z += t * 15.;\n\t\n\tvec3 tr = rotZ(-2.*t) * vec3(3., 3., 0.);\n\tr.x += tr.x;\n\tr.y += tr.y - 10.;\n\t\n    vec3 rb1 = obj * r;\n\trb1 = rotZ(r.z*0.1) * r;\n    \n    vec2 b1 = vec2(\n        box(rotX(2. * t) * rotY(2. * t) * (mod(rb1 + 5., 10.) - 5.), vec3(1.5, 2., 1.) * 1.2, r.xy),\n        (rotX(2. * t) * rotY(2. * t) * (mod(rb1 + 5., 10.) - 5.)).z\n    );\n\n    \n    return b1;\n}\n \nvec3 matCol(vec2 o)\n{\n    if (o.y == 1.)\n        return normalize(vec3(0.7, 0.05, .1));\n    \n    return normalize(vec3(0.7, 0.05, sin(o.y) * 0.2));\n}\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    t = -iTime * 0.4;\n   \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n   \n    mat3 cam = rotY(-PI) * rotX(0.3);\n       \n    vec3 ro = vec3(0., 10.0, -20.0);\n    vec3 rd = cam * normalize(vec3(uv * 2., -1.));\n    vec3 r = ro;\n   \n    vec3 bcol = vec3(0.0, 1.0, 1.0);\n    vec4 col = vec4(0.);\n    col.rgb = bcol;\n   \n    float sh = 1.;\n   \n    float glow = 0.;\n   \n    int ch = 1;\n   \n    for (int i = 0; i < MAXIT; ++i) {\n        vec2 d = map(r);\n        float z = length(r - ro);\n       \n        glow += exp(-d.x);\n    \n        if (d.x < EPSILON) {\n            col.rgb = mix(col.rgb, \n\t\t\t\tmatCol(d), \n\t\t\t\tshade(normalize(r), rd));\n            col.rgb = fog(z * 0.0311, col.rgb, bcol);\n            break;\n        }\n       \n        d.x *= 0.7 - 0.01 * hash(uv);\n\t\tr += rd * d.x * 0.3;\n       \n        sh = (float(i) / float(MAXIT));\n    }\n   \n    if (sh < 0.5)\n\t\tcol.rgb *= exp(-sh * 1.3 + 1.);\n   \n    fragColor = vec4(col.rgb, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}