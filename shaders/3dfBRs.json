{
    "Shader": {
        "info": {
            "date": "1588823959",
            "description": "From that broken oil lamp but trying to add a rounding effect after the interference patterns.",
            "flags": 32,
            "hasliked": 0,
            "id": "3dfBRs",
            "likes": 2,
            "name": "I don't know why I did this",
            "published": 3,
            "tags": [
                "palettesaturateblurpalette"
            ],
            "usePreview": 0,
            "username": "sh1boot",
            "viewed": 347
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 m = iMouse.xy / iResolution.xy;\n    vec4 b = texture(iChannel0, uv);\n    vec4 c = texture(iChannel1, uv);\n    b = pal(b);\n //   c = pal(c);\n    b = m.y > uv.y ? b : c;\n    fragColor = b;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 pal(in vec4 i) {\n    // Convert saturated (ie., approximately binary) xyzw values\n    // into a 16-colour palette.  In this case, an approximation\n    // of the C64 colour palette.  Why the C64?  I do not know.\n    // I just wanted to do away with that RGB-filter look that\n    // comes out otherwise.\n    vec4 j = vec4(1.) - i;\n    return (j.x * j.y * j.z * j.w) * vec4(0., 0., 0., 0.)\n         + (j.x * j.y * j.z * i.w) * vec4(1., 1., 1., .7)\n         + (j.x * j.y * i.z * j.w) * vec4(0., 1., 0., 0.)\n         + (j.x * j.y * i.z * i.w) * vec4(.5, 0., 0., .5)\n         + (j.x * i.y * j.z * j.w) * vec4(.6, 1., .9, .3)\n         + (j.x * i.y * j.z * i.w) * vec4(.7, .3, .7, 1.)\n         + (j.x * i.y * i.z * j.w) * vec4(0., .7, .4, .3)\n         + (j.x * i.y * i.z * i.w) * vec4(0., 0., .6, 0.)\n         + (i.x * j.y * j.z * j.w) * vec4(.9, .9, .5, .9)\n         + (i.x * j.y * j.z * i.w) * vec4(.8, .5, .3, .3)\n         + (i.x * j.y * i.z * j.w) * vec4(1., .5, .5, 0.)\n         + (i.x * j.y * i.z * i.w) * vec4(.2, .2, .2, 1.)\n         + (i.x * i.y * j.z * j.w) * vec4(.5, .5, .5, 0.)\n         + (i.x * i.y * j.z * i.w) * vec4(.6, 1., .7, 1.)\n         + (i.x * i.y * i.z * j.w) * vec4(0., .5, 1., .7)\n         + (i.x * i.y * i.z * i.w) * vec4(.8, .8, .8, .2);\n}\n\nfloat random(in float x) {\n    x = log2(abs(x) + 0.000001);\n    x = fract(sin(x) * 21.56789 + cos(x) * 11.98765);\n    return fract(x + 2.0);\n}\n\nfloat random(in float x, in float y) {\n    return random(sin(x * 7.1010101) + cos(y * 9.3131313) + 2.1);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Mostly a generic framebuffer feedback thing, with some\n// scribbling over the top.\n// To help edge towards rounded shapes, the smoothed and\n// sharpened buffer is fed back into this as well, so that\n// it gradually sharpens itself as it mixes and the shapes\n// should become progressively rounder from frame to frame\n// (if not for the stirring).\n\nvec2 fuzz(in vec2 seed) {\n    return vec2(random(seed.x, iTime), random(seed.y, iTime));\n}\n\nvec2 fuzz() {\n    return fuzz(vec2(123.,456.));\n}\n\nvec4 scribble(in vec4 col, in vec2 uv) {\n    // randomly sweeping path\n    vec2 m = vec2(sin(iTime * 0.3), cos(iTime * 0.25))\n           * vec2(cos(iTime * 0.2501), -sin(iTime * 0.11111))\n           * 0.35 + 0.5;\n    // with a little fluttery jitter\n    m += 0.03 * fuzz();\n\n    // random colour\n    vec4 colour = vec4(\n        smoothstep(0.2, 0.3, random(0.123, iTime)),\n        smoothstep(0.2, 0.3, random(0.234, iTime)),\n        smoothstep(0.2, 0.3, random(0.345, iTime)),\n        smoothstep(0.2, 0.3, random(0.456, iTime)));\n\n    // reduce to a dot (distance from current pixel to m)\n    float d = length(uv - m);\n    // plotted only for 1 second out of 10\n    if (fract(iTime * 0.05) > 0.2) d = 1.0;\n    return mix(vec4(colour), col, smoothstep(0.01,0.02, d));\n}\n\n// Just some random perturbation of the coordinates to make things swirl.\nvec2 f(in vec2 uv) {\n    const vec2 centre = vec2(0.35, 0.35);\n    const float th = 0.003;\n    const float r = 0.9995;\n    float c = cos(th), s = sin(th);\n    uv = (uv - centre) * mat2(c, s, -s, c) * r + centre;\n    vec2 wiggle = vec2(sin(iTime + uv.y * 15.1), cos(uv.x * 14.1));\n    uv += wiggle * 0.002;\n\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iChannelResolution[0].xy;\n    vec2 vu = uv.yx;\n    uv = f(uv);\n    vu = f(vu).yx;\n    vec4 q = 0.5 * vec4(texture(iChannel1, uv).xz,\n                        texture(iChannel1, vu).yw).xzyw;\n    vec4 col = vec4(texture(iChannel0, uv).xz,\n                    texture(iChannel0, vu).yw).xzyw;\n\n    col = mix(col, q, 0.008);\n    \n    // Try to enlarge colour fringes a bit.\n    col *= vec4(1.005, 0.995, 0.995, 1.005);\n\n    fragColor = scribble(col, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Read a blurred Buffer A (blurring aims to represent surface tension),\n// and quantise it according to the average of the previous frame.\n// The idea is that the average of the result should seek the median\n// weight of Buffer A so that half the buffer is lit.\n// This is fed back into buffer A to encourage it to gradually gain\n// more defined edges and the expected weight, while still being able\n// to move and blur.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Sample the main framebuffer with a whole lot of smoothing.\n    // Simply using the LOD bias on its own produces horrible artefacts,\n    // so try to do the smoothing manually here.\n    // TODO: make a better approximation of Gaussian blur\n    vec4 colour = 0.50 * texture(iChannel0, uv, 6.5)\n                + 0.25 * texture(iChannel0, uv, 4.5)\n                + 0.16 * texture(iChannel0, uv, 2.5);\n                + 0.09 * texture(iChannel0, uv, 0.5);\n\n#if 0\n    // Take the average of the whole of the previous output;\n    // if this is low then too few pixels were 'set', and\n    // if it is high then too many pixels were 'set'.\n    vec4 threshold = texture(iChannel1, uv, 100.5);\n#else\n    // Take the average of the whole of the current input;\n    // This divides the output into above and below average,\n    // which is not the same as the median, but I think it will\n    // seek the median more stably than above.\n    vec4 threshold = texture(iChannel0, uv, 100.5);\n#endif\n    \n    // I didn't really think this through.  We need to make an informed\n    // guess at where the correct threshold should be, but it's fiddly\n    // trying to be stateful about previous guesses, so I just mashed\n    // the keyboard until the flashing and blinking didn't happened so\n    // much.\n    threshold = mix(threshold, vec4(0.7), 0.1);\n    colour = smoothstep(-0.005, 0.005, colour - threshold);\n\n    fragColor = colour;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 colour = texture(iChannel0, uv);\n    // probably need to use a more appropriate palette, here.\n    colour = pal(colour);\n    fragColor = colour;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Sample the main framebuffer with a whole lot of smoothing.\n    // Simply using the LOD bias on its own produces horrible artefacts,\n    // so try to do the smoothing manually here.\n    // TODO: make a better approximation of Gaussian blur\n    vec4 colour = 0.50 * texture(iChannel0, uv, 6.5)\n                + 0.25 * texture(iChannel0, uv, 4.5)\n                + 0.16 * texture(iChannel0, uv, 2.5);\n                + 0.09 * texture(iChannel0, uv, 0.5);\n\n    vec4 threshold = texture(iChannel0, uv, 100.5);\n    \n    threshold = mix(threshold, vec4(0.7), 0.1);\n    colour = smoothstep(-0.005, 0.005, colour - threshold);\n\n    fragColor = colour;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}