{
    "Shader": {
        "info": {
            "date": "1717013387",
            "description": "Space to refresh, hold LMB to bloom, adjust settings in Common tab\niChannel1 in A and iChannel0 in D can be changed!\n(Make sure they're the same, and make them match)\nMade w/ ChatGPT + manual additional tweaking by Adri.",
            "flags": 50,
            "hasliked": 0,
            "id": "M3cGW2",
            "likes": 1,
            "name": "Pixel-Pushing Cascade",
            "published": 3,
            "tags": [
                "postprocessing",
                "filter",
                "painterly",
                "opticalflow",
                "datamosh"
            ],
            "usePreview": 0,
            "username": "adrilyphia",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{vec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0,uv);}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define bb(uv) texture(iChannel0,uv)\n#define v(uv) texture(iChannel1,uv)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = mix(v(uv), bb(uv), D/2.);}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define bb(uv) texture(iChannel0,uv)\n#define v(uv) texture(iChannel1,uv)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = mix(v(uv), bb(uv), D);}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 texelSize = 1. / iResolution.xy;\n    \n    vec2 blockCoord = floor(fragCoord / BLOCK_SIZE) * BLOCK_SIZE;\n    vec2 blockUV = blockCoord / iResolution.xy;\n\n    vec2 bestMatch = vec2(0.0);\n    float bestMatchError = 1.0 / 0.0; // Large number\n\n    for (float dy = -SEARCH_RADIUS; dy <= SEARCH_RADIUS; dy++) {\n        for (float dx = -SEARCH_RADIUS; dx <= SEARCH_RADIUS; dx++) {\n            vec2 searchBlockCoord = blockCoord + vec2(dx, dy) * BLOCK_SIZE;\n            vec2 searchUV = searchBlockCoord / iResolution.xy;\n\n            if (searchUV.x < 0. || searchUV.x > 1. || searchUV.y < 0. || searchUV.y > 1.)\n                continue;\n\n            float error = 0.0;\n            for (float by = 0.0; by < BLOCK_SIZE; by++) {\n                for (float bx = 0.0; bx < BLOCK_SIZE; bx++) {\n                    vec2 offset = vec2(bx, by) * texelSize;\n                    vec4 currentColor = texture(iChannel1, blockUV + offset);\n                    vec4 previousColor = texture(iChannel0, searchUV + offset);\n                    error += distance(currentColor, previousColor);\n                }\n            }\n\n            if (error < bestMatchError) {\n                bestMatchError = error;\n                bestMatch = vec2(dx, dy);\n            }\n        }\n    }\n\n    vec2 flow = bestMatch * BLOCK_SIZE / iResolution.xy;\n    vec3 flowColor = vec3(flow * 1. + 0.5, 0.0);\n    bool mousePressed = bool(iMouse.z > 0.5);\n    if (mousePressed) {\n        fragColor = texture(iChannel2, uv);\n        return;\n    }\n    fragColor = vec4(flowColor, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 blurHorizontal(sampler2D tex, vec2 uv, vec2 resolution, float radius) {\n    vec4 color = vec4(0.0);\n    float totalWeight = 0.0;\n    vec2 texelSize = vec2(radius) / resolution;\n\n    for (float x = -radius; x <= radius; x += 2.0) {\n        vec2 offset = vec2(x, 0.0) * texelSize;\n        vec4 sampleColor = texture(tex, uv + offset);\n        color += sampleColor;\n        totalWeight += 1.0;\n    }\n\n    return color / totalWeight;\n}\n\nvec4 blurVertical(sampler2D tex, vec2 uv, vec2 resolution, float radius) {\n    vec4 color = vec4(0.0);\n    float totalWeight = 0.0;\n    vec2 texelSize = vec2(radius) / resolution;\n\n    for (float y = -radius; y <= radius; y += 2.0) {\n        vec2 offset = vec2(0.0, y) * texelSize;\n        vec4 sampleColor = texture(tex, uv + offset);\n        color += sampleColor;\n        totalWeight += 1.0;\n    }\n\n    return color / totalWeight;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    if (texelFetch(iChannel3, ivec2(32, 0), 0).x != 0.0) {\n        fragColor = texture(iChannel0, uv);\n        return;\n    }\n\n    vec4 feedbackColor = texture(iChannel2, uv);\n    vec2 opticalFlow = texture(iChannel1, uv).rg;\n    vec4 blurredOpticalFlowHorizontal = blurHorizontal(iChannel1, uv, iResolution.xy, 5.0);\n    vec4 blurredOpticalFlow = blurVertical(iChannel1, uv, iResolution.xy, 5.0);\n    vec2 displacedUV = uv + (blurredOpticalFlow.xy - vec2(.5)) * DISPLACEMENT;\n    vec4 displacedFeedback = texture(iChannel2, displacedUV);\n    vec4 finalColor = mix(displacedFeedback, texture(iChannel0, uv), PERSISTENCE);\n    fragColor = finalColor;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define PI asin(1.)*2.\n#define D .75\n#define BLOCK_SIZE 1.\n#define SEARCH_RADIUS 7.\n#define DISPLACEMENT 1.\n#define PERSISTENCE .0\n#define BLUR_RADIUS 100.",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}