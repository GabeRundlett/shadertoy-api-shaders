{
    "Shader": {
        "info": {
            "date": "1639684048",
            "description": "Just playing around with some patterns: square tiling, each cell has a line in a random orientation plus its mirror image (adjust line position with mouse).",
            "flags": 16,
            "hasliked": 0,
            "id": "7t3SDB",
            "likes": 31,
            "name": "Spiral Weave",
            "published": 3,
            "tags": [
                "spiral",
                "complex",
                "log",
                "weave"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 446
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n// Spiral Weave, Matthew Arcus, mla, 2021\n// Construct a simple weave pattern from a square grid.\n// Shown with a complex log transformation for added interest.\n////////////////////////////////////////////////////////////////////////////////\n\nvec3 drawline(vec3 col, vec2 p, vec2 q, vec2 r, float px) {\n  vec3 linecol = vec3(1);\n  float linedist = segment(p,q,r)-0.2;\n  col = mix(linecol,col,smoothstep(-px,px,linedist));\n  col *= smoothstep(-px,px,abs(linedist)-0.02);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord ) {\n  vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n  vec2 mouse = vec2(0.4,0.6);\n  if (iMouse.x > 0.0) {\n    mouse = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    mouse *= 2.0;\n  }\n  if (!key(CHAR_T)) {\n    // Invert\n    p += 0.5;\n    p /= dot(p,p);\n    p -= 0.5;\n    // complex log\n    p = vec2(log(length(p)),atan(p.y,p.x))/PI;\n  }\n  // get pixel width from p.x (which is continuous)\n  float px = fwidth(p.x);\n  // rotate & scale with a complex mult\n  vec2 rot = vec2(7,3);\n  p = cmul(p,rot);\n  // adjust pixel width\n  px *= length(rot);\n  // rotate along spirals\n  p.y += iTime;\n  // index of current cell, need to take account of complex branch\n  vec2 index = vec2(-p.y,p.x);\n  // this ensures that index(z-i) = index(z+i)\n  index -= floor(index.x/rot.x)*rot;\n  // apply symmetries\n  p += 1.0;\n  p = mod(p,2.0);\n  p -= 1.0;\n  if (key(CHAR_M)) p = abs(p); // Mirror symmetry\n  if (p.y < 0.0) p = -p; // rotate lower to upper\n  if (p.x < 0.0) p = vec2(p.y,-p.x); // rotate left to right\n  // hash for current cell\n  float h = hash(uint(iTime*0.0)^uint(int(index.y))^uint(int(index.x)<<16));\n  // randomly flip\n  if (!key(CHAR_H) && h < 0.5) p = p.yx;\n  // show cell sectors\n  vec3 col = vec3(0.1);\n  if (!key(CHAR_C)) col = 0.2+0.8*h2rgb(h);\n  if (!key(CHAR_S)) col *= 0.5+0.5*smoothstep(-px,px,p.x-p.y);\n  // draw random line and its reflection\n  vec2 q = vec2(mouse.x,0), r = vec2(mouse.y,1);\n  col = drawline(col,p,q,r,px);\n  col = drawline(col,p.yx,q,r,px);\n\n  col = pow(col,vec3(0.4545));\n  fragColor = vec4(col,1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float PI = 3.14159;\n\n// From Chris Wellons: https://nullprogram.com/blog/2018/07/31/\nuint ihash(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nfloat hash(uint x) {\n  return float(ihash(x))/pow(2.0,32.0);\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b) {\n  p -= a; b -= a;\n  float h = dot(p,b)/dot(b,b);\n  //h = clamp(h, 0.0, 1.0);\n  return length(p-b*h);\n}\n\nvec2 cmul(vec2 z1, vec2 z2) {\n  return mat2(z1.x,z1.y,-z1.y,z1.x)*z2;\n}\n\nvec3 h2rgb(float h) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  return rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n}\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_I = 73;\nconst int CHAR_J = 74;\nconst int CHAR_K = 75;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n// Macros for use in \"common\" blocks.\n#if !defined(key)\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#endif\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}