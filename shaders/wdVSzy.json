{
    "Shader": {
        "info": {
            "date": "1574382330",
            "description": "Ashoka chakra is found at the center of the Indian flag today, which replaced (in 1947) the [i]charkha[/i] (spinning wheel) found in the pre-independence version of the flag. Looks better in full screen mode.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdVSzy",
            "likes": 9,
            "name": "Ashoka Chakra",
            "published": 3,
            "tags": [
                "2d",
                "flag",
                "symbol",
                "buddhism"
            ],
            "usePreview": 0,
            "username": "piyushslayer",
            "viewed": 2171
        },
        "renderpass": [
            {
                "code": "/**\nAshoka chakra is one of the most common depictions of the dharma chakra,\nwhich in turn is one of the oldest known symbols in Buddhism and Hinduism.\nAshoka Chakra was adopted by India in 1947 and is present at the center of the\nIndian Flag today.\n\nBest viewed in fullscreen mode.\n*/\n\n\n#define PI 3.1415926535\n\n#define ROT(x) mat2(cos(x), -sin(x), sin(x), cos(x))\n\n#define RADIUS .7\n#define HALF_RADIUS RADIUS * .5\n#define NAVY_BLUE vec3(0., 0., .534)\n\n// iq's 2d sdf for iscosceles triangles (https://www.shadertoy.com/view/MldcD7)\nfloat isoscelesTriangle(in vec2 q, in vec2 p)\n{\n    p.y -= .5;\n    p.x = abs(p.x);\n    \n\tvec2 a = p - q * clamp(dot(p, q) / dot(q, q), 0., 1.);\n    vec2 b = p - q * vec2(clamp(p.x / q.x, 0., 1.), 1.);\n    \n    float s = -sign(q.y);\n\n    vec2 d = min(vec2(dot(a, a), s * (p.x * q.y - p.y * q.x)),\n                  vec2(dot(b, b), s * (p.y - q.y)));\n\n\treturn -sqrt(d.x) * sign(d.y);\n}\n\nfloat getChakra(vec2 uv)\n{\n\tfloat outerCircle = smoothstep(.005, -.005, abs(length(uv) - RADIUS - .22) - .06);\n    float innerCircle = smoothstep(.22, .21, length(uv));\n    float spokes = 0., spokeThickness = .03, notches = 0., theta = 2. * PI / 24.;\n    for (int i = 0; i < 24; ++i)\n    {\n        vec2 suv = ROT(float(i) * theta) * uv;\n        // shorter inward pointing triangle\n        suv.y += HALF_RADIUS;\n        spokes += smoothstep(.005, .0,\n\t\t\t\t\tisoscelesTriangle(vec2(spokeThickness, RADIUS * .334), suv));\n        // longer outward pointing triangle\n        suv.y -= RADIUS + .005;\n        spokes += smoothstep(.005, .0,\n\t\t\t\t\tisoscelesTriangle(vec2(spokeThickness, -RADIUS * .666), suv));\n        \n        // boundary notches\n\t\tvec2 nuv = ROT(float(i) * theta + theta * .5) * uv;\n        nuv.y -= RADIUS + .16;\n        notches += smoothstep(.04, .039, length(nuv));\n    }\n    \n    float chakra = notches + innerCircle + outerCircle + spokes;\n    return max(0., 1. - chakra);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // oscillate the chakra's rotation\n    uv = ROT(sin(iTime * .2)* PI) * uv;\n\n    vec3 col = vec3(0.);\n    col += getChakra(uv) + NAVY_BLUE;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}