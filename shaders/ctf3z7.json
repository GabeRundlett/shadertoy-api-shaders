{
    "Shader": {
        "info": {
            "date": "1671989258",
            "description": "a thing, idk don't ask me",
            "flags": 0,
            "hasliked": 0,
            "id": "ctf3z7",
            "likes": 3,
            "name": "Starry uh thing",
            "published": 3,
            "tags": [
                "cloud",
                "stars"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 198
        },
        "renderpass": [
            {
                "code": "#define saturate(x) clamp(x,0.0, 1.0)\n#define smooth(x) smoothstep(0., 1., x)\n\n#define MAIN_PALETTE palette(vec3(0.500, -0.072, 0.288), vec3(0.628, 1.118, 1.078), vec3(0.518, 0.558, 0.428), vec3(-0.092, -1.032, 0.898))\n#define BOTTOM_COLOR vec3(71, 12, 79)/255.\n#define BOTTOM_HEIGHT 0.05\n#define BOTTOM_FADE 0.6\n\n#define iTime iTime*0.2\n\n\nstruct palette\n{\n    vec3 a;\n    vec3 b;\n    vec3 c;\n    vec3 d;\n};\n\nvec3 pal( in float t, palette p) // by iq, modified\n{\n    return p.a + p.b*cos(6.28318*(p.c*t+p.d));\n}\n\n//palette np = palette(vec3(0.648, -0.162, 0.0), vec3(0.848, 0.500, 0.848), vec3(0.518, 0.518, 0.608), vec3(0.088, -1.172, 0.848));\n//palette np = ;\n\nfloat sharpstep(float a, float b, float x)\n{\n    return saturate((x-a)/(b-a));\n}\n\nfloat peak(float a, float b, float x)\n{\n    return saturate(1.-abs((x-b)/a));\n}\n\nmat2 r(float t)\n{\n    return mat2(cos(t), -sin(t), sin(t), cos(t));\n}\n\nfloat erp(float x, float k)\n{\n    return x < 0.5 ? pow(2.0*x, k)*0.5  : 1. - pow(2.0*(1.0-x), k) / 2.;\n}\n\n\nvec2 hash22(vec2 p)\n{\n    vec3 p3 = fract(p.xyx * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return (fract((p3.xx+p3.yz)*p3.zy) - 0.5) * 2.0;\n}\n\nfloat perlinNoise(vec2 p, float t)\n{\n    mat2 r = r(t);\n    vec2 tlVal = r*hash22(vec2(floor(p.x),  ceil(p.y)));\n    vec2 blVal = r*hash22(vec2(floor(p.x), floor(p.y)));\n    vec2 trVal = r*hash22(vec2( ceil(p.x),  ceil(p.y)));\n    vec2 brVal = r*hash22(vec2( ceil(p.x), floor(p.y)));\n    \n    vec2 tlOffset = p - vec2(floor(p.x),  ceil(p.y));\n    vec2 blOffset = p - vec2(floor(p.x), floor(p.y));\n    vec2 trOffset = p - vec2( ceil(p.x),  ceil(p.y));\n    vec2 brOffset = p - vec2( ceil(p.x), floor(p.y));\n    \n    float tl = dot(tlOffset, tlVal);\n    float bl = dot(blOffset, blVal);\n    float tr = dot(trOffset, trVal);\n    float br = dot(brOffset, brVal);\n    \n    float a = mix(bl, tl, smooth(fract(p.y)));\n    float b = mix(br, tr, smooth(fract(p.y)));\n    \n    return mix(a, b, smooth(fract(p.x))) / 2.0 + 0.5;\n}\n\n\n\nfloat fbm(in vec2 p, float r, float o, float t)\n{\n    float sum = 0.;\n    for(float i = 0.; i < o; i++)\n    {\n        float e = pow(r, -i);\n        sum += perlinNoise((p-hash22(vec2(i)))/e, t)*e;\n    }\n    return sum*0.5;\n}\n\nvec2 warpFbm(in vec2 p, float r, float o, float t, vec2 a)\n{\n    float sum = 0.;\n    for(float i = 0.; i < o; i++)\n    {\n        float e = pow(r, -i);\n        p += (perlinNoise((p+a-hash22(vec2(i)))/e, t)-0.5)*e;\n    }\n    return p;\n}\n\nfloat warpFbmNoise(in vec2 p, float r, float o, float t, vec2 a)\n{\n    return perlinNoise(warpFbm(p, r, o, t, a), t);\n}\n\nfloat voronoi(vec2 p, float jitter, out vec2 f1, out vec3 f2, float time)\n{\n    float cr = 100000.0; // A big number\n    vec2 fp = floor(p); // Round the current position down to the nearest whole number\n    f1 = vec2(0);\n    f2 = vec3(0);\n    for(int x = -1; x <= 1; x++) // Loop over the space near the point\n    for(int y = -1; y <= 1; y++) // Same thing\n    {\n        vec2 cell = fp+vec2(x, y); // Get the current square cell\n        mat2 rot = r(time*(hash22(cell).x-0.5)*2.);\n        vec2 rp = cell+0.5+rot*(hash22(cell)-0.5)*jitter; // Each square cell the point can be in has a single point, offset by a random value times the jitter\n        float d = distance(p, rp); // Get the distance between the random point and the input position\n        if(d < cr) // If the distance is the closer than the current closest distance, it becomes the closest distance (along with the position of the point)\n        {\n            f2.z = cr;\n            cr = d;\n            f2.xy = f1;\n            f1 = cell;\n        }\n    }\n    return cr;\n}\n\nfloat voronoi(vec2 p, float jitter)\n{\n    float r = 100000.0; // A big number\n    vec2 fp = floor(p); // Round the current position down to the nearest whole number\n    for(int x = -1; x <= 1; x++) // Loop over the space near the point\n    for(int y = -1; y <= 1; y++) // Same thing\n    {\n        vec2 cell = fp+vec2(x, y); // Get the current square cell\n        vec2 rp = cell+0.5+(hash22(cell)-0.5)*jitter; // Each square cell the point can be in has a single point, offset by a random value times the jitter\n        float d = distance(p, rp); // Get the distance between the random point and the input position\n        if(d < r) // If the distance is the closer than the current closest distance, it becomes the closest distance (along with the position of the point)\n        {\n            r = d;\n        }\n    }\n    return r;\n}\n\nfloat blob0(vec2 p)\n{\n    float d = 0.0;\n    p -= vec2(-0.4, 0.5);\n    d += distance(p, vec2(0.));\n    d += distance(p, vec2(-0.5, 0.4));\n    d += distance(p, vec2(-0.8, 0.5));\n    return 0.6/(max(0., d)+1.);\n}\n\nfloat blob1(vec2 p)\n{\n    float d = 0.0;\n    p -= vec2(-0.4, -0.2);\n    d += distance(p, vec2(0.));\n    d += distance(p, vec2(-0.5, 0.4));\n    d += distance(p, vec2(-0.8, 0.5));\n    d -= distance(p, vec2(-2., 1.))*1.;\n    d += distance(p, vec2(1., 0.5))*1.;\n    return 0.6/(max(0., d)+1.);\n}\n\nfloat bottom(vec2 p)\n{\n    float mask = smoothstep(-1.+BOTTOM_HEIGHT, -1.+BOTTOM_HEIGHT+BOTTOM_FADE, p.y);\n    float noiseMask = smooth(peak(0.5, 0.5, mask));\n    float noise = sin(50.*warpFbmNoise(p*2.-vec2(0, iTime*0.3), 2., 2., iTime*0.1, vec2(0.1, 0.05)*iTime)+iTime)*0.5+0.5;\n    return 1.-(mask+noise*noiseMask);\n}\n\nfloat snoise(float x, float e, float s)\n{\n    vec2 res = iChannelResolution[0].xy;\n    float nx = floor(x*res.x) + erp(fract(x*res.x), s);\n    return texture(iChannel0, vec2(nx/res.x, e)).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy*2.-iResolution.xy)/iResolution.y;\n    vec2 m = (iMouse.xy*2.-iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec2 blobPos = warpFbm(uv, 4., 4., iTime*0.1, vec2(iTime*0.1));\n    float b = smoothstep(0.2, 0.4, blob1(blobPos))+smoothstep(0.24, 0.4, blob0(blobPos))*3.5;\n    float n = perlinNoise(warpFbm(uv*5.*(b*0.1+0.9)+iTime*0.1, 3., 5., iTime*0.5, vec2(iTime*0.3)), iTime*0.5);\n    \n    vec2 f1; vec3 f2;\n    //float stars = (smoothstep(0.7, 0.8, perlinNoise(uv*40., iTime*0.2))*0.5-b*0.4);\n    float stars = voronoi(uv*20.+iTime*0.1, 0.4, f1, f2, iTime*0.2);\n    vec2 shash = hash22(f1);\n    stars = smoothstep(0.3-shash.y*0.1, 0.1-shash.y*0.1, stars*2.)*smoothstep(0.8, 0.9, shash.x)*snoise(iTime*0.01, shash.y, 1.);\n    \n    vec3 starColor = pal(saturate(1.-stars*2.), MAIN_PALETTE);\n    vec3 mainColor = b*pal(n-b*0.2, MAIN_PALETTE)+saturate(starColor);\n    float bottomMask = bottom(uv);\n\n    // Output to screen\n    fragColor = displayVar(mix(mainColor+warpFbmNoise(uv, 2., 2., iTime*0.1, vec2(0.1, 0.05)*iTime)*0.2, BOTTOM_COLOR, bottomMask));\n    //fragColor = displayVar();\n    //fragColor = displayVar(f1/20.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 displayVar(bool a) { return vec4(vec3(a), 1.0); }\n\nvec4 displayVar(float a){ return vec4(vec3(a), 1.0); }\n\nvec4 displayVar(vec2 a) { return vec4(a, 0.0, 1.0); }\n\nvec4 displayVar(vec3 a) { return vec4(a, 1.0); }\n\nvec4 displayVar(vec4 a) { return vec4(a.xyz, 1.0); }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}