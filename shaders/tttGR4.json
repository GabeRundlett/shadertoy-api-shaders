{
    "Shader": {
        "info": {
            "date": "1575807442",
            "description": "Rigid-body dynamics - mouseable",
            "flags": 32,
            "hasliked": 0,
            "id": "tttGR4",
            "likes": 9,
            "name": "Leaping Glowsticks",
            "published": 3,
            "tags": [
                "collision",
                "dynamics",
                "rigidbody"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 425
        },
        "renderpass": [
            {
                "code": "// \"Leaping Glowsticks\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nmat3 QtToRMat (vec4 q);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nfloat Hashfv2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\nvec3 qnHit;\nfloat tCur, dstFar;\nint idHit;\nconst float pi = 3.14159, sqrt3 = 1.73205;\n\nconst int nObj = 40;\nconst float sphGap = 0.5, nSphObj = (6. * 6.);\n\nfloat GrndHt (vec2 p)\n{\n  mat2 fqRot;\n  vec2 q;\n  float h, a;\n  fqRot = 2. * mat2 (0.6, -0.8, 0.8, 0.6);\n  q = 0.025 * p;\n  h = 0.;\n  a = 10.;\n  for (int j = 0; j < 4; j ++) {\n    h += a * Noisefv2 (q);\n    a *= 0.5;\n    q *= fqRot;\n  }\n  return h - 0.3;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 160; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.5, 0.5 * h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (p.y > GrndHt (p.xz)) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nfloat CapsHit (vec3 ro, vec3 rd, float rad, float len)\n{\n  mat3 mRot;\n  vec3 rom, rdm, qnHitM, s;\n  float dMin, dm, d, a, b, w;\n  dMin = dstFar;\n  for (int n = 0; n < nObj; n ++) {\n    mRot = QtToRMat (Loadv4 (4 * n + 2));\n    rom = (ro - Loadv4 (4 * n).xyz) * mRot;\n    rdm = rd * mRot;\n    dm = dstFar;\n    a = dot (rdm.xy, rdm.xy);\n    b = dot (rdm.xy, rom.xy);\n    w = b * b - a * (dot (rom.xy, rom.xy) - rad * rad);\n    if (w > 0. && a > 0.) {\n      d = - b - sqrt (w);\n      d /= a;\n      s = rom + d * rdm;\n      if (d > 0. && abs (s.z) < len) {\n        dm = d;\n        qnHit = vec3 (s.xy, 0.);\n      } else {\n        rom.z -= len * sign (s.z);\n        b = dot (rdm, rom);\n        w = b * b - (dot (rom, rom) - rad * rad);\n        if (w > 0.) {\n          d = - b - sqrt (w);\n          if (d > 0.) {\n            dm = d;\n            s = rom + d * rdm;\n            qnHit = s;\n          }\n        }\n      }\n    }\n    if (dm < dMin) {\n      dMin = dm;\n      idHit = n;\n      qnHitM = qnHit;\n    }\n  }\n  qnHit = QtToRMat (Loadv4 (4 * idHit + 2)) * normalize (qnHitM);\n  return dMin;\n}\n\nvec3 StarPat (vec3 rd, float scl)\n{\n  vec3 tm, qn, u;\n  vec2 q;\n  float f;\n  tm = -1. / max (abs (rd), 0.0001);\n  qn = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n  u = Maxv3 (tm) * rd;\n  q = atan (vec2 (dot (u.zxy, qn), dot (u.yzx, qn)), vec2 (1.)) / pi;\n  f = 0.57 * (Fbm2 (11. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 131.13 * scl * q) +\n      Fbm2 (13. * dot (0.5 * (qn + 1.), vec3 (1., 2., 4.)) + 171.13 * scl * q.yx));\n  return 3. * vec3 (0.8, 0.8, 1.) * pow (f, 16.);\n}\n\nfloat GrndPat (vec2 p)\n{\n  vec3 w;\n  vec2 cId, pc, q;\n  float dir, d;\n  p *= 0.5;\n  cId = PixToHex (p);\n  pc = HexToPix (cId);\n  dir = 2. * step (Hashfv2 (cId), 0.5) - 1.;\n  w.xy = pc + vec2 (0., - dir);\n  w.z = dot (w.xy - p, w.xy - p);\n  q = pc + vec2 (sqrt3/2., 0.5 * dir);\n  d = dot (q - p, q - p);\n  w.z = min (d, w.z);\n  q = pc + vec2 (- sqrt3/2., 0.5 * dir);\n  d = dot (q - p, q - p);\n  w.z = min (d, w.z);\n  return smoothstep (0.07, 0.15, abs (sqrt (w.z) - 0.5));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vng;\n  float dstObj, dstGrnd, cylLen, cylRad, w;\n  cylLen = 0.5 * sphGap * (nSphObj / 3. - 1.) - 0.8;\n  cylRad = 0.5 * sqrt3 * sphGap + 0.2;\n  dstObj = CapsHit (ro, rd, cylRad, cylLen);\n  dstGrnd = GrndRay (ro, rd);\n  if (min (dstObj, dstGrnd) < dstFar) {\n    if (dstObj < dstGrnd) {\n      ro += dstObj * rd;\n      col = HsvToRgb (vec3 (0.7 * float (idHit) / float (nObj), 0.5, 1.)) * (0.5 +\n         0.5 * pow (max (- dot (qnHit, rd), 0.), 4.));\n    } else {\n      ro += dstGrnd * rd;\n      vng = VaryNf (64. * ro, vec3 (0., 1., 0.), 0.2);\n      w = smoothstep (0., 5., CapsHit (ro, vng, cylRad, cylLen));\n      col = mix (vec3 (0.2, 0.2, 0.15), vec3 (0.1, 0.1, 0.15), GrndPat (ro.xz)) +\n         0.2 * (1. - w) * (0.5 + 0.5 * pow (max (- dot (qnHit, vng), 0.), 4.)) *\n         HsvToRgb (vec3 (0.7 * float (idHit) / float (nObj), 0.5, 1.));\n    }\n  } else col = vec3 (0.);\n  w = clamp (4. * min (dstObj, dstGrnd) / dstFar - 3., 0., 1.);\n  if (w > 0.) col = mix (col, StarPat (rd, 4.), w);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 rd, ro, vd, rMid, rLead;\n  vec2 canvas, uv;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.015 * pi * tCur;\n  el = pi * (0.08 + 0.05 * sin (0.021 * pi * tCur));\n  if (mPtr.z > 0.) {\n    az += pi * mPtr.x;\n    el += 0.2 * pi * mPtr.y;\n  }\n  el = clamp (el, 0.02 * pi, 0.3 * pi);\n  rMid = Loadv4 (4 * nObj).xyz;\n  rLead = Loadv4 (4 * nObj + 1).xyz;\n  ro = 0.5 * (rLead + rMid) + 50. * vec3 (cos (el) * vec2 (cos (az), sin (az)), sin (el)).xzy;\n  ro.y = max (ro.y, GrndHt (ro.xz) + 6.);\n  vd = normalize (rMid - ro);\n  vuMat = mat3 (vec3 (vd.z, 0., - vd.x) / sqrt (1. - vd.y * vd.y),\n     vec3 (- vd.y * vd.x, 1. - vd.y * vd.y, - vd.y * vd.z) / sqrt (1. - vd.y * vd.y), vd);\n  rd = vuMat * normalize (vec3 (uv, 2.5));\n  dstFar = 150.;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), 1.5 * h.y);\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// \"Leaping Glowsticks\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nfloat Noisefv2 (vec2 p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec3 rLead;\nfloat todCur;\nconst float pi = 3.14159, sqrt3 = 1.73205;\n\nconst int nObj = 40;\nconst float sphGap = 0.5, nSphObj = (6. * 6.);\n\nfloat GrndHt (vec2 p)\n{\n  mat2 fqRot;\n  vec2 q;\n  float h, a;\n  fqRot = 2. * mat2 (0.6, -0.8, 0.8, 0.6);\n  q = 0.025 * p;\n  h = 0.;\n  a = 10.;\n  for (int j = 0; j < 4; j ++) {\n    h += a * Noisefv2 (q);\n    a *= 0.5;\n    q *= fqRot;\n  }\n  return h;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return normalize (vec3 (GrndHt (p.xz) - vec2 (GrndHt (p.xz + e.xy), GrndHt (p.xz + e.yx)), e.x).xzy);\n}\n\nvec3 RSph (float s)\n{\n  vec3 r;\n  float a;\n  a = mod (s, 3.);\n  r = vec3 ((a == 0.) ? vec2 (0., 1.) : vec2 (0.5 * sign (a - 1.5), -0.5), floor (s / 3.));\n  if (r.z == 0. || r.z == nSphObj / 3. - 1.) r.xy *= 0.5;\n  return sphGap * vec3 (r.x, r.y * (2. * mod (r.z, 2.) - 1.) / sqrt3, r.z - 0.5 * (nSphObj / 3. - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float vRel, fo, drv;\n  const float fOvlap = 1000., fricN = 1., fricT = 2., fricS = 2.;\n  fo = fOvlap * (1. / rSep - 1.);\n  drv = dot (dr, dv) / (rSep * rSep);\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam;\n  vec3 rMom;\n  float farSep, rSep, grav, fDamp, fAttr, dt;\n  const vec2 e = vec2 (0.1, 0.);\n  grav = 5.;\n  fDamp = 0.1;\n  fAttr = 0.1;\n  dt = 0.01;\n  rm = Loadv4 (4 * mId).xyz;\n  vm = Loadv4 (4 * mId + 1).xyz;\n  qm = Loadv4 (4 * mId + 2);\n  wm = Loadv4 (4 * mId + 3).xyz;\n  mRot = QtToRMat (qm);\n  farSep = sphGap * nSphObj / 3. + 2.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nObj; n ++) {\n    rmN = Loadv4 (4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 * n + 2));\n      wmN = Loadv4 (4 * n + 3).xyz;\n      for (float j = 0.; j < nSphObj; j ++) {\n        rts = mRot * RSph (j);\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (float jN = 0.; jN < nSphObj; jN ++) {\n          rtsN = mRotN * RSph (jN);\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  rMom = vec3 (0.);\n  for (float j = 0.; j < nSphObj; j ++) {\n    rts = RSph (j);\n    rMom += dot (rts, rts) - rts * rts + 1./6.;\n    rts = mRot * rts;\n    dr = rm + rts;\n    dr.xz = -0.55 * GrndNf (dr).xz;\n    dr.y += 0.55 - GrndHt (rm.xz - dr.xz);\n    rSep = length (dr);\n    if (rSep < 1.) {\n      fc = FcFun (dr, rSep, vm + cross (wm, rts));\n      am += fc;\n      wam += cross (rts, fc);\n    }\n  }\n  rMom /= nSphObj;\n  am -= fDamp * vm;\n  am.y -= grav;\n  am += fAttr * (rLead - rm);\n  wam = mRot * (wam * mRot / rMom);\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  float mIdf, nbEdge;\n  mIdf = float (mId);\n  nbEdge = floor (sqrt (float (nObj)) + 0.1);\n  rm.xz = 8. * (floor (vec2 (mod (mIdf, nbEdge), mIdf / nbEdge)) -\n     0.5 * (nbEdge - 1.)) + 64. * Hashff (todCur);\n  rm.y = GrndHt (rm.xz) + sphGap * nSphObj / 6. + 5.;\n  vm = 2. * normalize (vec3 (Hashff (mIdf + todCur), Hashff (mIdf + todCur + 0.3),\n     Hashff (mIdf + todCur + 0.6)) - 0.5);\n  qm = EulToQt (normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6))));\n  wm = vec3 (0.);\n}\n\nconst float txRow = 128.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qm;\n  vec3 rm, vm, wm, rMid;\n  vec2 iFrag;\n  float nStep;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nObj + 2) discard;\n  todCur = iDate.w;\n  if (iFrame <= 5) {\n    doInit = true;\n  } else {\n    doInit = false;\n    stDat = Loadv4 (4 * nObj);\n    nStep = stDat.w;\n    ++ nStep;\n    rLead = Loadv4 (4 * nObj + 1).xyz;\n    rLead += vec3 (0., 0., 0.05);\n    rLead.y = GrndHt (rLead.xz) + 0.1;\n  }\n  if (doInit) nStep = 0.;\n  if (pxId < 4 * nObj) {\n    mId = pxId / 4;\n    if (doInit) Init (mId, rm, vm, qm, wm);\n    else Step (mId, rm, vm, qm, wm);\n  } else if (pxId == 4 * nObj) {\n    rMid = vec3 (0.);\n    for (int n = 0; n < nObj; n ++) rMid += Loadv4 (4 * n).xyz;\n    rMid /= float (nObj);\n  }\n  if (pxId < 4 * nObj) {\n    kp = 4 * mId;\n    if      (pxId == kp + 0) p = vec4 (rm, 0.);\n    else if (pxId == kp + 1) p = vec4 (vm, 0.);\n    else if (pxId == kp + 2) p = qm;\n    else if (pxId == kp + 3) p = vec4 (wm, 0.);\n    stDat = p;\n  } else {\n    kp = 4 * nObj;\n    if      (pxId == kp + 0) stDat = vec4 (rMid, nStep);\n    else if (pxId == kp + 1) stDat = vec4 (rLead, 0.);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// \"Leaping Glowsticks\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 QtMul (vec4 q1, vec4 q2);\nmat3 QtToRMat (vec4 q);\nvec4 RMatToQt (mat3 m);\nvec4 EulToQt (vec3 e);\nmat3 LpStepMat (vec3 a);\nfloat Hashff (float p);\nfloat Noisefv2 (vec2 p);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec3 rLead;\nfloat todCur;\nconst float pi = 3.14159, sqrt3 = 1.73205;\n\nconst int nObj = 40;\nconst float sphGap = 0.5, nSphObj = (6. * 6.);\n\nfloat GrndHt (vec2 p)\n{\n  mat2 fqRot;\n  vec2 q;\n  float h, a;\n  fqRot = 2. * mat2 (0.6, -0.8, 0.8, 0.6);\n  q = 0.025 * p;\n  h = 0.;\n  a = 10.;\n  for (int j = 0; j < 4; j ++) {\n    h += a * Noisefv2 (q);\n    a *= 0.5;\n    q *= fqRot;\n  }\n  return h;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return normalize (vec3 (GrndHt (p.xz) - vec2 (GrndHt (p.xz + e.xy), GrndHt (p.xz + e.yx)), e.x).xzy);\n}\n\nvec3 RSph (float s)\n{\n  vec3 r;\n  float a;\n  a = mod (s, 3.);\n  r = vec3 ((a == 0.) ? vec2 (0., 1.) : vec2 (0.5 * sign (a - 1.5), -0.5), floor (s / 3.));\n  if (r.z == 0. || r.z == nSphObj / 3. - 1.) r.xy *= 0.5;\n  return sphGap * vec3 (r.x, r.y * (2. * mod (r.z, 2.) - 1.) / sqrt3, r.z - 0.5 * (nSphObj / 3. - 1.));\n}\n\nvec3 FcFun (vec3 dr, float rSep, vec3 dv)\n{\n  vec3 f;\n  float vRel, fo, drv;\n  const float fOvlap = 1000., fricN = 1., fricT = 2., fricS = 2.;\n  fo = fOvlap * (1. / rSep - 1.);\n  drv = dot (dr, dv) / (rSep * rSep);\n  dv -= drv * dr;\n  vRel = length (dv);\n  fo = max (fo - fricN * drv, 0.);\n  f = fo * dr;\n  if (vRel > 0.001) f -= min (fricT, fricS * abs (fo) * rSep / vRel) * dv;\n  return f;\n}\n\nvoid Step (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  mat3 mRot, mRotN;\n  vec3 rmN, vmN, wmN, dr, dv, rts, rtsN, rms, vms, fc, am, wam;\n  vec3 rMom;\n  float farSep, rSep, grav, fDamp, fAttr, dt;\n  const vec2 e = vec2 (0.1, 0.);\n  grav = 5.;\n  fDamp = 0.1;\n  fAttr = 0.1;\n  dt = 0.01;\n  rm = Loadv4 (4 * mId).xyz;\n  vm = Loadv4 (4 * mId + 1).xyz;\n  qm = Loadv4 (4 * mId + 2);\n  wm = Loadv4 (4 * mId + 3).xyz;\n  mRot = QtToRMat (qm);\n  farSep = sphGap * nSphObj / 3. + 2.;\n  am = vec3 (0.);\n  wam = vec3 (0.);\n  for (int n = 0; n < nObj; n ++) {\n    rmN = Loadv4 (4 * n).xyz;\n    if (n != mId && length (rm - rmN) < farSep) {\n      vmN = Loadv4 (4 * n + 1).xyz;\n      mRotN = QtToRMat (Loadv4 (4 * n + 2));\n      wmN = Loadv4 (4 * n + 3).xyz;\n      for (float j = 0.; j < nSphObj; j ++) {\n        rts = mRot * RSph (j);\n        rms = rm + rts;\n        vms = vm + cross (wm, rts);\n        dv = vms - vmN;\n        fc = vec3 (0.);\n        for (float jN = 0.; jN < nSphObj; jN ++) {\n          rtsN = mRotN * RSph (jN);\n          dr = rms - (rmN + rtsN);\n          rSep = length (dr);\n          if (rSep < 1.) fc += FcFun (dr, rSep, dv - cross (wmN, rtsN));\n        }\n        am += fc;\n        wam += cross (rts, fc);\n      }\n    }\n  }\n  rMom = vec3 (0.);\n  for (float j = 0.; j < nSphObj; j ++) {\n    rts = RSph (j);\n    rMom += dot (rts, rts) - rts * rts + 1./6.;\n    rts = mRot * rts;\n    dr = rm + rts;\n    dr.xz = -0.55 * GrndNf (dr).xz;\n    dr.y += 0.55 - GrndHt (rm.xz - dr.xz);\n    rSep = length (dr);\n    if (rSep < 1.) {\n      fc = FcFun (dr, rSep, vm + cross (wm, rts));\n      am += fc;\n      wam += cross (rts, fc);\n    }\n  }\n  rMom /= nSphObj;\n  am -= fDamp * vm;\n  am.y -= grav;\n  am += fAttr * (rLead - rm);\n  wam = mRot * (wam * mRot / rMom);\n  vm += dt * am;\n  rm += dt * vm;\n  wm += dt * wam;\n  qm = normalize (QtMul (RMatToQt (LpStepMat (0.5 * dt * wm)), qm));\n}\n\nvoid Init (int mId, out vec3 rm, out vec3 vm, out vec4 qm, out vec3 wm)\n{\n  float mIdf, nbEdge;\n  mIdf = float (mId);\n  nbEdge = floor (sqrt (float (nObj)) + 0.1);\n  rm.xz = 8. * (floor (vec2 (mod (mIdf, nbEdge), mIdf / nbEdge)) -\n     0.5 * (nbEdge - 1.)) + 64. * Hashff (todCur);\n  rm.y = GrndHt (rm.xz) + sphGap * nSphObj / 6. + 5.;\n  vm = 2. * normalize (vec3 (Hashff (mIdf + todCur), Hashff (mIdf + todCur + 0.3),\n     Hashff (mIdf + todCur + 0.6)) - 0.5);\n  qm = EulToQt (normalize (vec3 (Hashff (mIdf), Hashff (mIdf + 0.3), Hashff (mIdf + 0.6))));\n  wm = vec3 (0.);\n}\n\nconst float txRow = 128.;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qm;\n  vec3 rm, vm, wm, rMid;\n  vec2 iFrag;\n  float nStep;\n  int mId, pxId, kp;\n  bool doInit;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (iFrag.x >= txRow || pxId >= 4 * nObj + 2) discard;\n  todCur = iDate.w;\n  if (iFrame <= 5) {\n    doInit = true;\n  } else {\n    doInit = false;\n    stDat = Loadv4 (4 * nObj);\n    nStep = stDat.w;\n    ++ nStep;\n    rLead = Loadv4 (4 * nObj + 1).xyz;\n    rLead += vec3 (0., 0., 0.05);\n    rLead.y = GrndHt (rLead.xz) + 0.1;\n  }\n  if (doInit) nStep = 0.;\n  if (pxId < 4 * nObj) {\n    mId = pxId / 4;\n    if (doInit) Init (mId, rm, vm, qm, wm);\n    else Step (mId, rm, vm, qm, wm);\n  } else if (pxId == 4 * nObj) {\n    rMid = vec3 (0.);\n    for (int n = 0; n < nObj; n ++) rMid += Loadv4 (4 * n).xyz;\n    rMid /= float (nObj);\n  }\n  if (pxId < 4 * nObj) {\n    kp = 4 * mId;\n    if      (pxId == kp + 0) p = vec4 (rm, 0.);\n    else if (pxId == kp + 1) p = vec4 (vm, 0.);\n    else if (pxId == kp + 2) p = qm;\n    else if (pxId == kp + 3) p = vec4 (wm, 0.);\n    stDat = p;\n  } else {\n    kp = 4 * nObj;\n    if      (pxId == kp + 0) stDat = vec4 (rMid, nStep);\n    else if (pxId == kp + 1) stDat = vec4 (rLead, 0.);\n  }\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nvec4 QtMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n       q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n       q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n     - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n     - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QtToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  q = normalize (q);\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQt (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) / (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) / q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] / q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQt (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nmat3 LpStepMat (vec3 a)\n{\n  mat3 m1, m2;\n  vec3 t, c, s;\n  float b1, b2;\n  t = 0.25 * a * a;\n  c = (1. - t) / (1. + t);\n  s = a / (1. + t);\n  m1[0][0] = c.y * c.z;  m2[0][0] = c.y * c.z;\n  b1 = s.x * s.y * c.z;  b2 = c.x * s.z;\n  m1[0][1] = b1 + b2;  m2[1][0] = b1 - b2;\n  b1 = c.x * s.y * c.z;  b2 = s.x * s.z;\n  m1[0][2] = - b1 + b2;  m2[2][0] = b1 + b2;\n  b1 = c.y * s.z;\n  m1[1][0] = - b1;  m2[0][1] = b1;  \n  b1 = s.x * s.y * s.z;  b2 = c.x * c.z;\n  m1[1][1] = - b1 + b2;  m2[1][1] = b1 + b2; \n  b1 = c.x * s.y * s.z;  b2 = s.x * c.z;\n  m1[1][2] = b1 + b2;  m2[2][1] = b1 - b2;\n  m1[2][0] = s.y;  m2[0][2] = - s.y;\n  b1 = s.x * c.y;\n  m1[2][1] = - b1;  m2[1][2] = b1;\n  b1 = c.x * c.y;\n  m1[2][2] = b1;  m2[2][2] = b1;\n  return m1 * m2;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) /\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}