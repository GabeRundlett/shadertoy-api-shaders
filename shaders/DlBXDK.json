{
    "Shader": {
        "info": {
            "date": "1678178918",
            "description": "Tower White-Black Ice-Glass",
            "flags": 64,
            "hasliked": 0,
            "id": "DlBXDK",
            "likes": 8,
            "name": "Tower White-Black Ice-Glass 01",
            "published": 3,
            "tags": [
                "glass",
                "tower",
                "ice",
                "white",
                "black"
            ],
            "usePreview": 0,
            "username": "MiniByte",
            "viewed": 297
        },
        "renderpass": [
            {
                "code": "\n\n#define ENABLE_HARD_SHADOWS // turn off to enable faster AO soft shadows \n\n\n#define RAY_STEPS 80\n#define SHADOW_STEPS 50\n#define LIGHT_COLOR vec3(0.180,1.000,0.725)\n#define AMBIENT_COLOR vec3(.57,.55,.6)\n#define FLOOR_COLOR vec3(0.078,1.000,0.894)\n#define ENERGY_COLOR vec3(1.,.7,.4)\n#define BRIGHTNESS 2.0\n#define GAMMA 1.2\n#define SATURATION .9\n\n\n\n#define detail .00002\n#define t iTime*.1\n\n\nfloat cc,ss;\nvec3 lightdir=normalize(vec3(0.5,-0.4,-1.));\nvec3 ambdir=normalize(vec3(0.,0.,1.));\nconst vec3 origin=vec3(0.,3.11,0.);\nfloat det=0.0;\nvec3 pth1;\n\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.01+0.01*(b-a)/k, 0.0, 1.0 );\n    return mix( b, k, h ) - a*b*(0.5-k);\n}\n\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\n\nvec3 path(float ti) {\nreturn vec3(0.,2.5,0.1)+vec3(cos(ti)*.9,cos(ti*.5),sin(ti)*.8);\n}\n\n\nvec4 formula (vec4 p) {\n\tp.y-=t*.25;\n    p.y=abs(3.-mod(p.y-t,5.));\n    for (int i=0; i<7; i++) {\n\t\tp.xyz = abs(p.xyz)-vec3(.0,1.,.0);\n\t\tp=p*1.6/clamp(dot(p.xyz,p.xyz),.2,1.)-vec4(0.4,1.5,0.4,0.);\n\t\tp.xz*=mat2(cc,ss,-ss,cc);\n\t}\n\treturn p;\n}\n\n\nfloat texture1(vec3 p) {\n    p=abs(1.-mod(p,2.));\n    vec3 c=vec3(3.);\n\tfloat es=1000., l=0.;\n\tfor (int i = 0; i < 8; i++) { \n\t\t\tp = abs(p + c) - abs(p - c) - p; \n\t\t\tp/= clamp(dot(p, p), .25, 1.);\n\t\t\tp = p* -1.5 + c;\n        \tes=min(min(abs(p.x),abs(p.y)),es);\n\t}\n\treturn es*es;\n}\n\nfloat texture2 (vec3 p) {\n\t//p.xz=abs(.75-mod(p.xz,1.5));\n    p=formula(vec4(p,0.)).xyz;\n    return .23+clamp(pow(max(0.,1.-max(abs(p.x),abs(p.z))),2.)*2.,.1,.7);\n}\n\n\nvec2 de(vec3 pos) {\n\tfloat aa=smoothstep(0.,1.,clamp(cos(t-pos.y*.4)*1.5,0.,1.))*3.14159;\n    cc=cos(aa);ss=sin(aa);\n    float hid=0.;\n\tvec3 tpos=pos;\n\t//tpos.xz=abs(1.5-mod(tpos.xz,3.))-1.5;\n\tvec4 p=vec4(tpos,1.);\n\tfloat y=max(0.,.3-abs(pos.y-3.3))/.3;\n    p=formula(p);\n    float fl=pos.y-3.7-length(sin(pos.xz*60.))*.01;\n\tfloat fr=max(abs(p.z/p.w)-.01,length(p.zx)/p.w-.002);\n\tfloat bl=max(abs(p.x/p.w)-.01,length(p.zy)/p.w-.0005);\n    fr=smin(bl,fr,.02);\n\tfr*=.9;\n    //float fr=length(p.xyz)/p.w;\n    fl-=(length(p.xz)*.005+length(sin(pos*3.+t*5.))*.15);\n    fl*=.9;\n\tfloat d=smin(fl,fr,.7);\n    if (abs(d-fl)<.2) {\n        hid=1.;\n    }\n    return vec2(d,hid);\n}\n\n\nvec3 normal(vec3 p) {\n\tvec3 e = vec3(0.0,det,0.0);\n\t\n\treturn normalize(vec3(\n\t\t\tde(p+e.yxx).x-de(p-e.yxx).x,\n\t\t\tde(p+e.xyx).x-de(p-e.xyx).x,\n\t\t\tde(p+e.xxy).x-de(p-e.xxy).x\n\t\t\t)\n\t\t);\t\n}\n\nfloat shadow(vec3 pos, vec3 sdir) {//THIS ONLY RUNS WHEN WITH HARD SHADOWS\n\tfloat sh=1.0;\n\tfloat totdist =2.0*det;\n\tfloat dist=5.;\n\t\tfor (int steps=0; steps<SHADOW_STEPS; steps++) {\n\t\t\tif (totdist<4. && dist>detail) {\n\t\t\t\tvec3 p = pos - totdist * sdir;\n\t\t\t\tdist = de(p).x;\n\t\t\t\tsh = min( sh, max(20.*dist/totdist,0.0) );\n\t\t\t\ttotdist += max(.01,dist);\n\t\t\t}\n\t\t}\n\t\n    return clamp(sh,0.1,1.0);\n}\n\n\nfloat calcAO( const vec3 pos, const vec3 nor ) {\n\tfloat aodet=detail*75.;\n\tfloat totao = 0.0;\n    float sca = 10.0;\n    for( int aoi=0; aoi<5; aoi++ ) {\n        float hr = aodet*float(aoi*aoi);\n        vec3 aopos =  nor * hr + pos;\n        float dd = de( aopos ).x;\n        totao += -(dd-hr)*sca;\n        sca *= 0.7;\n    }\n    return clamp( 1.0 - 5.0*totao, 0., 1. );\n}\n\n\nvec3 light(in vec3 p, in vec3 dir, in vec3 n, in float hid) {//PASSING IN THE NORMAL\n\t#ifdef ENABLE_HARD_SHADOWS\n\t\tfloat sh=shadow(p, lightdir);\n\t#else\n\t\tfloat sh=calcAO(p,-2.5*lightdir);//USING AO TO MAKE VERY SOFT SHADOWS\n\t#endif\n\tfloat ao=calcAO(p,n);\n\tfloat diff=max(0.,dot(lightdir,-n))*sh*.95;\n\tfloat y=3.16-p.y;\n\tvec3 amb=max(.6,dot(dir,-n))*.7*AMBIENT_COLOR;\n\tvec3 r = reflect(lightdir,n);\n\tfloat spec=pow(max(0.,dot(dir,-r))*sh,15.)*.5;\n\tvec3 col;\n\tfloat energysource=pow(max(0.,.1-abs(y))/.1,3.)*1.5;\n\t\tfloat k=texture2(p); \n\t\tcol=mix(vec3(k,k*k,k*k*k)*.9+.1,vec3(k)*1.5,.4);\n\t\tif (abs(hid-1.)<.001) col=FLOOR_COLOR;\n\tcol=col*(amb*ao+diff*(.3+ao*.5)*LIGHT_COLOR)+spec*LIGHT_COLOR;\t\n\treturn col;\n}\n\nvec3 raymarch(in vec3 from, in vec3 dir) \n\n{\n\tfloat ey=mod(t*.5,1.);\n\tfloat glow,eglow,ref,sphdist,totdist=glow=eglow=ref=sphdist=0.;\n\tvec2 d=vec2(1.,0.);\n\tvec3 p, col=vec3(0.);\n\tvec3 origdir=dir,origfrom=from,sphNorm;\n\t\n    for (int i=0; i<RAY_STEPS; i++) {\n\t\tif (d.x>det && totdist<6.0) {\n\t\t\tp=from+totdist*dir;\n\t\t\td=de(p);\n\t\t\tdet=detail*(1.+totdist*60.)*(1.+ref*5.);\n\t\t\ttotdist+=max(detail,d.x); \n\t\t\tif (d.y<.5) glow+=max(0.,.02-d.x)/.02;\n\t\t}\n\t}\n\tvec3 ov=normalize(vec3(1.,.5,1.));\n\tvec3 sol=dir+lightdir;\n    float l=pow(max(0.,dot(normalize(-dir*ov),normalize(lightdir*ov))),1.5)+sin(atan(sol.x,sol.y)*20.+length(from)*50.)*.002;\n    totdist=min(5.9,totdist);\n    p=from+dir*(totdist-detail);\n    vec3 backg=.4*(1.2-l)+LIGHT_COLOR*l*.75;\n\tbackg*=AMBIENT_COLOR*(1.-max(0.2,dot(normalize(dir),vec3(0.,1.,0.)))*.2);\n\tfloat fondo=0.;\n\tvec3 pp=p*.5+sin(t*2.)*.5;\n    for (int i=0; i<15; i++) {\n        fondo+=clamp(0.,1.,texture1(pp+dir*float(i)*.02))*max(0.,1.-exp(-.03*float(i)));\n    }\n    vec3 backg2=backg*(1.+fondo*(LIGHT_COLOR)*.75);\n    if (d.x<.01) {\n        vec3 norm=normal(p);\n\t\tcol=mix(light(p-abs(d.x-det)*dir, dir, norm, d.y),backg,1.-exp(-.3*totdist*totdist)); \n\t\tcol = mix(col, backg2, 1.0-exp(-.02*pow(abs(totdist),2.)));\n\t} else { \n\t\tcol=backg2;\n\t}\n\tvec3 lglow=LIGHT_COLOR*pow(abs(l),30.)*.5;\n    col+=glow*(.3+backg+lglow)*.005;\n\tcol+=lglow*min(1.,totdist*totdist*.03)*1.2;\n\treturn col; \n}\n\nvec3 move(inout mat2 rotview1,inout mat2 rotview2) {\n\tvec3 go=path(t);\n\tvec3 adv=path(t+.5);\n\tvec3 advec=normalize(adv-go);\n\tfloat an=atan(advec.x,advec.z);\n\trotview1=mat2(cos(an),sin(an),-sin(an),cos(an));\n\t\t  an=advec.y*1.5-.2;\n\trotview2=mat2(cos(an),sin(an),-sin(an),cos(an));\n\treturn go;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    pth1 = path(t+.3)+origin+vec3(0.,.01,0.);\n\tvec2 uv = fragCoord.xy / iResolution.xy*2.-1.;\n    vec2 uv2=uv;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec2 mouse=(iMouse.xy/iResolution.xy-.5)*3.;\n\tif (iMouse.z<1.) mouse=vec2(0.);\n\tmat2 rotview1, rotview2;\n\tvec3 from=origin+move(rotview1,rotview2);\n\tvec3 dir=normalize(vec3(uv*1.5,1.));\n\tdir.yz*=rot(mouse.y);\n\tdir.xz*=rot(mouse.x-1.);\n\tdir.yz*=rotview2;\n\tdir.xz*=rotview1;\n\tvec3 color=raymarch(from,dir); \n\tcolor=clamp(color,vec3(.0),vec3(1.));\n\tcolor=pow(abs(color),vec3(GAMMA))*BRIGHTNESS;\n\tcolor=mix(vec3(length(color)),color,SATURATION);\n\tcolor*=1.2-length(pow(abs(uv2),vec2(4.)))*.3;\n\tfloat fadein=clamp(iTime-.5,0.,1.);\n    fragColor = vec4(color*vec3(.93,.95,.91),1.)*fadein;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 32383,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/cristi-covlea/trance-uplifting-progressive-all-time-favorites-minibyte-2022-vol-2"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}