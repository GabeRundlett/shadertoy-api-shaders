{
    "Shader": {
        "info": {
            "date": "1677732698",
            "description": "Signed distance, closest point and gradient to a trapezoid. Faster than central differences or automatic differentiation/dual numbers most probably.",
            "flags": 0,
            "hasliked": 0,
            "id": "ddt3Rs",
            "likes": 25,
            "name": "Trapezoid - gradient&closest 2D ",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "gradient",
                "distance",
                "trapezoid"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 689
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright © 2023 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Signed distance, closest point and gradient to a trapezoid.\n\n// List of other 2D distances+gradients:\n//\n// https://iquilezles.org/articles/distgradfunctions2d\n//\n// and\n//\n// https://www.shadertoy.com/playlist/M3dSRf\n\n\n// .x = f(p)\n// .y = ∂f(p)/∂x\n// .z = ∂f(p)/∂y\n// .yz = ∇f(p) with ‖∇f(p)‖ = 1\nvec3 sdgTrapezoid( in vec2 p, in float ra, float rb, float he, out vec2 ocl )\n{\n    float sx = (p.x<0.0)?-1.0:1.0;\n    float sy = (p.y<0.0)?-1.0:1.0;\n\n\tp.x = abs(p.x);\n\n    vec4 res;\n    \n    // bottom and top edges\n    {\n        float h = min(p.x,(p.y<0.0)?ra:rb);\n        vec2  c = vec2(h,sy*he);\n        vec2  q = p - c;\n        float d = dot(q,q);\n        float s = abs(p.y) - he;\n        res = vec4(d,q,s);\n        ocl = c;\n    }\n    \n    // side edge\n    {\n        vec2  k = vec2(rb-ra,2.0*he);\n        vec2  w = p - vec2(ra, -he);\n        float h = clamp(dot(w,k)/dot(k,k),0.0,1.0);\n        vec2  c = vec2(ra,-he) + h*k;\n        vec2  q = p - c;\n        float d = dot(q,q);\n        float s = w.x*k.y - w.y*k.x;\n        if( d<res.x ) { ocl = c; res.xyz = vec3(d,q); }\n        if( s>res.w ) { res.w = s; }\n    }\n   \n    // distance and sign\n    float d = sqrt(res.x)*sign(res.w);\n    res.y *= sx;\n    ocl.x *= sx;\n    \n    return vec3(d,res.yz/d);\n}\n\n#define AA 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n        vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n        // animation\n        float ra = 0.2+0.15*sin(iTime*1.3+0.0);\n        float rb = 0.2+0.15*sin(iTime*1.4+1.1);\n        float he = 0.5+0.2*sin(1.3*iTime);\n\n\n        // sdf(p) and gradient(sdf(p))\n        vec2 kk;\n        vec3  dg = sdgTrapezoid( p, ra, rb, he, kk );\n        float d = dg.x;\n        vec2 g = dg.yz;\n\n        // central differenes based gradient, for comparison\n        //g = vec2(dFdx(d),dFdy(d))/(2.0/iResolution.y);\n\n        // coloring\n        vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.4,0.7,0.85);\n        col *= 1.0 + vec3(0.5*g,0.0);\n      //col = vec3(0.5+0.5*g,1.0);\n        col *= 1.0 - 0.5*exp(-16.0*abs(d));\n        col *= 0.9 + 0.1*cos(150.0*d);\n        col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n \n        // interaction\n        if( iMouse.z>0.001 )\n        {\n            vec2 cl;\n            d = sdgTrapezoid(m, ra, rb, he, cl).x;\n            col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n            col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n            col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-cl)-0.015));\n        }\n\n\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}