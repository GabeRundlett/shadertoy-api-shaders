{
    "Shader": {
        "info": {
            "date": "1682238922",
            "description": "All year long I'm going to just focus on truchet tiles and the likes!\n\nIf slow - turn AA off ",
            "flags": 0,
            "hasliked": 0,
            "id": "DsKXDy",
            "likes": 33,
            "name": "Year of Truchets #014",
            "published": 3,
            "tags": [
                "raymarching",
                "hexagon",
                "truchet",
                "tiles"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 387
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Year of Truchets #014\n    04/22/2023  @byt3_m3chanic\n    \n    Taking 2D concepts from @Shane into 3D with some simple extrudes and a few exta vec3's\n\n*/\n\n\n// AA Setting 2 = on / 1 = off\n#define AA 2\n// AA Setting\n\n#define R iResolution\n#define T iTime\n#define M iMouse\n\n#define PI          3.14159265359\n#define PI2         6.28318530718\n#define SQ3         1.732\n\n#define MIN_DIST    1e-4\n#define MAX_DIST    60.\n\nconst vec2  s = vec2(1, 1.7320508);\n// pre-cal for speed \nconst float radi = .28867514;\nconst float harc = .57735027;\nconst float scale = .415;\n\nvec3 hp,hit;\nvec2 gid, sid;\nfloat time;\n\nmat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat hash21(vec2 p){return fract(sin(dot(p, vec2(27.609, 57.583)))*43758.5453);}\n\n//@iq extrude functions \nfloat opx(in float d, in float z, in float h){\n    vec2 w = vec2( d, abs(z) - h );\n  \treturn min(max(w.x, w.y), 0.) + length(max(w, 0.));\n}\n\n//@Shane grid functions\nvec4 getGrid(vec2 p) {\n    vec4 ip = floor(vec4(p/s, p/s - .5));\n    vec4 q = p.xyxy - vec4(ip.xy + .5, ip.zw + 1.)*s.xyxy;\n    return dot(q.xy, q.xy)<dot(q.zw, q.zw)? vec4(q.xy, ip.xy) : vec4(q.zw, ip.zw + .5);\n}\n\nvec3 map(vec3 pos) {\n    vec3 res = vec3(1e5,0,0);\n\n    vec2 uv = pos.xz;\n    \n    vec4 h = getGrid(uv*scale);\n    vec2 p = h.xy;\n\n    float rnd = hash21(h.zw + vec2(.09, .04));\n    float rnd2 = hash21(h.zw + vec2(.37, 7.83)); \n    \n    rnd = floor(rnd*144.);\n    p.xy*=rot(rnd*PI/3.);\n\n    vec3 d, py;\n    vec2 p0, p1, p2;\n    float m = 1.;\n    \n    if(rnd2<.25) {\n        p0 = p - vec2(0, -harc);\n        p1 = p - vec2(0, harc);\n        p2 = p;\n        \n        d.x = length(p0) - radi;\n        d.y = length(p1) - radi;\n        d.z = abs(p2.y);\n        \n        py.x = pos.y;\n        py.y = pos.y;\n        py.z = (pos.y-.15)-.15*cos(p0.x*PI2);\n        m = 3.;\n    }\n    else if(rnd2<.5) {\n        p0 = p;\n        p1 = rot(1.04719755)*p;\n        p2 = rot(2.09439510)*p;\n    \n        d.x = abs(p0.y);\n        d.y = abs(p1.y);\n        d.z = abs(p2.y);\n \n        py.x = (pos.y-.15)-.15*cos(p0.x*PI2);\n        py.y = (pos.y-.3)-.3*cos(p1.x*PI2);\n        py.z = pos.y;\n        m = 2.;\n    }\n    else {\n        p0 = p - vec2(-.5, -radi);\n        p1 = p - vec2(.5, -radi);\n        p2 = p - vec2(0, harc);\n        \n        d.x = length(p0) - radi;\n        d.y = length(p1) - radi;\n        d.z = length(p2) - radi;\n        \n        py = vec3(pos.y);\n    }\n  \n    const float ht = .075;\n    float tk = .055+.045*sin(pos.z*.25);\n    tk += .055+.045*sin(pos.x*.35);\n    d=abs(d)-tk;\n    \n    float d1 = opx(d.x,py.x,ht)-.01;\n    if(d1<res.x) {\n        res =vec3(d1,m,1.);\n        hp = vec3(p0.x,pos.y,p0.y);\n    }\n\n    float d2 = opx(d.y,py.y,ht)-.01;\n    if(d2<res.x) {\n        res =vec3(d2,m,2.);\n        hp = vec3(p1.x,pos.y,p1.y);\n    }\n    \n    float d3 = opx(d.z,py.z,ht)-.01;\n    if(d3<res.x) {\n        res =vec3(d3,m,3.);\n        hp = vec3(p2.x,pos.y,p2.y);\n    }\n\n    float f = pos.y+ht;\n    if(f<res.x) {\n        res =vec3(f,20.,0.);\n        hp = pos;\n    }\n\n    return res;\n}\n\n\nvec3 normal(vec3 p, float t) {\n    t*=MIN_DIST;\n    float d = map(p).x;\n    vec2 e = vec2(t,0);\n    vec3 n = d - vec3(\n        map(p-e.xyy).x,\n        map(p-e.yxy).x,\n        map(p-e.yyx).x\n    );\n    return normalize(n);\n}\n\nvec3 marcher(vec3 ro, vec3 rd, inout vec3 p) {\n    float d=0.,m=0.,z=0.;\n    for(int i=0;i<100;i++){\n        vec3 t = map(p);\n        d += i<32? t.x*.75:t.x;\n        m  = t.y;\n        z  = t.z;\n        p = ro + rd * d;\n        if(abs(t.x)<d*MIN_DIST||d>75.) break;\n    } \n    return vec3(d,m,z);\n}\n\nvec3 renderFull( vec2 uv )\n{\n\n    vec3 ro = vec3(11,0,8);\n    vec3 rd = normalize(vec3(uv, -1.));\n    \n    // mouse //\n    float x = M.xy==vec2(0) ? 0. : -(M.y/R.y*.25-.125)*PI;\n    float y = M.xy==vec2(0) ? 0. : -(M.x/R.x*2.-1.)*PI;\n    mat2 rx = rot(-.62-x), ry = rot(-.78-y+T*.04);\n    ro.zy *= rx; ro.xz *= ry; \n    rd.zy *= rx; rd.xz *= ry;\n\n    vec3 C = vec3(0);\n    vec3 p = ro;\n\n    vec3 ray = marcher(ro,rd,p);\n    float d = ray.x, m = ray.y, z = ray.z;\n    \n    // save globals\n    gid = sid; hit = hp;\n    \n    if(d<MAX_DIST) {\n  \n        vec3 n = normal(p,d);\n        vec3 lpos = vec3(.5,5,-13.5);\n        vec3 l = normalize(lpos-p);\n\n        float diff = clamp(dot(n,l),0.,1.);\n\n        float shdw = 1.;\n        for( float t = .01; t < 18.; ) {\n            float h = map(p + l*t).x;\n            if( h<MIN_DIST ) { shdw = 0.; break; }\n            shdw = min(shdw, 25.*h/t);\n            t += h;\n            if( shdw < MIN_DIST || t > 25. ) break;\n        }\n        \n        diff = mix(diff,diff*shdw,.35);\n\n        float spec = .75 * pow(max(dot(normalize(p-ro),reflect(normalize(lpos),n)),.1),24.);\n\n        vec3 h = vec3(.4);\n        \n        if(m==1.) {\n            vec2 arc = hit.xz;\n            float angle = atan(arc.x, arc.y);\n            float d = length(arc);\n\n            float width = .15;\n            float x = (width*angle/.28867514);\n            float y = (d-(.5-width))/(4.*width);\n\n            vec2 vv = vec2(x,y);\n            vec2 f = fract(vv)-.5;\n            h = texture(iChannel0,vv).rgb*vec3(.93,.62,.25);\n         \n        }\n\n        if(m==2.) {\n            vec2 vv = vec2(hit.xz);\n            vec2 f = (vv)-.5;\n            h = texture(iChannel0,vv).rgb*vec3(.93,.62,.25);\n        }\n\n        if(m==3.) {\n            vec2 f = vec2(0),vv = vec2(0);\n\n            if(z!=3.){\n                vec2 arc = hit.xz;\n                float angle = atan(arc.x, arc.y);\n                float d = length(arc);\n\n                float width = .15;\n                float x = (width*angle/.28867514);\n                float y = (d-(.5-width))/(4.*width);\n\n                vv = vec2(x,y);\n                f = fract(vv)-.5;\n            } else {\n                vv = vec2(hit.xz);\n                f = fract(vv)-.5;\n            }\n\n            h = texture(iChannel0,vv).rgb*vec3(.93,.62,.25);\n        }\n\n        \n        if(m==20.) {\n            h = texture(iChannel1,hit.xz*.25).rgb*.35;\n        }\n        \n        C = h * diff + spec;\n\n    }\n\n    vec3 sky = mix(vec3(.62,.37,.21),vec3(.36,.69,.94),clamp((uv.y-.25)*2.5,0.,1.));\n    C = mix(C,sky, 1.-exp(-.0001*d*d*d));\n    return C;\n}\n\n\nfloat vmul(vec2 v) {\n    return v.x * v.y;\n}\n\nvoid mainImage(out vec4 O, in vec2 F) { \n\n    vec3 col = vec3(.00); \n\n    float mTime = iTime;\n    time = mTime;    \n    \n    vec2 o = vec2(0);\n\n    // AA and motion blur from iq https://www.shadertoy.com/view/3lsSzf\n    // set AA above renderFull\n    #ifdef AA\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n    \t// pixel coordinates\n    \to = vec2(float(m),float(n)) / float(AA) - 0.5;\n    \t// time coordinate (motion blurred, shutter=0.5)\n    \tfloat d = 0.5*vmul(sin(mod(F.xy * vec2(147,131), vec2(PI * 2.))));\n    \ttime = mTime - 0.1*(1.0/24.0)*(float(m*AA+n)+d)/float(AA*AA-1);\n    #endif\n\n    \tvec2 p = (-R.xy + 2. * (F + o)) / R.x;\n    \tcol += renderFull(p);\n        \n    #ifdef AA\n    }\n    col /= float(AA*AA);\n    #endif\n\n    col = pow( col, vec3(0.4545) );\n\n    O = vec4(col, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}