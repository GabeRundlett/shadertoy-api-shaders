{
    "Shader": {
        "info": {
            "date": "1694424245",
            "description": "Performance test to check how to make normalmaps the fastest from a heightmap. It seems the one using derivatives is waaay faster than anything else so use that.",
            "flags": 0,
            "hasliked": 0,
            "id": "DtSBWy",
            "likes": 2,
            "name": "PerfTest Normal from Height",
            "published": 3,
            "tags": [
                "test",
                "performance",
                "heightmap",
                "normal",
                "height",
                "speed"
            ],
            "usePreview": 0,
            "username": "gehtsiegarnixan",
            "viewed": 233
        },
        "renderpass": [
            {
                "code": "/*\nThis performance test aims to compare Height to Normal implementations. \n\nThe test works by measuring frames per second (FPS) on Shadertoy. To \nensure valid results, we repeat the test function with varying values, \naccumulating their results into a final image.\n\nSteps:\n- Increase REPEAT until the FPS are below your monitors refreshrate \n    (probably somewhere around 60-144 fps)\n- Modify TEST value to switch between test cases\n- The highest FPS indicates the fastest implementation\n- Congratulate yourself for doing SCIENCE\n*/\n\n// Number of repeats of the test, 3000 should be enough for RTX3080\n#define REPEAT 1\n\n// switch between the test cases\n// 0 = NoxWings normal gen using derivatives ~ 108 fps\n// 1 = NoxWings normal gen using 3 texture samples ~ 40 fps\n// 2 = dmmn also using 3 texture samples ~ 42 fps\n#define TEST 0\n\n// NoxWings normal gen using derivatives\n// https://www.shadertoy.com/view/3sSSW1\nvec3 HeightToNormalDerivative(sampler2D heightMap, vec2 uv, float strength) {\n    float height = texture(heightMap, uv).r;\n    vec2 xy = -vec2(dFdx(height), dFdy(height)) * (iResolution.xy/iChannelResolution[0].xy);\n    \n    return normalize(vec3(xy*strength, 1.));\n}\n\n// NoxWings normal gen using 3 texture samples\n// https://www.shadertoy.com/view/3sSSW1\nvec3 HeightToNormal3Sample(sampler2D heightMap, vec2 uv, float strength) {\n    vec2 s = 1.0/iChannelResolution[0].xy;\n    \n    float textureOffset = 1.0;\n    \n    float p = texture(heightMap, uv).x;\n    float h1 = texture(heightMap, uv + s * vec2(textureOffset,0)).x;\n    float v1 = texture(heightMap, uv + s * vec2(0,textureOffset)).x;\n       \n  \tvec2 xy = (p - vec2(h1, v1));\n    \n    return normalize(vec3(xy*strength, 1.));\n}\n\n// dmmn also using 3 texture samples\n// https://www.shadertoy.com/view/MsScRt\nvec3 HeightToNormal3Sample2(sampler2D heightMap, vec2 uv, float strength) {\n  vec2 s = 1. / iResolution.xy;\n    \n  float height = texture(heightMap, uv).x;\n    \n  vec2 dxy = height - vec2(\n      texture(heightMap, uv + vec2(s.x, 0.)).x, \n      texture(heightMap, uv + vec2(0., s.y)).x\n  );\n    \n  vec2 xy = dxy / s;\n  return normalize(vec3(xy*strength, 1.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // if you get around 144 fps use a higher repeat value\n    vec3 test;\n    for(int i=0; i<REPEAT; i++) {\n        float mut = (float(i)/float(REPEAT)); // permutation each iteration\n            \n        // use which ever you wish to test\n        #if TEST == 0\n            test += HeightToNormalDerivative(iChannel0, uv + mut, 50.);\n        #elif TEST == 1\n            test += HeightToNormal3Sample(iChannel0, uv + mut, 50.);\n        #else\n            test += HeightToNormal3Sample2(iChannel0, uv + mut, 0.1);\n        #endif\n    }\n    \n    // Output to screen\n    fragColor = vec4((test*.5+.5), 1.);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n// make square tiling of barycentric weights\nvec3 baryWeights(vec2 uv) {\n    // make individual weights for pattern\n    float weightA = min(uv.x, uv.y);\n    float weightB = min(1.-uv.x, 1.-uv.y);\n    float weightC = 1. - weightA - weightB;\n    \n    // Join weights together\n    return vec3(weightA, weightB, weightC);\n}\n\n// Linearly increases contrast of Alpha\n// See: https://www.desmos.com/calculator/hs1nsjb32q\nfloat straightContrast(float alpha, float contrast) {\n    return clamp(contrast * (alpha - 0.5) + 0.5, 0., 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}