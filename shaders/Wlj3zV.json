{
    "Shader": {
        "info": {
            "date": "1561704250",
            "description": "My first 2D noise test.\n\nWatch it for a while, enjoy a day in the mountain : )\n",
            "flags": 0,
            "hasliked": 0,
            "id": "Wlj3zV",
            "likes": 12,
            "name": "Zen Time",
            "published": 3,
            "tags": [
                "noise",
                "smokeeffect",
                "2dpainting"
            ],
            "usePreview": 1,
            "username": "zxxuan1001",
            "viewed": 786
        },
        "renderpass": [
            {
                "code": "const float TURBULENCE = 0.04;\n//noise function from iq: https://www.shadertoy.com/view/Msf3WH\nvec2 hash( vec2 p ) \n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nconst mat2 m2 = mat2(1.6,  1.2, -1.2,  1.6);\n\nfloat fbm(vec2 p) {\n    float amp = 0.5;\n    float h = 0.0;\n    for (int i = 0; i < 8; i++) {\n        float n = noise(p);\n        h += amp * n;\n        amp *= 0.5;\n        p = m2 * p ;\n    }\n    \n\treturn  0.5 + 0.5*h;\n}\nvec3 smokeEffect(vec2 uv) {\n    vec3 col = vec3(0.0);\n    // time scale\n    float v = 0.0002;\n    vec3 smoke = vec3(1.0);\n    //uv += mo * 10.0; \n   \n    vec2 scale = uv * 0.5 ;\n    vec2 turbulence = TURBULENCE * vec2(noise(vec2(uv.x * 3.5, uv.y * 3.2)), noise(vec2(uv.x * 2.2, uv.y * 1.5)));\n    scale += turbulence;\n\tfloat n1 = fbm(vec2(scale.x - abs(sin(iTime * v * 2.0)), scale.y - 50.0 * abs(sin(iTime * v))));\n    col =  mix( col, smoke, smoothstep(0.5, 0.9, n1));\n    //float y = fragCoord.y/iResolution.y;\n    //float fade = exp(-(y*y));\n    //col *= fade;\n    col = clamp(col, vec3(0.0), vec3(1.0));\n    return col;\n}\n\nfloat circle(vec2 p, float r) {\n    float c = length(p) - r;\n    return smoothstep(r + 0.01, r, c);\n}\n\nfloat sinwave(vec2 p, float scale, float amp) {\n    float wave = cos(p.x * scale + 0.5) + 0.25 * cos(p.x * scale * scale);\n    float s = smoothstep(amp + 0.01, amp, amp * wave - p.y);\n    return s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = fragCoord/iResolution.xy;\n    p -= 0.5;\n    p.x *= iResolution.x / iResolution.y;\n    \n    vec3 col = vec3(0.0);    \n    vec3 smoke = smokeEffect(p);\n    \n    vec3 tex = 0.02 * texture(iChannel0, uv * 2.5).rgb;   \n    vec3 background = 0.7 * vec3(238.0,232.0,170.0)/255.0 + tex;\n    vec3 mountCol = mix(vec3(102.0,153.0,153.0)/255.0, vec3(153.0,204.0,0.0)/255.0, p.y + 0.5);\n    vec3 sunCol = 0.85 * mix(vec3(1.0, 0.0, 0.0), vec3(1.0, 1.0, 0.0), p.y + 0.5);\n    vec3 cloudCol = vec3(0.9);\n    float t = iTime * 0.05;\n    vec2 sunPos = p - vec2(0.4 * cos(t), 0.4 * sin(t));\n    float sun = circle(sunPos, 0.1); \n    float mountain1 = sinwave(p - vec2(0.5, -0.1), 3.0, 0.1);\n    float mountain2 = sinwave(p, 3.0, 0.2);\n    float cloud = 1.0 - smoke.r;\n    col = mix(background, sunCol, sun);\n    col = mix(mountCol * 0.9, col, mountain1);\n    col = mix(cloudCol, col, cloud);\n    col = mix(mountCol, col, mountain2);\n     \n    col *= 0.2 + 0.8 * pow(32.0 * uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y), 0.2);\n    fragColor = vec4(col ,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}