{
    "Shader": {
        "info": {
            "date": "1539927870",
            "description": "Playing around with audio-reactive visuals using some of my music on soundcloud: https://soundcloud.com/metaeaux/to-exist-is-to-wonder",
            "flags": 64,
            "hasliked": 0,
            "id": "lltfD7",
            "likes": 28,
            "name": "Metaeaux - Aurora",
            "published": 3,
            "tags": [
                "aurora"
            ],
            "usePreview": 0,
            "username": "metaeaux",
            "viewed": 2694
        },
        "renderpass": [
            {
                "code": "float quintic(float x) {\n \treturn x*x*x*(6.*x*x-15.*x+10.);\n}\n\nfloat fft(float p) {\n    return texture(iChannel0, vec2(p, 0.25)).x;\n}\n\nconst float fac = 43758.5453123;\n\nfloat hash(float p) {\n    return fract(fac*sin(p));\n}\n\nfloat noise(in vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n    \n    float fac = 43758.5453123;\n    const float upper = 100.;\n    vec3 m = vec3(1., 10., 100.);\n    vec2 o = vec2(1., 0.);\n    \n    float n000 = hash(dot((i + o.yyy), m));\n    float n001 = hash(dot((i + o.xyy), m));\n    float n010 = hash(dot((i + o.yxy), m));\n    float n011 = hash(dot((i + o.xxy), m));\n    float n100 = hash(dot((i + o.yyx), m));\n    float n101 = hash(dot((i + o.xyx), m));\n    float n110 = hash(dot((i + o.yxx), m));\n    float n111 = hash(dot((i + o.xxx), m));\n    \n    float fx = quintic(f.x);\n    float fy = quintic(f.y);\n    float fz = quintic(f.z);\n    \n    float px00 = mix(n000, n001, fx);\n    float px01 = mix(n010, n011, fx);\n    \n    float px10 = mix(n100, n101, fx);\n    float px11 = mix(n110, n111, fx);\n    \n    float py0 = mix(px00, px01, fy);\n    float py1 = mix(px10, px11, fy);\n    \n    return mix(py0, py1, fz);\n}\n\n\nfloat noise(in vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    vec2 m = vec2(100., 1.);\n    vec2 o = vec2(1., 0.);\n    \n    float n00 = hash(dot((i + o.yy), m));\n    float n01 = hash(dot((i + o.xy), m));\n    float n10 = hash(dot((i + o.yx), m));\n    float n11 = hash(dot((i + o.xx), m));\n    \n    float fx = quintic(f.x);\n    float px0 = mix(n00, n01, fx);\n    float px1 = mix(n10, n11, fx);\n    \n    return mix(px0, px1, quintic(f.y));\n}\n\nfloat ocean(vec2 p) {\n    float f = fft(abs(1.-p.x))*0.2 + fft(abs(p.x))*0.52;\n    \n    float speed = .8;\n    vec2 v01 = vec2( 1.,  0.) * iTime*speed;\n    vec2 v02 = vec2( 0.,  1.) * iTime*speed;\n    vec2 v03 = vec2( 1.,  1.) * iTime*speed;\n    vec2 v04 = vec2(-1.,  0.) * iTime*speed;\n    vec2 v05 = vec2(-1.,  0.) * iTime*speed;\n    vec2 v06 = vec2(-1., -1.) * iTime*speed;\n    \n    f += 0.50000*noise(p*1.0  + v01); //*fft(p.x);\n    f += 0.25000*noise(p*2.1  + v02);\n    f += 0.12500*noise(p*3.9  + v03);\n    f += 0.06250*noise(p*8.1  + v04);\n    f += 0.03215*noise(p*15.8 + v05);\n    f += 0.01608*noise(p*32.3 + v06);\n    \n    f = (3.-2.*f)*f*f;\n    \n    return f;\n    \n}\n\nfloat map(in vec3 p) {   \n    float o = ocean(p.xz * 0.08) * 3.;\n    return p.y + 0.5 + o;\n}\n\nfloat calcShadow(in vec3 ro, in vec3 rd, float tmax) {\n    float r = 1.;\n    float t = 0.;\n    for(int i = 0; i < 128; i++) {\n        float h = map(ro + t * rd);\n        r = min(r, tmax*h/t);\n        if (r < 0.01) break;\n        if (t > tmax) break;\n        t += h;\n    }\n    return clamp(r, 0., 1.);\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(0.01, 0.);\n    return normalize(vec3(\n        map(p + e.xyy) - map(p - e.xyy),\n        map(p + e.yxy) - map(p - e.yxy),\n        map(p + e.yyx) - map(p - e.yyx)\n    ));\n    \n}\n\n\nconst vec3 SUN_DIR = normalize(vec3(-0.2, 0.15, -0.8));\nconst vec3 SUN_COL = vec3(0.95, 0.8, 0.85);\n\nvec3 sky(in vec3 rd, float fac) {\n    vec3 stars = pow(vec3(noise(rd.xy*iResolution.x)), vec3(90.));\n    rd.y = max(0., rd.y);\n    \n    vec3 blue = 0.6* vec3(0.02, 0.09, 0.2) -rd.y*0.12;\n    vec3 sunset = blue * (cos(fac * 6.28)*.7 + 1.); \n    return sunset + stars;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0., 0., 0.);\n    vec3 ta = vec3(0., 0., 1000.);\n    float an = 1.2;\n    vec3 up = normalize(vec3(cos(an), 1., sin(an)));\n    vec3 ww = normalize(ta-ro);\n    vec3 uu = normalize(cross(ww, up));\n    vec3 vv = normalize(cross(uu, ww));\n    \n    vec3 rd = normalize(vec3(p.x*uu + p.y*vv - 2.*ww));\n    \n    float m = -1.;\n    float t = 0.;\n    float tmax = 300.;\n    for(int i = 0; i<512; i++) {\n        float h  = map(ro + rd * t);\n        if ( h<0.01 ) { m = 1.; break; };\n        if ( t>tmax ) break;\n        t += h;\n    }\n    \n    float sunsetFac = mod(iTime*0.12 + fft(0.1), 1.);\n    vec3 skyCol = sky(rd, sunsetFac);\n    vec3 col = skyCol;\n\n    \n    vec3 vol = vec3(0.);\n    float den = 0.;\n    float h = noise(fragCoord+p);\n    float dh = 0.1*tmax / 32.0;\n    rd.y  = -rd.y;\n    rd.xz = rd.xz*mat2(0.8, -0.6, 0.6, 0.8);\n    for (int i = 0; i < 32; i++) {\n        vec3 pos = ro + h*rd;\n        vec3 dir = SUN_DIR - pos;\n        vec3 l = (vec3(0.1, 0.99, 0.1)*calcShadow(pos, normalize(dir), length(dir)));\n        float d = noise(pos + 2.*vec3(iTime, -iTime, -iTime));\n            \n        d *= exp(-0.85*pos.y);\n       \n        den += d*0.001;\n        vol += l*den;\n        \n        if(den > 1.) break;\n        \n        h += dh;\n    }\n    col += pow(vec3(vol), vec3(1.5));\n    \n    col = pow(col, vec3(0.4545));\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 16477,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/metaeaux/to-exist-is-to-wonder"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}