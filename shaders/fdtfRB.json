{
    "Shader": {
        "info": {
            "date": "1656877109",
            "description": "- wythoff + caspar-klug\n- simplifying code from the democapsid shader via wythoff construction, etc...\n- need to calculate dual patterns... (done)\n",
            "flags": 32,
            "hasliked": 0,
            "id": "fdtfRB",
            "likes": 6,
            "name": "wythoff + caspar-klug",
            "published": 3,
            "tags": [
                "tetrahedron",
                "pattern",
                "tiling",
                "icosahedron",
                "octahedron",
                "polyhedron",
                "wythoff",
                "casparklug"
            ],
            "usePreview": 0,
            "username": "remaindeer",
            "viewed": 312
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    // vec3 col = vec3(0);\n    // col = sdTriangle(uv, q1, q2, q3) > 0.0 ? col : texture(iChannel0, iv.xy).xyz;\n   \n    // https://en.wikipedia.org/wiki/Camera_matrix\n    // https://www.cs.cmu.edu/~16385/s17/Slides/11.1_Camera_matrix.pdf\n    mat3 K = mat3(2.5);          // calibration\n    vec3 C = vec3(0);            // translation\n    mat3 Q = rotmat3(            // rotation\n        vec3(\n            radians(mod(iTime, 360.0) * 10.0),\n            radians(mod(iTime, 360.0) * 15.0),\n            radians(mod(iTime, 360.0) * 20.0)\n        )\n    );\n    mat4x3 IC = mat4x3(mat3(1));\n    IC[3] = -C;\n    mat4x3 P = (K * Q) * IC;     // projection\n\n    vec3 col = vec3(0);\n\n    int n = 0;   // n-th color\n    vec3[20] c;  // color value\n    float[20] z; // color depth\n    int nf = 20; // number of faces\n    int shape = int(mod(round((iTime + 3.0 / 2.0) / 6.0), 3.0));\n    switch (shape) {\n        case TET:\n            nf = 4;\n            break;\n        case OCT:\n            nf = 8;\n            break;\n        case ICO:\n            nf = 20;\n            break;\n    }\n    for (int i = 0; i < nf; i++)\n    {\n        // map face\n        vec3 q1, q2, q3;\n        switch (shape) {\n            case TET:\n                q1 = P * TET_V[int(TET_F[i].x)]; \n                q2 = P * TET_V[int(TET_F[i].y)]; \n                q3 = P * TET_V[int(TET_F[i].z)];\n                break;\n            case OCT:\n                q1 = P * OCT_V[int(OCT_F[i].x)]; \n                q2 = P * OCT_V[int(OCT_F[i].y)]; \n                q3 = P * OCT_V[int(OCT_F[i].z)];\n                break;\n            case ICO:\n                q1 = P * ICO_V[int(ICO_F[i].x)]; \n                q2 = P * ICO_V[int(ICO_F[i].y)]; \n                q3 = P * ICO_V[int(ICO_F[i].z)];\n                break;\n        }\n        if (sdTriangle(uv, q1.xy, q2.xy, q3.xy) <= 0.0)\n        {\n            mat3 A = mat3(\n                q1.x, q1.y, 1,\n                q2.x, q2.y, 1,\n                q3.x, q3.y, 1\n            );\n            // face centroid depth\n            z[n] = ((q1 + q2 + q3) / 3.0).z;\n            // https://stackoverflow.com/a/55550712\n            // map lattice texture to face\n            float s = (iResolution.y / iResolution.x) * 2.0 / sqrt(3.0);\n            mat3 X = mat3(0, 0, 1, s / 2.0, 1, 1, s, 0, 1);\n            vec3 iv = X * inverse(A) * vec3(uv.x, uv.y, 1);\n            c[n] = mix(texture(iChannel0, iv.xy).xyz, vec3(0), -z[n]);\n            n += 1;\n        }\n    }\n\n    // painter's algorithm\n    int i = 1;\n    while (i < n) {\n        float x = z[i];\n        vec3 X = c[i];\n        int j = i - 1;\n        while (j >= 0 && z[j] > x) {\n            z[j+1] = z[j];\n            c[j+1] = c[j];\n            j = j - 1;\n        }\n        z[j+1] = x;\n        c[j+1] = X;\n        i = i + 1;\n    }\n    for (int i = 0; i < n; i++) col = mix(col, c[i], 0.5);\n   \n   \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// math\n#define phi (1.0 + sqrt(5.0)) / 2.0\n\n// polyhedra\n//// constants\n#define TET 0\n#define OCT 1\n#define ICO 2\n//// tetrahedron\n////// radius\n#define TET_R 0.25\n////// vertexes\n#define TET_V vec4[] (               \\\n    vec4(+TET_R, +TET_R, +TET_R, 1), \\\n    vec4(-TET_R, +TET_R, -TET_R, 1), \\\n    vec4(+TET_R, -TET_R, -TET_R, 1), \\\n    vec4(-TET_R, +TET_R, -TET_R, 1), \\\n    vec4(-TET_R, -TET_R, +TET_R, 1), \\\n    vec4(+TET_R, -TET_R, -TET_R, 1)  \\\n)                                    \\\n////// faces\n#define TET_F vec3[] ( \\\n    vec3(0, 1, 2),     \\\n    vec3(1, 4, 2),     \\\n    vec3(0, 2, 4),     \\\n    vec3(0, 4, 1)      \\\n)                      \\\n//// octahedron\n////// radius\n#define OCT_RADIUS 0.85\n#define OCT_A      1.0 / (2.0 * sqrt(2.0)) * OCT_RADIUS\n#define OCT_B      0.5 * OCT_RADIUS\n////// vertexes\n#define OCT_V vec4[] (          \\\n    vec4(-OCT_A, 0, +OCT_A, 1), \\\n    vec4(-OCT_A, 0, -OCT_A, 1), \\\n    vec4(0, +OCT_B, 0, 1),      \\\n    vec4(+OCT_A, 0, -OCT_A, 1), \\\n    vec4(+OCT_A, 0, +OCT_A, 1), \\\n    vec4(0, -OCT_B, 0, 1)       \\\n)                               \\\n////// faces\n#define OCT_F vec3[] ( \\\n    vec3(0, 1, 2),     \\\n    vec3(1, 3, 2),     \\\n    vec3(3, 4, 2),     \\\n    vec3(4, 0, 2),     \\\n    vec3(3, 1, 5),     \\\n    vec3(1, 0, 5),     \\\n    vec3(4, 3, 5),     \\\n    vec3(0, 4, 5)      \\\n)                      \\\n//// icosahedron\n////// radius\n#define ICO_RADIUS 0.85\n#define ICO_A      0.5 * ICO_RADIUS\n#define ICO_B      1.0 / (2.0 * phi) * ICO_RADIUS\n////// vertexes\n#define ICO_V vec4[] (          \\\n    vec4(0, +ICO_B, -ICO_A, 1), \\\n    vec4(+ICO_B, +ICO_A, 0, 1), \\\n    vec4(-ICO_B, +ICO_A, 0, 1), \\\n    vec4(0, +ICO_B, +ICO_A, 1), \\\n    vec4(0, -ICO_B, +ICO_A, 1), \\\n    vec4(-ICO_A, 0, +ICO_B, 1), \\\n    vec4(0, -ICO_B, -ICO_A, 1), \\\n    vec4(+ICO_A, 0, -ICO_B, 1), \\\n    vec4(+ICO_A, 0, +ICO_B, 1), \\\n    vec4(-ICO_A, 0, -ICO_B, 1), \\\n    vec4(+ICO_B, -ICO_A, 0, 1), \\\n    vec4(-ICO_B, -ICO_A, 0, 1)  \\\n)                               \\\n////// faces\n#define ICO_F vec3[] ( \\\n    vec3( 0,  1,  2),  \\\n    vec3( 3,  2,  1),  \\\n    vec3( 3,  4,  5),  \\\n    vec3( 3,  8,  4),  \\\n    vec3( 0,  6,  7),  \\\n    vec3( 0,  9,  6),  \\\n    vec3( 4, 10, 11),  \\\n    vec3( 6, 11, 10),  \\\n    vec3( 2,  5,  9),  \\\n    vec3(11,  9,  5),  \\\n    vec3( 1,  7,  8),  \\\n    vec3(10,  8,  7),  \\\n    vec3( 3,  5,  2),  \\\n    vec3( 3,  1,  8),  \\\n    vec3( 0,  2,  9),  \\\n    vec3( 0,  7,  1),  \\\n    vec3( 6,  9, 11),  \\\n    vec3( 6, 10,  7),  \\\n    vec3( 4, 11,  5),  \\\n    vec3( 4,  8, 10)   \\\n)                      \\\n\nconst float cos30 = cos(radians(30.0));\n\nvec2 v1 = vec2(0, 0);\nvec2 v2 = vec2(0, cos30);\nvec2 v3 = vec2(0.5, cos30);\n\n// http://paulbourke.net/geometry/pointlineplane/\nvec2 intersection(vec2 p1, vec2 p2, vec2 p3, vec2 p4) {\n    float d = (p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y);\n    float ua = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x)) / d;\n    // float ub = ((p2.x - p1.x) * (p1.y - p3.y) - (p2.y - p1.y) * (p1.x - p3.x)) / d;\n    return p1 + ua * (p2 - p1);\n}\n\nmat2 rotmat2(float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nmat3 rotmat3(vec3 angle) {\n    float sintht = sin(angle.x), sinpsi = sin(angle.y), sinphi = sin(angle.z);\n    float costht = cos(angle.x), cospsi = cos(angle.y), cosphi = cos(angle.z);\n    return mat3(\n        costht * cospsi,\n        sintht * cospsi,\n        -sinpsi,\n        costht * sinpsi * sinphi - sintht * cosphi,\n        sintht * sinpsi * sinphi + costht * cosphi,\n        cospsi * sinphi,\n        costht * sinpsi * cosphi + sintht * sinphi,\n        sintht * sinpsi * cosphi - costht * sinphi,\n        cospsi * cosphi\n    );\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat opUnion( float d1, float d2 )\n{ \n    return min(d1,d2); \n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat opOnion( in float sdf, in float thickness )\n{\n    return abs(sdf)-thickness;\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nvec2 opRep( in vec2 p, in vec2 c )\n{\n    return mod(p + 0.5 * c, c) - 0.5 * c;\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\n// r is the half-side\nfloat sdEquilateralTriangle(  in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                     vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                     vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nvec2 snub632() {\n    // fermat point\n    vec2 pf = intersection(vec2(-0.75, cos30 / 2.0), v3, vec2(1, 0), v2);\n    // reflect over side (y-axis)\n    vec2 q1 = vec2(-1.0 * pf.x, pf.y);\n    // vec2 q2 = vec2(pf.x, pf.y + 2.0 * (cos30 - pf.y));\n    // project to hypotenuse then double to obtain reflection\n    vec2 q3 = dot(pf, v3) / dot(v3, v3) * v3;\n    q3 = pf + 2.0 * (q3 - pf);\n    // snub point is at half the hypotenuse of the new right triangle (Thales's theorem)\n    return q1 + ((q3 - q1) / 2.0);\n}\n\nfloat sdSchwartz632Snub(vec2 p, float t) {\n    // p the uv\n    // t the thickness\n    // take advantage of symmetry\n    float a = atan(p.y, p.x);\n    float M = floor(mod(degrees(a) - 30.0, 360.0) / 60.0) * 60.0;\n    p = rotmat2(radians(M)) * p;\n    // central point\n    float d = sdCircle(p, t);\n    // snub point\n    vec2 g = snub632();\n    // rotate\n    vec2 G = rotmat2(radians(180.0)) * (g - v2) + v2;\n    // d = opUnion(d, opOnion(sdTriangle(p, v1, v2, v3), t*0.25)); \n    d = opUnion(d, sdSegment(p, g, G) - t);\n    // fix by https://www.shadertoy.com/user/mla\n    d = opUnion(d, sdSegment(rotmat2(radians(-60.0)) * p, g, G) - t);\n    d = opUnion(d, sdSegment(p, g, rotmat2(radians(-60.0)) * (G - g) + g) - t);\n    d = opUnion(d, sdSegment(p, g, rotmat2(radians(+60.0)) * (G - g) + g) - t);\n    d = opUnion(d, sdSegment(p, g, rotmat2(radians(+120.0)) * (G - g) + g) - t);\n    d = opUnion(d, sdSegment(p, g, rotmat2(radians(+180.0)) * (G - g) + g) - t);\n    return d;\n}\n\nfloat sdSchwartz632DualSnub(vec2 p, float t) {\n    // p the uv\n    // t the thickness\n    // snub point\n    vec2 g = snub632();\n    // take advantage of symmetry\n    float a = atan(p.y, p.x) - (atan(g.y, g.x) - radians(60.0));\n    float M = floor(mod(degrees(a), 360.0) / 60.0) * 60.0;\n    p = rotmat2(radians(M)) * p;\n    // central point\n    float d = sdCircle(p, t);\n    float R3 = sqrt(3.0) / 2.0 * length(g);\n    float r3 = sqrt(3.0) / 6.0 * length(g); \n    vec2 n0 = normalize(rotmat2(radians(+30.0)) * g);\n    vec2 n1 = (R3 + r3) * n0;\n    vec2 n2 = n1 + rotmat2(radians(-60.0)) * (2.0 * r3 * n0);\n    vec2 n3 = n1 + rotmat2(radians(+60.0)) * (2.0 * r3 * n0);\n    d = opUnion(d, sdSegment(p, v1, n1) - t);\n    d = opUnion(d, sdSegment(p, n1, n2) - t);\n    d = opUnion(d, sdSegment(p, n1, n3) - t);\n    d = opUnion(d, sdSegment(p, n2, n1 + n2 + -n3) - t);\n    d = opUnion(d, sdSegment(p, n3, n1 + n3 + -n2) - t);\n    return d;\n}\n\nfloat sdSchwartz632(vec2 p, vec2 g, float m, float w, float t) {\n    // p the uv\n    // g the generator point\n    // m the mirror toggle\n    // w the wall toggle\n    // t the thickness\n    // snub case\n    if (m == 8.0) {\n        return sdSchwartz632Snub(p, t);\n    }\n    // snub case\n    else if (m == 9.0) {\n        return sdSchwartz632DualSnub(p, t);\n    }\n    p = abs(p);\n    if (p.y < 2.0 * cos30 * p.x) {\n        p = rotmat2(radians(-60.0)) * p;\n        p = abs(p);\n    }\n    float d = sdCircle(p, t); \n    // d = opUnion(d, opOnion(sdTriangle(p, v1, v2, v3), t*0.25)); \n    d = opUnion(d, sdCircle(p - g, t));\n    d = bool(mod(m, 2.0)) ? opUnion(d, sdSegment(p, g, vec2(0, g.y)) - t) : d;\n    vec2 v = v3 - v1;\n    d = bool(mod(floor(m / 2.0), 2.0)) ? opUnion(d, sdSegment(p, g, dot(g, v) / dot(v, v) * v) - t) : d;\n    d = bool(mod(floor(m / 4.0), 2.0)) ? opUnion(d, sdSegment(p, g, vec2(g.x, v2.y)) - t) : d;\n    d = bool(mod(w, 2.0)) ? opUnion(d, sdSegment(p, v1, v2) - t) : d;\n    d = bool(mod(floor(w / 2.0), 2.0)) ? opUnion(d, sdSegment(p, v1, v3) - t) : d;\n    d = bool(mod(floor(w / 4.0), 2.0)) ? opUnion(d, sdSegment(p, v2, v3) - t) : d;\n    return d;\n}\n\nfloat sdSchwartz632Plane(vec2 p, vec2 g, float m, float w, float t) {\n    // p the uv\n    // g the generator point\n    // m the mirror toggle\n    // w the wall toggle\n    // t the thickness\n    vec2 v = vec2(3.0, 2.0 * cos30);\n    vec2 p1 = opRep(p, v);\n    vec2 p2 = opRep(p + v / 2.0, v);\n    return opUnion(\n        sdSchwartz632(p1, g, m, w, t),\n        sdSchwartz632(p2, g, m, w, t)\n    );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{   \n    // Caspar-Klug\n    float r = cos30;\n    float R = r / cos30;\n    float h = mod(round((iTime + 3.0 / 2.0) / 2.0), 3.0) + 1.0;\n    float k = mod(round((iTime + 6.0 + 3.0 / 2.0) / 3.0), 3.0);\n    vec2 i = vec2(1.5 * R, 1.0 * r);\n    vec2 j = vec2(0.0 * R, 2.0 * r);\n    mat2 b = mat2(i, j);\n    vec2 t1 = vec2(0);\n    vec2 t2 = b * vec2(h, k);\n    vec2 t3 = rotmat2(radians(-60.0)) * t2;\n    \n    // Wythoff\n    float a1 = 0.5 + sin(0.25 * iTime) / 2.0;\n    float a2 = 0.5 + cos(2.00 * iTime) / 2.0;\n    // pick point within fundamental triangle\n    // https://mathworld.wolfram.com/TrianglePointPicking.html\n    // http://extremelearning.com.au/evenly-distributing-points-in-a-triangle/\n    vec2 g = (((a1 + a2) < 1.0) ? (a1 * v3 + a2 * v2) : ((1.0 - a1) * v3 + (1.0 - a2) * v2));\n    float mirrors = mod(round((iTime - 2.0 / 2.0) / 2.0), 10.0);\n    float walls = 0.0;\n    \n    // style\n    float t = 0.075;\n\n    // transform\n    // facet altitude\n    float a = sqrt(3.0) / 2.0 * distance(t1, t2);\n\tvec2 p = fragCoord / iResolution.y;\n    p *= a;\n    p = rotmat2(-atan(t2.y, t2.x)) * p;\n\n    // distance\n    vec2 v = vec2(3.0 * R, 2.0 * r);\n    vec2 p1 = opRep(p, v);\n    vec2 p2 = opRep(p + v / 2.0, v);\n    float d = opUnion(\n        sdSchwartz632(p1, g, mirrors, walls, t),\n        sdSchwartz632(p2, g, mirrors, walls, t)\n    );\n    // d = opUnion(d, opOnion(sdTriangle(p, t1, t2, t3), t));\n    \n    vec3 col = vec3(1);\n    col = (d > 0.0) ? col : 0.5 + 0.5 * cos(iTime + p.xyx + vec3(0, 2, 4));\n    col *= t - exp(-1.0 * abs(d));\n    col *= t + cos(150.0 * d);\n    col = mix(col, vec3(0.5), 1.0 - smoothstep(0.0, t, abs(d)));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}