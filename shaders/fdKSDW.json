{
    "Shader": {
        "info": {
            "date": "1634654611",
            "description": "aaotato",
            "flags": 32,
            "hasliked": 0,
            "id": "fdKSDW",
            "likes": 33,
            "name": "Day  670",
            "published": 3,
            "tags": [
                "monochrome",
                "design",
                "poster",
                "mdtmjvm"
            ],
            "usePreview": 1,
            "username": "jeyko",
            "viewed": 642
        },
        "renderpass": [
            {
                "code": "// Fork of \"Day 670\" by jeyko. https://shadertoy.com/view/7dGSWW\n// 2021-10-19 14:31:23\n\n// Fork of \"Day 539\" by jeyko. https://shadertoy.com/view/slSGz1\n// 2021-06-11 08:12:26\n\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define pmod(p,a) mod(p,a) - 0.5*a\n\n\n// cyclic noise by nimitz. i have a tutorial on it on shadertoy\n\nfloat noise(vec3 p_){\n    float n = 0.;\n    float amp = 1.;\n    vec4 p = vec4(p_,11.);\n    p.xy *= rot(1.4);\n    p.x *= 3.;\n    for(float i = 0.; i < 3.; i++){\n        p.yz *= rot(.5);\n        p.xz *= rot(2.5 + i);\n        p.wy *= rot(2.5-i);\n        p += cos(p*1. + vec4(3,2,1,1.) )*amp*.5;\n        n += dot(sin(p),cos(p))*amp;\n    \n        amp *= 0.7;\n        p *= 1.5;\n    }\n    \n    n = sin(n*2.);\n    return n;\n}\n\nvec3 get(vec2 fc, vec2 uv){\n    vec2 coord = fc/iResolution.xy;\n    float chrabamt = 0.*smoothstep(0.,1.,dot(uv,uv));\n    vec3 c = vec3(\n        texture(iChannel0,coord+ chrabamt*vec2(0.000,0.00)).x,\n        texture(iChannel0,coord + chrabamt*vec2(-0.0003,0.00)).y,\n        texture(iChannel0,coord + chrabamt*vec2(0.,0.001)).z\n        );\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    //fragCoord += 150.*noise(vec3(uv*2.5,5.))/iResolution.xy;\n    col = get(fragCoord,uv);\n    \n    float no = noise(vec3(uv*2.,35.));\n    //col = mix(col,vec3(0),smoothstep(0.,0.5,max(noise(vec3(uv*2.2 + 0.1,35.)) - 0.5,0.))*0.4);\n    \n    col = mix(col,vec3(1),smoothstep(0.,5.,max(no - 0.5,0.))*.05);\n    \n    //col += min(no - 0.5,0.)*0.02;\n    \n    float n1d = texelFetch(iChannel2,ivec2(mod(fragCoord + vec2(float(iFrame)*0.,0.),256.)),0).x*0.5;\n    vec3 n  = texelFetch(iChannel2,ivec2(mod(fragCoord + n1d*200. ,256.)),0).xyz*0.6;\n    \n    \n    //C = smoothstep(0.,1.,C);z\n    \n    //col.xyz = pow(max(col.xyz,0.), vec3(0.55) + n*0.1);\n    \n    \n    \n    col = pow(clamp(col,0.,1.),vec3(0.6545));\n\n    col.xyz += smoothstep(1.,0.,length(col))*n*0.2;\n    \n    col.xyz -= smoothstep(0.,1.,length(col))*n*0.1;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define iTime (iTime + 56.)\n\n\n// from iq\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n// from iq\nvec2 boxIntersection( in vec3 ro, in vec3 rd, vec3 boxSize, out vec3 outNormal ) \n{\n    vec3 m = 1./rd; // can precompute if traversing a set of aligned boxes\n    vec3 n = m*ro;   // can precompute if traversing a set of aligned boxes\n    vec3 k = abs(m)*boxSize;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.0) return vec2(-1.); // no intersection\n    outNormal = -sign(rd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n    return vec2( tN, tF );\n}\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\nfloat sdSegmentPersp( in vec2 p, in vec3 _a, in vec3 _b )\n{\n    float amt = 1.;\n    vec2 a = _a.xy/_a.z*amt;\n    vec2 b = _b.xy/_b.z*amt;\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n#define xord(a,b,c) min(max(a,-(b) + c),max(b,-(a)))\n    #define xor(a,b) float(int(a)^int(b))\n    #define and(a,b) float(int(a)&int(b))\n    #define or(a,b) float(int(a)|int(b))\n    #define pi acos(-1.)\n    #define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n    #define pal(a,b,c,d,e) (a + (b)*sin((c)*(d) + (e)))\n#define pmod(p,a) mod(p,a) - 0.5*a\n\n\n// dave hoskins hash\nvec4 r14(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    uv *= 1.+smoothstep(1.,0.,dot(uv,uv))*0.05;\n    vec3 col = vec3(1);\n    float pxSz = fwidth(uv.y);\n    \n    float seg = 1.;\n    \n    \n    \n    // ----- 2d stuf ----- //\n    {\n        float range = 4.;\n        float a = 0.;\n        float b = 1.;\n        float fact = smoothstep(0.,0.1,fract(iTime/range));\n        float id = floor(iTime/range);\n        float bs;\n        if(mod(id,2.) == 0.){\n            bs = mix(a,b,fact);\n        }else {\n            bs = mix(b,a,fact);\n        }\n        \n        vec2 smallsz = vec2(0.4,0.42)*1.;\n        if(mod(id-1.,4.) < 2.){\n            smallsz *= 0.5;\n        }\n        \n        \n        vec2 s = mix(smallsz,vec2(2),bs);\n        float d = sdBox( uv, s );\n        col = mix(col,1.-col,smoothstep(pxSz,0.,-d));\n        \n        /*\n        float cnt = 20.;\n        for(float i = 0.; i < cnt; i++){\n            \n            vec4 r = r14(i);\n            vec2 bpos = r.xy*2. - 1.;\n            bpos.x*=0.5;\n            bpos.x += sign(bpos.x)*float(abs(bpos.x) < 0.5)*0.5;\n            bpos.y = mod(bpos.y + iTime*abs(sin(i))*0.2  + sin(i*4. + iTime)*0.1 + i,1.)*3.-1.;\n\n            vec2 p = uv - bpos;\n            vec3 c = pal(vec3(0.5,0.8,0.7),vec3(1,0.6,1),vec3(3,2,1),1.*sin(i),floor(p.y*20.)  + iTime);\n            c = pow((c),vec3(.1,.8,0.9));\n            //c = 1.-c;\n            \n            float d = sdBox(p,vec2(0.02,0.1));\n            col = mix(col,c,smoothstep(pxSz,0.,d-0.0003));\n            \n        }\n        */\n        // lines\n        {\n        vec2 p = uv;\n        float liters = 52.;\n        for(float i = 0.; i < liters; i++){\n            float T = iTime*0.4;\n            float lt = (T*(1. + sin(i) ) + sin(T + i*20.)*0.5)*0.1;\n            vec2 bpos = + vec2(mod(\n                lt\n                ,1.)*3. - 1.5,cos(i*16.)*0.5);\n            \n            bpos.y += sign(bpos.y)*float(abs(bpos.y) < 0.5)*0.5;\n            \n            vec2 p = uv.yx + bpos;\n\n            p *= rot(0.5*pi);\n            float d = sdBox(p,vec2(0.01,0.1 + sin(i*20. + iTime + sin(i+iTime)))*0.4);\n            \n            p *= rot(0.5*pi);\n            float md = 0.04;\n            float id = floor(p.x/md + iTime*4.);\n            p.x = pmod(p.x,md);\n            \n            d = max(d,abs(p.x) - 0.03*abs(sin(id*4. + i)) + 0.01);\n            //col = mix(col,vec3(0.,0.6,0.5)-col*1.,smoothstep(pxSz,0.,d));\n            col = mix(col,vec3(1.)-col*1.,smoothstep(pxSz,0.,d));\n        \n        }  \n        }\n        {\n            vec2 p = uv;\n            float liters = 42.;\n            for(float i = 0.; i < liters; i++){\n\n                float lt = (iTime*(1. + sin(i) ) + sin(iTime + i*210.)*0.5)*0.1;\n                vec2 p = uv + vec2(mod(\n                    lt\n                    ,1.)*3. - 1.5,cos(i*16.)*0.7);\n                float d = length(p) - 0.2;\n\n                p = pmod(p,0.015);\n                d = max(d,length(p) - 0.000);\n                //col = mix(col,vec3(0.,0.6,0.5)-col*1.,smoothstep(pxSz,0.,d));\n\n            }    \n        }\n\n    }\n    \n    float deye = 10e5;\n    {\n        vec2 p = uv;\n        float liters = 125.*float(seg==0.) + 40.*float(seg==1.) ;\n        for(float i = 0.; i < liters; i++){\n        \n            float lt = (iTime*(1. + sin(i) ) + sin(iTime + i*20.)*0.5)*0.1;\n            vec2 p = -uv.yx + vec2(mod(\n                lt\n                ,1.)*3. - 1.5,cos(i*16.)*0.5);\n            p = p.yx;\n            \n            float d = sdBox(p,vec2(0.05,0.2));\n            \n            deye = min(deye,d);\n            //deye = min(deye,sdBox(uv + vec2(0.1,0.2),vec2(0.2)));\n\n\n            col = mix(col,vec3(0),smoothstep(pxSz,0.,abs(d) - 0.002));\n\n        }\n    }\n    {\n        float circ = length(uv);\n        \n        \n    }\n    \n    \n    \n    // ----- 3d stuf ----- //\n    float boxCnt = 52.;\n    vec3 ro = vec3(0,0.,-0);\n    vec3 rd = normalize(vec3(uv,1.));\n    rd += 0.001;\n    for(float i = 0.; i < boxCnt; i++){\n        \n        vec3 n = vec3(0);\n        vec4 r = r14(i);\n        vec4 rb = r14(i+13.);\n        \n        vec3 sz = vec3(0.1,0.2,0.1) ;\n        \n        vec3 bpos = r.xyz*2. - 1.;\n        bpos.z += 2.;\n        bpos.x*=0.8;\n        bpos.y = mod(bpos.y + iTime*abs(sin(i))*0.3  + sin(i*4. + iTime)*0.04 + i,1.)*4.-2.;\n        vec2 b = boxIntersection( ro-bpos, rd, sz,  n);\n        sz -= 0.005 + (sin(iTime+i)*2.+1.)*.0;\n        if(b.x > 0. && b.y > 0.  ) {\n            col = mix(\n                col,\n                0.3*abs(dot(col,col))-col,\n                smoothstep(pxSz,0.,deye)\n            );\n         \n            vec3 vertxyz = bpos + sz;\n            vec3 vertnxnynz = bpos - sz;\n            vec3 vertnxyz = bpos + vec3(-sz.x,sz.y,sz.z);\n            vec3 vertxnyz = bpos + vec3(sz.x,-sz.y,sz.z);\n            vec3 vertxynz = bpos + vec3(sz.x,sz.y,-sz.z);\n            vec3 vertnxynz = bpos + vec3(-sz.x,sz.y,-sz.z);\n            vec3 vertnxnyz = bpos + vec3(-sz.x,-sz.y,sz.z);\n            vec3 vertxnynz = bpos + vec3(sz.x,-sz.y,-sz.z);\n            float d = 10e5;\n            d = min(d,sdSegmentPersp( uv.xy, vertxyz, vertxnyz ));\n            d = min(d,sdSegmentPersp( uv.xy, vertxyz, vertnxyz ));\n            d = min(d,sdSegmentPersp( uv.xy, vertxyz, vertxynz ));\n            \n            d = min(d,sdSegmentPersp( uv.xy, vertnxnynz, vertnxnyz ));\n            d = min(d,sdSegmentPersp( uv.xy, vertnxnynz, vertxnynz ));\n            d = min(d,sdSegmentPersp( uv.xy, vertnxnynz, vertnxynz ));\n            \n            d = min(d,sdSegmentPersp( uv.xy, vertnxynz, vertnxyz ));\n            d = min(d,sdSegmentPersp( uv.xy, vertnxynz, vertxynz ));\n            \n            d = min(d,sdSegmentPersp( uv.xy, vertnxnyz, vertnxyz ));\n            d = min(d,sdSegmentPersp( uv.xy, vertnxnyz, vertxnyz ));\n            \n            d = min(d,sdSegmentPersp( uv.xy, vertxnynz, vertxynz ));\n            d = min(d,sdSegmentPersp( uv.xy, vertxnynz, vertxnyz ));\n            \n            //col = mix(col,1.-col,smoothstep(fwidth(abs(d)),0.,d - 0.0004));\n            col = mix(col,vec3(1),smoothstep(pxSz,0.,d-0.001));\n            \n            \n        }\n    }\n            \n    if(iMouse.z > 0.)\n        col = 1. - col;\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}