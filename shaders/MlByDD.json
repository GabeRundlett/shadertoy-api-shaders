{
    "Shader": {
        "info": {
            "date": "1508604318",
            "description": "droids jumping over a rope. the droids was my brother's idea.",
            "flags": 0,
            "hasliked": 0,
            "id": "MlByDD",
            "likes": 6,
            "name": "jumping droids",
            "published": 3,
            "tags": [
                "3d",
                "jump",
                "droid",
                "andriod",
                "sport"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 711
        },
        "renderpass": [
            {
                "code": "#define rotnor(norm) mat2(norm.xy, vec2(-norm.y,norm.x))\n#define rotang(spin) mat2(cos(spin),sin(spin),-sin(spin),cos(spin))\n#define pi acos(-1.0)\n#define chains 3.0\n#define pi acos(-1.0)\n\n#define gammacorrect\n\n//smoothmin function https://www.shadertoy.com/view/Ml3Gz8\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\n//hash function by Dave_Hoskins https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE3 vec3(.131, .130, .1973)\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * HASHSCALE3);\n   p3 += dot(p3, p3.yzx+19.19);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\nfloat hash11(float p)\n{\n   float p3 = fract(p * HASHSCALE3.x);\n   p3 += 3.0*p3*(p3+19.19);\n   return fract(2.0*p3*p3); \n}\n\nfloat torus(vec3 p, float r, vec2 l) {\n    \n    return length(vec2(length(max(abs(p.xy)-l,vec2(0)))-r,p.z));\n}\n\nfloat cube(vec3 p, vec3 s) {\n    return length(max(abs(p)-s,vec3(0)));\n}\n\nfloat jumpdroid(vec3 p, float time) {\n    \n    p.y -= 2.5+sin(mod(clamp(time,0.0,1.0)*pi,pi))*3.0;\n    //body\n    float len = cube(p, vec3(0,0.75,0))-1.0;\n    \n    //head\n    len = max(len, max(0.1-abs(p.y-0.75),0.0));\n    vec3 p2 = p-vec3(0,1,0);\n    p2.x = abs(p2.x);\n    p2.xy *= rotang(2.5);\n    p2.y += 1.0;\n    len = min(len, cube(p2,vec3(0,0.2,0))-0.1);\n    \n    //eyes\n    p2 = abs(p-vec3(0,1.15,0))-vec3(0.4,0,0);\n    len = max(len, -length(p2.xy)+0.1);\n    \n    //legs\n    p2 = abs(p-vec3(0,-1.75,0))-vec3(0.5,0,0);\n    len = min(len,cube(p2,vec3(0,0.5,0))-0.25);\n    \n    //arms\n    p2 = p-vec3(0,0.5,0);\n    p2.x = abs(p2.x)-1.4;\n    p2.yz *= rotang(pi*abs(mod(clamp(time*2.0+.5,0.0,2.0)+1.0,2.0)-1.0));\n    p2.y += 0.5;\n    len = min(len,cube(p2,vec3(0,0.5,0))-0.25);\n    return len;\n}\n\nfloat ropedroid(vec3 p, float time) {\n    \n    p.x = abs(p.x)-17.0;\n    p.y -= 2.5;\n    //body\n    float len = cube(p, vec3(0,0.75,0))-1.0;\n    \n    //head\n    len = max(len, max(0.1-abs(p.y-0.75),0.0));\n    vec3 p2 = p-vec3(0,1,0);\n    p2.x = abs(p2.x);\n    p2.xy *= rotang(2.5);\n    p2.y += 1.0;\n    len = min(len, cube(p2,vec3(0,0.2,0))-0.1);\n    \n    //eyes\n    p2 = abs(p-vec3(0,1.15,0))-vec3(0.4,0,0);\n    len = max(len, -length(p2.xy)+0.1);\n    \n    //legs\n    p2 = abs(p-vec3(0,-1.75,0))-vec3(0.5,0,0);\n    len = min(len,cube(p2,vec3(0,0.5,0))-0.25);\n    \n    //arms\n    p2 = p-vec3(1.4,0,0);\n    len = min(len,cube(p2,vec3(0,0.5,0))-0.25);\n    p2 = p-vec3(-1.4,0.4,0);\n    p2.yz *= rotang(time*pi);\n    p2.xy *= rotang(0.5);\n    p2.x += 0.5;\n    len = min(len,cube(p2,vec3(0.5,0.0,0))-0.25);\n    return len;\n}\n\nfloat rope(vec3 p, float time) {\n    p.y -= 2.9;\n    \n    vec2 dir = vec2(cos(time*pi),sin(time*pi));\n    \n    ///the rope shape (too lazy to find out what 15*15 is)\n    float force = (1.0-p.x*p.x/225.0)*5.0;\n    \n    vec2 p2 = dir*(0.4+force);\n    \n    //prevents rope from going in the floor\n    float ground = smin(-p2.x+2.8,0.0,1.0);\n    p2.x += ground;\n    \n    //makes the rope \"drag along the ground\"\n    p2.y -= ground*0.5;\n    \n    return max(length(p.yz+p2)-0.1,abs(p.x)-14.5);\n}\n\nvec2 map(vec3 p) {\n    vec2 len = vec2(1e10,0);\n    \n    vec3 p2 = p + vec3(2,0,0);\n    float person = clamp(floor(p2.x*0.25),-2.0,2.0);\n    p2.x = p2.x - person*4.0-2.0;\n    float time = mod(iTime+hash11(person+floor(iTime*0.5))*0.2,2.0)-1.0;\n    len.x = jumpdroid(p2,time)*0.8;\n    len.y = 4.0;\n    \n    float len2 = ropedroid(p,-iTime-0.55);\n    if (len2 < len.x) {\n        len.x = len2;\n        len.y = 4.0;\n    }\n    \n    len2 = rope(p,-iTime-0.55)*0.7;\n    if (len2 < len.x) {\n        len.x = len2;\n        len.y = 4.2;\n    }\n    return len;\n}\n\nvec3 normal(vec3 p, float len) {\n    vec2 eps = vec2(0.001,0.0);\n    \n    return normalize(vec3(\n        len-map(p-eps.xyy).x,\n        len-map(p-eps.yxy).x,\n        len-map(p-eps.yyx).x));\n}\n\n//shading\nvec4 shade(vec3 p, vec3 d, vec3 objnorm, float depth, float material) {\n    vec3 sun = normalize(vec3(1,1,-1));\n    vec3 reflectnorm = reflect(d,objnorm);\n    vec3 color = hash31(material)+0.1;\n    vec4 fragColor = vec4(color*max(0.4,dot(objnorm,sun)),1.0);\n    fragColor = max(fragColor,(dot(reflectnorm,sun)-0.95)*20.0);\n    //fragColor = mix(background,fragColor,clamp(3.0-depth*0.05,0.0,1.0));\n    return clamp(fragColor,0.0,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 cam = vec3(0,3,-14);\n    vec3 ro = cam;\n    vec3 rd = normalize(vec3(uv,1));\n    float dist = 0.0;\n    \n    bool hit = false;\n    vec2 len;\n    for (int i = 0; i < 100; i++) {\n        len = map(ro);\n        \n        if (len.x < 0.01 || dist > 30.0) {\n            hit = len.x < 0.01;\n            break;\n        }\n        \n        dist += len.x;\n        ro += rd*len.x;\n    }\n    if (hit) {\n\t\tfragColor = shade(ro,rd, normal(ro, len.x), dist, len.y);\n    } else {\n        //ray-plane intersection if the raymarching ray doesen't hit\n        float len = (-cam.y/min(rd.y,-0.00001));\n        ro = cam+rd*len;\n        if (len < 1000.0) {//cheap distance field shadowing and texture\n        \tfragColor = texture(iChannel0,ro.xz*0.2)*min(map(ro).x,1.0);\n            return;\n    \t} else {//background if ray-plane intersection doesn't hit\n        \tfragColor = abs(vec4(uv,sin(iTime)*0.5+0.5,1.0))*0.2;\n        }\n    }\n    #ifdef gammacorrect\n    fragColor = sqrt(fragColor);\n    #endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 1,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}