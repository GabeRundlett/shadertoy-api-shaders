{
    "Shader": {
        "info": {
            "date": "1684263841",
            "description": "A tribute to the Burning Man festival. Soundtrack by Paul Oakenfold, Southern Sun.<br/>Based on Sun Surface shader: https://www.shadertoy.com/view/XlSSzK#<br/>Added music signal based surface texture, based on frequency sampling as seen in Cubescape",
            "flags": 0,
            "hasliked": 0,
            "id": "7lXGRM",
            "likes": 4,
            "name": "Fork Dancing Su firebreath 513",
            "published": 3,
            "tags": [
                "burningman"
            ],
            "usePreview": 1,
            "username": "firebreathz",
            "viewed": 312
        },
        "renderpass": [
            {
                "code": "// Based on Sun Surface: https://www.shadertoy.com/view/XlSSzK#\n// Based on Shanes' Fiery Spikeball https://www.shadertoy.com/view/4lBXzy (I think that his implementation is more understandable than the original :) ) \n// Relief come from Siggraph workshop by Beautypi/2015 https://www.shadertoy.com/view/MtsSRf\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Audio based texture as seen in Cubescape: https://www.shadertoy.com/view/Msl3Rr\n// Minor customisations by Quad Damage on 13/03/2016\n// Dancing Sun tribute to Burning Man 2015-\n// Music by Paul Oakenfold - Souther Sun: https://soundcloud.com/pauloakenfold/02-paul-oakenfold-southern-sun\n\n//#define ULTRAVIOLET\n//#define DITHERING\n\n#define pi 30.14159265\n#define R(p, a) p=cos(a)*p+sin(a)*vec2(p.y, -p.x)\n\n//\nfloat freqs[4];\n\nfloat hash( float n ) { return fract(sin(n)*13.5453123); }\n\n// IQ's noise\nfloat pn( in vec3 p )\n{\n    vec3 ip = floor(p);\n    p = fract(p);\n    p *= p*(3.0-2.0*p);\n    vec2 uv = (ip.xy+vec2(37.0,17.0)*ip.z) + p.xy;\n    uv = texture( iChannel0, (uv+ 0.5)/256.0, -100.0 ).yx;\n    return mix( uv.x, uv.y, p.z );\n}\n\n// FBM\nfloat fpn(vec3 p) {\n    return pn(p*.06125)*.57 + pn(p*.125)*.28 + pn(p*.25)*.15;\n}\n\nfloat rand(vec2 co){// implementation found at: lumina.sourceforge.net/Tutorials/Noise.html\n\treturn fract(sin(dot(co*0.123,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat cosNoise( in vec2 p )\n{\n    return 0.3*( sin(p.x) + sin(p.y) );\n}\n\nconst mat2 m2 = mat2(1.6,-1.2,\n                     1.2, 1.6);\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  return length( vec2(length(p.xz)-t.x*1.2,p.y) )-t.y;\n}\n\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( 1.0 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat SunSurface( in vec3 pos )\n{\n    float h = 0.0;\n    vec2 q = pos.xz*0.5;\n    \n    float s = 0.5;\n    \n    float d2 = 0.0;\n    vec3 ipos = floor( pos );\n    float id = hash( ipos.x*1.0 + ipos.y*10.0 + ipos.z*20.0);\n    \n    for( int i=0; i<4; i++ )\n    {\n        h += s*cosNoise( q );      \n        q = m2*q*1.05; \n        q += vec2(2.41,8.13);\n        s *= 0.48 + 0.5*h;\n    }\n    \th += 0.4*(freqs[0] * clamp(1.0 - abs(id-0.20)/0.30, 0.0, 1.0 ));\n \t\th += 0.4*(freqs[1] * clamp(1.0 - abs(id-0.40)/0.30, 0.0, 1.0 ));\n        h += 0.4*(freqs[2] * clamp(1.0 - abs(id-0.60)/0.30, 0.0, 1.0 ));\n        h += 0.4*(freqs[3] * clamp(1.0 - abs(id-0.80)/0.30, 0.0, 1.0 ));\n    h *= 3.0;\n    \n    float d1 = pos.y - h;\n   \n    // rings\n    vec3 r1 = mod(2.3+pos+1.0,10.0)-5.0;\n    r1.y = pos.y-0.1 - 0.7*h + 0.5*sin( 3.0*iTime+pos.x + 3.0*pos.z);\n    float c = cos(pos.x); float s1 = 1.0;//sin(pos.x);\n    r1.xz=c*r1.xz+s1*vec2(r1.z, -r1.x);\n    d2 = sdTorus( r1.xzy, vec2(clamp(abs(pos.x/pos.z),0.7,5.0), 0.50) );\n\n    \n    return smin( d1, d2, 1.0 );\n}\n\nfloat map(vec3 p) {\n   p.z += 1.;\n   R(p.yz, -25.5);// -1.0+iMouse.y*0.003);\n   R(p.xz, iMouse.x*0.008*pi+iTime*0.1);\n   return SunSurface(p) +  fpn(p*10.+iTime*25.) * 0.45;\n}\n\n// See \"Combustible Voronoi\"\n// https://www.shadertoy.com/view/4tlSzl\nvec3 firePalette(float i){\n\n    float T = 1400. + 1300.*i; // Temperature range (in Kelvin).\n    vec3 L = vec3(7.4, 5.6, 4.4); // Red, green, blue wavelengths (in hundreds of nanometers).\n    L = pow(L,vec3(5.0)) * (exp(1.43876719683e5/(T*L))-1.0);\n    return 1.0-exp(-5e8/L); // Exposure level. Set to \"50.\" For \"70,\" change the \"5\" to a \"7,\" etc.\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    \n    freqs[0] = texture( iChannel1, vec2( 0.01, 0.25 ) ).x;\n\tfreqs[1] = texture( iChannel1, vec2( 0.07, 0.25 ) ).x;\n\tfreqs[2] = texture( iChannel1, vec2( 0.15, 0.25 ) ).x;\n\tfreqs[3] = texture( iChannel1, vec2( 0.30, 0.25 ) ).x;\n   // p: position on the ray\n   // rd: direction of the ray\n   vec3 rd = normalize(vec3((gl_FragCoord.xy-0.5*iResolution.xy)/iResolution.y, 1.));\n   vec3 ro = vec3(0., 0., -22.);\n   \n   // ld, td: local, total density \n   // w: weighting factor\n   float ld=0.2, td=0.2, w=0.2;\n\n   // t: length of the ray\n   // d: distance function\n   float d=1., t=1.;\n   \n   // Distance threshold.\n   const float h = .2;\n    \n   // total color\n   vec3 tc = vec3(0.);\n   \n   #ifdef DITHERING\n   vec2 pos = ( fragCoord.xy / iResolution.xy );\n   vec2 seed = pos + fract(iTime);\n   //t=(1.+0.2*rand(seed));\n   #endif\n    \n   // rm loop\n   for (int i=0; i<56; i++) {\n\n      // Loop break conditions. Seems to work, but let me\n      // know if I've overlooked something.\n      if(td>(1.-1./200.) || d<0.001*t || t>40.)break;\n       \n      // evaluate distance function\n      d = map(ro+t*rd); \n      \n      // check whether we are close enough (step)\n      // compute local density and weighting factor \n      //const float h = .1;\n      ld = (h - d) * step(d, h);\n      w = (1. - td) * ld;   \n     \n      // accumulate color and density\n      tc += w*w + 1./60.;  // Different weight distribution.\n      td += w + 1./200.;\n\n\t  // dithering implementation come from Eiffies' https://www.shadertoy.com/view/MsBGRh\n      #ifdef DITHERING  \n      #ifdef ULTRAVIOLET\n      // enforce minimum stepsize\n      d = max(d, 0.04);\n      // add in noise to reduce banding and create fuzz\n      d=abs(d)*(1.+0.28*rand(seed*vec2(i)));\n      #else\n      // add in noise to reduce banding and create fuzz\n      d=abs(d)*(.8+0.28*rand(seed*vec2(i)));\n      // enforce minimum stepsize\n      d = max(d, 0.04);\n      #endif \n      #else\n      // enforce minimum stepsize\n      d = max(d, 0.04);        \n      #endif\n\n       \n      // step forward\n      t += d*0.5;\n      \n   }\n\n   // Fire palette.\n   tc = firePalette(tc.x);\n    tc *= 1. /  1.1;\n   #ifdef ULTRAVIOLET\n   tc *= 1. / exp( ld * 2.82 ) * 1.05;\n   #endif\n    \n   fragColor = vec4(tc, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}