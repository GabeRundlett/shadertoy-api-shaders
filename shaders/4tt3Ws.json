{
    "Shader": {
        "info": {
            "date": "1472474995",
            "description": "Sierpinski Gasket exercise.",
            "flags": 0,
            "hasliked": 0,
            "id": "4tt3Ws",
            "likes": 4,
            "name": "Sierpinski Gasket Exercise",
            "published": 3,
            "tags": [
                "spotlight",
                "sierpinski",
                "gasket"
            ],
            "usePreview": 0,
            "username": "docwhite",
            "viewed": 631
        },
        "renderpass": [
            {
                "code": "const float Detail = 0.0035;\n\nfloat sdPlane(vec3 p) {\n\treturn p.y + 0.5;\n}\n\nfloat sdSierpinski(vec3 z)\n{\n     const int iterations = 8;\n     const float scale = 2.0;\n     vec3 a1 = vec3(0.0,   1.0,  0.0);\n     vec3 a2 = vec3(0.0,  -0.5,  1.5470);\n     vec3 a3 = vec3(1.0,  -0.5, -0.57735);\n     vec3 a4 = vec3(-1.0, -0.5, -0.57735);\n     vec3 c;\n     float dist, d;\n     int i = 0;\n     for(int n=0; n < iterations; n++) {\n          c = a1; dist = length(z-a1);\n          d = length(z-a2); if (d < dist) { c = a2; dist=d; }\n          d = length(z-a3); if (d < dist) { c = a3; dist=d; }\n          d = length(z-a4); if (d < dist) { c = a4; dist=d; }\n          z = scale * z - c * (scale-1.0);\n          i++;\n     }\n\n     return (length(z)-2.0) * pow(scale, float(-i));\n}\n\nfloat map(vec3 p) {\n    float plane = sdPlane(p);\n    float sierpinski = sdSierpinski(p);   \n    return min(sierpinski, plane);\n}\n\nvec3 normal(vec3 p) {\n\tvec2 e = vec2(0.0, Detail);\n    return -normalize(vec3(\n        map(p-e.yxx)-map(p+e.yxx),\n        map(p-e.xyx)-map(p+e.xyx),\n        map(p-e.xxy)-map(p+e.xxy)\n    ));\n}\n\nfloat softShadow(in vec3 ro, in vec3 rd, float mint, float k) {\n    float res = 1.0;\n    float t = mint;\n    for(int i = 0; i < 16; i++) {\n    \tfloat h = map(ro + rd * t);\n        if (h < 0.001) { return 0.0; }\n        res = min(res, k*h/t);\n       \tt += h;\n    }\n    return res;\n}\n\nfloat spotLight(vec3 p, vec3 n) {\n    vec3 sDir = normalize(vec3(0.0, -1.0, 2.0));\n    vec3 sPos = vec3(0.0, 1.0, -2.0);\n    float co = 40.0;\n    float coDel = 45.0;\n\tvec3 lray = normalize(sPos - p);\n    float fall = clamp((dot(lray, -sDir) - cos(radians(coDel))) / (cos(radians(co)) - cos(radians(coDel))), 0.0, 1.0);\n    float diff = max(0.0, dot(lray, n));\n    float sh = softShadow(p, lray, 0.01, 32.0);\n    return diff * fall * sh;\n}\n\nfloat light(vec3 p, vec3 dir) {\n    vec3 n = normal(p);\n    float spot1 = spotLight(p, n);\n    float ambient1 = 0.2;\n    float total = clamp(spot1 + ambient1, 0.0, 1.0);\n    return total;\n}\n\nfloat trace(vec3 ro, vec3 rd) {\n\tfloat t = 0.0;\n    float d = 1.0;\n    vec3 p;\n    for (int i = 0; i < 128; ++i) {\n        if (d > Detail && t < 50.0) {\n            p = ro + rd * t;\n            d = map(p);\n            t += d;\n        }\n    }\n    float bg = 0.0;\n    float col;\n    if (d < Detail) {\n    \tcol = light(p-Detail*rd, rd);\n    } else {\n        col = bg;    \n    }\n    return col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta)\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = normalize(vec3(0.0, 1.0, 0.0));\n\tvec3 cu = normalize( cross(cw,-cp) );\n\tvec3 cv = normalize( cross(cu,-cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{        \n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.y *= iResolution.y / iResolution.x;\n    \n\tvec3 ro = vec3(5.4*sin(iTime * 0.1),1.4, 5.4*cos(iTime * 0.1));\n\tvec3 ta = vec3(0.0);\n    mat3 ca = setCamera(ro, ta);\n    vec3 rd = ca * normalize(vec3(uv.xy, 3.0));\n    \n    float t = trace(ro, rd);\n    fragColor = vec4(t, t, t, 1.0);\t\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}