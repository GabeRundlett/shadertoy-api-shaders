{
    "Shader": {
        "info": {
            "date": "1490479911",
            "description": "Headache Experiment 5",
            "flags": 0,
            "hasliked": 0,
            "id": "4dScRR",
            "likes": 9,
            "name": "Headache Experiment 5",
            "published": 3,
            "tags": [
                "experiment",
                "headache",
                "5"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 623
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2017 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\nmat3 RotZ(float a){return mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.);}\t// get rotation matrix near z\n\nvec2 df(vec3 p)\n{\n    p.xy -= sin(p.z*0.02)*5.;\n   \tfloat a = 0.72 * atan(p.x,p.y) * cos(p.z*0.025) * 2.;\n    p.xy *= mat2(cos(a),-sin(a),sin(a),cos(a));\n\tp = mod(p,6.)-3.;\n    float cyl = min(max(abs(p.x),abs(p.y)),length(p.yz));\n\treturn vec2(cyl-0.4, 0);\n}\n\nvec3 nor( vec3 p, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n\t\tdf(p+e.xyy).x - df(p-e.xyy).x,\n\t\tdf(p+e.yxy).x - df(p-e.yxy).x,\n\t\tdf(p+e.yyx).x - df(p-e.yyx).x );\n    return normalize(n);\n}\n\n// from Dave Hoskins // https://www.shadertoy.com/view/Xsf3zX\nvec3 GetSky(in vec3 rd, in vec3 sunDir, in vec3 sunCol)\n{\n\tfloat sunAmount = max( dot( rd, sunDir), 0.0 );\n\tfloat v = pow(1.0-max(rd.y,0.0),6.);\n\tvec3  sky = mix(vec3(.1, .2, .3), vec3(.32, .32, .32), v);\n\tsky = sky + sunCol * sunAmount * sunAmount * .25;\n\tsky = sky + sunCol * min(pow(sunAmount, 800.0)*1.5, .3);\n\treturn clamp(sky, 0.0, 1.0);\n}\n\nfloat SubDensity(vec3 p, float ms) \n{\n\treturn df(p - nor(p,0.0001) * ms).x/ms;\n}\n\nvec2 shade(vec3 ro, vec3 rd, float d, vec3 lp, vec3 ldo, float li)\n{\n\tvec3 p = ro + rd * d;\n\tvec3 n = nor(p, 0.1);\n\tvec3 ldp = normalize(lp-n*1.5-p);\n\tvec3 refl = reflect(rd,n);\n\tfloat amb = 0.6;\n\tfloat diff = clamp( dot( n, ldp ), 0.0, 1.0);\n\tfloat fre = pow( clamp( 1. + dot(n,rd),0.0,1.0), 4.);\n\tfloat spe = pow(clamp( dot( refl, ldo ), 0.0, 1.0 ), 16.);\n\tfloat sss = 1. - SubDensity(p, 0.1);\n\treturn vec2(\n        (diff + fre + spe) * amb * li,\n        (diff + fre + sss) * amb * li + spe\n    );\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n\tvec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n\tfloat t = iTime * 35.;\n\n    vec3 ld = vec3(0.,1., .5);\n    \n\tvec3 ro = vec3(0,0,t);\n    ro.xy += sin(t*0.02)*5.;\n\tvec3 cu = vec3(0,1,0);\n\tvec3 tg = ro + vec3(0,0,.1);\n\t\n\tfloat fov = .5;\n\tvec3 z = normalize(tg - ro);\n\tvec3 x = normalize(cross(cu, z));\n\tvec3 y = normalize(cross(z, x));\n\tvec3 rd = normalize(z + fov * (uv.x * x + uv.y * y));\n\t\n\tfloat s = 1., d = 1.;\n\tfloat dm = 100.;\n\t\n\tfor (float i=0.; i<250.; i++)\n\t{\n\t\tif (log(d/s/1e3)>0. || d>dm) break;\n\t\td += (s = df(ro + rd * d).x) * .4;\n\t}\n\t\n    fragColor.rgb = GetSky(rd, ld, vec3(1.5));\n    \n\tif (d<dm)\n\t{\n\t\tvec2 sh = shade(ro, rd, d, ro, ld, 1.);\n\t\tfragColor.rgb = mix( \n            vec3(.5,1,.8) * sh.x * 0.1 + vec3(0.8,0.5,0.2) * sh.y * 1.2, \n            fragColor.rgb, \n            1.0 - exp( -0.001*d*d ) ); \n\t}\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}