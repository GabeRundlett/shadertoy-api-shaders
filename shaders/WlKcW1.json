{
    "Shader": {
        "info": {
            "date": "1610933550",
            "description": "Fork of https://www.shadertoy.com/view/wt3cWB.\n\nChanged it to do something else. ",
            "flags": 32,
            "hasliked": 0,
            "id": "WlKcW1",
            "likes": 6,
            "name": "Electric Flower (Variant)",
            "published": 3,
            "tags": [
                "psychedelic",
                "glow",
                "webglsamples",
                "electricflower"
            ],
            "usePreview": 0,
            "username": "darkeclipz",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "/*\nRecreation of \"Electric Flower\" by Henrik Rydgard: https://webglsamples.org/electricflower/electricflower.html\nI have no idea how he actually achieved the effect but this is what I came up with.\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Hue to RGB function from Fabrice's shadertoyunofficial blog:\n#define hue2rgb(hue) 0.6 + 0.6 * cos(6.3 * hue + vec3(0.0, 23.0, 21.0))\n\nfloat mapScene(in vec3 p) {\n\n    \n    float o1 = texture(iChannel0, vec2(.2)).x / 8.,\n          o2 = texture(iChannel0, vec2(.35)).x / 12.;\n          \n    float r = iTime * 2.0;\n    float c = cos(r + o1), s = sin(r + o1);\n    mat2 rmat1 = mat2(c, -s, s, c);\n    \n    float c2 = cos(r + o2), s2 = sin(r + o2);\n    mat2 rmat2 = mat2(c2, -s2, s2, c2);\n\n    p.yz *= rmat1;\n    p.xz *= rmat2;\n\n    float w = texture(iChannel0, vec2(.55)).x;\n    vec3 q = abs(p) - 0.5 - w/3.5;\n    float box = max(q.x, max(q.y, q.z));\n\n    box = max(box, -max(q.x, q.y) - 0.03);\n    box = max(box, -max(q.x, q.z) - 0.03);\n    box = max(box, -max(q.y, q.z) - 0.03);\n\n    return box;\n}\n\nvec3 getNormal(in vec3 p) {\n    return normalize(vec3(mapScene(p + vec3(0.001, 0.0, 0.0)) - mapScene(p - vec3(0.001, 0.0, 0.0)),\n                          mapScene(p + vec3(0.0, 0.001, 0.0)) - mapScene(p - vec3(0.0, 0.001, 0.0)),\n                          mapScene(p + vec3(0.0, 0.0, 0.001)) - mapScene(p - vec3(0.0, 0.0, 0.001))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 screenCenter = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - screenCenter) / iResolution.y;\n    \n    float w = texture(iChannel0, vec2(.6)).x;\n                \n    fragColor = texture(iChannel0, (fragCoord - screenCenter) * (0.89 + clamp(w/9., .05, .14)) / iResolution.xy + 0.5);\n\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    float t = 0.0;\n    for (int iter=0; iter < 150; iter++) {\n        vec3 p = ro + rd * t;\n        float d = mapScene(p);\n        if (d < 0.001) {\n            vec3 n = getNormal(p);\n            fragColor.rgb += hue2rgb(iTime * 0.5) * 0.5;\n            break;\n        }\n\n        if (t > 100.0) {\n            break;\n        }\n\n        t += d;\n    }\n    \n    fragColor = fragColor * 0.9;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}