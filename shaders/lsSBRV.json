{
    "Shader": {
        "info": {
            "date": "1501128007",
            "description": "Tis cellular automata is reversible, and can produce oscillators, spaceships , and indestructible structures.\nIt does also have cool properties due to its reversibility, for example when two structures collide, it can't make an oscillator, so it diverges.",
            "flags": 48,
            "hasliked": 0,
            "id": "lsSBRV",
            "likes": 4,
            "name": "Single rotation",
            "published": 3,
            "tags": [
                "2d",
                "cellularautomata",
                "revesible"
            ],
            "usePreview": 0,
            "username": "stduhpf",
            "viewed": 810
        },
        "renderpass": [
            {
                "code": "#define zoom 4.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0,uv/zoom);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define Speed 0\n\nfloat hash(vec2 p) {\n\tvec3 p3  = fract(p.xyx * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract(iDate.w+ (p3.x + p3.y) * p3.z);\n}\n\nfloat getPoint(vec2 fc)\n{   return float( texture(iChannel0,fract(fc/iResolution.xy)).a > .9 ); }\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    int speed = Speed*4+1;\n    float par = mod( float(iFrame/speed), 2.);\n    vec2 pos =  mod(U-.5+par ,2.)*2.-1.;\n       \n    float neighbohrs =  getPoint(U-vec2(0,1)*pos)\n                      + getPoint(U-          pos)\n                      + getPoint(U-vec2(1,0)*pos);\n    \n    float state = getPoint(U) *neighbohrs;\n    if(neighbohrs==1.&& state==0.)\n    {\tvec2  apos = floor( (U-.5+par) /2.) *2.,\n              pos2 = vec2(pos.y,-pos.x) *.5 + .5;\n        state = getPoint(.5+(apos+pos2-par));\n    }\n\n    O = iFrame < 1 || texture(iChannel1,vec2(.126,.1) ).r > 0. \n        ? vec4(hash(U)>.8)\n        : vec4(neighbohrs/3.,vec3(state));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}