{
    "Shader": {
        "info": {
            "date": "1725395296",
            "description": "reference: https://www.facebook.com/photo/?fbid=2931076887034011\n( and more similar: see photos )\nWIP: the attribution of face colors is way too complicated, + redundancy with mapping function A()",
            "flags": 0,
            "hasliked": 0,
            "id": "lcjBRd",
            "likes": 12,
            "name": "tri-arrows 3",
            "published": 3,
            "tags": [
                "3d",
                "spheretracing",
                "short",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 117
        },
        "renderpass": [
            {
                "code": "// color-per-face version of https://shadertoy.com/view/Mf2fzt\n// color version of https://shadertoy.com/view/MfSfzd\n\n#define rot(a)  mat2(cos(a+vec4(0,11,33,0)))               // rotation \n\n#define A(v)   b = abs( q - vec3(1,-1,1) ),                /* arrow */        \\\n               v = max( max(b.x,b.y)-.95 , b.z-3.),                           \\\n               a = abs( vec3( vec2(q.x+q.z-3.2 , q.x-q.z+1.2 )*.7 , q.y+1.)), \\\n               t = min( t, v = min( v , max( max(a.x,a.y) -2. , max( a.z-.95 , 2.1-q.z )))), \\\n               q = q.yzx\n                 \nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.,v1,v2,v3, z=1.;\n    vec3  R = iResolution, a,b,\n          D = normalize(vec3(U+U, -2.*R.y) - R ),          // ray direction\n          p = vec3(0,0,15), q,                             // marching point along ray \n          M = iMouse.z > 0. ? iMouse.xyz/R -.5 :           // comment for no mouse cam\n                 vec3( .15,.07,0) * cos(.3*iTime + vec3(0,11,0)); \n          \n    for ( O*=0.; z > 0. && t > .01; z-=.01 )               // march scene\n        q = p,\n        q.yz *= rot(-6.*M.y),                              // rotations\n        q.xz *= rot(-6.*M.x-1.57),\n        A(v1), A(v2), A(v3),                               // arrows in the 3 directions\n        p += t*D;                                          // step forward = dist to obj   \n\n\n                                                           // --- color scheme\n   int i = t==v1 ? 0 : t==v2 ? 1 : 2;                      // arrow id\n   q = vec3( q[i] , q[(i+1)%3] , q[(i+2)%3] );             // restore q,a,b\n   A(t), q=q.zxy; a = abs(a-2.);\n   b.y < .95 ?\n      abs(b.x-.95) < .01 && b.z < 3.            ? i++      // sides    abs just for face view\n    : q.z+2. < .01 || abs(q.z-2.1) < .01                   // bases    \" \" \" \n    || a.y < .01 || a.x < .01                   ? i+=2     // heads    \n    : i:i; // abs(q.y +.05) < .01 || abs(q.y +1.95) < .01  // faces\n     \n   O[i%3] = z*z*1.1;                                       \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}