{
    "Shader": {
        "info": {
            "date": "1546296001",
            "description": "I was just testing out a lame idea, but what was cool was that I made this in the process: https://www.shadertoy.com/view/WdsGD4",
            "flags": 32,
            "hasliked": 0,
            "id": "WdlGWN",
            "likes": 8,
            "name": "Slightly better but slower fluid",
            "published": 3,
            "tags": [
                "fluid"
            ],
            "usePreview": 0,
            "username": "wyatt",
            "viewed": 619
        },
        "renderpass": [
            {
                "code": "vec2 R;\nvec4 T (vec2 U) {\n\treturn texture(iChannel0,U/R);\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n   R = iResolution.xy;\n    vec4 me = T(U);\n    // neighborhood around pixel\n    vec4 \n        a = T(U+vec2(1,0)),\n        b = T(U-vec2(1,0)),\n        c = T(U+vec2(0,1)),\n        d = T(U-vec2(0,1));\n    \n    // so I want to find the slope of the pressure\n    // on a 2D surface, the slope has two dimensions\n    // change in height in the x and y directions\n    // then, once I have the slope, I can find the 3 space normal vector\n    // so the normal of a plane over the xy space would be:\n    //    vec3 ( 0, 0, 1)\n    // but the normal vector is related to the slope,\n    // so if the slope is say vec2 (1,0), then the normal\n    // vector will be vec3(sqrt(2)/2, 0, sqrt(2)/2)\n    \n    // so the formula for the gradient is :\n    // normalize ( vec3 ( vec2(slope) , 1) )\n    \n    \n    vec3 n = \n        normalize( \n        vec3(\n            a.z-b.z, // dzdx this is the change in pressure across the x direction\n            c.z-d.z, // dzdy this is the change in pressure across the y direction\n            -.01     // this tunes the gradent vector - small values make the derivative more important, and big values wash out small changes in the pressure\n            ));\n    \n    vec2 dw = 3.*vec2(a.w-b.w,c.w-d.w);\n    me = T(U);\n   \tC = 0.1+abs(sin(12.*me.w*me.w*vec4(1,1.1+dw.x,1.2+dw.y,1))); // sin based color gradient - change the vector to get a bunch of different palettes\n    C *= .7+0.3*texture(iChannel1,n); // access the cube map with the 3 space normal vector\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 R;\nvec4 t (vec2 U) { // access the buffer\n\treturn texture(iChannel0,U/R);\n}\nfloat ln (vec2 p, vec2 a, vec2 b) { // returns distance to line segment for mouse input\n    return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));\n}\nvec4 T (vec2 U) {\n    // half step backwards through time twice\n\tU -= 0.5*t(U).xy;\n\tU -= 0.5*t(U).xy;\n    return t(U);\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n   R = iResolution.xy;\n   // me and my neighborhood  (n)orth (s)outh (e)ast (w)est\n   vec4 me = T(U),\n        n = T(U+vec2(0,1)),\n        e = T(U+vec2(1,0)),\n        s = T(U-vec2(0,1)),\n        w = T(U-vec2(1,0));\n  \n   C = me;\n    // gradient of the pressure\n   C.x -= 0.25*(e.z-w.z); // change in pressure from left to right\n   C.y -= 0.25*(n.z-s.z); // change in pressure from top to bottom\n   // divergence plus pressure exchange\n   C.z = 0.25*(n.z+e.z+s.z+w.z) // average pressure of neighborhood\n        +0.25*(s.y-n.y+w.x-e.x); // how much is the neighborhood pushing on me\n   // boundary conditions\n   float t = 0.1*iTime;\n   if (length(U-0.5*R)<0.02*R.x)C = mix(C,vec4(.7*vec2(cos(t),sin(t)),0,1),0.01);\n   if (iFrame < 1) {\n       C = vec4(0,0,C.z,0);\n   }\n    \n    vec4 mo = texture(iChannel1,vec2(0));\n \tfloat l = ln(U,mo.xy,mo.zw);\n \tif (mo.z > 0. && l < 6.) C += vec4((6.-l)*(mo.xy-mo.zw)/R.y,0,1.-C.w);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec2 R;\nvec4 t (vec2 U) { // access the buffer\n\treturn texture(iChannel0,U/R);\n}\nfloat ln (vec2 p, vec2 a, vec2 b) { // returns distance to line segment for mouse input\n    return length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a),0.,1.));\n}\nvec4 T (vec2 U) {\n    // half step backwards through time twice\n\tU -= 0.5*t(U).xy;\n\tU -= 0.5*t(U).xy;\n    return t(U);\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n   R = iResolution.xy;\n   // me and my neighborhood  (n)orth (s)outh (e)ast (w)est\n   vec4 me = T(U),\n        n = T(U+vec2(0,1)),\n        e = T(U+vec2(1,0)),\n        s = T(U-vec2(0,1)),\n        w = T(U-vec2(1,0));\n  \n   C = me;\n    // gradient of the pressure\n   C.x -= 0.25*(e.z-w.z); // change in pressure from left to right\n   C.y -= 0.25*(n.z-s.z); // change in pressure from top to bottom\n   // divergence plus pressure exchange\n   C.z = 0.25*(n.z+e.z+s.z+w.z) // average pressure of neighborhood\n        +0.25*(s.y-n.y+w.x-e.x); // how much is the neighborhood pushing on me\n   // boundary conditions\n   float t = 0.1*iTime;\n   if (length(U-0.5*R)<0.02*R.x)C = mix(C,vec4(.7*vec2(cos(t),sin(t)),0,1),0.01);\n   if (iFrame < 1) {\n       C = vec4(0,0,C.z,0);\n   }\n    \n    vec4 mo = texture(iChannel1,vec2(0));\n \tfloat l = ln(U,mo.xy,mo.zw);\n \tif (mo.z > 0. && l < 6.) C += vec4((6.-l)*(mo.xy-mo.zw)/R.y,0,1.-C.w);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// keep track of mouse\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 p = texture(iChannel0,fragCoord/iResolution.xy);\n    if (iMouse.z>0.) {\n        if (p.z>0.) fragColor =  vec4(iMouse.xy,p.xy);\n    \telse fragColor =  vec4(iMouse.xy,iMouse.xy);\n    }\n    else fragColor = vec4(-iResolution.xy,-iResolution.xy);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}