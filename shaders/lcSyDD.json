{
    "Shader": {
        "info": {
            "date": "1722328900",
            "description": "from https://glslsandbox.com/e#98374.3",
            "flags": 0,
            "hasliked": 0,
            "id": "lcSyDD",
            "likes": 1,
            "name": "cosmic shield",
            "published": 3,
            "tags": [
                "fractal",
                "space",
                "stars",
                "shield",
                "cosmic"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 73
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)cos((h)*6.3+vec3(0,23,21))*.5+.5\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\n#define iterations 14\n#define formuparam2 0.79\n \n#define volsteps 5\n#define stepsize 0.290\n \n#define zoom 0.900\n#define tile   0.850\n#define speed2  0.01\n \n#define brightness 0.003\n#define darkmatter 0.400\n#define distfading 0.560\n#define saturation 0.800\n\n\n#define transverseSpeed zoom*2.0\n#define cloud 0.11 \n\n #define time iTime\n #define resolution iResolution.xy\nfloat triangle(float x, float a) { \n\tfloat output2 = 2.0*abs(  2.0*  ( (x/a) - floor( (x/a) + 0.5) ) ) - 1.0;\n\treturn output2;\n}\n#define SQRT_3   1.732050808\n#define SQRT_3_2 0.866025404\n#define SQRT_3_3 0.577350269\n#define OFFSET vec2(1.5, SQRT_3_2)\n float sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-SQRT_3_2, 0.5, SQRT_3_3);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nfloat field(in vec3 p) {\t\n\tfloat strength = 7. + .03 * log(1.e-6 + fract(sin(time) * 4373.11));\n\tfloat accum = 0.;\n\tfloat prev = 0.;\n\tfloat tw = 0.;\t\n\n\tfor (int i = 0; i < 6; ++i) {\n\t\tfloat mag = dot(p, p);\n\t\tp = abs(p) / mag + vec3(-.5, -.8 + 0.1*sin(time*0.7 + 2.0), -1.1+0.3*cos(time*0.3));\n\t\tfloat w = exp(-float(i) / 7.);\n\t\taccum += w * exp(-strength * pow(abs(mag - prev), 2.3));\n\t\ttw += w;\n\t\tprev = mag;\n\t}\n\treturn max(0., 5. * accum / tw - .7);\n}\n\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    \n    vec2 uv2 = 2. * gl_FragCoord.xy / vec2(512) - 1.;\n\tvec2 uvs = uv2 * vec2(512)  / 512.;\n\t\n    vec2 uv = uvs;\n\tfloat time2 = time;               \n        float speed = speed2;\n        speed = .01 * cos(time2*0.02 + 3.1415926/4.0);          \n\t//speed = 0.0;\t\n    \tfloat formuparam = formuparam2;\n\t   float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + 10.07)) * 20.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n    \n    uv*=ma;\n    \n\t\t\t       \n\t//mouse rotation\n\tfloat a_xz = 0.9;\n\tfloat a_yz = -.6;\n\tfloat a_xy = 0.9 + time*0.08;\t\n\t\n\tmat2 rot_xz = mat2(cos(a_xz),sin(a_xz),-sin(a_xz),cos(a_xz));\t\n\tmat2 rot_yz = mat2(cos(a_yz),sin(a_yz),-sin(a_yz),cos(a_yz));\t\t\n\tmat2 rot_xy = mat2(cos(a_xy),sin(a_xy),-sin(a_xy),cos(a_xy));\n\t\n\n\tfloat v2 =1.0;\t\n\tvec3 dir=vec3(uv*zoom,1.); \n\tvec3 from=vec3(0.0, 0.0,0.0);                               \n     \n      float tt=min(3.,3.+2.*sin(time/4.));\n    vec2 p = (gl_FragCoord.xy/resolution*2.0-1.0)*vec2(resolution.x/resolution.y, 1.0) * 10.0*tt;\n    float e = 0.1;\n\n\n\n    float s32 = 0.8;\n    float t33 = 0.6;\n\n    float m=1.5+sin(length(p*ma*5.)/4./tt-time*1.);\n    float c = e/abs(sdHexagon(s32*(mod(p,        OFFSET*2.0*m) - OFFSET*m), t33))\n            + e/abs(sdHexagon(s32*(mod(p-OFFSET*m, OFFSET*2.0*m) - OFFSET*m), t33));\n\n               \n               \n\tvec3 forward = vec3(0.,0.,1.);   \n\tfrom.x += transverseSpeed*(1.0)*cos(0.01*time) + 0.001*time;\n\tfrom.y += transverseSpeed*(1.0)*sin(0.01*time) +0.001*time;\n\tfrom.z += 0.003*time;\t\n\tfrom.xy*=ma;\n\tdir.xy*=rot_xy;\n\tforward.xy *= rot_xy;\n\tdir.xz*=rot_xz;\n\tforward.xz *= rot_xz;\t\n\tdir.yz*= rot_yz;\n\tforward.yz *= rot_yz;\n\t\n\tfrom.xy*=-rot_xy;\n\tfrom.xz*=rot_xz;\n\tfrom.yz*= rot_yz;\n\t \n\t\n\t//zoom\n\tfloat zooom = (time2-3311.)*speed;\n\tfrom += forward* zooom;\n\tfloat sampleShift = mod( zooom, stepsize );\n\t \n\tfloat zoffset = -sampleShift;\n\tsampleShift /= stepsize; // make from 0 to 1\n\t\n\t//volumetric rendering\n\tfloat s=0.24;\n\tfloat s3 = s + stepsize/2.0;\n\tvec3 v=vec3(0.);\n\tfloat t3 = 0.0;\t\n\t\n\t\n    \n    vec2 uv3 = (C.xy / iResolution.xy) - .5;\n \n    \n     vec3 backCol2 = vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n    \n \n\t\tvec3 p2=from+(s+zoffset)*dir;// + vec3(0.,0.,zoffset);\n\t\tvec3 p3=from+(s3+zoffset)*dir;// + vec3(0.,0.,zoffset);\n\t\t\n\t\tp2 = abs(vec3(tile)-mod(p2,vec3(tile*2.))); // tiling fold\n\t\tp3 = abs(vec3(tile)-mod(p3,vec3(tile*2.))); // tiling fold\t\t\n\t\t#ifdef cloud\n\t\tt3 = field(p3);\n\t\t#endif\n\t\t\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) {\n\t\t\tp2=abs(p2)/dot(p2,p2)-formuparam; // the magic formula\n\t\t\t//p=abs(p)/max(dot(p,p),0.005)-formuparam; // another interesting way to reduce noise\n\t\t\tfloat D = abs(length(p2)-pa); // absolute sum of average change\n\t\t\ta += i > 7 ? min( 12., D) : D;\n\t\t\tpa=length(p2);\n\t\t}\n\t\t\n\t\t\n\t\t//float dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\t//if (r>3) fade*=1.-dm; // dark matter, don't render near\n\t\t// brightens stuff up a bit\n\t\tfloat s1 = s+zoffset;\n\t\t// need closed form expression for this, now that we shift samples\n\t\tfloat fade = pow(distfading,max(0.,float(r)-sampleShift));\t\t\n\t\t//t3 += fade;\t\t\n\t\tv+=fade;\n\t       \t//backCol2 -= fade;\n\n\t\t// fade out samples as they approach the camera\n\t\tif( r == 0 )\n\t\t\tfade *= (1. - (sampleShift));\n\t\t// fade in samples as they approach from the distance\n\t\tif( r == volsteps-1 )\n\t\t\tfade *= sampleShift;\n\t\tv+=vec3(s1,s1*s1,s1*s1*s1*s1)*a*brightness*fade; // coloring based on distance\n\t\t\n\t\tbackCol2 += mix(.4, 1., v2) * vec3(1.8 * t3 * t3 * t3, 1.4 * t3 * t3, t3) * fade;\n\n\t\t\n\t\ts+=stepsize;\n\t\ts3 += stepsize;\t\t\n\t}//фор\n\t\t       \n\tv=mix(vec3(length(v*backCol2.xyz)),v,saturation); //color adjust\t\n\n\tvec4 forCol2 = vec4(v*.01,1.);\t\n\t#ifdef cloud\n\tbackCol2 *= cloud;\n\t#endif\t\n\tbackCol2.b *= 50.8;\n\tbackCol2.r *= 0.05;\t\n\t\n\tbackCol2.b = 0.5*mix(backCol2.g, backCol2.b, 0.8);\n\tbackCol2.g = 0.0;\n\tbackCol2.bg = mix(backCol2.gb, backCol2.bg, 0.5*(cos(time*0.01) + 1.0));\n    vec3 p3,r=iResolution,\n    d=normalize(vec3((C-.5*r.xy)/r.y,1));\n    float i=0.,g=0.,e3,s4;\n    for(;i++<99.;)\n    {\n        p3=g*d;\n       \n       \n        p3=R(p3,normalize(vec3(2,0.,2)),0.);\n         p3.z+=0.5;\n        s=2.;\n        vec4 q=vec4(p3,sin(iTime*0.02)*.5);\n\t\tfor(int j=0;j++<8;)\n        {\n            q=abs(q);\n            q=q.x<q.y?q.zwxy:q.zwyx;\n            s*=e=2.3/clamp(dot(q,q),0.,1.5);\n            q=q*e-vec4(1,4,2,1);\n        }\n        g+=e=min(  length(q.w)/s4,\n                length(cross(q.xyw,vec3(.577)))/s-.3e-4\n            )+.001;\n        O.rgb+=mix(r/r,H(log(s)*2.),.3)*.015*exp(-.03*i*i*e)*backCol2.rbg*v*0.001;\n    }\n \n   \n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    uv.x-=0.560;\n    uv.y+=0.12;\n    O+= vec4(happy_star(uv, anim) * vec3(0.35,1.2,2.55)*0.05*c, 1.0);\n   \n  \n\n }",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}