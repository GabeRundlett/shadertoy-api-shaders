{
    "Shader": {
        "info": {
            "date": "1709483364",
            "description": "Procedural moon",
            "flags": 0,
            "hasliked": 0,
            "id": "lXsSWH",
            "likes": 9,
            "name": "Procedural Moon",
            "published": 3,
            "tags": [
                "procedural",
                "moon",
                "crater"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 290
        },
        "renderpass": [
            {
                "code": "const vec3 LIGHT_POS = vec3(16, 8, -14);\n    \nconst float PI = 3.14159265358;\n\nfloat hash12(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat noise(vec2 p) {\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.-2.*u);\n\tfloat res = mix(\n\t\tmix(hash12(ip),hash12(ip+vec2(1,0)),u.x),\n\t\tmix(hash12(ip+vec2(0,1)),hash12(ip+vec2(1)),u.x),u.y);\n\treturn res*res;\t\n}\n\nvec3 hash33(vec3 p3)\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\nfloat crater_noise(vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    float va = 0.;\n    float wt = 0.;\n    for (int i = -2; i <= 2; i++) \n        for (int j = -2; j <= 2; j++) \n            for (int k = -2; k <= 2; k++) {\n                vec3 g = vec3(i,j,k);\n                vec3 o = 0.8 * hash33(p + g);\n                float d = distance(f - g, o);\n                float w = exp(-4. * d);\n                va += w * sin(2.*PI * sqrt(d));\n                wt += w;\n            }\n    return abs(va / wt);\n}\n\nfloat crater_fbm(vec3 x) {\n    float craters = crater_noise(x * 1.5) * 0.9 + crater_noise(x * 4.0) * 0.5 + crater_noise(x * 11.0) * 0.3;\n    return exp(-craters + 0.05);\n}\n\nfloat fbm(vec2 p, int octaves) {\n\tfloat s = 0.0, m = 0.0, a = 1.0;\n\tfor(int i = 0; i < octaves * 2; i++) {\n\t\ts += a * noise(p);\n\t\tm += a;\n\t\ta *= 0.6;\n\t\tp *= mat2(1.6, 1.2, -1.2, 1.6);\n\t}\n\treturn s / m;\n}\n\nvec2 mercator(vec3 n) {\n    return vec2(atan(n.z, n.x) * 0.5, acos(-n.y)) / PI;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float min_res = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min_res * 1.1;\n    float len = length(uv);\n    fragColor = vec4(0);\n    if (len > 1.01)\n        return;\n        \n    float f = fwidth(len);\n    float z = -sqrt(0.999 - len * len);\n    vec3 norm = vec3(uv, z);\n    vec2 muv = mercator(norm);\n    float smooth_edge = smoothstep(1.0, 1.0 - f * 2.0, len);\n    f *= 4.0;\n    \n    float d = crater_fbm(norm);\n    vec3 normal = normalize(vec3(\n        vec2(crater_fbm(vec3(uv - vec2(0.013, 0), z)),\n             crater_fbm(vec3(uv - vec2(0, 0.013), z))) - d, -0.1));\n    float light = pow(max(0.0, dot(normalize(LIGHT_POS), normal)) + max(0.0, dot(normalize(LIGHT_POS), \n    normalize(vec3(fbm(uv * 32.0, 4), fbm(uv * 32.0, 4), -1) * 2.0 - 1.0))), 1.7);\n    vec3 col = d * vec3(0.4) * (1.0 + light);\n    \n    fragColor = vec4(col, 1) * smooth_edge;\n    \n    light = max(0.0, dot(norm, normalize(LIGHT_POS)) * 0.8 + 0.2);\n    fragColor.rgb *= light + 0.05;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}