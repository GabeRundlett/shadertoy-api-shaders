{
    "Shader": {
        "info": {
            "date": "1587363334",
            "description": "All credits goes to @yosshin4004.\nhttps://twitter.com/yosshin4004/status/1251357672504360966\nThis is a fork of vahidk's Infinite Tunnel.\nI just LOVE the shadows!\n\nA BIG thanks to Fabrice for helping me reduce the original shader.",
            "flags": 64,
            "hasliked": 0,
            "id": "3sjcDV",
            "likes": 20,
            "name": "Rainbow Temple - 276 chars",
            "published": 3,
            "tags": [
                "raymarching",
                "2tweets",
                "short",
                "golf",
                "infinitetunnel"
            ],
            "usePreview": 0,
            "username": "GregRostami",
            "viewed": 727
        },
        "renderpass": [
            {
                "code": "// Fork of \"Infinite Tunnel\" by vahidk. https://shadertoy.com/view/tdSyDG\n// 2020-04-20 06:00:14\nvoid mainImage(out vec4 O, vec2 U)\n{\n    vec3 R=iResolution,\n         d=vec3((U+U-R.xy)/R.y,1),\n         p=R-R, q;\n    for(p.z=.1*iTime; R.z++<1e2;\n        p += .5 * d * min( .65-length(fract(p+.5)-.5),p.y+.3) )\n        R.z==65. ? q=p-=d*.01,d+=1.-d : q;\n    ivec3 u = ivec3(q*5e2)&255;\n    O = vec4(u.yzx^u.zxy,0)/1e3*(length(p-q)+.8)+p.z*.1-.01*iTime;\n}\n\n// 263 chars - Thanks to Fabrice, everything gets shorter!!\n/*\n#define mainImage(O,U)                                            \\\n    vec3  R = iResolution,                                        \\\n          d = vec3((U+U-R.xy)/R.y, 1),                            \\\n          q, p=R-R;                                               \\\n    for (p.z = .1*iTime; O.a++ < 99.;                             \\\n         p += .5*d * min( .65-length(fract(p+.5)-.5), p.y + .3) ) \\\n         O.a==65. ? q = p -= d*.01, d += 1.-d : q;                \\\n    ivec3 u = ivec3(q*5e2) & 255;                                 \\\n    O = vec4( u.yzx ^ u.zxy, 0) / 1e3                             \\\n        * (length(p-q)+.8) + p.z*.1-.01*iTime\n\n\n// 259 chars - Shortest version, but I don't like the floor.\n\n#define mainImage(O,U)                                            \\\n    vec3  R = iResolution,                                        \\\n          d = vec3((U+U-R.xy)/R.y, 1),                            \\\n          q, p=R-R;                                               \\\n    for (p.z = .1*iTime; O.a++ < 99.;                             \\\n         p += .5*d * min( .65-length(fract(p+.5)-.5), p.y + .3) ) \\\n         O.a==65. ? q = p -= d*.01, d += 1.-d : q;                \\\n    ivec3 u = ivec3(q*5e2) & 255;                                 \\\n    O = vec4( u ^ u.zxy, 0) / 1e3                             \\\n        * (length(p-q)+.9) + p.z*.1-.01*iTime\n\n\n// 278 chars - Greg's Original Fork\n\n#define mainImage(O,U)                                                           \\\n    vec3 R = iResolution, d = vec3((U+U-R.xy)/R.y, 1), q, p=d-d; p.z = iTime*.1; \\\n    for (int i=0; i++<99; p += .5*d* min( .65-length(fract(p+.5)-.5), p.y + .3)) \\\n        i==60 ? q = p -= d*.01, d += 1.-d : q;                                   \\\n    ivec3 u = ivec3(q*5e2) & 255;                                                \\\n    O = vec4(u.x^u.y,u.y^u.z,u.x^u.z,0)/2e3 * (length(p-q)+.9) + (p.z-iTime*.1)*.1\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 22223,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/filipnikolaevic/jean-michel-jarre-oxygen-8-magnetik-rmx"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}