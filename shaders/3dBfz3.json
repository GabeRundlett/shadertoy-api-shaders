{
    "Shader": {
        "info": {
            "date": "1590841449",
            "description": "LossyTextCompression Drop the alphabet to 8 chars then expand using context. Doesn't  work. Maybe useful for hiding messages.",
            "flags": 32,
            "hasliked": 0,
            "id": "3dBfz3",
            "likes": 11,
            "name": "Family Bible",
            "published": 3,
            "tags": [
                "compression"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 478
        },
        "renderpass": [
            {
                "code": "//The Ole Family Bible - by eiffie (lossy text compression)\n//Like the wisdom on its pages the old family Bible has withstood the test\n//of time. Its pages intact due to the diligence of binders. Its leather\n//bound cover still protecting against moisture due to the skill of tanners\n//using 18th century technology. And due to the typesetters, many lacking \n//even a basic education, more than a few spelling errors.\n\n#define R iResolution.xy\nfloat td;\nfloat DEC(vec2 p, vec2 a){//if(a>32.)a+=32.;\n  float sx=p.x;\n  p.x*=0.5-pow(p.y,4.)*0.4+p.y*0.2;\n  p.x+=0.2+sin(a.x)*0.05;\n  vec2 c=vec2(mod(a.x,16.),15.-floor(a.x/16.));\n  vec4 v=texture(iChannel2,(c+p)/16.);//return 1.0-v.x;\n  float d=v.w*(1.+p.y*0.1);\n  if(a.y>4.)d=min(d,length(p-vec2(0.25))+.4);\n  return d;\n}\nfloat text(in vec2 uv){\n  vec2 scl=vec2(320.,36.);\n  vec2 F=floor(uv*scl),P=fract(uv*scl);\n  float lo=0.;int io=0;\n  if(F.x>75.){io=-75;lo=scl.y;if(F.x>165.){io-=90;lo+=scl.y;if(F.x>240.){io-=75;lo+=scl.y;}}}\n  vec2 v=vec2((scl.y-1.-F.y)+1.5+lo,0.5);\n  vec4 t=texture(iChannel0,v/R);\n  float idx=F.x+t.x+float(io);\n  t=texture(iChannel0,(v+vec2(1,0))/R);\n  float d=1.;\n  if(idx<t.x){\n    v=vec2(0.5+mod(idx,R.x),1.5+floor(idx/R.x));\n    t=texture(iChannel0,v/R);\n    if(t.x==0.)return 1.;\n    float r=25.*max(length(fwidth(uv)),0.0008);//\n    d=DEC(P,t.xy);\n    d=smoothstep(0.53-r,0.53+r,d);\n  }\n  return d;\n}\n#define pi 3.14159 \nvec2 rotate(vec2 v, float a){float ca=cos(a),sa=sin(a);return v*mat2(ca,sa,-sa,ca);} \nfloat rbox(vec3 p, vec4 r){return length(max(abs(p.xyz)-r.xyz,0.))-r.w;} \nfloat nois(vec2 v){// based on 2d noise by Trisomie21 \n  vec4 h=fract(sin(vec4(floor(v.x)+floor(v.y)*100.)+vec4(0,1,100,101))*100.); \n  v=smoothstep(0.,1.,fract(v));return mix(mix(h.x,h.y,v.x),mix(h.z,h.w,v.x),v.y);\n} \nvec3 mcol=vec3(0); \nfloat opn=1.*pi;//angle of book open 0-pi \n#define splty .12 \nfloat Cover(vec3 p){ \n  p.y-=splty; \n  return rbox(p,vec4(.5,0,0.75,0.01)); \n} \nfloat Page(vec3 p){\n  p.y-=(pi-opn)*0.015+sin(p.x*6.9+5.7)*opn*0.011/(1.+p.x); \n  return 0.7*rbox(p,vec4(0.48,splty/2.,0.73,0)); \n} \nfloat DE(vec3 p){ \n  vec3 p0=p; \n  float dT=p.y+splty; \n  p.xy=rotate(p.xy,opn/2.); \n  p.y=abs(p.y); \n  p.xy=rotate(p.xy,opn/2.); \n  p.x-=.5+.5*p.y*opn; \n  float dC=Cover(p); \n  float dP=Page(p); \n  float d=min(dT,min(dC,dP)); \n  if(mcol.x>0.){ \n    vec2 s1=vec2(1.);float s2=0.; \n    if(d==dT){\n      mcol=vec3(0.7,0.4,0.2); \n      s1=vec2(5.,50.);s2=0.001; \n    }else if(d==dC){ \n      mcol=vec3(0.2,0.22,0.3); \n      s1=vec2(20.0);s2=0.001; \n      float dG=max(min(abs(p.x),abs(p.z-0.1))-0.05,max(abs(p.x)-0.3,abs(p.z)-0.4)); \n      if(dG<dC){s2=0.;mcol=vec3(1.,.8,0.5);}  \n    }else if(d==dP){ \n      mcol=vec3(2); \n      //s1=vec2(100.0);\n      s2=0.; \n      if(-p0.x>-p0.y/(1.+opn))p.x=-p.x-0.45;else p.x+=.35;//undo the abs(p.y) after rotating y to x\n      p.xz*=vec2(1.2,1.4667);\n      if(max(abs(p.x),abs(p.z))<1.){\n        float d=text(vec2(0.5)+0.5*p.xz);//0-1 \n        mcol=vec3(2.*d);\n      }  \n    } \n    d+=nois(p.xz*s1)*s2; \n  } \n  return d; \n} \nvec3 normal(vec3 p, float d){//from dr2 \n  vec2 e=vec2(d,-d);vec4 v=vec4(DE(p+e.xxx),DE(p+e.xyy),DE(p+e.yxy),DE(p+e.yyx)); \n  return normalize(2.*v.yzw+vec3(v.x-v.y-v.z-v.w)); \n} \nvec3 sky(vec3 rd, vec3 L){ \n  float d=0.5*dot(rd,L)+0.5; \n  return mix(vec3(0,0.1,0.2),vec3(1,0.9,0.5),d); \n} \nfloat rnd; \nvoid randomize(in vec2 p){rnd=fract(float(iTime)+sin(dot(p,vec2(13.3145,117.7391)))*42317.7654321);} \n \nfloat ShadAO(in vec3 ro, in vec3 rd){ \n float t=0.01*rnd,s=1.0,d,mn=0.01; \n for(int i=0;i<12;i++){ \n  d=max(DE(ro+rd*t)*1.5,mn); \n  s=min(s,d/t+t*0.5); \n  t+=d; \n } \n return s; \n} \nvec3 scene(vec3 ro, vec3 rd){\n  td=DE(ro)*rnd;\n  float d,px=1.0/R.x; \n  for(int i=0;i<64;i++){ \n    td+=d=DE(ro+rd*td);\n    if(td>10.0 || d<px*td)break;\n  }\n  vec3 L=normalize(vec3(0.4,0.5,0.5)); \n  vec3 col=sky(rd,L); \n  if(d<px*td*5.0){ \n    mcol=vec3(0.001);  \n    vec3 so=ro+rd*td; \n    d=DE(so);\n    vec3 scol=mcol.xyz;mcol=vec3(0);\n    vec3 N=normal(so,d); \n    float dif=0.5+0.5*dot(N,L); \n    float vis=clamp(dot(N,-rd),0.05,1.0); \n    float fr=pow(1.-vis,5.0); \n    float shad=ShadAO(so,L); \n    col=(scol*dif+fr*sky(reflect(rd,N),L))*shad; \n  } \n  return col; \n} \nmat3 lookat(vec3 fw){fw=normalize(fw);\n  vec3 rt=normalize(cross(fw,vec3(0,0,1)));\n  return mat3(-rt,normalize(cross(rt,fw)),fw);\n}\nvoid mainImage(out vec4 O, in vec2 U){ \n  vec2 uv=vec2(U-0.5*R)/R.x; \n  randomize(U);\n  vec2 ms=vec2(0);\n  vec3 ro2=vec3(-0.25,0.3,0);\n  if(iMouse.x!=0.)ms=(iMouse.xy/R);\n  float lt=1.;\n  vec3 ro=vec3(0.5,1.5,-2),ro1=ro; \n  if(iTime<5.0){\n      opn=0.;lt=iTime/5.;\n  }else if(iTime<5.+5.*pi){\n      opn=pi*(0.5-.5*cos((iTime-5.)*0.2));\n  }else if(iTime<10.+5.*pi){\n      float t=iTime-(5.+5.*pi);\n      ro=mix(ro1,ro2,t/5.);\n  }else {\n      vec2 v=vec2(0.22,0.35)*U/R+ms*vec2(0.6,0.8)-vec2(.05);\n      float d=1.;\n      if(v.x>0.&&v.y>0.&&v.x<1.&&v.y<1.)d=text(v);\n      O=vec4(d,d,d,1.);\n      return;\n  }\n  vec3 rd=normalize(vec3(uv.xy,1));\n  O=vec4(scene(ro,lookat(-ro1)*rd),1.0)*lt; \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R iResolution.xy\nfloat gb(int c, float start, float bits){return mod(floor(float(c)/exp2(start)),exp2(bits));}//get bits\nint dat[573]=int[573](4405797,7909807,3697656,9625835,14880926,15477224,2346556,13667659,5437891,16541509,16166076,10623364, \n5744691,10686709,619059,8600113,6161701,1995199,9617821,13534160,12867552,10325224,2291527,7605579, \n8600102,13075749,14580140,15697352,15962020,3048792,7613158,6546737,7607341,4405807,12856105,10814808, \n1696276,14935114,8476220,3474868,14893621,14854524,124748,9617821,14936824,429962,9718108,11242728, \n5194379,15699176,14766010,4405820,13608777,10735123,1202227,10250722,10739335,10774337,2255410,2739974, \n12916292,6136052,10747074,11899051,1995045,1737626,14045597,12049635,13580833,4961329,10842528,7770611, \n12140496,10325816,12448198,4590660,1513927,10436779,15535928,7628818,1955654,9714867,9833704,7604860, \n1768998,10563109,5396531,13919560,7625988,15408670,16353888,6580039,3164525,8605507,428108,9617821, \n11701480,12511006,7983373,13533582,11546180,6907940,7356127,7615870,14935345,14767676,10382129,14774839, \n10742075,10246852,2632391,13570235,5642936,2490867,14322920,13383718,1607767,15503773,13536322,10242400, \n2632391,14151867,7609128,14339846,1663685,1692135,8932789,1995175,8425338,13803813,13829744,3169411, \n7616325,10573617,10693003,836019,905586,15948175,14893500,256315,5531549,10648120,11548484,9720804, \n5526216,11603176,10686827,857651,15959500,1691944,1606911,7856349,11424798,15929144,12483230,2346532, \n11031509,2308660,12866517,15076584,3681858,6443494,1356333,9617821,15722912,1030055,7856349,8600094, \n15225125,16267075,16680861,8040262,1692040,10419005,4576706,8136609,687575,10789351,649171,13989488, \n10235423,13201200,11453484,9468357,1735817,14574055,9949011,9394500,2247539,5760966,13438776,1607977, \n10030843,14774069,2711100,12863842,707704,13044977,7621180,14900870,6565223,8600105,14139685,5942535, \n8517371,14869513,13643111,2041336,2306535,3776661,11701480,12511006,13533453,16526916,3016108,1215206, \n10695604,1202227,1692135,15796524,4443700,3564015,743928,12964191,16539368,11306412,2276895,8152902, \n2254805,16541510,973164,8381489,7623368,10636038,7987075,11428576,1608584,10499698,9988568,15722022, \n14274952,7626472,11917446,1692040,689612,1784357,12440039,14858576,8113212,9632234,15929144,2280598, \n5526485,10734704,223044,311783,13275549,13535656,2669240,10323188,8547590,10664331,13430020,12439976, \n6831336,16354993,2185031,14830443,1735228,9978468,7629325,9394502,8839027,13057256,13536160,1926083, \n3776844,11701480,12511006,10686733,9615923,1341888,16354619,7627323,1554998,10456157,1735210,13516133, \n662397,4911591,13077777,311468,1620533,13391167,2308671,14830443,1735228,3424868,1692072,13516133, \n10623869,10689779,6136203,2854149,11833245,13237891,15497669,15699508,3170853,12111418,16385768, \n6846916,10699095,15645235,10610072,11560772,10507236,11792691,12930582,1995251,14290810,1692057, \n12126508,14026472,3434517,13313768,9834296,13383494,3419897,7983928,2263960,16724117,11308264,11733293, \n11560769,10735140,2507175,11895620,11701480,12511006,10518797,9617803,4623592,8506053,1734713,16645428, \n10614516,13564955,9617859,1995087,961725,6636007,2914755,10225548,7615367,11218758,6485827,6508294, \n8465965,15754510,10233965,16404103,12177588,15962004,2047920,6501300,1356333,15405619,3744152,2920248, \n12881093,13657658,13807148,2920248,12881093,13133370,15960453,13390536,6532168,3955974,1523745,5605785, \n2277272,14111767,15960455,9864536,10206919,7359038,2306493,4615703,1358910,9617579,8763930,7633350, \n1088030,6635691,6461315,1994797,14774835,7884075,4405801,10686625,6540838,11527701,16680392,10701446, \n11266099,11303362,11101122,2191908,1691885,4951721,997910,1487350,15599465,1725458,15960481,15074648, \n12856899,10607173,2158131,10124486,13378920,7609632,10697263,7516497,5869152,7621182,4082438,10128453, \n15634232,9669829,977705,1476513,10005081,10774046,1994770,5606493,8423504,15595158,8564419,5432873, \n13810238,10665880,7616907,13060145,10563114,12189867,11032024,1249198,1664221,1395687,15507869,10432904, \n10735142,13873395,11428576,5901544,1606834,5812395,13430022,10251496,14882631,4307516,7243225,14772552, \n14793276,13815265,14896834,9734451,13535558,7633349,1406513,2042844,6078877,9085320,8637982,8589777, \n3048635,14914116,13685820,4324040,8558646,1041945,2506956,13537080,1216096,15492185,8501820,5520371, \n2920248,14892594,2210322,11251871,3171048,13997317,13533685,7614020,2277126,15492934,1467452,11897438, \n11439928,9885250,6565444,14699885,703036,2308629,10636139,758139,1268569,10128693,740678,9780966, \n10573632,9725762,16201973,1607789,9818525,8604996,980537,16378228,9832168,15960700,13457776,13896519, \n12964020,12094200,1216412,15450525,15959484,13044472,11956796,13582372,11548482,5526500,16505208, \n9834296,7608870,752966,5194215,7603517,16162342,5902268,1030106,7983591,16372408,743928,16582505, \n15960979,14912416,1608059,3378828,8476206,1995070,8621565,12514763,15790349,6441758,1554989,5813299, \n13536519,6535912,1214358,9617821,1212751,9833437,8483371,15595158,11560771,7627300,14514118,12394663 \n);\nint alph[128]=int[128](879450,879450,867022,743898,601946,608850,811578,574712,879034,341414,642440,642451,135354,135300, \n101472,101475,879450,879450,866774,485838,379250,387666,564775,869617,879014,442189,865107,878867, \n136005,137028,852802,879427,879450,879450,473562,879054,879442,372314,813914,574712,879023,427430, \n281864,281875,660122,135300,26624,3,879450,879450,866774,867150,870770,870763,879162,845050,518977, \n39130,642675,642664,135813,157828,2,2112,879450,879450,473806,473550,878962,878970,879450,870234, \n879434,439738,270600,270600,135828,135300,0,0,879450,879450,473558,481742,601682,608850,879143,583911, \n441770,439738,281868,642675,135813,856244,835,0,879450,879450,473550,473934,372299,372299,859697, \n804081,874145,349862,282220,413299,136005,856708,102211,68706,879450,879450,485846,875342,601458, \n372299,826919,256241,867759,439718,282444,281864,135813,135300,834,851994\n);\nfloat hash(vec2 u){return fract(sin(dot(u,vec2(117,113)))*342.13);}\nvec4 get(ivec2 v){return texture(iChannel0,(vec2(v)+vec2(0.5))/R);}\nfloat getC(int idx){//extract a 3 bit char and transform to 5 bits thru context lookup\n  int aid=0;float f1=mod(float(idx-1),8.);\n  if(f1<5.)aid=int(gb(dat[(idx-1)/8],f1*3.,9.));//the 3 chars are in same float\n  else{//get them individually\n    f1=gb(dat[(idx-1)/8],f1*3.,3.);\n    float f2=gb(dat[idx/8],mod(float(idx),8.)*3.,3.);\n    float f3=gb(dat[(idx+1)/8],mod(float(idx+1),8.)*3.,3.);\n    aid=int(f1+f2*8.+f3*64.);\n  }\n  float a=gb(alph[aid/4],mod(float(aid),4.)*5.,5.);\n  return (a<26.?65.+32.+a:32.);\n}\nvoid mainImage( out vec4 O, in vec2 U ) {\n  vec4 st=get(ivec2(0));\n  ivec2 F=ivec2(floor(U));\n  if(iFrame<2 || (st.x!=R.x && !all(equal(F,ivec2(0))))){O=vec4(0);return;}\n  O=texture(iChannel0,U/R);\n  \n  if(F.y==0){//state, page & line index\n    if(F.x==0){//state\n      if(O.x!=R.x){O.x=R.x;O.y=0.;O.z=0.;O.w=0.;}\n      else O.y+=1.;\n      return;\n    }\n    if(O.x==0.){\n      if(F.x==1){O=vec4(-1.,2200,0,0);return;}\n      int jl=int(get(F-ivec2(1,0)).x);\n      float f=getC(jl);\n      if(f==32.){\n        f=getC(jl-1);\n        if(f==32.){\n          int j2=int(get(F-ivec2(2,0)).x);\n          if(j2!=jl){O.x=float(jl);return;}//double spaced\n        }\n      }\n      if(jl==0)return;//not ready yet\n      for(int i=0;i<72;i++){//look for end of line\n        int j=jl+i;\n        if(j>4584){\n          if(j==4585 && jl!=4585)O.x=4585.;\n          else O.x=float(j)+58.+hash(vec2(j,j))*6.;\n          break;\n        }\n        if(i>70){O.x=float(j);break;}\n        float f=getC(j);\n        if(f==32.){\n          f=getC(j+1);\n          if(f==32. || i>60){O.x=float(j+1);break;}\n        }\n      }\n    }\n    return;\n  }\n  int idx=(F.y-1)*int(R.x)+F.x;\n  if(idx>=4585 && O.x==0.){//create extra gargled words\n    if(idx>6500)return;//not read\n    if(idx<4588 || F.x==0){O.x=26.;}\n    else{\n      O.x=hash(vec2(F))*34.;//=get(F-ivec2(1,0)).z;\n      //O.z=floor(hash(F)*7.+1.)*64.+floor(O.z/8.);\n    }\n    //O.x=gb(alph[int(O.z)/4],mod(O.z,4.)*5.,5.);\n    O.x=(O.x<26.?65.+32.+O.x:32.);\n    return;\n  }\n  if(idx==0)O=vec4(73,3,0,0);else if(idx==4584)O=vec4(110,0,0,0);\n  else{\n    if(O.x==0.){//extract data\n      O.x=getC(idx);//lower case\n    }else if(O.y==0. && idx>3){//format uppercase, period\n      if(get(F-ivec2(1,0)).x==32.){O.y=1.;\n        if(get(F-ivec2(2,0)).x==32.){O.x-=32.;\n          if(get(F-ivec2(3,0)).x==32.)O.y=3.;//Big caps\n        }\n      }else if(get(F).x==32.){\n        if(get(F+ivec2(1,0)).x==32.)O.y=5.;//period\n      }else O.y=1.;\n    }\n  }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}