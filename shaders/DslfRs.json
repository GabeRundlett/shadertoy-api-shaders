{
    "Shader": {
        "info": {
            "date": "1689078858",
            "description": "CLICK to display rectangle and change size\n\nFirst try at creating a shader and learning some GLSL, followed tutorials from IQ, and tried to understand the code from: https://www.shadertoy.com/view/XsyGRW",
            "flags": 0,
            "hasliked": 0,
            "id": "DslfRs",
            "likes": 1,
            "name": "First Shader:SDF Circle and Rect",
            "published": 3,
            "tags": [
                "interactive",
                "sdf",
                "circle",
                "rectangle"
            ],
            "usePreview": 0,
            "username": "justgoscha",
            "viewed": 172
        },
        "renderpass": [
            {
                "code": "float shape_circle(vec2 p, float radius) {\n  return length(p) - radius;\n}\n\nfloat shape_rect(vec2 p) {\n    // Size of the rectangle can be set with mouse click\n    float rx = .32 * 2.0 * iMouse.y/iResolution.xy.y;\n    float ry = .18 * 2.0 * iMouse.x/iResolution.xy.x;\n\n    return length(max(abs(p)-vec2(rx, ry),vec2(0,0)));\n}\n\n// Normalizes the coordinates to the screen resolution\nvec2 squareFrame(vec2 screenSize, vec2 coord) {\n  vec2 position = 2.0 * (coord.xy / screenSize.xy) - 1.0;\n  position.x *= screenSize.x / screenSize.y;\n  return position;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = squareFrame(iResolution.xy, fragCoord);\n    \n    float distance;\n\n    \n    //distance = max(shape_circle(uv, 0.2),0.0);\n    distance = max(shape_rect(uv),0.0);\n    \n    if (distance > 0.0) {\n        // Time varying pixel color... \n        // just to make the background less boring\n        vec3 col = vec3(\n            distance/3.0 - sin(0.5*iTime)/2.0,\n            distance/2.0 + sin(1.1*iTime-3.14159/5.0)/2.0,\n            0.5 + distance/2.0 + cos(iTime+3.14159/3.0)/2.0\n        );\n\n        // Output to screen\n        fragColor.rgb = col;\n        fragColor.a = 1.0;\n    } else {\n        vec3 col = vec3(1,1,1);\n\n        // Output to screen\n        fragColor.rgb = col;\n        fragColor.a = 1.0;\n    }\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}