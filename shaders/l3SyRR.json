{
    "Shader": {
        "info": {
            "date": "1726844689",
            "description": "I made an fbm shader so I thought to try and make some cool stuff with it, I think it went well! Enjoy! Made by Rik Riesmeijer (CC0: Copyright Free).",
            "flags": 0,
            "hasliked": 0,
            "id": "l3SyRR",
            "likes": 1,
            "name": "Moon: Generate Imperfections(CC0",
            "published": 3,
            "tags": [
                "procedural",
                "fbm",
                "texture",
                "cc0",
                "variants"
            ],
            "usePreview": 0,
            "username": "rikr",
            "viewed": 60
        },
        "renderpass": [
            {
                "code": "// FBM Variants by Rik Riesmeijer, 2024 - No rights reserved (CC0: Copyright free) - Enjoy!\nvec4 h(vec4 x, vec4 y) { return fract(sin(mod(x * 33.125 + y * 1.25, 4393.25)) * 341.125); }\nfloat h(vec2 v) { return fract(sin(mod(v.x * 33.125 + v.y * 3.25, 3923.25)) * 4321.125); }\n\n\nconst vec4 s = vec4(0.016, 0.018, -0.025, -0.1200), // pythagorean sines.\n           t = vec4(0.012, 0.040,  0.060,  0.0700), // pythagorean cosines.\n           u = vec4(0.5  , 0.25 ,  0.125,  0.0625); // Layer weights.\nconst mat2 r =  mat2(-0.15, 0.08, 0.08, 0.15);      // Rotation for second step in 8 layer fbm.\nfloat vfbm(vec2 v) {                                          // vectorized with 4 layers\n    vec4 x = s * v.x - t * v.y, f = floor(x), c = ceil(x),    // X cached.\n         y = s * v.x + t * v.y, g = floor(y), d = ceil(y),    // Y cached.\n         a = smoothstep(0.0, 1.0, fract(x));                  // X mix cached.\n    return dot(u, mix(mix(h(f, g), h(c, g), a),               // Interpolate bottom.\n                      mix(h(f, d), h(c, d), a),               // Interpolate top.\n                      smoothstep(0.0, 1.0, fract(y))));       // Interpolate left right.\n}                                                             // Do this twice for good result.\nfloat fbm(vec2 v) { return vfbm(v) + 0.0625 * vfbm(r * -v); } // 8 Layers. (Similar could be done for 16 etc.)\n\n// 2D FBM\nvec2 fbm2(vec2 v) {\n    vec2 result;\n    result.x = fbm(v);\n    result.y = fbm(iResolution.xy + v);\n    return result;\n}\n\n// 4D FBM\nvec4 fbm4(vec2 v) {\n    vec4 result;\n    result.xy = fbm2(v + vec2(123.0, 121.0));\n    result.zw = fbm2(v - iResolution.xy);\n    return result;\n}\n\n\n\n// Smudge texture rgba.\nvec4 fbmsmudges(vec2 v) {\n    return smoothstep(0.6, 0.1, fbm4(v + 100.0 * fbm2(v.yx)));\n}\n\n// Spill texture rgba.\nvec4 fbmspills(vec2 v) {\n    vec4 r = fbm4(v * 0.5),\n         a = fbm4(r.xy * 600.0),\n         b = fbm4(r.zw * 600.0); \n    return smoothstep(0.0, 1.0, smoothstep(a, a + b, r));\n}\n\n// Splatter texture rgba.\nvec4 fbmsplatter(vec2 v) {\n    vec4 r = fbm4(v * 0.5),\n         a = fbm4(r.xy * 900.0),\n         b = fbm4(r.zw * 900.0);  \n    return smoothstep(b, a - b, r + a);\n}\n\n// Stained texture rgba.\nvec4 fbmstained(vec2 v) {\n    return smoothstep(0.5, 0.7, fbm4(v * 0.9));\n}\n\n// Demo alternates at center between each quadrant and.\nvoid mainImage(out vec4 c, in vec2 v) {\n    vec2 uvs = 1000.0 * (v - 0.5 * iResolution.xy) / iResolution.y;\n    vec4 smudge =  fbmsmudges(uvs - vec2(iTime * 10.0)),\n         stains =  fbmstained(uvs + vec2(iTime * 10.0, -iTime * 10.0)),\n         spills =   fbmspills(uvs - vec2(iTime * 10.0, -iTime * 10.0)),\n         splats = fbmsplatter(uvs + vec2(iTime * 10.0));\n         \n    c = vec4(v.x > 0.5 * iResolution.x ?\n                 v.y > 0.5 * iResolution.y ? smudge : spills :\n                 v.y > 0.5 * iResolution.y ? stains : splats);\n    c = length(uvs) > 300.0? c : mix(mix(1.0 - smudge, 1.0 - stains, 0.5 + 0.5 * sin(iTime)),\n                                     mix(1.0 - spills, 1.0 - splats, 0.5 + 0.5 * sin(iTime)),\n                                     0.5 + 0.5 * cos(iTime));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}