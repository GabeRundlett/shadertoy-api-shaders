{
    "Shader": {
        "info": {
            "date": "1639499115",
            "description": "sdfsg",
            "flags": 32,
            "hasliked": 0,
            "id": "fttSDn",
            "likes": 3,
            "name": "2d Path tracing try 2",
            "published": 3,
            "tags": [
                "sdfsg"
            ],
            "usePreview": 0,
            "username": "MinimilisticBits",
            "viewed": 321
        },
        "renderpass": [
            {
                "code": "//NOT MY CODE//////////////////////\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return clamp((x*(a*x+b))/(x*(c*x+d)+e), 0.,1.);\n}\n//////////////////////////////////\n\nvec3 blur(vec2 uv, float r){\nvec3 c = vec3(0.);\nuv *= iResolution.xy;\nfloat iter = 0.;\nfor(int i = 0; i < 10; i++){\n  for(int k = 0; k < 10; k++){\n     float x = float(k)-5.;\n     float y = float(i)-5.;\n     x*=r;\n     y*=r;\n     //float bok = texture(iChannel1, vec2(0.5)+((vec2(x,y)*6.)/iResolution.xy)).y;\n     vec4 c2 = texture(iChannel0, (uv+vec2(x,y))/iResolution.xy).xyzw;\n     vec3 col = c2.xyz / (c2.w+1.);\n     //if(length(col) > 0.6)col*=1.2;\n     c += col;\n     iter+=1.;\n  }\n}\nc/=iter;\nreturn c;\n} \n\n\nvec3 blur2(vec2 p,float dist){\np*=iResolution.xy;\n    vec3 s;\n    \n    vec3 div = vec3(0.);\n    //vec2 off = vec2(0.0, r);\n    float k = 0.61803398875;\n    for(int i = 0; i < 150; i++){\n    float m = float(i)*0.01;\n    float r = 2.*3.14159*k*float(i);\n    vec2 coords = vec2(m*cos(r), m*sin(r))*dist;\n    vec4 c2 = texture(iChannel0, (p+coords)/iResolution.xy).xyzw;\n    vec3 c = c2.xyz / (c2.w+1.);\n    //c = c*c *1.8;\n    vec3 bok = pow(c,vec3(4.));\n      s+=c*bok;\n      div += bok;\n    }\n        \n    s/=div;\n    \n    return s;\n    \n}\nfloat ring(vec2 p, vec2 pos, float r1, float r2){\nvec2 a = normalize(p-pos);\nreturn length((pos+a*r1)-p)-r2;\n}\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nconst float pi = 3.14159;\nvec2 rot(vec2 a, float c){\nfloat l = length(a);\na/=l;\nfloat ang = (a.y < 0.)?2.0*pi - acos(a.x):acos(a.x);\nang += c;\nreturn vec2(l*cos(ang), l*sin(ang));\n}\n\nfloat sdPentagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(0.809016994,0.587785252,0.726542528);\n    p.x = abs(p.x);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    p -= vec2(clamp(p.x,-r*k.z,r*k.z),r);    \n    return length(p)*sign(p.y);\n}\n\nvec3 lensflare(vec2 uv, vec2 mouse){\nfloat dist = ring(uv, -mouse, 0.7, 0.001);\n    dist = exp(-dist*40.2);\n    vec3 col;\n    col += vec3(1.,0.7,0.2)*exp(-(length(mouse-uv)-0.08)*4.);\n    \n    col += vec3(1.,0.7,0.2)*exp(-(length(mouse-uv)-0.08)*1.)*0.4;\n    col += sin(texture(iChannel1, normalize(mouse-uv)*0.05).x)\n    *cos(texture(iChannel1, normalize(mouse-uv)*0.01).y)*exp(-6.0*length(mouse-uv));\n    \n   \n    vec3 c = palette(1.0-length(mouse)*0.5, vec3(0.5),vec3(0.5),vec3(1.0, 0.7, 0.4),vec3(0.00, 0.15, 0.20));\n    vec3 c2 =  palette((1.0-length(mouse))*0.5, vec3(0.5),vec3(0.5),vec3(1.0, 1., 1.),vec3(0.00, 0.1, 0.20));\n    vec3 c3 =  palette((length(mouse))*0.5, vec3(0.5),vec3(0.5),vec3(2.0, 1., 1.),vec3(0.5, 0.2, 0.25));\n    vec3 c4 =  palette((length(mouse-uv)), vec3(0.5),vec3(0.5),vec3(1.0, 1., 1.),vec3(0., 0.33, 0.67));\n    //col += exp(-(ring(uv, mouse, 0.3, 0.004))*146.)*c2*0.2;\n\n    col += vec3(1.)*exp(-(length(-mouse*0.5-uv)-0.005)*3.)*c2;\n    col += vec3(1.)*exp(-(length(-mouse*0.1-uv)-0.005)*17.)*c;\n    col += vec3(1.)*exp(-(length(mouse*0.3-uv)-0.05)*2.)*c3*length(mouse);\n    col += vec3(1.)*exp(-(ring(uv, mouse*0.5, 0.01, 0.004))*46.)*c2*length(mouse);\n    col += exp(-(length(rot(mouse-uv, mouse.x*0.1)*vec2(1.,122.))-1.3)*1.)*c2*exp(-length(mouse)*2.);\n    col += exp(-(length(rot(mouse-uv, (mouse.y+0.2)*0.2)*vec2(1.,122.))-1.3)*1.)*c2*exp(-length(mouse)*2.);\n    col += exp(-(length(rot(mouse-uv, mouse.x+1.0)*vec2(1.,62.))-1.3)*1.)*c4*exp(-length(-mouse*0.2-uv)*6.)*1.;\n    col += exp(-(length(rot(mouse-uv, mouse.x+2.0)*vec2(1.,62.))-1.3)*1.)*c4*exp(-length(-mouse*0.2-uv)*6.)*1.;\n\n    for(int i = 0; i < 4; i++){\n       col += exp(-sdPentagon((mouse*(0.4-(float(i)*0.2))) - uv, 0.1+float(i)*0.05)*16.)*0.02;\n    }\n    \n    \n    float dist2 = (max(length(-mouse*0.8-uv)-0.3, -(length(-mouse*0.66-uv)-0.3)))*0.6;\n    col += vec3(0.4)*exp(-dist2*4.)*c2;\n    col += (1.0-length((-mouse*0.5-uv)-(mouse-uv))-0.01)*0.2;\n    col += vec3(dist*(1.0-length(mouse)))*c;\n    col += exp(-(ring(uv, -mouse*0.2, 0.8, 0.004))*46.)*c2*sin(texture(iChannel1, normalize(uv)).x)*exp(-2.0*length(-mouse-uv));\n   return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n \n    // Time varying pixel color\n    vec4 c = texture(iChannel0, uv).xyzw;\n    //vec3 col = c.xyz/(c.w+1.);\n    vec2 uf = uv * 2.0 - 1.0;\n    uf.x *= 1.3;\n    uf.y /= 1.3;\n    vec3 col = blur2(uv, max(length(uf*14.)*1.-(8.0-length(uf*0.1)), 0.));\n    col = clamp(col,0.,1.);\n    col +=  clamp(lensflare(uf, vec2(0.,0.))*.06,0.,1.);\n   // col +=  lensflare(uf, vec2(0.5,-0.5))*0.01;\n   // col +=  lensflare(uf, vec2(-0.5,-0.5))*0.01;\n   // col +=  lensflare(uf, vec2(-0.5,0.5))*0.01;\n\n    \n    float off = texture(iChannel0, uv).w;\n     vec3 rad;\n    vec2 offset2 = (fragCoord - iResolution.xy/2.)*1.;\n    for(int i = 0; i < 20; i++){\n       vec2 offset = fragCoord + offset2*smoothstep(0.,15.-length(uv*2.0-1.)*1.5, float(i)/20.)*1.;\n       rad.x += texture(iChannel0, (offset+offset2*0.024)/iResolution.xy).x/float(off+1.);\n       rad.y += texture(iChannel0, (offset)/iResolution.xy).y/float(off+1.);\n       rad.z += texture(iChannel0, (offset-offset2*0.024)/iResolution.xy).z/float(off+1.);\n\n    }\n    rad /= 16.;\n \n   // col = rad;\n    \n    //col = ACESFilm(col);\n    col = clamp(col, 0., 1.);\n     col = vec3(1.)-exp(-1.0*col);\n\n    //NOT MY CODE//////////////////\n    vec3 a = vec3(0.3,0.3,0.4)-0.4;\n    col = mix(col, smoothstep(0.,1.,col),a);\n    //////////////////////////////\n    // Output to screen\n    vec3 aa = vec3(1.0,1.1,1.1);\n    col = sqrt(col/aa);\n    col = (1.0/((1.0)+exp(-(10.)*(col-0.5))));\ncol = pow(col, vec3(1.3))*1.8;\n//col = pow(col, vec3(0.9,0.7,0.9));\ncol = ACESFilm(col);\n    col = pow(col, vec3(1./2.2));\nuv = uv * 2.0 - 1.0;\n//uv.x *= 1.3;\n//uv.y /= 1.3;\ncol *= (1.0-length(uv*0.2));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 rot(vec2 a, float c){\nc = c*3.14159/180.;\nfloat l = length(a);\na/=l;\n\nfloat ang = (a.y < 0.)?2.*3.14159-acos(a.x):acos(a.x);\nang += c;\n\nreturn l*vec2(cos(ang), sin(ang));\n}\n\nuint wang_hash(inout uint seed)\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n \nfloat rndf(inout uint state)\n{\n    return float(wang_hash(state)) / 4294967296.0;\n}\n\n\nfloat box(vec2 p, vec2 s){\nvec2 a = abs(p)-s;\nreturn max(a.x, a.y);\n}\n\nfloat torus(vec2 p, vec2 s){\nreturn length((normalize(p)*s.x)-p)-s.y;\n}\n\nvec3 l = vec3(0.);\nbool ref = false;\nvec3 c = vec3(1.);\nvec2 hash2( vec2 p )\n{\n\treturn textureLod( iChannel1, (p+0.5)/256.0, 0.0 ).xy;\n}\nvec2 voronoi(vec2 p){\nvec2 f = floor(p);\nvec2 res = vec2(8.);\nfor(int i = 0; i < 9; i++){\nvec2 coords = f + vec2(mod(float(i),3.)-1., float(i/3)-1.);\nvec2 o = hash2( coords );\no = 0.5 + 0.4*sin(6.2831*o );\nvec2 pos = (coords+o);\nfloat d = dot(pos-p,pos-p);\nif( d < res.x )\n{\n    res.y = res.x;\n    res.x = d;\n}\nelse if( d < res.y )\n{\n    res.y = d;\n}\n}\nreturn res;\n}\nfloat jb(vec3 p){\n    float s=3., e;\n    s*=e=3./min(dot(p,p),50.);\n    p=abs(p)*e;\n  //  escape = 0.;\n    for(int i=0;i++<17;){\n        p=vec3(2,4,2)-abs(p-vec3(2,4,2)),\n            s*=e=8./min(dot(p,p),10.),\n            p=abs(p)*e;\n        //    escape += exp(-0.2*dot(p,p));\n            }\n    return min(length(p.xz)-.1,p.y)/s;\n}\n/////////////////\n\n  float DEmine(vec3 p0){\nvec4 p = vec4(p0, 1.);\nfor(int i = 0; i < 7; i++){\np*=4.8;\np.xyz = mod(p.xyz-1.5, 3.)-1.5;\nfloat m = length(p.xyz);\n\np/=dot(p.xyz,p.xyz)+mod(m, 1.);\n\n}\n\nreturn length(p.xyz)/p.w;\n}\nfloat sdPentagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(0.809016994,0.587785252,0.726542528);\n    p.x = abs(p.x);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n    p -= vec2(clamp(p.x,-r*k.z,r*k.z),r);    \n    return length(p)*sign(p.y);\n}\nfloat dis(vec2 p){\nl = vec3(0.);\nc = vec3(1.);\n\nref = false;\nfloat a2 = voronoi(p*0.2).x*0.1;\nvec3 pos = vec3(p, 1.8);\npos.yz = rot(pos.yz, 0.);\nfloat a = DEmine(pos/1.)*1.;\n//a = torus(mod(p, 2.)-1., vec2(.9,.1));\n//2 = torus(mod(p,5.)-2.5, vec2(.9,.1));\n//if(length(mod(p,3.)-1.5) < 0.9 ){\n//a = -0.05;\n//}\nif(a < 0.01){\na = -0.05;\n}\nif(a2 < 0.01){\na2 = -0.05;\n}\n//float b1 = box(rot(mod(vec2(0.,0.)-p, 5.)-2.5, 0.), vec2(0.7,.4));\nfloat b2 = torus(mod(vec2(0.,0.)-p,5.)-2.5, vec2(.9,.1));\nfloat b1 = torus(vec2(0.,0.)-p, vec2(.8,.1));\n\n//b1 = box(p, vec2(.5,0.5));\n//b2 = box(p, vec2(.5,0.5));\n\nfloat c2 = abs(box(rot(mod(vec2(-3.,0.)-p, 5.)-2.5, 45.), vec2(5.1, .2)))-0.1;\nfloat d = abs(box(mod(vec2(0., -1.5)-p, 5.)-2.5, vec2(2., 0.2)))-0.1;\nfloat e = abs(box(rot(mod(vec2(3.,0.)-p, 5.)-2.5, -45.), vec2(5.1, .2)))-.1;\nfloat fin = min(min(a, min(b2,b1)),min(min(d,e),c2));\nif(fin == b1 || fin == b2){l = vec3(3.);}\nif(fin == e || fin == d || fin == c2){ref = true;c = vec3(0.2,0.3,0.9);}\nif(fin == a){\n//c = vec3(0.2,0.9,0.9);\nref = false;c = vec3(0.7,0.6,0.2);\n}\nif(fin == a2){\n//c = vec3(0.2,0.9,0.9);\nref = false;c = vec3(0.1,0.6,0.7);\n}\nreturn fin;\n}\n\nvec3 wavetorgb(float wave){\nvec3 col = vec3(0.);\nif(wave > 410. && wave < 440.){\ncol = vec3(0.19-0.19*(440.-wave)/30., 0., 1.);\n}else if(wave > 440. && wave < 490.){\ncol = vec3(0., 1.0-(490.-wave)/50., 1.);\n}else if(wave > 490. && wave < 510.){\ncol = vec3(0., 1., (510.-wave)/20.);\n}else if(wave > 510. && wave < 580.){\ncol = vec3(1.-(580.-wave)/70., 1., 0.);\n}else if(wave > 580. && wave < 640.){\ncol = vec3(1., (640.-wave)/60., 0.);\n}else if(wave > 640. && wave < 700.){\ncol = vec3(1., 0., 0.);\n}else if(wave > 700. && wave < 780.){\ncol = vec3(0.35-0.65*(780.-wave)/80., 0., 0.);\n}\n\n\nreturn col;\n}\n\nvec2 norm(vec2 p){\nreturn normalize(vec2(\ndis(vec2(p.x+0.01, p.y))-dis(vec2(p.x-0.01, p.y)),\ndis(vec2(p.x, p.y+0.01))-dis(vec2(p.x, p.y-0.01)))\n);\n}\n\nfloat f_wavelength(float wave, float a, float b){\nreturn exp(-pow((wave-(b+a)/2.)/((b-a)/2.),2.));\n}\n\nvec3 wavetorgb3(float wave){\nreturn vec3(\nf_wavelength(wave, 520., 630.),\nf_wavelength(wave, 500., 590.),\nf_wavelength(wave, 410., 480.)\n);\n}\n\nvec3 wavetorgb2(float wave){\nreturn vec3(\nexp(-pow((wave-630.)/30.,2.))+exp(-pow((wave-430.)/10.,2.)),\nexp(-pow((wave-530.)/20.,2.)),\nexp(-pow((wave-470.)/20.,2.))\n)*2.;\n}\n\nvec3 wavetoxyz(float wave){\nfloat x = 1.065*exp(-0.5*pow((wave-595.8)/33.33,2.))+0.366*exp(-0.5*pow((wave-446.8)/19.44,2.));\nfloat y = 1.014*exp(-0.5*pow((log(wave)-log(556.3))/0.075,2.));\nfloat z = 1.839*exp(-0.5*pow((wave-449.8)/0.051,2.));\nreturn vec3(x,y,z);\n}\n\nvec3 XYZtorgb(vec3 XYZ){\nvec3 RGB = vec3(3.2404542*XYZ.x - 1.5371385*XYZ.y - 0.4985314*XYZ.z,\n-0.9692660*XYZ.x + 1.8760108*XYZ.y + 0.0415560*XYZ.z,\n0.0556434*XYZ.x - 0.2040259*XYZ.y + 1.0572252*XYZ.z\n);\nreturn RGB;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uint r = uint(uint(fragCoord.x) * uint(1973) \n    + uint(fragCoord.y) * uint(9277) \n    + uint(iFrame) * uint(26699)) | uint(1);\n    vec2 odd = vec2(rndf(r), rndf(r))*2.0-1.0;\n    odd /= iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    uv += odd*2.;\n    uv.x *= 1.3;\n    uv.y /= 1.3;\n    \n    int tiles = 2;\n    int samples =150;\n    float jk = float(iFrame%samples);\n\n    vec2 res = iResolution.xy / float(tiles);\n    int times = (iFrame/samples);\n    vec2 time = vec2(float(times%tiles), float((times/tiles)%(tiles)));\n    vec2 rr = res*time;\n    \n    if(fragCoord.x < (rr.x) || fragCoord.x > (rr.x+res.x))discard;\n    if(fragCoord.y < (rr.y) || fragCoord.y > (rr.y+res.y))discard;\n  \n    \n    vec2 p = uv*5.;\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    float ang = rndf(r)*2.*3.14159;\n    vec2 d = vec2(cos(ang), sin(ang));\n    float select = rndf(r);\n    float wave = 410. + 370.*select;\n    \n    if(dis(p) < 0.01 && ref == true ){\n        vec2 n = norm(p); \n        vec2 p2 = p;\n        for(int k = 0; k < 80; k++){\n            float dist2 = -dis(p2);\n            if(dist2 < 0.01){\n                vec2 n2 = norm(p2+d*0.02);\n                d = refract(d, -n2, select);\n                p2 += n2*0.05; \n                break;\n            }\n            p2 += d*dist2;\n        }\n        \n         p = p2;\n    }else if(dis(p) < 0.01 && ref == false && (l.x == 0. && l.y == 0. && l.z == 0.)){\n        vec2 n = norm(p); \n           // col += c*max(dot(n, vec2(0.,1.)),0.2);\n\n        vec2 p2 = p;\n        for(int k = 0; k < 80; k++){\n            float dist2 = -dis(p2);\n            if(dist2 < 0.01){\n                vec2 n2 = norm(p2+d*0.02);\n                p2 += n2*0.05; \n                break;\n            }\n            p2 += d*dist2;\n        }\n         p = p2;\n    }\n    bool firsthit = false;\n    vec2 n2 = vec2(0.);\n    vec3 c2 = vec3(0.);\n    vec3 tt = wavetorgb(wave);\n    for(int i = 0; i < 420; i++){\n        float dist = dis(p);\n        if(length(p) > 20.)break;\n        if(dist < 0.01){\n            vec2 n = norm(p-d*0.02); \n            c2 = c;\n            if(!firsthit){\n            n2 = n;\n            c2 = c;\n            firsthit = true;\n            }\n            if(ref){\n            d = refract(d,n,1.0-select);\n            vec2 p2 = p-n*0.05;\n                for(int k = 0; k < 80; k++){\n                    float dist2 = -dis(p2);\n                    if(dist2 < 0.001){\n                        vec2 n2 = norm(p2+d*0.02);\n                        d = refract(d, -n2, select);\n                        p2 += n2*0.05; \n                        break;\n                    }\n                    p2 += d*dist2;\n                }\n                p = p2;\n                tt *= c2;\n            }else if((l.x > 0.01 || l.y > 0.01 || l.z > 0.01) && !ref){\n                col += l*tt*dot(n2, vec2(0.,1.));\n                //d = reflect(d,n);\n                //p += n*0.03;\n                break;\n            }else if((l.x == 0. && l.y == 0. && l.z == 0.) && !ref){\n                d = reflect(d, n);\n                tt *= c2;\n               // d = normalize(d + normalize(vec2(rndf(r), rndf(r))*2.0-1.0));\n                p += n*0.05;\n            }\n            \n        }\n        \n        p += d*dist;\n    }\n    col = clamp(col, 0., 15.);\n    if(jk != 0.){\n    col += texture(iChannel0, fragCoord/iResolution.xy).xyz;\n    }\n    // Output to screen\n    fragColor = vec4(col,jk);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}