{
    "Shader": {
        "info": {
            "date": "1651048563",
            "description": "Got bored and wanted to play around with some noise so I figured trying this could be fun.",
            "flags": 0,
            "hasliked": 0,
            "id": "ftlBzS",
            "likes": 0,
            "name": "Perlin noise from standard Noise",
            "published": 3,
            "tags": [
                "noiseperlinnoise"
            ],
            "usePreview": 0,
            "username": "JustBoredYo",
            "viewed": 186
        },
        "renderpass": [
            {
                "code": "//Itterations to smooth the noise\nfloat octaves = 8.;\n//\"Size\" of the sampled noise texture | Doubles each itteration\nfloat frequency = 0.125;\n//\"Height\" of the sampled value | Halfes each itteration\nfloat amplitude = 1.;\n//Size of the uv space | 1 = noise texture is sampled once across the screen, 2 = twice, etc.\nfloat size = 1.0;\n//Final color of the pixel\nvec4 final = vec4(0.);\n//Radius of the circle in which the noise is shown\nfloat maskRadius = 200.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    maskRadius *= ((sin(iTime)+1.)/2.);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy/iResolution.xy)*size;\n    \n    for(float i = 0.; i < octaves; i++)\n    {\n        //Sample region which increases each itteration\n        vec4 col = texture(iChannel0, (uv*frequency));\n        \n        //Just to get it to be black and white\n        col = vec4(col.x *= amplitude);\n        //You want to see it, right?\n        col.w = 1.0;\n        \n        //Added as it is normalized at the end\n        final += col;\n        \n        //Double/Half the values for the next itteration\n        frequency *= 2.;\n        amplitude *= .5;\n        \n    }\n    \n    //Calculate how far away the point is and normalize from 0(outside or edge) to 1(center)\n    float mask = (maskRadius - sqrt((fragCoord.x - iResolution.x/2.)*(fragCoord.x - iResolution.x/2.)+(fragCoord.y - iResolution.y/2.)*(fragCoord.y - iResolution.y/2.)))/maskRadius;\n        \n    //Normalize to not just have a white image and multiply with mask to get a smooth falloff\n    final = (normalize(final)*(octaves/2.))*mask;\n    \n    // Output to screen\n    fragColor = vec4(final);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}