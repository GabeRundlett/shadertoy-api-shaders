{
    "Shader": {
        "info": {
            "date": "1618301095",
            "description": "License CC0: Starry background with nebula\nCreated for another shader but thought the background could be useful to others so extracted it\n",
            "flags": 0,
            "hasliked": 0,
            "id": "fdXXR4",
            "likes": 17,
            "name": "Starry background with nebula",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 922
        },
        "renderpass": [
            {
                "code": "// License CC0: Starry background with nebula\n//  Created for another shader but thought the background could be useful to others so extracted it\n\n// Controls how many layers of stars\n#define LAYERS            5.0\n\n// QUINTIC or HERMITE interpolation?\n#define QUINTIC\n\n// How often to change the nebula\n#define PERIOD            15.0\n\n#define PI                3.141592654\n#define TAU               (2.0*PI)\n#define TIME              iTime\n#define RESOLUTION        iResolution\n#define ROT(a)            mat2(cos(a), sin(a), -sin(a), cos(a))\n#define PCOS(x)           (0.5 + 0.5*cos(x))\n#define TTIME             (TAU*TIME)\n\nconst mat2 rotSome          = ROT(1.0);\n\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\nfloat hash(vec2 co) {\n  co += 123.4;\n  return fract(sin(dot(co, vec2(12.9898,58.233))) * 13758.5453);\n}\n\nvec2 hash2(vec2 p) {\n  p = vec2 (dot (p, vec2 (127.1, 311.7)),\n            dot (p, vec2 (269.5, 183.3)));\n\n  return -1. + 2.*fract (sin (p)*43758.5453123);\n}\n\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c) {\n  const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// http://mercury.sexy/hg_sdf/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\nvec3 toSpherical(vec3 p) {\n  float r   = length(p);\n  float t   = acos(p.z/r);\n  float ph  = atan(p.y, p.x);\n  return vec3(r, t, ph);\n}\n\nvec3 postProcess(vec3 col, vec2 q)  {\n  col=pow(clamp(col,0.0,1.0),vec3(1.0/2.2)); \n  col=col*0.6+0.4*col*col*(3.0-2.0*col);  // contrast\n  col=mix(col, vec3(dot(col, vec3(0.33))), -0.4);  // satuation\n  col*=0.5+0.5*pow(19.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.7);  // vigneting\n  return col;\n}\n\n// From one of IQ's value noise shaders\nfloat vnoise(vec2 x) {\n  vec2 i = floor(x);\n  vec2 w = fract(x);\n\n#ifdef QUINTIC\n  // quintic interpolation\n  vec2 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n#else\n  // cubic interpolation\n  vec2 u = w*w*(3.0-2.0*w);\n#endif    \n\n  float a = hash(i+vec2(0.0,0.0));\n  float b = hash(i+vec2(1.0,0.0));\n  float c = hash(i+vec2(0.0,1.0));\n  float d = hash(i+vec2(1.0,1.0));\n    \n  float k0 =   a;\n  float k1 =   b - a;\n  float k2 =   c - a;\n  float k3 =   d - c + a - b;\n\n  float aa = mix(a, b, u.x);\n  float bb = mix(c, d, u.x);\n  float cc = mix(aa, bb, u.y);\n  \n  return k0 + k1*u.x + k2*u.y + k3*u.x*u.y;\n}\n\nfloat globalCloudDensity(vec2 p, float off) {\n  vec2 pp = p;\n\n  p *= 3.33;\n\n  float gcd = vnoise(p+off);\n  gcd *= smoothstep(PI/2.0, PI/4.0, abs(pp.x));\n  gcd *= smoothstep(PI/6.0, PI/18.0, abs(pp.y));\n\n  return gcd;\n}\n\nfloat localCloudDensity(vec2 p, float off) {\n  p *= 10.0;\n  const float aa = -0.45;\n  const mat2 pp = 2.03*rotSome;\n  float a = 0.5;\n  float s = 0.0;\n  p += off;\n\n  s += a*vnoise(p); a *= aa; p *= pp;\n  s += a*vnoise(p); a *= aa; p *= pp;\n  s += a*vnoise(p); a *= aa; p *= pp;\n  s += a*vnoise(p); a *= aa; p *= pp;\n  s += a*vnoise(p); a *= aa; p *= pp;\n    \n  return s*2.75;\n}\n\nvec3 clouds(vec3 ro, vec3 rd, out float cloudDensity) {\n  vec3 srd = toSpherical(rd.zxy);\n  float y = sin(srd.y);\n\n  vec2 pp = srd.zy;\n  pp.x *= y;\n  pp.y -= PI/2.0;\n  pp *= ROT(0.5);\n\n  float h = hash(floor(2.0+TIME/PERIOD));\n  float off = 10.0*fract(123.0*h)+100.0;\n\n  float gcd = globalCloudDensity(pp, off);\n\n  float cd = gcd*localCloudDensity(pp, off);\n  float cdo = gcd*localCloudDensity(pp+00.075*vec2(0.125, -0.25), off);\n  cloudDensity = cd;\n\n  // Basis for some very fake shading\n  float cli = mix(-0.5, 1.0, 0.5 + 0.5*tanh_approx(12.0*(cd-cdo)));\n  \n  float tc = clamp(cd, 0.0, 1.0);\n  float huec = (mix(-0.2, 0.05, tc)+0.05)-0.15*(h-0.5)-0.0;\n  float satc = mix(0.9, 0.5, tc);\n  float bric = 1.0;\n  vec3 colc = hsv2rgb(vec3(huec, satc, bric))+cli*vec3(0.9, 0.7, 0.9);\n  tc *= tc;\n\n  vec4 cc = vec4(colc*0.66, tc);\n  cc = clamp(cc, 0.0, 1.0);\n\n  return cc.xyz*cc.w;\n}\n\nvec3 stars(vec3 ro, vec3 rd, float cloudDensity) {\n  vec3 col = vec3(0.0);\n  vec3 srd = toSpherical(rd.xzy);\n  \n  const float m = LAYERS;\n\n  for (float i = 0.0; i < m; ++i) {\n    vec2 pp = srd.yz+0.5*i;\n    float s = i/(m-1.0);\n    vec2 dim  = vec2(mix(0.025, 0.003, s)*PI);\n    vec2 np = mod2(pp, dim);\n    vec2 h = hash2(np+127.0+i);\n    vec2 o = -1.0+2.0*h;\n    float y = sin(srd.y);\n    pp += o*dim*0.5;\n    pp.y *= y;\n    float l = length(pp);\n  \n    float h1 = fract(h.x*109.0);\n    float h2 = fract(h.x*113.0);\n    float h3 = fract(h.x*127.0);\n\n    vec3 hsv = vec3(fract(0.025-0.4*h1*h1), mix(0.5, 0.125, s), 1.0);\n    vec3 scol = mix(8.0*h2, 0.25*h2*h2, s)*hsv2rgb(hsv);\n\n    vec3 ccol = col+ exp(-(2000.0/mix(2.0, 0.25, s))*max(l-0.001, 0.0))*scol;\n    float p = i < 3.0 ? mix(0.125, 2.0, cloudDensity)*y : y;\n    p = clamp(p, 0.0, 1.0);\n    col = h3 < p ? ccol : col;\n  }\n  \n  return col;\n}\n\nvec3 grid(vec3 ro, vec3 rd) {\n  vec3 srd = toSpherical(rd.xzy);\n  \n  const float m = 1.0;\n\n  const vec2 dim = vec2(1.0/8.0*PI);\n  vec2 pp = srd.yz;\n  vec2 np = mod2(pp, dim);\n\n  vec3 col = vec3(0.0);\n\n  float y = sin(srd.y);\n  float d = min(abs(pp.x), abs(pp.y*y));\n  \n  float aa = 2.0/RESOLUTION.y;\n  \n  col += 2.0*vec3(0.5, 0.5, 1.0)*exp(-2000.0*max(d-0.00025, 0.0));\n  \n  return 0.25*tanh(col);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord.xy/RESOLUTION.xy; \n  vec2 p = -1.0 + 2.0*q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n\n  vec3 ro = vec3(2.0, 0, 0.);\n  ro.xy *= ROT(-0.33*sin(TTIME/12.0));\n  ro.xz *= ROT(1.5+0.33*sin(TTIME/12.0));\n  vec3 la = vec3(0.0, 0.0, 0.0);\n\n  vec3 ww = normalize(la - ro);\n  vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww));\n  vec3 vv = normalize(cross(ww,uu));\n\n  const float rdd = 2.0;\n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n\n  vec3 col = vec3(0.0);\n\n  float cloudDensity;  \n  col += clouds(ro, rd, cloudDensity);\n  col += stars(ro, rd, cloudDensity);\n  col += grid(ro, rd);\n  \n  col = clamp(col, 0.0, 1.0);\n  fragColor = vec4(postProcess(col, q),1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}