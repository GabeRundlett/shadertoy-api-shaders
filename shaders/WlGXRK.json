{
    "Shader": {
        "info": {
            "date": "1583101086",
            "description": "potato",
            "flags": 32,
            "hasliked": 0,
            "id": "WlGXRK",
            "likes": 39,
            "name": "day 73",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 857
        },
        "renderpass": [
            {
                "code": "\n// SHOUTOUT TO LUNA, SHE HAS AWESOME GOLD STUFF shadetoy.com/user/yx\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n\tvec2 uvn = (fragCoord - 0.5*iResolution.xy)/iResolution.xy;\n    \n    \n    //float m = pow(abs(sin(p.z*0.03)),10.);\n\n    // Radial blur\n    float steps = 10.;\n    float scale = 0.00 + dot(uvn,uvn)*0.05;\n    float chromAb = dot(uvn,uvn)*4.;\n    vec2 offs = vec2(0) + texture(iChannel1, uv + iTime*4.).xz*0.001;\n    vec4 radial = vec4(0);\n    for(float i = 0.; i < steps; i++){\n    \n        scale *= 0.99;\n        vec2 target = uv + offs;\n        offs -= normalize(uvn)*scale/steps;\n    \tradial.x += texture(iChannel0, target + chromAb*1./iResolution.xy).x;\n    \tradial.y += texture(iChannel0, target).y;\n    \tradial.z += texture(iChannel0, target - chromAb*1./iResolution.xy).z;\n    }\n    \n    \n    \n    radial /= steps;\n    \n    fragColor = texture(iChannel0, uv)*0.8 + radial*1.5;\n    \n    fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.7);\n    fragColor *= 0.6;\n    fragColor = pow(fragColor, vec4(0.45));\n\n    \n    //fragColor = mix(fragColor,smoothstep(0.,1.,fragColor), 0.5);\n    //fragColor *= 1. - dot(uvn,uvn)*2.;\n    \n    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Fork of \"day 75\" by jeyko. https://shadertoy.com/view/3tGXRK\n// 2020-03-01 19:53:26\n\nvec3 attenuation = vec3(1);\n\n#define mx (iTime + 20.*iMouse.x/iResolution.x)\n\n#define pmod(p,x) mod(p,x) - x*0.5\n\n#define dmin(a,b) a.x < b.x ? a : b\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n\n\n#define modDist 1.\n#define HEIGHT 0.5\n\n#define pi acos(-1.)\n#define tau (2.*pi)\n#define pal(a,b,c,d,e) ( (a) + (b)*sin(tau*((c)*(d) +(e)) ))\n// The \"Stairs\" flavour produces n-1 steps of a staircase:\n// much less stupid version by paniq\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a,b), 0.5 * (u + a + abs ((mod (u - a + s, 2. * s)) - s)));\n}\n\n\nfloat side = 1.;\nvec3 glow = vec3(0);\nvec3 glowB = vec3(0);\n\nvec2 map(vec3 p){\n\tvec2 d= vec2(10e6);\n\n    p.y += sin(p.z + p.x*4.  + iTime)*0.02;\n    \n    \n    vec3 q = p;\n    \n    vec2 id = floor(p.xz);\n    p.xz = pmod(p.xz, modDist);\n    vec3 j = p;\n    \n    float dBall = length(p) - 0.14;\n    \n    d = dmin(d, vec2(dBall, 0.));\n    #define colW 0.1\n    \n    j.xz = abs(j.xz)- colW;\n    vec3 k = j;\n    j = abs(j);\n    vec3 i = j;\n    j.y -= HEIGHT*0.95;\n    for (int i =0; i < 3; i ++){\n        j = abs(j);\n        \n        j.x -= 0.05;\n        j.xy *= rot(-0.25*pi + sin(iTime+ id.y*0.1) - 0.34 );\n        j.xz *= rot(-0.25*pi);\n    }\n    \n    \n    float dCol = min\n        (max(j.x, j.z),max(k.x, k.z) );\n    \n    \n    \n    d = dmin(d, vec2(dCol, 1.));\n    \n    float dGoldA = min(length(j.xz),length(k.xz) ) - 0.01 ;\n    \n    d = dmin(d, vec2(dGoldA, 2.));\n    \n    i = abs(i);\n    i.xy *= rot(0.4);\n    i.xz *= rot(0.2);\n    i = abs(i);\n    i.xz *= rot(0.6*pi);\n    \n    dGoldA = length(i.xy)- 0.03 ;\n    d = dmin(d, vec2(dGoldA, 2.));\n    \n\n    p.xz = pmod(p.xz, 0.2);\n    \n    p.y -= 0.3;\n    p = abs(p) - 0.001;\n    \n    float dGlow = min(\n    \tlength(p.xy) - 0.1,\n    \tlength(p.zy) - 0.1\n    );\n    \n    //d = dmin(d, vec2(dGlow,9.));\n    //float attenC = pow(abs(sin(q.z*0.1  + sin(q.x*0.2 + iTime)*2. + sin(q.y*3.)*0. + iTime*2.2)), 200.);\n    float attenC = pow(abs( sin(q.x +iTime + sin(q.z*0.1 + iTime) + q.z) ), 40.);\n\n    //float attenC = 0.2;\n    \n    vec3 col = pal(0.2,0.8 ,vec3(0.1 + pow(abs(sin(iTime*1.)), 40. )*0.005,2.2,0.3),0.5 + sin(iTime)*0.005,0.5 - attenC*0.6);\n\n    glowB += exp(-dGlow*20.) * col*attenuation*4.*attenC;    \n    \n    \n    q.xz = pmod(q.xz, 0.2);\n    \n    float dCeilings = q.y + HEIGHT;\n    dCeilings = min(dCeilings,-q.y + HEIGHT);\n    \n    dCeilings += max(exp(-q.x*100.), exp(-q.z*100.))*0.0000004;\n    \n    d = dmin(d, vec2(dCeilings, 0.));\n    \n    \n    \n    //d = dmin(d, vec2(dGlow, 5.));\n    \n    d.x *= 0.5;\n    \n    //d.x *= 0.5;\n    return d;\n}\n\n\nvec2 march(vec3 ro, vec3 rd,inout vec3 p,inout float t,inout bool hit){\n\tvec2 d = vec2(10e6);\n    p = ro; t = 0.; hit = false;\n    \n    for(int i = 0; i < 150 ; i++){\n    \td = map(p);\n        d.x *= side;\n        glow += exp(-max(d.x, 0.)*80.)*attenuation*1.;\n        \n        \n        if(d.x < 0.001 || t > 20.){\n        \thit = true;\n            break;\n        }\n        t+=d.x;\n        p += rd*d.x;\n    }\n    \n    \n    return d;\n}\n\nvec3 getNormal(vec3 p){\n\tvec2 t= vec2(0.001,0);\n    return normalize(vec3(\n    \tmap(p - t.xyy).x - map(p + t.xyy).x ,\n    \tmap(p - t.yxy).x - map(p + t.yxy).x ,\n    \tmap(p - t.yyx).x - map(p + t.yyx).x \n    ));\n}\n\nvec3 getNormala(vec3 p){\n\tvec2 t= vec2(0.0001,0);\n    return normalize(map(p).x - vec3(\n    \tmap(p - t.xyy).x,\n    \tmap(p - t.yxy).x,\n    \tmap(p - t.yyx).x \n    ));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y,\n        d;\n\n    uv *= 1. + length(uv)*0.2;\n    \n    vec3 col = vec3(0),\n    \t ro = vec3(0),\n    \t rd = normalize(vec3(uv,1.)),\n         p;\n\n    ro.y += sin(iTime)*0.04;    \n    ro.z += mx;\n    \n    \n    rd.xy *= rot(sin(iTime*0.7)*0.02);\n    float t; bool hit;\n    float tB = 0.;\n    \n    for(int i = 0; i < 2 + min(iFrame, 0); i++){\n    \td = march(ro, rd, p,t, hit);\n    \t\n        if(i == 0)\n            tB = t;\n        \n        vec3 n = getNormal(p)*side;\n        \n        //float diff = max();\n        \n        if(d.y == 0.){\n        \t//col += 0.1;\n            /*\n            if(i == 0)\n                glow *= 0.5;\n            attenuation *= 0.5;*/\n        }\n        if(d.y == 2.){\n            vec3 c = vec3(0.7,0.6,0.5)*4.;\n            if(i == 0)\n                glow *= c*1.;\n            \n            glow *= c*1.;\n        \tattenuation *= c*0.6;\n        }\n        if(d.y == 1.){\n        \t//col += 0.1;\n            //vec3 c = vec3(0.1,0.6,0.9);\n            vec3 c = vec3(0.11,0.1,0.1);\n            if(i == 0)\n                glow *= c;\n            glow *= c;\n        \tattenuation *= c*3.;\n            //side *= -1.;\n        \trd = refract(rd, n, 0.4 + sin(p.x*40. + p.y*40. + iTime)*0.2);\n        \t//rd = reflect(rd, n);\n        } else {\n        \trd = reflect(rd, n);\n            \n        }\n        \n        \n        ro = p + rd*0.05;\n        \n        \n        attenuation *= 0.7;\n    }\n    \n    \n    glow = pow(glow, vec3(1.1))*0.02;\n    \n\tcol += glow*0.02;\n\tcol += glowB*0.01;\n    \n    col = clamp(col, 0., 10.);\n    \n    \n    col = mix(col, vec3(0.7), smoothstep(0.,1.,tB*0.05));\n    \n    \n    uv *= 0.8;\n    col *= 1. - dot(uv,uv);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}