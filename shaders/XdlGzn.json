{
    "Shader": {
        "info": {
            "date": "1361268206",
            "description": "This shader implements software rasterization. Tex coordinates (and other vertex attributes) are interpolated correctly. Polygon clipping is not implemented though. See  for a more complex object.",
            "flags": 0,
            "hasliked": 0,
            "id": "XdlGzn",
            "likes": 84,
            "name": "Rasterizer - Cube",
            "published": 3,
            "tags": [
                "3d",
                "rasterizer"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 10446
        },
        "renderpass": [
            {
                "code": "// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// a perspective correct triangle rasterizer, in a shader!! :D\n\nmat4 setRotation( float x, float y, float z )\n{\n    float a = sin(x); float b = cos(x); \n    float c = sin(y); float d = cos(y); \n    float e = sin(z); float f = cos(z); \n\n    float ac = a*c;\n    float bc = b*c;\n\n    return mat4( d*f,      d*e,       -c, 0.0,\n                 ac*f-b*e, ac*e+b*f, a*d, 0.0,\n                 bc*f+a*e, bc*e-a*f, b*d, 0.0,\n                 0.0,      0.0,      0.0, 1.0 );\n}\n\nmat4 setTranslation( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,     y,   z, 1.0 );\n}\n\nstruct Triangle\n{\n    vec3 a; vec2 aUV;\n    vec3 b; vec2 bUV;\n    vec3 c; vec2 cUV;\n    vec3 n;\n};\n\nconst vec3 vertsCube[8]  = vec3[8]( vec3( -1.0, -1.0, -1.0 ),\n                                    vec3( -1.0, -1.0,  1.0 ),\n                                    vec3( -1.0,  1.0, -1.0 ),\n                                    vec3( -1.0,  1.0,  1.0 ),\n                                    vec3(  1.0, -1.0, -1.0 ),\n                                    vec3(  1.0, -1.0,  1.0 ),\n                                    vec3(  1.0,  1.0, -1.0 ),\n                                    vec3(  1.0,  1.0,  1.0 ) );\nconst vec3 vertsFloor[4] = vec3[4]( vec3( -3.0, -1.0, -3.0 ),\n                                    vec3( -3.0, -1.0,  3.0 ),\n                                    vec3(  3.0, -1.0,  3.0 ),\n                                    vec3(  3.0, -1.0, -3.0 ) );\n\nTriangle triangles[14];\n\nvoid createCube( void )\n{\n    triangles[0].a = vertsCube[1]; triangles[0].aUV = vec2(0.0,0.0);\n    triangles[0].b = vertsCube[5]; triangles[0].bUV = vec2(1.0,0.0);\n    triangles[0].c = vertsCube[7]; triangles[0].cUV = vec2(1.0,1.0);\n    triangles[0].n = vec3( 0.0, 0.0, 1.0 );\n    triangles[1].a = vertsCube[1]; triangles[1].aUV = vec2(0.0,0.0),\n    triangles[1].b = vertsCube[7]; triangles[1].bUV = vec2(1.0,1.0),\n    triangles[1].c = vertsCube[3]; triangles[1].cUV = vec2(0.0,1.0),\n    triangles[1].n = vec3( 0.0, 0.0, 1.0 );\n\n    triangles[2].a = vertsCube[5]; triangles[2].aUV = vec2(0.0,0.0);\n    triangles[2].b = vertsCube[4]; triangles[2].bUV = vec2(1.0,0.0);\n    triangles[2].c = vertsCube[6]; triangles[2].cUV = vec2(1.0,1.0);\n    triangles[2].n = vec3( 1.0, 0.0, 0.0 );\n    triangles[3].a = vertsCube[5]; triangles[3].aUV = vec2(0.0,0.0);\n    triangles[3].b = vertsCube[6]; triangles[3].bUV = vec2(1.0,1.0);\n    triangles[3].c = vertsCube[7]; triangles[3].cUV = vec2(0.0,1.0);\n    triangles[3].n = vec3( 1.0, 0.0, 0.0 );\n\n    triangles[4].a = vertsCube[3]; triangles[4].aUV = vec2(0.0,0.0);\n    triangles[4].b = vertsCube[7]; triangles[4].bUV = vec2(1.0,0.0);\n    triangles[4].c = vertsCube[6];;triangles[4].cUV = vec2(1.0,1.0);\n    triangles[4].n = vec3( 0.0, 1.0, 0.0 );\n    triangles[5].a = vertsCube[3]; triangles[5].aUV = vec2(0.0,0.0);\n    triangles[5].b = vertsCube[6]; triangles[5].bUV = vec2(1.0,1.0);\n    triangles[5].c = vertsCube[2]; triangles[5].cUV = vec2(0.0,1.0);\n    triangles[5].n = vec3( 0.0, 1.0, 0.0 );\n\n    triangles[6].a = vertsCube[0]; triangles[6].aUV = vec2(1.0,0.0);\n    triangles[6].b = vertsCube[6]; triangles[6].bUV = vec2(0.0,1.0);\n    triangles[6].c = vertsCube[4]; triangles[6].cUV = vec2(0.0,0.0);\n    triangles[6].n = vec3( 0.0, 0.0, -1.0 );\n    triangles[7].a = vertsCube[0]; triangles[7].aUV = vec2(1.0,0.0);\n    triangles[7].b = vertsCube[2]; triangles[7].bUV = vec2(1.0,1.0);\n    triangles[7].c = vertsCube[6]; triangles[7].cUV = vec2(0.0,1.0);\n    triangles[7].n = vec3( 0.0, 0.0, -1.0 );\n\n    triangles[8].a = vertsCube[1]; triangles[8].aUV = vec2(1.0,0.0);\n    triangles[8].b = vertsCube[2]; triangles[8].bUV = vec2(0.0,1.0);\n    triangles[8].c = vertsCube[0]; triangles[8].cUV = vec2(0.0,0.0);\n    triangles[8].n = vec3( -1.0, 0.0, 0.0 );\n    triangles[9].a = vertsCube[1]; triangles[9].aUV = vec2(1.0,0.0);\n    triangles[9].b = vertsCube[3]; triangles[9].bUV = vec2(1.0,1.0);\n    triangles[9].c = vertsCube[2]; triangles[9].cUV = vec2(0.0,1.0);\n    triangles[9].n = vec3( -1.0, 0.0, 0.0 );\n\n    triangles[10].a = vertsCube[1]; triangles[10].aUV = vec2(0.0,0.0);\n    triangles[10].b = vertsCube[0]; triangles[10].bUV = vec2(0.0,1.0);\n    triangles[10].c = vertsCube[4]; triangles[10].cUV = vec2(1.0,1.0);\n    triangles[10].n = vec3( 0.0, -1.0, 0.0 );\n    triangles[11].a = vertsCube[1]; triangles[11].aUV = vec2(0.0,0.0);\n    triangles[11].b = vertsCube[4]; triangles[11].bUV = vec2(1.0,1.0);\n    triangles[11].c = vertsCube[5]; triangles[11].cUV = vec2(1.0,0.0);\n    triangles[11].n = vec3( 0.0, -1.0, 0.0 );\n}\n\nvoid createFloor( void )\n{\n    triangles[12].a = vertsFloor[0]; triangles[12].aUV = vec2(0.0,0.0);\n    triangles[12].b = vertsFloor[1]; triangles[12].bUV = vec2(0.0,3.0);\n    triangles[12].c = vertsFloor[3]; triangles[12].cUV = vec2(3.0,0.0);\n    triangles[12].n = vec3( 0.0, 1.0, 0.0 );\n    triangles[13].a = vertsFloor[1]; triangles[13].aUV = vec2(0.0,3.0),\n    triangles[13].b = vertsFloor[2]; triangles[13].bUV = vec2(3.0,3.0),\n    triangles[13].c = vertsFloor[3]; triangles[13].cUV = vec2(3.0,0.0),\n    triangles[13].n = vec3( 0.0, 1.0, 0.0 );\n}\n\nfloat cross2d( in vec2 a, in vec2 b )\n{\n    return a.x*b.y - a.y*b.x;\n}\n\nconst vec3 lig = normalize( vec3( 0.3,0.7,0.5) );\n\nvec3 pixelShader( in vec3 nor, in vec2 uv, in float z, in vec3 wnor )\n{\n    float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n    float brdf = 0.5 + 0.8*dif;\n    brdf *= 6.0*exp2( -0.7*abs(z) );\n\t\t\t\n\tvec3 mate = texture( iChannel0, uv ).xyz * abs(wnor.x) + \n\t\t        texture( iChannel1, uv ).xyz * abs(wnor.y) + \n\t\t        texture( iChannel2, uv ).xyz * abs(wnor.z);\n\t\n    vec3 col = brdf * mate;\t\n\t\n    return sqrt( col );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tmat4 mdv = setTranslation( 0.0, 0.5, -5.0 ) * \n\t\t       setRotation( 0.6, 0.0,  0.0 ) * \n\t\t       setRotation( 0.0, 3.1*sin(0.3*iTime), 0.0 );\n\n    vec2 px = (2.0*fragCoord-iResolution.xy) / iResolution.y;\n\n    createCube();\n\tcreateFloor();\n\n    vec3 color = vec3( 0.0, 0.0, 0.0 );\n\n    // clear zbuffer\n    float mindist = -1000000.0;\n\n    // render triangles\n    for( int i=0; i<14; i++ )\n    {\n        // transform to eye space\n        vec3 ep0 = (mdv * vec4(triangles[i].a,1.0)).xyz;\n        vec3 ep1 = (mdv * vec4(triangles[i].b,1.0)).xyz;\n        vec3 ep2 = (mdv * vec4(triangles[i].c,1.0)).xyz;\n        vec3 nor = (mdv * vec4(triangles[i].n,0.0)).xyz;\n\n        // transform to clip space\n        float w0 = 1.0/ep0.z;\n        float w1 = 1.0/ep1.z;\n        float w2 = 1.0/ep2.z;\n\n        vec2 cp0 = 2.0*ep0.xy * -w0;\n        vec2 cp1 = 2.0*ep1.xy * -w1;\n        vec2 cp2 = 2.0*ep2.xy * -w2;\n\n        // fetch vertex attributes, and divide by z\n        vec2 u0 = triangles[i].aUV * w0;\n        vec2 u1 = triangles[i].bUV * w1;\n        vec2 u2 = triangles[i].cUV * w2;\n\n        //-----------------------------------\n        // rasterize\n        //-----------------------------------\n\n        // calculate areas for subtriangles\n        vec3 di = vec3( cross2d( cp1 - cp0, px - cp0 ), \n\t\t\t\t\t    cross2d( cp2 - cp1, px - cp1 ), \n\t\t\t\t\t    cross2d( cp0 - cp2, px - cp2 ) );\n\t\t\n        // if all positive, point is inside triangle\n        if( all(greaterThan(di,vec3(0.0))) )\n        {\n            // calc barycentric coordinates\n            vec3 ba = di.yzx / (di.x+di.y+di.z);\n\n            // barycentric interpolation of attributes and 1/z\n            float iz = ba.x*w0 + ba.y*w1 + ba.z*w2;\n            vec2  uv = ba.x*u0 + ba.y*u1 + ba.z*u2;\n\n            // recover interpolated attributes\n            float z = 1.0/iz;\n            uv *= z;\n\n\t\t\t// depth (-1/z) buffer test\n\t\t\tif( z>mindist )\n\t\t\t{\n\t\t\t\tmindist = z;\n\n\t\t\t\t// perform lighting/shading\n\t\t\t\tcolor = pixelShader( nor, uv, z, triangles[i].n );\n\t\t\t}\n        }\n    }\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 2,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}