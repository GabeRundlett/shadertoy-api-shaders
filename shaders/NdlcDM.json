{
    "Shader": {
        "info": {
            "date": "1642200545",
            "description": "I first learned of the super collider tutorials from athibaul in the comments of his featured sahder \"Techno Song (sound)\"\nhttps://www.shadertoy.com/view/sls3WM\nThe link to those tutorials is in those comments, and in the sound tab of this shader.",
            "flags": 8,
            "hasliked": 0,
            "id": "NdlcDM",
            "likes": 6,
            "name": "Super Collider #3 [Pulse Synth]",
            "published": 3,
            "tags": [
                "pulse",
                "wave",
                "super",
                "collider",
                "supercollider"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 367
        },
        "renderpass": [
            {
                "code": "\n#define LETTER_SIZE 1./16.\n#define STEP_SIZE 1./8.\n#define FIRST_LETTER 64.\n#define FIRST_NUMBER 48.\n\nvec2 numToCoord(float a){\n    return vec2( mod(a,16.), 15.-floor(a/16.) );\n}\n\nvec3 C(vec2 uv, vec2 start, inout float moveX,float num){\n    moveX += STEP_SIZE/2.3;\n    if(uv.x < start.x           || \n       uv.x > start.x+STEP_SIZE || \n       uv.y < start.y           || \n       uv.y > start.y+STEP_SIZE){\n       return vec3(0.);\n    }\n    \n    uv -= start; uv /= STEP_SIZE; uv *= LETTER_SIZE;\n    uv += vec2(LETTER_SIZE*numToCoord(num));\n    return textureGrad(iChannel0,uv,dFdx(uv),dFdy(uv)).rrr;\n}\n\nvoid addC(vec2 st, float char, inout float moveX, inout vec3 col){\n    col = mix(col,vec3(1.),\n             C(st,vec2(moveX,0.45),moveX,FIRST_LETTER+char));\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec2 st = uv;\n    float moveX = 0.23;\n    \n    addC(st,_s,moveX,col);  \n    addC(st,_o,moveX,col);\n    addC(st,_u,moveX,col);  \n    addC(st,_n,moveX,col);\n    addC(st,_d,moveX,col);\n    addC(st,_z+32.+5.,moveX,col);\n    addC(st,_i,moveX,col);\n    addC(st,_n,moveX,col);\n   // Output to screen\n   //col = texture(iChannel0,uv).rgb;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Super Collider Tutorials\n// https://www.youtube.com/playlist?list=PLPYzvS8A_rTaNDweXe6PX4CXSGq4iEWYC\n\n/*\nThis isn't exactly what we get at the end of tutorial #3 because\nfor example reverb is something I don't know how to do yet. I \nmostly hack these functions together based on how the creator\nof the videos describes them (plus whatever I can find online \nquickly.)\n*/\n\nfloat rnd(float a){return fract(sin(a*274.41)*4962.924);}\n\nfloat LFNoise(float t, float freq, float low, float high){\n    float id = floor(t*freq);\n    float seed = rnd(id);\n    float range = abs(high-low);\n    return floor(seed*range) + low;\n}\n\nfloat pulse(float t, float freq, float duty, float phase){\n    return step(1.-duty,mod((t+phase)*freq,1.)); \n}\n\nvec2 theSound(float t, float freq, float maxPartial){\n    vec2 sig; float ampl, freqPulse;\n    \n    ampl = pulse(t, 5., 0.5, 0.);\n    freqPulse = pulse(t, 6., 0.5, 0.)+1.;\n    freq *= LFNoise(t,2.,1.,maxPartial) * freqPulse;\n    sig.x = pulse(t, freq, 0.5,0.)*ampl;\n    \n    ampl = pulse(t, 4., 0.5, 0.3);\n    freqPulse = pulse(t, 7., 0.5, 0.)+1.;\n    freq *= LFNoise(t+800.,2.,1.,maxPartial) * freqPulse;\n    sig.y = pulse(t, freq, 0.5,0.2)*ampl;\n    \n    return sig;\n}\n\nvec2 mainSound( int samp, float time )\n{\n    // A 440 Hz wave that attenuates quickly overt time\n    float freq = LFNoise(time,8.,200.,800.);\n    vec2 sig = theSound(time,20.,7.);\n    float sig1 = pulse(time,freq,0.5,0.);\n    return sig*0.1;//*exp(-3.0*time) )*0.2;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "#define _a 1.\n#define _b 2.\n#define _c 3.\n#define _d 4.\n#define _e 5.\n#define _f 6.\n#define _g 7.\n#define _h 8.\n#define _i 9.\n#define _j 10.\n#define _k 11.\n#define _l 12.\n\n#define _m 13.\n#define _n 14.\n#define _o 15.\n#define _p 16.\n#define _q 17.\n#define _r 18.\n#define _s 19.\n#define _t 20.\n#define _u 21.\n#define _v 22.\n#define _w 23.\n#define _x 24.\n#define _y 25.\n#define _z 26.",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}