{
    "Shader": {
        "info": {
            "date": "1594074818",
            "description": "EPIC OH MY GOSH I DID IT",
            "flags": 0,
            "hasliked": 0,
            "id": "WlBcDz",
            "likes": 1,
            "name": "My Very First Working Raymarcher",
            "published": 3,
            "tags": [
                "3d",
                "ray",
                "raymarch",
                "sphere",
                "raymarcher",
                "first"
            ],
            "usePreview": 0,
            "username": "Zi7ar21",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "#define MAX_MARCHES 256\n#define MAX_DISTANCE 8.0\n#define COLLISION_DISTANCE 0.01\n\n// Distance Estimator\nfloat sphere(vec3 point) {\n\tvec4 spheredef = vec4(0, 0, 2.5, 2);\n    \n    float sphereDist =  length(point-spheredef.xyz)-spheredef.w;\n    return sphereDist;\n}\n\n// March a Ray\nfloat raymarch(vec3 camerapos, vec3 raydir) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_MARCHES; i++) {\n    \tvec3 raypos = camerapos + raydir*dO;\n        float dS = sphere(raypos);\n        dO += dS;\n        if(dO>MAX_DISTANCE || dS<COLLISION_DISTANCE) break;\n    }\n    \n    return dO;\n}\n\n// Get Normal\nvec3 normal(vec3 raypos) {\n\tfloat dis = sphere(raypos);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 normal = dis - vec3(\n        sphere(raypos-e.xyy),\n        sphere(raypos-e.yxy),\n        sphere(raypos-e.yyx));\n    \n    return normalize(normal);\n}\n\n// Shade with Lights\nfloat shade(vec3 march) {\n    vec3 lightposition = vec3(0, 4, 0);\n    lightposition.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 lighting = normalize(lightposition-march);\n    vec3 surfacenormal = normal(march);\n    \n    float diffuseshade = clamp(dot(surfacenormal, lighting), 0., 1.);\n    float distancesurf = raymarch(march+surfacenormal*COLLISION_DISTANCE*2., lighting);\n    if(distancesurf<length(lightposition-march)) diffuseshade *= .1;\n    \n    return diffuseshade;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\t// Camera Orientation\n\tvec3 xdir = vec3(1,0,0);\n\tvec3 ydir = vec3(0,1,0);\n\tvec3 zdir = vec3(0,0,1);\n\tfloat FOV = 45.0;\n\tvec3 camerapos = vec3(0.0, 0.0, 0.0);\n\n    // Undistorted Normalized Pixel Coordinates (From 0 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.x;\n\tvec3 raydir = normalize(FOV*(uv.x*xdir + uv.y*ydir) + zdir);\n\tfloat collide = raymarch(camerapos, raydir);\n\n    // Pixel Color\n    vec3 col = vec3(collide / 4.0);\n\n\t// Shaded Pixel Color\n\tfloat spheredistance = raymarch(camerapos, raydir);\n    vec3 march = camerapos + raydir * spheredistance;\n    float diffuse = shade(march);\n    col = vec3(diffuse);\n\n    // Output to Screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}