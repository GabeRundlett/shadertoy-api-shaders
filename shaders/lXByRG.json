{
    "Shader": {
        "info": {
            "date": "1727364933",
            "description": "originals https://www.shadertoy.com/view/M3sczS",
            "flags": 0,
            "hasliked": 0,
            "id": "lXByRG",
            "likes": 1,
            "name": "cubic cubic ",
            "published": 3,
            "tags": [
                "cube"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 64
        },
        "renderpass": [
            {
                "code": "float DistLine(vec3 rayOrigin, vec3 rayDirection, vec3 point) {\npoint.xy*=mat2(cos(iTime), sin(iTime), -sin(iTime),cos(iTime));\n    vec3 rayOriginToPoint = point - rayOrigin;\n    float parallelogramArea = length(cross(rayOriginToPoint, rayDirection));\n    float distanceToPoint = parallelogramArea / length(rayDirection);\n    return distanceToPoint;\n}\n\nfloat DrawPoint(vec3 rayOrigin, vec3 rayDirection, vec3 point) {\n point.xz*=mat2(cos(iTime), sin(iTime), -sin(iTime),cos(iTime));\n    float distanceToPoint = DistLine(rayOrigin, rayDirection, point);\n    float dotInSpace = smoothstep(0.1, .06, distanceToPoint);\n    return dotInSpace;\n}\n\nfloat DrawCube(vec3 rayOrigin, vec3 rayDirection, vec3 center, float diameter) {\n    float cube = 0.;\n      center.xy*=mat2(cos(iTime), sin(iTime), -sin(iTime),cos(iTime));\n      \n    vec3 offset = vec3(diameter/2.) - center;\n      offset.xz*=mat2(cos(iTime), sin(iTime), -sin(iTime),cos(iTime));\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(0., 0., 0.) - offset);\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(0., 0., diameter) - offset);\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(0., diameter, 0.) - offset);\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(0., diameter, diameter) - offset);\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(diameter, 0., 0.) - offset);\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(diameter, 0., diameter) - offset);\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(diameter, diameter, 0.) - offset);\n    cube += DrawPoint(rayOrigin, rayDirection, vec3(diameter, diameter, diameter) - offset);\n    return cube;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n   \n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Time varying pixel color\n    vec3 changingColor = 0.1 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec3 rayOrigin = vec3(10.*sin(iTime*.75), 0, -5.* cos(iTime*.75)); //.5 + 3.*cos(iTime), -3.); \n    //vec3 rayOrigin = vec3(0, 0, -5.);    // static camera\n    vec3 lookAt = vec3(.0);\n        lookAt.xy*=mat2(cos(iTime), sin(iTime), -sin(iTime),cos(iTime));\n    vec3 forward = normalize(lookAt - rayOrigin);\n        \n    vec3 right = normalize(cross(vec3(1, 1, 0), forward));\n    vec3 up = normalize(cross(forward, right));\n\n    float zoom = .5;\n    vec3 centerOfScreen = rayOrigin + forward*zoom;\n    \n    vec3 intersectionWithScreen = centerOfScreen + uv.x * right + uv.y * up;\n    vec3 rayDirection = intersectionWithScreen - rayOrigin;\n   \n    float dots = 0.;\n    \n        dots += DrawCube(rayOrigin, rayDirection, vec3(-3.*sin(iTime), -3.*sin(iTime), 2), .5+cos(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(-3, 3.*sin(iTime), -3.*cos(iTime)), .5+sin(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(-3.*cos(iTime), 3.*sin(iTime), 3.), .5+tan(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(3., -3.*cos(iTime), -3.*sin(iTime)), .5+sin(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(3, -3.*sin(iTime), 3.*cos(iTime)), .5+cos(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(3.*cos(iTime), 3., -3.*cos(iTime)), .5+tan(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(3, 3.*sin(iTime), 2.*cos(iTime)), .5+sin(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(-1, -1, -1), .5+cos(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(-1, -1, 1), .5+sin(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(-1, 1, -1), .5+cos(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(-1, 1, 1), .5+tan(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(1, -1, -1), .5+sin(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(1, -1, 1), .5+cos(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(1, 1, -1), .5+tan(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(1, 1, 1), .5+sin(iTime));\n        dots += DrawCube(rayOrigin, rayDirection, vec3(-2, -2, -2), .5);\n    dots += DrawCube(rayOrigin, rayDirection, vec3(-2.*cos(iTime), -2.*sin(iTime), 2), .5+tan(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(-2, 2.*cos(iTime), -2.*sin(iTime)), .5+cos(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(-2.*cos(iTime), 2, 2.*sin(iTime)), .5+sin(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(2.*sin(iTime), -2.*cos(iTime), -2), .5+cos(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(2, -2.*cos(iTime), 2.*sin(iTime)), .5+sin(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(2.*sin(iTime), 2.*cos(iTime), -2), .5+cos(iTime));\n    dots += DrawCube(rayOrigin, rayDirection, vec3(2, 2.*cos(iTime), 2.*sin(iTime)), .5+tan(iTime));\n    \n    \n    vec3 col = vec3(dots);\n    \n  \n    col *= changingColor;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}