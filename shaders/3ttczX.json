{
    "Shader": {
        "info": {
            "date": "1609622078",
            "description": "cuuubes",
            "flags": 0,
            "hasliked": 0,
            "id": "3ttczX",
            "likes": 1,
            "name": "Wobbly Cube Field",
            "published": 3,
            "tags": [
                "cubes"
            ],
            "usePreview": 0,
            "username": "kekwizard",
            "viewed": 306
        },
        "renderpass": [
            {
                "code": "\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n mat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nfloat mixV(float a, float b, float d) {\n\treturn (d * a)+(1.0 - d)*b;\n}\n\nfloat map(vec3 p)\n{\n    float m = 1.;\n    vec3 boxsize = vec3(3.0, 3.0, 3.0);\n    \n    vec3 c = vec3(8., 15. + 3. * sin(iTime), 8.0);\n\n        \n    p.x = mod(p.x, c.x) - 0.5 * c.x; // p.z -0.05 - 0.05\n    p.y = mod(p.y, c.y) - 0.5 * c.y; // p.z -0.05 - 0.05\n    p.z = mod(p.z, c.z) - 0.5 * c.z; // p.z -0.05 - 0.05\n\n\n    p.x += .75 * sin(p.z + 3. * iTime);\n    p.y += .75 * cos(p.z + 6. * iTime);\n\n    //float displacement = .5 * sin(iTime + 5.*p.x)*cos(iTime * 1.1 + 5.*p.y)*sin(iTime * 1.2 + 5.*p.z);    \n\n    m = min(m, sdBox(p, boxsize));\n\n    return m;\n}\n\nvoid getCamPos(inout vec3 ro, inout vec3 rd)\n{\n    ro.z = -15.0 + (iTime * 15.);\n    ro.x = 4.0;\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n   \n    vec2 _p = (iResolution.xy - 2.0 * fragCoord.xy) / iResolution.y;\n    vec3 ray = normalize(vec3(_p, 1.0));\n    vec3 cam = vec3(0.0, 0.0, 0.0);\n    bool hit = false;\n    getCamPos(cam, ray);  \n    \n    //mat3 rm = rotationMatrix(vec3(0.66, 1., 0.9), iTime);\n\n        \n    float depth = 0.0, d = 0.0, iter = 0.0;\n    vec3 p;\n    \n    for( int i = 0; i < 150; i ++)\n    {\n    \tp = depth * ray + cam;\n        d = map(p);\n                  \n        if (d < 0.001) {\n\t\t\thit = true;\n            break;\n        }\n                   \n\t\tdepth += d;\n\t\titer++;\n                   \n    }\n    \n    vec3 col = vec3(1.0 - iter / 150.0);\n    /*\n    const vec3 a = vec3(0.5, 0.5, 0.5);\n    const vec3 b = vec3(0.5, 0.5, 0.5);\n    const vec3 c = vec3(2., 1., 0.);\n    const vec3 da = vec3(0.5, 0.2, 0.25);\n*/\n    \n    const vec3 a = vec3(0.5, 0.5, 0.5);\n    const vec3 b = vec3(0.5, 0.5, 0.5);\n    const vec3 c = vec3(1., 1., 0.5);\n    const vec3 da = vec3(0.8, 0.9, 0.3);\n\t\n    \n    \n    vec3 sq = sqrt(col);\n    \n    vec3 gg = palette(sq.x * sq.y * sq.z, a, b, c, da);\n\n    fragColor = vec4(gg, 0.0);\n    \n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}