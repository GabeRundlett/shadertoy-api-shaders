{
    "Shader": {
        "info": {
            "date": "1702693501",
            "description": "boilerplate",
            "flags": 0,
            "hasliked": 0,
            "id": "XcfGR8",
            "likes": 10,
            "name": "a perfect circle",
            "published": 3,
            "tags": [
                "boilerplate"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 270
        },
        "renderpass": [
            {
                "code": "/*\n    Roses are red and violets are blue,\n    I write this boilerplate every single time.\n*/\n\nconst float gZoom       = 0.8;\n      float gT;         // set in main\n      float gLineWidth; // set in main\n      float gAAEps;     // set in main\n      \nfloat len(vec2 p, float k) {\n    float x = pow(abs(p.x), k);\n    float y = pow(abs(p.y), k);\n    return    pow(x + y, 1.0 / k);\n    \n}\n\n\nvoid mainImage(out vec4 RGBA, in vec2 XY) {\n    gT         = iTime;\n    gLineWidth = VIEWFROMSCREEN_DIST(4.0);\n    gAAEps     = VIEWFROMSCREEN_DIST(2.0);\n    vec2 p     = VIEWFROMSCREEN     (XY );\n    \n    vec3 rgb = v1 * 0.3;\n    \n    float d = abs(length(p) - 1.0) - gLineWidth;    \n    float c = smoothstep(gAAEps, -gAAEps, d);\n    \n    rgb = mix(rgb, vec3(1.0), c);\n    \n    RGBA.rgb  = rgb;\n    \n    // housekeeping\n    RGBA.rgb *= 1.0 - pow(LENGTHSQR(XY/RES - 0.5) * 1.5, 3.0);\n    RGBA.rgb  = pow(RGBA.rgb, vec3(1.0 / 2.2));\n    RGBA.a    = 1.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const vec2  v01 = vec2(0.0, 1.0);\nconst vec3  vX  = v01.yxx;\nconst vec3  vY  = v01.xyx;\nconst vec3  vZ  = v01.xxy;\nconst vec3  v0  = v01.xxx;\nconst vec3  v1  = v01.yyy;\nconst float pi  = 3.14159265359;\n\n#define RES    (iResolution.xy)\n#define MINRES (min(RES.x, RES.y))\n\n#define VIEWFROMSCREEN_DIST(distance)                     \\\n        ( (distance) / MINRES / gZoom                     )\n#define VIEWFROMSCREEN(xy)                                \\\n        ( vec2(VIEWFROMSCREEN_DIST((xy).x * 2.0 - RES.x), \\\n               VIEWFROMSCREEN_DIST((xy).y * 2.0 - RES.y)) )\n               \n#define LENGTHSQR(a) ( dot((a), (a)) )\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}