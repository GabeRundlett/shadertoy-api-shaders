{
    "Shader": {
        "info": {
            "date": "1557437650",
            "description": "An old test I've found in my private shaders list :) Just a bunch of spheres in a room rendered using a quite brute-force-ish approach that fails as hell. Reflected rays are partially broken but anyway everything looks quite good...",
            "flags": 32,
            "hasliked": 0,
            "id": "XstfWB",
            "likes": 2,
            "name": "Spheres in a room",
            "published": 3,
            "tags": [
                "test",
                "gi",
                "pbr"
            ],
            "usePreview": 0,
            "username": "merry",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "//\tFXAA (autor: Mudlord).\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec2  p         = fragCoord.xy/iResolution.xy;\n    vec2  pp        = 1.0 / iResolution.xy;\n    vec4  color     = texture(iChannel0, vec2(fragCoord.xy * pp));\n    vec3  luma      = vec3(0.299, 0.587, 0.114);\n    float lumaNW    = dot(texture(iChannel0, (fragCoord.xy + vec2(-1.,-1.)) * pp).xyz, luma);\n    float lumaNE    = dot(texture(iChannel0, (fragCoord.xy + vec2( 1.,-1.)) * pp).xyz, luma);\n    float lumaSW    = dot(texture(iChannel0, (fragCoord.xy + vec2(-1., 1.)) * pp).xyz, luma);\n    float lumaSE    = dot(texture(iChannel0, (fragCoord.xy + vec2( 1., 1.)) * pp).xyz, luma);\n    float lumaM     = dot(color.xyz, luma);\n    float lumaMin   = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax   = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n\n    vec2  dir       = vec2(-((lumaNW + lumaNE) - (lumaSW + lumaSE)), ((lumaNW + lumaSW) - (lumaNE + lumaSE)));\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * (1.0/8.0)), (1.0/128.0));\n    float rcpDirMin = 2.5 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(8.0, 8.0), max(vec2(-8.0, -8.0), dir * rcpDirMin)) * pp;\n\n    vec3 rgbA = 0.5 * \n    (\n        texture(iChannel0, fragCoord.xy * pp + dir * (1. / 3. -.5)).xyz +\n        texture(iChannel0, fragCoord.xy * pp + dir * (2. / 3. -.5)).xyz\n    );\n    vec3 rgbB = rgbA * 0.5 + 0.25 * \n    (\n        texture(iChannel0, fragCoord.xy * pp + dir *-.5).xyz +\n        texture(iChannel0, fragCoord.xy * pp + dir * .5).xyz\n    );\n\n    float lumaB = dot(rgbB, luma);\n    fragColor = vec4((lumaB < lumaMin) || (lumaB > lumaMax) ? rgbA : rgbB, color.w);\n\n    fragColor*= (1. / pow(1. + pow(length(p*2.-1.) * .3,  3.), 75.));  // Vignetting.\n    fragColor = pow((((fragColor * (.15 * fragColor + .05) + .004) / (fragColor * (.15 * fragColor + .50) + .06)) - .0667) / .6 * 3.1, vec4(.45)); // Tonemapping & Gamma correction.\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float i_kEpsilon   =.005 ; // Epsilon value.\nconst float i_kFov       = 2.5 ; // FOV.\nconst int   i_kSteps     = 64 ; // Raymarching steps.\nconst int   i_kStepsSec  = 32 ; // Raymarching steps for secondary rays.\nconst int   i_kStepsTri  = 32 ; // Raymarching steps for tertiary rays.\nconst float i_kNear      = 0.01  ; // Distance to the near plane.\nconst float i_kFar       = 100.; // Distance to the far  plane.\nconst float i_kPi        = 3.1415927;\nconst int   i_kNumLights = 1   ; // Number of light sources.\nconst vec3  i_kAmbientColor = vec3(.166, .406, .664);\nconst float i_kAmbientLevel =.25  ;\n \nvec2  gTexelSize   ; // Pixel size   (screen domain).\nfloat gTexelRadius ; // Pixel radius (screen domain).\nfloat gDitherLambda; // Dithering lambda.\n\n//  Gets an N-dimensional random number using given argument as seed for the calculation.\n//  @in     n       Random seed.\n//  @return Resulting value.\nfloat hashi(ivec2 n) { return float((0x3504f333 * n.x * n.x + n.y) * (0xf1bbcdcb * n.y * n.y + n.x)) * (2. / 8589934592.) +.5; }\nfloat hashf(float n) { return hashi(ivec2(n)); }\nvec3  hash3(vec2  p) { return fract(sin(vec3(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)), dot(p, vec2(419.2, 371.9)))) * 43758.5453); }\n\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\nfloat n4rand_ss( vec2 n )\n{\n\tfloat nrnd0 = nrand( n + 0.07*fract( 123.456 ) );\n\tfloat nrnd1 = nrand( n + 0.11*fract( 123.456 + 0.573953 ) );\t\n\treturn 0.23*sqrt(-log(nrnd0+0.00001))*cos(2.0*3.141592*nrnd1)+0.5;\n}\n\nfloat blugausnoise2(vec2 c1) {\n    float nrand1 = n4rand_ss(c1);\n    float nrand0 = n4rand_ss(vec2(c1.x- 1.,c1.y));\n    float nrand2 = n4rand_ss(vec2(c1.x+ 1.,c1.y));\n    return 2.0* nrand1- 0.5* (nrand0+ nrand2);\n}\n\nvec4 tex_triplanar(sampler2D texID, vec3 pos, vec3 nor, vec2 bias, float k)\n{\n    vec3 m = pow(abs(nor), vec3(k));\n    m   /= m.x + m.y + m.z;\n    // Triplanar first component shall be inferred from pos.yz. Changed to pos.zy to make it work with our textures.\n    return  (texture(texID, pos.zy + bias.yx) * m.x + texture(texID, pos.zx + bias.xx) * m.y + texture(texID, pos.xy + bias.xy) * m.z);\n}\n\n//  Gets material information for the given ID and world-space data.\n//  @in     matID   Material ID.\n//  @in     pos     World-space position.\n//  @in     nor     Normal  vector.\n//  @in     t       Tangent vector. DEPRECATED.\n//  @return The material descriptor for given input data.\n//  Materials are set up using a mat4 instance. Input and output material structure is as follows:\n//      [0] Albedo    (XYZ); emissive (W).\n//      [1] Roughness   (X); fresnel  (Y); metalness (Z); SSS (W).\n//      [2] Reflectance (X).\n//      [3] Normal    (XYZ). Output only.\n//  Albedo value present at input is used as texture albedo multiplier.\nmat4 getMaterialInfo(int matID, vec3 pos, vec3 nor /*, vec3 t */)\n{\n  \tmat4 mat = mat4(0);\n    float q = floor(mod(iTime*.20, 4.));\n    float m = ((3. == q) ? 4. : 1.);\n    if (0 == matID)\n    {\n        vec4 tex = texture(iChannel1,pos.xz*.1);\n    \tmat[0] = mix(tex, vec4(.15,.15,.15,0), mod(q, 2.));\n        mat[1] = vec4(.15+.35*texture(iChannel2,pos.xz*.1).x,.3,.0,.0);\n        mat[2] = vec4(.0,.0,.0,.0);\n        mat[3] = vec4(nor,     .0);\n    }\n    if (1 == matID)\n    {\n    \tmat[0] = vec4(.0,0,1,.0)*m;\n        mat[1] = vec4(.1,.3,.0,.0);\n        mat[2] = vec4(.0,.0,.0,.0);\n        mat[3] = vec4(nor,     .0);\n    }\n    if (2 == matID)\n    {\n    \tmat[0] = vec4(step(mod(iTime*.3, 0.5), 0.25), step(mod(iTime*.4 + 0.3, 1.0), 0.50), step(mod(iTime*.5 + 1.2, 2.5), 1.25), 0) + vec4(0,2,0,1) * step(mod(pos.y + iTime, .5), .25);\n        mat[1] = vec4(.5,.3,.0,.0);\n        mat[2] = vec4(.0,.0,.0,.0);\n        mat[3] = vec4(nor,     .0);\n    }\n    if (3 == matID)\n    {\n       \tmat[0] = vec4(1,0,0,0)*m;\n        mat[1] = vec4(.5,.3,.0,.0);\n        mat[2] = vec4(.0,.0,.0,.0);\n        mat[3] = vec4(nor,     .0);\n    }\n    if (4 == matID)\n    {\n       \tmat[0] = vec4(1,2,4,1);\n        mat[1] = vec4(.1,.8,.3,.0);\n        mat[2] = vec4(.0,.0,.0,.0);\n        mat[3] = vec4(nor,     .0);\n    }\n    if (5 == matID)\n    {\n       \tmat[0] = mix(vec4(4,4,3,1), vec4(4,0,0,1), mod(q, 2.));\n        mat[1] = vec4(1,0,0,.0);\n        mat[2] = vec4(.0,.0,.0,.0);\n        mat[3] = vec4(nor,     .0);\n    }    \n    if (6 == matID)\n    {\n       \tmat[0] = vec4(2,2,2,1);\n        mat[1] = vec4(1,0,0,.0);\n        mat[2] = vec4(.0,.0,.0,.0);\n        mat[3] = vec4(nor,     .0);\n    }    \n    if (7 == matID)\n    {\n       \tmat[0] = vec4(2,.5,0,0)*m;\n        mat[1] = vec4(.3,.3,1,.0);\n        mat[2] = vec4(.0,.0,.0,.0);\n        mat[3] = vec4(nor,     .0);\n    }    \n    if (8 == matID)\n    {\n    \tmat[0] = mix(vec4(1,1,1,0), vec4(.15,.15,.15,0), min(q, 1.));\n        mat[1] = vec4(.5,.3,.0,.0);\n        mat[2] = vec4(.0,.0,.0,.0);\n        mat[3] = vec4(nor,     .0);\n    }\n    if (9 == matID)\n    {\n    \tmat[0] = vec4(1,.5,.5,0)*m;\n        mat[1] = vec4(.8,.3,.0,.0);\n        mat[2] = vec4(.0,0.,.0,.0);\n        mat[3] = vec4(nor,     .0);\n    }\n    if (10 == matID)\n    {\n\t\tmat[0] = mix(vec4(8,2,0,1), vec4(8,.05,.1,1), mod(q, 2.));\n        mat[1] = vec4(1,0,0,.0);\n        mat[2] = vec4(.0,0.,.0,.0);\n        mat[3] = vec4(nor,     .0);\n    }\n    if (11 == matID)\n    {\n    \tmat[0] = vec4(4,0,0,1);\n        mat[1] = vec4(1,0,0,.0);\n        mat[2] = vec4(.0,0.,.0,.0);\n        mat[3] = vec4(nor,     .0);\n    }\n    return\tmat;\n}\n\n//  Gets light information for the given ID and world-space data.\n//  @in     litID   Light ID.\n//  @in     pos     World-space position.\n//  @return The light material for the given input data.\n//  Lights are set up using a mat4 instance. Output light structure is as follows:\n//      [0] Light position or direction  (XYZ); light type (W), either spot (0) or directional (1).\n//      [1] Light color (XYZ), attenuation (W).\n//      [2] -\n//      [3] (auto) Light direction (XYZ).\nmat4 getLightInfo(int litID, vec3 pos)\n{\n\tmat4 lit = mat4(0);\n    if (0 == litID)\n    {\n\t\tlit[0] = vec4(3,5, 3,0);\n        lit[1] = vec4(0);\n    }\n    lit[3].xyz = mix(normalize(lit[0].xyz - pos), lit[0].xyz, lit[0].w);\n\n\treturn  lit;\n}\n\nvec3  opRepetition  (vec3 pos, vec3 frq) { return mod(pos, frq) - 0.5 * frq; } \nfloat sdSphere(vec3 p, float s) { return length(p) - s; }\nfloat sdBox   (vec3 p, vec3  b)\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.) + length(max(d, 0.));\n}\n\n#define MIN(dst, src)   dst = mix(src, dst, step(dst.x, src.x))\nvec2 mapScene(vec3 pos)\n{\n    vec2 a = vec2(i_kFar), b = vec2(i_kFar);\n\n    float q = floor(mod(iTime*.20, 4.));\n    float dis = texture(iChannel3,pos.zx).x*.25;\n    if (1.==q)\n    {\n\t    b = vec2(sdBox(pos+vec3(0,1,0)+dis, vec3(100,.1,100)), 4.); MIN(a, b);\n    }\n\n    b = vec2(sdSphere(pos + vec3(  0, 0, 0), 1.), 1); MIN(a, b);\n\tb = vec2(sdSphere(pos + vec3(  4,-.0, 0), 1.), 2); MIN(a, b);\n\tb = vec2(sdSphere(pos + vec3(  0,-0, 3), 1.), 3); MIN(a, b);\n\tb = vec2(sdSphere(pos + vec3(  -1,.5, 1), .5), 7); MIN(a, b);\n\tb = vec2(sdSphere(pos + vec3(  -1,.5, -2), .5), 9); MIN(a, b);\n\t\n    if (1.>=q)\n    {\n\t\tb = vec2(sdBox(opRepetition(pos + vec3(0,-1,4.99), vec3(1,0,0)), vec3(.40,1,.01)), 10); MIN(a, b);\n\t\tb = vec2(sdBox(opRepetition(pos + vec3(4.99,-1,0), vec3(0,0,1)), vec3(.01,1,.40)), 10); MIN(a, b);\n\t\tb = vec2(sdBox(opRepetition(pos + vec3(0,-1,-4.99), vec3(1,0,0)), vec3(.40,1,.01)), 10); MIN(a, b);\n\t\tb = vec2(sdBox(opRepetition(pos + vec3(-4.99,-1,0), vec3(0,0,1)), vec3(.01,1,.40)), 10); MIN(a, b);\n\t    b = vec2(sdBox   (pos+vec3(0,.8,4.99), vec3(100,.2,.01)), 5); MIN(a, b);\n\t    b = vec2(sdBox   (pos+vec3(4.99,.8,0), vec3(.01,.2,100)), 5); MIN(a, b);\n\t    b = vec2(sdBox   (pos+vec3(0,-2.8,4.99), vec3(100,.2,.01)), 5); MIN(a, b);\n\t    b = vec2(sdBox   (pos+vec3(4.99,-2.8,0), vec3(.01,.2,100)), 5); MIN(a, b);\n\t    b = vec2(sdBox   (pos+vec3(0,.8,-4.99), vec3(100,.2,.01)), 5); MIN(a, b);\n\t    b = vec2(sdBox   (pos+vec3(-4.99,.8,0), vec3(.01,.2,100)), 5); MIN(a, b);\n\t    b = vec2(sdBox   (pos+vec3(0,-2.8,-4.99), vec3(100,.2,.01)), 5); MIN(a, b);\n\t    b = vec2(sdBox   (pos+vec3(-4.99,-2.8,0), vec3(.01,.2,100)), 5); MIN(a, b);\n    }\n    else\n    if (2.==q)\n    {\n        b = vec2(sdBox(pos-vec3(0,3.99,0), vec3(5,.01,5)), 6); MIN(a, b);\n    }\n    \n    b = vec2(max(-sdBox(pos-vec3(0,4,0), vec3(5)), sdBox(pos, vec3(100))), 8); MIN(a, b);\n    b = vec2(sdBox(pos+vec3(0,.99,0), vec3(100,.01,100)), 0); MIN(a, b);\n    \n    return\ta;\n}\n    \n//  Gets a rotation matrix within given direction.\n//  @in     dir     Normalized direction in scene center, ground domain (up = [0,1,0]).\n//  @in     upvec   Bias to apply to the up vector to avoid gimbal lock.\n//  @return The resulting rotation matrix.\nmat3 rotationMatrix(vec3 dir, vec3 upvec)\n{\n    vec3 cu = normalize(cross(dir , upvec));\n    return  mat3(cu, normalize(cross(cu, dir)), dir);\n}\n\n//  Calculates the ray direction to draw pixel at the given viewport UV coordinates from the given world-space position.\n//  @in     ro      World-space position within the ray starts from.\n//  @in     rd      World-space position within the ray ends.\n//  @in     uv      Viewport UV coordinates.\n//  @return The resulting ray direction.\nvec3 getCameraDir(vec3 ro, vec3 rd, vec2 uv)\n{\n    return rotationMatrix(normalize(rd - ro), vec3(i_kEpsilon, 1., i_kEpsilon)) \n        * normalize(vec3 (uv * vec2(iResolution.x / iResolution.y, 1.), i_kFov));\n}\n\n//  Gets square of \"x\".\n//  @in     x       Value to get square of.       \n//  @return Square of \"x\".\nfloat sq(float x) { return x * x; }\n\n//  Gets normal vector within a given hit.\n//  @in     pos     World position where hit was found.\n//  @return Normal vector within the hit.\n#define ZERO min(iFrame,0)\nvec3  computeNormal(const vec3 pos)\n{\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*mapScene(pos+0.0005*e).x;\n    }\n    return normalize(n);\n}\n\nfloat ao(vec3 ro, vec3 rd, float kk)\n{\n    float k = 1.0;\n    float d = 0.0;\n    float occ = 0.0;\n    for(int i = 0; i < 32; i++){\n        d = mapScene(ro + 0.1 * k * rd).x;\n        occ += 1.0 / pow(2.0, k) * (k * 0.1 - d);\n        k += 1.0;\n    }\n    return 1.0 - clamp(kk * occ, 0.0, 1.0);\n}\n\n//  Casts a ray along the given direction until a hit is found. Returns a vec4() with distance (X), material ID (Y). \n//  Uses \"over-relaxation raymarching\" and \"screen-space aware intersection point selection\" algorithms depicted at\n//  the  \"Enhanced Sphere Tracing\" paper by Benjamin Kelinert et al.\n//  @in     ro      Ray origin.\n//  @in     rd      Ray direction.\n//  @in     steps   Maximum ray iterations.\n//  @return Raycast result. A vec4() with total distance (X), last step distance (Y), material ID (Z), steps (W).\nvec4 castRay(vec3 ro, vec3 rd, int steps)\n{\n    float t   = i_kNear, stepLength = 0., prevRad = i_kFar, prevErr = i_kFar, err, k = 1.2;\n    vec2  res = vec2(1);\n    for (; (steps >= 0) && (t < i_kFar); --steps)\n    {\n        res = mapScene(ro + rd * t);\n        bool  sor = (k > 1.) && ((prevRad + res.x) < stepLength);\n        if (sor)\n        {\n            stepLength-= k * stepLength;\n            k = 1.;            \n        }        \n        else\n            stepLength = res.x * k;\n\n        prevRad = res.x;\n        err = res.x / t;\n        if (!sor)\n        {\n            if (err < prevErr     ) { res.x = t; prevErr = err; }\n            if (err < gTexelRadius) break;\n        }\n        t  += stepLength;\n    }\n    return vec4(t, res.xy, steps);\n}\n\n//  Lits given point.\n//  @in     pos     Surface position to lit.\n//  @in     nor     Normal  vector to the surface position to lit.\n//  @in     rd      Ray direction.\n//  @in     mat     The material descriptor to use.\n//  @return Surface color at that point.\nvec4 shadeFragment(vec3 pos, vec3 nor, vec3 rd, mat4 mat)\n{\n    vec3  col    = vec3(1), diffuse;\n    vec4  amb    = vec4(0), res;\n    float weight = 0.;\n\n    mat4 lit = getLightInfo(0, pos);\n    diffuse  = mix(mat[0].xyz * clamp(dot(mat[3].xyz, lit[3].xyz), 0., 1.) * (1. - mat[1].z), mat[0].xyz, mat[0].w);\n\n    //  Calculates the Cook-Torrance BRDF terms for a particular point in the 3D space within the given material setup  \n    //  and  light direction.\n    //  BRDF function terms used are:\n    //          * D term (isotropic  ) - GGX.\n    //          * F term (reflectance) - Schlick.\n    //          * G term (geometric  ) - Schlick approximation of Smith solved with GGX.\n \tvec3  h         = normalize   (-rd + lit[3].xyz);\n   \tfloat rsq       = max  (.001, sq(mat[1].x));\n    vec3  terms     = vec3\n    (\n        /* D Term    */ (rsq * rsq / (i_kPi * sq((sq(rsq) - 1.) * sq(clamp(dot(mat[3].xyz, h), 0., 1.)) + 1. ))),   // Isotropic GGX NDF. \n        /* F Term    */ (mat[1].y + (1. - mat[1].y  ) * (pow(1. -    clamp(dot(mat[3].xyz, lit[3].xyz), 0., 1.),  5.))),\n        /* G Term    */ sq(1. / (dot(h , lit[3].xyz) * (1. - rsq * .5) + rsq * .5))\n    );\n\tcol = diffuse * col * terms.y + mix(lit[1].xyz, vec3(1), mat[0].w) * diffuse;\n                                       \n    //  Integrates result with ambient light.\n    col    += mat[0].xyz * i_kAmbientColor * i_kAmbientLevel;\n    return  vec4(col, terms.y);\n}\n\n//  Gets a rotation matrix within given direction.\n//  @in     dir     Normalized direction in scene center, ground domain (up = [0,1,0]).\n//  @in     upvec   The up-vector.\n//  @return The resulting rotation matrix.\nmat3 rotation_matrix(vec3 dir, vec3 upvec)\n{\n    vec3 cu = normalize(cross(dir , upvec));\n    return  mat3(cu, normalize(cross(cu, dir)), dir);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tgTexelSize    = 1. / iResolution.xy;\n\tgTexelRadius  = length(gTexelSize) ;\n \tgDitherLambda = -.25 + .5 * fract(52.9829189  * fract(dot(fragCoord.xy, vec2(.06711056,.00583715))));\n    \n    vec2 uv = (fragCoord.xy + hash3(vec2(iTime*15.,iTime*.23)).x) / iResolution.xy;\n    vec2 qv = uv * 2. - 1.;\n\tvec3 pos, nor;\n    vec4 res;\n    float depth;\n\n\t// Camera setup.\n    float t = iTime*5. + (sin(iTime*.33)*4.+4.);\n    t*= .25;\n    vec3 ro = vec3(sin(t*.03)*4.8,1,cos(t*.03)*4.8);\n    vec3 rd = getCameraDir(ro, vec3(0,0,0), qv);\n    \n    // Casts ray.\n    res = castRay(ro, rd, i_kSteps);\n    pos = ro + rd * res.x;\n    \n    // Reduces neighbors discontinuity by reprojecting hitpoint sample to be represented by a pixel on the screen.\n    float coneSize  = tan(i_kPi / 6.) / (iResolution.y);\n    float error     = 0.;\n    for (int  i = 0; i < 3; ++i)\n    {\n        pos    -= rd *    (error - mapScene(pos).x);\n        error   = coneSize * length(ro  - pos);\n    }\n    nor         = computeNormal(pos);\n    depth       = clamp (((i_kFar + i_kNear) / (i_kFar - i_kNear)) + (2. * i_kFar * i_kNear / (i_kFar - i_kNear)) /-abs(res.x), 0., 1.);\n\tmat4 mat    = getMaterialInfo(int(res.z), pos, nor);\n    fragColor   = shadeFragment(pos, nor, rd, mat);\n    \n    float pdf;\n    mat3 mm;\n    vec2 hm;\n    pdf = fragColor.a;\n    vec4 dif =(1.-mat[1].z)*vec4(mat[0].xyz, 1);\n    vec4 dif2=vec4(mat[0].xyz,1);\n\n\tvec3 p2 = pos, n2 = nor, r2 = ro, d2 = rd;    \n\tfloat aa = mat[1].x * mat[1].x, metallic = mat[1].z;\n\tvec4 col = vec4(0);\n\tmat4 m2 = mat;\n\n    float att = 1.,att2=.5;\n    for (int i = 0; i < 1; ++i)\n    {\n\t    ro = pos + nor * .01;\n\t    rd = nor;\n\t    if (mat[2].y > 0.)\n\t    {\t\n        ro = pos - nor * .01;\n\t        rd = refract(-rd, nor, mat[2].y);\n\t    }\n\t\trd+= abs(hash3(vec2(float(iTime*.01) / 512., hash3(uv + iTime*.01))))*1.-.5;\n\t    rd = normalize(rd);\n\t    res = castRay(ro, rd, i_kStepsSec);\n\t    pos = ro + rd * res.x;\n\t    nor         = computeNormal(pos);\n\t    depth       = clamp (((i_kFar + i_kNear) / (i_kFar - i_kNear)) + (2. * i_kFar * i_kNear / (i_kFar - i_kNear)) /-abs(res.x), 0., 1.);\n\t\tmat         = getMaterialInfo(int(res.z), pos, nor);\n\t\tcol+= att*dif*mix(mat[0].xyz * clamp(dot(mat[3].xyz, d2), 0., 1.) * (1. - mat[1].z), mat[0].xyz, mat[0].w).xyzz*((3.-float(i))/3.);\n\t\tatt*=att2;\n    }\n    fragColor = mix(fragColor, col, .5);    \n    \n\tpos=p2;nor=n2;ro=r2;rd=d2;\n\tcol = vec4(0);\n    att=1.;\n    \n    for (int i = 0; i < 2; ++i)\n    {\n\t    ro = pos + nor * .001;\n\t    rd = reflect(rd, nor);\n\t\trd*= mix(vec3(1),abs(hash3(vec2(float(iTime*.01) / 512., hash3(uv + iTime*.01)))),aa)*1.-.5;\n\t    rd = normalize(rd);\n\t    res = castRay(ro, rd, i_kStepsTri);\n\t    pos = ro + rd * res.x;\n\t    nor         = computeNormal(pos);\n\t    depth       = clamp (((i_kFar + i_kNear) / (i_kFar - i_kNear)) + (2. * i_kFar * i_kNear / (i_kFar - i_kNear)) /-abs(res.x), 0., 1.);\n\t\tmat         = getMaterialInfo(int(res.z), pos, nor);\n\t    vec4 sf = shadeFragment(pos, nor, rd, mat);\n\t    col+= att*mix(col, (mix(vec4(1),dif2,metallic))*sf*pdf,.5)*((3.-float(i))/3.);\n\t    pdf = sf.a;\n\t\taa = mat[1].x * mat[1].x;\n\t\tatt*=att2;\n    }\n    fragColor = mix(fragColor, col, .5)*.1+texture(iChannel0,fragCoord.xy/iResolution.xy)*.9;    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 6,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg"
                    },
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}