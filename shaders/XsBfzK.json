{
    "Shader": {
        "info": {
            "date": "1501065443",
            "description": "need help with this 3forces equilibrium on an equilateral triangle.\nI thought this is tri-linear interpolation,but apparently not?\n\nwhite is bi-linear of coloreds.grey fails me.\n\n3way tug of war, tri-linear interpolation on a planar equilateral triangle?\n",
            "flags": 0,
            "hasliked": 0,
            "id": "XsBfzK",
            "likes": 1,
            "name": "help, 3 forces equilibrium",
            "published": 3,
            "tags": [
                "3waytugofwar"
            ],
            "usePreview": 0,
            "username": "ollj",
            "viewed": 529
        },
        "renderpass": [
            {
                "code": "/*\nMade an equilateral triangle, with just one sqrt(3.).\nmin(max())'ed incircle and circumcircle (radius 1 and radius 2) to ckeck intersections.\n\nusually you need sqrt(3) multiple times, for angle AND offsets.\nbut this utilizes one mirror symmetry and an efficient \"distance to line\" sdf_line6\n\nusing mirror symmetry instead of polar_modulo_atan(y,x) skews the distance field.\n*/\n\n//show distance field, illustrates the mirror symmetry\n//#define showdist\n\n//rotate over time\n//#define spin\n\n//return signed distance of point [p] to line [a]\n//where [a] is the differential of 2 points that the line goes trough;\n//... you have a line trough [c]and [d] then a=c-d OR a=d-c;\n//which one you chose to define [a] sets the sign of the distance == line direction.\nfloat sdf_line6(vec2 p,vec2 a){a.x=-a.x;return dot(a.yx,p);}\n//for the above, a must be normalized, which is done by wrapper below.\nfloat sdf_line6n(vec2 p,vec2 a){return sdf_line6(p,normalize(a));}\n//https://www.shadertoy.com/view/4dBfzG\n\n//#define frame(u) (u-.5*iResolution.xy)/iResolution.y\nvec2 frame(vec2 u){u/=iResolution.xy;u-=.5;\nif(iResolution.x>iResolution.y)u.x*=iResolution.x/iResolution.y;\nelse u.y*=iResolution.y/iResolution.x;return u*5.;}\n\n#define rm(r) mat2(sin(r+vec4(1,0,0,-1)*asin(1.)))\n\n#define ss(a) a=smoothstep(.003,-.003,a);\n\n//return circle-circle-intersection.x; r.x=circle.left.radius;r.y=circle.right.radius;r.z=circles-centers.distance\n//does not check for non-intersecticn cases! intersection.y is not important.\nfloat cci(vec3 r){float d=r.z*2.;r*=r;return(r.x-r.y+r.z)/d;}\n\n//return trilienar interpolation by [i] over the cube3d volume with the sides a,c,b\nvec2 blin(vec3 i, vec2 a, vec2 b,vec2 c){vec2 r=vec2(0);\n r=mix(r,r+a,i.x);//lerp in direction of a\n r=mix(r,r+b,i.y);//lerp in direction of b\n r=mix(r,r+c,i.z);//lerp in direction of c\n return r;}//imagine simple case: a=vec2(1,0,0) and b=vec2(0,1,0) and c=vec3(0,0,1);\n\n\nvoid mainImage( out vec4 O, in vec2 U ){\n vec2 u=frame(U); \n vec2 m=frame(iMouse.xy);\n #ifdef spin\n  u*=rm(iTime);\n #endif\n    \n //vec2 m=frame(iMouse.xy);\n //float l=sdf_line6(u,m);\n //l=abs(l);\n float a=3.73;//somehow this is VERY precise, but i expect something with sqrt(3)\n float t=sdf_line6(vec2(1.+abs(u.x),a+u.y),vec2(1.,sqrt(3.)));//mirror symmetry, rotated by sixth rotation.\n t=max(t,u.y-1.);//substract bloor side\n float f=length(u)-1.;//incircle\n t=max(t,-f);//substract incircle\n    \n //float t=tri(u);\n //u.y=-u.y;\n //u*=rm(floor(iTime*9.)*acos(0.)/1.5);\n //if (floor(iTime*9.)>=0.) u.y=-u.y;\n //float l=tri(u);\n //l=abs(l);\n\n t=min(t,2.-length(u));//outer circle, radius 2.\n t=-t;//invert\n #ifdef showdist\n t=fract(t);//show distance field\n #else\n t=ss(t);//smooth borders\n #endif\n \n float s3=sqrt(3.);\n \n vec3 e;//e is 3 forces, shown as colored circles, larger circle==more push!\n //circle centers are force origins.\n //the forces point to the center of the triangle.\n //setting 3 forces with iMouse.xy.\n e.r=length(vec2(  0, 2)+m);\n e.g=length(vec2( s3,-1)+m);\n e.b=length(vec2(-s3,-1)+m);\n \n \n float le=length(e);\n //to simplify, forces are scaled, by dividing them by their 3d length, normalizing:\n e=normalize(e);//e=e/pow(dot(e,e),.51);\n //e*=.8;\n \n //e.y=e.z;\n vec3 c;//          centers-radii;\n c.r=length(u+vec2(  0, 2))-e.r*s3*2.;\n c.g=length(u+vec2( s3,-1))-e.g*s3*2.;\n c.b=length(u+vec2(-s3,-1))-e.b*s3*2.;\n/*    \n float g=length(u+vec2( s3,-1))-length(vec2( s3,-1)*d.x);\n float b=length(u+vec2(-s3,-1))-length(vec2(-s3,-1)*d.y);\n float r=length(u+vec2(0,2))-length(vec2(0,2)*d.z);\n/**/\n    \n vec2 hr=mix(vec2(-s3,1),vec2(s3,1),e.y/(e.y+e.z));\n vec2 hg=mix(vec2(0,-2),vec2( s3,1),e.x/(e.x+e.z));\n vec2 hb=mix(vec2(0,-2),vec2(-s3,1),e.x/(e.x+e.y));\n vec3 h;//h is 3 linear interpolations between 2 of 3 forces.\n //in \"distance to u\", naned after the color/corner they are furthest from.\n h.r=length(u-hr)-.1;\n h.g=length(u-hg)-.1;\n h.b=length(u-hb)-.1;\n h.x=min(min(h.r,h.g),h.b);//flattened to a single minimum distance.\n \n //d should be trilinear interpolation of 3 forces.\n //i fail at this, it is some circumcircle stuff?\n //this is a bit analogous to slerp, axisangl/quaternion interpolation.\n //vec2 d=vec2(s3,1)*e.z/(e.x+e.y)+vec2(-s3,1)*e.y/(e.x+e.z)+vec2(0,-2)*e.x/(e.z+e.y);\n \n \n vec2 d=vec2(0);\n d-=vec2(0,-2)*e.r;\n d-=vec2(-s3,1)*e.g;\n d-=vec2( s3,1)*e.b;\n    \n d=blin(-e,vec2(0,-2),vec2(-s3,1),vec2( s3,1));\n /**/\n //d=hr+hg+hb;\n \n //cose but not correct.\n d/=4.;\n d*=le;\n d.x=length(u-d)-.1;\n \n  \n \n/**/\n    \n/*\n every point has 3 distances to 3 corners, scaled by force.\n\n*/\n \n //solution may be trilinear interpolation.\n//then to scale by 3 vectors.\n// assume corner case, 2 vectors have sum of lenth 2 triangle sides;\n// assume center case, 3 vectors have sum of length 3/2 triangle sides;\n \n /*\n //three bubbles set by mouse\n float z=1.+abs(sin(iTime))*.1;\n\n /**/\n ss(c.r);\n ss(c.g);\n ss(c.b);\n ss(h.x);\n //ss(d.x);\n   d.x=fract(d.x)*.2;\n //ss(e);\n O=vec4((c+c.yzx*.5)*.2+t*.1+h.x+d.x,0);\n\n //O=vec4(vec3(t),0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}