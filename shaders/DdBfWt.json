{
    "Shader": {
        "info": {
            "date": "1708845760",
            "description": "Drag mouse in top right of screen to resize map.\nBox + noise + threshold = mushy box!\nMushy box + color = map!",
            "flags": 0,
            "hasliked": 0,
            "id": "DdBfWt",
            "likes": 4,
            "name": "Map with octave noise",
            "published": 3,
            "tags": [
                "noise",
                "sdf"
            ],
            "usePreview": 0,
            "username": "Larbagar",
            "viewed": 117
        },
        "renderpass": [
            {
                "code": "float rand(vec2 co){\n  return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat smoothNoise(vec2 pos){\n    return mix(\n        mix(\n            rand(floor(pos + vec2(0., 0.))),\n            rand(floor(pos + vec2(1., 0.))),\n            fract(pos.x)\n        ),\n        mix(\n            rand(floor(pos + vec2(0., 1.))),\n            rand(floor(pos + vec2(1., 1.))),\n            fract(pos.x)\n        ),\n        fract(pos.y)\n    );\n}\n\nfloat octaveNoise(float octaves, vec2 pos){\n    float value = 0.;\n    float coefficent = 2.;\n    for(float octave = 0.; octave < octaves; octave++){\n        value += smoothNoise(pos*coefficent + vec2(rand(vec2(octave, 0.)), rand(vec2(octave, 1.))))/coefficent;\n        coefficent *= 2.;\n    }\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2. - iResolution.xy)/iResolution.y;\n    vec2 mousePos = (iMouse.xy*2. - iResolution.xy)/iResolution.y;\n    if(iMouse.xy == vec2(0, 0))\n        mousePos = (0.8 + 0.05*sin(iTime*0.5))*vec2(iResolution.x/iResolution.y, 1.);\n    \n    \n    float strength = 0.1;\n    float variation = 4.;\n    float blur = 0.015;\n    vec2 size = mousePos.xy;\n    \n    float sdf = max(abs(uv.x) - size.x, abs(uv.y) - size.y);\n    float noise = (octaveNoise(6., uv*variation + 8.)*2. - 1.)*strength;\n    float val = sdf + noise;\n    float mask = smoothstep(blur, 0., val);\n    \n    float vignetteSize = 0.2;\n    float vignetteAmt = 0.5;\n    float vignette = 1. - smoothstep(-vignetteSize, 0., val)*vignetteAmt;\n    \n    float mapVariation = 1.5;\n    float textureAmt = 0.8;\n    float mapTexture = octaveNoise(6., uv*mapVariation + 4.);\n    vec3 mapCol = vec3(0.8, 0.6, 0.4);\n    vec3 map = mapCol*vignette*(1. - textureAmt + mapTexture*textureAmt);\n    \n    float outlineThickness = 0.015;\n    float outlineBlur = 2./iResolution.y;\n    vec3 outlineCol = vec3(0., 0., 0.);\n    vec3 backgroundCol = vec3(1.);\n    vec3 background = mix(outlineCol, backgroundCol, pow(smoothstep(0., outlineBlur, val - outlineThickness), 2.));\n    \n    vec3 col = mix(background, map, mask);\n    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}