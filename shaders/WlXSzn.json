{
    "Shader": {
        "info": {
            "date": "1561676238",
            "description": "an fbm-like octave combination looped applied to some domain warped metaballs = fun",
            "flags": 0,
            "hasliked": 0,
            "id": "WlXSzn",
            "likes": 3,
            "name": "Octave Metaballs",
            "published": 3,
            "tags": [
                "metaballs",
                "domain",
                "metaball",
                "domainwarping",
                "octave"
            ],
            "usePreview": 0,
            "username": "stormy",
            "viewed": 724
        },
        "renderpass": [
            {
                "code": "// Metaball octaves by Justas Dabrila\n// Licensed under CC BY 4.0\n#define v2 vec2\n#define v3 vec3\n#define v4 vec4\n#define f32 float\n#define s32 int\n#define b32 bool\n#define m2 mat2\n#define TAU 6.283185307179586\n#define DEG_TO_RAD (TAU / 360.0)\n#define zero_v2 vec2(0,0)\n\nv2 aspect;\n\nv2 to_uv(in v2 p) {\n    return (((v2(2.) * p) / iResolution.xy) - v2(1.)) * aspect;\n}\n\nf32 IGN_dither(in v2 p) {\n    // From http://advances.realtimerendering.com/s2014/index.html#_NEXT_GENERATION_POST\n    // NEXT GENERATION POST PROCESSING IN CALL OF DUTY: ADVANCED WARFARE\n    return fract(52.9829189*fract(dot(p, vec2(0.06711056, 0.00583715))));\n}\n\nvoid mainImage( out vec4 out_color, in vec2 fragCoord ) {\n    aspect = v2(1, iResolution.y / iResolution.x);\n\n    v2 uv = to_uv(fragCoord.xy);\n\n    f32 scale = 10.;\n    uv.xy *= scale;\n\n    const f32 div = 10.;\n    const s32 octaves = 50;\n\n#if 1\n    out_color.b  = .01;\n    out_color.r = .005;\n#endif\n\n#if 1\n    f32 all_balls = 0.;\n    for(s32 octave = 0;\n            octave < octaves;\n            octave++\n    ) {\n        f32 f_octave = f32(octave + 1);\n        f32 octave_t = f_octave/f32(octaves);\n\n        f32 num_balls = div * f_octave;\n\n        f32 l = length(uv);\n        f32 angular_divisor = TAU * (1. / num_balls);\n        f32 uv_angle = atan(uv.y, uv.x) + TAU * .1 * f_octave + sin((f32(octave) / 2.) * iTime * .1);\n        f32 angle = abs(mod(uv_angle, angular_divisor) - angular_divisor * .5);\n\n        v2 p = v2(cos(angle), sin(angle)) * l;\n\n        f32 life_t = fract(iTime * .1 + smoothstep(.4, .8, abs(sin(iTime))) * f_octave * .02);\n        //f32 life_t = fract(iTime * .1 + 987 * octave * .01);\n        life_t /= fwidth(p.x) * 60.;\n\n        v2 mb_pos = p + v2(-1, 0) * life_t * scale;\n        f32 mb = 1. / length(mb_pos) * f_octave * .01;\n\n        out_color += v4(.03, .0,.0,.0) * mb * (1. - life_t);\n\n        all_balls += mb;\n    }\n    \n    all_balls /= f32(octaves);\n    out_color += v4(.0, .1, .2, 0) * all_balls;\n#endif\n\n    out_color -= IGN_dither(gl_FragCoord.xy) * .01;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}