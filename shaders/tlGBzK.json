{
    "Shader": {
        "info": {
            "date": "1615016514",
            "description": "Another radial blur thing",
            "flags": 0,
            "hasliked": 0,
            "id": "tlGBzK",
            "likes": 8,
            "name": "Control Console",
            "published": 3,
            "tags": [
                "2d",
                "blur"
            ],
            "usePreview": 0,
            "username": "Plento",
            "viewed": 352
        },
        "renderpass": [
            {
                "code": "// Cole Peterson (Plento)\n\nvec2 R;\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define ss(a, b, t) smoothstep(a, b, t)\nfloat hsh21(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hsh11(float p){\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n#define cl 2.3\n#define fr 3.5\n\nvec3 color(vec2 uv){\n    uv*=1.3;\n    \n    vec3 col = vec3(1);\n    float t = .5*iTime + 12.;\n    vec2 tuv = uv;\n\n    uv.x*=.7;\n    float m = clamp(exp((sin(uv.y*8. + 1.6)))*2.8 + .1, cl, fr);\n    uv.x *= m;\n    \n    uv.x += t*1.2;\n    \n\tvec2 fuv = fract(uv*4.);\n    vec2 id = floor(uv*4.);\n    \n    uv.y += .7*iTime*sin(id.x*.55);\n    id = floor(uv*4.);\n    \n    float rnd = hsh11(id.x*999.3);\n    col *= mix(1., .02, step(rnd, .3));\n    \n    float x = id.x*43.2 + id.y*22.5;\n    float sp = ss(0.25, 0.2, abs(fuv.x-0.5));\n    float chk = mod(id.y+id.x,2.0)*hsh21(id*999.) * sp;\n    col *= .5+.45*cos(vec3(.0, .7, .2)*(x + hsh11(floor(iTime*2. + x)))*10.);\n    col *= hsh11(floor(iTime + x));\n    \n    col *= sp;\n    col *= chk;\n    \n    if(m >= fr) col *= 1.5;\n    else if(m <= cl){\n        col = .011 + .04*vec3(chk);\n        col += (.5+.7*cos(uv.x*5.))*.025;\n    }\n    else col *= .5;\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    R = iResolution.xy;\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    \n    uv.y += uv.x*.1;\n    uv.y = -abs(uv.y);\n    \n    vec3 col = color(uv);\n\tvec3 acc = vec3(0);\n    \n    float c = 0.0;\n    for(float i = 0.9; i >0.1; i-=0.04){\n        vec2 nv = uv*(i+hsh21(u)*0.15);\n        vec3 nc = color(nv);\n        acc += nc*nc*nc*2.;\n        c++;\n    }\n    \n    acc /= c;\n    \n    col += acc*.13;\n    col *= .6;\n    col *= (1.-step(.78, abs(uv.x)));\n    col = 1.-exp(-col);\n    f = vec4(sqrt(clamp(col, 0.0, 1.0)), 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}