{
    "Shader": {
        "info": {
            "date": "1629685807",
            "description": "click to move cam\n\nyet more attempts to keep sharp and write stuff without looking at any resources\n\npls don't do raymarching for just spheres and planes xd",
            "flags": 32,
            "hasliked": 0,
            "id": "sscGWH",
            "likes": 14,
            "name": "meme path tracer",
            "published": 3,
            "tags": [
                "raymarching",
                "gi",
                "pathtracing"
            ],
            "usePreview": 0,
            "username": "pema99",
            "viewed": 513
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);\n    fragColor.xyz /= fragColor.a;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define EPS 0.001\n#define BOUNCES 5\n#define SPP 16\n#define MAXDIST 10.0\n\n#define PI 3.14\n#define TWOPI 6.28\n\n// Cheat: taken from iq\nfloat smin( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nmat2 rot(float r)\n{\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\nvec3 emission = vec3(0.);\nint brdf = 0;\nfloat map(vec3 p)\n{\n    emission = vec3(0.);\n    brdf = 0;\n\n    // metaball\n    float d = length(p + vec3(0.4, 0.5, -0.5)) - 0.5;\n    d = smin(d, length(p + vec3(0.7, 0.2, -0.3)) - 0.4, 0.1);\n    if (d <= EPS*2.0)\n        brdf = 1;\n    \n    // ball\n    d = min(d, length(p + vec3(-0.5, 0.5, 0.3)) - 0.5);\n    \n    // walls\n    d = min(d, abs(p.y+1.0));\n    d = min(d, abs(p.y-1.0));\n    d = min(d, abs(p.x+1.5));\n    d = min(d, abs(p.x-1.5));\n    d = min(d, abs(p.z+3.5));\n    d = min(d, abs(p.z-2.0));\n    \n    //light\n    if (p.y > 0.99)\n        emission = vec3(1.0, 1.0, 0.8) * PI;\n\n    return d;\n}\n\nvec2 march(vec3 ro, vec3 rd)\n{\n    float t = 0.;\n    vec3 p = vec3(0.);\n    int i = 0;\n    for (; i < 50; i++)\n    {        \n        p = ro + t * rd;\n        float dist = map(p);\n        if (dist < EPS || dist > MAXDIST) break;\n        t += dist;\n    }\n    return vec2(t, i);\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 o = vec2(EPS, 0.);\n    return normalize(vec3(\n        map(p + o.xyy) - map(p - o.xyy),\n        map(p + o.yxy) - map(p - o.yxy),\n        map(p + o.yyx) - map(p - o.yyx)\n    ));\n}\n\nvec3 sf(float i)\n{\n    float ux = i / float(128);\n    float uy = fract(i * 1.6180);\n    \n    float phi = acos((ux - 0.5) * 2.0);\n    float theta = TWOPI * uy;\n\n    return vec3(\n        sin(phi) * cos(theta),\n        sin(phi) * sin(theta),\n        cos(phi)\n    );\n}\n\nvec3 hemisphere(vec3 up, float seed)\n{\n    // worlds worst sampling function\n    vec3 dir = normalize(sf(seed));\n    dir.xz *= rot((seed+float(iFrame)*1.));\n    dir.yz *= rot((seed+float(iFrame)*2.));\n    dir.xy *= rot((seed+float(iFrame)*3.));\n    if (dot(dir, up) < 0.)\n        dir = -dir;\n    return dir;\n}\n\nvec3 trace(vec3 ro, vec3 rd)\n{\n    vec3 col = vec3(0.);\n    for (int i = 0; i < SPP; i++)\n    {\n        vec3 tro = ro, trd = rd;\n        vec3 throughput = vec3(1.);\n        vec3 final = vec3(0.);\n        \n        for (int j = 0; j < BOUNCES; j++)\n        {\n            vec2 res = march(tro, trd);\n            float dist = res.x;\n            float iters = res.y;\n\n            if (emission.x > 0. || emission.y > 0. || emission.z > 0.)\n            {\n                final = emission * throughput;\n                break;\n            }\n            else\n            {\n                vec3 hit = tro + dist * trd;\n                vec3 norm = normal(hit);\n                vec3 albedo = (norm * 0.5 + 0.5);\n                \n                tro = hit + norm * EPS;\n                if (brdf == 1)\n                    trd = reflect(rd, norm);\n                else\n                    trd = hemisphere(norm, mod(float(i+j+iFrame), 128.0));\n                \n                throughput *= albedo * dot(norm, trd);\n            }\n        }\n        \n        col += final;\n    }\n    return col / float(SPP);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 ouv = fragCoord/iResolution.xy;\n    vec2 uv = 2.0 * (ouv - 0.5);\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 jitter = vec2(float(iFrame%100)/10.0, mod(float(iFrame), 10.0)) / 5.0 / iResolution.xy;\n    \n    vec3 ro = vec3(0., 0., -3.);\n    vec3 rd = normalize(vec3(uv + jitter, 0.) - ro);\n    vec2 mouse = iMouse.xy == vec2(0.) ? vec2(0., -0.15) : 2.0 * ((iMouse.xy / iResolution.xy) - 0.5);\n    rd.xz *= rot(mouse.x);\n    rd.yz *= rot(mouse.y);\n    \n    vec4 col = vec4(trace(ro, rd), 1.0);\n    vec4 buf = iMouse.z > 0.0 ? vec4(0.) : texture(iChannel0, ouv);\n    \n    fragColor = col + buf;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}