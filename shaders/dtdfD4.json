{
    "Shader": {
        "info": {
            "date": "1701269651",
            "description": "amogus\ndoesn't really look like a cake but amogus funny\nadded sus music",
            "flags": 40,
            "hasliked": 0,
            "id": "dtdfD4",
            "likes": 2,
            "name": "diamboy's amogus cake",
            "published": 3,
            "tags": [
                "raytracing",
                "amongus"
            ],
            "usePreview": 0,
            "username": "Diamboy",
            "viewed": 187
        },
        "renderpass": [
            {
                "code": "struct intersect_info\n{\n    float t;\n    bool i;\n    vec2 uv;\n};\n\nvoid update(inout intersect_info a, intersect_info b)\n{\n    if (b.i && (!a.i || a.t > b.t)) a = b;\n}\n\n// the parallelogram is ABDC\nintersect_info ray_parallelogram(vec3 ro, vec3 rd, vec3 a, vec3 b, vec3 c)\n{\n    intersect_info ii;\n    ii.i = false;\n\n    ro -= a;\n    b -= a;\n    c -= a;\n    vec3 n = cross(b, c);\n    mat3 m = transpose(inverse(mat3(b, c, n)));\n    ro *= m;\n    rd *= m;\n    float t = -ro.z / rd.z;\n    if (t < 0.0) return ii;\n    vec2 uv = ro.xy + rd.xy * t;\n    if (uv.x < 0.0 || uv.x >= 1.0 || uv.y < 0.0 || uv.y >= 1.0) return ii;\n    ii.t = t;\n    ii.uv = uv;\n    ii.i = true;\n    return ii;\n}\n\nintersect_info ray_world(vec3 ro, vec3 rd)\n{\n    vec3[] buf = vec3[]( vec3(-1,-1,0), vec3(1,-1,-0.4), vec3(1,-1,0.4), vec3(1,1,-0.4), vec3(-1,1,0) );\n    float c = cos(iTime);\n    float s = sin(iTime);\n    for (int i = 0; i < 5; i++)\n        buf[i].xz *= mat2(c,s,-s,c);\n    intersect_info r = ray_parallelogram(ro, rd, buf[0], buf[1], buf[4]);\n    update(r, ray_parallelogram(ro, rd, buf[0], buf[2], buf[4]));\n    update(r, ray_parallelogram(ro, rd, buf[1], buf[2], buf[3]));\n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0, 0, -4);\n    vec3 rd = normalize(vec3(uv, 2.0));\n    intersect_info ii = ray_world(ro, rd);\n    if (ii.i) fragColor = texture(iChannel0, ii.uv);\n    else fragColor = vec4(0.1, 0.2, 0.3, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float line(vec2 p, vec2 a, vec2 b)\n{\n    b -= a;\n    vec2 proj = a + b * clamp(dot(p - a, b) / dot(b, b), 0.0, 1.0);\n    return length(proj - p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 4.0;\n    uv.y -= floor(uv.y);\n    float cake_opacity = smoothstep(0.88, sin(uv.x * 6.0) * 0.12 + 0.64, uv.y);\n    vec3 col = texture(iChannel0, uv).rgb;\n    uv.x -= floor(uv.x);\n    float body = min(\n        line(abs(uv - vec2(0.5, 0)), vec2(0.16, 0.15), vec2(0.16, 0.5)) - 0.14,\n        line(uv, vec2(0.5, 0.5), vec2(0.5, 0.6)) - 0.3\n    );\n    float back = line(uv, vec2(0.2, 0.35), vec2(0.2, 0.55)) - 0.15;\n    float goggles = line(uv, vec2(0.5, 0.6), vec2(0.7, 0.6)) - 0.15;\n    if (back <= 0.0) col = vec3(0.5, 0.5, 0.5);\n    if (body <= 0.0) col = vec3(1, 0, 0);\n    if (goggles <= 0.0) col = vec3(0, 1, 1);\n    \n    \n    col = col * cake_opacity + vec3(1.0 - cake_opacity);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define C(n) float(-57+(n)*12)\n//#define Db(n) float(-56+(n)*12)\n#define D(n) float(-55+(n)*12)\n#define Eb(n) float(-54+(n)*12)\n//#define E(n) float(-53+(n)*12)\n#define F(n) float(-52+(n)*12)\n#define Gb(n) float(-51+(n)*12)\n#define G(n) float(-50+(n)*12)\n//#define Ab(n) float(-49+(n)*12)\n//#define A(n) float(-48+(n)*12)\n#define Bb(n) float(-47+(n)*12)\n//#define B(n) float(-46+(n)*12)\n#define S (-127.0)\n\nvec2 mainSound( int samp, float time )\n{\n    const float tick_length = 1.0 / 18.0;\n    const int tick_amt = 192;\n    const float[] sine = float[](\n        C(2),  S, S,  S, S,    S,  S,     S, S,     S,    S, S,\n        C(4),  S, S,  S, S,    S,  Eb(4), S, S,     S,    S, S,\n        F(4),  S, S,  S, S,    S,  Gb(4), S, S,     S,    S, S,\n        F(4),  S, S,  S, S,    S,  Eb(4), S, S,     S,    S, S,\n        C(4),  S, S,  S, S,    S,  S,     S, S,     S,    S, S,\n        S,     S, S,  S, S,    S,  Bb(3), S, S,     D(4), S, S,\n        C(4),  S, S,  S, S,    S,  S,     S, S,     S,    S, S,\n        S,     S, S,  S, S,    S,  G(2),  S, S,     S,    S, S,\n        C(2),  S, S,  S, S,    S,  S,     S, S,     S,    S, S,\n        C(4),  S, S,  S, S,    S,  Eb(4), S, S,     S,    S, S,\n        F(4),  S, S,  S, S,    S,  Gb(4), S, S,     S,    S, S,\n        F(4),  S, S,  S, S,    S,  Eb(4), S, S,     S,    S, S,\n        Gb(4), S, S,  S, S,    S,  S,     S, S,     S,    S, S,\n        S    , S, S,  S, S,    S,  S,     S, S,     S,    S, S,\n        Gb(4), S, S,  S, F(4), S,  S,     S, Eb(4), S,    S, S,\n        Gb(4), S, S,  S, F(4), S,  S,     S, Eb(4), S,    S, S\n    );\n    \n    float amp = 0.0;\n    int idx = int(time / tick_length);\n    while (idx != 0 && sine[idx % tick_amt] <= -127.0) idx--;\n    float t = time - float(idx) * tick_length;\n    float envt = min(1.0, (time / tick_length - float(idx)) / 3.0);\n    float sine_env = min(20.0 * envt, 0.25 * envt * envt - 0.5 * envt + 0.25);\n    float sine_amp = sine_env * clamp(sin(6.2831853 * 440.0 * pow(2.0, sine[idx % tick_amt] / 12.0) * t) * 4.0, -1.0, 1.0);\n    return vec2(sine_amp);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}