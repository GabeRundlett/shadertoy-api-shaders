{
    "Shader": {
        "info": {
            "date": "1710562946",
            "description": "A mosaic tile pattern with music.",
            "flags": 8,
            "hasliked": 0,
            "id": "4XSXWD",
            "likes": 4,
            "name": "Red and blue mosaic 2 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug",
                "tuba"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\nfloat scale = 1.5;\n\nvoid transform(inout vec2 uv, inout vec2 t2, inout vec3 col,inout float c1){\n        t2.y +=\n            1./4.\n            //1./3.\n            //1./8.\n        ;\n        //if(t2.y>1./4.)\n        uv = (uv+t2)/scale;\n        \n        \n \n        //if(t2.y<1./4.)\n        uv = ((vec2(uv+vec2(.5,1.5))*scale)-.5)/scale;\n        \n        t2 = triangle_wave(uv+.5);\n        uv =\n            t2/2.-triangle_wave(uv.yx)\n        ;\n        \n        {t2.x = (t2.x+1.*sign(t2.y-t2.x)); }\n\n}\n\nvec3 fractal(vec2 uv){\n    vec3 col = vec3(0.);\n    vec2 t2 = vec2(0.);\n    float c1=0.;\n    for(int k = 0; k < 12; k++){\n        //kaleidoscope!\n        //if(k>9) uv.x += iTime/2.;\n        \n        transform(uv,t2,col,c1);\n        c1 =\n            max(abs(t2.y-t2.x)/2.,c1)\n            //max(abs(t2.y+t2.x)/2.,c1)\n            //max(sign(t2.y-t2.x)/2.,c1)\n        ;\n        c1 =\n            max(1.-abs(2.*c1-1.),0.)\n        ;\n        col.x =\n            c1\n        ;\n        if(t2.y>t2.x)\n        col =\n            //abs(col-(1.-(c1*(t2.y-t2.x))))\n            //abs(col/2.-((c1*(t2.y-t2.x))))\n            //abs(col/2.-(1.-(c1*(t2.y-t2.x))))\n            //abs(col/2.-(1.-c1))\n            abs(vec3(1.-c1))\n        ;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    float t1 = 8.;\n    \n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.xy += iTime/t1/12.;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec3 col1 = fractal(uv);\n    fragColor = vec4(col1,1.0);\n    //fragColor = pow(fragColor ,vec4(1./1.8)); //gamma correction\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//remix of https://www.shadertoy.com/view/dtVyWR\nfloat mod1(float a, float b){\n    return\n        mod(a,b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    a +=\n        floor(mod1(a/2.,2.))\n    ;\n    return\n        mod(mod(floor(a),b)*mod(floor(a/(b)),b),b)\n    ;\n}\n\nfloat prime_rhythm(float time){\n    return\n        (1.+fmod(time/4.,2.))/(1.+fmod(time,2.))\n    ;\n}\n\n//change the notes without changing the rhythm\nfloat fmod1(float a, float b){\n    return\n        //fmod(a,b)\n        fmod(a+floor(a/4./4.),b)\n        //max(fmod(a+floor(a/4./4.),b),fmod(a+floor(-a/4./4.),b))\n        //fmod(a,b-fmod(a/2.,2.))\n        //fmod(floor(a)*5.,b+fmod(floor(a/8.)*3.,b))\n    ;\n}\n\n#define fract1(a) (1.-fract(-a)*fract(-a))\n//#define fract1(a) pow(1.-fract(-a)*fract(-a),1.+log(2.)-log(2.-fract(a)*fract(a)))\n//#define fract1(a) pow(fract(a),1.+log(2.)-log(1.+fract(a)))\n\nvec2 synth_(vec2 a1,vec2 a,vec2 a2,vec2 a3,vec2 nb,vec2 a4){\n    return log(a1+a*abs(a2-abs(.5-a3*vec2(fract1(nb.x*.998),fract1(nb.y)))*a4));\n}\n#define synth(a1,a,a2,a3,nb,a4) synth_(vec2(a1),vec2(a),vec2(a2),vec2(a3),vec2(nb),vec2(a4))\n\n\nvec2 sitar2(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(1./2.+a*a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      -log(1./2.+(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n    ;\n}\n\nvec2 sitar5(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(1./2.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -log(1./2.+a*a/2.*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 sitar6(vec2 a, vec2 nb){\n    return a*a/16./2.*abs((.5*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -(a/4.*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 gamelan(vec2 a, vec2 nb){\nreturn\na/16./2.*abs((1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  + .5*(1./4.+a*a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))/2. \n;\n}\n\nvec2 mainSound1(int samp, float time,float scale,int instrument,float duration,float attack){\n  \n  float s1 =\n      8.,\n  tempo1 =\n      //1.\n      //divide by prime numbers to get an interesting rhythm\n      prime_rhythm(time/2.)/prime_rhythm(time/4.+4.)\n  ,\n  t = s1*time/4./tempo1,\n  t4 = t/prime_rhythm(time+11.)/(1.+fmod(t/8.,2.)),\n  t1 = fmod(t4,2.),\n  t5 = t*2./prime_rhythm(time+7.),\n  t3 = (1.+fmod(t5,2.)),\n  t6 = time*8./t3,\n  m3 =\n      floor(fmod(t6+mod(t6/8.,3.)-mod(t6/8.,2.),s1/2.)/2.),\n  m2 =\n      1. + fmod1(t/t3/2.,s1/2.);\n  vec2\n  a= vec2(\n      //-log(fract(t/prime_rhythm(time+7.))/4.)*4.\n      //-log(fract(t/2./prime_rhythm(time+14.))*fract(t/prime_rhythm(time+7.))/8.)*4.\n      \n      //sitar / gamelan\n      //abs(1.-log(1./64./4.+fract1(t/2./prime_rhythm(time+14.))/4.)),abs(1.-log(1./64./4.+fract1(t/prime_rhythm(time+7.))/4.))\n      \n      //steel drum / oud\n      -log(attack+fract1(t/2./prime_rhythm(time+14.))/8./duration),-log(attack+fract1(t/prime_rhythm(time+7.))/8./duration)\n      \n      //hurdy-gurdy\n      //(1.-log(1./32.+abs(1./32.-fract1(t/2./prime_rhythm(time+14.))*2.))),(1.-log(1./32.+abs(1./32.-fract1(t/prime_rhythm(time+7.)))))\n\n  ),\n  nb = vec2(\n      t*pow(2.,(m3+m2-t1*4.-fmod(t/16.,2.)*4.)/5.+scale)*tempo1\n      //t*pow(2.,(m3-m2*2.+t1)/7.+6.5)*tempo1\n      \n      //airhorn remix\n      //abs(t*(pow(2.,(m3+m2-t1*4.)/7.+7.5)*tempo1/2.)-a/16.)*2.\n  );\n  vec2 sitar =\n  sitar5(a,nb)\n  //sitar2(a,nb)\n  //log(1./4.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y*2.)))/2.))\n  //a/16./2.*abs(log(1./8.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n  //-log(1./16.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2./4.))) \n  \n  ,gamelan = gamelan(a,nb)-gamelan(a,nb/2.)/2.-gamelan(a,nb/4.)/4.\n  ,gamelan1 = a/16./2.*abs(exp(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.)))\n  ,oud = a/16./2.*abs(log(.5+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      +.5*log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n  ,steel_drum = a/16./4.*abs(log(1./2.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))))\n      + log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))      \n  ,guitar = a/16./8.*abs(\n      log(1./2.+a*abs(1./8.-.125/2.*abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))))\n      -log(1./2.+a*abs(1./8.-.5*abs(1./2.-vec2(fract1(nb.x*.998),fract1(nb.y)))))\n  )\n  ,synth_drum = a/16./4.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))*4.))\n  + log(1./8.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/4.)))\n  ;\n  \n  \n  switch(instrument){\n  case 1:return\n      gamelan\n      //gamelan1\n  ;\n  case 2:return oud;\n  case 3:return steel_drum;\n  case 4:return guitar;\n  case 5:return synth_drum;\n  default:\n  return\n\n      sitar\n      \n      //steel_drum\n      \n      //oud\n      \n      //piano\n      //a/16./2.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      //+.5*log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.      \n      \n\n      //a/16.*abs(log(1.+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      //+log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))/2.      \n      \n      //a/16.*abs(1./4.+log(1.+a*abs(abs(.5-vec2(fract1(nb.x/2.*.998),fract1(nb.y/2.)))/2.))\n      //+log(1./4.+a*abs(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.  \n      \n      //a/16.*abs(1./4.+log(1.+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/4.))\n      //+log(1./4.+a*abs(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/4.)))/2.   \n      \n      //gamelan\n\n      //gamelan 2\n      //a/16.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      //-.125*log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))/2.      \n  \n      //hurdy-gurdy\n      //((abs(log(1./8.+log(1.+a)*abs(1./16.-abs(.5-vec2(fract1(nb.x*.998*4.),fract1(nb.y*4.)))/2.))-log(1./8.+log(1.+a)*abs(1./16.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))))\n\n      //log(abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))*a)\n      \n      //abs(log(abs(.5-vec2(fract(nb.x*.998),fract(nb.y)))*a/2.))/2.\n      //abs(1.+log(abs(.5-vec2(fract(nb.x*.998),fract(nb.y)))*a/2.))/2.\n      \n      //log(a*abs(1./4.-abs(.5-vec2(fract1(nb.x+.5),fract1(nb.y*2.)))))\n  ;\n  }\n}\n\nvec2 mainSound1(int samp, float time,float scale,int instrument,float duration){\n    return mainSound1(samp,time,scale,instrument,duration,1./64.*4.);\n}\n\nvec2 mainSound1(int samp, float time,float scale,int instrument){\n    return mainSound1(samp,time,scale,instrument,1.);\n}\n\nvec2 violin(int a,float b,float scale,int instrument,float duration,float attack){\n    return\n        (mainSound1(a,b,scale,instrument,duration,attack)-mainSound1(a,b,scale,instrument,duration/2.,attack))\n        -(mainSound1(a,b,scale-1.,instrument,duration,attack)-mainSound1(a,b,scale-1.,instrument,duration/2.,attack))\n    ;\n}\n\nvec2 sitar(int a,float b,float scale,int instrument,float duration,float attack){\n    return\n        (mainSound1(a,b,scale,instrument,duration,attack*8.)-mainSound1(a,b,scale,instrument,duration/2.,attack*8.))\n        -(mainSound1(a,b,scale-1.,instrument,duration,attack)-mainSound1(a,b,scale-1.,instrument,duration/2.,attack))\n    ;\n}\n\nvec2 mainSound(int a,float b){\n    return\n        \n        //tabla drum\n        //(mainSound1(a,b,6.5,1,1./4.)/2./4.+mainSound1(a,b,5.5,1,1./8.))\n        \n        //flute\n        //8.*(mainSound1(a,b,5.5,1,1./4.)-mainSound1(a,b,5.5,1,1./2.))\n\n        //gamelan\n        mainSound1(a,b,6.5,1,1./2.)\n        //(mainSound1(a,b,7.,1,1./4.)-mainSound1(a,b,6.,1,1./2.))\n        \n        //sitar(a,b,6.25,6,1./3.,1./64./4./4.)\n        \n        //2.*sitar(a,b,6.,6,1./4.,1./64.)\n        \n        //using sitar2\n        //(mainSound1(a,b,5.5,6,1./2.)-mainSound1(a,b,4.5,6,2.))\n        \n        //sounds like sitar (using oud)\n        //abs(mainSound1(a,b,7.25,2,1./2.)-mainSound1(a,b,6.25,2,1.)/2.)\n        \n        //mainSound1(a,b,5.5,5,2.)\n\n        \n        //oud remix\n        //(mainSound1(a,b,7.,2)+mainSound1(a,b/2.,6.,2))/2.;\n        \n        //cymbal remix\n        //abs(mainSound1(a,b,7.,3,1./4.)-mainSound1(a,b,6.5,3,1./4.))/2.;\n        \n        //gong remix (with oud)\n        //abs(mainSound1(a,b,7.,1)-mainSound1(a,b,6.5,1))/2.;\n        \n        //echo\n        //abs(mainSound1(a,b,6.5,1)+mainSound1(a,b+1./16.,5.5,1))\n        \n        //(mainSound1(a,b,7.5,1)+mainSound1(a,b,6.5,1)+mainSound1(a,b,5.5,1))/3.\n        //(mainSound1(a,b,7.5,1)+mainSound1(a,b/2.,7.5,1)+mainSound1(a,b/4.,7.5,1))/3.\n        //mainSound1(a,b,6.5,1)+mainSound1(a,b/2.,6.5,1)/2.+mainSound1(a,b/4.,6.5,1)/4.+mainSound1(a,b/8.,6.5,1)/8.\n    ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}