{
    "Shader": {
        "info": {
            "date": "1549511967",
            "description": "base on [url]https://twitter.com/Emberheartgames/status/1093083282944729089[/url]\nloop 25.13 sec (8*pi)",
            "flags": 32,
            "hasliked": 0,
            "id": "WdBGzc",
            "likes": 33,
            "name": "Lissajous curves",
            "published": 3,
            "tags": [
                "2d",
                "lissajous"
            ],
            "usePreview": 0,
            "username": "morimea",
            "viewed": 1165
        },
        "renderpass": [
            {
                "code": "// 2020 does not work anymore\n//#define mainImage(O,U) O = texelFetch(iChannel0,ivec2(U),0)\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by Danil (2019+) https://github.com/danilw\n// The MIT License\n\n//short version\n// loop time 8*PI\n#define gc(x) vec3( .6 + .6 * cos( 6.3 *  x/s  + vec3(0,23,21)))\n\nvoid mainImage( out vec4 O, in vec2 u ){\n    O = vec4(vec3(0x1a,0x13,0x21)/float(0xff),1.);\n    vec2 R = iResolution.xy,\n    U = (u -.5*R) / R.y;\n    if(max(abs(U.x),U.y) > .5){O=vec4(0.); return;}\n    float s=1./8., //8. it number of tiles, set to any\n    t = iTime,\n    z = 1./ R.y;\n    vec2 p=(fract(U/s)-.5),\n    v=floor(U/s)+.5/s;\n    s=1./s;\n    bvec2 gv=bvec2(v.x==0.,v.y==s-1.);\n    float r=(v.x+1.)/2.-.5,r1=(s-1.-v.y+1.)/2.-.5;\n    if(gv.x)r=r1;if(gv.y)r1=r;\n    vec3 ccx=gc(v.x);\n    vec3 ccy=gc(s-1.-v.y);\n    float dc=0.;\n    for(float i=0.;i<2.;i++)\n    dc=max(dc,smoothstep(z*s,-z*s,length(p+.45*vec2(sin((t+1./120.*i)*r-1.57),cos((t+1./120.*i)*r1-1.57))) - .015));\n    O.rgb = mix(O.rgb,ccy+ccx-ccy*ccx,dc);\n    vec4 yc=texture(iChannel0,u/R)*(1.-0.25*smoothstep(24.3,25.132,mod(t,25.132)));\n    O=(gv.x||gv.y)?max(O,yc/(1.+.025*max(r,r1)/s)):max(O,yc/(1.+0.02*max(mod(t,25.132)/13.-1.,0.)));\n}\n\n\n\n\n\n\n\n\n/*\n//original\n\n#define SS(x, y, z) smoothstep(x, y, z)\n#define PI (4.0 * atan(1.0))\n#define res (iResolution.xy / iResolution.y)\n\n//using https://iquilezles.org/articles/distfunctions2d\n\n//number of tiles on screen to draw\n#define tiles 8.\n\nfloat zv;\nvec2 res_g;\nfloat timeval;\n\nconst vec3 dark=vec3(0x1a,0x13,0x21)/float(0xff);\nconst vec3 white=vec3(0xdc,0xe0,0xd1)/float(0xff);\nconst vec3 red=vec3(0xf6,0x36,0x2c)/float(0xff);\nconst vec3 org=vec3(0xe2,0x71,0x2f)/float(0xff);\nconst vec3 yell=vec3(0xfc,0xfe,0x7e)/float(0xff);\nconst vec3 gre=vec3(0x44,0xd6,0x6b)/float(0xff);\nconst vec3 blu=vec3(0x3d,0xc7,0xd0)/float(0xff);\nconst vec3 pnk=vec3(0xf1,0x70,0xa3)/float(0xff);\nconst vec3 prp=vec3(0xa2,0x7b,0xe8)/float(0xff);\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n  return length(p) - r;\n}\n\nvec2 funcit(float r, float o,float r1, float o1){\n    return vec2(sin(timeval* r + o),cos(timeval* r1 + o1));\n}\n\nfloat draw_circle(vec2 p,float st, float r, float o,float r1, float o1){\n    float d=0.;\n    vec2 pos=vec2(0.,0.);\n    vec2 v=funcit(r,o,r1,o1);\n    pos.x+=(0.45-zv*st)*(v.x);\n    pos.y+=(0.45-zv*st)*(v.y);\n    float radius=0.015;\n    d=max(d,SS(zv*st,-zv*st,sdCircle(p+pos,radius)));\n    return d;\n}\n\nvec3 getc(int id){\n    vec3 retc=white;\n    switch(id){\n        case 0:retc=vec3(0.);break;\n        case 1:retc=red;break;\n        case 2:retc=org;break;\n        case 3:retc=yell;break;\n        case 4:retc=gre;break;\n        case 5:retc=blu;break;\n        case 6:retc=pnk;break;\n        case 7:retc=prp;break;\n    }\n    return retc;\n}\n\nbvec2 gv=bvec2(false);\nfloat gix=0.;\n\nvec4 main_c(vec2 p){\n    if(max(abs(p)-0.5,vec2(0.))!=vec2(0)) return vec4(0.);\n    vec3 col=dark;\n    \n    float st=1./tiles;\n    vec2 uv=mod(p,st)-st/2.;\n    uv*=1./st;\n    vec2 v=(floor((p)/st))+.5/st;\n    st=1./st;\n    \n    float r=(v.x+1.)/2.;\n    float o=-PI/2.;\n    float r1=(st-1.-v.y+1.)/2.;\n    float o1=-PI/2.;\n    gv=bvec2(v.x==0.,v.y==st-1.);\n    if(gv.x)r=r1;\n    if(gv.y)r1=r;\n    gix=max(r,r1)/st;\n    \n    vec3 ccx=getc(int(v.x));\n    vec3 ccy=getc(int(st-1.-v.y));\n    col=mix(col,(ccy+ccx-ccy*ccx),draw_circle(uv,st,r-0.5,o,r1-0.5,o1));\n    return vec4(col,1.);\n}\n\nfloat zoom_calc(float zx) {\n    float ex = (1.*zx)/ (iResolution.y);\n    return ex;\n}\n\nvoid init_globals(vec2 fragCoord) {\n    zv = zoom_calc(1.);\n    res_g = res;\n}\n\nvec4 postfx(vec2 fragCoord, vec4 tcc){\n    vec2 uv = (fragCoord.xy) / iResolution.xy;\n    vec4 retc=texture(iChannel0,uv);\n    if(gv.x||gv.y)retc=max(tcc,retc/(1.00+0.025*gix));\n    else\n    retc=max(tcc,retc/1.00);\n    return retc;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 ret_col=vec4(0.);\n    timeval=mod(iTime,15.);\n    if(ivec2(fragCoord.xy)==ivec2(iResolution.xy-1.)){\n        ret_col=vec4(-1.);\n        if(timeval>=14.9)ret_col=vec4(0.);\n        fragColor = ret_col;\n        return;\n    }\n    if(texelFetch(iChannel0,ivec2(iResolution.xy-1.),0).x>=0.){ret_col=vec4(vec3(0.),1.);fragColor = ret_col;return;}\n    \n    timeval=min(timeval,12.6);\n    vec2 uv = (fragCoord.xy) / iResolution.y - res/2.0;\n    init_globals(fragCoord);\n    ret_col=main_c(uv);\n    timeval=timeval+1./120.;\n    ret_col=max(ret_col,main_c(uv));\n    ret_col=postfx(fragCoord,ret_col);\n    fragColor = ret_col;\n}\n*/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}