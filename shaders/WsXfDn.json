{
    "Shader": {
        "info": {
            "date": "1587989157",
            "description": "Collatz fractal",
            "flags": 0,
            "hasliked": 0,
            "id": "WsXfDn",
            "likes": 1,
            "name": "Coloured Collatz fractal",
            "published": 3,
            "tags": [
                "fractal",
                "collatz"
            ],
            "usePreview": 0,
            "username": "hamalan",
            "viewed": 340
        },
        "renderpass": [
            {
                "code": "// Original code created by Trashe725\n\n#define AA 4\n#define pi 3.14159265358979323846\n#define maxIter 100\n#define maxThres 100.\n\n// from julesb\n// github: https://github.com/julesb/glsl-util/blob/master/complexvisual.glsl\n\nfloat sinnh(float a) { return float(0.5*( exp(a) - exp(-a))); }\nfloat cossh(float a) { return float(0.5*( exp(a) + exp(-a))); }\nfloat tannh(float a) { return float(sinnh(a)/cossh(a)); }\nvec2 cx_add(vec2 a, float b) { return vec2(a.x+b, a.y); }\nvec2 cx_mul(vec2 a, vec2 b) { return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x); }\nvec2 cx_div(vec2 a, vec2 b) { return vec2((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y), (a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)); }\nvec2 cx_cos(vec2 a) { return vec2(cos(a.x) * cossh(a.y), -sin(a.x) * sinnh(a.y)); }\nvec2 cx_sin(vec2 a) { return vec2(sin(a.x) * cossh(a.y), cos(a.x) * sinnh(a.y)); }\nvec2 cx_tanh(vec2 a) { return vec2(cx_div(cx_sin(a),cx_cos(a))); }\n\nvec3 render(vec2 fragCoord, float time)\n{\n    //zoom\n    float sc = 0.12;\n    // Center of the image\n    vec2 ce = vec2(1.99, 0.0);\n    float zoom = time;\n    sc = sc * pow(0.9, zoom);\n    \n    vec2 fc = (-iResolution.xy + 2.0 *fragCoord) / iResolution.x;\n    vec2 z = ce + sc * fc;\n    vec2 dz = vec2(1.0, 0.0);\n    \n    vec2 lz = z;\n    vec2 ldz = dz;\n    \n    //iter\n    int iter = 0;\n    while(iter < maxIter && length(z) < maxThres){\n        lz = z;\n        ldz = dz;\n        vec2 piz = pi*z;\n        dz = cx_add( pi*cx_mul(cx_sin(piz), cx_add(z*4., 2.))-5.*cx_cos(piz), 7.)/4.;\n        z = ( cx_add(z*7., 2.) - cx_mul(cx_add(z*5., 2.), cx_cos(piz)) )/4.;\n        ++iter;\n    }\n    \n    //color\n    float de = length(lz)*log(length(lz))/length(ldz);\n    if (iter < maxIter && length(ldz) < maxThres){\n        \n        return vec3(1.0, 1.0, 1.0);\n    } else {\n    \treturn vec3(0.0, sin(clamp( length(dz), 0.0, 1.0)), tannh(clamp(length(ldz), 0.0, 1.0)));\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    float time = -sin(iTime/10.)*9.1 + pi/2.;\n#ifdef AA\n    for(int m=0;m<AA;++m){\n        for(int n=0;n<AA;++n){\n        \tvec2 px = fragCoord + vec2(float(m), float(n))/float(AA);\n            col += render(px, time);\n        }\n    }\n    \n    col /= float(AA*AA);\n#else\n    col = render(fragCoord, time);\n#endif\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}