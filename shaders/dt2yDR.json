{
    "Shader": {
        "info": {
            "date": "1691678487",
            "description": "The quadcopter's big sister",
            "flags": 0,
            "hasliked": 0,
            "id": "dt2yDR",
            "likes": 22,
            "name": "Hexcopter",
            "published": 3,
            "tags": [
                "flight",
                "rotor"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 215
        },
        "renderpass": [
            {
                "code": "// \"Hexcopter\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n#define AA  1   // optional antialiasing\n\n#define VAR_ZERO min (nFrame, 0)\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat Maxv2 (vec2 p);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\n\nvec3 ltPos[3], ltCol[3], flyerPos, qHit;\nvec2 aRotCs[3];\nfloat tCur, dstFar;\nint nFrame, idObj;\nconst int idCab = 11, idBod = 12, idArm = 13, idGard = 14, idMot = 15, idSup = 16, idAnt = 17,\n   idSkd = 18, idCam = 19, idProp = 20;\nconst float pi = 3.1415927;\n\n#define CosSin(x) (sin ((x) + vec2 (0.5 * pi, 0.)))\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat FlyerDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, a, s, r;\n  q = p;\n  q.y -= 0.6;\n  d = max ((abs (q.y) + abs (q.z)) / sqrt(2.) - 0.5, max (q.y - 0.35, abs (q.x) - 0.7));\n  DMINQ (idCab);\n  d = PrRoundCylDf (vec3 (q.x, q.y - 0.17, abs (q.z) - 0.53).yzx, 0.03, 0.07, 0.5);\n  DMINQ (idCab);\n  d = min (min (PrSphDf (vec3 (abs (q.x) - 0.7, q.y, q.z), 0.2),\n     PrSphDf (vec3 (q.x - 0.7, q.y, abs (q.z) - 0.4), 0.1)),\n     PrSphDf (vec3 (q.x, q.y - 0.35, q.z), 0.15));\n  DMINQ (idCam);\n  d = PrRoundCylDf (vec3 (abs (q.xz) - vec2 (0.5, 0.2), q.y - 0.6), 0.01, 0.01, 0.3);\n  DMINQ (idAnt);\n  q = p;\n  d = PrSphDf (vec3 (abs (q.x) - 0.6, q.y + 0.35, q.z), 0.15);\n  DMINQ (idCam);\n  q.y -= -0.6;\n  d = min (PrRoundBoxDf (vec3 (q.x, q.y, abs (q.z) - 0.55), vec3 (0.7, 0.01, 0.06), 0.02),\n     PrCylDf (vec3 (abs (q.xz) - vec2 (0.55, 0.55), q.y - 0.2), 0.04, 0.2));\n  DMINQ (idSkd);\n  q = p;\n  a = (length (q.xz) > 0.) ? atan (q.z, - q.x) / (2. * pi) : 0.;\n  s = sign (fract (3. * a) - 0.5);\n  q.xz = Rot2Cs (q.xz, CosSin (2. * pi * (floor (6. * a) + 0.5) / 6.));\n  d = min (max ((abs (q.y) - q.x) / sqrt(2.) - 0.85, max (-1. - q.x, abs (q.y) - 0.35)),\n     max ((abs (q.y) + abs (q.z)) / sqrt(2.) - 0.14, abs (q.x + 1.) - 0.1));\n  DMINQ (idBod);\n  d = max ((abs (abs (q.y) - 0.1) + abs (q.z)) / sqrt(2.) - 0.04, abs (q.x + 2.5) - 1.5);\n  DMINQ (idArm);\n  d = (abs (length (q.xz) - 3.06) + abs (abs (q.y) - 0.22)) / sqrt(2.) - 0.04;\n  q.x += 2.8;\n  r = length (q.xz) - 1.2;\n  d = max (d, - r);\n  DMINQ (idSup);\n  d = PrRoundCylDf (q.xzy, 0.15, 0.05, 0.25);\n  DMINQ (idMot);\n  q.y = abs (q.y) - 0.22;\n  d = max (Maxv2 (abs (abs (Rot2Cs (q.xz, CosSin (pi/4.))) - 0.85)) - 0.04, q.y);\n  DMINQ (idSup);\n  d = (abs (r) + abs (q.y)) / sqrt(2.) - 0.04;\n  DMINQ (idGard);\n  q.xz = Rot2Cs (q.xz, CosSin (10.1 * s * pi * tCur));\n  d = PrRoundBoxDf (q, vec3 (1.1, 0.01, 0.07), 0.01);\n  DMINQ (idProp);\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float flyerSz;\n  flyerSz = 1.;\n  p -= flyerPos;\n  p.xy = Rot2Cs (p.xy, aRotCs[0]);\n  p.zy = Rot2Cs (p.zy, aRotCs[1]);\n  p.xz = Rot2Cs (p.xz, aRotCs[2]);\n  return flyerSz * FlyerDf (p / flyerSz, dstFar / flyerSz);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dMax)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.001 || d > dMax) break;\n  }\n  return 0.3 + 0.7 * sh;\n}\n\nvec4 FlyerCol ()\n{\n  vec4 col4, fCol4, gCol4;\n  float a;\n  a = atan (qHit.z, - qHit.x) / (2. * pi) + 0.5;\n  fCol4 = vec4 (0.8, 0.8, 0.9, 0.2);\n  gCol4 = vec4 (0.9, 0.9, 0.4, 0.2);\n  if (idObj == idCab) {\n    col4 = mix (gCol4, fCol4 * ((qHit.y < 0.) ? 1.2 : 1.), step (0.02, abs (qHit.y)));\n    if (qHit.y > 0.) col4 = mix (gCol4, col4, step (0.05, abs (abs (qHit.x - 0.4 +\n       0.6 * abs (qHit.z) - 0.05) - 0.1)));\n    col4 = mix (vec4 (1., 1., 0., -1.), col4, step (0.21, length (qHit.yz)));\n    if (qHit.x < 0.) col4 = mix (vec4 (mix (vec3 (1., 0., 0.), vec3 (0., 0., 1.),\n       step (0.5, fract (2. * tCur + 0.25 * sign (qHit.z)))), -1.), col4, step (0.05,\n       length (vec2 (qHit.y, abs (qHit.z) - 0.4))));\n  } else if (idObj == idBod) {\n    col4 = mix (gCol4, fCol4 * ((qHit.y < 0.) ? 1.2 : 1.), step (0.02, abs (qHit.y)));\n    if (qHit.y < 0.) col4 = mix (vec4 (0., 1., 0., -1.), col4, step (0.02, abs (qHit.x + 0.3)));\n  } else if (idObj == idMot) {\n    col4 = gCol4;\n    if (abs (qHit.y) < 0.18) col4 *= 0.5 + 0.5 * step (0.5, fract (16. * a));\n    else col4 = mix (vec4 (0., 1., 0., -1.), col4, step (0.03, length (qHit.xz)));\n  } else if (idObj == idArm) {\n    col4 = mix (fCol4, gCol4, step (0.7, fract (8. * qHit.x)));\n  } else if (idObj == idSup) {\n    col4 = mix (fCol4, gCol4, step (0.7, fract (16. * qHit.y)));\n  } else if (idObj == idGard) {\n    col4 = mix (fCol4, gCol4, step (0.7, fract (64. * a)));\n  } else if (idObj == idAnt) {\n    col4 = vec4 (0.8, 0.8, 0.8, 0.2);\n  } else if (idObj == idSkd) {\n    col4 = vec4 (0.4, 0.4, 0.4, 0.05);\n  } else if (idObj == idCam) {\n    col4 = vec4 (0.2, 0.2, 0.2, -1.);\n  } else if (idObj == idProp)  {\n    col4 = vec4 (0.9, 0.9, 1., 0.3) * (0.5 + 0.5 * step (0.5, fract (2. * abs (qHit.x))));\n  }\n  return col4;\n}\n\nvoid SetConf ()\n{\n  float a[3], f, t;\n  t = 0.4 * tCur;\n  f = SmoothBump (0.15, 0.85, 0.05, mod (0.05 * tCur, 1.));\n  flyerPos.xz = vec2 (0.);\n  flyerPos.y = 0.8 + f * (2.5 + 1.2 * sin (1.2 * pi * t));\n  a[0] = f * 0.1 * pi * sin (1.1 * pi * t);\n  a[1] = f * 0.05 * pi * sin (1.4 * pi * t);\n  a[2] = (0.1 + 0.9 * f) * pi * sin (0.2 * pi * t);\n  aRotCs[0] = sin (a[0] + vec2 (0.5 * pi, 0.));\n  aRotCs[1] = sin (a[1] + vec2 (0.5 * pi, 0.));\n  aRotCs[2] = sin (a[2] + vec2 (0.5 * pi, 0.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, ltDir, ltAx, c;\n  vec2 u;\n  float dstObj, sh, att, ltDst, nDotL;\n  bool isMet;\n  SetConf ();\n  col = vec3 (0.);\n  dstObj = ObjRay (ro, rd);\n  isMet = false;\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = FlyerCol ();\n    isMet = true;\n  } else if (rd.y < 0.) {\n    dstObj = - ro.y / rd.y;\n    ro += dstObj * rd;\n    col4 = vec4 (0.5, 0.5, 0.7, 0.1);\n    u = abs (fract (ro.xz + 0.5) - 0.5);\n    col4.rgb *= (1. - 0.15 * smoothstep (0.05, 0.08, (abs (dot (u, vec2 (1.))) - 0.2) - 0.2)) *\n       (1. - 0.15 * smoothstep (0.05, 0.08, length (max (u - 0.42, 0.))));\n    vn = vec3 (0., 1., 0.);\n  }\n  if (dstObj < dstFar) {\n    if (col4.a >= 0.) {\n      for (int k = VAR_ZERO; k < 3; k ++) {\n        ltDir = ltPos[k] - ro;\n        ltDst = length (ltDir);\n        ltDir /= ltDst;\n        ltAx = normalize (ltPos[k] - vec3 (0., 2., 0.));\n        att = smoothstep (0., 0.02, dot (ltDir, ltAx) - 0.97);\n        sh = (dstObj < dstFar) ? ObjSShadow (ro + 0.01 * vn, ltDir, ltDst) : 1.;\n        nDotL = max (dot (vn, ltDir), 0.);\n        if (isMet) nDotL *= nDotL;\n        c = att * ltCol[k] * (col4.rgb * (0.1 + 0.9 * sh * nDotL) +\n           col4.a * step (0.95, sh) * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.));\n        col += c * c;\n      }\n      col = sqrt (col);\n    } else col = col4.rgb * (0.4 + 0.6 * max (- dot (vn, rd), 0.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.02 * pi * tCur;\n    el -= 0.05 * pi * sin (0.02 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, -0.01 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 1.5, -30.);\n  zmFac = 5.2;\n  dstFar = 60.;\n  for (int k = VAR_ZERO; k < 3; k ++) {\n    ltPos[k] = vec3 (0., 30., 0.);\n    ltPos[k].xy = Rot2D (ltPos[k].xy, 0.25 * pi * (1. + 0.2 * sin (0.05 * pi * tCur -\n       pi * float (k) / 3.)));\n    ltPos[k].xz = Rot2D (ltPos[k].xz, -0.1 * pi * tCur + 2. * pi * float (k) / 3.);\n  }\n  ltCol[0] = vec3 (1., 0.2, 0.2);\n  ltCol[1] = ltCol[0].gbr;\n  ltCol[2] = ltCol[0].brg;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}