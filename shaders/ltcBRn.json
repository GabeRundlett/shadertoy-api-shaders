{
    "Shader": {
        "info": {
            "date": "1538350163",
            "description": "Coded in about half an hour while barely conscious, after seeing Ryoji Ikeda's Datamatics 2.0 live.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltcBRn",
            "likes": 10,
            "name": "data.exhaustion",
            "published": 3,
            "tags": [
                "ikeda"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 808
        },
        "renderpass": [
            {
                "code": "#define fGlobalTime iTime\n\nfloat noise(float a)\n{\n  return fract(a*126.38921+13.156);\n}\n\nfloat noise2d(vec2 a)\n{\n  return fract(sin(dot(a,vec2(12.9345,4.3742)))*131.1563);\n}\n\nfloat verticalNoise(int a){\n  float n = noise(float(a));\n  return (n*.5+.5) * (n>.5?-1.:1.);\n}\n\nfloat digit(ivec2 p, int d)\n{\n  int[16] font=int[16](\n    0xEAAAE0,\n    0x4C44E0,\n    0xE2E8E0,\n    0xE2E2E0,\n    0xAAE220,\n    0xE8E2E0,\n    0xE8EAE0,\n    0xE22220,\n    0xEAEAE0,\n    0xEAE2E0,\n    0xEAEAA0,\n    0xCACAC0,\n    0xE888E0,\n    0xCAAAC0,\n    0xE8E8E0,\n    0xE8E880\n  );\n  return float((font[d]>>((3-p.x)+p.y*4))&1);\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  int cellx = int(floor(uv.x * 8.));\n  float speed = 1.;\n  float verticalShift = fract(verticalNoise(cellx) * fGlobalTime * speed);\n  uv.y += verticalShift;\n  int celly = int(floor((uv.y) * 8.));\n  vec2 subspace = fract(uv*8.);\n  bool isNumbers = (celly&1)!=0;\n\n  vec2 cellsize = iResolution.xy/8.;\n  ivec2 pixelspace = ivec2(subspace * cellsize);\n\n  if(isNumbers)\n  {\n    out_color = vec4(digit(pixelspace%ivec2(4,6),int(noise2d(fract(fGlobalTime)+3.*vec2(pixelspace/ivec2(4,6)))*16.)));\n    out_color *= step(.5,noise2d(fract(fGlobalTime)+.5*vec2(pixelspace/ivec2(4,6))));\n  }\n  else\n  {\n    out_color = vec4(noise2d(subspace) * (noise2d(vec2(cellx,celly)+fract(fGlobalTime))));\n    out_color *= noise(uv.x*noise(uv.x+fract(fGlobalTime))+float(celly)*5.1);\n    out_color *= noise(uv.y*noise(uv.y+fract(fGlobalTime))+float(cellx)*7.1);\n    out_color *= 3.;\n  }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}