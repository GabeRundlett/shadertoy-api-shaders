{
    "Shader": {
        "info": {
            "date": "1614913116",
            "description": "You must give a description to your shader",
            "flags": 0,
            "hasliked": 0,
            "id": "wlVfzt",
            "likes": 0,
            "name": "Baby's First Raymarch",
            "published": 3,
            "tags": [
                "raymarch"
            ],
            "usePreview": 0,
            "username": "plinky",
            "viewed": 244
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DISTANCE 100.0\n#define SURF_DIST 0.1\n\nfloat getSphere(vec3 point) {\n    // leftright, above ground plane, away from camera, radius\n    vec4 sphere = vec4(0, sin(iTime), 6, 1);\n    return length(point - sphere.xyz) - sphere.w;\n}\n\nfloat getPlane(vec3 point) {\n    return point.y;\n}\n\nfloat getDist(vec3 point) {\n    return min(\n        getSphere(point),\n        min(\n            getPlane(point),\n            getSphere(point) + 0.001\n        )\n    );\n}\n\nfloat rayMarch(vec3 rayOrigin, vec3 rayDistance) {\n    float dO = 0.0;\n\n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 marchLocation = rayOrigin + rayDistance * dO;\n        float ds = getDist(marchLocation);\n        dO += ds;\n        if(dO > MAX_DISTANCE || ds < SURF_DIST) {\n            break;\n        }\n    }\n    \n    return dO;\n}\n\n\nvec3 getNormal(vec3 point) {\n    float distance = getDist(point);\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 normal = distance - vec3(\n        getDist(point - e.xyy),\n        getDist(point - e.yxy),\n        getDist(point - e.yyx)\n    );\n    \n    return normalize(normal);\n}\n\nfloat getLight(vec3 point) {\n    vec3 lightPosition = vec3(0, 5, 6);\n    lightPosition.xz += vec2(sin(iTime), cos(iTime)) * 10.0;\n    vec3 light = normalize(lightPosition - point);\n    vec3 normal = getNormal(point);\n\n    float shadow = 1.0;\n    float d = rayMarch(point + normal * SURF_DIST * 2.1, light);\n    if(d < length(lightPosition - point)) {\n        shadow = 0.5;\n    }\n    \n    return shadow * clamp(dot(normal, light), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec3 rayOrigin = vec3(0, 1, 0);\n    vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1));\n    \n    float distance = rayMarch(rayOrigin, rayDirection);\n    \n    vec3 point = rayOrigin + rayDirection * distance;\n    float diffuseLighting = getLight(point);\n    \n    vec3 col = vec3(distance);\n    col = vec3(diffuseLighting);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}