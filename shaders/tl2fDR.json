{
    "Shader": {
        "info": {
            "date": "1617377670",
            "description": "sdfasdfasdf",
            "flags": 0,
            "hasliked": 0,
            "id": "tl2fDR",
            "likes": 0,
            "name": "asdkfjhaskjdhfaksjdhfaklsjhdfasj",
            "published": 3,
            "tags": [
                "dfsdf"
            ],
            "usePreview": 0,
            "username": "lennyjpg",
            "viewed": 239
        },
        "renderpass": [
            {
                "code": "vec3 rgb2hsl(vec3 color) {\n \tvec3 hsl; // init to 0 to avoid warnings ? (and reverse if + remove first part)\n\n \tfloat fmin = min(min(color.r, color.g), color.b); //Min. value of RGB\n \tfloat fmax = max(max(color.r, color.g), color.b); //Max. value of RGB\n \tfloat delta = fmax - fmin; //Delta RGB value\n\n \thsl.z = (fmax + fmin) / 2.0; // Luminance\n\n \tif (delta == 0.0) //This is a gray, no chroma...\n \t{\n \t\thsl.x = 0.0; // Hue\n \t\thsl.y = 0.0; // Saturation\n \t} else //Chromatic data...\n \t{\n \t\tif (hsl.z < 0.5)\n \t\t\thsl.y = delta / (fmax + fmin); // Saturation\n \t\telse\n \t\t\thsl.y = delta / (2.0 - fmax - fmin); // Saturation\n\n \t\tfloat deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;\n \t\tfloat deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;\n \t\tfloat deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;\n\n \t\tif (color.r == fmax)\n \t\t\thsl.x = deltaB - deltaG; // Hue\n \t\telse if (color.g == fmax)\n \t\t\thsl.x = (1.0 / 3.0) + deltaR - deltaB; // Hue\n \t\telse if (color.b == fmax)\n \t\t\thsl.x = (2.0 / 3.0) + deltaG - deltaR; // Hue\n\n \t\tif (hsl.x < 0.0)\n \t\t\thsl.x += 1.0; // Hue\n \t\telse if (hsl.x > 1.0)\n \t\t\thsl.x -= 1.0; // Hue\n \t}\n\n \treturn hsl;\n }\nvec3 rgb2hsv(vec3 rgb) {\n \tfloat Cmax = max(rgb.r, max(rgb.g, rgb.b));\n \tfloat Cmin = min(rgb.r, min(rgb.g, rgb.b));\n \tfloat delta = Cmax - Cmin;\n\n \tvec3 hsv = vec3(0., 0., Cmax);\n\n \tif (Cmax > Cmin) {\n \t\thsv.y = delta / Cmax;\n\n \t\tif (rgb.r == Cmax)\n \t\t\thsv.x = (rgb.g - rgb.b) / delta;\n \t\telse {\n \t\t\tif (rgb.g == Cmax)\n \t\t\t\thsv.x = 2. + (rgb.b - rgb.r) / delta;\n \t\t\telse\n \t\t\t\thsv.x = 4. + (rgb.r - rgb.g) / delta;\n \t\t}\n \t\thsv.x = fract(hsv.x / 6.);\n \t}\n \treturn hsv;\n }\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/max(iResolution.x,iResolution.y);\n    float t = iMouse.x + iTime * 0.02;\n    vec2 u = uv * 1.3;\n   \n    u+=200.0;\n    float d = snoise(vec3(-u.x,-u.y,t+55.0)*0.1);\n    /*\n    float f = 0.5;\n    float angle = d*2.0;\n    u.x+=sin(angle)*f;\n    u.y+=cos(angle)*f;\n*/\n    \n    float r = snoise(vec3(u.x,u.y,t));\n    u+=123.45;\n    float g = snoise(vec3(u.x,u.y,t+10.0));\n    u+=1123.45;\n    float b = snoise(vec3(u.x,-u.y,t+50.0));\n    vec3 off = vec3(1.0, 0.6, 0.37);\n    vec3 rgb = 0.5-vec3(r,g,b)*off;\n    vec3 col = rgb2hsv(rgb);\n    //col*=0.9;\n   // col.b-=d*3.0;\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}