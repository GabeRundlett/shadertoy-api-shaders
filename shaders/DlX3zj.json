{
    "Shader": {
        "info": {
            "date": "1672006525",
            "description": "A finite element simulation of a scalar field.\n\nIf the screen is black, tap it with a mouse.",
            "flags": 32,
            "hasliked": 0,
            "id": "DlX3zj",
            "likes": 2,
            "name": "Finite element scalar field",
            "published": 3,
            "tags": [
                "simulation",
                "scalarfield",
                "fem"
            ],
            "usePreview": 0,
            "username": "delfigamer",
            "viewed": 268
        },
        "renderpass": [
            {
                "code": "/*\nThis shader simulates a scalar field S governed by this equation:\nd^2 / dt^2 S = div grad S + d/dt R\n\nThe exitation source is placed at the current mouse position.\n\nIn this simulation, this 2nd-order diff equation is decomposed into\ntwo 1st-order ones:\nd/dt Q = grad S\nd/dt S = div Q + R\n\nThe Q and S fields are placed on a staggered grid, with\nQx cells offset by -0.5 in the x direction, and\nQy cells offset by -0.5 in the y direction\nrelative to S and R.\n\nIn addition, on the boundaries of the simulation area,\nwe place (mostly) non-reflective boundary conditions of the form:\nd/dt S = d/dx S (on the left side, analogously for others)\n\nIn the decomposed form, this is formulated as:\nQx = S\n\n\n\nOverall, the FEM update equations are,\nfor the interior:\nQx[u-0.5, v, t+0.5] =\n    Qx[u-0.5, v, t-0.5] +\n    0.5 * (S[u, v, t] - S[u-1, v, t])\nQy[u, v-0.5, t+0.5] =\n    Qy[u, v-0.5, t-0.5] +\n    0.5 * (S[u, v, t] - S[u, v-1, t])\nS[u, v, t+1] =\n    S[u, v, t] +\n    0.5 * (Qx[u-0.5, v, t-0.5] - Qx[u-0.5, v, t-0.5]) +\n    0.5 * (Qy[u, v+0.5, t-0.5] - Qy[u, v-0.5, t-0.5]) +\n    R[u, v, t+0.5]\n\nfor the left edge:\nQx[-0.5, v, t+0.5] = R[0, v, t]\n\nfor the right edge:\nQx[maxu+0.5, v, t+0.5] = - R[maxu, v, t]\n\nfor the bottom edge:\nQy[u, -0.5, t+0.5] = R[u, 0, t]\n\nfor the top edge:\nQy[u, maxv+0.5, t+0.5] = - R[u, maxv, t]\n\n\n\nIn this simulation, the S field takes on complex values.\n\n\n\nThe R field here is:\nR[u, v, t] = A * Exp[I * (f t)] * DiracDelta[u - mouseu, v - mousev]\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 p = 100.0 * texture(iChannel0, fragCoord/iResolution.xy);\n    float r = dot(p, vec4( 1.0,  0.0,   0.0, 0.0));\n    float g = dot(p, vec4(-0.5,  0.866, 0.0, 0.0));\n    float b = dot(p, vec4(-0.5, -0.866, 0.0, 0.0));\n    fragColor = vec4(r, g, b, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (\n        fragCoord.x <= 1.0 ||\n        fragCoord.y <= 1.0 ||\n        fragCoord.x >= iResolution.x-1.0 ||\n        fragCoord.y >= iResolution.y-1.0\n    ) {\n        fragColor = vec4(0, 0, 0, 0);\n    } else {\n        vec4 p = texture(iChannel0, fragCoord/iResolution.xy);\n        vec4 qxr = texture(iChannel1, (fragCoord + vec2(1,0))/iResolution.xy);\n        vec4 qxl = texture(iChannel1, (fragCoord)/iResolution.xy);\n        vec4 qyr = texture(iChannel2, (fragCoord + vec2(0,1))/iResolution.xy);\n        vec4 qyl = texture(iChannel2, (fragCoord)/iResolution.xy);\n        vec4 r = rfield(fragCoord, iResolution.xy, iMouse.xy, iFrame);\n        vec4 dxqx = qxr - qxl;\n        vec4 dyqy = qyr - qyl;\n        vec4 dtp = 0.5 * (dxqx + dyqy) + r;\n        fragColor = p + dtp;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "vec4 rfield(vec2 coord, vec2 res, vec2 point, int frame)\n{\n    float t = 0.1 * float(frame);\n    float a = 0.3;\n    if ((coord + vec2(0.5, 0.5)) == point) {\n        return a * vec4(cos(t), sin(t), 0, 0);\n    //} else if ((coord + vec2(-0.5, 0.5)) == point) {\n    //    return -a * vec4(cos(t), sin(t), 0, 0);\n    } else {\n        return vec4(0, 0, 0, 0);\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.x <= 2.0) {\n        fragColor = texture(iChannel0, (fragCoord)/iResolution.xy);\n    } else if (fragCoord.x >= iResolution.x - 2.0) {\n        fragColor = - texture(iChannel0, (fragCoord - vec2(1,0))/iResolution.xy);\n    } else {\n        vec4 qx = texture(iChannel1, fragCoord/iResolution.xy);\n        vec4 pr = texture(iChannel0, (fragCoord)/iResolution.xy);\n        vec4 pl = texture(iChannel0, (fragCoord - vec2(1,0))/iResolution.xy);\n        vec4 dxp = pr - pl;\n        vec4 dtqx = 0.5 * dxp;\n        fragColor = qx + dtqx;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.y <= 2.0) {\n        fragColor = texture(iChannel0, (fragCoord)/iResolution.xy);\n    } else if (fragCoord.y >= iResolution.y - 2.0) {\n        fragColor = - texture(iChannel0, (fragCoord - vec2(0,1))/iResolution.xy);\n    } else {\n        vec4 qy = texture(iChannel2, fragCoord/iResolution.xy);\n        vec4 pr = texture(iChannel0, (fragCoord)/iResolution.xy);\n        vec4 pl = texture(iChannel0, (fragCoord - vec2(0,1))/iResolution.xy);\n        vec4 dyp = pr - pl;\n        vec4 dtqy = 0.5 * dyp;\n        fragColor = qy + dtqy;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}