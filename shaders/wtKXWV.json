{
    "Shader": {
        "info": {
            "date": "1583665145",
            "description": "origin:https://www.shadertoy.com/view/3dSGDR @fizzer\nWait til all texture is loaded\nGGX\nMIS\n",
            "flags": 32,
            "hasliked": 0,
            "id": "wtKXWV",
            "likes": 50,
            "name": "Fast Octree Path Tracing",
            "published": 3,
            "tags": [
                "voxel",
                "pathtracing",
                "mis",
                "pt",
                "ggx",
                "traversal",
                "octree",
                "importantsample",
                "microsurface"
            ],
            "usePreview": 0,
            "username": "yuchengzhong",
            "viewed": 2919
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 color = texture(iChannel0, uv).rgb;\n    \n\tfragColor = vec4(pow(clamp(color, 0., 1.), vec3(1.0/2.2)), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float boxSize = 1.0;\nfloat seed;\nfloat bluenoise(vec2 uv)\n{\n    uv += 1337.0*fract(iTime);\n    float v = texture( iChannel2 , (uv + 0.5) / iChannelResolution[2].xy, 0.0).x;\n    return v;\n}\nvec2 hash2() \n{\n    return fract(sin(vec2(seed+=1.0,seed+=1.0))*vec2(43758.5453123,22578.1459123));\n}\nfloat D_GGX(float Roughness, float NoH)\n{\n\tfloat a = Roughness * Roughness;\n\tfloat a2 = a * a;\n\tfloat d = (NoH * a2 - NoH) * NoH + 1.0;\t       \n\treturn a2 / (3.1415926535*d*d);\t\t\t\t\t\n}\nvec3 F_Schlick(vec3 S, float VoH)\n{\n\tfloat Fc = pow(1.0 - VoH, 5.0);\n\treturn S + (1.0-S)*Fc;\n}\nfloat F_Schlick_S(float S, float VoH)\n{\n\tfloat Fc = pow(1.0 - VoH, 5.0);\n\treturn S + (1.0-S)*Fc;\n}\nfloat Vis_Schlick( float Roughness, float NoV, float NoL )\n{\n\tfloat k = sqrt( Roughness ) * 0.5;\n\tfloat Vis_SchlickV = NoV * (1.0 - k) + k;\n\tfloat Vis_SchlickL = NoL * (1.0 - k) + k;\n\treturn 0.25 / ( Vis_SchlickV * Vis_SchlickL );\n}\nvec3 ImportanceSampleCos(vec3 d) \n{\n    vec2 rand = hash2();\n    float phi = 6.28318530718*rand.x;\n    float xiy = rand.y;\n    float r = sqrt(xiy);\n    float x = r*cos(phi);\n    float y = r*sin(phi);\n    float z = sqrt(max(0.0,1.0-x*x-y*y));\n\tvec3 w = d;\n\tvec3 u = cross(w.yzx, w);\n\tvec3 v = cross(w, u);\n    return w*z+u*x+v*y;\n}\nvec3 ImportanceSampleGGX(vec3 d,vec3 V,float roughness,out vec3 H)\n{\n    roughness =max(0.04,roughness);\n    vec2 rand = hash2();\n    float phi = 6.28318530718*rand.x;\n    float xiy = rand.y;\n\tfloat a = roughness * roughness;\n\tfloat CosTheta = sqrt((1.0 - xiy) / (1.0 + (a*a - 1.0) * xiy));\n\tfloat SinTheta = sqrt(1.0 - CosTheta * CosTheta);\n\tH = vec3(SinTheta * cos(phi),SinTheta * sin(phi), CosTheta);\n\tvec3 w = (d);\n\tvec3 u = (cross(w.yzx, w));\n\tvec3 v = cross(w, u);\n\tH = v * H.x + u * H.y + w * H.z;\n\tvec3 R = H*2.0 * dot(V,H)  - V;\n    return normalize(R);\n}\nvec4 SpecularBRDF_PDF(vec3 L,vec3 V,vec3 N,float roughness,float Spec,float M,vec3 C,out vec3 F,vec3 H)\n{\n     roughness =max(0.04,roughness);\n\t float NoL = dot(N, L);\n\t float NoV = dot(N, V);\n\t float NoH = dot(N, H);\n\t float VoH = dot(V, H);\n\n\t float D = D_GGX( roughness, NoH );\n\t float Vis = Vis_Schlick( roughness, NoV, NoL );\n     vec3 F0 =  mix(vec3(0.04+0.04*Spec),C*Spec,M);\n\t F = F_Schlick( F0, VoH );\n\t return vec4(max((D * Vis ) * F, 0.00001),max(D * NoH /(4.0*VoH), 0.00001));\n}\n// Ray-box intersection.\nvec2 box(vec3 ro,vec3 rd,vec3 p0,vec3 p1)\n{\n    vec3 t0 = (mix(p1, p0, step(0., rd * sign(p1 - p0))) - ro) / rd;\n    vec3 t1 = (mix(p0, p1, step(0., rd * sign(p1 - p0))) - ro) / rd;\n    return vec2(max(t0.x, max(t0.y, t0.z)),min(t1.x, min(t1.y, t1.z)));\n}\nvec3 boxNormal(vec3 rp,vec3 p0,vec3 p1)\n{\n    rp = rp - (p0 + p1) / 2.0;\n    vec3 arp = abs(rp) / (p1 - p0);\n    return normalize(step(arp.yzx, arp) * step(arp.zxy, arp) * sign(rp));\n}\nfloat trace(vec3 ro, vec3 rd, inout vec3 outn,out int id,int ignore)\n{\n    vec2 ob = box(ro, rd, vec3(-boxSize), vec3(boxSize));\n    \n    float tt = max(0., ob.x);\n    vec3 n = vec3(0, 1, 0);\n    for(int j = 0; j < 23; ++j)//should be 1.41*2*2^nï¼Œlayer:n(1~6):6,12,23,46,91,181\n    {\n        if(tt > ob.y - 1e-4)\n        {\n            break;\n        }\n        vec3 p2 = ro + rd * tt;\n        vec3 p = p2 + sign(rd) * 1e-4;\n        vec3 p0 = vec3(-boxSize), p1 = vec3(+boxSize);\n        id = 0;\n        for(int i = 0; i < 3; ++i)\n        {\n            vec3 c = p0 + (p1 - p0) * (0.5);\n            vec3 o = step(c, p);\n            id = int(float(id) * 8.0 + dot(o, vec3(1, 2, 4)));\n            p0 = p0 + (c - p0) * o;\n            p1 = p1 + (c - p1) * (vec3(1) - o);\n        }\n        if(id!=ignore&&cos(float(id))>0.5)//cos:random empty\n        {\n            n = (boxNormal(p2,p0,p1));//+(p2 - (p0 + p1) / 2.) / (p1 - p0)\n            break;\n        }        \n        vec2 b = box(ro, rd, p0, p1);\n        tt = b.y;\n    }\n    outn = n;//normalize(pow(abs(n), vec3(16)) * sign(n));\n    return tt;\n}\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n#define USE_MOUSE\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    vec2 st = fragCoord / iResolution.xy;\n    vec2 texelsize = vec2(1.0)/iResolution.xy;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 LightDir = normalize(vec3(0.5,2.0,1.0));\n    vec3 LightColor = vec3(2.5);\n#ifdef USE_MOUSE\n    float a = 1.7 - 1.7 * iMouse.y / iResolution.y;\n    mat2 m = mat2(cos(a), sin(a), -sin(a), cos(a));\n    float a2 = 0.6 - 2. * iMouse.x / iResolution.x+0.05*iTime;\n    mat2 m2 = mat2(cos(a2), sin(a2), -sin(a2), cos(a2));\n#else\n    float a = 0.6;// - 1.7 * iMouse.y / iResolution.y;\n    mat2 m = mat2(cos(a), sin(a), -sin(a), cos(a));\n    float a2 = 0.02*iTime;\n    mat2 m2 = mat2(cos(a2), sin(a2), -sin(a2), cos(a2));\n#endif\n    \n    seed = bluenoise(fragCoord.xy);\n    seed = mod( seed*55.24317542, 3.14352);\n        \n    vec3 acc = vec3(0.0); \n    float normal_identity =0.0;\n#define S 12   \n#define D 4\n    for(int samples =0;samples<S;samples++)\n    {\n        vec2 offset = 2.0*texelsize*(hash2());\n        vec3 ro = vec3(0, -.1, 3.0);\n        vec3 rd = normalize(vec3(uv+offset, -2.0));\n\n        ro.yz *= m;\n        rd.yz *= m;\n        ro.xz *= m2;\n        rd.xz *= m2;\n        \n        \n        // Scene AABB.\n        vec2 ob = box(ro, rd, vec3(-boxSize), vec3(boxSize)); \n        vec3 nro = ro;      \n        vec3 nrd = rd;\n        //trace\n        int hitid=-1;\n        int ignoreid=-1;\n\n        vec3 n = vec3(0, 1, 0);\n        vec3 radiance = vec3(0.0);\n        vec3 mask = vec3(1.0);\n        vec3 n_last = n;\n        \n        for(int depth=0;depth<D;depth++)\n        {\n          float tt = trace(nro, nrd, n,hitid,ignoreid);\n          ignoreid = hitid;        \n          bool hit = !(ob.y < ob.x || tt >= ob.y - 1e-4);           \n          vec3 color;\n          float metallic =step(sin(float(hitid)),0.0);\n          float specular =1.0;\n          float roughness = 0.2*step(cos(float(hitid+21)),0.0);\n          normal_identity += (depth==0?(hit?dot(vec3(int(n.x>0.0),int(n.y>0.0),int(n.y>0.0)),vec3(4.0,2.0,1.0))/8.0:0.0):0.0);\n          if(hit)\n          {\n              \n              \n              color = hsv2rgb(vec3(cos(float(hitid)*0.5+0.5),0.7,0.99));//vec3(0.0);\n              float preF = min(0.4,F_Schlick_S( mix(0.04+0.04*specular,length(color*specular),metallic), dot(-nrd,n) ));\n              float diffuseTerm = (mix(0.6,0.3,metallic)*0.5+mix(0.8,0.6,specular)*0.5)*(1.0-preF);                \n              if(hash2().x<diffuseTerm)\n              {            \n                  nro = nro+nrd*tt;\n                  vec3 d = ImportanceSampleCos(n);  \n                  vec3 H = normalize(d-nrd);\n                  vec3 F0 =  mix(vec3(0.04+0.04*specular),color*specular,metallic);\n\t              vec3 F = F_Schlick( F0, dot(-nrd,H) );\n                  vec3 diffuse = (1.0-metallic)*(vec3(1.0) - F)*color/diffuseTerm;\n                  mask*=diffuse/3.1415926;\n                  nrd = d;\n              }\n              else\n              {\n                  nro = nro+nrd*tt;\n                  vec3 H = vec3(0.5);\n                  vec3 d = ImportanceSampleGGX(n,-nrd,roughness,H);\n\t\t\t      vec3 F=vec3(0.0);\n                  vec4 brdf_pdf = SpecularBRDF_PDF(d,-nrd,n, roughness,specular,metallic,color,F,H);\n\t\t\t      float NoL = max(dot(n, d), 0.0);\n                  vec3 specular = (NoL*(brdf_pdf.xyz))/brdf_pdf.w/(1.0-diffuseTerm);\n                  mask*=specular;\n                  nrd = d;\n              }\n              vec2 ob2 = box(nro, LightDir, vec3(-boxSize), vec3(boxSize));\n              vec3 nn;\n              int hitid2 = -1;\n              int igid2 = ignoreid;\n              float tt2 = trace(nro, LightDir, nn,hitid2,igid2);\n              hit = !(ob2.y < ob2.x || tt2 >= ob2.y - 1e-4);\n              vec3 suncolor = hit||depth==0?vec3(0.0):LightColor*max(dot(LightDir,n),0.0);\n              radiance +=mask*suncolor;\n          }\n          else//hit the sky\n          {\n              vec2 ob2 = box(nro, LightDir, vec3(-boxSize), vec3(boxSize));\n              vec3 nn;\n              int hitid2 = -1;\n              int igid2 = ignoreid;\n              float tt2 = trace(nro, LightDir, nn,hitid2,igid2);\n              hit = !(ob2.y < ob2.x || tt2 >= ob2.y - 1e-4);\n              vec3 suncolor = hit||depth==0?vec3(0.0):LightColor*max(dot(LightDir,n_last),0.0);\n              color=1.0*texture(iChannel1, nrd).xyz+suncolor;\n              radiance +=mask*color;            \n              break;   \n          }\n\n          n_last = n;   \n          ob = box(nro, nrd, vec3(-boxSize), vec3(boxSize));\n        } \n        acc +=clamp(radiance,0.0,10.0);\n    }\n    \n    acc/=float(S);\n    normal_identity/=float(S);\n    acc = clamp(acc,0.0,1.0);\n        \n    \n    \n#define R 4\n#define V 10.0\n#define V2 0.75\n\n    vec3 acc_re = vec3(0.0);\n    float acc_weight = 0.0;\n    for(int i=-R;i<=R;i++)\n    for(int j=-R;j<=R;j++)\n    {\n        vec4 last = texture(iChannel0,st+vec2(i,j)*texelsize);\n        float weight = max(dot(last.rgb,acc),0.1)*pow((1.0-abs(last.a-normal_identity)),16.0)/(length(vec2(i,j))+1.0);\n        acc_re+=last.rgb*weight;\n        acc_weight+=weight;\n    }\n    vec4 last = texture(iChannel0,st);\n    acc_re+=V*acc;\n    acc_re/=(acc_weight+V);\n    acc_re = mix(acc_re,last.rgb,V2);\n    fragColor.rgb = acc_re;\n    fragColor.a = normal_identity;\n}\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 color = texture(iChannel0, uv);\n    \n\tfragColor = color;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}