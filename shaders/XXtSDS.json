{
    "Shader": {
        "info": {
            "date": "1719495603",
            "description": "combination  https://www.shadertoy.com/view/MdXSzS  https://www.shadertoy.com/view/XlfGRj and other https://www.shadertoy.com/view/ltBXDd",
            "flags": 0,
            "hasliked": 0,
            "id": "XXtSDS",
            "likes": 4,
            "name": "monster in space",
            "published": 3,
            "tags": [
                "space",
                "cosmos",
                "universe"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 243
        },
        "renderpass": [
            {
                "code": "#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010\n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define PI 3.14159265359\n#define MAGENTA vec3(.24, .1, .35)\n#define WHITE vec3(1.)\n#define REPETITIONS 5\n#define DELTA PI/float(REPETITIONS)\n#define THICKNESS .025\n#define ES (6./iResolution.y)\n#define rMat(x) mat2(cos(x), -sin(x), sin(x), cos(x))\n\nfloat rm(float value, float min, float max) {\n    return clamp((value - min) / (max - min), 0., 1.);\n}\n\nfloat makeSignWave(vec2 st, float waveCenter, float waveLength, float addWave){\n    float xSign = sign(st.x);\n    float s = sin(st.x * 7. + iTime * 2. * xSign + addWave) * (.05 + pow(rm(length(st), waveCenter - waveLength, waveCenter + waveLength), 1.5) * .2);\n    float curWidth = pow(1. - rm(abs(waveCenter - abs(st.x)), 0., waveLength), 1.5) * THICKNESS;\n   \n    return smoothstep(ES, 0., abs(st.y - s) - curWidth)\n         * smoothstep(ES, 0., abs(abs(st.x)-waveCenter)-waveLength);\n}\n\nfloat clr(vec2 st){\n    float color = 0.;\n    for(int i=0; i<3; i++)\n        color += makeSignWave(st, .5 + .1 * float(i), .3, PI/2.*float(i));\n    return color;\n}\nfloat star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nfloat D=8., Z=3.;               // D: duration of advection layers, Z: zoom factor\n\n#define R(U,d) fract( 1e4* sin( U*mat2(1234,-53,457,-17)+d ) )\n\nfloat M(vec2 U, float t) {           // --- texture layer\n// vec2 iU = ceil(U/=exp2(t-8.)),              // quadtree cell Id - infinite zoom\n   vec2 iU = ceil(U/=exp2(t-8.)*D/(3.+t)),     // quadtree cell Id - with perspective\n          P = .2+.6*R(iU,0.);                  // 1 star position per cell\n    float r = 9.* R(iU,1.).x;                  // radius + proba of star ( = P(r<1) )\n\treturn r > 1. ? 1. :   length( P - fract(U) ) * 8./(1.+5.*r) ;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//get coords and direction\nvec2 uv=fragCoord.xy/iResolution.xy-.5;\nvec2 uv2=fragCoord.xy/iResolution.xy-.5;\nvec3 dir=vec3(uv*zoom,1.);\nfloat time=iTime*speed+.25;\nvec2 uv3=fragCoord.xy/iResolution.xy-.5;\n//mouse rotation\n\nvec3 from=vec3(1.,.5,0.5);\n\nvec2 st = ( fragCoord * 2. - iResolution.xy ) / iResolution.y;\n    st *= 1.2;\n    float color = clr(st);\n    for(int i=0; i<REPETITIONS; i++, st *= rMat(DELTA)){\n        color += clr(st);\n        }\nfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n\nfloat v1, v2, v3;\nv1 = v2 = v3 = 0.0;\n\nfloat s = 0.0;\nfor (int i = 0; i < 90; i++)\n{\n\nvec3 p2 = s * vec3(uv3, 0.0);\n    \np2 += vec3(.22, .3, s - 1.5 - sin(iTime * 0.513) * .1);\nfor (int i = 0; i < 8; i++) p2 = abs(p2) / dot(p2,p2) - 0.659;\nv1 += dot(p2,p2) * .0015 * (1.8 + sin(length(uv3.xy * 13.0) + .5  - iTime * .2));\nv2 += dot(p2,p2) * .0013 * (1.5 + sin(length(uv3.xy * 14.5) + 1.2 - iTime * .3));\nv3 += length(p2.xy*10.) * .0003;\ns  += .035;\n}\n\nfloat len = length(uv3);\nv1 *= smoothstep(.7, .0, len);\nv2 *= smoothstep(.5, .0, len);\nv3 *= smoothstep(.9, .0, len);\n\nvec3 col = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n(v1 + v3) * .3,\nv2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n//volumetric rendering\nfloat s2=0.1,fade=1.;\nvec3 v=vec3(0.);\nfor (int r=0; r<volsteps; r++) {\nvec3 p=from+s2*dir*.5;\np = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\nfloat pa,a=pa=0.;\nfor (int i=0; i<iterations; i++) {\np=abs(p)/dot(p,p)-formuparam; // the magic formula\na+=abs(length(p)-pa); // absolute sum of average change\npa=length(p);\n}\nfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\na*=a*a; // add contrast\nif (r>6) fade*=1.2-dm; // dark matter, don't render near\n//v+=vec3(dm,dm*.5,0.);\nv+=fade;\nv+=vec3(s2,s2*s2,s2*s2*s2*s2)*a*brightness*fade; // coloring based on distance\nfade*=distfading; // distance fading\ns2+=stepsize;\n}\n\nvec4 o = fragColor;  vec2 U =fragCoord ; \n\n o -= o;\n    U = U / iResolution.y - .5;\n\n    // --- prepare the timings and weightings of the 3  texture layers\n\n    vec3 P = vec3(-1,0,1)/3., T,\n         t2 = fract( iTime/D + P +.5 )-.5,  // layer time\n         w = .5+.5*cos(6.28*t2);                  // layer weight\n    t2 = t2*D+Z;  \n    \n    // --- prepare the 3 texture layers\n\n    T.x = M(U,t2.x),  T.y = M(-U,t2.y),  T.z = M(U.yx,t2.z); // avoid using same U for all layers\n    //T = sin(100.*U.x/exp2(t3))+sin(100.*U.y/exp2(t3));  // try this for obvious pattern\n    T = .03/(T*T);\n\n    // --- texture advection: cyclical weighted  sum\n\n    o += dot(w,T);\n    \nv=mix(vec3(length(v)),v,saturation); //color adjust\nfragColor= vec4(v*.023*col,1.);\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1\n\nfragColor*= vec4(star(uv2, anim) * vec3(0.35,0.2,0.15)*0.1+color*col+o.xyz, 1.0);\n\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}