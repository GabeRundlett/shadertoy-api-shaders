{
    "Shader": {
        "info": {
            "date": "1631589700",
            "description": "Rotozooming euler spiral.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdV3Wh",
            "likes": 16,
            "name": "Euler Spiral",
            "published": 3,
            "tags": [
                "spiral",
                "eulerspiral",
                "fresnelintegral"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 211
        },
        "renderpass": [
            {
                "code": "#define ROTOZOOM\n#define dt 0.05\n\n// Utilities\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\n\nmat2 Rotate2D(in float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\n// SDFs\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nfloat sdDisk(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Boilerplate\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 2.0;\n    float unit = 4.0 / iResolution.y;\n    float time = 0.1 * iTime;\n    vec3 color = vec3(1.0);\n\n    // Point moving along the spiral\n    vec2 pPrev = vec2(0.0), pCur = vec2(0.0);\n    float pos = 10.0 * sin(time);\n    for (float t=0.0; t < abs(pos); t += dt) {\n        float t2 = t * t;\n        vec2 dp = vec2(cos(t2), sin(t2)) * sign(pos) * dt;\n        pPrev += dp;\n        if (t + dt < abs(pos)) pCur += dp;\n    }\n\n    float lerp = fract(pos / dt);\n    if (pos > 0.0) lerp = 1.0 - lerp;\n    vec2 p = mix(pPrev, pCur, lerp);\n\n    // Rotozoom\n    #ifdef ROTOZOOM\n    float pos2 = pos * pos;\n    float rot = -atan(sin(pos2), cos(pos2)) + 1.57;\n    uv *= Rotate2D(rot);\n    float zoom = abs(cos(time));\n    uv *= zoom;\n    unit *= zoom;\n    uv += p;\n    #endif\n\n    // Parametric plot\n    vec2 suv = uv * sign(uv.x);\n    vec2 prev = vec2(0.0);\n    for (float t=0.0; t < 10.0; t += dt) {\n        float t2 = t * t;\n        vec2 cur = prev + vec2(cos(t2), sin(t2)) * dt; // Integrate (cos(t^2), sin(t^2))\n        drawSDF(sdLine(suv, prev, cur), vec3(0.0));\n        prev = cur;\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}