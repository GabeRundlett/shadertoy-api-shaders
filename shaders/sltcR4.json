{
    "Shader": {
        "info": {
            "date": "1659383892",
            "description": "Created while following along with Book of Shaders",
            "flags": 0,
            "hasliked": 0,
            "id": "sltcR4",
            "likes": 4,
            "name": "Back-and-Forth",
            "published": 3,
            "tags": [
                "loop",
                "tiling"
            ],
            "usePreview": 0,
            "username": "nsbalbi",
            "viewed": 201
        },
        "renderpass": [
            {
                "code": "\n// Adapted from Book of Shaders (@patriciogv ( patriciogonzalezvivo.com ) - 2015)\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.141592653589793\n\nfloat sineInOut(float t) {\n  return -0.5 * (cos(PI * t) - 1.0);\n}\n\nvec2 brickTile(vec2 _st, float _zoom, float _time){\n    _st *= _zoom;\n\n    float t = sineInOut(fract(_time));\n    \n    _st.x += step(1., mod(_time,2.0)) * step(1., mod(_st.y,2.0)) * fract(t);\n    _st.x -= step(1., mod(_time,2.0)) * step(1., mod(_st.y + 1.0,2.0)) * fract(t);\n\n    _st.y += step(1., mod(_time + 1.0,2.0)) * step(1., mod(_st.x,2.0)) * fract(t);\n    _st.y -= step(1., mod(_time + 1.0,2.0)) * step(1., mod(_st.x + 1.0,2.0)) * fract(t);\n\n    return fract(_st);\n}\n\nfloat box(vec2 _st, vec2 _size){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 uv = smoothstep(_size,_size+vec2(1e-4),_st);\n    uv *= smoothstep(_size,_size+vec2(1e-4),vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nvec4 scene(vec2 fragCoord, float time) {\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec3 color = vec3(0.0);\n\n    uv.x *= iResolution.x/iResolution.y;\n\n    uv = brickTile(uv, 6.0, time);\n\n    color = vec3(box(uv,vec2(0.8)));\n\n    return vec4(color,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 s1 = scene(gl_FragCoord.xy, iTime);\n    \n    #define BLUR 6\n    #define T_RANGE 0.06\n    for (int i = 1; i < BLUR; i += 1) {\n        s1 += scene(fragCoord.xy, iTime - float(i)*T_RANGE/float(BLUR));\n    }\n    s1 /= float(BLUR);\n\n    fragColor = s1;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}