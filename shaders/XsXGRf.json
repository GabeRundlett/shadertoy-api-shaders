{
    "Shader": {
        "info": {
            "date": "1375127012",
            "description": "2021: Changed to music I made in audiotool.com. I'm currently building my own audiotool based on shaders (like the sound shader here). So a combination of shadertoy and audiotool.\n[url=https://shadersynth.com]shadersynth.com[/url]",
            "flags": 64,
            "hasliked": 0,
            "id": "XsXGRf",
            "likes": 8,
            "name": "Psychedelic lines",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "lines",
                "audio"
            ],
            "usePreview": 0,
            "username": "Andre",
            "viewed": 918
        },
        "renderpass": [
            {
                "code": "#define StepSize .07\n#define LineCount 14\n\n//Function to draw a line, taken from the watch shader\nfloat line(vec2 p, vec2 a, vec2 b, float thickness )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba),0.0,1.0);\n    thickness *= 1.0+abs(texture(iChannel0, vec2(h, 1)).x);//floor(iTime * 20.0) * StepSize;\n\treturn 1.0 - smoothstep(thickness * 0.001, thickness * 1.5, length(pa - ba * h));\n}\t\n                    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy);\n\t\t\n\t// vec2 wav = vec2(length(texture(iChannel0, vec2(uv.x, 0)).xyz),\n\t// \t\t\t\tlength(texture(iChannel0, vec2(uv.y, 0)).xyz));\n    // wav *= 0.2;\n    //vec4 spec = texture(iChannel0, vec2(uv.y, 0));\n\n\tuv = uv * 2.0 - 1.0;\n    // float extend  = wav.y;\n\n\t// convert the input coordinates by a cosinus\n\t// warpMultiplier is the frequency\n\t// float warpMultiplier = (1.0 + 1.5 * sin(iTime * 0.125));\n\t// vec2 warped = cos(uv * 6.28318530718 * warpMultiplier * sin(wav.yx) + 2.7* cos(iTime*0.9))-cos(uv.yx*7.77*sin(wav.xy)+2.0*sin(iTime));\n\n\n\tfloat gt = iTime * 1.5;\n\n\n\t// blend between the warpeffect and no effect\n\t// don't go all the way to the warp effect\n\t// float warpornot = smoothstep(.5, 18.0, 2.0*sin(iTime * .25)+warped.x+warped.y)*0.125;\n\n\t// Variate the thickness of the lines\n\tfloat thickness = 0.0001 + 0.002 * pow(1.5- 1.45 * cos(iTime), 2.0) / iResolution.x;// - wav.x*0.003 + wav.y*0.003;\n\t// thickness *= .1 + (warpMultiplier * warpornot)  + wav.x + wav.y;\n\n    float brighness = 0.9;///pow(thickness,.5);\n\t// Add 10 lines to the pixel\n\tvec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n\tfor (int i = 0; i < LineCount; i++)\n\t{\n\t\tgt -= StepSize;\n\n\t\tthickness *= 1.3;\n        brighness *= 0.9;\n\t\t// uv = mix(uv, warped * float(i), warpornot);\n\n\t\t//Calculate the next two points\n\t\tvec2 point1 = vec2(sin(gt * 0.93), cos(gt * 0.33) );\n\t\tvec2 point2 = vec2(cos(gt * 0.59), sin(gt * 0.92) );\n        \n        vec2 ctr = (point1 + point2) * 0.5;\n        float len = float(LineCount - i)*0.1+2.5*texture(iChannel0, vec2(float(i)/float(LineCount-1), 0.0)).r;\n        point1 -= ctr;\n        point2 -= ctr;\n        mat2 rot = mat2(cos(gt * 1.93), -sin(gt * 1.92), sin(gt * 1.97), -cos(gt * 1.95));\n        point1 *= rot;\n        point2 *= rot;\n\n\t\t// Add new line\n\t\tcolor.rgb += line(\tuv,\n\t\t\t\t\t\t\tpoint1 * len + ctr, \n                            point2 * len + ctr,\n\t\t\t\t\t\t\tthickness * (0.1+40.0*len))\n\t\t\t\t\t//With color\n\t\t\t\t\t* ( brighness +\n\t\t\t\t\t\tbrighness * vec3(\tsin(gt * 4.3),\n\t\t\t\t\t\t\t\t\tcos(gt * 2.7),\n\t\t\t\t\t\t\t\t\tsin(gt * 8.9)));\n    }\n\n\t// Clamp oversaturation\n\tfragColor = clamp(color, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 26495,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/andre-van-kammen/electric-guitar-on-synth-beat"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}