{
    "Shader": {
        "info": {
            "date": "1594198103",
            "description": "Trying to understand sl2c's very interesting \"Mellifera I\" : [url]https://www.shadertoy.com/view/3tBczh[/url] so here's a version cut down to essentials (with extras).\n\nSee also: [url]https://www.researchgate.net/publication/242950405[/url]",
            "flags": 16,
            "hasliked": 0,
            "id": "WtBcW1",
            "likes": 11,
            "name": "Mellifera Simplified",
            "published": 3,
            "tags": [
                "hyperbolic",
                "manifold",
                "lobell"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Simplified version of sl2c's https://www.shadertoy.com/view/3tBczh\n//\n// It's a horospheric slice through H3, showing the cells of a honeycomb\n// generated by a 14-sided polyhedron described by Löbell in 1931. Eight\n// coloured polyhedra are glued together and external faces identified to form\n// a manifold.\n//\n// Some extra controls:\n// <mouse>: apply inversion\n// c: show inversion circles\n// s: show inversion count rather than polyhedron color\n// z: zoom behaviour\n//\n// For more on Löbell polyhedra, see:\n// https://www.researchgate.net/publication/242950405\n//\n////////////////////////////////////////////////////////////////////////////////\n\n// Original header:\n////////////////////////////////////////////////////////////////////////////////\n// Copyright 2020 Google LLC\n// SPDX-License-Identifier: Apache-2.0\n// NOT an official Google project; see Google Open Source guidelines for more info on copyright transfer\n// written by William Cadegan-Schlieper \n////////////////////////////////////////////////////////////////////////////////\n\nbool tryinvert(inout vec3 z, vec3 c, float r) {\n  // Invert z in sphere centre c radius r if \"inside\".\n  // If r < 0, \"inside\" means outside.\n  vec3 z1 = z - c;\n  if ((dot(z1,z1) < r*r == r < 0.0)) return false;\n  z = z1*r*r/dot(z1,z1) + c;\n  return true;\n}\n\nvec3 getcol(ivec4 flips) {\n  return 0.8*vec3(notEqual(ivec3(flips.w),flips.xyz));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  const int[14] m = int[](0,1,2,0,1,2,0,1,2,0,1,2,3,3);\n  vec3[14] c; // 14 circles\n  float r1 = sqrt(sqrt(3.0) - sqrt(2.0));\n  c[12] = vec3(0,0,r1);\n  float r2 = r1;\n  float x2 = sqrt(r1*r1+r2*r2);\n  float r3 = r2 / ( x2 * x2 - r2 * r2);\n  float x3 = -x2 / ( x2 * x2 - r2 * r2);\n  for (int i=0; i<6; i++) {\n    float theta = PI*float(i)/3.0;\n    vec2 eit = vec2(cos(theta), sin(theta));\n    c[i] = vec3(x2 * eit,r2);\n    c[i+6] = vec3(x3 * vec2(eit.y,-eit.x),r3);\n  }\n  float r4 = -1.0/r1; // Inverse circle\n  c[13] = vec3(0,0,r4);\n\n  float scale = 2.0;\n  vec2 z = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n  z *= scale;\n  if (iMouse.x > 0.0) {\n    vec2 m = (2.0*iMouse.xy - iResolution.xy)/iResolution.y;\n    m *= scale;\n    z -= m;\n    z /= dot(z,z);\n    z += m;\n    z /= dot(z,z);\n  }\n\n  vec3 p = vec3(z,0.25); // p is in H3, z is horosphere (Euclidean) distance from boundary\n  if (!key(CHAR_Z)) {\n    p.z = exp(-mod(0.5*iTime,8.0));\n  } else {\n    float period = -4.0 * log(r1);\n    float d = mod(iTime * 0.2, period) - period * 0.5;\n    p *= exp(-d);\n  }\n\n  ivec4 flips = ivec4(0);\n  int flipcount = 0;\n  for (int i=0; i<12; i++) {\n    int flipcount1 = 0;\n    for (int j=0; j<14; j++) {\n      if (tryinvert(p, vec3(c[j].xy,0), c[j].z)) {\n        flips[m[j]] = 1-flips[m[j]];\n        flipcount1++;\n      }\n    }\n    if (flipcount1 == 0) break;\n    flipcount += flipcount1;\n  }\n  float d = 1e8;\n  int j;\n  for (int i = 0; i < 14; i++) {\n    float d1 = abs(length(p-vec3(c[i].xy,0))-abs(c[i].z));\n    if (d1 < d) {\n      j = i; d = d1;\n    }\n  }\n  ivec4 flips1 = flips;\n  flips1[m[j]] = 1-flips1[m[j]];\n  vec3 col =\n    key(CHAR_S) ?\n    hsv2rgb(vec3(float(flipcount)/10.0,1,1)) :\n    mix(getcol(flips1),getcol(flips),smoothstep(-0.01,0.01,d));\n  col = 0.1+0.8*col;\n  if (!key(CHAR_C)) {\n    float d = 1e8;\n    for (int i = 0; i < 14; i++) {\n      d = min(d,abs(length(z-c[i].xy)-abs(c[i].z)));\n    }\n    col = mix(vec3(1.0),col,smoothstep(0.0,0.02,d));\n    //col = mix(vec3(0.8),col,smoothstep(0.0,0.02,abs(length(z)-1.0)));\n  }\n  col = pow(col, vec3(0.4545));\n  fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float PI = 3.1415927;\n\nvec3 hsv2rgb(vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nconst int CHAR_0 = 48;\n\nconst int CHAR_A = 65;\nconst int CHAR_B = 66;\nconst int CHAR_C = 67;\nconst int CHAR_D = 68;\nconst int CHAR_E = 69;\nconst int CHAR_F = 70;\nconst int CHAR_G = 71;\nconst int CHAR_H = 72;\nconst int CHAR_I = 73;\nconst int CHAR_J = 74;\nconst int CHAR_K = 75;\nconst int CHAR_L = 76;\nconst int CHAR_M = 77;\nconst int CHAR_N = 78;\nconst int CHAR_O = 79;\nconst int CHAR_P = 80;\nconst int CHAR_Q = 81;\nconst int CHAR_R = 82;\nconst int CHAR_S = 83;\nconst int CHAR_T = 84;\nconst int CHAR_U = 85;\nconst int CHAR_V = 86;\nconst int CHAR_W = 87;\nconst int CHAR_X = 88;\nconst int CHAR_Y = 89;\nconst int CHAR_Z = 90;\n\n// Macros for use in \"common\" blocks.\n#define key(code) (texelFetch(iChannel3, ivec2((code),2),0).x != 0.0)\n#define store(i,j) (texelFetch(iChannel2, ivec2((i),(j)),0))\n#define keycount(key) (int(store(0,(key)).x))",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}