{
    "Shader": {
        "info": {
            "date": "1648451988",
            "description": "A simple 2D point light made during my break. \nCredit to Coding Train for the line intersection  and @ockiller for the Inverse square root approximation algorithm",
            "flags": 0,
            "hasliked": 0,
            "id": "ftsyzf",
            "likes": 1,
            "name": "My simple 2D light",
            "published": 3,
            "tags": [
                "2d",
                "light"
            ],
            "usePreview": 0,
            "username": "JustBoredYo",
            "viewed": 266
        },
        "renderpass": [
            {
                "code": "struct Line\n{\n    vec3 p1, p2;\n};\n\nstruct Point\n{\n    float x, y;\n};\n\n//Check if the current Pixel is on the same side as the light source\nbool InShadow(Line line1, Line line2) {\n    float x1 = line1.p1.x;\n    float y1 = line1.p1.y;\n    float x2 = line1.p2.x;\n    float y2 = line1.p2.y;\n\n    float x3 = line2.p1.x;\n    float y3 = line2.p1.y;\n    float x4 = line2.p2.x;\n    float y4 = line2.p2.y;\n\n    float den = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    if (den == 0.0) {\n      return false;\n    }\n\n    float t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / den;\n    float u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / den;\n    if (t > 0.0 && t < 1.0 && u > 0.0 && u < 1.0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\nfloat invSqrtNewton(float x, float guess) { return guess * (1.5 - 0.5 * x * guess * guess); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    Line l1 = Line(vec3(0.0, 30, 0), vec3(512.0, 30, 0));\n    \n    vec3 col = mix(vec3(0.5, 0.5, 1), vec3(1, 0.6, 0), 0.75-(fragCoord.y / (iResolution.y-30.0)));\n    \n    vec3 pos = vec3((sin(iTime/5.0) + 1.0)/2.0*512.0, abs(cos(iTime/5.0)*200.0)+30.0, 5.0);\n    \n    Line p = Line(vec3(fragCoord.x, fragCoord.y, 0), vec3(pos.x, pos.y, 0));\n    \n    //It's important to use || because the different calculation would cancel each other by logic\n    if(InShadow(l1, p))\n    {\n        col = vec3(128.0/255.0, 80.0/255.0, 0);\n    }else{\n        \n        //Using an aproximation of the inverse square root to get the lighting falloff\n        float light = (fragCoord.x - pos.x)*(fragCoord.x - pos.x) + (fragCoord.y - pos.y)*(fragCoord.y - pos.y);\n        float fastInvSqrt = uintBitsToFloat(0x5F400000u - (floatBitsToUint(light) >> 1));\n        float b = invSqrtNewton(light, fastInvSqrt);\n        \n        b *= 25.0;\n    \n        col = col + vec3(b*0.5);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}