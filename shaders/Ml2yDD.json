{
    "Shader": {
        "info": {
            "date": "1508699019",
            "description": "Trying to get back in shape for an upcomming shader showdown.\nUnfortunatly I couldn't do this one without cheating",
            "flags": 0,
            "hasliked": 0,
            "id": "Ml2yDD",
            "likes": 7,
            "name": "Shader training",
            "published": 3,
            "tags": [
                "raymartching",
                "shadershowdown",
                "shaderfu"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 753
        },
        "renderpass": [
            {
                "code": "\nmat2 rot(float a)\n{\nfloat ca  = cos(a); float sa = sin(a);\n\n  return mat2(ca,-sa,sa,ca) ;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat smin (float a, float b, float r) {\n    float h = clamp(.5+.5*(b-a)/r, 0., 1.);\n    return mix(b,a,h)-r*h*(1.-h);\n}\n\nfloat map(vec3 pos)\n{\n  vec3 p = pos;\n\n  p.x += sin(p.z);\np.z += iTime;\np.z = mod(p.z+.75, 1.5)-.75;\n  p.yz *= rot(3.14/2.);\n\n  float f1 = sdTorus(p,vec2(4.,.5));\n  \n  float f2 = pos.y + 2. - abs(pow(p.x,2.)) * .1;\n\nreturn  smin(f1,f2,.5);\n\n}\n\nvec3 normal(vec3 pos)\n{\n  vec2 e = vec2(.001,0);\n  return normalize(vec3(\n    map(pos - e.xyy) - map(pos + e.xyy),\n    map(pos - e.yxy) - map(pos + e.yxy),\n    map(pos - e.yyx) - map(pos + e.yyx))\n  );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(gl_FragCoord.x / iResolution.x, gl_FragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 ro = vec3(0.,1.,-10);\n  vec3 rd = normalize(vec3(uv,1.));\n  vec3 cp = ro;\n\n  vec3 light = vec3(0.,0.,6);\n\n  int STEP = 128;\n  int cs = 0;\n  float cd ;  \n  for(;cs < STEP; ++ cs)\n  {\n   cd = map(cp);\n    if(cd < .001)\n      break;\n    cp += rd * cd * .5;\n\n  }\n  \n  vec3 norm = normal(cp);\n\n  if(cd < .51)\n  {\n    float lum = dot(norm,normalize(cp - light));\n   \n    fragColor = clamp(vec4(vec3(lum),1.),0.,1.);\n    fragColor *= 1. - (distance(ro,cp) / 80.);\n  }\n  else{\n    fragColor = vec4(0);\n  }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}