{
    "Shader": {
        "info": {
            "date": "1522143934",
            "description": "Sylvester's Lady's Fan - a mechanical angle trisector\nA digital simulation of an analog device for solving a mathematically hard(!) problem\n",
            "flags": 0,
            "hasliked": 0,
            "id": "4syyWw",
            "likes": 11,
            "name": "Sylvester's Fan",
            "published": 3,
            "tags": [
                "mechanism",
                "trisect"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 784
        },
        "renderpass": [
            {
                "code": "// \"Sylvester's Fan\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA  1   // optional antialiasing (0/1 - off/on)\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\n\nvec3 ltDir, qHit;\nfloat tCur, dstFar;\nint idObj;\nbool isShad;\nconst float pi = 3.14159;\n\nfloat rad, len1, len2, ang1, ang2, angT, angS;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, cRot, wFac;\n  dMin = dstFar;\n  p.xz -= -2.;\n  cRot = 0.25 * pi - 1.5 * angT;\n  wFac = isShad ? 10. : 1.;\n  for (float n = 0.; n < 4.; n ++) {\n    q = p;\n    q.xz = Rot2D (q.xz, n * angT + cRot);\n    q.y -= n * 2. * 0.02;\n    q.z -= 0.5 * rad + 0.5;\n    d = PrFlatCylDf (q.zxy, 0.5 * rad + 0.5, 0.2, 0.02);\n    DMINQ (1);\n    q.y = p.y - 0.1;\n    q.z -= 0.5 * rad - 0.5;\n    d = PrCapsDf (q.xzy, 0.05, 0.3);\n    DMINQ (4);\n  }\n  for (float n = 0.; n < 3.; n ++) {\n    q = p;\n    q.xz = Rot2D (q.xz, n * angT + 2. * ang2 + cRot);\n    q.y -= 0.17 + 2. * n * 0.01;\n    q.z -= 0.5 * rad;\n    d = max (PrFlatCylDf (q.zxy, 0.5 * rad, 0.15, 0.01 * wFac),\n       0.03 - length (vec2 (q.x, q.z - 0.5 * rad)));\n    DMINQ (2);\n    q.y -= 0.03;\n    q.z -= 0.5 * rad;\n    d = max (PrCylDf (q.xzy, 0.05, 0.1), 0.03 - length (q.xz));\n    DMINQ (4);\n  }\n  for (float n = 0.; n < 4.; n ++) {\n    q = p;\n    q.xz = Rot2D (q.xz, n * angT + cRot);\n    q.y -= 0.24 + n * 2. * 0.012;\n    q.z -= rad;\n    q.xz = Rot2D (q.xz, - angS);\n    q.z -= 0.5 * (len2 - len1);\n    d = max (PrFlatCylDf (q.zxy, 0.5 * (len1 + len2), 0.1, 0.005 * wFac),\n       0.03 - length (vec2 (q.x, abs (q.z) - 0.5 * (len1 + len2))));\n    DMINQ (3);\n  }\n  for (float n = 0.; n < 3.; n ++) {\n    q = p;\n    q.xz = Rot2D (q.xz, n * angT + 2. * ang2 + cRot);\n    q.y -= 0.252 + n * 2. * 0.012;\n    q.z -= rad;\n    q.xz = Rot2D (q.xz, angS);\n    q.z -= 0.5 * (len2 - len1);\n    d = max (max (PrFlatCylDf (q.zxy, 0.5 * (len1 + len2), 0.1, 0.005 * wFac),\n       0.05 - length (vec2 (q.x, q.z - 0.5 * (len1 - len2)))),\n       0.03 - length (vec2 (q.x, abs (q.z) - 0.5 * (len1 + len2))));\n    DMINQ (3);\n    q.z = abs (q.z) - 0.5 * (len1 + len2);\n    d = max (PrCylDf (q.xzy, 0.05, 0.05), 0.02 - length (q.xz));\n    DMINQ (4);\n  }\n  q = p;\n  d = PrCapsDf (q.xzy, 0.08, 0.3);\n  DMINQ (4);\n  q = p;\n  q.xz -= 2.5;\n  q.y -= -0.3;\n  d = PrBoxDf (q, vec3 (4., 0.03, 4.));\n  DMINQ (5);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int j = 0; j < 30; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += min (0.05, 3. * h);\n    if (sh < 0.001) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat Trig (float x, float a)\n{\n  return atan (sin (x) / ((rad / len2) + cos (x))) +\n     atan (sin (x) / ((rad / len1) - cos (x))) - 0.5 * a;\n}\n\nfloat SecSol (float a)\n{\n  float xk, xk1, xk2, fk, fk1, fk2;\n  bool isOk;\n  xk2 = 0.5 * a;\n  xk1 = xk2 + 0.05;\n  fk2 = Trig (xk2, a);\n  fk1 = Trig (xk1, a);\n  isOk = false;\n  for (int nIt = 0; nIt < 6; nIt ++) {\n    xk = xk1 - (xk1 - xk2) * fk1 / (fk1 - fk2);\n    fk = Trig (xk, a);\n    xk2 = xk1;\n    xk1 = xk;\n    fk2 = fk1;\n    fk1 = fk;\n    if (abs (xk1 - xk2) < 1e-5) {\n      isOk = true;\n      break;\n    }\n  }\n  return isOk ? xk : 0.5 * a;\n}\n\nvoid SetupMech ()\n{\n  vec2 ts;\n  float t, tp;\n  t = mod (0.1 * tCur, 2.);\n  if (t < 1.) {\n    tp = t + 0.1;\n    ts = vec2 (t, ((tp > 1.) ? t : tp));\n  } else {\n    tp = 2. - (t + 0.1);\n    t = 2. - t;\n    ts = vec2 (((tp < 0.) ? t : tp), t);\n  }\n  ts = 0.1 * floor (10. * ts);\n  angT = (pi/3.) * (0.18 + 0.44 * mix (ts.x, ts.y, smoothstep (0.3, 0.7,\n     (t - 0.1 * floor (10. * t)) / 0.1)));\n  rad = 4.;\n  len1 = 1.;\n  len2 = 2.;\n  angS = SecSol (angT);\n  ang1 = sin (angS) / ((rad / len2) + cos (angS));\n  ang2 = 0.5 * angT - ang1;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstObj, spec, sh, r;\n  isShad = false;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    spec = 0.1;\n    if (idObj == 1) {\n      col = mix (vec3 (0.6, 0.3, 0.1), vec3 (0.5, 0.2, 0.),\n         smoothstep (0.4, 0.6, Fbm2 (qHit.xz * vec2 (16., 4.))));\n    } else if (idObj == 2) {\n      col = vec3 (0.9, 0.8, 0.8);\n      if (vn.y > 0.5) {\n        col *= 1. - 0.1 * Noisefv2 (128. * qHit.xz);\n        spec = 0.3;\n      } else {\n        col *= 0.5;\n        spec = 0.;\n      }\n    } else if (idObj == 3) {\n      col = vec3 (1., 1., 0.);\n      if (vn.y > 0.5) {\n        col *= 1. - 0.1 * Noisefv2 (128. * qHit.xz);\n        spec = 0.3;\n      } else {\n        col *= 0.5;\n        spec = 0.;\n      }\n    } else if (idObj == 4) {\n      col = vec3 (0.6, 0.4, 0.1);\n    } else if (idObj == 5) {\n      col = vec3 (0.8, 0.85, 0.8);\n      qHit.xz += 2.5;\n      r = length (qHit.xz);\n      if (vn.y > 0.99 && r > 1.49) {\n        qHit.xz = Rot2D (qHit.xz, 2. * pi * (floor (72. *\n           atan (qHit.z, - qHit.x) / (2. * pi) + 0.5) / 72.));\n        col = mix (vec3 (0.5, 0.5, 1.), col, SmoothBump (0.03, 0.97, 0.01, mod (2. * r, 1.)) *\n           smoothstep (0.01, 0.02, (abs (qHit.z))));\n      }\n      spec = 0.;\n    }\n    isShad = true;\n    sh = ObjSShadow (ro, ltDir);\n    col = col * (0.3 + 0.7 * sh * max (dot (vn, ltDir), 0.)) +\n       spec * sh * pow (max (dot (reflect (rd, vn), ltDir), 0.), 32.);\n  } else {\n    col = vec3 (0.6, 0.6, 1.) * (0.2 + 0.2 * (rd.y + 1.) * (rd.y + 1.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvd, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  SetupMech ();\n  az = 0.;\n  el = -0.2 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.03 * pi * tCur;\n    el -= 0.1 * pi * sin (0.02 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, 0.4 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ltDir = vuMat * normalize (vec3 (1., 3., -1.));\n  dstFar = 40.;\n  ro = vuMat * vec3 (0., 0., -20.);\n#if ! AA\n  rd = vuMat * normalize (vec3 (uv, 5.));\n  col = ShowScene (ro, rd);\n#else\n  col = vec3 (0.);\n  for (int iy = 0; iy <= 1; iy ++) {\n    for (int ix = 0; ix <= 1; ix ++) {\n      uvd = (0.5 / canvas.y) * (2. * vec2 (float (ix), float (iy)) - 1.);\n      rd = vuMat * normalize (vec3 (uv + uvd, 5.));\n      col += ShowScene (ro, rd);\n    }\n  }\n  col *= 0.25;\n#endif\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z / h, -1., 1.))) - r;\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  float d;\n  d = length (p.xy - vec2 (rhi * clamp (p.x / rhi, -1., 1.), 0.)) - rlo;\n  if (h > 0.) d = max (d, abs (p.z) - h);\n  return d;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}