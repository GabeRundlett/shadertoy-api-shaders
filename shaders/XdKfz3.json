{
    "Shader": {
        "info": {
            "date": "1529831464",
            "description": "in a fragment shader, regular patterns can generally be done loopless: each pixel determine on which feature it lays (or not).\n(Note that if patterns can superimpose, then one has not only to consider the central feature but also its direct neighborhs) .",
            "flags": 0,
            "hasliked": 0,
            "id": "XdKfz3",
            "likes": 22,
            "name": "loopless dots along spiral",
            "published": 3,
            "tags": [
                "tuto",
                "short",
                "phyllotaxis",
                "loopless"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 1246
        },
        "renderpass": [
            {
                "code": "// variant of https://shadertoy.com/view/XsVBz3\n\n#define S(v,r)  smoothstep ( 3./R.y, 0., length(v)-r ) // antialiased draw\n\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v) + vec4(0,23,21,0) ) ) // from https://www.shadertoy.com/view/ll2cDc\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U = ( U+U - R ) / R.y;                           // normalized coordinates\n    \n    float r = .5,                                    // circle radius\n          n = .1 + 3.*(.5+.5*sin(iTime)),            // dots density\n          l = length(U),                             // polar coordinates\n          a = atan(U.y,U.x);\n    l *= 4.;                                         // spiral zoom\n    r = l - a/6.283;                                 // ceil() = spire number\n    a += 6.283 * (ceil(r)-.5);                       // extended polar angle\n    a = a*a/2.;                                      // param along spiral : int 0..a { r(a).da }\n    \n    float u = ( fract( a*n/6.283 ) - .5 ) / n,       // local coordinates in\n          v = fract(r) - .5,                         // cells along the circle\n          i = floor( a*n/6.283 );                    // dot number\n        \n    O = S( vec2(u,v)/4., .03 ) * hue(i/8.);          // draw blobs\n    \n  //O = vec4( fract(r), fract(.15*a), 0,0);          // draw parameterization\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}