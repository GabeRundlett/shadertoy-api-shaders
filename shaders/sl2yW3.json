{
    "Shader": {
        "info": {
            "date": "1650348675",
            "description": "My entry for the Revision 2022 Shader showdown Quarter final with Blackle.\nMost Epic Quarter , thanks all !",
            "flags": 0,
            "hasliked": 0,
            "id": "sl2yW3",
            "likes": 23,
            "name": "[Revision 2022] Blob & Grid",
            "published": 3,
            "tags": [
                "revision"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 501
        },
        "renderpass": [
            {
                "code": "/*\n\nGreetings \nAll Revision participants\nAll Live Shader coders\n\nIn particular Gaz and Kamoshika that I heavly based the code on their work :D \n\n*/\n\n// I CERTIFY ITS NOT A BOT\n\nmat2 rot(float a){float c=cos(a),s=sin(a);return mat2(c,-s,s,c);}\nfloat diam(vec2 p,float s){\n   p = abs(p);\n   return (p.x+p.y-s)*inversesqrt(3.);\n     \n}\nfloat smin(float a,float b,float r){\n    float k = max(0.,r-abs(a-b));\n  return min(a,b) -k*k*.25/r;\n  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   float bpm = (iTime*60./130.*2.);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    bpm = floor(bpm)+pow(fract(bpm),.5);\n\n    vec3 col = vec3(.1);\n    vec3 p,d = normalize(vec3(uv,1.));\n  \n    for(float i=0.,g=0.,e;i++<99.;){\n    \n      p = d*g;\n      p.z -=5.;\n       \n      vec3 gp = p;\n      gp.xy *=rot(gp.z*.1);\n      gp.y =-abs(gp.y);\n      gp.y +=1.;\n \n     \n      float dd,c=20./3.141592;\n  \n      gp.xz = vec2(log(dd=length(gp.xz)),atan(p.x,p.z))*c;\n                                            // Here I struggle during live \n                                            // as I was doing p.y (which is to do torus)\n                                            // Rather than atan(p.x,p.y) to have proper log polar\n      gp.y/=dd/=c;\n      gp.y +=sin(gp.x)*.5;\n      gp.xz = fract(gp.xz+iTime)-.5;\n     \n      for(float j=0.;j<4.;j++){ \n        gp.xzy = abs(gp.xzy)-vec3(.1,.01,.1);\n         gp.xz *=rot(-.785);\n      }\n      float ha_grid = dd*.8*min(diam(gp.xy,.01),diam(gp.zy,.01));\n           // You're a variable Harry\n    \n    \n      float f = ha_grid;\n    \n      float blob = length(p)-.5;\n      float gy = dot(sin(p*4.),cos(p.zxy*2.))*.1;\n      for(float j=0.;j<16.;j++){ \n           vec3 off = vec3(cos(j),tan(bpm+j),sin(j*3.33))+gy;\n            blob = smin(blob,length(p-off)-.125,.25); \n      }\n    \n      f= smin(f,blob,.5);\n      g+=e=max(.001,f);;\n      col+= mix(vec3(1.,.2,sin(p.z+bpm)*.5+.5),vec3(.5,sin(p.z)*.5+.5,.9),fract(2.*i*i*e))*.25/exp(i*i*e);\n    \n   }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}