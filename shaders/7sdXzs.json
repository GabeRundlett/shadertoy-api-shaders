{
    "Shader": {
        "info": {
            "date": "1633812095",
            "description": "2d basic blocks",
            "flags": 0,
            "hasliked": 0,
            "id": "7sdXzs",
            "likes": 5,
            "name": "2d basic blocks",
            "published": 3,
            "tags": [
                "2dbasicblocks"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 210
        },
        "renderpass": [
            {
                "code": "///2d basic blocks-JFP\n///por jorge2017a2...2021-oct-09\n///referencia\n//https://iquilezles.org/articles/distfunctions2d\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(0.05),b,d)\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n///---------------------------\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n    \nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  //colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.05,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.05,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\nreturn colOut;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdBoxRound( in vec2 p,vec2 b, in float r )\n{  return sdBox(p,b) - r; }\n\nvec2 hash( vec2 p ) // replace this by something better\n{   p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{   const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\n// -----------------------------------------------\nvec3 nube(vec2 p, vec3 col)\n{\n    float d1= sdCircle(p,1.0 );\n    float d2= sdCircle(p-vec2(0.5,0.5),1.0 );\n    float d3= sdCircle(p-vec2(-0.5,0.5),1.0 );\n    float d4= sdCircle(p-vec2(0.5,1.5),1.0 );\n    col= DrawFig(vec3(1.0)-p.y*0.25,col,d1);\n    col= DrawFig(vec3(1.0)-p.y*0.25,col,d2);\n    col= DrawFig(vec3(1.0)-p.y*0.25,col,d3);\n    col= DrawFig(vec3(1.0)-p.y*0.25,col,d4);\n    \n    return col;\n}\n\nvec3 bloque1(vec2 p, vec3 col, float esca)\n{\n    float d1=sdBoxRound(p,vec2(1.5,4.),0.25 );\n    float d2=sdBoxRound(p,vec2(0.8,3.5),0.25 );\n    d2=d2+ noise( p*0.8-0.5);\n    \n    col= DrawFigBordeCol(vec3(0.6)*esca, col, d1, vec3(0.5) );\n    col= DrawFigBordeCol(vec3(0.3)*esca, col, d2, vec3(0.4) );\n    return col;\n}\n\nvec3 grupoBloques(vec2 uv, vec3 col, float esca)\n{   col= bloque1(uv-vec2(-12.0,-4.0), col, esca);\n    col= bloque1(uv-vec2(-8.5,-5.0), col, esca);\n    col= bloque1(uv-vec2(-5.0,-5.0), col, esca);\n    col= bloque1(uv-vec2(-5.0,-5.0), col, esca);\n    col= bloque1(uv-vec2(-1.5,-6.0), col, esca);\n    col= bloque1(uv-vec2( 2.0,-6.0), col, esca);\n    col= bloque1(uv-vec2( 5.5,-8.0), col, esca);\n    col= bloque1(uv-vec2( 9.0,-8.0), col, esca);\n    col= bloque1(uv-vec2( 7.5,-9.0), col, esca);\n    col= bloque1(uv-vec2( 12.5,-6.0), col, esca);\n \n   return col;\n}    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    vec3  col=vec3(0.45,0.7,1.0)-uv.y*0.25;\n    uv*=8.0;\n    \n    vec2 uv2=uv;\n    uv2.x+=iTime*5.0;\n    uv2.x=mod(uv2.x,15.0);\n    \n    uv.x+=iTime*4.0;\n    \n    uv.x=mod(uv.x, 14.0);\n    \n    col= grupoBloques(uv-vec2(2.0,6.5), col,0.25);\n    col= grupoBloques(uv-vec2(3.0,4.0), col,0.5);\n    col= grupoBloques(uv, col,1.0);\n    \n    col= nube(uv2-vec2(1.5,1.0), col);\n    col= nube(uv2-vec2(4.0,5.0), col);\n    col= nube(uv2-vec2(8.0,3.0), col);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}