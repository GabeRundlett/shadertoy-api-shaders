{
    "Shader": {
        "info": {
            "date": "1607080748",
            "description": "A sun rising over an ocean. an experiment with reflection and refraction.",
            "flags": 0,
            "hasliked": 0,
            "id": "wdGfW1",
            "likes": 4,
            "name": "Ocean Sunrise",
            "published": 3,
            "tags": [
                "raymarching",
                "noise",
                "sea",
                "ocean",
                "sunrise"
            ],
            "usePreview": 1,
            "username": "Dragonpeak",
            "viewed": 448
        },
        "renderpass": [
            {
                "code": "const float FAR = 50.;\nvec3 CAMERA_POS = vec3(-0.4, 0.87, .3);\nvec3 CAMERA_LOOK = vec3(0.,-0.3,0.2);\nvec2 WIND = vec2(0.2, -0.1);\nconst float EPS = 0.002;\nconst int OCEAN_OCT = 12;\nconst int CLOUD_OCT = 6;\nconst vec3 SUN = normalize(vec3(0.3, -0.4, .01));\nconst vec3 SUN_C = vec3(0.8, 0.6, 0.4)*3.7;\n\nvec3 ray_direction(float fov, vec2 size, vec2 coord) {\n    // from https://www.shadertoy.com/view/Xtd3z7\n    vec2 xy = coord - size / 2.0;\n    float z = size.y / tan(radians(fov) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nmat4 view_matrix(vec3 eye, vec3 center, vec3 up) {\n    // from https://www.shadertoy.com/view/Xtd3z7\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\nvec2 hash( vec2 p ) // uses a texture, causes some artifacting but it is not to noticable in this shader\n{\n    return texture(iChannel0, p*0.01).xy;\n\n}\n\nfloat noise( in vec2 p )\n{\n    //from https://www.shadertoy.com/view/Msf3WH\n   \n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    //return hash(i).x;\n    return dot( n, vec3(70.0) );\n}\nfloat ocean_height(vec2 p) // ridged fbm(using abs noise)\n{\n    float sc = .15;\n    float am = .4;\n    float n = 0.;\n    for(int i = 0; i < OCEAN_OCT; i++)\n    {\n\t\tn += -abs(noise(p*sc+float(i)+WIND*iTime))*am;\n        float cs = cos(float(i)*0.3);\n\t\tfloat sn = sin(float(i)*0.3);\n        p = vec2(p.x * cs - p.y * sn, p.x * sn + p.y * cs);\n        sc *= 1.45;\n        am *= 0.6;\n    }\n\treturn n;\n}\nvec3 ocean_nrm(vec2 p)\n{\n    //from https://iquilezles.org/articles/terrainmarching\n    return normalize( vec3( ocean_height(vec2(p.x-EPS,p.y)) - ocean_height(vec2(p.x+EPS,p.y)),\n                           ocean_height(vec2(p.x,p.y-EPS)) - ocean_height(vec2(p.x,p.y+EPS)),\n                            2.0f*EPS) );\n}\nvec3 fresnel(float cosTheta, vec3 F0)\n{\n    //from https://learnopengl.com/PBR/Theory\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n}\nfloat cloud_d(vec3 p)// fbm for  clouds\n{\n\tvec2 cloud_p = p.xy/p.z*.4;\n    float sc = .3;\n    float am = .8;\n    float n = 0.;\n    for(int i = 0; i < OCEAN_OCT; i++)\n    {\n\t\tn += noise(cloud_p*sc+float(i)+WIND*0.5*iTime)*am;\n        float cs = cos(float(i)*0.3);\n\t\tfloat sn = sin(float(i)*0.3);\n        cloud_p = vec2(cloud_p.x * cs - cloud_p.y * sn, cloud_p.x * sn + cloud_p.y * cs);\n        sc *= 1.3;\n        am *= 0.73;\n    }\n    return n+.3;\n}\nvec3 shade_sky(vec3 p, bool c)\n{\n    p = normalize(p);\n\tvec3 col = mix(vec3(0.6, 0.6, 0.85), vec3(0.55, 0.55, 0.85), p.z)*1.4;//sky\n    col = mix(vec3(0.8, 0.5, 0.54), col, clamp(p.z+0.4, 0., 1.))*0.8;//pink band\n    float sun = dot(p, SUN);//sun dot\n    col = mix(col, SUN_C, min(max(sun-.996, 0.)*500., 1.));//sun colour\n    if(c && p.z>0.) // use clouds, lighted with effectivly single step ray march\n    {\n        float cl = cloud_d(p);//clouds\n        float cl2 = cloud_d(p-SUN*0.3);//clouds offset\n        float l = cl-cl2;//clouds lighting estimate\n\n        vec3 ccol = mix(vec3(0.65, 0.7, 0.7)*SUN_C, vec3(0.4), l-min(max(sun-.8, 0.)*11., 1.))*0.6;//cloud col\n\n        col = mix(col, ccol, clamp(cl, 0., 1.)*0.6);\n    }\n    //col = vec3(l);\n\treturn col*vec3(0.9, 1.,1.);\n}\n\n\nvec3 shade_ocean(vec3 p, vec3 dir, float h)\n{\n    \n    \n    vec3 col = vec3(0.2, 0.2, 0.7)*0.4;//base_col\n    vec3 nrm = ocean_nrm(p.xy);\n    vec3 refr = refract(dir, nrm, 1.03);//refraction ray\n    float fr = fresnel(dot(dir, nrm), vec3(1.055)).x;//fresnel\n    vec3 ref = reflect(nrm, dir);//reflection ray\n    vec3 rrc = mix(col, shade_sky(p+refr, false)*0.9, clamp(refr.z+0.8, 0., 1.));//refraction ray, uses sky or if low the base col\n    vec3 rc = shade_sky(p+ref, true)*0.96; // reflection col, using sky\n    col = mix(rrc, rc, fr);//mix reflection and refraction by fresnel\n    float f = min(max(h+.16, 0.)*20., 1.)*nrm.z*0.6;//foam on highest points\n    vec3 fc = vec3(.75)+SUN_C*clamp(dot(SUN, nrm), 0., 1.); //foam col, simple diffuse shading\n    col = mix(col, fc, f);\n\treturn col*vec3(1., 0.9, 0.9);\n}\n\n\nvec2 march_ocean(vec3 p, vec3 d)\n{\n    float dep = 0.;\n    float h = 0.;\n    float eps = EPS;\n    while(dep < FAR)\n    {\n        vec3 pos = p + d * dep;\n        h = ocean_height(pos.xy);\n\t\tfloat dist = pos.z-h;\n        if(dist < eps)\n        {\n\t\t\treturn vec2(dep, h);\n        }\n        eps *= 1.15;//relax eps after each step\n\t\tdep += dist;\n        \n    }\n    return vec2(FAR, 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    CAMERA_POS.z += sin(iTime*0.1)*0.4;\n    CAMERA_LOOK.z += sin(iTime*0.1)*0.1;//camera anim\n    vec3 local_dir = ray_direction(85., iResolution.xy, fragCoord);\n    \n    mat4 view = view_matrix(CAMERA_POS, CAMERA_LOOK, vec3(0.,0.,1.));\n    vec3 dir = (view * vec4(local_dir, 0.)).xyz;\n    vec2 o = march_ocean(CAMERA_POS, dir);\n    float dep = o.x;\n    vec3 pos = CAMERA_POS + dir * dep;\n    \n    vec3 col = shade_sky(dir, false); //sky w/out clouds, for mist \n    if(dep < FAR)\n    {\n\t\tcol = mix(shade_ocean(pos, dir, o.y), col, dep/FAR);\n    }\n    else\n    {\n\t\tcol = shade_sky(dir, true);//sky w, clouds for view\n    }\n    // Output to screen\n \t//col = vec3(noise(fragCoord*0.06));\n    col *= vec3(1.19, .9, 1.14)*0.7;//colour correct\n    fragColor = vec4(pow(col, vec3(1./2.1)),1.0);//gamma and out\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}