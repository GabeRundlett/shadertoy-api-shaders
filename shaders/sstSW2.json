{
    "Shader": {
        "info": {
            "date": "1634005076",
            "description": "worker -2d",
            "flags": 0,
            "hasliked": 0,
            "id": "sstSW2",
            "likes": 6,
            "name": "worker -2d",
            "published": 3,
            "tags": [
                "worker2d"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 194
        },
        "renderpass": [
            {
                "code": "///worker 2d-JFP\n///por jorge2017a2...2021-oct-11\n///referencia\n//https://iquilezles.org/articles/distfunctions2d\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(0.05),b,d)\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n///---------------------------\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n    \nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  //colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.05,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBordeCol(vec3 pColObj, vec3 colOut, float distObj , vec3 colBorde )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,colBorde ,S2(abs( distObj)-0.05,0.0));\n  return colOut;\n}\n\nvec3 DrawFig(vec3 pColObj, vec3 colOut, float distObj )\n{  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\nreturn colOut;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdUnevenCapsule( vec2 p, float r1, float r2, float h )\n{\n    p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if( k < 0.0 ) return length(p) - r1;\n    if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b) ) - r1;\n}\n\n\nvec3 ojo(vec2 p, vec3 col)\n{\n    float posOjox=1.0;\n    float d1izq= sdUnevenCapsule( p-vec2(-posOjox,1.2), 0.7, 0.7, 0.7 );\n    float db1=sdBox(p-vec2(-1.0,0.2),vec2(0.9,1.0) );\n    float  d1ojoizqA= sdCircle( p-vec2(-0.7,1.2), 0.7 );\n    float  d1ojoizqB= sdCircle( p-vec2(-0.7,1.2), 0.3 );\n    \n    d1izq=differenceSDF(d1izq,db1);\n    d1ojoizqA=intersectSDF(d1ojoizqA,d1izq);\n    d1ojoizqB=intersectSDF(d1ojoizqB,d1izq);\n    \n    col=DrawFigBorde(vec3(1.0), col,d1izq );\n    col=DrawFig(vec3(0.4), col,d1ojoizqA );\n    col=DrawFig(vec3(1.0,0.9,0.2), col,d1ojoizqB );\n    return col;\n}\n\nfloat sdRoundedX( in vec2 p, in float w, in float r )\n{    p = abs(p);\n    return length(p-min(p.x+p.y,w)*0.5) - r;\n}\n\n\nvec3 sombrero(vec2 p, vec3 col)\n{   float dso1= sdUnevenCapsule( p, 3.25, 3.25, 2.0 );\n    float db1=sdBox(p-vec2(0.0,-1.0),vec2(3.4,3.0) );\n    float difso1=differenceSDF(dso1,db1);\n    float db0= sdBox(p-vec2(0.0,1.5),vec2(5.0,0.15) )-0.5;\n    col=DrawFigBorde(vec3(1.0,1.5,0.2), col,difso1 );\n    col=DrawFigBorde(vec3(0.3), col,db0 );\n    \n    float sr1=sdRoundedX(p-vec2(0.0,3.5), 1.5, 0.35 );\n    col=DrawFigBorde(vec3(1.0,0.0,0.3), col,sr1 );\n    return col;\n}\n\nvec3 boca(vec2 p, vec3 col)\n{  float anc=1.5;\n   float d1= sdUnevenCapsule( p, anc, anc, 1.0 );\n   float db0= sdBox(p-vec2(0.0,1.5),vec2(2.5,2.0) );\n   float d2=sdCircle(p-vec2(0.5,-1.5), 0.8 );\n    d1=differenceSDF(d1,db0);\n    d2=intersectSDF(d2,d1);\n    \n   col=DrawFigBorde(vec3(0.0), col,d1 );\n   col=DrawFigBorde(vec3(1.0,0.0,0.0), col,d2 );\n   return col;\n}\n\nvec3 rostro(vec2 p, vec3 col)\n{ float d1= sdUnevenCapsule( p, 3.0, 3.0, 2.0 );\n    col=DrawFigBorde(vec3(1.0,0.5,0.2), col,d1 );\n    float px=0.25*sin(iTime);\n    float py=0.25*cos(iTime);\n    \n    col= ojo(p-vec2(0.0+px,-1.5+py), col);\n    col= ojo(p-vec2(2.0+px,-1.5+py), col);\n    col= sombrero(p-vec2(0.0,0.2), col);\n    col=boca( p-vec2(0.0,-0.5), col);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    vec3  col=vec3(0.45,0.7,1.0)-uv.y*0.25;\n    uv*=8.0;\n    \n    vec2 uv1=uv;\n    float tt=iTime*5.0;\n    uv1.y=opRep1D(uv1.y-tt, 12.0 );\n    col= rostro(uv1,col);\n    \n    vec2 uv2=uv;\n    uv2.y=mod(uv2.y+tt,10.0);\n    uv2=abs(uv2*1.5-vec2(0.0,-2.0))-10.0;\n    col= rostro(uv2,col);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}