{
    "Shader": {
        "info": {
            "date": "1667765958",
            "description": "CC0: Another windows terminal shader\nCreated this based on an old shader as a background in windows terminal\n",
            "flags": 0,
            "hasliked": 0,
            "id": "DdSGzy",
            "likes": 46,
            "name": "Another windows terminal shader",
            "published": 3,
            "tags": [
                "terminal"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 2355
        },
        "renderpass": [
            {
                "code": "// CC0: Another windows terminal shader\n//  Created this based on an old shader as a background in windows terminal\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\nconst mat2 rot0 = ROT(0.0);\nmat2 g_rot0 = rot0;\nmat2 g_rot1 = rot0;\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nfloat apolloian(vec3 p, float s) {\n  float scale = 1.0;\n  for(int i=0; i < 5; ++i) {\n    p = -1.0 + 2.0*fract(0.5*p+0.5);\n    float r2 = dot(p,p);\n    float k  = s/r2;\n    p       *= k;\n    scale   *= k;\n  }\n  \n  vec3 ap = abs(p/scale);  \n  float d = length(ap.xy);\n  d = min(d, ap.z);\n\n  return d;\n}\n\n\nfloat df(vec2 p) {\n  float fz = mix(0.75, 1., smoothstep(-0.9, 0.9, cos(TAU*TIME/300.0)));\n  float z = 1.55*fz;\n  p /= z;\n  vec3 p3 = vec3(p,0.1);\n  p3.xz*=g_rot0;\n  p3.yz*=g_rot1;\n  float d = apolloian(p3, 1.0/fz);\n  d *= z;\n  return d;\n}\n\nvec3 effect(vec2 p, vec2 pp) {\n  g_rot0 = ROT(0.1*TIME); \n  g_rot1 = ROT(0.123*TIME);\n\n  float aa = 2.0/RESOLUTION.y;\n  \n  float d = df(p);\n  const vec3 bcol0 = HSV2RGB(vec3(0.55, 0.85, 0.85));\n  const vec3 bcol1 = HSV2RGB(vec3(0.33, 0.85, 0.025));\n  vec3 col = 0.1*bcol0;\n  col += bcol1/sqrt(abs(d));\n  col += bcol0*smoothstep(aa, -aa, (d-0.001));\n  \n  col *= smoothstep(1.5, 0.5, length(pp));\n  \n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  vec2 pp = p;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = effect(p, pp);\n  col = aces_approx(col);\n  col = sqrt(col);\n  fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}