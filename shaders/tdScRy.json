{
    "Shader": {
        "info": {
            "date": "1586847183",
            "description": "After watching some tutorials recent, I started with a fresh sketch to try to draw a square without referring to anything else. Tried to add as many comments as possible, mostly for my own benefit, but hopefully for others' as well.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdScRy",
            "likes": 1,
            "name": "Square from memory",
            "published": 3,
            "tags": [
                "2d",
                "basic",
                "tutorial",
                "gradient",
                "square"
            ],
            "usePreview": 0,
            "username": "bikemule",
            "viewed": 481
        },
        "renderpass": [
            {
                "code": "/*\nDone from memory as an exercise.\n\nEven trying to find bits you remember when you have read several tutorials can\nbe problematic. It's a good way to make sure you know things.\n\nCredit to The Art of Code and Code Parade on YouTube, Inigo Quilez, The Book of Shaders, and many more.\n\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Move coordinate origin to center\n    // 0-1 * 2 gives a range of 0-2\n    // Subtracting 1 gives range of -1 to +1 with origin in the center\n    uv *= vec2(2.);\n    uv -= vec2(1.);\n    \n    // Correct perspective so the square appears square\n    // Screen res is usually higher horizontally than vertically, so\n    // multiply x by the x-axis proportion to the y-axis\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // This is the default color that will be returned.\n    vec3 pixel = vec3(0.);  // black\n    \n    // Gradient BG for fun.\n    // grayscale, so distance from origin determines the brightness\n    // uv/vec2(2.) is to normalize to our coords\n    // 1 - distance to start with black outside\n    vec3 gradient = vec3(1.-distance(uv/vec2(2.), vec2(0.,0.)));\n    pixel = gradient;\n    \n\n\t// Origin (0,0)is in center, so +/-0.5 will be a square in the center.\n    if(abs(uv.x)<= 0.5 && abs(uv.y)<=0.5)\n        pixel = vec3(0.);  // white\n    \n    // Output to screen, adding alpha value\n    fragColor = vec4(pixel,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}