{
    "Shader": {
        "info": {
            "date": "1629181320",
            "description": "400-frame video history.\ninspired by a circa ~2000 performance by Steina and Woody Vasulka.\nif you're able to get in front of a monitor and a webcam, this is a lot of fun.\nespecially with a kid or two around!\nclick upper-right for Shirley Jones.",
            "flags": 34,
            "hasliked": 0,
            "id": "7ddGR8",
            "likes": 10,
            "name": "spatial-temporal video mashup",
            "published": 3,
            "tags": [
                "rollingshutter",
                "videodelay"
            ],
            "usePreview": 0,
            "username": "elenzil",
            "viewed": 612
        },
        "renderpass": [
            {
                "code": "vec4 readFromHistory(in vec2 UV, int historyIndex)\n{\n    int   index   = historyIndex % CELLCOUNT;\n    ivec2 gridPos = gridPosFromIndex(index);\n    \n    vec2  uv      = UV / vec2(GRIDRES);\n    uv += vec2(gridPos) / vec2(GRIDRES);\n    \n    uv *= (iResolution.xy - vec2(EXCESS)) / iResolution.xy;\n    \n    int historyPage = historyIndex / CELLCOUNT;\n    \n    vec4 tex;\n    \n    if (historyPage == 0) {\n       tex = texture(iChannel3, uv, 0.0);\n    }\n    else if (historyPage == 1) {\n       tex = texture(iChannel2, uv, 0.0);\n    }\n    else if (historyPage == 2) {\n       tex = texture(iChannel1, uv, 0.0);\n    }\n    else  {\n       tex = texture(iChannel0, uv, 0.0);\n    }\n    \n    return tex;\n}\n\nvoid mainImage( out vec4 RGBA, in vec2 XY )\n{\n    vec2 UV = XY / (iResolution.xy + vec2(EXCESS));\n    \n    float d1 = 1.0 - UV.y;\n    float d2 = 1.0 - length(UV - 0.5) / length(vec2(0.5));\n\n    float t = sin(iTime * 3.14159 / 60.0);\n    float dMixer = smoothstep(0.2, -0.2, t);\n    \n    dMixer = 0.0;\n    \n    float delay = mix(d1, d2, dMixer);\n    \n    delay = clamp(delay, 0.0, 1.0);\n\n    if (iMouse.z > 0.0) {\n        if (XY.x < iResolution.x / 2.0) {\n            if (XY.y < iResolution.y / 2.0) {\n                RGBA = texture(iChannel3, UV * 2.0 - vec2(0.0, 0.0), 0.0);\n            }\n            else {\n                RGBA = texture(iChannel2, UV * 2.0 - vec2(0.0, 1.0), 0.0);\n            }\n        }\n        else {\n            if (XY.y < iResolution.y / 2.0) {\n                RGBA = texture(iChannel1, UV * 2.0 - vec2(1.0, 0.0), 0.0);\n            }\n            else {\n                RGBA = texture(iChannel0, UV * 2.0 - vec2(1.0, 1.0), 0.0);\n            }\n        }\n        \n        RGBA = mix(RGBA, vec4(sin(delay * 50.0) * 0.5 + 0.5), 0.2);\n        return;\n    }\n    \n    float indexF  = delay * float(HISTORY_COUNT);\n    int   index   = int(floor(indexF)); \n    \n    vec4 tex = readFromHistory(UV, index);\n    \n    RGBA = vec4(tex.rgb, 1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 RGBA, in vec2 XY )\n{\n    ivec2 pixelPos = ivec2(XY);\n    ivec2 gridPos  = gridPosFromPixelPos(pixelPos);\n    int   index    = indexFromGridPos(gridPos);\n    \n    if (index == 0) {\n        ivec2 ij = pixelPos + ivec2(GRIDRES - 1) * CELLSIZE;\n        RGBA = texelFetch(iChannel1, ij, 0);\n        return;\n    }\n    \n    if (gridPos.x >= GRIDRES.x || gridPos.y >= GRIDRES.y) {\n        RGBA = vec4(0.0, 0.0, 1.0, 1.0);\n        return;\n    }\n    \n    ivec2 ij = pixelPos - (gridPos * CELLSIZE);\n\n    if (iFrame < 10) {\n        index = 0;\n    }\n    else {\n        index -= 1;\n    }\n    \n    ij += gridPosFromIndex(index) * CELLSIZE;\n    \n    RGBA = texelFetch(iChannel0, ij, 0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define GRIDRES       (ivec2(10, 10))\n#define CELLSIZE      (ivec2(iResolution.xy) / GRIDRES)\n#define CELLCOUNT     (GRIDRES.x * GRIDRES.y)\n#define BUFFERS       (4)\n#define HISTORY_COUNT (CELLCOUNT * BUFFERS)\n#define EXCESS        (ivec2(iResolution.xy) - GRIDRES * CELLSIZE)\n\n#define gridPosFromPixelPos(pixelPos) (pixelPos / CELLSIZE)\n\nint indexFromGridPos(in ivec2 gridPos) {\n    return gridPos.y * GRIDRES.x + gridPos.x;\n}\n\nivec2 gridPosFromIndex(int index) {\n    return ivec2(index % GRIDRES.x, index / GRIDRES.x);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 RGBA, in vec2 XY )\n{\n    ivec2 pixelPos = ivec2(XY);\n    ivec2 gridPos  = gridPosFromPixelPos(pixelPos);\n    int   index    = indexFromGridPos(gridPos);\n    \n    if (index == 0) {\n        ivec2 ij = pixelPos + ivec2(GRIDRES - 1) * CELLSIZE;\n        RGBA = texelFetch(iChannel1, ij, 0);\n        return;\n    }\n    \n    if (gridPos.x >= GRIDRES.x || gridPos.y >= GRIDRES.y) {\n        RGBA = vec4(0.0, 0.0, 1.0, 1.0);\n        return;\n    }\n    \n    ivec2 ij = pixelPos - (gridPos * CELLSIZE);\n\n    if (iFrame < 10) {\n        index = 0;\n    }\n    else {\n        index -= 1;\n    }\n    \n    ij += gridPosFromIndex(index) * CELLSIZE;\n    \n    RGBA = texelFetch(iChannel0, ij, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 RGBA, in vec2 XY )\n{\n    ivec2 pixelPos = ivec2(XY);\n    ivec2 gridPos  = gridPosFromPixelPos(pixelPos);\n    int   index    = indexFromGridPos(gridPos);\n    \n    if (index == 0) {\n        ivec2 ij = pixelPos + ivec2(GRIDRES - 1) * CELLSIZE;\n        RGBA = texelFetch(iChannel1, ij, 0);\n        return;\n    }\n    \n    if (gridPos.x >= GRIDRES.x || gridPos.y >= GRIDRES.y) {\n        RGBA = vec4(0.0, 0.0, 1.0, 1.0);\n        return;\n    }\n    \n    ivec2 ij = pixelPos - (gridPos * CELLSIZE);\n\n    if (iFrame < 10) {\n        index = 0;\n    }\n    else {\n        index -= 1;\n    }\n    \n    ij += gridPosFromIndex(index) * CELLSIZE;\n    \n    RGBA = texelFetch(iChannel0, ij, 0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 RGBA, in vec2 XY )\n{\n    ivec2 pixelPos = ivec2(XY);\n    ivec2 gridPos  = gridPosFromPixelPos(pixelPos);\n    int   index    = indexFromGridPos(gridPos);\n    \n    if (index == 0) {\n        const bool mirrorVideo = true;\n        \n        vec2 uv = XY / iResolution.xy;\n        uv *= vec2(GRIDRES);\n        uv.x = mirrorVideo ? 1.0 - uv.x : uv.x;\n        \n        if (length(1.0 - iMouse.xy/iResolution.xy) < 0.3) {\n            RGBA = texture(iChannel2, uv, 0.0);\n        }\n        else {\n            RGBA = texture(iChannel1, uv, 0.0);\n        }\n        return;\n    }\n    \n    if (gridPos.x >= GRIDRES.x || gridPos.y >= GRIDRES.y) {\n        RGBA = vec4(0.0, 0.0, 1.0, 1.0);\n        return;\n    }\n    \n    ivec2 ij = pixelPos - (gridPos * CELLSIZE);\n    \n    if (iFrame < 10) {\n        index = 0;\n    }\n    else {\n        index -= 1;\n    }\n    \n    ij += gridPosFromIndex(index) * CELLSIZE;\n    \n    RGBA = texelFetch(iChannel0, ij, 0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    },
                    {
                        "channel": 1,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}