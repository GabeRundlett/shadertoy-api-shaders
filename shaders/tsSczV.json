{
    "Shader": {
        "info": {
            "date": "1586957530",
            "description": "Testing implemntation of gradient noise",
            "flags": 0,
            "hasliked": 0,
            "id": "tsSczV",
            "likes": 2,
            "name": "Noise 1 to test parameters",
            "published": 3,
            "tags": [
                "noise",
                "gradient"
            ],
            "usePreview": 0,
            "username": "Leria",
            "viewed": 305
        },
        "renderpass": [
            {
                "code": "//Disclaimer : I use some part of code from @iq\n\nvec2 hash(vec2 p)  { return ( 2.* fract(sin( dot(p, vec2(49.74459, 123.45678))*p.xy * 78.233 ) * 43758.5453) -1. );}\n\n//quintique\nvec2 fade5(vec2 f) {return f * f * f * (f * (f * 6.0 - 15.0) + 10.0);}\n\n//cubique\nvec2 fade3(vec2 f) {return f*f*(3.0-2.0*f);}\n\nfloat noise(vec2 p)\n{\n \tvec2 i = floor( p );\n    vec2 f = fract( p );\n    \n    vec2 u = fade5(f);\n    \n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n        \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord /= 10.;\n\n\tfloat n = .5+.5*noise(fragCoord);\n    \n    fragColor = vec4(n, n, n, 1.);\n   \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}