{
    "Shader": {
        "info": {
            "date": "1571679283",
            "description": "Animated sierpinky triangle kaleidoscope",
            "flags": 0,
            "hasliked": 0,
            "id": "WsdSRM",
            "likes": 6,
            "name": "Sierpinski Kaleidoscope",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "SSHantaram",
            "viewed": 378
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // uv (0, 0) is at the center of the screen\n    // top at x = 0.5, bottom at x = -0.5\n    // left and right border according to aspect ratio\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    \n    float time = iTime*0.2;\t\t// slow down time\n    \n    // vertical offset to keep triangle in view\n    // this movement must be done for each corner every rotation\n    // so it has to be 3 times as fast as the rotation\n    uv.y += cos(3.0*time)*0.1;\n    \n    // zoom out a little to see the whole thing\n    uv *= 2.3;\n    \n    // rotate uv around the origin\n    uv = vec2(uv.x*cos(time) - uv.y*sin(time), uv.x*sin(time) + uv.y*cos(time));\n    \n    float pi = 3.1415;\n    float angle = -(2.5 / 3.0) * pi;\t\t// angle for the non horizontal reflection\n    vec2 n = vec2(sin(angle), cos(angle));\t// normal for the non horizontal reflection\n    int iterations = 15;\t\t\t\t\t// number of iterations\n    \n    // this is to keep track of the overall scale to normalize the distance later\n    float scale = 1.0;\n\n    \n    // in each step the uv plane transformed\n    // according to the construction of the sierpinski triangle\n    for (int i = 0; i < iterations; i++)\n    {\n        uv *= 2.0;\n    \tuv -= n*min(dot(uv, n), 0.0)*2.0;\t// non horizontal reflection\n    \tuv.x = abs(uv.x);\t\t\t\t\t// horizontal reflection\n    \t//uv *= 2.0;\t\t\t\t\t\t\t// scale by 2\n    \tuv += vec2(-1.0, 1.0/sqrt(3.0));\t// add offset\n        scale *= 2.0;\t\t\t\t\t\t// keep track of scale\n    }\n    \n    // final reflections\n    uv.x = abs(uv.x);\n    uv -= n*min(dot(uv, n), 0.0)*2.0;\n    \n    \n    float d = (-uv.y - 0.5)/scale;\n    \n    vec3 col = vec3(0);\n    \n    //col.xy += uv;\n    //col += d;\n    \n    vec2 texCoord = vec2(d, 0.2)*0.5 + iTime*0.003;\n   \t//texCoord = uv/scale - iTime*0.01;\n\n    col = texture(iChannel0, texCoord).rgb;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}