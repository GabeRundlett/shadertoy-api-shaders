{
    "Shader": {
        "info": {
            "date": "1453416222",
            "description": "Verlet integrated cloth. Next step, 3D",
            "flags": 32,
            "hasliked": 0,
            "id": "4dG3R1",
            "likes": 199,
            "name": "2D Cloth",
            "published": 3,
            "tags": [
                "2d",
                "verlet"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 16906
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2016 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfloat hash1( ivec2 p ) { float n = dot(vec2(p),vec2(127.1,311.7)); return fract(sin(n)*153.4353); }\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nvec4 getParticle( ivec2 id )\n{\n    return texelFetch( iChannel0, id, 0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    vec3 f = vec3(0.0);\n    for( int j=0; j<10; j++ )\n    for( int i=0; i<10; i++ )\n    {\n        ivec2 id = ivec2( i, j );\n        vec4 p = getParticle( id );\n\n        float d = 1.0;\n        \n        #if 1\n        if( i<9 )        d = min(d, sdSegment( uv, p.xy, getParticle( id+ivec2(1,0) ).xy ));\n        if( j<9 )        d = min(d, sdSegment( uv, p.xy, getParticle( id+ivec2(0,1) ).xy ) );\n        if( i<9 && j<9 ) d = min(d, sdSegment( uv, p.xy, getParticle( id+ivec2(1,1) ).xy ));\n        if( i>0 && j<9 ) d = min(d, sdSegment( uv, p.xy, getParticle( id+ivec2(-1,1) ).xy ) );\n        f = mix( f, vec3(0.4,0.6,0.8), 1.0-smoothstep( 0.0, 0.005, d ) );\n        #endif\n        \n        d = length(uv-p.xy)-0.035;\n        vec3 col = 0.6 + 0.4*sin( hash1(id)*30.0 + vec3(0.0,1.0,2.0) );\n        col *= 0.8 + 0.2*smoothstep( -0.1, 0.1, sin(d*400.0) );\n        f = mix( f, col, 1.0-smoothstep( -0.001, 0.001, d ) );\n            \n    }\n    \n    fragColor = vec4(f,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat hash1( ivec2 p ) { float n = dot(vec2(p),vec2(127.1,311.7)); return fract(sin(n)*43758.5453); }\n\nvec4 getParticle( ivec2 id )\n{\n    return texelFetch( iChannel0, id, 0 );\n}\n\nvec4 react( in vec4 p, in ivec2 qid, float rl )\n{\n    vec4 q = getParticle( qid );\n    \n    vec2 di = q.xy - p.xy;\n    \n    float l = length(di);\n    \n    p.xy += 0.1*(l-rl)*(di/l);\n    \n    return p;\n}\n\nvec4 solveContrainsts( in ivec2 id, in vec4 p )\n{\n    if( id.x > 0 )  p = react( p, id + ivec2(-1, 0), 0.1 );\n    if( id.x < 9 )  p = react( p, id + ivec2( 1, 0), 0.1 );\n    if( id.y > 0 )  p = react( p, id + ivec2( 0,-1), 0.1 );\n    if( id.y < 9 )  p = react( p, id + ivec2( 0, 1), 0.1 );\n\n    if( id.x > 0 && id.y > 0)  p = react( p, id + ivec2(-1, -1), 0.14142 );\n    if( id.x > 0 && id.y < 9)  p = react( p, id + ivec2(-1,  1), 0.14142 );\n    if( id.x < 9 && id.y > 0)  p = react( p, id + ivec2( 1, -1), 0.14142 );\n    if( id.x < 9 && id.y < 9)  p = react( p, id + ivec2( 1,  1), 0.14142 );\n\n    return p;\n}    \n\nvec4 move( in vec4 p, in ivec2 id )\n{\n    const float g = 0.6;\n\n    // acceleration\n    p.xy += iTimeDelta*iTimeDelta*vec2(0.0,-g);\n    \n    // collide screen\n    if( p.x< 0.00 ) p.x = 0.00;\n    if( p.x> 1.77 ) p.x = 1.77;\n    if( p.y< 0.00 ) p.y = 0.00;        \n    if( p.y> 1.00 ) p.y = 1.00;\n\n    // constrains\n    p = solveContrainsts( id, p );\n        \n    #if 1\n    if( id.y > 8 ) p.xy = 0.05 + 0.1*vec2(id);\n    #endif\n    \n    // innertia\n    vec2 np = 2.0*p.xy - p.zw;\n    p.zw = p.xy;\n    p.xy = np;\n\n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 id = ivec2(fragCoord-0.4 );\n    \n    if( id.x>9 || id.y>9 ) discard;\n    \n    vec4 p = getParticle(id);\n    \n    if( iFrame==0 )\n    {\n        p.xy = 0.05 + vec2(id)*0.1;\n        p.zw = p.xy - 0.01*vec2(0.5+0.5*hash1(id),0.0);\n    }\n    else\n    {\n    \tp = move( p, id );\n    }\n\n    fragColor = p;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}