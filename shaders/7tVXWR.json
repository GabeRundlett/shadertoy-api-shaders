{
    "Shader": {
        "info": {
            "date": "1640549619",
            "description": "Showing all animations at once. It uses a buffer to serve the frames for 100 animations (or more if you change what is in common tab)",
            "flags": 32,
            "hasliked": 0,
            "id": "7tVXWR",
            "likes": 6,
            "name": "JCVD - Tiled Animations",
            "published": 3,
            "tags": [
                "sprite",
                "sheet"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 280
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv/=2.;\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).rgb;\n    \n    //flip\n    //c3 col = texture(iChannel0,vec2(1.-uv.x,uv.y)).rgb;\n    \n    vec2 mousePos = floor(divisions*(vec2(iMouse.x/iResolution.x,\n                         iMouse.y/iResolution.y)));\n    \n    vec2 fragPos = floor(divisions*(vec2(fragCoord.x/iResolution.x,\n                        fragCoord.y/iResolution.y)));\n    \n    if(  (length(fragPos-mousePos) < 0.001) ){\n        col *= vec3(1.,0.7,0.7);\n        }\n    // Output to screen\n    fragColor = vec4(col,1.0);//+texture(iChannel1,uv).xxxw*0.2;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n\nbool checkBoundingBox(vec2 fragCoord, float idX, float idY){\n    \n    //float idX = mod(frame,divisions);\n    //float idY = frame/divisions;\n    \n  return (   \n            fragCoord.x >= idX*stepWidth \n            //&& fragCoord.x < (idX*stepWidth+stepWidth)\n            && fragCoord.x < (idX+1.)*stepWidth\n            \n            && fragCoord.y >= idY*stepHeight \n           // && fragCoord.y < (idY*stepHeight+stepHeight));\n           && fragCoord.y < (idY+1.)*stepHeight\n           );\n           \n   /*        \n     return (\n            (fragCoord.x/iResolution.x >= idX*(stepWidth/iResolution.x))\n         && (fragCoord.x/iResolution.x < (idX+1.)*(stepWidth/iResolution.x))\n         && (fragCoord.y/iResolution.y >= idY*(stepHeight/iResolution.y))\n         && (fragCoord.y/iResolution.y < (idY+1.)*(stepHeight/iResolution.y))\n            );\n           */\n           \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.,0.,0.,1.);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if( iFrame/int(frameStep) < int(divisions*divisions)){\n        \n        if( (mod(float(iFrame), frameStep) < 0.5) \n           ){\n            \n            float theFrame = float(iFrame) / frameStep;\n\n            float idX = mod(theFrame, divisions);\n\n            //Just needed to floor this lol\n            float idY = floor(theFrame / divisions);\n\n            if( checkBoundingBox(fragCoord, idX, idY )){\n\n                vec2 st = vec2(\n                    //(fragCoord.x-idX*stepWidth)/stepWidth,\n                    //(fragCoord.y-idY*stepHeight)/stepHeight\n\n                    (fragCoord.x/iResolution.x - idX*(stepWidth/iResolution.x)),\n                    (fragCoord.y/iResolution.y - idY*(stepHeight/iResolution.y))\n\n                    );\n\n                fragColor = texture(iChannel0,st*divisions);//vec4(vec3(st.y*divisions),1.);//\n\n\n                }\n            \n            \n            //if not in bounding box get frames we had\n            else{\n                    fragColor = texture(iChannel1,uv);\n                }\n                \n            }\n            //if not time for new frame, get frames we had\n            else{\n                    fragColor = texture(iChannel1,uv);\n                }\n    }\n    else{\n        \n        fragColor = texture(iChannel1, uv);\n    }\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 36,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\n#define divisions 10. //20.\n#define asp iResolution.y/iResolution.x\n#define stepWidth iResolution.x/divisions\n#define stepHeight (iResolution.y)/divisions\n\n#define frameStep 20. //5.\n\n//for animations we hold info in pixels of the first row\n\n#define SET_ANIMATION 1 //1-3\n\n#define CURRENT_ANIMATION_ADDRESS vec2(2.5,0.5) //will be set by SET_ANIMATION\n\n//animation 1\n#define A1_START_FRAME_ADDRESS vec2(3.5,0.5)\n#define A1_CURRENT_FRAME_ADDRESS vec2(4.5,0.5)\n#define A1_END_FRAME_ADDRESS vec2(5.5,0.5)\n\nfloat rnd(vec2 id){\n    return fract(sin(dot(vec2(12.99,75.71),id)))*45262.;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "\n\nvec3 getAnimationData(float frameAddress){\n\n    return texture(iChannel1,\n               vec2(frameAddress+.5,0.5) / iResolution.xy).xyz;\n    }\n\nvec2 getFrameUV(vec2 uv, float currentFrame){\n\n    float idX = mod(currentFrame, divisions);\n    float idY = floor(currentFrame / divisions);\n    vec2 st = uv/divisions;\n    st.x += idX*(1./divisions);\n    st.y += idY*(1./divisions);\n         \n    return st;\n}\n\nfloat runAnimation( vec2 fragCoord, inout vec4 fragColor, float fA){\n    \n    //get frame info the really greedy way\n    vec2 tmpUV = floor((fragCoord.xy/iResolution.xy)*divisions);\n    //float frameAddress = tmpUV.x + tmpUV.y*divisions;\n    vec3 animationData = getAnimationData(fA);\n    \n    //set it here\n    float startFrame = animationData.x;\n    float currentFrame = animationData.y;\n    float endFrame = animationData.z;\n\n    if( mod(float(iFrame), frameStep) < 0.5) {\n    \n        if(currentFrame >= endFrame || currentFrame < startFrame)\n            {\n                currentFrame = startFrame;\n                //return  currentFrame;\n            }\n        else{currentFrame +=1. ;}\n      \n            vec2 shiftDown = vec2(stepWidth*tmpUV.x, stepHeight*tmpUV.y);\n            vec2 uv = (fragCoord.xy-shiftDown)/vec2(stepWidth,stepHeight);\n            vec2 st = getFrameUV(uv, currentFrame);\n            \n            fragColor = texture(iChannel0, st);\n            //vec4(vec3(currentFrame/(divisions*divisions)),1.);\n    }\n    else{\n        fragColor = texture(iChannel1,fragCoord.xy/iResolution.xy);\n    }\n    return currentFrame;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.,0.,0.,1.);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if( iFrame/int(frameStep) < int(divisions*divisions)){\n         \n        fragColor = texture(iChannel0, uv);\n    }\n    \n    else if( iFrame/int(frameStep) == int(divisions*divisions)){\n   \n        if(fragCoord.x <= divisions*divisions && fragCoord.y == 0.5){\n            \n            fragColor.x = floor(fragCoord.x);//floor(rnd(fragCoord.xy)*90.);\n            fragColor.y = fragColor.x;\n            fragColor.z = min(fragCoord.x + 9.,100.5);  \n        }\n    }\n    \n    else{\n        vec2 id = floor(divisions*uv);\n        float fA = floor(id.x + id.y*divisions);\n        \n        float currentFrame = runAnimation(fragCoord, fragColor,fA);\n        vec4 blankColor = vec4(0.);\n        \n        if(fragCoord.x < (divisions*divisions) && fragCoord.y == 0.5){\n            \n            fragColor.x = floor(fragCoord.x);//floor(fract(sin(fragCoord.x*10.)*45232.)*90.);\n            fragColor.y = runAnimation(\n                        fragCoord,\n                        blankColor,\n                        floor(fragCoord.x));      \n            fragColor.z = floor(fragCoord.x)+9.;//fragColor.x + 8.5;\n        }\n\n    }\n    \n}    ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}