{
    "Shader": {
        "info": {
            "date": "1480618608",
            "description": "Bresenham algorithm implementation.\nClick on a position to set the end point.",
            "flags": 0,
            "hasliked": 0,
            "id": "4ldXzj",
            "likes": 18,
            "name": "Bresenham line",
            "published": 3,
            "tags": [
                "2d",
                "line"
            ],
            "usePreview": 0,
            "username": "4rknova",
            "viewed": 1258
        },
        "renderpass": [
            {
                "code": "// by Nikos Papadopoulos, 4rknova / 2016\n// WTFPL\n\n#define EPSILON    0.001\n#define GRID_SIZE  15.\n#define START      vec2(.5)\n#define COLOR_A    vec3(108,123,150) / 255.\n#define COLOR_B    vec3(249, 82, 10) / 255.\n#define COLOR_C    vec3( 20, 20, 20) / 255.\n\n// Print Utility by FMS_Cat\n// https://www.shadertoy.com/view/4ts3R8\nvoid rect(in vec4 _p, in vec3 _c, in vec2 fragCoord, inout vec4 fragColor)\n{\n\tvec2 p = fragCoord.xy;\n    if((_p.x<p.x&&p.x<_p.x+_p.z&&_p.y<p.y&&p.y<_p.y+_p.w))fragColor=vec4(_c,0.);\n}\n\nvoid print(in float _i, in vec2 _f,vec2 _p, in vec3 _c, in vec2 fragCoord, inout vec4 fragColor)\n{\n    bool n=(_i<0.)?true:false;\n    _i=abs(_i);\n    if(fragCoord.x<_p.x-5.-(max(ceil(log(_i)/log(10.)),_f.x)+(n?1.:0.))*30.||_p.x+6.+_f.y*30.<fragCoord.x||fragCoord.y<_p.y||_p.y+31.<fragCoord.y)return;\n\n    if(0.<_f.y){rect(vec4(_p.x-5.,_p.y,11.,11.), vec3(1.), fragCoord, fragColor);rect(vec4(_p.x-4.,_p.y+1.,9.,9.), _c, fragCoord, fragColor);}\n\n    float c=-_f.y,m=0.;\n    for(int i=0;i<16;i++)\n    {\n        float x,y=_p.y;\n        if(0.<=c){x=_p.x-35.-30.*c;}\n        else{x=_p.x-25.-30.*c;}\n        if(int(_f.x)<=int(c)&&_i/pow(10.,c)<1.&&0.<c)\n        {\n            if(n){rect(vec4(x,y+10.,31.,11.),vec3(1.), fragCoord, fragColor);rect(vec4(x+1.,y+11.,29.,9.),_c, fragCoord, fragColor);}\n            break;\n        }\n        float l=fract(_i/pow(10.,c+1.));\n        if(l<.1){rect(vec4(x,y,31.,31.),vec3(1.), fragCoord, fragColor);rect(vec4(x+1.,y+1.,29.,29.),_c, fragCoord, fragColor);rect(vec4(x+15.,y+10.,1.,11.),vec3(1.), fragCoord, fragColor);}\n        else if(l<.2){rect(vec4(x+5.,y,21.,31.),vec3(1.), fragCoord, fragColor);rect(vec4(x,y,31.,11.),vec3(1.), fragCoord, fragColor);rect(vec4(x,y+20.,6.,11.),vec3(1.), fragCoord, fragColor);rect(vec4(x+6.,y+1.,19.,29.),_c, fragCoord, fragColor);rect(vec4(x+1.,y+1.,29.,9.),_c, fragCoord, fragColor);rect(vec4(x+1.,y+21.,5.,9.),_c, fragCoord, fragColor);}\n        else if(l<.3){rect(vec4(x,y,31.,31.),vec3(1.), fragCoord, fragColor);rect(vec4(x+1.,y+1.,29.,29.),_c, fragCoord, fragColor);rect(vec4(x+15.,y+10.,15.,1.),vec3(1.), fragCoord, fragColor);rect(vec4(x+1.,y+20.,15.,1.),vec3(1.), fragCoord, fragColor);}\n        else if(l<.4){rect(vec4(x,y,31.,31.),vec3(1.), fragCoord, fragColor);rect(vec4(x+1.,y+1.,29.,29.),_c, fragCoord, fragColor);rect(vec4(x+1.,y+10.,15.,1.),vec3(1.), fragCoord, fragColor);rect(vec4(x+1.,y+20.,15.,1.),vec3(1.), fragCoord, fragColor);}\n        else if(l<.5){rect(vec4(x,y+5.,15.,26.),vec3(1.), fragCoord, fragColor);rect(vec4(x+15.,y,16.,31.),vec3(1.), fragCoord, fragColor);rect(vec4(x+1.,y+6.,14.,24.),_c, fragCoord, fragColor);rect(vec4(x+16.,y+1.,14.,29.),_c, fragCoord, fragColor);rect(vec4(x+15.,y+6.,1.,10.),_c, fragCoord, fragColor);}\n        else if(l<.6){rect(vec4(x,y,31.,31.),vec3(1.), fragCoord, fragColor);rect(vec4(x+1.,y+1.,29.,29.),_c, fragCoord, fragColor);rect(vec4(x+1.,y+10.,15.,1.),vec3(1.), fragCoord, fragColor);rect(vec4(x+15.,y+20.,15.,1.),vec3(1.), fragCoord, fragColor);}\n        else if(l<.7){rect(vec4(x,y,31.,31.),vec3(1.), fragCoord, fragColor);rect(vec4(x+1.,y+1.,29.,29.),_c, fragCoord, fragColor);rect(vec4(x+10.,y+10.,11.,1.),vec3(1.), fragCoord, fragColor);rect(vec4(x+10.,y+20.,20.,1.),vec3(1.), fragCoord, fragColor);}\n        else if(l<.8){rect(vec4(x,y+10.,15.,21.),vec3(1.), fragCoord, fragColor);rect(vec4(x+15.,y,16.,31.),vec3(1.), fragCoord, fragColor);rect(vec4(x+1.,y+11.,14.,19.),_c, fragCoord, fragColor);rect(vec4(x+16.,y+1.,14.,29.),_c, fragCoord, fragColor);rect(vec4(x+15.,y+20.,1.,10.),_c, fragCoord, fragColor);}\n        else if(l<.9){rect(vec4(x,y,31.,31.),vec3(1.), fragCoord, fragColor);rect(vec4(x+1.,y+1.,29.,29.),_c, fragCoord, fragColor);rect(vec4(x+10.,y+10.,11.,1.),vec3(1.), fragCoord, fragColor);rect(vec4(x+10.,y+20.,11.,1.),vec3(1.), fragCoord, fragColor);}\n        else{rect(vec4(x,y,31.,31.),vec3(1.), fragCoord, fragColor);rect(vec4(x+1.,y+1.,29.,29.),_c, fragCoord, fragColor);rect(vec4(x+1.,y+10.,20.,1.),vec3(1.), fragCoord, fragColor);rect(vec4(x+10.,y+20.,11.,1.),vec3(1.), fragCoord, fragColor);}\n        c+=1.;\n    }\n}\n\nfloat df_circle(in vec2 p, in vec2 a)\n{\n    return length(p - a);\n}\n\nfloat df_line(in vec2 p, in vec2 a, in vec2 b)\n{\n    vec2 pa = p - a, ba = b - a;\n\tfloat h = clamp(dot(pa,ba) / dot(ba,ba), 0., 1.);\t\n\treturn length(pa - ba * h);\n}\n\nfloat sharpen(in float d, in float w, in float res_w, in float res_h)\n{\n    float e = 1. / min(res_w , res_h);\n    return 1. - smoothstep(-e, e, d - w);\n}\n\nfloat checkerboard(vec2 uv, float aspect, float size)\n{\n    uv *= vec2(aspect, 1) * size;\n    uv = floor(uv);\n    return mod(uv.x + uv.y, 2.);\n}\n\nvec4 bressenham(vec4 cur, vec2 p0, vec2 p1)\n{\n    /* cur.xy : current pixel coordinates\n    ** cur.z  : previous error value\n    ** cur.w  : initialization flag\n    */\n    vec4 res = cur;\n\n    if (cur.x == p1.x && cur.y == p1.y) return res;\n\n    vec2 d = abs(p1-p0);\n    vec2 s = vec2(p0.x < p1.x ? 1 : -1, p0.y < p1.y ? 1 : -1);\n\n    if (cur.w < .5) {\n        res.xy = p0.xy;\n        res.z = (d.x > d.y ? d.x : -d.y) *.5;\n        res.w = 1.;\n    }\n\n    float e2  = res.z;\n    if (e2 > -d.x) { res.z -= d.y; res.x += s.x; }\n    if (e2 <  d.y) { res.z += d.x; res.y += s.y; }\n\n    return res;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ar = vec2(iResolution.x / iResolution.y, 1);\n    vec2 uv = fragCoord.xy / iResolution.xy * ar;\n    vec2 mouse = iMouse.xy * ar;\n\n\tconst float grid_size = GRID_SIZE;\n    fragColor.rgb = vec3(checkerboard(uv, 1., grid_size)) * COLOR_C;\n\n    vec2 end   = START * ar;\n    vec2 start = mouse / iResolution.xy;\n\n    vec2 _uv = (grid_size * uv)\n       , _ls = (floor((grid_size) * start) + .5)\n       , _le = (floor((grid_size) * end  ) + .5);\n\n    // Original line\n    float d0 = sharpen(df_line(_uv, _ls, _le), 1.5/grid_size, iResolution.x, iResolution.y);\n    float d1 = 0.;\n\n    // Calculate Bressenham path\n    vec4 _cur = vec4(_ls, 0,0);\n    \n    for (float i = 0.; i < 2.*grid_size; i+=1.) {\n    \tvec2 _l0 = _cur.xy;\n        _cur = bressenham(_cur, _ls, _le);\n        d1 += sharpen(df_circle(floor(_uv), floor(_l0)), 1./grid_size, iResolution.x, iResolution.y);\n        d1 += sharpen(df_circle(floor(_uv), floor(_cur.xy)), 1./grid_size, iResolution.x, iResolution.y);\n    }\n\n    // Draw lines\n    if (d1 > EPSILON) fragColor = vec4(COLOR_A, 1); // Bressenham approximation\n    if (d0 > EPSILON) fragColor = vec4(COLOR_B, 1); // Original line\n\t// Draw numbers\n    print(_ls.x, vec2(1,1),vec2( 80, iResolution.y - 40.), vec3(0), gl_FragCoord.xy, fragColor);\n    print(_ls.y, vec2(1,1),vec2(250, iResolution.y - 40.), vec3(0), gl_FragCoord.xy, fragColor);\n    print(_le.x, vec2(1,1),vec2(250, iResolution.y - 80.), vec3(0), gl_FragCoord.xy, fragColor);\n    print(_le.y, vec2(1,1),vec2( 80, iResolution.y - 80.), vec3(0), gl_FragCoord.xy, fragColor);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}