{
    "Shader": {
        "info": {
            "date": "1656104258",
            "description": "2D fire effect + fire sound, both based on gradient noise.\nYou can draw lines of fire with your mouse, as this is a fork of \"Draw with mouse [antialiased]\"\nhttps://www.shadertoy.com/view/wlKfDm\n",
            "flags": 40,
            "hasliked": 0,
            "id": "fdtczl",
            "likes": 11,
            "name": "Burn down the gym",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "fire",
                "audio"
            ],
            "usePreview": 0,
            "username": "ruudhelderman",
            "viewed": 800
        },
        "renderpass": [
            {
                "code": "// Simple but effective 2D fire effect:\n// sum two noise patterns moving at different speeds, then do color mapping.\n// Copyright 2022 Ruud Helderman\n// MIT License\n\nconst vec2 grain = vec2(9, 6);\nconst float oven = 3.2;\nconst vec2 rise = vec2(0, 8);\nconst vec2 slide = vec2(0.5);\nconst vec4 color = vec4(-1, -2, -3, 0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 pos = grain * fragCoord / iResolution.y - iTime * rise;\n    float octave1 = 0.2 * (snoise(pos + iTime * slide) + snoise(pos - iTime * slide));\n    float octave2 = 0.9 * snoise(pos * 0.45);\n    float obstacles = 7.0 * texture(iChannel0, uv).r;\n    fragColor = octave1 + length(vec2(oven * (1.0 - uv.y) + octave2, obstacles)) + color;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Forked from \"Draw with mouse [antialiased]\"\n// https://www.shadertoy.com/view/wlKfDm\n// Customizations by Ruud Helderman\n\nconst float blur = 16.0;\nconst float glow = 10.0;\nconst float fade = 0.95;\nconst vec2 rise = vec2(0, 4);\n\n#define S(d,r,pix) smoothstep(blur, -blur, (d)/(pix)-(r))\nfloat line(vec2 p, vec2 a,vec2 b) {\n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);\n    return length(p - b * h);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ouv = (fragCoord.xy)/iResolution.y;\n       \n    vec2 pos1 = iMouse.xy/iResolution.y;\n    vec4 prevMouse = texture(iChannel1, ouv).rgba;\n    vec2 pos2 = prevMouse.rg;\n       \n    vec3 backCol = fade * texture(iChannel0, (fragCoord - rise)/iResolution.xy).rgb;\n                \n    float d = 0.;\n    if(prevMouse.w > 0.){\n        // d = clamp(drawLine(pos2, pos1, ouv, 3., 1.), 0., 1.);\n        d = S( line( ouv,pos2, pos1), 3., glow/iResolution.x);\n    }  \n    \n    d += max(0.0, 0.8 * texture(iChannel2, fragCoord/iResolution.xy).r - 0.3);\n    \n    // vec3 col = backCol + vec3(d);\n    \n    vec3 col = max(backCol, vec3(d));\n    \n    fragColor = vec4(col, 1.);    \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "video",
                        "id": 12,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Forked from \"Draw with mouse [antialiased]\"\n// https://www.shadertoy.com/view/wlKfDm\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(iMouse.xy/iResolution.y,1.0,iMouse.z);    \n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Simplex Noise, designed by Ken Perlin\n// Code from \"webgl-noise\"\n// https://github.com/ashima/webgl-noise/blob/master/src/noise2D.glsl\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Procedural fire sound\n// - Rumble/roar: low frequency noise with random overdrive (clipping)\n// - Sparks: random 10 ms noise bursts, with decay\n// Inspired by Andy Farnell's work on procedural audio.\n// Copyright 2022 Ruud Helderman\n// MIT License\n\nconst float volume = 0.2;\nconst float overdrive = 3.0;\nconst mat2 mix_stereo = mat2(0.8, 0.2, 0.2, 0.8);\n\nconst float f1 = 1.0;      // overdrive rate\nconst float f2 = 100.0;    // rumble noise\nconst float f3 = 100.0;    // spark rate\nconst float f4 = 4000.0;   // spark noise\n\nfloat square(float a) { return a * a; }\nfloat decay(float t) { return min(1.5 * exp(-1.5 * t), 1.0); }\nfloat mono(float a) { return snoise(vec2(a, 0.0)); }\nvec2 stereo(float a) { return vec2(snoise(vec2(a, 1.0)), snoise(vec2(a, 2.0))); }\n\nvec2 mainSound( int samp, float time )\n{\n    return volume * mix_stereo * (\n        (0.5 + square(mono(f1*time))) * clamp(stereo(f2*time) * overdrive, -1.0, 1.0) +\n        decay(fract(f3*time)) * max(vec2(0), stereo(floor(f3*time))) * stereo(f4*time)\n    );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}