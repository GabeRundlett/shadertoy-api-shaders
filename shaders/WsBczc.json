{
    "Shader": {
        "info": {
            "date": "1587043081",
            "description": "Quick explanation.",
            "flags": 0,
            "hasliked": 0,
            "id": "WsBczc",
            "likes": 3,
            "name": "Circle section",
            "published": 3,
            "tags": [
                "2d",
                "circle"
            ],
            "usePreview": 0,
            "username": "sixclones",
            "viewed": 195
        },
        "renderpass": [
            {
                "code": "// CONSTANTS & UTILS\n#define QP 0.785398163397448\n#define HP 1.570796326794897\n#define P 3.141592653589793\n#define TP 6.283185307179586\n\n#define t iTime\n#define ht 0.5 * t\n#define tt 0.1 * t\n\n\n// UTILS FN\n/* map a value `n` from a range `start1` -> `stop1` to a range `start2` -> `stop2` */\nfloat map(float n, float start1, float stop1, float start2, float stop2) {\n  \treturn (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;\n}\n\n/* map a value `n` from the range -1.0 -> 1.0 to a range `start2` -> `stop2`\nto be used with cos/sin\n`map01(sin(x), 0.0, 1.0)`\n*/\nfloat map01(float n, float start2, float stop2) {\n  \treturn (0.5 * n + 0.5) * (stop2 - start2) + start2;\n}\n\n\n// MAIN\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  \tvec2 uv = fragCoord.xy / iResolution.xy;\n  \tvec2 uv0 = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n  \n  \tvec3 color = vec3(0.0);\n    vec3 palette = vec3(1.0, 1.0, 0.0);\n\t\n    // compute the angle from the center of the screen and the current pixel\n    float angle = atan(uv0.y, uv0.x);\n    // `atan` returns values from {-PI -> PI}, the mapping is just for conveniance\n    angle = map(angle, -P, P, 0.0, 1.0);\n    // define the section of the circle that is displayed\n    float section = map01(sin(t), 0.0, 0.125); \n    // section = 0.125;\n    \n    // signed distance field of a circle\n    float circSDF = length(uv0.xy);\n    // compute the circle drawing\n    float circ = 1.0 - step(0.5, circSDF);\n    \n    // cooking everything together and tadaa!\n    color += step(section, angle) * circ;\n    // pacman\n    color *= palette;\n    \n  \tfragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}