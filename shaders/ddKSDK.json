{
    "Shader": {
        "info": {
            "date": "1681674937",
            "description": "mouse up -> zoom out\nmouse right -> more chaos (and less performance)\nhit space -> see size of scanned neighbourhood\nreset shader after clicking somewhere -> watch chaos rizing :D",
            "flags": 16,
            "hasliked": 0,
            "id": "ddKSDK",
            "likes": 5,
            "name": "interactive hexagonal voronoi",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "pnoqable",
            "viewed": 232
        },
        "renderpass": [
            {
                "code": "vec2 hash22(vec2 x) {\n    x = vec2( dot(x, vec2(127.1,311.7)), dot(x, vec2(269.5,183.3)) ); \n    return fract(cos(x)*43758.5453);\n}\n\nvec3 hash23(vec2 x) {\n    vec3 y = vec3( dot(x, vec2(127.1,311.7)), dot(x, vec2(269.5,183.3)),  dot(x, vec2(169.5,274.6)) ); \n    return fract(cos(y)*43758.5453);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    uv *= 10. + 90. * m.y;\n\n    float idY = round(uv.y);\n    float idX = round(uv.x + fract(0.5*idY)) - fract(0.5*idY);\n\n    vec2 id = vec2(idX, idY);\n    vec2 st = uv - id;\n    \n    float minD1 = 2., minD2 = 2.;\n    vec2 minO1, minO2;\n    \n    float chaos = .2 + 4.8 * m.x;\n    chaos *= smoothstep(0., 5., iTime);\n    \n    float r = 1. + round(sqrt(3.)*chaos);\n    \n    for(float dy = -r; dy <= r; dy++) {\n        float r2 = r - 0.5*abs(dy);\n        for(float dx = -r2; dx <= r2; dx++) {\n            vec2 o = vec2(dx, dy);\n            vec2 x = hash22(id+o);\n            float a = 6.2831 * (x.x+(x.y-0.5)*iTime);\n            vec2 st2 = chaos*vec2(cos(a), sin(a));\n            float d = distance(st, o + st2);\n            if(d < minD2) {\n                if(d < minD1) {\n                    minD2 = minD1; minD1 = d;\n                    minO2 = minO1; minO1 = o;\n                } else {\n                    minD2 = d;\n                    minO2 = o;\n                }\n            }\n            \n            // hit space for debug output:\n            if(texelFetch(iChannel0, ivec2(32, 2), 0).r > 0.  && id == o){\n                fragColor = vec4(1,0,0,1);\n                return;\n            }\n        }\n    }\n    \n    float dSum = minD1 + minD2;\n    vec3 col1 = hash23(id+minO1);\n    vec3 col2 = hash23(id+minO2);\n    \n    float delta = minD2 - minD1;\n    float width = 1.*fwidth(delta);\n    \n    vec3 col = vec3(mix(col1, col2, smoothstep(width, -width, delta)));\n    \n    fragColor = vec4(sqrt(col),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}