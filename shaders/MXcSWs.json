{
    "Shader": {
        "info": {
            "date": "1719770262",
            "description": "originals https://glslsandbox.com/e#64038.0  https://www.shadertoy.com/view/4tyfWy",
            "flags": 0,
            "hasliked": 0,
            "id": "MXcSWs",
            "likes": 3,
            "name": "happy star 3",
            "published": 3,
            "tags": [
                "fractal",
                "star",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 232
        },
        "renderpass": [
            {
                "code": "\nuniform vec2 mouse;\nuniform vec2 resolution;\n\n#define PI 3.141592 \n#define time iTime*0.\n#define time2 iTime\n#define resolution iResolution.xy\nmat2 rotate(float a) {\n    return mat2(cos(a),-sin(a),sin(a),cos(a));\n}\nconst float pi = radians(180.0);\n\nfloat hash21(in vec2 st)\n{\n\treturn fract(sin(dot(st, vec2(235.214, 123.124)))*23526.235);\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nfloat atan2(vec2 u){return atan(u.x,u.y);}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv=(gl_FragCoord.xy*2.-resolution.xy)/min(resolution.x,resolution.y);\n\tfloat s=exp2((time));\n    vec2 p = (gl_FragCoord.xy - 0.5*resolution.xy) / resolution.y;\n\tvec2 grid_id = floor(p * 10.0);\n\t\n\t// Polar coordinates\n\tfloat angle = atan(p.y + \n\t\t\t   0.02, p.x);\n\tfloat radius = length(p) + sin(2.0 * cos(angle*5.0 + time2))*0.1;\n\t\n\tfloat dif = abs(cos(angle*floor(hash21(grid_id)) + time2))*0.04 / abs(radius*0.6 - 0.2);\n\tvec3 color = vec3(dif);\n\tuv*=s*color.xy;\n\tfloat c=7.; //Count\n\tfloat r=exp2(floor(log2(length(uv))-(1./c))-1.);\n\tfloat d=r/sin(PI/c); //Space distance\n\tfloat a=(atan2(rotate(PI/2.)*uv)+PI)/(PI*2.);\n\ta=floor(fract(a+(.5/c))*c)/c;\n\tvec2 uv2=uv*rotate(a*PI*2.);\n\tfloat b=length(uv2-vec2(d,0));\n\tfloat v = (b-r)*(200./s);\n\tfragColor = vec4(vec3(v)+color.xyz,1.);\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor*= vec4(happy_star(uv, anim) * vec3(0.35,0.2,1.15)*0.1, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}