{
    "Shader": {
        "info": {
            "date": "1675294508",
            "description": "picking out some interesting frequencies\nusefull \nhttps://www.szynalski.com/tone-generator/",
            "flags": 96,
            "hasliked": 0,
            "id": "dtXSzs",
            "likes": 1,
            "name": "sound filtering",
            "published": 3,
            "tags": [
                "frequencies"
            ],
            "usePreview": 0,
            "username": "jonasfrey",
            "viewed": 143
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 o_fc_nooff = (fragCoord)/ iResolution.xy;\n\n    vec4 o_cbufa = texture(iChannel0, o_fc_nooff);\n    \n    fragColor = o_cbufa;\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define fp_n_log10(v) log(v)/log(10.)\n\n\nvec3 f_o_hsl_from_rgb( in vec3 c )\n{\n    // from here https://www.shadertoy.com/view/XljGzV\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 o_fc = (fragCoord - iResolution.xy*0.5)/ iResolution.y;\n    vec2 o_fc_nooff = (fragCoord)/ iResolution.xy;\n    vec2 o_mc_nooff = (iMouse.xy)/ iResolution.xy;\n    \n    vec4 o_cbufa = texture(iChannel1, o_fc_nooff);\n    float x = o_fc_nooff.x;\n    float l = .5;//\n    float n_x_logarhitmic = fp_n_log10(1.-x)*-l;\n    float n_x_pow = pow(x,2.);\n    float n_amp = texture(iChannel0, vec2(n_x_logarhitmic,(1./4.)*0.)).r;\n    float n_amp_linear = texture(iChannel0, vec2(x,(1./4.)*0.)).r;\n    float n_amp_pow = texture(iChannel0, vec2(n_x_pow,(1./4.)*0.)).r;\n    \n    vec4 o_col = vec4(1.);\n    \n    float n_hz_max = iSampleRate/4.;\n    float n_hz_min = 40.;\n    float n_hz_range = n_hz_max-n_hz_min;\n\n    float n_hz_current_in_loga = (n_x_logarhitmic*n_hz_range)+n_hz_min;\n    float n_hz_current_in_pow = (n_x_pow*n_hz_range)+n_hz_min;\n    float n_hz_current_in_linear = (x*n_hz_range)+n_hz_min;\n\n    // o_freq = vec4(hz_start, hz_end, amp_thresh_nor, n_amp_sum_avg);\n    //float n_hz = o_mc_nooff.x*n_hz_max;\n    //n_hz = 524.;\n    float n_hz_width = 18.;\n    vec4[] a_o_freq = vec4[] (\n        vec4(524.-n_hz_width, 524.+n_hz_width, 0.8, 0.),\n        //vec4(n_hz, n_hz+n_hz_width, 0.3, 0.), \n        //vec4(524.-n_hz_width, 524.+n_hz_width, 0.3, 0.),\n        vec4(591.-n_hz_width, 591.+n_hz_width, 0.8, 0.),\n        vec4(654.-n_hz_width, 654.+n_hz_width, 0.8, 0.),\n        vec4(702.-n_hz_width, 702.+n_hz_width, 0.8, 0.),\n        vec4(784.-n_hz_width, 784.+n_hz_width, 0.8, 0.)\n    );\n    \n    float n_freq_linear_nor_one = 1./iResolution.x;\n    \n    float n_d_hz_avg = 0.;\n    float n_d_hz_thresh = 0.;\n    vec3 o_col_min = vec3(1.);\n    float n_col_freq_thrsh = 0.;\n    float n_amp_avg_thresh_diff = 0.;\n    vec3 o_col_xyl = vec3(0.);\n    for(int n_idx_a_o_freq = 0; n_idx_a_o_freq < a_o_freq.length(); n_idx_a_o_freq+=1){\n        float n_idx_nor = float(n_idx_a_o_freq)/float(a_o_freq.length());\n        vec4 o_freq = a_o_freq[n_idx_a_o_freq];\n        vec4 o_freq_linear_nor = (o_freq - n_hz_min) / n_hz_range;\n        \n        float n_amp_sum = 0.;\n        float n_c = 0.;\n        for(\n            float n_frq_lin_nor = o_freq_linear_nor[0];\n            n_frq_lin_nor < o_freq_linear_nor[1];\n            n_frq_lin_nor+=n_freq_linear_nor_one\n        ){\n            n_c+=1.;\n            n_amp_sum+=texture(iChannel0, vec2(n_frq_lin_nor,(1./4.)*0.)).r;\n        }\n        float n_amp_avg = n_amp_sum/n_c;\n        o_freq_linear_nor[3] = n_amp_avg;\n        vec3 o_col_idx = f_o_hsl_from_rgb(vec3(n_idx_nor, 0.5, 0.5));\n        \n        \n        if(\n            n_hz_current_in_loga > o_freq[0] \n            && n_hz_current_in_loga < o_freq[1] \n        ){\n            n_amp_avg_thresh_diff = n_amp_avg - o_freq[2];\n            n_d_hz_avg = abs(o_fc_nooff.y -n_amp_avg);\n            float n_th = 0.001;\n            float n_aa = 1./iResolution.x;\n            n_d_hz_avg=smoothstep(n_th+n_aa*10., n_th,n_d_hz_avg);\n            n_d_hz_thresh=smoothstep(n_th+n_aa*10., n_th,abs(o_fc_nooff.y -o_freq[2]));\n            o_col_min = o_col_idx;\n            \n        \n        }\n\n        o_col_idx = f_o_hsl_from_rgb(vec3(n_idx_nor, 0.5, 0.5));\n        vec2 o = ((o_fc_nooff-.5)+vec2(-0.1, -0.2))*vec2(5.,1.+n_idx_nor);\n        o*=vec2(-4.);\n        o+=vec2(n_idx_nor*7., 0.);\n        o= abs(o);\n        float n_d_sqr = max(o.x, o.y);\n        float n_d_outline = smoothstep(0.1, 0.01,abs(n_d_sqr-.5));\n        n_d_sqr = smoothstep(0.5, 0.4, n_d_sqr);\n        float n_adf =n_amp_avg - o_freq[2];\n        o_col_xyl += (n_adf*vec3(n_d_sqr)*10.)*o_col_idx;\n        o_col_xyl += vec3(n_d_outline)*o_col_idx;\n        o_col_xyl = clamp(o_col_xyl, 0., 1.);\n\n    \n    }\n    \n\n\n    float n = float(o_fc_nooff.y > n_amp);\n    \n    vec4 o_colr = vec4((1.-n)*vec4(o_col_min,1.));\n    \n    o_colr+=n_d_hz_avg*vec4(o_col_min,1.);\n    o_colr+=n_d_hz_thresh*vec4(o_col_min,1.);\n    o_colr+= float(n_amp_avg_thresh_diff>0.)*vec4(1.)*vec4(o_col_min,1.);\n    o_colr+=vec4(o_col_xyl,1.);\n    fragColor = o_colr;\n\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 32167,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/hoertmalher/xylophon?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}