{
    "Shader": {
        "info": {
            "date": "1641346972",
            "description": "really like this technique - press R to reset.\n\nBuffer A describes \"particle\" -> Buffer B draws based off \"particle\" position -> Image provides color",
            "flags": 48,
            "hasliked": 0,
            "id": "7tyXWV",
            "likes": 7,
            "name": "Distorted Particle Thing",
            "published": 3,
            "tags": [
                "e"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    float x = texelFetch( iChannel0, ivec2(fragCoord), 0 ).x;\n\n    vec3 e = vec3(1.);\n    vec3 col2 = 3. * x * pal(mix(0.3, 0.35, 0.5 + 0.5 * thc(2., iTime)), e, e, e, vec3(0., 0.33, 0.66));\n    fragColor = vec4(col2, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nvec2 Cell( in ivec2 p )\n{\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n    return texelFetch(iChannel0, p, 0 ).xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;   \n    \n    // Replace 0.05, e.g. 0.1 -> more fluid-like\n    uv += 0.05 * iTime;\n    \n    ivec2 px = ivec2(fragCoord);\n    vec2 p = Cell(px);\n    if (iFrame == 0 || key_down(KEY_RESET)) {\n        fragColor = vec4(0.);\n        p = vec2(0.5,0.5);\n    } \n    \n    // Distorted grid\n    vec2 ipos = floor(sc * uv);\n    \n    // Get random value with time\n    float spd = 1.;\n    float lh = h21(vec2(floor(spd * iTime)));\n    float nh = h21(vec2(floor(spd * iTime + 1.)));\n    float rand = mix(lh, nh, smoothstep(0., 1., fract(spd * iTime)));\n    \n    // Speed of particle (distance moved each frame)\n    // e.g. 30. -> more cube-like\n    float m = 4. / iResolution.y;\n    \n    // Angle of particle (remove h21() to see an actual particle)\n    float th = 0.5 * pi * cos(100. * h21(ipos) + 2. * iTime) + 2. * pi * rand;\n   \n    // Vector from angle\n    vec2 b = vec2(cos(th), sin(th));\n    \n    // New point (clamped)\n    vec2 p2 = p + m * b;\n    p2 = clamp(p2, vec2(0.1), vec2(0.9));\n    \n    fragColor = vec4(p2.xy, 0., 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Collection of functions I use a lot:\n\n#define pi 3.14159\n#define sc 10.\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec2 thc(float a, vec2 b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nvec2 ths(float a, vec2 b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Get \"point\" from Buffer A\n    vec2 p = texelFetch( iChannel0, ivec2(fragCoord), 0 ).xy - 0.5;\n    \n    // Distance from point + strength to smoothstep away from it\n    float d = length(uv-p);\n    float k = mix(0.1, 0.5, 0.5 + 0.5 * thc(3., 0.7 * iTime)) + d;\n\n    // Draw stuff\n    float s = smoothstep(-k, k, -d + 0.);\n    float x = texelFetch( iChannel1, ivec2(fragCoord), 0 ).x;\n    x = 0.95 * clamp(x, 0., 1.);\n    \n    fragColor = vec4(max(x, 2. * s));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}