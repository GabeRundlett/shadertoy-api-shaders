{
    "Shader": {
        "info": {
            "date": "1715978545",
            "description": "This uses a custom font and text engine that I made to display basic numbers. All of this was done by hand (including porting the glyphs from images to hex data). It is currently showing an example using some of shadertoy's uniforms.",
            "flags": 0,
            "hasliked": 0,
            "id": "M333Rr",
            "likes": 10,
            "name": "Rendering Numbers",
            "published": 3,
            "tags": [
                "text",
                "numbers",
                "font",
                "digits"
            ],
            "usePreview": 0,
            "username": "ThePlaneGuy45",
            "viewed": 161
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int iResolution_y_render\n        = number(iResolution.y, 1, 3.0, vec2(10, 10), fragCoord);\n    int iResolution_x_render\n        = number(iResolution.x, 1, 3.0, vec2(10, 52), fragCoord);\n        \n    int iTime_render \n        = number(iTime, 4, 3.0, vec2(10, 136), fragCoord);\n    int iTimeDelta_render \n        = number(iTimeDelta, 4, 3.0, vec2(10, 178), fragCoord);\n        \n    int iFrameRate_render\n        = number(iFrameRate, 4, 3.0, vec2(10, 262), fragCoord);\n    int iFrame_render \n        = number(float(iFrame), 1, 3.0, vec2(10, 304), fragCoord);\n        \n    int iMouse_w_render\n        = number(iMouse.w, 1, 3.0, vec2(10, 388), fragCoord);\n    int iMouse_z_render\n        = number(iMouse.z, 1, 3.0, vec2(10, 430), fragCoord);\n    int iMouse_y_render\n        = number(iMouse.y, 1, 3.0, vec2(10, 472), fragCoord);\n    int iMouse_x_render\n        = number(iMouse.x, 1, 3.0, vec2(10, 514), fragCoord);\n    \n    fragColor = vec4(\n        iResolution_y_render+\n        iResolution_x_render+\n        iTime_render+\n        iTimeDelta_render+\n        iFrame_render+\n        iFrameRate_render+\n        iMouse_w_render+\n        iMouse_z_render+\n        iMouse_y_render+\n        iMouse_x_render\n    );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "uvec4[10] char_numbers = uvec4[10](\n    uvec4(0x7FBFFC0F,0x03C0F33C,0xCF03C0F0,0x3FFDFE00),\n    uvec4(0x1C0F07C3,0xB0CC0300,0xC0300C03,0x0FFFFF00),\n    uvec4(0x7FBFFC0F,0x0301C0E0,0x70381C0E,0x0FFFFF00),\n    uvec4(0x7FBFFC0C,0x0300C3E0,0xF80300F0,0x3FFDFE00),\n    uvec4(0x30DC360F,0x83C0FFFF,0xFC0300C0,0x300C0300),\n    uvec4(0xFFFFFC03,0x00C03FEF,0xFC0300C0,0x3FFFFE00),\n    uvec4(0x7FFFFC03,0x00C03FEF,0xFF03C0F0,0x3FFDFE00),\n    uvec4(0xFFFFF00C,0x070180E0,0x301C0601,0x80601800),\n    uvec4(0x7FBFFC0F,0x03C0DFE7,0xFB03C0F0,0x3FFDFE00),\n    uvec4(0x7FFFFC0F,0x03C0FFF7,0xFC0300C0,0x300C0300)\n);\nuvec4 char_dash = uvec4(0x00000000,0x00003FFF,0xFC000000,0x00000000);\nuvec4 char_period = uvec4(0x00000000,0x00000000,0x00000000,0x00C03000);\n\n\n// usage: glyph(glyphData, scale, offset, fragCoord);\nuint _O(uint v,uint p){return((v<<p)&0x80000000u)>>31;}\nint glyph(uvec4 a,float b,vec2 c,vec2 d){vec2 e=d-c;e/=b;e.y=12.-e.y;if(0.>e.x||e.x>=10.||0.>e.y||e.y>=12.){return 0;}uvec2 f=uvec2(e);uint g=f.x+10u*f.y,h;if(g<32u){h=_O(a.x,g);}else if(g<64u){h=_O(a.y,g-32u);}else if(g<96u){h=_O(a.z,g-64u);}else{h=_O(a.w,g-96u);}return int(h);}\n\n\nint number(in float number, in int places, in float scale, in vec2 pos, in vec2 fragCoord){\n\n    float mx = 12.*scale;\n    int px = 0;\n    \n    if(number < 0.0){\n        px += glyph(char_dash, scale, pos, fragCoord);\n        pos.x += mx;\n        number *= -1.0;\n    }\n    number = round(number * pow(10.0, float(places)));\n    \n    int[20] numlist;\n    int numlistLen = 0;\n    \n    for(; number>=1.0; number /= 10.0) {\n        numlist[numlistLen] = int(mod(number, 10.0));\n        numlistLen++;\n    }\n    \n    if(numlistLen < places+1) {\n        px += glyph(char_numbers[0], scale, pos, fragCoord);\n        pos.x += mx;\n        px += glyph(char_period, scale, pos, fragCoord);\n        pos.x += mx;\n        \n        if(numlistLen < 1) {\n            px += glyph(char_numbers[0], scale, pos, fragCoord);\n            pos.x += mx;\n        }\n    }\n    \n    for(int i = numlistLen-1; i>=0; i--) {\n        px += glyph(char_numbers[numlist[i]], scale, pos, fragCoord);\n        pos.x += mx;\n        \n        if(i==places){\n            px += glyph(char_period, scale, pos, fragCoord);\n            pos.x += mx;\n        }\n    }\n    \n    return px>0?1:0;\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}