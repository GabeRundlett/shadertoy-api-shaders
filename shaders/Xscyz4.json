{
    "Shader": {
        "info": {
            "date": "1517990720",
            "description": "My first shader on Shadertoy! It's pretty dodgy, but it looks kind of cool. :)",
            "flags": 0,
            "hasliked": 0,
            "id": "Xscyz4",
            "likes": 3,
            "name": "Green Field",
            "published": 3,
            "tags": [
                "raytracing",
                "mouse",
                "green",
                "perspective"
            ],
            "usePreview": 0,
            "username": "quadrupleslap",
            "viewed": 589
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535\n\n#define INC 0.01\n#define ESC 50.0\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co, vec2(12.9898,78.233))) * 43758.5453);\n}\n\nbool intersects(in vec3 pos, out vec4 color) {\n    #define WIDTH 0.02\n    \n    vec2 uv = pos.xz;\n    color = vec4(0, 0.75, 0, 1);\n    \n    vec2 lol = fract(pos.xz);\n    vec2 kek = floor(pos.xz);\n    float h;\n    \n    if (max(lol.x, lol.y) <= WIDTH)\n        h = rand(kek);\n    else if (lol.x <= WIDTH)\n        h = mix(rand(kek), rand(kek + vec2(0, 1)), lol.y);\n    else if (lol.y <= WIDTH)\n        h = mix(rand(kek), rand(kek + vec2(1, 0)), lol.x);\n    else\n        return false;\n\n    return abs(h - pos.y) <= WIDTH;\n\n    #undef WIDTH\n}\n\nvec3 ray(in vec3 pos, in vec2 frag) {\n    vec2 uv = frag / iResolution.xy - 0.5;\n\n    vec2 angle = iMouse.xy / iResolution.xy - 0.5;\n    angle.x *= 2.0*PI; // [-PI,   PI  ]\n    angle.y *=     PI; // [-PI/2, PI/2]\n\n    vec3 forwards = vec3(\n        cos(angle.y) * sin(angle.x),\n        sin(angle.y),\n        cos(angle.y) * cos(angle.x));\n    \n    vec3 up = vec3(\n        -sin(angle.y) * sin(angle.x),\n         cos(angle.y),\n        -sin(angle.y) * cos(angle.x));\n    \n    vec3 right = vec3(\n        cos(angle.x),\n    \t0,\n    \t-sin(angle.x));\n    \n    vec3 result = forwards + mat3(right, up, forwards) * vec3(uv.x, uv.y, 0);\n\n    return normalize(result) * INC;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Default color.\n\n    fragColor = vec4(vec3(0), 1);\n\n    // Trace.\n\n    vec3 pos = vec3(0, 3, 8.0 * iTime);\n    vec3 inc = ray(pos, fragCoord);\n    vec4 col;\n    float dst;\n    \n    //NOTE: Assumes that the grid is always below you and its top is at height 1.0.\n    if (inc.y >= 0.0)\n        return;\n    float jump = ((1.0 - pos.y) / inc.y);\n    pos += inc * jump;\n    dst += INC * jump;\n    \n\n    while (dst < ESC) {\n        if (intersects(pos, col)) {\n            fragColor = col;\n            break;\n        }\n        \n        //NOTE: Assumes you're looking down on the grid.\n        if (pos.y <= -INC)\n            return;\n        \n        pos += inc;\n    \tdst += INC;\n    }\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}