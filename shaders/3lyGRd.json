{
    "Shader": {
        "info": {
            "date": "1579974383",
            "description": "Couldn't really find any accurate depictions of the Indian flag here, so decided to lazily doodle one myself for this year's Republic day.",
            "flags": 0,
            "hasliked": 0,
            "id": "3lyGRd",
            "likes": 33,
            "name": "Republic of India Flag",
            "published": 3,
            "tags": [
                "flag"
            ],
            "usePreview": 0,
            "username": "piyushslayer",
            "viewed": 4001
        },
        "renderpass": [
            {
                "code": "/**\n A very lazy and quick doodle of the Indian flag on this year's Indian Republic Day.\n Not the most efficient code, but I think it still looks cool. \n*/\n\n#define PI 3.1415926535\n\n#define ROT(x) mat2(cos(x), -sin(x), sin(x), cos(x))\n\n#define ORANGE vec3(255., 154., 48.) / 255.\n#define GREEN vec3(9., 137, 1.) / 255.\n#define NAVY_BLUE vec3(0., 0., 137.) / 255.\n\n#define RADIUS .7\n#define HALF_RADIUS RADIUS * .5\n\n// Hash by Dave_Hoskins\nfloat hash(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p)) * uvec2(1597334673U, 3812015801U);\n\tuint n = (q.x ^ q.y) * 1597334673U;\n\treturn float(n) / float(0xffffffffU);\n}\n\n// iq's 2d sdf for iscosceles triangles (https://www.shadertoy.com/view/MldcD7)\nfloat isoscelesTriangle(in vec2 q, in vec2 p)\n{\n    p.y -= .5;\n    p.x = abs(p.x);\n    \n\tvec2 a = p - q * clamp(dot(p, q) / dot(q, q), 0., 1.);\n    vec2 b = p - q * vec2(clamp(p.x / q.x, 0., 1.), 1.);\n    \n    float s = -sign(q.y);\n\n    vec2 d = min(vec2(dot(a, a), s * (p.x * q.y - p.y * q.x)),\n                  vec2(dot(b, b), s * (p.y - q.y)));\n\n\treturn -sqrt(d.x) * sign(d.y);\n}\n\n// Probably not the best way to model the chakra, would have used the abs\n// mirroring technique to efficiently draw it, but since it's a lazy and quick\n// doodle so I said whatever, it doesn't matter either way.\nfloat getChakra(vec2 uv)\n{\n\tfloat outerCircle = smoothstep(.01, -.01, abs(length(uv) - RADIUS - .22) - .06);\n    float innerCircle = smoothstep(.22, .20, length(uv));\n    float spokes = 0., spokeThickness = .03, notches = 0., theta = 2. * PI / 24.;\n    for (int i = 0; i < 24; ++i)\n    {\n        vec2 suv = ROT(float(i) * theta) * uv;\n        // shorter inward pointing triangle\n        suv.y += HALF_RADIUS;\n        spokes += smoothstep(.015, -.015,\n\t\t\t\t\tisoscelesTriangle(vec2(spokeThickness, RADIUS * .334), suv));\n        // longer outward pointing triangle\n        suv.y -= RADIUS + .0025;\n        spokes += smoothstep(.015, -.015,\n\t\t\t\t\tisoscelesTriangle(vec2(spokeThickness, -RADIUS * .666), suv));\n        \n        // boundary notches\n\t\tvec2 nuv = ROT(float(i) * theta + theta * .5) * uv;\n        nuv.y -= RADIUS + .16;\n        notches += smoothstep(.04, .032, length(nuv));\n    }\n    \n    float chakra = notches + innerCircle + outerCircle + spokes;\n    return clamp(chakra, 0., 1.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec2 st = fragCoord / iResolution.xy;\n\tfloat w = sin((uv.x + uv.y - iTime * .75 + sin(1.5 * uv.x + 4.5 * uv.y) * PI * .3)\n                  * PI * .6); // fake waviness factor\n    \n    uv *= 1. + (.036 - .036 * w);\n    vec3 col = vec3(0.);\n    \n    // flag colors\n    col += 1.;\n    col = mix(col, ORANGE, smoothstep(.35, .36, uv.y));\n    col = mix(col, GREEN, smoothstep(-.35, -.36, uv.y));\n    col = mix(col, NAVY_BLUE, getChakra(uv * 3.2));\n    col += w * .225;\n    \n    float v = 16. * st.x * (1. - st.x) * st.y * (1. - st.y); // vignette\n\tcol *= 1. - .6 * exp2(-1.75 * v);\n    col = clamp(col - hash(fragCoord) * .004, 0., 1.);\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}