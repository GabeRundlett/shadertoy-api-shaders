{
    "Shader": {
        "info": {
            "date": "1549672460",
            "description": "Torus Knots, knots drawn on the surface of a 4D torus, raymarched and stereographically projected into R3.",
            "flags": 48,
            "hasliked": 0,
            "id": "tsBGzt",
            "likes": 22,
            "name": "Torus Knot in R4",
            "published": 3,
            "tags": [
                "torus",
                "stereographic",
                "knot",
                "r4",
                "hypersphere"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 662
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Shows a p,q torus knot, represented as an complex isosurface of the (complex)\n// function f(z,w) = z^p - w^q, intersected with the R4 hypersphere, then\n// stereographically projected into R3.\n\n// <mouse>: change view\n// <up/down>: zoom in/out\n// <page up/page down>: change axis of rotation\n// 'a': show/hide coordinate axes\n// 'g': show R4 coordinate grid\n// 'v': vary the length parameter of the distance function\n//\n// Uncomment #define of DEBUG to see distance field.\n//\n// Modification by Matthew Arcus of tdhooper's https://www.shadertoy.com/view/wsfGDS\n//\n////////////////////////////////////////////////////////////////////////////////\n\n//#define DEBUG\n\nconst float ITER = 200.0;\nconst float MAX_DIST = 100.0;\nconst float FOG_START = 50.0;\n\n// Wind P and Q times round the torus.\n// Have gcd(P,Q) components, so just 1 if P,Q\n// coprime. 2,3 is basic trefoil knot, 3,3 is\n// 3 linked toruses.\n\n//const int P = 2, Q = 3; float tradius = 0.7;\n//const int P = 5, Q = 3; float tradius = 0.5;\nconst int P = 5, Q = 3; float tradius = 0.4;\n\nbool alert = false;\n\nvoid assert(bool t) {\n  if (!t) alert = true;\n}\n\nbool eq(float x, float y) {\n  return abs(x-y) < 1e-4;\n}\n\n#define PI 3.14159265359\n\nconst int CHAR_0 = 48;\nconst int CHAR_A = 65;\nconst int CHAR_C = 67;\nconst int CHAR_G = 71;\nconst int CHAR_T = 84;\nconst int CHAR_V = 86;\nconst int KEY_PAGE_UP = 33;\nconst int KEY_PAGE_DOWN = 34;\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\n\nbool keypress(int code) {\n  return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n}\n\nvec4 store(int i,int j) {\n  return texelFetch(iChannel1, ivec2(i,j),0);\n}\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\nvec2 rotate(vec2 p, float t) {\n  return p * cos(t) + vec2(p.y, -p.x) * sin(t);\n}\n\nfloat smax(float a, float b, float r) {\n  vec2 u = max(vec2(r + a,r + b), vec2(0));\n  return min(-r, max (a, b)) + length(u);\n}\n\nvec2 cexp(vec2 z) {\n  // If cos and sin were perfect we wouldn't need normalize\n  return exp(z.x)*normalize(vec2(cos(z.y),sin(z.y)));\n}\n\nvec2 cmul(vec2 z, vec2 w) {\n  return vec2(z.x*w.x-z.y*w.y, z.x*w.y+z.y*w.x);\n}\n\nvec2 cpow(vec2 z, int n) {\n  vec2 z0 = z;\n  for (int i = 1; i < n; i++) z = cmul(z,z0);\n  return z;\n}\n\nvec2 clog(vec2 z) {\n  float r2 = dot(z,z);\n  return vec2(0.5*log(r2),atan(z.y,z.x));\n}\n\nvec2 cpow(vec2 w, vec2 z) {\n  return cexp(cmul(z,clog(w)));\n}\n\nvec2 cpow(vec2 z, float x) {\n  float r = dot(z,z);\n  float theta = atan(z.y,z.x);\n  return pow(r,0.5*x)*normalize(vec2(cos(x*theta),sin(x*theta)));\n}\n\n// --------------------------------------------------------\n// Main SDF\n// --------------------------------------------------------\n\n// Stereographic projection of p, by inversion.\n// k is scale factor\nvec4 stereographic(vec4 p, out float k) {\n  p.w += 1.0;\n  k = 2.0/dot(p,p);\n  p *= k;\n  p.w -= 1.0;\n  return p;\n}\n\n\nfloat eval(vec4 p) {\n  // \"Distance\" from z^p - w^q = 0, so intersected with z²+w² = 1 (hypersphere)\n  \n  vec2 z0 = p.xy, w0 = p.zw;\n  vec2 z = cpow(z0,P), w = cpow(w0,Q);\n  //w -= w0;\n  //z -= z0; // for more fun\n  return length(z-w);\n}\n\nfloat fTorus(vec4 p, float k) {\n  float fp = eval(p);\n#if 1\n  float eps = 1e-3;\n  vec2 e = vec2(eps,0);\n  // Numeric gradient.\n  // Should be able to do this analytically\n  vec4 grad = vec4(eval(p+e.xyyy)-fp,  \n                   eval(p+e.yxyy)-fp,\n                   eval(p+e.yyxy)-fp,\n                   eval(p+e.yyyx)-fp)/eps;\n#else\n  vec4 grad = vec4(float(P)*cpow(p.xy,P-1),\n                   float(Q)*cpow(p.zw,Q-1));\n#endif\n  // Use abs here \n  return abs(fp-k)/length(grad);\n\n#if 0\n  // Torus distance\n  // Distance from surface x^2 + y^2 = 0.5\n  float d = k-length(p.xy);\n  //float d = length(p.zw)-k;\n  return d;\n#endif\n}\n\nbool hitDebugTorus = false;\nbool hitDebugPlane = false;\n\nvec4 qmul(vec4 p, vec4 q) {\n  return vec4(cross(p.xyz,q.xyz)+p.w*q.xyz+q.w*p.xyz,\n              p.w*q.w-dot(p.xyz,q.xyz));\n}\n\nvec4 quat;\n\nbool docentre = false;\nbvec4 doelement = bvec4(true);\n\nfloat torus(vec4 p4, vec3 p, float k) {\n  return fTorus(p4,k);\n}\n\nint type = -1;\n\nfloat map(vec3 p) {\n  float k;\n  vec4 p4 = stereographic(vec4(p,0),k);\n\n  // Do a one sided quaternion rotation, otherwise known\n  // as a Clifford Translation, which seems appropriate.\n  p4 = qmul(p4,quat);\n\n  float d = 1e8;\n  type = -1;\n  if (doelement[0]) {\n    float d0 = d;\n    d = min(d,torus(p4.xyzw,p,tradius));\n    if (d < d0) type = 0;\n  }\n  if (doelement[1]) {\n    float d0 = d;\n    d = min(d,torus(p4.xzyw,p,tradius));\n    if (d < d0) type = 1;\n  }\n  if (doelement[2]) {\n    float d0 = d;\n    d = min(d,torus(p4.xwyz,p,tradius));\n    if (d < d0) type = 2;\n  }\n  if (doelement[3]) {\n    float lwidth = 0.02;\n    float d0 = d;\n    d = min(d,length(p4.xy)-lwidth);\n    d = min(d,length(p4.xz)-lwidth);\n    d = min(d,length(p4.xw)-lwidth);\n    d = min(d,length(p4.yz)-lwidth);\n    d = min(d,length(p4.yw)-lwidth);\n    d = min(d,length(p4.zw)-lwidth);\n    if (d < d0) type = 3;\n  }\n  return d/k;\n}\n\nfloat mapDebug(vec3 p) {\n  float d = map(p);\n#ifndef DEBUG\n  return d;\n#endif\n  float plane = min(abs(p.z), abs(p.y));\n  hitDebugPlane = plane < abs(d);\n  return hitDebugPlane ? plane : d;\n}\n\n\n// --------------------------------------------------------\n// Rendering\n// --------------------------------------------------------\n\nvec3 calcNormal(vec3 p, float raylength) {\n  vec3 eps = vec3(.0001*raylength,0,0);\n  vec3 n = vec3(\n                map(p + eps.xyy) - map(p - eps.xyy),\n                map(p + eps.yxy) - map(p - eps.yxy),\n                map(p + eps.yyx) - map(p - eps.yyx)\n                );\n  return normalize(n);\n}\n\nmat3 calcLookAtMatrix(vec3 ro, vec3 ta, vec3 up) {\n  vec3 ww = normalize(ta - ro);\n  vec3 uu = normalize(cross(ww,up));\n  vec3 vv = normalize(cross(uu,ww));\n  return mat3(uu, vv, ww);\n}\n\nvec3 transform(in vec3 p) {\n  if (iMouse.x > 0.0) {\n    float theta = (2.0*iMouse.y-iResolution.y)/iResolution.y*PI;\n    float phi = (2.0*iMouse.x-iResolution.x)/iResolution.x*PI;\n    p.yz = rotate(p.yz,theta);\n    p.zx = rotate(p.zx,-phi);\n  }\n  return p;\n}\n\nvec3 hsv2rgb(float h, float s, float v) {\n  vec3 rgb = clamp( abs(mod(h*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing       \n  return v * mix( vec3(1.0), rgb, s);\n}\n\nvec3 axes[] = vec3[] (vec3(1,0,0),  \n                      vec3(0,1,0),\n                      vec3(0,0,1),\n                      vec3(1,1,0),\n                      vec3(1,0,1),\n                      vec3(0,1,1),\n                      vec3(1,1,1));\n\nvec3 getcolor(int type) {\n  vec3 color = vec3(0);\n  if (type == 3) color = vec3(1,0,0);\n  else color = hsv2rgb(float(type)/3.0 + 0.0*iTime,0.2,0.8);\n  return color;\n}\n\nvec3 gridcolor(int type) {\n  return hsv2rgb(float(type)/4.0 ,0.6,0.4);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  docentre = false;\n  doelement[0] = true;\n  doelement[1] = false;\n  doelement[2] = false;\n  doelement[3] = !keypress(CHAR_A);\n  \n  vec3 light = normalize(vec3(1,.5,0));\n  vec3 camPos = vec3(1.8, 5.5, -5.5);\n  vec3 camTar = vec3(.1,0,.1);\n  vec3 camUp = vec3(-1,0,-1.5);\n\n  mat3 camMat = calcLookAtMatrix(camPos, camTar, camUp);\n  \n  float focalLength = 2.5;\n  vec3 p = vec3(2.0*(-iResolution.xy + 2. * fragCoord.xy) / iResolution.y, focalLength);\n  p = transform(p);\n  vec3 rayDirection = normalize(camMat * p);\n\n  float camera = 4.0;\n  camera *= 0.1*float(10+keycount(KEY_DOWN)-keycount(KEY_UP));\n  vec3 rayOrigin = vec3(0,0,-camera);\n  rayOrigin = transform(rayOrigin);\n  rayOrigin = camMat * rayOrigin;\n\n  light = transform(light);\n  light = camMat * light;\n  \n  vec3 rayPosition = rayOrigin;\n  float rayLength = 0.0;\n\n  float distance = 0.0;\n  vec3 color = vec3(0);\n  int aindex = keycount(KEY_PAGE_UP)-keycount(KEY_PAGE_DOWN);\n\n  aindex %= axes.length();\n  if (aindex < 0) aindex += axes.length();\n  vec3 axis = normalize(axes[aindex]);\n  float t = iTime;\n  quat = normalize(vec4(-sin(0.1*PI*t)*axis,cos(0.1*PI*t)));\n\n  if (keypress(CHAR_V)) tradius = 0.5+0.5*sin(0.2*iTime);\n  \n  for (float i = 0.; i < ITER; i++) {\n    if (distance > 1.0) distance *= 0.5;\n    else distance *= 0.8;\n    rayLength += distance;\n    rayPosition = rayOrigin + rayDirection * rayLength;\n    distance = mapDebug(rayPosition);\n\n    if (distance/rayLength < .001) break;\n    if (rayLength > MAX_DIST) break;\n  }\n  float k;\n\n  vec3 normal = calcNormal(rayPosition,rayLength);\n  map(rayPosition); // get type\n  color = getcolor(type);\n  if (type != 3 && !keypress(CHAR_G)) {\n    vec4 p4 = stereographic(vec4(rayPosition,0),k);\n    p4 = qmul(p4,quat);\n    p4 *= 8.0;\n    p4 = mod(p4,2.0);\n    p4 = min(p4,2.0-p4);\n    float d = p4.x;\n    int type = 0;\n    if (p4.y < d) { d = p4.y; type = 1; }\n    if (p4.z < d) { d = p4.z; type = 2; }\n    if (p4.w < d) { d = p4.w; type = 3; }\n    //float edge = min(min(p4.x,p4.y),min(p4.z,p4.w));\n    color = mix(gridcolor(type),color,smoothstep(0.1,0.125,d));;\n  }\n  color *= clamp(dot(light, normal),0.0,1.0) * .8 + .2;\n  color += pow(clamp(dot(rayDirection,reflect(light,normal)),0.0,1.0),10.0);\n\n#if defined DEBUG\n  if (hitDebugPlane) {\n    float l = PI*length(rayPosition);\n    float d = PI*map(rayPosition);\n    color = 0.25*vec3(0,1.0+sin(20.0*d),1.0+sin(20.0*l));\n  }\n#else\n  float fog = pow(smoothstep(FOG_START, MAX_DIST, rayLength), 1.0);\n  color = mix(color, vec3(0), fog);\n  color *= mix(1., .025, fog);\n#endif\n\n  color = pow(color, vec3(1. / 2.2)); // Gamma\n  if (alert) color.x = 1.0;\n  fragColor = vec4(color, 1);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n#if __VERSION__ < 300\n    t = vec4(0);\n#else\n    \n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0 ) {\n        t = vec4(0);\n    } else {\n        t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n        \n#endif           \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}