{
    "Shader": {
        "info": {
            "date": "1602954440",
            "description": "Modified https://www.shadertoy.com/view/WlSXRW to support bigger radius.\nI will use it in an upcoming shader.\nI wanted to have a cube to morph in a sphere in raytracing, I wasn't able to it with the unmodified code :(\nYou can use the mouse to compare.",
            "flags": 0,
            "hasliked": 0,
            "id": "wsyyWw",
            "likes": 8,
            "name": "Rounded Box - intersection (Fix)",
            "published": 3,
            "tags": [
                "3d",
                "intersection",
                "fixed",
                "roundedcube"
            ],
            "usePreview": 1,
            "username": "xjorma",
            "viewed": 508
        },
        "renderpass": [
            {
                "code": "//Little Modification by David Gallardo / Xjorma 2020   (MIT License)\n\n\n// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Intersection of a ray with a rounded box, testing a single\n// corner (sphere) instead of 8, and only 3 edges (cylinders)\n// instead of 12. There might be a more compact and efficient\n// way to do it, but this is where I landed. However the code\n// to compute the surface normal is particularly elegant.\n//\n// It only works if the corner spheres don't overlap, ie, if\n// the raius is smaller than half the size of the base box.\n\n// Other intersectors: https://iquilezles.org/articles/intersectors\n//\n// Box:             https://www.shadertoy.com/view/ld23DV\n// Triangle:        https://www.shadertoy.com/view/MlGcDz\n// Capsule:         https://www.shadertoy.com/view/Xt3SzX\n// Ellipsoid:       https://www.shadertoy.com/view/MlsSzn\n// Sphere:          https://www.shadertoy.com/view/4d2XWV\n// Capped Cylinder: https://www.shadertoy.com/view/4lcSRn\n// Disk:            https://www.shadertoy.com/view/lsfGDB\n// Capped Cone:     https://www.shadertoy.com/view/llcfRf\n// Rounded Box:     https://www.shadertoy.com/view/WlSXRW\n// Rounded Cone:    https://www.shadertoy.com/view/MlKfzm\n// Torus:           https://www.shadertoy.com/view/4sBGDy\n// Sphere4:         https://www.shadertoy.com/view/3tj3DW\n// Goursat:         https://www.shadertoy.com/view/3lj3DW\n// Hexagonal Prism: https://www.shadertoy.com/view/tljBWy\n\n\n#define AA 2  // reduce this to 1 if you have a slow machine\n\n// intersect capsule : https://iquilezles.org/articles/intersectors\nfloat capIntersect( in vec3 ro, in vec3 rd, in vec3 pa, in vec3 pb, in float r )\n{\n    vec3  ba = pb - pa;\n    vec3  oa = ro - pa;\n\n    float baba = dot(ba,ba);\n    float bard = dot(ba,rd);\n    float baoa = dot(ba,oa);\n    float rdoa = dot(rd,oa);\n    float oaoa = dot(oa,oa);\n\n    float a = baba      - bard*bard;\n    float b = baba*rdoa - baoa*bard;\n    float c = baba*oaoa - baoa*baoa - r*r*baba;\n    float h = b*b - a*c;\n    if( h>=0.0 )\n    {\n        float t = (-b-sqrt(h))/a;\n\n        float y = baoa + t*bard;\n        \n        // body\n        if( y>0.0 && y<baba ) return t;\n\n        // caps\n        vec3 oc = (y<=0.0) ? oa : ro - pb;\n        b = dot(rd,oc);\n        c = dot(oc,oc) - r*r;\n        h = b*b - c;\n        if( h>0.0 )\n        {\n            return -b - sqrt(h);\n        }\n    }\n    return -1.;\n}\n\n// intersect a ray with a rounded box\n// https://iquilezles.org/articles/intersectors\n// Modified to support bigger radius, probably more optimal solution, but was too lazy nor as good as IQ :(\n// I kept the -1 for no collision paradigm even if I hate it (Make the code more complex), but I prefered to stay compatible with IQ interface.\nfloat roundedboxIntersect2( in vec3 ro, in vec3 rd, in vec3 size, in float rad )\n{\n    \n\t// bounding box\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*(size+rad);\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\tif( tN > tF || tF < 0.0) return -1.0;\n    float t = tN;\n\n    // convert to first octant\n    vec3 pos = ro+t*rd;\n    vec3 s = sign(pos);\n    ro  *= s;\n    rd  *= s;\n    pos *= s;\n        \n    // faces\n    pos -= size;\n    pos = max( pos.xyz, pos.yzx );\n    if( min(min(pos.x,pos.y),pos.z)<0.0 ) return t;\n  \n  \t// fat edges\n    float d;\n    d = capIntersect(ro, rd, size * vec3(-1, 1, 1), size, rad);\n    t = d > 0. ? d : 1e20;\n    d = capIntersect(ro, rd, size * vec3( 1,-1, 1), size, rad);\n    t = min(d > 0. ? d : 1e20, t);    \n    d = capIntersect(ro, rd, size * vec3( 1, 1,-1), size, rad);\n    t = min(d > 0. ? d : 1e20, t);    \n\n    if( t>1e19 ) t=-1.0;\n    \n\treturn t;\n}\n\n\n\n// intersect a ray with a rounded box\n// https://iquilezles.org/articles/intersectors\nfloat roundedboxIntersect( in vec3 ro, in vec3 rd, in vec3 size, in float rad )\n{\n\t// bounding box\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*(size+rad);\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\tif( tN > tF || tF < 0.0) return -1.0;\n    float t = tN;\n\n    // convert to first octant\n    vec3 pos = ro+t*rd;\n    vec3 s = sign(pos);\n    ro  *= s;\n    rd  *= s;\n    pos *= s;\n        \n    // faces\n    pos -= size;\n    pos = max( pos.xyz, pos.yzx );\n    if( min(min(pos.x,pos.y),pos.z)<0.0 ) return t;\n\n    // some precomputation\n    vec3 oc = ro - size;\n    vec3 dd = rd*rd;\n\tvec3 oo = oc*oc;\n    vec3 od = oc*rd;\n    float ra2 = rad*rad;\n\n    t = 1e20;        \n\n    // corner\n    {\n    float b = od.x + od.y + od.z;\n\tfloat c = oo.x + oo.y + oo.z - ra2;\n\tfloat h = b*b - c;\n\tif( h>0.0 ) t = -b-sqrt(h);\n    }\n\n    // edge X\n    {\n\tfloat a = dd.y + dd.z;\n\tfloat b = od.y + od.z;\n\tfloat c = oo.y + oo.z - ra2;\n\tfloat h = b*b - a*c;\n\tif( h>0.0 )\n    {\n\t  h = (-b-sqrt(h))/a;\n      if( h>0.0 && h<t && abs(ro.x+rd.x*h)<size.x ) t = h;\n    }\n\t}\n    // edge Y\n    {\n\tfloat a = dd.z + dd.x;\n\tfloat b = od.z + od.x;\n\tfloat c = oo.z + oo.x - ra2;\n\tfloat h = b*b - a*c;\n\tif( h>0.0 )\n    {\n\t  h = (-b-sqrt(h))/a;\n      if( h>0.0 && h<t && abs(ro.y+rd.y*h)<size.y ) t = h;\n    }\n\t}\n    // edge Z\n    {\n\tfloat a = dd.x + dd.y;\n\tfloat b = od.x + od.y;\n\tfloat c = oo.x + oo.y - ra2;\n\tfloat h = b*b - a*c;\n\tif( h>0.0 )\n    {\n\t  h = (-b-sqrt(h))/a;\n      if( h>0.0 && h<t && abs(ro.z+rd.z*h)<size.z ) t = h;\n    }\n\t}\n\n    if( t>1e19 ) t=-1.0;\n    \n\treturn t;\n}\n\n// normal of a rounded box\nvec3 roundedboxNormal( in vec3 pos, in vec3 siz, in float rad )\n{\n    return sign(pos)*normalize(max(abs(pos)-siz,0.0));\n}\n\n\n//======================================================\n\n\n\n\n// rotation matrix\nmat4 rotate( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\n// transform points and vectors\nvec3 ptransform( in mat4 mat, in vec3 v ) { return (mat*vec4(v,1.0)).xyz; }\nvec3 ntransform( in mat4 mat, in vec3 v ) { return (mat*vec4(v,0.0)).xyz; }\n\n// texture sampling\nvec4 boxmap( sampler2D sam, in vec3 p, in vec3 n )\n{\n    vec3 m = n*n; m=m*m; m=m*m;\n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n\treturn (x*m.x + y*m.y + z*m.z)/(m.x+m.y+m.z);\n}\n\n//======================================================\n\n// putting these in a \"box\" struct leads to precision problems\n// on Android... :(\nmat4  box_world_to_obj;\nmat4  box_obj_to_world;\nvec3  box_size;\nfloat box_radius;\nbool  side;\n\nvec2 intersect( in vec3 ro, in vec3 rd )\n{\n    vec2 res = vec2(1e20,-1.0);\n    \n    // plane\n    {\n        float t = (-1.0-ro.y)/rd.y;\n        if( t>0.0 ) res = vec2(t,1.0);\n    }\n\n    // rounded box\n    {\n        // convert ray from world to box space\n        vec3 rdd = ntransform(box_world_to_obj, rd );\n        vec3 roo = ptransform(box_world_to_obj, ro );\n        // intersect in box space\n        float t;\n        if(side)\n        {\n        \tt = roundedboxIntersect(roo,rdd,box_size,box_radius);\n        }\n        else\n        {\n        \tt = roundedboxIntersect2(roo,rdd,box_size,box_radius);\n        }\n        if( t>0.0 && t<res.x ) res = vec2(t,2.0);\n    }\n    \n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera movement\t\n    float an = 0.15*(iTime-10.0);\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    vec3 ro = ta + vec3( 2.0*cos(an), 0.2, 2.0*sin(an) );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.6,8.0,0.0) ) );\n    vec3 vv =          ( cross(uu,ww));\n\n    // rounded box animation\n    box_obj_to_world = \n                       rotate( normalize(vec3(1.0,1.0,0.1)), iTime ); \n    box_world_to_obj = inverse( box_obj_to_world );\n    box_size = vec3((-cos(iTime) + 1.) * 0.5) * 0.75;\n    box_radius = (cos(iTime) + 1.) * 0.5 *.75;\n    side = fragCoord.x < iMouse.x;\n\n    // render\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        #else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        #endif\n    \n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.6*ww );\n\n        // sky\n        vec3 col = vec3(0.6,0.75,0.85) - 0.97*rd.y;\n\n        // raymarch geometry\n        vec2 tm = intersect( ro, rd );\n        if( tm.y>0.0 )\n        {\n            // shading\n            vec3 pos = ro + tm.x*rd;\n            vec3 nor;\n            vec3 mate;\n            \n            if( tm.y<1.5 ) // floor\n            {\n                nor = vec3(0.0,1.0,0.0);\n                mate = 0.35*texture( iChannel0, 0.2*pos.xz ).xyz;\n            }\n            else // rounded box\n            {\n                // convert position from world to box space\n                vec3 bpos = ptransform(box_world_to_obj,pos);\n                // compute normal in box space\n                vec3 bnor = roundedboxNormal(bpos,box_size,box_radius);\n                // convert normal from box to world space\n                nor = ntransform(box_obj_to_world,bnor);\n                // sample texture\n                mate = 0.35*boxmap( iChannel0, bpos, bnor ).xyz;\n            }\n            \n            // lighting\n            vec3  lig = normalize(vec3(0.8,0.4,-0.6));\n            float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n            vec3  hal = normalize(lig-rd);\n            float sha = step( intersect( pos+0.01*nor, lig ).y, 0.0 );\n            float amb = 0.6 + 0.4*nor.y;\n            float bou = clamp(0.3-0.7*nor.y,0.0,1.0);\n            float spe = clamp(dot(nor,hal),0.0,1.0);\n            col  = 4.0*vec3(1.00,0.80,0.60)*dif*sha;\n            col += 2.0*vec3(0.20,0.30,0.40)*amb;\n            col += 2.0*vec3(0.30,0.20,0.10)*bou;\n\t\t\tcol *= mate;            \n            col += 0.3*pow(spe,8.0)*dif*sha*(0.04+0.96*pow(clamp(dot(lig,hal),0.0,1.0),5.0));\n            col = mix( col, vec3(0.6,0.7,0.8), 1.0-exp(-0.001*tm.x*tm.x) );           \n        }\n        \n        // vignetting        \n        col *= 1.0 - 0.1*dot(p,p);\n\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    // gamma\n    tot = pow( tot, vec3(0.45) );\n    \n\t// grading\n    tot = clamp(tot,0.0,1.0);\n    tot = tot*tot*(3.0-2.0*tot);\n    \n    tot = mix(tot, vec3(1,0,0),max(0.,1. - abs(iMouse.x - fragCoord.x) / 2.));\n\n    fragColor = vec4( tot, 1.0 );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}