{
    "Shader": {
        "info": {
            "date": "1724260110",
            "description": "Auroras",
            "flags": 32,
            "hasliked": 0,
            "id": "XcffRj",
            "likes": 8,
            "name": "Auroras 2D",
            "published": 3,
            "tags": [
                "auroras"
            ],
            "usePreview": 0,
            "username": "misterprada",
            "viewed": 319
        },
        "renderpass": [
            {
                "code": "vec4 zoomBlur(sampler2D tex, vec2 uv, vec2 resolution, vec2 center, float strength, int samples) {\n    vec4 color = vec4(0.0);\n    vec2 direction = uv - center;\n    float total = 0.0;\n\n    for (int i = 0; i < samples; i++) {\n        float t = float(i) / float(samples - 1);\n        vec2 offset = direction * t * strength / resolution;\n        color += texture(tex, uv + offset);\n        total += 1.0;\n    }\n\n    color /= total;\n    return color;\n}\n\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define UVSCALE 100.\n\nvec2 hash2d(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.xy / iResolution.xy);\n  \n    \n    vec4 zoom1 = zoomBlur(iChannel0, uv, iChannelResolution[0].xy, vec2(0.5, 1.9), 40., 20); // blue\n    vec4 zoom2 = zoomBlur(iChannel0, vec2(uv.x, uv.y), iChannelResolution[0].xy, vec2(0.5, 2.0), 60., 30); // purpure\n    vec4 zoom3 = zoomBlur(iChannel0, vec2(uv.x, uv.y - 0.03), iChannelResolution[0].xy, vec2(0.5, 2.0), 30., 30); // red\n    \n    vec3 colorizeBuffer_1 = mix( vec3(0.765,0.965,0.035), zoom1.rgb, 1.9);\n    colorizeBuffer_1 = smoothstep(0.0, 1.4, colorizeBuffer_1 * 0.4);\n    colorizeBuffer_1 = mix(colorizeBuffer_1, vec3(0.639,0.675,0.941), colorizeBuffer_1);\n    \n    vec3 colorizeBuffer_2 = mix( vec3(0.020,1.000,0.133), zoom2.rgb, 1.3);\n    colorizeBuffer_2 = smoothstep(0.0, 1.2, colorizeBuffer_2 * 0.5);\n    colorizeBuffer_2 = mix(colorizeBuffer_2, vec3(0.851,0.188,0.643), colorizeBuffer_2);\n    \n    vec3 colorizeBuffer_3 = mix( vec3(0.020,1.000,0.133), zoom3.rgb, 1.3);\n    colorizeBuffer_3 = smoothstep(0.0, 1.2, colorizeBuffer_3 * 0.3);\n    colorizeBuffer_3 = mix(colorizeBuffer_3, vec3(1.000,0.000,0.000), colorizeBuffer_3);\n    \n    vec3 finalColor = colorizeBuffer_1 + colorizeBuffer_2 + colorizeBuffer_3;\n   \n    fragColor = vec4(finalColor, 1.0);\n    \n    \n    vec3 col = vec3(0.0);\n    \n    for(int i = 0; i < 8; i++)\n    {\n\n        //remap mouse coords. \n        vec2 mouseCoords = vec2(1.0, 1.0);\n\n        //calculate a value to multiply UVs by to guarantee square cell shapes.\n        float screenRatio = iResolution.x/iResolution.y;\n        vec2 ratioScale = vec2(1.0 * screenRatio, 1);\n        vec2 uvScale = vec2(float(i)*1.0 + UVSCALE);\n        vec2 uv = (fragCoord * ratioScale / iResolution.xy) * uvScale;\n\n       // get random 2d cell noise\n        vec2 CellUVs = floor(uv + float(i * 1199));\n        vec2 hash = (hash2d(CellUVs) * 2.0 - 1.0) * mouseCoords.x * 2.0;\n        float hash_magnitude =(1.0-length(hash));\n\n        // calculate uv cell grid.\n        vec2 UVgrid = fract(uv) - 0.5;\n\n        //\n        float radius = clamp(hash_magnitude - 0.5, 0.0, 1.0);\n        float radialGradient = length(UVgrid - hash) / radius;\n        radialGradient = clamp(1.0 - radialGradient, 0.0, 1.0);\n        radialGradient *= radialGradient;\n\n\n        col += vec3(radialGradient);\n    }\n    col = mix( vec3(0.227,0.373,0.714), col, uv.y / 3.0 + 0.4);\n    col = mix( vec3(0.0), col, uv.y + 0.2);\n \n    \n    // Output to screen\n    fragColor = vec4(col + finalColor,1.0);     \n    fragColor = tanh(fragColor); // dirty toneMapping\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec4 permute_3d(vec4 x){ return mod(((x*34.0)+1.0)*x, 289.0); }\nvec4 taylorInvSqrt3d(vec4 r){ return 1.79284291400159 - 0.85373472095314 * r; }\n\nfloat simplexNoise3d(vec3 v)\n{\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //  x0 = x0 - 0. + 0.0 * C\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n    // Permutations\n    i = mod(i, 289.0 );\n    vec4 p = permute_3d( permute_3d( permute_3d( i.z + vec4(0.0, i1.z, i2.z, 1.0 )) + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))  + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients\n    // ( N*N points uniformly over a square, mapped onto an octahedron.)\n    float n_ = 1.0/7.0; // N=7\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    // Normalise gradients\n    vec4 norm = taylorInvSqrt3d(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat fbm3d(vec3 x, const in int it) {\n    float v = 0.0;\n    float a = 0.5;\n    vec3 shift = vec3(100);\n\n    \n    for (int i = 0; i < 32; ++i) {\n        if(i<it) {\n            v += a * simplexNoise3d(x);\n            x = x * 2.0 + shift;\n            a *= 0.5;\n        }\n    }\n    return v;\n}\n\nvec3 colorize(float t) {\n    t = clamp(0.0, 1.0, t);\n    \n    if (t < 0.5) {\n        // black to white\n        return mix(vec3(0.0), vec3(1.0), t * 2.0);\n    } else {\n        // white to black\n        return mix(vec3(1.0), vec3(0.0), (t - 0.5) * 2.0);\n    }\n}\n\nvec2 applyPerspective(vec2 uv, float intensity) {\n    float factor = 1.0 / (1.0 + uv.y * intensity);\n    uv.x = (uv.x - 0.5) * factor + 0.5;\n    uv.y = (uv.y - 0.5) * factor + 0.5;\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1) and (from -1 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uvOrigin = uv;\n    \n    uv = applyPerspective(vec2(uv.x, uv.y + 0.6), 1.3);\n\n    vec3 finalColor;\n    vec3 color = vec3(uv.xy, iTime * 0.02);\n    \n    float frequency = 1.5;\n    float distortion = 0.5;\n    \n    vec3 noiseColor;\n    noiseColor.x = fbm3d(color * frequency + 0.0, 10) + distortion;\n    noiseColor.y = fbm3d(color * frequency + 1.0, 10) + distortion;\n    noiseColor.z = fbm3d(color * frequency + 2.0, 10) + distortion;\n    \n    vec3 colorizeColor = vec3( colorize(noiseColor.x) );\n    vec3 curveColor = smoothstep(0.8, 1.1, colorizeColor);\n    vec3 blendGradientColor = mix(curveColor, vec3(0.0), -uv.y * 1.3);\n        \n    finalColor = blendGradientColor;\n    \n    // Output\n    fragColor = vec4(finalColor, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}