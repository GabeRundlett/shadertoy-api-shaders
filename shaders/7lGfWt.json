{
    "Shader": {
        "info": {
            "date": "1665429880",
            "description": "Beep's and boop's surfin' on the electric slide",
            "flags": 0,
            "hasliked": 0,
            "id": "7lGfWt",
            "likes": 45,
            "name": "Funky Motherboard Carpet",
            "published": 3,
            "tags": [
                "abstract",
                "pattern"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 742
        },
        "renderpass": [
            {
                "code": "\n// Funky Motherboard Carpet\n//\n// What's actually happens when pixels meet, hardwary speaking\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    \n    // coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = 2.*(fragCoord*2.-iResolution.xy)/iResolution.y;\n    \n    // common parameters\n    float thin = .1;\n    float glow = .01;\n    float delay = 10.;\n    \n    // grid\n    float cell = 4.0;\n    vec2 pp = floor(uv*cell)/cell;\n\n    // random seed per cell grid\n    float seed = hash13(vec3(pp, floor(iTime/delay))) * 196.;\n    \n    // random parameters per cell grid\n    vec3 rng = hash31(seed);\n    vec3 rng2 = hash31(seed+1096.);\n    float size = mix(.01, .2, rng2.z);\n    vec2 range = mix(vec2(.2), vec2(.8), rng.xy);\n    float rangeY = mix(.1, .2, rng.z);\n    float fallOff = mix(1.1, 1.2, rng2.x);\n    float count = floor(mix(4., 12., rng2.y));\n    \n    // kaleidoscop\n    float a = 1.0;\n    for (float index = 0.; index < count; ++index)\n    {\n        // transform\n        p = abs(p)-range*a;\n        p *= rot(3.1415/4.);\n        p.y = abs(p.y)-rangeY;\n        \n        // shape\n        float dist = max(abs(p.x) + a*sin(6.28*index/count), p.y-size);\n        \n        // shade\n        color += smoothstep(thin, 0.0, dist) * glow / dist;\n        \n        a /= fallOff;\n    }\n    \n    color = clamp(color, 0., 1.);\n    \n    // palette\n    color *= .5 + .5 * cos(vec3(1,2,3)*5. + p.x * 10.);\n    \n    // glow\n    color += .04/abs(sin(p.y*12.+iTime*1.));\n\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nmat2 rot(float a) { float c = cos(a), s = sin(a); return mat2(c,-s,s,c); }\n\n// Dave Hoskins https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n  p3 += dot(p3, p3.zyx + 31.32);\n  return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}