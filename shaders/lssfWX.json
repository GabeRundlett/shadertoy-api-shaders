{
    "Shader": {
        "info": {
            "date": "1498650011",
            "description": "renders random directions as points over time, a good uniform random direction will look like a transparent sphere",
            "flags": 32,
            "hasliked": 0,
            "id": "lssfWX",
            "likes": 1,
            "name": "random direction uniformity test",
            "published": 3,
            "tags": [
                "test",
                "direction",
                "randon",
                "uniformity"
            ],
            "usePreview": 0,
            "username": "public_int_i",
            "viewed": 608
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = texture(iChannel0, fragCoord/iResolution.xy)*100.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat hash(vec2 p) {\n    return fract(dot(p+vec2(.36834,.723), normalize(fract(p.yx*73.91374)+1e-4))*7.38734);\n}\n\nvec3 nonUniformRandomDirection(vec2 s) {\n    vec3 r = vec3(hash(s),hash(s*.8723),hash(s*.9574))*2.-1.;\n    return normalize(r);\n}\n\nvec3 uniformRandomDirection(vec2 s) {\n    vec3 r = vec3(hash(s),hash(s*.8723),hash(s*.9574))*2.-1.;\n    return normalize(r/cos(r));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 120) {\n        fragColor = vec4(0.);\n        return;\n    }\n    \n    vec3 dir = uniformRandomDirection(fragCoord+mod(iTime*.01,4096.)*27.4723);\n    \n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.x;\n    fragColor = mix(texture(iChannel0, fragCoord/iResolution.xy),\n                    vec4(max(1.-length(uv*2.-dir.xy/(2.+dir.z))*10.,0.)),\n                    .01);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}