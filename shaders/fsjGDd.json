{
    "Shader": {
        "info": {
            "date": "1618288760",
            "description": "i don know what happend but it is pretty cool",
            "flags": 0,
            "hasliked": 0,
            "id": "fsjGDd",
            "likes": 0,
            "name": "P11 rayMarching&camera",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "DEMERCY",
            "viewed": 212
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\nfloat GetDist(vec3 p);\nfloat sdBox(vec3 p ,vec3 s){\n    \n        return length(max(abs(p) - s,0.));\n}\nfloat sdTorus(vec3 p , vec2 r){   //Torus\n    float x = length(p.xz) - r.x;\n    float d = length(vec2(x,p.y)) - r.y;\n    return d;\n}  \nfloat sdCapsule(vec3 p,vec3 a ,vec3 b, float r){    //capsule\n    vec3 ab = b - a;\n    vec3 ap = p - a;\n    float t = dot(ab,ap)/ dot(ab,ab);\n    t = clamp(t,0.,1.);\n    vec3 c = a + t * ab;\n    float d = length(p - c)-r;\n    return d;\n}\nfloat sdCylinder(vec3 p,vec3 a ,vec3 b, float r){    //capsule\n    vec3 ab = b - a;\n    vec3 ap = p - a;\n    float t = dot(ab,ap)/ dot(ab,ab);\n    vec3 c = a + t * ab;\n    \n    float x = length(p - c)-r;\n    float y = (abs(t-0.5)-0.5)*length(ab);\n    float e = length(max(vec2(x,y),0.));\n    float i = min(max(x,y),0.);\n    return e+i;\n}\n\nmat2 Rot(float a){          //rotation\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c,-s,s,c);\n}\n\nvec3 GetNormal(vec3 p ){\n    float d = GetDist(p);\n    vec2 e = vec2(.01,0);\n    vec3 n = d - vec3(\n        GetDist(p - e.xyy),\n        GetDist(p - e.yxy),\n        GetDist(p - e.yyx));\n    return normalize(n);  \n}\nfloat RayMarch(vec3 ro,vec3 rd){\n    float dO = 0.;\n    for(int i = 0; i < MAX_STEPS;i++){\n        vec3 p = ro + rd * dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dS < SURF_DIST || dO > MAX_DIST)break;\n    }\n    return dO;\n}\nfloat GetLight(vec3 p){\n    vec3 lightPos = vec3(2,4,-1.5);    //light\n     vec3 lightPos2 = vec3(2,4,-1.5);    //light\n    //lightPos.xz += vec2(sin(iTime),cos(iTime))*2.;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n\n    float dif = clamp(dot(n,l),0.3,1.);\n    float d = RayMarch(p+n*SURF_DIST*2.,l);\n    if(d<length(lightPos-p))dif *= .5;\n    return dif;\n}\n\nfloat GetDist(vec3 p){\n    vec4 s = vec4(0,3,0,0.45);     //sphere\n    float sphereDist = length(p - s.xyz) - s.w;\n   \n    float planeDist = p.y+.8;     //plane\n    \n    float cd = sdCapsule(p,vec3(-0.64,2.2,0),vec3(-1,1.6,0),.3);   //capsule\n    float cd2 = sdCapsule(p,vec3(0.64,2.2,0),vec3(1,1.6,0),.3);\n    float td = sdTorus(p - vec3(0,3.7,0),vec2(.5,.1));    //torus\n    float bd = sdBox(p-vec3(0,2,0),vec3(.5));            //box\n    float cyld = sdCylinder(p,vec3(-.3,.3,0),vec3(-.3,2,0),.15);    //cylinder\n    float cyld2 = sdCylinder(p,vec3(.3,.3,0),vec3(.3,2,0),.15); \n    float cyld3 = sdCylinder(p,vec3(0,3,0),vec3(0,2.5,0),.24); \n    float d = min(planeDist,cd);\n    d = min(d,cd2);\n    d = min(d,td);\n    d = min(d,sphereDist);\n    d = min(d,bd);\n    d = min(d,cyld);\n     d = min(d,cyld2);\n      d = min(d,cyld3);\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    vec3 lookat = vec3 (0,2,0);\n    float zoom = 1.;\n    vec3 ro =  vec3(sin(iMouse.x/iResolution.x*5.5)*5.,\n                       -iMouse.y/iResolution.y*5.+3.5,\n                    cos(iMouse.x/iResolution.x*5.5)*5.);                  //camera\n    vec3 f = normalize(lookat-ro);\n    vec3 r = cross(vec3(0,1,0),f);\n    vec3 u = cross(f,r);\n\n    vec3 rd = normalize(f*zoom+r*uv.x+u*uv.y);\n   \n \n vec3 col = vec3(0);\n \n float d = RayMarch(ro,rd);\n vec3 p = ro + rd * d;\n float dif = GetLight(p);\n col = vec3(dif);\n fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}