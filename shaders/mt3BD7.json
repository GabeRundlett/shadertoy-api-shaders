{
    "Shader": {
        "info": {
            "date": "1701294847",
            "description": "Fast Reaction Diffusion using mipmaps \nPart of some private exploration in 2021 never released. I changed my mind\nTry it fullscreen",
            "flags": 32,
            "hasliked": 0,
            "id": "mt3BD7",
            "likes": 7,
            "name": "Fast & Short Reaction Diffusion5",
            "published": 3,
            "tags": [
                "mipmap",
                "diffusion",
                "highpass",
                "reaction",
                "golfed",
                "cineshader"
            ],
            "usePreview": 0,
            "username": "benoitM",
            "viewed": 761
        },
        "renderpass": [
            {
                "code": "/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n//     Fast & Simple Reaction Diffusion Pattern V5                     //\n//                                                                     //\n//             by Benoit Marini - 16/11/2021                           //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// from \"Fast & Simple & Dirty Reaction Diffusion Pattern\"             //\n// Only using mimaps for convolutions                                  //\n// More info here https://www.shadertoy.com/view/flGGzR                //\n//                                                                     //\n// Modified version with :                                             //\n//   * nicer forms                                                     //\n//   * color                                                           //\n//   * interactivity                                                   //\n//   * auto reset                                                      //\n// Lot of tricks used                                                  //\n//                                                                     //        \n/////////////////////////////////////////////////////////////////////////  \n\nM\n    T(-f*float(2*iFrame),0.);                              // FORM (stored on alpha channel)\n    o.rgb = smoothstep  (.4,.5,o.a) *cos(o.r*vec3(1,2,4)); // COLOR from red channel (multiplied by Form)\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "M\n   \n   step (.01,T(f,0.)-T(f,S+G )) ;   // FORM o = step (.01,T(f ..... \n   o.r = (o.a>.5)? T(f,0.).r : -.5; //COLOR\n   if( T(f,S+G).r <.01 ) o.r+=.1;   //COLOR\n \n}\n\n\n\n//////////////////////////////////////////////////////////////////////////////////\n// FORM (alpha channel) : high pass filter & threshold of Buffer B \n//                                                                 \n//////////////////////////////////////////////////////////////////////////////////\n// COLOR (red channel storing color index) :\n//\n//  if(o.a>.5) // WHITE pixel (form)\n//  {\n//      if(T(f,3.5).r <0.2)         // Get blurry image of color index to split between border and inner             \n//      {\n//          o.r = T(f,1.).r + 0.06; // Border case : add offset color index                               \n//      }\n//      else\n//      {\n//          o.r = T(f,3.).r;        // Inner case : keep color it but average it                                     \n//      }\n//  }\n//  else // BLACK Pixel (no form)\n//  {\n//      o.r = -.5;                  // set color index = -0.5; will influence blurry image of color index                           \n//  }\n//  \n///////////////////////////////////////////////////////////////////////////////////\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "M\n     T(f,S) + exp(-i.x-i.y);    // FORM on .a chanel  // o = T(f,2.5) + ......\n     o.r = T(f,1.).r ;            // COLOR on .r chanel   \n     if ( T(f,99.).a > .45 && o.r <0.95 ) o-=o; // RESET if form cover more than ~45% of the screen, work with 2^99 screens resolutions ;)\n\n\n}\n\n//////////////////////////////////////////////////////\n// FORM : blur buffer A + add small perturbation    //\n//////////////////////////////////////////////////////\n// COLOR : blur buffer A                            //\n//////////////////////////////////////////////////////\n// RESET : use mipmap to know average coverage      //\n//////////////////////////////////////////////////////\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define M void mainImage( out vec4 o, vec2 i ) { o=\n#define f vec2(1.1)\n#define S 2.5 + fract(iTime/3.5)\n#define G 0.8*cos(8.*i.x/iResolution.x)\n#define T(d,l) texture(iChannel0, (i+d)/iResolution.xy ,l)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}