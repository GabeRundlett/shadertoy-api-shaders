{
    "Shader": {
        "info": {
            "date": "1547896755",
            "description": "simulates 5 bounces of rays starting as horizontal beam and refracting in a lens and reflecting on top+bottom mirrors.\nSphere = Mouse or auto.\nNB: missing secondary rays (and thus the rainbow effect).\n       same if wanted to do spectral decomposition.",
            "flags": 32,
            "hasliked": 0,
            "id": "WdBGRz",
            "likes": 6,
            "name": "bouncing rays - lense",
            "published": 3,
            "tags": [
                "rays",
                "refraction",
                "geometry",
                "optics",
                "lense"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 544
        },
        "renderpass": [
            {
                "code": "// Fork of  https://shadertoy.com/view/WsSGRz\n\n#define S(d,r) smoothstep( r/R.y, 0., d)   // antialiased draw. r >= 1.5\n\n// --- line segment with disc ends: seamless distance to segment //  https://www.shadertoy.com/view/4dcfW8\nfloat line(vec2 p, vec2 a, vec2 b) { \n    p -= a, b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);   // proj coord on line\n  //return length(p - b * h);                         // dist to segment\n    p -= b*h; return dot(p,p);                        // square dist\n}\n\n// --- draw pathes -----------------------------------------------------\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = u / R.y;\n    \n    float t, d = 1e5, l, y;\n    for( float n=0.; n<R.y/K; n++) {                  // follow path n\n        vec2 P = T(vec2(0,n)).xy, _P;                 // path start point\n        for( float i=1.; i<6.; i++) {                 // follow bounces\n            l = line( U, _P = P, P = T(vec2(i,n)).xy );\n         // l = length(T(vec2(i,n)).xy-U)*.1; l*=l;   // test\n            if (l < d) d = l, y = n;\n       }   }\n    O =   S( sqrt(d), 1.5)\n        * ( .6 + .6 * cos( 6.3*(y*K/R.y)  + vec4(0,23,21,0)  ) ); // hue:  https://www.shadertoy.com/view/ll2cDc\n    \n    vec2 C = Pdisk, C1 = C-dr*X, C2 = C+dr*X;\n    if ( inSphere(U,C1,r) )\n        O += S( abs(length(C2-U)-r), 1.5 );           // trace lens side 1\n    if (  inSphere(U,C2,r) )\n        O += S( abs(length(C1-U)-r), 1.5 );           // trace lens side 2\n // O = sqrt(O); // to sRGB\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// bufA: path( bounce x, Id y) = ( Pos, Dir )\n\n#define Inf 1e3\n#define Eps 1e-4\n\n// --- ray-sphere intersec: || (P + l*D) - C ||² = r²  ->  2-polynomial\nfloat sphere(vec2 P, vec2 D, vec2 C, float r) {\n   vec2 d = P-C;\n    float b = dot(d,D), c = dot(d,d) - r*r, k = b*b-c, l;\n    if (k>0.) {\n        l = -b - sqrt(k); if (l > Eps) return l; // hit distance\n        l = -b + sqrt(k); if (l > Eps) return l; // hit distance\n    }\n    return Inf;                         // no hit\n}\n// normal at hit point P\n#define sphereN(P,C)     normalize(P-(C))\n\n// --- ray-bottom intersec:  P + l*D = (x,0)   ->  l\nfloat bottom(vec2 P, vec2 D) {\n    if (D.y != 0.) {\n        float l = -P.y/D.y; \n        if (l > Eps) return l;          // hit distance\n    }\n    return Inf;                         // no hit\n}\n// normal at hit point P\n#define bottomN(P) vec2(0,1)\n\n// --- ray-top intersec:  P + l*D = (x,1)   ->  l\nfloat top(vec2 P, vec2 D) {\n    if (D.y != 0.) {\n        float l = (1.-P.y)/D.y; \n        if (l > Eps) return l;          // hit distance\n    }\n    return Inf;                         // no hit\n}\n// normal at hit point P\n#define topN(P) vec2(0,-1)\n\n// --- trace rays( x = bounceID, y = pathID ) ------------------------\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if ( U.x > 8. ) return;                    // manage only 8 bounces\n    \n    float t, y, m = 1.;                        // medium: >0: air <0: glass\n    vec2  R = iResolution.xy,\n          P, D, D2, N,\n          C = Pdisk;                           // moving sphere ( C, r )\n             \n    y = K*U.y/R.y; if ( y > 1.) return;        // R.y/K rays \n    P = vec2( 0, .3+.4*y ),  D = X;            // init ray ( P, D )\n    m = inSphere(P,C-dr*X,r) && inSphere(P,C+dr*X,r) ? -1. : 1.; // start medium\n \n    // in this variant, whole propagation computed in one frame to avoid inconsistency as sphere moves.\n    for (int x = 1; x <= int(U.x); x++) {      // bounce x\n \n        float ls1 = sphere(P,D, C-dr*X,r),     // dist to intersections\n              ls2 = sphere(P,D, C+dr*X,r),     // dist to intersections\n              lb = bottom(P,D),\n              lt = top(P,D),\n               l = min(lb,lt);                 // hit = closest\n        if ( ! inSphere(P+ls1*D,C+dr*X,r) ) ls1 = Inf;\n        if ( ! inSphere(P+ls2*D,C-dr*X,r) ) ls2 = Inf;\n        l = min( l, min(ls1,ls2) );\n\n        if (l<Inf) {\n            P += l*D;                          // hit point\n            N =   l==ls1 ? sphereN(P,C-dr*X)   // normal at hit\n                : l==ls2 ? sphereN(P,C+dr*X)   // normal at hit\n                : l==lb  ? bottomN(P)\n                :          topN(P);\n            if ( l==ls1 || l==ls2 ) {\n                D2 = refract( D, m*N, m<0.? 1.4: 1./1.4 );\n                if (D2 != vec2(0) )            // refraction possible\n                { m = -m; D = D2; continue; }  // refracted ray dir  \n            }\n            D = reflect(D, m*N);               // reflected ray dir\n        }\n        else P += l*D;                         // go straight\n    }\n    O.xy = P; // O.zw = D;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define K 4.         // trace R.y/K rays\n\n#define Pdisk  ( t=iTime*.5 , iMouse.z>0. ? iMouse.xy/R.y : .5 + .3* vec2(.6*cos(t)-.3*sin(3.1*t),sin(1.31*t)-.4*cos(3.7*t)) )\n// lens = Pdisk - dr*X  inter  Pdisk + dr*X\nconst float r = .8, e = .2, dr = r-e/2.;\n// test if P in sphere\n#define inSphere(P,C,r)  ( dot(P-(C),P-(C)) < (r)*(r) )\n\n#define T(U)   texelFetch( iChannel0, ivec2(U), 0 )\nvec2 X = vec2(1,0);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}