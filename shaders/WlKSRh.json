{
    "Shader": {
        "info": {
            "date": "1582583173",
            "description": "rounded rectangle",
            "flags": 0,
            "hasliked": 0,
            "id": "WlKSRh",
            "likes": 1,
            "name": "Rounded_rectangle",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "Arseny",
            "viewed": 293
        },
        "renderpass": [
            {
                "code": "vec4 brick(vec4 lrud, vec2 uv){\n    float force = 0.;\n    /*force += 1 / max((uv.x - lrud.l) / (lrud.r - lrud.l), 0.001);\n    force += 1 / max(-(uv.x - lrud.r) / (lrud.r - lrud.l), 0.001);\n    force += 1 / max((uv.y - lrud.d) / (lrud.u - lrud.d), 0.001);\n    force += 1 / max(-(uv.y - lrud.u) / (lrud.u - lrud.d), 0.001);*/\n    force += 1. / max((uv.x - lrud.x) / (lrud.y - lrud.x), 0.001);\n    force += 1. / max(-(uv.x - lrud.y) / (lrud.y - lrud.x), 0.001);\n    force += 1. / max((uv.y - lrud.w) / (lrud.z - lrud.w), 0.001);\n    force += 1. / max(-(uv.y - lrud.z) / (lrud.z - lrud.w), 0.001);\n    return vec4(vec3(sign(force - 20.)), 1.);\n}\n\nfloat rand(float x){\n    x += 0.0007;\n    x = floor(x / 0.001) * 0.001;\n    return fract(sin(x) * 43758.5453);\n}\n\nfloat rand_func(float x, float seed){ // from 0 to 1\n    const float freq = 20.;\n    float block = floor(x * freq);\n    float A = rand(block + seed);\n    float B = rand(block + 1. + seed);\n    return mix(A, B, x * freq - block);\n}\n\nvec2 rand(vec2 uv, float seed){\n    seed += 0.01313;\n    uv.x += 0.0004;\n    uv.y += 0.0007;\n    uv.x = floor(uv.x / 0.001) * 0.001;\n    uv.y = floor(uv.y / 0.001) * 0.001;\n    uv += vec2(13., 63.);\n    uv.x = fract(sin(uv.x * 10. * uv.y * uv.y * seed)  * 438.5453);\n    uv.y = fract(cos(uv.x * uv.x * 10. * uv.y * seed)  * 561.5453);\n    return uv;\n}\n\nvec2 cont_rand(vec2 uv, float seed){ // continueous\n    uv += vec2(0.141, 0.123);\n    return vec2(rand_func(seed, rand(uv.x * uv.y * uv.x)), rand_func(seed, rand(uv.x * uv.y * uv.y)));\n}\n\nvec2 uvtransform(vec2 uv, float strength, float seed){ // continueous\n    float clsz = 0.1; // cellsize\n    int X = int(uv.x / clsz);\n    int Y = int(uv.y / clsz);\n    vec2 nwuv = vec2(float(X), float(Y)) * clsz;\n    //vec2 A = mix(rand(nwuv + vec2(0., 0.)  , seed), rand(nwuv + vec2(clsz, 0.)  , seed), (uv - nwuv).x / clsz);\n    //vec2 B = mix(rand(nwuv + vec2(0., clsz), seed), rand(nwuv + vec2(clsz, clsz), seed), (uv - nwuv).x / clsz);\n    //vec2 ans = mix(A, B, (uv - nwuv).y / clsz);\n    vec2 A = nwuv + vec2(0., 0.) * clsz;\n    A = cont_rand(A, seed);\n    vec2 B = nwuv + vec2(1., 0.) * clsz;\n    B = cont_rand(B, seed);\n    vec2 C = nwuv + vec2(0., 1.) * clsz;\n    C = cont_rand(C, seed);\n    vec2 D = nwuv + vec2(1., 1.) * clsz;\n    D = cont_rand(D, seed);\n    vec2 AB = mix(A, B, (uv - nwuv).x / clsz);\n    vec2 CD = mix(C, D, (uv - nwuv).x / clsz);\n    /*vec2 A = mix(\n        rand(vec2(float(X), float(Y))), \n        rand(vec2(float(X + 1), float(Y))), \n        (uv - nwuv).x / clsz\n    );*/\n    vec2 ans = mix(AB, CD, (uv - nwuv).y / clsz);\n    return uv + (ans - vec2(0.5)) * 2. * strength;\n}\n\nvec2 distortion(vec2 uv, float strength, int power, float seed){\n    for (int i = 0; i < power; i++){\n        uv = uvtransform(uv, strength, seed);\n    }\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = distortion(uv, 0.01, 10, iTime / 20.);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = brick(vec4(0.3, 0.7, 0.3, 0.7), uv);//vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}