{
    "Shader": {
        "info": {
            "date": "1624377513",
            "description": "Planet with sun and moon\nRendered: https://twitter.com/icylavah/status/1407367524967010304",
            "flags": 0,
            "hasliked": 0,
            "id": "stSGRG",
            "likes": 3,
            "name": "Geocentric",
            "published": 3,
            "tags": [
                "planet"
            ],
            "usePreview": 0,
            "username": "icylavah",
            "viewed": 388
        },
        "renderpass": [
            {
                "code": "#define AA (8)\n\n#define PI (3.14159265359)\n#define TAU (PI * 2.0)\n\nfloat moonRadius = 0.1;\nfloat moonLitRadius = 0.11;\nvoid sampleMoon(vec2 pos, inout vec3 color) {\n    vec2 point = vec2(cos(fract(iTime / 16.0) * TAU), sin(fract(iTime / 16.0) * TAU)) * 0.8;\n    if(length(pos - point) < moonRadius) {\n        float offset = sqrt(moonLitRadius * moonLitRadius - moonRadius * moonRadius);\n        vec2 lit = point - vec2(cos(fract(iTime / 16.0) * TAU), sin(fract(iTime / 16.0) * TAU)) * offset;\n        if(length(pos - lit) < moonLitRadius) color = vec3(0.7, 0.9, 0.95);\n        else color = vec3(0.2, 0.5, 0.6);\n    }\n}\n\nfloat sunRadius = 0.15;\nvoid sampleSun(vec2 pos, inout vec3 color) {\n    vec2 point = vec2(cos(fract(iTime / 16.0 + 0.5) * TAU), sin(fract(iTime / 16.0 + 0.5) * TAU)) * 0.8;\n    if(length(pos - point) < sunRadius) {\n        color = vec3(0.9, 0.85, 0.6);\n    }\n}\n\nfloat planetRadius = 0.4;\nfloat planetLitRadius = 0.42;\nvoid samplePlanet(vec2 pos, inout vec3 color) {\n    vec2 point = vec2(0.0, 0.0);\n    if(length(pos - point) < planetRadius) {\n        float offset = sqrt(planetLitRadius * planetLitRadius - planetRadius * planetRadius);\n        vec2 lit = point - vec2(cos(fract(iTime / 16.0) * TAU), sin(fract(iTime / 16.0) * TAU)) * offset;\n        if(length(pos - lit) < planetLitRadius) color = vec3(0.3, 0.7, 0.45);\n        else color = vec3(0.10, 0.4, 0.35);\n    }\n}\n\nstruct Outline {\n    vec2 pos;\n    float r;\n    vec3 color;\n    float width;\n};\n\nvoid outline(vec2 pos, Outline ol, inout vec3 color) {\n    if(abs(length(pos - ol.pos) - ol.r) <= ol.width / 2.0) color = ol.color;\n}\n\nvec3 samplePoint(vec2 pos) {\n    vec3 color = vec3(0.015);\n    \n    if(length(pos) < 1.1) {\n        color = vec3(0.05, 0.08, 0.1);\n    }\n    outline(pos, Outline(vec2(0.0, 0.0), 1.2, vec3(0.05, 0.08, 0.1), 0.055), color);\n    outline(pos, Outline(vec2(0.0, 0.0), 1.3, vec3(0.05, 0.08, 0.1), 0.03), color);\n    outline(pos, Outline(vec2(0.0, 0.0), 1.37, vec3(0.05, 0.08, 0.1), 0.015), color);\n    samplePlanet(pos, color);\n    sampleMoon(pos, color);\n    sampleSun(pos, color);\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Center is 0, 0\n    vec2 pos = (fragCoord - iResolution.xy / 2.0) * 2.0 / iResolution.y * vec2(1, -1);\n    \n    // Supersampling\n    vec3 color = vec3(0.0);\n    for(int y = 0; y < AA; y++) {\n        for(int x = 0; x < AA; x++) {\n            vec2 subpos = pos + vec2(\n                float(x + 1) / float(AA + 1) * 2.0 - 1.0,\n                float(y + 1) / float(AA + 1) * 2.0 - 1.0\n            ) / iResolution.y;\n            color += samplePoint(subpos * 1.0);\n        }\n    }\n    \n    fragColor = vec4(color / float(AA * AA), 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}