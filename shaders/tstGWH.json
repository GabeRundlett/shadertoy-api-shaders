{
    "Shader": {
        "info": {
            "date": "1568684573",
            "description": "Full moon...",
            "flags": 0,
            "hasliked": 0,
            "id": "tstGWH",
            "likes": 5,
            "name": "MOON",
            "published": 3,
            "tags": [
                "2d",
                "moon"
            ],
            "usePreview": 0,
            "username": "zxxuan1001",
            "viewed": 982
        },
        "renderpass": [
            {
                "code": "#define MOON_COLOR vec3(0.9,0.9,0.65)\n#define MOON_GLOW vec3(0.95,0.5,0.3)\n\nfloat hash1(in vec2 uv) {\n    return fract(sin(uv.x*100.0 + uv.y*6574.0)*5647.0);\n}\n\nfloat smoothNoise(in vec2 uv) {\n    vec2 luv = fract(uv); //range from 0.0 to 1.0\n    vec2 id = floor(uv); //the integer part of uv, 0, 1, 2\n    luv = luv*luv*(3.0 - 2.0*luv); //similar to smoothstep\n    \n    //get values from the cordinates of a square\n    float bl = hash1(id);\n    float br = hash1(id + vec2(1.0, 0.0));\n    float tl = hash1(id + vec2(0.0, 1.0));\n    float tr = hash1(id + vec2(1.0, 1.0));\n    \n    float b = mix(bl, br, luv.x); //interpolate between bl and br\n    float t = mix(tl, tr, luv.x); //interpolate between tl and tr\n    \n    return mix(b, t, luv.y);\n}\n\nfloat fbm(in vec2 uv) {\n    float amp = 1.0;\n    float f = 2.0;\n    float h = 0.0;\n    float a = 0.0;\n    for (int i = 0; i < 4; i++){\n        h += amp * smoothNoise(uv*f);\n        a += amp;\n        amp *= 0.5;\n        f *= 2.1;\n    }\n    \n    h /= a;\n    return h;\n}\n\nfloat sinwave(vec2 p, float scale)\n{\n    return sin(p.x*scale)/p.x;\n}\n\nfloat cityLight(vec2 p)\n{\n    float t = step(0.3, fract(3.0*mod(4.0*p.x*abs(sin(p.x*2.7)), 2.0)));\n    t += step(0.3, fract(5.0*mod(p.y*6.0*abs(sin(p.y*1.3)), 2.0)));\n    return t;\n}\n\nfloat building(vec2 p) {\n    float t = floor(sinwave(p,3.0))*0.5 + floor(sinwave(p*1.2,8.5))*0.3;\n    return smoothstep(0.31, 0.3, t*0.3-p.y-0.6);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n    float r = 0.65;\n    float y = fragCoord.y/iResolution.y;\n    \n    vec2 p = uv+vec2(0.4, -0.2);\n    vec3 col = mix(vec3(0.0, 0.05,0.1), MOON_GLOW*0.2, exp(-5.0*y)); \n\tfloat circle = length(p)+r; \n    float moon = clamp(pow(1.0/circle,32.0), 0.0, 1.0);\n    float glow = clamp(pow(1.0/circle, 7.0), 0.0, 1.0);\n    \n    \n    \n    float n = clamp(fbm(p-vec2(0.1,0.0))*fbm(p-vec2(-0.2,0.2)), 0.0, 1.0);\n    float shadow = moon*n;\n    vec3 moonCol = MOON_COLOR*moon;\n    vec3 glowCol = MOON_GLOW*glow;\n    \n    col += moonCol*0.2;\n    col += glowCol;\n    col += shadow*MOON_COLOR;\n    float bu =1.0-building(p*2.0+vec2(-2.8, 1.0));\n    float cl = cityLight(p);\n    vec3 buCol = vec3(0.65, 0.55, 0.0)*(1.0-cl)*(0.8+0.2*sin(iTime));\n    buCol *= bu;\n    col = mix(col, buCol, bu);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}