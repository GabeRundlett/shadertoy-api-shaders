{
    "Shader": {
        "info": {
            "date": "1661327751",
            "description": "A variant of my \"Banded mosaic\" pattern with a more interesting color palette.",
            "flags": 8,
            "hasliked": 0,
            "id": "NlyyWh",
            "likes": 6,
            "name": "Fractal mosaic 6",
            "published": 3,
            "tags": [
                "fractal",
                "mosaic"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 542
        },
        "renderpass": [
            {
                "code": "vec2 f1(vec2 a){\n    return\n        fract(a)\n        //min(abs(.5-fract(a.yx)),abs(.5-fract(a+.5)))\n        //fract(a-fract(a*4.)/2.)\n        //fract(a+floor(a.y*2.+.5)/2.)\n    ;\n}\n\n\nvec2 triangle_wave(vec2 a){\n    //a += sign(a.x-a.y)/2.;\n    //a += sign(a.y)/2.;\n    //a += sign(a.x)/2.;\n    vec2 a2 = //change this constant to get other interesting patterns\n        vec2(1.,0.5)\n        //vec2(2.,-0.5)\n        //vec2(2.5,-1.)\n        \n        //vec2(1.5,0.)\n        \n        //vec2(-2.,.5+mod(floor(a.x),2.))\n    ,\n    \n    a1 =\n        a+a2\n        //a*sign(a-a2.yx)+a2\n        //a+a2+mod(floor(a.x),3.)\n        //a+a2+floor(a.x)\n        //a+a2+floor(a.y)\n    ;\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n\n    //a1 *= (1. + fmod(abs(a1/2.),2.));\n    return abs(f1((a1)*(a2.x+a2.y))-.5);\n}\n\n/*\nfloat binary_digit(int n, int i){\n    return float((n >> i) & 1);\n}\n*/\n\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\n\nvec3 fractal(vec2 uv,float s1,float s2){\n    vec3 col = vec3(0.);\n    float scale = 1.5;\n    vec2 t2 = vec2(0.);\n    bool t3 = false;\n    //float p1 = 1.;\n    bool b1 = false;\n    for(int k = 0; k < 9; k++){\n        \n        //uv.x += t1_(floor(uv),floor(uv));\n        \n        b1 = uv.y>uv.x || !b1;\n        //uv += floor((uv.x+.5)*2./1.5)/2.;\n\n        \n        //uv.x += fmod(uv.x,1.5); //lace pattern\n        //uv += floor(uv+vec2(1.,0.5))/1.5;\n        //uv.x += floor(uv.x*4.)/4.;\n\n        //uv += binary_digit(k,1)/2.;\n        //uv += binary_digit(k,2)/2.;\n        //uv += binary_digit(k,3)/2.;\n\n        float offset =\n            0.\n            //.25\n            //float(k)/2.\n        ;\n        \n        //another awesome pattern (looks better zoomed out)\n        //if(uv.y>uv.x){ uv = uv.yx+.5;t2 = -t2.yx;}\n        \n        //if(t3||t2.x>t2.y)\n        //if(t2.x<t2.y||!t3)\n        uv =\n            //max(abs(.5+uv+t2),abs(-.5+uv+t2))/scale\n            //(uv+max(t2,uv)/1.5)/scale\n            //(t2+max(uv.yx,t2))\n            //(uv/1.5+t2)\n            (uv+t2)/scale\n        ;\n        \n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*1.5)-.5)/1.5;\n\n        //uv.x += .5;\n\n        //uv *= sign(uv.yx-uv);\n        //if(uv.y<uv.x) uv = uv.yx; else uv *= sign(uv-uv.yx);\n        t2 =\n            triangle_wave(uv+.5*s1+offset)\n            //triangle_wave(uv+.5*sign(uv.x-.5)+offset)\n            //triangle_wave(uv+.5+offset)*sign(.5-uv.x)\n            //-triangle_wave(uv-.5)/(.5+fmod(t2.x,2.))\n            //triangle_wave(uv+.5*sign(uv.x-uv.y))\n            //triangle_wave(uv+.5)*(.5+fmod(t2.x,2.))\n        ;\n        \n        //uv += floor(t2.y-t2.x);\n        uv =\n            t2-triangle_wave(uv.yx+s2+offset)\n            //fract(t2-triangle_wave(uv.yx+offset)+.5)\n            //t2-triangle_wave(uv.yx+offset+floor(uv.x+uv.y))\n        ;\n        \n        //uv += length(uv/8.);\n        //uv += length(uv/4.);\n        //uv.y += floor((uv.x-uv.y))/2.;\n        \n        //uv.x -= sign(uv.x)*.5;\n        \n        float c1 =\n            uv.y-uv.x\n            //uv.y-uv.x*float(col.x<col.y)\n            //uv.y-uv.x*sign(t2.y-t2.x)\n        ;\n        //c1 = max(c1,t2.x-t2.y);\n        \n        //if(t3)\n        //if(uv.y>uv.x)\n        col =\n            vec3(c1,col.yz)\n            //vec3(max(c1,col.x),col.yz)\n        ;\n\n        //col = col.xzy;\n        if(t3 =\n            //t2.x < t2.y || !t3\n            t2.x<t2.y\n            //b1\n            //t2.x*float(!b1) < t2.y\n            //t2.x < t2.y && uv.x < uv.y || !t3\n        ) col =\n            col.yzx\n            //fract(col.yzx-iTime)/2.\n        ;\n        //if(uv.x < uv.y) uv /= 1.5;\n        //if(t2.x*uv.x < t2.y*uv.y) col = col.yzx;\n        //if(t2.x-t2.y > uv.x-uv.y) col = col.yzx;\n        //if(t2.x<t2.y||t2.x>t2.y) {uv=uv.yx;t2=t2.yx;}\n        //if(uv.x<uv.y && k%2 == 0) {uv = -uv;break;}\n        //if(uv.x>uv.y) uv.x -= .5;\n        //if(uv.x < .5) uv.x += .5;\n        //if(uv.y < .5) uv.y += .5;\n        //if(uv.y>uv.x) {uv=-uv.yx;t2=t2.yx;}\n        \n        //WOW!\n        //{uv=-uv.yx;t2=-t2.yx;}\n        //uv -=\n            //float(uv.x>uv.y)/1.5\n            //float(uv.x>uv.y&&t2.x>t2.y)/1.5\n        //;\n\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 4.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    col = fractal(uv,1.,0.);\n    fragColor = vec4(abs(col)*2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\n//#define fmod(a, b) mod(mod(floor(a),floor(1.+(a)/5.)),b)\n\n//multiply by prime numbers to get an interesting rhythm\n//#define fmod(a,b) mod(floor(a)+floor((a)/2.)*2.+floor((a)/4.)*3.+floor((a)/8.)*5.+floor((a)/16.)*7.,b)\n\n\n//#define fmod(x,y) mod(floor(x)+floor(floor((x))/8.),y)\n#define fmod1(x,y) mod(floor(x+floor(t0*y)),y)\n#define fmod2(x,y) mod(floor(y*((x)/y+floor((x)/y)/y)),y)\n#define smod(x,y) floor(mod(floor(x)*floor(x),y))\n#define sqmod(x,y) floor(mod(floor(x)*floor(x),y*y)/y)\n#define fmax(x,y,z) max(fmod(x,z),fmod(y,z))\n#define fpow(x,y) pow(y,fmod(x,y))\n#define floor1(x) floor(x)*floor(mod((x)/2.,2.))\n\n\nvec2 mainSound1(int samp, float t,float scale){\n  float tempo =\n      1.\n      //pow(2.,fmod(t/4.,2.))\n  ;\n  t /= tempo;\n  /*\n  for(int i = 0; i < 3; i++){\n        t += mod(floor(t*4.),4.);\n  }\n  */\n  //t = (t + pow(2.,fmod(t*2.,3.)));\n  t += fpow(t,2.)*fpow(t*2.,2.)*fpow(t/2.,2.);\n  //t = t*(1. + fmod(t*4.,2.))/2.;\n  //t += floor(t*4.)/4.;\n  float t0=t, s1 =\n      8.\n      //pow(2.,2.+fmod(t/16.,2.))\n  ;\n      \n  //t += floor(t*8.)/8.;\n  \n  float\n  z1 =\n      (1.+fmod(t+floor(t/s1)/s1,2.))\n      //(1.+fmax(t+floor(t/s1)/s1,t,2.))\n  ,\n  m3 =\n      fmod(t*s1+z1,s1)\n      //fmax(t*s1+z1,t*s1,s1)\n  ;\n  //t += m3;\n  t /=\n      1.+fmod(floor(t)/s1,2.)\n      //1.+fmod(floor(t*z1)/s1,2.)\n  ;\n  /*\n  for(int i = 0; i < 3; i++){\n      t += mod(floor(t*4.),2.)/2.;\n  }\n  */\n  float a =\n      //64.*sqrt(1.-sqrt(fract(t)))*.2\n      (2.-log(fract(t)))*(2.-log(fract(t/2.)))\n      //64.*sqrt(1.-sqrt(fract(t*pow(2.,fmod(t/4.,4.)))))*.2\n  ,\n\n  nb =\n      //pow(2.,(m3+z1+sign(m3-z1))/5.+7.)\n      t*pow(2.,(m3+z1)/5.+scale)*tempo\n  ;\n  //nb *= sign(z1-m3);\n\n  return\n      abs(.5-vec2(fract(nb*.998),fract(nb)))*a\n      //(abs(a/8.-abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n      \n      //abs(log(abs(.5-vec2(fract(nb*.998),fract(nb)))*a))\n  ;\n\n}\n\nvec2 mainSound(int a,float b){\n    return mainSound1(a,b,7.);\n    //return (mainSound1(a,b,7.5)+mainSound1(a,b/2.,7.5)+mainSound1(a,b/4.,7.5))/3.;\n    //return mainSound1(a,b,6.5)+mainSound1(a,b/2.,6.5)/2.+mainSound1(a,b/4.,6.5)/4.+mainSound1(a,b/8.,6.5)/8.;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "float fmod2(float a, float b){\n    return mod(floor(a/b),b)*b;\n}\n\nfloat fmod1(float a, float b){\n    //a += floor(a/2./pow(2.,fmod2(a,2.)));\n    \n    //a += fmod2(a*2.,4.);\n    //a += pow(2.,mod(floor(a/4./4.),4.));\n    //a += floor(a/2.);\n    //a += floor(a/4.);\n    //a += floor(a/8.);\n    //a += floor(a/16.);\n    \n    \n    float a1 = floor(a);\n    \n    //another amazing remix!\n    //a -= mod((floor(a/2.)+b),2.);\n    \n    //divide by powers of 2 to get interesting rhythms\n    //a /= 1. + mod(floor(a1/32.),2.);\n    //a /= 1. + mod(floor(a1/16.),2.);\n    //a /= 1. + mod(floor(a1/8.),2.);\n    //a /= 1. + mod(floor(a1/4.),2.);\n    //a /= 1. + mod(floor(a1/2.),2.);\n    return\n        mod(floor(a),b)\n        //floor(mod(floor(a)+mod(a/8.,8.),b))\n        //mod(floor(mod(floor(a)/2.,b))+floor(mod(floor(a),b*2.)),b)\n        //mod(floor(floor(a)*b/3.),b)\n        //mod(floor(a+8./b),b)\n        //abs(b-mod(floor(a+b),b*2.))\n        //mod(mod(floor(a+b),floor(a/8.+4.)),b)\n        //floor(sqrt(mod(floor(a/2.),(b))*mod(floor(a/b)*floor(a*b/8.),b)))\n        //mod(floor(a*2./b+b/2.),b)\n        //mod(floor(a*sign(.5-mod(floor(a*4./b),2.))),b)\n        //max(mod(floor(a+floor(a/4.))*floor(a),b),mod(floor(a),b))\n\n        //mod(floor(a+floor(a/b)),b)\n        //mod(floor(a)+floor(a+floor(a/b)),b)\n    ;\n}\nfloat fmod(float a, float b){\n    return\n        fmod1(a,b)\n        //fmod1(a+fmod1(a/4.,b),b)\n    ;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}