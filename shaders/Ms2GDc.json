{
    "Shader": {
        "info": {
            "date": "1394733822",
            "description": "variation on https://www.shadertoy.com/view/Xs23D3\nC: toggles colors",
            "flags": 16,
            "hasliked": 0,
            "id": "Ms2GDc",
            "likes": 3,
            "name": "Infinite Perlin Noise 3D",
            "published": 3,
            "tags": [
                "fractal",
                "noise",
                "perlin",
                "filtering",
                "multiscale"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 503
        },
        "renderpass": [
            {
                "code": "// --- Fractal noise simulating heterogeneous density in galactic clouds\n\n// Number of scales\n#define NOctaves 50.\n\n// Anti aliasing\n#define LimitDetails 3.\n#define SmoothZone 50.\n\n// Manual / Auto\n#define Anim 1\n\n// Colormap\n#define ClampLevel 8.\n\nfloat t;\n\nbool keyToggle(int ascii) {\n\treturn (texture(iChannel2,vec2((.5+float(ascii))/256.,0.75)).x > 0.);\n}\n\n// --- noise functions from https://www.shadertoy.com/view/XslGRr\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec2 hash( vec2 p ) {  \t\t\t\t\t\t// rand in [-1,1]\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\treturn -1. + 2.*fract(sin(p)*43758.5453123);\n}\nfloat noise( in vec2 p ) {\n    vec2 i = floor(p), f = fract(p);\n\tvec2 u = f*f*(3.-2.*f);\n    return mix( mix( dot( hash( i + vec2(0.,0.) ), f - vec2(0.,0.) ), \n                     dot( hash( i + vec2(1.,0.) ), f - vec2(1.,0.) ), u.x),\n                mix( dot( hash( i + vec2(0.,1.) ), f - vec2(0.,1.) ), \n                     dot( hash( i + vec2(1.,1.) ), f - vec2(1.,1.) ), u.x), u.y);\n}\n// -----------------------------------------------\nvec3 hash3( vec3 p ) {  \t\t\t\t\t\t// rand in [-1,1]\n\tp = vec3( dot(p,vec3(127.1,311.7,213.6)),\n\t\t\t  dot(p,vec3(327.1,211.7,113.6)),\n\t\t\t  dot(p,vec3(269.5,183.3,351.1)) );\n\treturn -1. + 2.*fract(sin(p)*43758.5453123);\n}\nfloat noise3( in vec3 p ) {\n    vec3 i = floor(p), f = fract(p);\n\tvec3 u = f*f*(3.-2.*f);\n    return mix(\n\t\t   mix( mix( dot( hash3( i + vec3(0.,0.,0.) ), f - vec3(0.,0.,0.) ), \n                     dot( hash3( i + vec3(1.,0.,0.) ), f - vec3(1.,0.,0.) ), u.x),\n                mix( dot( hash3( i + vec3(0.,1.,0.) ), f - vec3(0.,1.,0.) ), \n                     dot( hash3( i + vec3(1.,1.,0.) ), f - vec3(1.,1.,0.) ), u.x), u.y),\n           mix( mix( dot( hash3( i + vec3(0.,0.,1.) ), f - vec3(0.,0.,1.) ), \n                     dot( hash3( i + vec3(1.,0.,1.) ), f - vec3(1.,0.,1.) ), u.x),\n                mix( dot( hash3( i + vec3(0.,1.,1.) ), f - vec3(0.,1.,1.) ), \n                     dot( hash3( i + vec3(1.,1.,1.) ), f - vec3(1.,1.,1.) ), u.x), u.y),\n\t\t   u.z);\n}\n\n\nvec3 colormap(float value) {\n\tfloat maxv = ClampLevel;\n\tvec3 c1,c2;\n\tfloat t;\n\tif (value < maxv / 3.) {\n\t\tc1 = vec3(0.);   \t c2 = vec3(1.,0.,0.);\n\t\tt =  1./3.;\n\t} else if (value < maxv * 2. / 3.) {\n\t\tc1 = vec3(1.,0.,0.); c2 = vec3(1.,1.,.5);\n\t\tt =  2./3. ;\n\t} else {\n\t\tc1 = vec3(1.,1.,.5); c2 = vec3(1.,1.,1.);\n\t\tt =  1.;\n\t}\n\tt = (t*maxv-value)/(maxv/3.);\n\treturn t*c1 + (1.-t)*c2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) { // --------------------------------------\n    t = iTime;\n    vec2 uv = fragCoord.xy/ iResolution.y;\n\t\n #if Anim\n\tfloat cycle = cos(mod(-t,100.)/100.*2.*3.14);\n\tfloat n_tiles_level_1 = exp(cycle*cycle*20.)*pow(2.,20.);\n#else\n\tfloat n_tiles_level_1 = exp(iMouse.x/iResolution.x*20.)*pow(2.,20.);\n#endif\n\t\n\t// zoom and centering\n\tuv = (uv - vec2(.9,.5))*n_tiles_level_1 + vec2(.9,.5);\n\t\n\tfloat theta = 4.+.01*t; // some rotations, not necessary\n    mat2 m = .5*mat2( cos(theta),sin(theta), \n\t\t\t\t\t -sin(theta),cos(theta) );\n\t\t\n  // integrate the noise in depth\n  float dtot = 0.;\n#define NBZ 4.\n#define DZ .01\n  for (float z=0.; z <DZ; z += DZ/NBZ) {\n\t\t\n\t// computation of the multiplicative noise\n\tfloat d = 1.; // density\n\tfloat q = 1.;\n\tfor (float i = 0.; i < NOctaves; i++) {\t\t\n\t\tif (d<1e-2) continue;\n\t\t\n\t\t// multiply the amplitude to maintain the total density\n\t\tfloat c = (i+1.< NOctaves) ? 2. : 1.;\n\t\tfloat n = c* 0.5*(1.+noise3(vec3(uv,z) + 10.*i*i));\n\t\t// compute only the visible scales\n\t\tfloat crit = n_tiles_level_1 *q - iResolution.x/LimitDetails;\n\t\tif (crit < SmoothZone) {\n\t\t\tif (crit>0.) {  // avoid aliasing\n\t\t\t\tfloat t = crit/SmoothZone;\n\t\t\t\tn = n*(1.-t) + t; \n\t\t\t}\n\t\t\td *= n;\n\t\t}\t\n\t\tuv = m*uv; q*= .5; // go to the next octave\n\t}\n  dtot += d;\n  }\n\t\n  dtot /= NBZ;\n  fragColor.xyz = (keyToggle(67)) ? vec3(dtot) :colormap(dtot);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}