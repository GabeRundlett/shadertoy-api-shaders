{
    "Shader": {
        "info": {
            "date": "1724969344",
            "description": "Comparison of two very different mechanisms by which a bubble may appear more transparent at center.\nFullscreen recommended.\nMouse click to set index of refraction.",
            "flags": 0,
            "hasliked": 0,
            "id": "lcBBWh",
            "likes": 4,
            "name": "Bubble thickness and reflection",
            "published": 3,
            "tags": [
                "reflection",
                "analytical",
                "fresnel"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 124
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// Comparison of two very different mechanisms by which a bubble\n// may appear more transparent at center. Fullscreen recommended.\n// Mouse click to set index of refraction.\n\n// Pictured are 3 bubbles, as well as plots of their obliquity\n// functions (i.e. f(θ)/f(0); except we use the impact\n// parameter x instead, to allow x>R).\n// Red bubble represents emissive layer (e.g. glowing fog;\n// no reflection/refraction/scattering) of constant density\n// with thickness w.\n// The explicit expression for slant thickness is\n//     f(x)=0,                                           if x>R+w/2\n//     f(x)=2*sqrt((R+w/2)^2-x^2),                       if R-w/2<=x=<R+w/2\n//     f(x)=2*(sqrt((R+w/2)^2-x^2)-sqrt((R-w/2)^2-x^2)), if x<R-w/2\n// the x<R-w/2 case can be rewritten as\n//     f(x)=4*R*w/(sqrt((R+w/2)^2-x^2)+sqrt((R-w/2)^2-x^2))\n// which for w->0 becomes\n//     f(x) -> 2*w*R/sqrt(R^2-x^2)=2*w/cos(θ)\n// where θ=asin(x/R), giving asymptotic obliquity function.\n// Green bubble is similar to red, but uses quartic gaussian\n// density:\t\n//     \tρ(r)=exp(-(r^2-R^2)^2/(8*R^2*σ^2))\n// See https://www.shadertoy.com/view/MXGSRc for the conjectured\n// explicit expression.\n// It behaves similarly to constant-density case with w=sqrt(2*π)*σ.\n// Blue bubble is Fresnel reflection factor for equal mixture of\n// s- and p-polarized light. The expression is for single reflection,\n// even though in practice several may take place (geometric ray\n// intersects bubble up to 4 times). Reflected light is assumed\n// uniform in color.\n\n//==============================================================================\n\nconst float pi=3.14159265358979;\n\n//==============================================================================\n// Thickness of constant layer.\n\nfloat f_const(float w,float R,float x)\n{\n    x=abs(x);\n    if(x>R+0.5*w) return 0.0;\n    if(x>R-0.5*w) return 2.0*sqrt((R+0.5*w+x)*(R+0.5*w-x));\n    return 2.0*(sqrt((R+0.5*w+x)*(R+0.5*w-x))-sqrt((R-0.5*w+x)*(R-0.5*w-x)));\n}\n\n//==============================================================================\n// Thickness of quartic gaussian layer.\n// Based on https://www.shadertoy.com/view/MXGSRc.\n\n// Approximation of exp(x^4) * ∫ exp(-(t^2+x^2)^2) dt on (-∞;+∞).\n// Eabs<1.4e-3\n// Erel<1.5e-3\nfloat Splus(float x)\n{\n    const float a=1.28125;\n    x=a/sqrt(a*a+x*x);\n    return x*(+0.976194725+x*(+0.0631268564+x*(+0.126725790+x*(+0.646757582))));\n}\n\n// Approximation of ∫ exp(-(t^2-x^2)^2) dt on (-∞;+∞).\n// Eabs<3.8e-3\n// Erel<1.8e-3\nfloat Sminus(float x)\n{\n    const float T=0.7354603;\n    if(x>T)\n    {\n        const float a=0.65625;\n        x-=T;\n        x=a/sqrt(a*a+x*x);\n        // Eabs<2.99e-3\n        // Erel<1.79e-3\n        return x*(+2.70597718+x*(-3.31399917+x*(+7.48115344+x*(-15.3842784+x*(+18.9716412+x*(-8.30812754))))));\n    }\n    else\n    {\n        // Eabs<3.73e-3\n        // Erel<1.75e-3\n        return +1.81596980+x*(-0.135921521+x*(+2.12158896+x*(-1.78780397)));\n    }\n}\n\nfloat f_gauss(float w,float R,float x)\n{\n    float c=sqrt(8.0)*R*w;\n    float D=(x*x-R*R)/c;\n    return sqrt(c)*(D<0.0?Sminus(sqrt(-D)):Splus(sqrt(+D))*exp(-D*D));\n}\n\n//==============================================================================\n// Fresnel reflection term for equal mixture of s- and p-polarized light.\n// Based on https://www.shadertoy.com/view/XcXXzn.\n// Not actually a good way to calculate it in practice.\n\nfloat f_fresnel(float n,float R,float x)\n{\n    if(x>=R) return 0.0;\n    float a=asin(x/R);\n    float b=asin(x/R/n);\n    float rs=-sin(a-b)/sin(a+b);\n    float rp=+tan(a-b)/tan(a+b);\n    return 0.5*(rs*rs+rp*rp);\n}\n\n//==============================================================================\n\nvec3 plot(vec3 bg,vec3 fg,float x)\n{\n    float a=smoothstep(1.5*fwidth(x),0.0,abs(x));\n    if(true) fg*=a;\n    return mix(bg,fg,a);\n}\n\n//==============================================================================\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv=fragCoord/iResolution.xy,K=floor(2.0*uv);\n    uv=fract(2.0*uv);\n    float R=1.0;  // Bubble radius.\n    float n=2.42; // Index of refraction (diamond).\n    if(length(iMouse.xy)>16.0) n=1.0+4.0*(iMouse.x/iResolution.x);\n    // Pick width yielding same max/min ratio for constant-density\n    // case (max is achieved at R-w/2, not R), and equivalent sigma\n    // for quartic gaussian case.\n    float w=2.0*R*pow((n-1.0)/(n+1.0),4.0),s=w/sqrt(2.0*pi);\n    vec3 col=vec3(0.5);\n    if(K==vec2(0))\n    {\n        float x=1.25*R*uv.x;\n        float y=sqrt(2.0*R/w)*uv.y;\n        col=plot(col,vec3(0.2,0.02,0.02),f_const(w,R,x)/f_const(w,R,0.0)-y);\n        col=plot(col,vec3(0.02,0.2,0.02),f_gauss(s,R,x)/f_gauss(s,R,0.0)-y);\n        col=plot(col,vec3(0.02,0.02,0.2),f_fresnel(n,R,x)/f_fresnel(n,R,1e-4)-y);\n        // Mark |x-R|<w/2 region (and hide the ugliness of the plot).\n        col=mix(col,vec3(0.0625),smoothstep(1.5*fwidth(x),0.0,abs(x-R)));\n        col=mix(col,vec3(0.25),smoothstep(1.5*fwidth(x),0.0,abs(x-(R-0.5*w))));\n        col=mix(col,vec3(0.25),smoothstep(1.5*fwidth(x),0.0,abs(x-(R+0.5*w))));\n        col=mix(12.92*col,1.055*pow(col,vec3(1.0/2.4))-0.055,step(0.0031308,col)); // sRGB\n    }\n    else\n    {\n        vec3 ro=2.0*vec3(cos(iTime),1.0,sin(iTime));\n        vec3 ez=normalize(ro-vec3(0)),ex=normalize(cross(vec3(0,1,0),ez)),ey=cross(ez,ex);\n        vec3 rd=normalize((uv.x-0.5)*iResolution.x/iResolution.y*ex+(uv.y-0.5)*ey-1.0*ez);\n        float t=-ro.y/rd.y;\n        vec3 r=ro+t*rd;\n        col=vec3(0.125)+0.25*mod(dot(floor(2.0*r.xz),vec2(1)),2.0);\n        float p=dot(ro,rd),q=dot(ro,ro)-R*R,d=p*p-q;\n        float x=sqrt(R*R-d);\n        // Compute whether the ray intersects sphere once or\n        // twice. Somewhat of a hack for finite thickness (and\n        // does cause artifacts at intersections). Its usage\n        // for Fresnel case is even more of a hack.\n        float a=(d>0.0&&sqrt(d)-p>t?0.5:1.0);\n        // Scale factors are to match brightness.\n        switch(int(dot(K,vec2(1,2))))\n        {\n            case 1: col+=sqrt(0.125/(R*w))*vec3(2,1,1)*a*f_const(w,R,x); break;\n            case 2: col+=sqrt(0.125/(R*w))*vec3(1,2,1)*a*f_gauss(s,R,x); break;\n            case 3: col=vec3(1,1,2)*f_fresnel(n,R,x)+(d>0.0?pow(1.0-f_fresnel(n,R,x),2.0*a):1.0)*col; break;\n        }\n    }\n    col=mix(12.92*col,1.055*pow(col,vec3(1.0/2.4))-0.055,step(0.0031308,col)); // sRGB\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}