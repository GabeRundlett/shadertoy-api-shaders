{
    "Shader": {
        "info": {
            "date": "1595602142",
            "description": "A fun experiment with not so much code.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "tljyWc",
            "likes": 8,
            "name": "The dunnos",
            "published": 3,
            "tags": [
                "2d",
                "idunno",
                "dunnos",
                "theydunno"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 361
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nconst float PI = 3.14159265;\n\nmat2 r2d(float a){float sa = sin(a);float ca=cos(a);return mat2(ca,sa,-sa,ca);}\n\n\nfloat sat(float a)\n{\n    return clamp(a, 0., 1.);\n}\n\nfloat cir(vec2 p, float r)\n{\n    return length(p)-r;\n}\n\n// Thanks IQ :)\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col;\n    \n    col = mix(vec3(33, 75, 166)/255., vec3(0.1), sat(length(uv)));\n    \n    int i = 0;\n    while (i < 4)\n    {\n        float xPos = float(i)*.2-.25;\n        \n        float yPos = (sin(float(i)*15.)*.2+.5)*mix(-1.,-8., sat(pow(sin(float(i)+iTime*0.9), 5.)));\n        float body = (sdSegment(uv, vec2(xPos*1.5, -1.), vec2(xPos,.3*yPos))-.05);\n        col = mix(vec3(0.), col, sat(body*200.));\n\t\tvec2 headP = vec2(xPos, .3*yPos);\n        vec2 blink = vec2(1., 1.-max(pow(sin(iTime*4.-float(i)*1.2), 50.), 0.1));\n        float eyes = min(cir((uv-headP-vec2(0.02, 0.002*abs(uv.x)))/blink,.01), cir((uv-headP-vec2(-0.02, 0.02*(uv.x)))/blink, .01));\n        col = mix(vec3(235, 202, 19)/255., col, sat(eyes*400.));\n        ++i;\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\t \n    vec3 col = rdr(uv);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}