{
    "Shader": {
        "info": {
            "date": "1456692236",
            "description": "Saw this posted by Guil /MtX3Ws and had to personalize it a bit. This shader has been passed around a bit to say the least.",
            "flags": 0,
            "hasliked": 0,
            "id": "lsG3D3",
            "likes": 62,
            "name": "Another Marble",
            "published": 3,
            "tags": [
                "procedural",
                "3d",
                "fractal"
            ],
            "usePreview": 0,
            "username": "KylBlz",
            "viewed": 1716
        },
        "renderpass": [
            {
                "code": "// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Modified from S. Guillitte 2015\n#define tex(a,b) textureLod(a,b,0.)\n\nfloat zoom=1.25, size = 0.19;\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 csqr( vec2 a )  { return vec2( a.x*a.x - a.y*a.y, 2.*a.x*a.y  ); }\n\nvec3 ACESFilm( vec3 x ) {\n\tfloat a = 2.51;\n\tfloat b = 0.03;\n\tfloat c = 2.43;\n\tfloat d = 0.59;\n\tfloat e = 0.14;\n\treturn clamp((x*(a*x+b))/(x*(c*x+d)+e), 0.0, 1.0);\n}\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nvec2 iSphere( in vec3 ro, in vec3 rd, in vec4 sph ) { //from iq\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-1.0);\n\th = sqrt(h);\n\treturn vec2(-b-h, -b+h );\n}\n\nfloat map(in vec3 p) {\n\t\n\tfloat res = 0., st = cos(iTime*.1)*.4;\n\t\n    vec3 c = p;\n\tfor (int i = 0; i < 6; ++i) {\n        p =.4*abs(p)/dot(p,p) - .3 + st;\n        p.yz= csqr(p.yz);\n        res += exp(-20. * abs(dot(p,c)));\n\t}\n\treturn res*0.325;\n}\n\nvec3 raymarch( in vec3 ro, vec3 rd, vec2 tminmax ) {\n    float t = tminmax.x, m = cos(iTime * .1) - 5.;\n    float dt = (tminmax.y / tminmax.x) * 0.25;\n    vec3 col = vec3(0.);\n    float c = 0.;\n    for( int i=0; i<192; i++ ) {\n        t+=dt*exp(m*c);\n        if(t>tminmax.y)break;\n        vec3 pos = (ro+t*rd)*size;\n        c = map(pos);               \n        col += vec3(c*(c+0.5)*c*c-pos.z, c*c*c-pos.y, c*c-pos.x) + rd*rd*c*c;//get some hues in here\n    }    \n    return col * 0.003;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat time = iTime;\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.);\n    \n\tif ( iMouse.z>0.0 )\n        m = iMouse.xy/iResolution.xy*3.14;\n    m-=.5;\n\n    // camera\n    vec3 ro = zoom*vec3(4.);\n    ro.yz*=rot(m.y);\n    ro.xz*=rot(m.x+ -0.1*time);\n    vec3 ta = vec3( 0.0 , 0.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 4.0*ww );\n    vec2 tmm = iSphere( ro, rd, vec4(0.,0.,0.,2.) );\n\n\t// raymarch, but bring tMin down because glass does that\n    vec3 col = raymarch(ro,rd,tmm * vec2(0.6, 1.0));\n    if (tmm.x<0.) col = tex(iChannel0, rd).rgb * 2.0;\n    else {\n        vec3 nor=(ro+tmm.x*rd)/2.;\n        nor = reflect(rd, nor);        \n        float fre = pow(.5+ clamp(dot(nor,rd),0.0,1.0), 3. )*1.2;\n        col += tex(iChannel0, nor).rgb * fre;\n    }\n\t\n\t// shade\n    col = ACESFilm(col);\n\tcol = col*col*col*col;\n    fragColor = vec4( col, 1.0 );\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 24,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}