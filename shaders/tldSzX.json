{
    "Shader": {
        "info": {
            "date": "1581469468",
            "description": "Controllably anisotropic Gabor-like noise based on OpenSimplex2 instead of Voronoi-esque control point placement. Intended for proof of concept moreso than performance.",
            "flags": 0,
            "hasliked": 0,
            "id": "tldSzX",
            "likes": 7,
            "name": "\"Simplex-Gabor\" Noise",
            "published": 3,
            "tags": [
                "noise",
                "simplex",
                "gabor"
            ],
            "usePreview": 0,
            "username": "KdotJPG",
            "viewed": 748
        },
        "renderpass": [
            {
                "code": "bool ANIMATE = true;\nfloat noiseFrequency = 16.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / max(iResolution.x, iResolution.y);\n    vec3 X = vec3(uv * noiseFrequency, ANIMATE ? mod(iTime, 578.0) * 0.8660254037844386 : 0.0);\n    \n    vec3 direction = vec3(normalize(uv+.2), 0.0);\n    float sinusoidFrequencyScalar = 12.0;\n    \n    float value = simplexGaborNoise_XYBeforeZ(X, direction * sinusoidFrequencyScalar);\n    \n    value = value * 0.5 + 0.5;\n    vec3 col = vec3(value);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "////////////////// K.jpg's Smooth Re-oriented 8-Point BCC Noise //////////////////\n////////////////////// a.k.a. OpenSimplex2, Smooth Version ///////////////////////\n///////////// Modified to produce a Gabor noise like output instead. /////////////\n//////////////////// Output: vec4(dF/dx, dF/dy, dF/dz, value) ////////////////////\n\n// Borrowed from Stefan Gustavson's noise code\nvec4 permute(vec4 t) {\n    return t * (t * 34.0 + 133.0);\n}\n\n// BCC lattice split up into 2 cube lattices\nvec2 simplexGaborNoisePart(vec3 X, vec3 dir) {\n    vec3 b = floor(X);\n    vec4 i4 = vec4(X - b, 2.5);\n    \n    // Pick between each pair of oppposite corners in the cube.\n    vec3 v1 = b + floor(dot(i4, vec4(.25)));\n    vec3 v2 = b + vec3(1, 0, 0) + vec3(-1, 1, 1) * floor(dot(i4, vec4(-.25, .25, .25, .35)));\n    vec3 v3 = b + vec3(0, 1, 0) + vec3(1, -1, 1) * floor(dot(i4, vec4(.25, -.25, .25, .35)));\n    vec3 v4 = b + vec3(0, 0, 1) + vec3(1, 1, -1) * floor(dot(i4, vec4(.25, .25, -.25, .35)));\n    \n    // Gradient hashes for the four vertices in this half-lattice.\n    vec4 hashes = permute(mod(vec4(v1.x, v2.x, v3.x, v4.x), 289.0));\n    hashes = permute(mod(hashes + vec4(v1.y, v2.y, v3.y, v4.y), 289.0));\n    hashes = mod(permute(mod(hashes + vec4(v1.z, v2.z, v3.z, v4.z), 289.0)), 48.0);\n    vec4 sineOffsets = hashes / 48.0 * 3.14159265 * 4.0;\n    \n    // Gradient extrapolations are replaced with sin(dot(dX, inputVector) + pseudorandomOffset)\n    vec3 d1 = X - v1; vec3 d2 = X - v2; vec3 d3 = X - v3; vec3 d4 = X - v4;\n    vec4 a = max(0.75 - vec4(dot(d1, d1), dot(d2, d2), dot(d3, d3), dot(d4, d4)), 0.0);\n    vec4 aa = a * a; vec4 aaa = aa * a;\n    vec4 extrapolations = vec4(dot(d1, dir), dot(d2, dir), dot(d3, dir), dot(d4, dir)) + sineOffsets;\n    extrapolations = sin(extrapolations);\n    \n    // Return (kernels^3) * sinusoids, and just (kernels^3), so we can average them later\n    return vec2(dot(aaa, extrapolations), dot(aaa, vec4(1.0)));\n}\n\n// Rotates domain, but preserve shape. Hides grid better in cardinal slices.\n// Good for texturing 3D objects with lots of flat parts along cardinal planes.\nfloat simplexGaborNoise_Classic(vec3 X, vec3 dir) {\n    X = dot(X, vec3(2.0/3.0)) - X;\n    dir = dot(dir, vec3(2.0/3.0)) - dir;\n    \n    vec2 both = simplexGaborNoisePart(X, dir) + simplexGaborNoisePart(X + 144.5, dir);\n    return both.x / both.y;\n}\n\n// Gives X and Y a triangular alignment, and lets Z move up the main diagonal.\n// Might be good for terrain, or a time varying X/Y plane. Z repeats.\nfloat simplexGaborNoise_XYBeforeZ(vec3 X, vec3 dir) {\n    \n    // Not a skew transform.\n    mat3 orthonormalMap = mat3(\n        0.788675134594813, -0.211324865405187, -0.577350269189626,\n        -0.211324865405187, 0.788675134594813, -0.577350269189626,\n        0.577350269189626, 0.577350269189626, 0.577350269189626);\n    \n    X = orthonormalMap * X;\n    dir = orthonormalMap * dir;\n    vec2 both = simplexGaborNoisePart(X, dir) + simplexGaborNoisePart(X + 144.5, dir);\n    return both.x / both.y;\n}\n\n//////////////////////////////// End noise code ////////////////////////////////",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}