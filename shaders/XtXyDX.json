{
    "Shader": {
        "info": {
            "date": "1506560162",
            "description": "5 minutes exercise to duplicate the Breathing Exercise from Google: [url]https://www.google.com/search?q=breathing+exercise[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "XtXyDX",
            "likes": 2,
            "name": "Breathing Exercise 165/252 char",
            "published": 3,
            "tags": [
                "circles",
                "golf",
                "google",
                "breathing"
            ],
            "usePreview": 0,
            "username": "starea",
            "viewed": 632
        },
        "renderpass": [
            {
                "code": "// starea@shadertoy\n// link to demo: https://www.shadertoy.com/view/XtXyDX\n// advise taken from Dr. Neyret.\n/*\n#define mainImage( O, U )                                     \\\n    float l = length( U+U - (O.xy=iResolution.xy) ) / O.y,    \\\n          t = iTime * .5;                                     \\\n    O =   l < .1 + .3 * abs(sin(t)) ? vec4(1)                \\\n        : l < .5 + .1 * abs(cos(t)) ? vec4(.35, .55, .95, 1) \\\n        :                             vec4(.4, .6, 1, 1)\n*/\n// the preview does not compile the macros\nconst vec4 BACKGROUND = vec4(.4, .6, 1, 1),\n           INNER      = vec4(1),\n           INBETWEEN  = vec4(.35, .55, .95, 1);\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n\tU = ( U+U -  iResolution.xy ) / iResolution.y;\n    float l = length(U),\n          t = iTime * .5;\n    O =   l < .1 + .3 * abs(sin(t)) ? INNER \n        : l < .5 + .1 * abs(cos(t)) ? INBETWEEN \n        :                             BACKGROUND;\n}\n\n/*\nconst vec3 BACKGROUND = vec3(0.4, 0.6, 1.0);\nconst vec3 INNER = vec3(1.0);\nconst vec3 INBETWEEN = vec3(0.35, 0.55, 0.95);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// vec2 uv = (2.0 * fragCoord.xy / iResolution.xy - 1.0) * (iResolution.xy / iResolution.yy);\n\tvec2 uv = (2. * fragCoord -  iResolution.xy ) / iResolution.y;\n    vec3 col = length(uv - vec2(0.0)) < 0.53 + 0.1 * abs(cos(iTime * 0.5)) ? INBETWEEN : BACKGROUND;\n    if (length(uv - vec2(0.0)) < 0.1 + 0.4 * abs(sin(iTime * 0.5))) col = INNER; \n    fragColor = vec4(col, 1.0); \n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}