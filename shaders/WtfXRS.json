{
    "Shader": {
        "info": {
            "date": "1563281152",
            "description": "Drone flight through the twisted forest...",
            "flags": 0,
            "hasliked": 0,
            "id": "WtfXRS",
            "likes": 14,
            "name": "Flying the Twisted Forest",
            "published": 3,
            "tags": [
                "forest",
                "flight",
                "drone",
                "succulent"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 495
        },
        "renderpass": [
            {
                "code": "// \"Flying the Twisted Forest\" by dr2 - 2019\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define AA    0  // optional antialiasing\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCylAnDf (vec3 p, float r, float w, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat Minv3 (vec3 p);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec2 Hashv2v2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nmat3 flMat;\nvec3 flPos, sunDir, qHit;\nvec2 gId, obOff, obRand, csProp;\nfloat dstFar, tCur, trSzFac, hgSize, treeHt;\nint idObj;\nconst float pi = 3.14159, sqrt3 = 1.7320508;\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nvec3 TrackPos (float t)\n{\n  return vec3 (8. * cos (0.1 * t) + 0.1 * t, 0., t);\n}\n\nvec3 TrackVel (float t)\n{\n  return vec3 (-0.1 * 8. * sin (0.1 * t) + 0.1, 0., 1.);\n}\n\nvec3 TrackAcc (float t)\n{\n  return vec3 (-0.1 * 0.01 * 8. * cos (0.1 * t), 0., 0);\n}\n\nfloat ObjCDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, r, y;\n  dMin = dstFar;\n  if (trSzFac > 0.) {\n    dMin /= trSzFac;\n    p.xz -= HexToPix (gId * hgSize) + obOff;\n    p /= trSzFac;\n    q = p;\n    q.y -= treeHt;\n    y = 0.5 * (1. + q.y / treeHt);\n    r = 0.35 * (1. - 0.5 * obRand.y) * (1. - 0.9 * y * y);\n    r *= 1. + 0.1 * sin (24. * (1. + obRand.y) * pi * y);\n    r += 0.2 * (1. - smoothstep (0., 0.1, y));\n    q.xz += Rot2D (vec2 (0.2 + 0.2 * obRand.x, 0.),\n       12. * pi * sign (obRand.x - 0.5) * (0.3 + 0.7 * obRand.y) * y + pi * obRand.x);\n    q.x += 0.5 * (0.4 + 0.6 * obRand.y) * y;\n    q.xz = abs (q.xz) - 0.3 * r;\n    d = PrCylDf (q.xzy, r, treeHt);\n    DMINQ (1);\n    q = p;\n    q.y -= 0.05;\n    q.xz += Rot2D (vec2 (0.2 + 0.2 * obRand.x, 0.), pi * obRand.x);\n    q.xz = abs (q.xz) - 0.3 * r - 0.4;\n    d = max (PrSphDf (q, 0.12), - q.y);\n    DMINQ (2);\n    dMin *= 0.6 * trSzFac;\n  }\n  return dMin;\n}\n\nfloat PathDst (vec2 p)\n{\n  float s;\n  s = abs (p.x - TrackPos (p.y).x) - 1.8;\n  return s * step (0., s) * step (0.5, Fbm2 (0.5 * p));\n}\n\nvoid SetObjConf ()\n{\n  float h;\n  obRand = Hashv2v2 (73.3 * gId + 77.);\n  h = PathDst (HexToPix (gId * hgSize));\n  if (h == 0. || obRand.x + obRand.y < 0.6) trSzFac = 0.;\n  else {\n    trSzFac = hgSize * 0.5 * sqrt3 * (0.6 + 0.4 * smoothstep (0., 1., h)) *\n       (0.75 - 0.25 * clamp (3. * (obRand.x - 0.5), -1., 1.));\n    obOff = hgSize * max (0., 0.4 * sqrt3 - trSzFac) * obRand.x *\n       sin (2. * pi * obRand.y + vec2 (0.5 * pi, 0.));\n  }\n}\n\nfloat ObjCRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s, eps;\n  eps = 0.0005;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  gIdP = vec2 (-99.);\n  dHit = 0.;\n  for (int j = 0; j < 220; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = Minv3 (hv);\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetObjConf ();\n    }\n    d = ObjCDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < eps || dHit > dstFar || p.y < 0. || p.y > 2. * treeHt) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjCNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (- ObjCDf (p + e.xxx), ObjCDf (p + e.xyy), ObjCDf (p + e.yxy), ObjCDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjCSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  gIdP = vec2 (-99.);\n  for (int j = 0; j < 30; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetObjConf ();\n    }\n    h = ObjCDf (p);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.1, 0.3);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d;\n  const float flSzFac = 0.5;\n  dMin = dstFar;\n  dMin /= flSzFac;\n  qq = flMat * (p - flPos) / flSzFac;\n  qq.xz = vec2 (qq.x - qq.z, qq.z + qq.x) / sqrt (2.);\n  q = qq;\n  q.y -= 0.05;\n  d = PrRoundCylDf (q.xzy, 0.2, 0.03, 0.07);\n  DMIN (3);\n  q -= vec3 (-0.7, -0.05, 0.7);\n  d = PrRoundCylDf (q.xzy, 0.07, 0.04, 0.12);\n  DMIN (4);\n  q = qq;\n  q.xz = abs (q.xz) - 0.7;\n  d = min (PrCylAnDf (q.xzy, 0.5, 0.05, 0.05), PrCylDf (q.xzy, 0.1, 0.03));\n  DMIN (3);\n  q.xz = Rot2Cs (q.xz, csProp);\n  d = PrCylDf (q, 0.02, 0.415);\n  DMIN (6);\n  q = qq;\n  q.xz = abs (q.xz);\n  q -= vec3 (0.3, -0.07, 0.3);\n  d = PrRoundCylDf (q.xzy, 0.05, 0.03, 0.15);\n  DMIN (3);\n  q -= vec3 (-0.3, 0.13, -0.3);\n  q.xz = vec2 (q.x - q.z, q.z + q.x) / sqrt (2.);\n  d = min (PrRoundCylDf (q, 0.05, 0.02, 1.), PrRoundCylDf (q.zyx, 0.05, 0.02, 1.));\n  DMIN (3);\n  q = qq;\n  q.y -= -0.05;\n  d = PrSphDf (q, 0.17);\n  DMIN (5);\n  return flSzFac * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (- ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 30; j ++) {\n    p = ro + d * rd;\n    h = ObjDf (p);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (h, 0.1, 0.3);\n    if (sh < 0.05) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol;\n  vec2 q;\n  float f, fd, ff;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = 0.7 * mix (vec3 (0.4, 0.5, 0.7), vec3 (0.3, 0.45, 0.55),\n       smoothstep (-0.02, 0.01, rd.y));\n  } else if (rd.y > 0.) {\n    q = 0.005 * (ro.xz + tCur * vec2 (0.5, 2.) + ((200. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.1, 0.8, ff);\n    fd = smoothstep (0.1, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.8 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    fd = smoothstep (0.01, 0.1, rd.y);\n    col = mix (mix (vec3 (0.8, 0.8, 0.75), vec3 (0.4, 0.5, 0.8), 0.3 + 0.7 * fd), clCol,\n       0.1 + 0.9 * f * fd);\n  } else {\n    col = vec3 (0.1, 0.2, 0.1);\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, roo, vn;\n  vec2 vf;\n  float dstObj, dstObjC, dstObjM, dstGrnd, sh, f, a;\n  int idObjC;\n  bool isSky, isGrnd;\n  isSky = false;\n  isGrnd = false;\n  sh = 1.;\n  csProp = sin (3.3 * 2. * pi * tCur + vec2 (0.5 * pi, 0.));\n  dstObjC = ObjCRay (ro, rd);\n  idObjC = idObj;\n  roo = ro;\n  dstGrnd = dstFar;\n  dstObjM = ObjRay (ro, rd);\n  dstObj = min (dstObjM, dstObjC);\n  vf = vec2 (0.);\n  if (dstObj < dstFar) {\n    if (dstObjM < dstObjC) {\n      ro += dstObjM * rd;\n      vn = ObjNf (ro);\n      if (idObj == 3) col4 = vec4 (1., 0.9, 0.1, 0.5);\n      else if (idObj == 4) col4 = mix (vec4 (0.3, 0.3, 1., 0.2),\n         vec4 (1., 0., 0., 0.2), step (0., sin (10. * tCur)));\n      else if (idObj == 5) col4 = vec4 (0.1, 0.1, 0.1, 1.);\n      else if (idObj == 6) col4 = vec4 (1., 1., 0.5, 0.5);\n    } else {\n      ro += dstObjC * rd;\n      gId = PixToHex (ro.xz / hgSize);\n      vn = ObjCNf (ro);\n      a = atan (qHit.z, - qHit.x) / pi;\n      if (idObjC == 1) {\n        f = smoothstep (-0.9, -0.7, qHit.y / treeHt);\n        col4 = mix ((1. - 0.6 * obRand.x) * vec4 (0.6, 0.4, 0., 0.),\n           vec4 (0., 0.4 + 0.6 * obRand.y, 0.1, 0.05), f) *\n           (0.8 + 0.2 * SmoothBump (0.1, 0.9, 0.05, mod (8. * a, 1.)));\n        vf = vec2 (16., (3. - 2.5 * f) * (1. - smoothstep (0.1, 0.3, dstObjC / dstFar)));\n      } else if (idObjC == 2) {\n        col4 = mix (vec4 (0.8, 0.1, 0., 0.3), vec4 (0.7, 0.7, 0., 0.3), step (0.6, obRand.y)) *\n           (0.5 + 0.5 * SmoothBump (0.1, 0.9, 0.05, mod (4. * a, 1.)));\n        vf = vec2 (32., 1.);\n      }\n    }\n  } else if (rd.y < 0.) {\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    col4 = mix (vec4 (0.3, 0.1, 0., 0.), vec4 (0.05, 0.3, 0., 0.), Fbm2 (2. * ro.xz));\n    vn = vec3 (0., 1., 0.);\n    vf = vec2 (4., 12. * (1. - smoothstep (0.1, 0.3, dstGrnd / dstFar)));\n    isGrnd = true;\n  } else isSky = true;\n  if (! isSky) {\n    if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n    sh = min (ObjCSShadow (ro, sunDir), ObjSShadow (ro, sunDir));\n    col = col4.rgb * (0.2 + 0.1 * max (dot (vn, - sunDir), 0.) +\n       0.8 * sh * max (dot (vn, sunDir), 0.)) + col4.a * smoothstep (0.8, 1., sh) *\n       pow (max (dot (normalize (sunDir - rd), vn), 0.), 32.);\n    col = mix (col, BgCol (roo, rd), smoothstep (0.8, 0.95, min (dstGrnd, dstObj) / dstFar));\n  } else col = BgCol (ro, rd);\n  return clamp (col, 0., 1.);\n}\n\nvoid FlyerPM (float t)\n{\n  vec3 vd, cb, sb;\n  float flYaw, flRol;\n  flPos = TrackPos (t);\n  vd = TrackVel (t);\n  flYaw = -0.5 * pi - atan (vd.z, - vd.x);\n  flRol = 60. * TrackAcc (t).x;\n  cb = cos (vec3 (-0.1 * pi, flYaw, flRol));\n  sb = sin (vec3 (-0.1 * pi, flYaw, flRol));\n  flMat = mat3 (1., 0., 0., 0., cb.x, - sb.x, 0., sb.x, cb.x) *\n          mat3 (cb.z, - sb.z, 0., sb.z, cb.z, 0., 0., 0., 1.) *\n          mat3 (cb.y, 0., - sb.y, 0., 1., 0., sb.y , 0., cb.y);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur;\n  vec3 ro, rd, vd, col;\n  vec2 canvas, uv, uvs, ori, ca, sa, mMid, ut, mSize;\n  float el, az, asp, winHt, vuId, zmFac, sr, spd, s;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uvs = uv;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  winHt = 0.85;\n  mSize = (1./5.) * vec2 (asp, 1.) * winHt;\n  mMid = vec2 (asp * (1. - mSize.y), - winHt + mSize.y);\n  ut = abs (uv - mMid) - mSize;\n  vuId = 0.;\n  if (max (ut.x, ut.y) < 0.) {\n    uv = (uv - mMid) / mSize.y;\n    vuId = 1.;\n  }\n  tCur = mod (tCur, 2400.) + 30. * floor (dateCur.w / 7200.);\n  hgSize = 1.;\n  treeHt = 10.;\n  spd = 5.;\n  ro = TrackPos (spd * tCur);\n  ro.y = 0.3 * treeHt;\n  vd = TrackVel (spd * tCur);\n  el = -0.05 * pi;\n  az = atan (vd.x, vd.z);\n  if (mPtr.z > 0.) {   \n    el += 0.4 * pi * mPtr.y;\n    az += 2.2 * pi * mPtr.x;\n  }\n  if (vuId == 1.) az += pi;\n  s = abs (az) > 0.5 * pi ? -1. : 1.;\n  FlyerPM (spd * tCur + 6. * s);\n  flPos.y = (0.25 + 0.1 * s * sin (0.1 * tCur)) * treeHt;\n  ori = vec2 (clamp (el, -0.5 * pi, 0.45 * pi), az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  dstFar = 100.;\n  sunDir = normalize (vec3 (0., 1., -0.7));\n  sunDir.xz = Rot2D (sunDir.xz, 0.3 * pi * sin (0.1 * tCur));\n  zmFac = 2.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  if (abs (uvs.y) < winHt) {\n    sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n    for (float a = 0.; a < naa; a ++) {\n      rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n         sr * (0.667 * a + 0.5) * pi), zmFac));\n      col += (1. / naa) * ShowScene (ro, rd);\n    }\n  }\n  if (max (ut.x, ut.y) < 0. && min (abs (ut.x), abs (ut.y)) * canvas.y < 2.)\n     col = vec3 (0., 0., 0.4);\n  if (vuId == 0.) col *= 1. - smoothstep (0.99 * winHt, winHt, abs (uvs.y));\n  fragColor = vec4 (pow (col, vec3 (0.8)), 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  return min (min (max (dxy + rt, dz), max (dxy, dz + rt)), length (vec2 (dxy, dz) + rt) - rt);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}