{
    "Shader": {
        "info": {
            "date": "1709277795",
            "description": "Beginning of something",
            "flags": 0,
            "hasliked": 0,
            "id": "lXsSRN",
            "likes": 40,
            "name": "Dawn",
            "published": 3,
            "tags": [
                "procedural",
                "2d",
                "space"
            ],
            "usePreview": 0,
            "username": "cmzw",
            "viewed": 813
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 uv = I/R;\n    vec2 p = (2.*I - R) / R.y * 1.5;\n    \n    float fp = pow(.5/length(pow(abs(r(p,.43))\n        *vec2(2,1),vec2(.5))),4.5);\n       \n    p *= mat2(.7,-.5,-.4,1.2);    \n    vec3 pos = normalize(vec3(r(p,-.4/length(p)),.25));\n    pos.z -= iTime*2.;\n    \n    vec3 q = 6.*pos;\n    float f  = 0.5000*noise( q ); q = q*2.;\n          f += 0.2500*noise( q ); q = q*2.;\n          f += 0.1250*noise( q ); q = q*2.;\n          f += 0.0625*noise( q );\n    \n    vec2 n = uv*(1.-uv)*3.; float v = pow(n.x*n.y,.8);\n    \n    float fr = .6/length(p);\n    f = smoothstep(-.4,2.,f*f) * fr*fr + fp;\n    \n    O = vec4(aces_tonemap(\n        pow(f*f * vec3(2., .05, .0)*v,vec3(.45))*3.5),0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// https://www.shadertoy.com/view/4sfGzS\nfloat hash( ivec3 p )    // this hash is not production ready, please\n{                        // replace this by something better\n\n    // 3D -> 1D\n    int n = p.x*3 + p.y*113 + p.z*311;\n\n    // 1D hash by Hugo Elias\n\tn = (n << 13) ^ n;\n    n = n * (n * n * 15731 + 789221) + 1376312589;\n    return float( n & ivec3(0x0fffffff))/float(0x0fffffff);\n}\n\nfloat noise( in vec3 x )\n{\n    ivec3 i = ivec3(floor(x));\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+ivec3(0,0,0)), \n                        hash(i+ivec3(1,0,0)),f.x),\n                   mix( hash(i+ivec3(0,1,0)), \n                        hash(i+ivec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+ivec3(0,0,1)), \n                        hash(i+ivec3(1,0,1)),f.x),\n                   mix( hash(i+ivec3(0,1,1)), \n                        hash(i+ivec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// https://www.shadertoy.com/view/XsGfWV\nvec3 aces_tonemap(vec3 color){\t\n\tmat3 m1 = mat3(\n        0.59719, 0.07600, 0.02840,\n        0.35458, 0.90834, 0.13383,\n        0.04823, 0.01566, 0.83777\n\t);\n\tmat3 m2 = mat3(\n        1.60475, -0.10208, -0.00327,\n        -0.53108,  1.10813, -0.07276,\n        -0.07367, -0.00605,  1.07602\n\t);\n\tvec3 v = m1 * color;    \n\tvec3 a = v * (v + 0.0245786) - 0.000090537;\n\tvec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n\treturn pow(clamp(m2 * (a / b), 0.0, 1.0), vec3(1.0 / 2.2));\t\n}\n\nvec2 r(vec2 p, float a) { return p*mat2(cos(a), sin(a), -sin(a), cos(a)); }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}