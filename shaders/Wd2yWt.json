{
    "Shader": {
        "info": {
            "date": "1591684368",
            "description": "eggs",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd2yWt",
            "likes": 1,
            "name": "eggs",
            "published": 3,
            "tags": [
                "eggs"
            ],
            "usePreview": 0,
            "username": "ga354",
            "viewed": 278
        },
        "renderpass": [
            {
                "code": "                // Some useful functions\n                vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n                vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n                vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n                //\n                // Description : GLSL 2D simplex noise function\n                //      Author : Ian McEwan, Ashima Arts\n                //  Maintainer : ijm\n                //     Lastmod : 20110822 (ijm)\n                //     License :\n                //  Copyright (C) 2011 Ashima Arts. All rights reserved.\n                //  Distributed under the MIT License. See LICENSE file.\n                //  https://github.com/ashima/webgl-noise\n                //\n                float snoise(vec2 v) {\n\n                    // Precompute values for skewed triangular grid\n                    const vec4 C = vec4(0.211324865405187,\n                                        // (3.0-sqrt(3.0))/6.0\n                                        0.366025403784439,\n                                        // 0.5*(sqrt(3.0)-1.0)\n                                        -0.577350269189626,\n                                        // -1.0 + 2.0 * C.x\n                                        0.024390243902439);\n                                        // 1.0 / 41.0\n\n                    // First corner (x0)\n                    vec2 i  = floor(v + dot(v, C.yy));\n                    vec2 x0 = v - i + dot(i, C.xx);\n\n                    // Other two corners (x1, x2)\n                    vec2 i1 = vec2(0.0);\n                    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n                    vec2 x1 = x0.xy + C.xx - i1;\n                    vec2 x2 = x0.xy + C.zz;\n\n                    // Do some permutations to avoid\n                    // truncation effects in permutation\n                    i = mod289(i);\n                    vec3 p = permute(\n                            permute( i.y + vec3(0.0, i1.y, 1.0))\n                                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n                    vec3 m = max(0.5 - vec3(\n                                        dot(x0,x0),\n                                        dot(x1,x1),\n                                        dot(x2,x2)\n                                        ), 0.0);\n\n                    m = m*m ;\n                    m = m*m ;\n\n                    // Gradients:\n                    //  41 pts uniformly over a line, mapped onto a diamond\n                    //  The ring size 17*17 = 289 is close to a multiple\n                    //      of 41 (41*7 = 287)\n\n                    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n                    vec3 h = abs(x) - 0.5;\n                    vec3 ox = floor(x + 0.5);\n                    vec3 a0 = x - ox;\n\n                    // Normalise gradients implicitly by scaling m\n                    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n                    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n                    // Compute final noise value at P\n                    vec3 g = vec3(0.0);\n                    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n                    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n                    return 130.0 * dot(m, g);\n                }\n\n  vec3 lin2srgb( vec3 cl )\n        {\n                //cl = clamp( cl, 0.0, 1.0 );\n                vec3 c_lo = 12.92 * cl;\n                vec3 c_hi = 1.055 * pow(cl,vec3(0.41666)) - 0.055;\n                vec3 s = step( vec3(0.0031308), cl);\n                return mix( c_lo, c_hi, s );\n        }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = uv;\n    vec2 r = iResolution.xy;\n    \n    float t = iTime;\n    // Time varying pixel color\n    vec4 col;\n\n//@shader_bot\n#define c(s)d=length(g-vec2(.1-0.01*snoise(p-t/5.)))-s \n#define s smoothstep(e, -e, d)\n//void main(){\nvec2 g=p;g.x*=r.x/r.y;\nfloat d,e;e = fwidth(p).x;\ng=mod(g,.2);\nc(.06)-0.01*snoise(5.*p + t/5.);    \ncol += 1.;\ncol-=s*.2;\nd=c(.015);\ncol-=s*vec4(-.2,.5,3.,.1);\ng-=vec2(0.005);d=c(0.0015);col+=s;\n//}\n    \n    // Output to screen\n    fragColor.xyz = lin2srgb(col.xyz);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}