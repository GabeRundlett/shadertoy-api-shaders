{
    "Shader": {
        "info": {
            "date": "1656296119",
            "description": "My implementation of perlin noise.",
            "flags": 0,
            "hasliked": 0,
            "id": "NsGyRG",
            "likes": 2,
            "name": "Attempting Perlin Noise",
            "published": 3,
            "tags": [
                "2d",
                "noise",
                "perlin"
            ],
            "usePreview": 0,
            "username": "SpinningCube",
            "viewed": 280
        },
        "renderpass": [
            {
                "code": "// Perlin Noise\n\nfloat hash12(vec2 p) // Hash by Dave_Hoskins\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 randUnitVector(vec2 pos) {\n    float angle = 2. * 3.1415926536 * hash12(pos);\n    return vec2(cos(angle), sin(angle));\n}\n\nfloat perlin(vec2 pos) {\n    // Grid cell corner points\n    vec2 p00 = floor(pos);\n    vec2 p01 = p00 + vec2(0, 1);\n    vec2 p11 = p00 + vec2(1, 1);\n    vec2 p10 = p00 + vec2(1, 0);\n    \n    // Random vectors at corner points\n    vec2 r00 = randUnitVector(p00);\n    vec2 r01 = randUnitVector(p01);\n    vec2 r11 = randUnitVector(p11);\n    vec2 r10 = randUnitVector(p10);\n    \n    // Dot product between random vector and distance vector\n    float d00 = dot(r00, pos - p00);\n    float d01 = dot(r01, pos - p01);\n    float d11 = dot(r11, pos - p11);\n    float d10 = dot(r10, pos - p10);\n    \n    \n    // Bicubic interpolation\n    vec2 blend = smoothstep(0., 1., fract(pos));\n    \n    float upper = float(mix(d01, d11, blend.x));\n    float lower = float(mix(d00, d10, blend.x));\n    return 0.8 * mix(lower, upper, blend.y) + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    \n    vec3 col = vec3(uv, 0.);\n    col = vec3(perlin(10. * uv + 0.8 * iTime));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}