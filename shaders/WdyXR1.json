{
    "Shader": {
        "info": {
            "date": "1573341401",
            "description": "codevebmer #9 ",
            "flags": 0,
            "hasliked": 0,
            "id": "WdyXR1",
            "likes": 4,
            "name": "codevember #9 - spring mattress",
            "published": 3,
            "tags": [
                "raymarching",
                "sdf",
                "beginner"
            ],
            "usePreview": 0,
            "username": "desertsky",
            "viewed": 316
        },
        "renderpass": [
            {
                "code": "float sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n  vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat map(vec3 p) {\n\n\tp.x = mod(p.x, 2.+4.)-2.;\n    p.z = mod(p.z-iTime*8., 1.+2.)-1.;\n    \n\n    float s = length(p)-.5;\n    float pl = p.y-.1;\n    \n    float pr = sdHexPrism(p,vec2(1.4,.3));\np.y-=sin(iTime*2.)*6.+sin(iTime)*5.;\n    float tr = sdTorus(vec3(.0,10.,.0)-p,vec2(1.6,.3));\n    float fin = min(pr,s);\n    fin = min(fin,pl);\n\tfin = min(tr,fin);\n    return fin;\n    \n}\n\nfloat RM(vec3 ro, vec3 rd) \n{\n\tfloat t = 0.;  \n    \n    for (int i = 0; i< 120; i++) \n    {\n\t    vec3 pos = ro + rd * t;  \n        float p = map(pos);\n        \n        if(p < .001) break;\n        \n        t+=p;\n        \n        if(t > 100.) break;        \n    }\n    \n    return t;\n    \n}\n\nvec3 n(vec3 p) \n{\n    float d = map(p);\n    vec2 e = vec2(.001,.0);\n    \n    vec3 np = d - vec3(\n        map(p-e.xxy),\n        map(p-e.yxy),\n        map(p-e.yyx)\n        );\n        \n    return normalize(np);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 da = vec3(.0,.2,.4)*pow(uv.y,.1)*((abs(-uv.x)+2.)*2.);\n    vec3 ni = vec3(.001,.001,.2)*pow(uv.y,.6);\n    vec3 sunCol = clamp(mix(ni,da,sin(iTime)),0.,1.);\n    vec3 col = sunCol;\n    vec3 ro = vec3(0.,4.,10.);\n    vec3 rd = vec3(uv,-1.);\n    \n    \n\tfloat p = RM(ro,rd);\n    \n    if(p < 100.) {\n    vec3 pos = ro + p*rd;\n\tcol = vec3(.2);\n        \n    vec3 sun_dir = (vec3(cos(iTime),4.,sin(iTime)));\n    vec3 skyCol = vec3(.0,.2,.4)*(uv.x/2.);\n    float dif = clamp(dot(sun_dir, n(pos)),.0,1.);    \n        \n    col+=dif*vec3(clamp(sin(iTime),-.9,.5));\n    col+=skyCol*clamp(dot(vec3(.0,1.,0.),n(pos)),.0,1.);\n        \n    col+=clamp(dot(vec3(0.,-1.,0.),n(pos)),.0,1.)*.3;\n    }\n   \n    \n    \n    col = pow(col, vec3(.4545));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}