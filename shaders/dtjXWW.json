{
    "Shader": {
        "info": {
            "date": "1680977276",
            "description": "Click and Drag to rotate the camera.\n\nIn my attempt to make a raymarched Menger sponge, I made this instead, and through a bit of searching found out that it is apparently called Cantor dust, a multidimensional representation of the Cantor set.",
            "flags": 0,
            "hasliked": 0,
            "id": "dtjXWW",
            "likes": 7,
            "name": "Ray Marched 3D Cantor Dust",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal",
                "cantor"
            ],
            "usePreview": 0,
            "username": "SpinningCube",
            "viewed": 271
        },
        "renderpass": [
            {
                "code": "/*\n * Ray Marched 3D Cantor Dust\n * \n * In my attempt to make a raymarched Menger sponge, I made this instead, and\n * through a bit of searching found out that it is apparently called Cantor dust,\n * a multidimensional representation of the Cantor set. 3D Cantor dust is also\n * sometimes called the Cantor cube.\n * \n * \n * by SpinningCube\n * \n */\n\nconst float pi = 3.1415926536;\n\n// These two aren't really all that related\nfloat minDist = 0.00002;\nfloat maxDist = 100.0;\n\nvec3 sunDir = vec3(1, 0.5, -0.5); // Vector pointing towards the sun\n\nvec3 ambient = vec3(0.05); // Color of the sky\n\nvec3 planeColor = vec3(0.05, 0.45, 0.8); // Color of the ground plane\n\nmat2 rotate(float a) {\n    float sinA = sin(a);\n    float cosA = cos(a);\n    return mat2(cosA, -sinA, sinA, cosA);\n}\n\nfloat sphere(vec3 samplePos, vec3 spherePos, float radius) {\n    return distance(samplePos, spherePos) - radius;\n}\n\nfloat ground(vec3 samplePos, float y) {\n    return samplePos.y - y;\n}\n\nfloat box(vec3 samplePos, vec3 boxCenter, vec3 boxSize) {   \n    vec3 dist0 = abs(samplePos - boxCenter) - boxSize;\n    return length(max(dist0, 0.0)) + min(0.0, max(max(dist0.x, dist0.y), dist0.z));\n}\n\n// SDF of 3D Cantor dust\n// Made in an attempt to make a Menger sponge\nfloat cantor(vec3 samplePos, vec3 center, vec3 size, int iter) {\n    samplePos -= center;\n    for (int i = 0; i < iter; i++) {\n        samplePos *= -sign(samplePos);\n        samplePos += size/1.5;\n        size /= 3.0;\n    }\n    return box(samplePos, vec3(0.0), size);\n    float dist = box(samplePos, vec3(0.0) + size * vec3(0.5, 0, 0), size * vec3(1.5, 1, 1));\n    dist = min(dist, box(samplePos, vec3(0.0) + size * vec3(0, 0.5, 0), size * vec3(1, 1.5, 1)));\n    dist = min(dist, box(samplePos, vec3(0.0) + size * vec3(0, 0, 0.5), size * vec3(1, 1, 1.5)));\n    return dist;\n}\n\nfloat sceneDist(vec3 pos) {\n    // Rotating the sample point, which rotates the object\n    vec3 objPos = pos;\n    objPos.xz *= rotate(-0.1 * iTime);\n    objPos.yz *= rotate(0.05 * iTime);\n    \n    int iter = int(5.0 * abs(mod(iTime/6.0 - 0.7, 2.0) - 1.0));\n    \n    float dist = cantor(objPos, vec3(0.0), vec3(0.3), iter);\n    dist = min(dist, ground(pos, -0.55));\n    \n    return dist;\n}\n\n// Tetrahedron sampling code by IQ\n// Modified to fit this project\nvec3 calcNormal( vec3 p, float epsilon ) {\n    float h = 2.5 * epsilon;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy * sceneDist( p + k.xyy*h ) + \n                      k.yyx * sceneDist( p + k.yyx*h ) + \n                      k.yxy * sceneDist( p + k.yxy*h ) + \n                      k.xxx * sceneDist( p + k.xxx*h ) );\n}\n\nvec4 raycast(vec3 rayOrigin, vec3 rayDir, float maxDist, int maxIter, float epsilon, float initLength) {\n    float rayLength = initLength;\n    float SDE;\n    for (int i = 0; i < maxIter; i++) {\n        vec3 samplePos = rayOrigin + rayDir * rayLength;\n        SDE = sceneDist(samplePos);\n        rayLength += SDE;\n        \n        if (SDE < epsilon) {\n            return vec4(1, samplePos);\n        } else if (rayLength > maxDist) {\n            return vec4(0);\n        }\n    }\n    return vec4(0);\n}\n\nvec3 directionalLight(vec3 lightDir, vec3 lightColor, float intensity, vec3 surfNormal, vec3 surfPos, vec3 surfColor, float shadow) {\n    lightDir = normalize(lightDir);\n    vec4 shadowRay = raycast(surfPos + minDist * 1.01 * surfNormal, lightDir, maxDist, 500, minDist, 0.0);\n    return (1.0 - shadowRay.x * shadow) * lightColor * intensity * surfColor * max(0.0, dot(lightDir, surfNormal));\n}\n\nvec3 lighting(vec3 surfNormal, vec4 raycast, vec3 surfColor, vec3 ambient) {  \n    vec3 surfPos = raycast.yzw;\n    \n    vec3 col = vec3(0.0);\n    \n    // Direct Lighting\n    col += directionalLight(sunDir, vec3(1), 3.0, surfNormal, surfPos, surfColor, 1.0);\n    \n    // Bounce Lighting from Plane\n    col += surfColor * planeColor * 0.5 * max(0.0, (dot(surfNormal, vec3(0, -1, 0)) + 1.0));\n    \n    // Ambient Lighting from Sky\n    col += surfColor * ambient * 0.5 * max(0.0, (dot(surfNormal, vec3(0, 1, 0)) + 1.0));\n    \n    // Final color\n    return mix(ambient, col, raycast.x);\n}\n\n// Outputs rendered image in linear color\nvec3 render(vec2 fragCoord) {\n    \n    // Some scene parameters\n    float focalLength = 1.3;\n    vec3 camPos = vec3(0, 0, -1.5);\n    \n    // Convert screen coordinates to ray direction vectors\n    vec2 uv = fragCoord/iResolution.y;\n    vec3 rayDir = normalize(vec3((fragCoord - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y), focalLength));\n    \n    // Mouse controls\n    vec2 mouse = iMouse.xy/iResolution.xy - vec2(0.5);   \n    if (mouse == vec2(-0.5)) {\n        mouse = vec2(-0.01, -.03);\n    }    \n    mouse.y = min(0.115, mouse.y);\n    \n    // Camera rotation\n    camPos.yz *= rotate(pi * -mouse.y);\n    camPos.xz *= rotate(2. * pi * -mouse.x);\n    rayDir.yz *= rotate(pi * -mouse.y);\n    rayDir.xz *= rotate(2. * pi * -mouse.x);\n    \n    // Raycast and determine surface normal\n    vec4 raycast = raycast(camPos, rayDir, maxDist, 10000, minDist, 0.0);\n    vec3 surfNormal = calcNormal(raycast.yzw, minDist);\n    \n    // Object color\n    vec3 objectColor = raycast.yzw;\n    objectColor.xz *= rotate(3. * 0.2 * iTime);\n    objectColor.xy *= rotate(3. * 0.05 * iTime);\n    objectColor += vec3(0.45);  \n    objectColor = mix(vec3(0.8, 0.05, 0.0), objectColor, 0.75);\n    \n    // Calculate final color\n    return 1.5 * lighting(surfNormal, raycast, raycast.z < -0.5 ? planeColor : objectColor, ambient);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Render image\n    vec3 col = render(fragCoord);\n    \n    // Lazy tonemapping\n    col = vec3(tanh(1.1 * col.r), tanh(1.1 * col.g), tanh(1.1 * col.b));\n    \n    // Gamma correction\n    col = pow(col, vec3(1.0/2.2));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}