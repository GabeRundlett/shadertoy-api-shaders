{
    "Shader": {
        "info": {
            "date": "1557125677",
            "description": "Demonstration of an experimental 3D Worley noise implementation, by displaying slices of various combinations.",
            "flags": 0,
            "hasliked": 0,
            "id": "3ls3RX",
            "likes": 16,
            "name": "3D Worley Noise Slices",
            "published": 3,
            "tags": [
                "procedural",
                "voronoi",
                "noise",
                "worley",
                "cellular"
            ],
            "usePreview": 0,
            "username": "tpfto",
            "viewed": 1649
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Demonstrating an experimental 3D Worley noise implementation.\n// A little bit of something old, something new, and something borrowed.\n\n// XY range of the display.\n\n#define DISP_SCALE 6.0 \n\n// rescaling functions\n\nfloat rescale(float x, vec2 range)\n{\n\t  float a = range.x, b = range.y;\n      return (x - a)/(b - a);\n}\n\nfloat rescale(float x, vec2 r1, vec2 r2)\n{\n\t  float a = r1.x, b = r1.y;\n      float c = r2.x, d = r2.y;\n      return c + (d - c) * ((x - a)/(b - a));\n}\n\n// custom colormap\n\nvec3 lake( float t )\n{\n\t return vec3((2.0 * t + 1.0)/3.0, min(4.0 * t, 2.0 * t + 1.0)/3.0, min(0.8 * t + 0.5, 1.0 - 0.1 * t));\n}\n\n// simple LCG\n\n#define LCG(k) k = (65 * k) % 1021\n#define lr(k) float(k)/1021.\n\n// permutation polynomial\n\nint permp (int i1, int i2)\n{\n      int t = (i1 + i2) & 255;\n        \n      return ((112 * t + 153) * t + 151) & 255;\n}\n\n// return the two closest distances for 3D Worley noise\n// type controls the type of metric used\n\nvec2 worley(int type, vec3 p)\n{\n    vec2 dl = vec2(20.0);\n    ivec3 iv = ivec3(floor(p));\n    vec3 fv = fract(p);\n    \n    int j = 0; // initialization for Knuth's \"algorithm L\"\n    ivec3 di = ivec3(1), ki = -di;\n    ivec4 fi = ivec4(0, 1, 2, 3);\n    \n    // instead of writing a triply nested loop (!!)\n    // generate the indices for the neighbors in Gray order (Knuth's \"algorithm L\")\n    // see section 7.2.1.1 of TAOCP, Volume 4A or https://doi.org/10.1145/360336.360343\n    \n\tfor (int k = 0; k < 27; k++) // loop through all neighbors\n    { \n\t\t // seeding\n        int s = permp(permp(permp(0, iv.z + ki.z), iv.y + ki.y), iv.x + ki.x); LCG(s);\n            \n\t\t for (int m = 0; m < 2; m++) // two points per cell\n             {\n                // generate feature points within the cell\n                LCG(s); float sz = lr(s);\n                LCG(s); float sy = lr(s);\n                LCG(s); float sx = lr(s);\n                \n                vec3 tp = vec3(ki) + vec3(sx, sy, sz) - fv;\n                float c = 0.0;\n                if (type == 1) c = dot(tp, tp); // Euclidean metric\n                if (type == 2) c = abs(tp.x) + abs(tp.y) + abs(tp.z); // Manhattan metric\n                if (type == 3) c = max(abs(tp.x), max(abs(tp.y), abs(tp.z))); // Chebyshev metric\n                \n                float m1 = min(c, dl.x); // ranked distances\n                dl = vec2(min(m1, dl.y), max(m1, min(max(c, dl.x), dl.y)));\n             }\n        \n        // updating steps for Knuth's \"algorithm L\"\n        j = fi[0]; fi[0] = 0; ki[2 - j] += di[j];\n        if ((ki[2 - j] & 1) == 1) {\n            di[j] = -di[j];\n            fi[j] = fi[j + 1]; fi[j + 1] = j + 1;\n        }\n\t}\n    \n    if (type == 1) dl = sqrt(dl); // don't forget to root at the end for Euclidean distance\n        \n    return dl;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        vec2 aspect = iResolution.xy / iResolution.y;\n        vec2 uv = ( fragCoord.xy / iResolution.y ) - 0.5 * aspect;\n        uv *= DISP_SCALE;\n        uv += iTime;\n    \n        vec2 w = worley(int(0.05 * iTime) % 3 + 1, vec3(uv, -0.2 * iTime));\n\n        // split image adapted from Inigo Quilez; https://www.shadertoy.com/view/ll2GD3\n        float ry = fragCoord.y / iResolution.y;\n        vec3                  col = lake(rescale(w.x, vec2(0.0, 1.0)));\n        if ( ry > (1.0/3.0) ) col = lake(rescale(length(w.xy)/(w.y + w.x) - w.x, vec2(0.0, 1.4)));\n        if ( ry > (2.0/3.0) ) col = lake(rescale((2.0 * w.y * w.x)/(w.y + w.x) - w.x, vec2(0.0, 0.3)));\n\n        // borders\n        col *= smoothstep( 0.5, 0.48, abs(fract(3.0 * ry) - 0.5) );\n\n        fragColor = vec4( vec3(col), 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}