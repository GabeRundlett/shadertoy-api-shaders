{
    "Shader": {
        "info": {
            "date": "1531981451",
            "description": "My first raymarcher",
            "flags": 0,
            "hasliked": 0,
            "id": "ll3czM",
            "likes": 3,
            "name": "My first raymarcher.",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "mrange",
            "viewed": 164
        },
        "renderpass": [
            {
                "code": "// Based of https://www.shadertoy.com/view/4sX3Rn\n\n// Raymarching explained: http://9bitscience.blogspot.com/2013/07/raymarching-distance-fields_14.html\n// Distance Estimators: iquilezles.org/articles/distfunctions\n\n\n#define TOLERANCE       0.001\n#define MAX_RAY_LENGTH  10.0\n#define MAX_RAY_MARCHES 80\n\nfloat maxComp(in vec3 p) {\n  return max(p.x,max(p.y,p.z));\n}\n\nfloat opU(in float d1, in float d2) {\n  return min(d1,d2);\n}\n\nfloat opS(in float d1, in float d2) {\n  return max(-d1,d2);\n}\n\nfloat opI(in float d1, in float d2) {\n  return max(d1,d2);\n}\n\nfloat sdSphere(in vec3 p, in float r) {\n  return length(p) - r;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n  vec3  di = abs(p) - b;\n  float mc = maxComp(di);\n  return min(mc,length(max(di,0.0)));\n}\n\nfloat distanceEstimator(in vec3 p) {\n  return opS(sdSphere(p, 0.9), sdBox(p + vec3(0.5, 0.0, 0.0), vec3(1.0)));\n}\n\nfloat rayMarch(in vec3 ro, in vec3 rd) {\n  float t = 0.0;\n  for (int i = 0; i < MAX_RAY_MARCHES; i++) {\n    float distance = distanceEstimator(ro + rd*t);\n    if (distance < TOLERANCE || t > MAX_RAY_LENGTH) break;\n    t += distance;\n  }\n  return t;\n}\n\nfloat softShadow(in vec3 ro, in vec3 rd, float mint, float k)\n{\n  float res = 1.0;\n  float t = mint;\n  for (int i=0; i<45; i++) {\n    float distance = distanceEstimator(ro + rd*t);\n    res = min(res, k*distance/t);\n    t += clamp(distance, 0.005, 0.1);\n  }\n  return clamp(res,0.0,1.0);\n}\n\nvec3 normal(in vec3 pos) {\n  vec3  eps = vec3(.001,0.0,0.0);\n  vec3 nor;\n  nor.x = distanceEstimator(pos+eps.xyy) - distanceEstimator(pos-eps.xyy);\n  nor.y = distanceEstimator(pos+eps.yxy) - distanceEstimator(pos-eps.yxy);\n  nor.z = distanceEstimator(pos+eps.yyx) - distanceEstimator(pos-eps.yyx);\n  return normalize(nor);\n}\n\nvec3 light = normalize(vec3(1.0,0.9,0.3));\n\nvec3 render(in vec3 ro, in vec3 rd) {\n  // background color\n  vec3 col = mix(vec3(0.3,0.2,0.1)*0.5, vec3(0.7, 0.9, 1.0), 0.5 + 0.5*rd.y);\n\n  float t = rayMarch(ro,rd);\n  if (t <= MAX_RAY_LENGTH)\n  {\n    // Ray intersected object\n    vec3  pos = ro + t*rd;\n    vec3  nor = normal(pos);\n\n    float sha = softShadow(pos, light, 0.01, 64.0);\n\n    float dif = max(0.1 + 0.9*dot(nor,light),0.0);\n    float sky = 0.5 + 0.5*nor.y;\n    float bac = max(0.4 + 0.6*dot(nor,vec3(-light.x,light.y,-light.z)),0.0);\n    float occ = 1.0;\n\n    vec3 lin  = vec3(0.0);\n    lin += 1.00*dif*vec3(1.10,0.85,0.60)*sha;\n    lin += 0.50*sky*vec3(0.10,0.20,0.40)*occ;\n    lin += 0.10*bac*vec3(1.00,1.00,1.00)*(0.5+0.5*occ);\n    lin += 0.25*occ*vec3(0.15,0.17,0.20);\n\n    col = vec3(0.5) * lin;\n  }\n\n  return pow(col, vec3(0.4545));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n  p.x *= iResolution.x/iResolution.y;\n\n  float ctime = iTime;\n\n  // camera\n  vec3 ro = 1.1*vec3(2.5*sin(0.25*ctime),1.5+1.0*cos(ctime*.13),2.5*cos(0.25*ctime));\n  vec3 ww = normalize(vec3(0.0) - ro);\n  vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n  vec3 vv = normalize(cross(ww,uu));\n  vec3 rd = normalize( p.x*uu + p.y*vv + 2.5*ww );\n\n  vec3 col = render(ro, rd);\n\n  fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}