{
    "Shader": {
        "info": {
            "date": "1580921230",
            "description": "just fyi the code is not very tidy.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtcSW4",
            "likes": 22,
            "name": "Day 48",
            "published": 3,
            "tags": [
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 834
        },
        "renderpass": [
            {
                "code": "vec3 glow = vec3(0);\n    \n#define iTime (iTime + 10.)\n#define mx (iTime*0.9 + 20.*iMouse.x/iResolution.x)\n#define my (20.*iMouse.y/iResolution.x)\n#define pal(a,b,c,d,e) (a + b*sin(c*d + e))\n    \n#define dmin(a, b) a.x < b.x ? a : b\n#define pmod(a,x) mod(a,x) - x*0.5\n\nvec3 path(float z){\n    z *= 0.4;\n\treturn vec3(\n    \tsin(z + cos(z)*0.6),\n    \tcos(z + sin(z*0.8)*0.5),\n    \t0.\n    )*1.;\n}\nfloat opSmoothUnion(float d1, float d2, float k) {\n    float h = clamp(0.5 + 0.5 * (d2 - d1)/k,0.,1.);\n    return mix(d2, d1, h) - k*h*(1. - h);  \n}\n// Hex code from BigWings! He has a tutorial on them.\nfloat HexDist(vec2 p) {\n\tp = abs(p);\n    float c = dot(p, normalize(vec2(1,1.73)));\n    c = max(c, p.x);\n    return c;\n}\n\n\nvec4 HexCoords(vec2 uv) {\n\tvec2 r = vec2(1, 1.73);\n    vec2 h = r*.5;\n    vec2 a = mod(uv, r)-h;\n    vec2 b = mod(uv-h, r)-h;\n    vec2 gv = dot(a, a) < dot(b,b) ? a : b;\n    float x = atan(gv.x, gv.y);\n    float y = .5-HexDist(gv);\n    vec2 id = uv-gv;\n    return vec4(x, y, id.x,id.y);\n}\n\n\n\nfloat modu;\nfloat moduB;\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e6);\n\tp -= path(p.z);\n    vec2 n = normalize(p.xy);\n    #define modDist 1.\n    #define tunnW 0.7\n    #define pipeW 0.04\n    \n    vec3 g = p;\n    p.z = pmod(p.z, modDist);\n    \n    vec3 o = p;\n    //p.xy *= rot(0.4 + p.z*(0.1 + sin(iTime*0.1) )+ iTime*0.3);\n    vec2 pC = vec2(atan(p.y,p.x), length(p.xy));\n    \n    vec3 q = vec3(pC, p.z);\n\n    \n    // hex\n    //vec4 hc = HexCoords(vec2(pC.x, z)*20.);\n    vec4 hc = HexCoords(vec2(pC.x, p.z*2.)*1.);\n    \n    float dHex = hc.y - 0.1 + sin(o.z)*0.06;\n    dHex = max(dHex, -length(o.xy*1.) + tunnW*0.6);\n    //dHex = max(dHex, length(o.xy*1.) - tunnW*0.97);\n    //d = dmin(d, vec2(dHex, 2.));    \n    \n    q.y -= tunnW*1.;\n    \n    q.x = pmod(q.x*4.,1.);\n    q.z = pmod(q.z,0.2);\n        \n    // pipes\n    float dPipes = min(length(q.xy) - pipeW,length(q.zy) - pipeW );\n    \n    // dots\n    #define pi acos(-1.)\n    q = vec3(pC, g.z);\n    q.z = pmod(q.z, 0.14);\n    \n    q.x = pmod(q.x*3.*pi + 0.5, 1.);\n    \n    q.y -= tunnW*0.9;\n    q.y *= 15.;\n    q.z *= 8.;\n    float dDots = length(q) - 0.4;\n    //dDots *= 0.7;\n    \n    \n    // mod\n    float mm = sin(iTime*0.5 + g.z*0.5 + p.z);\n    modu = (mm/sqrt(0.02 + mm*mm ))*0.5 + 0.5;\n    float mmB = sin(iTime*1.25 + g.z*0.25 + p.z*0.8 + p.y);\n    moduB = (mmB/sqrt(0.01 + mmB*mmB ))*0.5 + 0.5;\n    //moduB = 1. - moduB;\n    moduB *= 0.16;\n    //modu = 1.;\n    \n    // thing\n    dPipes = mix(dPipes,dDots,moduB*0.7  + 0.);\n    \n    float dThing = mix(\n    \tdHex, dPipes, modu*1. + 0.3\n    );\n    d = dmin(d, vec2(dThing, 2.));\n    \n    // tunnel\n    float dTunn = -length(o.xy*1.) + tunnW;\n    dTunn = max(length(o.xy*1.) - tunnW - 0.02, dTunn);\n    dTunn = max(dTunn, -dThing);\n    d = dmin(d, vec2(dTunn, 10.));\n    \n    \n    \n    d.x *= 0.14;\n\treturn d;\n}\n\nvec2 march(vec3 ro,vec3 rd,inout vec3 p,inout float t,inout bool hit){\n\thit = false;\n    p = ro;\n    t = 0.;\n    vec2 d;\n    for(int i = 0; i < 200; i++){\n    \td = map(p);\n        if (d.y < 10.){\n            glow += mix(\n                mix(\n                    exp(-d.x*5.)*pal(1.3,0.7,vec3(1.8+modu*0.5,0.4,0.8), 3.9 +modu*0.2 + sin(p.z)*0.5,2. + t*0.1)*2.,\n                    exp(-d.x*0.01)*pal(2.8,1.4,vec3(5.8,2.4+modu*0.2,0.8+ sin(p.y + iTime)*.09), 6.9 +modu*0.2 + sin(p.z)*.5,0.5 + t*0.5)*2.,\n                    moduB\n                ),exp(-d.x*20.)*pal(0.8,0.7,vec3(1.8+modu*0.5,0.4,0.8), 3.9 +modu*0.2 + sin(p.z)*0.5,1.9 - t*0.1)*2.\n                , 1. - modu\n            );\n        \t\n        \n        } else {\n        \tglow += exp(-d.x*2.)*pal(0.2,1.9,vec3(1.8,0.4,0.8), 5.6 ,2.- t*0.1)*0.4;\n        }\n        \n        if(d.x < 0.001){\n        \thit = true;\n            break;\n        }\n        t += d.x;;\n    \tp = ro + rd*t;\n    }\n\treturn d;\n}\n\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n\tvec3 right = cross(vec3(0,1,0), dir);\n\tvec3 up = cross(dir, right);\n\treturn normalize(dir + right*uv.x + up*uv.y);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    uv *= 1. - dot(uv,uv)*0.2;\n    \n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0);\n    ro.z += mx;\n    ro += path(ro.z);\n    vec3 lookAt = ro + vec3(0,0,4);\n    lookAt += path(lookAt.z);\n    \n    vec3 rd = getRd(ro, lookAt, uv);\n    float t; bool hit;\n    vec3 p;\n    \n    vec2 d = march(ro, rd, p, t, hit);\n    \n    if(hit){\n        //vec3 N = getNormal\n\t\tcol += 0.04;\n    }\n        \n    col *= 0.4;\n    col = pow(col,vec3(0.45));\n    \n    col += glow*0.011;\n    uv *= 0.8;\n    col *= 1. - dot(uv,uv);\n    //col *= 1. - t*0.2;    \n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}