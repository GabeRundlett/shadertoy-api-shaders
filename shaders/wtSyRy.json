{
    "Shader": {
        "info": {
            "date": "1602872958",
            "description": "Lisandro Peralta\nSimple sliding strips video effect",
            "flags": 2,
            "hasliked": 0,
            "id": "wtSyRy",
            "likes": 8,
            "name": "Sliding Glass",
            "published": 3,
            "tags": [
                "fx"
            ],
            "usePreview": 0,
            "username": "parabola",
            "viewed": 647
        },
        "renderpass": [
            {
                "code": "\nfloat miCantidad = 10. ; //////////////////// MI CANTIDAD DE CIRCULOS\nfloat random(in vec2 _st)\n{\n    return fract(sin(dot(floor(_st.xy),\n                         vec2(12.9898, 78.233))) *\n                 43000.3);\n}\n\nfloat noise(in vec2 st, float fase)\n{\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float fase2 = fase;\n    // Four corners in 2D of a tile\n    float a = sin(random(i) * fase2);\n    float b = sin(random(i + vec2(1.0, 0.0)) * fase2);\n    float c = sin(random(i + vec2(0.0, 1.0)) * fase2);\n    float d = sin(random(i + vec2(1.0, 1.0)) * fase2);\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n           (c - a) * u.y * (1.0 - u.x) +\n           (d - b) * u.x * u.y;\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2)\n{\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\nmat2 rotate2d(float _angle)\n{\n    return mat2(cos(_angle), -sin(_angle),\n                sin(_angle), cos(_angle));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = gl_FragCoord.xy / iResolution.xy;\n    float fix = iResolution.x / iResolution.y;\n    uv.x *= fix;\n    vec3 final = vec3(0);\n    int cantidad = int(miCantidad);\n    uv-=0.5;\n    uv=rotate2d(radians(45.))*uv;\n    uv+=0.5;\n    for (int i = 0; i < cantidad; i++)\n    {\n    \n     float seccion = length(vec2(float(i)*(1./float(cantidad))*fix,clamp(2., -2., uv.y))-uv);\n      seccion=step(seccion,(1./float(cantidad))-(1./float(cantidad))/9.);\n    \n      vec2 video1Uv = gl_FragCoord.xy / iResolution.xy;\n    video1Uv.y+=sin(iTime+float(i))/20.;\n    video1Uv.x-=sin(iTime+float(i))/20.;\n     vec3 video1 = vec3(texture(iChannel0, video1Uv)); // SE PUEDE CAMBIAR A PREVIOUS PASS\n      \n       float mascara = seccion;\n        vec3 este = video1 * mascara;\n     \n        final += este;\n    }\n\n    vec3 color = vec3(final);\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "webcam",
                        "id": 31,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/webcam.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}