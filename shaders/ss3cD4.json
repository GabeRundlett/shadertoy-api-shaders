{
    "Shader": {
        "info": {
            "date": "1653453807",
            "description": "Fourier",
            "flags": 0,
            "hasliked": 0,
            "id": "ss3cD4",
            "likes": 2,
            "name": "傅里叶级数(Fourier Series)",
            "published": 3,
            "tags": [
                "fourier"
            ],
            "usePreview": 0,
            "username": "ccc9527",
            "viewed": 235
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926857\n\nfloat Sine(vec2 uv,int n,float blur)\n{\n    float y = 4.0/(PI*float(n))*sin(float(n)*uv.x);\n    return y;\n}\n\nfloat AddSine(vec2 uv,int n,float blur)\n{\n    float y = 0.0;\n    for(int i=1;i<=n;i+=2)\n    {\n        y += Sine(uv,i,blur);\n    }\n    float d1 = smoothstep(y-0.1,y+0.1,uv.y);\n    float d2 = smoothstep(y+0.1,y-0.1,uv.y);\n    return d1*d2*5.0;\n}\nfloat SubSine(vec2 uv,int n,float blur)\n{\n    float y = 0.0;\n    for(int i=1;i<=n;i++)\n    {\n        if(i%2==0)\n            y -= Sine(uv,i,blur)/2.0;\n        else\n            y += Sine(uv,i,blur)/2.0;\n    }\n    float d1 = smoothstep(y-0.1,y+0.1,uv.y);\n    float d2 = smoothstep(y+0.1,y-0.1,uv.y);\n    return d1*d2*5.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n    uv.x *= 10.0*PI;//x方向从(-0.5,0.5)-->(-5*PI,5*PI)\n    uv.y *= 10.0*1.75;//保证y方向上的范围与x方向的范围接近\n    \n    int n = int(iTime)*3+1;\n\n    vec3 col = vec3(1.0);\n    \n    float d = AddSine(uv-2.5,n,0.02)+SubSine(uv+2.5,n,0.02);\n     \n    col *= d;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}