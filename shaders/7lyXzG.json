{
    "Shader": {
        "info": {
            "date": "1642693110",
            "description": "30th December 2021\n\nMy first proper shader ",
            "flags": 32,
            "hasliked": 0,
            "id": "7lyXzG",
            "likes": 4,
            "name": "Metaballio",
            "published": 3,
            "tags": [
                "metaballs",
                "metaball"
            ],
            "usePreview": 0,
            "username": "ml",
            "viewed": 256
        },
        "renderpass": [
            {
                "code": "//palette function taken from here: https://iquilezles.org/articles/palettes\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos(TAU*(c*t+d) );\n}\n\nvec3 palette1(float t){\n    return palette(t, vec3(0.8, 0.5, 0.4), vec3(0.2, 0.4, 0.2), vec3(2.0, 1.0, 1.0), vec3(0.00, 0.25, 0.25));\n}\n\nvec3 palette2(float t){\n    return palette(t, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(1.0, 1.0, 1.0), vec3(0.00, 0.33, 0.67));\n}\n\nvec3 palette3(float t){\n    return palette(t, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(2.0, 1.0, 0.0), vec3(0.50, 0.20, 0.25));\n}\n\nvec3 palette4(float t){\n    return palette(t, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(2.0, 1.0, 0.0), vec3(0.6627, 0.9411, 0.8196));\n}\n\nvec2 idToCoord(float metaballId){\n    return vec2(\n        mod(metaballId, iResolution.x),\n        floor(metaballId/iResolution.x)\n    )/iResolution.xy;\n}\n\nfloat dist(vec2 p1,vec2 p2){\n    return sqrt(pow(p1.x-p2.x, 2.) + pow(p1.y-p2.y, 2.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    //if(uv.x > 1.) {\n    //    fragColor = vec4(0.);\n    //    return;\n    //}\n\n\n    float val = 0.;\n    for(float i = 0.; i < n; i++){\n    \n        \n        vec2 ballUv = texture(iChannel0, idToCoord(i)).rg;\n        \n\n        float d = dist(uv, ballUv);\n        \n\n        val += pow(d, -0.8);//pow(1./pow(d, 2.), 2.);\n    }\n\n    val /= n;\n    \n    float noise1 = 0.02+0.03*pow(0.5+hash13(vec3(fragCoord-vec2(0, 0.5), 0.))*0.5, 2.);\n    val += hash13(vec3(fragCoord, iTime))*noise1-noise1*0.5;\n    \n    val = pow(val, -0.2)*-8. + iTime*TAU*0.1;\n\n    float noise2 = 0.03;\n    val += hash13(vec3(fragCoord, 1.))*noise2-noise2*0.5;\n\n    // Output to screen\n    fragColor = vec4(palette4(val),1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nfloat coordToId(vec2 coord){\n    coord /= iResolution.x;\n    return iResolution.x*coord.x+coord.y;\n}\n\n\nbool eq(float val1, float val2){\n    return abs(val1 - val2) < 1.;\n}\n\nvec2 pointPosition(float id){\n    return vec2(\n        ((sin(iTime*(0.4+(0.4*hash11(id*4.+0.)))+hash11(id*4.+2.)*TAU)*0.5+0.5)*0.7+0.15)*iResolution.x/iResolution.y, \n        ((sin(iTime*(0.4+(0.4*hash11(id*4.+1.)))+hash11(id*4.+3.)*TAU)*0.5+0.5)*0.7+0.15)\n    );\n}\n\nvoid mainImage( out vec4 outputVal, in vec2 fragCoord )\n{\n    outputVal = vec4(0., 0., 0., 0.);\n    \n    if(coordToId(fragCoord) < n) outputVal = vec4(pointPosition(coordToId(fragCoord)), 0., 0.);\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define n 9.\n#define seed 2.\n\n#define TAU 6.28318530718\n\nfloat hash11(float p)\n{\n    p += seed;\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}