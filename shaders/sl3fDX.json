{
    "Shader": {
        "info": {
            "date": "1663719692",
            "description": "Fun! Phong distribution for the specular highlights. Now with ACES tonemapping from https://www.shadertoy.com/view/XsGfWV",
            "flags": 0,
            "hasliked": 0,
            "id": "sl3fDX",
            "likes": 0,
            "name": "Specular highlights and color!",
            "published": 3,
            "tags": [
                "shadow",
                "raymarcher",
                "penumbra",
                "diffuse"
            ],
            "usePreview": 0,
            "username": "fishy",
            "viewed": 199
        },
        "renderpass": [
            {
                "code": "struct material\n{\n    vec3 baseColor;\n    float roughness;\n};\n\nvec3 aces_tonemap(vec3 color) // https://www.shadertoy.com/view/XsGfWV\n{\t\n\tmat3 m1 = mat3(\n        0.59719, 0.07600, 0.02840,\n        0.35458, 0.90834, 0.13383,\n        0.04823, 0.01566, 0.83777\n\t);\n\tmat3 m2 = mat3(\n        1.60475, -0.10208, -0.00327,\n        -0.53108,  1.10813, -0.07276,\n        -0.07367, -0.00605,  1.07602\n\t);\n\tvec3 v = m1 * color;    \n\tvec3 a = v * (v + 0.0245786) - 0.000090537;\n\tvec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n\treturn pow(clamp(m2 * (a / b), 0.0, 1.0), vec3(1.0 / 2.2));\t\n}\n\nfloat calcSpecular(vec3 e, vec3 n, vec3 l, float p)\n{\n    return pow(clamp(dot(l, reflect(e, n)), 0.0, 1.0), p);\n}\n\nfloat join(inout float a, float b, material bm, inout material m)\n{\n    if(a < b)\n    {\n        return a;\n    }\n    else\n    {\n        m = bm;\n        return b;\n    }\n    \n}\n\nfloat sdPlane(vec3 p, float y)\n{\n    return p.y - y;\n}\n\nfloat sdSphere(vec3 p, vec3 pos, float r)\n{\n    return length(p - pos) - r;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdBox( vec3 p, vec3 b, vec3 bPos )\n{\n    return sdBox(p - bPos, b);\n}\n\nfloat sceneDist(vec3 p, out material m)\n{\n    m = material(vec3(0.0, 0.0, 1.0), 1.0);\n    float dist = sdSphere(p, vec3(0.3, 0.0, 2.0), 0.2);\n    dist = join(dist, sdSphere(p, vec3(-0.3, 0.0, 2.0), 0.2), material(vec3(0.0, 0.5, 1.0), 8.0), m);\n    dist = join(dist, sdBox(p, vec3(0.5, 0.1, 0.5), vec3(0.0,-0.3, 2.0)), material(vec3(1.0, 0.0, 0.0), 8.0), m);\n    dist = join(dist, sdPlane(p, -0.3), material(vec3(0.0, 1.0, 0.0), 8.0), m);\n    return dist;\n}\n\nvec3 calcNormal( in vec3 p ) // for function f(p)\n{\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    material m;\n    return normalize( k.xyy*sceneDist( p + k.xyy*h, m) + \n                      k.yyx*sceneDist( p + k.yyx*h, m) + \n                      k.yxy*sceneDist( p + k.yxy*h, m) + \n                      k.xxx*sceneDist( p + k.xxx*h, m) );\n}\n\nvoid march(vec3 dir, inout vec3 p, int maxSteps, float minDist, out bool hit, out float depth, out vec3 normal, out material m)\n{\n    vec3 oldP = p;\n    depth = 0.0;\n    for(int i = 0; i < maxSteps; i++)\n    {\n        depth = sceneDist(p, m);\n        p += depth*dir;\n        hit = depth < minDist;\n        if(hit)\n        {\n            normal = calcNormal(p);\n            depth = distance(oldP, p);\n            return;\n        }\n    }\n    normal = calcNormal(p);\n}\n\nvoid marchShadow(vec3 dir, vec3 p, int maxSteps, float minDist, out float inShadow, float k)\n{\n    vec3 oldP = p;\n    float dist = 0.002;\n    float totalDist = dist;\n\n    p += dist*dir;\n    inShadow = 1.0;\n    material m = material(vec3(0.0, 0.0, 0.0), 0.0);\n    for(int i = 0; i < maxSteps; i++)\n    {\n        dist = sceneDist(p, m);\n        totalDist += dist;\n\n        if(dist < minDist)\n        {\n            inShadow = 1.0;\n            return;\n        }\n        \n        p += dist*dir;\n        inShadow = min(inShadow, k*dist/totalDist);\n    }\n    inShadow = 1.0-inShadow;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.y *= iResolution.y/iResolution.x;\n\n    vec3 eyeDir = normalize(vec3(uv * vec2(1.0, 1.0), 1.0));\n    vec3 eyePos = vec3(0.0, 0.0, 0.0);\n    vec2 mouse = iMouse.z > 0.0?iMouse.xy/iResolution.xy - 0.5 : vec2(sin(iTime), cos(iTime) + 2.0);\n    vec3 lightingDir = normalize(vec3((mouse) * vec2(1.0, iResolution.y/iResolution.x) * 10.0, -1.0));\n    \n    bool hit = false;\n    float depth = 0.0;\n    vec3 normal = vec3(0.0);\n    material hitMat;\n    march(eyeDir, eyePos, 512, 0.0001, hit, depth, normal, hitMat);\n    \n    float inShadow = 0.0;\n    marchShadow(lightingDir, eyePos, 64, 0.00001, inShadow, 4.0);\n    \n    //lightingDir = vec3(0.0, 1.0, 0.0);\n    float lighting = max(0.0, dot(normal, lightingDir));\n    float specular = calcSpecular(eyeDir, normal, lightingDir, 8.0 * hitMat.roughness);\n    specular = clamp(specular, 0.0, 1.0);\n    inShadow *= float(hit);\n    //lighting *= (1.0-inShadow) + 0.5;\n    //lighting /= 1.5;\n    \n    vec3 color = (vec3(lighting + specular) * hitMat.baseColor) * (1.0-inShadow);\n    color = aces_tonemap(color);\n\n    //fragColor = vec4(vec3(specular),1.0);\n    fragColor = vec4(hit? color : vec3(0.0),1.0);\n    //fragColor = vec4(eyeDir.xy,0.0, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}