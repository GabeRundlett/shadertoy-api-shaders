{
    "Shader": {
        "info": {
            "date": "1719249286",
            "description": "Figured since there was an awesome India flag by piyushslayer (https://www.shadertoy.com/view/3lyGRd), I would go ahead and make the USA version!",
            "flags": 0,
            "hasliked": 0,
            "id": "X33Szj",
            "likes": 7,
            "name": "United States of America Flag",
            "published": 3,
            "tags": [
                "flag",
                "wind",
                "waving",
                "usa",
                "america"
            ],
            "usePreview": 0,
            "username": "spenceryonce",
            "viewed": 149
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535\n\n#define RED vec3(179., 25., 66.) / 255.\n#define WHITE vec3(255., 255., 255.) / 255.\n#define BLUE vec3(10., 49., 97.) / 255.\n#define R(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define DEG2RAD(d) d*0.0174532922\n\n// Hash by Dave_Hoskins\nfloat hash(vec2 p)\n{\n    uvec2 q = uvec2(ivec2(p)) * uvec2(1597334673U, 3812015801U);\n    uint n = (q.x ^ q.y) * 1597334673U;\n    return float(n) / float(0xffffffffU);\n}\n\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x, k1.y);\n    p.x = abs(p.x);\n    p -= 2.0 * max(dot(k1, p), 0.0) * k1;\n    p -= 2.0 * max(dot(k2, p), 0.0) * k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf * vec2(-k1.y, k1.x) - vec2(0, 1);\n    float h = clamp(dot(p, ba) / dot(ba, ba), 0.0, r);\n    return length(p - ba * h) * sign(p.y * ba.x - p.x * ba.y);\n}\n\nfloat getStars(vec2 uv) {\n    vec2 grid = floor(uv * vec2(3., 9.)) + 0.0;\n    vec2 pos = fract(uv * vec2(3., 9.)) - 0.5;\n\n    if (mod(grid.y, 2.0) == 1.0) {\n        pos.x += 0.5;\n    }\n    \n    pos.y -= 0.5;\n    pos.y *= 0.5;\n    \n    if (grid.y >= 4.0) {\n        pos.y += 0.5;\n    }\n    \n    if (grid.x <= -4.5) {\n        pos.x += 0.5;\n    }\n    \n    \n    pos *= R(DEG2RAD(40.0));\n    float star = sdStar5(pos-vec2(0.3,0.0), 0.25, 0.4);\n    return smoothstep(0.01, 0.02, -star);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    uv *= 1.0;\n    vec2 st = fragCoord / iResolution.xy;\n    float w = sin((uv.x + uv.y - iTime * .75 + \n              sin(1.5 * uv.x + 4.5 * uv.y) * PI * .3)\n                  * PI * .6);\n\n    uv *= 1. + (.036 - .036 * w);\n    vec3 col = vec3(0.);\n\n    // stripes\n    float stripeHeight = 2. / 13.;\n    float stripeIndex = floor((uv.y + 1.) / stripeHeight);\n    col = mix(WHITE, RED, mod(stripeIndex, 2.0));\n\n    // blue field\n    vec2 starFieldUv = vec2(uv.x, 1.0 - uv.y) - vec2(0.0, 0.5);\n    starFieldUv.x += 0.5;\n    float blueField = step(starFieldUv.x, 0.5) * step(starFieldUv.y, 0.5);\n    col = mix(col, BLUE, blueField);\n\n    // stars\n    float stars = getStars(starFieldUv);\n    col = mix(col, WHITE, blueField * stars);\n    col += w * 0.255;\n\n    float v = 16. * st.x * (1. - st.x) * st.y * (1. - st.y); // vignette\n    col *= 1. - .6 * exp2(-1.75 * v);\n    col = clamp(col - hash(fragCoord) * .004, 0., 1.);\n    fragColor = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}