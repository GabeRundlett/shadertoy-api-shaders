{
    "Shader": {
        "info": {
            "date": "1721681935",
            "description": "ger",
            "flags": 0,
            "hasliked": 0,
            "id": "ssf3WB",
            "likes": 0,
            "name": "4d sphere test",
            "published": 3,
            "tags": [
                "tes"
            ],
            "usePreview": 0,
            "username": "IgruantyPlay",
            "viewed": 78
        },
        "renderpass": [
            {
                "code": "float sphere4(vec4 c, vec3 p, float w) {\n    return length(c - vec4(p,w)) - 1.;\n}\nfloat sphere(vec3 c, vec3 p, float r){\n    return length(c - p) - r;\n}\nfloat ground(vec3 n, vec3 p) {\n    return dot(n, p);\n}\nfloat ground(vec3 p) {\n    return p.y;\n}\nfloat ground(vec3 p, float h) {\n    return h - p.y;\n}\nfloat map(vec3 p) {\n    return min(min(ground(p), sphere4(vec4(0,1,0,0), p, 0.)), sphere(vec3(2,2,2), p, 0.5));\n}\nfloat trace(vec3 o, vec3 d) {\n    float t = 0.;\n    for(int i = 0; i < 64; i++) {\n        vec3 p = o + d * t;\n        float dt = map(p);\n        t += dt * 0.5;\n        if(dt <= 0.01) break;\n    }\n    return t;\n}\nfloat trace(vec3 o, vec3 d, out bool collided) {\n    float t = 0.;\n    for(int i = 0; i < 256; i++) {\n        vec3 p = o + d * t;\n        float dt = map(p);\n        t += dt * 0.5;\n        if(dt <= 0.01) {\n            collided = true;\n            break;\n        } else collided = false;\n    }\n    return t;\n}\nfloat trace(vec3 o, vec3 d, int b, out bool collided) {\n    float t = 0.;\n    for(int i = 0; i < b; i++) {\n        vec3 p = o + d * t;\n        float dt = map(p);\n        t += dt * 0.5;\n        if(dt <= 0.01) {\n            collided = true;\n            break;\n        } else collided = false;\n    }\n    return t;\n}\nvec3 getNormal(vec3 p) {\n    float d0 = map(p);\n    vec2 epsilon = vec2(0.001, 0);\n    vec3 n = vec3(map(p - epsilon.xyy), map(p - epsilon.yxy), map(p - epsilon.yyx));\n    return normalize(d0 - n);\n}\nfloat reflection(vec3 p, vec3 d){\n    float t = 0.;\n    vec3 p0[4];\n    vec3 d0[4];\n    p0[0] = p;\n    d0[0] = d;\n    for(int i = 1; i < 4; i++) {\n        d0[i] = reflect(d0[i-1], getNormal(p0[i-1]));\n        float t0 = trace(p0[i-1], d0[i]);\n        p0[i] = p0[i-1] + d0[i] * t0;\n        t += t0;\n    }\n    return t;\n}\nfloat light(vec3 p){\n    vec3 n = getNormal(p);\n    vec3 lpos = vec3(1,1,1);\n    vec3 l = normalize(lpos);\n    float d = dot(l, n);\n    d = clamp(d, 0., 1.);\n    bool c;\n    float s = trace(p + n * 0.1, l, 64, c);\n    if(c) d *= 0.5;\n    return d;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float the = iTime * 0.25;\n    vec3 o = vec3(sin(the) * 5., 1, -cos(the) * 5.);\n    vec3 r = normalize(vec3(uv, 1.0));\n    \n    //rotation\n    r.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    \n    float t = trace(o,r);\n    float fog = 1. / (1. + t * t * 0.1);\n    vec3 col = fog * vec3(1. + getNormal(o + r * t)) / 2. * light(o + r * t);\n    //vec3 col = vec3(fog) * ref;\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}