{
    "Shader": {
        "info": {
            "date": "1705314850",
            "description": "Texture mapped along the inside of a torus.",
            "flags": 32,
            "hasliked": 0,
            "id": "McXSWN",
            "likes": 8,
            "name": "Magic Torus",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "psychedelic",
                "art"
            ],
            "usePreview": 0,
            "username": "PhiVape",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "#define MS 100\n#define MD 100.\n#define SD .01\n#define t iTime\n#define PI 3.14159\n\n\nfloat dist(vec3 p) { \n    float d = -sdTorus(p-vec3(0., 0., 0.), vec2(1.,0.8));   \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;    \n    for(int i=0; i<MS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = dist(p);\n        dO += dS;\n        if(dO>MD || dS<SD) break;\n    }    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = dist(p);\n    vec2 e = vec2(.01, 0);    \n    vec3 n = d - vec3(\n        dist(p-e.xyy),\n        dist(p-e.yxy),\n        dist(p-e.yyx));   \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0., 0., -1.7);\n    \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SD*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    return pow(dif, 0.454);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0, 0, -1.7);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    float d = RayMarch(ro, rd);   \n    vec3 p = ro + rd * d;\n    vec3 N = GetNormal(p);    \n    float L = GetLight(p);\n    \n    vec2 UV = vec2((atan(p.x, -p.z)/(2.*PI)) + 0.5, -0.5*N.y+0.5); //torus uv mapping         \n    fragColor = texture(iChannel0, UV)*L;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 rad_to_dir(float angle)\n{\n    return vec2(cos(angle), sin(angle));\n}\nvec3 palette( float t ) {\n\n    vec3 a = vec3(0.660, 0.560, 0.680);\n    vec3 b = vec3(0.718, 0.438, 0.720);\n    vec3 c = vec3(0.520, 0.800, 0.520);\n    vec3 d = vec3(-0.430, -0.397, -0.083);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    float t = 0.5*iTime;\n    float pi = acos(-1.);\n    uv += 7.;\n    \n    float d0 = dot(uv, rad_to_dir(0.));  \n    float d1 = dot(uv, rad_to_dir(pi/3.));\n    float d2 = dot(uv, rad_to_dir(2.*pi/3.));\n    \n    vec3 d = vec3(d0, d1, d2);   \n    d = abs(3.*d)-t*0.4;\n    d += floor(d*5.5) + t ;    \n      \n    vec3 col = palette(d.x+d.y+d.z);\n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "float sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}