{
    "Shader": {
        "info": {
            "date": "1649358625",
            "description": "Shows when variables start losing precision as they grow to be around 11 to 21 bits large. When you'll start seeing the staircase (lose of precision) depends on your GPU and screen resolution. Anything between 14 and 16 bits is probably normal.",
            "flags": 0,
            "hasliked": 0,
            "id": "7tBcRm",
            "likes": 37,
            "name": "precision",
            "published": 3,
            "tags": [
                "glsl",
                "precision",
                "bits"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1295
        },
        "renderpass": [
            {
                "code": "// The MIT License\n// Copyright Â© 2022 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\n// This shader shows when variables start losing precision as\n// they grow to be in the order of 11, 12, ... 21 bits large.\n//\n// In an ideal world, the blue line would be a perfect ramp.\n// But when you start seeing the staircase (lose of precision)\n// at some point that depends on your GPU and screen resolution.\n// Anything between 14 and 16 bits is normal.\n//\n// The yellow signal is the difference between the ramp we get\n// and the ramp we would ideally get.\n//\n// If the blue signal was time, you could safely expect about one\n// hour of smooth animation. So, make sure you compute time always\n// in some 64 bit type and that you only convert it to event-relative\n// float32 (for sound synthesis or animation) AFTER subtracting the \n// 64 bit global time from the event's trigger time which is also in\n// 64 bit precision.\n\n\nconst int kBitsA = 11;\nconst int kBitsB = 22;\n\nfloat printDigit( in int n, in vec2 p )\n{\t\t\n    // digit bitmap by P_Malin (https://www.shadertoy.com/view/4sf3RN)\n    const int lut[10] = int[10](480599,139810,476951,476999,71028,464711,464727,476228,481111,481095);\n    // extract bit\n\tivec2 q = ivec2(p*vec2(4,5));\n    if( q.x<0 || q.x>3 || q.y<0 || q.y>4 ) return 0.0;\n\tint id = 4*q.y + q.x;\n    return float( (lut[n]>>id) & 1 );\n}\n\n#define ZERO(v) (min(iTime*v,0.0))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coords\n    vec2 p = vec2(fragCoord)/iResolution.xy;\n    float px = 2.0/iResolution.y;\n\n    // number of bits \n    float wct  = float(kBitsB-kBitsA)*p.x;\n    float wcf  = fract(wct);\n    int   bits = kBitsA + int(floor(wct));\n    \n    // offset value\n    float t = p.x + exp2(float(bits));\n\n    const float sep = 0.12;\n\n    // background \n    vec3 col = vec3( 0.15 );\n\n    // plot t\n    {\n        float y = t - exp2(float(bits)+ZERO(1.0));\n        y = sep + (1.0-sep)*(0.1+0.8*y);\n        float dy = (1.0-sep)*0.8;\n        float d  = abs(p.y-y)/sqrt(1.0+dy*dy);\n        col = mix( col, vec3(0.0,0.8,1.0), smoothstep(px,0.0,d) );\n    }\n    // plot error\n    {\n        float v1  = t - exp2(float(bits)+ZERO(2.0));\n        float v2 = p.x;\n        float y = v1-v2;\n        y = sep + (1.0-sep)*(0.1+0.8*y);\n        float dy = (1.0-sep)*0.8;\n        float d  = abs(p.y-y)/sqrt(1.0+dy*dy);\n        col = mix( col, vec3(0.9,0.6,0.2), smoothstep(px,0.0,d) );\n    }\n    // plot vertical lines\n    {\n        col += smoothstep(1.0-px*6.0,1.0,2.0*abs(wcf-0.5));\n    }\n    // plot horizontal lines\n    {\n        float d = min( 2.0*abs(p.y-sep), abs(abs(p.y-0.5)-0.5) );\n        col += smoothstep(px,0.0,d);\n    }\n    // plot digits\n    {\n        float wi = 1.0/float(kBitsB-kBitsA);\n        vec2 p = vec2(wcf,float(kBitsB-kBitsA)*fragCoord.y/iResolution.x);\n        p.x -= 3.0*wi;\n        p.y -= 3.0*wi;\n        col += printDigit( bits/10, 5.0*p );\n        p.x -= 4.0*wi;\n        col += printDigit( bits%10, 5.0*p );\n    }\n    \n    // output color\n    fragColor = vec4( col, 1.0 );\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}