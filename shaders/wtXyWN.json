{
    "Shader": {
        "info": {
            "date": "1592081108",
            "description": "Visually insired by Rhodium liquid carbon https://www.shadertoy.com/view/llK3Dy ",
            "flags": 64,
            "hasliked": 0,
            "id": "wtXyWN",
            "likes": 9,
            "name": "MX Space Jelly",
            "published": 3,
            "tags": [
                "audioreactive",
                "jello"
            ],
            "usePreview": 0,
            "username": "xjorma",
            "viewed": 740
        },
        "renderpass": [
            {
                "code": "// Created by David Gallardo - xjorma/2020\n\n#define BIASED_NORMAL 0\n#define MAX_DIST 6.\n#define EXIT_DIST 3.\n#define LIGHT_DIR vec3(0.000000,0.943858,0.330350)\n\nfloat hig;\nfloat mid;\nfloat low;\n\nfloat saturate(in float v)\n{ \n    return clamp(v, 0.0, 1.0);\n}\n\n// rotation\nvec3 rotX(in vec3 p,float ang) \n{\n    mat3 m = mat3(\n\t\t\t1.0,\t\t0.0,\t\t0.0,\n\t\t\t0.0,\t\tcos(ang),\t-sin(ang),\n\t\t\t0.0,\t\tsin(ang),\tcos(ang));\n\treturn m*p;\n}\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat opExtrussion( in vec3 p, in float sdf, in float h )\n{\n    vec2 w = vec2( sdf, abs(p.z) - h );\n  \treturn min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat sdfX1(in vec3 p)\n{\n    return opExtrussion(p, sd2dMX(p.xy), 0.5);\n\n}\n\nfloat map(vec3 p)\n{\t\n    p = rotX(p, sin(0.5 * p.x + iTime) * 0.9);\n    return sdfX1(p + vec3(0, 0, mid)) - .3 * noise(6. * p + 3. * iTime) * low;\n}\n\n#define EPS  0.01\n\n#if BIASED_NORMAL\nvec3 calcNormal(vec3 pos)\n{\n\n    vec3\tcol;\n    vec2\teps = vec2(EPS, 0);\n\tfloat d = map(pos);\n\treturn normalize(vec3(map(pos + eps.xyy) - d, map(pos + eps.yxy) - d, map(pos + eps.yyx) - d));\n}\n#else\nvec3 calcNormal( in vec3 pos )\n{\n    const float ep = EPS;\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*map( pos + e.xyy*ep ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*ep ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*ep ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*ep ) );\n}\n#endif\n\n\nfloat rayMarch(in vec3 ro,in vec3 rd, in float maxDist, in int maxStep, out float minDist) \n{\n    minDist = maxDist;\n    float t=0.;\n\tfor(int i=0; i < maxStep; i++) \n\t{\n\t\tfloat h = map(ro+rd*t);\n        minDist = min(h, minDist);\n        if(abs(h) < .001 || t > maxDist)\n            break;\n        t+=h;\n\t}\n    return t;\n}\n\n\n//\tmain function\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{    \n    hig = texture(iChannel0, vec2(0.1,0.25)).x;\n    mid = texture(iChannel0, vec2(0.5,0.25)).x;\n    low = texture(iChannel0, vec2(0.9,0.25)).x;\n       \n    vec3 rd = normalize(vec3(2. * fragCoord - iResolution.xy, iResolution.y));\n    vec3 ro = vec3(0, 0, -3.);  \n    \n    vec3 oppositeNormal = vec3(0.);    \n    vec3 basecol = vec3(sin(iTime), sin(iTime * 1.5), sin(iTime * 2.2)) / 2. + 0.5;\n    vec3 color =vec3(0.);\n    float minDist = 0.;\n    float distIn = 0.;\n    float\tt = rayMarch(ro, rd, MAX_DIST, 50, minDist);\n    if(t < MAX_DIST)\n    {\n\t\tvec3\tp = ro + rd * t;\n\t\tvec3\tn = calcNormal(p);\n        // diffuse\n        color =  vec3(max(dot(LIGHT_DIR, n), 0.));\n        // specular\n    \tcolor += basecol * pow(max(dot(reflect(rd, n), LIGHT_DIR), 0.), 20.) * 0.5;\n        // Find the exit wound\n        vec3 refractDir = -refract(rd, n, 0.8);\n        vec3 oppositePos = p - refractDir * EXIT_DIST;\n        float dummyMinDist;\n        float reflectT = rayMarch(oppositePos, refractDir, EXIT_DIST, 20, dummyMinDist);\n        oppositeNormal = calcNormal(oppositePos + refractDir * reflectT);\n        distIn = EXIT_DIST - reflectT;\n\t}      \n\n    color += hig * basecol * pow(distIn * 2., 2.) * max(0.,(dot(oppositeNormal, rd)));\t\t// inner glow\n    float outer = max(1. - minDist, 0.);\n    outer = smoothstep(1., 0.7, outer) * outer;\n    color += basecol * pow(outer * 4. * low, 2.);\t\t\t\t// outer glow\n    color = pow(color, vec3(1. / 2.2));\n    fragColor = vec4(color, 1.);\n}\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "musicstream",
                        "id": 23123,
                        "published": 0,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "https://soundcloud.com/babelian/rob-hubbard-goldrunner-khatchadour-remix"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float opUnion( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat opSubtraction( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat opIntersection( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\n// Oriented Box\nfloat sdOBox(vec2 p, vec2 c, vec2 b, vec2 d)\n{\n    mat2\tr;\n    r[0]\t= d;\n   \tr[1]\t= vec2(-d.y, d.x);\n    vec2\tlp = (p - c) * r;\n    vec2\tq = abs(lp) - b;\n    return\tlength(max(q, 0.0)) + min(max(q.x, q.y), 0.0);  \n}\n\n// Axis Aligned Box\nfloat sdAABox(vec2 p, vec2 c, vec2 b)\n{ \n    vec2\tq = abs(p - c) - b;\n    return\tlength(max(q, 0.0)) + min(max(q.x, q.y), 0.0);\n}\n\n// Circle\nfloat sdCircle(vec2 p, vec2 c, float r)\n{\n    return\tlength(p - c) - r;\n}\n\nfloat sd2dM(vec2 p)\n{\n    float d0 = sdAABox(p, vec2(-1.5990, -0.2965), vec2(0.2900, 0.7035));\n    float d1 = sdAABox(p, vec2(-0.8555, -0.2965), vec2(0.2905, 0.7035));\n    float d2 = sdAABox(p, vec2(-0.1135, -0.2965), vec2(0.2905, 0.7035));\n    float cl = sdCircle(p, vec2(-1.3349, 0.4478), 0.5545);\n    float cr = sdCircle(p, vec2(-0.3787, 0.4478), 0.5565);\n    float cb = opUnion(cl, cr);\n    float dl = opUnion(d0, opUnion(d1, d2));\n    cb = opIntersection(cb, 0.2 - p.y);\n    float hl = sdCircle(p, vec2(-1.2275, 0.2000), 0.0815);\n    float hr = sdCircle(p, vec2(-0.4845, 0.2000), 0.0815);\n    float hb = opUnion(hl, hr);\n    return opSubtraction(hb, opUnion(dl, cb));    \n}\n\nfloat sd2dX(vec2 p)\n{\n    float dd = sdOBox(p, vec2(1.0765, -0.0245), vec2(1.2410, 0.2679), vec2(-0.4634, 0.8861));\n    float du = sdOBox(p, vec2(1.0535, -0.0245), vec2(1.2480, 0.2532), vec2(0.4776, 0.8786));\n    float dx = opUnion(dd, du);\n    return opIntersection(sdAABox(p, vec2(1.0620, -0.0245), vec2(0.8270, 0.9755)), dx);\n}\n\nfloat sd2dMX(vec2 p)\n{\n    return opUnion(sd2dM(p), sd2dX(p));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}