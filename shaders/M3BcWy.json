{
    "Shader": {
        "info": {
            "date": "1727651162",
            "description": "For use in part of our Elevation Escalation Series.  See it @ https://www.youtube.com/watch?v=OQOvvLBPJyQ&list=PL8NoK5ZtIEVvj1runnWctVYFl9mpzEsCt&ab_channel=H-Med-TheHypotheticalMedicalCo.",
            "flags": 0,
            "hasliked": 0,
            "id": "M3BcWy",
            "likes": 0,
            "name": "Neon Fire (Starleidos fork)",
            "published": 3,
            "tags": [
                "tutorial"
            ],
            "usePreview": 0,
            "username": "hypotheticalmed",
            "viewed": 25
        },
        "renderpass": [
            {
                "code": "    //  A fork of Starleidos by DanielXMoore\n    //  Followed some TheArtOfCodeTutorials and ended up with this!\n    //  Fork made by www.H-Med.biz.  Feel free to fork this & pass it on :)\n\n\n#define NUM_LAYERS 77.\n\nmat2 Rot(float a) {\n  float c = cos(a), s = sin(a);\n  return mat2(c, -s, s, c);\n}\n\nfloat Star(vec2 uv, float flare) {\n    float col = 3.;\n    float d = length(uv);\n    float m = .077/d;\n    \n    float rays = max(0., 3. - abs(uv.x * uv.y * 1000.));\n    m += rays * flare;\n    uv *= Rot(3.777/3.);\n    rays = max(0., 1. - abs(uv.x * uv.y * 1000.));\n    m += rays * .7 * flare;\n    \n    m *= smoothstep(1., .3, d);\n\n    return m;\n}\n\nfloat Hash21(vec2 p) {\n  p = fract(p * vec2(123.34, 456.21));\n  p += dot(p, p+45.32);\n  \n  return fract(p.x*p.y);\n}\n\nvec3 StarLayer(vec2 uv) {\n    vec3 col = vec3(0.);\n    \n    vec2 gv = fract(uv) - 0.7;\n    vec2 id = floor(uv);\n    \n    for(int y = -1; y <= 1; y++ ) {\n        for(int x = -1; x <= 1; x++) {\n            vec2 offs = vec2(x, y);\n\n            float n = Hash21(id + offs);\n            float size = fract(n*345.32);\n            \n            vec2 p = vec2(n, fract(n*34.));\n            \n            float star = Star(gv - offs - p + .5, smoothstep(.8, 1., size) * .6);\n            \n            vec3 hueShift = fract(n*2345.2 + dot(uv /420.,texture(iChannel0, vec2(0.25, 0.)).rg))*vec3(.2, .3, .9)*123.2;\n\n            vec3 color = sin(hueShift) * .77 + .3001;\n            color = color * vec3(1., .25, 1.+size);\n\n            star *= sin(iTime*7.+n*6.2831)*.3+1.;\n            col += star * size * color;\n        }\n    }\n    \n    return col;\n\n}\n\nvec2 N(float angle) {\n  return vec2(sin(angle), cos(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec2 M = (iMouse.xy - iResolution.xy*.5)/iResolution.y;\n    float t = iTime * .01;\n    \n    uv.x = abs(uv.x);\n    uv.y += tan((3./7.) * 3.1415) * .5;\n\n    vec2 n = N((3./7.) * 3.1415);\n    float d = dot(uv - vec2(.5, 0.), n);\n    uv -= n * max(0., d) * 3.;\n\n    // col += smoothstep(.01, .0, abs(d));\n\n    n = N((2./3.) * 3.1415);\n    float scale = 1.;\n    uv.x += 1.5 / 1.25;\n    for(int i=0; i<7; i++) {\n        scale *= 1.33;\n        uv *= 1.33;\n        uv.x -= 1.7;\n\n        uv.x = abs(uv.x);\n        uv.x -= 0.77;\n        uv -= n * min(0., dot(uv, n)) * 2.;\n    }\n\n \n    uv += M * 4.;\n\n    uv *= Rot(t);\n    vec3 col = vec3(0.);\n    \n    float layers = 10.;\n    \n    for(float i=0.; i < 1.; i+=1./NUM_LAYERS) {\n        float depth = fract(i+t);\n        float scale = mix(20., .5, depth);\n        float fade = depth * smoothstep(1., .9, depth);\n        col += StarLayer(uv * scale + i * 453.2) * fade;\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}