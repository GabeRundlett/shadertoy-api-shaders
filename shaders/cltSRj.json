{
    "Shader": {
        "info": {
            "date": "1685584119",
            "description": "Haven't shadered in a while.",
            "flags": 0,
            "hasliked": 0,
            "id": "cltSRj",
            "likes": 23,
            "name": "Glitter Weave",
            "published": 3,
            "tags": [
                "truchet",
                "glitter",
                "weave"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 272
        },
        "renderpass": [
            {
                "code": "#define drawSDF(dist, col) color = mix(color, col * mix(0.3, 1.0, smoothstep(0.0, -0.04, dist)), smoothstep(unit, 0.0, dist))\n#define swap(a, b) a += b; b = a - b; a -= b;\n\n// https://www.shadertoy.com/view/4djSRW\nfloat Hash21(in vec2 p) {\n    vec3 p3 = fract(p.xyx * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// https://www.shadertoy.com/view/4djSRW\nvec2 Hash22(in vec2 p) {\n    vec3 p3 = fract(p.xyx * vec3(0.1031, 0.103, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat SmoothHash21(in vec2 p) {\n    vec2 cell = floor(p);\n    vec2 local = fract(p);\n    float bl = Hash21(cell);\n    float br = Hash21(cell + vec2(1.0, 0.0));\n    float tl = Hash21(cell + vec2(0.0, 1.0));\n    float tr = Hash21(cell + 1.0);\n    return mix(mix(bl, br, local.x), mix(tl, tr, local.x), local.y);\n}\n\nfloat glitter(in vec2 p, in vec2 sparkleLag) {\n    p *= 20.0;\n    vec2 cell = floor(p);\n    float minDist = -1.0;\n    float curFrag = 1.0;\n    for (float i = -1.0; i < 2.0; i++) {\n        for (float j = -1.0; j < 2.0; j++) {\n            vec2 vorp = cell + vec2(i, j);\n            vorp += Hash22(vorp) - 0.5;\n            float dist = length(vorp - p);\n            if (minDist < 0.0 || dist < minDist) {\n                minDist = dist;\n                curFrag = SmoothHash21(vorp - sparkleLag);\n            }\n        }\n    }\n\n    return 0.1 + 0.5 * curFrag * curFrag * curFrag;\n}\n\nvoid doTruchet(in vec2 uv, out vec2 cid, out vec2 cuv, out float arc) {\n    cid = floor(uv);\n    cuv = fract(uv) - 0.5;\n    if (Hash21(cid) < 0.5) cuv.x = -cuv.x;\n    cuv -= cuv.x < -cuv.y ? -0.5 : 0.5;\n    arc = atan(cuv.y, cuv.x);\n    if (mod(cid.x + cid.y, 2.0) < 0.5) arc = -arc;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 3.0;\n    float unit = 6.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    float time = 0.8 * iTime + 8.4;\n    vec2 drift = vec2(0.5 * time + 2.0 * sin(0.3 * time), 5.0 * sin(0.2 * time));\n    uv += drift;\n\n    vec2 cid1, cuv1;\n    float arc1;\n    doTruchet(uv, cid1, cuv1, arc1);\n    float dist1 = length(cuv1) - 0.5;\n    vec3 color1 = min(vec3(0.6, 0.2, 0.7) * 0.8 + glitter(uv, drift), 1.0);\n    vec2 spec1 = vec2((arc1 - 1.0) * 4.0, (dist1 - 0.07) * 70.0);\n    color1 += 0.5 * max(0.0, 1.0 - 0.3 * dot(spec1, spec1));\n    dist1 = abs(dist1) - 0.12;\n\n    uv += 10.5;\n    vec2 cid2, cuv2;\n    float arc2;\n    doTruchet(uv, cid2, cuv2, arc2);\n    float dist2 = length(cuv2) - 0.5;\n    vec3 color2 = min(vec3(0.2, 0.7, 1.0) * 0.8 + glitter(uv, drift), 1.0);\n    vec2 spec2 = vec2((arc2 - 1.0) * 4.0, (dist2 - 0.07) * 70.0);\n    color2 += 0.5 * max(0.0, 1.0 - 0.3 * dot(spec2, spec2));\n    dist2 = abs(dist2) - 0.12;\n\n    if (mod(floor(cuv1.x + cuv1.y) + floor(cuv1.x - cuv1.y), 2.0) > 0.5) {\n        swap(dist1, dist2);\n        swap(color1, color2);\n    }\n\n    drawSDF(dist1, color1 * smoothstep(-0.05, 0.1, dist2));\n    drawSDF(dist2, color2);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}