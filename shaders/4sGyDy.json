{
    "Shader": {
        "info": {
            "date": "1523066320",
            "description": "Usually my sound experiments model analog synthesis, but here's some digital noise.\n\nMouse Y: rescale spectrogram",
            "flags": 40,
            "hasliked": 0,
            "id": "4sGyDy",
            "likes": 3,
            "name": "Sound Experiment 2018-04-06",
            "published": 3,
            "tags": [
                "sound"
            ],
            "usePreview": 0,
            "username": "ttg",
            "viewed": 711
        },
        "renderpass": [
            {
                "code": "// Passthrough to Channel 0\nvoid mainImage ( out vec4 f, in vec2 d ) {\n  f = texture(iChannel0, d/vec2(iResolution.x, iMouse.y*8.+iResolution.y)); }\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/*\nSound Experiment\nCopyright 2018 Theron Tarigo\n*/\n\nconst float timescale = 1./4.;\nconst float freqscale = 8000.;\nconst vec2 stereomix = vec2(1.,1.)*2.;\n\n\n\nvec2 mainSound ( in int samp, float t ) {\n  uint x = uint(t*3600.);\n  x = (x<<(x%16u));\n  return vec2(-1.+2.*fract(float(x)/float((1<<16)-1))) * (1.-exp(-t));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "/*\nStreaming Spectrogram v.3\nCopyright 2018 Theron Tarigo\n*/\n\nconst float windowmax = 0.5;\n\nvec4 encode ( int i ) { return vec4((uvec4(i)>>ivec4(0,8,16,24))&0xFFu)/255.; }\nint decode ( vec4 f ) { uvec4 d = uvec4(f*255.)<<ivec4(0,8,16,24);\n  return int(d.x|d.y|d.z|d.w); }\n\nvoid mainImage ( out vec4 f, in vec2 pixf ) {\n  f = vec4(0.);\n  ivec2 pix = ivec2(pixf);\n  ivec2 res = ivec2(iChannelResolution[0].xy);\n  int center = res.x*res.y/2;\n  int offset = int(iTime*iSampleRate) - center;\n  int index = res.x*pix.y+pix.x;\n  if (index==0) { f = encode(offset); return; }\n  int offsetlast = decode(texelFetch(iChannel0, ivec2(0), 0));\n  int cutoff = int(windowmax*iSampleRate);\n  if (abs(index-center) > cutoff) return;\n  int samp = index+offset;\n  int samplast = center+cutoff+offsetlast;\n  float time = (float(samp)-0.5)/iSampleRate;\n  if (samp <= offsetlast + center + cutoff) {\n    f.xy = texelFetch(iChannel0,\n      (ivec2(index+offset-offsetlast)/ivec2(1,res.x))%(res), 0).xy;\n  } else {\n    f.xy = mainSound(0,time);\n  }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "/*\nStreaming Spectrogram v.3\nCopyright 2018 Theron Tarigo\n*/\n\nconst float sgr_pi = 3.141592653589793;\n\nvec2 readsound ( int isamp ) {\n  ivec2 res = ivec2(iResolution.xy);\n  int offset = int(iTime*iSampleRate) - res.x*res.y/2;\n  int samp = isamp - offset;\n  ivec2 pix = ivec2(samp%res.x, (samp/res.x));\n  return texelFetch(iChannel1, pix, 0).xy;\n}\n\nvec2 spectrogram ( float windowtime, int isamp, float freq ) {\n  vec2 sum = vec2(0.);\n  int iwindow = int(windowtime*iSampleRate);\n  float window = float(iwindow)/iSampleRate;\n  for (int irel = -iwindow; irel <= iwindow; irel+=1) {\n    // Cosine window\n    float w = (0.5+0.5*cos(float(irel)/float(iwindow)*sgr_pi));\n    float samp = dot(stereomix,readsound(isamp+irel));\n    float a = fract(float(irel)*freq/iSampleRate)*2.*sgr_pi;\n    sum += w*vec2(cos(a),sin(a))*samp;\n  }\n  return sum/iSampleRate/window;\n}\n\n// Calibrated to ttg's hearing\n// Returns modulation frequency at which a tone at base frequency\n// transitions from sounding as beats to sounding as separate tones\nfloat timeratiofn ( float freq ) {\n  const float nparam = 58.5;\n  const float aparam = 950.;\n  return freq/nparam + exp(-freq/aparam)*aparam/nparam;\n}\n\nvoid panImage( out vec4 f, int isamp, float y ) {\n  float freq = freqscale * y / iResolution.y;\n  float windowfreq = timeratiofn(freq);\n  f.rgb = vec3(10.,3.2,1.)*\n  pow(length(spectrogram(1./windowfreq, isamp, freq)),2.)*50.;\n}\n\nvoid mainImage ( out vec4 f, in vec2 df ) {\n  ivec2 d = ivec2(df);\n  vec2 fsf = iResolution.xy;\n  ivec2 fs = ivec2(fsf);\n  int shift = int(fsf.x*timescale*(iTime));\n  int shiftlast = int(fsf.x*timescale*(iTime-iTimeDelta));\n  int delta = shift - shiftlast;\n  if ((fs.x-d.x) <= delta) {\n    float time = float(shift-fs.x+d.x)/timescale/fsf.x;\n    panImage(f, int(time*iSampleRate), df.y);\n  } else {\n    f = texelFetch(iChannel0,d+ivec2(delta,0),0);\n  }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Sound in Common",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}