{
    "Shader": {
        "info": {
            "date": "1581102562",
            "description": "https://www.shadertoy.com/view/llGXWm but cleaned up and without the 5000 chars that apparently do absolutely nothing. (i know this can be cleaned and shortened much more, but i wont now).",
            "flags": 48,
            "hasliked": 0,
            "id": "3ttXW7",
            "likes": 3,
            "name": "Black Hole Marching",
            "published": 3,
            "tags": [
                "blackhole"
            ],
            "usePreview": 0,
            "username": "Txoka",
            "viewed": 444
        },
        "renderpass": [
            {
                "code": "//https://www.shadertoy.com/view/llGXWm but cleaned up and without the 5000 chars that do absolutely nothing. (i know this can be cleaned and shortened much more, but i wont now).\n\n//just controlls size of black holes, has nothing to do with \"photon mass\" XD\nconst float photonMass =0.1;\n//iterator steps of the tracer\nconst int steps = 256;\n\nconst float rayMarcherStepLengthFactor=0.25;\n\nstruct Ray{\n    vec3 o;\n    vec3 d;\n};\n\nvec4 readData(int x, int y){return texelFetch(iChannel1,ivec2(x,y),0);}\n\n\nvec3 inv(vec3 v){return normalize(v)/dot(v,v);}\nvec3 map(vec3 p){return inv(-p)+inv(vec3(4.*cos(iTime*.3),0.,4.*sin(iTime*.3))-p);}\n\nvec2 trace(inout Ray r){\n    float totalForce = 0.;\n    float totalGD = 0.0;\n    float fd;\n    for(int i=0;i<steps;i++){\n        vec3 res=map(r.o);\n        float force=length(res);\n        if(i>0)totalGD+=force-fd;\n        fd=force;\n        totalForce+=force;\n        float dt=rayMarcherStepLengthFactor/(1.+force);\n        float integral=(photonMass*rayMarcherStepLengthFactor)*.1;\n        \n        r.d=normalize(r.d+integral*res);\n        r.o+=dt*r.d;\n    }\n    return vec2(totalGD,totalForce/float(steps)*0.2);\n}\nvec4 getColor(Ray ray)\n{\n    return texture(iChannel0,ray.d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec3 uv = vec3((fragCoord*2.-iResolution.xy)/iResolution.y,-1);\n\n    vec4 m=readData(0,1).xyzw;\n\n    vec3 ro=vec3(readData(0,0).xyz*0.1);\n    vec3 rd=normalize(uv);\n    rd.zy=vec2(dot(rd.zy,-m.zw),dot(rd.zy,m.wz*vec2(-1,1)));\n    rd.xz=vec2(dot(rd.xz,-m.xy),dot(rd.xz,m.yx*vec2(1,-1)));\n    Ray r=Ray(ro,rd);\n    \n    vec2 f=trace(r);\n\n    fragColor=getColor(r);\n    float ft=1./(1.+f.y);\n    fragColor.rgb *= ft;\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 22,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//https://www.shadertoy.com/view/llGXWm but without the 5333 chars that do absolutely nothing.\n\nconst float PI = 3.14159265359;\n//width of the camera plane\n\nint kA=65,kD=68,kE=69,kQ=81,kS=83,kW=87;\nint kSpace=32,kCtrl=17;\n\n#define key(id) if(texelFetch(iChannel0,ivec2(id,0),0).x>0.)\nvec4 readData(int x, int y){return texelFetch(iChannel1,ivec2(x,y),0);}\n\nvoid mainImage(out vec4 Q, in vec2 U){\n    float speed=readData(0,6).r;\n    int id=int(U.y);\n    vec4 self = texelFetch(iChannel1,ivec2(U),0);\n    Q=vec4(0);\n    if(U.x==0.5){\n\t\tif(iFrame==0){\n    \t   if(id==0)self=vec4(0,0,20,0);\n    \t   if(id==6)self.r=0.1;\n    \t}\n    \tif(id==0){\n            vec4 m = readData(0, 1);\n            vec3 rd=vec3(0,0,1);\n            \n            rd.zy=vec2(dot(rd.zy,-m.zw),dot(rd.zy,m.wz*vec2(-1,1)));\n    \t\trd.xz=vec2(dot(rd.xz,-m.xy),dot(rd.xz,m.yx*vec2(1,-1)));\n    \t    \n            vec3 fw=rd;\n            \n    \t    key(kW)self-=vec4(fw*speed,0);\n    \t    key(kS)self+=vec4(fw*speed,0);\n            key(kA)self-=vec4(cross(fw,vec3(0,1,0))*speed,0);\n    \t    key(kD)self+=vec4(cross(fw,vec3(0,1,0))*speed,0);\n    \t    key(kSpace)self-=vec4(cross(fw,cross(fw,vec3(0,1,0)))*speed,0);\n    \t    key(kCtrl)self+=vec4(cross(fw,cross(fw,vec3(0,1,0)))*speed,0);\n    \t    \n    \t}else if(id==1){\n    \t    vec3 lmp = readData(0, 2).xyw;\n            float p = (lmp.x / iResolution.x) * PI * 2.0;\n    \t    float t = (lmp.y / iResolution.y) * PI;\n    \t    float x = sin(p);\n    \t\tfloat y = cos(p);\n            float z = sin(t);\n            float w = cos(t);\n\t\t\tself=vec4(x,y,z,w);\n    \t} \n    \telse if(id==2){\n    \t    vec4 lmp = readData(0, 3).xyzw;\n    \t    if(lmp.w > 0.0){\n    \t        if(lmp.z <= 0.0)\n    \t            lmp.xy = iMouse.xy;\n    \t        self.xy+=vec2(iMouse.x-lmp.x,iMouse.y-lmp.y)/2.;\n    \t        self.y = clamp(self.y, 0.0, iResolution.y);\n    \t        self.a = 1.0;\n    \t    }else{\n    \t        self.a=0.0;\n    \t    }\n    \t}else if(id==3){\n    \t    if(iMouse.z>0.0){\n    \t        self=vec4(iMouse.x,iMouse.y, 1.0, 1.0);\n    \t    }else{\n    \t        self.a=0.0;\n    \t    }\n    \t}else if(id==6){\n    \t\tkey(kE)self.r=min(50.0,self.r*1.1);\n    \t\tkey(kQ)self.r=max(0.005,self.r/1.1);\n    \t}\n    \tQ = self;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}