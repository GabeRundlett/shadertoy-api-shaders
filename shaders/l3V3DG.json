{
    "Shader": {
        "info": {
            "date": "1718186732",
            "description": "particles and ",
            "flags": 0,
            "hasliked": 0,
            "id": "l3V3DG",
            "likes": 3,
            "name": "v + point",
            "published": 3,
            "tags": [
                "points",
                "particle",
                "cineshaderteramorph"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 335
        },
        "renderpass": [
            {
                "code": "/*originals https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/7lt3D4 https://www.shadertoy.com/view/ldBXDD*/\n\n#define time iTime\n#define resolution iResolution.xy\nfloat it=0.;\n\nmat2 rot(float a) {\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat hash(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat de(vec3 p) {\n    p.yz*=rot(-.5);\n    p.xz*=rot(iTime*0.2);\n    float d=10.;\n    p*=.2;\n    for (float i=0.; i<10.; i++) {\n        p.xy=sin(p.xy*2.);\n        p.xy*=rot(1.);\n        p.xz*=rot(1.5);\n        float l=length(p.xy)+.01;\n        if (i>1.) d=min(d,l);\n        if (d==l) it=i;\n    }\n    return d*1.13;\n}\n\nvec3 march(vec3 from, vec3 dir) {\n    float d, td=hash(gl_FragCoord.xy+iTime)*.2;\n    vec3 p, col=vec3(0.);\n    for (int i=0; i<200; i++){\n        p=from+dir*td;\n        d=max(.005,abs(de(p)));\n        td+=d;\n        if (td>10.) break;\n        vec3 c=vec3(1.,-.5,0.);\n        c.rb*=rot(-it*.15+iTime*.1);\n        c=normalize(1.+c);\n        c*=exp(-.15*td);\n        c*=exp(-.5*length(p));\n        c/=1.+d*1500.;\n        c*=.3+abs(pow(abs(fract(length(p)*.15-iTime*.2+it*.05)-.5)*2.,30.))*4.;\n        col+=c;\n        col+=exp(-5.*length(p))*.15;\n    }\n    return col;\n}\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n\n\n\nvec3 glw; //glow\n\nfloat bx(vec3 p, vec3 s) //box\n{\n  vec3 q=abs(p)-s;\n  return min(max(q.x,max(q.y,q.z)),0.) + length(max(q,0.));\n}\n\nvec2 mp(vec3 p) //scene\n{\n \n float scl=0.8;\n   p.yx*=rot(1.55);\n   \n  for(int i=0;i<3;i++)\n  {\n   ;\n    p.y=abs(p.y)-scl;\n    p.x+=p.y*scl;\n    scl-=abs(p.y)*0.2;\n    p.yx*=rot(iTime*0.10);\n    p.zy*=rot(iTime*0.10);\n  }\n  float s = length(p-vec3(0,0,2));\n  float b = bx(p,vec3(scl)) - 0.1;\n  b*=0.5;b=min(s,b);\n  s*=8.;glw += 0.01/(0.01*s*s)*normalize(p*p);\n  return vec2(b,1);\n}\n\nvec2 tr(vec3 ro, vec3 rd, float z) //raymarch\n{\n  vec2 d=vec2(0);\n  for(int i=0;i<256;i++)\n  {\n    vec2 s=mp(ro+rd*d.x);\n    s.x*=z;d.x+=s.x;d.y=s.y;\n    if(s.x<0.0001||d.x>64.)break;\n  }\n  return d;\n}\n\nvec3 nm(vec3 p) //get normal\n{\n  vec2 e=vec2(0.001,0); return normalize(mp(p).x - vec3(mp(p-e.xyy).x,mp(p-e.yxy).x,mp(p-e.yyx).x));\n}\n\nvec4 px(vec2 h, vec3 p, vec3 n, vec3 r) //shade pixel\n{\n  vec4 bg = vec4(0.1,0.1,0.8,0) + length(r*r)*0.5;\n  if(h.x>64.) return bg;\n  vec4 fc = vec4(0.4,0.4,01,1);\n  vec3 ld = normalize(vec3(0.6,0.4,0.8));\n  float diff = length(n*ld);\n  float fres = abs(1.-length(n*r))*0.2;\n  float spec = pow(max(dot(reflect(ld,n)*ld,-r),0.),6.);\n  float ao = clamp(1.-mp(p+n*0.1).x*10.,0.,1.)*0.1;\n  float sss = smoothstep(0.,1.,mp(p*ld*3.).x)*0.6;\n  fc.rgb+=fc.rgb*sss;\n  fc*=diff;\n  fc+=spec;\n  fc+=fres;\n  fc-=ao;\n  return fc;\n}\n\nfloat makePoint(float x,float y,float fx,float fy,float sx,float sy,float t){\n   float xx=x+sin(t*fx)*sx;\n   float yy=y+cos(t*fy)*sy;\n   return 1.0/sqrt(xx*xx+yy*yy);\n}\n#define N 40\n#define PI2 (3.14159265*2.0)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//get coords and direction\nvec2 uv=fragCoord.xy/iResolution.xy-.5;\nuv.y*=iResolution.y/iResolution.x;\n\n\n vec3 from2=vec3(0.,0.,-3.-cos(iTime*.5));\n    vec3 dir2=normalize(vec3(uv,1.2));\n    vec3 col=march(from2, dir2);\n\n\n  vec3 ro = vec3(0,0,-12),rd=normalize(vec3(uv,1.));\n  vec3 cp,cn,cr,h=vec3(1);\n  vec4 cc,fc=vec4(1);\n \n  //adjust this value for different amounts of refraction\n  //higher = more refraction; lower = less refraction (1.0 is none)\n  //below 1.0 makes them.. inverted i think? kinda interesting\n  float io = 1.4;\n \n  for(int i=0;i<4*2;i++) //more efficient transparency loop\n  {\n     h.xy=tr(ro,rd,h.z);cp=ro+rd*h.x;\n     cn=nm(cp);cr=rd;ro=cp-cn*(0.01*h.z);\n     rd=refract(cr,cn*h.z,h.z>0.?1./io:io);\n     if(dot(rd,rd)==0.)rd=reflect(cr,cn*h.z);\n     cc=px(h.xy,cp,cn,cr);h.z*=-1.;\n     if(h.z<0.)fc.rgb=mix(fc.rgb,cc.rgb,fc.a);\n     fc.a*=cc.a;if(fc.a<=0.||h.x>64.)break;\n  }\n \n  //various interesting effects to try\n\n\n\nvec2 v = (gl_FragCoord.xy - resolution/2.0) / min(resolution.y,resolution.x) * 15.0;\n\n\tfloat t = time * 4.0;\nfloat t2 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(v.xy) + .07)) * 2.2;\n\tfloat si2 = sin(t2);\n\tfloat co2 = cos(t2);\n\tmat2 ma = mat2(co2, si2, -si2, co2);\n\tfloat factor =  0.0;\n\tfloat co = cos(  PI2);\n\tfloat si = sin( PI2);\n\tfor ( int i = 1; i <= N; i++ ){\n\t\tfloat d = float(i+3) / float(N);\n\t\tfloat x = v.x;\n        v.xy*=ma;\n\t\tfloat y = v.y + sin(v.x * d * .0 + t)/d*factor + cos(v.x * d + t)/d*factor;\n\t\tv.xy*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n\t\tv.x = x * co - y * si;\n\t\tv.y = x * si + y * co;\n\n\t}\n    \n\tfloat col2 = length(v)*0.25;\n   vec2 p=(fragCoord/resolution.x)*2.0-vec2(1.0,resolution.y/resolution.x);\n\n   p=p*2.0;\n   \n   float x=p.x;\n   float y=p.y;\n\n   float a=\n       makePoint(x,y,3.3,2.9,0.3,0.3,time);\n   a=a+makePoint(x,y,1.9,2.0,0.4,0.4,time);\n   a=a+makePoint(x,y,0.8,0.7,0.4,0.5,time);\n   a=a+makePoint(x,y,2.3,0.1,0.6,0.3,time);\n   a=a+makePoint(x,y,1.8,1.7,0.5,0.4,time);   \n   \n   float b=\n       makePoint(x,y,1.2,1.9,0.3,0.3,time);\n   b=b+makePoint(x,y,0.7,2.7,0.4,0.4,time);\n   b=b+makePoint(x,y,1.4,0.6,0.4,0.5,time);\n   b=b+makePoint(x,y,2.6,0.4,0.6,0.3,time);\n   b=b+makePoint(x,y,0.7,1.4,0.5,0.4,time);\n   b=b+makePoint(x,y,0.7,1.7,0.4,0.4,time);\n   b=b+makePoint(x,y,0.8,0.5,0.4,0.5,time);\n   b=b+makePoint(x,y,1.4,0.9,0.6,0.3,time);\n   b=b+makePoint(x,y,0.7,1.3,0.5,0.4,time);\n\n   float c=\n       makePoint(x,y,3.7,0.3,0.3,0.3,time);\n   c=c+makePoint(x,y,1.9,1.3,0.4,0.4,time);\n   c=c+makePoint(x,y,0.8,0.9,0.4,0.5,time);\n   c=c+makePoint(x,y,1.2,1.7,0.6,0.3,time);\n   c=c+makePoint(x,y,0.3,0.6,0.5,0.4,time);\n   c=c+makePoint(x,y,0.3,0.3,0.4,0.4,time);\n   c=c+makePoint(x,y,1.4,0.8,0.4,0.5,time);\n   c=c+makePoint(x,y,0.2,0.6,0.6,0.3,time);\n   c=c+makePoint(x,y,1.3,0.5,0.5,0.4,time);\n   \n   vec3 d=vec3(a,b,c)/32.0;\n  vec4 fc3 = vec4( cos(col2), cos(col2*2.0), cos(col2*4.0), 1.0 );\n   fragColor = vec4(d.x,d.y,d.z,1.0);\n   fragColor+=vec4(fc);\n\n\n\n\n   \n    fragColor=vec4(fc.xyz*d,1.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}