{
    "Shader": {
        "info": {
            "date": "1673273612",
            "description": "Path tracing raymarching",
            "flags": 32,
            "hasliked": 0,
            "id": "mlSGRW",
            "likes": 0,
            "name": "CornelBox Pathmarching",
            "published": 3,
            "tags": [
                "pathtracing",
                "cornerlbox"
            ],
            "usePreview": 0,
            "username": "NoxWings",
            "viewed": 58
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nconst float INF = 1e15;\nconst float M_PI = 3.14159;\nconst float HIT_EPS = 0.001;\n\nmat2 r2d(float a) {float sa=sin(a), ca=cos(a);return mat2(ca, -sa, sa, ca);}\n\n// Basic SDFs\n\nfloat sdSphere(vec3 p, float r) \n{\n    return length(p) - r;\n}\n\nfloat sdBox( vec3 p, vec3 b ) \n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// Random numbers\n\nvec2 get_random_numbers(inout uvec2 seed) \n{\n    // This is PCG2D: https://jcgt.org/published/0009/03/02/\n    seed = 1664525u * seed + 1013904223u;\n    seed.x += 1664525u * seed.y;\n    seed.y += 1664525u * seed.x;\n    seed ^= (seed >> 16u);\n    seed.x += 1664525u * seed.y;\n    seed.y += 1664525u * seed.x;\n    seed ^= (seed >> 16u);\n    // Convert to float. The constant here is 2^-32.\n    return vec2(seed) * 2.32830643654e-10;\n}\n\n// Sampling \n\nvec3 sample_sphere(vec2 random_numbers) \n{\n    float z = 2.0 * random_numbers[1] - 1.0;\n    float phi = 2.0 * M_PI * random_numbers[0];\n    float x = cos(phi) * sqrt(1.0 - z * z);\n    float y = sin(phi) * sqrt(1.0 - z * z);\n    return vec3(x, y, z);\n}\n\nvec3 sample_hemisphere(vec2 random_numbers, vec3 normal)\n{\n    vec3 direction = sample_sphere(random_numbers);\n    if (dot(normal, direction) < 0.0)         \n        direction -= 2.0 * dot(normal, direction) * normal;     \n    return direction;\n}\n\n// Hit & Rays\n\nstruct Hit \n{\n    int matId;\n    float d;\n};\n\nstruct RayResult \n{\n    float t;\n    int steps;\n    Hit hit;\n};\n\nHit hmin(Hit a, Hit b) { if (a.d < b.d) return a; return b; } \nHit hmax(Hit a, Hit b) { if (a.d > b.d) return a; return b; }\n\n// Materials\n\nstruct Material {\n    vec3 color;\n    vec3 emissive;\n};\n\nconst int MATERIALS = 6;\nconst float LIGHT_INTENSITY = 3.0;\nMaterial mats[MATERIALS] = Material[MATERIALS]( \n    Material(vec3(0,0,0), vec3(0,0,0)),        // 0- NONE\n    Material(vec3(0.839, 0.839, 0.84), vec3(0,0,0)),  // 1- Balls\n    Material(vec3(0.73, 0.246, 0.251), vec3(0,0,0)),  // 2- Red wall\n    Material(vec3(0.29, 0.664, 0.325), vec3(0,0,0)),  // 3- Green wall\n    Material(vec3(0.0,0.0,0.0), vec3(LIGHT_INTENSITY)),  // 4- Light ceiling\n    Material(vec3(0.874, 0.874, 0.875), vec3(0,0,0))   // 6- White walls\n);\n\nHit map(vec3 p) \n{\n    vec3 boxSize = vec3(1.0, 1.0, 1.0);\n    vec4 bs = vec4(boxSize, 0.01);\n    \n    Hit h = Hit(0, INF);\n\n    // floor\n    h = hmin(h, Hit(5, sdBox(p - vec3(0,0,0), bs.xwz)));\n    // back\n    h = hmin(h, Hit(5, sdBox(p - vec3(0, bs.y, -bs.z), bs.xyw)));\n    // left\n    h = hmin(h, Hit(2, sdBox(p - vec3(-bs.x, bs.y, 0), bs.wyz)));\n    // right\n    h = hmin(h, Hit(3, sdBox(p - vec3(bs.x, bs.y, 0), bs.wyz)));\n    // top\n    h = hmin(h, Hit(4, sdBox(p - vec3(0,bs.y*2.0,0), bs.xwz)));\n    \n    // Left box \n    vec3 q = p;\n    q -= vec3(-.3,0.6,-.2);\n    q.xz *= r2d(0.13 * M_PI);\n    h = hmin(h, Hit(1, sdBox(q, vec3(0.30, 0.60, 0.30))));\n    // Right box\n    q = p;\n    q -= vec3(0.4,0.30,0.2);\n    q.xz *= r2d(-0.13 * M_PI);\n    h = hmin(h, Hit(1, sdBox(q, vec3(0.30, 0.30, 0.30))));\n    \n    \n    return h;\n}\n\nvec3 mapNormal(vec3 p) \n{\n    vec2 eps = vec2(0.001, 0.0);\n    float d = map(p).d;\n    return normalize(vec3(\n        d - map(p - eps.xyy).d,\n        d - map(p - eps.yxy).d,\n        d - map(p - eps.yyx).d\n    ));\n}\n\nRayResult raymarch(vec3 ro, vec3 rd, int maxSteps, float far) \n{\n    int steps = 0;\n    float t = 0.0;\n    float minD = INF;\n    Hit hit = Hit(0, INF);\n    \n    for (steps = 0; steps < maxSteps; steps++) \n    {\n        vec3 p = ro + rd * t;\n        hit = map(p);\n        \n        if (hit.d < minD) minD = hit.d;\n        if (hit.d < HIT_EPS) \n        {\n            return RayResult(t, steps, hit);\n        }\n\n        t += hit.d;\n        if (t >= far) \n        {\n            break;\n        }\n    }\n\n    return RayResult(INF, steps, hit);\n}\n\n\nvec3 pathTrace(vec3 ro, vec3 rd, uvec2 pixel) \n{\n    int maxSteps = 128;\n    float far = 10.0;\n    \n    uvec2 seed = pixel;\n    vec3 radiance = vec3(0);\n    vec3 throughput = vec3(1);\n\n    for (int bounces = 0; bounces < 5; bounces++)\n    {\n        RayResult res = raymarch(ro, rd, maxSteps, far);\n        if (res.t < INF) \n        {\n            Material m = mats[res.hit.matId];\n            radiance += m.emissive * throughput;\n        \n            vec3 hit_point = ro + rd * res.t;\n            vec3 hit_normal = mapNormal(hit_point);\n            \n            ro = hit_point + hit_normal * HIT_EPS * 2.0;\n            rd = sample_hemisphere(get_random_numbers(seed), hit_normal);\n            \n            throughput *= m.color * 2.0 * dot(hit_normal, rd);\n        }\n        else \n        {\n            break;\n        }\n    }\n    \n    return radiance;\n}\n\nfloat camZoom(float fovDegrees) \n{\n    const float DEG2RAD = M_PI / 180.0;\n    float halfFov = fovDegrees * 0.5;\n    float rad = halfFov * DEG2RAD;\n    return -cos(rad) / sin(rad);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uvec2 seed = uvec2(fragCoord) ^ uvec2(iFrame << 16);\n    vec2 rand1 = get_random_numbers(seed) * 2.0 - 1.0;\n      \n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvJit = (fragCoord + rand1)/iResolution.xy;\n    vec2 fakeScreen = (uvJit * 2.0 - 1.0) * vec2(iResolution.x / iResolution.y, 1.0);;\n\n    vec3 ro = vec3(0, 1.0, 3.5);\n    vec3 rd = normalize(vec3(fakeScreen, camZoom(40.0)));\n\n    vec3 color = pathTrace(ro, rd, seed);\n    \n    if (iFrame > 0) \n    {\n        float weight = 1.0 / float(iFrame+1);\n        vec3 prevColor = texture(iChannel0, uv).rgb;\n        vec3 newColor = max(vec3(0.0), color);\n        color = mix(prevColor, newColor, vec3(weight));\n    } \n    \n    fragColor = vec4(color,1.0);\n}\n ",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}