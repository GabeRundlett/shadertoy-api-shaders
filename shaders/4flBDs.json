{
    "Shader": {
        "info": {
            "date": "1724503846",
            "description": "origlans https://www.shadertoy.com/view/DtGyWh",
            "flags": 0,
            "hasliked": 0,
            "id": "4flBDs",
            "likes": 4,
            "name": "new embrion",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 96
        },
        "renderpass": [
            {
                "code": "#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\n\nconst float PI = acos(-1.0);\nconst float TAU = PI * 2.0;\nconst float phi = sqrt(5.0) * 0.5 + 0.5;\n\nconst float goldenAngle = TAU / phi / phi;\n\n\nvec2 rotateAroundPoint(float x){\n\treturn vec2(sin(x), cos(x));\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\t\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n#define time iTime\n#define resolution iResolution.xy\nvec3 calculateGoldenShape(vec2 p){\n\tconst int steps =64;\n\tconst float rSteps = 1.0 / float(steps);\n\t\n\tvec3 result = vec3(0.0);\n\t\n\tfor (int i = 0; i < steps; ++i)\n\t{\n\t\tfloat n = float(i);\n\t\t\n\t\tfloat inc = n * rSteps;\n\t\tvec2 offset = rotateAroundPoint(fract(-time*0.055)*6.28+n * goldenAngle*sin(time*0.0025)) * inc * 0.45;\n\t\t\n\t\tvec3 dist = vec3(distance(p, offset));\n\t\t     dist = exp2(-dist * 30.0) * hsv2rgb(vec3(fract(time*0.2)+inc*0.75, 1.0, 1.0));\n\t\t\n\t\tresult = max(result, dist);\n\t}\n\t\n\treturn result;\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n         vec2 position = (gl_FragCoord.xy / resolution.xy - 0.5) * vec2(resolution.x/ resolution.y, 1.0);\n    vec3 color = vec3(0.0);\n\t     color += tan(calculateGoldenShape(position) * 3.0);\n\t\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n\n\n\t\n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=3.;\n        for(int i=0;i++<8;){\n            p=.5-abs(p);\n            \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            p.y<p.x?p=p.zyx:p;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 )*color;\n         }\n      \n         g+=e=length(p.yx)/s;\n    }\n    vec2 uv = ( C - .5*iResolution.xy ) / iResolution.y;\n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n   O*= vec4(cheap_star( position, anim) * vec3(0.35,0.2,0.65)*10.*color, 1.0);\n    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}