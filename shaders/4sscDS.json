{
    "Shader": {
        "info": {
            "date": "1489675406",
            "description": "boom",
            "flags": 0,
            "hasliked": 0,
            "id": "4sscDS",
            "likes": 11,
            "name": "Sine Wave Zion 2",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "tomachi",
            "viewed": 705
        },
        "renderpass": [
            {
                "code": "// Concept: an animation of wave harmonics\n// show 1st, 2nd, 3rd order harmonics somehow \n\nfloat divs = 2.2;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 m = iMouse; \n    if ( m.x == 0. && m.y == 0.) {\n        m.x = iResolution.x / 2.;\n        m.y = iResolution.y / 2.;\n\n    }\n\tfloat dist = m.x - ( iResolution.x / 2.0 ); // centererd\n    float speed = 0.0009; // 0.9 camera movement to plane \n    float timespeed =   0.1 ; // 0.1 wave movement on the ribbons\n    float igt = iTime; // shorter version of time\n   \n    //float t = 7.0 - (iTime * speed);\n    \n    // MOUSE: multiple by my or mx to get value between 1 and 2\n    float my = float( (m.y + iResolution.y ) / iResolution.y );\n    float mx = float( (m.x + iResolution.y ) / iResolution.x );\n\n    float t = 8.0 - speed ;\n\n    // divs create staggered / staged division:\n    //divs += t / 0.20;\n    \n    // let the mouse distance be the divs number, usually 1\n    // idea: mouse to the far right equals 1\n    divs += t / ( ( m.x + 2. ) /  iResolution.x );\n    \n\tvec2 div = vec2( divs, divs*iResolution.y/iResolution.x );\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    // center on screen\n    \n    uv -= 0.1 + (iTime*0.0001);\t\n    \n    \n    float b = 1.0*divs/iResolution.x;\t// blur over 2.4 pixels\n    //float b = 1000.1;\t// sharp - no blur\n\n    vec2 xy = div*uv;\n    \n    vec2 S; // speed of fundamental\n    vec2 S2; // speed of 1st octave\n\tvec2 S3; // speed of 2nd harmonic (perfect fifth?)\n\n    \n\tS.x = (xy.x + xy.y)*(xy.x - xy.y)*0.5;\t\t// \"velocity potential\"\n\tS2.x = (xy.x + xy.y)*(xy.x - xy.y)*0.5;\t\t// \"velocity potential\"\n\tS3.x = (xy.x + xy.y)*(xy.x - xy.y)*0.5;\t\t// \"velocity potential\"\n\n    S.y = xy.x*xy.y;\t\t\t\t\t\t// stream function\n\tS2.y = xy.x*xy.y;\t\t\t\t\t\t// stream function\t\n\tS3.y = xy.x*xy.y;\t\t\t\t\t\t// stream function\n\n    \n    \n    // speed of the dots\n    S.x   -=  iTime        *timespeed;\t\t\t\t\t\t// animate stream\n    S2.x  -=  iTime        *timespeed; // + (my * 20. );\t\t\t\t\t\t// animate stream\n    S3.x  -=  iTime        *timespeed; // + (my * 20.);\t\t\t\t\t\t// animate stream\n\n    //S2.x -= (iTime + my) *timespeed; //  * (m.y - (iResolution.y/2.) / iResolution.y) ;\t\t\t\t\t\t// animate stream\n\t//S3.x -= (iTime + my * 2. ) *timespeed; //  * (m.y - (iResolution.y/2.) / iResolution.y) ;\t\t\t\t\t\t// animate stream\n    \n    \n    \n\t// HERE IS THE WAVE HARMONICS \n    // SXY IS FUNDAMENTAL WAVE2 IS 2ND HARMONIC\n    // sxy is *probably* the main wave\n    // wave2 is the 2nd harmonic\n    \n    vec2 sxy =   sin(3.14159 * S  * 1.0 );\n    vec2 wave2 = sin(3.14159 * S2 * 1.1 ); // 2.00 is double\n    vec2 wave3 = sin(3.14159 * S3 * 1.2 ); // 3.00 is double\n    \n    \n    // w2 is the 2nd harmonic\n    float a = sxy.x * sxy.y;\t\t// combine sine waves using product\n    float w2 = wave2.x * wave2.y;\t// combine sine waves using product\n    float w3 = wave3.x * wave3.y;\t// combine sine waves using product\n    \n    // not sure what this does but we will do it to w2, w3 as well\n    a = 0.5*a + 0.5;\t\t\t\t\t\t\t// remap to [0..1]\n\ta = smoothstep( 0.85-b, 0.85+b, a );\t\t// threshold\n    \n    w2 = 0.5*a + 0.5;\t\t\t\t\t\t\t// remap to [0..1]\n\tw2 = smoothstep( 0.85-b, 0.85+b, a );\t\t// threshold\n    \n    w3 = 0.5*a + 0.5;\t\t\t\t\t\t\t// remap to [0..1]\n\tw3 = smoothstep( 0.85-b, 0.85+b, a );\t\t// threshold\n    \n    float c = sqrt( a  );\t\t\t\t\t\t// correct for gamma\n\tfloat w2gamma = sqrt( w2 );\t\t\t\t\t// correct for gamma\n\tfloat w3gamma = sqrt( w3 );\t\t\t\t\t// correct for gamma\n    \n    float red, green, blue;\n    \n    red   =    sxy.x - sxy.y ;\n    green =  wave2.x - wave2.y;\n    blue  =  wave3.x - wave3.y;\n    \n    float crossover = my * -1.;\n    \n    if (red < crossover) {\n       red = red * -1.;\n    }\n    if (green < crossover) {\n        green = green * -1.;\n    } \n    if (blue < crossover) {\n        blue = blue * -1.;\n    } \n    \n    \n    fragColor = vec4( red, green, blue, 1.0);\n    //fragColor = vec4(sxy.x, c, sxy.y, 1.0);\n\n    \n    //red =  sxy.x + wave2.y;\n    //green =  sxy.x + wave2.y;\n    //blue =  sxy.x + wave2.y;\n    \n        \n    //red =  sxy.x + wave2.y;\n    //green =  sxy.x + wave2.y;\n    //blue =  sxy.x + wave2.y;\n    \n        \n    //red =  sxy.x + sxy.y + wave2.x + wave2.y + wave3.x + wave3.y;\n    //green =   wave2.x - wave2.y;\n    //blue =   wave3.x - wave3.y;\n    \n    \n    // NICE WHITE RIBBON TYPE WAVE\n    //red =  sxy.x + sxy.y + wave2.x + wave2.y + wave3.x + wave3.y;\n    //green =  sxy.x + sxy.y + wave2.x + wave2.y + wave3.x + wave3.y;\n    //blue =  sxy.x + sxy.y + wave2.x + wave2.y + wave3.x + wave3.y;\n\n    // blue lines yellow and white balls\n    // fragColor = vec4(c, c, sxy.y, 1.0);\n    \n    \n    // blue lines yellow and white balls\n    //fragColor = vec4(  (c*2.0) - (w2gamma*2.0)  - (w3gamma*3.0) , c*2.0, sxy.y + wave2.y, 1.0);\n    //fragColor = vec4(  (c*2.0) - (w2gamma*2.0)  , c*2.0, sxy.y + wave2.y, 1.0);\n    //fragColor = vec4(c*2.0, wave2.y, sxy.y + wave2.y, 1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}