{
    "Shader": {
        "info": {
            "date": "1606942974",
            "description": ":octopus:",
            "flags": 0,
            "hasliked": 0,
            "id": "3dyfzm",
            "likes": 46,
            "name": "- solar system -",
            "published": 3,
            "tags": [
                "sun",
                "sdf",
                "earth",
                "star",
                "space",
                "planet",
                "galaxy",
                "moon",
                "mars",
                "universe",
                "saturn",
                "mercury",
                "solarsystem",
                "venus",
                "jupiter",
                "uranus"
            ],
            "usePreview": 1,
            "username": "anahit_movsesyan",
            "viewed": 2546
        },
        "renderpass": [
            {
                "code": "#define EPS 0.001\n#define MAX_DIST 50.\n#define PI 3.141592\n\nstruct SdfCtx {\n    float k;\n    vec3 col;\n    float d; \n};\n\nfloat sdSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\nfloat sdTorus(vec3 p, float bR) {\n    return length(vec2(length(p.xz) - bR, p.y)) - 0.0015;  \n}\n\nfloat stripe(float dist, float o) {\n    return abs(dist) - o;\n}\n\nSdfCtx addPrimitive(SdfCtx p1, SdfCtx p2) {\n    if (p1.d < p2.d) {\n        return p1;\n    }\n    return p2;\n}\n\nmat2 rotMat(float k) {\n    float c = cos(k);\n    float s = sin(k);\n    return mat2(c, -s, s,  c);\n}\n\nmat3 rotateY(float k) {\n    float c = cos(k);\n    float s = sin(k);\n    return mat3(c,  0, -s,\n                0,  1,  0,\n                s,  0,  c);\n}\n\nSdfCtx calcDist(vec3 p) {\n    float t = iTime;\n    \n    float dStripedSphere = stripe(stripe(stripe(stripe(sdSphere(p * rotateY(t * 0.05) + vec3(2.05, 0., 2.05), 0.264 + 0.08), 0.08), 0.06), 0.02), 0.01);\n    float dStripes = max(max(dStripedSphere, p.y), -(p.y + 0.001));\n    \n    vec3 moonP = 0.1 + (p * rotateY(t * 0.3) - vec3(0.1) * rotateY(t * 3.5));\n\t   \n    //PLANETS\n    SdfCtx d = \t\t\tSdfCtx(0.,  vec3(0.,   0.,   0.),   sdSphere(p * rotateY(t * 0.)    + vec3(0., 0., 0.),     0.42));   // SUN\n    d = addPrimitive(d, SdfCtx(0.,  vec3(0.1,  0.1,  0.1), \tsdSphere(moonP \t\t\t\t    + vec3(0.75, 0., 0.75), 0.02)));  // MOO\n    d = addPrimitive(d, SdfCtx(0., \tvec3(0.3,  0.3,  0.3),  sdSphere(p * rotateY(t * 2.)    + vec3(0.45, 0., 0.45), 0.03)));  // MER\n    d = addPrimitive(d, SdfCtx(0., \tvec3(0.57, 0.57, 0.57), sdSphere(p * rotateY(t * 1.)    + vec3(0.65, 0., 0.65), 0.072))); // VEN\n    d = addPrimitive(d, SdfCtx(0., \tvec3(0.1,  0.3,  0.4),  sdSphere(p * rotateY(t * 0.3)   + vec3(0.85, 0., 0.85), 0.078))); // EAR\n    d = addPrimitive(d, SdfCtx(1., \tvec3(0.53, 0.24, 0.15), sdSphere(p * rotateY(t * 0.2)   + vec3(1.1,  0., 1.1),  0.06)));  // MAR\n    d = addPrimitive(d, SdfCtx(35., vec3(0.4,  0.2,  0.07), sdSphere(p * rotateY(t * 0.1)   + vec3(1.45, 0., 1.45), 0.33)));  // JUP\n    d = addPrimitive(d, SdfCtx(30., vec3(0.3,  0.2,  0.1),  sdSphere(p * rotateY(t * 0.05)  + vec3(2.05, 0., 2.05), 0.264))); // SAT\n    d = addPrimitive(d, SdfCtx(2., \tvec3(0.45, 0.59, 0.71), sdSphere(p * rotateY(t * 0.01)  + vec3(2.55, 0., 2.55), 0.15)));  // URA\n    d = addPrimitive(d, SdfCtx(40., vec3(0.2,  0.29, 0.47), sdSphere(p * rotateY(t * 0.005) + vec3(2.8,  0., 2.8),  0.1)));   // NEP\n    \n    vec3 orbitCol = vec3(0.15);\n    \n    //ORBITS\n    d = addPrimitive(d, SdfCtx(0., orbitCol, sdTorus(p, 0.63))); // MER\n    d = addPrimitive(d, SdfCtx(0., orbitCol, sdTorus(p, 0.92))); // VEN\n    d = addPrimitive(d, SdfCtx(0., orbitCol, sdTorus(p, 1.20))); // EAR\n    d = addPrimitive(d, SdfCtx(0., orbitCol, sdTorus(p, 1.55))); // MAR \n    d = addPrimitive(d, SdfCtx(0., orbitCol, sdTorus(p, 2.05))); // JUP\n    d = addPrimitive(d, SdfCtx(0., orbitCol, sdTorus(p, 2.90))); // SAT\n    d = addPrimitive(d, SdfCtx(0., orbitCol, sdTorus(p, 3.60))); // URA\n    d = addPrimitive(d, SdfCtx(0., orbitCol, sdTorus(p, 3.95))); // NEP\n    \n    //RINGS\n    d = addPrimitive(d, SdfCtx(0.,  vec3(0.3,  0.2,  0.1),  dStripes)); // SAT\n    \n    return d;\n}  \n\nvec3 calcNormal(vec3 pos) {\n    float d = calcDist(pos).d;\n    return normalize(vec3(d - calcDist(pos - vec3(EPS, 0,  0 )).d,\n                          d - calcDist(pos - vec3( 0, EPS, 0 )).d,\n                          d - calcDist(pos - vec3( 0,  0, EPS)).d));\n}\n\nvec3 calcLight(vec3 fragPos, vec3 lightPos, vec3 lightCol, vec3 camDir) {    \n    vec3 normal = calcNormal(fragPos);\n    vec3 lightDir = normalize(lightPos - fragPos);\n\n    vec3 ambient = vec3(0.1);\n    vec3 diffuse = vec3(max(dot(normal, lightDir), 0.));\n\n    return lightCol * (ambient + diffuse);\n}\n\nmat3 calcLookAtMatrix(vec3 camPos, vec3 at) {\n    vec3 zAxis = normalize(at - camPos);\n    vec3 xAxis = normalize(cross(zAxis, vec3(0., 1., 0.)));\n    vec3 yAxis = normalize(cross(xAxis, zAxis));\n    return mat3(xAxis, yAxis, zAxis);\n}\n\nSdfCtx rayMarch(vec3 rayO, vec3 rayD) {\n    SdfCtx res = SdfCtx(0., vec3(0), 0.);\n    for( int i = 0 ; i < 100; i++ ) {\n        SdfCtx dS = calcDist(rayO + rayD * res.d);\n        if (dS.d < EPS || res.d > MAX_DIST) break;\n        res.col = dS.col;\n        res.k = dS.k;\n        res.d += dS.d;\n    }\n    return res;\n}\n\nvec3 calcPlanetTexture(vec2 p, vec3 col, float k) {\n    return vec3(sin(p.y * k) * 0.1 + 0.4) * col;\n}\n\nfloat fallingStar(vec2 p, vec2 a, vec2 b) {\n    p -= a;\n    b -= a;\n    float h = clamp(dot(p, b) / dot(b, b), 0., 1.);\n    p -= b * h;\n    return h * smoothstep(2. * h / iResolution.y, 0., length(p));\n}\n\nfloat hash(vec3 p) {\n\tp = fract(p * vec3(.1031, .11369, .13787));\n    p += dot(p, p.yzx + 19.19);\n    return fract((p.x + p.y) * p.z);\n}\n\nfloat calcStarLayer(vec3 d, float intensity) {\n    return smoothstep(intensity, 0., length(fract(d) - 0.5)) * smoothstep(0.98, 1., hash(floor(d)));\n}\n\nvec3 calcBgColor(vec2 xy, vec3 rayDir) {\n    return fallingStar(xy * rotMat(PI), vec2(-0.04) + tan(iTime / 4.), vec2(0.04) + tan(iTime / 4.)) * vec3(0.3, 0.4, 0.7) +\n           vec3(calcStarLayer(rayDir * 550., abs(sin(iTime / 2.)) / 2.)) * vec3(0.5, 0.28, 0.73) + \n           vec3(calcStarLayer(rayDir * 500., abs(cos(iTime / 2.)) / 2.)) * vec3(0.3, 0.6,  0.73) + \n           vec3(calcStarLayer(rayDir * 400., abs(cos(iTime)) / 2.)) * vec3(0.5, 0.58, 0.43) + \n           vec3(calcStarLayer(rayDir * 500., abs(sin(iTime)) / 2.)) * vec3(0.2, 0.2, 0.8);\n}\n\nvec2 calcUV(vec3 p) {\n    vec3 n = calcNormal(p);\n    return vec2(atan(n.x, n.z) / (2. * PI) + 0.5, n.y * 0.5 + 0.5);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 xy = (fragCoord.xy - iResolution.xy / 2.) / min(iResolution.x, iResolution.y);\n\n    vec3 camPos = vec3(-7., 6. * max(abs(cos(iTime / 30.)), 0.4), -8. * sin(iTime / 30.));\n    mat3 cam = calcLookAtMatrix(camPos, vec3(0, -0.5, 0));\n\n    vec3 rayDir = cam * normalize(vec3(xy, 2.));\n    SdfCtx rayRes = rayMarch(camPos, rayDir);     \n\n    vec3 col = vec3(0);\n\n    if(rayRes.d < MAX_DIST){\n        vec3 p = camPos + rayRes.d * rayDir;\n        if (rayRes.col.x == 0.) {\n            col = (texture(iChannel0, calcUV(p * rotateY(iTime / 5.))).xyz / 1.1 + 0.5) * 1.5 * vec3(0.96, 0.55, 0);\n        } else {\n            col = vec3(calcPlanetTexture(vec2(p), rayRes.col, rayRes.k)) + calcLight(p, vec3(0), vec3(0.4), rayDir);\n        }\n    } else {\n        col = calcBgColor(xy, rayDir) + vec3(0.09 / length(xy - vec2(0, 0.07))) * vec3(0.7, 0.5, 0.);\n    }\n\n    fragColor = vec4(col, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}