{
    "Shader": {
        "info": {
            "date": "1619800327",
            "description": "I've finally got a reasonable closest points for lines method. Spurred by @iapafoto's shader: [url=https://www.shadertoy.com/view/fsBXzR]https://www.shadertoy.com/view/fsBXzR[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "NdjXzD",
            "likes": 11,
            "name": "Closest Points - Lines",
            "published": 3,
            "tags": [
                "2d",
                "lines",
                "points",
                "closest"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 257
        },
        "renderpass": [
            {
                "code": "void update(in vec2 a, in vec2 b, inout vec4 pair, inout float comp) {\n    vec2 ba = b - a;\n    float comp2 = dot(ba, ba);\n    if (comp2 < comp) { pair = vec4(a, b); comp = comp2; }\n}\n\nvec4 closestPointsLines(in vec2 a, in vec2 b, in vec2 c, in vec2 d) {\n    vec2 ba = b - a, ca = c - a, dc = d - c;\n\n    // Closest points are an intersection (this case can be ignored in 3D)\n    float v = (ba.y * ca.x - ba.x * ca.y) / (dc.y * ba.x - dc.x * ba.y); // 2D cross products\n    float u = (ca.x + dc.x * v) / ba.x;\n    if (u >= 0.0 && u <= 1.0 && v >= 0.0 && v <= 1.0) return (a + ba * u).xyxy;\n\n    // Closest points are caps and projections of the caps\n    float baba = dot(ba, ba), dcdc = dot(dc, dc);\n\n    vec4 pair = vec4(a, c + dc * clamp(dot(-ca, dc) / dcdc, 0.0, 1.0));\n    vec2 diff = pair.zw - pair.xy;\n    float comp = dot(diff, diff);\n\n    update(b, c + dc * clamp(dot(b - c, dc) / dcdc, 0.0, 1.0), pair, comp);\n    update(c, a + ba * clamp(dot(   ca, ba) / baba, 0.0, 1.0), pair, comp);\n    update(d, a + ba * clamp(dot(d - a, ba) / baba, 0.0, 1.0), pair, comp);\n\n    return pair;\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 4.0;\n\n    float t1 = iTime * 0.5, t2 = iTime, t3 = iTime * 1.25;\n\n    float c1 = cos(t1), s1 = sin(t1);\n    float c2 = cos(t2), s2 = sin(t2);\n    float c3 = cos(t3), s3 = sin(t3);\n\n    vec2 a = vec2(c1, s2);\n    vec2 b = vec2(s1, c2);\n\n    vec2 c = vec2(s3, c1);\n    vec2 d = vec2(c2, s3);\n\n    float dist = min(sdLine(uv, a, b), sdLine(uv, c, d)) * 0.75;\n\n    // Nice colors from iq\n    vec3 color = 1.0 - sign(dist) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-4.0 * abs(dist));\n\tcolor *= 0.8 + 0.2 * cos(140.0 * dist);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 0.015, abs(dist * 0.6)));\n\n    color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.015, length(uv - a) - 0.05));\n    color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.015, length(uv - b) - 0.05));\n\n    color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.015, length(uv - c) - 0.05));\n    color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.015, length(uv - d) - 0.05));\n\n    vec4 closest = closestPointsLines(a, b, c, d);\n    color = mix(color, vec3(1.0, 0.0, 0.0), 1.0 - smoothstep(0.0, 0.015, length(uv - closest.xy) - 0.05));\n    color = mix(color, vec3(1.0, 0.0, 0.0), 1.0 - smoothstep(0.0, 0.015, length(uv - closest.zw) - 0.05));\n    color = mix(color, vec3(1.0, 0.0, 0.0), 1.0 - smoothstep(0.0, 0.015, sdLine(uv, closest.xy, closest.zw) - 0.01));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}