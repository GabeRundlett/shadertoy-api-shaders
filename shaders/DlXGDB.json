{
    "Shader": {
        "info": {
            "date": "1672297422",
            "description": "has some antialiasing now. would like to sample a thresholded texture for the distance function next",
            "flags": 0,
            "hasliked": 0,
            "id": "DlXGDB",
            "likes": 1,
            "name": "2d marchin ",
            "published": 3,
            "tags": [
                "2d",
                "raymarch"
            ],
            "usePreview": 0,
            "username": "timeiskey",
            "viewed": 226
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MIN_SURFACE_DIST 0.001\n#define MAX_DIST 100.0\n\nfloat get_dist(vec2 p)\n{\n    vec2 c = vec2(0.0, 0.0);\n     \n    float r = 0.1;\n\tfloat cd = length(p - c) - r;\n    \n    return cd;\n}\n\nfloat march(vec2 ro, vec2 rd)\n{\n    float total_dist = 0.0;\n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n    \tvec2 p = ro + rd * total_dist;\n        float dist = get_dist(p);\n        total_dist += dist;\n        if(dist < MIN_SURFACE_DIST || total_dist > MAX_DIST)\n        {\tbreak;\t}\n    }\n    return total_dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //\tstart it off\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\tvec3 col = vec3(0);\n\n    // light\n    float light_brightness = 0.03;\n    //vec2 light = (iMouse.xy-0.5*iResolution.xy)/iResolution.y;\n    \n    vec2 light_center = vec2(0.0, 0.0);\n    vec2 light_offset = vec2(\n    \t(sin(iTime) - 0.0) * 1.0,\n        (cos(iTime) - 0.0) * 1.0);\n    vec2 light = light_center + light_offset * 0.5;\n    \n    //\tfire a ray for each pixel\n    vec2 ro = light;\n    vec2 rd = normalize(uv.xy - light);\n\tfloat d2shape = march(ro, rd);\n    float d2l = length(uv - light);\n    \n    //if d2shape and d2light are different. its collided, so be black.\n    vec3 shadow_color = vec3(0.0);\n    float raw_b = light_brightness / pow(d2l, 3.0);//brightness from light assuming no collision\n    float dif = d2shape - d2l;\n    //float b = raw_b * float(dif >= 0.01);\n    float b = smoothstep(0.005, .005+(3.0/iResolution.y), dif) * raw_b;\n    //col = vec3(b);\n    col = vec3(b);\n    \n\n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}