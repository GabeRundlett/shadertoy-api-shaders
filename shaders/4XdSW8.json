{
    "Shader": {
        "info": {
            "date": "1724013286",
            "description": "combination of https://www.shadertoy.com/view/XXyGzh and starnest\n\n",
            "flags": 1,
            "hasliked": 0,
            "id": "4XdSW8",
            "likes": 14,
            "name": "new galaxic meditation",
            "published": 3,
            "tags": [
                "galaxy",
                "stars",
                "cosmos"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 401
        },
        "renderpass": [
            {
                "code": "\n#define iterations 15\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\n\n#define N_BOXES 10.\n#define ROTATION 1\n#define DEPTH 5.\n// Choose a color (0: white, 1:orange, 2:green, 3:blue)\n#define COLOR 1\n\nmat2 rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat periphery(vec2 p, float s)\n{\n    float per;\n    \n    for (float i=1.; i<N_BOXES+1.*cos(iTime); i++)\n    {\n        vec2 p0 = p;\n    \n        float a = radians(31.*cos(iTime)/N_BOXES*cos(iTime)) *i;\n        float mean = (N_BOXES+DEPTH)*.4;\n        p0 *= rot(a);\n        \n        #if ROTATION\n        p0 *= rot(iTime * i*mean*1e-2/(N_BOXES*.08)*(iTime));\n        #endif\n        \n        float box = sdBox(p0, vec2(s));\n        float gamma = mean * 1e-4*.7;\n        box = gamma/abs(box);\n        \n        per += box;\n    }\n    return per;\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; \n            p.xy*=rot(iTime*0.002);// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.3-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n     float t = iTime * 0.02;\n    float t3 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 1.2;\n\tfloat si = sin(t3);\n\tfloat co = cos(t3);\n\tmat2 ma = mat2(co, si, -si, co);\n    vec4 O2=fragColor;\n    vec2 C2= fragCoord;\n     O2=vec4(0);\n    vec3 p2,r=iResolution,\n    d=normalize(vec3((C2*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O2.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p2=g*d;\n       \n        a=30.;\n        p2=mod(p2-a,a*2.)-a;\n        s=3.;\n        for(int i=0;i++<8;){\n            p2=.3-abs(p2);\n        \n            p2.x<p2.z?p2=p2.zyx:p2;\n            p2.z<p2.y?p2=p2.xzy:p2;\n            p2.y<p2.x?p2=p2.zyx:p2;\n            \n            s*=e=1.4+cos(iTime*.234)*.1;\n            p2=abs(p2)*e-\n                vec3(\n                    5.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 );\n         }\n       \n         g+=e=length(p2.yx)/s;\n    }\n\tfloat time=iTime*speed+.25;\nvec3 tc, c;\nvec4 O= fragColor;\nvec2 F=fragCoord;\n\n  \n    vec2  R = iResolution.xy,\n          u = abs(F+F-R)/R.y;  \n   \n    vec2 p = (fragCoord -.5* iResolution.xy) / iResolution.y;\n   \n    float td;\n    \n    for (float i=0.; i<DEPTH; i+=1.245)\n    {\n        float size = pow(.25, i);\n        float per = periphery(p, size);\n        td += per;\n    }\n     vec2 v = iResolution.xy;\n         \n         \n         vec4 o =fragColor;\n         \n    vec4 z = o = vec4(1,2,3,0);\n  \n    for (float a = .5, t = iTime*0.1, i; \n         ++i < 19.; \n         o += (1. + cos(z+t)) \n            / length((1.+i*dot(v,v)) \n                   * sin(1.5*u/(.5-dot(u,u)) - 10.*u.yx + t))\n         )  \n         \n        v = cos(++t - 7.*u*pow(a += .03, i)) - 0.1*u,   \n          \n        u += tanh(400. * dot(u *= mat2(cos(i + .02*t - vec4(0,11,33,0)))\n                           ,u)\n                      * cos(1e2*u.yx + t)) / 2e2\n           + .2 * a * u\n           + cos(4./exp(dot(o,o)/1e2) + t) / 3e2;\n               u.xy*=ma;\n     o = 25.6 / (min(o, 13.) + 164. / o) \n       - dot(u, u) / 250.;\n \n\t\n\tvec3 from=vec3(1.,.5,0.5);\n\n\tmainVR(fragColor, fragCoord, from, dir);\t\nfragColor*=o;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}