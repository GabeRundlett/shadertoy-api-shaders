{
    "Shader": {
        "info": {
            "date": "1595950969",
            "description": "as an exercise, recoding the base shape of  dr2's 3904 chars [url]https://www.shadertoy.com/view/3lfBz8[/url] (without shading or shadows).\n\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WtXfzH",
            "likes": 8,
            "name": "Interlocked Tetrahedra - fab",
            "published": 3,
            "tags": [
                "raymarching",
                "escher",
                "tetrahedron",
                "shape"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 335
        },
        "renderpass": [
            {
                "code": "// pyramid with hole SDF;  matrix vs loop equivalent versions.\n#define P       V = .94*mat3(cos(k),.35*R/R,sin(k)) * q - 1.,    \\\n                T = max( max( -q.y - 1.,V.x), max(V.y,V.z)),     \\\n                T = max( T, 1.5-length(q) )                   /**/\n/*\n#define P       T = -q.y - 1.;                                   \\\n                for(float k=0.; k<3.; k++)                       \\\n                    V = vec3(.94*cos(2.1*k+vec2(0,11)),.33).xzy, \\\n                    T = max( T, dot(V,q) - 1. );                 \\\n                T = max( T, 1.5-length(q) )                   /**/\n#define rot(a)  mat2(cos(a+vec4(0,11,33,0)))                    \n                    \nvoid mainImage(out vec4 O, vec2 U) {\n    \n    float t=1.,T;\n    vec3  R = iResolution, V, k = vec3(0,2.1,4.2),\n          D = normalize(vec3( U+U, -10.*R.y ) - R ),     // ray direction\n       // D = normalize(vec3(.1*(U+U-R.xy)/R.y, -1)),    // ray direction\n          p = 30./R, q;                                  // marching point along ray \n    O-=O;\n    for ( O++; O.x > 0. && t > .01 ; O-=.015 ) {\n        q = p; \n        q.yz *= rot(.3),                                 // rotations\n        q.xz *= rot(.3*iTime),\n            \n        q.y += .5;                       P, t = T,       // bottom pyramid\n        q.y = .5-q.y; q.xz *= rot(1.05); P, t = min(t,T);// top pyramid\n\n        p += t*D;                                        // step forward = dist to obj\n    }\n    O *= t==T ? vec4(1,.7,.5,1) : vec4(.5,.7,1,1);       // object coloring\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}