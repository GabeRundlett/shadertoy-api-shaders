{
    "Shader": {
        "info": {
            "date": "1712028890",
            "description": "An electronic synthesizer with a rug pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "4ctGzs",
            "likes": 11,
            "name": "Psychedelic rainbow rug (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "mosaic",
                "rug"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 317
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return abs(fract((a1)*(a2.x+a2.y))-.5);\n}\n\n    float scale = 1.5;\n\n\nvoid transform(inout vec2 uv, inout vec2 t2, inout vec3 col,inout float c1){\n        uv = (uv+t2)/scale;\n        uv = ((vec2(uv+vec2(.5,1.5))*scale)-.5)/scale;\n        \n        t2 = triangle_wave(uv+.5);\n        uv =\n            t2/2.-triangle_wave(uv.yx)\n            //1./2.-triangle_wave(uv.yx)\n        ;\n        \n        {t2.x = (t2.x-1.); }\n        if(uv.x>uv.y)\n        uv.y += 1./4.;\n        //col = col.yzx; //rainbow colors\n}\n\nvec3 fractal(vec2 uv){\n    vec3 col = vec3(0.);\n    vec2 t2 = vec2(0.);\n    float c1=0.;\n    for(int k = 0; k < 12; k++){\n        transform(uv,t2,col,c1);\n        c1 =\n            max(abs(t2.y-t2.x),c1)\n            //max(sign(t2.x-t2.y)/2.,c1)\n        ;\n        c1 =\n            max(1.-abs(c1-1.),0.)\n        ;\n        col.x =\n            //c1\n            abs(c1-col.x)\n        ;\n        col = col.yzx;\n        if(k>6) uv.x += iTime/2.;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    float t1 = 1.;\n    \n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv.xy += iTime/t1/12.;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec3 col1 = fractal(uv);\n    fragColor = vec4(col1,1.0);\n    //fragColor = pow(fragColor ,vec4(1./1.8)); //gamma correction\n\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//remix of https://www.shadertoy.com/view/MffGzM\nfloat mod1(float a, float b){\n    return\n        mod(a,b)\n        //mod(a+mod(a,b+3.),b)\n    ;\n}\n\nfloat fmod(float a, float b){\n    //the modulus should be a prime number\n    //this makes some interesting rhythms\n    float modulus =\n        //3.\n        5.\n        //7.\n    ;\n    for(float i = 1.; i < mod(floor(a/b),modulus); i++){\n    //for(float i = 1.+mod(floor(a/b),3.); i < mod(floor(a/b),modulus); i++){\n        a += mod1(floor(a/2.),b)*i;\n    }\n    return\n        mod(floor(a),b)\n    ;\n}\n\n#define fract1(a) abs(1.-fract(-a)*fract(-a))\n//#define fract1(a) pow(fract(a),1.+log(2.)-log(1.+fract(a)))\n\nvec2 synth_(vec2 a1,vec2 a,vec2 a2,vec2 a3,vec2 nb,vec2 a4){\n    return log(a1+a*abs(a2-abs(.5-a3*vec2(fract1(nb.x*.998),fract1(nb.y)))*a4));\n}\n#define synth(a1,a,a2,a3,nb,a4) synth_(vec2(a1),vec2(a),vec2(a2),vec2(a3),vec2(nb),vec2(a4))\n\nvec2 sitar5(vec2 a, vec2 nb){\n    return a/16./2.*abs(log(1./2.+.5*a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      -log(1./2.+a*a/2.*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))) \n    ;\n}\n\nvec2 mainSound1(int samp, float time,float scale,float duration){\n  float tempo = .25;\n  time /= tempo;\n  float s1 =\n      8.;\n  vec3\n  rhythm =\n      vec3(1.)\n      \n      //more rhythms here!\n      //vec3(2.,1./2.,2.)\n      //vec3(2.,2.,1./2.)\n      //vec3(1.,fmod(time/8.,2.)+1.,1.)\n      //vec3(2.)\n      //vec3(1.+mod(floor(time/4.),2.))\n      //vec3(mod(floor(time/32./4.),2.),mod(floor(time/16./4.),2.),mod(floor(time/8./4.),2.))+1.\n      //vec3(2.,2.,1.)\n      //vec3(mod(floor(time/4.),2.)+1.,1.,1.)\n  ;\n  for(float i = 1.; i < mod(floor(time),5.); i++){\n      time += mod(floor(time*2./rhythm.x),s1)*i;\n      time /= 1.+fmod(floor(time/2./rhythm.y)*2.,2.);\n      tempo *= 1.+fmod(floor(time/rhythm.z)*2.,2.);\n  }\n  float s2 = 8.,\n  t=\n      time,\n  m4 = (1.+fmod(t/16.,2.)),\n  m1 =\n      fmod(t/m4,s2)\n  ,\n  m3 =\n      fmod(t,1.+m1)+fmod(t/8.,2.);\n  t /=\n      (1.+fmod(t/s1,2.))*4./s1/s1\n  ;\n  float m2 =\n      1. + fmod(t/s1,s1)\n  ;\n  \n  //duration /= m4;\n  \n  vec2 a=\n      //vec2((1.-sqrt(fract(t/s1)/1.25))*.2)\n      -vec2((log(1./64./4.+fract1(t/s1)/8./duration)))\n      \n      //-vec2((log(1./64./4.+fract1(mod(t/s1,duration*s1))/2.)))\n\n      //pow(1.-log(1./16./2.+fract(t/s1)/4.),2.)\n  ,\n  nb = vec2(time*tempo*pow(2.,floor((m3+m2)/2.)/5.+scale));\n  vec2 \n  sitar = synth(1./8.,a,1./8.,1.,nb*2.,1./2.)\n  ,gamelan = a/16./4.*abs(synth(1./4.,a,1./8.,1.,nb*2.,1./2.)\n  +.5*synth(1./4.,a,1./4.,1.,nb*2.,1./2.)) \n  ,steel_drum = a/16./4.*abs(synth(1./2.,a,1./8.,1.,nb*4.,1.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,1./2.))      \n  ,oud = a/16./2.*abs(log(.5+a*abs(abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.))\n      +.5*log(1./8.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*.998),fract1(nb.y)))/2.)))/2.\n  \n  ,synth_drum = a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,4./m2)\n  + synth(1./8.,a,1./4.,1.,nb*2.,m2/4.))\n  \n  ,harp = a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,2.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,1./2.))\n    ,guitar = a/16./4.*abs(\n  synth(1./4.,a,1./8.,1.,nb*4.,1.)\n  + synth(1./8.,a,1./4.,1.,nb*2.,1.))\n  \n  \n  \n  ;\n  return\n      //sitar\n      //oud\n      //synth_drum\n      //harp\n      \n      //steel_drum\n      synth_drum\n      ///abs(gamelan/2.-synth_drum)\n      \n      //abs(gamelan-steel_drum/2.)\n      //abs(gamelan/2.-oud*2.)*2.\n\n      //abs(gamelan-oud*3.)/3.\n      \n      //abs(gamelan-steel_drum/4.)\n      \n      \n      //oud\n      //abs(.5-vec2(fract(nb.x*.998*2.),fract(nb.y)))*a\n      \n      \n      //log(abs(a/4.-2.*abs(.5-vec2(fract(nb*.998*2.),fract(nb*2.)))*a))\n\n      //log(abs(a/8.-abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a))\n  ;\n}\n\nvec2 mainSound(int samp, float time){\n    return\n        \n        //mainSound1(samp,time,5.5,1./2.)\n        //abs(mainSound1(samp,time,5.5,1./2.)-mainSound1(samp,time,6.5,1./2.)/4.)\n\n        //black metal\n        //abs(mainSound1(samp,time,7.,1./4.)-mainSound1(samp,time,6.5,1./4.))\n        \n        //amazing breakcore remix!\n        abs(mainSound1(samp,time/8.,8.,1.)-mainSound1(samp,time,6.,1./8.))\n        \n        //snare drum\n        //abs(mainSound1(samp,time,6.,1./8.)-mainSound1(samp,time,6.5,1./8.))\n        //weird harp remix\n        //mainSound1(samp,time/2.,7.,1./4.)\n        \n        //another harp remix\n        //abs(mainSound1(samp,time,6.,1./4.)+mainSound1(samp,time,7.,1./2.)/2.+mainSound1(samp,time,8.,1.)/4.)\n\n        \n        //drum remix\n        //abs(mainSound1(samp,time,4.5,1./2.)-mainSound1(samp,time,5.5,1./2.)/2.)\n        \n\n    ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}