{
    "Shader": {
        "info": {
            "date": "1534806258",
            "description": "Drag mouse from left to right to adjust brightness.",
            "flags": 0,
            "hasliked": 0,
            "id": "ltGcRR",
            "likes": 3,
            "name": "color circle",
            "published": 3,
            "tags": [
                "color"
            ],
            "usePreview": 0,
            "username": "battlebottle",
            "viewed": 554
        },
        "renderpass": [
            {
                "code": "\nconst float SRGB_GAMMA = 1.0 / 2.2;\nconst float SRGB_INVERSE_GAMMA = 2.2;\nconst float SRGB_ALPHA = 0.055;\nfloat slope(vec2 a, vec2 b) {\n    return (a.x - b.x) / (a.y - b.y);\n}\n\n\n int FindLineCircleIntersections(float cx, float cy, float radius,\n        vec2 point1, vec2 point2, out vec2 intersection1, out vec2 intersection2)\n{\n    float dx, dy, A, B, C, det, t;\n\n    dx = point2.x - point1.x;\n    dy = point2.y - point1.y;\n\n    A = dx * dx + dy * dy;\n    B = 2.0 * (dx * (point1.x - cx) + dy * (point1.y - cy));\n    C = (point1.y - cx) * (point1.x - cx) + (point1.y - cy) * (point1.y - cy) - radius * radius;\n\n    det = B * B - 4.0 * A * C;\n    if ((A <= 0.0000001) || (det < 0.0))\n    {\n        // No real solutions.\n        return 0;\n    }\n    else if (det == 0.0)\n    {\n        return 1;\n    }\n    else\n    {\n        // Two solutions.\n        t = ((-B + sqrt(det)) / (2.0 * A));\n        intersection1 = vec2(point1.x + t * dx, point1.y + t * dy);\n        t = ((-B - sqrt(det)) / (2.0 * A));\n        intersection2 = vec2(point1.x + t * dx, point1.y + t * dy);\n        return 2;\n    }\n}\n\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat sRGB(float x) {\n    if(x <= 0.0031308)\n        return 12.92 * x;\n    else\n        return (1.0 + SRGB_ALPHA) * pow(x, 1.0/2.4) - SRGB_ALPHA;\n}\nvec3 sRGB_v3(vec3 c) {\n    return vec3(sRGB(c.x),sRGB(c.y),sRGB(c.z));\n}\n\nconst int circlSSLevel = 3;\n\nfloat circleMask(vec2 fragCoord, vec2 centre, float rad) {\n    float circleAA = pow(2.0, float(circlSSLevel));\n    float circleSSMask = 0.0;\n    for(float x = 0.0; x < circleAA; x++) {\n        for(float y = 0.0; y < circleAA; y++) {\n            circleSSMask += distance(fragCoord - vec2(1.0 / circleAA) + vec2((1.0 / circleAA) * x,(1.0 / circleAA) * y), centre) < (rad) ? 1.0 : 0.0;\n        }\n        \n    }\n    return max(0.0, circleSSMask / (circleAA * circleAA));\n}\nvec3 ACESFilm( vec3 x )\n{\n    float a = 2.51f;\n    float b = 0.03f;\n    float c = 2.43f;\n    float d = 0.59f;\n    float e = 0.14f;\n    return clamp(vec3(0.0), vec3(1.0), (x*(a*x+b))/(x*(c*x+d)+e));\n}\n\nvec3 colorWheel(vec2 fragCoord) {\n \n    vec2 centre = iResolution.xy / 2.0;\n    float radius = iResolution.y * 0.45;\n    \n    vec2 centreOffset = vec2(0,radius);\n    centreOffset = centreOffset;\n    \n    float cols[3];\n    \n    for(int i = 0; i < 3; i++) {\n    \tmat2 rot = rotate2d(3.14 * 0.666  * float(i));\n        vec2 start = centre + centreOffset;\n        vec2 point1, point2;\n        \n        vec2 fragNew = ((fragCoord - centre) * rot) + centre;\n        \n        FindLineCircleIntersections(centre.x, centre.y, radius,\n            start, fragNew, point1, point2);\n        \n        \n        float distFull = distance(start, point1);\n        float distSmall = distance(start, fragNew);\n        float temp = (distFull - distSmall)/distFull;\n        cols[i] = smoothstep(0.0, 1.0, temp);\n    }   \n    return ACESFilm(vec3(cols[0], cols[1], cols[2]));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 centre = iResolution.xy / 2.0;\n    float radius = iResolution.y * 0.45;\n    \n    float mousex = 1.0;\n    if (iMouse.z > 0.0) {\n        mousex = max(0.0, (iMouse.x / iResolution.x) * 2.4 - 0.1);\n    } else {\n        mousex = (sin((mod(iTime , 3.14 * 2.0))) + 1.0) * 1.2;\n    }\n    \n    //\n    \n    \n    vec3 noise = texture(iChannel0, uv * (iResolution.xy / vec2(256.0))).rgb / 128.0 - (1.0/256.0);\n    \n    \n    float pickRadius = iResolution.y * 0.06;\n    \n    float circleSSMask = circleMask(fragCoord, centre, radius -1.0);\n    float pickColorMask = circleMask(fragCoord, centre - vec2(radius - pickRadius, -radius + pickRadius), pickRadius);\n    vec3 pickColor = vec3(0.0);\n    if ( pickColorMask > 0.0 ) {\n        pickColor += colorWheel(iMouse.xy) * mousex * pickColorMask * (distance(iMouse.xy, centre) < radius ? 1.0 : 0.0);\n    }\n    \n    \n    vec3 rgb2 = colorWheel(fragCoord);\n    rgb2 = (rgb2 * (mousex)) * circleSSMask;\n    rgb2 += pickColor;\n    rgb2 += noise;\n    vec3 outSRGB = sRGB_v3(rgb2);\n    \n    fragColor = vec4(outSRGB,1.0);\n    \n    \n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}