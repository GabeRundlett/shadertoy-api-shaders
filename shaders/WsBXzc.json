{
    "Shader": {
        "info": {
            "date": "1554454750",
            "description": "Press left and right arrow keys to fly to the stars!",
            "flags": 56,
            "hasliked": 0,
            "id": "WsBXzc",
            "likes": 10,
            "name": "Bouncy the Game",
            "published": 3,
            "tags": [
                "game",
                "impossible"
            ],
            "usePreview": 0,
            "username": "eiffie",
            "viewed": 990
        },
        "renderpass": [
            {
                "code": "//too lazy to write anymore here\n#define R iResolution\nvoid mainImage(out vec4 O, in vec2 U){\n  vec2 uv=vec2(U.x-0.5*(R.x-R.y),U.y)/R.y;\n  vec2 uv2=uv*vec2(256.)/R.xy;\n  if(uv.x>0.0 && uv.x<1.0)O=texture(iChannel0,uv2);else O=vec4(0.4);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//this is where stuff happens\n#define KEY_LEFT 37\n#define KEY_RIGHT 39\n#define fRadius 0.02\nbool KeyDown(in int key){return (texture(iChannel1,vec2((float(key)+0.5)/256.0, 0.25)).x>0.0);}\n#define Load(v) texture(iChannel0,vec2(v,0.5)/iResolution.xy)\n#define SC(v){vec2 dlt=Load(mod(U.x+v,3.)).xy-O.xy;O.xy+=0.45*(length(dlt)-0.4)*dlt;}\n#define mixr(d,c,r) O.xyz=mix(c*max(0.,(1.-sqrt(d/r))),O.xyz,smoothstep(r,r+0.01,d))\n#define addr(d,c,r) O.xyz+=c*max(0.,(1.-sqrt(d/r)))\n#define blst(v,k) if(KeyDown(k)){d=length(p-v);addr(d,vec3(1.3,0.4,0.0),0.3);}\n#define tube(a,b,c) {vec2 pa=p-a,ba=b-a;d=length(pa-ba*clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0));mixr(d,c,0.05);}\nfloat xpath(vec2 p){return sin(p.y+sin(0.5*p.x*p.x*p.x+p.y*1.3));} \nfloat DE(vec2 p){float d=1.0,i=floor(p.y+iTime)+0.5;\n  if(sin(i+13.*sin(i))>0.5){\n    float y=floor(p.y+fract(iTime))+0.5-fract(iTime);\n    d=length(p-vec2(xpath(vec2(p.x,y))*0.25,y));\n  }return min(min(1.0+p.y,1.0-abs(p.x-xpath(p))),pow(d,0.3)-0.6);\n}\nfloat tex(vec2 p){p=sin(p.xy+2.4*sin(p.yx));return p.x+p.y;}\nvoid mainImage(out vec4 O, in vec2 U){\n  if(max(U.x,U.y)>256.0)discard;\n  O=texture(iChannel0,U/iResolution.xy);\n  if(U.y<1.){//game \"logic\"\n    if(iTime<1.){//setup\n      float f=0.2,f2=0.14646;\n      if(U.x<1.)O=vec4(-f);\n      else if(U.x<2.)O=vec4(f,-f,f,-f);\n      else if(U.x<3.)O=vec4(0,f2,0,f2);\n      else O=vec4(iTime+0.05,0,0,0);\n    }else{//play\n      if(Load(3.5).x>iTime)return;\n      if(U.x>3.){O.x=iTime+0.05;return;}//slowing the framerate\n      SC(1.);SC(2.); //stick onstraints\n      O=vec4(O.xy+(O.xy-O.zw),O.xy); //verlet interation  \n      float d=DE(O.xy)+0.1; //DE constraint\n      if(d<fRadius){\n        vec2 N=normalize(vec2(DE(O.xy+vec2(fRadius,0.)),DE(O.xy+vec2(0.,fRadius)))+vec2(0.1-d));\n        vec2 vel=O.xy-O.zw; \n        if(dot(N,vel) < 0.0)vel=reflect(vel,N)*0.99;//if moving toward surface bounce\n        O.xy+=N*(fRadius-d); \n        O.zw=O.xy-vel*0.99;\n      }\n      O.w+=0.001; //add forces, gravity and rockets\n      if(U.x<2.){\n          if(KeyDown(U.x<1.?KEY_LEFT:KEY_RIGHT))O.zw+=(O.zw-Load(2.5).zw)*0.1;\n          if(iMouse.z>0.)if(sign(iMouse.x-iResolution.x/2.)==(U.x<1.?-1.:1.))O.zw+=(O.zw-Load(2.5).zw)*0.1;;\n      }\n    }\n  }else{//draw\n    vec2 v0=Load(0.5).xy,v1=Load(1.5).xy,v2=Load(2.5).xy;\n    vec2 p=2.*(2.*U-vec2(256.))/vec2(256.);p.y+=v2.y;\n    float d=-DE(p),d2=abs(sin(10.0*(p.x+d)));\n    O.z=smoothstep(0.0,-0.05,d)*(0.4+0.1*tex(p*2.3));\n    d2=max(d2,smoothstep(0.8,1.0,d));d=clamp(d,0.0,1.0);\n    O.x=1.3*d*d2;O.y=0.8*d*d*d2;\n    O.xy-=vec2(0.1)*tex(p*4.0)*d;\n    tube(v0,v2,vec3(0.4,1.0,0.6));tube(v1,v2,vec3(0.4,0.6,1.0));\n    d=length(p-v2);mixr(d,vec3(2.0-1.0*abs(sin(iTime*10.0)),0.9,0.8),0.1);\n    blst(v0,KEY_LEFT);blst(v1,KEY_RIGHT);\n  }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//i haven't added anything new here\n#define bps 6.0\nfloat nofs(float n){return abs(abs(mod(n,8.0)-3.0)-2.0);}\nfloat scale(float note){float n2=mod(note,12.);n2=abs(n2-5.)-3.;return mod(n2,2.)>1.?note:-100.;}\n// note number to frequency  from https://www.shadertoy.com/view/ldfSW2\nfloat ntof(float n){return (n>0.0)?440.0 * pow(2.0, (n - 67.0) / 12.0):0.0;}\nfloat rand(float t){return fract(sin(mod(t,4321.123)*4321.123)*4321.123);}\nfloat noise(float t){float f=fract(t);t=floor(t);return mix(rand(t),rand(t+1.0),f);}\nfloat snoise(float t){float f=fract(t);t=floor(t);return mix(rand(t),rand(t+1.0),f*f*(3.0-2.0*f));}\nfloat I(float tf, float c, float s){// taken from jnorberg https://www.shadertoy.com/view/lt2GRy\n float wf=c*24.0;//the number of harmonics to simulate\n vec2 w=vec2(0.125,1.125)+vec2(floor(wf));w*=2.0;\n float p=fract(tf),sw=1.0-2.0*p,ip=1.0-p;\n vec2 sinc=(cos(w*ip)-cos(w*p))/(1.0+s*ip);\n return (sw+mix(sinc.x,sinc.y,fract(wf)))*0.5;\n}\nvec2 inst(float n,float t,float bt,float pan,int i){\n float f=ntof(scale(n)),c=1.0,s=0.9,fo=3.0,att=100.0;\n if(f<12.0)return vec2(0.0);\n if(i==0)c=bt*0.2;\n else if(i==1){c=0.3-bt*0.5;fo=0.5;}\n else if(i==2){c=bt*0.1;s=0.3;fo=1.0;att=10.0;}\n else if(i==3){c=bt*0.03;fo=0.2;att=2.0;}\n else if(i==4){c=bt*0.3;fo=0.125;}\n else {c=1.0-bt;fo=6.0;}\n float a=I(f*t,c,s);\n a*=(1.0-exp(-bt*att))*exp(-bt*fo)*60.0/n;\n return vec2(a*(1.0-pan),a*pan);\n}\nvec2 mainSound( in int samp,float time){\n time+=0.005*snoise(time*22.);\n float tim=time*bps;\n float b=floor(tim);\n float t0=fract(tim),t1=mod(tim,2.0)*0.5,t2=mod(tim,4.0)*0.25;\n float n2=nofs(b*0.0625)+nofs(b*0.125)+nofs(b*0.25);\n float n1=n2+nofs(b*0.5),n0=n1+nofs(b);\n vec2 a0=inst(n0+72.0,time,t0,0.5,0);\n vec2 a1=inst(n1+60.0,time,t1,0.8,1);\n vec2 a2=inst(n2+36.0,time,t2,0.2,2);\n vec2 a1h=inst(n1+21.0,time,t1,0.6,3);\n vec2 a2h=inst(n2+43.0,time,t2,0.4,4);\n vec2 a1hb=inst(n0+4.0,time,t0,0.1,5)*rand(time);\n vec2 v=a0+0.2*a1+1.5*a2+a1h+0.5*a2h+0.2*a1hb;\n if(mod(tim,64.0)>48.)v=floor(v*16.)/16.;\n return clamp(v,-1.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}