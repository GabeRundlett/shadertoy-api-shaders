{
    "Shader": {
        "info": {
            "date": "1606841112",
            "description": "Since SDFs give the distace to a surface they are great for collision detection! Click to see the distance field.",
            "flags": 32,
            "hasliked": 0,
            "id": "wdKfzw",
            "likes": 46,
            "name": "Collision Detection With SDFs",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "collisiondetection"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 660
        },
        "renderpass": [
            {
                "code": "float movingDisk(in vec2 p, in vec2 o, in float r, in vec2 v, in float dt) {\n    vec2 p0 = p - o, p1 = v * dt;\n\n    float a = dot(p1, p1);\n    float b = dot(p0, p1);\n    float c = dot(p0, p0) - r * r;\n\n    float h = b * b - a * c;\n    if (h > 0.0) {\n        vec2 t = clamp((vec2(-1.0, 1.0) * sqrt(h) - b) / a, 0.0, 1.0);\n        return t.y - t.x;\n    }\n\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n    vec2 ballPos = getBallPos();\n\n    float distanceField = mapEnvironment(uv);\n    fragColor = vec4(0.0, 0.0, smoothstep(unit, 0.0, distanceField), 1.0);\n    if (iMouse.z > 0.0) {\n        fragColor.rgb = mix(fragColor.rgb, vec3(1.0, 1.0, 1.0), 0.5 * sin(distanceField * 400.0));\n    }\n\n    fragColor.r += movingDisk(uv, ballPos, BALL_RADIUS, getBallVel(), 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define BALL_RADIUS 0.05\n\n#define getBallPos() texelFetch(iChannel0, ivec2(0, 0), 0).xy\n#define getBallVel() texelFetch(iChannel0, ivec2(1, 0), 0).xy\n\nfloat mapEnvironment(in vec2 p) {\n    vec2 q1 = abs(p) - vec2(0.75, 0.4);\n    vec2 q2 = abs(p + vec2(0.35, 0.0)) - 0.25;\n    float wall = -length(max(q1, 0.0)) - min(max(q1.x, q1.y), 0.0);\n    float box = length(max(q2, 0.0)) + min(max(q2.x, q2.y), 0.0);\n    float ball = length(p - vec2(0.4, 0.0)) - 0.2;\n    return min(wall, min(box, ball));\n}\n\nvec2 getNormal(in vec2 p) {\n    return normalize(vec2(mapEnvironment(p + vec2(0.001, 0.0)) - mapEnvironment(p - vec2(0.001, 0.0)),\n                          mapEnvironment(p + vec2(0.0, 0.001)) - mapEnvironment(p - vec2(0.0, 0.001))));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    fragColor = vec4(0.0);\n    if (iFrame == 0 && iFragCoord == ivec2(1, 0)) {\n        fragColor = vec4(0.02, 0.01, 0.0, 0.0);\n    }\n\n    if (iFrame > 0) {\n        if (iFragCoord.y == 0 && iFragCoord.x < 2) {\n            vec2 ballPos = getBallPos();\n            vec2 ballVel = getBallVel();\n\n            ballPos += ballVel;\n\n            float distToEnv = mapEnvironment(ballPos);\n            if (distToEnv < BALL_RADIUS) {\n                    vec2 hitNormal = getNormal(ballPos);\n                    ballPos += hitNormal * (BALL_RADIUS - distToEnv);\n                    ballVel = reflect(ballVel, hitNormal);\n            }\n\n            if (iFragCoord.x == 0) fragColor = vec4(ballPos, 0.0, 1.0);\n            if (iFragCoord.x == 1) fragColor = vec4(ballVel, 0.0, 1.0);\n        }\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}