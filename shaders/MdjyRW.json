{
    "Shader": {
        "info": {
            "date": "1491210943",
            "description": "I'm sure there's another function that can make a smaller grid, but I can't think of it now.\nPlease help. ",
            "flags": 0,
            "hasliked": 0,
            "id": "MdjyRW",
            "likes": 4,
            "name": "Smallest Grid - 69 chars",
            "published": 3,
            "tags": [
                "2d",
                "grid",
                "2tc",
                "onetweet"
            ],
            "usePreview": 0,
            "username": "GregRostami",
            "viewed": 969
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 o, vec2 u) {\no=step(.01,mod(u.xxxy/iResolution.y,.1));\no*=o.w; }  /*\n\n//83 chars - Fabrice shows psonice how to follow the rules. ;-)\n\nvoid mainImage(out vec4 o,vec2 u)\n{\n    o = step(.01, mod(u.xxxy / iResolution.y, .1));\n    o *= o.w;\n}\n\n\n//70 chars - psonice breaks the rules for this tiny grid!\nvoid mainImage(out vec4 o,vec2 u)\n{\n    u = step(4.,mod(u,40.));\n    o = u.xxxx*u.y;\n}\n\n\n//86 chars - s23b moves the fract out to reduce the shader\nvoid mainImage(out vec4 o,vec2 u)\n{\n    u = fract(u / .1 / iResolution.y);\n    o = vec4(u.x <.9 && u.y < .9);\n}\n\n\n//92 chars - Original Shader by Greg Rostami \nvoid mainImage(out vec4 o,vec2 u)\n{\n    u /= .1*iResolution.y;\n    o = vec4( fract(u.x)<.9 && fract(u.y)<.9 );\n}\n*/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}