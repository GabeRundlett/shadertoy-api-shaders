{
    "Shader": {
        "info": {
            "date": "1592137215",
            "description": "Score increases when vehicle reach the other side,\nand decreases in case of collision.\nYour only control: click on a vehicle to stop/restart it.\n\ndebug mod: uncomment /** in Image -> /**/",
            "flags": 32,
            "hasliked": 0,
            "id": "WtfcWN",
            "likes": 6,
            "name": "traffic master game",
            "published": 3,
            "tags": [
                "game",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 520
        },
        "renderpass": [
            {
                "code": "// Fork of \"traffic master game\" by FabriceNeyret2. https://shadertoy.com/view/WtfcWN\n\n// === draw vehicles ==============================\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    N(U);                                               // d,N = closest vehicle\n    O = vec4(max(0.,S-d));                            // draw disc\n      N.z>0. ?  O.gb = U-U, O.r *= 1.-N.z/3e2           // collided vehicle\n    : N.z<0. ?  O.rb = U-U, d : d;\n    U.y<3. ? v = 3.*T(8).w, d = U.x-R.x/2.,             // draw score\n             O.rg += vec2( d<0. && v<d, d>0. && v>d) :U;// red if -, green if +\n\n/**\n    U/=S+S; if (U.x < 4. && U.y < 6.) {                 // --- debug: show vehicle states\n        W = T(U);\n        vec2 V =  R/2. - abs(W.xy - R/2.); \n        O.b += min(V.x,V.y)>0. ? .7 : .3; // blue cell: out of screen\n#define sig(v,d) O += vec4(-v,v,v==0.,0) * 2.*S* max(0.,.2 - length(fract(U-d)-.5))\n        sig(W.z,-.2);              // B.L.: red: collision  green: touch border\n        sig(W.w,.2);               // T.R.: red: dead  green: moving  blue: frozen  \n        V = W.xy; N(iMouse.zw); if (d<S+S && V==N.xy) O.r+=.4;\n        if (V==R+R) O.g += .4;     // green cell: stuck dead collided \n        if (V==-R)  O.r += .4;     // red cell:   stuck dead out \n    }\n/**/\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// === simulates the vehicles ====================\n// grid 4x6. rows = direction > , < , ^ , v \n//           O.xy : vehicle position   \n//           O.z  : <0: touch border      >0 collision (timeout)\n//           O.w  : 1: moving  0: frozen  <0: dead (timeout)\n//  (8,8):   z: mouse.z  w: score\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = iFrame > 0 ? T(U) : vec4(-R,0,-.5);             // recover current state or trigger init                                 \n    if (U==vec2(8.5)) {    \n        O.z = iMouse.z;                                 // store mouse.z (to test release)\n        L                                               // browse the 4x6 list   \n            if (W.z<0.) W.z /= 20.; // why ? \n            abs(W.z)<=1. ? O.w -= W.z :d;               // update score with + and - marks\n    }     }\n    if ( U.x>4. && U.y > 6. ) return;                   // no vehicle cell: abort.\n    float h = fract(sin(dot(U, vec2(13,78))-iTime) *4e5), // hash\n          a = U.x < 2. ? 1. :3.,                        // mvt axis: 1 = horiz,    3 = vertical\n          s = .5 + a - U.x;                             // mvt side: 1 = left/bot, 0 = right/up\n    T(8).z<=0. && length(iMouse.zw-O.xy) < 1.3*S ? O.w = 1.-O.w :d;// stop/restart on mouse click\n    if (O.z==0.)                                        // not already collided\n      { N(O.xy); d<S+S ? O.z++, O.w = 0. :d; }          // if collision, mark & freeze\n    else if( ++O.z > 3e2 ) O = vec4(R+R,0,-h*2e2);      // timeout then recycle\n    if ( O.w > 0. ) {                                   // --- active vehicle \n        O[ a<  2. ?0 :1 ] += sign(U.x-a)*S*.1;               // move position \n        vec2 V =  R/2. + (2.*s-1.)*(O.xy - R/2.);       // distance to window border\n        d = min(V.x,V.y);\n        d < 0. ?  O.xy=-R, O.z=0., O.w = -h*2e2 : d < S ? O.z-- : d;// getting out: score, then recycle after random timeout\n    } else if ( O.w < 0.                                // if not frozen\n                && U.x+4.*U.y-4. < .1*iTime             // number of vehicles increase with time\n                && ++O.w >= 0.) do {                    // --- start new vehicle once dead state ended\n        vec4 P = .5+ vec4( ceil(S*10.+(R-S*20.)*(s*1.1+h*.9)/2.), R*s ); // prep border & position on it\n        O = vec4( a<2. ? P.zy : P.xw , 0,1 );           // choose start position according to direction\n        N(O.xy); h+=2.*S/(R.x-2e2);\n    } while(d<25.);                                     // avoid start collided\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define S    (10.*R.y/360.)                        // vehicle radius\n\n#define R    iResolution.xy\n#define T(U) texelFetch(iChannel0,ivec2(U),0)\n\nfloat d,v;   vec4 N,W;\n#define L    for( int k = 0; k < 24; k++ ) {       /* browse the 4x6 list of vehicles */\\\n                 W = T(vec2(k%4,k/4));             // current vehicle in list\n\n#define N(U) /* --- get d,N = vehicle closest to U (but itself, if is a vehicle)      */\\\n    d = 1e5;                                                                            \\\n    L   v = length(U-W.xy),                        /* browse the 4x6 list of vehicles */\\\n        W.w >= 0. && v > 0. && v<d ? d=v, N=W : N; /* find the closest active vehicle */\\\n     }",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}