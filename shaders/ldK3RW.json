{
    "Shader": {
        "info": {
            "date": "1453544958",
            "description": "[url]https://en.wikipedia.org/wiki/Diffusion-limited_aggregation[/url]\n[url]http://paulbourke.net/fractals/dla/[/url]\n\nClick to reinitialise.",
            "flags": 32,
            "hasliked": 0,
            "id": "ldK3RW",
            "likes": 77,
            "name": "Diffusion-limited aggregation",
            "published": 3,
            "tags": [
                "2d",
                "diffusion",
                "branching"
            ],
            "usePreview": 0,
            "username": "davidar",
            "viewed": 63302
        },
        "renderpass": [
            {
                "code": "// 2016 David A Roberts <https://davidar.io>\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = (texture(iChannel0,uv) + texture(iChannel1,uv) + texture(iChannel2,uv) + texture(iChannel3,uv)) / 5.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 3,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            },
            {
                "code": "// 2016 David A Roberts <https://davidar.io>\n\n// 1 out, 3 in... <https://www.shadertoy.com/view/4djSRW>\n#define MOD3 vec3(.1031,.11369,.13787)\nfloat hash13(vec3 p3) {\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.x + p3.y)*p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(0,0,0,1);\n    if(iFrame < 10 || iMouse.z > 0.) {\n        if(length(fragCoord-10.) < 2.)\n            fragColor.y = 1.;\n        //else if(hash13(vec3(fragCoord,iFrame)) < 0.05)\n        //    fragColor.x = 1.;\n        return;\n    }\n    \n    if(fragCoord.x < 1. || fragCoord.x > iResolution.x-1. ||\n       fragCoord.y < 1. || fragCoord.y > iResolution.y-1.) {\n        fragColor.x = 1.;\n        return;\n    }\n    \n    vec4 c  = texture(iChannel0, (fragCoord + vec2( 0, 0)) / iResolution.xy);\n    vec4 n  = texture(iChannel0, (fragCoord + vec2( 0, 1)) / iResolution.xy);\n    vec4 ne = texture(iChannel0, (fragCoord + vec2( 1, 1)) / iResolution.xy);\n    vec4 e  = texture(iChannel0, (fragCoord + vec2( 1, 0)) / iResolution.xy);\n    vec4 se = texture(iChannel0, (fragCoord + vec2( 1,-1)) / iResolution.xy);\n    vec4 s  = texture(iChannel0, (fragCoord + vec2( 0,-1)) / iResolution.xy);\n    vec4 sw = texture(iChannel0, (fragCoord + vec2(-1,-1)) / iResolution.xy);\n    vec4 w  = texture(iChannel0, (fragCoord + vec2(-1, 0)) / iResolution.xy);\n    vec4 nw = texture(iChannel0, (fragCoord + vec2(-1, 1)) / iResolution.xy);\n    \n    // aggregation\n    fragColor.y = clamp(\n        c.y + c.x * (n.y + ne.y + e.y + se.y + s.y + sw.y + w.y + nw.y), 0., 1.);\n    \n    bool nc = int(4.*hash13(vec3(fragCoord + vec2( 0, 1), iFrame))) == 0;\n    bool ec = int(4.*hash13(vec3(fragCoord + vec2( 1, 0), iFrame))) == 1;\n    bool sc = int(4.*hash13(vec3(fragCoord + vec2( 0,-1), iFrame))) == 2;\n    bool wc = int(4.*hash13(vec3(fragCoord + vec2(-1, 0), iFrame))) == 3;\n    \n    // diffusion\n    fragColor.x = clamp(\n    \tn.x * float(nc) + e.x * float(ec) + s.x * float(sc) + w.x * float(wc) +\n    \tfloor((1. + (n.x + e.x + s.x + w.x)/100.) * hash13(vec3(fragCoord,iFrame))), 0., 1.);\n    \n    fragColor.x *= 1. - fragColor.y;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// 2016 David A Roberts <https://davidar.io>\n\n// 1 out, 3 in... <https://www.shadertoy.com/view/4djSRW>\n#define MOD3 vec3(.1031,.11369,.13787)\nfloat hash13(vec3 p3) {\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.x + p3.y)*p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(0,0,0,1);\n    if(iFrame < 10 || iMouse.z > 0.) {\n        if(length(fragCoord-10.) < 2.)\n            fragColor.y = 1.;\n        //else if(hash13(vec3(fragCoord,iFrame)) < 0.05)\n        //    fragColor.x = 1.;\n        return;\n    }\n    \n    if(fragCoord.x < 1. || fragCoord.x > iResolution.x-1. ||\n       fragCoord.y < 1. || fragCoord.y > iResolution.y-1.) {\n        fragColor.x = 1.;\n        return;\n    }\n    \n    vec4 c  = texture(iChannel0, (fragCoord + vec2( 0, 0)) / iResolution.xy);\n    vec4 n  = texture(iChannel0, (fragCoord + vec2( 0, 1)) / iResolution.xy);\n    vec4 ne = texture(iChannel0, (fragCoord + vec2( 1, 1)) / iResolution.xy);\n    vec4 e  = texture(iChannel0, (fragCoord + vec2( 1, 0)) / iResolution.xy);\n    vec4 se = texture(iChannel0, (fragCoord + vec2( 1,-1)) / iResolution.xy);\n    vec4 s  = texture(iChannel0, (fragCoord + vec2( 0,-1)) / iResolution.xy);\n    vec4 sw = texture(iChannel0, (fragCoord + vec2(-1,-1)) / iResolution.xy);\n    vec4 w  = texture(iChannel0, (fragCoord + vec2(-1, 0)) / iResolution.xy);\n    vec4 nw = texture(iChannel0, (fragCoord + vec2(-1, 1)) / iResolution.xy);\n    \n    // aggregation\n    fragColor.y = clamp(\n        c.y + c.x * (n.y + ne.y + e.y + se.y + s.y + sw.y + w.y + nw.y), 0., 1.);\n    \n    bool nc = int(4.*hash13(vec3(fragCoord + vec2( 0, 1), iFrame))) == 0;\n    bool ec = int(4.*hash13(vec3(fragCoord + vec2( 1, 0), iFrame))) == 1;\n    bool sc = int(4.*hash13(vec3(fragCoord + vec2( 0,-1), iFrame))) == 2;\n    bool wc = int(4.*hash13(vec3(fragCoord + vec2(-1, 0), iFrame))) == 3;\n    \n    // diffusion\n    fragColor.x = clamp(\n    \tn.x * float(nc) + e.x * float(ec) + s.x * float(sc) + w.x * float(wc) +\n    \tfloor((1. + (n.x + e.x + s.x + w.x)/100.) * hash13(vec3(fragCoord,iFrame))), 0., 1.);\n    \n    fragColor.x *= 1. - fragColor.y;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// 2016 David A Roberts <https://davidar.io>\n\n// 1 out, 3 in... <https://www.shadertoy.com/view/4djSRW>\n#define MOD3 vec3(.1031,.11369,.13787)\nfloat hash13(vec3 p3) {\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.x + p3.y)*p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(0,0,0,1);\n    if(iFrame < 10 || iMouse.z > 0.) {\n        if(length(fragCoord-10.) < 2.)\n            fragColor.y = 1.;\n        //else if(hash13(vec3(fragCoord,iFrame)) < 0.05)\n        //    fragColor.x = 1.;\n        return;\n    }\n    \n    if(fragCoord.x < 1. || fragCoord.x > iResolution.x-1. ||\n       fragCoord.y < 1. || fragCoord.y > iResolution.y-1.) {\n        fragColor.x = 1.;\n        return;\n    }\n    \n    vec4 c  = texture(iChannel0, (fragCoord + vec2( 0, 0)) / iResolution.xy);\n    vec4 n  = texture(iChannel0, (fragCoord + vec2( 0, 1)) / iResolution.xy);\n    vec4 ne = texture(iChannel0, (fragCoord + vec2( 1, 1)) / iResolution.xy);\n    vec4 e  = texture(iChannel0, (fragCoord + vec2( 1, 0)) / iResolution.xy);\n    vec4 se = texture(iChannel0, (fragCoord + vec2( 1,-1)) / iResolution.xy);\n    vec4 s  = texture(iChannel0, (fragCoord + vec2( 0,-1)) / iResolution.xy);\n    vec4 sw = texture(iChannel0, (fragCoord + vec2(-1,-1)) / iResolution.xy);\n    vec4 w  = texture(iChannel0, (fragCoord + vec2(-1, 0)) / iResolution.xy);\n    vec4 nw = texture(iChannel0, (fragCoord + vec2(-1, 1)) / iResolution.xy);\n    \n    // aggregation\n    fragColor.y = clamp(\n        c.y + c.x * (n.y + ne.y + e.y + se.y + s.y + sw.y + w.y + nw.y), 0., 1.);\n    \n    bool nc = int(4.*hash13(vec3(fragCoord + vec2( 0, 1), iFrame))) == 0;\n    bool ec = int(4.*hash13(vec3(fragCoord + vec2( 1, 0), iFrame))) == 1;\n    bool sc = int(4.*hash13(vec3(fragCoord + vec2( 0,-1), iFrame))) == 2;\n    bool wc = int(4.*hash13(vec3(fragCoord + vec2(-1, 0), iFrame))) == 3;\n    \n    // diffusion\n    fragColor.x = clamp(\n    \tn.x * float(nc) + e.x * float(ec) + s.x * float(sc) + w.x * float(wc) +\n    \tfloor((1. + (n.x + e.x + s.x + w.x)/100.) * hash13(vec3(fragCoord,iFrame))), 0., 1.);\n    \n    fragColor.x *= 1. - fragColor.y;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buf C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// 2016 David A Roberts <https://davidar.io>\n\n// 1 out, 3 in... <https://www.shadertoy.com/view/4djSRW>\n#define MOD3 vec3(.1031,.11369,.13787)\nfloat hash13(vec3 p3) {\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.x + p3.y)*p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(0,0,0,1);\n    if(iFrame < 10 || iMouse.z > 0.) {\n        if(length(fragCoord-10.) < 2.)\n            fragColor.y = 1.;\n        //else if(hash13(vec3(fragCoord,iFrame)) < 0.05)\n        //    fragColor.x = 1.;\n        return;\n    }\n    \n    if(fragCoord.x < 1. || fragCoord.x > iResolution.x-1. ||\n       fragCoord.y < 1. || fragCoord.y > iResolution.y-1.) {\n        fragColor.x = 1.;\n        return;\n    }\n    \n    vec4 c  = texture(iChannel0, (fragCoord + vec2( 0, 0)) / iResolution.xy);\n    vec4 n  = texture(iChannel0, (fragCoord + vec2( 0, 1)) / iResolution.xy);\n    vec4 ne = texture(iChannel0, (fragCoord + vec2( 1, 1)) / iResolution.xy);\n    vec4 e  = texture(iChannel0, (fragCoord + vec2( 1, 0)) / iResolution.xy);\n    vec4 se = texture(iChannel0, (fragCoord + vec2( 1,-1)) / iResolution.xy);\n    vec4 s  = texture(iChannel0, (fragCoord + vec2( 0,-1)) / iResolution.xy);\n    vec4 sw = texture(iChannel0, (fragCoord + vec2(-1,-1)) / iResolution.xy);\n    vec4 w  = texture(iChannel0, (fragCoord + vec2(-1, 0)) / iResolution.xy);\n    vec4 nw = texture(iChannel0, (fragCoord + vec2(-1, 1)) / iResolution.xy);\n    \n    // aggregation\n    fragColor.y = clamp(\n        c.y + c.x * (n.y + ne.y + e.y + se.y + s.y + sw.y + w.y + nw.y), 0., 1.);\n    \n    bool nc = int(4.*hash13(vec3(fragCoord + vec2( 0, 1), iFrame))) == 0;\n    bool ec = int(4.*hash13(vec3(fragCoord + vec2( 1, 0), iFrame))) == 1;\n    bool sc = int(4.*hash13(vec3(fragCoord + vec2( 0,-1), iFrame))) == 2;\n    bool wc = int(4.*hash13(vec3(fragCoord + vec2(-1, 0), iFrame))) == 3;\n    \n    // diffusion\n    fragColor.x = clamp(\n    \tn.x * float(nc) + e.x * float(ec) + s.x * float(sc) + w.x * float(wc) +\n    \tfloor((1. + (n.x + e.x + s.x + w.x)/100.) * hash13(vec3(fragCoord,iFrame))), 0., 1.);\n    \n    fragColor.x *= 1. - fragColor.y;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buf D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}