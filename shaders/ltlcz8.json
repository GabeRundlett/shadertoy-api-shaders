{
    "Shader": {
        "info": {
            "date": "1503489222",
            "description": "Demo for http://alchemist-lab.blogspot.ru/2017/08/ray-marching.html",
            "flags": 0,
            "hasliked": 0,
            "id": "ltlcz8",
            "likes": 0,
            "name": "Ray marching mytest",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "stratego",
            "viewed": 647
        },
        "renderpass": [
            {
                "code": "// Round Box\nfloat udRoundBox( vec3 pos, vec3 b, float r )\n{\n  return length(max(abs(pos)-b, 0.0))-r;\n}\n\nfloat sceneSDF(vec3 pos)\n{\n    // Тут может быть много объектов\n    // И даже их комбинации (пересечение, объединение и разность)\n    return udRoundBox(pos, vec3(.5, .5, 0.2), 0.3);\n}\n\n// Максимальное количество шагов\n#define MAX_MARCHING_STEPS 250\n// Минимальная и максимальная дистанция\n#define MIN_DIST 0.0\n#define MAX_DIST 100.0\n//\n#define EPSILON  0.0001\n\n// eye - позиция наблюдателя\n// rayDirection - направление луча\nfloat rayMarching(vec3 eye, vec3 rayDirection)\n{\n    float depth = MIN_DIST;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++)\n    {\n        // Ориентированная функция расстояния, нашей сцены\n        float dist = sceneSDF(eye + depth * rayDirection);\n        // Мы достигли поверхности\n        if (dist < EPSILON)\n\t\treturn depth;\n        // Продвигаемся дальше по лучу\n        depth += dist;\n        // Луч не столкнулся с поверхностью\n        if (depth >= MAX_DIST)\n            return MAX_DIST;\n\n    }\n    return MAX_DIST;\n}\n\n// Направление луча\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord)\n{\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n// Оцениваем нормали\nvec3 estimateNormal(vec3 p)\n{\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\n\n// Освещение по фонгу\n// подробности https://en.wikipedia.org/wiki/Phong_reflection_model#Description\nvec3 phongLight(vec3 k_d, vec3 k_s, float shininess, vec3 p, vec3 eye, vec3 lightPos, vec3 lightIntensity)\n{\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n\n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n\n    if (dotLN < 0.0) {\n        // С этой точки поверхности не видно света\n        return vec3(0.0, 0.0, 0.0);\n    }\n\n    if (dotRV < 0.0) {\n        // Отражение в противоположном направление от зрителя\n        // используем  дифузный компонент\n        return lightIntensity * (k_d * dotLN);\n    }\n\n    //\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, shininess));\n}\n\n// Матрица вида\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up)\n{\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t    \n    vec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord.xy);\n    vec3 eye = vec3(8.0, 5.0, 7.0);\n    // Переходим к Мировым координатам\n    mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    // Вычисляем дистанцию\n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    // Запускаем наш луч\n    float dist = rayMarching(eye, worldDir);\n\n    if (dist > MAX_DIST - EPSILON)\n        discard; //  Не рисуем\n\n    // Самая близкая точка вдоль луча\n    vec3 p = eye + dist * worldDir;\n\n    // Константы для освещения\n    const vec3 K_a = vec3(0.2, 0.2, 0.2); // Ambient color\n    const vec3 K_d = vec3(1.0, 0.0, 0.0); // Diffuse color\n    const vec3 K_s = vec3(1.0, 1.0, 1.0); // Specular color\n    const float Shininess = 10.0; //\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * K_a;\n    // источник света\n    vec3 lightPos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    vec3 lightIntensity = vec3(0.4, 0.4, 0.4);\n    color += phongLight(K_d, K_s, Shininess, p, eye, lightPos, lightIntensity);\n\n    // Рисуем красным\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}