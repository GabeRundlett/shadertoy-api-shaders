{
    "Shader": {
        "info": {
            "date": "1677141841",
            "description": "depend on atan() && SDFIsoscelesTriangle",
            "flags": 0,
            "hasliked": 0,
            "id": "ds33RN",
            "likes": 3,
            "name": "Loading loop",
            "published": 3,
            "tags": [
                "2d",
                "loading"
            ],
            "usePreview": 0,
            "username": "yli110",
            "viewed": 168
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535\nvec2 fixUV(in vec2 uv)\n{\n    return (2.*uv.xy-iResolution.xy)/min(iResolution.x,iResolution.y);\n}\n\nmat2 rotation(float angle)\n{\n    return mat2(cos(angle),-sin(angle),sin(angle),cos(angle));\n}\n\nfloat Circle(in vec2 uv, in vec2 point, in float r)\n{\n    float p = (length(uv-point)-r);\n    \n    return p;\n}\n\nfloat SDFIsoscelesTriangle(in vec2 uv, in vec2 a)\n{\n    uv.y = abs(uv.y);\n    vec2 p =uv;\n    vec2 AC = vec2(-a.x,a.y);\n    vec2 AP = vec2(p.x-a.x,p.y);\n    vec2 q1 = vec2(p.x,max(p.y-a.y,0.));\n    float c = clamp(dot(AC,AP)/dot(AC,AC),0.,1.);\n    vec2 q2 = AP-c*AC;\n    float s = sign(AP.y*AC.x-AC.y*AP.x);\n    s = sign(a.x)>0.?(p.x<0.?1.:-s):(p.x>0.?1.:s);\n    return min(length(q1),length(q2))*s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = fixUV(fragCoord);\n    uv *= rotation(2.*iTime*PI/3.);\n    float pixel = 3./min(iResolution.x,iResolution.y);\n    vec2 ringwidth = vec2(0.42,0.5);\n    float centerpoint = (ringwidth.y+ringwidth.x)/2.;\n    float ringwidthR =  (ringwidth.y-ringwidth.x)/2.;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //one loop\n    #if 1\n        float blendintensity = atan(uv.x,uv.y);\n        float a = mod(0.5+0.5*blendintensity/PI, 1.);\n        vec3 colo_w = mix(col,vec3(1.),a*a);\n        col = mix(col,colo_w,smoothstep(ringwidth.y+pixel,ringwidth.y,length(uv))-smoothstep(ringwidth.x,ringwidth.x-pixel,length(uv)));\n\n        /* vec2 point1 = vec2(0.,-centerpoint); \n        float circle1 = Circle(uv,point1,ringwidthR+pixel*0.5);\n        float mark = smoothstep(pixel,-pixel*0.5,circle1)*(1.-step(0.,uv.x)); */\n\n        float d = SDFIsoscelesTriangle(vec2(uv.x-pixel*0.5,uv.y+0.46),vec2(-0.1,0.1));\n        float mark = smoothstep(pixel*0.5,-pixel*0.5,d);\n    \n    //Two loops\n    #else \n        float blendintensity = -atan(uv.y,uv.x);\n        float a = mod(0.5+blendintensity/PI, 1.);\n        vec3 colo_w = mix(col,vec3(1.),a);\n        col = mix(col,colo_w,smoothstep(ringwidth.y+pixel,ringwidth.y,length(uv))-smoothstep(ringwidth.x,ringwidth.x-pixel,length(uv)));\n\n        vec2 point1 = vec2(0.,centerpoint);\n        vec2 point2 = vec2(0.,-centerpoint);\n        float circle1 = Circle(uv,point1,ringwidthR+pixel*0.5);\n        float circle2 = Circle(uv,point2,ringwidthR+pixel*0.5);\n        float mark = smoothstep(pixel*0.5,-pixel*0.5,circle1)*step(0.,uv.x)+smoothstep(pixel*0.5,-pixel*0.5,circle2)*(1.-step(0.,uv.x));\n    #endif\n       \n    col = mix(col,vec3(1.),mark);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}