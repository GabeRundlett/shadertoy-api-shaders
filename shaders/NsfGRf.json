{
    "Shader": {
        "info": {
            "date": "1616342252",
            "description": "Major simplifications using trigonometric identities!\nNote that you don't get the luxury of these simplifications if you need the actual angles, e.g. for controlling an actual robot arm or performing joint interpolated motion ;)\nMouseable.",
            "flags": 0,
            "hasliked": 0,
            "id": "NsfGRf",
            "likes": 7,
            "name": "Simplified Two Link IK Solver",
            "published": 3,
            "tags": [
                "ik",
                "solver",
                "simplified",
                "inversekinematics",
                "twolink"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 214
        },
        "renderpass": [
            {
                "code": "#define draw(d, c) color = mix(color, c, smoothstep(unit, 0.0, d))\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b, in float t) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0)) - t;\n}\n\nfloat sdDisc(in vec2 p, in vec2 o, in float r) {\n    return length(p - o) - r;\n}\n\nfloat sdRing(in vec2 p, in vec2 o, in float r, in float t) {\n    return abs(length(p - o) - r) - t;\n}\n\n// Only two square roots!\n// config sets the handedness, -1 for left, 1 for right\nvec2 solveJoint(in vec2 a, in vec2 b, in float ra, in float rb, in float config) {\n    vec2 ba = b - a;\n    float d = dot(ba, ba), l = sqrt(d);\n    float q = (d + ra * ra - rb * rb) / (2.0 * ra * l);\n    return a + (ba * q + vec2(-ba.y, ba.x) * sqrt(1.0 - q * q) * config) * ra / l;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    // Link lengths\n    float ra = 3.0;\n    float rb = 1.5;\n\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 6.0;\n    if (iMouse.z < 0.0 || ivec2(iMouse.xy) == ivec2(0)) {\n        mouse = ra * vec2(cos(iTime), cos(iTime * 2.0) * sin(iTime));\n    }\n\n    vec2 uv = (fragCoord - center) / iResolution.y * 6.0;\n    float unit = 12.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Joints\n    vec2 a = vec2(0.0);\n    vec2 c = mouse;\n    vec2 b = solveJoint(a, c, ra, rb, 1.0);\n\n    // Reachable area\n    draw(sdRing(uv, a, ra, rb), vec3(0.2, 0.8, 0.5));\n\n    // Draw links\n    draw(sdLine(uv, a, b, 0.1), vec3(0.0));\n    draw(sdLine(uv, b, c, 0.1), vec3(0.0));\n\n    // Draw joints\n    draw(sdDisc(uv, a, 0.15), vec3(0.5));\n    draw(sdDisc(uv, b, 0.15), vec3(0.5));\n    draw(sdDisc(uv, c, 0.15), vec3(0.5));\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}