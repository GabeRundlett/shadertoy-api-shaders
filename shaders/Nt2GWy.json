{
    "Shader": {
        "info": {
            "date": "1624628529",
            "description": "antialiased + ray-traced + golfed variant of \"Spherical Shell with Slits\" by Kamoshika. [url]https://shadertoy.com/view/Nt2GWG[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "Nt2GWy",
            "likes": 10,
            "name": "Spherical Shell with Slits (AA+g",
            "published": 3,
            "tags": [
                "raymarching",
                "sphere",
                "short"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 362
        },
        "renderpass": [
            {
                "code": "// antialiased + ray-traced + golfed variant of \"Spherical Shell with Slits\" by Kamoshika. https://shadertoy.com/view/Nt2GWG\n// 2021-06-25 13:38:48   ( 703 chars )\n\n                                      // distance to strips + AA blending\n#define S(s,C) P = vec3(0, 0, 5) + ( s sqrt(r) - b ) * D,                    \\\n               a = acos(P.y/2.) - sign(P.z)* acos(P.x/length(P.zx)) - iTime, \\\n               d = sin(a/.1),                                                \\\n               O = mix(O, C, clamp( 1.- d/fwidth(d), 0.,1. ) )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec3 P = iResolution,\n         D =  normalize( vec3( ( u+u - P.xy ) / min(P.x, P.y), -2 ) );\n\n    float b = 5.*D.z, r = b*b-21., a,d;\n    O-=O;\n    if (r < 0.) return;                                                  // out of sphere     \n    S( , ( .5 +  .7* cos( a  + vec4(0,23,21,0)  ) ) * (.5+P.z*P.z/4.) ); // back sphere\n    S(-,  vec4(P.z*P.z/2.) );                                            // front sphere\n}\n\n\n\n\n\n\n\n/* // --- 404 chars\n\n           // distance to strips\n#define S  a = acos(P.y/2.) -sign(P.z)* acos(P.x/length(P.zx)) - iTime, \\\n           d = sin(a/.1) \n           \n#define A  clamp( 1.- (d-3e-5)/fwidth(d), 0.,1.)\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy;\n    vec3 P = vec3(0, 0, 5),\n         D =  normalize( vec3( ( u+u - R) / min(R.x, R.y), -2 ) );\n\n    float b = 5.*D.z, r = b*b-21., a,d;\n    O-=O;\n    if (r < 0.) return;                // out of sphere\n    \n    r = sqrt(r);\n    P += ( r - b ) * D; S;             // intersection on back sphere\n    O += ( .5 +  .7* cos( a  + vec4(0,23,21,0)  ) )  * A * (.5+P.z*P.z/4.);\n\n    P -= 2.*r * D; S;                  // intersection on front sphere\n    O = mix(O, vec4(P.z*P.z/2.), A );   \n}\n/**/",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}