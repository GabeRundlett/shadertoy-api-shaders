{
    "Shader": {
        "info": {
            "date": "1627633928",
            "description": "Code is perfectible but it runs kinda find for what it is :).\nI'm really proud of this one, I spent about 8 hours to make it but it's worth it.\nHope you'll appreciate it.",
            "flags": 32,
            "hasliked": 0,
            "id": "sljXDR",
            "likes": 18,
            "name": "Loki - Miss minutes",
            "published": 3,
            "tags": [
                "time",
                "retro",
                "marvel",
                "loki",
                "missminutes"
            ],
            "usePreview": 0,
            "username": "z0rg",
            "viewed": 402
        },
        "renderpass": [
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec3 doBloom(vec2 uv, float blur, float threshold)\n{\n    vec3 col;\n    int cnt = 30;\n    float fcnt = float(cnt);\n    for (int i = 0;i <cnt;++i)\n    {\n        float fi = float(i);\n        float coef = (fi/fcnt);\n        float sz = 1.+pow(coef,2.)*blur;\n        float samplePerTurn = 3.;\n        float an = (fi/(fcnt/samplePerTurn))*PI;\n        vec2 p = uv - vec2(sin(an), cos(an))*(fi/fcnt)*blur*.1;\n        vec3 smple = texture(iChannel0, p).xyz;\n        if (length(smple) > threshold)\n            col += smple;\n    \t\n        \n    }\n    \n    return col/float(cnt);\n}\n\nvec3 chromaFlare(vec2 uv, vec2 ouv, float sz, float id)\n{\n    vec3 col = vec3(0.);// = texture(iChannel0, uv).xyz;\n    \n    float c = abs(length(ouv)-.3-id*sz*8.-sz*9.)-sz;\n    vec3 rgb;\n    float a = atan(ouv.y, ouv.x)*1.;\n    float cnt = 16.;\n    for (float i = 0.; i < cnt; ++i)\n    {\n           \n        rgb += vec3(1.)*\n        (sat((sin(a*400.)+sin(a*200.)+sin(a*100.))*.2+.5)*.5+.5)*\n        texture(iChannel0, vec2(.5)+((uv-vec2(.5))*(i+1.)*0.01*r2d((i-cnt/2.)*.025)*-1.*sat(length(ouv*2.)))).x;\n    }\n    col += pow((1.-sat(c*5.))*pow(rgb/cnt, vec3(1.)), vec3(1.));\n    \n    return col*.2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cuv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n    \n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    float bloomIntensity = 224./640.;  \n    vec3 bloomSample = doBloom(uv, 70./360., 117./ 640.);\n    bloomSample = pow(bloomSample, vec3(0.5));\n    \n    col = col + (bloomSample*bloomIntensity);\n    \n\n    col += chromaFlare(uv, cuv, 0.01, 0.)*vec3(1.,0.,0.);\n    col += chromaFlare(uv, cuv, 0.01, -1.)*vec3(0.,1.,0.);\n    col += chromaFlare(uv, cuv, 0.01, -2.)*vec3(0.,0.,1.);\n\n    col *= sat(1.-pow(sat(length(cuv*2.)),4.)+.3);\n    float stpuv = .002;\n    vec2 uv2 = uv;\n    uv2 = vec2(ivec2(uv2/stpuv))*stpuv;\n    col += sat(rand(uv2*sin(iTime)))*.05;\n    col = pow(col, vec3(1.1));\n\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvec2 map(vec3 p)\n{\n    vec3 op3 = p+vec3(0.,0.,-5.);\n    vec3 op2 = p;\n    vec3 op = p;\n    vec2 acc = vec2(1000.,-1.);\n    \n    float rep = .5;\n    float sz = rep*.45;\n    vec2 id = floor((p.xz+rep*.5)/rep);\n    p.x += mod(id.y, 2.)*.25;\n    p.z = min(p.z,sz*21.);\n    p.xz = mod(p.xz+rep*.5, rep)-rep*.5;\n   \n    \n    float lamp = max(max(length(p)-sz, p.y), -(length(p)-sz*.99));\n    acc = _min(acc, vec2(lamp, 0.));\n    \n    float offlamp = 0.04;\n    p.y += offlamp;\n    \n    float lampcord = max(max(length(p.xz)-0.001, p.y), -(p.y+sz-offlamp));\n    acc = _min(acc, vec2(lampcord, 1.));\n    \n    float lampbulb = length(p)-.025;\n    acc = _min(acc, vec2(lampbulb, (p.y < .005 ? 2. : 3.)));\n\n    float wallrep = .25;\n    float wallsz = wallrep*.25;\n    op.x = mod(op.x+wallrep*.5, wallrep)-wallrep*.5;\n    acc = _min(acc, vec2(_cube(op-vec3(0.,0.,5.), vec3(wallsz,30.,wallsz)),5.));\n    acc = _min(acc, vec2(-op2.z+5.5, 6.));\n    \n    op3.yz *= r2d(-.25);\n    float tv = sdRoundBox(op3-vec3(0.,.5,0.), vec3(.5,.4,.25), .1);\n    tv = max(tv, - sdRoundBox(op3-vec3(0.,.5,-0.65), vec3(.4,.3,.25), .1));\n    acc = _min(acc, vec2(tv, 7.));\n    \n    return acc;\n}\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01,0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\nvec3 trace(vec3 ro ,vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        p += rd * res.x*mix(.25,1.,pow(sat(distance(p,ro)/15.),15.)); \n    }\n    return vec3(-1.);\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(0.+sin(iTime*.25),1.,.5);\n    vec3 ta = vec3(0.,-0.,5.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(uv, rd);\n    vec3 res = trace(ro, rd, 256);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = n *.5+.5;\n        float refl = 1.;\n        if (res.z == 2.)\n            col = vec3(1.000,0.710,0.302)*2.;\n        else if (res.z == 3.)\n            col = vec3(0.302,0.157,0.122)*.5;\n        else if (p.y < -.001)\n        {\n             refl = .1;\n             col = mix(vec3(0.302,0.157,0.122)*.5*sat(-dot(rd, n)), vec3(1.000,0.710,0.302),sat(dot(vec3(0.,1.,0.), n)));\n        }\n        else if (res.z == 5.)\n        {\n            vec3 h = normalize(rd+vec3(-.5, 1.,-1.));\n            col = sat(p.y)*vec3(0.302,0.157,0.122)*.35+vec3(1.000,0.710,0.302)*(1.-pow(sat(dot(n, h)), .1))*.25;\n        }\n        else if (res.z == 7.)\n        {\n            col = pow(sat(-p.y+1.),4.)*vec3(0.302,0.255,0.157)*.75+vec3(0.718,0.463,0.220)*(1.-pow(sat(dot(n, rd)), .5))*.25;\n            refl = .25;\n\n            if (p.y > .24 && p.y < .9 && p.x > -.4 && p.x < .4)\n            {\n                vec2 tuv = p.xy*vec2(1.,-2.)*.8-vec2(-0.5,-1.5);\n                float stppx = 0.005;\n                tuv = vec2(ivec2(tuv/stppx))*stppx;\n                float offchroma = 0.005;\n                col.r = texture(iChannel1, tuv).x;\n                col.g = texture(iChannel1, tuv+vec2(offchroma,0.)).y;\n                col.b = texture(iChannel1, tuv+vec2(offchroma,0.)*2.).z;\n                refl = .1;\n                float flicker = sat(sin(iTime*5.)*sin(iTime*3.)*10.)*sat(sin(iTime)*10.);\n                vec3 dark = mix(vec3(.1), vec3(1.000,0.494,0.161)*2.5, (1.-pow(sat(length(col)),.05)));\n                col = mix(col, dark, flicker);\n            }\n            \n        }\n        else\n         col = vec3(0.302,0.157,0.122)*.25;\n        col += col*texture(iChannel0, reflect(rd, n)).xyz*refl;\n    }\n\n    return col;\n}\nvec3 cheapAA(vec2 uv)\n{\n    vec3 col = rdr(uv);\n    vec2 off = vec2(1., -1.)/(iResolution.x*2.);\n    // Not so cheap antialiasing\n    {\n        //col = vec3(1.,0.,0.);\n        vec3 acc = col;\n        acc += rdr(uv+off.xx);\n        acc += rdr(uv+off.xy);\n        acc += rdr(uv+off.yy);\n        acc += rdr(uv+off.yx);\n        col = acc/5.;\n        \n    }\n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    vec3 col = cheapAA(uv);\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 25,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0.,1.)\n#define PI 3.14159265\n#define TAU (2.*PI)\nmat2 r2d(float a) { float c= cos(a), s = sin(a); return mat2(c, -s, s, c); }\n// Stolen on stackoverflow somewhere\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nvec3 getCam(vec2 uv, vec3 rd)\n{\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+r*uv.x+u*uv.y);\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(max(l.x,l.y), l.z);\n}\n\n// Thanks IQ :)\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\nfloat line(vec3 p, vec2 s, float curve)\n{\n    p.yz *= r2d(p.y*curve);\n    vec3 p2 = p;\n    p2.y = abs(p2.y)-s.y;\n  return min(max(length(p.xz)-s.x, abs(p.y)-s.y), length(p2)-s.x);\n//  return min(length(rep.xz)-s,length(rep-vec2(0.,s.y))-s.x);\n}\n\n// Thanks IQ\nfloat smin( float a, float b, float k )\n{\n    a = pow( a, k ); b = pow( b, k );\n    return pow( (a*b)/(a+b), 1.0/k );\n}\nfloat _sqr(vec2 p, vec2 s)\n{\n  vec2 l = abs(p)-s;\n  return max(l.x,l.y);\n}\n\n\nfloat line(vec2 p, vec2 s)\n{\n  vec2 rep = p;\n  rep.y= abs(p.y);\n  return min(_sqr(p, s),length(rep-vec2(0.,s.y))-s.x);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat shoe(vec3 p)\n{\n    float acc = max(length(p-vec3(0.,0.,-.3))-.15, p.y);\n    float sock = max(max(length(p.xz)-.1-.01*sin(p.y*40.-3.), p.y), -(p.y+.2));\n    acc = min(acc, sock);\n    acc = min(acc, max(max(length(p.xz*vec2(1.,.5)-vec2(0.,-.1))-.15, p.y), -(p.y+.025)));\n    return acc;\n}\nvec2 leg(vec3 p)\n{\n    vec2 acc = vec2(1000., -1.);\n    float leg = max(length(p.xz)-.03, -p.y);\n    leg = max(leg, (p.y-2.));\n    acc = _min(acc, vec2(leg, 1.));\n    acc = _min(acc, vec2(shoe(p-vec3(0.,2., 0.)), 0.));\n    return acc;\n}\n\nfloat hand(vec3 p)\n{\n    float acc = 1000.;\n    vec2 sz = vec2(.025,.1);\n    vec3 pt = p-vec3(0.,.0,0.);\n    //pt.xy *= r2d(1.5);\npt.yz *= r2d(.0);\n    float thumb = line(pt, sz*vec2(1.,.5), -3.);\n    acc = min(acc, thumb);\n    vec3 p1 = p+vec3(.1,0.05,0.);\n    p1.xy *= r2d(.5);\n    float first = line(p1, sz, 3.);\n    acc = min(acc, first);\n    vec3 p2 = p+vec3(.2,0.0,0.);\n    p2.xy *= r2d(.6);\n    float snd = line(p2, sz, 1.);\n    acc = min(acc, snd);\n    vec3 p3 = p+vec3(.25,-0.05,0.);\n    p3.xy *= r2d(.9);\n    float third = line(p3, sz, 2.);\n    acc = min(acc, third);\n    \n    acc = smin(acc, length(p*vec3(1.2,1.1,2.)-vec3(-0.07,0.15,0.))-.14, 1.);\n    return acc;\n}\n\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(1000., -1.);\n    \n    vec3 pbody = p;\n    pbody.yz *= r2d(.1);\n    float body = max(length(pbody.xy)-1.-.1*cos(abs(pbody.z)*5.), abs(pbody.z)-.2);\n    acc = _min(acc, vec2(body, 0.));\n    \n    float legSep = .3;\n    vec3 rlegp = p-vec3(legSep,0.,0.);\n    rlegp.x += cos(rlegp.y*3.)*.05;\n    acc = _min(acc, leg(rlegp));\n    vec3 llegp = p-vec3(-legSep,0.,0.);\n        llegp.x -= cos(llegp.y*3.)*.05;\n    llegp.yz *= r2d(-pow(sat(llegp.y-1.), 5.)*.05);\n    llegp.xz *= r2d(.25);\n    acc = _min(acc, leg(llegp));\n    \n    vec3 plhand = p+vec3(1.55,-0.6,0.15);\n    plhand.xy *= r2d(.35);\n    plhand.yz *= r2d(-.7);\n   \n    acc = _min(acc, vec2(hand(plhand), 2.));\n    \n    vec3 prhand = p+vec3(-1.58,-0.6,0.2);\n    prhand.x = -prhand.x;\n    prhand.xy *= r2d(.5);\n    prhand.yz *= r2d(-.7);\n   \n    acc = _min(acc, vec2(hand(prhand), 2.));\n    \n    vec3 plarma = p+vec3(1.1,-0.5,0.);\n    plarma.xy *= r2d(-.25);\n    float larma = line(plarma, vec2(.1,.3), -0.5);\n    acc = _min(acc, vec2(larma, 0.));\n    \n    vec3 plarmb = p+vec3(1.3,-.8,0.);\n    plarmb.xy *= r2d(-1.75);\n    float larmb = line(plarmb, vec2(.07,.15), 0.);\n    acc = _min(acc, vec2(larmb, 0.));\n    \n    vec3 prarma = p+vec3(-1.1,-0.5,0.);\n    prarma.xy *= r2d(.25);\n    float rarma = line(prarma, vec2(.1,.3), -.75);\n    acc = _min(acc, vec2(rarma, 0.));\n    \n    vec3 prarmb = p+vec3(-1.3,-.8,0.);\n    prarmb.xy *= r2d(1.75);\n    prarmb.yz *= r2d(.35);\n    float rarmb = line(prarmb, vec2(.07,.15), 0.);\n    acc = _min(acc, vec2(rarmb, 0.));\n    \n    return acc;\n}\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01,0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\nfloat accMarch;\nvec4 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec4(res.x, distance(p, ro), res.y, float(i));\n        p+= res.x*rd;\n        accMarch += (1.-sat(res.x/0.7))*(p.y-1.2 > 0. ? .7 : 1.);\n    }\n    return vec4(-1.);\n}\n\nfloat eyeShape(vec2 uv)\n{\n    float a = atan(uv.y, uv.x*1.5+.1);\n    a = clamp(a, -2., -.8);\n    float rep = 0.3;\n    float b = mod(a+rep*.5,rep)-rep*.5;\n    vec2 uv2 = vec2(sin(b), cos(b))*length(uv);\n    uv *= r2d(.1);\n    float fur = line(uv2-vec2(0.0,.35), vec2(.01,.04));\n    return min(length(uv*vec2(1.*(1.-sat(pow(sat(uv.y),1.5)*.75+.2)),.5))-.175, fur);\n}\n\nvec3 drawEyes(vec3 rgb, vec2 uv)\n{\n    vec2 euv = uv;\n    \n    float shp = 400.;\n    uv.x = abs(uv.x)-.35;\n    float eyesShape = eyeShape(uv);\n    vec3 col = mix(rgb, vec3(1.), 1.-sat(eyesShape*shp));\n    col = mix(col, vec3(0.), 1.-sat((abs(eyesShape)-.01)*shp));\n    \n    float offX = 0.3;\n    vec2 posEyes = vec2(sin(iTime*.5)*.1,0.);\n    vec2 uvl = euv-vec2(offX, 0.)-posEyes;\n    vec2 uvr = euv+vec2(offX, 0.)-posEyes;\n    float eyeSz = .1;\n    vec2 eyeScale = vec2(1.,.6); \n    vec2 offTick = vec2(0.,-.05);\n    vec2 uvl2 = uvl-offTick;\n    vec2 uvr2 = uvr-offTick;\n    float al = atan(uvl2.y,-uvl2.x);\n    float ar = atan(uvr2.y,-uvr2.x);\n    \n    float eyes = min(max(length(uvl*eyeScale)-eyeSz, -sin(clamp(-al,0.,1.)*7.)), max(length(uvr*eyeScale)-eyeSz, -sin(clamp(-ar,0.,1.)*7.)));\n    eyes = max(eyes, eyesShape);\n    col = mix(col, vec3(0.), 1.-sat(eyes*shp));\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.604,0.718,0.631);\n    \n    vec3 ro = vec3(2.*sin(iTime*.5),sin(iTime*.25),-7.);\n    vec3 ta = vec3(0.,0.5,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(uv, rd);\n    float shp = 400.;\n    accMarch = 0.;\n    vec4 res = trace(ro, rd, 128);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        vec3 rgb = vec3(0.851,0.635,0.329);// n *.5+.5;\n        if (res.z == 2.)\n            rgb = vec3(1.);\n        if (res.z == 1.)\n            rgb = vec3(0.);\n        if (res.z == 0.)\n        {\n            rgb = mix(rgb, vec3(0.), 1.-sat((abs(length(p.xy)-1.05)-.02)*shp));\n            vec2 tickuv = p.xy;\n            vec2 tickuv2 = p.xy;\n            float atick = atan(tickuv.y,tickuv.x);\n            float tickrep = TAU/12.;\n            float tickrep2 = TAU/4.;\n            float angletick2 = mod(atick + tickrep2*.5, tickrep2)-tickrep2*.5;\n            float angletick = mod(atick + tickrep*.5, tickrep)-tickrep*.5;\n            tickuv = vec2(sin(angletick), cos(angletick))*length(tickuv);\n            tickuv2 =  vec2(sin(angletick2), cos(angletick2))*length(tickuv2);\n            float ticks = line(tickuv-vec2(0.,.85), vec2(.01,.08));\n            rgb = mix(rgb, vec3(0.), 1.-sat(ticks*shp));\n            float ticks2 = line(tickuv2-vec2(0.,.8), vec2(.04,.12));\n            rgb = mix(rgb, vec3(0.), 1.-sat(ticks2*shp));\n            rgb = drawEyes(rgb, p.xy-vec2(0.,-.1));\n            rgb = mix(rgb, vec3(0.), 1.-sat((length(p.xy)-.07)*shp));\n            float mouth = line((p.xy-vec2(0.,0.4-.05*cos(p.x*5.)))*r2d(PI*.5), vec2(.02,.15));\n            rgb = mix(rgb, vec3(0.), 1.-sat(mouth*shp));\n        }\n\n        col = rgb;\n        if (p.y > 1.2)\n        {\n            col = mix(col, vec3(0.), 1.-pow(sat(-dot(n, rd)+.5),20.));\n        }\n    }\n    col = mix(col, vec3(0.), pow(sat(accMarch*.09),100.));\n    //col += pow(accMarch, 1.)*vec3(1.)*.1;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-vec2(.5)*iResolution.xy)/iResolution.xx;\n\n    vec3 col = rdr(uv);\n    col *= (1.-sat(length(uv)-.3))+.1;\n    col = pow(col*1., vec3(2.5));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}