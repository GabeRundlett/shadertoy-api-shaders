{
    "Shader": {
        "info": {
            "date": "1502964941",
            "description": "I have never worked with shaders before, only software rendering. Hope you enjoy it anyway. :-) ",
            "flags": 0,
            "hasliked": 0,
            "id": "4djfWt",
            "likes": 78,
            "name": "Tunnel 3D Shape",
            "published": 3,
            "tags": [
                "3d",
                "tunnel",
                "cube",
                "demoeffect",
                "textured",
                "classic",
                "splitting",
                "mixture"
            ],
            "usePreview": 0,
            "username": "ingagard",
            "viewed": 5715
        },
        "renderpass": [
            {
                "code": "#define rotate(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nfloat lineWidth=7.0;\nfloat tunneRotSpeed = 0.05;\nfloat tunnelSpeed = 0.06;\nfloat size=100.0;\nvec3 objectStartPos = vec3(0, 0, -50.0);    \nfloat camRange=1000.0;\nfloat scale[8];\nvec3 projPos[8];    \n\nvec4 quads[6] = vec4[]( \n    vec4(0, 1, 2, 3), \n    vec4(4, 5, 6, 7), \n    vec4(3, 7, 4, 0), \n    vec4(6, 5, 1, 2), \n    vec4(0, 1, 5, 4), \n    vec4(2, 3, 7, 6));\n\nvec3 edges[24];\n\n\nvoid oval(vec2 screenCoord, vec2 center, float radius, float strokeThickness, vec4 strokeColor, vec4 fillColor, inout vec4 pixel)\n{\n  float dist= distance(screenCoord, center);\n\n  if (dist<radius)\n  { \n    if (dist<radius-strokeThickness)\n    {\n      pixel = fillColor;\n    } else\n    {\n      pixel = strokeColor;\n    }\n  }\n}\n\n\nbool lineItersection(vec2 v1, vec2 v2, vec2 v3, vec2 v4) \n{    \n  float bx = v2.x - v1.x;\n  float by = v2.y - v1.y;\n  float dx = v4.x - v3.x;\n  float dy = v4.y - v3.y;\n\n  float b_dot_d_perp = bx * dy - by * dx;\n\n  if (b_dot_d_perp == 0.0) return false;\n\n  float cx = v3.x - v1.x;\n  float cy = v3.y - v1.y;\n\n  float t = (cx * dy - cy * dx) / b_dot_d_perp;\n  if (t < 0.0 || t > 1.0)  return false;\n\n  float u = (cx * by - cy * bx) / b_dot_d_perp;\n  if (u < 0.0 || u > 1.0)  return false;\n\n  return true;\n}\n\n\nvoid Line(vec2 screenCoord, vec2 p1, vec2 p2, float thickness, vec4 color, inout vec4 pixel)\n{\n\n  float a = distance(p1, screenCoord);\n  float b = distance(p2, screenCoord);\n  float c = distance(p1, p2);\n\n  if ( a >= c || b >=  c ) return;\n\n  float p = (a + b + c) * 0.5;\n\n  float dist = 2.0 / c * sqrt( p * ( p - a) * ( p - b) * ( p - c));\n\n  if (dist<thickness)\n  {\n    pixel = mix(pixel, color, 1.0/max(1.0, dist*3.0));\n  }\n}\n\n\n\nbool insideQuad(vec2 v1, vec2 v2, vec2 v3, vec2 v4, vec2 point)\n{\n\n  vec2 point2 = vec2(point.x-10000.0,point.y);\n    \n  int colCount = 0;\n\n  if (lineItersection(point, point2, v1, v2))         \n  {     colCount++;  }\n  if (lineItersection(point, point2, v2, v3))\n  {     colCount++;  }\n  if (lineItersection(point, point2, v3, v4))\n  {     colCount++;  }\n  if (lineItersection(point, point2, v4, v1))\n  {     colCount++;  }\n\n  return (colCount==1);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float frame = float(iTime)*60.0;\n  float FrameRad = radians(frame);\n  float sinFrame = sin(FrameRad);\n  float cosFrame = cos(FrameRad);\n  float sinFrame2 = sinFrame*0.2;\n  float cosFrame2 = cosFrame*2.2;\n  vec2 center = (iResolution.xy/2.0)+vec2((cosFrame*sinFrame2)*250.0, (cosFrame-cosFrame2)*50.0);\n  vec2 centerFragDist = center-fragCoord;\n  vec3 halfRes = vec3(iResolution.x*0.5, iResolution.y*0.5, 0);   \n  vec2 uvTunnel = fragCoord.xy / iResolution.xy;\n  float angle = atan( centerFragDist.y, centerFragDist.x)*3.14;\n  float dist = length(fragCoord-center);\n\n  uvTunnel.x=1.0/(dist*0.0005);\n  uvTunnel.y=angle;\n\n  vec4 color = texture(iChannel3, uvTunnel*vec2(0.4, 3.0)+vec2(frame*tunnelSpeed, frame*tunneRotSpeed));\n  color*=vec4(0.2, 0.4, 1.0, 1.0)*(2.0/(dist*0.01));   \n\n  float rot = frame*0.02;\n  vec2 uv = (fragCoord.xy / iResolution.xy);\n  vec2 uv2 = (fragCoord.xy / iResolution.xy +vec2(frame*0.01, frame*0.003))*0.1;\n  vec2 screenCoord = vec2(fragCoord.x, iResolution.y-fragCoord.y);\n\n  vec3 camPos = vec3(0, 0, 90.0+cos(FrameRad)*50.0);\n    \n  vec3 verts[8] = vec3[](\n    vec3(-1.0, -1.0, -1.0), \n    vec3(-1.0, -1.0, 1.0), \n    vec3(1.0, -1.0, 1.0), \n    vec3(1.0, -1.0, -1.0), \n    vec3(-1.0, 1.0, -1.0), \n    vec3(-1.0, 1.0, 1.0), \n    vec3(1.0, 1.0, 1.0), \n    vec3(1.0, 1.0, -1.0));\n    \n  for (int i=0; i<8; i++)\n  {           \n      // Y ROTATION    \n      verts[i].xz *= rotate(rot); \n      // X ROTATION\n      verts[i].yz *= rotate(rot*0.7);  \n      // Z ROTATION\n      verts[i].xy *= rotate(rot*0.2);  \n      \n      verts[i]+=objectStartPos;\n  }\n\n  for (int i=0; i<8; i++)\n  {                            \n    float camDistance = distance(verts[i], camPos);\n    scale[i] = (camRange/camDistance)*0.1;\n    projPos[i] = verts[i]-camPos;\n    projPos[i]*=size*scale[i];    \n    projPos[i]+= halfRes;\n  }\n\n  float range =  max(0.0, 1.0*sin(FrameRad));\n \n  for (int i=0; i<6; i++)\n  {\n    vec3 center = (projPos[int(quads[i].x)]+projPos[int(quads[i].y)]+projPos[int(quads[i].z)]+projPos[int(quads[i].w)])/4.0;           \n    edges[i*4 + 0]=projPos[int(quads[i].x)]+((center-projPos[int(quads[i].x)])*range);\n    edges[i*4 + 1]=projPos[int(quads[i].y)]+((center-projPos[int(quads[i].y)])*range);\n    edges[i*4 + 2]=projPos[int(quads[i].z)]+((center-projPos[int(quads[i].z)])*range);\n    edges[i*4 + 3]=projPos[int(quads[i].w)]+((center-projPos[int(quads[i].w)])*range);            \n  }\n\n  for (int i=0; i<6; i++)\n  {  \n    if (insideQuad(edges[i*4 + 0].xy, edges[i*4 + 1].xy, edges[i*4 + 2].xy, edges[i*4 + 3].xy, screenCoord))\n    { \n      vec2 center = (edges[i*4 + 0].xy+edges[i*4 + 1].xy+edges[i*4 + 2].xy+edges[i*4 + 3].xy)/4.0;                \n\n      float minX = min(edges[i*4 + 0].x, min(edges[i*4 + 1].x, min(edges[i*4 + 2].x, edges[i*4 + 3].x)));\n      float minY = min(edges[i*4 + 0].y, min(edges[i*4 + 1].y, min(edges[i*4 + 2].y, edges[i*4 + 3].y)));\n      float maxX = max(edges[i*4 + 0].x, max(edges[i*4 + 1].x, max(edges[i*4 + 2].x, edges[i*4 + 3].x)));\n      float maxY = max(edges[i*4 + 0].y, max(edges[i*4 + 1].y, max(edges[i*4 + 2].y, edges[i*4 + 3].y)));\n\n      float width = maxX-minX;\n      float height = maxY-minY;       \n      float xDist = distance(minX, screenCoord.x)/width;\n      float yDist = distance(minY, screenCoord.y)/height;\n\n      color = (color+texture(iChannel2, vec2(xDist, 1.0-yDist)*0.1))*0.75;\n      color-=0.2*((distance(center, screenCoord)/width));\n    }\n  }\n\n  vec4 lineColor = color*3.0;\n\n  for (int i=0; i<6; i++)      \n  {    \n    Line(screenCoord, edges[i*4 + 0].xy, edges[i*4 + 1].xy, lineWidth, lineColor, color);  \n    Line(screenCoord, edges[i*4 + 1].xy, edges[i*4 + 2].xy, lineWidth, lineColor, color);  \n    Line(screenCoord, edges[i*4 + 2].xy, edges[i*4 + 3].xy, lineWidth, lineColor, color);  \n    Line(screenCoord, edges[i*4 + 3].xy, edges[i*4 + 0].xy, lineWidth, lineColor, color);\n  }\n\n  for (int i=0; i<24; i++)\n  {       \n    oval(screenCoord, edges[i].xy, 4.0, lineWidth, vec4(1.0), color*5.0, color);\n  }\n\n  vec2 sunPos = vec2(400.0+(cos(FrameRad)*300.0), 200.0+(sin(FrameRad)*100.0));      \n  float sunDist = distance(screenCoord, sunPos)*0.02;\n\n  fragColor = color + vec4(0.1/sunDist, 0.1/sunDist, 0.2/sunDist, 0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    },
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 48,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}