{
    "Shader": {
        "info": {
            "date": "1627781611",
            "description": "Quadratic Formula",
            "flags": 0,
            "hasliked": 0,
            "id": "7tSSDh",
            "likes": 5,
            "name": "Intersection Line - Circle ",
            "published": 3,
            "tags": [
                "line",
                "intersection",
                "circle"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 357
        },
        "renderpass": [
            {
                "code": "/////////////////////////////////////////////////////////////\n//                                                         //\n// Author:Yusef28                                          //\n// Start Date: 26-07-2021                                  //\n// Status: On Going                                        //\n// Topic: Line-Circle Intersection                         //\n// Sources: Rudimentary Concept (Google/Wikipedia/Youtube) //\n// Listening to: Best Of Djent Instrumental Volume 1       //\n//                                                         // \n/////////////////////////////////////////////////////////////\n\n// Spent a few hours(yup) because I didn't realize I need brackets \n//in one part of the quadratic formula as I had expressed it.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5,0.5)\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    \n      ////////////////////////////////////////////\n      //                                       //\n////////      BACKGROUND GRID DESIG          //\n      //                                   //\n      /////////////////////////////////////\n      \n    vec2 st = uv;//save the unscaled uv\n    //I'm only making an 8(*aspect)x8 grid, higher variables\n    //may end up with graphs completely outside it\n    uv*=8.;\n    //graph background\n    vec3 col = vec3(0.1);\n    //center highlights\n    col = mix(col,vec3(0.16),1.0-length(uv/8.));\n    //dust \n    float specks = fract(sin(dot(uv,vec2(123.,16.)))*433413.);\n    //nice soft texture \n    float tex = texture(iChannel0,st).x;\n    col = mix(col,vec3(0.25),pow(tex,2.));\n    //small grid lines\n    vec2 lines = fract(uv*5.);\n    lines = smoothstep(0.45,0.52,abs(lines-0.5));\n    col = mix(col,vec3(0.24),lines.x);\n    col = mix(col,vec3(0.24),lines.y);\n    //larger grid lines\n    lines = fract(uv);\n    lines = smoothstep(0.47,0.52,abs(lines-0.5));\n    col = mix(col,vec3(0.5),lines.x);\n    col = mix(col,vec3(0.5),lines.y);\n    //axis lines\n    lines = smoothstep(0.0,0.02,abs(uv));\n    col = mix(col,vec3(0.6),1.0-lines.x);\n    col = mix(col,vec3(0.6),1.-lines.y);\n    col = mix(col,vec3(0.1),step(0.1,specks)*0.2);\n    \n      ////////////////////////////////////////////\n      //                                       //\n////////     INTERSECTION CALCULATIONS       //\n      //                                   //\n      /////////////////////////////////////\n    \n    //Line Variables using y = m1*x = b1\n    vec2 p1 = vec2(-0.4,-0.4);\n    vec2 p2 = vec2(0.7,0.9);\n    \n    \n    float m1 = sin(iTime)*2.;//line slope\n    \n    float b1 = cos(iTime+0.4)*2.5;\n    //line shift( y intercept)\n  \n    float r = 2.;//circle radius\n    \n\n    \n    //a b and c for the quadratic formula \n    //work out to this based on my algebraic manipulations\n    //starting with substituting y in the circle formula\n    //with the right hand side of the line equation y = m1*x+b1\n    float a = 1. + m1*m1;\n    float b = 2.*(-0. + (b1 - 0.)*m1);\n    float c = -0.*-0. + (b1 - 0.)*(b1 - 0.) - r*r;\n    \n    //the discriminant\n    float disc = b*b - 4.*a*c;\n    \n    //the two roots (or one or none de0pending)\n    float x1 = (-b + sqrt(disc))/(2.*a); //<-- this right here!!!!\n    float x2 = (-b - sqrt(disc))/(2.*a); //<-- If you forget bracket on (2.*a)...\n                                         //you're gonna have a bad experience.\n    \n    float y1 = m1*x1 + b1;\n    float y2 = m1*x2 + b1;\n    //calculate the intersection points\n    \n    vec2 intersectionPoint1 = vec2(x1,y1);\n    vec2 intersectionPoint2 = vec2(x2,y2);\n        \n      ////////////////////////////////////////////\n      //                                       //\n////////        DRAWING EVERYTHING           //\n      //                                   //\n      /////////////////////////////////////\n    \n    //line 1\n    float f;// = 1.0-smoothstep(0.02,0.06,abs(uv.x*m1 + b1 - uv.y));\n    f = 1.0-smoothstep(0.05,0.1,abs(uv.x*m1 + b1 - uv.y)/fwidth(uv.x*m1 + b1 - uv.y)/20.);\n    col = mix(col, vec3(1.,.2,0.5), f);\n    \n    //circle on origin with radius 1.\n    f = 1.-smoothstep(0.02,0.04,abs(length(uv)-r));\n    col = mix(col, vec3(0.,0.7,1.), f);\n    \n    if(disc >= 0.){\n    //intersection point 1\n    f = 1.-smoothstep(0.02,0.04,abs(length(uv-intersectionPoint1)-0.15));\n    col = mix(col, vec3(1.,0.7,0.), f);\n    f = 1.-smoothstep(0.03,0.08,length(uv-intersectionPoint1)-0.015);\n    col = mix(col, vec3(1.,0.7,0.), f);\n    //intersection point 2\n    f = 1.-smoothstep(0.02,0.04,abs(length(uv-intersectionPoint2)-0.15));\n    col = mix(col, vec3(1.,0.7,0.), f);\n    f = 1.-smoothstep(0.03,0.08,length(uv-intersectionPoint2)-0.015);\n    col = mix(col, vec3(1.,0.7,0.), f);\n    }\n    \n      ////////////////////////////////////////////\n      //                                       //\n////////          POST PROCESSING            //\n      //                                   //\n      /////////////////////////////////////\n        \n    \n    //vignette\n    uv = fragCoord/iResolution.xy;\n    uv *=  1.0 - uv.yx;\n    float vig = uv.x*uv.y * 15.0; // multiply with sth for intensity\n    \n    vig = pow(vig, 0.15); // change pow for modifying the extend of the  vignette\n\n    // Output to screen\n    fragColor = vec4(col*vig,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}