{
    "Shader": {
        "info": {
            "date": "1582905542",
            "description": "Another Apollonian zoom. Various keys to play with, see code for more info.",
            "flags": 48,
            "hasliked": 0,
            "id": "3tGSWh",
            "likes": 17,
            "name": "Apollonian Zoom III",
            "published": 3,
            "tags": [
                "zoom",
                "apollonian"
            ],
            "usePreview": 0,
            "username": "mla",
            "viewed": 476
        },
        "renderpass": [
            {
                "code": "////////////////////////////////////////////////////////////////////////////////\n//\n// Apollonian circles. Iterated inversion in a pattern of circles.\n//\n// Pattern is a K-prism on the Riemann sphere.\n// Generates the dual pattern, a K-bipyramid.\n//\n// <mouse>: centre of inversion\n// <up>/<down>: scale image (when not zooming)\n// c: show circles or iteration steps\n// i: invert image\n// l: show limit set\n// u: invert around mouse position\n// x: show inverting circles\n// z: do zoom\n//\n////////////////////////////////////////////////////////////////////////////////\n\nconst int K = 5; // 5-prism by default\nconst float AA = 2.0; // Set to 1.0 for better performance.\nconst int NSTEPS = 20;\n\nconst float PI = 3.14159265;\n\nbool check = false;\n\n// Smooth HSV to RGB conversion \n// Function by iq, from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c) {\n  vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n  return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nbool keypress(int code) {\n  return texelFetch(iChannel0, ivec2(code,2),0).x != 0.0;\n}\n\nvec4 store(int i,int j) {\n  return texelFetch(iChannel1, ivec2(i,j),0);\n}\n\nint keycount(int key) {\n  return int(store(0,key).x);\n}\n\nconst int CHAR_C = 67;\nconst int CHAR_I = 73;\nconst int CHAR_L = 76;\nconst int CHAR_U = 85;\nconst int CHAR_X = 88;\nconst int CHAR_Z = 90;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n\nvec4 circles2[K+2];\nvec4 circles3[2*K];\n\nvoid initCircles() {\n  // half angle between circle centres\n  float theta = PI/float(K);\n  // d is distance of circle centre from origin\n  float d = 1.0/(1.0+sin(theta));\n  // radius of circle, radius of inner tangent circle\n  float r = 1.0-d, s = d-r;\n  // scale of complementary set of circles\n  float k = d*cos(theta)/(d-r);\n  float r2 = r*r, k2 = k*k, s2 = s*s;\n  circles2[K+1] = vec4(0,0,k2,-1);\n  for (int i = 0; i<K; i++) {\n    float t = 2.0*float(i)*theta+0.0*iTime;\n    circles2[i+1] = vec4(k*d*sin(t+theta),k*d*cos(t+theta),k2*r2,1);\n    circles3[i] = vec4(d*sin(t),d*cos(t),r2,1);\n    circles3[K+i] = vec4(k2*d*sin(t),k2*d*cos(t),k2*k2*r2,1);\n  }\n  circles2[0] = vec4(0,0,k2*s2,1);\n}\n\nfloat length2(vec2 p) {\n  return dot(p,p);\n}\n\n// Note that a circle may be \"inverted\" so the inside is\n// treated as the outside (indicated by c.w < 0.0)\nbool inside(vec2 p, vec4 c) {\n  float r2 = length2(p-c.xy);\n  if (c.w < 0.0) return r2 > c.z;\n  else return r2 <= c.z;\n}\n\n// Invert p in circle c, keeping track of conformal scale factor.\nvec2 invert(vec2 p, vec4 c, inout float scale) {\n  p -= c.xy;\n  float s = c.z/dot(p,p);\n  scale *= abs(s);\n  p *= s;\n  p += c.xy;\n  return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  initCircles();\n  vec2 z0 = (2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n  bool dozoom = !keypress(CHAR_Z);\n  float zoom = !dozoom ? 1.2*exp(0.1*float(keycount(KEY_DOWN)-keycount(KEY_UP))) \n      : exp(30.0-mod(iTime,50.0));\n  // Transform to put centre at m, but preserve the unit circle\n  vec2 m = iMouse.x <= 0.0 ? vec2(-0.8,-0.5)\n    : (2.0*iMouse.xy - iResolution.xy)/iResolution.y;\n  vec4 tcircle;\n  if (m != vec2(0)) {\n    m *= zoom;\n    if (!keypress(CHAR_U)) {\n      m /= dot(m,m); // m inverted in unit circle\n      tcircle = vec4(m,dot(m,m)-1.0,0);\n    } else {\n      // Inversion in unit circle\n      tcircle = vec4(m,1,0);\n    }\n  }\n \n  fragColor = vec4(0);\n\n  float aadelta = 1.0/(AA*iResolution.y);\n\n  for (float p = 0.0; p < AA; p++) {\n    for (float q = 0.0; q < AA; q++) {\n      vec2 z = z0 + aadelta*vec2(p,q);\n      z *= zoom;\n      float scale = zoom;\n      if (!keypress(CHAR_I)) {\n        if (m != vec2(0)) {\n          z = invert(z,tcircle,scale);\n          z.x = -z.x;\n        } else {\n          float t = 1.41*cos(0.2*iTime);\n          z = invert(z,vec4(0,t,1,1),scale);\n          z.x = -z.x;\n        }\n      }\n        \n      int step;\n      for (step = 0; step < NSTEPS; step++) {\n        bool found = false;\n        for (int i = 0; i < 1000; i++) {\n          if (i == K+2) break;\n          vec4 c = circles2[i];\n          if (inside(z,c)) {\n            z = invert(z,c,scale);\n            found = true;\n            break;\n          }\n        }\n        if (!found) break;\n      }\n      vec3 col = vec3(0);\n      {\n        float dmin = 1e10;\n        int imin = -1;\n        for (int i = 0; i < 2*K; i++) {\n          vec4 c = circles3[i];\n          float d = abs(length(z-c.xy) - sqrt(c.z));\n          d /= scale;\n          if (inside(z,c)) {\n            dmin = d;\n            imin = i;\n            break;\n          }\n        }\n        if (imin >= 0) {\n          if (keypress(CHAR_C)) {\n            col = hsv2rgb(vec3(float(2*step)/float(NSTEPS),0.8,0.8));\n          } else {\n            col = hsv2rgb(vec3(0.0*iTime+float(imin)/float(K+1),0.8,0.8));\n          }\n        }\n        if (!keypress(CHAR_L)) col *= smoothstep(0.0,0.003,dmin);\n      }\n\n      float dmin = 1e10;\n      for (int i = 0; i < K+1; i++) {\n        vec4 c = circles2[i];\n        float d = abs(length(z-c.xy) - sqrt(c.z));\n        d /= scale;\n        if (d < dmin) dmin = d;\n      }\n      if (!keypress(CHAR_X)) {\n        float lwidth = max(0.003,2.0/iResolution.y); \n        col = mix(col,vec3(0),0.3*smoothstep(0.0,lwidth,dmin));\n      }\n      fragColor.xyz += col;\n    }\n  }\n  fragColor.xyz /= AA*AA;\n  if (check) fragColor.x = 1.0;\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define keystate(k,n) ( texelFetch(iChannel0,ivec2(k,n),0) )\n\nvoid mainImage(out vec4 t, vec2 uv) {\n#if __VERSION__ < 300\n    t = vec4(0);\n#else\n    \n    int i = int(uv.x);\n    int j = int(uv.y);\n    if ( iFrame == 0 ) {\n        t = vec4(0);\n    } else {\n        t = texelFetch(iChannel1,ivec2(i,j),0); // Get current state   \n    }  \n    if (i == 0) {\n        float w1 = keystate(j,2).x;\n        if (w1 != t.w) {\n            t.w = w1;\n            t.x++;\n        }\n    }     \n        \n#endif           \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}