{
    "Shader": {
        "info": {
            "date": "1559748169",
            "description": "gentle psychedelia",
            "flags": 0,
            "hasliked": 0,
            "id": "wlSGDw",
            "likes": 3,
            "name": "rainbow grid",
            "published": 3,
            "tags": [
                "grid",
                "rainbow"
            ],
            "usePreview": 0,
            "username": "mahalis",
            "viewed": 765
        },
        "renderpass": [
            {
                "code": "const float twoPi = 6.283;\n\nvec3 hash3(vec2 p) {\n\tvec3 q = vec3(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)), dot(p, vec2(419.2, 371.9)));\n\treturn fract(sin(q) * 43758.5453);\n}\n\n// extremely questionable implementation of iqâ€™s Voronoise\nfloat voronoise(vec2 x) {\n\tvec2 cell = floor(x);\n\tvec2 cellCoordinate = fract(x);\n\t\n\tfloat accum = 0.;\n\tfloat weight = 0.;\n\tfor(int x = -2; x <= 2; x++) {\n\t\tfor(int y = -2; y <= 2; y++) {\n\t\t\tvec2 cellOffset = vec2(y, x);\n\t\t\tvec3 noiseValue = hash3(cell + cellOffset); // for Perlin noise, ditch the first two components\n\t\t\tfloat cellDistance = length(cellOffset - cellCoordinate + noiseValue.xy);\n\t\t\tfloat smoothedDistance = (1.0 - smoothstep(0., 1.414 /* sqrt(2) */, cellDistance));\n\t\t\taccum += noiseValue.z * smoothedDistance;\n\t\t\tweight += smoothedDistance;\n\t\t}\n\t}\n\treturn accum / weight;\n}\n\n// palette function also from an iq article\nvec3 palette(float v) {\n    return vec3(0.5) + 0.5 * vec3(cos(twoPi * (v + vec3(0.0, 0.333, 0.667))));\n}\n\nfloat stripe(float v, float w) {\n\tfloat halfW = w * 0.5;\n\tfloat normV = fract(v);\n\tfloat alias = fwidth(v);\n\treturn min(smoothstep(0.5 - halfW - alias, 0.5 - halfW, normV), smoothstep(0.5 + halfW + alias, 0.5 + halfW, normV));\n}\n\nvec2 direction(float a) {\n\treturn vec2(cos(a), sin(a));\n}\n\nvec2 rotate(vec2 p, float a) {\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\n\treturn vec2(c * p.x - s * p.y, s * p.x + c * p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 3. * fragCoord/iResolution.x;\n    uv.y += 0.1 * sin(uv.x + iTime * 0.1);\n\t// color\n\n\tvec2 noiseCoordinate1 = uv * 8. + direction(fract(iTime * 0.043) * twoPi) * sin(fract(iTime * 0.07) * twoPi);\n\tfloat noiseValue1 = voronoise(noiseCoordinate1);\n\tvec2 noiseCoordinate2 = uv * 9. + direction(fract(iTime * -0.01) * twoPi) * sin(fract(iTime * 0.023) * twoPi) * 2.;\n\tfloat noiseValue2 = voronoise(noiseCoordinate2);\n\tvec2 noiseCoordinate3 = uv * 11. + direction(fract(iTime * 0.0074) * twoPi) * sin(fract(iTime * 0.019) * twoPi) * 3.;\n\tfloat noiseValue3 = voronoise(noiseCoordinate3);\n\n\tfloat noiseValue = noiseValue1 * noiseValue2 * noiseValue3 * 3.; // is this normalization factor right? probably not\n\tvec3 color = palette(3. * noiseValue);\n\n\tuv = rotate(uv, cos(iTime * 0.001) * 0.04 * twoPi);\n\t// distort\n\tuv += 0.014 * (sin(uv * 8. + iTime * 0.4) + sin(uv * 11. + iTime * 0.31) * vec2(1., -1.));\n\n\t// grid\n\n\tvec2 diagonalDirection = vec2(sqrt(3.0) * 0.5, 0.5);\n\tconst float lineScale = 10.;\n\tconst float lineWidth = 0.02;\n\t\n\tfloat v = max(max(stripe(dot(uv, diagonalDirection) * lineScale, lineWidth), stripe(dot(uv, vec2(-diagonalDirection.x, diagonalDirection.y)) * lineScale, lineWidth)), stripe((uv.y + 0.15) * lineScale, lineWidth));\n    \n    fragColor = vec4(v * color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}