{
    "Shader": {
        "info": {
            "date": "1612624840",
            "description": "Circular ends with squircle transition into straight edge.\n\nManually multisampling the edge pixels in the shader.\n",
            "flags": 0,
            "hasliked": 0,
            "id": "wt3fW8",
            "likes": 6,
            "name": "Fast 16x MSAA Squircle",
            "published": 3,
            "tags": [
                "2d",
                "squircle"
            ],
            "usePreview": 0,
            "username": "krh",
            "viewed": 527
        },
        "renderpass": [
            {
                "code": "vec2 _normalize(vec2 p, vec2 pos, vec2 size, float r) {\n    float x, y;\n\n    if (p.x < pos.x + r)\n        x = p.x - (pos.x + r);\n    else if (p.x < pos.x + size.x - r)\n        x = 0.0;\n    else\n        x = p.x - (pos.x + size.x - r);\n\n    if (p.y < pos.y + r)\n        y = p.y - (pos.y + r);\n    else if (p.y < pos.y + size.y - r)\n        y = 0.0;\n    else\n        y = p.y - (pos.y + size.y - r);\n\n  return vec2(x, y);\n}\n\nfloat dist(vec2 p, float radius) {\n    return p.x * p.x * p.x * p.x + p.y * p.y * p.y * p.y;\n    return p.x * p.x * p.x * p.x * 0.125 + p.y * p.y * radius * radius;\n    // return p.x * p.x * radius * radius + p.y * p.y * p.y * p.y;\n}\n\nfloat squircle_cov(vec2 p, float radius) {\n    float r = radius * radius * radius * radius;\n    float delta = 10.0 * radius * radius * radius;\n    float inner = r - delta;\n    float outer = r + delta;\n\n    float d = dist(p, radius);\n    \n    float cov;\n    if (d < inner) {\n        cov = 1.0;\n    } else if (d > outer) {\n        cov = 0.0;\n    } else {    \n        cov = 0.0;\n        int i,j;\n        float step = 0.25;\n        for (i = 0; i < 4; i++) {\n            for (j = 0; j < 4; j++) {\n                vec2 sp = p - vec2(float(i) - 1.5, float(j) - 1.5) * step;\n                if (dist(sp, radius) < r)\n                    cov += 1.0 / 16.0;\n            }\n        }\n    }\n    \n    return cov;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float radius = trunc(iResolution.y * 0.10);\n    vec2 half_size = vec2(radius * 4.0, radius);\n    vec2 size = half_size * 2.0;\n\tvec2 pos = floor(iResolution.xy / 2.0) - half_size;\n    vec2 uv1 = _normalize(fragCoord.xy, pos + vec2(0.02, iResolution.y / 6.0), size, radius);\n    vec2 uv2 = _normalize(fragCoord.xy, pos - vec2(0.0, iResolution.y / 6.0), size, radius);\n\n    vec3 fg1 = vec3(float(0x5b), float(0xc3), float(0xeb)) / 255.0;\n    vec3 fg2 = vec3(float(0xf0), float(0x64), float(0x49)) / 255.0;\n    vec3 bg =  vec3(float(0x36), float(0x38), float(0x2e)) / 255.0;\n\n    vec3 color;\n    float cov1 = squircle_cov(uv1, radius);\n    float cov2 = squircle_cov(uv2, radius);\n\n    color = mix(mix(bg, fg2, cov2), fg1, cov1);\n    \n    fragColor = vec4(color, 1.0); \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}