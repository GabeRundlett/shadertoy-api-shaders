{
    "Shader": {
        "info": {
            "date": "1680576427",
            "description": "balloons",
            "flags": 32,
            "hasliked": 0,
            "id": "ds3XWS",
            "likes": 17,
            "name": "Balloonfest '86",
            "published": 3,
            "tags": [
                "3d",
                "raymarch",
                "blur",
                "radialblur",
                "balloons"
            ],
            "usePreview": 1,
            "username": "Plento",
            "viewed": 339
        },
        "renderpass": [
            {
                "code": "#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define ch(chan, p) texelFetch(chan, ivec2(p), 0)\n\nfloat hash12(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    vec2 uv2 = u / R - 0.5;\n    vec4 bA = ch(iChannel0, u);\n    vec3 col = bA.xyz;\n    \n    const int nSamples = 40;\n    float pc = -(1.0 / float(nSamples - 1));\n    \n    vec3 sum = vec3(0);\n    for(int i = 0;i < 50; i++){\n        float scale = 1. + (float(i)* pc);\n        vec3 temp = pow(texture(iChannel0, uv2 * scale + 0.5).xyz, vec3(9.));\n        sum += temp * .65 * clamp(hash12(u + sin(iTime)), 0.5,0.6 ) * 1.5;\n    }\n    sum /= float(nSamples);\n    \n    col += sum*1.2;\n    col = pow(col, vec3(2.5));\n    //col.xyz = col.xzy;\n    col *= ss(.46508, .465, abs(uv.y));\n    f = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Raaaaymarch\n\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define m vec2(R.x/R.y*(iMouse.x/R.x-.5),iMouse.y/R.y-.5)\nmat2 rot(float a) {return mat2(cos(a), -sin(a), sin(a), cos(a));}\n\nconst vec3 b = vec3(14., 18., 14.);\n\n// https://iquilezles.org/articles/distfunctions/\nfloat box( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - .1;\n}\n\nfloat line( vec3 p, vec3 a, vec3 b, float r ){\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n\nfloat balloon(vec3 p, vec3 id){\n    float h = .1*sin(p.y*.5);\n    float g = box(p - vec3(0., -2.8, 0.), vec3(.07));\n    float bal = length(p*vec3(1.15 + h, 0.9, 1.2 - h))-2.5;\n    return min(g, bal);\n}\n\n\nfloat map(vec3 rp){\n    float d = 999.;\n    vec3 p = rp - vec3(0., 0., 4.);\n    vec3 id = floor(p / b);\n    p = mod(p, b) - b*.5;\n    \n    p.y += cos(iTime*.4 + id.z*5. + id.x*3.) * 1.5;\n    p.x += sin(-iTime*.44 + id.z*2. + id.x*4.) * 1.4;\n    \n    return balloon(p, id);\n}\n\n\nvec3 normal( in vec3 pos ){\n    vec2 e = vec2(0.002, -0.002);\n    return normalize(\n        e.xyy * map(pos + e.xyy) + \n        e.yyx * map(pos + e.yyx) + \n        e.yxy * map(pos + e.yxy) + \n        e.xxx * map(pos + e.xxx));\n}\n\nfloat march(vec3 ro, vec3 rd){\n    float d = 0.0, t = 0.0;\n    \n    for(int i = 0; i < 80; i++){\n    \td = map(ro + rd*t); \n        \n        if(d < 0.001 || t > 150.) break;\n        t += d * .75;\n    }\n    return t;\n}\n\nvec3 color(vec3 p, vec3 rd, vec3 n){\n    vec3 ref = reflect( rd, n );\n    float fres = ss(-.78, .78, dot(rd, n));\n    float dom = ss(-0.5, 0.5, ref.y);\n    vec3 lp = p+vec3(0., 7.0, -12.);\n    vec3 ld = normalize(lp-p);\n    \n    float dif = max(dot(n, ld), .3);\n    float spec = pow(max(dot( reflect(-ld, n), -rd), 0.), 53.);\n    \n    vec3 id = floor(p / b);\n    \n    float k = id.x*3.+id.z*4.+id.y*5.;\n    vec3 objCol = .5+.95*cos(vec3(3., 2., 1.1)*k);\n  \n    vec3 col = .4*(objCol * dif) + .4*spec*vec3(1., 1., 1.);\n    col += fres*.6;\n    col += dom*.12;\n\n\treturn 1.-exp(-col*2.1);   \n}\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = vec2(u.xy - 0.5*R.xy)/R.y;\n    vec3 rd = normalize(vec3(uv, 1.5));\n    vec3 ro = vec3(5. + iTime*2., 9. , 0.);\n    rd.yz *= rot(-.42);\n    rd.xz *= rot(-.42);\n    rd.xy *= rot(.12);\n    \n    float t = march(ro, rd);\n    vec3 p = ro + rd*t;\n    vec3 n = normalize(normal(p) + .3*texture(iChannel0, p.yz*.2).xyz);\n    \n    vec3 col = color(p, rd, n);\n    \n    float fog = exp(-t*t*.00015);\n    col = mix(1.1*mix(vec3(.8, .9, .9), vec3(.51), rd.z), col, fog);\n    \n    f = vec4(sqrt(clamp(col, .0, 1.)), t);\n}\n\n\n\n\n\n\n\n\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 47,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}