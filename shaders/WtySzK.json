{
    "Shader": {
        "info": {
            "date": "1583096791",
            "description": "Converted from a liveshading session with Bonzomatic.",
            "flags": 0,
            "hasliked": 0,
            "id": "WtySzK",
            "likes": 10,
            "name": "Strange Tunnel",
            "published": 3,
            "tags": [
                "raymarching",
                "distancefield",
                "liveshading"
            ],
            "usePreview": 0,
            "username": "Alkama",
            "viewed": 487
        },
        "renderpass": [
            {
                "code": "float t = 0.;\nconst float pi = acos(-1.);\nconst mat3 yuv2rgb = mat3(1., 0., 1.13983, 1., -0.39465, -0.58060, 1., 2.03211, 0.);\nmat2 rot(float a) { float c=cos(a),s=sin(a); return mat2(c,s,-s,c); } \nfloat cube(vec3 p, vec3 s) { vec3 b=abs(p)-s; return max(max(b.x,b.y),b.z); }\nfloat torus(vec3 p, float l, float s) { return length(vec2(length(p.xz)-l, p.y))-s; }\nvec2 scene(vec3 p) {\n    p.y=mod(p.y,.5)-.25;\n    p.xz *= rot((2.*pi+sin(t*2.))*2.*p.y);\n    float s=1., r=0.;\n    for(int i=0;i<3;i++) {\n        p = 2.*clamp(p, -.1, .1)-p;\n        r = max((.04*sin(t*5.)+.2)/dot(p,p), .9);\n        p*=r; s*=r;\n    }\n    vec2 c = vec2(max(cube(p,vec3(.5)), -min(cube(p,vec3(.6,.45,.45)),min(cube(p,vec3(.45,.6,.45)), cube(p,vec3(.45,.45,.6))))), 1.);\n    vec2 t = vec2(torus(p, 1., .05), 2.);\n    t=t.x<c.x?t:c;\n    return t*vec2(.3/s, 1.);\n}\nvec3 march(vec3 og, vec3 dir, int it, float tr, float md) {\n    int i=0;\n    float d=0.;\n    vec3 p = og;\n    for (i=0; i<it; i++) {\n        vec2 t = scene(p);\n        float h = t.x;\n        if (h<tr*d) return vec3(d,i,t.y);\n        if (d>md) return vec3(d,i,0);\n        d += h;\n        p += dir * h;\n    }\n    return vec3(d,i,0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord/iResolution.xy - 0.5) / vec2(iResolution.y / iResolution.x, 1);\n    float tt = mod(.2*iTime,pi*2.);\n\tt = (tt+sin(tt*5.)*.18);\n    vec3 eye = vec3(.03*sin(t*2.), t-.5, .03*cos(t));\n    vec3 f = normalize(vec3(0,t,0)-eye);\n    vec3 s = normalize(cross(vec3(0,1,1), f));\n    vec3 u = normalize(cross(f,s));\n    vec3 dir = normalize(f*(.55+sin(tt*5.)*.25)+uv.x*s+uv.y*u);\n    vec3 lp = .2*vec3(sin(t),sin(t)+t,cos(t*1.5));\n    vec3 col = vec3(0.);\n    vec3 m = march(eye, dir, 200, .001, 2.);\n    vec3 p = eye+dir*m.x;\n    if (m.z > 0.) {\n        vec2 e=vec2(.001,0);\n        vec3 n = normalize(vec3(scene(p+e.xyy).x-scene(p-e.xyy).x,scene(p+e.yxy).x-scene(p-e.yxy).x,scene(p+e.yyx).x-scene(p-e.yyx).x));\n        vec3 ld = normalize(lp - p);\n        float diff=max(0.,dot(n,ld));\n        float nd = dot(n,-dir);\n        float spec=pow(max(0., nd),20.);\n        float fres=1.-abs(nd);\n        float ao = scene(p+n*.1).x/.1 + scene(p+n*.3).x/.3;\n        vec3 acd = normalize(acos(-dir));\n        if (m.z > 1.) {\n            col = ao*.5+.15*fres*yuv2rgb*acd.zyx;\n        } else {\n            col = ao*0.2+.5*spec*acd.xzy;\n        }\n        col *= pow(max(0.,2.-length(p-vec3(0.,t,0.))),3.);\n    }\n    col *= pow(1.4-length(uv), 3.);\n    fragColor = vec4(pow(col, vec3(1./2.2)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}