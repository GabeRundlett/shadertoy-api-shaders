{
    "Shader": {
        "info": {
            "date": "1702752233",
            "description": "By https://github.com/FabulousCodingFox",
            "flags": 0,
            "hasliked": 0,
            "id": "4fsGzH",
            "likes": 2,
            "name": "RayMarching - Test 1",
            "published": 3,
            "tags": [
                "raymarching"
            ],
            "usePreview": 0,
            "username": "FabulousCodingFox",
            "viewed": 167
        },
        "renderpass": [
            {
                "code": "#define MAX_DISTANCE 100.\n#define SURFACE_DISTANCE .01\n\n////////////////////////////////////////////////////\nstruct Sphere{\n    vec3 pos;\n    float radius;\n};\nfloat dSphere(vec3 pos, Sphere obj){\n    return length(pos-obj.pos)-obj.radius;\n}\n////////////////////////////////////////////////////\nstruct Cube{\n    vec3 pos;\n    float side;\n};\nfloat dCube(vec3 pos, Cube obj){\n  vec3 q = abs(pos-obj.pos) - vec3(obj.side);\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - .1;\n}\n////////////////////////////////////////////////////\nstruct Pyramid{\n    vec3 pos;\n    float height;\n    float side;\n};\nfloat dPyramid(vec3 pos, Pyramid obj){\n  pos = pos - obj.pos - vec3(0,-obj.height*.5,0);\n  float m2 = obj.height*obj.height + 0.25;\n    \n  pos.xz = abs(pos.xz);\n  pos.xz = (pos.z>pos.x) ?pos.zx : pos.xz;\n  pos.xz -= 0.5;\n\n  vec3 q = vec3( pos.z, obj.height*pos.y - 0.5*pos.x, obj.height*pos.x + 0.5*pos.y);\n   \n  float s = max(-q.x,0.0);\n  float t = clamp( (q.y-0.5*pos.z)/(m2+0.25), 0.0, 1.0 );\n    \n  float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n  float b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);\n    \n  float d2 = min(q.y,-q.x*m2-q.y*0.5) > 0.0 ? 0.0 : min(a,b);\n    \n  return sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-pos.y));\n}\n////////////////////////////////////////////////////\n\n#define SPHERE Sphere(vec3(0, 1, 10), 1.)\n#define CUBE Cube(vec3(3, 1, 10), 1.)\n#define PYRAMID Pyramid(vec3(-3, 1, 10), 2., 1.)\n\nfloat getDistance(vec3 position){\n    float dSPHERE = dSphere(position, SPHERE);\n    float dCUBE = dCube(position, CUBE);\n    float dPYRAMID = dPyramid(position, PYRAMID);\n    return min(min(min(position.y, dSPHERE), dCUBE), dPYRAMID);\n}\n\n\nstruct Ray{\n    vec3 origin, direction;\n};\n\n\nvec4 rayMarch(Ray ray){\n\tfloat distanceFromOrigin=0.;\n    while(true){\n    \tvec3 position = ray.origin + ray.direction * distanceFromOrigin;\n        float dist = getDistance(position);\n        distanceFromOrigin += dist;\n        if(distanceFromOrigin>MAX_DISTANCE || dist<SURFACE_DISTANCE) break;\n    }\n    return vec4(ray.origin + ray.direction * distanceFromOrigin, distanceFromOrigin);\n}\n\nvec3 getNormal(vec3 position) {\n\tfloat dist = getDistance(position);\n    vec2 e = vec2(.01, 0);\n    vec3 normal = dist - vec3(\n        getDistance(position-e.xyy),\n        getDistance(position-e.yxy),\n        getDistance(position-e.yyx));\n    return normalize(normal);\n}\n\nfloat getLight(vec3 position) {\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 light = normalize(lightPos-position);\n    vec3 normal = getNormal(position);\n    float dif = clamp(dot(normal, light), 0., 1.);\n    vec4 dist = rayMarch(Ray(position+normal*SURFACE_DISTANCE*2., light));\n    if(dist.w<length(lightPos-position)) dif *= .1;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    Ray ray = Ray(vec3(0, 1, 0), normalize(vec3(uv.x, uv.y, 1)));\n    vec4 result = rayMarch(ray);\n    float dif = getLight(result.xyz);\n    vec3 col = vec3(dif);\n    col = pow(col, vec3(.4545));\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}