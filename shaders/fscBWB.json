{
    "Shader": {
        "info": {
            "date": "1657075469",
            "description": "chained",
            "flags": 0,
            "hasliked": 0,
            "id": "fscBWB",
            "likes": 32,
            "name": "chained",
            "published": 3,
            "tags": [
                "chained"
            ],
            "usePreview": 0,
            "username": "jorge2017a2",
            "viewed": 387
        },
        "renderpass": [
            {
                "code": "//----------image\n//por jorge2017a2-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define Ka 0.5\n#define Kd 0.4\n//Referencia\n//https://www.shadertoy.com/view/wlXSD7-------IQ\n//chained\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\nvec3 phit;\n\n//operacion de Union  por FabriceNeyret2\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n//----------oPeraciones de Repeticion\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\n//IQ\nfloat sdLink( in vec3 p, in float le, in float r1, in float r2 )\n{   vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n    return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\n\n//iQ\nvec4 mapCadena( in vec3 pos )\n{   // animate\n    pos.y += 0.5*iTime;\n   // paramteres\n    const float le = 0.13, r1 = 0.2, r2 = 0.09;\n    // make a chain out of sdLink's\n    vec3 a = pos;  a.y = fract(a.y    )-0.5;\n    vec3 b = pos;  b.y = fract(b.y+0.5)-0.5;\n    // evaluate two links\n    float d1=sdLink(a.xyz,le,r1,r2);\n    float d2=sdLink(b.zyx,le,r1,r2);\n    float dmin;\n    if(d1<d2 )\n     {   phit=a; dmin=d1; }\n    else\n     {   phit=b; dmin=d2; }\n     vec4 res4=vec4(dmin,phit);\n  return res4;\n}\n\nvec4 escalaCadena(vec3 p)\n{   float s=6.0;\n    vec4 res= mapCadena(p/s);res.x*=s;\n    return res;\n}\n\nvec4 minphit(vec4 mc1,vec4 mc2)\n{   float dmin=9999.9;\n    vec3 ptmphit;\n     float dist1=min(mc1.x,mc2.x);\n    if(dist1==mc1.x)\n       { ptmphit=mc1.yzw; dmin=mc1.x; }\n    else if(dist1==mc2.x)\n       { ptmphit=mc2.yzw; dmin=mc2.x; }\n    return vec4(dmin, ptmphit);\n}\n\nvec2 GetDist(vec3 p  ) \n{\tvec2 res= vec2(9999.0, -1.0);  \n    p.y=p.y-5.0;\n    vec3 p0=p;\n\t\n     p=p.yzx;\n    p.y= opRep1D( p.y, 25.0 );\n    vec4 mc1=escalaCadena(p.yzx);\n    vec4 mc2=escalaCadena(vec3(p.y,p.z,p.x)-vec3(5.0,5.0,5.0));\n    \n    p=p0;\n    p.y+=9.0;\n    p.x= opRep1D( p.x, 25.0 );\n    vec4 mc3=escalaCadena(p.yzx);\n    vec4 mc4=escalaCadena(vec3(p.y,p.z,p.x)-vec3(5.0,5.0,5.0));\n    \n    p=p0;\n    p-=vec3(10.,0.0,10.0);\n    p.z= opRep1D( p.z, 25.0 );\n    p.x= opRep1D( p.x, 25.0 );\n    vec4 mc5=escalaCadena(p);\n    vec4 mc6=escalaCadena(p-vec3(5.0,5.0,5.0));\n \n    vec4 phittmp=vec4(9999.9,0.0,0.0,0.0);\n    \n    phittmp=minphit(phittmp,mc1);\n    phittmp=minphit(phittmp,mc2);\n    phittmp=minphit(phittmp,mc3);\n    phittmp=minphit(phittmp,mc4);\n    phittmp=minphit(phittmp,mc5);\n    phittmp=minphit(phittmp,mc6);\n    \n    phit=phittmp.yzw;\n    ///corregido por ocb\n     res =opU2(res, vec2(mc1.x,100.0));\n    res =opU2(res, vec2(mc2.x,100.0));\n    res =opU2(res, vec2(mc3.x,101.0));\n    res =opU2(res, vec2(mc4.x,101.0));\n    res =opU2(res, vec2(mc5.x,102.0));\n    res =opU2(res, vec2(mc6.x,102.0));\n    \n    return res;\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   vec3 p;\n    vec2 hit, object=vec2(0.1,0.0);\n    for(int i=0; i <= PMaxSteps; i++) \n    { p = ro + rd*object.x;\n      hit = GetDist(p);\n      object.x += hit.x;\n      object.y = hit.y;\n      if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }    \n    return object;\n}\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 9999.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < MAX_STEPS; i++) {\n      float hit = GetDist(p + lightPos * dist).x;\n      res = min(res, hit / (dist * lightSize));\n      dist += hit;\n      if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat occlusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {    \n      float hr = 0.01 + float(i) * 0.5 / 4.0;\n      float dd = GetDist(nor * hr + pos).x;\n      occ += (hr - dd)*sca;\n      sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 lightColor, float t) \n{   vec3 lightPos=lp;\n    vec3 worldPos = p;\n    vec3 V = -rd;\n    vec3 N = normal;\n    vec3 L = normalize (lightPos - worldPos);\n    vec3 R = reflect (-L, N);\n\n    float lightDist = max(length(L), .001);\n    float atten=1.0 / (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    L /= (lightDist*atten);\n\n    float shadow = getSoftShadow(worldPos, L);// shadows\n        \n    float occ = occlusion(worldPos, N);// occ\n    vec3 ambient = Ka + Ka * dot(normal, vec3(0., 1., 0.))*lightColor;\n    ambient*=0.5;\n\n    vec3 fresnel =  lightColor *  pow(clamp(1.0 + dot(rd, N), 0.0, 1.0), 2.0);;\n    float diff= clamp(dot(N, L), 0.0, 1.0);\n    vec3 diffuse =  lightColor * diff;\n    float shininess=10.0;\n    float specular    = pow(max(dot(R, V), 0.0), shininess);\n    vec3 back = 0.5 * lightColor * clamp(dot(N, -L), 0.0, 1.0); // back\n    vec3 colOut = occ*lightColor*(ambient+diffuse*shadow+.25 +back) + vec3(.7,.9,1)*specular*specular;\n    return colOut;\n}\n\nvec3 getColorTextura( vec3 p, vec3 nor,  int i)\n{\tvec3 col;\n    if (i==100 ){ p=phit.yzx ; col=tex3D(iChannel0, p/1., nor); return col*2.0;  }\n    if (i==101 ){ p=phit.zxy ; col=tex3D(iChannel0, p/1., nor); return col*2.0;  }\n    if (i==102 ){ p=phit      ; col=tex3D(iChannel0, p/1., nor); return col*2.0;  }\n}\n\nvec3 render_sky_color(vec3 rd)\n{   float t = (rd.x + 1.0) / 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n\treturn sky;\n}\n\nvec3 GetMaterial(vec3 p,  vec3 nor, vec3 ro,  vec3 rd, int id_color)\n{  \tvec3 colobj; \n    if (id_color>=100 )\n   { return  getColorTextura( p, nor,id_color); }      \n}\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43;d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvec3 Render(vec3 ro, vec3 rd)\n{  vec3 col = vec3(0);\n  vec3 p;\n     vec2 hit=RayMarch(ro,rd, MAX_STEPS);\n      if(hit.x<MAX_DIST)\n       {   p = (ro + rd * hit.x );\n        vec3 nor=GetNormal(p);\n        vec3 colobj;\n        colobj=GetMaterial( p, nor, ro, rd,  int(hit.y));\n        vec3 result;\n         result= lightingv3(nor, p,light_pos1, rd,ro,colobj,hit.x)*light_color1;\n        result+= lightingv3(nor, p,light_pos2,rd, ro,colobj,hit.x)*light_color2;\n        col= result/2.0;\n        col= (ACESFilm(col)+linear2srgb(col)+col+ exposureToneMapping(3.0, col))/4.0;        \n    }\n    else if(hit.x>MAX_DIST)\n    col= render_sky_color(rd);\n   return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float t;\n    t=mod(iTime*1.0,360.0);\n \tlight_pos1= vec3(-10.0, 120.0, -25.); light_color1=vec3( 1.0,1.0,1.0 );\n \tlight_pos2= vec3(10.0, 20.0, -25.0 ); light_color2 =vec3( 1.0,1.0,1.0 ); \n   vec3 ro=vec3(0.0,10.0,-25.0);\n   vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n   if(6.0*sin(t)>0.0)\n       rd= rotate_y(rd, t*0.5);\n   else\n       ro=vec3(0.0+10.*sin(t),10.0,-25.0);\n     \n    //light_pos1+=ro;\n    //light_pos2+=ro;\n    vec3 col= Render( ro,  rd);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 3,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//-------common\n#define PI 3.14159265\n\n///Gracias a Shane...16-jun-2020\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n  n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n  n /= dot(n, vec3(1)); \n  vec3 tx = texture(tex, p.yz).xyz;\n  vec3 ty = texture(tex, p.zx).xyz;\n  vec3 tz = texture(tex, p.xy).xyz;\n  return mat3(tx*tx, ty*ty, tz*tz)*n; \n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}