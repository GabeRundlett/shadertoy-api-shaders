{
    "Shader": {
        "info": {
            "date": "1681830368",
            "description": "A super simple, and fast DDA algorithm.",
            "flags": 0,
            "hasliked": 0,
            "id": "ct33Rn",
            "likes": 21,
            "name": "Simple Voxel DDA",
            "published": 3,
            "tags": [
                "3d",
                "lighting",
                "voxel",
                "dda"
            ],
            "usePreview": 0,
            "username": "me_123",
            "viewed": 557
        },
        "renderpass": [
            {
                "code": "vec3 getRay(in vec3 cameraDir, in vec2 uv) { //get camear ray direction\n    vec3 cameraPlaneU = vec3(normalize(vec2(cameraDir.y, -cameraDir.x)), 0);\n    vec3 cameraPlaneV = cross(cameraPlaneU, cameraDir) ;\n\treturn normalize(cameraDir*0.5 + uv.x * cameraPlaneU + uv.y * cameraPlaneV);\n}\nfloat s(in vec3 p) {\n    return exp(p.z*0.1-3.0)+(texture(iChannel0, (p+112.613)*0.001).x+texture(iChannel0, (p)*0.004).x);\n}\nbool getBlock(in vec3 p) {\n    return s(p) < 0.8;\n}\nstruct hit {\n    vec3 normal;\n    float dist;\n    vec3 position;\n};\nhit DDA(in vec3 ro, in vec3 rd) {\n    vec3 i = floor(ro);\n    float dist;\n    int ii;\n    vec3 normal;\n    vec3 srd = sign(rd);\n    vec3 rdi = 1./(2.*rd);\n    for (ii = 0; ii < 200; ii += 1) {\n        if (getBlock(i)) break;\n        vec3 plain = ((1.+srd-2.*(ro-i))*rdi);\n        dist = min(plain.x, min(plain.y, plain.z));\n        normal = vec3(equal(vec3(dist), plain))*srd;\n        i += normal;\n    }\n    if (ii == 200) return hit(vec3(-1), -1., vec3(-1.0));\n    vec3 position = ro+rd*dist;\n    return hit(normal, dist, position);\n}\nvec3 getColor(in vec3 ro, in vec3 rd) {\n    hit h = DDA(ro, rd);\n    if (h.dist < 0.0) return vec3(0);\n    float l = mix(abs(dot(h.normal, normalize(vec3(1, 2, 3)))), 1., 0.7);\n    return vec3(l*4.0*pow(s(h.position), 5.0)*exp(-h.dist*0.02)*exp(h.position.z*0.03-1.5));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-iResolution.xy*0.5)/iResolution.y;//((fragCoord+hash33(vec3(fragCoord.xy, iTime)).xy) - 0.5 * iResolution.xy) / iResolution.y;\n    \n    //camera\n    vec2 m = vec2(iTime*0.8, 0.9);\n    if (iMouse.z > 0.0) m = ((iMouse.xy)/iResolution.xy) * vec2(6.28, 3.14159263);\n        \n    vec3 ro = vec3(sin(m.y) * cos(-m.x), sin(m.y) * sin(-m.x), cos(m.y))*40.0;//*max(pow(2., 5.-iTime*2.0), 5.0);\n    vec3 rd = getRay(-normalize(ro), uv);\n    vec3 color = getColor(ro, rd);\n\n    //super sample\n    fragColor = vec4(color, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "volume",
                        "id": 39,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}