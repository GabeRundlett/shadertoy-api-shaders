{
    "Shader": {
        "info": {
            "date": "1625892659",
            "description": "Test",
            "flags": 0,
            "hasliked": 0,
            "id": "ftXXzS",
            "likes": 5,
            "name": "pnpolyTest",
            "published": 3,
            "tags": [
                "polygon"
            ],
            "usePreview": 0,
            "username": "MrOkiDoki",
            "viewed": 277
        },
        "renderpass": [
            {
                "code": "\n//Taken by http://www.eecs.umich.edu/courses/eecs380/HANDOUTS/PROJ2/InsidePoly.html by Randolph Franklin\n\n\nconst vec2[] Points = vec2[] (\nvec2(0.91,4.52),\nvec2(2.6,5),\nvec2(2.56,-0.61),\nvec2(-2.16,-0.07),\nvec2(-3.43,4.46),\nvec2(-0.78,0.29),\nvec2(-0.84,5.65),\nvec2(0.1,.87),\nvec2(1.71,.87)\n);\n\nconst int count = 9;\n\nfloat pnpoly(vec2 p)\n{\n    int i, j;\n    float c = 0.0;\n    for (i = 0, j = count - 1; i < count; j = i++)\n    {\n        if ((((Points[i].y <= p.y) && (p.y < Points[j].y)) || ((Points[j].y <= p.y) && (p.y < Points[i].y))) && (p.x < (Points[j].x - Points[i].x) * (p.y - Points[i].y) / (Points[j].y - Points[i].y) + Points[i].x))\n        c = 1.0f - c;\n         \n    }\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv *= 7.;\n    uv += vec2(-3.5,-1.);\n\n    // Time varying pixel color\n    float col = pnpoly(uv);\n\n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}