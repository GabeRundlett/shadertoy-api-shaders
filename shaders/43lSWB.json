{
    "Shader": {
        "info": {
            "date": "1709935453",
            "description": "find the pairs !\nselect 2^n number of cells in Common.\n\nNB: permutations are not always as scrambled that we'ld like.",
            "flags": 32,
            "hasliked": 0,
            "id": "43lSWB",
            "likes": 32,
            "name": "Memory game",
            "published": 3,
            "tags": [
                "games",
                "permutations"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 310
        },
        "renderpass": [
            {
                "code": "// BuffA: permutation simplified from from https://shadertoy.com/view/lXlSzf\n\nvec4 char(vec2 p, int c) {   // --- print char. from https://www.shadertoy.com/view/llySRh\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        min(abs(dFdx),1./256.), min(abs(dFdy),1./256.) ); // for Windows\n} \n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  U = cell(u),\n          F = fract(U), A = abs(F-.5);                // dist to cell center\n    ivec2 I = ivec2(U);                               // cell Id\n    O = T( index(I) );                                // state of cell I\n    int i = int(O);                                   // cell content\n    O = mix(   max(A.x,A.y) < .45                     // inner cell\n                ? (O.yz==R-R ? .5+.5*texture(iChannel3,F) : vec4(1) ) // cell BG\n                 -.5*step(.5,O.yzzz)                  // modified when clicked\n                : uint(T(N).z)!=N/2u ? vec4(0)        // walls: if normal\n                                     : hue(3.*iTime)  //      : if win\n             , hue( float(i*2) / float(1<<n) )        // symbol color\n             , O.yz==R-R ? 0. :  // comment for debug\n                           char(fract(U),65+i).x      // symbol mask\n           );\n    F *= 4.; int n = int(T(N).w);                     // try counter\n    if ( I==I-I && F.y < 1. )\n       O = F.x<.75 ? char(F           ,48+n/100).xxxx\n         : F.x<1.2 ? char(F-vec2(.5,0),48+n/10%10).xxxx\n         : F.x<2.1 ? char(F-vec2(1,0) ,48+n%10).xxxx : O;  \n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// states of cells i:\n//   (i,0).xyz:  content,  hidden / tmp shown, to find / found\n// global state:\n//   (N,0).xyzw: timer (for 2nd click display), \n//               clicked cell #1,\n//               pairing count, click count\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    uvec2 I = uvec2(u);\n    if ( I.y > 1u || I.x > N ) return;       // we just need N threads.\n    O = T(I.x);                              // previous state\n    \n    if (iFrame<1 || ( uint(T(N).z)==N/2u && T(N).x<0.) ) {         // --- initialization\n        uint i = I.x, c = uint(iDate.w*100.),// FordPerfect analytical random permutation\n             m = N - 1u;                     // i: index c: permut param m: mask\n    /*  i =  i+c*(c+1u)/2u  & m;             // & mask ⇔ % N*N , without the risk with negatives\n        i =  i*(2u*c+1u)    & m;             // for better randomness\n        i ^= i >> (n+1)/2;\n        i =  i*0x9E3779B9u  & m;             // Hand-picked constant, floor(2^32/phi)\n        i ^= i >>  n/2;\n    */                                       // FordPerfect 2nd analytical random permutation\n        uvec2 v = uvec2(i,c),M = uvec2(m,-1u),s = uvec2(n/2,17);\n        v^=v>>s; v^=v*v|5u; v.x+=v.y; v&=M; // XQO, see https://github.com/skeeto/hash-prospector/issues/23\n        v^=v>>s; v^=v*v|5u; v.x+=v.y; v&=M;\n        v^=v>>s; v^=v*v|5u; v.x+=v.y; v&=M;\n        i = v.x;\n\n        O *= 0.;\n        O.x = float(i/2u);                   // content (from permutation)  /2 for pairs\n    }\n    else {                                   // --- state engine\n        vec4 S = T(N);                       // global state\n        int  c = int( S.w ) %2;              // click parity\n        if ( c < 1 && I.x == N ) O.x--;      // running counter for second click display\n        if ( c < 1 && ( S.x < 0. || iMouse.w > 0.) ) O.y = 0.; // reset tmp show cell\n        if ( iMouse.w > 0. ) {               // on click:\n            int i = index( ivec2( cell(iMouse.xy) ) ); // cell index under mouse\n            if ( I.x == N  ) {               //   in global state cell:\n                O.w++;                       //     increment click count\n                if ( c < 1 )  O.y = float(i);//     1st click: memorise clicked cell \n                else if ( i != int(O.y) )    //     2nd click: ( != 1st )\n                    if ( T(i).x == T(O.y).x ) { //    new pairing:\n                        O.z++;               //       pairing counter\n                        if (uint(O.z)==N/2u) O.x = 240.; // finished !\n                    }\n                    else O.x = 90.;          //     timer for second click display\n            }\n            if ( int(I) == i ) O.y = 1.-O.y; // click on cell: swap tmp cell state           \n            if( c > 0 &&  i != int(S.y) &&   // 2nd click & right pair : mark both\n                (   ( int(I) == int(S.y) && O.x == T( i ).x )  // #1\n                 || ( int(I) == i        && O.x == T(S.y).x )  // #2\n              ) ) O.y=0., O.z++;                      \n       }\n    }   \n}\n\n\n\n\n\n\n\n/**\nint shuffle( ivec2 j )    // --- FordPerfect analytical permutation\n{   uint i = uint(j.x + (1<<n/2) *j.y), c = uint(iTime),\n         m = (1u<<n) - 1u;\n    i =  i+c*(c+1u)/2u  & m; // & mask ⇔ % N*N , without the risk with negatives\n    i =  i*(2u*c+1u)    & m; // for better randomness\n    i ^= i >> (n+1)/2;\n    i =  i*0x9E3779B9u  & m; // Hand-picked constant, floor(2^32/phi)\n    i ^= i >>  n/2;\n    return int(i);\n}\n/**/",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const int   n = 5;                                   // 1<<n cells\nconst uint  N = 1u << n;\n#define R          iResolution.xy\n#define T(i)       texelFetch(iChannel0, ivec2(i,0), 0 )\n#define cell(U)  ( vec2( 1<<(n+1)/2, 1<<n/2) *U/R )  // pixel → cell 2D\n#define index(I) ( I.x + ( 1<<(n+1)/2 ) *I.y )       // cell 2D → index",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}