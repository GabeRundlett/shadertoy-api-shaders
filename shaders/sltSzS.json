{
    "Shader": {
        "info": {
            "date": "1639349532",
            "description": "just a quick test of the r2 sequence to see how it looks...",
            "flags": 0,
            "hasliked": 0,
            "id": "sltSzS",
            "likes": 4,
            "name": "QuasiRandomR2",
            "published": 3,
            "tags": [
                "quasirandom",
                "r2"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 241
        },
        "renderpass": [
            {
                "code": "// quasirandom test - from http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\n#define NPOINTS 500.0\n#define DOTSIZE 0.01\n\n// r2 as a function\nvec2 quasi(float n)\n{\n    float g = 1.32471795;\n    float a1 = 1.0/g;\n    float a2 = 1.0/(g*g);\n    float x = fract((a1*n));//float x = mod((0.5+a1*n),1.0);\n    float y = fract((a2*n));//float y = mod((0.5+a2*n),1.0);\n    return vec2(x,y);\n}\nconst vec2 quasi2 = vec2(.754877,.569840);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    \n    float zoomval = 1.25 + (sin(iTime)*0.5);\n    vec3 col = vec3(0.05,0.2,0.05);\n    // btw, never do this :)\n    for (float i=0.0;i<NPOINTS;i+=1.0)\n    {\n        //vec2 pos = quasi(i+1.0);          // R2 func\n        vec2 pos = fract(quasi2*(i+1.0));   // R2 inline\n        pos = (pos-0.5)*(zoomval);\n        float d = length(pos-uv)-(DOTSIZE*zoomval);\n        col.r += step(d,0.0)*0.4;\n    }\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}