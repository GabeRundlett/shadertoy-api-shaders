{
    "Shader": {
        "info": {
            "date": "1591715432",
            "description": "Chapter 3 - The Book of Shaders - Uniforms\n\nThe input \"uniforms\":\n\n- iResolution\n- iMouse\n- iTime\n\nCalled uniforms as their values are equal across pixel threads.\n\nTrig functions to ease R & G by position and time. Mouse-click X changes rate of B easing.",
            "flags": 0,
            "hasliked": 0,
            "id": "3tscz7",
            "likes": 2,
            "name": "Uniforms - TBOS 3.0",
            "published": 3,
            "tags": [
                "simple",
                "gradient",
                "tbos"
            ],
            "usePreview": 0,
            "username": "stungeye",
            "viewed": 511
        },
        "renderpass": [
            {
                "code": "// Working Through The Book of Shaders\n// Chapter 03 - Uniforms - https://thebookofshaders.com/03/\n// 3.0 Uniforms\n\n\n// Sinusoidal function shifted and scaled to range betwen 0 and 1.\n// See: https://www.desmos.com/calculator/w9jrdpvsmk\nfloat sinEase(float x) {\n\treturn 0.5 * sin(x) + 0.5;\n}\n\n// FUNCTION: mainImage\n//\n// Function is automatically executed. Here it assigns a color to every pixel.\nvoid mainImage(\n    \t\t\tout vec4 fragColor, // Output (r, g, b, a) pixel color \n\t\t\t\tin vec2 fragCoord   // Input (x, y) image coordinate\n\t\t\t  ) {\n    // Set scale according to how far mouse is from left side. 0.0 (full left) to 1.0 (full right)\n    // Mouse coordinate is set when left-mouse-button is clicked.\n    float blueRateScale = iMouse.x / iResolution.x; \n       \n    // Ease back and forth 1 and 100 using time-based sine.\n    float stretchFactor = 99.0 * sinEase(iTime) + 1.0;\n    \n    // Setting red and green pixel value.\n    // Ease back and forth between 0 and 1 based on pixel position and time-based stretch factor.\n    float red   = sinEase(fragCoord.x / stretchFactor);\n    float green = sinEase(fragCoord.y / stretchFactor);\n    \n    // Blue will ease in and out based on time and the x position of the mouse.\n    // Ease speed increases from left to right.\n    float blue = abs(tan(iTime * blueRateScale));\n    \n    // Set the pixel value based on the RGB calculated above.\n    fragColor = vec4(red,green,blue,1);\n}\n\n\n// Stung Eye 2020 - Unlicense - https://unlicense.org\n// This is free and unencumbered software released into the public domain.",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}