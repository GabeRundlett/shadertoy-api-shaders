{
    "Shader": {
        "info": {
            "date": "1710278965",
            "description": "An approximation for absolute luminance of a blackbody.\nPlotted is blackbody luminous efficacy, in lm/W, on [256K; 65536K] (output range is [0;100]).",
            "flags": 0,
            "hasliked": 0,
            "id": "l3jSRh",
            "likes": 3,
            "name": "Blackbody abs. luminance approx.",
            "published": 3,
            "tags": [
                "luminance",
                "blackbody"
            ],
            "usePreview": 0,
            "username": "FordPerfect",
            "viewed": 115
        },
        "renderpass": [
            {
                "code": "// Public Domain under http://unlicense.org, see link for details.\n\n// An approximation for absolute luminance of a blackbody.\n\n// Wikipedia provides an approximation for blackbody chromaticity\n// https://en.wikipedia.org/wiki/Planckian_locus (and there are\n// several shaders that use it, e.g. https://www.shadertoy.com/view/lslBWl,\n// others like https://www.shadertoy.com/view/4Xf3DN roll their own),\n// but not for absolute luminance. There also doesn't appear to be any\n// on Shadertoy yet. This shader aims to provide one.\n// See also:\n//     Lampret, V., Peternelj, J., & Krainer, A. (2002). Luminous flux and luminous efficacy of black-body radiation: an analytical approximation. Solar Energy, 73(5), 319â€“326. doi:10.1016/s0038-092x(02)00119-6 \n\n//==============================================================================\n\nconst float pi=3.14159265358979;\n\n// Fundamental Physical Constants, see https://physics.nist.gov/cuu/Constants/Table/allascii.txt\n\nconst float c1=3.741771852e-16;  // First radiation constant 2*pi*h*c^2, W/m^2.\nconst float c1L=1.191042972e-16; // First radiation constant for spectral radiance 2*h*c^2, W/m^2*sr^-1.\nconst float c2=1.438776877e-2;   // Second radiation constant, m*K.\n\n// Input: temperature in K, and wavelength in m.\n// Output: spectral radiance, in W*sr^-1*m^-3.\nfloat blackbody_spectral_radiance(float T,float lambda)\n{\n    return c1L*pow(lambda,-5.0)/(exp(c2/(lambda*T))-1.0);\n}\n\n// Integral of the above on [0;inf].\n// Input: temperature in K.\n// Output: radiance, in W*sr^-1*m^-2.\nfloat blackbody_total_radiance(float T)\n{\n    return (c1L/15.0)*pow(pi*T/c2,4.0);\n}\n\n//==============================================================================\n\n// Blackbody total luminance, in cd/m^2.\n// Rel. error is <0.04 for T<256K (until underflow ~170K).\n// Rel. error is <5e-4 for T>256K (until overflow ~1e30K).\nfloat blackbody_total_luminance(float T)\n{\n    const float C=683.002; // Maximum luminous efficacy.\n    float x=log(T),y=1024.0/T;\n    if(T<256.0) return C*exp(-16557.0506+x*(+15585.1218+x*(-6918.70463+x*(+1858.90578+x*(-322.341988+x*(+35.6048787+x*(-2.29212750+x*(+0.0656990249))))))));\n    if(T<2048.0) return C*exp(+19.3258549+y*(-25.8361197+y*(+1.63839141+y*(+0.0757707576+y*(-0.315643557+y*(+0.153068314+y*(-0.0302079735+y*(+0.00215002985))))))));\n    if(T<16384.0) return C*exp(+20.5874065+y*(-58.4338879+y*(+392.571579+y*(-2745.02112+y*(+12055.5459+y*(-33443.8921+y*(+56821.4133+y*(-53890.0151+y*(+21825.7718)))))))));\n    return C*T*(+9514.94619+y*(-122873.383+y*(+532203.587+y*(-456.949553+y*(-6073587.31+y*(-1252576.52+y*(+130355899.0+y*(-335341032.0))))))));\n}\n\n// Blackbody luminous efficacy, in lm/W.\nfloat K(float T)\n{\n    return blackbody_total_luminance(T)/blackbody_total_radiance(T);\n}\n\n//==============================================================================\n\nvec3 plot(vec3 old,vec3 new,float x)\n{\n    float a=smoothstep(2.0*fwidth(x),0.0,abs(x));\n    return mix(old,a*new,a);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    float x=fragCoord.x/iResolution.x;\n    float y=fragCoord.y/iResolution.y;\n    x=exp(mix(log(256.0),log(65536.0),x));\n    y=100.0*y;\n    vec3 col=vec3(0.25);\n    col+=fract(log(x)/log(10.0))/16.0;\n    col+=fract(pow(10.0,fract(log(x)/log(10.0))))/32.0;\n    col+=fract(y/10.0)/16.0;\n    col=plot(col,vec3(0.2,0.8,0.2),y-K(x));\n    fragColor=vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}