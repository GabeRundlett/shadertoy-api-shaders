{
    "Shader": {
        "info": {
            "date": "1647236106",
            "description": "Cycles from 1 to 8. The 6, 7, and 8 cycles were a pain to calculate since WolframAlpha wouldn't find them for me.",
            "flags": 0,
            "hasliked": 0,
            "id": "sdBfD3",
            "likes": 17,
            "name": "Mandelbrot Set Cycles",
            "published": 3,
            "tags": [
                "2d",
                "fractal",
                "math",
                "mandelbrot",
                "cycles",
                "investigation"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 256
        },
        "renderpass": [
            {
                "code": "// Note that subcycles have been factored out.\n// For example, stepping twice through a three step cycle\n// could be counted as a six step cycle but can be ignored\n// since you might as well just be looking for three step cycles.\n\n// Also note that these are numerical approximations, not exact values\n// except for the fixed point and 2-cycle. The 3-cycle could actually\n// be solved analytically, but why do that when I just need numbers?\n\n// Btw, this is all ignoring more complicated behavior, such as taking 100 steps and\n// then landing in a 3-cycle, and more!\n\n// A basic Python library I made for doing stuff with polynomials:\n// https://replit.com/@hathnoname/Computer-Algebra-III-Polynomials#main.py\n\n// https://www.shadertoy.com/view/XsXGD4\nvec2 magnify(in vec2 actualUV, in vec2 pointUV, in float radius, in float strength) {\n    vec2 vecToPoint = pointUV - actualUV;\n    float distToPoint = length(vecToPoint);\n\n    float mag = (1.0 - distToPoint / radius) * strength;\n    mag *= step(distToPoint, radius);\n\n    return actualUV + vecToPoint * mag;\n}\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvec3 mandelbrot(in vec2 c) {\n    vec2 z = vec2(0.0);\n    for (int i=0; i < 25; i++) {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        if (length(z) > 2.0) return vec3(0.3, 0.5, 0.3); // Escaped\n    }\n\n    return vec3(0.0); // Stayed inside\n}\n\n#define drawSDF(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Boilerplate\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 3.0;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 3.0;\n    float unit = 6.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    float distToMouse;\n    if (iMouse.z > 0.0) {\n        distToMouse = length(uv - mouse);\n        uv = magnify(uv, mouse, 1.0, 0.5);\n    }\n\n    // Almost center\n    uv.x -= 0.5;\n\n    // Draw 4x4 sampled mandelbrot\n    float offs = 0.75 / iResolution.y;\n    for (float i=0.0; i < 1.0; i += 0.25) {\n        for (float j=0.0; j < 1.0; j += 0.25) {\n            color += mandelbrot(uv + vec2(i, j) * offs);\n        }\n    }\n\n    color /= 16.0;\n\n    // Fake magnifying lense\n    if (iMouse.z > 0.0 && distToMouse < 1.0) {\n        color *= mix(1.0, 0.7, distToMouse);\n    }\n\n    // Animate cycles\n    float time = mod(0.5 * iTime, 120.0);\n    int idx = int(floor(time));\n    float transition = fract(time);\n    for (int i=0; i < 3; i++) transition = smoothstep(0.0, 1.0, transition);\n    vec2 c = mix(cycle8[hash120(idx)], cycle8[hash120((idx + 1) % 120)], transition);\n\n    // Draw path of Z through the complex plane\n    vec2 z = vec2(0.0);\n    for (int i=0; i < 8; i++) {\n        vec2 nz = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        drawSDF(sdLine(uv, z, nz), vec3(1.0, 0.0, 0.0));\n        z = nz;\n    }\n\n    // Draw (some of) the C values that cause Z to cycle\n    drawSDF(length(uv - fixedp) - 0.01, vec3(0.0, 1.0, 0.0));\n    drawSDF(length(uv - cycle2) - 0.01, vec3(1.0, 0.8, 0.0));\n    for (int i=0; i < 3; i++) drawSDF(length(uv - cycle3[i]) - 0.01, vec3(1.0, 0.0, 1.0));\n    for (int i=0; i < 6; i++) drawSDF(length(uv - cycle4[i]) - 0.01, vec3(0.2, 0.2, 1.0));\n    for (int i=0; i < 15; i++) drawSDF(length(uv - cycle5[i]) - 0.01, vec3(0.0, 1.0, 1.0));\n    for (int i=0; i < 27; i++) drawSDF(length(uv - cycle6[i]) - 0.01, vec3(1.0, 0.4, 0.0));\n    for (int i=0; i < 63; i++) drawSDF(length(uv - cycle7[i]) - 0.01, vec3(0.7, 0.0, 1.0));\n    for (int i=0; i < 120; i++) drawSDF(length(uv - cycle8[i]) - 0.01, vec3(0.35, 0.0, 0.5));\n\n    // Vignette\n    color *= 1.0 - pow(length(fragCoord / iResolution.xy - 0.5), 2.0);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Shuffling hashes\nint hash3(in int x) { return int[3](2, 1, 3)[x]; }\nint hash6(in int x) { return int[6](1, 0, 4, 3, 5, 2)[x]; }\nint hash15(in int x) { return int[15](2, 5, 7, 4, 12, 14, 3, 9, 8, 11, 0, 13, 10, 6, 1)[x]; }\nint hash27(in int x) { return int[27](21, 20, 11, 9, 5, 25, 0, 12, 3, 16, 7, 17, 24, 14, 18, 4, 15, 13, 26, 10, 2, 1, 6, 23, 8, 19, 22)[x]; }\nint hash63(in int x) { return int[63](21, 32, 20, 3, 24, 47, 48, 38, 42, 43, 54, 46, 17, 40, 23, 50, 5, 22, 28, 4, 34, 29, 36, 7, 15, 56, 52, 45, 31, 62, 33, 18, 11, 12, 27, 59, 19, 13, 39, 25, 55, 8, 58, 49, 0, 60, 6, 61, 44, 41, 35, 16, 14, 30, 2, 37, 10, 9, 26, 1, 53, 57, 51)[x]; }\nint hash120(in int x) { return int[120](49, 14, 117, 47, 21, 106, 64, 53, 20, 66, 5, 26, 82, 96, 50, 73, 24, 6, 42, 18, 17, 55, 108, 23, 56, 111, 22, 70, 10, 115, 46, 33, 36, 77, 39, 44, 80, 27, 3, 54, 76, 81, 113, 58, 104, 100, 65, 62, 45, 85, 91, 4, 69, 102, 7, 119, 19, 93, 95, 116, 101, 92, 114, 84, 61, 32, 107, 60, 109, 40, 43, 89, 68, 72, 25, 28, 51, 0, 12, 30, 34, 52, 1, 8, 38, 112, 29, 41, 88, 71, 37, 63, 78, 83, 9, 16, 110, 13, 48, 97, 79, 15, 57, 90, 74, 2, 94, 118, 35, 99, 59, 75, 105, 86, 31, 103, 98, 87, 11, 67)[x]; }\n\n// f(0) = 0\n// c = 0\nconst vec2 fixedp = vec2(0.0);\n\n// f(f(0)) = 0\n// c^2 + c = 0\nconst vec2 cycle2 = vec2(-1.0, 0.0);\n\n// f(f(f(0))) = 0\n// c^4 + 2c^3 + c^2 + c = 0\n// Note that this could be solved exactly\nconst vec2[3] cycle3 = vec2[3](\n    vec2(-1.754877666246690,  0.000000000000000),\n    vec2(-0.122561166876654, -0.744861766619744),\n    vec2(-0.122561166876654,  0.744861766619744)\n);\n\n// f(f(f(f(0)))) = 0\n// c^8 + 4c^7 + 6c^6 + 6c^5 + 5c^4 + 2c^3 + c^2 + c = 0\nconst vec2[6] cycle4 = vec2[6](\n    vec2(-1.940799806529485,  0.000000000000000),\n    vec2(-1.310702641336833,  0.000000000000000),\n    vec2(-0.156520166833755, -1.032247108922832),\n    vec2(-0.156520166833755,  1.032247108922832),\n    vec2( 0.282271390766914, -0.530060617578525),\n    vec2( 0.282271390766914,  0.530060617578525)\n);\n\n// f(f(f(f(f(0))))) = 0\n// c^16 + 8c^15 + 28c^14 + 60c^13 + 94c^12 + 116c^11 + 114c^10 + 94c^9 + 69c^8 + 44c^7 + 26c^6 + 14c^5 + 5c^4 + 2c^3 + c^2 + c = 0\nconst vec2[15] cycle5 = vec2[15](\n    vec2(-1.985424253054205,  0.000000000000000),\n    vec2(-1.860782522204855,  0.000000000000000),\n    vec2(-1.625413725123304,  0.000000000000000),\n    vec2(-1.256367930068181, -0.380320963472723),\n    vec2(-1.256367930068181,  0.380320963472723),\n    vec2(-0.504340175446244, -0.562765761452982),\n    vec2(-0.504340175446244,  0.562765761452982),\n    vec2(-0.198042099364254, -1.100269537292699),\n    vec2(-0.198042099364254,  1.100269537292699),\n    vec2(-0.044212357704071, -0.986580976280893),\n    vec2(-0.044212357704071,  0.986580976280893),\n    vec2( 0.359259224758007, -0.642513737138542),\n    vec2( 0.359259224758007,  0.642513737138542),\n    vec2( 0.379513588015924, -0.334932305597498),\n    vec2( 0.379513588015924,  0.334932305597498)\n);\n\n// f(f(f(f(f(f(0)))))) = 0\n// c^32 + 16c^31 + 120c^30 + 568c^29 + 1932c^28 + 5096c^27 + 10948c^26 + 19788c^25 + 30782c^24 + 41944c^23 + 50788c^22 + 55308c^21 + 54746c^20 + 49700c^19 + 41658c^18 + 32398c^17 + 23461c^16 + 15864c^15 + 10068c^14 + 6036c^13 + 3434c^12 + 1860c^11 + 958c^10 + 470c^9 + 221c^8 + 100c^7 + 42c^6 + 14c^5 + 5c^4 + 2c^3 + c^2 + c = 0\nconst vec2[27] cycle6 = vec2[27](\n    vec2(-1.996376137711194,  0.000000000000000),\n    vec2(-1.966773216392929,  0.000000000000000),\n    vec2(-1.907280091065302,  0.000000000000000),\n    vec2(-1.772892903381624,  0.000000000000000),\n    vec2(-1.476014642728430,  0.000000000000000),\n    vec2(-1.284084925525686, -0.427268896040686),\n    vec2(-1.284084925525686,  0.427268896040686),\n    vec2(-1.138000666650965, -0.240332401262098),\n    vec2(-1.138000666650965,  0.240332401262098),\n    vec2(-0.596891644645127, -0.662980744577030),\n    vec2(-0.596891644645127,  0.662980744577030),\n    vec2(-0.217526747030511, -1.114454265873293),\n    vec2(-0.217526747030511,  1.114454265873293),\n    vec2(-0.163598261552023, -1.097780642888272),\n    vec2(-0.163598261552023,  1.097780642888272),\n    vec2(-0.113418655949437, -0.860569472501573),\n    vec2(-0.113418655949437,  0.860569472501573),\n    vec2(-0.015570386020902, -1.020497366498289),\n    vec2(-0.015570386020902,  1.020497366498289),\n    vec2( 0.359892739012579, -0.684762020211813),\n    vec2( 0.359892739012579,  0.684762020211813),\n    vec2( 0.389006840569771, -0.215850650870819),\n    vec2( 0.389006840569771,  0.215850650870819),\n    vec2( 0.396534570032415, -0.604181810488989),\n    vec2( 0.396534570032415,  0.604181810488989),\n    vec2( 0.443325633399624, -0.372962416662847),\n    vec2( 0.443325633399624,  0.372962416662847)\n);\n\n// f(f(f(f(f(f(f(0))))))) = 0\n// c^64 + 32c^63 + 496c^62 + 4976c^61 + 36440c^60 + 208336c^59 + 971272c^58 + 3807704c^57 + 12843980c^56 + 37945904c^55 + 99582920c^54 + 234813592c^53 + 502196500c^52 + 981900168c^51 + 1766948340c^50 + 2943492972c^49 + 4562339774c^48 + 6609143792c^47 + 8984070856c^46 + 11500901864c^45 + 13910043524c^44 + 15941684776c^43 + 17357937708c^42 + 17999433372c^41 + 17813777994c^40 + 16859410792c^39 + 15286065700c^38 + 13299362332c^37 + 11120136162c^36 + 8948546308c^35 + 6939692682c^34 + 5193067630c^33 + 3754272037c^32 + 2625062128c^31 + 1777171560c^30 + 1166067016c^29 + 742179284c^28 + 458591432c^27 + 275276716c^26 + 160617860c^25 + 91143114c^24 + 50323496c^23 + 27049196c^22 + 14162220c^21 + 7228014c^20 + 3598964c^19 + 1749654c^18 + 831014c^17 + 385741c^16 + 175048c^15 + 77684c^14 + 33708c^13 + 14290c^12 + 5916c^11 + 2398c^10 + 950c^9 + 365c^8 + 132c^7 + 42c^6 + 14c^5 + 5c^4 + 2c^3 + c^2 + c = 0\nconst vec2[63] cycle7 = vec2[63](\n    vec2(-1.999095682327019,  0.000000000000000),\n    vec2(-1.991814172549122,  0.000000000000000),\n    vec2(-1.977179587006257,  0.000000000000000),\n    vec2(-1.953705894284396,  0.000000000000000),\n    vec2(-1.927147709363950,  0.000000000000000),\n    vec2(-1.884803571586682,  0.000000000000000),\n    vec2(-1.832315202751229,  0.000000000000000),\n    vec2(-1.674066091474788,  0.000000000000000),\n    vec2(-1.574889139752301,  0.000000000000000),\n    vec2(-1.769261670276831, -0.056919500395600),\n    vec2(-1.769261670276831,  0.056919500395600),\n    vec2(-1.408446485740073, -0.136171997304660),\n    vec2(-1.408446485740073,  0.136171997304660),\n    vec2(-1.292558061033522, -0.438198816086632),\n    vec2(-1.292558061033522,  0.438198816086632),\n    vec2(-1.262287281438472, -0.408104324112690),\n    vec2(-1.262287281438472,  0.408104324112690),\n    vec2(-1.252735884012038, -0.342470647889751),\n    vec2(-1.252735884012038,  0.342470647889751),\n    vec2(-1.028193852454818, -0.361376517118562),\n    vec2(-1.028193852454818,  0.361376517118562),\n    vec2(-0.623532485956253, -0.681064414225240),\n    vec2(-0.623532485956253,  0.681064414225240),\n    vec2(-0.622436295041294, -0.424878436475629),\n    vec2(-0.622436295041294,  0.424878436475629),\n    vec2(-0.530827804859943, -0.668288725559206),\n    vec2(-0.530827804859943,  0.668288725559206),\n    vec2(-0.272102461488939, -0.842364690294128),\n    vec2(-0.272102461488939,  0.842364690294128),\n    vec2(-0.224915951286740, -1.116260157454992),\n    vec2(-0.224915951286740,  1.116260157454992),\n    vec2(-0.207283835455666, -1.117480772494963),\n    vec2(-0.207283835455666,  1.117480772494963),\n    vec2(-0.174578221135717, -1.071427671454031),\n    vec2(-0.174578221135717,  1.071427671454031),\n    vec2(-0.157516053475965, -1.109006514113607),\n    vec2(-0.157516053475965,  1.109006514113607),\n    vec2(-0.127499973546363, -0.987460909489457),\n    vec2(-0.127499973546363,  0.987460909489457),\n    vec2(-0.014233481920354, -1.032914775213644),\n    vec2(-0.014233481920354,  1.032914775213644),\n    vec2(-0.006983568496261, -1.003603862288289),\n    vec2(-0.006983568496261,  1.003603862288289),\n    vec2( 0.014895466603688, -0.848148761908416),\n    vec2( 0.014895466603688,  0.848148761908416),\n    vec2( 0.121192786105906, -0.610611692210754),\n    vec2( 0.121192786105906,  0.610611692210754),\n    vec2( 0.352482539722363, -0.698337239583330),\n    vec2( 0.352482539722363,  0.698337239583330),\n    vec2( 0.376008681846768, -0.144749371321633),\n    vec2( 0.376008681846768,  0.144749371321633),\n    vec2( 0.376893240379311, -0.678568693190448),\n    vec2( 0.376893240379311,  0.678568693190448),\n    vec2( 0.386539176596158, -0.569324711303103),\n    vec2( 0.386539176596158,  0.569324711303103),\n    vec2( 0.412916024722701, -0.614806760143386),\n    vec2( 0.412916024722701,  0.614806760143386),\n    vec2( 0.432376192641995, -0.226759904435349),\n    vec2( 0.432376192641995,  0.226759904435349),\n    vec2( 0.452774498724915, -0.396170128033165),\n    vec2( 0.452774498724915,  0.396170128033165),\n    vec2( 0.456823285823317, -0.347758700883482),\n    vec2( 0.456823285823317,  0.347758700883482)\n);\n\n// f(f(f(f(f(f(f(f(0)))))))) = 0\n// c^128 + 64c^127 + 2016c^126 + 41696c^125 + 637360c^124 + 7685024c^123 + 76185104c^122 + 639097008c^121 + 4634116312c^120 + 29524775520c^119 + 167453394320c^118 + 854515874096c^117 + 3958458557608c^116 + 16771945556496c^115 + 65418624260840c^114 + 236221241425176c^113 + 793548088258508c^112 + 2490875091238112c^111 + 7333879739219600c^110 + 20324543852025936c^109 + 53181959591958024c^108 + 131760770157606224c^107 + 309881648709683160c^106 + 693434955498545848c^105 + 1479594496462756340c^104 + 3016191418506637264c^103 + 5884917700519129288c^102 + 11008161481780603512c^101 + 19772322481956974532c^100 + 34150590308701283528c^99 + 56796799826096529620c^98 + 91071943593142473900c^97 + 140960183546144741182c^96 + 210835921361505594848c^95 + 305060580205223726864c^94 + 427417353874088245520c^93 + 580430565842543266504c^92 + 764655844340519788496c^91 + 978057923319151340728c^90 + 1215604411161527170376c^89 + 1469189341596552030212c^88 + 1727958521630464742736c^87 + 1979045408073272278264c^86 + 2208653487832260558008c^85 + 2403354418943890067404c^84 + 2551425591643957182856c^83 + 2644036970936308845148c^82 + 2676118542978972739644c^81 + 2646791812246207696810c^80 + 2559320275988283588176c^79 + 2420609646335251593480c^78 + 2240353897304462193848c^77 + 2029966595320794439668c^76 + 1801452751402955781592c^75 + 1566365198635995978988c^74 + 1334957092752100409132c^73 + 1115597581733327913554c^72 + 914470757914434625800c^71 + 735537050036491961156c^70 + 580706779030058464252c^69 + 450159936955994386738c^68 + 342743629811082484420c^67 + 256386228250001079082c^66 + 188481251186354006062c^65 + 136210493669590627493c^64 + 96791719611591962592c^63 + 67649247253332557392c^62 + 46514944583399578896c^61 + 31472438318100876584c^60 + 20959276151880728336c^59 + 13741246529612440920c^58 + 8870996681171366696c^57 + 5640327912922026260c^56 + 3532711259225506384c^55 + 2180053774442766712c^54 + 1325752376790240280c^53 + 794643418760272876c^52 + 469540646039042536c^51 + 273551721580800380c^50 + 157160523515654628c^49 + 89054473147697354c^48 + 49778848242964944c^47 + 27452211062573400c^46 + 14938862548001560c^45 + 8022825031835276c^44 + 4252710138415640c^43 + 2225301467579844c^42 + 1149605839249820c^41 + 586400982013486c^40 + 295372837865192c^39 + 146932182777116c^38 + 72188854953372c^37 + 35031835376454c^36 + 16792863663700c^35 + 7952125694214c^34 + 3720187393990c^33 + 1719477330477c^32 + 785248461712c^31 + 354347339496c^30 + 158015533208c^29 + 69640352964c^28 + 30336029592c^27 + 13062923500c^26 + 5560968284c^25 + 2340595778c^24 + 974083128c^23 + 400844588c^22 + 163107044c^21 + 65626918c^20 + 26108844c^19 + 10269590c^18 + 3993030c^17 + 1534301c^16 + 582408c^15 + 218324c^14 + 80812c^13 + 29538c^12 + 10652c^11 + 3774c^10 + 1302c^9 + 429c^8 + 132c^7 + 42c^6 + 14c^5 + 5c^4 + 2c^3 + c^2 + c = 0\nconst vec2[120] cycle8 = vec2[120](\n    vec2(-1.999774048693727,  0.000000000000000),\n    vec2(-1.997962915597714,  0.000000000000000),\n    vec2(-1.994332966715535,  0.000000000000000),\n    vec2(-1.988793274309471,  0.000000000000000),\n    vec2(-1.981655786276044,  0.000000000000000),\n    vec2(-1.972199838366876,  0.000000000000000),\n    vec2(-1.960758987197429,  0.000000000000000),\n    vec2(-1.941782090318198,  0.000000000000000),\n    vec2(-1.917098277113422,  0.000000000000000),\n    vec2(-1.896917994678833,  0.000000000000000),\n    vec2(-1.870003880828765,  0.000000000000000),\n    vec2(-1.851730049410641,  0.000000000000000),\n    vec2(-1.810001385728012,  0.000000000000000),\n    vec2(-1.711079470013152,  0.000000000000000),\n    vec2(-1.521817231671251,  0.000000000000000),\n    vec2(-1.381547484432061,  0.000000000000000),\n    vec2(-1.770713201296948, -0.063904331714888),\n    vec2(-1.770713201296948,  0.063904331714888),\n    vec2(-1.766495147993645, -0.041726706146453),\n    vec2(-1.766495147993645,  0.041726706146453),\n    vec2(-1.627929065204338, -0.022145736517251),\n    vec2(-1.627929065204338,  0.022145736517251),\n    vec2(-1.423454458533147, -0.156442843876153),\n    vec2(-1.423454458533147,  0.156442843876153),\n    vec2(-1.295189163585398, -0.440937435674443),\n    vec2(-1.295189163585398,  0.440937435674443),\n    vec2(-1.286481200313292, -0.433943872327566),\n    vec2(-1.286481200313292,  0.433943872327566),\n    vec2(-1.285677330213732, -0.352707123723361),\n    vec2(-1.285677330213732,  0.352707123723361),\n    vec2(-1.281533105319488, -0.418316059833958),\n    vec2(-1.281533105319488,  0.418316059833958),\n    vec2(-1.242578028187509, -0.413225009775680),\n    vec2(-1.242578028187509,  0.413225009775680),\n    vec2(-1.185611193044230, -0.303040886564509),\n    vec2(-1.185611193044230,  0.303040886564509),\n    vec2(-1.028969519024400, -0.386312083216542),\n    vec2(-1.028969519024400,  0.386312083216542),\n    vec2(-0.999442387206567, -0.265387532468407),\n    vec2(-0.999442387206567,  0.265387532468407),\n    vec2(-0.690942897652005, -0.465349538581011),\n    vec2(-0.690942897652005,  0.465349538581011),\n    vec2(-0.632384121969239, -0.684701757623218),\n    vec2(-0.632384121969239,  0.684701757623218),\n    vec2(-0.606185558894826, -0.684031616476013),\n    vec2(-0.606185558894826,  0.684031616476013),\n    vec2(-0.592465902746754, -0.621348689261353),\n    vec2(-0.592465902746754,  0.621348689261353),\n    vec2(-0.525971082530693, -0.696943648552084),\n    vec2(-0.525971082530693,  0.696943648552084),\n    vec2(-0.359102390112449, -0.617353453398827),\n    vec2(-0.359102390112449,  0.617353453398827),\n    vec2(-0.296350364863718, -0.845154528884588),\n    vec2(-0.296350364863718,  0.845154528884588),\n    vec2(-0.240416194737743, -0.870487421314561),\n    vec2(-0.240416194737743,  0.870487421314561),\n    vec2(-0.227331323047004, -1.115883598594023),\n    vec2(-0.227331323047004,  1.115883598594023),\n    vec2(-0.222235654179709, -1.118375889201622),\n    vec2(-0.222235654179709,  1.118375889201622),\n    vec2(-0.207991431776635, -1.109132944418652),\n    vec2(-0.207991431776635,  1.109132944418652),\n    vec2(-0.206598609869805, -1.121383303100915),\n    vec2(-0.206598609869805,  1.121383303100915),\n    vec2(-0.183173449982320, -1.091560429186861),\n    vec2(-0.183173449982320,  1.091560429186861),\n    vec2(-0.162867707067255, -1.037313240810425),\n    vec2(-0.162867707067255,  1.037313240810425),\n    vec2(-0.157781855891046, -1.112590613593092),\n    vec2(-0.157781855891046,  1.112590613593092),\n    vec2(-0.154454617643616, -1.104395461077708),\n    vec2(-0.154454617643616,  1.104395461077708),\n    vec2(-0.074470451380032, -0.970542136899210),\n    vec2(-0.074470451380032,  0.970542136899210),\n    vec2(-0.023242291961163, -0.998992644684930),\n    vec2(-0.023242291961163,  0.998992644684930),\n    vec2(-0.015608533223847, -1.036645665847862),\n    vec2(-0.015608533223847,  1.036645665847862),\n    vec2(-0.009862436986086, -1.029630118361600),\n    vec2(-0.009862436986086,  1.029630118361600),\n    vec2( 0.000464217447541, -1.004501022924267),\n    vec2( 0.000464217447541,  1.004501022924267),\n    vec2( 0.022860533259552, -0.813669918234632),\n    vec2( 0.022860533259552,  0.813669918234632),\n    vec2( 0.025970522960208, -0.864697720038508),\n    vec2( 0.025970522960208,  0.864697720038508),\n    vec2( 0.135782238839752, -0.670855910094680),\n    vec2( 0.135782238839752,  0.670855910094680),\n    vec2( 0.324819701465460, -0.563815622140334),\n    vec2( 0.324819701465460,  0.563815622140334),\n    vec2( 0.347358607651260, -0.701559767060788),\n    vec2( 0.347358607651260,  0.701559767060788),\n    vec2( 0.359031062836614, -0.100934876864298),\n    vec2( 0.359031062836614,  0.100934876864298),\n    vec2( 0.359325657833447, -0.699215766441657),\n    vec2( 0.359325657833447,  0.699215766441657),\n    vec2( 0.377149286568174, -0.666878777916213),\n    vec2( 0.377149286568174,  0.666878777916213),\n    vec2( 0.380722369849916, -0.683831461840431),\n    vec2( 0.380722369849916,  0.683831461840431),\n    vec2( 0.403033458686289, -0.565397856797952),\n    vec2( 0.403033458686289,  0.565397856797952),\n    vec2( 0.404899665175122, -0.145820363766589),\n    vec2( 0.404899665175122,  0.145820363766589),\n    vec2( 0.414978784748552, -0.621007807403794),\n    vec2( 0.414978784748552,  0.621007807403794),\n    vec2( 0.416146913225193, -0.607394909415916),\n    vec2( 0.416146913225193,  0.607394909415916),\n    vec2( 0.437283929497173, -0.210381200598479),\n    vec2( 0.437283929497173,  0.210381200598479),\n    vec2( 0.442074530015487, -0.239426040286596),\n    vec2( 0.442074530015487,  0.239426040286596),\n    vec2( 0.450528859613642, -0.331931387726143),\n    vec2( 0.450528859613642,  0.331931387726143),\n    vec2( 0.451145803591671, -0.406520992288107),\n    vec2( 0.451145803591671,  0.406520992288107),\n    vec2( 0.461703168202125, -0.390110237949803),\n    vec2( 0.461703168202125,  0.390110237949803),\n    vec2( 0.466959205647030, -0.351546724574027),\n    vec2( 0.466959205647030,  0.351546724574027)\n);",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}