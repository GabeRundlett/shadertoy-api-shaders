{
    "Shader": {
        "info": {
            "date": "1551308338",
            "description": "I stream shader creation every Wednesday at 9pm UK time, over at [url]https://twitch.tv/lunasorcery[/url]\nCome and watch a show!\n\nOr watch the VOD for this shader here: [url]https://www.twitch.tv/videos/387734904[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "tdlXW4",
            "likes": 18,
            "name": "[twitch] Caged Crystal",
            "published": 3,
            "tags": [
                "sdf",
                "raymarcher",
                "livecoding",
                "crystal",
                "twitch"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 1070
        },
        "renderpass": [
            {
                "code": "/*\n\tThis shader was created live on stream!\n\tYou can watch the VOD here: https://www.twitch.tv/videos/387734904\n\n\tI use the Bonzomatic tool by Gargaj/Conspiracy:\n\thttps://github.com/Gargaj/Bonzomatic\n\n\tWednesdays around 9pm UK time I stream at https://twitch.tv/lunasorcery\n\tCome and watch a show!\n\n\t~yx\n*/\n\n#define pi acos(-1.)\n\nint mat;\nvec3 shift;\n\n// rough shadertoy approximation of the bonzomatic noise texture\nvec4 texNoise(vec2 uv)\n{\n    float f = 0.;\n    f += texture(iChannel0, uv*.125).r*.5;\n    f += texture(iChannel0, uv*.25).r*.25;\n    f += texture(iChannel0, uv*.5).r*.125;\n    f += texture(iChannel0, uv*1.).r*.125;\n    f=pow(f,1.2);\n    return vec4(f*.45+.05);\n}\n\nvec2 rotate(vec2 a,float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return vec2(\n        a.x*c-a.y*s,\n        a.x*s+a.y*c\n    );\n}\n\nfloat sdBox(vec3 p, vec3 r)\n{\n    p=abs(p)-r;\n    return max(max(p.x,p.y),p.z);\n}\n\nfloat sdOctahedron(vec3 p, float r)\n{\n    p=abs(p);\n    return (p.x+p.y+p.z-r)/sqrt(3.);\n}\n\nfloat sdInk(vec3 p)\n{\n    float spacing = .1;\n    float thickness = .01;\n    p.y += sin(p.y*3.-iTime*2.)*.06;\n    p.xz = rotate(p.xz, (floor(p.y/spacing-.5)*spacing+spacing/2. + iTime*.0) * .9);\n    float w = .2 + pow(p.y,2.)*.5;\n    shift = p;\n    return max(\n        sdBox(p,vec3(w,.9,w)),\n        abs(mod(p.y-spacing/2.,spacing)-spacing/2.)-thickness\n    )*.8;\n}\n\nfloat sdGold(vec3 p)\n{\n    float q = sin(iTime)*.2;\n    q = sin(iTime-2.+cos(iTime*2.))*.2;\n    float box = max(sdBox(p,vec3(1.01)),-sdBox(p,vec3(.99)));\n    float oct = max(sdOctahedron(p,2.01+q),-sdOctahedron(p,1.99+q));\n    return max(box, oct);\n}\n\nfloat sdGround(vec3 p)\n{\n    return p.y+1.2;\n}\n\nfloat tick(float t)\n{\n    float f=floor(t);\n    t=fract(t);\n    t=smoothstep(0.,1.,t);\n    t=smoothstep(0.,1.,t);\n    return f+t;\n}\n\nvec2 tickspin(vec2 a)\n{\n    return rotate(a,tick(iTime*.125)*pi*.5);\n}\n\nfloat scene(vec3 p)\n{\n    float ground = sdGround(p);\n\n    p.xz = tickspin(p.xz);\n\n    float ink = sdInk(p);\n    float gold = sdGold(p);\n    float best = min(min(ink,gold),ground);\n    if(ink==best)\n        mat=0;\n    else if(gold==best)\n        mat=1;\n\telse\n\t\tmat=2;\n\treturn best;\n}\n\nfloat noisefloor(vec2 uv,float t)\n{\n    float n = texNoise(uv*.1).r*4.-1.;\n    return texNoise(vec2(n+iTime*t)).r;\n}\n\nvec3 trace(vec3 cam, vec3 dir)\n{\n    float t =0.;\n    float k =0.;\n    vec3 accum = vec3(1);\n    vec3 emit = vec3(0);\n    for(int i=0;i<100;++i){\n        k=scene(cam+dir*t);\n        t+=k;\n        if(abs(k)<.001)\n        {\n            vec3 h = cam+dir*t;\n            vec2 o = vec2(.01,0);\n            vec3 n = normalize(vec3(\n                scene(h+o.xyy)-scene(h-o.xyy),\n                scene(h+o.yxy)-scene(h-o.yxy),\n                scene(h+o.yyx)-scene(h-o.yyx)\n            ));\n            if (mat == 0)\n            {\n                vec3 pos = floor(shift*10.+.5);\n                float noise = noisefloor(shift.xz*4.+pos.y*.5,0.)*2.-.1;\n                float fresnel = pow(max(0.,1.-dot(-dir,n)),5.)*.3;\n                accum *= fresnel;\n                cam = h+n*.01;\n                dir = reflect(dir,n);\n                t = 0.;\n                emit += pow(noise,5.)*10. * vec3(.0,.1,1) * 2.;\n            }\n            else if (mat == 1)\n            {\n                accum *= vec3(1,.45,.1);\n                cam = h+n*.01;\n                dir = reflect(dir,n);\n                t = 0.;\n            }\n            else if (mat == 2)\n            {\n                float noise = noisefloor(h.xz,.1)*2.-.1;\n                accum *= noise*.7+.3;\n                accum *= vec3(.8,.9,1);\n                cam = h+n*.01;\n                dir = mix(reflect(dir,n),n,noise*.1);\n                t = 0.;\n            }\n        }\n    }\n    return accum+emit;\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n    vec2 uv = fragCoord/ iResolution.xy - .5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 cam = vec3(0,0,-100);\n    vec3 dir = normalize(vec3(uv,25));\n\n    cam.yz = rotate(cam.yz, .3);\n    dir.yz = rotate(dir.yz, .3);\n\n    cam.xz = rotate(cam.xz, pi/8.);\n    dir.xz = rotate(dir.xz, pi/8.);\n\n    out_color.rgb = trace(cam,dir);\n    out_color.rgb = pow(out_color.rgb, vec3(.45));\n    out_color.rgb *= 1.-dot(uv,uv)*.4;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}