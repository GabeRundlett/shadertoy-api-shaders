{
    "Shader": {
        "info": {
            "date": "1652889453",
            "description": "curve",
            "flags": 0,
            "hasliked": 0,
            "id": "flSfDt",
            "likes": 3,
            "name": "rotate curve",
            "published": 3,
            "tags": [
                "curve"
            ],
            "usePreview": 0,
            "username": "yanglian",
            "viewed": 216
        },
        "renderpass": [
            {
                "code": "/**\n绘制三条绕轴旋转的曲线\n*/\n#define PI 3.14159265\nbool isRenderAxis = false;\nfloat renderLine1(float x, float y)\n{\n    if(abs(y - sin(x)*sin(iTime)) < 0.01)\n    {\n        return 0.0;\n    }\n    else\n    {\n        return 1.0;\n    }\n}\nfloat renderLine2(float x, float y)\n{\n    if(abs(y - sin(x - 1.0)*sin(iTime + 1.0 * PI / 3.0)) < 0.01)\n    {\n        return 0.0;\n    }\n    else\n    {\n        return 1.0;\n    }\n}\nfloat renderLine3(float x, float y)\n{\n    if(abs(y - sin(x + 1.0)*sin(iTime + 2.0 * PI / 3.0)) < 0.01)\n    {\n        return 0.0;\n    }\n    else\n    {\n        return 1.0;\n    }\n}\nvec3 renderAxis(vec3 oriColor, float x, float y)\n{\n    vec3 color;\n    //render axis x\n    color = mix(oriColor, vec3(0.0, 0.0, 0.0), smoothstep(0.008, 0.0, abs(y)));\n    //render axis y\n    color = mix(color, vec3(0.0, 0.0, 0.0), smoothstep(0.008, 0.0, abs(x)));\n    return color;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 pos;\n    //定义坐标轴的大小,保证在满足横坐标从[-pi，pi]下，纵坐标涵盖[-1, 1]\n    if(iResolution.x > iResolution.y)\n    {\n        pos = 2.0 * (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n        if(PI * iResolution.y / iResolution.x > 1.0)\n        {\n            pos *= (PI * iResolution.y / iResolution.x);\n        }\n    }\n    else\n    {\n        pos = 2.0 * (fragCoord - 0.5 * iResolution.xy)/iResolution.x;\n        pos *= PI;\n    }\n    vec3 color = vec3(1.0, 0.70, 0.70);\n    float xx = pos.x;\n    float yy = pos.y;\n\n    if(isRenderAxis)\n    {\n        color = renderAxis(color, xx, yy);\n    }\n    color = mix(vec3(0.0, 1.0, 0.0), color, renderLine1(xx, yy));\n    color = mix(vec3(1.0, 0.0, 0.0), color, renderLine2(xx, yy));\n    color = mix(vec3(0.0, 0.0, 1.0), color, renderLine3(xx, yy));\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}