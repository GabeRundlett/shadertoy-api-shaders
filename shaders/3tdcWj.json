{
    "Shader": {
        "info": {
            "date": "1609925982",
            "description": "Lake with 3D landscape and disappearing tower (from \"Stairs to Nowhere\") - mouseable",
            "flags": 0,
            "hasliked": 0,
            "id": "3tdcWj",
            "likes": 10,
            "name": "Mountain Lake with Tower",
            "published": 3,
            "tags": [
                "reflection",
                "landscape",
                "architecture"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 400
        },
        "renderpass": [
            {
                "code": "// \"Mountain Lake with Tower\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat SmoothBump (float lo, float hi, float w, float x);\nmat3 StdVuMat (float el, float az);\nmat3 DirVuMat (vec3 vd);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Noisefv2 (vec2 p);\nvec2 Noisev2v4 (vec4 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec4 szFlr;\nvec3 sunDir;\nfloat dstFar, tCur, grndScl, twrScl, flSpc, nFlr, twrRad, bSizeV, cIdV, vShift;\nint idObj;\nconst int idFlr = 1, idStr = 2, idRl = 3, idStn = 4, idCln = 5;\nconst float pi = 3.1415927, sqrt2 = 1.41421;\n\n#define VAR_ZERO min (iFrame, 0)\n\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n\nfloat GrndDf (vec3 p)\n{\n  vec3 q;\n  float d, h, a, r, s, f;\n  q = p / grndScl;\n  r = length (q.xz);\n  d = p.y;\n  if (r > 0.) {\n    a = atan (q.z, - q.x) / (2. * pi) + 0.5;\n    s = sqrt (r) / (2. * pi);\n    f = 22.;\n    h = 6. * s * mix (Fbm2 (f * vec2 (s, a + 1.)), Fbm2 (f * vec2 (s, a)), a);\n    d = max (r - 20., q.y - (h * smoothstep (1.4, 2.6, r) - 0.5 * (1. - smoothstep (0.5, 1.4, r)) - 0.01));\n  }\n  return grndScl * d;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + s * rd;\n    h = GrndDf (p);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.001, h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = VAR_ZERO; j < 10; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      if (GrndDf (p) > 0.) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = GrndDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, stSpc, xLim1, xLim2, bRad, r, a, x;\n  bool topFlr, botFlr;\n  dMin = dstFar / twrScl;\n  p /= twrScl;\n  r = length (p.xz) - twrRad;\n  d = r - 20.;\n  if (d < 1.) {\n    a = 2. * pi * ((floor (6. * atan (p.x, - p.z) / (2. * pi)) + 0.5) / 6.);\n    stSpc = 6.;\n    xLim1 = abs (dot (p.xz, sin (a + vec2 (0.5 * pi, 0.)))) - 22.;\n    xLim2 = xLim1 + 16.;\n    bRad = 0.5;\n    topFlr = (cIdV == 2. * nFlr - 1.);\n    botFlr = (cIdV == 0.);\n    if (topFlr) {\n      d = length (max (abs (vec2 (p.y + 0.5 * szFlr.w, r + szFlr.z + stSpc)) - vec2 (0.5 * szFlr.w, szFlr.z), 0.));\n      DMIN (idFlr);\n      d = max (length (vec2 (p.y + 0.4, abs (r + szFlr.z + stSpc - 0.5)) - (szFlr.z - 0.1)) - bRad, - xLim2);\n      DMIN (idRl);\n    }\n    d = max (length (max (abs (vec2 ((topFlr ? - p.y : abs (p.y)) - flSpc,\n       r - 0.4 * (szFlr.z + stSpc))) - vec2 (szFlr.w, 1.4 * (szFlr.z + stSpc)), 0.)), - xLim1);\n    DMIN (idFlr);\n    d = max (length (max (abs (vec2 (p.y + szFlr.w, r)) - vec2 (szFlr.w, 2. * szFlr.z + stSpc + 0.5), 0.)), xLim2);\n    DMIN (idFlr);\n    p.zx = Rot2D (p.zx, a);\n    p.z = abs (p.z) - twrRad;\n    x = abs (p.x) - szFlr.x;\n    for (float sz = -1.; sz <= 1.; sz += 2.) {\n      if (! topFlr || sz < 0.) {\n        q.x = x;\n        q.yz = p.yz - sz * vec2 (szFlr.y - szFlr.w, - (szFlr.z + stSpc));\n        d = abs (q.y) - (szFlr.y - szFlr.w - 0.005);\n        q.xy = vec2 (q.x + sz * q.y, - sz * q.x + q.y) / sqrt2;\n        d = max (max (max (q.y - 0.5 * sqrt2 - abs (0.5 * sqrt2 - mod (q.x, sqrt2)), abs (q.z) - szFlr.z), -1. - q.y), d);\n        DMIN (idStr);\n      }\n    }\n    d = max (length (vec2 (p.y + flSpc - 4., abs (r - szFlr.z) - (2. * szFlr.z + stSpc - 0.8))) - bRad, - xLim1);\n    DMIN (idRl);\n    d = max (length (vec2 (p.y - 3.5, abs (r - 0.4) - (2. * szFlr.z + stSpc - 0.1))) - bRad, xLim2);\n    DMIN (idRl);\n    q = vec3 (x - 4., p.y + 0.5 * flSpc, abs (p.z - (szFlr.z + stSpc)) - szFlr.z);\n    d = max (length (vec2 ((q.x + q.y) / sqrt2, q.z)) - bRad, abs (x) - 8.);\n    DMIN (idRl);\n    q.xz = vec2 (x + 4., abs (p.z + szFlr.z + stSpc) - szFlr.z);\n    if (! botFlr) {\n      d = max (length (vec2 ((q.x - (p.y + 1.5 * flSpc)) / sqrt2, q.z)) - bRad, abs (x) - 8.);\n      DMIN (idRl);\n    }\n    if (! topFlr) {\n      d = max (length (vec2 ((q.x - (p.y - 0.5 * flSpc)) / sqrt2, q.z)) - bRad, abs (x) - 8.);\n      DMIN (idRl);\n    }\n    x = abs (p.x);\n    q.x = x - 22.;\n    d = min (length (vec2 (q.x, p.y + flSpc - 4.)), length (vec2 (x - 6., p.y - 3.5))) - bRad;\n    d = max (d, max (abs (p.z) - (2. * szFlr.z + stSpc), szFlr.z - abs (abs (p.z) - (szFlr.z + stSpc))));\n    DMIN (idRl);\n    q.yz = vec2 (p.y + flSpc - 2.5, abs (abs (p.z) - (szFlr.z + stSpc)) - szFlr.z);\n    d = PrCapsDf (q.xzy, 0.7, 2.);\n    DMIN (idStn);\n    if (! topFlr) {\n      d = length (vec2 (q.x, p.z)) - 0.8;\n      DMIN (idCln);\n    }\n    d = PrCapsDf (vec3 (x - 6., p.y - 2.5, q.z).xzy, 0.7, 2.);\n    DMIN (idStn);\n    dMin *= 0.7;\n  } else dMin = d;\n  return twrScl * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d, eps, sy;\n  eps = 0.0005;\n  dHit = eps;\n  if (rd.y == 0.) rd.y = 0.001;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    p = ro + dHit * rd;\n    p.y -= vShift;\n    cIdV = floor (p.y / bSizeV);\n    sy = (bSizeV * (cIdV + step (0., rd.y)) - p.y) / rd.y;\n    d = abs (sy) + eps;\n    if (cIdV >= 0. && cIdV < 2. * nFlr) {\n      p.y -= bSizeV * (cIdV + 0.5);\n      d = min (ObjDf (p), d);\n    }\n    dHit += d;\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  p.y -= vShift;\n  cIdV = floor (p.y / bSizeV);\n  p.y -= bSizeV * (cIdV + 0.5);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol;\n  vec2 q;\n  float f, fd, ff;\n  q = 0.005 * (ro.xz + 5. * tCur * vec2 (0.5, 2.) + ((200. - ro.y) / rd.y) * rd.xz);\n  ff = Fbm2 (q);\n  f = smoothstep (0.1, 0.8, ff);\n  fd = smoothstep (0.1, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n  clCol = (0.8 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) * smoothstep (0., 0.05, abs (fd)));\n  fd = smoothstep (0.01, 0.1, rd.y);\n  col = mix (mix (vec3 (0.8, 0.8, 0.75), vec3 (0.4, 0.5, 0.8), 0.3 + 0.7 * fd), clCol, 0.1 + 0.9 * f * fd);\n  return col;\n}\n\nfloat WaveHt (vec2 p)\n{\n  mat2 qRot;\n  vec4 t4, v4;\n  vec2 q, w;\n  float wFreq, wAmp, tWav, ht, s;\n  qRot = mat2 (0.8, -0.6, 0.6, 0.8);\n  tWav = 0.5 * tCur;\n  wFreq = 1.;\n  wAmp = 1.;\n  s = length (p);\n  ht = 0.3 * (1. + sin (4. * s - 4. * tCur));\n  q = 0.3 * p;\n  for (int j = VAR_ZERO; j < 3; j ++) {\n    q *= qRot;\n    t4 = (q.xyxy + (tWav * vec2 (1., -1.)).xxyy) * wFreq;\n    t4 += 2. * Noisev2v4 (t4).xxyy - 1.;\n    v4 = (1. - abs (sin (t4))) * (abs (sin (t4)) + abs (cos (t4)));\n    w = 1. - sqrt (v4.xz * v4.yw);\n    w *= w;\n    w *= w;\n    w *= w;\n    ht += wAmp * (w.x + w.y);\n    wFreq *= 2.;\n    wAmp *= 0.5;\n  }\n  return 0.3 * ht / (1. + 0.02 * s);\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec3 vn;\n  vec2 e;\n  e = vec2 (max (0.01, 0.001 * d * d), 0.);\n  return normalize (vec3 (WaveHt (p.xz) - vec2 (WaveHt (p.xz + e.xy), WaveHt (p.xz + e.yx)), e.x).xzy);\n}\n\nvec4 GrndCol (vec3 ro, vec3 vn)\n{\n  vec4 col4;\n  float a;\n  a = atan (ro.z, - ro.x);\n  col4 = mix (vec4 (0.45, 0.4, 0.4, 0.1), vec4 (0.35, 0.3, 0.25, 0.1),\n     smoothstep (0., 0.04, ro.y / grndScl + 0.005 * sin (32. * a)));\n  if (ro.y > 0.) {\n    col4 = mix (col4, vec4 (0.25, 0.4, 0.25, 0.), smoothstep (0.1, 0.2, 1. - vn.y));\n    col4 = mix (col4, vec4 (0.6, 0.5, 0.3, 0.1), smoothstep (0.2, 0.35, 1. - vn.y));\n    col4 = mix (col4, vec4 (0.65, 0.6, 0.5, 0.1), smoothstep (0.35, 0.45, 1. - vn.y));\n    col4 = mix (col4, vec4 (1., 1., 1., 0.4), smoothstep (0.65, 0.95, ro.y / grndScl + 0.2 * sin (8. * a)));\n  }\n  return col4;\n}\n\nvec4 ObjCol (vec3 ro, vec3 vn)\n{\n  vec4 col4;\n  if (idObj == idFlr) {\n    col4 = vec4 (0.4, 0.7, 0.2, 0.1);\n    if (vn.y > 0.99) col4 *= 0.8 + 0.2 * SmoothBump (0.1, 0.9, 0.05, mod (0.25 * length (ro.xz) / twrScl, 1.));\n  } else if (idObj == idStr) {\n    col4 = vec4 (0.3, 0.6, 0.2, 0.1);\n  } else if (idObj == idRl) {\n    col4 = vec4 (0.8, 0.8, 0.9, 0.2);\n  } else if (idObj == idStn) {\n    col4 = vec4 (0.7, 0.7, 0., 0.2);\n  } else if (idObj == idCln) {\n    col4 = vec4 (0.9, 0., 0., 0.2);\n  }\n  return col4;\n}\n  \nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, colR, vn, vnw, roo, rdo;\n  float dstObj, dstGrnd, dstWat, wAbs;\n  bSizeV = 2. * flSpc * twrScl;\n  roo = ro;\n  rdo = rd;\n  dstWat = (rd.y < 0.) ? - ro.y / rd.y : dstFar;\n  dstGrnd = GrndRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  wAbs = 1.;\n  if (min (dstObj, dstGrnd) < dstFar) {\n    if (dstGrnd < dstObj) {\n      ro += dstGrnd * rd;\n      vn = GrndNf (ro);\n      col4 = GrndCol (ro, vn);\n      vn = VaryNf (16. * ro / grndScl, vn, 4.);\n    } else {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      col4 = ObjCol (ro, vn);\n    }\n    col = col4.rgb * (0.2 + 0.2 * max (vn.y, 0.) + 0.7 * max (dot (vn, sunDir), 0.)) +\n       col4.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n    if (dstWat < min (dstObj, dstGrnd)) {\n      wAbs = smoothstep (0., 0.05, - ro.y / grndScl);\n      col = mix (col, mix (vec3 (0.15, 0.17, 0.15), vec3 (0.12, 0.12, 0.15), smoothstep (0.3, 0.7,\n         Fbm2 (0.1 * (roo.xz + dstWat * rd.xz)))), wAbs);\n    }\n  } else col = SkyCol (ro, rd);\n  if (dstWat < min (min (dstObj, dstGrnd), dstFar)) {\n    ro = roo + dstWat * rd;\n    vnw = WaveNf (ro, dstWat);\n    rd = reflect (rd, vnw);\n    dstObj = ObjRay (ro, rd);\n    dstGrnd = GrndRay (ro, rd);\n    if (min (dstObj, dstGrnd) < dstFar) {\n      if (dstGrnd < dstObj) {\n        ro += dstGrnd * rd;\n        vn = GrndNf (ro);\n        col4 = GrndCol (ro, vn);\n        vn = VaryNf (16. * ro / grndScl, vn, 4.);\n      } else {\n        ro += dstObj * rd;\n        vn = ObjNf (ro);\n        col4 = ObjCol (ro, vn);\n      }\n      colR = col4.rgb * (0.2 + 0.2 * max (vn.y, 0.) + 0.7 * max (dot (vn, sunDir), 0.));\n    } else colR = SkyCol (ro, rd);\n    col = mix (col, 0.95 * colR, min (wAbs, 1. - 0.9 * pow (max (- dot (rdo, vnw), 0.), 2.)));\n    vnw = VaryNf (0.1 * vec3 (Rot2D (ro.xz, 0.01 * tCur), ro.y).xzy, vnw, 1.);\n    col += 0.1 * pow (max (0., dot (sunDir, reflect (rdo, vnw))), 1024.);\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvv;\n  float el, az, asp, zmFac, sr, t;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  asp = canvas.x / canvas.y;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az -= 2.5 * pi * mPtr.x;\n    el -= 0.5 * pi * mPtr.y;\n  } else {\n    t = mod (0.005 * tCur, 2.);\n    az = 2.5 * pi * (0.5 - abs ((floor (16. * t) + smoothstep (0.8, 1., mod (16. * t, 1.))) / 16. - 1.));\n  }\n  el = clamp (el, -0.4 * pi, 0.);\n  zmFac = 3.5 + 2. * smoothstep (0.1 * pi, 0.4 * pi, - el);\n  twrScl = 0.15;\n  szFlr = vec4 (14., 8.5, 4., 0.5);\n  flSpc = 2. * szFlr.y - szFlr.w;\n  nFlr = 3.;\n  t = SmoothBump (0.25, 0.75, 0.2, mod (0.03 * tCur, 1.));\n  vShift = -4. * nFlr * flSpc * twrScl * t;\n  twrRad = 60.;\n  vuMat = StdVuMat (el, az);\n  grndScl = 50.;\n  ro = vuMat * vec3 (0., 0., -1.7) * grndScl;\n  ro.y += 0.25 * grndScl;\n  dstFar = 10. * grndScl;\n  sunDir = normalize (vec3 (1., 2., 1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.), sr * (0.667 * a + 0.5) * pi)) / zmFac;\n    rd = vuMat * normalize (vec3 ((2. * tan (0.5 * atan (uvv.x / asp))) * asp, uvv.y, 1.));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + vec4 (0., 1., 57., 58.)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nvec2 Noisev2v4 (vec4 p)\n{\n  vec4 ip, fp, t1, t2;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t1 = Hashv4f (dot (ip.xy, vec2 (1., 57.)));\n  t2 = Hashv4f (dot (ip.zw, vec2 (1., 57.)));\n  return vec2 (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n               mix (mix (t2.x, t2.y, fp.z), mix (t2.z, t2.w, fp.z), fp.w));\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}