{
    "Shader": {
        "info": {
            "date": "1686348372",
            "description": "Change r value to see different zooms ",
            "flags": 0,
            "hasliked": 0,
            "id": "dtySWK",
            "likes": 18,
            "name": "Geometric Series Blobs",
            "published": 3,
            "tags": [
                "grid",
                "circle",
                "tiling",
                "geometric",
                "series",
                "sum"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 191
        },
        "renderpass": [
            {
                "code": "#define pi 3.14159\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nvec2 tile( vec2 uv, inout float r, inout float k, inout vec2 dim0 )\n{ \n    // dim0 is n in sum r^i, i.e. largest index in the sum\n    dim0 = log(uv + 0.0001) / log(r);\n    dim0 = floor(dim0);\n    \n    // dim is r^n itself, i.e. largest term in the sum\n    vec2 dim = pow(vec2(r), dim0);   \n    \n    // a is partial sum up to n\n    vec2 a = (1. - dim) / (1.-r);\n\n    float sc = 1. / (1.-r); \n    uv = (1. - uv) / (1. - r);\n\n    float md = min(dim.x, dim.y);\n    float mx = 0.;\n \n    // Move circles\n    // (period 8 so do mod(iTime, 8.) in main)\n    if (dim0.x < dim0.y)\n       mx = thc(2.5, pi * iTime + pi*dim0.x/2. + 2.*pi*dim0.y / 8.);\n    else if (dim0.y < dim0.x)\n       mx = ths(2.5, pi * iTime + pi*dim0.y/2. + 2.*pi*dim0.x / 8.);\n       \n    uv = (uv - a - 0.5 * mix(dim, vec2(md), mx)) / md;   \n       \n    k *= sc / md;\n\n    return uv;\n}\n\nvoid mainImage( out vec4 O, in vec2 px )\n{\n    vec2 res = iResolution.xy;\n    vec2 uv = (px - 0.5 * res) / res.y;\n    vec2 ouv = uv;\n\n    float id = .5 * sign(uv.x) + sign(uv.y);   \n    uv = abs(uv);\n  \n    // Geometric series parameter ([0,1] shrinks, >1 grows)\n    float r = 1.-0.9*exp(-4.*dot(ouv,ouv));\n    r = 0.5 * tanh(0.08 * iTime); // <--- CHANGE ME <---\n    \n    // Pixel scale\n    float k = 1. / res.y;\n    \n    // Time (doesnt loop perfectly)\n    float t = mod(0.5 * iTime + 0.5*cos(.25*pi*(iTime + id)), 8.);\n\n    // Zoom out and resize pixel scale\n    uv *= exp2(-t*log2(r));\n    k  *= exp2(-t*log2(r));\n\n    // Tile coordinates\n    vec2 dim0;\n    uv = tile(uv, r, k, dim0);\n    uv *= rot(.5*pi * id + iTime);\n                   \n    vec3 col = vec3(0);\n    \n    // Circle color\n    vec3 colb = vec3(1);\n    \n    // Multiply by uv\n    colb.rg *= 0.5 + 0.5 * clamp(uv + 0.5, 0., 1.);\n    \n    // Fake fresnel (fres2 used for blending)\n    float d = abs(.5 - length(uv));\n    float fres = exp(-24. * d);\n    float fres2 = exp(-20. * d * (1.-exp(-7.*length(ouv))));\n    colb += fres * uv.x;\n    \n    // Palette color\n    colb *= .5 + .5 * cos(2.*pi*(0.5*(dim0.x+dim0.y) + id\n                         + floor(1.5*(dim0.x+dim0.y))/5.\n                         + vec3(0,1,2)/3.));\n    colb = clamp(colb, 0., 1.);\n    \n    // Fake specular\n    colb = mix(colb, vec3(1), exp(-8. * dot(uv,uv)) * min(1., uv.y+0.5));\n\n    // Circle shape\n    float s = smoothstep(-k, k, 0.5 - length(uv));\n    \n    // Background color\n    col = mix(vec3(ouv,.5), vec3(1), exp(-0.4 * dot(ouv,ouv)));\n    \n    // Background grainy texture \n    col *= .975 + .05* texture(iChannel0, 0.9 * ouv).r;\n    \n    // Remap circle color\n    colb = 1.-1./cosh(3.5 * colb);\n   \n    // Blend circle into background\n    float band = smoothstep(-1./res.y, 1./res.y, abs(0.455 - abs(ouv.y))-0.025);\n    col = mix(col, colb, 0.85 * s * (1.-fres2) * (0.8 + 0.2 * band));\n\n    O = vec4(col, 1);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}