{
    "Shader": {
        "info": {
            "date": "1683252560",
            "description": "textures go brrr\ntextures hand made, imported into shadertoy\nI'm trying to make a voxel game off this (for fun :P)\nMost of the raycaster code by Shane (I updated it a decent bit to work with what I need)",
            "flags": 32,
            "hasliked": 0,
            "id": "mtd3W2",
            "likes": 1,
            "name": "Voxel thing",
            "published": 3,
            "tags": [
                "textures"
            ],
            "usePreview": 1,
            "username": "ThePlaneGuy45",
            "viewed": 217
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = textureLod(iChannel0, uv, 0.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define DIRT int[768](0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0xA0, 0x72, 0x56, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0xA0, 0x72, 0x56, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35)\n#define STONE int[768](0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x58, 0x58, 0x58, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0xA5, 0xA5, 0xA5, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x72, 0x72, 0x72, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0x72, 0x72, 0x72, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x58, 0x58, 0x58, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x8C, 0x72, 0x72, 0x72, 0xA5, 0xA5, 0xA5, 0x8C, 0x8C, 0x8C);\n#define GRASS_SIDE int[768](0x46, 0x92, 0x40, 0x57, 0xB6, 0x50, 0x51, 0xA9, 0x4A, 0x46, 0x92, 0x40, 0x40, 0x87, 0x3B, 0x46, 0x93, 0x41, 0x46, 0x92, 0x40, 0x53, 0xAE, 0x4D, 0x5C, 0xC0, 0x54, 0x56, 0xB5, 0x50, 0x4E, 0xA3, 0x48, 0x4D, 0xA1, 0x47, 0x49, 0x98, 0x43, 0x58, 0xB8, 0x51, 0x57, 0xB6, 0x50, 0x4A, 0x9A, 0x44, 0x56, 0xB4, 0x4F, 0x59, 0xBB, 0x52, 0x58, 0xB8, 0x51, 0x4F, 0xA5, 0x49, 0x41, 0x89, 0x3C, 0x59, 0xBB, 0x52, 0x53, 0xAE, 0x4C, 0x5C, 0xC0, 0x54, 0x58, 0xB9, 0x51, 0x49, 0x99, 0x43, 0x57, 0xB6, 0x50, 0x42, 0x8A, 0x3D, 0x58, 0xB9, 0x51, 0x3E, 0x83, 0x39, 0x58, 0xB7, 0x51, 0x4A, 0x9B, 0x44, 0x5C, 0xC0, 0x54, 0x56, 0xB5, 0x50, 0x4E, 0xA3, 0x48, 0x4D, 0xA1, 0x47, 0x49, 0x98, 0x43, 0x58, 0xB8, 0x51, 0x57, 0xB6, 0x50, 0x4A, 0x9A, 0x44, 0x5C, 0xC0, 0x54, 0x53, 0xAE, 0x4C, 0x59, 0xBB, 0x52, 0x58, 0xB7, 0x51, 0x56, 0xB4, 0x4F, 0x3F, 0x84, 0x3A, 0x59, 0xBB, 0x52, 0x56, 0xB5, 0x50, 0x58, 0xB9, 0x51, 0x49, 0x99, 0x43, 0x57, 0xB6, 0x50, 0x42, 0x8A, 0x3D, 0x58, 0xB9, 0x51, 0x3E, 0x83, 0x39, 0x58, 0xB7, 0x51, 0x4A, 0x9B, 0x44, 0x53, 0xAE, 0x4D, 0x5C, 0xC0, 0x54, 0x56, 0xB5, 0x50, 0x4A, 0x9B, 0x44, 0x59, 0xBB, 0x52, 0x57, 0xB6, 0x50, 0x53, 0xAE, 0x4C, 0x5C, 0xC0, 0x54, 0x4A, 0x9A, 0x44, 0x5C, 0xC0, 0x54, 0x53, 0xAE, 0x4C, 0x59, 0xBB, 0x52, 0x58, 0xB7, 0x51, 0x56, 0xB4, 0x4F, 0x3F, 0x84, 0x3A, 0x59, 0xBB, 0x52, 0x56, 0xB5, 0x50, 0x40, 0x87, 0x3B, 0x46, 0x93, 0x41, 0x46, 0x92, 0x40, 0x58, 0xB8, 0x51, 0x51, 0xA9, 0x4A, 0x5C, 0xC0, 0x54, 0x53, 0xAE, 0x4D, 0x4A, 0x9B, 0x44, 0x53, 0xAE, 0x4D, 0x5C, 0xC0, 0x54, 0x56, 0xB5, 0x50, 0x28, 0x54, 0x25, 0x33, 0x6A, 0x2F, 0x57, 0xB6, 0x50, 0x53, 0xAE, 0x4C, 0x5C, 0xC0, 0x54, 0x41, 0x89, 0x3C, 0x59, 0xBB, 0x52, 0x53, 0xAE, 0x4C, 0x4F, 0xA5, 0x49, 0x46, 0x92, 0x40, 0x33, 0x6A, 0x2F, 0x46, 0x92, 0x40, 0x28, 0x54, 0x25, 0x53, 0xAE, 0x4C, 0x5C, 0xC0, 0x54, 0x28, 0x54, 0x25, 0x55, 0x38, 0x25, 0x55, 0x38, 0x25, 0x33, 0x6A, 0x2F, 0x58, 0xB9, 0x51, 0x3E, 0x83, 0x39, 0x33, 0x6A, 0x2F, 0x28, 0x54, 0x25, 0x53, 0xAE, 0x4D, 0x41, 0x89, 0x3C, 0x28, 0x54, 0x25, 0x55, 0x38, 0x25, 0x33, 0x6A, 0x2F, 0x55, 0x38, 0x25, 0x33, 0x6A, 0x2F, 0x57, 0xB6, 0x50, 0x28, 0x54, 0x25, 0x55, 0x38, 0x25, 0xA0, 0x72, 0x56, 0x67, 0x44, 0x2D, 0x33, 0x6A, 0x2F, 0x28, 0x54, 0x25, 0x55, 0x38, 0x25, 0x55, 0x38, 0x25, 0x28, 0x54, 0x25, 0x53, 0xAE, 0x4C, 0x33, 0x6A, 0x2F, 0x67, 0x44, 0x2D, 0x55, 0x38, 0x25, 0xA0, 0x72, 0x56, 0x55, 0x38, 0x25, 0x33, 0x6A, 0x2F, 0x67, 0x44, 0x2D, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x55, 0x38, 0x25, 0x67, 0x44, 0x2D, 0xA0, 0x72, 0x56, 0x79, 0x4F, 0x35, 0x55, 0x38, 0x25, 0x33, 0x6A, 0x2F, 0x55, 0x38, 0x25, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x55, 0x38, 0x25, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x67, 0x44, 0x2D, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0xA0, 0x72, 0x56, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x6B, 0x40, 0x24, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x79, 0x4F, 0x35, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35, 0x79, 0x4F, 0x35, 0xA0, 0x72, 0x56, 0xA0, 0x72, 0x56, 0x93, 0x60, 0x41, 0x93, 0x60, 0x41, 0x6B, 0x40, 0x24, 0x6B, 0x40, 0x24, 0x79, 0x4F, 0x35);\n#define GRASS_TOP int[768](0x4A, 0x9A, 0x44, 0x4A, 0x9B, 0x44, 0x56, 0xB5, 0x50, 0x5C, 0xC0, 0x54, 0x53, 0xAE, 0x4D, 0x46, 0x93, 0x41, 0x46, 0x92, 0x40, 0x53, 0xAE, 0x4D, 0x5C, 0xC0, 0x54, 0x56, 0xB5, 0x50, 0x4E, 0xA3, 0x48, 0x4A, 0x9A, 0x44, 0x58, 0xB9, 0x51, 0x5C, 0xC0, 0x54, 0x56, 0xB4, 0x4F, 0x46, 0x92, 0x40, 0x57, 0xB6, 0x50, 0x58, 0xB7, 0x51, 0x59, 0xBB, 0x52, 0x58, 0xB8, 0x51, 0x3E, 0x83, 0x39, 0x3F, 0x84, 0x3A, 0x57, 0xB6, 0x50, 0x5C, 0xC0, 0x54, 0x58, 0xB9, 0x51, 0x49, 0x99, 0x43, 0x57, 0xB6, 0x50, 0x5C, 0xC0, 0x54, 0x49, 0x99, 0x43, 0x56, 0xB5, 0x50, 0x59, 0xBB, 0x52, 0x57, 0xB6, 0x50, 0x58, 0xB8, 0x51, 0x3E, 0x83, 0x39, 0x3F, 0x84, 0x3A, 0x49, 0x98, 0x43, 0x58, 0xB9, 0x51, 0x56, 0xB4, 0x4F, 0x59, 0xBB, 0x52, 0x4A, 0x9A, 0x44, 0x5C, 0xC0, 0x54, 0x53, 0xAE, 0x4C, 0x59, 0xBB, 0x52, 0x53, 0xAE, 0x4C, 0x57, 0xB6, 0x50, 0x4E, 0xA3, 0x48, 0x58, 0xB8, 0x51, 0x51, 0xA9, 0x4A, 0x49, 0x98, 0x43, 0x58, 0xB9, 0x51, 0x56, 0xB4, 0x4F, 0x4D, 0xA1, 0x47, 0x42, 0x8A, 0x3D, 0x58, 0xB7, 0x51, 0x4A, 0x9B, 0x44, 0x4A, 0x9B, 0x44, 0x53, 0xAE, 0x4D, 0x5C, 0xC0, 0x54, 0x56, 0xB5, 0x50, 0x59, 0xBB, 0x52, 0x42, 0x8A, 0x3D, 0x4D, 0xA1, 0x47, 0x4F, 0xA5, 0x49, 0x46, 0x92, 0x40, 0x4D, 0xA1, 0x47, 0x42, 0x8A, 0x3D, 0x58, 0xB7, 0x51, 0x4E, 0xA3, 0x48, 0x57, 0xB6, 0x50, 0x59, 0xBB, 0x52, 0x56, 0xB5, 0x50, 0x59, 0xBB, 0x52, 0x56, 0xB5, 0x50, 0x40, 0x87, 0x3B, 0x46, 0x93, 0x41, 0x58, 0xB7, 0x51, 0x58, 0xB9, 0x51, 0x49, 0x98, 0x43, 0x41, 0x89, 0x3C, 0x40, 0x87, 0x3B, 0x4E, 0xA3, 0x48, 0x57, 0xB6, 0x50, 0x59, 0xBB, 0x52, 0x56, 0xB5, 0x50, 0x49, 0x99, 0x43, 0x53, 0xAE, 0x4C, 0x5C, 0xC0, 0x54, 0x5C, 0xC0, 0x54, 0x56, 0xB5, 0x50, 0x4E, 0xA3, 0x48, 0x4D, 0xA1, 0x47, 0x56, 0xB4, 0x4F, 0x3E, 0x83, 0x39, 0x58, 0xB8, 0x51, 0x59, 0xBB, 0x52, 0x46, 0x93, 0x41, 0x56, 0xB5, 0x50, 0x49, 0x99, 0x43, 0x53, 0xAE, 0x4C, 0x5C, 0xC0, 0x54, 0x58, 0xB9, 0x51, 0x5C, 0xC0, 0x54, 0x53, 0xAE, 0x4D, 0x58, 0xB9, 0x51, 0x49, 0x99, 0x43, 0x57, 0xB6, 0x50, 0x42, 0x8A, 0x3D, 0x3F, 0x84, 0x3A, 0x58, 0xB7, 0x51, 0x57, 0xB6, 0x50, 0x53, 0xAE, 0x4C, 0x46, 0x92, 0x40, 0x5C, 0xC0, 0x54, 0x58, 0xB9, 0x51, 0x5C, 0xC0, 0x54, 0x53, 0xAE, 0x4D, 0x5C, 0xC0, 0x54, 0x4A, 0x9A, 0x44, 0x4A, 0x9B, 0x44, 0x5C, 0xC0, 0x54, 0x53, 0xAE, 0x4C, 0x59, 0xBB, 0x52, 0x58, 0xB7, 0x51, 0x59, 0xBB, 0x52, 0x4A, 0x9B, 0x44, 0x4A, 0x9A, 0x44, 0x5C, 0xC0, 0x54, 0x53, 0xAE, 0x4D, 0x53, 0xAE, 0x4D, 0x5C, 0xC0, 0x54, 0x4A, 0x9A, 0x44, 0x46, 0x92, 0x40, 0x53, 0xAE, 0x4C, 0x57, 0xB6, 0x50, 0x58, 0xB7, 0x51, 0x53, 0xAE, 0x4D, 0x5C, 0xC0, 0x54, 0x56, 0xB5, 0x50, 0x4A, 0x9B, 0x44, 0x56, 0xB5, 0x50, 0x53, 0xAE, 0x4D, 0x5C, 0xC0, 0x54, 0x58, 0xB9, 0x51, 0x5C, 0xC0, 0x54, 0x46, 0x92, 0x40, 0x51, 0xA9, 0x4A, 0x46, 0x92, 0x40, 0x46, 0x93, 0x41, 0x59, 0xBB, 0x52, 0x58, 0xB8, 0x51, 0x3E, 0x83, 0x39, 0x56, 0xB5, 0x50, 0x40, 0x87, 0x3B, 0x46, 0x93, 0x41, 0x46, 0x92, 0x40, 0x40, 0x87, 0x3B, 0x5C, 0xC0, 0x54, 0x53, 0xAE, 0x4C, 0x49, 0x99, 0x43, 0x56, 0xB5, 0x50, 0x46, 0x93, 0x41, 0x58, 0xB8, 0x51, 0x4F, 0xA5, 0x49, 0x40, 0x87, 0x3B, 0x41, 0x89, 0x3C, 0x49, 0x98, 0x43, 0x58, 0xB9, 0x51, 0x5C, 0xC0, 0x54, 0x41, 0x89, 0x3C, 0x59, 0xBB, 0x52, 0x53, 0xAE, 0x4C, 0x46, 0x93, 0x41, 0x56, 0xB5, 0x50, 0x59, 0xBB, 0x52, 0x57, 0xB6, 0x50, 0x4E, 0xA3, 0x48, 0x40, 0x87, 0x3B, 0x41, 0x89, 0x3C, 0x49, 0x98, 0x43, 0x58, 0xB9, 0x51, 0x58, 0xB7, 0x51, 0x46, 0x93, 0x41, 0x40, 0x87, 0x3B, 0x56, 0xB5, 0x50, 0x59, 0xBB, 0x52, 0x3F, 0x84, 0x3A, 0x56, 0xB4, 0x4F, 0x58, 0xB7, 0x51, 0x59, 0xBB, 0x52, 0x53, 0xAE, 0x4C, 0x5C, 0xC0, 0x54, 0x4A, 0x9A, 0x44, 0x46, 0x92, 0x40, 0x4F, 0xA5, 0x49, 0x4D, 0xA1, 0x47, 0x42, 0x8A, 0x3D, 0x59, 0xBB, 0x52, 0x56, 0xB5, 0x50, 0x5C, 0xC0, 0x54, 0x53, 0xAE, 0x4D, 0x4A, 0x9B, 0x44, 0x58, 0xB7, 0x51, 0x3E, 0x83, 0x39, 0x58, 0xB9, 0x51, 0x42, 0x8A, 0x3D, 0x57, 0xB6, 0x50, 0x49, 0x99, 0x43, 0x58, 0xB9, 0x51, 0x51, 0xA9, 0x4A, 0x58, 0xB8, 0x51, 0x4E, 0xA3, 0x48, 0x57, 0xB6, 0x50, 0x53, 0xAE, 0x4C, 0x59, 0xBB, 0x52, 0x53, 0xAE, 0x4C, 0x5C, 0xC0, 0x54, 0x4A, 0x9A, 0x44, 0x57, 0xB6, 0x50, 0x58, 0xB8, 0x51, 0x49, 0x98, 0x43, 0x4D, 0xA1, 0x47, 0x4E, 0xA3, 0x48, 0x56, 0xB5, 0x50, 0x5C, 0xC0, 0x54, 0x57, 0xB6, 0x50, 0x59, 0xBB, 0x52, 0x56, 0xB5, 0x50, 0x49, 0x99, 0x43, 0x5C, 0xC0, 0x54, 0x57, 0xB6, 0x50, 0x49, 0x99, 0x43, 0x58, 0xB9, 0x51, 0x5C, 0xC0, 0x54, 0x53, 0xAE, 0x4C, 0x59, 0xBB, 0x52, 0x41, 0x89, 0x3C, 0x4F, 0xA5, 0x49, 0x58, 0xB8, 0x51, 0x59, 0xBB, 0x52, 0x56, 0xB4, 0x4F, 0x46, 0x92, 0x40, 0x56, 0xB4, 0x4F, 0x5C, 0xC0, 0x54, 0x58, 0xB9, 0x51, 0x4A, 0x9A, 0x44, 0x4E, 0xA3, 0x48, 0x56, 0xB5, 0x50, 0x5C, 0xC0, 0x54, 0x53, 0xAE, 0x4D, 0x46, 0x92, 0x40, 0x46, 0x93, 0x41, 0x40, 0x87, 0x3B, 0x46, 0x92, 0x40, 0x51, 0xA9, 0x4A, 0x57, 0xB6, 0x50, 0x46, 0x92, 0x40);\n#define WOOD_SIDE int[768](0x58, 0x38, 0x00, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x51, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x81, 0x51, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x81, 0x51, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x81, 0x51, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x5E, 0x3C, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x51, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x5C, 0x1C, 0x72, 0x48, 0x00, 0x81, 0x51, 0x00, 0x81, 0x51, 0x00, 0x72, 0x48, 0x00, 0x58, 0x38, 0x00);\n#define WOOD_TOP int[768](0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0xAE, 0x8B, 0x50, 0x93, 0x76, 0x43, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0x93, 0x76, 0x43, 0x7D, 0x64, 0x3A, 0x7D, 0x64, 0x3A, 0x7D, 0x64, 0x3A, 0x93, 0x76, 0x43, 0x93, 0x76, 0x43, 0x93, 0x76, 0x43, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAF, 0x91, 0x5D, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0xAE, 0x8B, 0x50, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0xAE, 0x8B, 0x50, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0x7D, 0x64, 0x3A, 0x93, 0x76, 0x43, 0xAE, 0x8B, 0x50, 0x93, 0x76, 0x43, 0x93, 0x76, 0x43, 0x93, 0x76, 0x43, 0x7D, 0x64, 0x3A, 0x7D, 0x64, 0x3A, 0xAE, 0x8B, 0x50, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0xAF, 0x91, 0x5D, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0x7D, 0x64, 0x3A, 0xAF, 0x91, 0x5D, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0x93, 0x76, 0x43, 0xAE, 0x8B, 0x50, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0xAF, 0x91, 0x5D, 0x7D, 0x64, 0x3A, 0xAF, 0x91, 0x5D, 0x7D, 0x64, 0x3A, 0xAF, 0x91, 0x5D, 0x93, 0x76, 0x43, 0x93, 0x76, 0x43, 0xAE, 0x8B, 0x50, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0x93, 0x76, 0x43, 0xAE, 0x8B, 0x50, 0x7D, 0x64, 0x3A, 0xAF, 0x91, 0x5D, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0xAF, 0x91, 0x5D, 0x7D, 0x64, 0x3A, 0xAF, 0x91, 0x5D, 0x7D, 0x64, 0x3A, 0xAF, 0x91, 0x5D, 0x93, 0x76, 0x43, 0x7D, 0x64, 0x3A, 0x7D, 0x64, 0x3A, 0x93, 0x76, 0x43, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAF, 0x91, 0x5D, 0x7D, 0x64, 0x3A, 0xAF, 0x91, 0x5D, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0xAF, 0x91, 0x5D, 0x7D, 0x64, 0x3A, 0xAF, 0x91, 0x5D, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0x93, 0x76, 0x43, 0x7D, 0x64, 0x3A, 0x7D, 0x64, 0x3A, 0x93, 0x76, 0x43, 0xAE, 0x8B, 0x50, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0x7D, 0x64, 0x3A, 0xAF, 0x91, 0x5D, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0xAF, 0x91, 0x5D, 0x7D, 0x64, 0x3A, 0xAF, 0x91, 0x5D, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0x93, 0x76, 0x43, 0x93, 0x76, 0x43, 0x93, 0x76, 0x43, 0x93, 0x76, 0x43, 0xAE, 0x8B, 0x50, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0xAF, 0x91, 0x5D, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0xAE, 0x8B, 0x50, 0xAF, 0x91, 0x5D, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0xAF, 0x91, 0x5D, 0xAE, 0x8B, 0x50, 0xAF, 0x91, 0x5D, 0x93, 0x76, 0x43, 0x93, 0x76, 0x43, 0x93, 0x76, 0x43, 0x93, 0x76, 0x43, 0x7D, 0x64, 0x3A, 0x7D, 0x64, 0x3A, 0x7D, 0x64, 0x3A, 0x7D, 0x64, 0x3A, 0xAF, 0x91, 0x5D, 0x93, 0x76, 0x43, 0xAF, 0x91, 0x5D, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0xAF, 0x91, 0x5D, 0xAE, 0x8B, 0x50, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAF, 0x91, 0x5D, 0xAE, 0x8B, 0x50, 0xAF, 0x91, 0x5D, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0xAF, 0x91, 0x5D, 0xAE, 0x8B, 0x50, 0x93, 0x76, 0x43, 0x93, 0x76, 0x43, 0x93, 0x76, 0x43, 0x7D, 0x64, 0x3A, 0x7D, 0x64, 0x3A, 0x7D, 0x64, 0x3A, 0x7D, 0x64, 0x3A, 0x93, 0x76, 0x43, 0x93, 0x76, 0x43, 0x93, 0x76, 0x43, 0xAE, 0x8B, 0x50, 0xAF, 0x91, 0x5D, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0xAF, 0x91, 0x5D, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAF, 0x91, 0x5D, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0xAE, 0x8B, 0x50, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00, 0x58, 0x38, 0x00);\n#define LEAF int[768](0x29, 0x7D, 0x48, 0x3C, 0xB6, 0x69, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x29, 0x7D, 0x48, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x29, 0x7D, 0x48, 0x29, 0x7D, 0x48, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x29, 0x7D, 0x48, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x29, 0x7D, 0x48, 0x29, 0x7D, 0x48, 0x29, 0x7D, 0x48, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x29, 0x7D, 0x48, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x29, 0x7D, 0x48, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x29, 0x7D, 0x48, 0x29, 0x7D, 0x48, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x29, 0x7D, 0x48, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x29, 0x7D, 0x48, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x29, 0x7D, 0x48, 0x3C, 0xB6, 0x69, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x3C, 0xB6, 0x69, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x34, 0x9C, 0x5A, 0x22, 0x66, 0x3B, 0x29, 0x7D, 0x48, 0x34, 0x9C, 0x5A);\n\nint[768] tex(int texID) {\n    switch(texID){\n    case 0:\n        return DIRT;\n    case 1:\n        return STONE;\n    case 2:\n        return GRASS_SIDE;\n    case 3:\n        return GRASS_TOP;\n    case 4:\n        return WOOD_SIDE;\n    case 5:\n        return WOOD_TOP;\n    case 6:\n        return LEAF;\n    }\n}\nvec3 getData(int index, int texID) {\n    int i = index * 3;\n    vec3 a;\n    int[768] j = tex(texID);\n    a.x = float(j[i]);\n    a.y = float(j[i+1]);\n    a.z = float(j[i+2]);\n    return a / 255.0;\n}\nvec3 sampleTex(vec2 uv, int texID) {\n    ivec2 coord = ivec2(floor(uv * 16.0));\n    int index = coord.x + (16 * coord.y);\n    return getData(index, texID);\n}\nint getId(int texID, vec3 mask) {\n\n    switch(texID){\n    case 0:\n        return texID;\n    case 1:\n        return texID;\n    case 2:\n        return mask.y > 0.0 ? texID + 1 : texID;\n    case 3:\n        return mask.y > 0.0 ? texID + 2 : texID + 1;\n    case 4:\n        return texID + 2;\n    }\n    \n    return 0;\n\n}\n\nvec4 worldMap(vec3 position) {\n    \n    if(position.z <= 1.0 && position.z > 0.0) {\n    if(position.y <= 1.0 && position.y > 0.0) {\n    if(position.x <= 1.0 && position.x > 0.0) { \n        return vec4(0.0, 0.0, 0.0, 1.0); } else if(position.x <= 2.0 && position.x > 0.0) {\n        return vec4(1.0, 0.0, 0.0, 1.0); } else if(position.x <= 3.0 && position.x > 0.0) {\n        return vec4(2.0, 0.0, 0.0, 1.0); } else if(position.x <= 4.0 && position.x > 0.0) {\n        return vec4(3.0, 0.0, 0.0, 1.0); } else if(position.x <= 5.0 && position.x > 0.0) {\n        return vec4(4.0, 0.0, 0.0, 1.0); } else { return vec4(0.0); }\n    } else { return vec4(0.0); }\n    } else { return vec4(0.0); }\n\n}\n\nvec3 singleRay(in Ray ray) {\n    \n    vec3 p = vec3(0.5);\n\n    float s = sign(ray.normal.z);\n    vec3 rayn = ray.normal;\n    rayn.z *= s;\n\tvec3 dRd = 1.0 / abs(rayn);\n\tvec3 rayNormal = sign(rayn);\n    vec3 side = dRd * (rayNormal * p + 0.5);\n    \n    vec3 mask = vec3(0.0);\n    \n    vec4 voxel;\n\t\n\tfor (int i = 0; i < 100; i++) {\n\t\t\n        voxel = worldMap(vec3(p.xy, p.z * s) + ray.origin);\n        \n        if (voxel.w > 0.0) { break; }\n        \n        mask = step(side, side.yzx) * (1.0 - step(side.zxy, side));\n\t\tside += mask * dRd;\n\t\tp += mask * rayNormal;\n\t}\n    \n    if(voxel.w > 0.0) {\n    \n    \tvec3 tCube = (p - 0.5 * sign(rayn)) / rayn;\n        float t = max(max(tCube.x, tCube.y), tCube.z);\n        vec3 position = ray.origin + ray.normal * t;\n        vec3 relative = ((position + 0.5) - round(position + 0.5)) * (1.0 - mask);\n        vec3 normal = -(mask * sign(ray.normal));\n        \n        vec2 uv;\n        if(!bool(relative.x)){ uv = relative.zy; }\n        if(!bool(relative.y)){ uv = relative.xz; }\n        if(!bool(relative.z)){ uv = relative.xy; }\n        \n        uv += 0.5;\n        uv.y = 1.0 - uv.y;\n        \n        int texID = getId(int(voxel.x), mask);\n        \n        vec3 color = sampleTex(uv, texID);\n        \n        float fog = pow(clamp(150.0 / (t + 100.0), 0.0, 1.0), 32.0);\n        \n        vec3 lightNormal = normalize(vec3(10.0, 10.0, -10.0) - position);\n        float shade = mix(0.2, 1.0, clamp(dot(lightNormal, normal), 0.0, 1.0));\n        \n        return mix(vec3(0.2), color * shade, fog);\n    \n    } else {\n    \n        return vec3(0.2);\n        \n    }\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = fragCoord / iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    Ray ray;\n    ray.origin = vec3(1.0, 3.0, -4.0);\n    ray.normal = normalize(vec3(uv, 1.5));\n    mat2 rot = rot2((iMouse.y / iResolution.y - 0.5) * 5.0);\n    ray.normal.yz *= rot;\n    rot = rot2((iMouse.x / iResolution.x - 0.5) * 5.0);\n    ray.normal.xz *= rot;\n    fragColor = vec4(singleRay(ray), 1.0);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define MAP_SIZE vec3(100.0, 10.0, 100.0)\n\nstruct Ray {\n\n    vec3 origin;\n    vec3 normal;\n\n};\n\nmat2 rot2( float a ){ vec2 v = sin(vec2(1.570796, 0) + a);\treturn mat2(v, -v.y, v.x); }\nvec4 readMapTex(vec2 pos, sampler2D iChannel, vec3 resolution) {\n\treturn textureLod(iChannel, (floor(pos) + .5) / (floor(resolution.xy)), 0.);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float index = round(fragCoord.x + 1280.0 * fragCoord.y);\n    vec3 voxel;\n    voxel.z = floor(index / (MAP_SIZE.x * MAP_SIZE.y));\n    voxel.y = mod(floor(index / MAP_SIZE.x), MAP_SIZE.y);\n    voxel.x = mod(index, MAP_SIZE.x);\n    \n    int id;\n    if(voxel.y <= 0.0){ id = 2; } else { id = 0; }\n    if(voxel.x < 75.0 && voxel.z < 75.0){ fragColor = vec4(float(id), 1.0, 0.0, 1.0); }\n    else{ fragColor = vec4(-1.0,0.0,0.0,0.0); }\n    fragColor = vec4(voxel, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}