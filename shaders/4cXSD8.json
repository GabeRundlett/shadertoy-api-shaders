{
    "Shader": {
        "info": {
            "date": "1717116193",
            "description": "Dithering~ Dithering~ Dithering~\n\nThe algorithm is based on Wikipedia:\n- Ordered dithering: [url]https://en.wikipedia.org/wiki/Ordered_dithering[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "4cXSD8",
            "likes": 0,
            "name": "Ordered Dithering!",
            "published": 3,
            "tags": [
                "dither",
                "pixelate",
                "dithering",
                "bayer",
                "ordereddithering"
            ],
            "usePreview": 0,
            "username": "1095",
            "viewed": 100
        },
        "renderpass": [
            {
                "code": "// MIT License\n// Copyright © 2024 Zaron Chen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// [*] Note: Switch iChannel filter to 'nearest'\n// PIXEL_SIZE  1   // Size of each pixel block. Cannot be 0. Set to 1 for normal size.\n// OFFSET      0.0 // Offset between patterns. 0.0 for no offset.\n// COLOR       0   // Output color mode. 0 for colored result, 1 for monochrome result.\n//\n// dither5 : Bayer2x2 ->  5 patterns\n// dither17: Bayer4x4 -> 17 patterns\n// dither65: Bayer8x8 -> 65 patterns\n\n#define PIXEL_SIZE  1\n#define OFFSET      0.0\n#define COLOR       1\n#define dither      dither65\n\nvec2 pixelate(vec2 uv, vec2 grid) { return (floor(uv*grid)+.5)/grid; }\nfloat luminance(vec3 color) { return dot(color, vec3(0.2126, 0.7152, 0.0722)); }\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv  = fragCoord.xy/iResolution.xy;\n\tvec2 puv = pixelate( uv, iResolution.xy/float(PIXEL_SIZE) );\n\n\tvec3  img = pow( texture(iChannel0, puv).rgb, vec3(1.45) );\n\tfloat lum = luminance(img);\n\n\t#if COLOR\n\t\tfragColor.rgb = step( dither(fragCoord.xy, PIXEL_SIZE, OFFSET), img );\n\t#else\n\t\tfragColor.rgb = vec3( dither(lum, fragCoord.xy, PIXEL_SIZE, OFFSET) );\n\t#endif\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// The algorithm is based on Wikipedia:\n// - Ordered dithering: https://en.wikipedia.org/wiki/Ordered_dithering\n//\n// MIT License\n// Copyright © 2024 Zaron Chen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst int Bayer2x2[4] = int[](0, 2, 3, 1);\nconst int Bayer4x4[16] = int[](0, 8, 2, 10, 12, 4, 14, 6, 3, 11, 1, 9, 15, 7, 13, 5);\nconst int Bayer8x8[64] = int[](0, 32, 8, 40, 2, 34, 10, 42, 48, 16, 56, 24, 50, 18, 58, 26, 12, 44, 4, 36, 14, 46, 6, 38, 60, 28, 52, 20, 62, 30, 54, 22, 3, 35, 11, 43, 1, 33, 9, 41, 51, 19, 59, 27, 49, 17, 57, 25, 15, 47, 7, 39, 13, 45, 5, 37, 63, 31, 55, 23, 61, 29, 53, 21);\n\nfloat dither5(vec2 coord, int pixelSize, float offset) {\n\tivec2 g = ivec2(coord)/pixelSize&1;\n\tint i = g.x+(g.y<<1);\n\treturn (float(Bayer2x2[i]+1)+offset)/5.;\n}\n\nfloat dither17(vec2 coord, int pixelSize, float offset) {\n\tivec2 g = ivec2(coord)/pixelSize&3;\n\tint i = g.x+(g.y<<2);\n\treturn (float(Bayer4x4[i]+1)+offset)/17.;\n}\n\nfloat dither65(vec2 coord, int pixelSize, float offset) {\n\tivec2 g = ivec2(coord)/pixelSize&7;\n\tint i = g.x+(g.y<<3);\n\treturn (float(Bayer8x8[i]+1)+offset)/65.;\n}\n\nfloat dither5(float t, vec2 coord, int pixelSize, float offset) {\n\tivec2 g = ivec2(coord)/pixelSize&1;\n\tint i = g.x+(g.y<<1);\n\treturn step((float(Bayer2x2[i]+1)+offset)/5., t);\n}\n\nfloat dither17(float t, vec2 coord, int pixelSize, float offset) {\n\tivec2 g = ivec2(coord)/pixelSize&3;\n\tint i = g.x+(g.y<<2);\n\treturn step((float(Bayer4x4[i]+1)+offset)/17., t);\n}\n\nfloat dither65(float t, vec2 coord, int pixelSize, float offset) {\n\tivec2 g = ivec2(coord)/pixelSize&7;\n\tint i = g.x+(g.y<<3);\n\treturn step((float(Bayer8x8[i]+1)+offset)/65., t);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}