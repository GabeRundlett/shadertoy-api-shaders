{
    "Shader": {
        "info": {
            "date": "1680232722",
            "description": "Doom Fire-ish, wrote this to use with Wallpaper Engine and the Shadertoy Embedder addon.\n\n\n",
            "flags": 32,
            "hasliked": 0,
            "id": "DscSRs",
            "likes": 1,
            "name": "Doom_Fire_Wallpaper",
            "published": 3,
            "tags": [
                "fire",
                "wallpaper",
                "wallpaperengine"
            ],
            "usePreview": 0,
            "username": "sicariusvelox",
            "viewed": 162
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = vec4(temp_to_color(texture(iChannel0,uv).r),1.0);\n\n\n    fragColor = col.bgra; // blue fire.\n    //fragColor = col;  // red fire.\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv.x = fract(uv.x*20.0);\n    float rand = 2.0*(random_prob(9.0, 10.0, uv*iTime)*(randomFloat(uv*(iTime+0.0001))))-1.0;\n    vec2 below = vec2(fragCoord.x+rand, fragCoord.y-1.0)/iResolution.xy;\n    below.x = fract(below.x);\n    vec4 col;\n    if (fragCoord.y < 1.0){\n        col = vec4(17.0);\n    }else{\n        col =  texture(iChannel0,below)-random_prob(1.0, 20.0, uv*float(iFrame)/100.0);\n    }\n    \n    \n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "\nvec3 temp_to_color(float temp){\n    if (temp <= 0.0){\n        return vec3(0.07,0.07,0.07);\n    }else if (temp < 1.0){\n        return vec3(0.34901960784313724,0.01568627450980392,0.01568627450980392);\n    }else if(temp < 2.0){\n        return vec3(0.6745098039215687,0.00784313725490196,0.00784313725490196);\n    }else if(temp < 3.0){\n        return vec3(1.0,0.0,0.0);\n    }else if(temp < 4.0){\n        return vec3(1.0,0.11764705882352941,0.0);\n    }else if(temp < 5.0){\n        return vec3(1.0,0.23529411764705882,0.0);\n    }else if(temp < 6.0){\n        return vec3(1.0,0.35294117647058826,0.0);\n    }else if(temp < 7.0){\n        return vec3(1.0,0.43529411764705883,0.0);\n    }else if(temp < 8.0){\n        return vec3(1.0,0.5176470588235295,0.0);\n    }else if(temp < 9.0){\n        return vec3(1.0,0.6039215686274509,0.0);\n    }else if(temp < 10.0){\n        return vec3(1.0,0.6705882352941176,0.0);\n    }else if(temp < 11.0){\n        return vec3(1.0,0.7372549019607844,0.0);\n    }else if(temp < 12.0){\n        return vec3(1.0,0.807843137254902,0.0);\n    }else if(temp < 13.0){\n        return vec3(1.0,0.8392156862745098,0.00784313725490196);\n    }else if(temp < 14.0){\n        return vec3(1.0,0.8745098039215686,0.0196078431372549);\n    }else if(temp < 15.0){\n        return vec3(1.0,0.9098039215686274,0.03137254901960784);\n    }else if(temp < 16.0){\n        return vec3(1.0,0.9372549019607843,0.35294117647058826);\n    }else if(temp < 17.0){\n        return vec3(1.0,0.9686274509803922,0.6745098039215687);\n    }else if(temp < 18.0){\n        return vec3(1.0,1.0,1.0);\n    }\n    \n}\n\nfloat randomFloat(vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat random_prob(float num, float den, vec2 st){\n    return float(randomFloat(st) < num/den);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}