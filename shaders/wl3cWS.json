{
    "Shader": {
        "info": {
            "date": "1609795711",
            "description": "Yes, my name is \"I wanna be the ShyGuy\" !",
            "flags": 0,
            "hasliked": 0,
            "id": "wl3cWS",
            "likes": 17,
            "name": "ShyGuys in SMB2",
            "published": 3,
            "tags": [
                "bitmap",
                "shyguy"
            ],
            "usePreview": 0,
            "username": "IWBTShyGuy",
            "viewed": 1104
        },
        "renderpass": [
            {
                "code": "// Copyright Â© 2021 IWBTShyGuy\n// Attribution 4.0 International (CC BY 4.0)\n\n// Bitmap Reference\n// https://www.spriters-resource.com/nes/supermariobros2supermariousa/\n\nconst int SCREEN_BLOCK = 8;\nconst int GROUND_HEIGHT = 1;\nconst float SHYGUY_VELOCITY = 6.5;\n\nconst float fSCREEN_BLOCK = float(SCREEN_BLOCK);\n\nconst vec4 BACKGROUND = vec4(60, 188, 252, 255) / 255.0;\n\nvec4 groundTile(in vec2 uv);\nvec4 grassTile(in vec2 uv);\nvec4 cloud(in vec2 uv);\nvec4 small_cloud(in vec2 uv);\nvec4 stem(in vec2 uv);\nvec4 leaf(in vec2 uv);\nvec4 redShyGuy(in vec2 uv, in int idx);\nvec4 greenShyGuy(in vec2 uv, in int idx);\nvec4 blueShyGuy(in vec2 uv, in int idx);\nvec4 blackShyGuy(in vec2 uv, in int idx);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = ((2.0 * fragCoord - iResolution.xy) / iResolution.y + 1.0) / 2.0;\n    if (abs(uv.x - 0.5) > 0.5) {\n        fragColor = vec4(vec3(0), 1);\n        return;\n    }\n    float t = iTime * SHYGUY_VELOCITY;\n    fragColor = vec4(0);\n    uv *= fSCREEN_BLOCK;\n    ivec2 iuv = ivec2(floor(uv));\n    uv = fract(uv);\n    if (iuv.y < GROUND_HEIGHT) fragColor = groundTile(uv);\n    else if (iuv.y == GROUND_HEIGHT) fragColor = grassTile(uv);\n    else if (iuv.x == SCREEN_BLOCK - 2) {\n        fragColor = stem(uv);\n    } else if (iuv.x == SCREEN_BLOCK - 3) {\n        if (iuv.y < SCREEN_BLOCK - 3) {\n            fragColor = stem(uv);\n        } else if (iuv.y == SCREEN_BLOCK - 3) {\n            fragColor = leaf(uv);\n        }\n    }\n    else if (iuv.y == SCREEN_BLOCK - 2) {\n        switch (iuv.x) {\n        case 3:\n            fragColor = small_cloud(uv);\n            break;\n        case 1:\n            fragColor = cloud(uv);\n            break;\n        case 2:\n            fragColor = cloud(uv + vec2(1, 0));\n            break;\n        }\n    }\n\n    vec4 col = vec4(0);\n    if (iuv.y == GROUND_HEIGHT + 1) {\n        uv = float(iuv) + uv;\n        uv.x = mod(uv.x - floor(t) / 3.0, fSCREEN_BLOCK);\n        iuv = ivec2(floor(uv));\n        uv = fract(uv);\n        if (iuv.x % 2 == 1) {\n            switch ((iuv.x / 2) % 4) {\n            case 0:\n                col = redShyGuy(uv, 1 + int(t));\n                break;\n            case 1:\n                col = greenShyGuy(uv, 1 + int(t));\n                break;\n            case 2:\n                col = blueShyGuy(uv, 1 + int(t));\n                break;\n            case 3:\n                col = blackShyGuy(uv, 1 + int(t));\n                break;\n            default: col = vec4(0);\n            }\n        }\n    }\n    if (col.w != 0.0) fragColor = col;\n    if (fragColor.w == 0.0) fragColor = BACKGROUND;\n}\n\nconst vec4 BLACK = vec4(0, 0, 0, 1);\nconst vec4 SEMI_WHITE = vec4(252, 252, 252, 255) / 255.0;\n\nconst vec4 LIGHT_GREEN = vec4(128, 208, 16, 255) / 255.0;\nconst vec4 MIDDLE_GREEN = vec4(0, 168, 0, 255) / 255.0;\nconst vec4 DARK_GREEN = vec4(0, 80, 0, 255) / 255.0;\n\n// ---------------- ShyGuy ---------------- //\nconst vec4 SHYGUY_RED = vec4(216, 40, 0, 255) / 255.0;\nconst vec4 SHYGUY_GREEN = vec4(40, 216, 0, 255) / 255.0;\nconst vec4 SHYGUY_BLUE = vec4(40, 0, 216, 255) / 255.0;\nconst vec4 SHYGUY_BLACK = vec4(40, 40, 40, 255) / 255.0;\n\nconst int SHYGUY_BITMAP[512] = int[](\n    0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n    0,0,1,1,3,3,3,3,3,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,\n    0,1,3,3,3,3,3,1,1,2,2,2,2,1,0,0,0,0,1,1,3,3,3,3,3,1,1,1,1,0,0,0,\n    1,3,3,3,3,3,3,1,2,2,2,2,2,2,1,0,0,1,3,3,3,3,3,1,1,2,2,2,2,1,0,0,\n    0,1,3,3,3,3,1,1,2,2,2,2,2,2,1,0,1,3,3,3,3,3,3,1,2,2,2,2,2,2,1,0,\n    0,0,1,1,1,1,1,2,2,1,1,2,1,1,2,1,0,1,3,3,3,3,1,1,2,2,2,2,2,2,1,0,\n    0,1,1,1,1,1,1,2,2,1,1,2,1,1,2,1,0,0,1,1,1,1,1,2,2,1,1,2,1,1,2,1,\n    0,1,3,3,3,3,1,2,2,2,2,2,2,2,2,1,0,1,1,1,1,1,1,2,2,1,1,2,1,1,2,1,\n    0,1,3,3,3,3,1,1,2,2,2,2,2,2,2,1,0,1,3,3,3,3,1,2,2,2,2,2,2,2,2,1,\n    0,0,1,3,3,3,3,1,2,2,2,1,2,2,1,1,0,1,3,3,3,3,1,1,2,2,2,2,2,2,2,1,\n    0,1,1,3,3,3,1,1,1,2,2,1,2,2,1,0,0,0,1,3,3,3,3,1,2,2,2,1,2,2,1,1,\n    0,1,3,3,3,3,3,1,1,1,2,2,2,1,3,1,0,1,1,3,3,3,1,1,1,2,2,1,2,2,1,0,\n    1,3,3,3,1,1,3,3,1,1,1,1,1,3,3,1,0,1,3,3,3,3,3,1,1,1,2,2,2,1,3,1,\n    1,1,1,3,3,3,1,1,1,3,3,3,3,1,1,1,1,3,1,1,3,3,3,1,3,1,1,1,1,1,3,1,\n    0,0,1,1,1,1,1,1,2,1,1,3,3,3,1,0,1,1,2,2,1,1,1,1,3,3,3,1,1,2,1,1,\n    0,0,0,0,1,1,2,2,2,2,1,1,1,1,0,0,0,1,1,2,2,1,1,1,1,1,1,2,2,2,2,1\n);\n\nint readShyGuyBitMap(in vec2 uv, in int idx) {\n    uv.y = 1.0 - uv.y;\n    ivec2 iuv = ivec2(uv * 15.9999);\n    int i = iuv.y * 32 + (idx % 2) * 16 + iuv.x;\n    return SHYGUY_BITMAP[i];\n}\n\nvec4 redShyGuy(in vec2 uv, in int idx) {\n    switch (readShyGuyBitMap(uv, idx)) {\n        case 1: return BLACK;\n        case 2: return SEMI_WHITE;\n        case 3: return SHYGUY_RED;\n        default: return vec4(0);\n    }\n}\n\nvec4 greenShyGuy(in vec2 uv, in int idx) {\n    switch (readShyGuyBitMap(uv, idx)) {\n        case 1: return BLACK;\n        case 2: return SEMI_WHITE;\n        case 3: return SHYGUY_GREEN;\n        default: return vec4(0);\n    }\n}\n\nvec4 blueShyGuy(in vec2 uv, in int idx) {\n    switch (readShyGuyBitMap(uv, idx)) {\n        case 1: return BLACK;\n        case 2: return SEMI_WHITE;\n        case 3: return SHYGUY_BLUE;\n        default: return vec4(0);\n    }\n}\n\nvec4 blackShyGuy(in vec2 uv, in int idx) {\n    switch (readShyGuyBitMap(uv, idx)) {\n        case 1: return BLACK;\n        case 2: return SEMI_WHITE;\n        case 3: return SHYGUY_BLACK;\n        default: return vec4(0);\n    }\n}\n\n// ---------------- Ground Tile ---------------- //\nconst int N_GBD = 10;\nconst ivec2 groundBlockDot[N_GBD] = ivec2[](\n    ivec2(2, 0), ivec2(11, 1), ivec2(6, 2), ivec2(15, 3), ivec2(3, 4),\n    ivec2(10, 5), ivec2(0, 6), ivec2(5, 6), ivec2(13, 6), ivec2(8, 7)\n);\n\nconst vec4 LIGHT_BROWN = vec4(248, 184, 0, 255) / 255.0;\nconst vec4 DARK_BROWN = vec4(83, 48, 0, 255) / 255.0;\n\nvec4 groundTile(in vec2 uv) {\n    uv.y = 1.0 - uv.y;\n    uv *= 16.0;\n    ivec2 st = ivec2(floor(uv));\n    st %= ivec2(16, 8);\n    for (int i = 0; i < N_GBD; i++) {\n        if (st == groundBlockDot[i])\n            return DARK_BROWN;\n    }\n    return LIGHT_BROWN;\n}\n\n// ---------------- Grass Tile ---------------- //\nvec4 grassTile(in vec2 uv) {\n    uv.y = 1.0 - uv.y;\n    ivec2 iuv = ivec2(uv * 16.0);\n    switch (iuv.y) {\n    case 0: case 15:\n        return DARK_GREEN;\n    case 2: switch (iuv.x) {\n        case 12: case 14: return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 3: switch (iuv.x) {\n        case 5: case 13: return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 4: switch (iuv.x) {\n        case 2: case 3: case 5: case 7: case 8:\n            return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 5: switch (iuv.x) {\n        case 3: case 4: case 5: case 6: case 7:\n            return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 6: switch (iuv.x) {\n        case 4: case 5: case 6: return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 10: switch (iuv.x) {\n        case 5: case 14: return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 11: switch (iuv.x) {\n        case 1: case 5: case 10: case 14:\n            return MIDDLE_GREEN;\n        default: return LIGHT_GREEN;\n    }\n    case 12: switch (iuv.x) {\n        case 3: case 4: case 7: case 8: case 12: case 15:\n            return LIGHT_GREEN;\n        default: return MIDDLE_GREEN;\n    }\n    case 13: switch (iuv.x) {\n        case 3: return LIGHT_GREEN;\n        case 1: case 5: case 10: case 14:\n            return DARK_GREEN;\n        default: return MIDDLE_GREEN;\n    }\n    case 14: switch (iuv.x) {\n        case 0: case 3: case 7: case 8: case 12:\n            return MIDDLE_GREEN;\n        default: return DARK_GREEN;\n    }\n    default:\n        return LIGHT_GREEN;\n    }\n}\n\n// ---------------- Cloud ---------------- //\nconst ivec4 CLOUD_RANGES[11] = ivec4[](\n    ivec4(10, 11, 12, 14),\n    ivec4(6, 9, 15, 17),\n    ivec4(4, 5, 18, 19),\n    ivec4(3, 3, 20, 20),\n    ivec4(2, 2, 21, 21),\n    ivec4(1, 1, 22, 22),\n    ivec4(1, 1, 21, 21),\n    ivec4(2, 2, 20, 20),\n    ivec4(3, 4, 18, 19),\n    ivec4(5, 7, 15, 17),\n    ivec4(8, 11, 11, 14)\n);\n\nconst ivec4 SMALL_CLOUD_RANGES[4] = ivec4[](\n    ivec4(4, 5, 5, 7),\n    ivec4(2, 3, 8, 9),\n    ivec4(1, 1, 10, 10),\n    ivec4(0, 0, 11, 11)\n);\n\nvec4 inRange(in int idx, in ivec4 range) {\n    if (range.x <= idx && idx <= range.y) return BLACK;\n    if (range.y < idx && idx < range.z) return SEMI_WHITE;\n    if (range.z <= idx && idx <= range.w) return BLACK;\n    return vec4(0);\n}\n\nvec4 cloud(in vec2 uv) {\n    uv.y = 1.0 - uv.y;\n    ivec2 iuv = ivec2(uv * 16.0);\n    switch (iuv.y) {\n        case 1: return inRange(iuv.x, CLOUD_RANGES[0]);\n        case 2: return inRange(iuv.x, CLOUD_RANGES[1]);\n        case 3: return inRange(iuv.x, CLOUD_RANGES[2]);\n        case 4: return inRange(iuv.x, CLOUD_RANGES[3]);\n        case 5: return inRange(iuv.x, CLOUD_RANGES[4]);\n        case 6:\n        case 7:\n        case 8: return inRange(iuv.x, CLOUD_RANGES[5]);\n        case 9: return inRange(iuv.x, CLOUD_RANGES[6]);\n        case 10: return inRange(iuv.x, CLOUD_RANGES[7]);\n        case 11: return inRange(iuv.x, CLOUD_RANGES[8]);\n        case 12: return inRange(iuv.x, CLOUD_RANGES[9]);\n        case 13: return inRange(iuv.x, CLOUD_RANGES[10]);\n        default: return vec4(0);\n    }\n}\n\nvec4 small_cloud(in vec2 uv) {\n    uv.y = 1.0 - uv.y;\n    ivec2 iuv = ivec2(uv * 16.0);\n    switch (iuv.y) {\n        case 8: case 15: return inRange(iuv.x, SMALL_CLOUD_RANGES[0]);\n        case 9: case 14: return inRange(iuv.x, SMALL_CLOUD_RANGES[1]);\n        case 10: case 13: return inRange(iuv.x, SMALL_CLOUD_RANGES[2]);\n        case 11: case 12: return inRange(iuv.x, SMALL_CLOUD_RANGES[3]);\n        default: return vec4(0);\n    }\n}\n\n// ---------------- Tree ---------------- //\nconst vec4 STEM_BROWN = vec4(200, 76, 12, 255) / 255.0;\n\nvec4 stem(in vec2 uv) {\n    ivec2 iuv = ivec2(uv * 16.0);\n    switch (iuv.x) {\n        case 7: return STEM_BROWN;\n        case 6:\n        case 8:\n        case 9: return BLACK;\n        default: return vec4(0);\n    }\n}\n\nconst int LEAF_BITMAP[256] = int[](\n    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n    0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,0,\n    0,0,1,2,2,2,1,0,1,3,3,3,1,0,0,0,\n    0,0,1,1,2,2,2,1,3,3,3,3,3,1,0,0,\n    0,0,0,0,1,2,2,1,3,3,1,1,1,1,0,0,\n    0,0,1,1,1,1,2,1,3,1,0,0,0,0,0,0,\n    0,1,3,3,3,3,1,3,3,1,1,1,1,1,0,0,\n    1,3,3,3,3,3,1,3,1,2,2,2,2,2,1,0,\n    1,3,1,1,1,3,3,1,2,2,2,2,2,2,2,1,\n    1,1,0,0,0,1,3,1,2,2,2,1,1,1,2,1,\n    0,0,0,0,0,1,3,1,2,2,1,0,0,0,1,1,\n    0,0,1,1,1,1,3,1,2,1,1,1,1,1,0,0,\n    0,1,2,2,2,2,1,1,1,3,3,3,3,3,1,0,\n    1,2,2,2,2,2,2,1,3,3,3,3,3,3,3,1,\n    1,2,2,1,1,1,2,1,3,1,1,1,3,3,3,1,\n    1,1,1,0,0,0,1,1,1,1,0,0,1,1,1,1\n);\n\nint readLeafBitMap(in vec2 uv) {\n    uv.y = 1.0 - uv.y;\n    uv *= 16.0;\n    return LEAF_BITMAP[int(uv.y) * 16 + int(uv.x)];\n}\n\nvec4 leaf(in vec2 uv) {\n    switch (readLeafBitMap(uv)) {\n        case 1: return BLACK;\n        case 2: return LIGHT_GREEN;\n        case 3: return MIDDLE_GREEN;\n        default: return vec4(0);\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}