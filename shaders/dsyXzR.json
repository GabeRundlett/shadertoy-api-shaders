{
    "Shader": {
        "info": {
            "date": "1680628788",
            "description": "I am terrible at naming things, Here's some more exciting names: Psychedelic blobatron 3000; Chromatic amorphous mass; Variegated cellular agglomeration; Prismatic morphological anomaly; Rainbow-hued protoplasmic mass; Technicolor amoeboid entity).",
            "flags": 0,
            "hasliked": 0,
            "id": "dsyXzR",
            "likes": 11,
            "name": "Colored blob (Optimized)",
            "published": 3,
            "tags": [
                "gradient",
                "blob",
                "orb",
                "colored",
                "smooth"
            ],
            "usePreview": 0,
            "username": "Peace",
            "viewed": 484
        },
        "renderpass": [
            {
                "code": "vec4 perm(vec4 x) { x = ((x * 34.0) + 1.0) * x; return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat noise(vec3 p)\n{\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * 0.02439024);\n    vec4 o2 = fract(k4 * 0.02439024);\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat specular(vec3 light_dir, vec3 ray_dir, vec3 normal)\n{\n    return max(0.0, dot(normal, normalize(light_dir + ray_dir)));\n}\n\nvec4 getColor(vec2 uv, vec3 col, float seed, float min_res)\n{\n    vec3 p = vec3(uv, iTime * .5 + seed);\n    uv += noise(p * 0.7) * 0.35 - noise(-p * 1.2) * 0.2;\n    float l = length(uv);\n    vec3 n = normalize(vec3(uv, -1.0));\n    const vec3 light_dir = vec3(0.6666, 0.6666, -0.3333);\n    vec3 view_dir = -normalize(vec3(uv, 1.0));\n    float light = 0.35 * pow(specular(light_dir, view_dir, n), 16.0);\n    float m = smoothstep(1.0, 1.0 - 3.0 / min_res, l);\n    vec3 color = pow(max(0.0, 2.0 - sqrt(l)), 10.0) * col;\n    vec3 nc = abs(n + vec3(0, 0, 0.3));\n    col = normalize(col + pow(nc, vec3(7.0)) * vec3(7)) + col * 0.35;\n    color = mix(color, col, m) + light;\n    return vec4(color, m);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float min_res = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min_res * 1.9;\n    vec4 col1 = getColor(uv * 0.98, vec3(1.0, 0.37, 1.0), 0.0, min_res);\n    vec4 col2 = getColor(uv, vec3(0.1, 0.55, 1.0), -612.734, min_res);\n    vec3 col = mix(col1.rgb, col2.rgb, clamp(0.5 + 0.5 * (col2.w - col1.w), 0.0, 1.0));\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}