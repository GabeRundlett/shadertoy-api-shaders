{
    "Shader": {
        "info": {
            "date": "1598134287",
            "description": "-T'a du jungle la? \n  - Ouai ya tarzan et jane qui viennent d'atterrir par la 1er liane du matin",
            "flags": 0,
            "hasliked": 0,
            "id": "WlSBzR",
            "likes": 3,
            "name": "大龙猫 - Quicky#043",
            "published": 3,
            "tags": [
                "quicky"
            ],
            "usePreview": 0,
            "username": "totetmatt",
            "viewed": 607
        },
        "renderpass": [
            {
                "code": "/*\nFunction from IQ website and http://mercury.sexy/\nBased on Flopine last stream\n*/\n#define ITER 64.\n#define PI 3.141592\n#define beat iTime\n#define acc 2.\n#define ttime (floor(beat)+pow(fract(beat),.5))\n#define pal(x) palette( x, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) )\nstruct obj{\n    float d;\n    int mat;\n    vec3 col;\n};\nvec3 palette(float t,vec3 a,vec3 b,vec3 c,vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nmat2 r(float a){\n    float c=cos(a),s=sin(a);\n    return mat2(c,s,-s,c);\n}\n\nvec3 iri(vec3 c, vec3 n, vec3 rd, vec3 col){\n    float fresnel = max(1.-dot(n,rd),0.);\n    c += pal(fresnel+length(col));\n     \n    return c;\n}\nvoid mo(inout vec2 p,vec2 d){\n  p = abs(p)-d;\n  if(p.y>p.x) p = p.yx;\n}\nfloat box(vec3 p, vec3 c,float sm){\n    return length(max(abs(p)-c, 0.))-(sm);\n}\n\nfloat pModPolar(inout vec2 p, float repetitions) {\n    float angle = 2.*PI/repetitions;\n    float a = atan(p.y, p.x) + angle/2.;\n    float r = length(p);\n    float c = floor(a/angle);\n    a = mod(a,angle) - angle/2.;\n    p = vec2(cos(a), sin(a))*r;\n    if (abs(c) >= (repetitions/2.)) c = abs(c);\n    return c;\n}\n\nobj liane(vec3 p){\n\n  p.yz*=r(PI/2.+sin(iTime+(p.z*.3)*.5)*.1);\n\n     p.xz *=r(+p.y*.1+cos(p.y*.1+iTime*.15));\npModPolar(p.xz,10.);\n  p.x-=sin(ttime+p.y*.4+atan(p.x,p.y)*2.)*.5+.5;\n  p-=vec3(1.51,.0,.0);\n   p.xz *=r(sin(p.y*2.+iTime));\n   \n   pModPolar(p.xz,3.);\n\n    float cd = box(p,vec3(.2,20.2,.2),.0);\n    if(sin(p.z*10.+p.y*.9+iTime*3.)>=.9){\n     return obj(cd,1,vec3(.5,0.5,-0.0));\n    }else\n    return obj(cd,2,vec3(0.1,0.9,0.3));\n}\nobj fig(vec3 p){\n     p.z-=7.;\n     p.xy *=r(iTime);\n     pModPolar(p.xy,3.);\n     p.yz *=r(-iTime);\n     mo(p.xy,vec2(4.9));\n     mo(p.yz,vec2(0.5));\n    float cd = box(p,vec3(.5,.7,.1),.1);\n    cd = abs(cd)-.1;\n    return obj(cd,1,vec3(-0.50,.9,-.1)*.2);\n}\nobj mino(obj a, obj b){\n    if(a.d < b.d) return a;\n    return b;\n}\n\nobj SDF(vec3 p) {return mino(liane(p),fig(p));}\n\n\nvec3 norm(vec3 p){\n    vec2 eps = vec2(.0001,0.);\n    return normalize(SDF(p).d - vec3(   SDF(p-eps.xyy).d,\n                                        SDF(p-eps.yxy).d,\n                                        SDF(p-eps.yyx).d) );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n     \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n     \n    vec3 ro =vec3(0.,0.,-7.),\n    p = ro,\n    rd = normalize(vec3(uv,1.)),\n    col = vec3(0);\n   \n     \n    obj O ;\n    bool hit = false;\n    float shad;\n    float t=0.;\n    for(float i=0.;i < ITER; i++) {\n        p = ro + t*rd;\n        O = SDF(p);\n        if(O.d< 0.01) {\n            hit = true;\n            shad = i / ITER;\n            break;\n        }\n        t+=O.d;\n    }\n    \n    if(hit) {\n        vec3 n = norm(p);\n        if(O.mat == 1) col = iri(O.col,n, rd, vec3(.0,.34,.60)); \n   \n        if(O.mat == 2) col =  O.col*(1.-shad);\n    \n    }\n\n    fragColor = vec4(clamp((col),0.,1.),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}