{
    "Shader": {
        "info": {
            "date": "1717119217",
            "description": "Some pretty cheap water",
            "flags": 0,
            "hasliked": 0,
            "id": "4Xc3Ds",
            "likes": 10,
            "name": "Cosine Water",
            "published": 3,
            "tags": [
                "water"
            ],
            "usePreview": 0,
            "username": "ShadeWhizz",
            "viewed": 336
        },
        "renderpass": [
            {
                "code": "#define MAX_WAVES 3\n#define SUPERPOSITION 4\n#define TAU 6.28318\n#define PHI 1.618\n\n// closed form normal would increase performance a lot\nfloat height(vec2 p, float t) {\n    float acc = 0.0;\n    for (int i = 0; i < MAX_WAVES; i++) {\n    for (int j = 0; j < SUPERPOSITION; j++) {\n        int seed = i + 5*j;\n        //float theta = TAU * noise(vec2(0.01 * t, 10.0*float(i)));\n        float theta = TAU * PHI * 10.0*float(seed);\n        float up = cos(theta) * p.x - sin(theta) * p.y;\n        float vp = sin(theta) * p.x + cos(theta) * p.y;\n        //float initial_phase = TAU * noise(vec2(0.0, 2.0*float(i))) + cos(vp);\n        float initial_phase = TAU * PHI * float(seed);\n        //float k = pow(2.0, float(i)*0.1) + 0.5;\n        //float k = pow(2.0, 1.0 + 0.4*float(i));\n        float k = pow(2.0, float(i));\n        //float k = float(i+1);\n        float phase = initial_phase + up*k + cos(vp) + 3.0*t + 0.5*k*t;\n        // its kinda like choose your artifacts, probably use noise for vp\n        float A = cos(phase)/(k*k);\n        acc += A;\n    }}\n    return acc;\n}\nvec4 hn_fdm(vec2 p, float t) {\n  float h = height(p, t);\n  vec2 vx = vec2(0.1, 0.0);\n  vec2 vy = vec2(0.0, 0.1);\n  float hx = height(p+vx, t);\n  float hy = height(p+vy, t);\n  float dx = (hx - h);\n  float dy = (hy - h);\n  // vec3 norm = normalize(vec3(-dx, -dy, dx+dy));\n  // vec3 norm = normalize(vec3(-dx/vx.x, -dy/vy.y, 1.0));\n\n  vec3 v1 = normalize(vec3(vx.x, 0.0, dx));\n  vec3 v2 = normalize(vec3(0.0, vy.y, dy));\n  vec3 norm = cross(v1, v2);\n\n  return vec4(norm, h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 uv_screen = ((uv - 0.5) * 2.0)/ iResolution.yy * iResolution.xy;\n\n    vec4 nh = hn_fdm(uv_screen* 10.0, iTime * 1.0);\n    float h = nh.w;\n    vec3 norm = nh.xyz;\n    vec3 sun_dir = normalize(vec3(-0.2, 0.4, 1.0));\n\n    //vec4 water_colour = vec4(0.2, 0.4, 0.6, 1.0);\n    vec4 water_colour = vec4(0.2, 0.25, 0.4, 1.0);\n    //vec4 sky_colour = vec4(0.2, 0.6, 0.8, 1.0);\n    vec4 sky_colour = vec4(0.2, 0.6, 0.8, 1.0);\n    vec4 specular_colour = vec4(1.0, 1.0, 1.0, 1.0);\n\n    //fragColor = vec4(norm.xyz, 1.0); return;\n    \n    if (dot(sun_dir, norm) > 0.985) {\n        fragColor = specular_colour;\n    } else {\n        float t = dot(norm, normalize(vec3(0.0, 0.0, 1.0)));\n        t = sqrt(t);\n        fragColor = mix(water_colour, sky_colour, t);\n    }\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "vec2 hash( vec2 p ) // replace this by something better\n{\n    p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n    vec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n    vec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n    vec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}