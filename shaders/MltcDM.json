{
    "Shader": {
        "info": {
            "date": "1532930982",
            "description": "hh",
            "flags": 0,
            "hasliked": 0,
            "id": "MltcDM",
            "likes": 1,
            "name": "give it to dalao",
            "published": 3,
            "tags": [
                "no"
            ],
            "usePreview": 0,
            "username": "tilendlesa",
            "viewed": 379
        },
        "renderpass": [
            {
                "code": "//============================================================================\n// PROJECT ID: <your Project ID is an integer equal to 62 + group_no.>\n//\n// GROUP NUMBER:\n//\n// STUDENT NAME: \n// NUS User ID.: \n//\n// STUDENT NAME: \n// NUS User ID.: \n//\n// STUDENT NAME: \n// NUS User ID.: \n//\n// COMMENTS TO GRADER: \n//\n//============================================================================\n\n\n// FRAGMENT SHADER FOR SHADERTOY\n// Run this at https://www.shadertoy.com/new\n// See documentation at https://www.shadertoy.com/howto\n\n// Your browser must support WebGL 2.0.\n// Check your browser at http://webglreport.com/?v=2\n\n\n//============================================================================\n// Constants.\n//============================================================================\nconst int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 5;\nconst int NUM_PLANES = 5;\nconst int NUM_SPHERES = 10;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n // Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * 3.1415926535 / 180.0; \n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 3;\n\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0. \n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that on Slides 8 and 12 of \n// Lecture 11 (Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS { \n//                   I_a * k_a + \n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\nfloat pi=180.0*FOVY/50.0;\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\n\nvoid  period(float T,out float time)\n{\n\tif(mod(iTime,T)<T/2.0)\ttime = mod(iTime,T);\n\telse\ttime = T-mod(iTime,T);\n}\nvoid InitScene()\n{\n\t\n\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 4;\n\n     //Vertical plane.\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 3.5;\n    Plane[1].materialID = 0;\n\n\tPlane[2].A = 0.0;\n    Plane[2].B = 0.0;\n    Plane[2].C = -1.0;\n    Plane[2].D = 3.5;\n\tPlane[3].materialID = 0;\n    \n\tPlane[3].A = 1.0;\n    Plane[3].B = 0.0;\n    Plane[3].C = 0.0;\n    Plane[3].D = 3.5;\n\tPlane[4].materialID = 0;\n  \n\tPlane[4].A = -1.0;\n    Plane[4].B = 0.0;\n\tPlane[4].C = 0.0;\n    Plane[4].D = 3.5;\n    Plane[4].materialID = 0;\n\n\tfloat time;\n\tfloat T = 1.5;\n\tperiod(T,time);\n\ttime = time +0.26;\n    // Center bouncing sphere.\n    Sphere[0].center = vec3( 0.0,2.0+time*1.5*cos(iTime),time*1.5*sin(iTime)); //运动轨迹\n    Sphere[0].radius = 0.2;   //球大小\n    Sphere[0].materialID = 1;\n\n\tSphere[1].center = vec3( 0.0,2.0+time*1.5*cos(iTime+1.0*60.0*3.14/180.0),time*1.5*sin(iTime+1.0*60.0*3.14/180.0)); //运动轨迹\n    Sphere[1].radius = 0.2;   //球大小\n    Sphere[1].materialID = 1;\n\n\tSphere[2].center = vec3( 0.0,2.0+time*1.5*cos(iTime+2.0*60.0*3.14/180.0),time*1.5*sin(iTime+2.0*60.0*3.14/180.0)); //运动轨迹\n    Sphere[2].radius = 0.2;   //球大小\n    Sphere[2].materialID = 1;\n\n\tSphere[3].center = vec3( 0.0,2.0+time*1.5*cos(iTime+3.0*60.0*3.14/180.0),time*1.5*sin(iTime+3.0*60.0*3.14/180.0)); //运动轨迹\n    Sphere[3].radius = 0.2;   //球大小\n    Sphere[3].materialID = 1;\n\n\tSphere[4].center = vec3( 0.0,2.0+time*1.5*cos(iTime+4.0*60.0*3.14/180.0),time*1.5*sin(iTime+4.0*60.0*3.14/180.0)); //运动轨迹\n    Sphere[4].radius = 0.2;   //球大小\n    Sphere[4].materialID = 1;\n\n\tSphere[5].center = vec3( 0.0,2.0+time*1.5*cos(iTime+5.0*60.0*3.14/180.0),time*1.5*sin(iTime+5.0*60.0*3.14/180.0)); //运动轨迹\n    Sphere[5].radius = 0.2;   //球大小\n    Sphere[5].materialID = 1;\n\t\n\n    // Circling sphere.\n//    Sphere[6].center = vec3(1.75+1.55*sin(1.5*iTime), 2.5,  0);//Z上下 X左右\n//    Sphere[6].radius = 0.2;\n//    Sphere[6].materialID = 2;\n//\n//\tSphere[7].center = vec3(-1.75-1.55*sin(1.5*iTime) , 2.5,  0 );\n//    Sphere[7].radius = 0.2;\n//    Sphere[7].materialID = 2;\n//\n//\tSphere[8].center = vec3(1.75-1.55*sin(1.5*iTime) , 1.5,  0 );\n//    Sphere[8].radius = 0.2;\n//    Sphere[8].materialID = 3;\n//\n//\tSphere[9].center = vec3(-1.75+1.55*sin(1.5*iTime) , 1.5,  0 );\n//    Sphere[9].radius = 0.2;\n//    Sphere[9].materialID = 3;\n//\n\n\n    // Silver material.\n\t\n    Material[0].k_d = vec3(0.5,0.5,0.5);\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Gold material.\n    Material[1].k_d = vec3( 1.0, 1.0, 1.0);\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n\n\n    // Green plastic material.\n    Material[2].k_d = vec3( 0.2, sin(3.0*iTime), 0.2 );\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n\n\tMaterial[3].k_d = vec3( sin(3.0*iTime), 0.2, 0.2 );\n    Material[3].k_a = 0.2 * Material[3].k_d;\n    Material[3].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3].k_rg = 0.5 * Material[3].k_r;\n    Material[3].n = 128.0;\n\n\tvec2 uv = vec2(0.0,0.0);\n\tMaterial[4].k_d = 0.2*(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)));\n    Material[4].k_a = 0.2 * Material[4].k_d;\n    Material[4].k_r = 2.0 * Material[4].k_d;\n    Material[4].k_rg = 0.5 * Material[4].k_r;\n    Material[4].n = 64.0;\n\n    // Light 0.\n    Light[0].position = vec3( 3.0, 8.0, -3.0);\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 1.0, 1.0, 1.0 );\n\n    // Light 1.\n    Light[1].position = vec3( -3.0, 8.0, 3.0);\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = vec3( 1.0, 1.0, 1.0 );\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection \n// (hitNormal).\n//计算平面和光线之间的交叉点。\n//如果有一个交点，其中光线参数t介于tmin和tmax之间，则返回true，否则返回false。\n//如果有这样的交集，则输出交叉点（hitPos）的交叉点（hitPos）和交叉点的正常向量（hitNormal）的值。\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n//计算平面和光线之间的交叉点。\n//如果有一个交叉点，其中ray参数t介于tmin和tmax之间，则返回true，否则返回false。\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the \n// smaller t, the position of the intersection (hitPos) and the normal \n// vector at the intersection (hitNormal).\n//计算球体和射线之间的交集。\n//如果有一个交叉点，其中ray参数t介于tmin和tmax之间，则返回true，否则返回false。\n//如果有一个或两个这样的交点，则输出较小的t的值，交点的位置（hitPos）和交点处的法线向量（hitNormal）。\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n\tray.o -= sph.center;\n\tfloat t0;\n\tfloat a = dot(ray.d,ray.d);\n\tfloat b = 2.0 * dot(ray.d,ray.o);\n\tfloat c = dot(ray.o,ray.o)-sph.radius*sph.radius;\n\tfloat d = b*b - 4.0*a*c;\n\tif(d<0.0)\treturn false;\n\telse if (d == 0.0)\tt0 =(-b)/(2.0*a);\n\telse \n\t{\n\t\tfloat t1 = (-b+sqrt(d))/(2.0*a);\n\t\tfloat t2 = (-b-sqrt(d))/(2.0*a);\n\t\tif(t2>0.0) t0 =t2;\n\t\telse t0 = t1;\n\t}\n\tif ( t0 < tmin || t0 > tmax ) return false;\n\tt = t0;\n    hitPos = ray.o + t0 * ray.d+ sph.center;\n    hitNormal = normalize(hitPos-sph.center);\n    /////////////////////////////////\n    return true;  // Replace this with your code.\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n\tray.o -= sph.center;\n\tfloat t0;\n\tfloat a = dot(ray.d,ray.d);\n\tfloat b = 2.0 * dot(ray.d,ray.o);\n\tfloat c = dot(ray.o,ray.o)-sph.radius*sph.radius;\n\tfloat d = b*b - 4.0*a*c;\n\tif(d<0.0)\treturn false;\n\telse if (d == 0.0)\tt0 =(-b)/(2.0*a);\n\telse \n\t{\n\t\tfloat t1 = (-b+sqrt(d))/(2.0*a);\n\t\tfloat t2 = (-b-sqrt(d))/(2.0*a);\n\t\tif(t2>0.0) t0 =t2;\n\t\telse t0 = t1;\n\t}\n\tif ( t0 < tmin || t0 > tmax ) return false;\n    /////////////////////////////////\n    return true;  // Replace this with your code.\n\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n//输入矢量L，N和V从表面指向AWAY。\n//假设所有向量L，N和V都是单位向量。\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow, \n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a + \n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n//将光线投射到场景中并返回在最近交点处计算的颜色。\n//颜色是来自所有光源的光的总和，每个光源使用Phong照明模型计算，并考虑是否从光线遮蔽了截面点。\n//如果没有interesection，则返回背景颜色，并输出hasHit为false。\n//如果有交点，则返回计算的颜色，并输出hasHit为true，交点的3D位置（hitPos），\n//交点处的法线向量（hitNormal）以及相交对象的材质的k_rg值。\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray, \n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg ) \n{\n    // Find whether and where the ray hits some object. \n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n\t//尝试将输入光线与所有平面和球体相互交叉，并记录最前面（最近）的截面。\n\t//如果有intersection，需要记录hasHitSomething，nearest_t，nearest_hitPos，nearest_hitNormal，nearest_hitMatID。\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n\t//hasHitSomething = IntersectPlane(Plane[NUM_PLANES],ray,DEFAULT_TMIN,DEFAULT_TMAX) && IntersectSphere( Sphere[NUM_SPHERES],ray, DEFAULT_TMIN,DEFAULT_TMAX);\n\tfor(int i=0;i<NUM_PLANES;i++)\n\t{\n\t\tif( IntersectPlane( Plane[i],ray,DEFAULT_TMIN,DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal ))\n\t\t{\n\t\t\tif(nearest_t>temp_t)\n\t\t\t{\n\t\t\t\tnearest_t = temp_t;\n\t\t\t\tnearest_hitPos = temp_hitPos;\n\t\t\t\tnearest_hitNormal = temp_hitNormal;\n\t\t\t\tnearest_hitMatID = Plane[i].materialID;\n\t\t\t}\n\t\t\thasHitSomething = true;\n\t\t}\n\t}\n\tfor(int i=0;i<NUM_SPHERES;i++)\n\t{\n\t\tif(IntersectSphere( Sphere[i],ray, DEFAULT_TMIN,DEFAULT_TMAX,  temp_t,temp_hitPos,temp_hitNormal))\n\t\t{\n\t\t\tif(nearest_t>temp_t)\n\t\t\t{\n\t\t\t\tnearest_t = temp_t;\n\t\t\t\tnearest_hitPos = temp_hitPos;\n\t\t\t\tnearest_hitNormal = temp_hitNormal;\n\t\t\t\tnearest_hitMatID = Sphere[i].materialID;\n\t\t\t}\n\t\t\thasHitSomething = true;\n\t\t}\n\t}\n    /////////////////////////////////\n\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point. \n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the \n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n\t//在最近的生命点上累积每个光源的光照。\n\t//它们都积累在I_local中。\n\t//对于每个光源，制作阴影射线，并检查阴影射线是否会影响最近的生命点和\n\t//光源之间的任何物体（平面和球体）。然后，调用PhongLighting（）来计算此光源的光照。\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n\tbool inShadow[NUM_LIGHTS];\n\tRay_t ShadowRay[NUM_LIGHTS];\n\tfor(int i=0;i<NUM_LIGHTS;i++)\n\t{\n\t\t\tinShadow[i] = false;\n\t\t\tShadowRay[i].o = nearest_hitPos; \n\t\t\tShadowRay[i].d = normalize(Light[i].position-nearest_hitPos);\n\t\tfor(int j=0;j<NUM_PLANES;j++)\n\t\t{\n\t\t\tif( IntersectPlane( Plane[j],ShadowRay[i],DEFAULT_TMIN,length(Light[i].position - nearest_hitPos)))\n\t\t\t\tinShadow[i] = true;\n\t\t}\n\t\tfor(int j=0;j<NUM_SPHERES;j++)\n\t\t{\n\t\t\tif(IntersectSphere( Sphere[j],ShadowRay[i], DEFAULT_TMIN,length(Light[i].position - nearest_hitPos)))\n\t\t\t{\n\t\t\t\tinShadow[i] = true;\n\t\t\t}\n\t\t}\n\t}\n\tvec3 N =  nearest_hitNormal;\n\tvec3 V =  normalize(-ray.d);\n\tfor(int i=0;i<NUM_LIGHTS;i++)\n\t{\n\tvec3 L=\tShadowRay[i].d;\n\tI_local += PhongLighting(L,N,V, inShadow[i], Material[nearest_hitMatID], Light[i]);\n\t}\n    /////////////////////////////////\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    vec3 cam_pos = vec3( 2.0* cos(iTime), 2.5,2.0*sin(iTime));//相机位置\n    vec3 cam_lookat = vec3(0.0, 2.0, 0.0 ); //镜头摇晃\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ ) \n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}