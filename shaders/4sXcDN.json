{
    "Shader": {
        "info": {
            "date": "1488189269",
            "description": "Dynamic display barrel&pincushion distortion:\nK1 < 0 is pincushion distortion.\nK1 >=0 is barrel distortion.\n\nadd comment:几个开发者关于VR畸变的一些讨论https://blog.csdn.net/dabenxiong666/article/details/78713357",
            "flags": 0,
            "hasliked": 0,
            "id": "4sXcDN",
            "likes": 23,
            "name": "barrel&pincushion distortion",
            "published": 3,
            "tags": [
                "barrelpincushiondistortion"
            ],
            "usePreview": 1,
            "username": "HelenXR",
            "viewed": 3470
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    //If you have any questions, you can send me Email:helenhololens@gmail.com\n    \n\t//get source_uv \n\tvec2 source_uv = fragCoord.xy / iResolution.xy;\n    //assume your distortion center coordinate is (0.5,0.5),you can use your distortion center instead.\n    vec2 distortion_center = vec2(0.5,0.5);\n    //Define algorithm dependent variables \n    float distortion_x,distortion_y,rr,r2,theta;\n    //define distortion coefficient K1 and K2 ,In most cases we can only adjust K1. then K2 parameters can be adjusted more perfect Effect\n    //iTime is used for Real-time change.\n    //K1 < 0 is pincushion distortion\n    //K1 >=0 is barrel distortion\n    float distortion_k1 = 1.0 * sin(iTime*0.5),distortion_k2 = 0.5;\n    vec2 dest_uv;\n    \n    //--------------------------Algorithm Start----------------------------------------\n    //The formula is derived from this video:https://www.youtube.com/watch?v=B7qrgrrHry0&feature=youtu.be\n    //and Distortion correction algorithm for Wikipedia:https://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction\n    //几个开发者关于VR畸变的一些讨论https://blog.csdn.net/dabenxiong666/article/details/78713357\n    rr = sqrt((source_uv.x - distortion_center.x)*(source_uv.x - distortion_center.x) + (source_uv.y - distortion_center.y)*(source_uv.y - distortion_center.y));\n    r2 = rr * (1.0 + distortion_k1*(rr*rr) + distortion_k2*(rr*rr*rr*rr));\n    theta = atan(source_uv.x - distortion_center.x, source_uv.y - distortion_center.y);\n    distortion_x = sin(theta) * r2 * 1.0;//1.0 is  scale factor\n    distortion_y = cos(theta) * r2 * 1.0;//1.0 is  scale factor\n    dest_uv.x = distortion_x + 0.5;\n    dest_uv.y = distortion_y + 0.5;\n    //--------------------------Algorithm End------------------------------------------  \n    \n    //Get texture from Channel0,and set dest_uv.\n    fragColor = vec4( texture( iChannel0, dest_uv).r, texture( iChannel0,dest_uv).g,texture( iChannel0,dest_uv).b, 1. );\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}