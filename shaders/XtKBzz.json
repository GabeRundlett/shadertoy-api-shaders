{
    "Shader": {
        "info": {
            "date": "1541631803",
            "description": "Coded live on twitch stream in Bonzomatic, and tidied/ported to shadertoy.\nUnedited Bonzomatic shader here: [url]https://gist.github.com/willkirkby/3136d71da8a9315748cf2e8359b7b722[/url]",
            "flags": 0,
            "hasliked": 0,
            "id": "XtKBzz",
            "likes": 9,
            "name": "[twitch] Refractive Block",
            "published": 3,
            "tags": [
                "refraction",
                "twitch"
            ],
            "usePreview": 0,
            "username": "yx",
            "viewed": 600
        },
        "renderpass": [
            {
                "code": "vec2 rotate(vec2 a, float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return vec2(\n        a.x * c - a.y * s,\n        a.x * s + a.y * c\n    );\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nfloat sdBeveledBox(vec3 p, vec3 r, float R)\n{\n    float a = sdBox(p,r);\n    p=abs(p);\n    float b = (p.x + p.y - r.x - r.y + R) / sqrt(2.);\n    float c = (p.y + p.z - r.y - r.z + R) / sqrt(2.);\n    float d = (p.z + p.x - r.z - r.x + R) / sqrt(2.);\n    float e = (p.x + p.y + p.z - r.x - r.y - r.z + R + R) / sqrt(3.);\n    return max(max(max(a,b),max(c,d)),e);\n}\n\nfloat sdCylinder(vec3 p, float r)\n{\n    return length(p.zy)-r;\n}\n\nfloat sdCappedCylinder(vec3 p, float r, float h)\n{\n    return max(sdCylinder(p,r),abs(p.x)-h);\n}\n\nfloat scene(vec3 p)\n{\n    float box = sdBeveledBox(p, vec3(1.), .1);\n    p.xz=abs(p.xz);\n    p.xz=vec2(max(p.x,p.z),min(p.x,p.z));\n    float a = sdBeveledBox(p-vec3(0,.25,0), vec3(1.1,.5,.2), .1);\n    float b = sdBeveledBox(p+vec3(0,.6,0), vec3(1.1,.15,.2), .1);\n    p.y=abs(p.y);\n    float indent = sdBeveledBox(p-vec3(1.06,.7,.7),vec3(.1),.05);\n    indent = sdCappedCylinder(p-vec3(1.06,.7,.7),.07,.1);\n    return max(min(box,max(min(a,b),p.x-1.05)),-indent);\n}\n\nfloat scene2(vec3 p)\n{\n    return -(length(p)-7.);\n    return -sdBox(p, vec3(7.));\n}\n\nfloat CAMERA_ELEVATION = 0.4;\nfloat SPIN_RATE = .3;\n#define REFRACTIVITY (sin(iTime*.5)*.5+.5)\n\nvoid cameraSpin(inout vec3 p)\n{\n    p.yz = rotate(p.yz, CAMERA_ELEVATION);\n    p.xz = rotate(p.xz, iTime*SPIN_RATE);\n}\n\nvoid cameraSpinBackwards(inout vec3 p)\n{\n    p.xz = rotate(p.xz, -iTime*SPIN_RATE);\n    p.yz = rotate(p.yz, -CAMERA_ELEVATION);\n}\n\nvec3 background(vec2 uv)\n{\n    vec3 cam = vec3(0,0,-5);\n    vec3 dir = normalize(vec3(uv,1));\n\n    float t=0.;\n    float k=0.;\n    for(int i=0;i<10;++i)\n    {\n        k = scene2(cam+dir*t);\n        t+=k;\n        if (k<.001)\n            break;\n    }\n    vec3 h = cam+dir*t;\n\n    float T = length(sin(h*2.))/sqrt(3.);\n    T=fract(T+iTime*.05);\n    T=step(.5,T);\n    vec3 color = vec3(.9)+T*.1-.2;\n    color -= smoothstep(0.,1.,length(uv))*.5;\n    return color;\n}\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy - .5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 cam = vec3(0,0,-10);\n    vec3 dir = normalize(vec3(uv,2.5));\n    vec3 fwd = vec3(0,0,1);\n\n    cameraSpin(cam);\n    cameraSpin(dir);\n    cameraSpin(fwd);\n\n    float t=0.;\n    float k=0.;\n    for(int i=0;i<100;++i)\n    {\n        k = scene(cam+dir*t);\n        t+=k;\n        if (k<.001)\n            break;\n    }\n    vec3 h = cam+dir*t;\n    vec2 o = vec2(.001, 0);\n    vec3 worldNormal = normalize(vec3(\n        scene(h+o.xyy)-scene(h-o.xyy),\n        scene(h+o.yxy)-scene(h-o.yxy),\n        scene(h+o.yyx)-scene(h-o.yyx)\n    ));\n    vec3 eyeNormal = worldNormal;\n    cameraSpinBackwards(eyeNormal);\n\n    vec3 specular = vec3(0);\n\n    if (k < .001)\n    {\n        uv += reflect(vec3(0,0,1),eyeNormal).xy * REFRACTIVITY * .3;\n        specular += pow(1.-max(0.,dot(-dir,worldNormal)),5.) * REFRACTIVITY * .5;\n    }\n\n    out_color.rgb = background(uv) + specular;\n    out_color.rgb = pow(out_color.rgb, vec3(1.2,1.1,1.0));\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}