{
    "Shader": {
        "info": {
            "date": "1537172264",
            "description": "phone",
            "flags": 0,
            "hasliked": 0,
            "id": "4tKyzc",
            "likes": 0,
            "name": "phone sphere",
            "published": 3,
            "tags": [
                "tutorial"
            ],
            "usePreview": 0,
            "username": "wangyue66",
            "viewed": 461
        },
        "renderpass": [
            {
                "code": "\nconst vec3 AMBIENT = vec3(0.2, 0.2, 0.2);\nconst vec3 LIGHT_DIR = vec3(1.0, -1.0, -0.1);\nconst vec3 LIGHT_COL = vec3(1.0, 0.0,0.0);\n\nvec3 DrawSphere(vec2 uv, vec2 p, float r)\n{\n    float dis = length(uv - p);\n    if(dis < r)\n    {\n        float z = sqrt(r*r - uv.x*uv.x - uv.y* uv.y);\n        vec3 n = normalize(vec3(uv,z));\n        vec3 rotDir = vec3(sin(iTime), -0.4, cos(iTime));\n        vec3 dir = normalize(rotDir);\n        float diffuse = max(dot(dir, n),0.0);\n        return diffuse * LIGHT_COL + AMBIENT;\n    }\n    return vec3(0.0,0.0,0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n//    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n//    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 sphereCol = DrawSphere(uv, vec2(0.0,0.0) , 0.5);\n    \n    vec3 col =  sphereCol;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}