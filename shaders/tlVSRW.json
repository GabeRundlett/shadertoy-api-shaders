{
    "Shader": {
        "info": {
            "date": "1582309618",
            "description": "Light  Excursion",
            "flags": 32,
            "hasliked": 0,
            "id": "tlVSRW",
            "likes": 13,
            "name": "Light  Excursion",
            "published": 3,
            "tags": [
                "raymarching",
                "particle"
            ],
            "usePreview": 0,
            "username": "butadiene",
            "viewed": 672
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Time varying pixel color\n    vec3 col =\ttexture( iChannel0, uv ).xyz;\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float PI = 3.141592;\n\nvec2 rot(vec2 p,float r){\n\tmat2 m = mat2(cos(r),sin(r),-sin(r),cos(r));\n\treturn m*p;\n}\n\n\nfloat rand(vec2 st){\n\treturn fract(sin(dot(st,vec2(12.3456,78.9012)))+45678.9012);\n}\n\nfloat noise(vec2 st){\n\tvec2 i = floor(st);\n\tvec2 f = fract(st);\n\tfloat a = rand(i+vec2(0.0,0.0));\n\tfloat b = rand(i+vec2(1.0,0.0));\n\tfloat c = rand(i+vec2(0.0,1.0));\n\tfloat d = rand(i+vec2(1.0,1.0));\n\n\tvec2 u = f*f*(3.0-2.0*f);\n\treturn mix(a,b,u.x)+(c-a)*u.y*(1.0-u.x)+(d-b)*u.y*u.x;\n}\n\nfloat fbm(vec2 st){\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100.);\n\tfor(int i = 0;i<5;i++){\n\t\tv = noise(st)*a;\n\t\tst = rot(st*2.,0.5)+shift;\n\t\ta*=0.5;\n\t}\n\treturn v;\n}\n\nvec3 hsv(float h,float s,float v){\n\treturn ((clamp(abs(fract(h+vec3(0.0,1.0,2.0)/3.0)),0.0,1.0)-1.0)*s+1.0)*v;\n}\n\nvec2 pmod(vec2 p,float r){\n\tfloat a = atan(p.x,p.y)+PI/r;\n\tfloat n = 2.0*PI/r;\n\ta = floor(a/n)*n;\n\treturn rot(p,-a);\n}\n\nfloat cylin(vec3 p,float r,float s){\n\tfloat ra = length(p.xy)-r;\n\tfloat kz = abs(p.z)-s;\n\treturn length(max(vec2(ra,kz),0.0))-min(max(-ra,0.0),max(-kz,0.0));\n}\nvec4 dist(vec3 p){\n\tp.y += 0.2+sin(iTime)*0.;\n\tp.zy = rot(p.zy,0.3*p.z+sin(iTime*1.2)*0.1);\n\tp.zx = rot(p.zx,0.3*p.z+cos(iTime*0.9)*0.1);\n\t//p.y -=0.2;\n\tfloat kn = 0.3;\n\tfloat kt = 0.01;\n\tp.xy = rot(p.xy,iTime*0.2);\n\tp.xyz += 5.*(vec3(fbm(p.xz*kn+10.+iTime*kt),0.1*fbm(p.xz*kn+p.y*+10.),fbm(p.zx*kn-iTime*kt)));\n\tp.z += iTime;\n\n\tp.xy  = pmod(p.xy,6.0);\n\n\tfloat k = 0.5;\n\tp.z = mod(p.z,k)-0.5*k;\n\tfloat id = floor(p.z/k-0.5*k);\n\tvec2 sid = vec2(0.0);\n\tfor(int i = 0;i<8;i++){\n\t\tsid += 0.5*(sign(p.xy)+1.0)*pow(2.0,float(i)+1.0);\n\t\tp.xy = abs(p.xy)-0.1+0.02*(rand(vec2(float(i)+id))-0.5);\n\t}\n\tfloat d = cylin(p,0.004,0.1);\n\tfloat h = rand(sid+id);\n\treturn vec4(hsv(h,1.0,1.0),d);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.xy;\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    p.y *= iResolution.y/iResolution.x;\n\tvec3 se = 1.0*vec3(0.5,0.0,0.0);\n\tvec3 ta = vec3(-0.3,0.0,0.0)+se;\n\tfloat ra = 0.1;\n\tfloat kt = iTime*0.0;\n\tvec3 ro = vec3(0.0,0.0,1.0)+se;\n\t//ro +=\n\tvec3 cdir = -normalize(ro-ta);\n\tvec3 up = vec3(0.0,1.0,.0);\n\tvec3 side = cross(cdir,up);\n\tup = cross(side,cdir);\n\tfloat fov = 1.0;\n\tvec3 rd = normalize(fov*cdir+p.y*up+p.x*side);\n\tfloat t  = 0.01;\n\tfloat d = 0.0;\n\tvec3 ac= vec3(0.0);\n\t\tfor(int i = 0;i<69;i++){\n\t\t\tvec4 c = dist(ro+rd*t);\n\t\td = c.w;\n\t\tt +=d;\n\t\tac += c.xyz*exp(abs(d)*-18.);\n\t}\n\tvec3 col = vec3(0.0);\n\tcol = vec3(ac*0.08);\n\tcol *= vec3(0.6,1.0,1.0);\n\tvec3 bcol =  texture( iChannel0,uv).xyz;\n\tcol = mix(bcol,col,0.3);\n\tfragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}