{
    "Shader": {
        "info": {
            "date": "1637604839",
            "description": "An infinite zoom into the mandelbrot set. Coloring sadly breaks after a while, but the fractal continues on forever.",
            "flags": 0,
            "hasliked": 0,
            "id": "7ly3Wh",
            "likes": 25,
            "name": "infinite mandelbrot zoom",
            "published": 3,
            "tags": [
                "mandelbrot",
                "zoom",
                "infinite"
            ],
            "usePreview": 0,
            "username": "peabrainiac",
            "viewed": 917
        },
        "renderpass": [
            {
                "code": "// zoom locations. comment this one and uncomment one of the others to zoom somewhere else\n// needle\nconst vec2 MINIBROT_C = vec2(-1.98542425,0.0);\nconst vec2 MINIBROT_SCALE = vec2(5.81884941e-5,0.0);\nconst vec2 MINIBROT_A = vec2(-161.347726,0.0);\nconst float MINIBROT_PERIOD = 5.0;\n\n// seahorse valley 1\n/*const vec2 MINIBROT_C = vec2(-0.862612214,-0.274371722);\nconst vec2 MINIBROT_SCALE = vec2(-5.33653763e-6,-1.60082654e-5);\nconst vec2 MINIBROT_A = vec2(187.960106,92.5553918);\nconst float MINIBROT_PERIOD = 12.0;*/\n\n// seahorse valley 2\n/*const vec2 MINIBROT_C = vec2(-0.722551290,-0.260810603);\nconst vec2 MINIBROT_SCALE = vec2(1.73516282e-5,-6.24633482e-6);\nconst vec2 MINIBROT_A = vec2(157.460179,-16.4403340);\nconst float MINIBROT_PERIOD = 21.0;*/\n\n// elephant valley\n/*const vec2 MINIBROT_C = vec2(0.34462359,0.0564018310);\nconst vec2 MINIBROT_SCALE = vec2(-2.21366831e-6,8.05314001e-7);\nconst vec2 MINIBROT_A = vec2(-113.398177,231.589991);\nconst float MINIBROT_PERIOD = 17.0;*/\n\n// alternating whatever\n/*const vec2 MINIBROT_C = vec2(-0.162415772,-1.04133681);\nconst vec2 MINIBROT_SCALE = vec2(-1.07141152e-6,1.02473337e-6);\nconst vec2 MINIBROT_A = vec2(30.7304447,-1057.92453);\nconst float MINIBROT_PERIOD = 24.0;*/\n\nconst float MINIBROT_R = 8.0;\nconst float MINIBROT_R2 = 32.0;\n\nconst int ITER = 500;\nconst float BAILOUT = 32.0;\n\nvec2 cmul(vec2 a, vec2 b){\n    return vec2(dot(a,vec2(1.0,-1.0)*b),dot(a,b.yx));\n}\n\nvec2 cdiv(vec2 a, vec2 b){\n    return vec2(dot(a,b),dot(a.yx,vec2(1.0,-1.0)*b))/dot(b,b);\n}\n\n// sort of a minimal example of an algorithm I've been working on for a while now.\n// this version only supports zooming into the same minibrot again and again, but\n// there's really nothing stopping one from changing the parameters for each minibrot,\n// and adjusting them automatically as one explores the fractal.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    float t = iTime*iTime/(iTime+1.0);\n    float s = -log(length(MINIBROT_SCALE));\n    int n = int(ceil(t/s));\n    float zoom = exp(-(t-s*float(n)));\n    float theta = float(n)*atan(MINIBROT_SCALE.y,MINIBROT_SCALE.x);\n    vec2 C = cmul(MINIBROT_C,cdiv(vec2(1.0,0.0),vec2(1.0,0.0)-MINIBROT_SCALE));\n    vec2 dc = vec2(cos(theta),-sin(theta))*10.0*zoom/length(iResolution);\n    vec2 c = C+cmul(dc,vec2(1.0,-1.0)*(fragCoord-iResolution.xy*0.5));\n    while (n>0&&dot(c-MINIBROT_C,c-MINIBROT_C)>MINIBROT_R2){\n        c = MINIBROT_C+cmul(c,MINIBROT_SCALE);\n        dc = cmul(dc,MINIBROT_SCALE);\n        n--;\n    }\n    \n    vec2 z = vec2(0.0);\n    vec2 dz = dc;\n    int i = 0;\n    float i2 = 0.0;\n    float escapeRadius = n==0?BAILOUT:MINIBROT_R;\n    while(i<ITER){\n        if (dot(z,z)>escapeRadius){\n            if (n==0){\n                break;\n            }else{\n                z = cdiv(z,MINIBROT_A);\n                dz = cdiv(dz,MINIBROT_A);\n                c = MINIBROT_C+cmul(c,MINIBROT_SCALE);\n                dc = cmul(dc,MINIBROT_SCALE);\n                n--;\n                i2 *= MINIBROT_PERIOD;\n                float escapeRadius = n==0?BAILOUT:MINIBROT_R;\n            }\n        }\n        dz = 2.0*cmul(dz,z)+dc;\n        z = cmul(z,z)+c;\n        i++;\n        i2++;\n    }\n    // mixture of distance estimation and logarithmic coloring. sadly, both break after a while.\n    float d = !(i<ITER)?0.0:sqrt(dot(z,z)/dot(dz,dz))*0.5*log(dot(z,z));\n    fragColor = vec4(vec3((1.0-d)*(0.5+0.5*cos(log(1.0+i2*2.0e-5)))),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}