{
    "Shader": {
        "info": {
            "date": "1563747133",
            "description": "dB range: [DB_MIN..DB_MAX]\nnorm.freq range: [0..1/2*Fs]\nang.freq range:  [W_MIN..W_MAX]\nTL:Phase & Mag - color:phase, brightness: dB\nTR:Z-Domain Mag - x: norm.freq, y: dB\nBL:S-Domain Mag - x: ang.freq, y: dB\nBR:Phase - x: norm.freq, y: phase [-PI..PI]",
            "flags": 32,
            "hasliked": 0,
            "id": "WtsSzX",
            "likes": 6,
            "name": "transfer function visualizer",
            "published": 3,
            "tags": [
                "complex",
                "domaincoloring",
                "transferfunction"
            ],
            "usePreview": 0,
            "username": "zzggbb",
            "viewed": 470
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159\n#define DB_MIN -30.0\n#define DB_MAX 30.0\n#define W_MIN 0.01\n#define W_MAX 100.0\n#define N 4\n\n// convert HSV color space to RGB\nvec3 rgb(vec3 hsv) {\n  float h = hsv.x;\n  float s = hsv.y;\n  float v = hsv.z;\n    \n  float r, g, b;\n\n  float i = floor(h * 6.0);\n  float f = h * 6.0 - i;\n  float p = v * (1.0 - s);\n  float q = v * (1.0 - f * s);\n  float t = v * (1.0 - (1.0 - f) * s);\n\n  switch (int(i) % 6) {\n    case 0: r = v, g = t, b = p; break;\n    case 1: r = q, g = v, b = p; break;\n    case 2: r = p, g = v, b = t; break;\n    case 3: r = p, g = q, b = v; break;\n    case 4: r = t, g = p, b = v; break;\n    case 5: r = v, g = p, b = q; break;\n  }\n\n  return vec3(r, g, b);\n}\n\n// scale 'x' from linear range [x1,x2] to linear range [y1,y2]\nfloat linscale(float x, float x1, float x2, float y1, float y2) {\n\treturn (y2-y1)/(x2-x1) * (x-x2) + y2;\n}\n\n// return a value oscillating between '[m]in' and '[M]ax'\nfloat osc(float m, float M) {\n\treturn linscale(sin(iTime), -1.0, 1.0, m, M);\n}\n\n// smooth pulse function of 'x', with center 'c', and width 'w'  \nfloat cubic_pulse(float x, float c, float w) {\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\n// step pulse function of 'x' with center 'c' and width 'w'\nfloat step_pulse(float x, float c, float w) {\n\treturn step(c-w/2.0, x) - step(c+w/2.0, x);\n}\n\n// complex number routines\n\n// zinv(z) = z^-1\nvec2 zinv(vec2 z) {\n\treturn vec2(z.x, -z.y) / dot(z,z);\n}\n\n// zmul(z1,z2) = z1 * z2\nvec2 zmul(vec2 z1, vec2 z2) {\n\treturn mat2(z1,-z1.y,z1.x) * z2;  \n}\n\n// zpow(z,p) = z^p\nvec2 zpow(vec2 z, float p) {\n\tfloat r = pow(length(z), p);\n    float t = atan(z.y, z.x) * p;\n    return r * vec2(cos(t), sin(t));\n}\n\n// zrot(z) = z * e^(i*dt)\nvec2 zrot(vec2 z, float dt) {\n\tfloat r = length(z);\n    float t = atan(z.y, z.x) + dt;\n    return r * vec2(cos(t), sin(t));\n}\n\n// (z - r0 e^(jt0) ) * (z - r1 e^(jt1) ) *...* (z - rN e^(jtN) )\nvec2 chain(vec2 z, float t[N], float r[N]) {\n\tvec2 prod = vec2(1.0);\n    for (int i=0; i<N; i++) {\n\t\tprod = zmul(prod, z - zrot(vec2(r[i], 0), t[i]));\n\t}\n    return prod;\n}\n\n//\n//\n// Define the transfer function to visualize.\n//\n//\n// This is what you want to play around with!\n//\n//\nvec2 H(vec2 z) {\n    \n    /*\n\t// moving bandpass filter\n    float theta = osc(-PI/2.0, PI/2.0);\n    z = zrot(z, theta);\n\tvec2 h1 = vec2(0.4, 0.7) - z;\n    vec2 h2 = vec2(-0.4, 0.7) - z;\n    vec2 p1 = vec2(0.0, 0.98) - z;\n    return zmul(zmul(h1, h2), zinv(p1));\n    */\n    return zinv(1.0 + z);\n    \n\t// proportionally controlled object\n    /*\n    float x0 = -5.0;\n    float dx0 = 0.0; \n    float m = 5.0;\n    float kp = -1.0;\n    return zmul(z*x0 + dx0, zinv(-kp/m + zpow(z, 2.0) ) );\n    */\n    \n    //return 3.0 * (z + vec2(4.0, 0.0)) * zinv(zpow(z, 2.0) + 2.0*z + vec2(5.0,0.0) );\n\t\n    /*\n    const float t[N] = float[](PI/5.0, 2.0*PI/5.0, 3.0*PI/5.0, 4.0*PI/5.0);\n    const float r[N] = float[](0.9, 0.85, 0.85, 0.9);\n\treturn zinv(chain(z, t, r));\n    */\n    \n    //return zinv(zmul(z - zrot(ru,PI/4.0), z - zrot(ru, 3.0*PI/4.0)));\n\t//return zinv(vec2(1,0) - zpow(z, -1.0) - 3.0*zpow(z, -2.0) - zpow(z, -3.0));\n\n}\n\n// Calculate the RGB color of a complex number.\n// Brightness corresponds to the magnitude.\n// Color corresponds to the phase.\n// The HSV color space easily gives us this encoding.\nvec3 color(vec2 z) {\n    float theta = atan(z.y, z.x);\n    float mag = length(z);\n    float db = 20.0 * log(mag) / log(10.0);\n    float norm_db = linscale(db, DB_MIN, DB_MAX, 0.0, 1.0);\n    \n\tfloat h = linscale(theta, -PI, PI, 0.0, 1.0);\n    float s = 1.0; // full saturation\n    float v = norm_db;\n    return rgb(vec3(h,s,v));\n}\n\nvec2 zscale(vec2 z, vec4 space) {\n    vec2 o = space.xy;\n    vec2 u = space.zw;\n\tvec2 c = z - o;\n    vec2 s = vec2(c)/2.0;\n    if (abs(u.x) > 0.001) {\n    \ts.x /= abs(u.x);\n    }\n    if (abs(u.y) > 0.001) {\n    \ts.y /= abs(u.y);\n    }\n    return s;\n}\n\nvec4 zcomp(vec4 i, vec4 o) {\n\treturn vec4(i.xy + i.zw*o.xy, i.zw*o.zw);\n}\n\nvoid mainImage(out vec4 rgba, in vec2 pq) {\n    vec2 R = iResolution.xy;   \n    vec2 uv = pq/R;\n    vec2 mn = iMouse.xy/R;\n    \n\tvec3 col;\n    \n    // top left, phase and magnitude plot\n    if (uv.x < 0.5 && uv.y > 0.5) {    \n        //vec2 z = //zscale(xy, vec4(-0.5, 0.5, 0.0, 1.0));\n        //float ring = cubic_pulse(length(z), 1.0, 0.01);\n\t\t//col = mix(color(H(z)), vec3(1.0), ring);\n        vec2 z = vec2(uv.x*2.0, uv.y*2.0-1.0);\n        col = color(H(z));\n\t}\n    \n    // top right, magnitude plot\n    if (uv.x > 0.5 && uv.y > 0.5) {\n        float theta = linscale(uv.x, 0.5, 1.0, 0.0, PI);\n        float y = linscale(uv.y, 0.5, 1.0, 0.0, 1.0);\n        vec2 z = vec2(cos(theta), sin(theta));\n        float mag = length(H(z));\n        float db = 20.0*log(mag) / log(10.0);\n        float norm_db = linscale(db, DB_MIN, DB_MAX, 0.0, 1.0);\n        float curve_height = 0.01 + 2.0*abs(dFdx(norm_db));\n        float curve = cubic_pulse(y, norm_db, curve_height);\n        vec3 bg = vec3(norm_db);\n        col = mix(bg, vec3(1), curve);\n    }\n    \n    // bottom right, phase plot\n    if (uv.x > 0.5 && uv.y < 0.5) {\n    \tfloat theta = linscale(uv.x, 0.5, 1.0, 0.0, PI);\n        float y = linscale(uv.y, 0.0, 0.5, 0.0, 1.0);\n        vec2 z = vec2(cos(theta), sin(theta));\n        vec2 h = H(z);\n        float phase = atan(h.y, h.x);\n        float norm_phase = linscale(phase, -PI, PI, 0.0, 1.0);\n        float curve_height = 0.01 + 2.0*abs(dFdx(norm_phase));\n        float curve = cubic_pulse(y, norm_phase, curve_height);\n        vec3 bg = rgb(vec3(norm_phase, 1.0, 1.0));\n        col = mix(bg, vec3(1), curve);\n    }\n  \n    // bottom left, bode plot\n    if (uv.x < 0.5 && uv.y < 0.5) {\n        float y = linscale(uv.y, 0.0, 0.5, 0.0, 1.0);\n    \tfloat logw = linscale(uv.x, 0.0, 0.5, log(W_MIN)/log(10.0), log(W_MAX)/log(10.0));\n        float w = pow(10.0, logw);\n        \n        vec4 uv_bode = vec4(0.25, 0.25, 0.5, 0.5);\n        vec2 slice_direction = zscale(mn, uv_bode);\n        \n        vec2 jw = vec2(0.0, w);\n        float mag = length(H(jw));\n        float db = 20.0 * log(mag) / log(10.0);\n        float norm_db = linscale(db, DB_MIN, DB_MAX, 0.0, 1.0);\n        float curve_height = 0.01 + 2.0*abs(dFdx(norm_db));\n        float curve = cubic_pulse(y, norm_db, curve_height);\n        vec3 bg = vec3(norm_db);\n        col = mix(bg, vec3(1), curve);\n    }\n    \n    /*\n    float h_line = step_pulse(uv.y, 0.5, 0.005*r);\n    float v_line = step_pulse(uv.x, 0.5, 0.005);\n    col += vec3(1) * (h_line + v_line);\n    */\n    \n\trgba = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}