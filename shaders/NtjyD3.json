{
    "Shader": {
        "info": {
            "date": "1650329707",
            "description": "for electrostatics",
            "flags": 0,
            "hasliked": 0,
            "id": "NtjyD3",
            "likes": 3,
            "name": "Electric field demo",
            "published": 3,
            "tags": [
                "physics",
                "electrostatics",
                "electricfield"
            ],
            "usePreview": 0,
            "username": "RayWorld",
            "viewed": 258
        },
        "renderpass": [
            {
                "code": "vec3 hsv_to_rgb(float H, float S, float V) {\n    float C = (V/100.0)*(S/100.0);\n    float X = C * (1.0 - abs(mod(H / 60.0 , 2.0) - 1.0));\n    float m = (V/100.0)- C;\n    vec3 O = vec3(0.0);\n    if(0.0 <= H && H < 60.0) O = vec3(C,X,0.0);\n    if(60.0 <= H && H < 120.0) O = vec3(X,C,0.0);\n    if(120.0 <= H && H < 180.0) O = vec3(0.0,C,X);\n    if(180.0 <= H && H < 240.0) O = vec3(0.0,X,C);\n    if(240.0 <= H && H < 300.0) O = vec3(X,0.0,C);\n    if(300.0 <= H && H < 360.0) O = vec3(C,0.0,X);\n    O += vec3(m);\n    return O;\n}\n// modify this list: vec3(uv x, uv y, charge)\nvec3[] charges = vec3[](vec3(0.25, 0.5, 1.0),vec3(0.75,0.5,-1.0));\n\nvec2 coloumbsLaw(vec2 measure) {\n    int l = charges.length();\n    vec2 sum = vec2(0.0);\n    for(int i = 0; i<l; i++) {\n        vec2 offset = measure - charges[i].xy;\n        float sqMag = dot(offset, offset);\n        if (sqMag <= 0.000001) return vec2(0.0);\n        sum += charges[i].z * offset / sqMag;\n    }\n    return sum;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // calculate force at pixel\n    vec2 direction = coloumbsLaw(uv);\n    //default color\n    vec3 col = vec3(0.0);\n    if (direction != vec2(0.0)) {\n        col = hsv_to_rgb(mod(degrees(atan(direction.y, direction.x))+360.0,360.0), 100.0 / (1.0 + exp(3.0-length(direction))), 100.0);\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}