{
    "Shader": {
        "info": {
            "date": "1720458857",
            "description": "copy from https://glslsandbox.com/e#90779.0",
            "flags": 0,
            "hasliked": 0,
            "id": "l3KSDG",
            "likes": 3,
            "name": "fractal geometry",
            "published": 3,
            "tags": [
                "fractal"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 95
        },
        "renderpass": [
            {
                "code": "\n\nprecision highp float;\n\n#define time iTime\n\nuniform vec2 mouse;\n\n\nint fISequencer(void){\n\n\nfloat nTime =.1*time;\nvec4 VMouse =vec4((mouse -0.5) *2.0, 0, 0);\n\tint iCycle =100, iTimePerSQ =5;\n\tint iSQ =int(floor(mod(nTime, float(iCycle)) /float(iTimePerSQ)));\n\treturn iSQ;\n}\n\nfloat fNGoverner(void){\n\nfloat nTime =.1*time;\nvec4 VMouse =vec4((mouse -0.5) *2.0, 0, 0);\n\tint iCycle =120;\n\tfloat nGV =mod(nTime, float(iCycle)) /float(iCycle);\n\treturn nGV;\n}\n\nint iCounter;\nint fICounter(void){\n\treturn iCounter++;\n}\n\nvec4 fVLissajous(float nLJ){\n\tvec4 VCycle =vec4(19,17,13,11);\n\tVCycle *=VCycle.x +VCycle.y +VCycle.z +VCycle.w;\n\tVCycle *=acos(-1.0) *2.0;\n\tvec4 VLS =sin(VCycle *nLJ);\n\treturn VLS;\n}\n\nfloat fNRandom(float nIN){\n\tvec4 VSeed =fract(sqrt(vec4(2,3,5,7)));\n\tfloat nRandom =fract(sin(VSeed.x *nIN +VSeed.y));\n\treturn nRandom;\n}\n\nfloat fNRandom(vec2 V2IN){\n\tvec4 VSeed =fract(sqrt(vec4(2,3,5,7)));\n\tfloat nRandom =fract(sin(dot(VSeed.xy, V2IN) +VSeed.z));\n\treturn nRandom;\n}\n\nfloat fNRandom(vec3 V3IN){\n\tvec4 VSeed =fract(sqrt(vec4(2,3,5,7)));\n\tfloat nRandom =fract(sin(dot(VSeed.xyz, V3IN) +VSeed.w));\n\treturn nRandom;\n}\n\nfloat fNRandom(vec4 VIN){\n\tvec4 VSeed =fract(sqrt(vec4(2,3,5,7)));\n\tfloat nRandom =fract(sin(dot(VSeed, VIN)));\n\treturn nRandom;\n}\n\nfloat fNFractal(vec2 V2N, vec2 V2C){\n\tint iT;\n\tfor(int I =0; I <100; I++){\n\t\tif(V2N.x >10.0)\tbreak;\n\t\tV2N =vec2(V2N.x *V2N.x -V2N.y *V2N.y +V2C.x, 2.0 *V2N.x *V2N.y +V2C.y);\n\t\tiT++;\n\t}\n\treturn float(iT);\n}\n\nvec4 fVColor(vec4 VP){\n\tvec4 VC =vec4(1);\n\n\n\n\t{\n\t\tfloat nC;\n\t\tint iSQ =fISequencer();\n\n          // \tuncomment to mix them\t\n\t\t\n\t//\tnC +=sin(VP.x) *sin(VP.y) *sin(VP.w);\n\t\t\n\t\t\n\t\t\n\t\n\t\t\n\t\t\n\t\tnC +=atan(VP.x, VP.y) +length(VP.xy) -VP.w;\n\t\tnC +=atan(VP.x, VP.y) +length(VP.xy) *sin(VP.w);\n\t//\tnC +=(VP.x +sin(VP.y *2.0 +VP.w)) *(VP.y +sin(VP.x *2.0 +VP.w));\n\t//\tnC +=atan(VP.x +0.5, VP.y) *atan(VP.x -0.5, VP.y) +VP.w;\n\t//\tnC +=log(abs(VP.x)) +log(abs(VP.y)) +VP.w;\n\t//\tnC +=tan(VP.x) +tan(VP.y) +VP.w;\n\t//\tnC +=sin(atan(VP.x, VP.y) *3.0 +VP.w) +length(VP.xy) -VP.w;\n\t//\tnC +=length(VP.xy -fVLissajous(VP.w *1e-4).xy);\n\t//\tnC +=fNRandom(floor(VP.xy *16.0)) +VP.w;\n\t\tnC +=fNFractal(VP.xy, sin(vec2(2,3) *VP.w));\n\t\tnC +=fNFractal(sin(vec2(2,3) *VP.w), VP.xy);\t\n\t\t\n\n\t\tnC =sin(nC *16.0);\n\t\tVC.rgb =vec3(1) *step(nC, 0.0);\n\t}\n\treturn VC;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n vec2 uv = fragCoord/iResolution.xy-0.5;\n uv*=5.5;\n   uv=abs(uv);\n    uv=(uv.x<uv.y)?uv.xy:uv.yx;\n    float t=iTime;\n    uv*=mat2(cos(t),sin(t),-sin(t),cos(t));\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).xyz;\n    \n\tvec4 VColor =vec4(1), VP =vec4(uv, 0, time);\n\n\tVColor =fVColor(VP);\n\n\tfragColor =VColor*vec4(vec3(0,1.,0.),0.);\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}