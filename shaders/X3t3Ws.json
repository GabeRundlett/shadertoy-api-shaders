{
    "Shader": {
        "info": {
            "date": "1721015795",
            "description": "You start with something in mind ... and get this instead",
            "flags": 8,
            "hasliked": 0,
            "id": "X3t3Ws",
            "likes": 6,
            "name": "Formant Medley",
            "published": 3,
            "tags": [
                "sound",
                "formants",
                "rhythm"
            ],
            "usePreview": 0,
            "username": "dray",
            "viewed": 136
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, in vec2 U )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = U/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    O = vec4(col,1.0);\n    \n    O += float(int[](49,73,70,0,62,65,126,127,48,12,1)[int[](3,0,1,1,2,3,4,5,5,4,3,6,10,10,6,3,7,8,9,7,3,7,5,5,4,3,3)[int(U)/4-2]]>>int(U.y)/3&1);\n\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI (3.14159265)\n#define TAU (PI*2.)\n\n#define SINC(X) (sin(X)/(X))\n\nint inoisei(int a) {\n  a = (a * 54321) ^ (a * 14873);\n  a ^= a >> 16; // graycode\n  a ^= a >> 8;\n  a ^= a >> 4;\n  a ^= a >> 2;\n  a ^= a >> 1;\n  return a & 65535;\n}  \n\nfloat noisei(int a) {\n  return float( inoisei(a) & 65535 ) / 65536. ;\n}\n\nfloat noise(float a) { return noisei(int(a*1234.)); }\n\n#define RND0(L,H,IN) (noisei(IN)*(H-L)+L)\n#define RND(L,H,IN) (noise(IN)*(H-L)+L)\n\n#define FS iSampleRate\n\nfloat tonnos(float t,float f) {\n    float a = t*f;\n    int b = int(a);\n    return mix(noisei(b),noisei(b+1),smoothstep(0.,1.,fract(a))); // crude filter\n}\n\n\n\n#define FMT(FC,VOL,Q) max( 0., VOL - max(FC/har,har/FC) * Q )\n\nfloat voice(float time,float fc,float f1,float v1,float q1,float f2,float v2,float q2/*,float f3,float v3,float q3*/) {\n  float oo = 0.;\n  int cnt = 0;\n  for ( float har = fc; har < 12e3 && cnt++ < 30; har += fc ) {\n    oo += sin(TAU*time*har) * fc/har * ( \n      FMT(f1,v1,q1)  + FMT(f2,v2,q2)  // + FMT(f2,v2,q2)\n    );\n  }\n // oo += 1.*tonnos(FS*time*PI,f1);\n  return oo;\n}\n\nfloat voiceN3(float time,float fc1,float fc2,float fc3,float f1,float v1,float q1,float f2,float v2,float q2) {\n  return voice(time,fc1,f1,v1,q1,f2,v2,q2)+voice(time,fc2,f1,v1,q1,f2,v2,q2)+voice(time,fc3,f1,v1,q1,f2,v2,q2);\n}\n\n#define OSC(L,H,F) ((sin(TAU*gtime*(F))+1.)*.5*((H)-(L))+(L))\n\n/*\n#define F_i  SF( 290., 2200. )\n#define F_I  SF( 375., 2000. )\n#define F_u  SF( 340., 1250. )\n#define F_uu SF( 400., 1100. )\n#define F_o  SF( 425., 1000. )\n#define F_ee SF( 400., 2050. )\n#define F_cc SF( 560., 560. )\n#define F_A  SF( 690., 1400. )\n#define F_a  SF( 850., 1250. )\n#define F_ae SF( 875., 1500. )\n\n#define zSF(A,B)  A, 2.,.5, B, 2., .5 \n*/\n\n\n#define TT .5\n\n#define WHEN(T,CODE) if ( time < (T) ) { CODE; time = 10000.; } time -= (T);\n\nfloat vc1(float time,float FF) {\n\n    float f1, f2, notet, tt, fc, vc;\n\n#define SF(F,A,B) \\\n    if (fc==0.) fc=F, f1=A, f2=B; \\\n    if ( time < TT ) { \\\n        notet = TT - time; \\\n        tt = min( 1., (time)*4. ); \\\n        vc = voice( notet, \\\n            F - (fc-F)*time/2. , \\\n            mix(f1,A,tt), 5., 3.5 , \\\n            mix(f2,B,tt), 4., 3. ); \\\n        time += 1000.; \\\n    } \\\n    time -= TT; \\\n    f1 = A; \\\n    f2 = B; \\\n    fc = F; \\\n\n/*\n///WHEN(.5,vc+=.2*noisei(int(time*102312.)); )\n//WHEN(.3,vc+=voice(time,FF,4000.,2.,.2,12000.,2.,.2);)\n///WHEN(.5,vc+=voice(time,FF,690.,4.,3.,2400.,3.,2.);)\nWHEN(.5,vc+=mix(.4*noisei(int(time*102312.)),voice(time,FF,690.,4.,3.,2400.,3.,2.),time/.5);)\nWHEN(.5,vc+=voice(time,FF,690.,4.,3.,1400.,4.,3.);)\nWHEN(.5,vc+=mix(.2*noisei(int(time*102312.)),voice(time,FF,425.,4.,3.,1000.,3.,2.),time/.5);)\n*/\n\nSF( FF, 375., 2000. )\nSF( FF, 850., 1250. )\nSF( FF, 340., 1250. )\nSF( FF, 290., 2200. )\nSF( FF, 400., 1100. )\nSF( FF, 875., 1500. )\nSF( FF, 425., 1000. )\nSF( FF, 400., 2050. )\nSF( FF, 560., 560. )\nSF( FF, 690., 1400. )\nSF( FF, 875., 1500. )\nSF( FF, 425., 1000. )\nSF( FF, 340., 1250. )\nSF( FF, 400., 1100. )\nSF( FF, 875., 1500. )\nSF( FF, 425., 1000. )\nSF( FF, 400., 2050. )\nSF( FF, 560., 560. )\nSF( FF, 690., 1400. )\nSF( FF, 425., 1000. )\nSF( FF, 400., 2050. )\nSF( FF, 560., 560. )\nSF( FF, 690., 1400. )\n\n    return vc;\n    \n}\n\nfloat note(float time,float rep,float phs,float att,float dur,float dec) {\n  float t=mod(time-phs-att,rep);\n  return t<att ? t/att : t<att+dur ? 1. : exp(-(t-att-dur)/dec);\n}\n\nfloat rhyt(float time,float rep,float phs,float dec) {\n  return note(time,rep,phs,.0002,.0,dec);\n}\n\nfloat pat(float time,float rep,int pbt) {\n  return float((pbt>>int(mod(time,rep*16.)/rep))&1);\n}\n\nfloat ramp(float time,float rep,float lo,float hi) {\n  return fract(time/rep)*(hi-lo)+lo;\n}\n\nfloat stair(float val,float rise) {\n  return floor(val/rise)*rise;\n}\n\n#define ROUNDTO(X,Y) (round((X)/(Y))*(Y))\n\nfloat tonrmp(float time,float f1,float t1,float f2,float t2) {\n  t1=ROUNDTO(t1,f1);\n  t2=ROUNDTO(t2,f2);\n  return time<t1 ? f1 : \n    time<t2 ? f1+(f2-f1)*(time-t1)/(t2-t1)/2. :\n      f2;\n}\n\n#define w 1.\n#define h .5\n#define q .25\n#define e .125\n#define s (e/2.)\n\n// 12-tone notes\n#define C D f f\n#define D E f f\n#define E F f\n#define F G f f\n#define G A f f\n#define A 440.\n#define B A sh sh\n\n// Just intonation pitches for C, sort of\n#define JC *8./8.\n#define JD *9./8.\n#define JE *10./8.\n#define JF *11./8.\n#define JG *12./8.\n#define JA *13./8.\n#define JBb *14./8.\n#define JB *15./8.\n\n// accidentals\n#define sh * 1.05946\n#define f * 0.9438\n\nvec2 mainSound( int samp, float time )\n{\n\n//return .2*vec2(vc1(time,220.));\n\n    float vc = 0.;\n    \n   // vc += sin(TAU*time*200.)*exp(-.5*PI*time);\n    //return vec2(vc);\n   \n    //time += 52.;\n    //time += 44.;\n\n    if ( time < 22. ) {\n    \n        int secs = int(10.*TT);\n        float xtime = float(samp%(int(iSampleRate)*secs))/iSampleRate;\n\n        //xtime *= 1. + SINC(xtime*20.)*.02; // + SINC(xtime*2.)*.3;\n        \n        /*\n        int t1 = int(time)/secs%6;\n        float[] fcs=float[](220.,330.,110.,110.,55.,55.);\n        float f1=fcs[t1];\n        //float f2=fcs[t1+1];\n        float fc=f1; // tonrmp(time,f1,float(t1)+.7,f2,float(t1+1));\n        */\n\n        vc += vc1(\n          xtime,\n          //fc\n          float[](220.,330.,110.,110.,55.,55.)[int(time)/secs%6]\n        );\n\n    }\n    \n    if ( time > 18. && time < 54. )\n    {\n        float yy=0.;\n        for ( float ii = 6.; ii < 11.; ++ii ) {\n            float ttime = (time+ii/6.)*2.;\n            float ntime = fract(ttime);        \n            int ndx = int(floor(ttime));\n            yy += .3*voice( ntime,\n                time<23.?80.:20.*ii,\n                RND0(250.,1000.,ndx+2+int(ii)), 4., 3.,\n                RND0(350.,2000.,ndx+4+int(ii)), 4., 3.);\n        }\n        vc = mix(vc,yy,clamp(0.,1.,(time-18.)/4.));\n       \n    }\n    \n    if ( time > 48. ) {\n   // vc=0.;\n        //vc *= smoothstep( 3., 0., time-20. );\n      //  vc += tonnos(time,TAU*2000.) ; // * rhyt(time,1.,0.,.5);\n        float yy=0.;     \n        yy += tonnos(time, noisei(int(time/e)) > .5 ? 16000. : 2000.) * rhyt(time,e,0.,s/2.);\n        if ( time > 56. ) {\n        yy += (time>64.?.8:1.5)*tonnos(time, noisei(int(time+1./q)) > .5 ? 400. : 8000.) * rhyt(time,q,0.,s);\n        if ( time > 60. ) {\n        yy += tonnos(time, stair(ramp(time+2.,w*2.,20000.,120.),2000.)) * rhyt(time,h,0.,q);\n        yy += sin(mod(time*TAU*12000.,TAU)) * rhyt(time,w,q+q+q,e);\n        if ( time > 64. ) {\n\n        \n        float xtime = time - 48.;\n        xtime=mod(xtime,1.);\n        //float[] fcs=float[](1.,2.,1./2.,3./2.,2./3.,4./5.,5./4.);\n        //xtime=xtime * (1. + SINC(time*10.)*.1);\n        float fc = 880.;\n        float fc1=fc * (1. + SINC(xtime*40.)*.03*note(time,w*4.,0.,h,q,h)); // RND0(50.,800.,int(time/4.)); // 110.;//floor(2.+6.*noisei(int(time/w)))*55.;\n        float fc2=fc * (1. + SINC(xtime*30.)*.03*note(time,w*4.,0.,w,q,h)); // RND0(50.,800.,int(time/4.)); // 110.;//floor(2.+6.*noisei(int(time/w)))*55.;\n        float fc3=fc * (1. + SINC(xtime*35.)*.03*note(time,w*4.,0.,h+q,q,h)); // RND0(50.,800.,int(time/4.)); // 110.;//floor(2.+6.*noisei(int(time/w)))*55.;\n        //yy=0.;\n        //yy += vc1( xtime, fc ) * note(time,3.*w,0.,e,e,e);\n        yy += .25*voiceN3( xtime,\n                  //fc*fcs[inoisei(int(time/4.)+1)%7],\n                  //fc*fcs[inoisei(int(time/4.)+2)%7],\n                  //fc*fcs[inoisei(int(time/4.)+3)%7],\n                  fc1, fc2*5./4., fc3*1.5,\n                  RND0(200.,1200.,int(time/4.)), //tonnos(time,1./w/8.)*1000.+250.,\n                  4., 3.,\n                  RND0(1200.,4800.,int(time/4.)), //tonnos(time+.1,1./w/8.)*3000.+350.,\n                  4., 3.)\n               * note(time,w*4.,q,q,h,q);\n               \n        } } }\n        vc = mix(vc,yy,clamp(0.,1.,(time-48.)/6.));\n    }\n    \n    return .15*vec2(vc);\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}