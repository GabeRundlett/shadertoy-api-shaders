{
    "Shader": {
        "info": {
            "date": "1463381612",
            "description": "An implementation of the dithering shader in Return of the Obra Dinn.",
            "flags": 32,
            "hasliked": 0,
            "id": "4sySzw",
            "likes": 75,
            "name": "Obra Dinn Dithering",
            "published": 3,
            "tags": [
                "noise",
                "dither",
                "blue",
                "obra",
                "dinn"
            ],
            "usePreview": 1,
            "username": "cornusammonis",
            "viewed": 3906
        },
        "renderpass": [
            {
                "code": "/*\n\tThis shader implements the dithering scheme created by Koloth (Brent Werness) \n\tused in the game Return of the Obra Dinn. This version makes the changes necessary\n\tto run the shader in a lower GLSL version. In the original implementation,\n\tthe error diffusion is run a fixed number of times (36 in the Processing version),\n\tbut here the error diffusion is allowed to run continuously.\n\n\tBased on this Processing implementation:\n\thttps://github.com/akavel/WernessDithering\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(texture(iChannel0, uv).z);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define B 232.0\n\nvec2 uv = vec2(0);\nvec2 texel = vec2(0);\n\nfloat err(int i, int j) {\n    vec4 temp = texture(iChannel1, uv + vec2(float(i)*texel.x, float(j)*texel.y));\n    return temp.y*(1.0-temp.z) - temp.y*temp.z;\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float kernel[25];         \n\n    kernel[0] = 1.0/B;    \n    kernel[1] = 4.0/B;     \n    kernel[2] = 7.0/B;    \n    kernel[3] = 4.0/B;     \n    kernel[4] = 1.0/B; \n    kernel[5] = 4.0/B;  \n    kernel[6] = 16.0/B;  \n    kernel[7] = 26.0/B; \n    kernel[8] = 16.0/B;  \n    kernel[9] = 4.0/B; \n    kernel[10] = 7.0/B;  \n    kernel[11] = 26.0/B;  \n    kernel[12] = 0.0/B;  \n    kernel[13] = 26.0/B;  \n    kernel[14] = 7.0/B; \n    kernel[15] = 4.0/B;  \n    kernel[16] = 16.0/B;  \n    kernel[17] = 26.0/B; \n    kernel[18] = 16.0/B;  \n    kernel[19] = 4.0/B; \n    kernel[20] = 1.0/B;  \n    kernel[21] = 4.0/B;   \n    kernel[22] = 7.0/B;  \n    kernel[23] = 4.0/B;   \n    kernel[24] = 1.0/B;\n\n    uv = fragCoord.xy / iResolution.xy;\n    texel = 1.0 / iResolution.xy;\n    vec4 cr = texture(iChannel0, uv); \n    vec4 rc = texture(iChannel1, uv);\n    vec4 cur = vec4(cr.x, rc.yz, 0.0);\n    float sum = cur.x + kernel[ 0]*err(-2,-2) + kernel[ 1]*err(-1,-2) + kernel[ 2]*err( 0,-2) + kernel[ 3]*err( 1,-2) + kernel[ 4]*err( 2,-2) + \n        kernel[ 5]*err(-2,-1) + kernel[ 6]*err(-1,-1) + kernel[ 7]*err( 0,-1) + kernel[ 8]*err( 1,-1) + kernel[ 9]*err( 2,-1) + \n        kernel[10]*err(-2, 0) + kernel[11]*err(-1, 0) + kernel[12]*err( 0, 0) + kernel[13]*err( 1, 0) + kernel[14]*err( 2, 0) + \n        kernel[15]*err(-2, 1) + kernel[16]*err(-1, 1) + kernel[17]*err( 0, 1) + kernel[18]*err( 1, 1) + kernel[19]*err( 2, 1) + \n        kernel[20]*err(-2, 2) + kernel[21]*err(-1, 2) + kernel[22]*err( 0, 2) + kernel[23]*err( 1, 2) + kernel[24]*err( 2, 2); \n    vec4 new = ((sum > 0.5))?vec4(cur.x,1.0-sum,1.0,1.0):vec4(cur.x,sum-0.0,0.0,1.0);\n    int fx = int(mod(fragCoord.x, 3.0));\n    int fy = int(mod(fragCoord.y, 3.0));\n\n    int px = int(mod(float(iFrame), 3.0));\n    int py = int(mod(float(iFrame) / 3.0, 3.0));\n    fragColor = ((fx == px)&&(fy == py))?new:cur; \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}