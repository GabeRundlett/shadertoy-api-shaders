{
    "Shader": {
        "info": {
            "date": "1621133543",
            "description": "Trying to give a fuild effect on border of a video.\nPOC for stream overlay.",
            "flags": 0,
            "hasliked": 0,
            "id": "7dSXD3",
            "likes": 4,
            "name": "Fuild border effect",
            "published": 3,
            "tags": [
                "border"
            ],
            "usePreview": 0,
            "username": "zlnimda",
            "viewed": 420
        },
        "renderpass": [
            {
                "code": "/* ----------------------------------------------------------------------------\n * \"THE BEER-WARE LICENSE\" (Revision 42):\n * zlnimda (Nimda@zl) wrote this file.  As long as you retain this notice you\n * can do whatever you want with this stuff. If we meet some day, and you think\n * this stuff is worth it, you can buy me a beer in return.\n * ----------------------------------------------------------------------------\n */\n\n// The following functions has been borrowed from iq // Copyright Â© 2020 Inigo Quilez\n// under MIT License\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat hash(vec2 p)\n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n// END of MIT License \n\n\nfloat border(vec2 uv, float t, vec2 ratio)\n{\n    vec2 p = uv.yx + vec2(-1.f, 1.f) * sign(uv) * t;\n    p *= 64.f;\n    p = vec2(cos(p.x), sin(p.y));\n    p *= 0.01f;\n    uv += p;\n    \n    float d = sdBox(uv, ratio * 0.39);\n    float v = smoothstep(0.01f, 0.f, d);\n    \n    return clamp(v, 0.f, 1.f);\n}\n\nfloat fuilds(vec2 uv, float t, vec2 ratio)\n{\n    vec2 p = uv;\n    // p move over time\n    float s = sin(t) * 0.5f, c = cos(t) * 0.5f;\n    p += vec2(t - s + c, t + s - c);\n    // p scaled\n    p *= 16.f;\n    \n    // noise get from p\n    float n = noise(p) * 16.0f;\n    \n    \n    float d = sdBox(uv, ratio * 0.4);\n    d = smoothstep(0.03f, 0.f, d);\n    n *= d;\n    \n    n = pow(n, 6.f);\n    \n    return clamp(n, 0.f, 1.f);\n}\n\nfloat mask(vec2 uv, float t)\n{\n    vec2 ratio = iResolution.xy/max(iResolution.x,iResolution.y);\n    uv -= 0.5; // centered\n    uv *= ratio; // keep aspect ratio\n\n    float mask = 0.f;\n    mask += border(uv, t, ratio);\n    mask += fuilds(uv , t, ratio);\n    \n    return clamp(mask, 0.f, 1.f);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float t = iTime * 0.2f;\n    float mask = mask(uv, t);\n    \n    vec4 col = texture(iChannel0, uv);\n    col.xyz *= mask;\n\n    // Output to screen\n    fragColor = vec4(col.xyz,mask);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 11,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}