{
    "Shader": {
        "info": {
            "date": "1697140329",
            "description": "this ones really simple but i like it ^w^\nFrom a different thing I'm working on, this was mostly accidental \nThis does not run well whatsoever btw",
            "flags": 0,
            "hasliked": 0,
            "id": "DdcBW4",
            "likes": 2,
            "name": "colors and triangles",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "The_Snek12",
            "viewed": 146
        },
        "renderpass": [
            {
                "code": "//triangle sdf from https://iquilezles.org/articles/distfunctions2d/\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 ){\n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                     vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                     vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nmat2 rotationMatrix(float theta){\n    float s = sin(theta);\n    float c = cos(theta);\n    \n    return mat2(\n    vec2(c, -s),\n    vec2(s,c));\n    \n}\n\nvec2 hash12(float p)\n{\n\treturn fract(vec2(sin(p * 591.32), cos(p * 391.32)));\n}\n\nstruct Triangle{\n    vec2 p1;\n    vec2 p2;\n    vec2 p3;\n};\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy)*2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \n    vec3 col = vec3(0);\n    \n    float combinedTriangles = 0.0;\n    \n    for (float i=0.0; i<150.0; i++){\n        vec2 tpos = hash12(i*0.1)*4.-2.;\n        mat2 rot = rotationMatrix((hash12(i).y-0.5)*iTime+hash12(i).x*3.0);\n        Triangle t = Triangle(\n        vec2(hash12(i).x,hash12(i).y)*rot+tpos,\n        vec2(hash12(i+0.1).x,hash12(i+0.1).y)*rot+tpos,\n        vec2(hash12(i+0.2).x,hash12(i+0.2).y)*rot+tpos);\n        float triDist = sdTriangle(uv, t.p1, t.p2, t.p3);\n        \n        col += smoothstep(0.1, 0.0, smoothstep(0.0, 0.0, triDist));\n        \n        col += smoothstep(0.03,0.0,triDist)/3.;\n        combinedTriangles = min(combinedTriangles, triDist);\n    }\n    \n    \n    \n    \n    //float uvDilation = abs(min(0.0, combinedTriangles*10.0)+1.0); //this one is cool but an accident\n    float uvDilation = abs(min(0.0, combinedTriangles*10.0))+1.0;\n    \n    \n    uv /= uvDilation;\n    uv *=2.;\n    \n    \n    col += texture(iChannel0, uv/4.).rgb;\n    //col += 0.5 + 0.5*cos(iTime+(uv.xyx)+vec3(0,2,4));\n    fragColor = vec4(col, 1);\n\n}\n\n//Hoping to make a shattering glass look that distorts some image or a rainbow color underneath",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}