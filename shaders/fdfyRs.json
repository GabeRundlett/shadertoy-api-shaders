{
    "Shader": {
        "info": {
            "date": "1642509551",
            "description": "Persistence of vision simulated",
            "flags": 0,
            "hasliked": 0,
            "id": "fdfyRs",
            "likes": 3,
            "name": "Persistence of Vision",
            "published": 3,
            "tags": [
                "vision",
                "persistence"
            ],
            "usePreview": 0,
            "username": "Spi3lot",
            "viewed": 234
        },
        "renderpass": [
            {
                "code": "#define PI 3.1415926535\n#define TAU 2.0 * PI\n\n\nstruct Sector\n{\n    float radius;\n    float startAngle;\n    float stopAngle;\n};\n\n// .r (rgba) -> radius\n// .t (stpq) -> theta\nvec2 polar(float r, float theta)\n{\n    return vec2(r, theta);\n}\n\nvec2 polar(vec2 cartesian)\n{\n    return polar(length(cartesian), PI + atan(cartesian.y, cartesian.x));\n}\n\n\nfloat normalizeAngle(float angle)\n{\n    return mod(angle, TAU);\n}\n\nfloat pointInsideSector(vec2 pointCartesian, Sector sector)\n{\n    vec2 pointPolar = polar(pointCartesian);\n    \n    if (pointPolar.r >= sector.radius)\n        return 0.0;\n    \n    float startAngle = normalizeAngle(sector.startAngle);\n    float stopAngle = normalizeAngle(sector.stopAngle);\n\n    if (startAngle > stopAngle) {\n        stopAngle += TAU;\n    \n        if (startAngle > pointPolar.t) //&& stopAngle > pointPolar.t)  // not necessary)\n            pointPolar.t += TAU;\n    }\n\n    // (pointPolar.t < startAngle) not necessary if radar/persistence mode is on\n    if (pointPolar.t >= stopAngle || pointPolar.t < startAngle)\n        return 0.0;\n\n    // Linear\n    //return (pointPolar.t - startAngle) / (stopAngle - startAngle);\n    \n    // Smooth\n    return smoothstep(startAngle, stopAngle, pointPolar.t);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //float iTimeOld = iTime - iTimeDelta;\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 point = fragCoord - 0.5 * iResolution.xy;\n    \n    float maxi = max(iResolution.x, iResolution.y);\n    \n    float radius = maxi;  // to cover the entire screen\n    float angle = TAU / 3.0;\n    float speed = 20.0;  // radians / second\n    \n    /* * /\n    float then = iTimeOld * speed;\n    float now = iTime * speed;\n    /* */\n    \n    float then = iTime * speed;\n    float now = then + angle;\n    \n    Sector sector = Sector(radius, then, now);\n    \n    float alpha = pointInsideSector(point, sector);\n    \n    // I could also blit a black image with alpha 0.01 or some\n    // every frame to simulate the fade out\n    \n    // Output to screen\n    fragColor = alpha * texture(iChannel0, uv);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}