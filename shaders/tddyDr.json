{
    "Shader": {
        "info": {
            "date": "1635473525",
            "description": "PerlinNoise",
            "flags": 0,
            "hasliked": 0,
            "id": "tddyDr",
            "likes": 2,
            "name": "PerlinNoiseEffect",
            "published": 3,
            "tags": [
                "perlinnoise"
            ],
            "usePreview": 0,
            "username": "celns",
            "viewed": 178
        },
        "renderpass": [
            {
                "code": "//Hash2D based on: http://www.shadertoy.com/view/4djSRW\n\nvec2 Hash2D(vec2 p)\n{\n \tp = vec2( dot(p, vec2(127.1, 311.7)),\n              dot(p, vec2(269.5, 183.3)));\n    return  -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n}\n\nfloat PerlinNoise2D(vec2 seed)\n{\n    vec2 intFloorValue = floor(seed);\n    vec2 intCeilValue = ceil(seed);\n    vec2 fractValue = fract(seed);\n    \n    //vec2 interValue = smoothstep(0.0, 1.0, fractValue);\n    vec2 interValue = fractValue*fractValue*fractValue*(fractValue*(fractValue*6.0-15.0)+10.0);\n    \n    return mix(mix(dot(Hash2D(intFloorValue), fractValue),\n                   dot(Hash2D(intFloorValue + vec2(1.0, 0.0)), fractValue - vec2(1.0, 0.0)),\n                   interValue.x),\n               mix(dot(Hash2D(intFloorValue + vec2(0.0, 1.0)), fractValue - vec2(0.0, 1.0)),\n                   dot(Hash2D(intCeilValue), fractValue - vec2(1.0, 1.0)),\n                   interValue.x),\n               interValue.y);\n}\n\nvec3 Pattern(vec2 uv)\n{\n    vec3 col = vec3(0);\n    uv+=0.5;\n    float scaler = 10.;\n\tuv *= 2. * scaler;\n    \n    float amp = 50.;\n    uv.x+=sin(iTime);\n    uv.y+=cos(iTime);\n    \n\n    float value = PerlinNoise2D(uv);\n    if(uv.y < scaler*1.5)\n    {\n        col = vec3(1.0/value);\n    }\n    else if(uv.y < scaler* 2.0)\n    {\n        col = vec3(uv.x +uv.y+1.0/value);\n    }   \n    else if(uv.y < scaler* 2.5)\n    {\n        \n        col = vec3(tan(1.0/value));\n    }\n    else\n    {\n        col = vec3(value * 0.5 + 0.5);\n    }\n\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // Output to screen\n    fragColor = vec4(Pattern(uv),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}