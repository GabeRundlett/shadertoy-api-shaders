{
    "Shader": {
        "info": {
            "date": "1444856641",
            "description": "An hacky attempt at some sort of hologram shader",
            "flags": 0,
            "hasliked": 0,
            "id": "llSXRK",
            "likes": 13,
            "name": "HackyHologram",
            "published": 3,
            "tags": [
                "2d",
                "blur",
                "scanlines",
                "hologram"
            ],
            "usePreview": 0,
            "username": "PumpkinPaul",
            "viewed": 2412
        },
        "renderpass": [
            {
                "code": "const float blurSize = 1.0/512.0;\nconst float intensity = 0.35;\n\n\n//textures:\nvec3 tx1(vec2 uv)\n{\n\treturn texture(iChannel1,uv).rgb;\n}\n\nvec3 tx1(float u)\n{\n\treturn texture(iChannel1,vec2(u,0.0)).rgb;\n} \n\n//geometry:\nfloat sph(vec2 pos, vec2 xy, float radius)\n{\n\treturn 1.0 / (length(xy - pos) / radius);\n}\n\n//math:\nfloat sum(vec3 c)\n{\n\treturn (c.x + c.y + c.z);\n}\n\nfloat rand(float v)// 0 .. 1\n{\n\treturn sum(tx1(v)) * 0.6666666666;\n}\n\nfloat noise(vec2 p)\n{\n\tfloat sample = texture(iChannel1,vec2(1.,2.*cos(iTime))*iTime*8. + p*1.).x;\n\tsample *= sample;\n\treturn sample;\n}\n\nfloat onOff(float a, float b, float c)\n{\n\treturn step(c, sin(iTime + a*cos(iTime*b)));\n}\n\nvec4 getVideo(vec2 uv)\n{\n\tvec2 look = uv;\n\tfloat window = 1./(1.+20.*(look.y-mod(iTime/4.,1.))*(look.y-mod(iTime/4.,1.)));\n\tlook.x = look.x + sin(look.y*10. + iTime)/100.*onOff(4.,4.,.3)*(1.+cos(iTime*80.))*window;\n\tfloat vShift = 0.4*onOff(2.,3.,.9)*(sin(iTime)*sin(iTime*20.) + (0.5 + 0.1*sin(iTime*200.)*cos(iTime)));\n\tlook.y = mod(look.y + vShift, 1.);\n\tvec4 video = vec4(texture(iChannel0,look));\n        \n\treturn video;\n}\n\nvec4 getVideoBlur(vec2 uv)\n{\n\tvec2 look = uv;\n\tfloat window = 1./(1.+20.*(look.y-mod(iTime/4.,1.))*(look.y-mod(iTime/4.,1.)));\n\tlook.x = look.x + sin(look.y*10. + iTime)/100.*onOff(4.,4.,.3)*(1.+cos(iTime*80.))*window;\n\tfloat vShift = 0.4*onOff(2.,3.,.9)*(sin(iTime)*sin(iTime*20.) + (0.5 + 0.1*sin(iTime*200.)*cos(iTime)));\n\tlook.y = mod(look.y + vShift, 1.);\n    \n    //hack in blur    \n    vec4 video = vec4(0);\n    video += (texture(iChannel0, look + blurSize * vec2(-4.0, 0.0)) * 0.05);\n    video += (texture(iChannel0, look + blurSize * vec2(-3.0, 0.0)) * 0.09);\n    video += (texture(iChannel0, look + blurSize * vec2(-2.0, 0.0)) * 0.12);\n    video += (texture(iChannel0, look + blurSize * vec2(-1.0, 0.0)) * 0.15);\n    video += (texture(iChannel0, look) * 0.16);\n    video += (texture(iChannel0, look + blurSize * vec2(1.0, 0.0)) * 0.15);\n    video += (texture(iChannel0, look + blurSize * vec2(2.0, 0.0)) * 0.12);\n    video += (texture(iChannel0, look + blurSize * vec2(3.0, 0.0)) * 0.09);\n    video += (texture(iChannel0, look + blurSize * vec2(4.0, 0.0)) * 0.05);\n    \n    video += (texture(iChannel0, look + blurSize * vec2(0.0, -4.0)) * 0.05);\n    video += (texture(iChannel0, look + blurSize * vec2(0.0, -3.0)) * 0.09);\n    video += (texture(iChannel0, look + blurSize * vec2(0.0, -2.0)) * 0.12);\n    video += (texture(iChannel0, look + blurSize * vec2(0.0, -1.0)) * 0.15);\n    video += (texture(iChannel0, look) * 0.16);\n    video += (texture(iChannel0, look + blurSize * vec2(0.0, 1.0)) * 0.15);\n    video += (texture(iChannel0, look + blurSize * vec2(0.0, 2.0)) * 0.12);\n    video += (texture(iChannel0, look + blurSize * vec2(0.0, 3.0)) * 0.09);\n    video += (texture(iChannel0, look + blurSize * vec2(0.0, 4.0)) * 0.05);\n    \n\treturn video;\n}\n\nvec4 getVideoBlurLod(vec2 uv, float lod)\n{\n\tvec2 look = uv;\n\tfloat window = 1./(1.+20.*(look.y-mod(iTime/4.,1.))*(look.y-mod(iTime/4.,1.)));\n\tlook.x = look.x + sin(look.y*10. + iTime)/100.*onOff(4.,4.,.3)*(1.+cos(iTime*80.))*window;\n\tfloat vShift = 0.4*onOff(2.,3.,.9)*(sin(iTime)*sin(iTime*20.) + (0.5 + 0.1*sin(iTime*200.)*cos(iTime)));\n\tlook.y = mod(look.y + vShift, 1.);\n\tvec4 video = vec4(texture(iChannel0,look, lod));\n        \n\treturn video;\n}\n\nvoid mainImage( out vec4 color, vec2 uv )\n{  \n    uv /= iResolution.xy;\n\t\t\n   \tif ( abs(uv.x-.45) > .15 || abs(uv.y-.5) > .3 ) \n        return; //hack to trim viewport \n    \n\tuv.y  = 1.0 - uv.y;\n    uv.x *= 0.5;\n    \n    //color = getVideoBlurLod(uv, 2.0);\n    color = getVideo(uv);\n\n    float t = iTime;\n    float strength = 64.0;\n    float x = (uv.x + 4.0) * (uv.y + 4.0) * t * 10.0;\n    float grain = 1.0 - (mod((mod(x, 13.0) + 1.0) * (mod(x, 123.0) + 1.0), 0.01) - 0.005) * strength;\n    float random = rand(iTime);\n    float flicker = max(1., random * 1.5);\n    float scanlines = 0.85 * clamp(sin(uv.y * 400.0), 0.25, 1.0) * tx1(uv.y * sin(t * 0.2) * 0.1).r * 3.0;\n    \n    vec4 greyscale = vec4(dot(color, vec4(0.3, 0.59, 0.11, 0)));\n    vec4 bluetint  = vec4(0.3, 0.5, 0.8, 1);  \n    \n    color  = greyscale;\n    \n    float shadowspeed = 0.2;\n    float shadowrange = 0.35;\n    float shadowcount = 5.0;\n    \n   \tfloat shadow = 1.0 - shadowrange + (shadowrange * sin((uv.y + (iTime * shadowspeed)) * shadowcount));\n\tcolor *= shadow;\n    \n    float highlightspeed = 0.2;\n    float highlightrange = 0.35;\n    float highlightcount = 5.0;\n    float highlight = 1.0 - highlightrange + (highlightrange * sin((uv.y + (iTime * -highlightspeed)) * highlightcount));\n\tcolor += highlight;\n    \n    \n    color *= grain* flicker * scanlines * bluetint;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 17,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}