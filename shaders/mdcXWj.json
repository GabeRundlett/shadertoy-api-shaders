{
    "Shader": {
        "info": {
            "date": "1680427235",
            "description": "Use MIPmap to count prop of pixels below threshold in window,\nthen  iteratively adjust threshold so prop â†’ 50%.\nRight: windowed counting, local threshold mask\nclick+hold mouse.y to tune window size\n\nref median filter: https://www.shadertoy.com/view/msdSDB",
            "flags": 32,
            "hasliked": 0,
            "id": "mdcXWj",
            "likes": 7,
            "name": "cheap median filter",
            "published": 3,
            "tags": [
                "filter",
                "gpmipmap"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 377
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 O, vec2 u )\n{\n    O = texture(iChannel0, u/R);               // show threshold (converging toward median )\n    if ( u.x/R.x > .75 )\n        O = texture(iChannel1, u/R );          // show local threshold mask\n    else if ( u.x/R.x > .5 )\n        O = textureLod(iChannel1, u/R, W );    // show windowed counting\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// === adjust the value threshold towards the median\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O = textureLod(iChannel1, u/R, W); // proportion of texture below threshold within window 2^W\n    \n    O = texture(iChannel0, u/R) * (1. + .1*(.5-O) ); // adjust threshold via relaxation\n\n    if (iFrame<1 || iMouse.w>0. ) O = vec4(.5);       // init\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// === prepare the count of texture pixels below the buffA threshold \n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O = step(  texture(iChannel1, u/R),\n               texture(iChannel0, u/R)\n            // textureLod(iChannel0, u/R, W)\n            );\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "//float W = 3.;\n#define W ( iMouse.z>0. ? 8.*iMouse.y/R.y : log2(R.y/45.) )\n\n#define R iResolution.xy\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}