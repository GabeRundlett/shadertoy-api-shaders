{
    "Shader": {
        "info": {
            "date": "1641680858",
            "description": "Pretty good, not perfect.\n\nMaths stolen from here:\nhttps://www.cs.cmu.edu/~462/www/projects/assn2/assn2/catmullRom.pdf\n\nImproved version:\nhttps://www.shadertoy.com/view/mtKXRG",
            "flags": 32,
            "hasliked": 0,
            "id": "NsfcR8",
            "likes": 9,
            "name": "Spline Idea e",
            "published": 3,
            "tags": [
                "spline"
            ],
            "usePreview": 0,
            "username": "SnoopethDuckDuck",
            "viewed": 317
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    float x = texelFetch( iChannel0, ivec2(fragCoord), 0 ).x;\n\n    vec3 e = vec3(1.);\n    vec3 col2 = 2.5 * x * pal(mix(0.3, 0.35, 0.5 + 0.5 * thc(2., iTime)), e, e, e, vec3(0., 0.33, 0.66));\n    fragColor = vec4(0.06 + col2, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;      \n    // (multiplying by constant seems to be buggy)\n    float time = iTime;\n    \n    // Offset y values from x values (so it doesnt just move diagonally)\n    float o = 0.01;\n    // Scale point locations to fit to screen\n    float sc = 0.8;\n    \n    // Next 4 points in sequence\n    // (bad approach - has a bottom-left bias)\n    // (should be using integer hash, rounding errors ruin it)\n    vec2 p0 = -sc * 0.5 + sc * vec2( h21(vec2(floor(time))),      h21(vec2(o + floor(time))) );\n    vec2 p1 = -sc * 0.5 + sc * vec2( h21(vec2(floor(time + 1.))), h21(vec2(o + floor(time + 1.))) );\n    vec2 p2 = -sc * 0.5 + sc * vec2( h21(vec2(floor(time + 2.))), h21(vec2(o + floor(time + 2.))) );\n    vec2 p3 = -sc * 0.5 + sc * vec2( h21(vec2(floor(time + 3.))), h21(vec2(o + floor(time + 3.))) );\n\n    float f = fract(time);\n\n    float t = 0.8;\n    mat4 M = mat4(   0,  1,     0,        0,\n                    -t,  0,     t,        0,\n                  2.*t,  t-3.,  3.-2.*t,  -t,\n                    -t,  2.-t,  t-2.,     t);\n    vec4 U = vec4(1., f, f*f, f*f*f);\n    vec4 Px = vec4(p0.x, p1.x, p2.x, p3.x);\n    vec4 Py = vec4(p0.y, p1.y, p2.y, p3.y);\n    vec2 p = vec2(dot(Px, M * U), dot(Py, M * U));\n    \n    float d = length(uv - p);\n    float k = 1. / iResolution.y;\n    float s = smoothstep(-k, k, -d + 0.025);\n    float x = texelFetch( iChannel0, ivec2(fragCoord), 0 ).x;\n    x = 0.98 * clamp(x, 0., 1.);\n    s = max(x, s);\n    s = max(s, f * smoothstep(-k, k, -length(uv - p2) + 0.025));\n\n    fragColor = vec4(s);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "// Collection of functions I use a lot:\n\n#define pi 3.14159\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec2 thc(float a, vec2 b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nvec2 ths(float a, vec2 b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}