{
    "Shader": {
        "info": {
            "date": "1724742990",
            "description": "originals https://www.shadertoy.com/view/XcjBz1",
            "flags": 0,
            "hasliked": 0,
            "id": "MfjfzW",
            "likes": 9,
            "name": "particles field",
            "published": 3,
            "tags": [
                "field",
                "particle"
            ],
            "usePreview": 0,
            "username": "nayk",
            "viewed": 145
        },
        "renderpass": [
            {
                "code": "#define PI 3.14159265359\n\nvec3 pal2( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 4.28318*(c*t+d) );\n}\n\nvec3 spectrum(float n) {\n    return pal2( n, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Center the coordinate system\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n     uv.xy*=mat2(cos(iTime),sin(iTime), -sin(iTime), cos(iTime));\n    // Parameters for the Venus flower\n    float earthRadius = 0.4+cos(iTime);\n    float venusRadius = 0.28+sin(iTime);\n    float earthPeriod = 1.0;\n    float venusPeriod = 0.615;  // Approximate ratio of Venus' orbital period to Earth's\n       float d;\n    // Visualization parameters\n    float lineIntensity = 0.00005;  // Reduced from 0.0003\n    float lineWidth = 10.0;  // Adjust for thicker or thinner lines\n    float fadeSpeed = 50.0;  // Speed of pattern build-up\n    \n    vec3 col = vec3(0.0);\n    \n    // Calculate the number of steps based on current time\n    float maxSteps = 1000.0;\n    float steps = min(iTime * fadeSpeed, maxSteps);\n    \n    // Draw the path\n    for (float i = 0.0; i < steps; i += 1.0)\n    {\n        float t = i / maxSteps * 10.0 * PI;  // 8 cycles for a complete flower\n        \n        vec2 earthPos = vec2(\n            earthRadius * cos(2.0 * PI * t / earthPeriod),\n            earthRadius * sin(2.0 * PI * t / earthPeriod)\n        );\n         earthPos.xy*=mat2(cos(iTime),sin(iTime), -sin(iTime), cos(iTime));\n        \n        vec2 venusPos = vec2(\n            venusRadius * cos(2.0 * PI * t / venusPeriod),\n            venusRadius * sin(2.0 * PI * t / venusPeriod)\n        );\n           venusPos.xy*=mat2(cos(iTime),-sin(iTime), sin(iTime), -cos(iTime));\n        vec2 p = venusPos + earthPos;\n        p.xy*=mat2(-cos(iTime),sin(iTime), -sin(iTime), cos(iTime));\n        \n       d = length(uv - p);\n        \n        col += lineIntensity / (d * d + 0.000021) * lineWidth; // Adjusted accumulation\n          \n    }\n    col *= spectrum(d * 1. - .6);\n    // Tone mapping to prevent oversaturation\n    col = 1.0 - exp(-col * 0.7);\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}