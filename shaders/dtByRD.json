{
    "Shader": {
        "info": {
            "date": "1691515535",
            "description": "Zooming in and out of a rotating universe",
            "flags": 0,
            "hasliked": 0,
            "id": "dtByRD",
            "likes": 1,
            "name": "Universal Spin",
            "published": 3,
            "tags": [
                "rotationspeeduniverse"
            ],
            "usePreview": 0,
            "username": "arcadiancomp",
            "viewed": 124
        },
        "renderpass": [
            {
                "code": "// Define rotation, zoom, brightness\n\nconst float cpuSpeed = 0.5;  // Speed of the spinning Universe\nconst float zoomDuration = 20.0;  // Zoom duration in seconds\nconst float maxZoom = 0.2;  // Maximum zoom factor\nconst float maxBrightness = 2.5;  // Maximum brightness multiplier\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Calculate the rotation angle based on time\n    float angle = mod(iTime * cpuSpeed, 2.0 * 3.14159);\n\n    // Calculate the zoom factor based on time\n    float zoomFactor = 1.0 + 0.5 * (1.0 - cos(iTime * 3.14159 / zoomDuration));\n    zoomFactor = mix(1.0, maxZoom, zoomFactor);\n\n    // Apply the zoom and rotation to the coordinates\n    vec2 center = vec2(0.5, 0.5);\n    vec2 scaledUV = (uv - center) / zoomFactor + center;\n    vec2 rotatedUV = vec2(\n        cos(angle) * (scaledUV.x - center.x) - sin(angle) * (scaledUV.y - center.y) + center.x,\n        sin(angle) * (scaledUV.x - center.x) + cos(angle) * (scaledUV.y - center.y) + center.y\n    );\n\n    // Sample the CPU icon texture using the rotated coordinates\n    vec3 col = texture(iChannel0, rotatedUV).rgb;\n\n    // Calculate the brightness multiplier based on rotation angle\n    float brightnessMultiplier = mix(1.0, maxBrightness, abs(sin(angle)));\n\n    // Apply the brightness multiplier to the color\n    col *= brightnessMultiplier;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 4,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}