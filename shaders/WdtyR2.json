{
    "Shader": {
        "info": {
            "date": "1601302048",
            "description": "Joukowsky transform of a circle gives an airfoil.\ntune parameters:  Mouse: move center. grey = radius.\n\ncf [url]https://www.desmos.com/calculator/nrq1ecest1?lang=fr[/url]\n",
            "flags": 0,
            "hasliked": 0,
            "id": "WdtyR2",
            "likes": 9,
            "name": "Joukowsky inv transform:airfoil2",
            "published": 3,
            "tags": [
                "complex",
                "transform",
                "airfoil",
                "joukowsky"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 380
        },
        "renderpass": [
            {
                "code": "// core of https://shadertoy.com/view/wdtyDM\n\n// packed from all complex ops: https://shadertoyunofficial.wordpress.com/2019/01/02/programming-tricks-in-shadertoy-glsl/\n#define cmul(A,B) ( mat2( A, -(A).y, (A).x ) * (B) )  // by deMoivre formula\n#define csqrt(Z)    sqrt(length(Z)) \\\n                  * cos( atan((Z).y,(Z).x) /2. - vec2(0,1.57) ) \n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 3.*( 2.*u - R ) / R.y,\n         M = iMouse.z > 0. ? ( 2.*iMouse.xy - R ) / R.y // manual tuning\n                           :  .5*cos(iTime+vec2(0,11)), // auto-demo\n         V1 = .5*( U + csqrt( cmul(U,U) - 4. ) ),       // solve zÂ² - Z.z + 1 = 0 ( equiv Z = z + 1/z )\n         V2 = U - V1;                                   // 2nd root\n\n    float v1 = length(M-V1),                            // circle (sol 1)\n          v2 = length(M-V2),                            // circle (sol 2)\n          v  = max(v1,v2);\n    O-=O;\n // for( float r = 4.; r > 0.; r-=.25 )                 // draw oignon rings or airfoils\n //     O += clamp(1.-R.y/4.*(v-r),0.,1.) / 13.;\n    O += 1.25 - floor( v * 4. ) / 13.;\n    \n // O.b = .5+.5*sin(30.*(1.-v));                        // isovalues (pseudo distance field)\n // O   = sin(30.*vec4(v1,v2,0,0));                     // show all circle isolines\n // O   = vec4( 1.2 / v );                              // continuous field\n // O   = vec4(min(v1,v2) );                            // dual field\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 5,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}