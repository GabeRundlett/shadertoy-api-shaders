{
    "Shader": {
        "info": {
            "date": "1475863433",
            "description": "A red/blue 3d glasses version of https://www.shadertoy.com/view/lly3Rc by sebbbi\n\n\"Infinite grid of quads. Analytical ray trace. Fixed cost. No loops.\"",
            "flags": 0,
            "hasliked": 0,
            "id": "4tK3R3",
            "likes": 7,
            "name": "Red/Blue 3d Infinite quad grid",
            "published": 3,
            "tags": [
                "3d",
                "grid",
                "raytrace",
                "analytical"
            ],
            "usePreview": 0,
            "username": "demofox",
            "viewed": 966
        },
        "renderpass": [
            {
                "code": "vec2 rayIntersectNearestGridPlanes(vec3 orig, vec3 ray)\n{\n    orig = fract(orig);\n    float zInv = 1.0 / ray.z;\n    float dFront = (1.0 - orig.z) * zInv;\n    float dBack = (2.0 - orig.z) * zInv;\n\n    if (ray.z < 0.0)\n    {\n    \tdFront = (orig.z) * -zInv;\n        dBack = (orig.z + 1.0) * -zInv;        \n    }\n    \n    return vec2(dFront, dBack);\n}\n\nvec4 moduloUvPlanes(vec3 orig, vec3 ray, vec2 dist)\n{\n    return vec4(fract(orig.xy + ray.xy * dist.x), fract(orig.xy + ray.xy * dist.y));\n}\n\nvec2 shortestPathStepDist(vec4 uvs)\n{\n    vec2 stepDist = uvs.zw - uvs.xy;\n    \n    // Modulo range [-0.5, +0.5]\n    stepDist = fract(stepDist + 0.5) - 0.5;\n    return stepDist;\n}\n\nfloat calculateSteps(float orig, float dist)\n{\n    // Plane hit: xy = [0, 0.5] modulo range on each integer z\n    if (orig < 0.5) return 0.0;\n    \n    // How many steps to hit (modulo) 0.0 or 1.0?\n    float steps = (dist < 0.0) ? \n        (orig - 0.5) / -dist :\n    \t(1.0 - orig) / dist;\n    \n    return ceil(steps);\n}\n\nvec3 intersectInfiniteGrid(vec3 orig, vec3 ray)\n{\n    vec2 intersections = rayIntersectNearestGridPlanes(orig, ray);\n    vec4 uv = moduloUvPlanes(orig, ray, intersections);\n\tvec2 dist = shortestPathStepDist(uv);\n    float stepsX = calculateSteps(uv.x, dist.x);\n    float stepsY = calculateSteps(uv.y, dist.y);\n\n    float steps = min(stepsX, stepsY);\n    uv.xy += steps * dist.xy;\n    \n    return vec3(uv.xy, intersections.y + steps / abs(ray.z));\n}\n\nvec2 rot2D(vec2 p, float angle) \n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return p * mat2(c,s,-s,c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    vec2 uv = ( fragCoord / iResolution.xy ) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y; \n    \n    float time = iTime;\n    \n    float leftEye = 0.0;   \n    {\n    \tvec3 orig = vec3(0.65, 0.75, 0.1 + time);\n    \tvec3 ray = normalize(vec3(uv, 1.2));\n    \n    \tray.xz = rot2D(ray.xz, iMouse.z > 0.0 ? iMouse.x/100.0 : time * 0.15 );\n    \tray.yz = rot2D(ray.yz, iMouse.z > 0.0 ? iMouse.y/100.0 : time * 0.1 );\n    \n   \t\tvec3 uvDist = intersectInfiniteGrid(orig, ray);\n    \tuvDist.xy *= 2.0;\n    \n\t\tleftEye = dot(textureLod(iChannel0, uvDist.xy, log2(uvDist.z) * 1.5).rgb, vec3(0.3, 0.59, 0.11));\n    }\n    \n    float rightEye = 0.0;    \n    {\n    \tvec3 orig = vec3(0.65 + 0.03, 0.75, 0.1 + time);\n    \tvec3 ray = normalize(vec3(uv, 1.2));\n    \n    \tray.xz = rot2D(ray.xz, iMouse.z > 0.0 ? iMouse.x/100.0 : time * 0.15 );\n    \tray.yz = rot2D(ray.yz, iMouse.z > 0.0 ? iMouse.y/100.0 : time * 0.1 );\n    \n   \t\tvec3 uvDist = intersectInfiniteGrid(orig, ray);\n    \tuvDist.xy *= 2.0;\n    \n\t\trightEye = dot(textureLod(iChannel0, uvDist.xy, log2(uvDist.z) * 1.5).rgb, vec3(0.3, 0.59, 0.11));\n    }    \n    \n    fragColor = vec4(leftEye, rightEye, rightEye, 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 8,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}