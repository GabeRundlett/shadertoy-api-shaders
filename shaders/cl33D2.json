{
    "Shader": {
        "info": {
            "date": "1683103364",
            "description": "WIP\nreference: [url]https://twitter.com/Bbbn192/status/1653070539970183168[/url]\n\nhow would you properly handle a BSP with sphere marching ? \nBeside, the rotation axis are wrong when more than 1 cut (and only last should turn).",
            "flags": 0,
            "hasliked": 0,
            "id": "cl33D2",
            "likes": 14,
            "name": "Broken Rubix Cube Effect (WIP)",
            "published": 3,
            "tags": [
                "raymarching",
                "bsp",
                "reproduction"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 330
        },
        "renderpass": [
            {
                "code": "\n#define rot2(a)      mat2(cos(a+vec4(0,11,33,0)))\n#define rot(P,A,a) ( mix( A*dot(P,A), P, cos(a) ) + sin(a)*cross(P,A) )\n#define H(v)         fract(1e4*sin((v)*(R+71.)))\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9., T,n = mod(iTime/2.,4.), d, i, c;\n    vec3  R = iResolution, N,\n          D = normalize(vec3(U+U, -12.*R.y) - R), D2=D,D3, // ray direction\n          p = vec3(0,0,20), q,a,                           // marching point along ray \n          M = iMouse.z > 0. ? 6.*iMouse.xyz/R -3.\n              :  vec3( 1,.5,0) * cos(.3*iTime + vec3(0,11,0)); \n    D2.yz *= rot2(-M.y),                                   // rotations\n    D2.xz *= rot2(-M.x-1.57);\n    \n    for ( O=vec4(1); O.x > 0. && t > .01; O-=.01 ) {       // march scene\n        q = p, \n        q.yz *= rot2(-M.y),                                // rotations\n        q.xz *= rot2(-M.x-1.57);\n        D3 = D2;\n        t = 9.;\n        for( i=0.; i++ < n; )\n          T = i <= n ? i*2. : (n-(i-1.))*2.,\n          d = dot(q, N = normalize(H(i)-.5) ),             // random cut plane\n          d>0. ? q = rot(q,N,T) : q,                       // rot half-space\n       // t = min(t, abs(d) + .01),                        // slow close to plane for correct stepping through\n          c = - d / dot(D3,N),\n          c>0. ? t = min(t, c+.01) : t,                    // exact dist along ray\n          d>0. ? D3 = rot(D3,N,T) : q;                 \n        a = abs(q),\n        t = min( t,  c = max(a.x, max(a.y,a.z)) - 1. ),    // cube\n        p += .5*t*D;                                       // step forward = dist to obj    \n    }\n    if (t<.01)                                             // color scheme   \n               O = c > 0. \n                    ? p = floor(q+q), t++, \n                      vec4( (.5+.5*mod(p.x+p.y+p.z,2.))    // tiling pattern\n                           * dot(vec3(t==a.x,t==a.y,t==a.z), vec3(.9,.7,.5)) ) // shading\n                    : vec4(.4,0,0,1);                      // cut part in red\n}\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}