{
    "Shader": {
        "info": {
            "date": "1455017288",
            "description": "Raytracing implicit surfaces in the fewest possible steps via polynomial arithmetic. Drag the mouse to change the starting point of the ray.",
            "flags": 0,
            "hasliked": 0,
            "id": "4syGzy",
            "likes": 14,
            "name": "Polynomial Arithmetic",
            "published": 3,
            "tags": [
                "raytracing",
                "quadratic",
                "polynomial",
                "implicits",
                "arithmetic"
            ],
            "usePreview": 0,
            "username": "paniq",
            "viewed": 1214
        },
        "renderpass": [
            {
                "code": "// instant implicit surfaces via polynomial arithmetic\n// -- @paniq\n\n// uncomment to visualize various extra graphs\n// #define DEBUG_VIZ\n// rainbow zig zag line: actual trace, each hue is an iteration\n// red: zero line\n// white: f(x)\n// yellow: f'(x)\n// green: f''(x)\n// magenta: distance to next horizon (discontinuity)\n// cyan: distance to next root\n\n//////////////////////////////////////////////////////////\n\n// set color source for stroke / fill / clear\nvoid set_source_rgba(vec4 c);\nvoid set_source_rgba(float r, float g, float b, float a);\nvoid set_source_rgb(vec3 c);\nvoid set_source_rgb(float r, float g, float b);\nvoid set_source(sampler2D image);\n// if enabled, blends using premultiplied alpha instead of\n// regular alpha blending.\nvoid premultiply_alpha(bool enable);\n\n// set line width in normalized units for stroke\nvoid set_line_width(float w);\n// set line width in pixels for stroke\nvoid set_line_width_px(float w);\n// set blur strength for strokes in normalized units\nvoid set_blur(float b);\n\n// add a circle path at P with radius R\nvoid circle(vec2 p, float r);\nvoid circle(float x, float y, float r);\n// add a rectangle at O with size S\nvoid rectangle(vec2 o, vec2 s);\nvoid rectangle(float ox, float oy, float sx, float sy);\n\n// set starting point for curves and lines to P\nvoid move_to(vec2 p);\nvoid move_to(float x, float y);\n// draw straight line from starting point to P,\n// and set new starting point to P\nvoid line_to(vec2 p);\nvoid line_to(float x, float y);\n// draw quadratic bezier curve from starting point\n// over B1 to B2 and set new starting point to B2\nvoid curve_to(vec2 b1, vec2 b2);\nvoid curve_to(float b1x, float b1y, float b2x, float b2y);\n// connect current starting point with first\n// drawing point.\nvoid close_path();\n\n// clear screen in the current source color\nvoid clear();\n// fill paths and clear the path buffer\nvoid fill();\n// fill paths and preserve them for additional ops\nvoid fill_preserve();\n// stroke paths and clear the path buffer\nvoid stroke_preserve();\n// stroke paths and preserve them for additional ops\nvoid stroke();\n// clears the path buffer\nvoid new_path();\n\n// return rgb color for given hue (0..1)\nvec3 hue(float hue);\n// return rgb color for given hue, saturation and lightness\nvec3 hsl(float h, float s, float l);\nvec4 hsl(float h, float s, float l, float a);\n\n// rotate the context by A in radians\nvoid rotate(float a);\n// uniformly scale the context by S\nvoid scale(float s);\n// translate the context by offset P\nvoid translate(vec2 p);\nvoid translate(float x, float y);\n// clear all transformations for the active context\nvoid identity_matrix();\n// transform the active context by the given matrix\nvoid transform(mat3 mtx);\n// set the transformation matrix for the active context\nvoid set_matrix(mat3 mtx);\n\n// return the active query position for in_fill/in_stroke\n// by default, this is the mouse position\nvec2 get_query();\n// set the query position for subsequent calls to\n// in_fill/in_stroke; clears the query path\nvoid set_query(vec2 p);\n// true if the query position is inside the current path\nbool in_fill();\n// true if the query position is inside the current stroke\nbool in_stroke();\n\n// return the transformed coordinate of the current pixel\nvec2 get_origin();\n// draw a 1D graph from coordinate p, result f(p.x),\n// and gradient1D(f,p.x)\nvoid graph(vec2 p, float f_x, float df_x);\n// draw a 2D graph from coordinate p, result f(p),\n// and gradient2D(f,p)\nvoid graph(vec2 p, float f_x, vec2 df_x);\n// adds a custom distance field as path\n// this field will not be testable by queries\nvoid add_field(float c);\n\n// returns a gradient for 1D graph function f at position x\n#define gradient1D(f,x) (f(x + get_gradient_eps()) - f(x - get_gradient_eps())) / (2.0*get_gradient_eps())\n// returns a gradient for 2D graph function f at position x\n#define gradient2D(f,x) vec2(f(x + vec2(get_gradient_eps(),0.0)) - f(x - vec2(get_gradient_eps(),0.0)),f(x + vec2(0.0,get_gradient_eps())) - f(x - vec2(0.0,get_gradient_eps()))) / (2.0*get_gradient_eps())\n// draws a 1D graph at the current position\n#define graph1D(f) { vec2 pp = get_origin(); graph(pp, f(pp.x), gradient1D(f,pp.x)); }\n// draws a 2D graph at the current position\n#define graph2D(f) { vec2 pp = get_origin(); graph(pp, f(pp), gradient2D(f,pp)); }\n\n// represents the current drawing context\n// you usually don't need to change anything here\nstruct Context {\n    // screen position, query position\n    vec4 position;\n    vec2 shape;\n    float scale;\n    float line_width;\n    bool premultiply;\n    vec2 blur;\n    vec4 source;\n    vec2 start_pt;\n    vec2 last_pt;\n};\n    \n// save current source color, stroke width and starting\n// point from active context.\nContext save();\n// restore source color, stroke width and starting point\n// to a context previously returned by save()\nvoid restore(Context ctx);\n\n// draws a half-transparent debug gradient for the\n// active path\nvoid debug_gradient();\n// returns the gradient epsilon width\nfloat get_gradient_eps();\n\n/////////////////////////////////////////////////////////\n\nvoid paint();\n\n// implementation\n//////////////////////////////////////////////////////////\n\nvec2 aspect;\nvec2 uv;\nvec2 position;\nvec2 query_position;\nfloat ScreenH;\nfloat AA;\nfloat AAINV;\n\n//////////////////////////////////////////////////////////\n\nfloat det(vec2 a, vec2 b) { return a.x*b.y-b.x*a.y; }\n\n//////////////////////////////////////////////////////////\n\nvec3 hue(float hue) {\n    return clamp( \n        abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, \n        0.0, 1.0);\n}\n\nvec3 hsl(float h, float s, float l) {\n    vec3 rgb = hue(h);\n    return l + s * (rgb - 0.5) * (1.0 - abs(2.0 * l - 1.0));\n}\n\nvec4 hsl(float h, float s, float l, float a) {\n    return vec4(hsl(h,s,l),a);\n}\n\n//////////////////////////////////////////////////////////\n\n#define DEFAULT_SHAPE_V 1e+20\n\nContext _stack;\n\nvoid init (vec2 fragCoord) {\n    aspect = vec2(iResolution.x / iResolution.y, 1.0);\n    ScreenH = min(iResolution.x,iResolution.y);\n    AA = ScreenH*0.4;\n    AAINV = 1.0 / AA;\n    \n    uv = fragCoord.xy / iResolution.xy;\n    vec2 m = iMouse.xy / iResolution.xy;\n    \n    position = (uv*2.0-1.0)*aspect;\n    query_position = (m*2.0-1.0)*aspect;\n    \n    _stack = Context(\n        vec4(position, query_position),\n        vec2(DEFAULT_SHAPE_V),\n        1.0,\n        1.0,\n        false,\n        vec2(0.0,1.0),\n        vec4(vec3(0.0),1.0),\n        vec2(0.0),\n        vec2(0.0)\n    );\n}\n\nvec3 _color = vec3(1.0);\n\nvec2 get_origin() {\n    return _stack.position.xy;\n}\n\nvec2 get_query() {\n    return _stack.position.zw;\n}\n\nvoid set_query(vec2 p) {\n    _stack.position.zw = p;\n    _stack.shape.y = DEFAULT_SHAPE_V;\n}\n\nContext save() {\n    return _stack;\n}\n\nvoid restore(Context ctx) {\n    // preserve shape\n    vec2 shape = _stack.shape;    \n    _stack = ctx;\n    _stack.shape = shape;\n}\n\nmat3 mat2x3_invert(mat3 s)\n{\n    float d = det(s[0].xy,s[1].xy);\n    d = (d != 0.0)?(1.0 / d):d;\n\n    return mat3(\n        s[1].y*d, -s[0].y*d, 0.0,\n        -s[1].x*d, s[0].x*d, 0.0,\n        det(s[1].xy,s[2].xy)*d,\n        det(s[2].xy,s[0].xy)*d,\n        1.0);\n}\n\nvoid identity_matrix() {\n    _stack.position = vec4(position, query_position);\n    _stack.scale = 1.0;\n}\n\nvoid set_matrix(mat3 mtx) {\n    mtx = mat2x3_invert(mtx);\n    _stack.position.xy = (mtx * vec3(position,1.0)).xy;\n    _stack.position.zw = (mtx * vec3(query_position,1.0)).xy;    \n    _stack.scale = length(vec2(mtx[0].x,mtx[1].y));\n}\n\nvoid transform(mat3 mtx) {\n    mtx = mat2x3_invert(mtx);\n    _stack.position.xy = (mtx * vec3(_stack.position.xy,1.0)).xy;\n    _stack.position.zw = (mtx * vec3(_stack.position.zw,1.0)).xy;\n    vec2 u = vec2(mtx[0].x, mtx[1].x);\n    _stack.scale *= length(u);\n}\n\nvoid rotate(float a) {\n    float cs = cos(a), sn = sin(a);\n    transform(mat3(\n        cs, sn, 0.0,\n        -sn, cs, 0.0,\n        0.0, 0.0, 1.0));\n}\n\nvoid scale(float s) {\n    transform(mat3(s,0.0,0.0,0.0,s,0.0,0.0,0.0,1.0));\n}\n\nvoid translate(vec2 p) {\n    transform(mat3(1.0,0.0,0.0,0.0,1.0,0.0,p.x,p.y,1.0));\n}\n\nvoid translate(float x, float y) { translate(vec2(x,y)); }\n\nvoid clear() {\n    _color = mix(_color, _stack.source.rgb, _stack.source.a);\n}\n\nvoid blit(out vec4 dest) {\n    dest = vec4(_color, 1.0);\n}\n\nvoid blit(out vec3 dest) {\n    dest = _color;\n}\n\nvoid add_field(vec2 d) {\n    d = d / _stack.scale;\n    _stack.shape = min(_stack.shape, d);    \n}\n\nvoid add_field(float c) {\n    _stack.shape.x = min(_stack.shape.x, c);\n}\n\nvoid new_path() {\n    _stack.shape = vec2(DEFAULT_SHAPE_V);\n}\n\nvoid debug_gradient() {\n    _color = mix(_color, \n        hsl(_stack.shape.x * 6.0, \n            1.0, (_stack.shape.x>=0.0)?0.5:0.3), \n        0.5);\n}\n\nvoid set_blur(float b) {\n    if (b == 0.0) {\n        _stack.blur = vec2(0.0, 1.0);\n    } else {\n        _stack.blur = vec2(\n            b,\n            0.0);\n    }\n}\n\nvoid write_color(vec4 rgba, float w) {\n    float src_a = w * rgba.a;\n    float dst_a = _stack.premultiply?w:src_a;\n    _color = _color * (1.0 - src_a) + rgba.rgb * dst_a;    \n}\n\nvoid premultiply_alpha(bool enable) {\n    _stack.premultiply = enable;\n}\n\nfloat calc_aa_blur(float w) {\n    vec2 blur = _stack.blur;\n    w -= blur.x;\n    float wa = clamp(-w*AA, 0.0, 1.0);\n    float wb = clamp(-w / blur.x + blur.y, 0.0, 1.0);    \n\treturn wa * wb; //min(wa,wb);    \n}\n\nvoid fill_preserve() {\n    write_color(_stack.source, calc_aa_blur(_stack.shape.x));\n}\n\nvoid fill() {\n    fill_preserve();\n    new_path();\n}\n\nvoid set_line_width(float w) {\n    _stack.line_width = w;\n}\n\nvoid set_line_width_px(float w) {\n    _stack.line_width = w*_stack.scale/AA;\n}\n\nfloat get_gradient_eps() {\n    return _stack.scale/AA;\n}\n\nvec2 stroke_shape() {\n    return abs(_stack.shape) - _stack.line_width/_stack.scale;\n}\n\nvoid stroke_preserve() {\n    float w = stroke_shape().x;\n    write_color(_stack.source, calc_aa_blur(w));\n}\n\nvoid stroke() {\n    stroke_preserve();\n    new_path();\n}\n\nbool in_fill() {\n    return (_stack.shape.y <= 0.0);\n}\n\nbool in_stroke() {\n    float w = stroke_shape().y;\n    return (w <= 0.0);\n}\n\nvoid set_source_rgba(vec4 c) {\n    _stack.source = c;\n}\n\nvoid set_source_rgba(float r, float g, float b, float a) { \n    set_source_rgba(vec4(r,g,b,a)); }\n\nvoid set_source_rgb(vec3 c) {\n    set_source_rgba(vec4(c,1.0));\n}\n\nvoid set_source_rgb(float r, float g, float b) { set_source_rgb(vec3(r,g,b)); }\n\nvoid set_source(sampler2D image) {\n    set_source_rgba(texture(image, _stack.position.xy));\n}\n\nvec2 length2(vec4 a) {\n    return vec2(length(a.xy),length(a.zw));\n}\n\nvec2 dot2(vec4 a, vec2 b) {\n    return vec2(dot(a.xy,b),dot(a.zw,b));\n}\n\nvoid rectangle(vec2 o, vec2 s) {\n    s*=0.5;\n    o += s;\n    vec4 d = abs(o.xyxy - _stack.position) - s.xyxy;\n    vec4 dmin = min(d,0.0);\n    vec4 dmax = max(d,0.0);\n    add_field(max(dmin.xz, dmin.yw) + length2(dmax));\n}\n\nvoid rectangle(float ox, float oy, float sx, float sy) {\n    rectangle(vec2(ox,oy), vec2(sx,sy));\n}\n\nvoid circle(vec2 p, float r) {\n    vec4 c = _stack.position - p.xyxy;\n    add_field(vec2(length(c.xy),length(c.zw)) - r);\n}\nvoid circle(float x, float y, float r) { circle(vec2(x,y),r); }\n\nvoid move_to(vec2 p) {\n    _stack.start_pt = p;\n    _stack.last_pt = p;\n}\n\nvoid move_to(float x, float y) { move_to(vec2(x,y)); }\n\n// stroke only\nvoid line_to(vec2 p) {\n    vec4 pa = _stack.position - _stack.last_pt.xyxy;\n    vec2 ba = p - _stack.last_pt;\n    vec2 h = clamp(dot2(pa, ba)/dot(ba,ba), 0.0, 1.0);\n    add_field(length2(pa - ba.xyxy*h.xxyy));\n    \n    _stack.last_pt = p;\n}\n\nvoid line_to(float x, float y) { line_to(vec2(x,y)); }\n\nvoid close_path() {\n    line_to(_stack.start_pt);\n}\n\n// from https://www.shadertoy.com/view/ltXSDB\n\n// Solve cubic equation for roots\nvec3 bezier_solve(float a, float b, float c) {\n    float p = b - a*a / 3.0, p3 = p*p*p;\n    float q = a * (2.0*a*a - 9.0*b) / 27.0 + c;\n    float d = q*q + 4.0*p3 / 27.0;\n    float offset = -a / 3.0;\n    if(d >= 0.0) { \n        float z = sqrt(d);\n        vec2 x = (vec2(z, -z) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        return vec3(offset + uv.x + uv.y);\n    }\n    float v = acos(-sqrt(-27.0 / p3) * q / 2.0) / 3.0;\n    float m = cos(v), n = sin(v)*1.732050808;\n    return vec3(m + m, -n - m, n - m) * sqrt(-p / 3.0) + offset;\n}\n\n// Find the signed distance from a point to a quadratic bezier curve\nfloat bezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{    \n    B = mix(B + vec2(1e-4), B, abs(sign(B * 2.0 - A - C)));\n    vec2 a = B - A, b = A - B * 2.0 + C, c = a * 2.0, d = A - p;\n    vec3 k = vec3(3.*dot(a,b),2.*dot(a,a)+dot(d,b),dot(d,a)) / dot(b,b);      \n    vec3 t = clamp(bezier_solve(k.x, k.y, k.z), 0.0, 1.0);\n    vec2 pos = A + (c + b*t.x)*t.x;\n    float dis = length(pos - p);\n    pos = A + (c + b*t.y)*t.y;\n    dis = min(dis, length(pos - p));\n    pos = A + (c + b*t.z)*t.z;\n    dis = min(dis, length(pos - p));\n    return dis; // * bezier_sign(A, B, C, p);\n}\n\nvoid curve_to(vec2 b1, vec2 b2) {\n    add_field(vec2(\n        bezier(_stack.last_pt, b1, b2, _stack.position.xy),\n        bezier(_stack.last_pt, b1, b2, _stack.position.zw)));\n\t_stack.last_pt = b2;\n}\n\nvoid curve_to(float b1x, float b1y, float b2x, float b2y) {\n    curve_to(vec2(b1x,b1y),vec2(b2x,b2y));\n}\n\nvoid graph(vec2 p, float f_x, float df_x) {\n    add_field(abs(f_x - p.y) / sqrt(1.0 + (df_x * df_x)));\n}\n\nvoid graph(vec2 p, float f_x, vec2 df_x) {\n    add_field(abs(f_x) / length(df_x));\n}\n\n//////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    init(fragCoord);\n    \n    paint();\n    \n    fragColor = vec4(_color.xyz, 1.0);\n}\n\n#ifdef GLSLSANDBOX\nvoid main() {\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}\n#endif\n\n//////////////////////////////////////////////////////////\n\n// polynomial arithmetic\n// describes piecewise univariate polynomial with degree 2\nstruct poly2 {\n    // the coefficients for f(x) = a0 * x^0 + a1 * x^1 + a2 * x^2\n    vec3 a;\n    // distance to horizon\n    float h;\n};\n\nconst float infinity = 1. / 0.;\n\nbool hasaxis(float h) {\n    return (h != infinity);\n}\n\nbool hasaxis(poly2 f) {\n    return hasaxis(f.h);\n}\n\npoly2 pa_init(float x) {\n    return poly2(vec3(x,1.0,0.0),infinity);\n}\n\nfloat merge_axes(float f, float g) {\n    if (hasaxis(g)) {\n        if (hasaxis(f)) {\n            float a0 = min(f, g);\n            float a1 = max(f, g);\n            return ((a0 > 0.0)?a0:a1);\n        } else {\n            return g;\n\t\t}\n    }\n    return f;\n}\n\nfloat merge_axes(poly2 f, poly2 g) {\n    return merge_axes(f.h,g.h);\n}\n\npoly2 pa_add(poly2 f, poly2 g) {\n    return poly2(f.a + g.a,merge_axes(f,g));\n}\npoly2 pa_add(poly2 f, float c) {\n    return poly2(vec3(f.a[0] + c,f.a[1],f.a[2]),f.h);\n}\npoly2 pa_add(float c, poly2 f) {\n    return poly2(vec3(f.a[0] + c,f.a[1],f.a[2]),f.h);\n}\npoly2 pa_sub(poly2 f, poly2 g) {\n    return poly2(f.a - g.a,merge_axes(f,g));\n}\npoly2 pa_sub(poly2 f, float c) {\n    return poly2(vec3(f.a[0] - c,f.a[1],f.a[2]),f.h);\n}\npoly2 pa_sub(float c, poly2 f) {\n    return poly2(vec3(c - f.a[0],-f.a[1],-f.a[2]),f.h);\n}\npoly2 pa_unm(poly2 f) {\n    return poly2(-f.a,f.h);\n}\n\n// {a0 a1 a2} * {b0 b1 b2}\n// = {a0*b0 (a0*b1 + a1*b0) (a0*b2 + a2*b0 + a1*b1) (a1*b2 + a2*b1) (a2*b2)}\n// the two new coefficients are truncated, so only linear\n// functions are going to work here\npoly2 pa_mul(poly2 f, poly2 g) {    \n    return poly2(vec3(\n    \tf.a[0] * g.a[0],\n\t    f.a[0] * g.a[1] + f.a[1] * g.a[0],\n        /* f.a[0] * g.a[2] + */ f.a[1] * g.a[1] /* + f.a[2] * g.a[0] */\n        //f.a[1] * g.a[2] + f.a[2] * g.a[1],\n        //f.a[2] * g.a[2]\n        ), f.h);\n}\npoly2 pa_mul(poly2 f, float c) {\n    return poly2(f.a * c,f.h);\n}\npoly2 pa_mul(float c, poly2 f) {\n    return poly2(f.a * c,f.h);\n}\n\npoly2 pa_pow2(poly2 f) {\n    return poly2(vec3(\n    \tf.a[0] * f.a[0],\n\t    2.0 * f.a[0] * f.a[1],\n        /* 2.0 * f.a[0] * f.a[2] + */ f.a[1] * f.a[1]\n        //2.0 * f.a[1] * f.a[2],\n        //f.a[2] * f.a[2]\n        ), f.h);\n}\n\n// returns f(x), f'(x), f''(x)\nvec3 pa_f(vec3 a, float x) {\n    return vec3(\n        a[0] + (a[1] +       a[2] * x) * x,\n                a[1] + 2.0 * a[2] * x,\n                             a[2]);\n}\n\nfloat solve_quadratic(vec3 fa, float x) {\n    float a = fa[2];\n    float b = fa[1];\n    float c = fa[0];\n\n    // the quadratic solve doesn't work for a=0\n    // so we need a branch here.\n    if (a == 0.0) {\n        return -c / b;\n    } else { \n        // (-b +- sqrt(b*b - 4.0*a*c)) / 2.0*a\n        float k = -0.5*b/a;\n        float q = sqrt(k*k - c/a);\n        float q0 = k - q;\n        float q1 = k + q;\n        \n        // pick the root right of x\n\t\treturn (q0 <= x)?q1:q0;\n    }\n}\n\nfloat solve_quadratic0(vec3 fa) {\n    float a = fa[2];\n    float b = fa[1];\n    float c = fa[0];\n\n    // the quadratic solve doesn't work for a=0\n    // so we need a branch here.\n    if (a == 0.0) {\n        return -c / b;\n    } else { \n        // (-b +- sqrt(b*b - 4.0*a*c)) / 2.0*a\n        float k = -0.5*b/a;\n        float q = sqrt(k*k - c/a);\n        // pick the closest root right of 0\n\t\treturn k + ((k <= q)?q:-q);\n    }\n}\n\nfloat solve_quadratic(poly2 f) {\n    return solve_quadratic0(f.a);\n}\n\n// returns the x position of the next root, where f(x) = 0\nfloat nextroot(poly2 f) {\n    return solve_quadratic(f);\n}\n\n// returns the position of the next event (root or start of new segment)\nfloat nextevent(poly2 f) {\n    float s = nextroot(f);\n    float h = (f.h <= 0.0)?infinity:f.h;\n    s = (s <= 0.0)?h:min(s,h);\n    return s;\n}\n\nfloat axis(poly2 f) {\n    return nextevent(f);\n}\n\npoly2 pa_abs(poly2 f) {\n    float s = ((f.a[0] < 0.0)?-1.0:1.0);\n    return poly2(f.a * s, axis(f));\n}\n\n// intermediate abs: discontinuity will disappear in next step\npoly2 pa_imabs(poly2 f) {\n    float s = ((f.a[0] < 0.0)?-1.0:1.0);\n    return poly2(f.a * s, f.h);\n}\n\npoly2 pa_const(float c) {\n    return poly2(vec3(c,0.0,0.0), infinity);\n}\n\npoly2 pa_ipol(vec2 a, vec2 b) {\n    float a1 = (a.y - b.y)/(a.x - b.x);\n\tfloat a0 = a.y - a1*a.x;\n    return poly2(vec3(a0, a1, 0.0), infinity);\n}\n\npoly2 pa_ipol(vec2 a, vec2 b, float k) {\n    float a2 = 0.5*k;\n    float aa2 = a2*a.x*a.x;\n    float a1 = (a.y - b.y + a2*b.x*b.x - aa2) / (a.x - b.x);\n    float a0 = a.y - a1*a.x - aa2;\n    return poly2(vec3(a0, a1, a2), infinity);\n}\n\npoly2 pa_min(poly2 f, poly2 g) {\n    float h = axis(pa_sub(f,g));\n    float fx = f.a[0];\n    float gx = g.a[0];\n    return poly2((fx < gx)?f.a:g.a, h);\n}\npoly2 pa_max(poly2 f, poly2 g) {\n    float h = axis(pa_sub(f,g));\n    float fx = f.a[0];\n    float gx = g.a[0];\n    return poly2((fx > gx)?f.a:g.a, h);\n    \n}\n\n// intermediate min: discontinuity will disappear\npoly2 pa_immin(poly2 f, poly2 g) {\n    float fx = f.a[0];\n    float gx = g.a[0];\n    return poly2((fx < gx)?f.a:g.a, merge_axes(f,g));\n}\n\n// intermediate max: discontinuity will disappear\npoly2 pa_immax(poly2 f, poly2 g) {\n    float fx = f.a[0];\n    float gx = g.a[0];\n    return poly2((fx > gx)?f.a:g.a, merge_axes(f,g));\n    \n}\n\n// can only be used once on flat surfaces\npoly2 pa_smin(poly2 a, poly2 b, float r) {\n    poly2 c = pa_sub(a,b);\n    float h0 = axis(pa_sub(c, r));\n    float h1 = axis(pa_add(c, r));\n    float h = merge_axes(h0,h1);\n    poly2 e = pa_immin(\n        pa_immax(\n            pa_add(\n                pa_unm(\n                    pa_imabs(\n                        pa_sub(a, b))), r),\n            pa_const(0.0)),pa_const(r));\n    poly2 d = pa_sub(pa_immin(a, b), pa_mul(pa_pow2(e), 0.25 / r));\n    d.h = h;\n    return d;\n}\n\n// approximates blend with a quadratic patch, but\n// still buggy. do not use.\npoly2 pa_smin2(poly2 a, poly2 b, float r) {\n    poly2 c = pa_sub(a,b);\n    float h0 = axis(pa_sub(c, r));\n    float h1 = axis(pa_add(c, r));\n    float x0 = min(h0,h1);\n    float x1 = max(h0,h1);\n    float h = merge_axes(h0,h1);\n    if (x0 > 0.0) {\n        a.h = h;\n        return a;\n    } else if (x1 <= 0.0) {\n        b.h = h;\n        return b;\n    } else {\n        vec3 ay0 = pa_f(a.a, x0);\n        vec3 by0 = pa_f(b.a, x0);\n        vec3 ay1 = pa_f(a.a, x1);\n        vec3 by1 = pa_f(b.a, x1);\n        vec3 y0 = (ay0.x < by0.x)?ay0:by0;\n        vec3 y1 = (ay1.x < by1.x)?ay1:by1;\n        poly2 m = pa_ipol(vec2(x0, y0.x), vec2(x1, y1.x), (y1.y - y0.y) / (x1 - x0));\n        m.h = x0;\n    \treturn m;\n    }\n}\n\npoly2 pa_map(poly2 f) {\n    float wf = mix(0.0,0.3,sin(iTime)*0.5+0.5);\n    float wu = mix(1.0,0.0,cos(iTime*0.2)*0.5+0.5);\n\n#if 0\n    f = pa_add(pa_mul(f,0.85),wf);\n\n    f = pa_abs(f);\n    f = pa_mul(f, -1.0);\n    f = pa_add(f, 0.5);\n    f = pa_add(f, mix(-0.8,0.3,wu));\n    f = pa_abs(f);\n    f = pa_add(f, -0.2);\n    f = pa_abs(f);\n    f = pa_add(f, -0.1);\n#endif\n#if 0\n    poly2 a = pa_add(pa_mul(f,0.9),0.1);\n    poly2 b = pa_add(pa_mul(f,-0.2),0.3);\n    \n    f = pa_smin2(a,b,0.1);\n    \n    //f.w = max(a.w,b.w);\n    \n    f = pa_add(f,wf-0.5);\n    //f = pa_abs(f);\n    f = pa_add(f,0.2);\n#endif\n#if 0\n    poly2 x = pa_add(pa_mul(f, 0.44721),0.2);\n    poly2 y = pa_add(pa_mul(f, 0.89443),-0.3);\n    \n    //f = pa_add(pa_abs(x),pa_abs(y));\n    \n    f = pa_add(pa_pow2(x),pa_pow2(y));\n    //f = pa_sqrt(f);\n    f = pa_add(f,-0.9+wf);\n    f = pa_mul(f, -0.5);\n    f = pa_abs(f);\n    f = pa_add(f, -0.3);\n#endif\n#if 0\n    \n    poly2 a = pa_pow2(f);\n    a = pa_add(a, -0.2);\n\n    poly2 b = pa_pow2(pa_add(f, -0.5));\n    b = pa_add(b, -0.2);\n    b = pa_unm(b);\n    \n    f = pa_smin(a,b,0.1);\n    \n    f = pa_add(f, mix(-0.5,0.5,wu));\n    \n    \n#endif\n#if 1\n    // rotating cube with subtracted sphere\n    poly2 x = pa_const(0.0);\n    poly2 y = f;\n\tpoly2 z = pa_const(0.45);\n    \n    float a = iTime*0.1;\n    float s = sin(a);\n    float c = cos(a);\n    \n    poly2 rz = pa_sub(pa_mul(c, z),pa_mul(s, y));\n    poly2 ry = pa_add(pa_mul(s, z),pa_mul(c, y));\n    \n    // cube\n    poly2 cube = pa_sub(pa_max(pa_abs(x),pa_max(pa_abs(ry),pa_abs(rz))),0.5);\n    \n    // sphere\n    poly2 sphere = pa_sub(pa_add(pa_add(pa_pow2(x),pa_pow2(ry)),pa_pow2(pa_sub(rz,0.5))),0.25*0.25);\n    \n    // subtract sphere from cube\n    f = pa_max(cube, pa_unm(sphere));\n    \n    \n#endif\n    \n    //f = pa_ipol(f, vec2(-1.0, 0.0), vec2(1.0, 1.0), -0.5);\n    \n    return f;\n}\n\n// how to convert pa_map to a classic map function\n// t is the ray scalar\n// returns function value at that point, and distance\n// to next root or horizon\nvec2 map(float t) {\n    poly2 f = pa_map(pa_init(t));\n    return vec2(f.a[0], nextevent(f));\n}\n\nfloat rayf(float t) {\n    return pa_map(pa_init(t)).a[0];\n}\n\nfloat rayff(float t) {\n    return pa_map(pa_init(t)).a[1];\n}\n\nfloat rayfff(float t) {\n    return pa_map(pa_init(t)).a[2];\n}\n\nfloat raynextroot(float t) {\n    return nextroot(pa_map(pa_init(t)));\n}\n\nfloat rayhorizon(float t) {\n    return pa_map(pa_init(t)).h;\n}\n\nvoid paint() {\n\tvec2 ms = ((iMouse.xy/iResolution.xy)*2.0-1.0) * aspect;\n\t\n    // clear screen\n\t\n\tset_source_rgb(vec3(0.0,0.0,0.5));\n\tclear();\n\n\tset_line_width_px(1.3);\n    \n    // draw zero crossing\n    move_to(-2.0,0.0);\n    line_to(2.0,0.0);\n    set_line_width_px(1.0);\n    set_source_rgb(vec3(1.0,0.0,0.0));\n    stroke();\n\n    #ifdef DEBUG_VIZ\n\n    // draw 1D graph of estimated distance to horizon\n    graph1D(rayhorizon);\n    set_line_width_px(1.3);\n    set_source_rgb(vec3(1.0,0.0,1.0));\n    stroke();    \n\n    // draw 1D graph of estimated distance to root\n    graph1D(raynextroot);\n    set_line_width_px(1.3);\n    set_source_rgb(vec3(0.0,1.0,1.0));\n    stroke();    \n\n    // draw 1D graph of second derivative\n    graph1D(rayfff);\n    set_line_width_px(1.3);\n    set_source_rgb(vec3(0.5,1.0,0.0));\n    stroke();    \n\n    // draw 1D graph of first derivative\n    graph1D(rayff);\n    set_line_width_px(1.3);\n    set_source_rgb(vec3(1.0,1.0,0.0));\n    stroke();    \n    \n    #endif\n\n    // draw 1D graph of ray distances\n    graph1D(rayf);\n    set_line_width_px(1.3);\n    set_source_rgb(vec3(1.0));\n    stroke();    \n    \n\tfloat maxt = aspect.x;\n    \n\tfloat precis = 0.01;\n\tfloat t = (iMouse.z > 0.5)?ms.x:-aspect.x;\n    \n\tfor(int i = 0; i < 20; i++) {\n\t\tif(t > maxt) continue;\n\t\tset_source_rgb(hsl(float(i)/20.0, 1.0, 0.5));\n        vec2 d = map(t);\n        float w = t + d.y;\n        move_to(t, 0.0);\n        line_to(t, d.x);  \n        line_to(w, 0.0);\n\t\tstroke();\n        if (abs(d.x) <= precis) {\n            circle(t, 0.0, 0.03);\n            fill();\n        }        \n        t = w + 0.001;\n\t}\n    if (t > maxt) {\n        set_source_rgb(vec3(0.0,1.0,1.0));\n        move_to(aspect.x * 0.99, -1.0);\n        line_to(aspect.x * 0.99, 1.0);\n        stroke();\n    }\n    \n    \n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}