{
    "Shader": {
        "info": {
            "date": "1545966851",
            "description": "circle pixel art inspired by a building I saw once",
            "flags": 0,
            "hasliked": 0,
            "id": "XlGBWm",
            "likes": 9,
            "name": "Cirxel",
            "published": 3,
            "tags": [
                "pixel",
                "circle"
            ],
            "usePreview": 0,
            "username": "domrally",
            "viewed": 263
        },
        "renderpass": [
            {
                "code": "/// by Dom Mandy in 2018\n\n\nvec2 translate(vec2 p, vec2 offset) {\n    return p - offset;\n}\n\n\nvec2 rotate(vec2 p, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    mat2 R = mat2(c, -s, s, c);\n    return R * p;\n}\n\n\nvec3 draw(vec3 buffer, float d, float r, vec3 color) {\n    float up = min(iResolution.x, iResolution.y);\n    d = up * d;\n    r = r * up / 360.0;\n  \tfloat aa = fwidth(d);\n   \treturn mix(buffer, color.xyz, 1.0 - smoothstep(r - aa, r, d));\n}\n\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    // Normalized pixel coordinates\n    vec2 coord = fragCoord - iResolution.xy / 2.0;\n    vec2 uv = coord / min(iResolution.x, iResolution.y);\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));\n    // time\n    vec2 p = uv;\n    const float speed = 4.0;\n    float time = speed * iTime;\n    // repeat\n    const float r = 1.0 / 32.0;\n    const vec2 c = vec2(r);\n    vec2 q = mod(p, c) - 0.5 * c;\n    // distance\n    float d = sdCircle(q, r / 4.0);\n    // \n    vec2 m = floor(p / c);\n    // color and antialias\n    col = draw(vec3(0.0), d, 1.5, col);\n    float t = length(m) - time;\n    const float pi = 3.1415926535897932384626433832795;\n    float n = mod(t, (2.0 * pi));\n    float e = sdCircle((m + rotate(vec2(1.0), n)), 5.0);\n    e = sin(e);\n    \n    col = mix(0.2 * col, col, 1.0 - smoothstep(-1.0, 1.0, e));\n    fragColor = vec4(col, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// distance function from Inigo Quilez\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}