{
    "Shader": {
        "info": {
            "date": "1625026594",
            "description": "Randomly packing circles. What I was actually trying to make when I accidentally created the cool coral pattern ([url=https://www.shadertoy.com/view/sl2GDd]https://www.shadertoy.com/view/sl2GDd[/url]).",
            "flags": 32,
            "hasliked": 0,
            "id": "7lj3Dd",
            "likes": 20,
            "name": "Random Circle Packing",
            "published": 3,
            "tags": [
                "raymarching",
                "circles",
                "random",
                "iterative",
                "circlepacking"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 545
        },
        "renderpass": [
            {
                "code": "// Hue to RGB function from Fabrice's shadertoyunofficial blog:\n#define hue2rgb(hue) (0.6 + 0.6 * cos(6.3 * hue + vec3(0.0, 23.0, 21.0)))\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float unit = 2.0 / iResolution.y;\n    vec4 buf = texture(iChannel0, fragCoord / iResolution.xy);\n    vec3 color = hue2rgb(buf.w) * (0.25 + 0.5 * fract(484.841 * cos(953.583 * buf.w)));\n    fragColor = vec4(color * smoothstep(unit, 0.0, buf.x), 1.0);\n    if (buf.x < 0.0) fragColor += 0.125 + 0.125 * sin(buf.x * 400.0);\n    //fragColor = vec4(0.5 + 0.5 * buf.yz, 0.0, 1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define load(addr) texelFetch(iChannel0, addr, 0)\n#define pixel2uv(pixel) ((pixel - 0.5 * iResolution.xy) / iResolution.y)\n#define uv2pixel(uv) (uv * iResolution.y + 0.5 * iResolution.xy)\n#define packCircle(packed, new, id) (new.x < packed.x ? vec4(new, id) : packed)\n\n// https://www.shadertoy.com/view/4djSRW\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\nvec2 Hash12(in float x) {\n    vec3 p3 = fract(x * vec3(0.1031, 0.103, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\n// vec3(signed distance, gradient)\n// Buffering the distance field already lowers\n// precision so buffering an exact gradient is\n// helpful\nvec3 sdgDisk(in vec2 p, in float r) {\n    float d = length(p);\n    return vec3(d - r, p / d);\n}\n\nvoid mainImage(out vec4 data, in vec2 addr) {\n    vec2 bound = vec2(0.5 * iResolution.x / iResolution.y, 0.5);\n    vec2 uv = pixel2uv(addr);\n    data = vec4(0.0);\n\n    if (iFrame > 0) {\n        ivec2 iAddr = ivec2(addr);\n        float seed = iDate.w;\n        data = load(iAddr);\n\n        // \"Random\" starting position\n        vec2 start = pixel2uv(iResolution.xy * Hash12(seed));\n\n        // Iteratively project onto the distance field's surface\n        for (int i=0; i < 10; i++) {\n            vec3 sdg = load(ivec2(uv2pixel(start))).xyz;\n            sdg.x -= 0.01; // Slightly extra to be outside\n            start -= sdg.yz * sdg.x;\n            if (abs(sdg.x) < 0.001) break;\n        }\n\n        // Raymarch to the next surface\n        vec2 dir = load(ivec2(uv2pixel(start))).yz;\n        float t = 0.0;\n\n        // Maximum distance the ray can travel (to the edge of the screen)\n        vec2 isect = (bound * sign(dir) - start) / dir;\n        float tMax = min(isect.x, isect.y);\n\n        bool hit = false;\n        for (int i=0; i < 100; i++) {\n            vec2 p = start + dir * t;\n            float d = load(ivec2(uv2pixel(p))).x;\n            if (d < 0.001) { hit = true; break; }\n            if (t > tMax) break;\n            t += d;\n        }\n\n        if (hit) {\n            vec2 center = start + dir * min(0.5 * t, tMax);\n            float radius = load(ivec2(uv2pixel(center))).x;\n            if (radius > 0.0) data = packCircle(data, sdgDisk(uv - center, radius), sin(seed));\n        }\n    }\n\n    if (iFrame == 0 || iMouse.z > 0.0) { // Initialize with distance to boundaries\n        vec2 b = abs(uv) - bound;\n        if (b.x > b.y) data.xy = vec2(-b.x, -sign(uv.x));\n        else data.xz = vec2(-b.y, -sign(uv.y));\n        data.w = 0.0;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}