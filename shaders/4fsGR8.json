{
    "Shader": {
        "info": {
            "date": "1702760039",
            "description": "press r to reset, change rules in common tab, click to randomize cells",
            "flags": 48,
            "hasliked": 0,
            "id": "4fsGR8",
            "likes": 1,
            "name": "game of life simulator",
            "published": 3,
            "tags": [
                "gameoflife"
            ],
            "usePreview": 0,
            "username": "janpitokiala",
            "viewed": 100
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float heat = textureLod(iChannel0, uv, 3.).r-.01;\n    \n    fragColor = vec4(max(heat/fwidth(heat),0.),vec3(0.))+texture(iChannel1,uv);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define P(x,y) neighborhood+=S(x,y)\n#ifdef REPEAT\n#define S(x,y) int(texelFetch(iChannel0,ivec2(mod(fragCoord+vec2(x,y),iResolution.xy)),0).r)\n#else\n#define S(x,y) int(texelFetch(iChannel0,ivec2(fragCoord)+ivec2(x,y),0).r)\n#endif\n#define R(x) if(neighborhood==x){color=1.;}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame<=10||texelFetch(iChannel2, ivec2(82,1), 0).r>0.5||(distance(iMouse.xy,fragCoord)<10.&&iMouse.z>0.)) {\n      fragColor = vec4(vec3(step(1.-(SOUP_DENSITY),texture(iChannel1,fragCoord/iResolution.y+iDate.w).r)),1.);\n      return;\n    }\n    int neighborhood = 0;\n    P(-1,-1);P(0,-1);P(1,-1);\n    P(-1,0);         P(1,0);\n    P(-1,1); P(0,1); P(1,1);\n    float color = 0.;\n    if(S(0,0)==0) {\n      b\n    } else {\n      s\n    }\n    fragColor = vec4(vec3(color),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define P(x,y) neighborhood+=S(x,y)\n#ifdef REPEAT\n#define S(x,y) int(texelFetch(iChannel0,ivec2(mod(fragCoord+vec2(x,y),iResolution.xy)),0).r)\n#else\n#define S(x,y) int(texelFetch(iChannel0,ivec2(fragCoord)+ivec2(x,y),0).r)\n#endif\n#define R(x) if(neighborhood==x){color=1.;}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int neighborhood = 0;\n    P(-1,-1);P(0,-1);P(1,-1);\n    P(-1,0);         P(1,0);\n    P(-1,1); P(0,1); P(1,1);\n    float color = 0.;\n    if(S(0,0)==0) {\n      b\n    } else {\n      s\n    }\n    fragColor = vec4(vec3(color),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define P(x,y) neighborhood+=S(x,y)\n#ifdef REPEAT\n#define S(x,y) int(texelFetch(iChannel0,ivec2(mod(fragCoord+vec2(x,y),iResolution.xy)),0).r)\n#else\n#define S(x,y) int(texelFetch(iChannel0,ivec2(fragCoord)+ivec2(x,y),0).r)\n#endif\n#define R(x) if(neighborhood==x){color=1.;}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int neighborhood = 0;\n    P(-1,-1);P(0,-1);P(1,-1);\n    P(-1,0);         P(1,0);\n    P(-1,1); P(0,1); P(1,1);\n    float color = 0.;\n    if(S(0,0)==0) {\n      b\n    } else {\n      s\n    }\n    fragColor = vec4(vec3(color),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = mix(vec4(vec3(abs(texture(iChannel0, uv).r-texture(iChannel1, uv).r)),1.),texture(iChannel2, uv),0.9);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 260,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/previz/buffer03.png"
                    }
                ],
                "name": "Buffer D",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 260
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define REPEAT\n#define SOUP_DENSITY 0.5\n#define b R(3)\n#define s R(2) else R(3)",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}