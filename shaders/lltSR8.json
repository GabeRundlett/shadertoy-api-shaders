{
    "Shader": {
        "info": {
            "date": "1478271643",
            "description": "Originial shader : https://www.shadertoy.com/view/lt3SRH\nI'm just messing with the parameters",
            "flags": 32,
            "hasliked": 0,
            "id": "lltSR8",
            "likes": 11,
            "name": "Tweaking a Smoothlife",
            "published": 3,
            "tags": [
                "2d",
                "fork",
                "cellularautomata"
            ],
            "usePreview": 0,
            "username": "antonOTI",
            "viewed": 1172
        },
        "renderpass": [
            {
                "code": "\n#define chan iChannel1\n\n#define sample(pos) texture(chan,mod(pos,vec2(1.,1.)))\n\n#define total 15.\nmat3 k = mat3(\n    1.,2.,1.,\n    2.,3.,2.,\n    1.,2.,1.);\n#define L 1.1\n\n#define Q 2.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 d = (vec2(1.,1.) / iResolution.xy) * L;\n    \n    vec4 acc = \n          sample(uv + vec2(-1., 1.) * .707* d) * k[0][0] ;\n    acc +=sample(uv + vec2( 0., 1.) * d) * k[1][0] ;\n    acc +=sample(uv + vec2( 1., 1.) * .707 * d) * k[2][0] ;\n    acc +=sample(uv + vec2(-1., 0.) * d) * k[0][1] ;\n    acc +=sample(uv + vec2( 0., 0.) * d) * k[1][1] ;\n    acc +=sample(uv + vec2( 1., 0.) * d) * k[2][1] ;\n    acc +=sample(uv + vec2(-1.,-1.) * .707* d) * k[0][2] ;\n    acc +=sample(uv + vec2( 0.,-1.) * d) * k[1][2] ;\n    acc +=sample(uv + vec2( 1.,-1.) * .707* d) * k[2][2] ;\n    \n  \tvec3 col = acc.grb / total;\n    col = floor(col * Q) / Q;\n   // col.r = 0.;\n   \tcol *=  1.5;\n    //col = col * fwidth(col.g) * 3.;\n\tfragColor = vec4(col,1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// based on <https://git.io/vz29Q>\n// Copied from davidar's Smooth Life Gliders (https://www.shadertoy.com/view/Msy3RD)\n//\n// ---------------------------------------------\n// SmoothLife (discrete time stepping 2D)\nstruct SmoothLifeParameters {\n\tfloat ra;       // outer radius\n\tfloat rr;       // ratio of radii\n\tfloat b;        // smoothing border width\n\tfloat b1;       // birth1\n\tfloat b2;       // birth2\n\tfloat d1;       // survival1\n\tfloat d2;       // survival2\n\tfloat sn;       // sigmoid width for outer fullness\n\tfloat sm;       // sigmoid width for inner fullness\n    float dt;       // dt per frame\n};\n\n// SmoothLifeL\nconst SmoothLifeParameters p = SmoothLifeParameters(6.0, // outer radius\n                                                    3.0, // ratio of radii\n                                                    1.0,  // smoothing border width\n                                                    0.31, // birth1\n                                                    0.44, // birth2\n                                                    0.514, // survival1\n                                                    0.76, // survival2\n                                                    0.028, // sigmoid width for outer fullness\n                                                    0.147, // sigmoid width for inner fullness\n                                                    .15); // dt per frame\n    \nfloat smooth_s(float x, float a, float ea) \n{ \n    return 1.0 / (1.0 + exp((a - x) * 4.0 / ea));\n}\n\nfloat sigmoid_ab(float x, float a, float b)\n{\n    return smooth_s(x, a, p.sn) * (1.0 - smooth_s(x, b, p.sn));\n}\n\nfloat sigmoid_mix(float x, float y, float m)\n{\n    float sigmoidM = smooth_s(m, 0.5, p.sm);\n    return x * (1.0 - sigmoidM) + y * sigmoidM;\n}\n\n// the transition function\n// (n = outer fullness, m = inner fullness)\nfloat snm(float n, float m)\n{\n    return sigmoid_mix(sigmoid_ab(n, p.b1, p.b2), sigmoid_ab(n, p.d1, p.d2), m);\n}\n\nfloat ramp_step(float x, float a, float ea)\n{\n    return clamp((a - x) / ea + 0.5, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    \n    // inner radius:\n    const float rb = p.ra / p.rr;\n    // area of annulus:\n    const float PI = 3.14159265358979;\n    const float AREA_OUTER = PI * (p.ra*p.ra - rb*rb);\n    const float AREA_INNER = PI * rb * rb;\n    \n    // how full are the annulus and inner disk?\n    float outf = 0.0, inf = 0.0;\n    for (float dx = -p.ra; dx <= p.ra; dx++) {\n        for (float dy = -p.ra; dy <= p.ra; dy++) {\n        float r = sqrt(float(dx*dx + dy*dy));\n        vec2 txy = mod((fragCoord + vec2(dx,dy)) / iResolution.xy, 1.);\n        float val = texture(iChannel0, txy).x;\n        float inner_kernel = ramp_step(r, rb, p.b);\n        float outer_kernel = ramp_step(r, p.ra, p.b) * (1.0 - inner_kernel);\n        inf  += val * inner_kernel;\n        outf += val * outer_kernel;\n        }\n    }\n    outf /= AREA_OUTER; // normalize by area\n    inf /= AREA_INNER; // normalize by area\n    \n    float s = texture(iChannel0, uv).x;\n    float deriv = 2.0 * snm(outf, inf) - 1.0;\n    s = clamp(s + (deriv * p.dt), 0.0, 1.0);  // Apply delta to state\n    if (iFrame < 10) {\n        s = step(length(uv - vec2(.5)), .051);\n        \n       // s = texture(iChannel1, uv).x > 0.7 ? 1.0 : 0.0;\n    }else if(iMouse.z > .5)\n    {\n        s = max(s,step(length((fragCoord - iMouse.xy) / iResolution.y), .01));\n    }\n    fragColor = vec4(s, inf, deriv, 1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 10,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = (texture(iChannel0,uv) + texture(iChannel1,uv))/2.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor = (texture(iChannel0,uv) + texture(iChannel1,uv))/2.;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}