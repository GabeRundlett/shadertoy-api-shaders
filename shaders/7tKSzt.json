{
    "Shader": {
        "info": {
            "date": "1641246573",
            "description": "Experimenting with text and parabolas\nMouse Enabled",
            "flags": 0,
            "hasliked": 0,
            "id": "7tKSzt",
            "likes": 5,
            "name": "Parabola with Focal Point",
            "published": 3,
            "tags": [
                "intersection",
                "x",
                "quadratic",
                "y0"
            ],
            "usePreview": 0,
            "username": "Yusef28",
            "viewed": 282
        },
        "renderpass": [
            {
                "code": "vec2 numToCoord(float a){\n    return vec2( mod(a,16.), 15.-floor(a/16.) );\n}\n\nvec3 C(vec2 uv, vec2 start, inout float moveX,float num){\n    moveX -= STEP_SIZE/2.;\n    if(uv.x < start.x           || \n       uv.x > start.x+STEP_SIZE || \n       uv.y < start.y           || \n       uv.y > start.y+STEP_SIZE){\n       \n       return vec3(0.);\n    }\n    \n    uv -= start; uv /= STEP_SIZE; uv *= LETTER_SIZE;\n    uv += vec2(LETTER_SIZE*numToCoord(num));\n    return textureGrad(iChannel1,uv,dFdx(uv),dFdy(uv)).rrr;\n}\n\n//takes a float and prints the first 4 digits\nvoid generateDigits(vec2 uv, vec2 start, float moveX, \n                     float theNumber, float theSign, inout vec3 col){\n    \n    float s = 1.;\n    float count = 0.;\n    \n    float FN = fract(theNumber)*100.;\n    float ones = floor(mod(FN,10.));\n    //after decimal\n    col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER + ones);\n    float tens = floor(FN/10.);\n    col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER + tens);\n    //decimal point\n    col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER -2.);\n    FN = floor(theNumber);\n    //before decimal\n    while(FN >= 1.){\n        float n = floor(mod(FN,10.));\n        col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER + n);\n        FN /= 10.;\n    }\n    \n    col += C(uv, vec2(moveX,start.y), moveX, FIRST_NUMBER -3. -2.*step(0.,theSign));\n    \n}\n\nfloat parabolaX(vec2 vx, vec2 p, vec2 uv, float fp){\n    float y = (pow(uv.x-vx.x,2.) / 4.* fp) - vx.y;\n    return 1.0-smoothstep(0.02,0.15,abs(y-uv.y)/fwidth(y-uv.y)/20.);\n}\n/*\nfloat parabolaY(vec2 vx, vec2 p, vec2 uv, float fp){\n    float x = (pow(uv.y-vx.y,2.) / 4.* fp) - vx.x;\n    return 1.0-smoothstep(0.02,0.15,abs(x-uv.x)/fwidth(x-uv.x)/20.);\n}\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5,0.5)\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n    vec3 col = grid(uv,texture(iChannel0,uv).x);\n    float scale = 8.;\n    uv *= scale;\n    float fp = iMouse.z > 0.5 ? \n               (scale*iMouse.y/iResolution.y)-scale*0.5 : \n               sin(iTime)*3.5;\n    \n    float parabola = parabolaX(vec2(0.0), vec2(1.), uv, fp);\n    col = mix(col, vec3(1.,.2,0.5), parabola);\n    vec2 focalPoint = vec2(0.,fp);\n    \n    //intersection point 2\n    float f = 1.-smoothstep(0.02,0.04,abs(length(uv-focalPoint)-0.15));\n    col = mix(col, vec3(1.,0.7,0.), f);\n    f = 1.-smoothstep(0.03,0.08,length(uv-focalPoint)-0.015);\n    col = mix(col, vec3(1.,0.7,0.), f);\n    \n    uv = fragCoord/iResolution.xy;\n    float moveX = 0.;\n    float level = fp/8.+0.47;\n    //col += texture(iChannel1,uv).xxx;\n    generateDigits(uv, vec2(0.,level), 0.93, abs(fp), sign(fp), col);\n    f = 1.0-smoothstep(0.01,0.05,abs(level-uv.y)/fwidth(level-uv.y)/20.);\n    col = mix(col, vec3(1.,0.7,0.), f*step(0.6,uv.x));\n    \n    \n    fragColor = vec4(col*vig(fragCoord/iResolution.xy),1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 45,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define LETTER_SIZE 1./16.\n#define STEP_SIZE 1./15.\n#define FIRST_LETTER 64.\n#define FIRST_NUMBER 48.\n\n#define _a 1.\n#define _b 2.\n#define _c 3.\n#define _d 4.\n#define _e 5.\n#define _f 6.\n#define _g 7.\n#define _h 8.\n#define _i 9.\n#define _j 10.\n#define _k 11.\n#define _l 12.\n\n#define _m 13.\n#define _n 14.\n#define _o 15.\n#define _p 16.\n#define _q 17.\n#define _r 18.\n#define _s 19.\n#define _t 20.\n#define _u 21.\n#define _v 22.\n#define _w 23.\n#define _x 24.\n#define _y 25.\n#define _z 26.\n      ////////////////////////////////////////////\n      //                                       //\n////////      BACKGROUND GRID DESIGN         //\n      //                                   //\n      /////////////////////////////////////\n      \nvec3 grid(vec2 uv, float tex)\n{\n    uv*=8.;\n    //graph background\n    vec3 col = vec3(0.1);\n    \n    //center highlights\n    col = mix(col,vec3(0.16),1.0-length(uv/8.));\n    \n    //dust \n    float specks = fract(sin(dot(uv,vec2(123.,16.)))*433413.);\n    \n    //nice soft texture \n    col = mix(col,vec3(0.25),pow(tex,2.));\n    \n    //small grid lines\n    vec2 lines = fract(uv*5.);\n    lines = smoothstep(0.45,0.52,abs(lines-0.5));\n    col = mix(col,vec3(0.24),lines.x);\n    col = mix(col,vec3(0.24),lines.y);\n    \n    //larger grid lines\n    lines = fract(uv);\n    lines = smoothstep(0.47,0.52,abs(lines-0.5));\n    col = mix(col,vec3(0.5),lines.x);\n    col = mix(col,vec3(0.5),lines.y);\n    \n    //axis lines\n    lines = smoothstep(0.0,0.02,abs(uv));\n    col = mix(col,vec3(0.6),1.0-lines.x);\n    col = mix(col,vec3(0.6),1.-lines.y);\n    col = mix(col,vec3(0.1),step(0.1,specks)*0.2);\n    return col;\n}\n\nfloat vig(vec2 uv){\n    uv *=  1.0 - uv.yx;\n    float vig = uv.x*uv.y * 15.0; // multiply with sth for intensity\n    return pow(vig, 0.15);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}