{
    "Shader": {
        "info": {
            "date": "1556375777",
            "description": "mouse, arrow keys, shift and ctrl to move aound.",
            "flags": 48,
            "hasliked": 0,
            "id": "WtfGzN",
            "likes": 8,
            "name": "square ring intersection",
            "published": 3,
            "tags": [
                "raycast",
                "torus",
                "squarering"
            ],
            "usePreview": 0,
            "username": "abje",
            "viewed": 486
        },
        "renderpass": [
            {
                "code": "#define pi acos(-1.0)\n\nvec2 ellipsoid(vec3 ro, vec3 rd, vec3 size) {\n    size = 1.0/max(size, 0.001);\n    \n    ro *= size;\n    rd *= size;\n    \n    float e = 1.0/dot(rd,rd);\n    float b = -dot(rd,ro)*e;\n    vec3 p = ro+rd*b;\n    float a = dot(p,p);\n    if (a > 1.0) return vec2(1000,999);\n    float c = sqrt((1.0-a)*e);\n    \n    return b+vec2(-c,c);\n}\n\nvec4 cylinder(vec3 pos, vec3 ray, vec3 normal, float s0, float s1) {\n    \n    vec3 p = pos-normal*dot(normal,pos);\n    vec3 r = ray-normal*dot(normal,ray);\n    \n    float l = length(r);\n    r /= l;\n    \n    vec3 oc = p;\n    float b = dot( oc, r );\n    float c = dot( oc, oc );\n    float d = c-s0*s0;\n    float e = c-s1*s1;\n    float h = b*b - d;\n    float i = b*b - e;\n    \n    vec4 f;\n    \n    if( h<0.0 || (dot(p,p) > s0*s0 && b > 0.0)) {\n        f.xy = vec2(1000,999);\n    } else {\n        h = sqrt( h );\n\n        f.xy = (-b + vec2(-h,h))/l;\n    }\n    \n    if( i<0.0 || (dot(p,p) > s1*s1 && b > 0.0)) {\n        f.zw = vec2(1000,999);\n    } else {\n        i = sqrt( i );\n\n        f.zw = (-b + vec2(-i,i))/l;\n    }\n    \n    return f;\n    \n}\n\nvec2 plane(vec3 ro, vec3 rd, vec3 n, float l, float s) {\n    float a = dot(rd, n);\n    float b = dot(ro,n)-l;\n    \n    if ((a*b > 0.0 && abs(b) > s)) {\n         return vec2(1000,999);\n    }\n    \n    float c = abs(s/a);\n    float d = -b/a;\n    \n    return d+vec2(-c,c);\n\n}\n\nfloat plane2(vec3 ro, vec3 rd, vec3 n, float l) {\n    float a = dot(rd, n);\n    float b = dot(ro,n)-l;\n\n    if (b*a > 0.0) return sign(a)*10000.0;\n\n    return b/abs(a);\n\n}\n\nfloat sqrring(vec3 ro, vec3 rd, vec3 up, float r0, float r1, float h, float l, inout vec3 n) {\n    \n    n = vec3(0);\n    \n    vec2 pln = plane(ro,rd,up,l,h);\n    vec4 cyl = cylinder(ro,rd,up,r0, r1);\n    \n    cyl.x = max(cyl.x,0.0);\n    \n    vec2 d = cyl.xy;\n    \n    if (pln.x > cyl.x) {\n        d.x = cyl.x;\n        n = -up*sign(dot(rd,up));\n    }\n    \n    d.x = max(pln.x,cyl.x);\n    d.y = min(pln.y,cyl.y);\n    \n    if (d.x>=cyl.z && d.x<=cyl.w) {\n        n = vec3(0);\n        d.x = cyl.w;\n    }\n    \n    d.x = max(d.x,0.0);\n    \n    if (d.x > d.y) {\n        return 1000.0;\n    }\n    \n    if (n == vec3(0)) {\n        vec3 p = ro+rd*d.x;\n        p -= up*dot(up,p);\n        \n        n = normalize(p);\n        \n        if (d.x == cyl.w) n = -n;\n    }\n    \n    return d.x;\n    \n}\n\nvec4 getdata(int index) {\n    ivec2 p;\n    p.x = index%int(iResolution.x);\n    p.y = index/int(iResolution.x);\n    return texelFetch(iChannel0,p,0);\n}\n\nvec4 rings(vec3 ro, vec3 rd, inout int id) {\n    \n    vec3 nor;\n    float d = 1000.0;\n    vec3 up = vec3(0,1,0);\n    for (int i = 0; i < 100; i++) {\n        up.xy *= rot(iTime*0.01);\n        up.xz *= rot(iTime*0.01);\n        up.yz *= rot(iTime*0.01);\n        \n        vec3 n;\n        \n        float l = sqrring(ro, rd, up, 1.0+float(i), float(i)+0.5, 0.25, 0.0, n);\n        \n        if (l < d) {\n            id = i;\n            d = l;\n            nor = n;\n        }\n    }\n    return vec4(d,nor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n\n    vec3 ro = getdata(campos).xyz;\n    vec3 rd = normalize(vec3(uv,1));\n\n    vec4 rotcam = getdata(camrot);\n\n    rd.zy *= rot(rotcam.y);\n    rd.zx *= rot(rotcam.x);\n    \n    int id;\n    vec4 ray = rings(ro,rd,id);\n    float d = ray.x;\n    \n    // Output to screen\n    vec3 sun = normalize(vec3(1));\n    vec3 col = vec3(0);\n    if (d < 1000.0)\n    {\n        vec3 nor = ray.yzw;\n        vec3 p = ro+rd*d;\n        col = texelFetch(iChannel1,ivec2(id%256,0),0).xyz;\n        float diff = dot(sun, nor);\n        \n        float shadow = rings(p+nor*0.001,sun,id).x < 1000.0 ? 0.0 : 1.0;\n        \n        float light = max(0.2,diff*shadow);\n        \n        col *= light;\n    } else {\n        float sunl = max(dot(sun,rd),0.0);\n        sunl = pow(sunl,100.0);\n        \n        col = mix(vec3(0.2,0.2,0.8),vec3(1.2,1.0,0.2),sunl);\n    }\n    col = clamp(col,0.0,1.0);\n    fragColor = vec4(sqrt(col),1);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define lastmouse 0\n#define campos 1\n#define camrot 2\n\n#define rot(A) mat2(cos(A),-sin(A),sin(A),cos(A))\n#define sqr(a) (a*a)\n\n#define sensitivity 3.0\n#define movespeed 20.0\n\n//keyboard keys\n#define KEY_UP    38\n#define KEY_DOWN  40\n#define KEY_RIGHT 39\n#define KEY_LEFT  37\n#define KEY_SHIFT 16\n#define KEY_CTRL  17\n\n//movement keys\n#define MOVE_FORW   KEY_UP\n#define MOVE_LEFT   KEY_LEFT\n#define MOVE_RIGHT  KEY_RIGHT\n#define MOVE_BACK   KEY_DOWN\n#define MOVE_UP     KEY_SHIFT\n#define MOVE_DOWN   KEY_CTRL\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float getkey(int x, int y)\n{\n    return texelFetch(iChannel1,ivec2(x,y),0).x;\n}\n\nvec4 getdata(int index) {\n    ivec2 p;\n    p.x = index%int(iResolution.x);\n    p.y = index/int(iResolution.x);\n    return texelFetch(iChannel0,p,0);\n}\nvec4 updatedata(int index) {\n    vec4 data = getdata(index);\n    \n    vec4 iMouse2 = getdata(lastmouse);\n    \n    \n    bool refresh = iFrame == 0;\n    \n    if (index == lastmouse) {\n        return iMouse;\n    } else if (index == campos) {\n        \n        if (refresh) {\n            return vec4(vec3(0,0,-120),1);\n        }\n        \n        vec4 rotcam = getdata(camrot);\n        \n        vec3 move = vec3(getkey(MOVE_RIGHT,0)-getkey(MOVE_LEFT,0),\n                         getkey(MOVE_UP   ,0)-getkey(MOVE_DOWN,0),\n                         getkey(MOVE_FORW ,0)-getkey(MOVE_BACK,0));\n        \n        move.zy *= rot(rotcam.y);\n        move.zx *= rot(rotcam.x);\n        \n        vec3 newpos = data.xyz+movespeed*move*iTimeDelta;\n        \n        data.xyz = newpos;\n        \n        return data;\n    } else if (index == camrot) {\n        \n        if (refresh) {\n            return vec4(0,0,0,0);\n        }\n        \n        if (min(iMouse2.z,iMouse.z) > 0.5) {\n            data.xy += (iMouse.xy-iMouse2.xy)/iResolution.y*sensitivity;\n        }\n        \n        return data;\n    }\n    \n    \n    return data;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    fragColor = updatedata(coord.x+coord.y*int(iResolution.x));\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}