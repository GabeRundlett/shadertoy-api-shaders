{
    "Shader": {
        "info": {
            "date": "1600889587",
            "description": "B. Keinert et al (https://dl.acm.org/doi/10.1145/2816795.2818131)\n\nTrying to get more practice implementing papers. Work in progress.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdtcWH",
            "likes": 5,
            "name": "Spherical Fib",
            "published": 3,
            "tags": [
                "sphericalfibonacci"
            ],
            "usePreview": 0,
            "username": "percentcer",
            "viewed": 432
        },
        "renderpass": [
            {
                "code": "#define N 128.\n\n#define MAX_T 10.\n#define GOLDEN 1.618\n#define PI 3.141\n\n// the ith point out of n spherical fibonacci points\n// these are mapped in the 2d space of the sphere\n// returns (phi, theta) to be used with pointOnSphere\nvec2 sfi(float i, float n) {\n    float phi = 2. * PI * fract(i / GOLDEN);\n    float z = 1. - (2. * i + 1.) / n;\n    return vec2(phi, acos(z));\n}\n\nvec3 pointOnSphere(float phi, float theta) {\n    return vec3(cos(phi) * sin(theta), sin(phi) * sin(theta), cos(theta));\n}\n\nfloat sphere(vec3 p, float rad) {\n    return length(p) - rad;\n}\n\nfloat map(vec3 p) {\n    float nearest = MAX_T;\n    for (float i = 0.; i < N; i++) {\n        vec2 sp = sfi(i, N);\n        vec3 sp3 = pointOnSphere(sp.x, sp.y);\n        nearest = min(nearest, sphere(p - sp3, .01));\n    }\n    return nearest;\n}\n\nmat3 cam(vec2 direction) {\n    vec3 z = normalize(vec3(direction, 1.));\n    vec3 x = normalize(cross(vec3(0., 1., 0.), z));\n    vec3 y = cross(z,x);\n    return mat3(x,y,z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2. - iResolution.xy)/iResolution.y;\n    \n    vec2 rotp = iMouse.xy / iResolution.xy - 0.5;\n    mat3 rot = cam(rotp * 5.);\n    \n    vec3 ro = rot * vec3(0., 0., 2.0);\n    vec3 rd = rot * normalize(vec3(uv, -1.));\n\n    vec3 col = vec3(0.2);\n    int stepCount = 0;\n    for(float t = 0.; t < MAX_T; stepCount++) {\n        vec3 p = ro + rd * t;\n        float nearest = map(p);\n        if (nearest < .001) {\n            col = vec3(1.);\n            break;\n        } else {\n            t += nearest;\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}