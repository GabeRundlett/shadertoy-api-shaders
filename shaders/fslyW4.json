{
    "Shader": {
        "info": {
            "date": "1642195205",
            "description": "A zoom into a Golder Spiral, which, like all logarithmic spirals, is self-similar. I added lots of comments in the code.",
            "flags": 0,
            "hasliked": 0,
            "id": "fslyW4",
            "likes": 86,
            "name": "Golden Ratio and Spiral",
            "published": 3,
            "tags": [
                "2d",
                "zoom",
                "spiral",
                "infinite",
                "goldenratio",
                "golden",
                "selfsimilar"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1969
        },
        "renderpass": [
            {
                "code": "// Copyright Inigo Quilez, 2022 - https://iquilezles.org/\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel coordinates\n    vec2  op  = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float opx = 2.0/iResolution.y;\n    \n    // mathematical constants\n    const float kt = 6.283185307;         // tau\n    const float kh = (1.0+sqrt(5.0))/2.0; // phi\n    const float k2 = 4.0*log2(kh);\n\n    // for time and color dithering\n    float ran = fract(sin(fragCoord.x*7.0+17.0*fragCoord.y)*1.317);\n\n    // motion blur loop\n    vec3 tot = vec3(0.0);\n    #if HW_PERFORMANCE==0\n    const int kNumSamples = 6;\n    #else\n    const int kNumSamples = 12;\n    #endif\n    for( int mb=0; mb<kNumSamples; mb++ )\n    {\n        // aperture is half of a frame\n        float time = iTime + (0.5/60.0)*(float(mb)+ran)/float(kNumSamples);\n\n        // loop\n        float ft = fract(time/1.0);\n        float it = floor(time/1.0);\n\n        // constant (exponential) zoom\n        float sca = 0.5*exp2(-ft*k2);\n        vec2  p  = sca*op;\n        float px = sca*opx;\n\n        // draw golden rectangles\n        vec3 col = vec3(0.0);\n        {\n            float d = 1e20;\n            float w = 1.0;\n            vec2  q = p +  vec2(3,-1)/sqrt(5.0);\n            for( int i=0; i<20; i++ )\n            {\n                // square (in L2)\n                float t = max(abs(q.x),abs(q.y))-w;\n\n                // fill\n                if( t<0.0 )\n                {\n                    // color  (https://iquilezles.org/articles/palettes)\n                    float id = float(i) + it*4.0;\n                    col = vec3(0.7,0.5,0.4) + vec3(0.1,0.2,0.2)*cos(kt*id/12.0+vec3(2.0,2.5,3.0) );\n                    // texture\n                    col += 0.04*cos(kt*p.x*8.0/w)*cos(kt*p.y*8.0/w);\n                }    \n\n                // border (https://iquilezles.org/articles/distfunctions2d)\n                d = min( d, abs(t)-0.001*w );\n\n                // displace, rotate and scale for next iteration\n                q -= w*vec2(kh,2.0-kh);\n                q  = vec2(-q.y,q.x);\n                w *= kh-1.0; // should be w /= kh, but luckily 1/phi = phi-1\n            }\n            col *= smoothstep( 0.0, 1.5*px, d-0.001*sca );\n        }\n\n        // draw spiral (https://www.shadertoy.com/view/fslyWN)\n        {\n            p  /= (3.0-kh); // p  /= (2.0-1.0/kh);\n            px /= (3.0-kh); // px /= (2.0-1.0/kh);\n            float ra = length(p);\n            float an = atan(-p.x,p.y)/kt;\n            float id = round( log2(ra)/k2 - an );\n            if( id>-1.5 || (id>-2.5 && an>0.5-ft) )\n            {\n                float d = abs( ra - exp2(k2*(an+id)) );\n                col = mix( col, vec3(1.0), smoothstep( 2.0*px, 0.0, d-0.005*sca ) );\n            }\n        }\n        // accumulate\n        tot += col;\n    }\n    // resolve\n    tot /= float(kNumSamples);\n\n    // vignetting\n    tot *= 1.2-0.25*length(op);\n    \n    // remove color banding through dithering\n    tot += (1.0/255.0)*ran;\n\n    // output\n    fragColor = vec4(tot,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}