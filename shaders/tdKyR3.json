{
    "Shader": {
        "info": {
            "date": "1603396092",
            "description": "Live coding improvisation during TK Games scientific circle inauguration.",
            "flags": 0,
            "hasliked": 0,
            "id": "tdKyR3",
            "likes": 0,
            "name": "Live coding TK Games 2",
            "published": 3,
            "tags": [
                "terrain",
                "map",
                "live"
            ],
            "usePreview": 0,
            "username": "jaszunio15",
            "viewed": 219
        },
        "renderpass": [
            {
                "code": "\nfloat noise12(vec2 uv)\n{\n \tuv *= 0.05;\n    uv += iTime * 0.01;\n    \n    float noise = 0.0;\n    \n    for (float i = 1.0; i <= 8.0; i *= 2.0)\n    {\n        float scale = pow(i, 1.6);\n        float alpha = pow(1.0 / i, 1.9);\n        noise += texture(iChannel0, uv * scale + vec2(0.32, 0.81)).r * alpha;\n    }\n    \n    noise *= 0.5;\n    return noise;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    float distanceToCenter = length(uv * vec2(iResolution.y / iResolution.x, 1.0));\n    float mask = 1.0 - smoothstep(0.5, 1.0, distanceToCenter);\n    \n\tfloat noise = noise12(uv);\n    noise *= mask;\n    \n\n    float terrain = step(0.3, noise);\n    float mountains = step(0.4, noise);\n    float highMountains = step(0.5, noise);\n    float beach = step(0.28, noise) - terrain;\n    \n    \n    fragColor = mix(vec4(0.5, 0.7, 0.7, 0.0) * 0.6, vec4(0.0, 0.6, 0.0, 0.0), terrain); \n    fragColor = mix(fragColor, vec4(0.5, 0.5, 0.5, 0.0), mountains); \n    fragColor = mix(fragColor, vec4(1.0), highMountains); \n    fragColor = mix(fragColor, vec4(0.7, 0.6, 0.3, 0.0), beach);\n    \n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 16,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define SEED 0\n\nint[] hash = int[] (208,34,231,213,32,248,233,56,161,78,24,140,71,48,140,254,245,255,247,247,40,\n                     185,248,251,245,28,124,204,204,76,36,1,107,28,234,163,202,224,245,128,167,204,\n                     9,92,217,54,239,174,173,102,193,189,190,121,100,108,167,44,43,77,180,204,8,81,\n                     70,223,11,38,24,254,210,210,177,32,81,195,243,125,8,169,112,32,97,53,195,13,\n                     203,9,47,104,125,117,114,124,165,203,181,235,193,206,70,180,174,0,167,181,41,\n                     164,30,116,127,198,245,146,87,224,149,206,57,4,192,210,65,210,129,240,178,105,\n                     228,108,245,148,140,40,35,195,38,58,65,207,215,253,65,85,208,76,62,3,237,55,89,\n                     232,50,217,64,244,157,199,121,252,90,17,212,203,149,152,140,187,234,177,73,174,\n                     193,100,192,143,97,53,145,135,19,103,13,90,135,151,199,91,239,247,33,39,145,\n                     101,120,99,3,186,86,99,41,237,203,111,79,220,135,158,42,30,154,120,67,87,167,\n                     135,176,183,191,253,115,184,21,233,58,129,233,142,39,128,211,118,137,139,255,\n                     114,20,218,113,154,27,127,246,250,1,8,198,250,209,92,222,173,21,88,102,219);\n\nint noise2(int x, int y)\n{\n    int tmp = hash[(y + SEED) % 256];\n    return hash[(tmp + x) % 256];\n}\n\nfloat lin_inter(float x, float y, float s)\n{\n    return x + s * (y-x);\n}\n\nfloat smooth_inter(float x, float y, float s)\n{\n    return lin_inter(x, y, s * s * (3.0-2.0*s));\n}\n\nfloat noise2d(float x, float y)\n{\n    int x_int = int(x);\n    int y_int = int(y);\n    float x_frac = fract(x);\n    float y_frac = fract(x);\n    int s = noise2(x_int, y_int);\n    int t = noise2(x_int+1, y_int);\n    int u = noise2(x_int, y_int+1);\n    int v = noise2(x_int+1, y_int+1);\n    float low = smooth_inter(float(s), float(t), x_frac);\n    float high = smooth_inter(float(u), float(v), x_frac);\n    return smooth_inter(low, high, y_frac);\n}\n\nfloat perlin2d(float x, float y, float freq, int depth)\n{\n    float xa = x*freq;\n    float ya = y*freq;\n    float amp = 1.0;\n    float fin = 0.0;\n    float div = 0.0;\n\n    int i;\n    for(i=0; i<depth; i++)\n    {\n        div += 256.0 * amp;\n        fin += float(noise2d(xa, ya)) * amp;\n        amp /= 2.0;\n        xa *= 2.0;\n        ya *= 2.0;\n    }\n\n    return fin/div;\n}\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}