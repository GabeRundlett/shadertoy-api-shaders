{
    "Shader": {
        "info": {
            "date": "1713919209",
            "description": "scrolling bowling noise\nmade with chatGPT",
            "flags": 0,
            "hasliked": 0,
            "id": "lfcXWN",
            "likes": 1,
            "name": "BowlingBallUgly",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "Ravenfight",
            "viewed": 96
        },
        "renderpass": [
            {
                "code": "// Permutation table\nvec3 permute(vec3 x) {\n    return mod((x * 34.0 + 1.0) * x, 289.0);\n}\n\n// Simplex 2D noise function\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                       -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod(i, 289.0);\n    vec3 p = permute(permute(i.y + vec3(0.0, i1.y, 1.0))\n        + i.x + vec3(0.0, i1.x, 1.0));\n    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy),\n                             dot(x12.zw, x12.zw)), 0.0);\n    m = m * m;\n    m = m * m;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);\n    vec3 g;\n    g.x = a0.x * x0.x + h.x * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\n// Swirly noise function\nfloat swirlyNoise(vec2 p) {\n    return snoise(p * 3.5 + vec2(0.0, iTime * 0.5));\n}\n\n// Weighted color function\nvec3 weightedColor(float intensity, vec3 baseColor, vec3 blackColor) {\n    return mix(blackColor, baseColor, intensity);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy; // Normalize coordinates\n\n    // Rotate UV coordinates by 90 degrees\n    uv = vec2(uv.y, uv.x);\n\n    // Create waves using sine function\n    float wave = sin(uv.x * 20.0 + iTime * 2.0) * 0.01;\n\n    // Add swirly noise\n    float noise = swirlyNoise(uv * 4.0);\n\n    // Calculate distance from center\n    vec2 center = vec2(0.5, 0.5);\n    float dist = length(uv - center);\n\n    // Create black and white stripes based on distance from center\n    float stripe = smoothstep(0.01 + wave, 0.99 + wave, dist);\n\n    // Combine stripe with noise\n    stripe += noise * 0.2;\n\n    // Clamp stripe to range [0, 1]\n    stripe = clamp(stripe, 0.0, 1.0);\n\n    // Map stripe value to color gradient\n    vec3 baseColor = vec3(0.2, 0.8, 0.2); // Example color (reddish)\n    vec3 blackColor = vec3(.1,.1,.4); // Customizable black color\n\n    // Weight the color based on intensity\n    vec3 finalColor = weightedColor(stripe, baseColor, blackColor);\n\n    // Output color\n    fragColor = vec4(finalColor, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}