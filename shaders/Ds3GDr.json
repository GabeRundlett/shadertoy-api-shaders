{
    "Shader": {
        "info": {
            "date": "1677141580",
            "description": "Mandelbrot set but I'm using trigonometry to represent complex numbers.",
            "flags": 0,
            "hasliked": 0,
            "id": "Ds3GDr",
            "likes": 2,
            "name": "Trigonometric mandelbrot",
            "published": 3,
            "tags": [
                "mandelbrot"
            ],
            "usePreview": 0,
            "username": "Mik0",
            "viewed": 192
        },
        "renderpass": [
            {
                "code": "#define Power (0.0-cos(iTime/25.0))+3.0\n#define iters 100\nconst float tau = acos(0.0)*2.0;\n#define aa 4\n// aa is ani aliasing level\n\nfloat mandelbrot(vec2 p)\n{\n    vec2 z = p;\n    float brightness;\n    for(int i = 0; i<iters; i++)\n    {\n        brightness = float(i);\n        float d = length(z);\n        if(d>2.0){break;}\n        float a = atan(z.x, z.y);\n        d = pow(d, Power);\n        a*=Power;\n        z = vec2(sin(a)*d,cos(a)*d)+(p*1.0);\n    }\n    if(brightness+1.0==float(iters)){brightness=0.0;}\n    return mod(brightness/50.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    uv*=4.0;\n    uv/=pow(2.0, 0.0);\n    uv+=vec2(0,0);\n    float col = 0.0;\n    vec2 offset = vec2(0,0);\n    \n    \n    for(int i = 0; i<aa; i++)\n    {\n        col+=mandelbrot(uv+vec2((sin(offset.x)*offset.y)/iResolution.x, (cos(offset.x)*offset.y)/iResolution.y));\n        offset+=vec2((tau/float(aa))*(tau), sqrt(2.0)/float(aa));\n    }\n    col/=float(aa);\n    \n    vec3 col1 = vec3(0, 7, 100)/255.0;\n    vec3 col2 = vec3(32, 107, 203)/255.0;\n    vec3 col3 = vec3(237, 255, 255)/255.0;\n    vec3 col4 = vec3(255, 170, 0)/255.0;\n    vec3 col5 = vec3(0, 2, 0)/255.0;\n\n    // Output to screen\n    fragColor = vec4(vec3(smoothstep(col1.x, col2.x, col), smoothstep(col1.y, col2.y, col), smoothstep(col1.z, col2.z, col)),1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}