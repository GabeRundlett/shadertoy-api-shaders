{
    "Shader": {
        "info": {
            "date": "1536790416",
            "description": "https://www.shadertoy.com/view/XlBXRh with mic not soundcloud",
            "flags": 4,
            "hasliked": 0,
            "id": "4lVyzG",
            "likes": 15,
            "name": " Sound Grid",
            "published": 3,
            "tags": [
                "sound"
            ],
            "usePreview": 0,
            "username": "hobohippy",
            "viewed": 2909
        },
        "renderpass": [
            {
                "code": "//https://www.shadertoy.com/view/XlBXRh with mic not soundcloud\n#define preset4\n\n#ifdef preset1\n\t#define cells vec2(14.,14.)\n\t#define persp 1.5\n\t#define height 1.\n\t#define linewidth .5\n\t#define lineexp 4.\n\t#define brightness .7\n#endif\n\n\n#ifdef preset2\n\t#define cells vec2(10.,5.)\n\t#define persp 2.5\n\t#define height 1.\n\t#define linewidth 3.\n\t#define lineexp 6.\n\t#define brightness .4\n#endif\n\n\n#ifdef preset3\n\t#define OPAQUE_MODE\n\t#define INVERSE\n\t#define cells vec2(16.,16.)\n\t#define persp 1.\n\t#define height 1.5\n\t#define linewidth .1\n\t#define lineexp .5\n\t#define brightness .8\n#endif\n\n#ifdef preset4\n\t#define OPAQUE_MODE\n\t#define cells vec2(10.,10.)\n\t#define persp 2.\n\t#define height .75\n\t#define linewidth .2\n\t#define lineexp 1.\n\t#define brightness 1.5\n#endif\n\n#ifdef preset5\n\t#define INVERSE\n\t#define cells vec2(6.,25.)\n\t#define persp 1.\n\t#define height 2.\n\t#define linewidth .07\n\t#define lineexp .3\n\t#define brightness .35\n#endif\n\n\n#ifdef preset6\n\t#define INVERSE\n\t#define OPAQUE_MODE\n\t#define cells vec2(15.,15.)\n\t#define persp 2.5\n\t#define height 1.\n\t#define linewidth .05\n\t#define lineexp .5\n\t#define brightness 1.\n#endif\n\n\n\n\n#define hcells (cells*.5)\n\n\nvec3 segment(vec2 p, vec3 from, vec3 to, float width, float dist) {\nwidth=1./width;\nvec2 seg=from.xy-to.xy;\nfloat halfdist=distance(from.xy,to.xy)*.5;\nfloat ang=atan(seg.y,seg.x);\nfloat sine=sin(ang);\nfloat cose=cos(ang);\np-=from.xy; \np*=mat2(cose,sine,-sine,cose);\nfloat dx=abs(p.x+halfdist)-halfdist;\nfloat dy=abs(p.y);\nfloat h=1.-abs(p.x+halfdist*2.)/halfdist/2.;\nfloat pz=-from.z-(to.z-from.z)*h;\nfloat l=1.-clamp(max(dx,dy)*width/(pz+dist)*dist*dist,0.,.1)/.1;\nl=pow(abs(l),lineexp)*(1.-pow(clamp(abs(dist-pz)*.45,0.,1.),.5))*4.;\nreturn normalize(.25+abs(mix(from,to,h)))*l;\n}\n\nmat3 rotmat(vec3 v, float angle)\n{\n\tangle=radians(angle);\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\t\n\treturn mat3(c + (1.0 - c) * v.x * v.x, (1.0 - c) * v.x * v.y - s * v.z, (1.0 - c) * v.x * v.z + s * v.y,\n\t\t(1.0 - c) * v.x * v.y + s * v.z, c + (1.0 - c) * v.y * v.y, (1.0 - c) * v.y * v.z - s * v.x,\n\t\t(1.0 - c) * v.x * v.z - s * v.y, (1.0 - c) * v.y * v.z + s * v.x, c + (1.0 - c) * v.z * v.z\n\t\t);\n}\n\nfloat getz(vec2 xy) {\nxy=xy*10.+hcells;\n//float pos=length(pow(abs(xy/cells),vec2(3.)))*8.;\nfloat pos=(xy.y*cells.x+xy.x)/(cells.x*cells.y);\nfloat s=texture(iChannel0,vec2(.5+pos*.5,.1)).x;\nreturn .25-pow(s,1.5)*height;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (gl_FragCoord.xy / iResolution.xy-.5)*2.;\n\tuv.y*=iResolution.y/iResolution.x;\n\tmat3 camrot=rotmat(normalize(vec3(0.,0.,1.)),iTime*25.)*rotmat(normalize(vec3(1.,0.*sin(iTime*.5),0.)),60.+30.*sin(iTime*.5));\n\tfloat s=.1,maxc=0.;\n\tvec3 p1,p2,p3;\n\tvec3 rotv=vec3(0.,0.,1.);\n\tfloat h;\n\tvec3 col=vec3(0.);\n\tfloat dist=1.2+pow(abs(sin(iTime*.3)),5.)*.5;\n\tvec3 c=vec3(0.);\n\tfor (float y=0.; y<cells.y; y++) {\n\t\tfor (float x=0.; x<cells.x; x++) {\n\t\t\tp1=vec3(x-hcells.x,y-hcells.y,0.)*.1; p1.z=getz(p1.xy);\n\t\t\tp2=vec3(p1.x+.1,p1.y   ,0.); p2.z=getz(p2.xy);\n\t\t\tp3=vec3(p1.x   ,p1.y+.1,0.); p3.z=getz(p3.xy);\n\t\t\tp1*=camrot; p2*=camrot; p3*=camrot;\n\t\t\tp1.xy*=persp/max(0.1,p1.z+dist);\n\t\t\tp2.xy*=persp/max(0.1,p2.z+dist);\n\t\t\tp3.xy*=persp/max(0.1,p3.z+dist);\n\t\t\tif (max(p1.x,p2.x)>uv.x-linewidth/4. && min(p1.x,p2.x)<uv.x+linewidth/4. && x<cells.x-1.) {\n\t\t\t\tif (max(p1.y,p2.y)>uv.y-linewidth/4. && min(p1.y,p2.y)<uv.y+linewidth/4.) {\n\t\t\t\t\t#ifdef OPAQUE_MODE\n\t\t\t\t\t\tc=max(c,segment(uv,p1,p2,linewidth,dist)*1.5);\n\t\t\t\t\t#else\n\t\t\t\t\t\tc+=segment(uv,p1,p2,linewidth,dist);\n\t\t\t\t\t#endif\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (max(p1.x,p3.x)>uv.x-linewidth/4. && min(p1.x,p3.x)<uv.x+linewidth/4. && y<cells.y-1.) {\n\t\t\t\tif (max(p1.y,p3.y)>uv.y-linewidth/4. && min(p1.y,p3.y)<uv.y+linewidth/4.) {\n\t\t\t\t\t#ifdef OPAQUE_MODE\n\t\t\t\t\t\tc=max(c,segment(uv,p1,p3,linewidth,dist)*1.5);\n\t\t\t\t\t#else\n\t\t\t\t\t\tc+=segment(uv,p1,p3,linewidth,dist);\n\t\t\t\t\t#endif\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tc*=brightness;\n#ifdef INVERSE\n\tfragColor = vec4(1.-c,1.);\n#else\n\tfragColor = vec4(c,1.);\n#endif\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "mic",
                        "id": 32,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/mic.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}