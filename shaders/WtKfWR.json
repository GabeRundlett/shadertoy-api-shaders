{
    "Shader": {
        "info": {
            "date": "1614177011",
            "description": "its rolling",
            "flags": 0,
            "hasliked": 0,
            "id": "WtKfWR",
            "likes": 1,
            "name": "two balls shadow version",
            "published": 3,
            "tags": [
                "shadowraymarchin"
            ],
            "usePreview": 0,
            "username": "gourki",
            "viewed": 230
        },
        "renderpass": [
            {
                "code": "#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n//thanks inigo quilez !\nfloat sdSphere(vec3 p, float s)\n{\n    return length(p)-s;\n}\n\n\nvec3 opRep(vec3 p, vec3 c){\n    return mod(p+0.5*c,c) -0.5*c;\n\n}\n\nvec2 uVec2(vec2 s1, vec2 s2)\n{\n    return (s1.x < s2.x) ? s1 : s2;\n}\n\nvec2 opSmoothUnionVec2( vec2 d1, vec2 d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2.x-d1.x)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n    }\n    \n    \n\n        \nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n \nvec2 minVec2(vec2 d1, vec2 d2)\n{\n    return (d1.x < d2.x) ? d1 : d2;\n}\n\n// ****** MAP ******\nvec2 map(vec3 pos)\n{\n    vec3 pos2 = pos;\n    \n    //pos = opRep(pos,vec3(30.,0.0,10.0));\n    vec2 s1 = vec2(sdSphere(pos+vec3(2.*sin(iTime),.0,2.*cos(iTime)), 1.0),.0);\n    vec2 s2 = vec2(sdSphere(pos+vec3(-2.*sin(0.5*iTime),.0,-2.*cos(0.5*iTime)), 1.0),1.0);\n    \n    //ground.x += 1. + sin(iTime);  \n    //ground *= rot(0.1*mod(iTime,26.));\n    \n    vec2 world = opSmoothUnionVec2(s1, s2,0.5);\n    vec2 ground = vec2(sin(iTime)+pos2.y+1.0,2.0);\n   \n    world = opSmoothUnionVec2(ground, world,0.5);\n   \n    return world;\n}\n\n\nfloat GetShadow (vec3 pos, vec3 at, float k) {\n    vec3 dir = normalize(at - pos);\n    float maxt = length(at - pos);\n    float f = 01.;\n    float t = 0.001*50.;\n    for (float i = 0.; i <= 10.0; i += .1) {\n        float dist = map(pos + dir * t).x;\n        if (dist < 0.001) return 0.;\n        f = min(f, k * dist / t);\n        t += dist;\n        if (t >= maxt) break;\n    }\n    return f;\n}\n\nvec3 Getnormal(vec3 pos)\n{\n    float v = map(pos).x;\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n        map(pos+e.xyy).x,\n        map(pos+e.yxy).x,\n        map(pos+e.yyx).x) - v);\n}\n\n\nvec2 CastRay(vec3 ro, vec3 rd)\n{\n    float c = 0.0; // si y a contact, \"c\" va stocker sa distance\n    \n    for(int i=0; i<64; i++)\n    {\n        vec2 ray = map(ro + rd * c); // POUR LE MOMENT, on va changer aprÃ¨s\n    \n        if(ray.x < (0.0001*c))\n        {\n            return vec2(c,ray.y);\n        }\n        \n        c += ray.x;\n    }\n    \n    // si la marche est trop longue, ca renvoit -1.0\n    return vec2(-1.0);\n}\n\nvec3 render(vec3 ro, vec3 rd) // ray origin & ray direction)\n{\n    // *** RAYMARCHING\n    vec2 contact = CastRay(ro, rd); // ici on ajoutera le raymarching\n    // simulation de raymarching\n    \n    vec3 pos = ro + rd * contact.x;\n    vec3 nor = Getnormal(pos);\n    \n    vec3 lightPos = vec3(sin(iTime), -1.0, cos(iTime))*5.0;\n    vec3 lightTar = vec3(0.,0.,0.);\n    vec3 lightDir = normalize(lightTar -lightPos);\n    \n    float shade = GetShadow(pos, -lightPos,8.);\n    \n    float lambert = dot(nor,lightDir);\n    float blinn = pow(lambert,16.0);\n    float toon = step(lambert, 0.5);\n    // *** Traitement du contact\n    vec3 col = vec3(0.0);\n    \n    if(contact.y == -1.0)\n    {\n        // y a pas de contact\n        col = vec3(mix(vec3(.8, .8, .0), vec3(.5,.0, 0.0), abs(rd.y)));\n    }\n    else\n    {\n        if(contact.y == 0.0)\n        {\n            col = vec3(1.0, 0.0, 0.0);\n        }\n        else if (contact.y == 1.0)\n        {\n            col = vec3(0.0, 1.0, 0.0);\n        }\n        else {\n            col = vec3(0.,0.,1.);\n        }\n        //col *= lambert*(1.-contact.y);\n        //col -= nor;\n         \n        col *= shade*lightDir*(lambert*.8)+.2;\n        //col += blinn*.8;\n        //col*=(1.0-toon)*.5+.5;\n        \n        float fresnel = pow((dot(nor, rd)+.8)*.9,2.)*2.0;\n       \n        col += fresnel;\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Centrer camera\n    vec2 uv = 2.0 * fragCoord/iResolution.xy - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // Camera\n    vec3 cameraPos = vec3(.0, 3.0, 10.0);\n    vec3 cameraTar = vec3(0.,0.0,1.0);\n    \n    // view Direction / Ray Direction\n    vec3 forward = normalize(cameraTar - cameraPos);\n    vec3 right = normalize(cross(vec3(0.0, -1.0, 0.0), forward));\n    vec3 up = normalize(cross(right, forward));\n    vec3 viewDir = normalize(uv.x * right + uv.y * up + forward * 2.0);\n    \n    // Time varying pixel color\n    vec3 col = vec3(uv.x, uv.y, 0.0);\n\n    col = render(cameraPos, viewDir);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}