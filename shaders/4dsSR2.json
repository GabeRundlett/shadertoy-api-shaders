{
    "Shader": {
        "info": {
            "date": "1404315905",
            "description": "Poisson process = uniform points distribution (e.g, stars) with average M per pixel.\npixel-average law = Poisson(M) ~ gauss(M-.5,sqrt(M))\ndensity = 2^(10*Mouse.y) , mouse in -1..1\nLeft: pixel-based Poisson.   Right: recursive Poisson.  ",
            "flags": 0,
            "hasliked": 0,
            "id": "4dsSR2",
            "likes": 6,
            "name": "gauss / poisson process",
            "published": 3,
            "tags": [
                "random",
                "stars"
            ],
            "usePreview": 1,
            "username": "FabriceNeyret2",
            "viewed": 2738
        },
        "renderpass": [
            {
                "code": "float M = 10.;\n\nfloat rnd(vec2 uv, float n) {\n#if 1\n\tuv -= .5*n;\n\treturn mod(sin(34556.456*uv.x-457523.345*uv.y)*345674.54,1.);\n#else\n\tuv *= 4.*iResolution.y/256.;\n\treturn (n==0.) ? texture(iChannel0,uv).r : texture(iChannel0,uv).g;\n#endif\n}\n\nfloat gauss(float m, float s, vec2 uv) {\n\tfloat x = rnd(uv,0.), y=rnd(uv,1.);\n\treturn m + s* sqrt(-2.*log(x+1e-6))*cos(2.*3.14159*y); // http://en.wikipedia.org/wiki/Normal_distribution#Generating_values_from_normal_distribution\n}\n\nfloat poisson(float m, vec2 uv) { // good approx for m >= 10 \n\treturn gauss(m-.5,sqrt(m),uv);  // http://en.wikipedia.org/wiki/Poisson_distribution#Related_distributions\n}\n\n#define SCALES 8.\nfloat poisson_rec(float m, vec2 uv) {\n\tfloat s = pow(4.,SCALES);\n\tm *= s;\n\tfor (float i=0.; i<SCALES; i++) {\n\t\tm = poisson(m/4.,(uv+i)/s);  // +i)/s for decorrelation\n\t\ts /= 4.;\n\t}\n\t\n\treturn m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat c;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n\tvec2 mouse = iMouse.xy/iResolution.xy;\n\tif (iMouse.x+iMouse.y>0.)\n\t\tM = pow(2., 20.* (mouse.y-.5));\n\t\n\tif (abs(uv.x-.5*iResolution.x/iResolution.y)<2e-3) {\n\t\tfragColor = vec4(1.,0.,0.,0.);\n\t\treturn;\n\t}\n\t\n\t//uv *= 2.*mouse.x;\n\tif (uv.x<0.)\n\t\tc = poisson(M,uv)/(2.*M);\n\telse\n\t\tc = poisson_rec(M,uv)/(2.*M);\n\t\n\tfragColor = vec4(c);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}