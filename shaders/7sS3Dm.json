{
    "Shader": {
        "info": {
            "date": "1617557236",
            "description": "This is a shader I started working on to better understand GLSL and see what I could do with it. Raymarching SDF's has been done a million times before but itâ€™s simple enough and widely documented so it seemed like a great choice for a topic.",
            "flags": 32,
            "hasliked": 0,
            "id": "7sS3Dm",
            "likes": 2,
            "name": "Learning via Mandelbulb SDF",
            "published": 3,
            "tags": [
                "raymarching",
                "mandelbulb",
                "learning"
            ],
            "usePreview": 0,
            "username": "piqey",
            "viewed": 392
        },
        "renderpass": [
            {
                "code": "const float PI = 3.14159265359;\nconst float PI2 = PI * 2.0;\n\nconst float blurDirections = 8.0;\nconst float blurQuality = 4.0;\nconst float blurSize = 6.0;\n\nconst float glowStrength = 1.0;\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec4 image = texture(iChannel0, uv);\n    vec4 highPass = texture(iChannel1, uv);\n    \n    vec2 blurRadius = blurSize / iResolution.xy;\n    \n    for (float d = 0.0; d < PI2; d += PI2 / blurDirections)\n    {\n        for (float i = 1.0 / blurQuality; i <= 1.0; i += 1.0 / blurQuality)\n        {\n            highPass += texture(iChannel1, uv + vec2(cos(d), sin(d)) * blurRadius * i);\n        }\n    }\n\n    // Output\n    highPass /= blurQuality * blurDirections - 15.0;\n    highPass *= glowStrength;\n\n    fragColor = image + highPass;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Raymarching\nconst float stepSize = 0.1;\n\nconst vec3 bgCol = vec3(0.0);\n// const vec3 specularCol = vec3(0.1);\nconst vec3 diffuseCol0 = vec3(0.321, 0, 0.439); // vec3(0.811, 0.0, 0.980);\nconst vec3 diffuseCol1 = vec3(0.980, 0.0, 0.866);\n\nconst float colGradPow = 0.9;\n\nconst vec3 lightPos = vec3(2.0, 5.0, -3.0);\nconst vec3 lightColor = vec3(1.0);\n\n// Mathematics\nconst float PI = 3.14159265359;\nconst float DEG_TO_RAD = PI / 180.0;\nconst float gradStep = 0.02;\n\n// Configuration\nconst float camFOV = 45.0;\nconst float zClip = 1000.0;\n\n\n// World-building\nfloat sdfSphere(vec3 pt, vec3 center, float radius)\n{\n    return length(pt - center) - radius;\n}\n\n/*\nfloat sdfBox(vec3 p, vec3 b)\n{\n    vec3 d = abs(p) - b;\n\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\n\nfloat sdfUnion(float d0, float d1)\n{\n    return min(d0, d1);\n}\n*/\n\nfloat sdfInter(float d0, float d1)\n{\n    return max(d0, d1);\n}\n\n/*\nfloat sdfSub(float d0, float d1)\n{\n    return max(d0, -d1);\n}\n\nfloat sdfUnion_s(float a, float b, float k)\n{\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdfDisp(vec3 p)\n{\n    return sin(p.x) * sin(p.y) * sin(p.z);\n}\n\nvec3 sdfTwist(vec3 p, float a)\n{\n    float c = cos(a * p.y);\n    float s = sin(a * p.y);\n    mat2 m = mat2(c, -s, s, c);\n\n    return vec3(m * p.xz, p.y);\n}\n\nvec3 sdfRep(vec3 p, vec3 c)\n{\n    return mod(p, c) - 0.5 * c;\n}\n*/\n\nfloat sdfMandel(vec3 p, float power)\n{\n    vec3 z = p;\n    float dr = 1.0;\n    float r;\n    \n    for (int i = 0; i < 16; i++)\n    {\n        r = length(z);\n        \n        if (r > 2.0)\n            break;\n        \n        float theta = acos(z.z / r) * power;\n        float phi = atan(z.y / z.x) * power;\n        float zr = pow(r, power);\n        \n        dr = pow(r, power - 1.0) * power * dr + 1.0;\n        \n        z = zr * vec3(sin(theta) * cos(phi), sin(phi) * sin(theta), cos(theta));\n        z += p;\n    }\n    \n    return 0.5 * log(r) * r / dr;\n}\n\nfloat world(vec3 pt) // so it's easier to find <-------------------\n{\n    /*\n    float sphere0 = sdfSphere(pt, vec3(0.0), 1.0);\n    float box0 = sdfBox(pt, vec3(sin(iTime / 4.0) * 0.05 + 0.8));\n    \n    float step0 = sdfInter(sphere0, box0);\n    \n    float sphere1 = sdfSphere(pt, vec3(0.0), 0.9);\n    \n    float step1 = sdfSub(step0, sphere1);\n    \n    float sphere2 = sdfSphere(pt, vec3(0.0), sin(iTime) * 0.1 + 0.25);\n    \n    float step2 = sdfUnion(step1, sphere2);\n    \n    // float someNoise = max(0.0, texture(iChannel1, pt / 10.0 + vec3(iTime / 100.0)).x / 10.0);\n\n    return step2; // + someNoise\n    */\n    \n    float mandel = sdfMandel(pt, cos(iTime / 4.0) * 4.0 + 8.0);\n    float sphere0 = sdfSphere(pt, vec3(0.0), 1.0);\n    \n    return sdfInter(mandel, sphere0);\n}\n\n// Camera mathematics\nvec3 rayDir(float fov, vec2 size, vec2 pos)\n{\n    vec2 xy = pos - size * 0.5;\n    \n    float cotHalfFOV = tan((90.0 - fov * 0.5) * DEG_TO_RAD);\n    float z = size.y * 0.5 * cotHalfFOV;\n    \n    return normalize(vec3(xy, -z));\n}\n\nmat3 rotXY(vec2 angle)\n{\n    vec2 c = cos(angle);\n    vec2 s = sin(angle);\n    \n    return mat3(\n        c.y, 0.0, -s.y,\n        s.y * s.x, c.x, c.y * s.x,\n        s.y * c.x, -s.x, c.y * c.x\n    );\n}\n\n// Image generation\nvec3 calcNormal(vec3 pt)\n{\n    const vec3 smallStep = vec3(gradStep, 0.0, 0.0);\n    \n    float gradX = world(pt + smallStep.xyy) - world(pt - smallStep.xyy);\n    float gradY = world(pt + smallStep.yxy) - world(pt - smallStep.yxy);\n    float gradZ = world(pt + smallStep.yyx) - world(pt - smallStep.yyx);\n\n    vec3 normal = vec3(gradX, gradY, gradZ);\n\n    return normalize(normal);\n}\n\nvec3 fresnel(vec3 F0, vec3 h, vec3 l) {\n\treturn F0 + (1.0 - F0) * pow(clamp(1.0 - dot(h, l), 0.0, 1.0), 5.0);\n}\n\nfloat colGradStep(vec3 pt, vec3 normal)\n{\n    float dotted = dot(pt, normal) / 2.0 + 1.0;\n    dotted = pow(dotted, colGradPow);\n\n    return 1.0 - dotted;\n}\n\nvec3 shade(vec3 pt, vec3 normal, vec3 dir, vec3 eye)\n{\n    // const float shininess = 16.0;\n    \n    // vec3 final = vec3(0.0);\n    // vec3 ref = reflect(dir, normal);\n    \n    // vec3 Ks = specularCol;\n    vec3 Kd = mix(diffuseCol0, diffuseCol1, colGradStep(pt, normal)); // diffuseCol;\n    \n    // Light 0 (maybe more later, need to find good way of looping)\n    /*\n    {\n        vec3 vl = normalize(lightPos - pt);\n        \n        vec3 diffuse = Kd; // Kd * vec3(max(0.0, dot(vl, normal)));\n        vec3 specular = vec3(max(0.0, dot(vl, ref)));\n        \n        vec3 F = fresnel(Ks, normalize(vl - dir), vl);\n        specular = pow(specular, vec3(shininess));\n        \n        final += lightColor * mix(diffuse, specular, F);\n    }\n    */\n    \n    // final += texture(iChannel0, ref).rgb * fresnel(Ks, normal, -dir);\n    \n    return Kd; // final;\n}\n\nbool raymarch(vec3 o, vec3 dir, inout float depth, inout vec3 n) {\n\tfloat t = 0.0;\n    float d = 10000.0;\n    float dt = 0.0;\n\n    for (int i = 0; i < 128; i++)\n    {\n        vec3 v = o + dir * t;\n        d = world(v);\n\n        if (d < 0.001)\n        {\n            break;\n        }\n\n        dt = min(abs(d), 0.1);\n        t += dt;\n\n        if (t > depth)\n        {\n            break;\n        }\n    }\n    \n    if (d >= 0.001)\n    {\n        return false;\n    }\n    \n    t -= dt;\n\n    for (int i = 0; i < 4; i++)\n    {\n        dt *= 0.5;\n        vec3 v = o + dir * (t + dt);\n\n        if (world(v) >= 0.001)\n        {\n            t += dt;\n        }\n    }\n    \n    depth = t;\n    n = normalize(calcNormal(o + dir * t));\n    \n    return true;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Default camera position\n    vec3 eye = vec3(0.0, 0.0, 3.5);\n    vec3 dir = rayDir(camFOV, iResolution.xy, fragCoord.xy);\n    \n    // Camera rotation\n    mat3 rot = rotXY((iMouse.xy - iResolution.xy * 0.5).yx * vec2(0.01, -0.01));\n    dir = rot * dir;\n    eye = rot * eye;\n\n    // Raymarch\n    float depth = zClip;\n    vec3 normal = vec3(0.0);\n    \n    if (!raymarch(eye, dir, depth, normal))\n    {\n        fragColor = vec4(bgCol, 1.0); // texture(iChannel0, dir);\n        return;\n    }\n\n    // Shading\n    vec3 pos = eye + dir * depth;\n    \n    vec3 col = shade(pos, normal, dir, eye);\n    fragColor = vec4(col, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const float pass = 0.15;\nconst vec3 noPassCol = vec3(0.0);\n\n\nvec4 threshold(vec4 px, float threshold)\n{\n   // luminosity (wtf)\n   float lum = dot(px, vec4(0.299, 0.587, 0.114, 0.0));\n   // Return color but only if it passes\n   return (lum > threshold) ? px : vec4(noPassCol, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 original = texture(iChannel0, uv);\n    vec4 highPass = threshold(original, pass);\n\n    fragColor = highPass;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}