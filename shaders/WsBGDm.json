{
    "Shader": {
        "info": {
            "date": "1549037125",
            "description": "I was trying to make a mandelbox, but I don't know what I'm doing :p\nBy pure luck while trying I made this :p\nIn the end it's a wrong mandelbox but a correct DREAMBOX \\o/\n\nobs: If anyone know what's wrong with the code please comment :p",
            "flags": 0,
            "hasliked": 0,
            "id": "WsBGDm",
            "likes": 12,
            "name": "Dreambox",
            "published": 3,
            "tags": [
                "procedural",
                "clouds",
                "mandelbox",
                "dream"
            ],
            "usePreview": 0,
            "username": "thiagoborn",
            "viewed": 574
        },
        "renderpass": [
            {
                "code": "float eps = 0.0001;\nint steps = 32;\nfloat minDist = 0.01;\nfloat maxDist = 10.0;\nfloat delta = 1.0;\n\nfloat foldingLimit = 1.0;\nconst float minRadius =  0.5;\nconst float minRadius2 = minRadius*minRadius;\n\nconst float fixedRadius = 1.0;\nconst float fixedRadius2 = fixedRadius*fixedRadius;\n\nint Iterations = 5;\nfloat Scale = 1.5;\n\nvoid sphereFold(inout vec3 z, inout float dz) {\n\tfloat r2 = dot(z,z);\n\tif (r2<minRadius2) { \n\t\t// linear inner scaling\n\t\tfloat temp = (fixedRadius2/minRadius2);\n\t\tz *= temp;\n\t\tdz*= temp;\n\t} else if (r2<fixedRadius2) { \n\t\t// this is the actual sphere inversion\n\t\tfloat temp =(fixedRadius2/r2);\n\t\tz *= temp;\n\t\tdz*= temp;\n\t}\n}\n\nvoid boxFold(inout vec3 z, inout float dz) {\n\tz = clamp(z, -foldingLimit, foldingLimit) * 2.0 - z;\n}\n\nfloat mandelbox(vec3 z)\n{\n\tvec3 offset = z;\n\tfloat dr = 1.0;\n\tfor (int n = 0; n < Iterations; n++) {\n\t\tboxFold(z,dr);       \n\t\tsphereFold(z,dr);    \n\t\tz=Scale*z + offset;  \n        dr = dr*abs(Scale)+1.0;\n\t}\n\tfloat r = length(z);\n\treturn r/abs(dr);\n}\n\nfloat world(vec3 p){\n  return mandelbox(p);\n}\n    \nfloat trace(vec3 origin,vec3 direction){\n    float distTraveled = minDist;\n   \n    for(int i=0;i<steps;i++){\n   \t\tvec3 point = origin + direction * distTraveled;\n        float dist = world(point);\n        if(dist<eps){\n            return distTraveled;\n        }\n       \tdistTraveled += dist * delta;\n       \n    }\n    return distTraveled;\n}\n\nfloat shadow(vec3 ro,vec3 rd,float mint,float maxt,float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t < maxt; )\n    {\n        float h = world(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\nvec3 calcNormal(vec3 p) {   \n    return normalize(vec3(\n        world(vec3(p.x + eps, p.y, p.z)) - world(vec3(p.x - eps, p.y, p.z)),\n        world(vec3(p.x, p.y + eps, p.z)) - world(vec3(p.x, p.y - eps, p.z)),\n        world(vec3(p.x, p.y, p.z  + eps)) - world(vec3(p.x, p.y, p.z - eps))\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv  = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n    vec3 lookingTo = vec3(0.,0.,0.);\n    float it = iTime / 10.;\n    vec3 viewer = vec3(\n        0.1+sin(it/2.5) * 1.,\n        0.2+cos(it/3.0) * 1.,\n        sin(it/3.5) * 1.\n    );\n    \n    vec3 forward = normalize(lookingTo-viewer);\n    vec3 rigth = cross(vec3(0.0,1.0,0.0),forward);\n    vec3 up = cross(forward,rigth);\n    \n    vec3 direction = normalize(forward *2.0 + rigth * uv.x + up * uv.y);\n    float dist = trace(viewer,direction); \n\tvec3 color = vec3(0.0);    \n\tfloat fog = 1.0 / (1.0 + dist);\n    color = vec3(fog);\n\tfragColor = vec4(color,1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}