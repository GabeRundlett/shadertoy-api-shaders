{
    "Shader": {
        "info": {
            "date": "1465769779",
            "description": "Drag mouse to move, W and Q to zoom in/out, R to reset.\nBottom-right sliders to change Kaliset parameters,\nBottom-left buttons to select preset/slot",
            "flags": 48,
            "hasliked": 0,
            "id": "XdVSRc",
            "likes": 20,
            "name": "2D KaliSet Browser",
            "published": 3,
            "tags": [
                "fractal",
                "interactive",
                "kaliset"
            ],
            "usePreview": 0,
            "username": "bergi",
            "viewed": 1107
        },
        "renderpass": [
            {
                "code": "/* 2D Kaliset Browser - https://www.shadertoy.com/view/XdVSRc\n *\n * (cc) 2016, Stefan Berke\n * \n * Antialiased, zoomable kaliset explorer. \n *\n * The \"Kaliset\" is described here:\n * http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns\n * \n * \n * This viewer is pretty general and can be used for any 2d-pos -> color function.\n * \n */\n\n// undef this here and in BufA for fixed iterations\n#define FREE_ITER\nconst int max_iter = 99;\n\n#define READ(idx_) texture(iChannel0, vec2(float(idx_)+.5,.5)/iResolution.xy, -100.)\n\n#define S_PRESET 5\n#define S_KALI_PARAM 6\n#define PARAM_SCALE vec4(1.5,1.5,1.5,max_iter)\n\nfloat PrintValue(const in vec2 fragCoord, const in vec2 vPixelCoords, const in vec2 vFontSize, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n    vec4 t = texture(iChannel0, uv);\n\n    // get average color\n    if (t.w > 0.)\n        t /= t.w;\n\n    vec2 v = pow(min(vec2(1.), 1.01*abs(uv*2.-1.)), vec2(50.,30.));\n    t *= 1.-max(v.x, v.y);\n\n    fragColor = vec4(t.xyz, 1.);\n\n    // sliders\n\tif (uv.x > .5 && uv.y < .1)\n    {\n        uv = (uv-vec2(.5,.0))/vec2(.5,.1);\n#ifndef FREE_ITER\n        float idx = floor(uv.y*3.);\n#else\n        float idx = floor(uv.y*4.);\n#endif        \n\t    int   curPreset = int(READ(S_PRESET));\n\t\tvec4  param =  READ(S_KALI_PARAM+curPreset);\n        float x = idx >= 3. ? param.w : idx >= 2. ? param.z : idx >= 1. ? param.y : param.x;\n        float sc = idx >= 3. ? PARAM_SCALE.w : idx >= 2. ? PARAM_SCALE.z : idx >= 1. ? PARAM_SCALE.y : PARAM_SCALE.x;\n        float v = .1 + .4 * smoothstep(.003, .0, uv.x * sc - x);\n        \n        fragColor.xyz += v * (vec3(1.) - fragColor.xyz);\n        \n        // XXX numbers are not accurate beyond 2nd decimal\n#ifndef FREE_ITER        \n        fragColor.xyz += PrintValue(uv*10., vec2(8.2,idx*3.3), .3*vec2(1.,10.), x, 1., 2.);\n#else\n        fragColor.xyz += PrintValue(uv*13., vec2(11.2,idx*3.3), .3*vec2(1.,10.), x, 1., idx >= 3. ? 0. : 2.);\n#endif        \n    }\n    else\n    // 10 presets\n    if (uv.x < .5 && uv.y < .1)\n    {\n        uv *= vec2(1.,iResolution.y/iResolution.x*1.4)*20.;\n        float idx = floor(uv.x);\n        uv.x = mod(uv.x, 1.);\n        uv-=.5;\n        float v = int(READ(S_PRESET).x) == int(idx) ? .5 : .2;\n        fragColor.xyz += v*smoothstep(.01,.0, max(abs(uv.x), abs(uv.y))-.4);\n    }\n}\n\n\n// ---- 8< ---- GLSL Number Printing - @P_Malin ---- 8< ----\n// Creative Commons CC0 1.0 Universal (CC-0) \n// https://www.shadertoy.com/view/4sBSWW\n\nfloat DigitBin(const in int x)\n{\n    return x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;\n}\n\nfloat PrintValue(const in vec2 fragCoord, const in vec2 vPixelCoords, const in vec2 vFontSize, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces)\n{\n    vec2 vStringCharCoords = (fragCoord.xy - vPixelCoords) / vFontSize;\n    if ((vStringCharCoords.y < 0.0) || (vStringCharCoords.y >= 1.0)) return 0.0;\n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCharCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n\t\t\tif((fValue < 0.0) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n\t\t} else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;\n\t\t\t} else {\n\t\t\t\tif(fDigitIndex < 0.0) fDigitIndex += 1.0;\n\t\t\t\tfloat fDigitValue = (abs(fValue / (pow(10.0, fDigitIndex))));\n                float kFix = 0.0001;\n                fCharBin = DigitBin(int(floor(mod(kFix+fDigitValue, 10.0))));\n\t\t\t}\t\t\n\t\t}\n\t}\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCharCoords.x) * 4.0) + (floor(vStringCharCoords.y * 5.0) * 4.0))), 2.0));\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "/* 2D Kaliset Browser - https://www.shadertoy.com/view/XdVSRc\n *\n * (cc) 2016, Stefan Berke\n * \n * Antialiased, zoomable kaliset explorer. \n *\n */\n\n#define FREE_ITER\n\nvec3 kali_av(in vec3 p);\nvec3 kali_orbit(in vec3 p);\n\n// main function\n// plug-in any pos->color function here\nvec3 fractal_color(in vec2 p)\n{\n    vec3 p3 = vec3(p, 0.);\n    return kali_av(p3);\n    //return kali_orbit(p3);\n}\n\n\n#ifndef FREE_ITER\n// number of iterations in the kaliset\nconst int max_iter = 31;\n#else\n// number of maximum iters\nconst int max_iter = 99;\n// number of actual iters\n\t  int num_iter = 31;\n#endif\n\n// magic parameter\nvec3 kali_param;\n\n// returns average value from kaliset\nvec3 kali_av(in vec3 p)\n{\n    vec3 col = vec3(0.);\n    for (int i=0; i<max_iter; ++i)\n    {\n#ifdef FREE_ITER\n        if (i >= num_iter) break;\n#endif        \n        p = abs(p) / dot(p, p);\n        col += exp(-p*20.);\n        p -= kali_param;\n    }\n    col /= float(num_iter);\n    col *= 4.;\n    \n    //col = pow(clamp(col, 0., 1.), vec3(2.));\n    \n    return col;\n}\n\n// returns minimum distance to x,y,z lines in kaliset\nvec3 kali_orbit(in vec3 p)\n{\n    vec3 d = vec3(1.);\n    for (int i=0; i<max_iter; ++i)\n    {\n#ifdef FREE_ITER\n        if (i >= num_iter) break;\n#endif        \n        p = abs(p) / dot(p, p);\n        d = min(d, p);\n        //d = min(d, abs(p-.25));\n        d = min(d, abs(p-.5));\n        //d = min(d, abs(p-.75));\n        //d = min(d, length(p-.5));\n        p -= kali_param;\n    }\n    return pow(max(vec3(0.), 1.-3.*d), vec3(13.));\n}\n\nvec4 param_preset(in int idx)\n{\n    vec3 p;\n    \t if (idx == 0) p = vec3(1., 1., 1.01);        \n    else if (idx == 1) p = vec3(1.);\n\telse if (idx == 2) p = vec3(0.39, 1.30, 0.4);\n\telse if (idx == 3) p = vec3(0.075, 0.565, .03);\n\telse if (idx == 4) p = vec3(.835, .835, .96);\n    else if (idx == 5) p = vec3(.5, .4, 1.578);\n\telse if (idx == 6) p = vec3(.4, .5, .8);\n\telse if (idx == 7) p = vec3(1., 1., .13);\n\telse if (idx == 8) p = vec3(0.11, 0.09, 1.33);\n\telse \t\t\t   p = vec3(0.45, 0.97, 1.578);\n    return vec4(p, 31);\n}\n\n// used for AA\nvec2 hash2(in vec2 v) { return fract(sin(v*vec2(13.,17.))*(73349.2-v.x+v.y)); }\n\n#define STORE(idx_, val_) { if (int(fragCoord.x) == int(idx_)) fragColor = vec4(val_); }\n#define READ(idx_) texture(iChannel0, vec2(float(idx_)+.5,.5)/iResolution.xy, -100.)\n#define ISKEY(idx_) (texture(iChannel1, vec2(float(idx_)+.5,.5)/256., -100.).x > .5)\n\n#define S_POS 0\n#define S_ZOOM 1\n#define S_MOUSE 2\n#define S_DRAG_START 3\n#define S_ACTION 4\n#define S_PRESET 5\n#define S_KALI_PARAM 6 // 6-15\n#define PARAM_SCALE vec4(1.5,1.5,1.5,max_iter)\n\n#define A_DRAG 1\n#define A_PRESET 2\n#define A_SLIDER 3 // 3,4,5,6\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // previous states\n    \n    fragColor = texture(iChannel0, fragCoord / iResolution.xy, -100.);\n    vec2  pos =    READ(S_POS).xy;\n    vec2  ppos =   READ(S_DRAG_START).xy;\n    float zoom =   READ(S_ZOOM).x; \n    vec4  mouse =  READ(S_MOUSE);\n    int   curPreset = int(READ(S_PRESET));\n\tvec4  param =  READ(S_KALI_PARAM+curPreset);\n    int   curAct = int(READ(S_ACTION).x);\n    \n    bool doReset = false;\n    \n    // reset\n\tif (iFrame == 0 || ISKEY(82))\n    {\n    \tfragColor = vec4(0.);\n        for (int i=0; i<10; ++i)\n\t\t\tSTORE(S_KALI_PARAM+i, param_preset(i));\n\n        pos = vec2(0.);\n        zoom = 1.;\n        curAct = 0;\n\n        param = param_preset(curPreset);\n        doReset = true;\n\t}\n\t\t\n    \n    // zoom & determine if we need to reset the color accum.\n    if (ISKEY(81))\n        zoom *= .97, doReset = true;\n    if (ISKEY(87))\n        zoom *= 1.03, doReset = true;\n    if (iMouse.z > .5)\n        doReset = true;\n    \n    // change & store state\n    if (fragCoord.y < 1.)\n    {\n        // mouse release\n        if (iMouse.z < .5)\n        {\n            curAct = 0;\n        }\n        else // mouse down\n        {\n            vec2 m = iMouse.xy / iResolution.xy;\n            \n            // mouse start click?\n            if (mouse.z < .5)\n            {\n                // parameter sliders\n                if (m.x > .5 && m.y < .1)\n                {\n#ifndef FREE_ITER                    \n                    float idx = floor(m.y*30.);\n#else\n                    float idx = floor(m.y*40.);\n#endif                    \n                    if (idx >= 3.)\n                    \tcurAct = A_SLIDER+3;\n                    else if (idx >= 2.)\n                    \tcurAct = A_SLIDER+2;\n                \telse if (idx >= 1.)\n                    \tcurAct = A_SLIDER+1;\n\t                else \n                    \tcurAct = A_SLIDER;\n                }\n                // preset\n                else if (m.x < .5 && m.y < .1)\n                {\n                    curPreset = int(m.x*20.);\n                    param = READ(S_KALI_PARAM+curPreset);\n                    curAct = A_PRESET;\n                }\n            }\n            \n            // drag sliders\n\t\t\tif (curAct >= A_SLIDER)\n    \t\t{\n                m = (m-vec2(.5,.0))/vec2(.5,.1);\n                if (curAct == A_SLIDER)\n                    param.x = m.x * PARAM_SCALE.x;\n                else if (curAct == A_SLIDER+1)\n                    param.y = m.x * PARAM_SCALE.y;\n                else if (curAct == A_SLIDER+2)\n                    param.z = m.x * PARAM_SCALE.z;\n                else\n                    param.w = m.x * PARAM_SCALE.w;\n            }\n            else if (curAct == 0 || curAct == A_DRAG)\n            {\n                // start drag\n                if (mouse.z < .5)\n                {\n                    STORE(S_DRAG_START, vec4(pos, 0,0));\n                    curAct = A_DRAG;\n                }\n                // continue drag\n                else\n                {\n                    vec2 delta = (iMouse.xy - mouse.xy) / iResolution.y;\n                    pos -= delta / zoom * 2.;\n                }\n            }\n        }    \n        STORE(S_POS, vec4(pos,0,0));\n        STORE(S_ZOOM, zoom);\n        STORE(S_MOUSE, iMouse);\n        STORE(S_KALI_PARAM+curPreset, max(param, vec4(-1.,-1.,-1.,1.)));\n        STORE(S_ACTION, float(curAct));\n        STORE(S_PRESET, float(curPreset));\n    }\n    // render\n    else if (fragColor.w < 100. || doReset)\n    {\t\t\t\t\t // ^ max AA samples\n        \n        vec2 fc = fragCoord + hash2(fragCoord + iDate.zw);\n    \tvec2 uv = (fc - iResolution.xy*.5) / iResolution.y * 2.;\n    \n        vec2 p = uv / zoom + pos;\n        \n        kali_param = param.xyz;\n#ifdef FREE_ITER\n        num_iter = int(param.w);\n#endif        \n    \tvec3 col = fractal_color(p);\n\n        // accum color\n        if (!doReset)\n    \t\tfragColor += vec4(col, 1.);\n        // reset color\n        else\n            fragColor = vec4(col, 1.);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "nearest",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}