{
    "Shader": {
        "info": {
            "date": "1663202360",
            "description": "I tested a transparent 3D raymarching idea and found some sacred patterns.\nEnjoy an extra dimension with your red/cyan glasses on and drag the mouse to rotate the cam.\n\nSubstance Reference: 5-MeO-MiPT",
            "flags": 0,
            "hasliked": 0,
            "id": "ftdfW8",
            "likes": 4,
            "name": "Anaglyph Sphere Waves",
            "published": 3,
            "tags": [
                "3d",
                "dof",
                "spheres",
                "anaglyph",
                "stereo"
            ],
            "usePreview": 0,
            "username": "derSchamane",
            "viewed": 412
        },
        "renderpass": [
            {
                "code": "//                  = Anaglyph Sphere Waves =         \n//                by Maximilian Knape ·∑>| 2022            \n// -----------------------------------------------------------\n// This work is licensed under a Creative Commons Attribution-\n//        NonCommercial-ShareAlike 3.0 Unported License\n\n// In the end there is just a moving sphere in a mirror box...\n\n\n#define MAX_STEPS 200\n#define MAX_DIS 400.\n#define MIN_DIS 10.\n\n#define SURF_DIS .01\n#define SURF_MUL 100.\n#define SURF_EXP 2.\n\n#define EYE_DIS 1.0\n#define FIL_COR 1.05\n\n#define iTime iTime*.6\n\nmat2 Rot(float a)  \n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Dist(vec3 p) \n{\n    //cam rotation\n    float q = min(iTime/200., 5.);\n    float c = 0.2 / (1.+q/3.);\n    p.yx *= Rot(.7854*smoothstep(0.,c+c,-cos(iTime/(23.+q))));\n    p.zx *= Rot(.7854*smoothstep(-c,c+c,-cos(iTime/(11.+q))));\n    p.zy *= Rot(.7854*smoothstep(c,c+c,-cos(iTime/(45.+q))));\n\n    //distance frequency\n    float f = 1./(400.+sin(iTime/13.)*200.+sin(iTime/19.)*100.);\n    float dis = length(p)*f;\n    \n    //mirrorbox\n    vec3 size = vec3(10.);\n    p = mod(abs(-mod(p,4.*size)+2.*size),4.*size);\n    \n    //sphere\n    float d = length(p - sin(iTime*.5+dis*6.28)*size.x-size) - \n              10.*(sin(iTime*1.+dis*6.28)*.5+.8)*pow(dis/f/MAX_DIS, 1.2) *\n              (1.+smoothstep(0.9,1.,sin(iTime/2.+dis/f/200.))); \n\n    return d;\n}\n\nfloat RTM(vec3 ro, vec3 rd) \n{\n    float sum = 0.;\n\tfloat s = 1.;\n    float d = MIN_DIS;\n    const float a = 1. / float(MAX_STEPS); \n    \n    for(int i = 0; i < MAX_STEPS; i++) \n    {    \n        float sd = (SURF_DIS * (pow(d/MAX_DIS, SURF_EXP)*SURF_MUL+1.));\n        if (s < sd || d > MAX_DIS) break;\n        \n        s = Dist(ro + rd*d);\n        s = max(abs(s), 2.*sd);\n        d += s * .8;\n        sum += a;\n    }\n    \n    return smoothstep(0., 1., sum * (1.-exp(-d*d)));\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z)\n{\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy) / iResolution.y;\n\t\n    //interaction\n    vec2 m = iMouse.xy / iResolution.xy;\n    if (length(m) == 0.) m = vec2(.5);\n    m.x = clamp(m.x, .1, .9);\n    m.y = clamp(m.y, .25, .75);\n    \n    //set cam\n    vec3 ro = vec3( 0., 0., -15.);\n    ro.yz *= Rot(-m.y*3.14159 + 1.5708);\n    ro.xz *= Rot(-m.x*6.28318);\n    vec3 rd = R(uv, ro, vec3(0., 0., 0.), .7 + 0.4*smoothstep(.6,.9,sin(iTime/16.)));\n    ro += normalize(cross(rd, vec3(0., -1., 0.))) * EYE_DIS * -.5;\n    \n    //left eye\n    float colL = RTM(ro, rd);\n    \n    //eye distance\n    ro += normalize(cross(rd, vec3(0., -1., 0.))) * EYE_DIS;\n    \n    //right eye\n    float colR = RTM(ro, rd);\n    \n    //filter correction\n    colL *= FIL_COR; \n    colR /= FIL_COR;\n    \n    //contrast\n    vec3 colS = smoothstep(vec3(0.), vec3(1.), vec3(colL, colR, colR));\n    \n    //Vignette\n    colS *= smoothstep(2.,-2./5., dot(uv,uv)); \n    \n    fragColor = vec4(colS, 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}