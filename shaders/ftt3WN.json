{
    "Shader": {
        "info": {
            "date": "1636154267",
            "description": "eye\nLike the Shadertoy logo, but not really!",
            "flags": 0,
            "hasliked": 0,
            "id": "ftt3WN",
            "likes": 8,
            "name": "Eyee",
            "published": 3,
            "tags": [
                "eye"
            ],
            "usePreview": 0,
            "username": "prishainabox",
            "viewed": 214
        },
        "renderpass": [
            {
                "code": "float random(in vec2 v) {\n    return fract(15465.1327854 * sin(dot(v, vec2(173.93422, 102.5165))));\n}\n\nfloat noise(in vec2 uv) {\n    \n    vec2 fid = fract(uv); // fraction part of uv -> where in the grid\n    fid = fid * fid * (3.0 - 2.0 * fid);\n    vec2 id = floor(uv); // integer part of uvw -> which grid\n    \n    // corners of grid\n    float bl = random(id + vec2(0, 0));\n    float br = random(id + vec2(1, 0));\n    float tl = random(id + vec2(0, 1));\n    float tr = random(id + vec2(1, 1));\n    \n    // interpolate between corner\n    float b = mix(bl, br, fid.x);\n    float t = mix(tl, tr, fid.x);\n    return mix(b, t, fid.y);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // normalized pixel coordinates\n    vec2 res = iResolution.xy;\n    vec2 uv = (2.0*fragCoord - res) / min(res.x, res.y) * 1.2;\n    // for two eyes\n    \n    // distance between pt and origin\n    float d = length(uv);\n    vec3 outerEyeClr = vec3(0.05, 0.3, 0.8);\n    \n    // black background\n    vec3 clr = vec3(0.0);\n    // noise\n    clr += noise(uv * 3.0) * 0.1 * vec3(1.5, 0.1, 0.5);\n    clr += noise(uv * 3.0 + 1.0) * 0.2 * vec3(0.0, 0.1, 1.3);\n    clr += vec3(0.6, 0.06, 0.4) * 0.15 * sin(noise(uv) * uv.x * 10.0);\n    clr *= 0.5;\n    // blue/purple glow\n    clr = mix(vec3(0.3, 0.1, 0.4) * 0.8, clr, smoothstep(d, 0.58, 0.73));\n    clr = mix(outerEyeClr*5., clr, smoothstep(d, 0.64, 0.66));\n    \n    // stars\n    float n = random(uv * 0.2); // random num based on coordinate\n    if (n < 0.008) {\n        clr += 0.6 * noise(vec2(uv * 50.0 + iTime));\n    }\n    \n    if (d < 0.8) {\n        // angle between center and pt\n        float a = atan(uv.y, uv.x);\n        // outer circle\n        vec3 e = mix(vec3(0.35, 0.65, 0.14), outerEyeClr, smoothstep(0.3, 0.65, d));\n        e += vec3(0.3, 0.35, 0.15)*1.2*(smoothstep(2.4, 3.14, a) + smoothstep(3.14, 4.94, 3.14-a));\n        // noise\n        e += noise(14.5 * vec2(cos(a), sin(a))) * 0.18;\n        // vignette\n        e = mix(e, vec3(0.02, 0.02, 0.2) * 0.1, smoothstep(0.45, 0.9, d));\n        // center\n        e = mix(e, vec3(0.1, 0.1, 0.15) * 0.7, smoothstep(0.28, 0.23, d));\n        // shine\n        float l = distance(uv, vec2(0.27));\n        vec3 shineClr = vec3(0.8, 1.2, 0.7);\n        e += shineClr * smoothstep(0.7, 0.0, l) * 0.4;\n        e += shineClr * smoothstep(0.15, 0.0, l*0.5) * 0.3;\n        // mix eye clr into background\n        clr = mix(clr, e, smoothstep(0.74, 0.69, d));\n    }\n\n    fragColor = vec4(clr, 1.0);\n\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}