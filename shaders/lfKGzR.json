{
    "Shader": {
        "info": {
            "date": "1712341717",
            "description": "alternative version of my shader from Revision24 showdown round 3",
            "flags": 0,
            "hasliked": 0,
            "id": "lfKGzR",
            "likes": 31,
            "name": "Kaleido Mecha",
            "published": 3,
            "tags": [
                "shadershowdown"
            ],
            "usePreview": 0,
            "username": "leon",
            "viewed": 314
        },
        "renderpass": [
            {
                "code": "\n// alternative version of my shader from Revision24 showdown round 3\n// original version:\n// https://livecode.demozoo.org/event/2024_03_29_shader_showdown_revision_2024.html\n\nmat2 rot(float a)\n{\n    float c=cos(a),s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat map(vec3 p)\n{\n    float dist = 100.;\n\n    float t = 196. + iTime;\n    float a = 1.;\n\n    for (float i = 0.; i < 8.; ++i)\n    {\n        vec3 e = vec3(.2+.2*sin(i+iTime),.0,0);\n        p.xz = abs(p.xz)-.5*a;\n        p.xz *= rot(t*a);\n        p.yz *= rot(t*a);\n        p = p - clamp(p, -e, e);\n        dist = min(dist, length(p)-.01);\n        a /= 1.8;\n    }\n\n    return dist;\n}\n\nvec3 getResult(vec2 fragCoord)\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    vec3 color = vec3(smoothstep(1., -2., length(uv)));\n    \n    vec3 pos = vec3(0,0,4);\n    vec3 ray = normalize(vec3(uv, -1.));\n    float dist = 100.;\n    float total = 0.;\n    float shade = 1.;\n\n    for (shade = 1.; shade > 0.; shade -= 1./60.)\n    {\n        dist = map(pos);\n        if (dist < .001) break;\n        pos += ray * dist;\n        total += dist;\n        if (total > 10.) return color;\n    }\n    if (total < 10. && shade > .01)\n    {\n        vec2 e = vec2(.001,0);\n        vec3 normal = normalize(dist-vec3(map(pos+e.xyy),map(pos+e.yxy),map(pos+e.yyx)));\n        vec3 tint = 0.5 + 0.5 * cos(vec3(1,2,3)+length(pos)*2.+iTime);\n        float light = dot(reflect(ray, normal), normalize(vec3(0,1,-1)));\n        color = tint*shade+pow(max(light,0.), 4.);\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color;\n    const float samples = 4.;\n    for (float a = 0.; a < 1.; a += 1./samples)\n    {\n        vec2 aa = vec2(cos(a*6.28),sin(a*6.28))*.5;\n        color += getResult(fragCoord+aa)/samples;\n    }\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}