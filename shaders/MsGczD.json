{
    "Shader": {
        "info": {
            "date": "1521209432",
            "description": "Each pixel of BufA compute a digit of Pi. Explore with arrows/mouse\nSimilar to Plouffe algorithm in hexa [url]https://www.shadertoy.com/view/XsyyzW[/url]\nAlas, O(nÂ²) instead of n.log(n)  Nb digits: Common.\nref: 3.141592653589793238462643383279502884197169",
            "flags": 48,
            "hasliked": 0,
            "id": "MsGczD",
            "likes": 5,
            "name": "parallel Pi (Bellard algo)",
            "published": 3,
            "tags": [
                "pi",
                "plouffe",
                "spigot"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 665
        },
        "renderpass": [
            {
                "code": "// here: display.  Maths in BufA,    MAX_DIGIT in Common\n\n// === access to the image of ascii code c\nvec4 char(vec2 p, int c) {\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx(p/16.),dFdy(p/16.) );\n}\n#define num(c) char(U, 48+(c) ).x\n\n\n// === display\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O-=O;\n    U /= S;\n    ivec2 iU = ivec2(U);                // cell index\n    iU.y = W.y-iU.y-1;                  // 1st line on top\n    if ( iU.x>=W.x || iU.y<0 ) return;\n    U = fract(U); U.x = U.x/2.+.2;      // reframed char coord in its bbox\n\n    int n = iU.x + W.x*iU.y +4,\n        c = int( texelFetch(iChannel0, ivec2(n/4,0), 0 )[n%4] )  ; // 4 by 4\n     // c = int( texelFetch(iChannel0, ivec2(n,0), 0 ).r )  ;      // 1 by 1\n    O += num(c);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define MAX_DIGIT 200                // number digits displayed (so costly...)\n\nvec2    S = 32./vec2(2,1);           // character size\n#define W ivec2(iResolution.xy/(S))  // size of display char matrix\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// ported from https://bellard.org/pi/pi1.c\n// cf https://bellard.org/pi/  https://fr.wikipedia.org/wiki/Fabrice_Bellard\n// See also (en & fr) https://en.wikipedia.org/wiki/Bailey%E2%80%93Borwein%E2%80%93Plouffe_formula\n// https://www.shadertoy.com/view/XsyyzW\n\n/*\n * Computation of the n'th decimal digit of pi with very little memory.\n * [Original C code] written by Fabrice Bellard on February 26, 1997.\n * \n * We use a slightly modified version of the method described by Simon\n * Plouffe in \"On the Computation of the n'th decimal digit of various\n * transcendental numbers\" (November 1996). We have modified the algorithm\n * to get a running time of O(n^2) instead of O(n^3log(n)^3).\n *\n * This program uses a variation of the formula found by Gosper in 1974 :\n * \n * pi = sum( (25*n-3)/(binomial(3*n,n)*2^(n-1)), n=0..infinity);\n */\n\n#define double float\n\n#define mul_mod(a,b,m) ( ((a)*(b)) % m ) \n//#define mul_mod(a,b,m) mod( double(a) * double(b), m) // $FaN why casting ?\n\n/* return the inverse of x mod y */\nint inv_mod(int x, int y)\n{\n    int q, u, v, a, c, t;\n\n    u = x;\n    v = y;\n    c = 1;\n    a = 0;\n    do {\n        q = v / u;\n\n        t = c;\n        c = a - q * c;\n        a = t;\n\n        t = u;\n        u = v - q * u;\n        v = t;\n    } while (u != 0);\n    a = a % y;\n    if (a < 0) a = y + a;\n    return a;\n}\n\n/* return the inverse of u mod v, if v is odd */\nint inv_mod2(int u, int v)\n{\n    int u1, u3, v1, v3, t1, t3;\n\n    u1 = 1;\n    u3 = u;\n\n    v1 = v;\n    v3 = v;\n\n    bool Goto = false;\n    if ((u & 1) != 0) {\n        t1 = 0;\n        t3 = -v;\n        Goto = true; // goto Y4; // $FaN\n    } else {\n        t1 = 1;\n        t3 = u;\n    }\n\n    do {\n\n        do {\n            if( !Goto)    // $FaN\n                if ((t1 & 1) == 0) {\n                    t1 = t1 >> 1;\n                    t3 = t3 >> 1;\n                } else {\n                    t1 = (t1 + v) >> 1;\n                    t3 = t3 >> 1;\n                }\n            else Goto = false; // Y4:; // $FaN\n        } while ((t3 & 1) == 0);\n\n        if (t3 >= 0) {\n            u1 = t1;\n            u3 = t3;\n        } else {\n            v1 = v - t1;\n            v3 = -t3;\n        }\n        t1 = u1 - v1;\n        t3 = u3 - v3;\n        if (t1 < 0) {\n            t1 = t1 + v;\n        }\n    } while (t3 != 0);\n    return u1;\n}\n\n/* return (a^b) mod m */\nint pow_mod(int a, int b, int m)\n{\n    int r, aa;\n\n    r = 1;\n    aa = a;\n    while (true) {\n        if ( (b & 1) != 0)\n            r = mul_mod(r, aa, m);\n        b = b >> 1;\n        if (b == 0) break;\n        aa = mul_mod(aa, aa, m);\n    }\n    return r;\n}\n\n/* return true if n is prime */\nbool is_prime(int n)\n{\n    int r, i;\n    if ((n % 2) == 0) return false;\n\n    r = int(sqrt(double(n)));\n    for (i = 3; i <= r; i += 2)\n        if ((n % i) == 0) return false;\n    return true;\n}\n\n/* return the prime number immediatly after n */\nint next_prime(int n)\n{\n    do n++; while (!is_prime(n));\n    return n;\n}\n\n#define DIVN(t,a,v,vinc,kq,kqinc)     \\\n{   kq += kqinc;                      \\\n    if (kq >= a) {                    \\\n        /* kq = kq % a; costlier ! */ \\\n        do  kq-=a;  while (kq>=a);    \\\n        if (kq == 0)                  \\\n          do {                        \\\n\t          t = t/a;                \\\n\t          v += vinc;              \\\n             } while ((t % a) == 0);  \\\n      }                               \\\n}\n\nint digit(int n)\n{\n    if (n<=0) return -1; // otherwise crash $FaN\n\n    int av, a, vmax, N, num, den, k, kq1, kq2, kq3, kq4, t, v, s, i, t1;\n    double sum;\n\n    N = int ( double(n + 20) * log(10.) / log(13.5) );\n  //N = int ( double(n + 6) * log(10.) / log(13.5) ); // 6 seems enough $FaN\n    sum = 0.;\n\n    for (a = 2; a <= (3 * N); a = next_prime(a)) {\n        vmax = int( (log(double(3 * N)) / log(double(a))) );\n        if (a == 2) {\n            vmax = vmax + (N - n);\n            if (vmax <= 0) continue;\n        }\n        av = 1;\n        for (i = 0; i < vmax; i++) av *= a;\n\n        s = 0;\n        den = 1;\n        kq1 = 0;\n        kq2 = -1;\n        kq3 = -3;\n        kq4 = -2;\n        if (a == 2) {\n            num = 1;\n            v = -n;\n        } else {\n            num = pow_mod(2, n, av);\n            v = 0;\n        }\n\n        for (k = 1; k <= N; k++) {\n\n            t = 2 * k;\n            DIVN(t, a, v, -1, kq1, 2);\n            num = mul_mod(num, t, av);\n\n            t = 2 * k - 1;\n            DIVN(t, a, v, -1, kq2, 2);\n            num = mul_mod(num, t, av);\n\n            t = 3 * (3 * k - 1);\n            DIVN(t, a, v, 1, kq3, 9);\n            den = mul_mod(den, t, av);\n\n            t = (3 * k - 2);\n            DIVN(t, a, v, 1, kq4, 3);\n            \n            if (a != 2) t *= 2;\n            else        v++;\n            den = mul_mod(den, t, av);\n\n            if (v > 0) {\n                if (a != 2) t = inv_mod2(den, av);\n                else        t = inv_mod(den, av);\n                t = mul_mod(t, num, av);\n                for (i = v; i < vmax; i++)\n                    t = mul_mod(t, a, av);\n                t1 = (25 * k - 3);\n                t = mul_mod(t, t1, av);\n                s += t;\n                if (s >= av) s -= av;\n            }\n        }\n\n        t = pow_mod(5, n - 1, av);\n        s = mul_mod(s, t, av);\n        sum = fract( sum + double(s) / double(av) );\n    }\n\n    return int(sum * 1e4); // 4 digits: can we simplify above ?\n  //return int(sum * 10.); // 1 digit: can we simplify above ?\n  //return int(sum * 1e9); // original. why returning 9 digits ? all good ?\n}\n\nvec4 int2vec4(int v) {\n    return vec4( v/1000, (v%1000)/100, (v%100)/10, v%10 );\n}\n\n#define keyClick(ascii)   int(texelFetch(iChannel3,ivec2(ascii,0),0).x > 0.) \n\n// === store digits in map\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;\n    int n = int( U.x + iResolution.x*U.y ) *4 - 2;\n    //if (max(U.x,U.y)>= 8.) return; else n =  int( U.x + 8.*U.y);\n    //if (max(U.x,U.y)>=16.) return; else n =  int( U.x + 16.*U.y);\n\n   \n    // --- browse with arrow keys\n    int d = int(texelFetch(iChannel0,ivec2(0),0).x);\n    d += keyClick(39) -keyClick(37)  +W.x*( keyClick(40)-keyClick(38) );\n    // --- browse with mouse\n    vec2 M = texelFetch(iChannel0,ivec2(0),0).yz;\n    if (iMouse.z>0.) { \n        ivec2 D = ivec2((iMouse.xy-iMouse.zw+M)/S); \n        d -=  D.x - W.x*D.y;\n        M -= vec2(D)*S;\n    } else M = vec2(0);\n    d = max(d,0);\n    n += d;\n    \n    // --- store digits\n    O =   n==0 ? vec4(0,0,3,-2)                          // 3.\n        : n==1 ? vec4(0,3,-2,1)                          // 3.1\n        : n==2 ? vec4(3,-2,1,4)                          // 3.14\n        : n==3 ? vec4(-2,1,4,1)                          // 3.141\n             : n-d <= MAX_DIGIT ? int2vec4( digit(n-3) ) // fractional, 4 by 4\n             : vec4(-2);  \n\n    if (U==vec2(0)) O.xyz = vec3(d,M);                      // store position\n/*                                              // 1 by 1\n    O.x = float(  n==0 ?  3                     // 3\n                : n==1 ? -2                     // .\n                : n-1 <= MAX_DIGIT ? digit(n-1) // fractional part\n                : 0 );   \n*/\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "keyboard",
                        "id": 33,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/presets/tex00.jpg"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buf A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}