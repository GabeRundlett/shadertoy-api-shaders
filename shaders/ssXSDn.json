{
    "Shader": {
        "info": {
            "date": "1618463110",
            "description": "Lighting based on the probability that a light ray reaches a pixel.",
            "flags": 0,
            "hasliked": 0,
            "id": "ssXSDn",
            "likes": 6,
            "name": "2D Light Coverage - Box",
            "published": 3,
            "tags": [
                "2d",
                "light",
                "box",
                "coverage"
            ],
            "usePreview": 0,
            "username": "oneshade",
            "viewed": 218
        },
        "renderpass": [
            {
                "code": "void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    vec2 uv = (fragCoord - center) / iResolution.y * 4.0;\n    vec3 color = vec3(0.0);\n\n    vec2 b = vec2(1.0 + 0.5 * cos(iTime), 0.5 + 0.25 * sin(iTime));\n\n    uv = abs(uv);\n    if (all(lessThan(uv, b))) color += 1.0;\n    else {\n        vec2 v1 = uv - vec2(b.x * sign(b.y - uv.y), b.y);\n        vec2 v2 = uv - vec2(b.x, b.y * sign(b.x - uv.x));\n        color += acos(dot(v1, v2) / (length(v1) * length(v2))) / 3.14;\n    }\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}