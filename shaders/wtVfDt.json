{
    "Shader": {
        "info": {
            "date": "1721677488",
            "description": "With menger sponge :)",
            "flags": 0,
            "hasliked": 0,
            "id": "wtVfDt",
            "likes": 3,
            "name": "Ray marching screen saver",
            "published": 3,
            "tags": [
                "ray",
                "marching"
            ],
            "usePreview": 0,
            "username": "IgruantyPlay",
            "viewed": 101
        },
        "renderpass": [
            {
                "code": "float sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.)) + min(max(q.x,max(q.y,q.z)), 0.);\n}\nfloat fractal(vec3 p) {\n    float d = sdBox(p, vec3(20.));\n    \n    float s = 2.67;\n    for(int i = 0; i < 8; i++) {\n        vec3 a = mod(p*s, 2.) - 1.;\n        s *= 3.;\n        vec3 r = abs(1. - 3.*abs(a));\n        \n        float da = max(r.x, r.y);\n        float db = max(r.y, r.z);\n        float dc = max(r.z, r.x);\n        float c = (min(da, min(db,dc)) - 1.) / s;\n        \n        d = max(d, c);\n    }\n    return d;\n}\nfloat map(vec3 p) {\n    vec3 q = fract(p) * 2. - 1.0;\n    return fractal(p);\n}\nvec3 getNormal(vec3 p) {\n    float d = map(p);\n    vec2 e = vec2(0.001, 0.0);\n    vec3 n = d - vec3(map(p - e.xyy), map(p - e.yxy), map(p - e.yyx));\n    return normalize(n);\n}\nfloat trace(vec3 o, vec3 r, out float it, out float f) {\n    float t = 0.0;\n    it = 0.;\n    for(int i = 0; i < 128; ++i) {\n        vec3 p = o + r * t;\n        float d = map(p);\n        \n        if(d <= 0.0001) {\n            f = 1. * (1. - (float(it) / 128.));\n            break;\n        }\n            \n        else if(t >= 100.) {\n            f = 0.;\n            break;\n        }\n            \n        t += d * 0.5;\n        it++;\n    }\n    return t;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0));\n    vec3 o = mod(vec3(0.,iTime /10., iTime / 3. - 55.), vec3(10,10,10));\n    \n    float the = iTime / 8.;\n    r.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    \n    float i, f;\n    float t = trace(o, r, i, f);\n    float c = f;\n    float fog = 1. / (1. + t * t * 1.);\n    \n    vec3 fc = vec3(fog, c * fog, c);\n    fragColor = vec4(fc, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}