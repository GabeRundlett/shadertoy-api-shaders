{
    "Shader": {
        "info": {
            "date": "1568739642",
            "description": "Random Shape",
            "flags": 0,
            "hasliked": 0,
            "id": "Wd3GRB",
            "likes": 8,
            "name": "Random Shape",
            "published": 3,
            "tags": [
                "random",
                "shape"
            ],
            "usePreview": 0,
            "username": "aiekick",
            "viewed": 585
        },
        "renderpass": [
            {
                "code": "// Created by Stephane Cuillerdier - Aiekick/2019 (twitter:@aiekick)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via NoodlesPlate (https://github.com/aiekick/NoodlesPlate/releases)\n\n#define AA 2\n//#define ANIMATED\n\nvec2 warp(vec2 p)\n{\n\tp *= 2.7;\n\t\n\tfor (int i = 0; i < 6; i++)\n\t{\n\t\tfloat a = atan(p.x,p.y) * 4.0;\n\t\tfloat l = length(p);\n\t\tp = abs(p);\n#ifdef ANIMATED\n        p -= (sin(iTime-1.7)*0.5+0.5)*0.5;\n#endif\n\t\tp += vec2(cos(a),sin(a)) * l * p.yx;\n\t}\n\t\n\tif (dot(p,p) < 0.)\n\t\tp = abs(fract(p) - 0.5);\n\t\n\treturn p;\n}\n\nfloat shape(vec2 p)\n{\n\tp = warp(p);\n\t\n\treturn length(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    \n    int _AA = max(AA,1); // avoid div by 0 at line 69\n    \n\tfor(int i=0;i<_AA;i++)\n    for(int j=0;j<_AA;j++)\n    {\n        vec2 uv = ((fragCoord + vec2(i,j)) * 2.0 - iResolution.xy)/iResolution.y;\n\n        float a = -1.2;\n        uv *= mat2(cos(a),-sin(a),sin(a),cos(a));\n\n        float k = 0.04;\n        float f = shape(uv);\n        float fx = shape(uv + vec2(k,0.0))-f;\n        float fy = shape(uv + vec2(0.0,k))-f;\n\n        vec3 n = normalize(vec3(fx,0.1,fy));\n\n        float r = abs(f-0.8);\n        if ( r < 1.0)\n        {\n            vec3 col = mix(vec3(0.2,1,0),vec3(0), r);\n            col += pow(abs(n), vec3(5.0));\n            fragColor.rgb += col;\n        }\n        else\n        {\n            fragColor.rgb += vec3(0.0);\n        }\n    }\n\t\n    fragColor.rgb /= float(_AA * _AA);\n\tfragColor.a = 1.0;\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}