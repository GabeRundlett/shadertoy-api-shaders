{
    "Shader": {
        "info": {
            "date": "1718987934",
            "description": "Here is a mandelbulb lit with phong lighting and the colors are based on the current iter / MAX_ITER. \nBest in fullscreen",
            "flags": 0,
            "hasliked": 0,
            "id": "M3dXDH",
            "likes": 1,
            "name": "Iter Color Mandelbulb",
            "published": 3,
            "tags": [
                "3d",
                "raymarching",
                "fractal",
                "phong",
                "math",
                "mandelbulb",
                "lighting",
                "color"
            ],
            "usePreview": 0,
            "username": "spenceryonce",
            "viewed": 75
        },
        "renderpass": [
            {
                "code": "#define MAX_ITER 11.0\n#define MAX_MARCHING_STEPS 100\n#define EPSILON 0.001\n#define MARCHING_END 100.0\n\nvec3 hue2rgb(float hue) {\n    float r = abs(hue * 6.0 - 3.0) - 1.0;\n    float g = 2.0 - abs(hue * 6.0 - 2.0);\n    float b = 2.0 - abs(hue * 6.0 - 4.0);\n    return clamp(vec3(r, g, b), 0.0, 1.0);\n}\n\nfloat lerp(float a, float b, float t) {\n    return a + (b - a) * t;\n}\n\n// Distance estimator for the Mandelbulb\nvec2 mandelbulbDE(vec3 pos, float power) {\n    vec3 z = pos;\n    float dr = 1.0;\n    float r = 0.0;\n    float iter = 0.0;\n\n    for (float i = 0.0; i < MAX_ITER; i++) {\n        r = length(z);\n        if (r > 2.0) break;\n\n        // Convert to polar coordinates\n        float theta = atan(sqrt(z.x * z.x + z.y * z.y), z.z);\n        float phi = atan(z.y, z.x);\n        float zr = pow(r, power - 1.0);\n        dr = zr * dr * power + 1.0;\n\n        // Scale and rotate the point\n        zr = zr * r;\n        z = zr * vec3(sin(theta * power) * cos(phi * power), sin(theta * power) * sin(phi * power), cos(theta * power));\n        z += pos;\n\n        iter++;\n    }\n    return vec2(0.5 * log(r) * r / dr, iter);\n}\n\n// Ray marching to find the surface\nvec2 shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end, float power) {\n    float depth = start;\n    float iter = 0.0;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        vec2 result = mandelbulbDE(eye + depth * marchingDirection, power);\n        float dist = result.x;\n        iter = result.y;\n        if (dist < EPSILON) {\n            return vec2(depth, iter);\n        }\n        depth += dist;\n        if (depth >= end) {\n            break;\n        }\n    }\n    return vec2(end, iter);\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvec3 estimateNormal(vec3 p, float power) {\n    return normalize(vec3(\n        mandelbulbDE(vec3(p.x + EPSILON, p.y, p.z), power).x - mandelbulbDE(vec3(p.x - EPSILON, p.y, p.z), power).x,\n        mandelbulbDE(vec3(p.x, p.y + EPSILON, p.z), power).x - mandelbulbDE(vec3(p.x, p.y - EPSILON, p.z), power).x,\n        mandelbulbDE(vec3(p.x, p.y, p.z + EPSILON), power).x - mandelbulbDE(vec3(p.x, p.y, p.z - EPSILON), power).x\n    ));\n}\n\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye, vec3 lightPos, vec3 lightIntensity, float power) {\n    vec3 N = estimateNormal(p, power);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = reflect(-L, N);\n\n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n\n    if (dotLN < 0.0) {\n        return vec3(0.0, 0.0, 0.0);\n    }\n\n    if (dotRV < 0.0) {\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye, float power) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n\n    vec3 light1Pos = vec3(2.0 * sin(iTime), 2.0, 2.0 * cos(iTime));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n\n    color += phongContribForLight(k_d, k_s, alpha, p, eye, light1Pos, light1Intensity, power);\n\n    vec3 light2Pos = vec3(2.0 * sin(0.5 * iTime), 2.0 * cos(0.5 * iTime), 2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n\n    color += phongContribForLight(k_d, k_s, alpha, p, eye, light2Pos, light2Intensity, power);\n    return color;\n}\n\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\n\nvoid mainImage(out vec4 O, vec2 fc) {\n    vec2 uv = (fc.xy - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 eye = vec3(0.0, 0.0, 5.0);\n    vec3 center = vec3(0.0, 0.0, 0.0);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n\n    mat3 viewToWorld = viewMatrix(eye, center, up);\n    vec3 rayDir = viewToWorld * rayDirection(45.0, iResolution.xy, fc.xy);\n\n    vec2 result = shortestDistanceToSurface(eye, rayDir, 0.0, MARCHING_END, 8.0);\n    float dist = result.x;\n    float iter = result.y;\n    vec3 p = eye + dist * rayDir;\n\n    vec3 baseColor = hue2rgb(iter / MAX_ITER);\n    vec3 lightingColor = phongIllumination(vec3(0.1), vec3(0.7), vec3(0.2), 20.0, p, eye, 8.0);\n    vec3 finalColor = baseColor * lightingColor;\n    O = vec4(finalColor, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}