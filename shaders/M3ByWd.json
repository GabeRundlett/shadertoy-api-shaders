{
    "Shader": {
        "info": {
            "date": "1727881911",
            "description": "its just a green shade shader",
            "flags": 0,
            "hasliked": 0,
            "id": "M3ByWd",
            "likes": 0,
            "name": "green bg",
            "published": 3,
            "tags": [
                "green",
                "background"
            ],
            "usePreview": 0,
            "username": "dackdel",
            "viewed": 32
        },
        "renderpass": [
            {
                "code": "vec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 0.6666666666, 0.3333333333, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat rand(vec2 n) {\n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p) {\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u * u * (3.0 - 2.0 * u);\n\n    float res = mix(\n        mix(rand(ip), rand(ip + vec2(1.0, 0.0)), u.x),\n        mix(rand(ip + vec2(0.0, 1.0)), rand(ip + vec2(1.0, 1.0)), u.x),\n        u.y\n    );\n    return res * res;\n}\n\nconst mat2 mtx = mat2(0.80, 0.60, -0.60, 0.80);\n\nfloat fbm(vec2 p) {\n    float f = 0.0;\n\n    // Reintroduce iTime for animation\n    f += 0.500000 * noise(p + iTime); p = mtx * p * 2.02;\n    f += 0.250000 * noise(p + iTime); p = mtx * p * 2.03;\n    f += 0.125000 * noise(p + iTime); p = mtx * p * 2.01;\n    f += 0.062500 * noise(p + iTime); p = mtx * p * 2.04;\n    f += 0.031250 * noise(p + iTime);\n    f += 0.015625 * noise(p + sin(iTime));\n\n    return f / 0.984375; // Adjusted normalization factor\n}\n\nfloat pattern(vec2 p) {\n    return fbm(p + fbm(p + fbm(p)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    float shade = pattern(uv);\n\n    // Fixed hue for green\n    float hue = 0.3333333;\n    float saturation = 0.9; // Full saturation\n\n    // Option 1: Increase brightness by remapping shade\n    float value = 0.5 + 0.5 * shade; // Map shade to [0.5, 1.0]\n\n    // Option 2: Use power function to brighten (uncomment to use)\n     //float value = pow(shade, 0.5);\n\n    // Option 3: Adjust contrast using smoothstep (uncomment to use)\n    // float value = smoothstep(0.2, 1.0, shade);\n\n    // Ensure value stays within [0, 1]\n    value = clamp(value, 0.0, 1.0);\n\n    // Convert HSV to RGB\n    vec3 color = hsv2rgb(vec3(hue, saturation, value));\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}