{
    "Shader": {
        "info": {
            "date": "1712867624",
            "description": "Miami Vice Sunset - Pls suggest improvement.",
            "flags": 0,
            "hasliked": 0,
            "id": "lcV3Wm",
            "likes": 0,
            "name": "Miami Vice Sunset",
            "published": 3,
            "tags": [
                "sunset",
                "sun",
                "scanline",
                "neon",
                "miami"
            ],
            "usePreview": 0,
            "username": "Astral",
            "viewed": 95
        },
        "renderpass": [
            {
                "code": "// Created by Amir Rezaei\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Credit to inigo quilez - for palm tree\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates from [0, iResolution.xy] to [0, 1]\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Current time for animations\n    float t = iTime;\n\n    // Create a vertical gradient for the background, transitioning from dark blue to light blue\n    vec3 bgColor = mix(vec3(0.0, 0.0, 0.5), vec3(1.0, 0.0, 100), smoothstep(0.2, 0.8, uv.y));\n\n    // Calculate the position and dynamic size of the sun based on time\n    vec2 sunPos = vec2(0.5, 0.5); // Center of the screen\n    float sunSize = 1.2 + 0.1 * sin(t); // Oscillating size of the sun\n    float distToSun = distance(uv, sunPos); // Distance from current pixel to sun center\n    vec3 sunColor = vec3(1.0, 1.0, 1.0) * pow(1.0 - smoothstep(0.050, sunSize, distToSun), 20.0);\n\n    // Calculate palm tree colors influenced by vertical position\n    vec2 palmOffset = uv - vec2(0.3, 0.7);\n    vec3 palmColor = mix(vec3(1.0, 0.3, 0.0), vec3(1.0, 0.9, 0.3), sqrt(uv.y));\n\n    // Define palm tree leaf shapes using a polar coordinate transformation and time-based animations\n    // Large leaves\n    float largeLeafRadius = 0.2 + 0.15 * cos(atan(palmOffset.y, palmOffset.x) * 10.0 + 20.0 * palmOffset.x + 1.2 * sin(0.1 * t));\n    palmColor *= smoothstep(largeLeafRadius, largeLeafRadius + 0.01, length(palmOffset));\n\n    // Medium leaves\n    float mediumLeafRadius = 0.1 + 0.15 * cos(atan(palmOffset.y, palmOffset.x) * 15.0 + 20.0 * palmOffset.x + 1.2 * cos(0.2 * t));\n    palmColor *= smoothstep(mediumLeafRadius, mediumLeafRadius + 0.01, length(palmOffset));\n\n    // Small leaves\n    float smallLeafRadius = 0.02 + 0.15 * cos(atan(palmOffset.y, palmOffset.x) * 15.0 + 20.0 * palmOffset.x + 1.2 * sin(0.3 * t));\n    palmColor *= smoothstep(smallLeafRadius, smallLeafRadius + 0.01, length(palmOffset));\n\n    // Additional leaf details and visual effects\n    float detail = 0.015 + 0.002 * sin(220.0 * palmOffset.y);\n    detail += exp(-60.0 * uv.y);\n    palmColor *= 1.0 - (1.0 - smoothstep(detail, detail + 0.01, abs(palmOffset.x - 0.25 * sin(2.0 * palmOffset.y)))) * (1.0 - smoothstep(0.0, 0.1, palmOffset.y));\n\n    // Combine palm tree with the background and the sun\n    vec3 color = palmColor + bgColor + sunColor;\n\n    // Optional: Add a scanline effect for a retro '80s TV look\n    float scanline = sin(uv.y * 800.0) * 0.12;\n    color -= scanline;\n\n    // Output the final color to the screen\n    fragColor = vec4(color, 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}