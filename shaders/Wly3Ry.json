{
    "Shader": {
        "info": {
            "date": "1579194165",
            "description": "potato",
            "flags": 0,
            "hasliked": 0,
            "id": "Wly3Ry",
            "likes": 14,
            "name": "Day 28 - Alien Cave",
            "published": 3,
            "tags": [
                "clouds",
                "organic",
                "flesh",
                "mdtmjvm"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 570
        },
        "renderpass": [
            {
                "code": "\n// CHECK OUT SECOND VARIANT IN BUFFER B #define\n\n// Cloud technique from lsdlive and Duke!\n// https://www.shadertoy.com/view/wd3GWM\n// https://www.shadertoy.com/view/MljXDw\n\n// I recommend it, it's very fun\n\n// Inspiration from 3d trabaculum from aiekick\n\n// Trabeculum from Frabrice Neyret\n\n// Noise from iq\n\n// pModPolar from hg-sdf\n\n// Triplanar from Shane/nvidia\n\n\n#define mx (20.*iMouse.x/iResolution.x)\n#define my (20.*iMouse.y/iResolution.x)\n\n#define rot(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n\n#define iTime (iTime + 5.4)\n#define VARIANT 2\n\n\n// Trabeculum from FabriceNeyret2 \n// https://www.shadertoy.com/view/4dKSDV\nfloat effect(vec2 uv)\n{\n    float l;\n    vec2 c;\n    vec3 O = vec3(0.39 + sin(iTime*0.5)*0.05);\n    for (int k=0; k<9; k++)\n    { \n     \tc = ceil(uv) + vec2(k-k/3*3,k/3)-2.;\n        c += abs( fract( sin( c.x - c.y/.7 + iTime*0.5   ) ) - 0.5) - uv;\n        l = dot(c,c);        \n        l < O.x  \n            ? O.yz = O.xy, O.x = l       \n            : l < O.y  \n                ? O.z = O.y , O.y = l \n                : l < O.z  \n                    ? O.z = l \n                    : l;\n    }\n    return 1.-2./(1./(O.y-O.x)+1./(O.z-O.x)); // Formula (c) Fabrice NEYRET - BSD3:mention author.\n}\n\n\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch01.html\nfloat tex3D( in vec3 p, in vec3 n ){\n    \n    n = max(abs(n), 0.001);\n    n /= dot(n, vec3(1));\n\tfloat tx = effect( p.yz);\n    float ty = effect( p.zx);\n    float tz = effect( p.xy);\n    return (tx*n.x + ty*n.y + tz*n.z);\n    \n}\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n\n#define pmod(p, x) mod(p, x) - x*0.5\n\n#define dmin(a, b) a.x < b.x ? a : b\n#define dmax(a, b) a.x > b.x ? a : b\n// iq fbm\nfloat noise(in vec3 x) {\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\tf = f * f * (3. - 2. * f);\n\tvec2 uv = (p.xy + vec2(37., 17.) * p.z) + f.xy;\n\tvec2 rg = textureLod(iChannel0, (uv + .5) / 256., 0.).yx;\n\treturn -1. + 2.4 * mix(rg.x, rg.y, f.z);\n}\n\n// Fbm\nfloat fbm(vec3 p) {\n\treturn noise(p * .06125) * .5 + noise(p * .125) * .25 + noise(p * .25) * .125;\n}\n#define modDist 7.\nvec2 map(vec3 p){\n\tvec2 d = vec2(10e10);\n    vec3 q = p;\n\tp.xz = pmod(p.xz, modDist);\n    \n    vec3 N = normalize(p);\n    \n    p.xz += (0.1 + sin(iTime*3. + p.y)*0.1)*N.xz * smoothstep(0.35,1.,exp(-abs(q.y*0.25)))*exp(abs(p.y)); \n    // ^ just some function graphing\n    for(float i = 0.; i < 6.; i++){\n    \tp = abs(p);\n    \tp.y -= 2.4;\n        p.xy *= rot(3.4 - exp(-i*5. )*0.14);\n        #if VARIANT==2\n        if(i < 5.){\n        \tp.z -= 1.2;\n        }\n        #else \n        \tp.z -= 1.1;\n        \n        #endif\n        p.y -= 1.35;\n        p.xz *= rot(0.7);\n    }\n    \n    // ^ IFS\n    N = normalize(p);\n    \n    float dS = length(p) - 1.;\n    \n    float trabA = tex3D(p*5., N); \n    float trabB = tex3D(p*10., N);\n\n    d = dmin(d, vec2(dS, 1.));\n    d = dmax(d, vec2(-(dS - 0.5), 1.));\n    d -= trabA*0.34;\n    \n    d = dmin(d, vec2(dS, 2.));\n    //d = dmin(d, vec2(q.y + 6. - trabA*0.8, 1.));\n    //d.x = length(p) - 1.+ fbm(p*10.)*0.1;\n    //return d;\n    d.x -= fbm(q*9.)*0.1;\n    \n    //d.x -= 0.1 + sin(iTime + p.y)*0.1;\n    d.x *= 0.8;\n    return d;\n}\nvec3 getRd(vec3 ro, vec3 lookAt, vec2 uv){\n\tvec3 dir = normalize(lookAt - ro);\n\tvec3 right = normalize(cross(vec3(0,1,0), dir));\n\tvec3 up = normalize(cross( dir, right));\n    return dir + uv.x*right + uv.y*up;\n}\n\nvec3 getNormal(vec3 p){\n\tvec2 t = vec2(0.001,0);\n    return normalize(\n    \tmap(p).x - vec3(\n        \tmap(p - t.xyy).x,\n        \tmap(p - t.yxy).x,\n        \tmap(p - t.yyx).x\n        )\n    );\n}\n// cool sin - does nothing\nfloat csin(float i, float p){\n    return sin(i);\n    p = 1.;\n\tfloat ni = mod(i/(2.*PI), 1.);\n    ni = pow(ni, p);\n}\n\nvec3 glow = vec3(0);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(-0.,-0.,-0.);\n    ro.y += sin(iTime*0.24 + sin(iTime*0.5)*0.8)*1.;\n    //ro.x += modDist * 0.5;\n    float T = iTime*0.4;\n    ro.z += 1.7;\n    ro.z += T;\n    ro.x += csin( 1.*(T/modDist)*(PI) + PI, 1. )*modDist*2.;\n    ro.x += csin( (0.5*T/modDist)*(PI), 1. )*modDist/4.;\n    vec3 lookAt = ro + vec3(0.,0,5);\n    lookAt.xz -= csin((T/modDist)*PI + csin(iTime, 1.)*0.25 + 0.5, 1. )*modDist*0.2;\n     \n    vec3 rd = getRd(ro, lookAt, uv);\n    \n    \n    \n\t// local density/distance\n\tfloat ldensity = 0.;\n\n\t// accumulation color & density\n\tvec3 bg = vec3(.16, .12, .22)*0.6;\n\tvec4 sum = vec4(bg, 0.);\n   \n   \t// total color\n   \tvec3 tc = vec3(0.);\n   \n    vec2 d = vec2(10e9);\n    vec3 p = ro; float t = 0.; vec3 N;\n    #define iters 80\n    for (int i = 0; i <= iters; i++){\n        if((d.x<=0.0001*t) || (t > 100.) || (sum.a > 1.) ){\n\t\t   break;\n        }\n        \n    \td = map(p);\n        \n        d.x *= 0.7;\n        glow += exp(-d.x*1.)*vec3(1.);\n        //glow += d.x;\n        \n\t\t// compute local density and weighting factor \n\t\tconst float h = .06;\n\t\tldensity = (h - d.x) * step(d.x, h);\n\t\tvec4 c;\n        \n\t\t#define pal(t,x,y,i,z) (t + x*sin(y*i + z))\n\t\tc.rgb = pal(0.5, 2.5, vec3(0.6,0.1,0.2) , 0.5- d.y,7.5 );\n        //c.rgb =vec3(1.);\n        //col.rgb = clamp(col.rgb, 0., 1.);\n\t\tc.a = ldensity;\n        c.rgb *= c.a;\n\t\tsum += (1. - sum.a) * c;\n\n\t\t// from duke/las\n\t\tsum.a += .026;\n\n      \td.x = max(d.x, 0.02);\n        \n        t += d.x;\n    \tp = ro + rd*t;\n    }\n    \n    \n    \n    N = getNormal(p);\n    vec3 L = normalize(vec3(1));\n    vec3 H = normalize(L - rd);\n    float diff = max(dot(N, L), 0.);\n    float fres = pow(1. - max(dot(N, -rd), 0.), 5.);\n    float spec = pow(max(dot(N, H),0.), 5.); \n    \n    col += sum.xyz*1.;\n    \n    float s = (1. - sum.w);\n    col -= N*s*0.7;\n    col -= glow*0.02*pal(0.6,0.8,vec3(0.7,0.5,0.8),0.8,0.6)*0.09;\n    \n    //col *= 0.9;\n    col = pow(col, mix(vec3(1),vec3(0.45), smoothstep(0., 1., t*0.03)));\n    \n    \n    \n    uv = fragCoord/R;\n    uv -= 0.5;\n    col *= 1. - mix(0.,1., pow(smoothstep(0.,1.,length(uv))*0.3, 0.6));\n    \n    fragColor = vec4(col,1.0);\n}\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define R (iResolution.xy)\n#define T(uv) texture(iChannel0, uv/R)\n#define PI acos(-1.)\n#define tau (2.*PI)\n\nfloat r11(float i){return fract(sin(i*8124.124124)*123.2412);}\nvec3 r13(float i){return vec3(r11(i),r11(i + 0.2),r11(i + 0.4));}\nfloat r11c(float i){return fract(sin(i*8124.124124));} // cheaper\n\n#define pmod(p, x) mod(p, x) - x*0.5\n\n#define dmin(a, b) a.x < b.x ? a : b\n#define dmax(a, b) a.x > b.x ? a : b\n#define zoom 10.\n\nfloat sdBox(vec3 p, vec3 s){\n\t p = abs(p) - s;\n\treturn max(p.x, max(p.y, p.z));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}