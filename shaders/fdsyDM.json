{
    "Shader": {
        "info": {
            "date": "1642174162",
            "description": "My attempt at a rectangle profile generic helix spiral - distance is far from exact  ",
            "flags": 0,
            "hasliked": 0,
            "id": "fdsyDM",
            "likes": 7,
            "name": "GenericHelixSpiral",
            "published": 3,
            "tags": [
                "spiral"
            ],
            "usePreview": 0,
            "username": "Del",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "// my generic helix spiral function - distance is not exact, but it may be good enough for your needs... :)\n// currently thinking about how to cap the top and bottom properly\n\n#define PI 3.14159265\n#define TAU 6.283185\n\nmat2 rot(float a)\n{\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat sdBox2D( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nfloat remap(float s, float a1, float a2, float b1, float b2)\n{\n    return b1 + (s-a1)*(b2-b1)/(a2-a1);\n}\n\nfloat smax(float a,float b,float k)\n{\n    k = -k;\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n// pass in a negative coils value to reverse direction...\n// better clamping...\n\n// pass in a negative coils value to reverse direction...\nfloat sdHelixSpiral(vec3 p, float rad1,float rad2, float height, float coils, float pd,float ph)\n{\n    float rounding = 0.1;\n    float dir = sign(coils)*0.5;\n    coils=abs(coils);\n\n    coils =  coils / (height/PI);\n\n    float vv = clamp(p.z, -height*0.5, height*0.5);\n    vv = remap(vv,-height*0.5, height*0.5,rad2,rad1);\n    vec3 pp = vec3(normalize(p.xy)*vv, p.z);\n    float d1 = distance(p, pp);\n\tfloat d2 = asin(sin(p.z*coils + dir*atan(p.x,p.y)))/coils;\n    float d=sdBox2D(vec2(d1,d2), vec2(pd,ph))-rounding;\n\n    // hard clamp top and bottom\n    float t = abs(p.z) - height*0.5;\n    d = smax(d,t,0.5);\n    return d;\n}\n\n\n// old version with manky clamping\n/*float sdHelixSpiral(vec3 p, float rad1,float rad2, float height, float coils, float pd,float ph)\n{\n    float rounding = 0.1;\n    float dir = sign(coils)*0.5;\n    coils=abs(coils);\n\n    coils =  coils / (height/PI);\n\n    float vv = clamp(p.z, -height*0.5, height*0.5);\n    float vv1 = remap(vv,-height*0.5, height*0.5,rad2,rad1);\n    \n    vec3 pp = vec3(normalize(p.xy)*vv1, vv);\n    float d1 = distance(p, pp);\n\tfloat d2 = asin(sin(p.z*coils + dir*atan(p.x,p.y)))/coils;\n    float d=sdBox2D(vec2(d1,d2), vec2(pd,ph))-rounding;\n    return d;\n}\n*/\n\n\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n\nfloat map( in vec3 pos )\n{\n    pos.xz*=rot(fract(iTime*0.24)*6.28);\n    \n    float ns1 = 0.5+sin(iTime*1.1)*0.5;\n    float ns2 = 0.5+sin(iTime*0.7)*0.5;\n    \n    float rad1 = 1.0+ns1*2.0;  // top rad\n    float rad2 = 4.0;         // bottom rad\n    float height = 4.0+(3.0*ns2);\n    float pd = 0.25;           // extrude depth\n    float ph = 0.075;           // extrude height\n    float coils = 5.0;        // (negative values will reverse spiral direction)\n    float d1 = sdHelixSpiral(pos.xzy, rad1,rad2,height, coils, pd, ph);\n    \n    return d1*0.7;    // distance is not exact due to massive deformation ;)\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.001;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n\n\nmat3 lookAtMatrix(vec3 from, vec3 to) {\n    vec3 forward = normalize(to - from);\n    vec3 right = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));\n    vec3 up = cross(right, forward);\n    return mat3(right, up, forward);\n}\nfloat raycast(vec3 rayOrigin, vec3 rayDirection) {\n    float maximumDistance = 30.0;\n    float t = 0.0;\n    for (int i = 0; i < 150; i++) {\n        if (t > maximumDistance) {\n            break;\n        }\n        vec3 currentPosition = rayOrigin + rayDirection * t;\n        float d = map(currentPosition);\n        if (d < 0.0001) {\n            return t;\n        }\n        t += d;\n    }\n    return 0.0;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tfloat angle = PI*0.4;\n\tvec3 rayOrigin = vec3(9.0 * cos(angle), 6.0, 9.0 * sin(angle));\n    vec3 targetPosition = vec3(0.0);\n    mat3 cameraTransform = lookAtMatrix(rayOrigin, targetPosition);\n    ivec2 sampleCount = ivec2(1.0, 1.0);\n\n    vec2 uv = fragCoord;\n    uv = uv / iResolution.xy;\n    uv = (uv * 2.0) - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 rayDirection = normalize(vec3(uv, 1.5));\n    rayDirection = cameraTransform * rayDirection;\n    float t = raycast(rayOrigin, rayDirection);\n    vec3 color = vec3((1.0-abs(uv.y))*0.1);\n    \n    if (t > 0.0)\n    {\n        vec3 position = rayOrigin + rayDirection * t;\n        vec3 n = calcNormal(position);\n        \n            vec3 mycol = vec3(0.58,0.41,0.24);\n            vec3 pos = rayOrigin + t*rayDirection;\n            vec3 nor = n;\n            \n            vec3 dir = normalize(vec3(1.0,0.7,0.0));\n\t        vec3 ref = reflect(rayDirection, nor);\n\t        float spe = max(dot(ref, dir), 0.0);\n\t        vec3 spec = vec3(1.0) * pow(spe, 64.);\n            float dif = clamp( dot(nor,dir), 0.05, 1.0 );\n            color =  mycol*dif;\n            color+=spec;\n    }\n\tfragColor = vec4(sqrt(color), 1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}