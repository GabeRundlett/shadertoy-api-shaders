{
    "Shader": {
        "info": {
            "date": "1713112818",
            "description": "rewrite of an effect (by me) found at http://sedcore.eu.org/small/ (dig for \"eclipse\" in there)\n\nNot exactly the same effect. In the original, computation is sequential.\nSeems impossible to do with the shader paradigm.",
            "flags": 0,
            "hasliked": 0,
            "id": "MfyGR3",
            "likes": 9,
            "name": "eclipse (kind of)",
            "published": 3,
            "tags": [
                "2d",
                "eclipse"
            ],
            "usePreview": 0,
            "username": "sedcore",
            "viewed": 120
        },
        "renderpass": [
            {
                "code": "/* sedcore - eclipse - 2024-04 - public domain\n * rewrite of an effect (by me) found at http://sedcore.eu.org/small/ (dig for \"eclipse\" in there)\n *\n * Not exactly the same effect. In the original, computation is sequential.\n * Seems impossible to do with the shader paradigm.\n */\n\n/* hash11 from https://www.shadertoy.com/view/4djSRW */\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n/* ign from https://www.shadertoy.com/view/XlGcRh */\nfloat ign(vec2 v)\n{\n    vec3 magic = vec3(0.06711056, 0.00583715, 52.9829189);\n    return fract(magic.z * fract(dot(v, magic.xy)));\n}\n\n#define CIRCLE (0.225/2.)\n#define DELTA_POINT 0.05\n#define MOON .5\n#define SUN (.5+.1)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (2.*fragCoord-iResolution.xy) / iResolution.y;\n  /* loop of 8s */\n  float t = mod(iTime,8.);\n  /* noise moves at 25 fps */\n  vec2 noise = vec2((ign(vec2(floor(t*25.),0.))-.5)/10.,(ign(vec2(floor(t*25.),1.))-.5)/10.);\n  uv+=noise;\n  vec2 moon_pos = vec2(-1.+t/8.*2.);\n  vec2 min = DELTA_POINT * floor((uv - CIRCLE - .05) / DELTA_POINT);\n  vec2 max = DELTA_POINT * floor((uv + CIRCLE + .05) / DELTA_POINT);\n  float col = 0.;\n  for (float x = min.x; x <= max.x; x += DELTA_POINT)\n  for (float y = min.y; y <= max.y; y += DELTA_POINT) {\n    vec2 cur = vec2(x,y);\n    if (length(cur) > SUN) continue;\n    float intensity = clamp(length(cur-moon_pos)-MOON,0.,1.);\n    float l = length(uv-cur);\n    /* here also noise moves at 25 fps */\n    if (l < CIRCLE)\n      if (hash11(x+10. + (y+10.) * 100. + floor(t*25.) * 1000.) > 0.2)\n        col += clamp(1.-l/CIRCLE,0.,1.) * intensity;\n  }\n  fragColor = vec4(col,col,col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}