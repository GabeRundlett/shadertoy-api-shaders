{
    "Shader": {
        "info": {
            "date": "1710926867",
            "description": "ValueNoise ",
            "flags": 0,
            "hasliked": 0,
            "id": "XXBSRd",
            "likes": 1,
            "name": "ValueNoise01",
            "published": 3,
            "tags": [
                "valuenoise"
            ],
            "usePreview": 0,
            "username": "kenshin",
            "viewed": 151
        },
        "renderpass": [
            {
                "code": "#define T iTime * .2\n\nfloat N21(vec2 p) {\n    return fract(sin(p.x*13.21+p.y*6574.)*5647.);\n}\n\nfloat smoothValueNoise(vec2 uv)\n{\n    vec2 gv = fract(uv);\n    gv = gv * gv * (3. - 2. * gv);\n    vec2 id = floor(uv);\n    float bl = N21(id);\n    float br = N21(id + vec2(1., .0));\n    float tl = N21(id + vec2(.0, 1.));\n    float tr = N21(id + vec2(1., 1.));\n    float b  = mix(bl, br, gv.x);\n    float t  = mix(tl, tr, gv.x);\n    float c  = mix(b, t, gv.y);\n    return c;\n}\n\nfloat smoothNoise2(vec2 uv, int layers)\n{\n    float c = .0;\n    float layer = .0;\n    float count = .0;\n    for(int i = 0; i < layers; i++)\n    {\n        layer = pow(2., float(i));\n        count += 1. / layer;\n        c += smoothValueNoise(uv * 4. * layer) / layer;\n    }\n    \n    c /= count;\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5)/iResolution.y;\n    uv += vec2(sin(T), cos(T));\n    float c = smoothNoise2(uv, 10);\n    vec3 col = vec3(c);\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}