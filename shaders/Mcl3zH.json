{
    "Shader": {
        "info": {
            "date": "1702790428",
            "description": "Multivoice chiptune synthesizer\nMusic: Great Fairy Fountain - by Koji Kondo\n\nupdate: added 2nd half of song and decay to main melody",
            "flags": 40,
            "hasliked": 0,
            "id": "Mcl3zH",
            "likes": 9,
            "name": "Great Fairy Fountain (chiptune)",
            "published": 3,
            "tags": [
                "sound",
                "chiptune"
            ],
            "usePreview": 0,
            "username": "aerowave",
            "viewed": 287
        },
        "renderpass": [
            {
                "code": "// Music: Great Fairy Fountain - by Koji Kondo\n\n// Main code is in Common tab\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    float height = texture(iChannel0, vec2(uv.x, 0.0)).x;\n    float alt = texture(iChannel0, vec2(uv.x + 1.0 / iResolution.y, 0.0)).x;\n    \n    if ((abs(height - uv.y) < 1.0 / iResolution.y) || (height > uv.y && alt < uv.y) || (height < uv.y && alt > uv.y))\n    col = vec3(1);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "const float TWO_PI = asin(1.0) * 4.0;\n\n// simple sawtooth is used as base for all chip waves\nfloat sawtooth(float t) {return mod(t, 1.0);}\nfloat pulseWidth(float t, float width) {return float(sawtooth(t) < 0.25);}\nfloat squareWave(float t) {return pulseWidth(sawtooth(t), 0.5);}\nfloat triangleWave(float t) {return abs(2.0 * sawtooth(t) - 1.0);}\n\n// note refers to the number of semitones away from middle c\nfloat getFreq(int note) {\n    return 440.0 * pow(2.0, float(note - 9) / 12.0);\n}\n\nfloat voice1(float time) {\n    int[] notes = int[](\n        33,26,22,19,31,26,22,19,30,26,22,19,31,26,22,19,\n        31,24,21,17,29,24,21,17,28,24,21,17,29,24,21,17,\n        29,22,19,16,28,22,19,16,27,22,19,16,28,22,19,16,\n        28,21,17,14,26,21,17,14,25,21,17,14,26,21,17,14,\n        33,26,22,19,31,26,22,19,30,26,22,19,31,26,22,19,\n        34,27,24,18,33,27,24,18,32,27,24,18,33,27,24,18,\n        36,26,22,19,34,26,22,19,33,26,22,19,34,26,22,19,\n        33,22,19,16,31,22,19,16,29,22,19,16,28,22,19,16\n    );\n\n    float prog = mod(time * 5.0, 1.0);\n\n    float phase = time * getFreq(notes[int(time * 5.0) % notes.length()]);\n\n    return pulseWidth(phase, 0.25) * (1.0 - prog);\n}\n\nfloat voice2(float time) {\n    int br = -99999; // silence\n\n    int[] notes = int[](\n        -14,-2,2,9,br,br,br,br,-14,2,9,7,12,9,7,2,\n        -15,-3,0,7,br,br,br,br,-15,-3,7,5,12,7,5,0,\n        -17,-5,-2,5,br,br,br,br,-17,-5,5,4,7,4,0,-2,\n        -19,-7,-3,4,br,br,br,br,-19,-7,4,2,7,5,12,10,\n        -14,-2,2,9,br,br,br,br,-14,2,9,7,14,9,7,2,\n        -15,-3,0,12,br,br,br,br,-10,2,12,9,15,14,12,9,\n        -17,-2,2,10,br,br,br,br,-17,-2,10,9,12,10,7,2,\n        -12,0,7,10,br,br,br,br,-12,0,10,7,16,14,19,16\n    );\n    \n    \n    int note = notes[int(time * 5.0) % notes.length()];\n    if (note == br) return 0.0;\n    \n    float prog = mod(time * 5.0, 1.0);\n    \n    float phase = time * getFreq(notes[int(time * 5.0) % notes.length()]);\n    \n    return sawtooth(phase);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "const float VOLUME = 0.1;\n\nvec2 mainSound( int samp, float time ) {\n    return vec2(voice2(time) + voice1(time)) * VOLUME;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "// stores height values for wave render\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.y > 1.0) return;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    if (uv.x < 0.5) {\n        uv.x *= 2.0;\n        col = vec3(voice1(iTime + uv.x * iTimeDelta / 4.0));\n    } else {\n        uv.x = 2.0 * (uv.x - 0.5);\n        col = vec3(voice2(iTime + uv.x * iTimeDelta / 4.0));\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}