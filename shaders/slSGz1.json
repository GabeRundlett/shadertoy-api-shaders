{
    "Shader": {
        "info": {
            "date": "1623338157",
            "description": "potatester",
            "flags": 32,
            "hasliked": 0,
            "id": "slSGz1",
            "likes": 21,
            "name": "Day 539",
            "published": 3,
            "tags": [
                "design",
                "poster",
                "mdtmjvm",
                "acidgraphics"
            ],
            "usePreview": 0,
            "username": "jeyko",
            "viewed": 494
        },
        "renderpass": [
            {
                "code": "float sdBox(vec2 c, vec2 s){\n    c = abs(c) - s; return max(c.x,c.y);\n}\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define pmod(p,a) mod(p,a) - 0.5*a\n\n\n// cyclic noise by nimitz. i have a tutorial on it on shadertoy\n\nfloat noise(vec3 p_){\n    float n = 0.;\n    float amp = 1.;\n    vec4 p = vec4(p_,11.);\n    p.xy *= rot(1.4);\n    p.x *= 3.;\n    for(float i = 0.; i < 6.; i++){\n        p.yz *= rot(.5);\n        p.xz *= rot(2.5 + i);\n        p.wy *= rot(2.5-i);\n        p += cos(p*1. + vec4(3,2,1,1.) )*amp*.5;\n        n += dot(sin(p),cos(p))*amp;\n    \n        amp *= 0.7;\n        p *= 1.5;\n    }\n    \n    n = sin(n*2.);\n    return n;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    fragCoord += 650.*noise(vec3(uv*0.5,5.))/iResolution.xy;\n    col = texture(iChannel0,fragCoord/iResolution.xy).xyz;\n\n    col += smoothstep(0.,5.,max(noise(vec3(uv*2.,5.)) - 0.5,0.))*0.25;\n    \n    \n    float n1d = texelFetch(iChannel2,ivec2(mod(fragCoord + vec2(float(iFrame),0.),256.)),0).x;\n    vec3 n  = texelFetch(iChannel2,ivec2(mod(fragCoord + n1d*200. ,256.)),0).xyz;\n    \n    \n    //C = smoothstep(0.,1.,C);z\n    \n    //col.xyz = pow(max(col.xyz,0.), vec3(0.55) + n*0.1);\n    \n    \n    \n    col = pow(max(col,0.),vec3(0.4545));\n\n    col.xyz += smoothstep(1.,0.,length(col))*n*0.15;\n    \n    col.xyz -= smoothstep(0.,1.,length(col))*n*0.05;\n    \n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "float sdBox(vec2 c, vec2 s){\n    c = abs(c) - s; return max(c.x,c.y);\n}\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define pmod(p,a) mod(p,a) - 0.5*a\n\n\nvec4 n14(float f){ return texture(iChannel0,vec2(mod(floor(f),256.),floor(f/256.))/256.); }\n\n\nfloat eass(float p, float g) {\n    float s = p*0.45;\n    for(float i = 0.; i < g; i++){\n    \ts = smoothstep(0.,1.,s);\n    }\n    return s;\n}\n\nfloat text(vec2 p, float[8] chars, float spacing, float s, bool isAbs, float absWidth, float opacity, bool scrobble) {\n\tp *= s;  \n    \n    p.x *= 1. - spacing;\n    vec2 id = floor(p*8.*2.);\n    p = mod(p,1./16.);\n    p.x = p.x/(1. - spacing) + 1./16./8.;\n    float char = chars[int(id.x) ];\n    char -= 32. ;\n    if(scrobble)\n        char += floor(15. * n14(id.x + (iTime + sin(id.x))*24.).y*pow(abs(sin(iTime + id.x*0.2)),14.) ) ;\n    \n    if(scrobble)\n        char += 0.*floor(15. * n14(id.x + (iTime + sin(id.x))*24.).y * (2. - 1.)* (1. - eass((iTime - + id.x*1./16. - 3.)*1.,3.)) ) ;\n    \n    float t;\n    if(abs(id.y) < 1. && id.x >= 0. && id.x < 8.  && char < 200.){\n        vec4 letter = texture(iChannel3,p + vec2(mod(char,16.),-floor(char/16.) )/16.);\n        t = letter.w - opacity;\n        if(abs(p.x-1./16./2.)>1./16./2.)\n            t = 10e4;\n    \n        t /= s*10.1;\n    } else {\n        t = 10e5;\n    \n\t }\n    if (isAbs)\n        t = abs(t) - absWidth;\n    return t;\n}\n\n// cyclic noise by nimitz. i have a tutorial on it on shadertoy\n\nfloat noise(vec3 p_){\n    float n = 0.;\n    float amp = 1.;\n    vec4 p = vec4(p_,-(iTime + sin(iTime))*0.2);\n    for(float i = 0.; i < 6.; i++){\n        p.yz *= rot(.5);\n        p.xz *= rot(2.5 + i);\n        p.wy *= rot(2.5-i);\n        p += cos(p*1. + vec4(3,2,1,1.+iTime*1.5) )*amp*.5;\n        n += dot(sin(p),cos(p))*amp;\n    \n        amp *= 0.7;\n        p *= 1.5;\n    }\n    \n    //n = sin(n*1.);\n    return n;\n}\n\n\nfloat noiseGrid(vec3 p_){\n    float n = 0.;\n    float amp = 1.;\n    vec4 p = vec4(p_,11.);\n    for(float i = 0.; i <2.; i++){\n        p.yz *= rot(.5);\n        p.xz *= rot(2.5 + i);\n        p.wy *= rot(2.5-i);\n        p += cos(p*1. + vec4(3,2,1,1.) )*amp*.5;\n        n += dot(sin(p),cos(p))*amp;\n    \n        amp *= 0.5;\n        p *= 1.5;\n    }\n    \n    //n = sin(n*1.);\n    return n;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 c = vec3(0.97,0.01,0.04)*0.7;\n    \n\n    uv.x += 0.025;\n\n    {\n        // planet\n        vec2 p = uv;\n        \n        p.y -= 0.;\n        p.x += 0.35;\n        \n        float bd = length(p) - 0.2;\n        \n        \n        float d = abs(bd);\n        \n        //bd = bd + smoothstep(0.001,0.,bd)*smoothstep(-0.2,0.2,p.x)*texture(iChannel0,p).x;\n        \n        d = -bd;\n        \n        float bdb = sdBox(p,vec2(0.44));\n        \n        col = mix(col,c,smoothstep(fwidth(uv.y),0.,bdb)*smoothstep(fwidth(uv.y),0.,d)*smoothstep(0.0,0.04,smoothstep(-0.3,2. - noise(vec3(uv*4.,iTime))*0.6,d)*texture(iChannel0,p*0.3).x*2.));\n        \n        col = mix(col,c,smoothstep(fwidth(uv.y),0.,abs(bdb) - 0.001));\n            \n        \n        //d =  abs(bd);\n        \n        //col = mix(col,c,smoothstep(fwidth(uv.y),0.,d));\n        \n    \n    }\n    \n    uv.x -= 0.05;\n        {\n        // CIRCS\n        vec2 p = uv;\n        p -= vec2(0.5,-0.4);\n        float sc = 2.;\n        p *= sc;\n        \n        p.x = abs(p.x) - 0.5;\n        \n        float d = 10e5;\n        \n        #define xor(a,b,c) min(max(a,-(b) + c),max(b,-(a)))\n        for(float i = 0.; i < 7.; i++){\n            //d = min(d,abs(length(p - vec2(i*0.1,0.)) - 0.1));\n            d = xor(d,abs(length(p - vec2(i*0.07,0.)) - 0.04*(0.5 + 0.5*sin(i+iTime*3. + sin(iTime + i)))), (8.-i)/150.);\n        \n        }\n        d -= 0.005;\n        d /= sc;\n        col = mix(col,c,smoothstep(fwidth(uv.y),0.,d));\n    }\n    \n    \n    {\n        // GRAD LINE\n        vec2 p = uv;\n        \n        p.y -= 0.34;\n        p.x -= 0.5;\n        \n        float bd = sdBox(p - vec2(0,0.05),vec2(0.3,0.05));\n        \n        \n        float d = abs(bd);\n        \n        //bd = bd + smoothstep(0.001,0.,bd)*smoothstep(-0.2,0.2,p.x)*texture(iChannel0,p).x;\n        \n        d = bd;\n        col = mix(col,c,smoothstep(fwidth(uv.y),0.,d)*smoothstep(0.0,0.24 + sin(iTime)*0.1,smoothstep(-0.3,2.,p.x)*texture(iChannel0,p*0.3).x*2.));\n        d =  abs(bd);\n        \n        col = mix(col,c,smoothstep(fwidth(uv.y),0.,d));\n        {\n            vec2 q = p;\n            q.y += 0.065;\n            float qd = sdBox(q,vec2(0.3,0.01));\n            float md = 0.02;\n            float id = floor(q.x/md);\n            q.x = pmod(q.x,md);\n            q.x += sin(id + iTime)*md*0.5;\n            //qd = max(qd,-abs(q.x) + 0.01);\n            //p.x = pmod(p.x,0.2);\n            //bd = xor(bd,abs(length(p) - 0.03) - 0.001,0.02);\n            col = mix(col,c,smoothstep(fwidth(uv.y),0.,qd));\n        \n        }        \n        {\n            vec2 q = p;\n            q.y += 0.435;\n            float qd = sdBox(q,vec2(0.3,0.01));\n            float md = 0.02;\n            float id = floor(q.x/md);\n            q.x = pmod(q.x,md);\n            q.x += sin(id + iTime)*md*0.5;\n            //qd = max(qd,-abs(q.x) + 0.01);\n            //p.x = pmod(p.x,0.2);\n            //bd = xor(bd,abs(length(p) - 0.03) - 0.001,0.02);\n            col = mix(col,c,smoothstep(fwidth(uv.y),0.,qd));\n        \n        }\n        \n        \n        // MIDLINE\n    \n    }\n    {\n        // text\n        float sc = 1.4;\n        vec2 p = uv - vec2(0.2,0.16);\n        p *= sc;\n        //float iters = 5.*(sin(iTime*4.)*0.5 + 0.5);\n        float iters = 5.;\n        \n        for(float i = 0.; i < iters; i ++){\n            p.y += 0.06;\n            float t;\n            \n            t = text(p, float[8](135.,130.,121.,119.,120.,132.,117.,130.), -0.5 , 0.4 , true, 0., 0.5 , false);\n            \n            if(i == 0.){\n                t = text(p, float[8](135.,130.,121.,119.,120.,132.,117.,130.), -0.5 , 0.4 , false, 0., 0.5 , false);\n            } else {\n            \n            }\n            t -= 0.004;\n            t /= sc;\n            if(mod(-iTime*4. + i,5.) > 1. || i == 0.)\n                col = mix(col,c,smoothstep(fwidth(uv.y),0.,t));\n        }\n                \n    }\n    {\n        // dots\n        vec2 p = uv;\n        p -= vec2(0.28,-0.25);\n        float d = 10e5;\n        for(float i = 0.; i < 74.; i++){\n            float k = i*0.2;\n            vec2 o = vec2(\n                cos(k + iTime)*cos(k*1.5 - iTime), sin(k*1. + iTime)\n            )*0.06;\n            \n            d = min(d,length(p - o) - 0.002);\n        }\n        col = mix(col,c,smoothstep(fwidth(uv.y),0.,d));\n        \n    }\n    {\n        // circs\n        vec2 p = uv;\n        p -= vec2(0.438,-0.25);\n        float d = 10e5;\n        float iters = 6.;\n        for(float i = 0.; i < iters; i++){\n            \n            vec2 q = p;\n            //d = min(d,length(p - o) - 0.002);\n            q.xy *= rot(0.1 + i + iTime+ sin(iTime + i));\n            \n            d = length(q) - 0.07*i/iters;\n            d = abs(d) - 0.00;\n            \n            d = max(d,-abs(q.y) + 0.01);\n            d -= 0.001;\n            col = mix(col,c,smoothstep(fwidth(uv.y),0.,d));\n    \n        }\n    {\n        // dots\n        vec2 p = uv;\n        p -= vec2(0.11,-0.25*0.);\n        float md = 0.025;\n        p.y += md*0.5;\n        vec2 id = floor(p/md);\n        p = pmod(p,md);\n        if(abs(id.x) < 2. && abs(id.y) < 18.){\n                float d = abs(p.x);\n        \n                if(noise(vec3(id,iTime*0.5)) < 0.2)\n                    d = min(d,length(p) - md*0.25);\n                \n                col = mix(col,c,smoothstep(fwidth(uv.y),0.,d));\n        }\n        \n        \n        }\n    }\n\n    {\n        // grid\n        vec2 p = uv;\n        p -= vec2(0.655,-0.25);\n        float md = 0.015;\n        vec2 res = vec2(9,5);\n        \n        float db = sdBox(p - vec2(0.5,0.)*md,(res - 0.5)*md);\n        \n        float n = noiseGrid(vec3(p.xy*10.,iTime*2.5));\n        p += n*0.01*smoothstep(0.0,-0.05,db);\n        p.y += md*0.5;\n        vec2 id = floor(p/md);\n        float fw = fwidth(p.x);\n        p = pmod(p,md);\n        p = abs(p) - md*0.5;\n        float d = abs(p.x);\n        d = min(d,abs(p.y));\n        d = max(d,db);\n        d = min(d,abs(db));\n        d -= 0.001;\n        col = mix(col,c,smoothstep(fw,0.,d));\n        \n        \n    }\n\n\n\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 3,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 14854,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}