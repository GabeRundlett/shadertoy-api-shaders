{
    "Shader": {
        "info": {
            "date": "1553016304",
            "description": "HadCRUT 4.6.0 1850 to 2018 (https://www.climate-lab-book.ac.uk/2018/warming-stripes/)\nWarming stripes concept by Ed Hawkins (https://twitter.com/ed_hawkins)",
            "flags": 40,
            "hasliked": 0,
            "id": "3sBSRW",
            "likes": 13,
            "name": "170 years of Global Warming",
            "published": 3,
            "tags": [
                "tunnel",
                "stripes",
                "warming",
                "xr"
            ],
            "usePreview": 0,
            "username": "iapafoto",
            "viewed": 676
        },
        "renderpass": [
            {
                "code": "// Created by sebastien durand - 03/2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n//---------------------------------------------------\n// This Shader is a fork of Shane shader\n// [Shane] Industrial Tunnel : https://www.shadertoy.com/view/4tKXzV\n//---------------------------------------------------\n//\n// Warming stripes concept by Ed Hawkins\n// https://twitter.com/ed_hawkins\n// https://www.climate-lab-book.ac.uk/2018/warming-stripes/\n// Data : https://www.metoffice.gov.uk/hadobs/hadcrut4/\n//---------------------------------------------------\n//\n// global average temperature : Blue = cold year / Red = Hot year\n//\n//---------------------------------------------------\n\n\n// [dyvoid] Video Glitch : https://www.shadertoy.com/view/XtK3W3\n//--------------------------------------------------------------------\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nfloat rand(vec2 co)\n{\n   return fract(sin(dot(co.xy,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;    \n    float time = iTime * 2.0;\n    \n    float k = 2.*smoothstep(40.,45.,mod(iTime,50.));\n    // Create large, incidental noise waves\n    \n    float noise = max(0.0, snoise(vec2(time, uv.y * 0.3)) - 0.3) * (1.0 / 0.7);\n    \n    // Offset by smaller, constant noise waves\n    noise = noise + (snoise(vec2(time*10.0, uv.y * 2.4)) - 0.5) * 0.15;\n    \n    noise *= k;\n    \n    // Apply the noise as x displacement for every line\n    float xpos = uv.x - noise * noise * 0.25;\n\tfragColor = texture(iChannel0, vec2(xpos, uv.y));\n    \n    // Mix in some random interference for lines\n    vec3 rgb = mix(fragColor.rgb, vec3(rand(vec2(uv.y * time))), noise * 0.3).rgb;\n    \n    // Apply a line pattern every 4 pixels\n    if (floor(mod(rgb.y * 0.25, 2.0)) == 0.0)\n    {\n        rgb *= 1.0 - (0.15 * noise);\n    }\n    \n    // Shift green/blue channels (using the red channel)\n    rgb.g = mix(rgb.g, texture(iChannel0, vec2(xpos + noise * 0.05, uv.y)).g, 0.25);\n    rgb.b = mix(rgb.b, texture(iChannel0, vec2(xpos - noise * 0.05, uv.y)).b, 0.25);\n    \n    fragColor.rgb = rgb*(1.+k);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "// Created by sebastien durand - 03/2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n//---------------------------------------------------\n// This Shader is a fork of Shane shader\n// [Shane] Industrial Tunnel : https://www.shadertoy.com/view/4tKXzV\n//---------------------------------------------------\n//\n// Warming stripes concept by Ed Hawkins\n// https://twitter.com/ed_hawkins\n// https://www.climate-lab-book.ac.uk/2018/warming-stripes/\n// Data : https://www.metoffice.gov.uk/hadobs/hadcrut4/\n//---------------------------------------------------\n//\n// global average temperature : Blue = cold year / Red = Hot year\n//\n//---------------------------------------------------\n\n\n#define PI 3.141592\n\n// Notes frequinces for 0 octave taken from Wikipedia\nconst float notes[]=float[]( 220.000, 233.082, 246.942,\n    261.626,277.183,293.665,311.127,329.628,349.228,\n    369.994,391.995,415.305,440.000,466.164,493.883,523.251,554.365, \n    587.329, 622.254, 659.255, 698.456, 739.989, 783.991,\n    830.609, 880., 932.328, 987.767, 1046.502, 1108.731, 1174.659, 1244.508\n);\n\n\nvec2 mainSound( in int samp, float time )\n{\n    float dt = HadCRUT46_1850_2019[int(mod(time*4.,200.))];\n\tfloat note = notes[int((dt+.5)*27.)];\n    // A 440 Hz wave that attenuates quickly overt time\n    time = mod(time,.25);\n    return vec2( sin(6.2831*note*time)*exp(-8.0*time));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "float[] nasa_1870_2019 = float[](-.18,-.09,-.10,-.19,-.28,-.31,-.32,-.35,-.18,-.11,-.37,-.24,-.27,-.32,-.31,-.22,-.11,-.11,-.28,-.18,-.09,-.15,-.30,-.39,-.49,-.28,-.22,-.39,-.43,-.47,-.43,-.43,-.36,-.35,-.15,-.12,-.33,-.44,-.28,-.27,-.26,-.17,-.27,-.25,-.25,-.21,-.09,-.20,-.19,-.34,-.15,-.10,-.17,-.30,-.14,-.21,-.16,-.04,-.03,-.03,.11,.18,.05,.07,.21,.09,-.07,-.04,-.11,-.11,-.18,-.07,.01,.07,-.15,-.15,-.21,.04,.07,.03,-.02,.06,.04,.07,-.20,-.10,-.05,-.02,-.07,.07,.03,-.09,.02,.16,-.08,-.01,-.11,.17,.06,.16,.27,.33,.13,.31,.16,.12,.18,.33,.41,.28,.44,.41,.22,.24,.31,.44,.33,.46,.62,.40,.40,.53,.62,.61,.53,.67,.62,.64,.51,.63,.70,.57,.62,.64,.73,.86,.99,.90,.82);\nfloat[] HadCRUT46_1850_2019 = float[](-.373,-.218,-.228,-.269,-.248,-.272,-.358,-.461,-.467,-.284,-.343,-.407,-.524,-.278,-.494,-.279,-.251,-.321,-.238,-.262,-.276,-.335,-.227,-.304,-.368,-.395,-.384,-.075,.035,-.230,-.227,-.200,-.213,-.296,-.409,-.389,-.367,-.418,-.307,-.171,-.416,-.330,-.455,-.473,-.410,-.390,-.186,-.206,-.412,-.289,-.203,-.259,-.402,-.479,-.520,-.377,-.283,-.465,-.511,-.522,-.490,-.544,-.437,-.424,-.244,-.141,-.383,-.468,-.333,-.275,-.247,-.187,-.302,-.276,-.294,-.215,-.108,-.210,-.206,-.350,-.137,-.087,-.137,-.273,-.131,-.178,-.147,-.026,-.006,-.052,.014,.020,-.027,-.004,.144,.025,-.071,-.038,-.039,-.074,-.173,-.052,.028,.097,-.129,-.190,-.267,-.007,.046,.017,-.049,.038,.014,.048,-.223,-.140,-.068,-.074,-.113,.032,-.027,-.186,-.065,.062,-.214,-.149,-.241,.047,-.062,.057,.092,.140,.011,.194,-.014,-.030,.045,.192,.198,.118,.296,.254,.105,.148,.208,.325,.183,.390,.539,.306,.294,.441,.496,.505,.447,.545,.506,.491,.395,.506,.560,.425,.470,.514,.579,.763,.797,.677,.595,.738,.75,.78,.8,.82,.83,.84,.85,.86,.87,.8,2.);\n\n// Month is slow (big array)\n//float[] HadCRUT_MONTH = float[](-.700,-.286,-.732,-.563,-.327,-.213,-.125,-.237,-.439,-.451,-.187,-.257,-.296,-.356,-.479,-.441,-.295,-.197,-.212,-.157,-.101,-.057,-.020,-.051,-.315,-.477,-.502,-.557,-.211,-.040,-.018,-.202,-.125,-.216,-.193,.073,-.182,-.327,-.309,-.355,-.268,-.175,-.059,-.148,-.404,-.362,-.255,-.437,-.365,-.282,-.286,-.353,-.233,-.219,-.227,-.167,-.119,-.192,-.367,-.233,-.169,-.401,-.306,-.223,-.338,-.167,-.271,-.163,-.336,-.217,-.214,-.518,-.122,-.376,-.528,-.380,-.129,-.291,-.304,-.309,-.461,-.391,-.608,-.449,-.513,-.345,-.434,-.649,-.570,-.310,-.541,-.329,-.393,-.474,-.668,-.358,-.528,-.708,-.548,-.512,-.653,-.582,-.329,-.278,-.332,-.211,-.643,-.304,-.308,-.189,-.327,-.195,-.307,-.248,-.274,-.100,-.565,-.249,-.315,-.363,-.181,-.426,-.642,-.332,-.293,-.309,-.109,-.182,-.217,-.195,-.515,-.762,-.893,-.508,-.464,-.386,-.768,-.189,-.221,-.094,-.330,-.362,-.417,-.247,-.742,-.780,-.403,-.240,-.225,-.336,-.344,-.700,-.420,-.420,-.766,-.887,.122,-.024,-.365,-.244,-.329,-.402,-.423,-.326,-.316,-.384,-.329,-.341,-.941,-.632,-.507,-.548,-.454,-.165,-.159,-.311,-.445,-.706,-.472,-.615,-.101,-.615,-.646,-.236,-.265,-.285,-.136,-.210,-.085,-.270,-.200,-.342,.037,-.216,-.596,-.265,-.530,.098,.018,-.273,-.232,-.425,-.309,-.334,-.313,.007,-.714,-.266,-.546,-.304,-.247,-.234,-.103,-.186,-.314,-.628,-.700,-.471,-.079,-.381,-.077,-.178,.138,-.041,-.202,-.238,-.505,-.131,-.249,.258,-.591,-.221,-.281,-.376,-.293,-.084,-.196,-.417,-.371,-.358,-.082,-.453,-.400,-.206,-.168,-.216,.018,-.259,-.264,-.403,-.170,-.720,-.528,-.548,.003,-.139,-.309,-.222,-.013,-.221,-.453,-.480,-.538,-.561,-.310,-.405,-.470,-.150,-.041,-.205,-.113,-.027,-.128,-.227,-.244,-.426,-.030,-.344,-.290,-.524,-.412,-.257,-.150,-.159,-.355,-.401,-.464,-.272,.063,-.435,-.556,-.504,-.467,-.457,-.169,-.363,-.204,-.433,-.501,-.404,-.571,-.597,-.597,-.466,-.175,-.233,-.299,-.180,-.268,-.363,-.503,-.506,-.315,-.279,-.388,-.298,-.533,-.282,-.137,-.248,-.436,-.388,-.586,-.716,-.327,.049,-.280,-.321,-.454,-.092,.013,.147,.028,.062,.096,.170,.174,.403,.343,.319,-.082,.019,-.049,-.023,.017,-.122,-.200,-.356,-.193,-.149,-.094,-.214,-.212,-.270,-.230,-.167,-.215,-.122,-.390,-.515,-.067,-.173,-.104,-.150,-.244,-.307,-.247,-.116,-.235,-.386,-.408,-.294,-.353,-.234,-.181,-.131,-.030,-.230,-.148,-.123,-.240,-.275,-.334,-.130,.125,-.008,-.051,-.283,-.372,-.315,-.187,-.221,-.156,-.329,-.312,-.471,-.400,-.321,-.346,-.397,-.256,-.124,-.200,-.210,-.279,-.379,-.312,-.323,-.403,-.217,-.459,-.527,-.396,-.411,-.424,-.413,-.346,-.332,-.567,-.415,-.502,-.412,-.482,-.469,-.518,-.486,-.316,-.505,-.329,-.242,-.262,-.155,-.396,-.470,-.412,-.338,-.188,-.382,-.280,-.335,-.432,-.361,-.423,-.420,-.566,-.556,-.457,-.435,-.355,-.404,-.274,-.362,-.337,-.499,-.404,-.395,-.591,-.440,-.534,-.238,-.347,-.292,-.304,-.278,-.219,-.095,-.194,-.169,-.067,-.082,-.064,.010,-.080,-.144,-.191,-.220,-.381,-.298,-.398,-.179,-.329,-.368,-.463,-.324,-.417,-.371,-.405,-.416,-.473,-.498,-.555,-.411,-.512,-.474,-.363,-.358,-.199,-.288,-.323,-.313,-.193,-.322,-.541,-.115,-.398,-.112,-.470,-.484,-.403,-.461,-.526,-.443,-.325,-.441,-.627,-.793,-.974,-.727,-.373,-.567,-.559,-.459,-.277,-.291,-.430,-.274,-.415,-.340,-.465,-.374,-.380,-.388,-.421,-.493,-.315,-.341,-.458,-.444,-.420,-.410,-.497,-.677,-.519,-.405,-.415,-.333,-.348,-.261,-.284,-.337,-.297,-.318,-.219,-.230,-.387,-.352,-.205,-.119,-.112,-.063,-.109,-.123,-.286,-.034,-.203,-.125,-.275,-.076,-.031,-.155,-.157,-.149,-.135,-.258,-.453,-.477,-.085,-.380,-.749,-.573,-.474,-.319,-.377,-.306,-.332,-.556,-.449,-.346,-.208,-.494,-.544,-.351,-.316,-.390,-.275,-.147,-.136,-.188,.028,-.450,-.266,-.172,-.285,-.261,-.273,-.180,-.190,-.185,-.230,-.058,-.263,-.075,-.176,-.272,-.236,-.187,-.196,-.146,-.188,-.196,-.343,-.298,-.442,-.428,-.232,-.260,-.398,-.451,-.401,-.424,-.391,-.368,-.361,-.477,-.538,-.526,-.269,-.181,-.358,-.473,-.463,-.537,-.485,-.587,-.518,-.653,-.634,-.604,-.644,-.590,-.661,-.553,-.527,-.522,-.522,-.477,-.478,-.473,-.387,-.407,-.460,-.703,-.462,-.555,-.344,-.314,-.297,-.301,-.313,-.363,-.218,-.199,-.075,-.225,-.284,-.115,-.329,-.287,-.315,-.319,-.385,-.351,-.427,-.283,-.431,-.512,-.338,-.507,-.555,-.524,-.402,-.452,-.405,-.359,-.581,-.525,-.412,-.413,-.636,-.550,-.474,-.472,-.469,-.532,-.454,-.579,-.596,-.568,-.579,-.531,-.690,-.604,-.586,-.512,-.573,-.317,-.398,-.481,-.420,-.591,-.352,-.514,-.487,-.450,-.466,-.482,-.466,-.436,-.441,-.482,-.652,-.666,-.554,-.753,-.701,-.717,-.600,-.567,-.510,-.500,-.511,-.465,-.374,-.293,-.361,-.288,-.385,-.342,-.375,-.312,-.453,-.559,-.557,-.641,-.518,-.484,-.451,-.508,-.537,-.431,-.513,-.505,-.431,-.390,-.426,-.425,-.264,-.232,-.079,-.211,-.326,-.390,-.282,-.281,-.328,-.214,-.255,-.146,-.183,-.249,-.111,-.044,-.187,-.046,-.196,-.215,-.100,-.065,-.128,-.255,-.138,-.253,-.235,-.181,-.406,-.339,-.351,-.472,-.378,-.342,-.335,-.395,-.572,-.629,-.680,-.765,-.832,-.477,-.662,-.357,-.122,-.226,-.125,-.385,-.386,-.635,-.501,-.514,-.445,-.490,-.426,-.329,-.336,-.358,-.243,-.095,-.050,-.232,-.106,-.085,-.306,-.072,-.255,-.252,-.362,-.336,-.239,-.296,-.532,-.460,-.239,-.427,-.119,-.264,-.200,-.211,-.285,-.233,-.139,-.233,-.289,-.358,-.141,-.183,-.249,-.220,-.203,-.121,-.140,-.283,-.165,-.142,-.301,-.147,-.387,-.275,-.267,-.235,-.371,-.324,-.229,-.348,-.282,-.330,-.292,-.308,-.237,-.419,-.412,-.360,-.319,-.243,-.352,-.377,-.327,-.270,-.021,-.014,-.315,-.204,-.271,-.283,-.245,-.214,-.263,-.284,-.284,-.316,-.361,-.530,-.403,-.308,-.230,-.273,-.256,-.257,-.214,-.128,-.191,-.309,-.063,.001,.086,-.042,-.028,-.176,-.217,-.087,-.239,-.090,-.097,-.088,-.109,-.244,-.261,-.146,-.333,-.258,-.257,-.236,-.147,-.145,-.134,-.038,-.173,-.422,-.054,-.133,-.344,-.251,-.281,-.337,-.166,-.176,-.221,-.161,-.153,-.240,-.487,-.670,-.409,-.389,-.391,-.351,-.358,-.185,-.265,-.176,-.072,-.488,-.327,-.287,-.150,-.201,-.201,-.165,-.122,-.056,-.079,-.089,.078,-.079,-.007,-.162,-.123,-.182,-.166,-.040,.002,-.054,-.050,-.046,-.153,-.105,.157,-.196,-.243,-.069,-.169,-.191,-.128,-.197,-.039,-.176,-.235,-.194,-.295,-.324,-.348,-.222,-.213,-.261,-.185,-.179,-.235,-.204,-.316,-.531,-.225,-.165,-.396,-.250,-.082,-.043,-.068,-.058,-.101,-.091,.022,-.142,-.233,.101,-.230,-.273,-.245,-.188,-.142,-.154,-.141,-.075,-.308,-.274,-.310,-.365,-.310,-.213,-.160,-.161,-.021,-.045,-.108,-.006,-.071,-.014,-.134,.039,-.279,-.135,-.083,-.006,.055,.085,.115,.120,.002,-.113,.013,.017,.057,.077,-.092,-.059,-.044,.015,.056,.141,.021,-.296,-.068,-.045,-.271,-.106,-.031,.062,.047,.036,-.081,-.278,-.129,.229,-.192,-.043,-.119,.047,.019,.034,.145,.043,.122,.011,-.067,.161,-.092,-.017,-.136,.019,-.022,.119,.122,.024,-.135,.216,.051,.095,.206,-.088,-.090,-.065,-.019,.034,-.081,-.067,.002,-.084,-.066,.000,-.214,.068,-.204,-.003,-.018,-.096,.003,-.009,-.025,.229,.014,.191,.281,.125,.135,.046,.057,.152,.220,.236,.293,.209,.007,-.034,-.010,-.103,-.048,.168,-.108,-.003,-.084,.364,.161,.173,-.012,-.202,.096,.039,-.062,.139,-.110,-.255,-.043,-.147,-.015,-.052,-.094,-.361,-.113,-.174,-.064,.089,-.057,.004,-.003,-.040,-.068,.068,.047,-.175,.089,-.123,-.178,-.045,.101,.069,-.104,-.003,-.056,.022,-.059,-.198,.149,-.144,-.175,.004,-.053,-.184,-.099,-.042,-.079,-.034,-.081,-.190,-.318,-.250,-.181,-.173,-.094,-.076,-.044,-.120,-.106,-.129,-.391,-.250,-.354,-.461,-.293,-.108,-.015,.033,.041,.135,.091,.135,-.035,.180,.184,.130,-.131,.053,.036,.039,.100,.093,.100,-.007,-.186,-.062,.064,.147,.126,.191,.138,.167,.048,.099,.077,.073,-.067,.091,-.237,-.086,-.153,-.145,-.205,-.126,-.199,-.093,-.086,-.030,.022,-.232,.124,-.168,-.405,-.246,-.232,-.163,-.199,-.062,-.114,-.166,-.316,-.337,-.247,-.346,-.315,-.335,-.280,-.230,-.206,-.250,-.283,-.233,-.262,-.209,-.167,-.131,-.188,-.064,.049,.082,-.000,.093,.037,-.015,.055,.151,.267,.184,.001,.035,.032,-.015,.041,.004,-.053,.014,.011,.030,.087,.033,.079,.046,-.010,.062,.030,.047,.041,-.034,-.111,-.069,-.032,.104,-.314,-.176,-.156,-.030,-.028,.008,.064,-.027,-.149,.146,.045,.177,.093,.096,.092,.111,.019,.033,-.029,-.033,-.018,-.117,.053,.135,.028,.024,-.047,-.052,.018,-.005,-.017,.042,.010,-.012,-.045,.148,-.147,-.069,-.022,-.033,.111,.126,.127,.225,.164,-.006,-.053,-.127,-.278,-.246,-.177,-.161,-.172,-.256,-.282,-.267,-.295,-.353,-.106,-.249,-.218,-.255,-.162,-.110,-.183,-.106,-.088,-.024,-.130,-.065,-.094,-.093,-.067,-.105,-.138,.038,.030,-.017,-.038,-.104,-.095,-.140,-.172,-.237,-.050,-.063,.076,-.081,-.063,-.061,-.093,.062,-.059,-.147,-.241,-.212,.036,-.169,-.218,-.107,-.102,-.059,-.086,-.021,-.071,-.110,-.172,-.168,-.005,.106,.132,.025,.038,.054,.019,.031,.131,.194,.070,.144,-.069,.056,-.036,-.015,-.050,-.093,-.040,-.075,-.050,-.166,-.102,-.289,-.282,-.237,-.214,-.235,-.130,-.168,-.124,-.165,-.086,-.199,-.379,-.291,-.132,-.077,-.065,.008,-.017,.016,-.053,.007,.002,.187,.147,.278,.226,.162,.085,.110,.026,.017,-.042,-.047,-.099,-.113,-.372,-.410,-.229,-.180,-.196,-.153,-.127,-.083,-.129,-.220,-.217,-.242,-.075,-.093,-.077,-.090,-.086,-.086,-.110,-.180,-.126,-.234,-.319,-.309,-.233,-.329,-.445,-.195,-.317,-.250,-.182,-.202,-.162,-.316,-.180,-.087,-.074,.077,.102,.094,.072,.112,.065,-.001,.033,-.005,.141,-.051,.017,-.035,.028,-.061,-.085,-.135,-.066,-.185,-.054,-.112,.046,-.098,-.029,-.138,.016,-.050,-.033,.058,.054,.083,.092,.135,.146,.355,.134,.217,.069,.144,.142,.070,.061,.038,.039,.011,.129,.055,.329,.197,.208,.131,.066,.125,.089,.121,.072,.004,.072,.265,-.045,.006,-.129,.029,.040,-.055,-.016,-.009,.075,.006,-.009,.250,.428,.313,.213,.120,.137,.134,.152,.200,.188,.099,.256,.089,.118,.013,.049,-.046,.092,-.015,-.037,.041,.033,-.022,-.121,-.274,.011,-.133,-.026,-.040,-.003,-.061,-.060,.026,-.032,.018,-.072,.014,.124,.090,.075,.078,.045,.049,-.002,.002,.011,.066,-.007,.010,.112,.302,.022,.095,.148,.127,.269,.237,.274,.204,.197,.322,.388,.233,.262,.225,.211,.221,.173,.176,.183,.139,.027,.146,.012,.149,.136,.081,.079,.074,.156,.177,.142,.151,.060,.201,.217,.307,.562,.366,.278,.277,.231,.250,.178,.332,.318,.248,.288,.298,.198,.383,.303,.306,.307,.258,.243,.191,.160,.120,.367,.319,.258,.137,.173,.130,-.016,.007,-.064,-.048,-.084,.082,.307,.253,.239,.131,.178,.179,.131,.097,.070,.109,-.036,.129,.182,-.048,.222,.210,.268,.262,.170,.186,.190,.311,.314,.246,.421,.601,.322,.285,.218,.312,.331,.357,.263,.336,.324,.132,.116,.323,.186,.130,.224,.168,.221,.207,.104,.132,.146,.232,.211,.313,.344,.266,.286,.411,.373,.440,.479,.558,.501,.503,.489,.763,.549,.650,.582,.591,.673,.605,.400,.407,.298,.472,.347,.583,.226,.324,.245,.273,.288,.228,.305,.253,.241,.370,.224,.449,.382,.479,.279,.270,.261,.353,.312,.225,.160,.157,.357,.319,.510,.462,.418,.419,.464,.505,.431,.421,.613,.383,.654,.703,.701,.460,.427,.471,.491,.453,.424,.411,.450,.325,.600,.459,.450,.437,.473,.454,.475,.549,.536,.612,.457,.589,.507,.613,.532,.477,.311,.322,.359,.394,.438,.464,.604,.355,.549,.396,.565,.611,.518,.552,.547,.538,.574,.614,.627,.462,.383,.571,.461,.407,.405,.518,.486,.535,.503,.569,.540,.691,.828,.567,.517,.587,.448,.420,.439,.440,.455,.467,.391,.341,.158,.235,.559,.327,.340,.365,.451,.432,.407,.546,.526,.395,.478,.443,.404,.511,.441,.546,.536,.586,.567,.516,.550,.484,.560,.592,.682,.689,.592,.585,.615,.539,.448,.497,.592,.334,.315,.324,.420,.491,.393,.494,.511,.491,.446,.458,.353,.402,.310,.301,.360,.574,.573,.556,.507,.536,.556,.556,.550,.271,.471,.498,.421,.450,.525,.501,.518,.541,.546,.516,.660,.532,.534,.327,.584,.667,.608,.625,.544,.677,.601,.635,.504,.655,.705,.689,.708,.673,.711,.743,.697,.740,.796,.845,.840,1.024,.934,1.111,1.106,.937,.707,.744,.744,.790,.729,.598,.553,.620,.739,.845,.873,.737,.659,.641,.651,.714,.557,.571,.554,.600,.554,.528,.615,.627,.587,.573,.594,.591,.599,.684,.591,.604,.738);\n\n",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "// Created by sebastien durand - 03/2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n//---------------------------------------------------\n// This Shader is a fork of Shane shader\n// [Shane] Industrial Tunnel : https://www.shadertoy.com/view/4tKXzV\n//---------------------------------------------------\n//\n// Warming stripes concept by Ed Hawkins\n// https://twitter.com/ed_hawkins\n// https://www.climate-lab-book.ac.uk/2018/warming-stripes/\n// Data : https://www.metoffice.gov.uk/hadobs/hadcrut4/\n//---------------------------------------------------\n//\n// global average temperature : Blue = cold year / Red = Hot year\n//\n//---------------------------------------------------\n\nvec3 getColorAt(float xpos) {\n    float dt = (HadCRUT46_1850_2019[int(xpos)]);\n    vec3 c = dt<0. ? mix(vec3(220./256.,235./256.,247./256.), vec3(8./255.,48./255.,107./255.), -dt) : \n    \t\t\t       mix(vec3(1,224./256.,210./256.), vec3(203./255.,24./256.,29./255.), .6*dt);\n    return (1.+1.*(dt+.5))*pow(c,vec3(3.));\n}\n\n\n// Maximum ray distance.\n#define FAR 40. \n\n\n// 2D rotation. Always handy. Angle vector, courtesy of Fabrice.\nmat2 rot( float th ){ vec2 a = sin(vec2(1.5707963, 0) + th); return mat2(a, -a.y, a.x); }\n\n\n// Camera path. Arranged to coincide with the frequency of the lattice.\nvec3 camPath(float t){\n    // Curvy path. Weaving around the columns.\n    float a = sin(t*3.14159265/16. + 1.5707963*1.);\n    float b = cos(t*3.14159265/16.);\n    \n    return vec3(a*2., b*a, t);    \n}\n\n// [iq] https://www.shadertoy.com/view/4lyfzw\nfloat opExtrussion( in vec3 p, in float sdf, in float h) {\n    vec2 w = vec2(sdf, abs(p.z) - h);\n  \treturn min(max(w.x,w.y),0.) + length(max(w,0.));\n}\n// --------------------------------------\n// Distance Functions\n// --------------------------------------\n\n// Adapted from [FabriceNeyret2] https://www.shadertoy.com/view/llyXRW\nfloat sdFont(in vec2 p, in int c) {\n    vec2 uv = (p + vec2(float(c%16), float(15-c/16)) + .5)/16.;\n    return max(max(abs(p.x) - .25, max(p.y - .35, -.38 - p.y)), textureLod(iChannel1, uv, 0.).w - 127./255.);\n}\n\nfloat sdMessage2D(in vec2 p, in int[4] txt, in float scale) { \n    p /= scale;\n \tfloat d = 999., w = .45; // letter width  \n    p.x += w*float(txt.length()-1)*.5; // center text arround 0\n    for (int id = 0; id<4; id++){\n    \td = min(d, sdFont(p, txt[id]));   \n    \tp.x -= w; \n    }\n    return scale*d;\n}\n\nfloat sdMessage3D(in vec3 p, in int[4] txt, in float scale, in float h) { \n    return opExtrussion(p, sdMessage2D(p.xy, txt, scale), h);\n}\n\n\nfloat map(vec3 p0){\n      \n    vec3 p =p0;\n    p.xy -= camPath(p.z).xy;\n    \n    int year = 1850 + (int(floor(mod(p.z,200.)))/10)*10 + 10;\n    int d0 = year/1000;\n    int d1 = (year - d0*1000)/100;\n    int d2 = (year - d0*1000 - d1*100)/10;\n    \n    int[] gtxt = int[] (48+d0,48+d1,48+d2,48);\n    \n    float d = length(p.xy)-1.;    \n    p.z= mod(p.z-4.5,10.)-5.;\n    \n    return min(-d, sdMessage3D(p- vec3(0,0,0), gtxt, .5, .001));\n}\n\nfloat mapTxt(vec3 p0) {\n      \n    vec3 p =p0;\n    p.xy -= camPath(p.z).xy;\n    \n    int year = 1850 + (int(floor(mod(p.z,200.)))/10)*10 + 10;\n    int d0 = year/1000;\n    int d1 = (year - d0*1000)/100;\n    int d2 = (year - d0*1000 - d1*100)/10;\n    \n    int[] gtxt = int[] (48+d0,48+d1,48+d2,48);\n    \n    float d = -length(p.xy)+1.;    \n    p.z= mod(p.z-4.5,10.)-5.;\n    \n    float dMsg = sdMessage3D(p- vec3(0,0,0), gtxt, .5, .001);\n    return d < dMsg ? 1. : 2.;\n}\n\n// Raymarching.\nfloat trace(vec3 ro, vec3 rd){\n    float t = 0., d;\n    for (int i=0; i<96; i++){\n\n        d = map(ro + rd*t);\n        if(abs(d)<.001*(t*.125 + 1.) || t>FAR) break;\n        t += d;\n    }\n    return min(t, FAR);\n}\n\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.html\nvec3 tex3D(sampler2D ch, vec3 p, vec3 n){\n    n = max(abs(n) - .2, .001);\n    n /= dot(n, vec3(1));\n\tvec3 tx = texture(ch, p.yz).xyz,\n     \t ty = texture(ch, p.xz).xyz,\n     \t tz = texture(ch, p.xy).xyz;\n    return tx*tx*n.x + ty*ty*n.y + tz*tz*n.z;\n}\n\n\n// Texture bump mapping. Four tri-planar lookups, or 12 texture lookups in total. I tried to \n// make it as concise as possible. Whether that translates to speed, or not, I couldn't say.\nvec3 texBump( sampler2D tx, in vec3 p, in vec3 n, float bf){\n    const vec2 e = vec2(0.001, 0);\n    // Three gradient vectors rolled into a matrix, constructed with offset greyscale texture values.    \n    mat3 m = mat3( tex3D(tx, p - e.xyy, n), tex3D(tx, p - e.yxy, n), tex3D(tx, p - e.yyx, n));\n    vec3 g = vec3(0.299, 0.587, 0.114)*m; // Converting to greyscale.\n    g = (g - dot(tex3D(tx,  p , n), vec3(0.299, 0.587, 0.114)) )/e.x; g -= n*dot(n, g);\n    return normalize( n + g*bf ); // Bumped normal. \"bf\" - bump factor.\n}\n\n\n// The normal function with some curvature rolled into it. Sometimes, it's possible to get away\n// with six taps, but we need a bit of epsilon value variance here, so there's an extra six.\nvec3 nr(vec3 p, inout float crv, float ef){ \n\t//ef/iResolution.y\n    vec2 e = vec2(ef/450., 0); // Larger epsilon for greater sample spread, thus thicker edges.\n\n    // Take some distance function measurements from either side of the hit point on all three axes.\n\tfloat d1 = map(p + e.xyy), d2 = map(p - e.xyy),\n\t \td3 = map(p + e.yxy), d4 = map(p - e.yxy),\n\t \td5 = map(p + e.yyx), d6 = map(p - e.yyx);\n\tfloat d = map(p);\t// The hit point itself - Doubled to cut down on calculations. See below.\n    \n    // Seven-tap curvature calculation. You can get away with four taps, but this is a little\n    // more accurate.\n    crv = clamp((d1 + d2 + d3 + d4 + d5 + d6 - d*6.)*32. + .5, 0., 1.);\n\t\n    // Redoing the calculations for the normal with a more precise epsilon value.\n    e = vec2(.002, 0);\n\td1 = map(p + e.xyy), d2 = map(p - e.xyy);\n\td3 = map(p + e.yxy), d4 = map(p - e.yxy);\n\td5 = map(p + e.yyx), d6 = map(p - e.yyx); \n    \n    // Return the normal.\n    // Standard, normalized gradient mearsurement.\n    return normalize(vec3(d1 - d2, d3 - d4, d5 - d6));\n}\n\n\nfloat cao(in vec3 p, in vec3 n) {\n    float sca = 1., occ = 0.;\n    for(float i=0.; i<5.; i++){\n    \n        float hr = .01 + i*.5/4.;        \n        float dd = map(n * hr + p);\n        occ += (hr - dd)*sca;\n        sca *= 0.7;\n    }\n    return clamp(1.0 - occ, 0., 1.);    \n}\n\n\nfloat softShadow(vec3 ro, vec3 lp, float k){    \n    vec3 rd = (lp-ro); // Unnormalized direction ray.\n    float shade = 1., dist = .05, end = max(length(rd), .001);\n    rd /= end;\n    for (int i=0; i<20; i++){\n\n        float h = map(ro + rd*dist);\n        shade = min(shade, k*h/dist);\n        dist += clamp(h, .01, .25);\n        if (h<.001 || dist > end) break; \n    }\n    return min(max(shade, 0.) + .2, 1.); \n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    // Screen coordinates.\n\tvec2 u = (fragCoord - iResolution.xy*0.5)/iResolution.y;\n\t\n\t// Camera Setup.\n    float speed = 4.;\n    vec3 ro = camPath(iTime*speed); // Camera position, doubling as the ray origin.\n    \n    vec3 lk = camPath(iTime*speed + .5);  // \"Look At\" position.    \n    vec3 lp = camPath(iTime*speed + 2.25); // Light position, somewhere near the moving camera.\n    lp.y += .6;   \n\n    // Using the above to produce the unit ray-direction vector.\n    float FOV = .75; // FOV - Field of view.\n    vec3 fwd = normalize(lk-ro),\n         rgt = normalize(vec3(fwd.z, 0., -fwd.x )),\n     \t up = cross(fwd, rgt);\n\n    // Mild lens distortion to fit more of the scene in, and to mix things up a little.\n  \tvec3 rd = fwd + FOV*(u.x*rgt + u.y*up);\n  \trd = normalize(vec3(rd.xy, (rd.z - length(rd.xy)*.3)*.7));\n    \n    // Swiveling the camera from left to right when turning corners.\n    float swivel = camPath(lk.z).x;\n    rd.xy = rot(swivel/48. )*rd.xy;\n    rd.xz = rot(swivel/16. )*rd.xz;\n \n    \n    // Raymarch.\n    float t = trace(ro, rd);\n   \n    // Surface hit point.\n    vec3 sp = ro + rd*t;\n    vec3 fc;\n    \n    float obj = mapTxt(sp);\n    \n   // if (obj == 1.) {\n        // Offset path. Only used for one thing here, but it's handy to have an\n        // adjusted hit point that aligns with the path contour.\n        vec3 pathSp = sp - camPath(sp.z);\n\n        // Normal with curvature component.\n        float crv = 1., ef = 12.; // ef - Edge and curvature factor.\n        vec3 sn = nr(sp, crv, ef);\n\n        // Shadows and ambient self shadowing.\n        float sh = softShadow(sp, lp, 16.); // Soft shadows.\n        float ao = cao(sp, sn); // Ambient occlusion.\n\n        // Light direction vector setup and light to surface distance.\n        lp -= sp;\n        float lDist = max(length(lp), .0001);\n        lp /= lDist;\n\n        // Attenuation.\n        float atten = .7/(1.0 + lDist*.25 + lDist*lDist*.025);\n\n        // Texturing the object.\n        const float tSize0 = 1.5;\n\n        float spot = max(2. - length(pathSp.xy - vec2(0, 1.)), 0.)*(cos((.31415*sp.z + 1.)*3.14159)*.5+.5);\n        spot = .2*smoothstep(0.5, 1., spot); \n\n        // Texture-based bump mapping.\n        float tbf = .03;\n\n        if (obj == 1.)  sn = texBump(iChannel0, sp*tSize0*2., sn, tbf);\n\n        vec3 tx = getColorAt(mod(abs(sp.z),200.));\n        if (obj == 2.) tx = vec3(0);//.2;\n\n        // Diffuse, specular and Fresnel.\n        float dif = max(dot(lp, sn), 0.);\n        float spe = pow(max(dot(reflect(-lp, sn), -rd), 0.), 99.);\n        float fre = .5*pow(clamp(dot(rd, sn) + 1., 0., 1.), 2.);\n\n        // Combining the terms above to produce the final color.\n        fc = tx*(dif + .125 + vec3(1, .8, .5)*fre + vec3(1, .9, .7)*spot) + vec3(1, .7, .5)*spe*.2;\n        fc *= atten*sh*ao*clamp(crv*1.5, 0., 1.);\n  //  }\n    \n    // Mixing in some fog.\n    vec3 bg = vec3(.5);//1.25*getColorAt(mod(sp.z+2.,200.)); //vec3(.4, .35, .3);\n    fc = mix(fc, bg, smoothstep(0., .95, t/FAR));\n    \n     // Gamma correction.\n\tfragColor = vec4(pow(clamp(fc, 0., 1.),vec3(.7)), 1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 9,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg"
                    },
                    {
                        "channel": 1,
                        "ctype": "texture",
                        "id": 49,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}