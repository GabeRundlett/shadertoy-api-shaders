{
    "Shader": {
        "info": {
            "date": "1614094567",
            "description": "sphere mapping-v0.0.2 jf",
            "flags": 0,
            "hasliked": 0,
            "id": "3tKfRm",
            "likes": 3,
            "name": "sphere mapping-v0.0.2 jf",
            "published": 3,
            "tags": [
                "spheremappingv002jf"
            ],
            "usePreview": 0,
            "username": "jorge2017a1",
            "viewed": 345
        },
        "renderpass": [
            {
                "code": "\n//por jorge2017a1\n\n//referencia\n//https://www.shadertoy.com/view/3tyBRW\n//https://www.shadertoy.com/view/WtV3Dz\n\n//por jorge2017a1-\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\n\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n//operacion de Union\n#define opU3(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n\t{ return max(distA, distB);}\n\nfloat unionSDF(float distA, float distB)\n\t{ return min(distA, distB);}\n\nfloat differenceSDF(float distA, float distB)\n\t{ return max(distA, -distB);}\n//-------------------------------------------\n//----------oPeraciones de Repeticion\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n\n///------------------------------------\n// object transformation\nvec3 rotate_x(vec3 p, float phi)\n{\n    float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n///------------------------------------\nvec2 rotatev2(vec2 p, float ang)\n{\n    float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\n\n/// Sphere UV Sphere UVv0\nfloat checkersGradBox( in vec2 p )\n{\n    // filter kernel\n    vec2 w = fwidth(p) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nvec2 getSphereUV(in vec3 pos)\n{\n    \n    //vec3(20.0,20.0,25.0)\n    ////vec3 posLocal = pos - SpherePos;\n    vec3 SpherePos=vec3(20.0,20.0,25.0);\n    vec3 posLocal = pos - SpherePos;\n    //vec3 posLocal = pos ;\n    float SphereRadius=20.0;\n    //经纬角度\n    float longitudeAngle = atan(posLocal.x/posLocal.z)/3.1415926*180.0;\n    float latitudeAngle = acos(posLocal.y/SphereRadius)/3.1415926*180.0;\n    \n    return vec2(longitudeAngle,latitudeAngle);\n}\n///------------------------------------\n\n\n\nvec3 GetDist(vec3 p  ) \n{\t\n\tvec3 res;\n    vec3 pp=p;\n    res = vec3(9999.0, -1.0,-1.0);\n     float planeDist1 = p.y+5.0;  //piso inf\n     float planeDist5 = -p.z+40.0;  //pared frente\n     \n    res =opU3(res, vec3(planeDist1,-1.0,8.)); \n  \n    \n    \n    float ds1= sdSphere(  p-vec3(0.0,0.0,-5.0), 5.0 );\n    float ds2= sdSphere(  p-vec3(5.0,5.0,10.0), 10.0 );\n    float ds3= sdSphere(  p-vec3(20.0,20.0,25.0), 20.0 );\n    \n    res =opU3(res, vec3(ds1,-1.0,11.0)); \n    res =opU3(res, vec3(ds2,-1.0,16.0)); \n    res =opU3(res, vec3(ds3,-1.0,14.0)); \n   \n   \n    //return (dist, id_color, id_material)\n    return res;\n}\n\n\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro) \n{\n    vec3 l = lp - p;\n    float dist = max(length(l), 0.01);\n    float atten = min(1./(1. + dist*0.5), 0.2);\n    l /= dist;\n    \n    vec3 n = normal;\n   \tvec3 r = reflect(-l, n);\n    \n    float dif = clamp(dot(l, n), 0.0, 1.0);\n    float spe = pow(clamp(dot(r, -rd), 0.0, 1.0), 8.0);\n    float fre = pow(clamp(1.0 + dot(n, rd), 0.0, 1.0), 2.0);\n    float dom = smoothstep(-1.0, 1.0, r.y);\n    \n    vec3 lin = vec3(0.2);\n    lin += 1.0*dif*vec3(1, .97, .85);\n    lin += 2.5*spe*vec3(1, .97, .85)*dif;\n    lin += 2.5*fre*vec3(1);\n    lin += 0.5*dom*vec3(1);\n    \n    \n    \n    return lin*atten;\n}\n\n\n\n//------------------------------------------------\nvec3 GetNormal(vec3 p)\n{\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        \n        if(dO>MAX_DIST || abs(dS.x)<MIN_DIST) break;\n        dO += dS.x;\n        marchCount++;\n         \n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\nfloat GetShadow(vec3 p, vec3 plig)\n{\n    vec3 lightPos = plig;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n//----------------------------------------------------\n\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{\n    float intensity=1.0;\n     vec3 result;\n     result = lightingv3( nor, p, plight_pos,  rd,ro)*colobj*6.0;\n     \n     if (mObj.blnShadow==true)\n    {\n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n        \n     }\n    else\n    {  return result; }\n}\n///-------------------------------------\n//Mercurial Gold\n //https://www.shadertoy.com/view/3tyBRW\n //Created by morphix in 2021-02-21\nvec3 MercurialGold( vec2 puv )\n{\n    //vec2 p = 5.*(( fragCoord.xy-.5* iResolution.xy )/iResolution.y)-.5 ;\n    vec2 p =puv;\n    \n    vec2 i = p;\n\tfloat c = 0.0;\n\tfloat r = length(p+vec2(sin(iTime),sin(iTime*.222+99.))*1.5);\n\tfloat d = length(p);\n\tfloat rot = d+iTime+p.x*.15; \n\tfor (float n = 0.0; n < 4.0; n++) {\n\t\tp *= mat2(cos(rot-sin(iTime/4.)), sin(rot), -sin(cos(rot)-iTime), cos(rot))*-0.15;\n\t\tfloat t = r-iTime/(n+1.5);\n\t\ti -= p + vec2(cos(t - i.x-r) + sin(t + i.y),sin(t - i.y) + cos(t + i.x)+r);\n\t\tc += 1.0/length(vec2((sin(i.x+t)/.15), (cos(i.y+t)/.15)));\n\t}\n\tc /= 4.0;\n\t//fragColor = vec4(vec3(c)*vec3(4.3, 3.4, 0.1)-0.35, .1);\n    vec3 col = vec3(vec3(c)*vec3(4.3, 3.4, 0.1)-0.35);\n    return col;\n}\n//------------------------------------------------\nvec3 getMaterial( vec3 pp, float id_material)\n{\n  vec3 col=vec3(1.0);\n  vec3 p=pp;\n    \n    \n    if(id_material== 1.0 )\n    {\n        float c = 0.8+mod((floor(mObj.p.x) + floor(mObj.p.z) + floor(mObj.p.y)), 2.0);\n        return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 )*c;\n    }\n    \n\tif(id_material== 2.0 )\n    { \n        return checkerBoard(mObj.p.x, mObj.p.z, 3.0);\n    } \n    \n\tif(id_material== 3.0 )\n    { \n        return checkerBoard(mObj.p.x, mObj.p.z, 3.0)*vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );\n    } \n\n    if (id_material==4.0)\n    { // nothing hit: background gradient\n     return vec3(0.2, 0.2, 0.2) * (-mObj.uv.y+1.2);\n    }\n    \n    if (id_material==5.0)\n    {\n        float escala=0.25;\n    \tfloat d = mod(floor(p.x*escala)+floor(p.z*escala*2.0),2.0);\n\t\t// vary between red (0) and yellow (1)\n\t    return vec3( clamp(d,0.0,1.0) );\n    }\n    \n   \n     if (id_material==6.0)\n    {\n     vec3 pos=pp;\n    \n     vec4 mate = vec4(1.00,0.5,0.20,1.0)*1.25; \n     return mate.xyz;\n    }\n    \n    \n    \n     if (id_material==7.0)\n    {\n        float escala=0.25;\n    \t//float d = mod(floor(p.x*escala)+floor(p.z*escala*2.0),2.0);\n        float d = mod(floor(p.x*escala*0.5)+floor(p.z*escala*1.0),2.0);\n\t\t\n        return vec3( clamp(d,0.0,1.0) );\n    }\n    \n    \n    \n     if (id_material==8.0)\n    {\n    //float generateCheckerboard(vec2 uv)\n\n        vec2 p2 = floor(p.xz*0.5);\n        float s = mod( p2.x + p2.y, 2.0 );\n        return vec3(1.0)*s;\n    }\n    \n    if (id_material==9.0)\n    {\n     vec3 pos=pp;\n    \n     vec4 mate = vec4(0.02,0.35,1.20,1.0)*1.25; \n     return mate.xyz;\n    }\n    \n    if (id_material==10.0)\n    {\n     vec3 pos=pp;\n    \n     vec4 mate = vec4(1.32,0.35,0.20,1.0)*1.25; \n     return mate.xyz;\n    }\n    \n    \n    \n    \n    if (id_material==11.0)\n    {\n         vec2 uv=p.xy;\n          uv*=0.25;\n        float r=sqrt(uv.x*uv.x+uv.y*uv.y);\n        float phi=atan(uv.y,uv.x);\n        float x=r*cos(phi);\n        float y=r*sin(phi);\n        \n         \n         col=  NoisePerlinAndInverseWorley(uv +vec2(x,y),iTime*10.0);\n         return col;\n    }\n    \n    \n     if (id_material==12.0)\n    {\n        vec2 uv=p.xy;\n         uv*=0.25;\n         col=vec3(1.32,0.35,0.20)*1.25; \n         col*=  NoisePerlinAndInverseWorley(uv , 10.0*cos(iTime*10.0));\n         return col;\n    }\n    \n    if (id_material==13.0)\n    {\n        vec2 uv=p.xy;\n         uv*=0.25;\n         col=vec3(0.02,0.35,1.20)*1.25;  \n         vec3 tmpcol= sin(iTime)* NoisePerlinAndInverseWorley(uv , 10.0*cos(iTime*10.0));\n         col+=tmpcol;\n         return col;\n    }\n    \n    \n    if (id_material==14.0)\n    {\n    \n      vec2 uv = getSphereUV(p);\n      col = vec3(checkersGradBox(uv*0.1));\n         return col;\n    }\n    \n    \n    if (id_material==15.0)\n    {\n        \n        vec2 p2=p.xy;\n        float d = length(p2);\n        p2 *= (acos(d) - 1.57079632)/d;\n        col = vec3(0.5+NoisePerlinAndInverseWorleyF(p2+p.xy, iTime)*max(0.5+d, 0.0));\n        return col;\n    }\n    \n    \n    if (id_material==16.0)\n    {\n        \n        vec2 uv=p.xy;\n        float r=sqrt(uv.x*uv.x+uv.y*uv.y);\n        float phi=atan(uv.y,uv.x);\n        float x=r*cos(phi);\n        float y=r*sin(phi);\n        col= MercurialGold( vec2(x,y)+p.xy );\n        \n        \n        \n        return col;\n    }\n    \n}\n//-------------------------------------------------\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj; \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n    \n    \n    if (id_material>-1.0 && id_color==-1)\n        { \n            colobj=vec3(0.5);\n            colobj*=getMaterial(p, id_material); \n            return colobj;\n        }\n    return colobj;\n}\n\n\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    float t;\n    t=mod(iTime*2.0,360.0);\n    itime=t;\n\t//mObj.blnShadow=false;\n    mObj.blnShadow=true;\n        \n \tlight_pos1= vec3(10.0, 10.0, 10.0 );  light_color1 = vec3( 1.0 );\n \tlight_pos2= vec3( -5.0, 6.0, -5.0 ); light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    \n    vec3 ro=vec3(4.,2.0,-25.0);\n    \n    vec3 rd=normalize(vec3(uv,1.0));\n    \n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    TObj Obj;\n    mObj.rd=rd;\n    mObj.ro=ro;\n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n    \n\tfloat dif1=1.0;\n   \tvec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col= result*dif1;\n    \n     \n\n  \t//sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(MAX_DIST) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    fragColor = vec4(col,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n#define COLOR_NO -1.0\n\n\nfloat random() \n{ return fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453); }\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1) //30\n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n\n\n\n\n\n//referencia\n//2D Perlin and inverse Worley\n\n//// *** noisemaking in here *** ////\n\n/// point of interest generator\n// point of interest is a point we calculate distance to for worley noise\nvec2 poi_gen (vec2 gridIndex) {\n    // random val calculated based on gridindex and time\n    // ensures for the same grid index and time any calculated points are identical\n    // adding 1 to gridIndex prevents multiplying by 0 issues\n    return fract(sin(vec2(dot(gridIndex + 1.0, vec2(127.4, 723.8)), \n                dot(gridIndex + 1.0, vec2(837.7, 208.7)))) * 25787.33);\n}\n\n/// Inverse Worley Noise \nfloat worley(vec2 p, float freq) {\n    // assume p is normalized\n    // split p into id and position\n    vec2 id = floor(p);\n    vec2 pos = fract(p);\n    \n    float minDist = 100.0; // needs to be too big initially\n    for(int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n            vec2 offset = vec2(x, y);\n            vec2 poi = poi_gen(mod(id + offset, vec2(freq))); // use mod for tiling\n            poi += offset;\n            vec2 diff = poi - pos;\n            minDist = min(minDist, length(diff));\n        }\n    }\n    return 1.0 - minDist; // inverting noise\n}\n\n/// Compound Worley Noise\n// uses the Worley FBM described by Schneider's chapter in GPU Pro 7\nfloat worleyFBM(vec2 p, float freq) {\n    return worley(p * freq, freq) * 0.625 +\n           worley(p * freq * 2., freq * 2.) * 0.25 +\n           worley(p * freq * 4., freq * 4.) * 0.125;\n}\n\n/// PERLIN\n// modified to tile from thebookofshaders.com\nfloat perlin(vec2 uv, float freq) {\n    vec2 p = uv * freq;\n    // split into ID and position\n    vec2 id = floor(p);\n    vec2 pos = fract(p);\n    \n    // tile corners\n    float a = poi_gen(id).x;\n    float b = poi_gen(mod(id + vec2(1., 0.), freq)).x;\n    float c = poi_gen(mod(id + vec2(0., 1.), freq)).x;\n    float d = poi_gen(mod(id + vec2(1., 1.), freq)).x;\n    \n    //smooth interpolation\n    vec2 u = smoothstep(0., 1., pos);\n    //u = pos * pos * (3. - 2. * pos);\n    \n    // mix 4 corners using position as percentage\n    return mix(a, b, u.x) +\n           (c - a) * u.y * (1. - u.x) +\n           (d - b) * u.x * u.y;\n}\n\n\n/// Multi-octave perlin noise compounder\nfloat perlinFBM(vec2 p, float freq, int octaves) {\n    float noise = 0.;\n    float w = 0.5;\n    float c = 1.;\n    for (int i = 0; i < octaves; ++i) {\n        noise += w * perlin(p , freq * c);\n        c = c * 2.;\n        w *= 0.5;\n    }\n\n    return noise;\n}\n\n\n/// PerlinWorley\n// remapping as described by Schneider's chapter in GPU Pro 7\nfloat remap(float val, float old_min, float old_max, float new_min, float new_max) {\n    return new_min + (((val - old_min) / (old_max - old_min)) * (new_max - new_min));\n}\n\nfloat perlin_worley(vec2 uv, float freq) {\n    float w = worleyFBM(uv, freq);\n    float p = perlinFBM(uv, freq, 5);\n    p = abs(p * 2. - 1.);\n    return remap(p, 0., 1., w, 1.);\n}\n\n///cloud\nfloat cloud(vec2 uv, float freq) {\n    float pw = perlin_worley(uv, freq);\n    float wg = worleyFBM(uv, freq);\n    float wb = worleyFBM(uv, freq * 2.);\n    float wa = worleyFBM(uv, freq * 4.);\n    \n    float wfbm = wg * .625 + wb * .25 + wa * 0.125;\n    \n    return remap(pw, wfbm - 1., 1., 0., 1.);\n}\n\n\n\n///------\n// image will be comprised of t x t tiles\nfloat t = 2.0; \n// noises start generation with freq x freq cells\nfloat freq = 4.0;\n\nvec3  NoisePerlinAndInverseWorley(vec2 uv, float ptime ) \n{\n    uv -= 0.05 * ptime;\n    uv = fract(uv);\n    \n    vec3 col = vec3(0.0);\n       col = vec3(remap(cloud(uv, freq), 0.1275, 1.25, 0., 1.));\n   \n    return col;\n}\n\n\nfloat  NoisePerlinAndInverseWorleyF(vec2 uv, float ptime ) \n{\n    uv -= 0.05 * ptime;\n    uv = fract(uv);\n    \n    vec3 col = vec3(0.0);\n  \n    float res= remap(cloud(uv, freq), 0.1275, 1.25, 0., 1.);\n    return res;\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}