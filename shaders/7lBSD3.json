{
    "Shader": {
        "info": {
            "date": "1628822898",
            "description": "basic tutorial",
            "flags": 0,
            "hasliked": 0,
            "id": "7lBSD3",
            "likes": 3,
            "name": "loading circle tutorial",
            "published": 3,
            "tags": [
                "tutorial"
            ],
            "usePreview": 0,
            "username": "jcyuan",
            "viewed": 165
        },
        "renderpass": [
            {
                "code": "vec3 rainbowColor(float t) {\n    return .5 + .5 * cos(6.283 * (t + vec3(0., .33, .67)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // uv移到中心\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    \n    // 圆形sdf\n    float l = length(uv);\n    \n    // 偏导宽\n    float w = fwidth(l);\n    \n    // 圆环画法一，无抗锯齿\n    // float d = step(abs(l - .45), .05);\n    \n    // 圆环画法二，带抗锯齿\n    // float d = smoothstep(w, -w, max(.4 - l, l - .5));\n    \n    // 圆环画法三，带抗锯齿\n    float d = smoothstep(w, -w, abs(l - .45) - .05);\n\n    // 求出一个圈的uv的角度并规一化到圆形0到1\n    float a = fract(atan(uv.y, uv.x) / 6.283 - iTime * .5);\n    \n    // 以pow将0到1的a角度“收紧”以让拖尾首尾距离更远\n    a = pow(a, 1.5);\n    \n    // 着色\n    vec3 col = d   // 圆环\n               *\n               // 以a值（0-1）插值取得颜色\n               rainbowColor(a)\n               *\n               // 将最终结果用a值做mask\n               a;\n    \n    fragColor = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}