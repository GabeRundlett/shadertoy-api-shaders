{
    "Shader": {
        "info": {
            "date": "1584914626",
            "description": "You must tag 10 peopl to remix or else you'll catch coronavirus.\nIn particular,  you can make use of the coronavirus SDF on line 51, `virus`, \n- char stiles & max bittker & chirag dav√©\n\nRemixed from: https://www.shadertoy.com/view/3sfcWN",
            "flags": 0,
            "hasliked": 0,
            "id": "3dsyDM",
            "likes": 3,
            "name": " Coronavirus remix jam",
            "published": 3,
            "tags": [
                "2d",
                "sdf",
                "jam",
                "coronavirus",
                "covid19"
            ],
            "usePreview": 0,
            "username": "kromlet",
            "viewed": 329
        },
        "renderpass": [
            {
                "code": "//    _____ _      _       _____ _               _\n//   / ____(_)    | |     / ____| |             | |\n//  | (___  _  ___| | __ | (___ | |__   __ _  __| | ___ _ __\n//   \\___ \\| |/ __| |/ /  \\___ \\| '_ \\ / _` |/ _` |/ _ \\ '__|\n//   ____) | | (__|   <   ____) | | | | (_| | (_| |  __/ |\n//  |_____/|_|\\___|_|\\_\\ |_____/|_| |_|\\__,_|\\__,_|\\___|_|\n//  ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†ü¶†\n//\n// Coronavirus Shader Demo Chain Mail\n//\n// Mutate this shader and \"retransmit\" it!\n// Be sure to tag \"coronavirus\"\n\n#define PI 3.1415926538\n#define TAU 6.2831853076\n#define spokes 5.0\n\n// THESE ARE SOME HELPER FUNCTIONS :-)\n\n// smooth minimum\nfloat smin(float a, float b, float k) {\n  float res = exp2(-k * a) + exp2(-k * b);\n  return -log2(res) / k;\n}\n\n// rotate a in input vec2 around its origin;\nvec2 rotate(vec2 v, float a) {\n  float s = sin(a);\n  float c = cos(a);\n  mat2 m = mat2(c, -s, s, c);\n  return m * v;\n}\n\n// how far a point p is from the line segment from a to b\nfloat sdSegment(in vec2 p, in vec2 a, in vec2 b) {\n  vec2 pa = p - a;\n  vec2 ba = b - a;\n  float h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n  return length(pa - ba * h);\n}\n\n////// END OF HELPER FUNCTIONS!\n\n// Draws a cool virus!\nfloat virus(vec2 input_pos, vec2 offset, float rotation, float scale) {\n\n  // prepare the coordinates based on the input transformations.\n  vec2 pos = rotate(input_pos + offset, rotation) / scale;\n  float angle = atan(pos.y, pos.x);\n\n  // this forms the middle blobby part of the virus:\n  float sphere = (length(pos) - 0.6); // the base\n  float wave = (pow(abs(sin(angle * spokes)), 6.) *\n                0.31); // goes up and down around the circle\n  float body = sphere - wave + (sin(sin(angle * 40.)) * 0.005);\n\n  // These are the lil round nubs of the crown\n  float repeatedAngle = floor((angle + .666) * spokes / PI) / spokes * PI;\n  repeatedAngle += -.31;\n\n  float boopRadius = 0.15;\n  boopRadius += sin(repeatedAngle*8. +iTime *4.) * 0.004;\n  float angleSweep = TAU / 100.;\n\n  float startAngle = repeatedAngle - angleSweep;\n  float endAngle = repeatedAngle + angleSweep;\n\n  vec2 dotStart = vec2(cos(startAngle), sin(startAngle)) * boopRadius;\n  vec2 dotEnd = vec2(cos(endAngle), sin(endAngle)) * boopRadius;\n  float crown = sdSegment(pos, dotStart, dotEnd) - (0.25 * sin(iTime));\n\n  // Combine the nubs and body with smoothing\n  return smin(crown, body, 40.0);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n  vec2 uv = (fragCoord / iResolution.xy - 0.5) *\n            2.0; // (0,0) is in the center of the screen\n\n  uv.x *= iResolution.x /\n          iResolution.y; // sadly the screen is not square, we must fix uv ratio\n\n  // Background color\n  vec3 col = vec3(1.000, 0.891, 0.674);\n\n    \n    for(int i = 0; i < 10; i++) {\n        vec2 offset = vec2(-1.25 + float(i)*0.25, 0.3 + sin(iTime * 3. + float(i)/3.));\n        float rotation = sin(iTime);\n        float scale = 0.25;\n        float v = virus(uv, offset, rotation, scale);\n         if (v < 0.13 * abs(sin(iTime/3.))) {\n\n        // green inside\n        col *= vec3(0.600, 0.7567, 0.429);\n        col *= 1.0 + (uv.y + 0.5) * 0.2;\n\n      } else if (v < 0.24) {\n        // pink border\n        col = vec3(0.800, 0.567, 0.629);\n      }\n    }\n\n  col.yz -= length(pow(abs(uv), vec2(4.0)) * vec2(0.025 * abs(cos(iTime)) + 0.01)); // add the red\n\n  // Output to screen\n  fragColor = vec4(col, 1.);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}