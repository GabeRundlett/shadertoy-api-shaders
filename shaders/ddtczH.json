{
    "Shader": {
        "info": {
            "date": "1694753173",
            "description": "An arabesque knot pattern with interlaced knots.\nClick and drag to move around.",
            "flags": 40,
            "hasliked": 0,
            "id": "ddtczH",
            "likes": 3,
            "name": "Arabesque knots 10 (music)",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "knot",
                "interlace",
                "arabesque"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 208
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return\n        abs(fract((a1)*(a2.x+a2.y))-.5)\n    ;\n}\n\nbool braid_pattern(vec2 uv,vec2 t2,bool b,bool b1){\n    return\n        //(uv.y>uv.x || t2.y>t2.x)\n        (uv.y>uv.x||!b)\n        //b||!b1\n        //(uv.y>uv.x||b)\n        //true\n        //(!(uv.y<uv.x) || t2.y>t2.x*float(b1))\n        //((uv.y<uv.x) || t2.y<t2.x)\n        //((uv.y*float(!b1)>uv.x) || t2.y>t2.x)\n        //((uv.y*float(b1)>uv.x*float(b)) || t2.y*float(b1)>t2.x*float(b))\n        //((uv.y>uv.x*float(b1)) || t2.y>t2.x*float(b1))\n        //b1 && ((uv.y>uv.x) || t2.y>t2.x) || !b1 && ((uv.y<uv.x) || t2.y<t2.x)   \n        //t2.y<t2.x\n        //(!b1 || t2.y>t2.x*float(!b1))\n   ;\n}\n\n\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 2.;\n    vec2 draggedPos = texelFetch(iChannel0, ivec2(1,0), 0).xy;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    uv -= draggedPos/iResolution.y/t1;\n    vec2 t2 = vec2(0.);\n    bool b = uv.y>uv.x;\n    bool b1 = t2.y>t2.x;\n    for(int k = 0; k < 6; k++){\n        //if(braid_pattern(uv,t2,b,b1)||!b1)\n        uv =\n            abs(.5+uv+t2)\n            //abs(.5+uv+t2)*sign(uv-uv.yx)\n            //abs(.5+uv*sign(uv.y+.5)-t2)\n            //abs(-.5+uv*sign(uv.x-.5)-t2)\n        ;\n        //uv = abs(fract(vec2(uv+vec2(.5,1.5))*1.5)-.5)/1.5;\n\n        //Braiding patterns\n        b1 =\n            braid_pattern(uv,t2,b,b1)||!b1\n        ;\n        \n        //uv.x += t1_(floor(uv),floor(uv));\n        \n        //if(t2.x>t2.y)\n        b =\n            uv.y>uv.x*float(b1)\n        ;\n        if(b||t2.x>t2.y) uv = uv.yx;\n        t2 =\n            -triangle_wave(uv-.5)\n        ;\n        uv =\n            t2-triangle_wave(uv.yx)\n        ;\n        if(\n            b1\n            //b1||t2.x>t2.y\n            //b1||t2.x<t2.y\n        )\n        col =\n            vec3(col.zx,max(uv.x-uv.y,col.y))\n            //abs(vec3(col.zx,max(uv.x-uv.y,-float(b)/2.)))\n            //vec3(col.xy,max(uv.x-uv.y,col.z)).yzx\n        ;\n    }\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float fmod(float a, float b){\n    /*\n    for(float i = 0.; i < mod(floor(a),8.); i++){\n        a += mod(floor(a/8.),8.)*i;\n    }\n    */\n    \n    //divide by powers of 2 to get an interesting rhythm\n    a -= mod(floor(a/128.),128.);\n    a -= mod(floor(a/64.),64.);\n    a -= mod(floor(a/32.),32.);\n    a -= mod(floor(a/16.),16.);\n    a -= mod(floor(a/8.),8.);\n    a -= mod(floor(a/4.),4.);\n    a -= mod(floor(a/2.),2.);\n\n    //a += mod(floor((a)/2.)*13.,2.);\n    //a += mod(floor((a)/2.)*17.,2.);\n    return mod(floor(-a),b);\n}\n\n//#define fmod(a,b) mod(floor(a)+floor((a)/2.)*2.+floor((a)/4.)*3.+floor((a)/8.)*5.+floor((a)/16.)*7.,b)\n\n\n\n\n\n//some other rhythms:\n\n//#define fmod(a,b) min(mod(floor(a)+floor((a)/2.)*2.+floor((a)/4.)*3.+floor((a)/8.)*5.+floor((a)/16.)*7.,b),mod(floor(a),b))\n//#define fmod(a,b) mod(floor(a),b)\n//#define fmod(a,b) mod(floor(a)+floor((a)/2.)+floor((a)/4.)+floor((a)/8.),b)\n//#define fmod(a,b) mod(floor(a)+floor((a)/2.)+floor(a*pow(2.,mod(floor(a),3.))),b)\n\nvec2 mainSound(int samp, float time){\n  \n  //time /= 64.*2.;\n  float s1 =\n      8.;\n  time = (time + floor(time*s1)/s1)/2.;\n  float\n  t= //varying tempo\n      (((time)/s1+max(fract(-time/2.),fract(time))/8.))/4./(1.+fmod(time*4.-floor(time/s1),2.)),\n  t1 = fmod(t,2.)\n  ;\n  t *=\n      (s1*s1)\n  ;\n  float a= //instruments\n      16.*pow(fract(-t),2.)\n  ,\n  nb = time*pow(2.,(1.+t1)*(2.+fmod(t/(1.+t1),s1)+1. + fmod(floor(t/s1),2.))/7.+5.);\n  return\n      abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a\n      //vec2(fract(time*nb*.998/m2*s1)*a,fract(time*nb/m2*s1)*a)\n  ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            },
            {
                "code": "//from https://www.shadertoy.com/view/dtGGzK\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = iMouse; //current mouse pos\n        \n        //if mouse button up\n        if (m.z < 0.0 && mp.z >= 0.0){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    fragColor = col;\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}