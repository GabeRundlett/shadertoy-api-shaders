{
    "Shader": {
        "info": {
            "date": "1686545220",
            "description": "Circle Music Visualizer V2",
            "flags": 0,
            "hasliked": 0,
            "id": "cdXcR8",
            "likes": 0,
            "name": "Fork Circle Mus notdaniel 215",
            "published": 3,
            "tags": [
                "musicvisualizer"
            ],
            "usePreview": 0,
            "username": "notdaniel",
            "viewed": 149
        },
        "renderpass": [
            {
                "code": "#define bars 70.0\t\t\t\t// How many buckets to divide spectrum into\n#define barSize 1.0 / bars\t\t// Constant to avoid division in main loop\n#define barGap 0.1 * barSize\t// 0.1 represents gap on both sides, so a bar is\n#define sampleSize 2.0\t\t\t// How accurately to sample spectrum, must be a factor of 1.0\n#define PI 3.14159265359\n#define circleRadius 0.4;\n\n// used\n// https://www.shadertoy.com/view/XdX3z2\n\n// atan2 en lerp:\n// http://http.developer.nvidia.com/Cg/index_stdlib.html\n\n// colors\n// https://color.adobe.com/nl/Mijn-Kuler-thema-color-theme-4149936/?showPublished=true\n\n#define c1 vec4(0.24)\t\t\t\t// grey\n#define c2 vec4(.71,.32,.36,1.0)\t// red\n#define c3 vec4(.91,.64, .0,1.0)\t// yello\n#define c4 vec4(.27,.48,.44,1.0)\t// green\n#define c5 vec4(.21,.40,.51,1.0)\t// blue\n\n#define colorOnCenter c3\n#define colorOff c5\n#define colorOn c2\n    \n\nfloat lerp(float a, float b, float t)\n{\n  return a + t*(b-a);\n}\n\nvec4 lerp(vec4 a, vec4 b, float t)\n{\n  return a + t*(b-a);\n}\n\nfloat atan2(float y, float x)\n{\n  float t0, t1, t2, t3, t4;\n\n  t3 = abs(x);\n  t1 = abs(y);\n  t0 = max(t3, t1);\n  t1 = min(t3, t1);\n  t3 = float(1) / t0;\n  t3 = t1 * t3;\n\n  t4 = t3 * t3;\n  t0 =         - float(0.013480470);\n  t0 = t0 * t4 + float(0.057477314);\n  t0 = t0 * t4 - float(0.121239071);\n  t0 = t0 * t4 + float(0.195635925);\n  t0 = t0 * t4 - float(0.332994597);\n  t0 = t0 * t4 + float(0.999995630);\n  t3 = t0 * t3;\n\n  t3 = (abs(y) > abs(x)) ? float(1.570796327) - t3 : t3;\n  t3 = (x < 0.0) ?  float(3.141592654) - t3 : t3;\n  t3 = (y < 0.0) ? -t3 : t3;\n\n  return t3;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // create pixel coordinates\n\tvec2 uv = fragCoord.xy / vec2(iResolution.y,iResolution.y);\n    \n    // calculate stuff\n    vec2 center = vec2((0.5*(iResolution.x/iResolution.y)),0.5);\n    float deltaYFromCenter = center.y - uv.y;\n    float deltaXFromCenter = center.x - uv.x;\n    \n    // create music map red (angle center)\n\tvec4 musicMap;\n    float angleFromCenter = atan2(deltaYFromCenter,deltaXFromCenter);  \n    musicMap.r = (angleFromCenter+PI)/(PI*2.0);\n    \n    // create music map blue (dist center)\n    float distFromCenter = sqrt((deltaYFromCenter*deltaYFromCenter)+(deltaXFromCenter*deltaXFromCenter));\n    float circleFromCenter = (distFromCenter*3.0);\n    circleFromCenter = circleFromCenter-circleRadius;\n    musicMap.b = circleFromCenter;\n    \n    if(musicMap.b < 0.0){\n        fragColor = colorOnCenter;\n    }else{\n\n        // use music map red\n        float musicChannelnput = texture( iChannel0, vec2( musicMap.r,0.0)).r;\n\n        // Get the starting x for this bar by rounding down\n        float barStart = floor(musicMap.r * bars) / bars;\n\n        // Sample spectrum in bar area, keep cumulative total\n        float intensity = 0.0;\n        for(float s = 0.0; s < barSize; s += barSize * sampleSize) {\n            intensity += texture(iChannel0, vec2(barStart + s, 0.0)).r;\n        }\n        intensity *= sampleSize;\n        if(musicMap.r - barStart < barGap || musicMap.r > barStart + barSize - barGap) {\n            intensity = 0.0;\n        }\n\n        // use music map blue\n        float onOff = musicMap.b-intensity;\n        onOff = clamp(onOff,-0.5,0.5); \n        onOff = floor(onOff+1.0);\n        fragColor = lerp(colorOn, colorOff,onOff);\n\n    }\n    // used to debug music map\n    // fragColor = musicMap;\n}\n\n\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}