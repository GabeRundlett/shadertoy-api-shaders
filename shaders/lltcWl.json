{
    "Shader": {
        "info": {
            "date": "1534711910",
            "description": "some colors for https://www.shadertoy.com/view/MtcGRl",
            "flags": 0,
            "hasliked": 0,
            "id": "lltcWl",
            "likes": 7,
            "name": "3d perlin noise with colors",
            "published": 3,
            "tags": [
                "perlinnoise"
            ],
            "usePreview": 0,
            "username": "stoox",
            "viewed": 1675
        },
        "renderpass": [
            {
                "code": "//original by LukeRissache: https://www.shadertoy.com/view/MtcGRl\n\nvec2 GetGradient(vec2 intPos, float t) {\n    \n    // Uncomment for calculated rand\n    //float rand = fract(sin(dot(intPos, vec2(12.9898, 78.233))) * 43758.5453);;\n    \n    // Texture-based rand (a bit faster on my GPU)\n    float rand = texture(iChannel0, intPos / 64.0).r;\n    \n    // Rotate gradient: random starting rotation, random rotation rate\n    float angle = 6.283185 * rand + 4.0 * t * rand;\n    return vec2(cos(angle), sin(angle));\n}\n\n\nfloat Pseudo3dNoise(vec3 pos) {\n    vec2 i = floor(pos.xy);\n    vec2 f = pos.xy - i;\n    vec2 blend = f * f * (3.0 - 2.0 * f);\n    float noiseVal = \n        mix(\n            mix(\n                dot(GetGradient(i + vec2(0, 0), pos.z), f - vec2(0, 0)),\n                dot(GetGradient(i + vec2(1, 0), pos.z), f - vec2(1, 0)),\n                blend.x),\n            mix(\n                dot(GetGradient(i + vec2(0, 1), pos.z), f - vec2(0, 1)),\n                dot(GetGradient(i + vec2(1, 1), pos.z), f - vec2(1, 1)),\n                blend.x),\n        blend.y\n    );\n    return noiseVal / 0.7; // normalize to about [-1..1]\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n\n\n    const int ITERATIONS = 10;\n    float noiseVal = 0.0;\n    float sum = 0.0;\n    float multiplier = 1.0;\n    for (int i = 0; i < ITERATIONS; i++) {\n        vec3 noisePos = vec3(vec2(2.0*uv.x+50.0*sin(0.01*iTime),2.0*uv.y+50.0*cos(0.01*iTime)), 0.02 * iTime / multiplier);\n        noiseVal += multiplier * abs(Pseudo3dNoise(noisePos));\n        sum += multiplier;\n        multiplier *= 0.6;\n        uv = 2.0 * uv + 4.3;\n    }\n    noiseVal /= sum;\n\n    // Map to a color palette\n    fragColor.rgb = 0.5 + 0.5 * cos(6.283185 * (3.0 * noiseVal + vec3(0.15, cos(0.0001*uv.x+0.1*iTime+0.1), sin(0.001*uv.y+0.2*iTime))));\n\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 15,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}