{
    "Shader": {
        "info": {
            "date": "1646066866",
            "description": "generates a random image every time. uses a simple algorithm, and looks amazing. looks much better  in full screen",
            "flags": 32,
            "hasliked": 0,
            "id": "NsSBWh",
            "likes": 15,
            "name": "Shattering Glass",
            "published": 3,
            "tags": [
                "2d",
                "blur",
                "color",
                "random",
                "glass",
                "multipass"
            ],
            "usePreview": 0,
            "username": "me_123",
            "viewed": 546
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n\tfragColor /= fragColor.w;\n    fragColor = 0.5/fragColor;\n    fragColor = pow(fragColor, vec4(4.0));\n    if (SHOW_RAW) {\n    \tfragColor = texelFetch(iChannel1, ivec2(fragCoord.xy), 0).xywz;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "//Chance of subdividing\n#define SPLIT_CHANCE 0.01\n\n//Chance of creating random cell\n#define NEW_CELL_CHANCE 0.0000001\n\n//show raw buffer values\n#define SHOW_RAW false\n\nfloat hash(vec2 p) {\n    p *= 0.01;\n    p = sin(p*vec2(138.512415, 535.2451124))*24.51323234234;\n    return fract(sin((p.x*p.y)*23.51245)*234.5512+0.1);\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//resolution and frame tracker\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n    ivec2 fc = ivec2(fragCoord);\n    if (fc == ivec2(0, 0))fragColor = vec4(fragColor.zw, iResolution.xy);\n    if (fc == ivec2(1, 0)) {\n        ivec4 r = ivec4(texelFetch(iChannel0, ivec2(0), 0));\n        fragColor += 1.0;\n        if (r.xy != r.zw) fragColor = vec4(0);\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    ivec2 fc = ivec2(fragCoord);\n    fragColor = texelFetch(iChannel0, fc, 0);\n    ivec4 r = ivec4(texelFetch(iChannel2, ivec2(0), 0));\n    if (r.xy != r.zw) { //resolution changes: \n    \tfragColor = vec4(-1);\n        return;\n    }\n    if (hash(fragCoord+0.0051+iTime) < NEW_CELL_CHANCE && iFrame%2 == 0) {\n        fragColor = vec4(fragCoord, normalize(vec2(hash(fragCoord+0.002), hash(fragCoord+0.003))-0.5)*hash(fragCoord+0.152));\n    } else {\n        if (iFrame == 0) fragColor = vec4(-1);\n    }\n    if (fragColor.w >= 1.0) {\n    \tfragColor.w += 1.0; // add to life time\n        fragColor.x = -hash(vec2(fragColor.z)); //component Z stays to velocity, so random value can be generated\n    } else {\n        for (int x = -1; x <= 1; x += 1) {\n            for (int y = -1; y <= 1; y += 1) {\n                //find pixel to move to\n                vec4 p = texelFetch(iChannel0, fc+ivec2(x, y), 0);\n                if (p.x > 0.0 && p.w < 1.0) {\n                    vec2 np = p.xy+p.zw;\n                    if ((fc == ivec2(round(np))||fc==ivec2(ceil(np)))&&(texelFetch(iChannel0, ivec2(np), 0).w<=5.0)) {\n                        fragColor = vec4(np, p.zw);\n                        return;\n                    } else {\n                        vec2 c = vec2(fragColor.zw);\n                        if (c.y != -1.)c = vec2(c.x, 2);\n                        fragColor = vec4(vec2(-1), c);\n                        if (hash(fragCoord.xy+0.125+iTime) < SPLIT_CHANCE) {\n                            //make perpindicular ray from point left or right\n                            mat2 m = hash(fragCoord.xy+0.1255+iTime) < 0.5 ? mat2(0, 1, -1, 0) : mat2(0, -1, 1, 0);\n                            fragColor = vec4(ivec2(fragCoord.xy), p.zw*m);\n                        } return;\n                    }\n                }\n            }\n        }\n    }\n}\n",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "const vec3[5] r = vec3[5](vec3(0.15, 0.2, 0.5), vec3(0.0, 0.3, 0.27), vec3(0.5, 0.05, 0.05), vec3(0, 0, 0), vec3(0.5, 0.1, 0.25));\nvec3 color(in float p) { // color map\n\tint c = int(p*5.);\n    float f = fract(p*5.);\n    return vec3(mix(r[c], r[(c+1)%5], f));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec4 r = ivec4(texelFetch(iChannel2, ivec2(0), 0));\n    if (r.xy != r.zw) {\n    \tfragColor = vec4(1);\n        return;\n    }\n    vec2 of = fragCoord;\n    \n    float t = texelFetch(iChannel2, ivec2(1, 0), 0).x/60.;\n    \n    //multipass box blur\n    fragCoord += (vec2(hash(fragCoord+iTime), hash(fragCoord+0.1+iTime))-0.5)*float(pow(t*0.2, 2.0));\n    \n    fragColor = texelFetch(iChannel1, ivec2(of), 0);\n    \n    //\n    float l = texelFetch(iChannel0, ivec2(fragCoord.xy), 0).x;\n    float h = abs(l); //decode random ID\n    vec3 c = vec3(1);\n    if (h != 1.0)c = color(h); //map color to ray\n    fragColor += vec4(c, 1.);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 259,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer02.png"
                    }
                ],
                "name": "Buffer C",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 259
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}