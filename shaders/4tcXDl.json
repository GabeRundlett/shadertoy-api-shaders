{
    "Shader": {
        "info": {
            "date": "1495751492",
            "description": "http://wealoneonearth.blogspot.co.uk/2011/11/visual-analogue-of-shepard-tone.html",
            "flags": 0,
            "hasliked": 0,
            "id": "4tcXDl",
            "likes": 16,
            "name": "Quasicrystal zoom",
            "published": 3,
            "tags": [
                "fractal",
                "quasicrystal",
                "zoom",
                "shepardscale",
                "shepard"
            ],
            "usePreview": 0,
            "username": "sheepmaster",
            "viewed": 861
        },
        "renderpass": [
            {
                "code": "// Number of plane waves\nconst int K = 5;\n\n// Number of stripes per wave\nconst int NUM_STRIPES = 3;\n\nconst int NUM_FREQUENCIES = 8;\n\n// The main (central) spatial frequency\nconst float MEAN_FREQUENCY = 4.;\n\n// The spread of the spatial frequency envelope\nconst float SIGMA = 1.;\n\nconst float PERIOD = 3.;\n\nconst float PI = 4.0 * atan(1.0);\n\nconst float mean = MEAN_FREQUENCY * log(2.);\n\nfloat gaussian(float x) {\n    x -= mean;\n    return exp(-x * x / 2.) / SIGMA;\n}\n\n// Adjust the  wavelengths for the current spatial scale\nfloat wavelength(int i, float sc) {\n    return pow(2., float(i)) * sc;\n}\n\n// Modulate each wavelength by a Gaussian envelope in log\n// frequency, centered around aforementioned mean with defined\n// standard deviation\nfloat weight(int i, float sc) {\n    return gaussian(log(wavelength(i, sc)));\n}\n\n// 7-th order smoothstep function:\n// https://en.wikipedia.org/wiki/Smoothstep\n// https://gist.github.com/kylemcdonald/77f916240756a8cfebef\nfloat superSmooth(float x) {\n\tfloat xSquared = x * x;\n\treturn xSquared * xSquared * (x * (x * (x * -20. + 70.) - 84.) + 35.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tfloat scale = pow(0.5, fract(iTime / PERIOD));\n\n    float weightSum = 0.;\n    for (int l = 0; l < NUM_FREQUENCIES; l++) {\n        weightSum += weight(l, scale);\n    }\n    \n    // Cartesian coordinates\n\tvec2 coords = (fragCoord.xy - iResolution.xy / 2.) / iResolution.x\n        * 2. * PI * float(NUM_STRIPES);\n\n    float c = 0.;  // Accumulator\n    \n    // Iterate over all k plane waves\n    for (int t = 0; t < K; t++) {\n    \tfloat tScaled = float(t) / float(K) * PI;\n        vec2 omega = vec2(cos(tScaled), sin(tScaled));\n\n        // Compute the phase of the plane wave\n        float ph = dot(coords, omega);\n\n        // Take a weighted sum over the different spatial scales\n        for (int l = 0; l < NUM_FREQUENCIES; l++) {\n\t\t\tc += cos(ph * wavelength(l, scale)) * weight(l, scale);\n        }\n    }\n    // Convert the summed waves to a [0,1] interval\n    // and then convert to color\n    float cScaled = superSmooth((c / (weightSum * float(K)) + 1.) / 2.);\n\tvec3 color = cScaled * vec3(1.0, 0.0, 1.0);\n\n\tfragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}