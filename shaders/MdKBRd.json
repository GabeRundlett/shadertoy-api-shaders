{
    "Shader": {
        "info": {
            "date": "1530084466",
            "description": "So, I got back from learning concepts and stuff, so now I have  made this. :) It gives the illusion of a hollow yellow pyramid with the bottom part taken out, however, the yellow square is actually behind the red square. kek bai",
            "flags": 0,
            "hasliked": 0,
            "id": "MdKBRd",
            "likes": 4,
            "name": "Vault Illusion! :)",
            "published": 3,
            "tags": [
                "illusionshaderbabything"
            ],
            "usePreview": 0,
            "username": "Imsure1200q_1UWE130",
            "viewed": 643
        },
        "renderpass": [
            {
                "code": "const float PI = 3.141592653589793238462643383279502884197189399375102;\n\nstruct Rect {\n    float xMin;\n    float xMax;\n    float yMin;\n    float yMax;\n    float rotation;\n    vec4 col;\n};\n    \nvec4 drawRect(Rect rect, vec4 col, vec4 col1, vec2 pxCoords) {\n    vec2 center = vec2((rect.xMin+rect.xMax)/2.,(rect.yMin+rect.yMax)/2.);\n    vec2 centeredCoords = pxCoords - center;\n    float mag = sqrt(centeredCoords.x*centeredCoords.x+centeredCoords.y*centeredCoords.y);\n    float atangent = atan(centeredCoords.y/centeredCoords.x);\n    vec2 rotatedCoords = vec2(mag*cos(rect.rotation+atangent),\n                              mag*sin(rect.rotation+atangent));\n    rotatedCoords += center;\n    //vec2 rotatedCoords = pxCoords;\n    if(rotatedCoords.x >= rect.xMin && rotatedCoords.x <= rect.xMax &&\n       rotatedCoords.y >= rect.yMin && rotatedCoords.y <= rect.yMax) {\n        return col;\n    } else {\n        return col1;\n    }\n}\n\nfloat sqDiag(float s) {\n    return sqrt(2.*s*s);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sm = 0.0000;\n    //float divsm = 1.1+((sin(iTime)+1.)/2.)/20.; //slow\n    //float divsm = 1.1+((sin(iTime)+1.)/2.)/30.; //slower\n    //float divsm = 1.1+((sin(iTime)+1.)/2.)/5.; //illusion might change\n    float divsm = 1.1; // normal\n    float s10 = (0.1 - sm)/divsm;\n    float s9 = (sqDiag(s10)-sm)/divsm;\n    float s8 = (sqDiag(s9)-sm)/divsm;\n    float s7 = (sqDiag(s8)-sm)/divsm;\n    float s6 = (sqDiag(s7)-sm)/divsm;\n    float s5 = (sqDiag(s6)-sm)/divsm;\n    float s4 = (sqDiag(s5)-sm)/divsm;\n    float s3 = (sqDiag(s4)-sm)/divsm;\n    float s2 = (sqDiag(s3)-sm)/divsm;\n    float s1 = (sqDiag(s2)-sm)/divsm;\n    Rect rect1 = Rect(-s1, s1, -s1, s1, 6.5*iTime, vec4(0.));\n    Rect rect2 = Rect(-s2, s2, -s2, s2, 6.*iTime+PI/4., vec4(1.0));\n    Rect rect3 = Rect(-s3, s3, -s3, s3, 4.5*iTime, vec4(1.0));\n    Rect rect4 = Rect(-s4, s4, -s4, s4, 4.*iTime+PI/4., vec4(0.));\n    Rect rect5 = Rect(-s5, s5, -s5, s5,3.5*iTime,vec4(0.));\n    Rect rect6 = Rect(-s6, s6, -s6, s6,3.*iTime+PI/4.,vec4(0.));\n    Rect rect7 = Rect(-s7, s7, -s7, s7,2.5*iTime,vec4(0.));\n    Rect rect8 = Rect(-s8, s8, -s8, s8,2.*iTime+PI/4.,vec4(0.));\n    Rect rect9 = Rect(-s9, s9, -s9, s9,1.5*iTime,vec4(0.));\n    Rect rect10 = Rect(-s10, s10, -s10, s10,iTime+PI/4.,vec4(0.));\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    //vec3 col = vec3(0.13);\n    vec3 finalCol = col;\n    finalCol *= 1.0 - 0.1*length(uv);\n\n    // Output to screen\n    rect1.col = drawRect(rect1, vec4(1.,1.,0.,1.), vec4(finalCol, 1.0), uv);\n    rect2.col = drawRect(rect2, vec4(1.,0.9,0.,1.), vec4(rect1.col), uv);\n    rect3.col = drawRect(rect3, vec4(1.,0.8,0.,1.), vec4(rect2.col), uv);\n    rect4.col = drawRect(rect4, vec4(1.,0.7,0.,1.), vec4(rect3.col), uv);\n    rect5.col = drawRect(rect5, vec4(1.,0.6,0.,1.), vec4(rect4.col), uv);\n    rect6.col = drawRect(rect6, vec4(1.,0.5,0.,1.), vec4(rect5.col), uv);\n    rect7.col = drawRect(rect7, vec4(1.,0.4,0.,1.), vec4(rect6.col), uv);\n    rect8.col = drawRect(rect8, vec4(1.,0.3,0.,1.), vec4(rect7.col), uv);\n    rect9.col = drawRect(rect9, vec4(1.,0.2,0.,1.), vec4(rect8.col), uv);\n    rect10.col = drawRect(rect10, vec4(1.,0.1,0.,1.), vec4(rect9.col), uv);\n    \n    finalCol = rect10.col.rgb;\n    \n    fragColor = vec4(finalCol, 1.0);\n}\n\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}