{
    "Shader": {
        "info": {
            "date": "1724884436",
            "description": "test",
            "flags": 0,
            "hasliked": 0,
            "id": "XfjfDh",
            "likes": 1,
            "name": "cool effect thing",
            "published": 3,
            "tags": [
                "voronoi"
            ],
            "usePreview": 0,
            "username": "NameGoesThere",
            "viewed": 64
        },
        "renderpass": [
            {
                "code": "//mini\nfloat noise1(float seed1,float seed2){\nreturn(\nfract(seed1+12.34567*\nfract(100.*(abs(seed1*0.91)+seed2+94.68)*\nfract((abs(seed2*0.41)+45.46)*\nfract((abs(seed2)+757.21)*\nfract(seed1*0.0171))))))\n* 1.0038 - 0.00185;\n}\n\n\n//3 seeds\nfloat noise2(float seed1,float seed2,float seed3){\nfloat buff1 = abs(seed1+100.81) + 1000.3;\nfloat buff2 = abs(seed2+100.45) + 1000.2;\nfloat buff3 = abs(noise1(seed1, seed2)+seed3) + 1000.1;\nbuff1 = (buff3*fract(buff2*fract(buff1*fract(buff2*0.146))));\nbuff2 = (buff2*fract(buff2*fract(buff1+buff2*fract(buff3*0.52))));\nbuff1 = noise1(buff1, buff2);\nreturn(buff1);\n}\n\nconst int MAXPOINTS = 24; // Will be squared in the final output\nvec2 points[MAXPOINTS * MAXPOINTS];\n\nint get_nearest(float x, float y)\n{\n    int nearest = 0;\n    for (int i = 0; i < MAXPOINTS * MAXPOINTS; ++i)\n    {\n        float point_distance = distance(vec2(x, y), points[i]);\n        if (point_distance < distance(vec2(x, y), points[nearest]))\n        {\n            nearest = i;\n        }\n    }\n    return nearest;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    int i = 0;\n    for (int x = 0; x < MAXPOINTS; ++x)\n    {\n        for (int y = 0; y < MAXPOINTS; ++y)\n        {\n            points[i++] = vec2(\n            noise2(float(iFrame), float(x), float(y)),\n            noise2(float(iFrame), float(y), float(x))\n            );\n        }\n    }\n\n    vec4 col = texture(iChannel0, points[get_nearest(uv.x, uv.y)]);\n\n    fragColor = vec4(col);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "video",
                        "id": 29,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}