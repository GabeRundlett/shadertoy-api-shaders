{
    "Shader": {
        "info": {
            "date": "1662149603",
            "description": "I played a bit with a paraboloid function that I learned and tried to draw it with a simple ray marching.",
            "flags": 0,
            "hasliked": 0,
            "id": "7tVyWy",
            "likes": 1,
            "name": "009 - SDF Paraboloid at Z",
            "published": 3,
            "tags": [
                "mouse",
                "beginner",
                "paraboloid"
            ],
            "usePreview": 0,
            "username": "PiGIon",
            "viewed": 185
        },
        "renderpass": [
            {
                "code": "// 2022.09.02\n\n#define PI 3.14159265\n\nfloat constCycle(float perSecond, float range) {\n    return ((iTime + iTimeDelta) * perSecond) * range;\n}\n\n// sined distance function of a paraboloid at Z\n// https://en.wikipedia.org/wiki/Signed_distance_function\nfloat paraboloidZSDF(vec3 p, float a, float b) {\n    return (pow(p.x, 2.)/pow(a, 2.)) + (pow(p.y, 2.)/pow(b, 2.)) - p.z;\n}\n\n// from https://scrapbox.io/sayachang/fragments_of_fragment_shaders\nvec3 rotX(vec3 p,float a){return vec3(p.x,p.y*cos(a)-p.z*sin(a),p.y*sin(a)+p.z*cos(a));}\nvec3 rotY(vec3 p,float a){return vec3(p.x*cos(a)-p.z*sin(a),p.y,p.x*sin(a)+p.z*cos(a));}\n\nvec3 mouseRot(vec2 mouseScale, vec3 v) {\n    return rotX(rotY(v, -mouseScale.x * PI), -mouseScale.y * PI);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouseScale = vec2((iMouse.x / iResolution.x) - 0.5, (iMouse.y / iResolution.y) - 0.5);\n    \n    if (length(iMouse) == 0.) {\n        mouseScale = vec2(((iResolution.x/2.) / iResolution.x) - 0.5, ((iResolution.y/2.) / iResolution.y) - 0.5);\n    }\n    \n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    \n    vec3 eyes = vec3(0., 0., -5.);\n    vec3 dir = normalize( vec3( uv, 1. ) );\n\n    vec3 ray;\n    float t = 0.0;\n    for (int i = 0; i < 32; i++) {\n        ray = mouseRot(mouseScale, eyes + dir * t);\n\n        float dist = paraboloidZSDF(ray, 1., 2.);\n\n    \tif(dist < 0.001) break;\n\n\t\tt += dist;\n    }\n\n    fragColor = vec4(normalize(ray), 1.);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}