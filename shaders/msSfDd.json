{
    "Shader": {
        "info": {
            "date": "1690271281",
            "description": "Random test",
            "flags": 0,
            "hasliked": 0,
            "id": "msSfDd",
            "likes": 2,
            "name": "Spherical Slider Test",
            "published": 3,
            "tags": [
                "2d"
            ],
            "usePreview": 0,
            "username": "Karp",
            "viewed": 107
        },
        "renderpass": [
            {
                "code": "///UV\nvec2 CenterUV(vec2 fragCoord)\n{\n    ///Centering Operation\n\tvec2 uv = vec2( fragCoord.xy - 0.5*iResolution.xy );\n\t// [0, iResolution.x] -> [-0.5*iResolution.x, 0.5*iResolution.x]\n\t// [0, iResolution.y] -> [-0.5*iResolution.y, 0.5*iResolution.y]\n    return uv;\n}\nvec2 AspectRatioUV(vec2 fragCoord)\n{\t\n    vec2 uv = CenterUV(fragCoord.xy);\n\tuv = 2.0 * uv.xy / iResolution.y;\n    // AspectRatio = 1920/1080 = 1.778\n    // [-iResolution.x/2, iResolution.x/2] ->[-1.778, 1.778]\n\t// [-iResolution.y/2, iResolution.y/2] ->[-1, 1]\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // UV manipulation\n    vec2 uv = AspectRatioUV(fragCoord.xy);\n    \n    vec2 center = iResolution.xy /2.0;\n    vec2 mousePos = iMouse.xy;\n    vec2 toHandle = normalize(mousePos - center);\n    \n    float value = atan(toHandle.x, -toHandle.y);\n    value /= PI;\n    value = 1. - value;\n    \n    //value = atan(normalize(mousePos - center));\n    float AA = 0.05;\n    //Visu\n    vec3 pix = vec3(uv,0);\n    pix = vec3(1.0);\n\n    float angle = iTime * 90.0;\n    angle = value * PI;\n    \n    //BackGround\n    float circleMask = Disk(uv,vec2(0.), 0.85, AA);\n    pix = mix(vec3(0.85, 0.83, 0.93), pix, circleMask);\n    \n    //Handle\n    \n    vec2 pos = vec2(sin(angle),cos(angle)) * 0.75;\n    float BgMask = Disk(uv,pos, 0.45, AA);\n    pix = mix(vec3(0.48, 0.65, 0.96), pix, BgMask);\n    BgMask = Disk(uv,pos, 0.25, AA);\n    pix = mix(vec3(0.38, 0.4, 0.97), pix, BgMask);\n\n    \n    pos = vec2(sin(angle),cos(angle)) * 0.75;\n    circleMask = Disk(uv,pos, 0.09, AA);\n    pix = mix(vec3(1.0), pix, circleMask);\n    circleMask = Disk(uv,pos, 0.07, AA);\n    pix = mix(vec3(0.45, 0.25, 0.92), pix, circleMask);\n    \n    \n    circleMask = Disk(uv,vec2(0.), 0.65, AA);\n    pix = mix(vec3(0.7, 0.62, 0.93), pix, circleMask);\n    \n    //Pie\n    vec2 rotUv = RotateUV(uv, -angle/2.);\n    float pieMask = Pie(rotUv, vec2(0), angle/2., 0.65, AA);\n    pix = mix(vec3(0.45, 0.25, 0.92), pix, pieMask);  \n    \n     \n    for(int i = 0; i < 24; i++)\n    {\n        float val = TAU/24.; \n        pos = vec2(sin(val * float(i)),cos(val * float(i))) * 0.5;\n        \n        circleMask = Disk(uv, pos, 0.02, AA);\n        pix = mix(vec3(0.56, 0.44, 0.83),pix, circleMask);\n    } \n    \n    //BackGround\n    circleMask = Disk(uv,vec2(0.), 0.85, AA);\n    pix = mix(vec3(1.), pix, (1.-circleMask));\n    \n\tfragColor = vec4(pix, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define PI  3.14159265359\n#define TAU 6.28318530717\n\n//HELPER\nfloat Clamp01(float value)\n{\n    return clamp(value,0.0,1.0);\n}\n\n///Inigo Quilez Signed Distance Field\n//https://iquilezles.org/articles/distfunctions2d\n///Playlist shadertoy SDF : \n//https://www.shadertoy.com/playlist/MXdSRf&from=36&num=12\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\nfloat sdPie( in vec2 p, in vec2 c, in float r )\n{\n    p.x = abs(p.x);\n    float l = length(p) - r;\n    float m = length(p-c*clamp(dot(p,c),0.0,r)); // c=sin/cos of aperture\n    return max(l,m*sign(c.y*p.x-c.x*p.y));\n}\n\n//2DShape\nfloat Disk(vec2 uv, vec2 center, float radius, float blur) \n{\n    float sdfCircle = length(uv-center)-radius;\n\treturn Clamp01(sdfCircle * (10.0/blur));\n}\nfloat Pie(vec2 uv, vec2 center, float angle,float radius, float blur) \n{\n \n    vec2 pos = uv-center;\n    float sdfPie = sdPie( pos, vec2(sin(angle),cos(angle)), radius);\n\treturn Clamp01(sdfPie * (10.0/blur));\n}\n\n///COLOR\nvec3 HSVcolor(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//UV\nvec2 RotateUV(vec2 uv, float angle)\n{\t\n    return uv * mat2( cos(angle), sin(angle),\n                     -sin(angle), cos(angle));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            }
        ],
        "ver": "0.1"
    }
}