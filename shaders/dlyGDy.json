{
    "Shader": {
        "info": {
            "date": "1684555428",
            "description": "An arabesque knot pattern.",
            "flags": 8,
            "hasliked": 0,
            "id": "dlyGDy",
            "likes": 3,
            "name": "Arabesque knots 4",
            "published": 3,
            "tags": [
                "fractal",
                "music",
                "arabesque"
            ],
            "usePreview": 0,
            "username": "jarble",
            "viewed": 183
        },
        "renderpass": [
            {
                "code": "vec2 triangle_wave(vec2 a){\n    //a += 1./2.;\n    vec2 a2 =\n        vec2(1.,0.5)\n    ,\n    a1 = a+a2;\n    return\n        abs(fract((a1)*(a2.x+a2.y))-.5)\n    ;\n}\n\n\n#define triwave_(p) abs(fract(.5+p/4.0)-.5)*2.\n#define triwave1_(p) (abs(fract(p/8.0)-.5)-abs(fract(p/2.0)-.5)/2.)\nfloat t1_(vec2 c, vec2 p){\n    return triwave_((.5 - length( min(p=fract(p*sign(triwave1_(c*c.y))), 1.-p.yx) )));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = .5;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    if(iMouse.z>.5)\n    uv = uv.xy + iMouse.xy / iResolution.xy/t1;\n    vec2 t2 = vec2(0.);\n    for(int k = 0; k < 6; k++){\n        //uv.x += t1_(floor(uv),floor(uv));\n        uv =\n            (.5+uv+t2)/1.5\n        ;\n        //if(uv.x>uv.y)\n        uv.x += .5;\n        t2 =\n            triangle_wave(-uv+.5)\n        ;\n        uv =\n            t2-triangle_wave(-uv.yx)\n        ;\n        {t2 = t2.yx; uv=\n            uv.yx\n            //uv.yx-fract(uv.x/4.)\n            ;\n        }\n        //if(t2.y<t2.x)\n        col =\n            vec3(col.zx,abs(uv.x*sign(t2.x-t2.y)-uv.y))\n            //vec3(col.zx,max(col.x,abs(uv.x*sign(t2.x-t2.y)-uv.y)))\n        ;\n        //if(k%3 == 0 && uv.x>uv.y) {uv = -uv;break;}\n\n    }\n    fragColor = vec4(col*2.,1.0);\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "float m1(float a, float b, float c){\n    return floor(floor(floor(a)/b)/c);\n}\n\nfloat mod1(float a,float b){\n    return\n        mod(a,b)\n        //mod(a+floor(b*13./3.),b)\n    ;\n}\n\nvoid distort(inout float a, inout float b){\n    for(float i = 1.; i < mod(floor(a/b),3.); i++){\n        a /= 2.;\n        a += mod1(floor(a/2.),b);\n    }\n}\n\nfloat fmod1(float a, float b){\n    //distort(a,b);\n    //a += m1(a,3.+b,5.+b);\n    //a += floor(a*8./b)/b;\n    //a += pow(2.,mod(floor(a/8.),b));\n    return\n        floor(sqrt(mod1(floor(-a/8.),b)*mod1(floor(a*b),b)))\n        //floor(sqrt(mod(floor(-a/8.),b)*mod(floor(a*b+b/8.),b)))\n        //floor(sqrt(mod(floor(-a/8.),floor(b/2.)+4.)*mod(floor(a*b),floor(b/2.)+4.)))\n        //floor(sqrt(b*mod(floor(a*b),b)))\n    ;\n}\n\nfloat fmod(float a, float b){\n    //a += mod(a,5.)-mod(a,3.);\n    return\n        fmod1(a,b)\n        //fmod1(a+b/8.,b)\n        //fmod1(a+fmod1(a,b)/2.,b)\n    ;\n}\n\nvec2 mainSound(int samp, float t){\n  float tempo = 1.;\n  t /= tempo;\n  t += floor(t*pow(2.,fmod(t/4.,4.)))/pow(2.,fmod(t/4.,4.));\n  float s1 =\n      8.\n  ;\n  /*\n  for(int i = 0; i < 3; i++){\n      t += floor(t/2.)/2.;\n  }\n  */\n  float p1 = 1. + floor(mod((1.+t/4.)/2.,2.));\n  t *= p1/2.;\n  \n  float a=\n      //64.*pow((1.-sqrt(fract(t*p1))),2.)\n      pow((2.-log(fract(t*p1))),2.)/2.\n  ,\n  nb = t*tempo*pow(2.,(2.+fmod(t,s1)+1. + fmod(floor(t/s1),2.))/5.+7.)/p1;\n  return\n      abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a\n      \n      //sitar\n      //log(abs(a/16.-abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a))\n      \n      //abs(1.+log(abs(.5-vec2(fract(nb*.998*2.),fract(nb)))*a))/2.\n      //abs(1./16.-abs(.5-vec2(fract(nb*.998*2.),fract(nb))))*a\n  ;\n}",
                "description": "",
                "inputs": [],
                "name": "Sound",
                "outputs": [],
                "type": "sound"
            }
        ],
        "ver": "0.1"
    }
}