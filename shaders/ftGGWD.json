{
    "Shader": {
        "info": {
            "date": "1637671169",
            "description": "Colorful worm slithering (driven by pseudo-peristalsis)",
            "flags": 0,
            "hasliked": 0,
            "id": "ftGGWD",
            "likes": 14,
            "name": "Slithering Worm",
            "published": 3,
            "tags": [
                "snake",
                "motion",
                "coordinates",
                "transcendental"
            ],
            "usePreview": 0,
            "username": "dr2",
            "viewed": 344
        },
        "renderpass": [
            {
                "code": "// \"Slithering Worm\" by dr2 - 2021\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat Minv2 (vec2 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 sunDir, qHit;\nfloat tCur, dstFar, tCyc, nCyc, segRot;\nconst float nSeg = 8.;\nint idObj;\nconst float pi = 3.1415927;\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nstruct Arc {\n  vec2 cs, css;\n  float chDist, ang, rad;\n};\nArc arc;\n\n#define F(x) (sin (x) / x - b)\n\nfloat SecSolve (float b)\n{  // (from \"Robotic Head\") \n  vec3 t;\n  vec2 f;\n  t.yz = vec2 (0.7, 1.2);\n  f = vec2 (F(t.y), F(t.z));\n  for (int nIt = 0; nIt < 4; nIt ++) {\n    t.x = (t.z * f.x - t.y * f.y) / (f.x - f.y);\n    t.zy = t.yx;\n    f = vec2 (F(t.x), f.x);\n  }\n  return t.x;\n}\n\nvoid ArcConf ()\n{\n  vec2 u;\n  float arcLen, arcEx, chLen, len, sep;\n  len = 2.;\n  sep = 1.;\n  arcEx = 1.;\n  arcLen = arcEx * length (vec2 (len, sep));\n  u = vec2 (len * sin (0.5 * segRot), sep);\n  chLen = length (u);\n  arc.ang = SecSolve (chLen / arcLen);\n  arc.chDist = chLen / tan (arc.ang);\n  arc.rad = sqrt (arc.chDist * arc.chDist + chLen * chLen);\n  arc.cs = sin (- arc.ang + vec2 (0.5 * pi, 0.));\n  arc.css = sin (- arc.ang - 0.002 + vec2 (0.5 * pi, 0.));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  vec2 cs;\n  float dMin, d, tRad, tBmp, s, da, rr, nc;\n  dMin = dstFar;\n  tRad = 0.5;\n  tBmp = 0.05;\n  da = 63. / (2. * arc.ang);\n  nCyc = floor (tCur / tCyc);\n  cs = sin (arc.ang * (1. - 2. * (tCur / tCyc - nCyc)) + vec2 (0.5 * pi, 0.));\n  p.y -= tRad + tBmp;\n  nc = floor (nCyc / 2.);\n  s = sign (nCyc - 2. * nc - 0.5);\n  rr = arc.rad * arc.cs.y;\n  p.x += (4. * nc + s - 2. - mod (nSeg, 2.)) * rr;\n  p.yz = p.zy;\n  p.xy *= vec2 (-1., s);\n  for (float k = float (VAR_ZERO); k < nSeg; k ++) {\n    q = p;\n    q.y *= - sign (mod (k, 2.) - 0.5);\n    q.xy -= vec2 (rr * (2. * k - nSeg + 0.5), - arc.chDist);\n    d = dot (vec2 (abs (q.x), q.y), arc.css);\n    d = max (length (vec2 (length (q.xy) - arc.rad, q.z)) - tRad + tBmp * (1. -\n       smoothstep (0.1, 0.4, 0.5 - abs (0.5 -  mod (da * (atan (q.x, q.y) / (2. * pi)), 1.)))), d);\n    if (k == 0. || k == nSeg - 1.) d = max (d, - sign (k - 0.5) * dot (q.xy, cs * vec2 (1., -1.)));\n    DMINQ (1);\n    if (k == 0. || k == nSeg - 1.) {\n      q.xy = Rot2Cs (q.xy, cs);\n      q.y -= arc.rad;\n      d = PrCapsDf (q.yzx, tRad + tBmp, 0.1);\n      DMINQ (2);\n    }\n  }\n  return dMin;\n}\n\nfloat GrObjDf (vec2 pg)\n{\n  vec3 p, q;\n  vec2 dkMin, cs;\n  float d, tRad, s, rr, nc;\n  dkMin = vec2 (dstFar, 0.);\n  tRad = 0.5 - 0.15;\n  nCyc = floor (tCur / tCyc);\n  cs = sin (arc.ang * (1. - 2. * (tCur / tCyc - nCyc)) + vec2 (0.5 * pi, 0.));\n  p.xz = pg;\n  p.y = 0.;\n  nc = floor (nCyc / 2.);\n  s = sign (nCyc - 2. * nc - 0.5);\n  rr = arc.rad * arc.cs.y;\n  p.x += (4. * nc + s - 2. - mod (nSeg, 2.)) * rr;\n  p.yz = p.zy;\n  p.xy *= vec2 (-1., s);\n  for (float k = float (VAR_ZERO) - 2. * nSeg; k < nSeg; k ++) {\n    q = p;\n    q.y *= - sign (mod (k, 2.) - 0.5);\n    q.xy -= vec2 (rr * (2. * k - nSeg + 0.5), - arc.chDist);\n    d = dot (vec2 (abs (q.x), q.y), arc.css);\n    d = max (length (vec2 (length (q.xy) - arc.rad, q.z)) - tRad, d);\n    if (k == - 2. * nSeg || k == nSeg - 1.) d = max (d, - sign (k - 0.5) *\n       dot (q.xy, cs * vec2 (1., -1.)));\n    if (d < dkMin.x) dkMin = vec2 (d, k);\n    if (k == - 2. * nSeg || k == nSeg - 1.) {\n      q.xy = Rot2Cs (q.xy, cs);\n      q.y -= arc.rad;\n      d = PrCapsDf (q.yzx, tRad, 0.1);\n      if (d < dkMin.x) dkMin = vec2 (d, k);\n    }\n  }\n  dkMin.y = 1. + min (dkMin.y / nSeg, 0.) / 2.;\n  return dkMin.y * step (dkMin.x, 0.);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    if (d < 0.0005 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.3, 0.4, 0.5);\n  } else {\n    q = 0.02 * (ro.xz + 2. * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, sunDir), 0.);\n    skCol = vec3 (0.3, 0.4, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) *\n       min (0.3 * pow (sd, 64.) + 0.5 * pow (sd, 2048.), 1.);\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nfloat GrndHtN (vec2 p)\n{\n  return 0.3 * Fbm2 (2. * p);\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  return normalize (vec3 (GrndHtN (p.xz) - vec2 (GrndHtN (p.xz + e.xy),\n     GrndHtN (p.xz + e.yx)), e.x)).xzy;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4, hCol4, bCol4, sCol4;\n  vec3 col, vn;\n  float dstObj, dstGrnd, nDotL, sh, s, f;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    bCol4 = vec4 (0.8, 0.6, 0.2, 0.2);\n    hCol4 = vec4 (0., 0.5, 1., 0.2);\n    sCol4 = vec4 (1., 1., 1., 0.3);\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) {\n      qHit.xy = Rot2Cs (qHit.xy, sin (arc.ang * (1. - 2. * (tCur / tCyc - nCyc)) +\n         vec2 (0.5 * pi, 0.)));\n      s = abs (length (qHit.xy) - arc.rad);\n      f = Minv2 (Rot2D (0.5 - abs (0.5 - mod (4. * atan (qHit.xz, vec2 (qHit.y, s)) /\n         vec2 (arc.ang, pi), 1.)), 0.25 * pi));\n      col4 = mix (bCol4, hCol4, smoothstep (0., 0.03, f + 0.05));\n      if (qHit.z > 0.) col4 = mix (sCol4, col4, smoothstep (0., 0.03, s - 0.03));\n    } else if (idObj == 2) {\n      if (qHit.x > 0.) {\n        col4 = bCol4 * (0.3 + 0.7 * smoothstep (0., 0.03, PrRoundBox2Df (qHit.yz,\n           vec2 (0., 0.13), 0.02)));\n      } else {\n        col4 = bCol4 * (0.3 + 0.7 * smoothstep (0., 0.03, PrRoundBox2Df (qHit.yz -\n           vec2 (0., -0.2), vec2 (0.3, 0.), 0.02)));\n        col4 = mix (vec4 (1., 0., 0., -1.), col4, step (0.1,\n           length (vec2 (abs (qHit.y) - 0.2, qHit.z - 0.1))));\n      }\n      col4 = mix (hCol4, col4, smoothstep (0., 0.03, abs (abs (qHit.x) - 0.25) - 0.15));\n      if (qHit.z > 0. && abs (qHit.x) < 0.5) col4 = mix (sCol4, col4,\n         smoothstep (0., 0.03, abs (qHit.y) - 0.03));\n    }\n  } else if (rd.y < 0.) {\n    dstGrnd = - ro.y / rd.y;\n    ro += dstGrnd * rd;\n    col4 = 0.6 * mix (vec4 (1., 0.8, 0.5, 0.), vec4 (0.9, 0.7, 0.5, 0.), 0.2 +\n       0.8 * smoothstep (0.3, 0.7, Fbm2 (2. * ro.xz)));\n    f = 1. - smoothstep (0.4, 0.7, dstGrnd / dstFar);\n    vn = GrndNf (ro);\n    s = GrObjDf (ro.xz);\n    col4 *= 1. - 0.1 * s;\n    vn = VaryNf (8. * ro, vn, 2. * f + 8. * s);\n  } else {\n    col = SkyBgCol (ro, rd);\n  }\n  if (dstObj < dstFar || rd.y < 0.) { \n    if (col4.a >= 0.) {\n      nDotL = max (dot (vn, sunDir), 0.);\n      if (dstObj < dstFar && idObj == 1) nDotL *= nDotL;\n      sh = (rd.y < 0.) ? ObjSShadow (ro + 0.01 * vn, sunDir) : 1.;\n      col = col4.rgb * (0.3 + 0.7 * sh * nDotL) +\n         col4.a * step (0.95, sh) * pow (max (dot (sunDir, reflect (rd, vn)), 0.), 32.);\n      col = mix (col, vec3 (0.3, 0.4, 0.5), pow (1. + rd.y, 16.));\n    } else col = col4.rgb * (0.5 + 0.5 * max (- dot (rd, vn), 0.));\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0   // optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.;\n  el = -0.13 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az -= 0.03 * pi * tCur;\n    el -= 0.1 * pi * sin (0.02 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, -0.05 * pi);\n  vuMat = StdVuMat (el, az);\n  tCyc = 4.;\n  segRot = pi * (0.4 + 0.*0.1 * floor (mod (tCur / (5. * tCyc), 4.)));\n  ArcConf ();\n  ro = vuMat * vec3 (0., 0., -40.);\n  ro.x -= arc.rad * arc.cs.y * (2. * tCur / tCyc - (nSeg + 1.) / 2.);\n  zmFac = 6. + 2.5 * el;\n  dstFar = 100.;\n  sunDir = vuMat * normalize (vec3 (1., 2., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e;\n  e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}