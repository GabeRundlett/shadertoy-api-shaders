{
    "Shader": {
        "info": {
            "date": "1677637975",
            "description": "color blocks test 2",
            "flags": 0,
            "hasliked": 0,
            "id": "mdt3zX",
            "likes": 0,
            "name": "color blocks test 2",
            "published": 3,
            "tags": [
                "colorblockstest2"
            ],
            "usePreview": 0,
            "username": "tianluo97",
            "viewed": 138
        },
        "renderpass": [
            {
                "code": "// c64 palette\n\nvec3 color1 = vec3(0.761,0.941,1.000);\nvec3 color2 = vec3(0.161,0.420,0.522);\n\nvec3 color3 = vec3(0.286,0.773,0.933); \nvec3 color4 = vec3(0.600,0.827,1.000);\nvec3 color5 = vec3(0.208,0.455,0.553);\nvec3 color6 = vec3(0.592,0.863,0.949);\n\n\nfloat gradientStep(float edge0, float edge1, float x)\n{\n    return smoothstep(edge0, edge1, x);\n\n    // smootherstep\n    //x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0);\n    //return x*x*x*(x*(x*6. - 15.) + 10.);\n    \n    // linear\n    //x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0);\n    //return x;\n}\n\nvec3 gradient(float t, vec3 c1, vec3 c2, vec3 c3, vec3 c4, vec3 c5, vec3 c6)\n{\n    const float colCount = 6.;\n    const float bandSize = 1./(colCount- 1.);\n    const float plateauSize = 0. * (bandSize/2.);\n    float i = 0.;\n\treturn\n        + (c1 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c2 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c3 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c4 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c5 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        + (c6 * (1.-gradientStep(plateauSize,bandSize-plateauSize, abs(t-bandSize*i++))))\n        ;\n}\n\n//The shader code that embeds a 938x84 frame buffer at its largest size without stretching the input\n\nconst vec2 target_resolution = vec2(940, 86);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Same texCoord as in Minecraft\n    vec2 texCoord = fragCoord/iResolution.xy;\n    // Own uv variable\n    vec2 uv = texCoord;\n    \n    // Center origin around screen center (range -0.5, 0.5)\n    uv -= .5;\n    \n    // Squish image in excessive dimension\n    float r = (iResolution.x/iResolution.y) / (target_resolution.x/target_resolution.y);\n    if (r >= 1.) uv.x *= r;\n    else uv.y /= r;\n    \n    // Recenter origin to start at 0 (range 0.0, 1.0)\n\tuv += .5;\n    uv.y -= 0.5/r - 0.5;    \n    \n    float offset1 = iTime*0.04;\n    offset1 = uv.x - offset1;\n    float x1 = mod(offset1,1.0);\n    \n    float offset2 = iTime*0.04;\n    offset2 = uv.x + offset2;\n    float x2 = mod(offset2,1.0);\n    \n    float offset3 = iTime*0.04;\n    offset3 = uv.x - offset3;\n    float x3 = mod(offset3,1.0);\n    \n    if (uv.y < 0.37)\n        fragColor = vec4(gradient(x1 ,  color2, color2,  color1, color2, color1,color2),1);\n    else if(uv.y < 0.676)\n        fragColor = vec4(gradient(x2 ,  color1, color3,   color1,color3, color3, color1),1);\n    else\n        fragColor = vec4(gradient(x3 , color1, color4, color4, color1, color4, color1),1);\n    \n    // band\n    float f = fract(uv.y*3.0);\n    // borders\n    //fragColor.rgb *= smoothstep( 0.49, 0.47, abs(f-0.5) );\n    // shadowing\n    //fragColor.rgb *= 0.5 + 0.5*sqrt(4.0*f*(1.0-f));\n    \n    fragColor = sqrt(fragColor);\n    \n    // Black bars at the sides\n    if (uv.x < 0. || uv.x > 1. || uv.y < 0. || uv.y > 1.) fragColor = vec4(0);    \n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}