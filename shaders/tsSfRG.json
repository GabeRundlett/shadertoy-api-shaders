{
    "Shader": {
        "info": {
            "date": "1590258129",
            "description": "A newton-rhapson fractal that solves a Lissajous curves of 3 points. Some color gradients and smoothing are applied.",
            "flags": 0,
            "hasliked": 0,
            "id": "tsSfRG",
            "likes": 4,
            "name": "newton-rhapson Lissajous",
            "published": 3,
            "tags": [
                "fractal",
                "newtonrhapson"
            ],
            "usePreview": 0,
            "username": "asiermarzo",
            "viewed": 403
        },
        "renderpass": [
            {
                "code": "#define sLenght(a) dot((a),(a))\n\nvec2 cInv(vec2 c){\n\tfloat sl = dot(c,c);\n\treturn vec2(c.x / sl, -c.y / sl);\n}\n\nvec2 cMul(vec2 a, vec2 b){\n\tvec4 t = a.xyxy * b.xyyx;\n\treturn vec2(t.x - t.y, t.z + t.w);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tfloat zoom = (sin(iTime/4.0)+1.0) * 8.0 + 1.0;\n    vec2 p = -(zoom/2.0) + zoom * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\t\n\tfloat t = iTime/2.0;\n\t\n\t//setting roots of a third grade poly using a Lissajous curve\n    vec2 root1 = vec2(sin(t + 0.00000000) , sin(2.0 * t + 0.00000000));\n\tvec2 root2 = vec2(sin(t + 2.09439510) , sin(2.0 * t + 2.09439510));\n\tvec2 root3 = vec2(sin(t + 4.18879020) , sin(2.0 * t + 4.18879020));\n\t\n\tconst int maxIters = 16;\n\tfloat tolerance = 1e-8;\n\tvec2 r1,r2,r3;\n\tvec2 prevP = p;\n\tfloat iters = 0.0;\n\t\n\tr1 = p-root1;\n\tr2 = p-root2;\n\tr3 = p-root3;\n\n\tfor(int iterations = 0; iterations < maxIters; iterations++ ){\n\t\tprevP = p;\n\t\t//newton-rhapson method iteration\n\t\tp = p - cInv( cInv(r1) + cInv(r2) + cInv(r3) );\n\t\t\n\t\t//check how near we are from the nearest root\n\t\tr1 = p-root1;\n\t\tr2 = p-root2;\n\t\tr3 = p-root3;\n\t\tif (min(sLenght(r1),min(sLenght(r2),sLenght(r3))) < tolerance ) {break;}\n\t\titers += 1.0;\n\t}\n\tfloat co = iters;\n\t\n\t//the code could be more compact but repeating code makes changing the gradients easier\n\tfloat l1 = length(p-root1);\n\tfloat l2 = length(p-root2);\n\tfloat l3 = length(p-root3);\n\tfloat dist0,dist1;\n\tfloat tol = log(tolerance);\n    if (l1 <= l2 && l1 <= l3){\n\t\tdist0 = log(sLenght(prevP-root1));\n\t\tdist1 = log(sLenght(p-root1));\n\t\tif (dist1 < tol && dist0 > tol) { co += (tol - dist0) / (dist1 - dist0); }\n\t\tco = clamp(co/float(maxIters),0.0,1.0);\n\t\t\n\t\t//gradient for root1\n\t\tfragColor = vec4(\n\t\t\t0.5+0.89*cos(6.2831855*co+0.0),\n\t\t\t0.5+0.48000002*cos(25.132742*co+2.0734513),\n\t\t\t0.5+0.38*cos(50.265484*co+4.1469026),\n\t\t\t1.0);\n\t\t\t\n\t}else if (l2 <= l1 && l2 <= l3){\n\t\tdist0 = log(sLenght(prevP-root2));\n\t\tdist1 = log(sLenght(p-root2));\n\t\tif (dist1 < tol && dist0 > tol) { co += (tol - dist0) / (dist1 - dist0); }\n\t\tco = clamp(co/float(maxIters),0.0,1.0);\n\t\t\n\t\t//gradient for root2 \n\t\tfragColor = vec4(\n\t\t\t0.5+0.6*cos(2.0106194*co+-1.5079645),\n\t\t\t0.5+1.0*cos(4.5867257*co+2.576106),\n\t\t\t0.5+0.82*cos(3.015929*co+2.3247786),\n\t\t\t1.0);\n\t\t\t\n\t}else if (l3 <= l2 && l3 <= l1){\n\t\tdist0 = log(sLenght(prevP-root3));\n\t\tdist1 = log(sLenght(p-root3));\n\t\tif (dist1 < tol && dist0 > tol) { co += (tol - dist0) / (dist1 - dist0); }\n\t\tco = clamp(co/float(maxIters),0.0,1.0);\n\t\t\n\t\t//gradient for root3 \n\t\tfragColor = vec4( .5+.5*cos(6.2831*co+0.0),\n                         .5+.5*cos(6.2831*co+0.4),\n                         .5+.5*cos(6.2831*co+0.7),\n                         1.0 );\n\t\t\t\t\t\t \n\t}else{\n\t\tfragColor = vec4(0.0 , 0.0, 0.0, 1.0 );\n\t}\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}