{
    "Shader": {
        "info": {
            "date": "1628771765",
            "description": "this is a simple lighting",
            "flags": 0,
            "hasliked": 0,
            "id": "Nt2XDG",
            "likes": 3,
            "name": "lighting02",
            "published": 3,
            "tags": [
                "3d"
            ],
            "usePreview": 0,
            "username": "wangxiaochen",
            "viewed": 262
        },
        "renderpass": [
            {
                "code": "#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n#define Light_pos vec3(5.,5.,9.)\n#define selfcol vec3(.9,.9,.9)\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\nvec3 spectrum(float n) {\n    return pal( n, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.1,0.5,0.9) );\n}\nfloat smin(float a,float b,float h){\n    float c=clamp((b-a)/h*0.5+0.5,0.,1.);\n    //return c;\n    return mix(b,a,c)-h*c*(1.0-c);\n}\n\nmat2 rot(float a){\n   float c=sin(a);\n   float s=cos(a);\n    return mat2(c,s,-s,c);\n    \n}\nfloat GetDist(vec3 p){\n    vec4 s=vec4(0.,1.,6.,2.);\n    float spheredist=length(p-s.xyz)-s.w;\n    float planedist=p.y;\n    float d=smin(spheredist,planedist,.9);\n    return d;\n}\nfloat rayMarch(vec3 ro,vec3 rd){\n    float d0=0.;\n    for(int i=0;i<MAX_STEPS;i++){\n        vec3 p=ro+rd*d0;\n        float ds=GetDist(p);\n        d0+=ds;\n        if(d0>MAX_DIST||ds<SURF_DIST)break;\n    }\n    return d0;\n}\nvec3 getNormal(vec3 p){\n    float l= GetDist(p);\n    vec2 cau=vec2(.01,0.);\n    vec3 n=normalize(vec3(l-GetDist(p-cau.xyy),\n                          l- GetDist(p-cau.yxy),\n                          l- GetDist(p-cau.yyx)\n                           ));\n    return n;\n    \n}\nfloat  getLight(vec3 p){\n    vec3 ld=Light_pos;\n    //shadow\n    ld.xz*=rot(iTime);\n    vec3 li=normalize(ld-p);\n    vec3 sn=getNormal(p);\n    float sh=rayMarch(p+sn*SURF_DIST*2.,li);\n    float dif=clamp(dot(sn,li),0.,1.) ;\n        if(sh<length(ld-p)) {\n            dif*=.5;\n        }\n    return dif;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n     vec3 ld=Light_pos;\n    ld.xz*=rot(iTime);\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 ro=vec3(0.,3.,-3);\n    vec3 rd=normalize(vec3(uv.x,uv.y-.2,1));\n    float d= rayMarch(ro,rd);\n    vec3 p=ro+rd*d;\n    vec3 n=getNormal(p);\n    float difu=getLight(p);\n    float ndotv=max(0.,dot(normalize(rd),n));\n    vec3 halfh=normalize(normalize(-rd)+normalize(ld-p));\n    float ndothalfh=max(0.,dot(halfh,n));\n    vec3 col =mix(vec3(difu)*selfcol,spectrum(ndothalfh),0.1);\n    col+=vec3(pow(ndothalfh,25.));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}