{
    "Shader": {
        "info": {
            "date": "1713238344",
            "description": "More info [url]https://twitter.com/iquilezles/status/1779732569032114466[/url]. GREEN screen means the CheckGrade method IS valid, RED means it's invalid",
            "flags": 0,
            "hasliked": 0,
            "id": "lcV3Wy",
            "likes": 10,
            "name": "Trolling",
            "published": 3,
            "tags": [
                "1d"
            ],
            "usePreview": 0,
            "username": "iq",
            "viewed": 1658
        },
        "renderpass": [
            {
                "code": "// https://twitter.com/iquilezles/status/1779732569032114466\n\n// GREEN screen means the CheckGrade method is correct\n// RED   screen means the CheckGrade method is incorrect\n\n\n#define kA 65\n#define kB 66\n#define kC 67\n#define kD 68\n#define kF 70\n\n//---------------------------------------------------------------------------\n\n// common sense imho\nint CheckGrade_0( int s )\n{\n    if( s>=90 ) return kA;\n    if( s>=80 ) return kB;\n    if( s>=70 ) return kC;\n    if( s>=60 ) return kD;\n                return kF;\n}\n\n// sama idea, probably faster (more values early exit, assuming grades are uniformly distributed, which probably aren't)\nint CheckGrade_1( int s )\n{\n    if( s<60 ) return kF;\n    if( s<70 ) return kD;\n    if( s<80 ) return kC;\n    if( s<90 ) return kB;\n               return kA;\n}\n\n// the other common sense one, imho\nint CheckGrade_2( int s )\n{\n    return (s>=90) ? kA:\n           (s>=80) ? kB:\n           (s>=70) ? kC:\n           (s>=60) ? kD:\n                     kF;\n}\n\n// same as above, using only add, sub and bit manipulation, for the trolling\nint CheckGrade_3( int s )\n{\n\tuint n = uint(((s<<4)+(s<<3)+s-1477)>>8);\n\treturn 70-int(((n>>31)-1u)&(n+2u));\n}\n\n// pretending we are in an old 8 bit microcontroller\nint CheckGrade_4( int s )\n{\n    return int[](kF,kF,kF,kF,kF,kF,kD,kC,kB,kA)\n           [((s<<4)+(s<<3)+s+54)>>8]; // can use 54 to 59\n}\n\n// same method as above, but assuming I'm in a CPU with \n// hardware multiplies (compiler converts div to mul)\nint CheckGrade_5( int s )\n{\n    return int[](kF,kF,kF,kF,kF,kF,kD,kC,kB,kA,kA)[s/10];\n}\n\n//---------------------------------------------------------------------------\n\n// by @amohr (.bsky.social), no math, just LUT\nint CheckGrade_6( int score )\n{\n    return int[](\n    kF,kF,kF,kF,kF,kF,kF,kF,kF,kF,\n    kF,kF,kF,kF,kF,kF,kF,kF,kF,kF,\n    kF,kF,kF,kF,kF,kF,kF,kF,kF,kF,\n    kF,kF,kF,kF,kF,kF,kF,kF,kF,kF,\n    kF,kF,kF,kF,kF,kF,kF,kF,kF,kF,\n    kF,kF,kF,kF,kF,kF,kF,kF,kF,kF,\n    kD,kD,kD,kD,kD,kD,kD,kD,kD,kD,\n    kC,kC,kC,kC,kC,kC,kC,kC,kC,kC,\n    kB,kB,kB,kB,kB,kB,kB,kB,kB,kB,\n    kA,kA,kA,kA,kA,kA,kA,kA,kA,kA,kA)\n    [score];\n}\n\n// by Layla Mah (@MissQuickstep). Compromise LUT/ALU\nint CheckGrade_7( int score )\n{\n    return int[](\n    kF,kF,kF,kF,kF,\n    kF,kF,kF,kF,kF,\n    kF,kF,kF,kF,kF,\n    kF,kF,kF,kF,kF,\n    kF,kF,kF,kF,kF,\n    kF,kF,kF,kF,kF,\n    kD,kD,kD,kD,kD,\n    kC,kC,kC,kC,kC,\n    kB,kB,kB,kB,kB,\n    kA,kA,kA,kA,kA,kA)\n    [score>>1];\n}\n\n// by Chris Green (@ChrisGr93091552) using a Symbolic Regression Solver\nint CheckGrade_8( int s )\n{\n  int n = int(floor(((float(s)+2.0)*0.045283969)-(cos(cos(float(s)*0.031141007)*1.5790931)*1.9852251)));\n  return int[](kF,kD,kC,kB,kA)[n];\n}\n\n// by Theron Tarigo (ttg)\nint CheckGrade_9( int score )\n{\n    float i=floor(max(float(score),50.)/-10.01+63.991);\n    // [54,55,56,57,58] => [65,66,67,68,70]\n    return int(i*1.21);\n}\n\n//---------------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0,1,0);\n\n    for( int score=0; score<=100; score++ )\n    {\n        int grade_a = CheckGrade_0(score);\n        int grade_b = CheckGrade_3(score);\n        \n        if( grade_a != grade_b ) // make sure method is correct\n        {\n            col = vec3(1,0,0);\n            break;\n        }\n    }\n\n    fragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}