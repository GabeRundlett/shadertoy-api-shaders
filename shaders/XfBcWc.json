{
    "Shader": {
        "info": {
            "date": "1723075099",
            "description": "Generated by AI\n\nPS. don't believe a word of it.",
            "flags": 0,
            "hasliked": 0,
            "id": "XfBcWc",
            "likes": 0,
            "name": "[AI] Möbius",
            "published": 3,
            "tags": [
                "ai"
            ],
            "usePreview": 0,
            "username": "hvaara",
            "viewed": 89
        },
        "renderpass": [
            {
                "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Möbius transformation\n    float x = fragCoord.x / iResolution.x;\n    float y = fragCoord.y / iResolution.y;\n    float a = 0.5; // scale\n    float b = 0.2; // translation\n    float c = 0.1; // rotation\n    float d = -0.3; // rotation\n    float t = 0.1; // translation\n    float u = 0.2; // translation\n\n    float x_new = (a * x + b * y + t) / (c * x + d * y + u);\n    float y_new = (c * x - a * y + u) / (d * x + b * y + t);\n\n    // rest of the code remains the same\n    float frequency = 1000.0 + sin(iTime * 0.01) * 10.0;\n    float amplitude = 0.1 + sin(iTime * 0.01) * 0.05;\n\n    float pattern = sin(x_new * frequency + y_new * frequency + sin(x_new * 2.0) + sin(y_new * 2.0) + iTime * 0.01 + sin(x_new * 10.0 + y_new * 10.0) + cos(x_new * 5.0 + y_new * 5.0) + tan(x_new * 2.0 + y_new * 2.0));\n    pattern += sin(y_new * frequency + x_new * frequency + sin(x_new * 2.0) + sin(y_new * 2.0) + iTime * 0.01 + sin(x_new * 10.0 + y_new * 10.0) + cos(x_new * 5.0 + y_new * 5.0) + tan(x_new * 2.0 + y_new * 2.0));\n    pattern += sin((x_new + y_new) * frequency + sin(x_new * 2.0) + sin(y_new * 2.0) + iTime * 0.01 + sin(x_new * 10.0 + y_new * 10.0) + cos(x_new * 5.0 + y_new * 5.0) + tan(x_new * 2.0 + y_new * 2.0));\n\n    float threshold = 0.5;\n    float shape = step(pattern, threshold);\n\n    // color gradient\n    vec3 color = vec3(0.0);\n    float gradient = (x_new + y_new) * 0.5; // gradient direction\n    color.r = sin(gradient * 3.14 + 0.2) * 0.5 + 0.5; // heavy red\n    color.g = sin(gradient * 3.14 + 1.0) * 0.5 + 0.5; // orange\n    color.b = sin(gradient * 3.14 + 2.5) * 0.5 + 0.5; // blue\n\n    // mix with shape\n    color = mix(color, vec3(1.0), shape);\n\n    fragColor = vec4(color, 1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}