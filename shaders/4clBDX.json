{
    "Shader": {
        "info": {
            "date": "1724471434",
            "description": "Inspired by @Shanes' recent shaders, just trying to figure the hexagon/cube thing.",
            "flags": 0,
            "hasliked": 0,
            "id": "4clBDX",
            "likes": 17,
            "name": "Byt3-daily-012",
            "published": 3,
            "tags": [
                "2d",
                "cube",
                "hexagon",
                "tile"
            ],
            "usePreview": 0,
            "username": "byt3_m3chanic",
            "viewed": 166
        },
        "renderpass": [
            {
                "code": "/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Inspired by @Shanes' recent shaders, just trying to figure the hexagon/cube thing.\n\n    Byt3-daily-012\n    08/23/2024  @byt3_m3chanic\n    \n*/\n\n#define R     iResolution\n#define T     iTime\n#define M     iMouse\n\n#define PI    3.141592653\n#define PI2   6.283185307\n\nfloat hash21(vec2 a) { return fract(sin(dot(a, vec2(27.609, 57.583)))*43758.5453); }\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\n// Hexagon grid system, can be simplified but\n// written out long-form for readability. \n// return vec2 uv and vec2 id\nvec4 hexgrid(vec2 uv) {\n    vec2 p1 = floor(uv/vec2(1.732,1))+.5;\n    vec2 p2 = floor((uv-vec2(1,.5))/vec2(1.732,1))+.5;\n    \n    vec2 h1 = uv-p1*vec2(1.732,1);\n    vec2 h2 = uv-(p2+.5)*vec2(1.732,1);\n    return dot(h1,h1) < dot(h2,h2) ? vec4(h1,p1) : vec4(h2,p2+.5);\n}\n\nvec3 hsv( vec3 a ) {\n    vec3 c = a + vec3(T*.1,0,0);\n    vec3 rgb = clamp(abs(mod(c.x*2.+vec3(0,4,2),6.)-3.)-1.,0.,1.);\n    return c.z * mix(vec3(1),rgb,c.y);\n}\n\nfloat truch(vec2 uv, vec2 id) {\n    vec2 vv = uv;\n    vec2 vd = floor(vv*10.);\n    vv = fract(vv*10.)-.5;\n\n    float rnd = hash21(vd+id);\n    if(rnd>.5) vv.x = -vv.x;\n    \n    vec2 q = length(vv+.5)<length(vv-.5)? vv+.5:vv-.5;\n    \n    float d = abs(length(q)-.5)-.15;\n    if(fract(rnd*43.57)>.77) d = min(length(vv.x)-.125,length(vv.y)-.125);\n    \n    return d;\n}\n\nvoid cube(inout vec3 C, vec2 uv, vec2 id, float px, float rnd, float lvl) {\n\n    float ln = .015, hn = ln/2.;\n    float rd = hash21(lvl+id*32.23);\n    float hs = rd>.3?1.155:.65+.55*sin((rnd*PI2)+T*1.33);\n    \n    float d = max(abs(uv.x)*.866025 + abs(uv.y)/2., abs(uv.y))-(hs*.42);\n    C = mix(C,vec3(0),smoothstep(px,-px,abs(d)-ln));\n    \n    uv.x -= (hs*.515);\n    float tbase =length( abs(uv.x)*.866025 + abs(uv.y)/2.)- (hs*.445);\n    \n    float e = min(tbase, length(uv.y));\n    \n    rnd = fract(rnd*52.47);\n    rnd += lvl*1.5;\n    \n    // color sides\n    C = mix(C,hsv(vec3(rnd,.5,.8)),smoothstep(px,-px,max(tbase,d)) );\n    C = mix(C,hsv(vec3(rnd+.15,1,.4)),smoothstep(px,-px,max(max(uv.y,-tbase),d)) );\n    C = mix(C,hsv(vec3(rnd+.75,1,.2)),smoothstep(px,-px,max(max(max(-uv.y,uv.x),-tbase),d)) );\n\n    if(lvl>1.&&fract(rd*52.47)>.36)C = mix(C,C*.25,smoothstep(px,-px,length(uv+vec2(.5,0)*hs)-(hs*.35)));\n    \n    // truchet patterns\n    vec2 vv = vec2(uv.x*.866025,uv.y/2.);\n    // math is kind of jank - wasnt sure how to properly do this so \n    // a lot of hunt and peck values\n    id+=floor(rnd*15.);\n    // top side\n    vv.x += .51;\n    vv *= rot(.78);\n    float t = truch(vv*1.2,id);\n    if(rd>.3) C = mix(C,clamp(C+.25,vec3(0),vec3(1)),smoothstep(px,-px,max(max(tbase,d),t)) );\n    \n    // left side\n    vv = vec2(uv.x*.866025,uv.y/1.33)+vec2(uv.y*.5,0);\n    vv.x += .65;\n    t = truch(vv*vec2(.9,1.1),id);\n    if(rd>.3)C = mix(C,clamp(C+.15,vec3(0),vec3(1)),smoothstep(px,-px,max(max(uv.y,max(d,-tbase)),t) ) );\n    \n    // right side\n    vv = vec2(uv.x*.866025,uv.y/1.33)-vec2(uv.y*.5,0);\n    vv.x += .65;\n    t = truch(vv*vec2(.9,1.1),id);\n    if(rd>.3)C = mix(clamp(C-.15,vec3(0),vec3(1)),C,smoothstep(px,-px,max(max(max(-uv.y,uv.x),-tbase),t)) );\n\n    C = mix(C,vec3(0),smoothstep(px,-px,max(abs(e)-hn,d)));\n\n}\n\nconst float scale = 5.;\nconst float mx = 3.;\nconst float mz = mx-1.;\n\nvoid mainImage( out vec4 fragColor, in vec2 F )\n{\n    vec3 C = vec3(0);\n    vec2 uv = (2.*F-R.xy)/max(R.x,R.y);\n    float px = fwidth(uv.x);\n    \n    uv *= scale;\n    uv.y += T*.065;\n    \n    vec4 H;\n    vec2 p, id;\n    float rnd;\n    \n    // layer stack loop - smallest to large\n    for(float i=0.;i<mx;i++) {\n        float sc = mx-i;\n        \n        H = hexgrid(uv.yx*sc);\n        p = H.xy, id = H.zw;\n        rnd = hash21(id+i); \n        if(rnd>.25) cube(C,p,id,px,rnd,i+.5);\n        if(i<mz) C *= (i+.5)*.25;\n        uv.y += T*.125;\n    }\n    \n    fragColor = vec4(pow(C,vec3(.4545)),1);\n}\n\n\n\n\n\n\n\n\n\n\n// end\n\n",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}