{
    "Shader": {
        "info": {
            "date": "1540822719",
            "description": "Multiplicative Perlin noise: early stop when 0 should optimize perfs. Spoiler: no, if text fetch\nno opt (OPT=0) :  30 fps  (tex fetch)  |  6.7 (procedural)\nopt only LF: OPT = 1,2,3,4,5:  10, 12, 12, 15, 3.3 fps  |  7.5\ntest all freq (OPT=-1): 2 fps  | 8.6",
            "flags": 0,
            "hasliked": 0,
            "id": "4lcfRs",
            "likes": 0,
            "name": "so hard to optimize on GPU",
            "published": 3,
            "tags": [
                "procedural",
                "optimization"
            ],
            "usePreview": 0,
            "username": "FabriceNeyret2",
            "viewed": 698
        },
        "renderpass": [
            {
                "code": "#define OPT  2     // 0: no opt   -1: all freq   >0: only LF < OPT\n#define SHOW 0     // show savings in red (attention: costs)\n#define Z  0       // min(0,iFrame) (forbid unroll) or 0 \n#define N 10       // recursion depth // simple window: 6\n\n#define T(U)  2.* smoothstep(.3,.7, tex(U) )\n\n#if 1  // 1: rand texture  0: procedural texture \n\n#  define REPEAT 1e4 // for significant timing\n#  define tex(U) textureLod(iChannel0, U,lod+float(i)).r // fractal stop => dont trust MIPmap\n#  define SIZE 1.\n\n#else\n\n#  define REPEAT 1e3 // for significant timing\n#  define SIZE iChannelResolution[0].y\n\nfloat tex(vec2 U) {\n#define hash(U) fract(sin(dot(U, vec2(12.9898, 78.233))) * 43758.5453)\n    vec2 F = fract(U), I = U-F; \n\tfloat c00 = hash( I+ vec2(0,0) );\n\tfloat c01 = hash( I+ vec2(0,1) );\n\tfloat c11 = hash( I+ vec2(1,1) );\n\tfloat c10 = hash( I+ vec2(1,0) );\n    //F = smoothstep(0.,1.,F);    \n    return mix( mix(c00, c10, F.x), \n                mix(c01, c11, F.x), F.y);\n}\n#endif\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    float scale = iChannelResolution[0].y*iResolution.y / 8.,\n            lod = log2(iChannelResolution[0].y/scale);\n    U *= SIZE/scale;\n    \n  float o = 0.;    \n  for (float n=0.; n<REPEAT; n++) {// repeat for measuring perfs\n      \n    vec2 u = U;\n    float t = 1.+min(0.,iTime+n);  // to prevent optimization\n\n#if OPT>0                          // --- early exit only up to freq OPT\n\n    int i;\n    for (i=Z; i<OPT; i++) {\n        t *= T(u); u *= 2.;\n      //if (t==0.) break;          // so more costly !\n    }\n    if (t>0.)  {\n        for (; i<N; i++) {\n            t *= T(u); u *= 2.;\n    }   }\n#   if SHOW\n      else { O.r++; return; }\n#   endif\n      \n# else\n      \n    for (int i=Z; i<N; i++) {\n# if OPT<0                         // --- early exit at any freq\n        if (t==0.) \n#   if SHOW\n            { O.r++; return; }\n#   else\n            break;\n#   endif\n# endif                            // --- else no early exit\n        t *= T(u); u *= 2.;\n    }\n\n    #endif\n    o += t;\n  }\n    o /= REPEAT;\n    O = vec4(exp(-o));    // density to extinction\n    O = sqrt(O);          // gamma correction\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "texture",
                        "id": 30,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "repeat"
                        },
                        "src": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}