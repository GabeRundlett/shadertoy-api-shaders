{
    "Shader": {
        "info": {
            "date": "1658798764",
            "description": "Exploring the curves of our RGB values as our reflection becomes more anisotropic",
            "flags": 32,
            "hasliked": 0,
            "id": "7syfDy",
            "likes": 0,
            "name": "IBL Anisotropic Analysis",
            "published": 3,
            "tags": [
                "curves",
                "ibl",
                "analysis"
            ],
            "usePreview": 0,
            "username": "BeardThings",
            "viewed": 43
        },
        "renderpass": [
            {
                "code": "//#define VIEW_SDF\n//#define VIEW_THETA\n#define VIEW_PHI\n//#define VIEW_ISOTROPIC_VALUE\n#define VIEW_FOURIER\n#define FOURIER_N 4\n//#define VIEW_COEFS\n#define LERP_COEF\n\n// Note: Can we find a function to minimize the error on which\n//       point we should pick here?\n#define PHI_P 0.8\n\n// What point along our function do we start to see the energy decay?\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat SDF(vec3 p, out vec3 c)\n{\n    vec3 d = normalize(p);\n    \n    float theta = acos(d.y);\n    float phi = atan(d.z,d.x);\n    phi = phi < 0.0 ? 2.0*Pi + phi : phi;\n    vec4 v = texture(iChannel0,vec2(phi/(2.0*Pi), theta/Pi*2.0));\n    float r = v.r/v.a;\n\n    if(theta >= Pi*0.5)\n    {\n        r = 0.0;\n    }\n\n    c = vec3(1.0,1.0,1.0)*r;\n    return sphere(p, r);\n}\n\nvec3 Norm(vec3 p)\n{\n    const float cEps = 0.01;\n \n    vec3 c;\n\treturn normalize\n\t(\tvec3\n\t\t(\tSDF(p + vec3(cEps, 0, 0),c\t) - SDF(p - vec3(cEps, 0, 0),c),\n\t\t\tSDF(p + vec3(0, cEps, 0),c\t) - SDF(p - vec3(0, cEps, 0),c),\n\t\t\tSDF(p + vec3(0, 0, cEps),c\t) - SDF(p - vec3(0, 0, cEps),c)\n\t\t)\n\t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n#ifdef VIEW_PHI\n    vec4 li = texture(iChannel0, vec2(fragCoord.x/iResolution.x,iMouse.x/iResolution.x));\n#elif defined(VIEW_THETA)\n    vec4 li = texture(iChannel0, vec2(iMouse.x/iResolution.x,fragCoord.x/iResolution.x));\n#endif\n    li.rgb *= 1.0/li.a;\n    \n    float lr = clamp(1.0-abs(li.r - uv.y)*(iResolution.y/3.0),0.0,1.0);\n    float lg = clamp(1.0-abs(li.g - uv.y)*(iResolution.y/3.0),0.0,1.0);\n    float lb = clamp(1.0-abs(li.b - uv.y)*(iResolution.y/3.0),0.0,1.0);\n    \n// View PHI as basis\n#ifdef VIEW_FOURIER\n    float v = 0.0;\n    for(int i = 0; i < FOURIER_N; i++)\n    {\n#ifdef LERP_COEF\n    #ifdef VIEW_PHI\n        int phi = int(iResolution.y*PHI_P);\n    #else\n        int phi = int(PHI_P * iResolution.y);\n    #endif \n\n        vec4 coef0 = texelFetch(iChannel2, ivec2(i, 0), 0);\n        vec4 coef1 = texelFetch(iChannel2, ivec2(i, phi), 0);\n        \n    #ifdef VIEW_PHI\n        float t = iMouse.x/iResolution.x/PHI_P;\n    #else\n        float t = fragCoord.x / iResolution.x/PHI_P;\n    #endif\n        \n        vec4 coef = mix(coef0, coef1, smoothstep(0.0, 1.0, t*t));\n#else // LERP_COEF\n\n    #ifdef VIEW_PHI\n        int y = int(iMouse.x/iResolution.x*iResolution.y)+1;\n    #elif defined(VIEW_THETA)\n        int y = int(fragCoord.x/iResolution.x*iResolution.y)+1;\n    #endif // VIEW_PHI\n        vec4 coef = texelFetch(iChannel2, ivec2(i, y), 0);\n#endif // LERP_COEF\n\n#ifdef VIEW_PHI\n        float x = fragCoord.x/iResolution.x;\n#elif defined(VIEW_THETA)\n        float x = iMouse.x / iResolution.x;\n#endif\n\n        v += dot(coef, basis(x, float(i*2)));\n    }\n    \n#if defined(LERP_COEF)\n\n#if defined(VIEW_THETA)\n    float p = length(fragCoord.xy-vec2(PHI_P*iResolution.x, v*iResolution.y));\n    p = max((5.0-p),0.0);\n    lr += p;\n    lg += p;\n    lb += p;\n#elif defined(VIEW_PHI)\n    lr += int(fragCoord.x) == int(PHI_P * iResolution.x) ? 1.0 : 0.0;\n    lg += int(fragCoord.x) == int(PHI_P * iResolution.x) ? 1.0 : 0.0;\n    lb += int(fragCoord.x) == int(PHI_P * iResolution.x) ? 1.0 : 0.0;\n#endif\n    \n#endif // LERP_COEF\n    \n    lr += clamp(1.0-abs(v - uv.y)*(iResolution.y/3.0),0.0,1.0);\n    lg += clamp(1.0-abs(v - uv.y)*(iResolution.y/3.0),0.0,1.0);\n    lb += 0.0;\n#endif // VIEW_FOURIER\n    \n#ifdef VIEW_ISOTROPIC_VALUE\n    vec4 ti = texture(iChannel0, vec2(fragCoord.x/iResolution.x,0.0));\n    ti.rgb /= ti.a;\n    lr += clamp(1.0-abs(ti.r - uv.y)*(iResolution.y/3.0),0.0,1.0);\n    lg += clamp(1.0-abs(ti.g - uv.y)*(iResolution.y/3.0),0.0,1.0);\n    lb += clamp(1.0-abs(ti.b - uv.y)*(iResolution.y/3.0),0.0,1.0);\n#endif // VIEW_ISOTROPIC_VALUE\n    \n    fragColor.rgb = vec3(lr,lg,lb);\n    \n#ifndef VIEW_SDF\n    fragColor.rgb += li.rgb*0.5;\n#else\n    vec4 final = vec4(0.0,0.0,0.0,0.0);\n    {\n        vec2 screenSpace = uv * 2.0 - 1.0;\n\n        float time = iTime * 0.25;\n        vec3 o = vec3(sin(time), 0.0, cos(time)) * 2.0;\n\n        vec3 f = normalize(vec3(-o.x,0.0,-o.z));\n        vec3 u = vec3(0,1,0);\n        vec3 r = normalize(cross(f, u));\n\n        vec3 direction = normalize(f * 2.0 + \n                             r * screenSpace.x * iResolution.x / iResolution.y +\n                             u * screenSpace.y);\n        final = vec4(lr,lg,lb,0.0) + pow(texture(iChannel1, direction), vec4(SHARPNESS));\n    \n        float d = 0.0;\n        for(float i = 0.; i < 64.; ++i)\n        {\n            vec3 pos = o + direction * d;\n\n            vec3 c;\n            float sdf = SDF(pos,c);\n            d += sdf*0.4;\n\n            const float EPSILON = 0.01;\n            if(sdf < EPSILON)\n            {   \n                final.rgb = vec3(1.0,1.0,1.0)\n                    *(abs(dot(Norm(pos),vec3(0.707,0.0,0.707)))*0.8+0.2);\n                break;\n            }\n        }\n    }\n    fragColor.rgb += final.rgb;\n#endif // VIEW_SDF\n\n#ifdef VIEW_COEFS\n    fragColor.rgb = abs(texelFetch(iChannel2, ivec2(1.0,int(fragCoord.y)),0).rgb)*40.0;\n#endif // VIEW_COEFS\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 1,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 2,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            },
            {
                "code": "#define ITERATIONS_PER_FRAME 128.0\n#define ROUGHNESS 0.05\n\nfloat rcp(float a) { return 1.0 / a; }\n\n// http://extremelearning.com.au/how-to-evenly-distribute-points-on-a-sphere-more-effectively-than-the-canonical-fibonacci-lattice/\nconst float golden = (1.0 + sqrt(5.0))/2.0;\nvec2 fibonacci_2d(float i, float N)\n{\n    return vec2(fract(i/golden),i/N);\n}\n\nvec3 hemisphere_ggx_h(float r1, float r2, float a)\n{\n\tfloat cosTheta = sqrt((1.0-r1)*rcp(r1*(a*a-1.0)+1.0));\n\tfloat sinTheta = sqrt(1.0 - cosTheta*cosTheta);\n\tfloat phi = 2.0 * Pi * r2;\n\treturn vec3( sinTheta*cos(phi), sinTheta*sin(phi), cosTheta );\n}\n\nfloat ggx_pdf(float roughness, float hdotn, float vdoth)\n{\n\tfloat t = hdotn*hdotn*roughness*roughness - (hdotn*hdotn - 1.0);\n\tfloat D = (roughness*roughness)/(t*t)*rcp(Pi);\n\treturn D*hdotn*rcp(4.0*abs(vdoth));\n}\n\nmat3x3 basis_from_normal(vec3 n)\n{\n\t// Frisvad ONB from https://backend.orbit.dtu.dk/ws/portalfiles/portal/126824972/onb_frisvad_jgt2012_v2.pdf\n\t// revised from Pixar https://graphics.pixar.com/library/OrthonormalB/paper.pdf#page=2&zoom=auto,-233,561\n\tfloat s = n.z>=0.0?1.0:-1.0;\n\tfloat a = -rcp(s + n.z);\n\tfloat b = n.x*n.y*a;\n\tvec3 i = vec3( 1.0 + s * n.x*n.x*a, s * b, -s * n.x );\n\tvec3 j = vec3(b, s + n.y*n.y*a, -n.y);\n\n\treturn mat3x3(i, j, n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 prev = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    if(prev.a >= MAX_ITERATIONS)\n    {\n        fragColor = prev;\n        return;\n    }\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    float phi = uv.x * 2.0 * Pi;\n    float theta = uv.y * Pi * 0.5;\n    \n    vec3 acc = prev.rgb;\n    \n    vec3 r = normalize(vec3(0.0, 0.8, 0.707));\n    mat3x3 rb = basis_from_normal(r);\n    vec3 n = rb*vec3(cos(phi)*sin(theta),sin(phi)*sin(theta),cos(theta));\n    vec3 v = normalize(reflect(-r, n));\n    \n    mat3x3 b = basis_from_normal(n);\n    for(float i = prev.a; i < prev.a+ITERATIONS_PER_FRAME; i+=1.0)\n    {\n        const float roughness = ROUGHNESS;\n        vec2 r = fibonacci_2d(i, MAX_ITERATIONS);\n        vec3 h = b*hemisphere_ggx_h(r.x, r.y, roughness);\n        \n        vec3 l = reflect(-v,h);\n        if(dot(n,l)>0.0)\n        {\n            vec3 s = pow(srgb_to_linear(texture(iChannel0, l.xzy).rgb),vec3(SHARPNESS));\n            acc += s;\n        }\n    }\n    fragColor = vec4(acc, prev.a + ITERATIONS_PER_FRAME);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "cubemap",
                        "id": 26,
                        "published": 1,
                        "sampler": {
                            "filter": "mipmap",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "false",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    }
                ],
                "name": "Buffer A",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 257
                    }
                ],
                "type": "buffer"
            },
            {
                "code": "#define SHARPNESS 5.0\n#define MAX_ITERATIONS (256.0*64.0)\n\nconst float Pi = 3.14159;\n\nvec3 srgb_to_linear(vec3 srgb)\n{\n    return pow(srgb, vec3(2.2));\n}\n\nvec4 basis(float x, float t)\n{\n    float uv = x * 2.0 * Pi;\n    return vec4(\n        cos((t+0.0)*uv),\n        sin((t+0.0)*uv),\n        cos((t+1.0)*uv),\n        sin((t+1.0)*uv));\n}",
                "description": "",
                "inputs": [],
                "name": "Common",
                "outputs": [],
                "type": "common"
            },
            {
                "code": "//#define QUANTIZE pow(2.0,7.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 p = ivec2(fragCoord);\n    float iter = texelFetch(iChannel0, ivec2(0, 0), 0).a;\n    vec4 prev = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    if(iter >= MAX_ITERATIONS && all(equal(prev, vec4(0.0))))\n    {\n        vec4 b = vec4(0.0);\n        for(int x = 0; x < int(iResolution.x); x++)\n        {\n            vec4 rgb = texelFetch(iChannel0, ivec2(x, p.y), 0);\n            rgb *= 1.0/rgb.a;\n            b += rgb.r * basis(float(x)/iResolution.x, float(p.x*2))*2.0*Pi/iResolution.x/Pi;\n        }\n\n        if(p.x == 0)\n        {\n            b.rg /= 2.0;\n        }\n        \n#ifdef QUANTIZE\n        b = clamp(round(b * QUANTIZE)/QUANTIZE, -1.0, 1.0);\n#endif\n        fragColor = b;\n    }\n    else\n    {\n        fragColor = prev;\n    }\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "buffer",
                        "id": 257,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer00.png"
                    },
                    {
                        "channel": 1,
                        "ctype": "buffer",
                        "id": 258,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/previz/buffer01.png"
                    }
                ],
                "name": "Buffer B",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 258
                    }
                ],
                "type": "buffer"
            }
        ],
        "ver": "0.1"
    }
}