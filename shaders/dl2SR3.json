{
    "Shader": {
        "info": {
            "date": "1676397451",
            "description": ".",
            "flags": 0,
            "hasliked": 0,
            "id": "dl2SR3",
            "likes": 1,
            "name": "frequency red/white/green/yellow",
            "published": 3,
            "tags": [
                "frequency"
            ],
            "usePreview": 0,
            "username": "nobody",
            "viewed": 247
        },
        "renderpass": [
            {
                "code": "const bool symmetrical = false;\nconst float base_hight = 0.3;\n\n\nvec3 red = vec3(1.0, 0.5, 0.5);\nvec3 white = vec3(1.0, 1.0, 1.0);\nvec3 green = vec3(0.5, 1.0, 0.5);\nvec3 yellow = vec3(1.0, 1.0, 0.5);\nvec3 blue = vec3(0.5, 0.5, 1.0);\nvec3 magenta = vec3(1.0, 0.5, 1.0);\n\nuniform vec2 u_resolution;\n\n\n\n\nvec3 B2_spline(vec3 x) { // returns 3 B-spline functions of degree 2\n    vec3 t = 3.0 * x;\n    vec3 b0 = step(0.0, t)     * step(0.0, 1.0-t);\n\tvec3 b1 = step(0.0, t-1.0) * step(0.0, 2.0-t);\n\tvec3 b2 = step(0.0, t-2.0) * step(0.0, 3.0-t);\n\treturn 0.5 * (\n    \tb0 * pow(t, vec3(2.0)) +\n    \tb1 * (-2.0*pow(t, vec3(2.0)) + 6.0*t - 3.0) + \n    \tb2 * pow(3.0-t,vec3(2.0))\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // create pixel coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    float fVBars = 100.0;\n    float fHSpacing = 1.0;\n    \n    float fHFreq = (uv.x * 3.14);\n\tfloat squarewave = sign(sin(fHFreq*fVBars)+1.0-fHSpacing);\n    \n    float x = floor(uv.x * fVBars)/fVBars;\n    float fSample = texture( iChannel0, vec2(abs(2.0 * x - 1.0), 0.25)).x;\n  \n\tfloat fft = squarewave * fSample* 0.5;\n    \n    float fHBars = 100.0;\n    float fVSpacing = 0.180;\n    float fVFreq = (uv.y * 3.14);\n\tfVFreq = sign(sin(fVFreq * fHBars)+1.0-fVSpacing);\n\n    vec2 centered = vec2(1.0) * uv - vec2(1.0);\n    float t = iTime / 100.0;\n    float polychrome = 1.0;\n    vec3 spline_args = fract(vec3(polychrome*uv.x-t) + vec3(0.0, -1.0/3.0, -2.0/3.0));\n    vec3 spline = B2_spline(spline_args);\n    \n    float f = abs(centered.y);\n    float ff = fract(uv.x);\n    vec3 base_color = vec3(1.0, 0.0, 0.0);\n    if (symmetrical) {\n        if (ff < 0.16666666)\n            base_color = mix(red, white, ff * 6.0);\n        else if (ff < 0.33333333)\n            base_color = mix(white, yellow, (ff - 0.16666666) * 6.0);\n        else if (ff < 0.5)\n            base_color = mix(yellow, green, (ff - 0.33333333) * 6.0);\n        else if (ff < 0.66666666)\n            base_color = mix(green, yellow, (ff - 0.5) * 6.0);\n        else if (ff < 0.86666666)\n            base_color = mix(yellow, white, (ff - 0.66666666) * 6.0);\n        else\n            base_color = mix(white, red, (ff - 0.86666666) * 6.0);\n    } else {\n        if (ff < 0.33333333)\n            base_color = mix(red, white, ff * 4.0);\n        else if (ff < 0.66666666)\n            base_color = mix(white, yellow, (ff - 0.33333333) * 4.0);\n        else\n            base_color = mix(yellow, green, (ff - 0.66666666) * 4.0);\n    }\n    vec3 flame_color = pow(base_color, vec3(3.0));\n    \n    float tt = base_hight - uv.y;\n    float df = sign(tt);\n    df = (df + 1.0)/0.5;\n    vec3 col = flame_color * vec3(1.0 - step(fft, abs(base_hight-uv.y))) * vec3(fVFreq);\n    col -= col * df * 0.180;\n    \n\t// output final color\n\tfragColor = vec4(col,1.0);\n}",
                "description": "",
                "inputs": [
                    {
                        "channel": 0,
                        "ctype": "music",
                        "id": 19,
                        "published": 1,
                        "sampler": {
                            "filter": "linear",
                            "internal": "byte",
                            "srgb": "false",
                            "vflip": "true",
                            "wrap": "clamp"
                        },
                        "src": "/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3"
                    }
                ],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}