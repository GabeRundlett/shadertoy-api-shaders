{
    "Shader": {
        "info": {
            "date": "1703366656",
            "description": "Variation on fbm from https://iquilezles.org/articles/warp/",
            "flags": 0,
            "hasliked": 0,
            "id": "Xfs3Rl",
            "likes": 2,
            "name": "Exploring FBM",
            "published": 3,
            "tags": [
                "noise"
            ],
            "usePreview": 0,
            "username": "mgmbass",
            "viewed": 151
        },
        "renderpass": [
            {
                "code": "\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nfloat pattern( in vec2 p )\n{\n    vec2 q = vec2( fbm( p + vec2(0.0,0.0) + 0.07 * -1. * iTime ),\n                   fbm( p + vec2(1.2,1.3) + 0.12 * iTime) );\n\n    vec2 r = vec2( fbm( p + 4.0*q + vec2(1.7,9.2) + 0.11 * iTime ),\n                   fbm( p + 4.0*q + vec2(8.3,2.8) + 0.09 * -1. *iTime));\n\n    return fbm( p + 40.0*r );\n}\n  \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = fract(uv);\n    vec3 color = vec3(0.0);\n    float f = pattern(uv);\n    color = mix(vec3(0.251,0.087,0.910),\n                vec3(0.980,0.121,0.046),\n                f);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
                "description": "",
                "inputs": [],
                "name": "Image",
                "outputs": [
                    {
                        "channel": 0,
                        "id": 37
                    }
                ],
                "type": "image"
            }
        ],
        "ver": "0.1"
    }
}